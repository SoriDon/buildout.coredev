Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2021-08-19T12:34:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/f36e15747ae15ad6ec2609afab8fff93cca499fc

isort and black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/portlets/__init__.py
M plone/app/portlets/assignable.py
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/interfaces.py
M plone/app/portlets/browser/manage.py
M plone/app/portlets/browser/traversal.py
M plone/app/portlets/browser/utils.py
M plone/app/portlets/cache.py
M plone/app/portlets/checker.py
M plone/app/portlets/dashboard.py
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/interfaces.py
M plone/app/portlets/manager.py
M plone/app/portlets/metaconfigure.py
M plone/app/portlets/metadirectives.py
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/__init__.py
M plone/app/portlets/portlets/actions.py
M plone/app/portlets/portlets/base.py
M plone/app/portlets/portlets/classic.py
M plone/app/portlets/portlets/language.py
M plone/app/portlets/portlets/login.py
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/portlets/news.py
M plone/app/portlets/portlets/recent.py
M plone/app/portlets/portlets/review.py
M plone/app/portlets/portlets/rss.py
M plone/app/portlets/portlets/search.py
M plone/app/portlets/storage.py
M plone/app/portlets/testing.py
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_cache.py
M plone/app/portlets/tests/test_classic_portlet.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/tests/test_exportimport.py
M plone/app/portlets/tests/test_formextender.py
M plone/app/portlets/tests/test_login_portlet.py
M plone/app/portlets/tests/test_manage_views.py
M plone/app/portlets/tests/test_mapping.py
M plone/app/portlets/tests/test_namechooser.py
M plone/app/portlets/tests/test_navigation_portlet.py
M plone/app/portlets/tests/test_news_portlet.py
M plone/app/portlets/tests/test_recent_portlet.py
M plone/app/portlets/tests/test_redirects.py
M plone/app/portlets/tests/test_review_portlet.py
M plone/app/portlets/tests/test_rss_portlet.py
M plone/app/portlets/tests/test_setup.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py
M plone/app/portlets/tests/utils.py
M plone/app/portlets/utils.py
M setup.cfg
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef0..ca12a733 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef0..ca12a733 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/portlets/__init__.py b/plone/app/portlets/__init__.py\nindex f7774de1..203cb6f3 100644\n--- a/plone/app/portlets/__init__.py\n+++ b/plone/app/portlets/__init__.py\n@@ -1,12 +1,14 @@\n # -*- coding: utf-8 -*-\n # Import PloneMessageFactory to create messages in the plone domain\n from zope.i18nmessageid import MessageFactory\n+\n import pkg_resources\n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+\n+PloneMessageFactory = MessageFactory("plone")\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.event\')\n+    pkg_resources.get_distribution("plone.app.event")\n except pkg_resources.DistributionNotFound:\n     HAS_PLONE_APP_EVENT = False\n else:\ndiff --git a/plone/app/portlets/assignable.py b/plone/app/portlets/assignable.py\nindex d94cadc2..2e260759 100644\n--- a/plone/app/portlets/assignable.py\n+++ b/plone/app/portlets/assignable.py\n@@ -1,23 +1,19 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapter\n-from zope.annotation.interfaces import IAnnotations\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignable\n-from plone.portlets.interfaces import IPortletManager\n-\n+from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.portlets.interfaces import ILocalPortletAssignable\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.interface import implementer\n \n \n @adapter(ILocalPortletAssignable, IPortletManager)\n @implementer(IPortletAssignmentMapping)\n def localPortletAssignmentMappingAdapter(context, manager):\n-    """Zope 2 version of the localPortletAssignmentMappingAdapter factory.\n-    """\n+    """Zope 2 version of the localPortletAssignmentMappingAdapter factory."""\n     annotations = IAnnotations(context)\n     local = annotations.get(CONTEXT_ASSIGNMENT_KEY, {})\n     portlets = local.get(manager.__name__, None)\n@@ -26,15 +22,14 @@ def localPortletAssignmentMappingAdapter(context, manager):\n         # but pass along the context so it can be stored\n         # if an assignment is added.\n         portlets = PortletAssignmentMapping(\n-            manager=manager.__name__,\n-            category=CONTEXT_CATEGORY,\n-            context=context)\n+            manager=manager.__name__, category=CONTEXT_CATEGORY, context=context\n+        )\n \n     # XXX: For graceful migration\n-    if not getattr(portlets, \'__manager__\', \'\'):\n+    if not getattr(portlets, "__manager__", ""):\n         portlets.__manager__ = manager.__name__\n \n-    if not getattr(portlets, \'__category__\', \'\'):\n+    if not getattr(portlets, "__category__", ""):\n         portlets.__category__ = CONTEXT_CATEGORY\n \n     return portlets\ndiff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py\nindex b22fc695..15425d88 100644\n--- a/plone/app/portlets/browser/adding.py\n+++ b/plone/app/portlets/browser/adding.py\n@@ -1,18 +1,16 @@\n # -*- coding: utf-8 -*-\n-from warnings import warn\n-\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-\n-from zope.container.interfaces import INameChooser\n-\n-from Acquisition import aq_inner, aq_base, aq_parent\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five import BrowserView\n-\n from plone.app.portlets.browser.interfaces import IPortletAdding\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five import BrowserView\n+from warnings import warn\n+from zope.component import getMultiAdapter\n+from zope.container.interfaces import INameChooser\n+from zope.interface import implementer\n \n \n @implementer(IPortletAdding)\n@@ -23,11 +21,10 @@ class PortletAdding(SimpleItem, BrowserView):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+\'\n+    id = "+"\n \n     def add(self, content):\n-        """Add the rule to the context\n-        """\n+        """Add the rule to the context"""\n         context = aq_inner(self.context)\n         manager = aq_base(context)\n \n@@ -38,21 +35,23 @@ def add(self, content):\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         referer = self.referer\n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n-            referer = url + \'/@@manage-portlets\'\n+            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+            referer = url + "/@@manage-portlets"\n         return referer\n \n     def renderAddButton(self):\n-        warn("The renderAddButton method is deprecated, use nameAllowed",\n-            DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\ndiff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py\nindex 92f0d728..e3e4e3e7 100644\n--- a/plone/app/portlets/browser/editmanager.py\n+++ b/plone/app/portlets/browser/editmanager.py\n@@ -1,43 +1,44 @@\n # -*- coding: utf-8 -*-\n-import logging\n-\n+from AccessControl import Unauthorized\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Acquisition import Explicit\n+from Acquisition.interfaces import IAcquirer\n+from five.customerize.zpt import TTWViewTemplateRenderer\n+from plone.app.portlets.browser.interfaces import IManageColumnPortletsView\n+from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n+from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.memoize.view import memoize\n-\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.utils import hashPortletInfo\n-\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.PythonScripts.standard import url_quote\n+from Products.PythonScripts.standard import url_unquote\n+from zExceptions import NotFound\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryAdapter\n+from zope.component import queryMultiAdapter\n from zope.container import contained\n-from zope.interface import implementer, Interface\n-from zope.component import (\n-    adapts, getMultiAdapter, queryMultiAdapter, queryAdapter, getUtility)\n from zope.contentprovider.interfaces import UpdateNotCalled\n+from zope.interface import implementer\n+from zope.interface import Interface\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from five.customerize.zpt import TTWViewTemplateRenderer\n-\n-from Acquisition import Explicit, aq_parent, aq_inner\n-from Acquisition.interfaces import IAcquirer\n \n-from AccessControl import Unauthorized\n-from zExceptions import NotFound\n-\n-from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.PythonScripts.standard import url_quote, url_unquote\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-\n-from plone.app.portlets.browser.interfaces import IManageColumnPortletsView\n-from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n-from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n-from plone.app.portlets.interfaces import IDashboard, IPortletPermissionChecker\n-\n-from plone.portlets.interfaces import IPortletAssignmentSettings\n+import logging\n \n \n @implementer(IPortletManagerRenderer)\n@@ -48,9 +49,10 @@ class EditPortletManagerRenderer(Explicit):\n     which assignments to display.\n \n     """\n+\n     adapts(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n \n-    template = ViewPageTemplateFile(\'templates/edit-manager.pt\')\n+    template = ViewPageTemplateFile("templates/edit-manager.pt")\n \n     def __init__(self, context, request, view, manager):\n         self.__parent__ = view\n@@ -82,27 +84,30 @@ def view_name(self):\n         if not name:\n             # try to fallback on the \'name\' attribute for\n             # TTW customized views, see #11409\n-            if \'TTWView\' in self.__parent__.__class__.__name__:\n+            if "TTWView" in self.__parent__.__class__.__name__:\n                 try:\n-                    path = self.request.get(\'PATH_INFO\')\n+                    path = self.request.get("PATH_INFO")\n                     template_renderer = self.request.traverse(path)\n-                    name = getattr(template_renderer.template, \'view_name\', None)\n-                except (AttributeError, KeyError, Unauthorized,):\n-                    logging.getLogger(\'plone.app.portlets.browser\').debug(\n-                        \'Cant get view name for TTV %s\' % self.__parent__\n+                    name = getattr(template_renderer.template, "view_name", None)\n+                except (\n+                    AttributeError,\n+                    KeyError,\n+                    Unauthorized,\n+                ):\n+                    logging.getLogger("plone.app.portlets.browser").debug(\n+                        "Cant get view name for TTV %s" % self.__parent__\n                     )\n         return name\n \n     def normalized_manager_name(self):\n-        return self.manager.__name__.replace(\'.\', \'-\')\n+        return self.manager.__name__.replace(".", "-")\n \n     def baseUrl(self):\n         return self.__parent__.getAssignmentMappingUrl(self.manager)\n \n     def portlets(self):\n         assignments = self._lazyLoadAssignments(self.manager)\n-        return self.portlets_for_assignments(\n-            assignments, self.manager, self.baseUrl())\n+        return self.portlets_for_assignments(assignments, self.manager, self.baseUrl())\n \n     def portlets_for_assignments(self, assignments, manager, base_url):\n         category = self.__parent__.category\n@@ -111,56 +116,69 @@ def portlets_for_assignments(self, assignments, manager, base_url):\n         data = []\n         for idx in range(len(assignments)):\n             name = assignments[idx].__name__\n-            if hasattr(assignments[idx], \'__Broken_state__\'):\n-                name = assignments[idx].__Broken_state__[\'__name__\']\n+            if hasattr(assignments[idx], "__Broken_state__"):\n+                name = assignments[idx].__Broken_state__["__name__"]\n \n             editview = queryMultiAdapter(\n-                (assignments[idx], self.request), name=\'edit\', default=None)\n+                (assignments[idx], self.request), name="edit", default=None\n+            )\n \n             if editview is None:\n-                editviewName = \'\'\n+                editviewName = ""\n             else:\n-                editviewName = \'%s/%s/edit\' % (base_url, name)\n+                editviewName = "%s/%s/edit" % (base_url, name)\n \n             portlet_hash = hashPortletInfo(\n-                dict(manager=manager.__name__, category=category,\n-                     key=key, name=name,))\n+                dict(\n+                    manager=manager.__name__,\n+                    category=category,\n+                    key=key,\n+                    name=name,\n+                )\n+            )\n \n             try:\n                 settings = IPortletAssignmentSettings(assignments[idx])\n-                visible = settings.get(\'visible\', True)\n+                visible = settings.get("visible", True)\n             except TypeError:\n                 visible = False\n \n-            data.append({\n-                \'title\': assignments[idx].title,\n-                \'editview\': editviewName,\n-                \'hash\': portlet_hash,\n-                \'name\': name,\n-                \'up_url\': \'%s/@@move-portlet-up\' % (base_url),\n-                \'down_url\': \'%s/@@move-portlet-down\' % (base_url),\n-                \'delete_url\': \'%s/@@delete-portlet\' % (base_url),\n-                \'hide_url\': \'%s/@@toggle-visibility\' % (base_url),\n-                \'show_url\': \'%s/@@toggle-visibility\' % (base_url),\n-                \'visible\': visible,\n-                })\n+            data.append(\n+                {\n+                    "title": assignments[idx].title,\n+                    "editview": editviewName,\n+                    "hash": portlet_hash,\n+                    "name": name,\n+                    "up_url": "%s/@@move-portlet-up" % (base_url),\n+                    "down_url": "%s/@@move-portlet-down" % (base_url),\n+                    "delete_url": "%s/@@delete-portlet" % (base_url),\n+                    "hide_url": "%s/@@toggle-visibility" % (base_url),\n+                    "show_url": "%s/@@toggle-visibility" % (base_url),\n+                    "visible": visible,\n+                }\n+            )\n         if len(data) > 0:\n-            data[0][\'up_url\'] = data[-1][\'down_url\'] = None\n+            data[0]["up_url"] = data[-1]["down_url"] = None\n \n         return data\n \n     def addable_portlets(self):\n         baseUrl = self.baseUrl()\n-        addviewbase = baseUrl.replace(self.context_url(), \'\')\n+        addviewbase = baseUrl.replace(self.context_url(), "")\n+\n         def sort_key(v):\n-            return v.get(\'title\')\n+            return v.get("title")\n+\n         def check_permission(p):\n             addview = p.addview\n             if not addview:\n                 return False\n \n-            addview = "%s/+/%s" % (addviewbase, addview,)\n-            if addview.startswith(\'/\'):\n+            addview = "%s/+/%s" % (\n+                addviewbase,\n+                addview,\n+            )\n+            if addview.startswith("/"):\n                 addview = addview[1:]\n             try:\n                 self.context.restrictedTraverse(str(addview))\n@@ -168,26 +186,30 @@ def check_permission(p):\n                 return False\n             return True\n \n-        portlets = [{\n-            \'title\': p.title,\n-            \'description\': p.description,\n-            \'addview\': \'%s/+/%s\' % (addviewbase, p.addview)\n-            } for p in self.manager.getAddablePortletTypes() if check_permission(p)]\n+        portlets = [\n+            {\n+                "title": p.title,\n+                "description": p.description,\n+                "addview": "%s/+/%s" % (addviewbase, p.addview),\n+            }\n+            for p in self.manager.getAddablePortletTypes()\n+            if check_permission(p)\n+        ]\n \n         portlets.sort(key=sort_key)\n         return portlets\n \n     @memoize\n     def referer(self):\n-        view_name = self.request.get(\'viewname\', None)\n-        key = self.request.get(\'key\', None)\n-        base_url = self.request[\'ACTUAL_URL\']\n+        view_name = self.request.get("viewname", None)\n+        key = self.request.get("key", None)\n+        base_url = self.request["ACTUAL_URL"]\n \n         if view_name:\n-            base_url = self.context_url() + \'/\' + view_name\n+            base_url = self.context_url() + "/" + view_name\n \n         if key:\n-            base_url += \'?key=%s\' % key\n+            base_url += "?key=%s" % key\n \n         return base_url\n \n@@ -197,7 +219,7 @@ def url_quote_referer(self):\n \n     @memoize\n     def key(self):\n-        return self.request.get(\'key\', None)\n+        return self.request.get("key", None)\n \n     # See note in plone.portlets.manager\n \n@@ -207,35 +229,50 @@ def _lazyLoadAssignments(self, manager):\n \n     @memoize\n     def context_url(self):\n-        return str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n+        return str(getMultiAdapter((self.context, self.request), name="absolute_url"))\n+\n \n class ContextualEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for contextual portlets"""\n-    adapts(Interface, IDefaultBrowserLayer,\n-           IManageContextualPortletsView, IPortletManager)\n \n-    template = ViewPageTemplateFile(\'templates/edit-manager-contextual.pt\')\n+    adapts(\n+        Interface, IDefaultBrowserLayer, IManageContextualPortletsView, IPortletManager\n+    )\n+\n+    template = ViewPageTemplateFile("templates/edit-manager-contextual.pt")\n \n     def __init__(self, context, request, view, manager):\n         EditPortletManagerRenderer.__init__(self, context, request, view, manager)\n \n     def blacklist_status_action(self):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return baseUrl + \'/@@set-portlet-blacklist-status\'\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return baseUrl + "/@@set-portlet-blacklist-status"\n \n     def manager_name(self):\n         return self.manager.__name__\n \n     def context_blacklist_status(self):\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         return assignable.getBlacklistStatus(CONTEXT_CATEGORY)\n \n     def group_blacklist_status(self, check_parent=False):\n         # If check_parent is True and the blacklist status is None, it returns the\n         # parent status recursively.\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         status = assignable.getBlacklistStatus(GROUP_CATEGORY)\n \n         if check_parent and status is None:\n@@ -245,8 +282,13 @@ def group_blacklist_status(self, check_parent=False):\n         return status\n \n     def content_type_blacklist_status(self, check_parent=False):\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         status = assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY)\n \n         if check_parent and status is None:\n@@ -266,8 +308,13 @@ def parent_blacklist_status(self, category):\n         current = pcontext.getParent()\n         currentpc = pcontext\n         while status is None and current is not None:\n-            assignable = getMultiAdapter((current, self.manager,),\n-                                         ILocalPortletAssignmentManager)\n+            assignable = getMultiAdapter(\n+                (\n+                    current,\n+                    self.manager,\n+                ),\n+                ILocalPortletAssignmentManager,\n+            )\n             status = assignable.getBlacklistStatus(category)\n \n             current = currentpc.getParent()\n@@ -290,7 +337,7 @@ def inherited_portlets(self):\n \n         def is_visible(a):\n             try:\n-                return IPortletAssignmentSettings(a).get(\'visible\', True)\n+                return IPortletAssignmentSettings(a).get("visible", True)\n             except TypeError:\n                 # Assignment is broken\n                 return False\n@@ -302,25 +349,32 @@ def is_visible(a):\n                 context = context.__parent__\n \n             # we get the contextual portlets view to access its utility methods\n-            view = queryMultiAdapter((context, self.request),\n-                                     name=self.__parent__.__name__)\n+            view = queryMultiAdapter(\n+                (context, self.request), name=self.__parent__.__name__\n+            )\n             if view is not None:\n                 assignments = view.getAssignmentsForManager(self.manager)\n                 assignments_to_show = [a for a in assignments if is_visible(a)]\n                 base_url = view.getAssignmentMappingUrl(self.manager)\n-                data.extend(self.portlets_for_assignments(assignments_to_show,\n-                                                          self.manager, base_url))\n-\n-            assignable = queryMultiAdapter((context, self.manager),\n-                                           ILocalPortletAssignmentManager)\n-            if assignable is not None and assignable.getBlacklistStatus(CONTEXT_CATEGORY):\n+                data.extend(\n+                    self.portlets_for_assignments(\n+                        assignments_to_show, self.manager, base_url\n+                    )\n+                )\n+\n+            assignable = queryMultiAdapter(\n+                (context, self.manager), ILocalPortletAssignmentManager\n+            )\n+            if assignable is not None and assignable.getBlacklistStatus(\n+                CONTEXT_CATEGORY\n+            ):\n                 # Current context has blocked inherited portlets, stop.\n                 break\n \n         return data\n \n     def global_portlets(self, category, prefix):\n-        """ Return the list of global portlets from a given category for the current context.\n+        """Return the list of global portlets from a given category for the current context.\n \n         Invisible (hidden) portlets are excluded.\n \n@@ -330,7 +384,9 @@ def global_portlets(self, category, prefix):\n         # get the portlet context\n         pcontext = IPortletContext(self.context)\n \n-        portal_state = getMultiAdapter((context, self.request), name=u\'plone_portal_state\')  # noqa\n+        portal_state = getMultiAdapter(\n+            (context, self.request), name=u"plone_portal_state"\n+        )  # noqa\n         base_url = portal_state.portal_url()\n \n         portlets = []\n@@ -339,30 +395,41 @@ def global_portlets(self, category, prefix):\n                 mapping = self.manager.get(category, None)\n                 assignments = []\n                 if mapping is not None:\n-                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\'visible\', True)  # noqa\n-                    assignments.extend([a for a in mapping.get(key, {}).values()\n-                                        if is_visible(a)])\n+                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\n+                        "visible", True\n+                    )  # noqa\n+                    assignments.extend(\n+                        [a for a in mapping.get(key, {}).values() if is_visible(a)]\n+                    )\n                 if assignments:\n-                    edit_url = \'%s/++%s++%s+%s\' % (\n-                        base_url, prefix, self.manager.__name__, key)\n-                    portlets.extend(self.portlets_for_assignments(\n-                        assignments, self.manager, edit_url))\n+                    edit_url = "%s/++%s++%s+%s" % (\n+                        base_url,\n+                        prefix,\n+                        self.manager.__name__,\n+                        key,\n+                    )\n+                    portlets.extend(\n+                        self.portlets_for_assignments(\n+                            assignments, self.manager, edit_url\n+                        )\n+                    )\n \n         return portlets\n \n     def group_portlets(self):\n         """Return the list of global portlets from the group category for the\n-           current context."""\n-        return self.global_portlets(GROUP_CATEGORY, \'groupportlets\')\n+        current context."""\n+        return self.global_portlets(GROUP_CATEGORY, "groupportlets")\n \n     def content_type_portlets(self):\n         """Return the list of global portlets from the content type category for\n-           the current context."""\n-        return self.global_portlets(CONTENT_TYPE_CATEGORY, \'contenttypeportlets\')\n+        the current context."""\n+        return self.global_portlets(CONTENT_TYPE_CATEGORY, "contenttypeportlets")\n \n \n class DashboardEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for the dashboard"""\n+\n     adapts(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n \n \n@@ -370,13 +437,14 @@ class ManagePortletAssignments(BrowserView):\n     """Utility views for managing portlets for a particular column"""\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u"authenticator")\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name=u"authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n     def _render_column(self):\n-        view_name = self.request.form.get(\'viewname\')\n+        view_name = self.request.form.get("viewname")\n         obj = aq_inner(self.context.__parent__)\n         request = aq_inner(self.request)\n         view = getMultiAdapter((obj, request), name=view_name)\n@@ -385,17 +453,18 @@ def _render_column(self):\n             view = view._getView()\n \n         manager = getUtility(IPortletManager, name=self.context.__manager__)\n-        renderer = getMultiAdapter((obj, request, view, manager),\n-                                   IPortletManagerRenderer)\n+        renderer = getMultiAdapter(\n+            (obj, request, view, manager), IPortletManagerRenderer\n+        )\n         renderer.update()\n         return renderer.__of__(obj).render()\n \n     def finish_portlet_change(self):\n-        if self.request.form.get(\'ajax\', False):\n+        if self.request.form.get("ajax", False):\n             return self._render_column()\n         else:\n             self.request.response.redirect(self._nextUrl())\n-            return \'\'\n+            return ""\n \n     # view @@move-portlet-up\n     def move_portlet_up(self, name):\n@@ -407,7 +476,7 @@ def move_portlet_up(self, name):\n \n         idx = keys.index(name)\n         keys.remove(name)\n-        keys.insert(idx-1, name)\n+        keys.insert(idx - 1, name)\n         assignments.updateOrder(keys)\n         return self.finish_portlet_change()\n \n@@ -421,7 +490,7 @@ def move_portlet_down(self, name):\n \n         idx = keys.index(name)\n         keys.remove(name)\n-        keys.insert(idx+1, name)\n+        keys.insert(idx + 1, name)\n         assignments.updateOrder(keys)\n         return self.finish_portlet_change()\n \n@@ -444,21 +513,21 @@ def delete_portlet(self, name):\n         return self.finish_portlet_change()\n \n     def _nextUrl(self):\n-        referer = self.request.get(\'referer\')\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        referer = self.request.get("referer")\n+        urltool = getToolByName(self.context, "portal_url")\n         if referer:\n             referer = url_unquote(referer)\n \n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n-            referer = \'%s/@@manage-portlets\' % (url,)\n+            referer = "%s/@@manage-portlets" % (url,)\n         return referer\n \n     def toggle_visibility(self, name):\n         self.authorize()\n         assignments = aq_inner(self.context)\n         settings = IPortletAssignmentSettings(assignments[name])\n-        visible = settings.get(\'visible\', True)\n-        settings[\'visible\'] = not visible\n+        visible = settings.get("visible", True)\n+        settings["visible"] = not visible\n         return self.finish_portlet_change()\ndiff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py\nindex 4f98fc75..471000a2 100644\n--- a/plone/app/portlets/browser/formhelper.py\n+++ b/plone/app/portlets/browser/formhelper.py\n@@ -1,26 +1,25 @@\n # -*- coding: utf-8 -*-\n-from z3c.form import button\n-from z3c.form import field\n-from z3c.form import form\n-from zope.component import getMultiAdapter\n-from zope.interface import implementer\n-import zope.event\n-import zope.lifecycleevent\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-\n-from Acquisition import aq_parent, aq_inner, aq_base\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.browser.interfaces import IPortletAddForm\n from plone.app.portlets.browser.interfaces import IPortletEditForm\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.autoform.form import AutoExtensibleForm\n-\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+\n+import zope.event\n+import zope.lifecycleevent\n \n \n @implementer(IPortletAddForm)\n@@ -44,7 +43,7 @@ def create(self):\n             return MyAssignment()\n     """\n \n-    template = ViewPageTemplateFile(\'templates/z3cform-portlets-pageform.pt\')\n+    template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n     label = _(u"Configure portlet")\n \n@@ -54,9 +53,9 @@ def add(self, object):\n         return ob\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n         return super(AddForm, self).__call__()\n \n@@ -69,8 +68,7 @@ def createAndAdd(self, data):\n         # Extender values are set by form.applyChanges below, via the usual\n         # z3cform adapter lookups.\n         schema_keys = field.Fields(self.schema).keys()\n-        unextended_data = {key: data[key]\n-                           for key in schema_keys if key in data}\n+        unextended_data = {key: data[key] for key in schema_keys if key in data}\n         obj = self.create(unextended_data)\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n@@ -88,25 +86,24 @@ def createAndAdd(self, data):\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         addview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(addview))\n         try:\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n         except (TypeError, AttributeError):\n             # At least in tests we can get a TypeError: "There isn\'t enough\n             # context to get URL information. This is probably due to a bug in\n             # setting up location information."\n             url = self.context.absolute_url()\n-        return url + \'/@@manage-portlets\'\n+        return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name=\'add\')\n+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="add")\n     def handleAdd(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -117,13 +114,12 @@ def handleAdd(self, action):\n             # mark only as finished if we get the new object\n             self._finishedAdd = True\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"),\n-                             name=\'cancel_add\')\n+    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(nextURL)\n-        return \'\'\n+        return ""\n \n \n class NullAddForm(BrowserView):\n@@ -143,25 +139,26 @@ def __call__(self):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         else:\n             addview = aq_parent(aq_inner(self.context))\n             context = aq_parent(aq_inner(addview))\n             try:\n-                url = str(getMultiAdapter((context, self.request),\n-                                          name=u"absolute_url"))\n+                url = str(\n+                    getMultiAdapter((context, self.request), name=u"absolute_url")\n+                )\n             except (TypeError, AttributeError):\n                 url = self.context.absolute_url()\n-            return url + \'/@@manage-portlets\'\n+            return url + "/@@manage-portlets"\n \n     def create(self):\n         raise NotImplementedError("concrete classes must implement create()")\n@@ -169,38 +166,36 @@ def create(self):\n \n @implementer(IPortletEditForm)\n class EditForm(AutoExtensibleForm, form.EditForm):\n-    """An edit form for portlets.\n-    """\n+    """An edit form for portlets."""\n \n-    template = ViewPageTemplateFile(\'templates/z3cform-portlets-pageform.pt\')\n+    template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n     label = _(u"Modify portlet")\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n         return super(EditForm, self).__call__()\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         editview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(editview))\n         try:\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n         except (TypeError, AttributeError):\n             url = self.context.absolute_url()\n-        return url + \'/@@manage-portlets\'\n+        return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name=\'apply\')\n+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="apply")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -209,22 +204,19 @@ def handleSave(self, action):\n         changes = self.applyChanges(data)\n         if changes:\n             self.status = "Changes saved"\n-            IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"),\n-                                                          "info")\n+            IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"), "info")\n         else:\n             self.status = "No changes"\n-            IStatusMessage(self.request).addStatusMessage(_(u"No changes"),\n-                                                          "info")\n+            IStatusMessage(self.request).addStatusMessage(_(u"No changes"), "info")\n \n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"),\n-                             name=\'cancel_add\')\n+    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(nextURL)\n-        return \'\'\n+        return ""\ndiff --git a/plone/app/portlets/browser/interfaces.py b/plone/app/portlets/browser/interfaces.py\nindex fafa5ab4..e2e12e3a 100644\n--- a/plone/app/portlets/browser/interfaces.py\n+++ b/plone/app/portlets/browser/interfaces.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import Interface, Attribute\n from zope.browser.interfaces import IAdding\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n \n class IPortletAdding(IAdding):\n     """Marker interface for the add view for portlet managers.\n@@ -8,41 +10,40 @@ class IPortletAdding(IAdding):\n     Portlet add views should be registered for this interface.\n     """\n \n+\n class IPortletForm(Interface):\n-    """Generic marker for form views that are used to create or edit portlets.\n-    """\n+    """Generic marker for form views that are used to create or edit portlets."""\n \n     def referer(self):\n         """Return the URL that the user came from before entering the form\n         for the first time.\n         """\n \n+\n class IPortletAddForm(IPortletForm):\n-    """Add form view for portlets\n-    """\n+    """Add form view for portlets"""\n+\n \n class IPortletEditForm(IPortletForm):\n-    """Edit form view for portlets\n-    """\n+    """Edit form view for portlets"""\n+\n \n class IManagePortletsView(Interface):\n-    """The screen used to manage portlets in a particular context.\n-    """\n+    """The screen used to manage portlets in a particular context."""\n \n     category = Attribute("The portlet category being managed")\n     key = Attribute("The key in the category under which portlets are assigned")\n \n     def getAssignmentMappingUrl(manager):\n-        """Given a portlet manager, get the URL to its assignment mapping.\n-        """\n+        """Given a portlet manager, get the URL to its assignment mapping."""\n \n     def getAssignmentsForManager(manager):\n-        """Get the assignments in the current context for the given manager.\n-        """\n+        """Get the assignments in the current context for the given manager."""\n+\n \n class IManageDashboardPortletsView(IManagePortletsView):\n-    """Marker for the manage dashboard portlets view\n-    """\n+    """Marker for the manage dashboard portlets view"""\n+\n \n class IManageColumnPortletsView(IManagePortletsView):\n     """Base class for views that should display the edit fuctionality\n@@ -52,18 +53,18 @@ class IManageColumnPortletsView(IManagePortletsView):\n     view that can apply to different categories of assignment.\n     """\n \n+\n class IManageContextualPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage contextual portlets view\n-    """\n+    """Marker for the manage contextual portlets view"""\n+\n \n class IManageUserPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage user portlets view\n-    """\n+    """Marker for the manage user portlets view"""\n+\n \n class IManageGroupPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage group portlets view\n-    """\n+    """Marker for the manage group portlets view"""\n+\n \n class IManageContentTypePortletsView(IManageColumnPortletsView):\n-    """Marker for the manage content type portlets view\n-    """\n\\ No newline at end of file\n+    """Marker for the manage content type portlets view"""\ndiff --git a/plone/app/portlets/browser/manage.py b/plone/app/portlets/browser/manage.py\nindex 823eaa5d..b97e37b6 100644\n--- a/plone/app/portlets/browser/manage.py\n+++ b/plone/app/portlets/browser/manage.py\n@@ -1,49 +1,41 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer_only\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter, getUtility\n-from zope.publisher.interfaces.browser import IBrowserView\n-\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner\n from Acquisition import aq_base\n-from Products.Five import BrowserView\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n-from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n-\n-from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.app.portlets.interfaces import ITopbarManagePortlets\n-\n-from plone.app.portlets.browser.interfaces import IManagePortletsView\n+from Acquisition import aq_inner\n+from plone.app.portlets import utils\n+from plone.app.portlets.browser.interfaces import IManageContentTypePortletsView\n from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n from plone.app.portlets.browser.interfaces import IManageGroupPortletsView\n-from plone.app.portlets.browser.interfaces import IManageContentTypePortletsView\n-\n-from plone.app.portlets import utils\n+from plone.app.portlets.browser.interfaces import IManagePortletsView\n+from plone.app.portlets.interfaces import IPortletPermissionChecker\n+from plone.app.portlets.interfaces import ITopbarManagePortlets\n+from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n+from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.app.portlets.storage import UserPortletAssignmentMapping\n from plone.memoize.view import memoize\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n from plone.protect.authenticator import createToken\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five import BrowserView\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n+from zope.publisher.interfaces.browser import IBrowserView\n \n \n @implementer(IManageContextualPortletsView)\n class ManageContextualPortlets(BrowserView):\n-\n     def __init__(self, context, request):\n         super(ManageContextualPortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n \n@@ -57,36 +49,44 @@ def category(self):\n \n     @property\n     def key(self):\n-        return \'/\'.join(self.context.getPhysicalPath())\n+        return "/".join(self.context.getPhysicalPath())\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return \'%s/++contextportlets++%s\' % (baseUrl, manager.__name__)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return "%s/++contextportlets++%s" % (baseUrl, manager.__name__)\n \n     def getAssignmentsForManager(self, manager):\n-        assignments = getMultiAdapter((self.context, manager), IPortletAssignmentMapping)\n+        assignments = getMultiAdapter(\n+            (self.context, manager), IPortletAssignmentMapping\n+        )\n         return assignments.values()\n \n     # view @@manage-portlets\n \n     def has_legacy_portlets(self):\n-        left_slots = getattr(aq_base(self.context), \'left_slots\', [])\n-        right_slots = getattr(aq_base(self.context), \'right_slots\', [])\n+        left_slots = getattr(aq_base(self.context), "left_slots", [])\n+        right_slots = getattr(aq_base(self.context), "right_slots", [])\n \n-        return (left_slots or right_slots)\n+        return left_slots or right_slots\n \n     # view @@set-portlet-blacklist-status\n-    def set_blacklist_status(self, manager, group_status, content_type_status,\n-                             context_status):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u"authenticator")\n+    def set_blacklist_status(\n+        self, manager, group_status, content_type_status, context_status\n+    ):\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name=u"authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n         portletManager = getUtility(IPortletManager, name=manager)\n-        assignable = getMultiAdapter((self.context, portletManager),\n-                                     ILocalPortletAssignmentManager)\n-        assignments = getMultiAdapter((self.context, portletManager),\n-                                      IPortletAssignmentMapping)\n+        assignable = getMultiAdapter(\n+            (self.context, portletManager), ILocalPortletAssignmentManager\n+        )\n+        assignments = getMultiAdapter(\n+            (self.context, portletManager), IPortletAssignmentMapping\n+        )\n \n         IPortletPermissionChecker(assignments.__of__(aq_inner(self.context)))()\n \n@@ -99,19 +99,24 @@ def int2status(status):\n                 return False\n \n         assignable.setBlacklistStatus(GROUP_CATEGORY, int2status(group_status))\n-        assignable.setBlacklistStatus(CONTENT_TYPE_CATEGORY,\n-                                      int2status(content_type_status))\n+        assignable.setBlacklistStatus(\n+            CONTENT_TYPE_CATEGORY, int2status(content_type_status)\n+        )\n         assignable.setBlacklistStatus(CONTEXT_CATEGORY, int2status(context_status))\n \n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        self.request.response.redirect(baseUrl + \'/@@manage-portlets\')\n-        return \'\'\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        self.request.response.redirect(baseUrl + "/@@manage-portlets")\n+        return ""\n \n     # view @@convert-legacy-portlets\n \n     def convert_legacy_portlets(self):\n         utils.convert_legacy_portlets(self.context)\n-        self.request.response.redirect(self.context.absolute_url() + \'/@@manage-portlets\')\n+        self.request.response.redirect(\n+            self.context.absolute_url() + "/@@manage-portlets"\n+        )\n \n \n @implementer(IManageDashboardPortletsView)\n@@ -136,9 +141,11 @@ def key(self):\n         return self._getUserId()\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n         userId = self._getUserId()\n-        return \'%s/++dashboard++%s+%s\' % (baseUrl, manager.__name__, userId)\n+        return "%s/++dashboard++%s+%s" % (baseUrl, manager.__name__, userId)\n \n     def getAssignmentsForManager(self, manager):\n         userId = self._getUserId()\n@@ -147,14 +154,16 @@ def getAssignmentsForManager(self, manager):\n         mapping = category.get(userId, None)\n         if mapping is None:\n             mapping = category[userId] = UserPortletAssignmentMapping(\n-                manager=manager.__name__, category=USER_CATEGORY, name=userId)\n+                manager=manager.__name__, category=USER_CATEGORY, name=userId\n+            )\n         return mapping.values()\n \n     def _getUserId(self):\n-        membership = getToolByName(aq_inner(self.context), \'portal_membership\', None)\n+        membership = getToolByName(aq_inner(self.context), "portal_membership", None)\n         if membership.isAnonymousUser():\n-            raise Unauthorized("Cannot get portlet assignments for anonymous "\n-                               "through this view")\n+            raise Unauthorized(\n+                "Cannot get portlet assignments for anonymous " "through this view"\n+            )\n \n         member = membership.getAuthenticatedMember()\n         memberId = member.getId()\n@@ -167,10 +176,9 @@ def _getUserId(self):\n \n @implementer(IManageDashboardPortletsView)\n class ManageGroupDashboardPortlets(BrowserView):\n-\n     @property\n     def group(self):\n-        return self.request.get(\'key\', None)\n+        return self.request.get("key", None)\n \n     # IManagePortletsView implementation\n \n@@ -187,18 +195,19 @@ def key(self):\n         return self.group\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return \'%s/++groupdashboard++%s+%s\' % (baseUrl, manager.__name__, self.group)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return "%s/++groupdashboard++%s+%s" % (baseUrl, manager.__name__, self.group)\n \n     def getAssignmentsForManager(self, manager):\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[GROUP_CATEGORY]\n         mapping = category.get(self.group, None)\n         if mapping is None:\n-            mapping = category[self.group] = \\\n-                GroupDashboardPortletAssignmentMapping(manager=manager.__name__,\n-                                                       category=GROUP_CATEGORY,\n-                                                       name=self.group)\n+            mapping = category[self.group] = GroupDashboardPortletAssignmentMapping(\n+                manager=manager.__name__, category=GROUP_CATEGORY, name=self.group\n+            )\n         return mapping.values()\n \n \n@@ -217,40 +226,41 @@ def category(self):\n \n     @property\n     def key(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n     def __init__(self, context, request):\n         super(ManageGroupPortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        self.request.set("disable_border", True)\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        key = self.request[\'key\']\n-        return \'%s/++groupportlets++%s+%s\' % (baseUrl, manager.__name__, key)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        key = self.request["key"]\n+        return "%s/++groupportlets++%s+%s" % (baseUrl, manager.__name__, key)\n \n     def getAssignmentsForManager(self, manager):\n-        key = self.request[\'key\']\n+        key = self.request["key"]\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[GROUP_CATEGORY]\n         mapping = category.get(key, None)\n         if mapping is None:\n-            mapping = category[key] = PortletAssignmentMapping(manager=manager.__name__,\n-                                                               category=GROUP_CATEGORY,\n-                                                               name=key)\n+            mapping = category[key] = PortletAssignmentMapping(\n+                manager=manager.__name__, category=GROUP_CATEGORY, name=key\n+            )\n         return mapping.values()\n \n     # View attributes\n \n     def group(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n \n @implementer(IManageContentTypePortletsView)\n class ManageContentTypePortlets(BrowserView):\n-\n     def __init__(self, context, request):\n         super(ManageContentTypePortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n \n@@ -264,21 +274,24 @@ def category(self):\n \n     @property\n     def key(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        pt = self.request[\'key\']\n-        return \'%s/++contenttypeportlets++%s+%s\' % (baseUrl, manager.__name__, pt)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        pt = self.request["key"]\n+        return "%s/++contenttypeportlets++%s+%s" % (baseUrl, manager.__name__, pt)\n \n     def getAssignmentsForManager(self, manager):\n-        pt = self.request[\'key\']\n+        pt = self.request["key"]\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[CONTENT_TYPE_CATEGORY]\n         mapping = category.get(pt, None)\n         if mapping is None:\n             mapping = category[pt] = PortletAssignmentMapping(\n-                manager=manager.__name__, category=CONTENT_TYPE_CATEGORY, name=pt)\n+                manager=manager.__name__, category=CONTENT_TYPE_CATEGORY, name=pt\n+            )\n         return mapping.values()\n \n     # View attributes\n@@ -288,13 +301,14 @@ def portal_type(self):\n \n     def portal_type_icon(self):\n         plone_layout = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_layout")\n+            (self.context, self.request), name=u"plone_layout"\n+        )\n         return plone_layout.getIcon(self.fti())\n \n     @memoize\n     def fti(self):\n-        portal_types = getToolByName(aq_inner(self.context), \'portal_types\')\n-        portal_type = self.request[\'key\']\n+        portal_types = getToolByName(aq_inner(self.context), "portal_types")\n+        portal_type = self.request["key"]\n         for fti in portal_types.listTypeInfo():\n             if fti.getId() == portal_type:\n                 return fti\n@@ -333,7 +347,7 @@ def key(self):\n     def __getattribute__(self, name):\n         # Products.Five.viewlet.viewlet.SimpleViewletClass redefines __name__\n         # so a simple property or attribute does not work\n-        if name == \'__name__\':\n+        if name == "__name__":\n             return self.ultimate_parent().__name__\n         return super(ManagePortletsViewlet, self).__getattribute__(name)\n \n@@ -347,8 +361,9 @@ def getAssignmentsForManager(self, manager):\n     def ultimate_parent(self):\n         # Walk the __parent__ chain to find the principal view\n         parent = self.__parent__\n-        while (hasattr(parent, \'__parent__\') and\n-                IBrowserView.providedBy(parent.__parent__)):\n+        while hasattr(parent, "__parent__") and IBrowserView.providedBy(\n+            parent.__parent__\n+        ):\n             parent = parent.__parent__\n         return parent\n \n@@ -380,15 +395,14 @@ class ManageContentTypePortletsViewlet(ManagePortletsViewlet):\n \n @implementer_only(ITopbarManagePortlets)\n class TopbarManagePortlets(ManageContextualPortlets):\n-\n     def __init__(self, context, request):\n         super(TopbarManagePortlets, self).__init__(context, request)\n         # Disable the left and right columns\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         # Initialize the manager name in case there is nothing\n         # in the traversal path\n-        self.manager_name = \'plone.leftcolumn\'\n+        self.manager_name = "plone.leftcolumn"\n \n     def publishTraverse(self, request, name):\n         """Get the portlet manager via traversal so that we can re-use\n@@ -402,8 +416,9 @@ def render_edit_manager_portlets(self):\n         # Here we manually render the portlets instead of doing\n         # something like provider:${view/manager_name} in the template\n         manager_view = ManageContextualPortlets(self.context, self.request)\n-        manager_view.__name__ = \'manage-portlets\'\n+        manager_view.__name__ = "manage-portlets"\n         portlet_manager = getMultiAdapter(\n-            (self.context, self.request, manager_view), name=self.manager_name)\n+            (self.context, self.request, manager_view), name=self.manager_name\n+        )\n         portlet_manager.update()\n-        return portlet_manager.render()\n\\ No newline at end of file\n+        return portlet_manager.render()\ndiff --git a/plone/app/portlets/browser/traversal.py b/plone/app/portlets/browser/traversal.py\nindex eb0cce64..48f14b65 100644\n--- a/plone/app/portlets/browser/traversal.py\n+++ b/plone/app/portlets/browser/traversal.py\n@@ -1,28 +1,26 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts, getUtility, getMultiAdapter\n-\n-from zope.traversing.interfaces import ITraversable\n-from zope.publisher.interfaces.http import IHTTPRequest\n-\n+from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n+from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.app.portlets.storage import UserPortletAssignmentMapping\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import ILocalPortletAssignable\n-from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n+from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.interfaces import ISiteRoot\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.publisher.interfaces.http import IHTTPRequest\n+from zope.traversing.interfaces import ITraversable\n \n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n-from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n \n @implementer(ITraversable)\n class ContextPortletNamespace(object):\n-    """Used to traverse to a contextual portlet assignable\n-    """\n+    """Used to traverse to a contextual portlet assignable"""\n+\n     adapts(ILocalPortletAssignable, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n@@ -31,14 +29,22 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         column = getUtility(IPortletManager, name=name)\n-        manager = getMultiAdapter((self.context, column,), IPortletAssignmentMapping)\n+        manager = getMultiAdapter(\n+            (\n+                self.context,\n+                column,\n+            ),\n+            IPortletAssignmentMapping,\n+        )\n         return manager\n \n+\n @implementer(ITraversable)\n class DashboardNamespace(object):\n     """Used to traverse to a portlet assignable for the current user for\n     the dashboard.\n     """\n+\n     adapts(ISiteRoot, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n@@ -46,28 +52,30 @@ def __init__(self, context, request=None):\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, user = name.split(\'+\')\n+        col, user = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[USER_CATEGORY]\n         manager = category.get(user, None)\n         if manager is None:\n             manager = category[user] = UserPortletAssignmentMapping(\n-                manager=col, category=USER_CATEGORY, name=user)\n+                manager=col, category=USER_CATEGORY, name=user\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = USER_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = user\n \n         return manager\n \n+\n @implementer(ITraversable)\n class GroupDashboardNamespace(object):\n-    """Used to traverse to a portlet assignable for a group for the dashboard\n-    """\n+    """Used to traverse to a portlet assignable for a group for the dashboard"""\n+\n     adapts(ISiteRoot, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n@@ -75,21 +83,21 @@ def __init__(self, context, request=None):\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, group = name.split(\'+\')\n+        col, group = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[GROUP_CATEGORY]\n         manager = category.get(group, None)\n         if manager is None:\n-            manager = category[group] = \\\n-                GroupDashboardPortletAssignmentMapping(manager=col,\n-                                                       category=GROUP_CATEGORY,\n-                                                       name=group)\n+            manager = category[group] = GroupDashboardPortletAssignmentMapping(\n+                manager=col, category=GROUP_CATEGORY, name=group\n+            )\n         return manager\n \n+\n @implementer(ITraversable)\n class GroupPortletNamespace(object):\n-    """Used to traverse to a group portlet assignable\n-    """\n+    """Used to traverse to a group portlet assignable"""\n+\n     adapts(ISiteRoot, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n@@ -97,29 +105,30 @@ def __init__(self, context, request=None):\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, group = name.split(\'+\')\n+        col, group = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[GROUP_CATEGORY]\n         manager = category.get(group, None)\n         if manager is None:\n-            manager = category[group] = PortletAssignmentMapping(manager=col,\n-                                                                 category=GROUP_CATEGORY,\n-                                                                 name=group)\n+            manager = category[group] = PortletAssignmentMapping(\n+                manager=col, category=GROUP_CATEGORY, name=group\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = GROUP_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = group\n \n         return manager\n \n+\n @implementer(ITraversable)\n class ContentTypePortletNamespace(object):\n-    """Used to traverse to a content type portlet assignable\n-    """\n+    """Used to traverse to a content type portlet assignable"""\n+\n     adapts(ISiteRoot, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n@@ -127,20 +136,21 @@ def __init__(self, context, request=None):\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, pt = name.split(\'+\')\n+        col, pt = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[CONTENT_TYPE_CATEGORY]\n         manager = category.get(pt, None)\n         if manager is None:\n             manager = category[pt] = PortletAssignmentMapping(\n-                manager=col, category=CONTENT_TYPE_CATEGORY, name=pt)\n+                manager=col, category=CONTENT_TYPE_CATEGORY, name=pt\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = CONTENT_TYPE_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = pt\n \n         return manager\ndiff --git a/plone/app/portlets/browser/utils.py b/plone/app/portlets/browser/utils.py\nindex 073f113a..cddc2d09 100644\n--- a/plone/app/portlets/browser/utils.py\n+++ b/plone/app/portlets/browser/utils.py\n@@ -1,32 +1,31 @@\n # -*- coding: utf-8 -*-\n-from Products.Five import BrowserView\n-from zope.component import getUtility, getMultiAdapter\n-\n+from plone.app.portlets.interfaces import IDeferredPortletRenderer\n+from plone.app.portlets.utils import assignment_from_key\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.utils import unhashPortletInfo\n-\n-from plone.app.portlets.interfaces import IDeferredPortletRenderer\n-from plone.app.portlets.utils import assignment_from_key\n+from Products.Five import BrowserView\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class PortletUtilities(BrowserView):\n-\n     def render_portlet(self, portlethash, **kw):\n         # Prepare the portlet and render the data\n         info = unhashPortletInfo(portlethash)\n-        manager = getUtility(IPortletManager, info[\'manager\'])\n+        manager = getUtility(IPortletManager, info["manager"])\n \n-        assignment = assignment_from_key(context=self.context,\n-                                         manager_name=info[\'manager\'],\n-                                         category=info[\'category\'],\n-                                         key=info[\'key\'],\n-                                         name=info[\'name\'])\n+        assignment = assignment_from_key(\n+            context=self.context,\n+            manager_name=info["manager"],\n+            category=info["category"],\n+            key=info["key"],\n+            name=info["name"],\n+        )\n         renderer = getMultiAdapter(\n-                (self.context, self.request, self,\n-                 manager, assignment.data),\n-                IPortletRenderer\n-            )\n+            (self.context, self.request, self, manager, assignment.data),\n+            IPortletRenderer,\n+        )\n \n         renderer.update()\n         if IDeferredPortletRenderer.providedBy(renderer):\ndiff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex 39f0e82d..c9eeeb44 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -8,7 +8,8 @@\n \n def get_language(context, request):\n     portal_state = component.getMultiAdapter(\n-        (context, request), name=u\'plone_portal_state\')\n+        (context, request), name=u"plone_portal_state"\n+    )\n     return portal_state.locale().getLocaleID()\n \n \n@@ -32,12 +33,15 @@ def add(brain):\n \n     fingerprint = "".join(map(add, self._data()))\n \n-    anonymous = getToolByName(context, \'portal_membership\').isAnonymousUser()\n-\n-    return "".join((\n-        getToolByName(aq_inner(self.context), \'portal_url\')(),\n-        str(get_language(aq_inner(self.context), self.request)),\n-        str(anonymous),\n-        self.manager.__name__,\n-        self.data.__name__,\n-        fingerprint))\n+    anonymous = getToolByName(context, "portal_membership").isAnonymousUser()\n+\n+    return "".join(\n+        (\n+            getToolByName(aq_inner(self.context), "portal_url")(),\n+            str(get_language(aq_inner(self.context), self.request)),\n+            str(anonymous),\n+            self.manager.__name__,\n+            self.data.__name__,\n+            fingerprint,\n+        )\n+    )\ndiff --git a/plone/app/portlets/checker.py b/plone/app/portlets/checker.py\nindex 50a2e267..f167bea6 100644\n--- a/plone/app/portlets/checker.py\n+++ b/plone/app/portlets/checker.py\n@@ -1,15 +1,13 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n+from AccessControl import getSecurityManager\n+from AccessControl import Unauthorized\n+from Acquisition import aq_inner\n from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-\n-from AccessControl import getSecurityManager, Unauthorized\n-from Acquisition import aq_inner\n+from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from zope.component import adapts\n+from zope.interface import implementer\n \n \n @implementer(IPortletPermissionChecker)\ndiff --git a/plone/app/portlets/dashboard.py b/plone/app/portlets/dashboard.py\nindex 0bdc9db9..c05618e1 100644\n--- a/plone/app/portlets/dashboard.py\n+++ b/plone/app/portlets/dashboard.py\n@@ -1,23 +1,18 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts, queryUtility\n-\n-from zope.container.interfaces import INameChooser\n-\n-from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.constants import USER_CATEGORY\n-\n-from plone.app.portlets.interfaces import IDefaultDashboard\n from plone.app.portlets import portlets\n-\n+from plone.app.portlets.interfaces import IDefaultDashboard\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletManager\n+from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n+from zope.component import adapts\n+from zope.component import queryUtility\n+from zope.container.interfaces import INameChooser\n+from zope.interface import implementer\n \n \n def new_user(principal, event):\n-    """Initialise the dashboard for a new user\n-    """\n+    """Initialise the dashboard for a new user"""\n     defaults = IDefaultDashboard(principal, None)\n     if defaults is None:\n         return\n@@ -25,7 +20,12 @@ def new_user(principal, event):\n     userid = principal.getId()\n     portlets = defaults()\n \n-    for name in (\'plone.dashboard1\', \'plone.dashboard2\', \'plone.dashboard3\', \'plone.dashboard4\'):\n+    for name in (\n+        "plone.dashboard1",\n+        "plone.dashboard2",\n+        "plone.dashboard3",\n+        "plone.dashboard4",\n+    ):\n         assignments = portlets.get(name)\n         if assignments:\n             column = queryUtility(IPortletManager, name=name)\n@@ -34,9 +34,9 @@ def new_user(principal, event):\n                 if category is not None:\n                     manager = category.get(userid, None)\n                     if manager is None:\n-                        manager = category[userid] = UserPortletAssignmentMapping(manager=name,\n-                                                                                  category=USER_CATEGORY,\n-                                                                                  name=userid)\n+                        manager = category[userid] = UserPortletAssignmentMapping(\n+                            manager=name, category=USER_CATEGORY, name=userid\n+                        )\n                     chooser = INameChooser(manager)\n                     for assignment in assignments:\n                         manager[chooser.chooseName(None, assignment)] = assignment\n@@ -44,8 +44,8 @@ def new_user(principal, event):\n \n @implementer(IDefaultDashboard)\n class DefaultDashboard(object):\n-    """The default default dashboard.\n-    """\n+    """The default default dashboard."""\n+\n     adapts(IPropertiedUser)\n \n     def __init__(self, principal):\n@@ -53,8 +53,8 @@ def __init__(self, principal):\n \n     def __call__(self):\n         return {\n-            \'plone.dashboard1\': (portlets.news.Assignment(), ),\n-            \'plone.dashboard2\': (portlets.recent.Assignment(), ),\n-            \'plone.dashboard3\': (),\n-            \'plone.dashboard4\': (portlets.review.Assignment(), ),\n+            "plone.dashboard1": (portlets.news.Assignment(),),\n+            "plone.dashboard2": (portlets.recent.Assignment(),),\n+            "plone.dashboard3": (),\n+            "plone.dashboard4": (portlets.review.Assignment(),),\n         }\ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 570e93af..1842f253 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -78,7 +78,9 @@\n """  # noqa\n \n from operator import attrgetter\n-from plone.app.portlets.exportimport.interfaces import IPortletAssignmentExportImportHandler\n+from plone.app.portlets.exportimport.interfaces import (\n+    IPortletAssignmentExportImportHandler,\n+)\n from plone.app.portlets.interfaces import IDefaultPortletManager\n from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.app.portlets.utils import assignment_mapping_from_key\n@@ -121,7 +123,7 @@\n \n \n def dummyGetId():\n-    return \'\'\n+    return ""\n \n \n HAS_BLACKLIST = True\n@@ -134,18 +136,18 @@ def dummyGetId():\n \n     @implementer(IComponentsHandlerBlacklist)\n     class Blacklist(object):\n-\n         def getExcludedInterfaces(self):\n-            return (_getDottedName(IPortletType),\n-                    _getDottedName(IPortletManager),\n-                    _getDottedName(IPortletManagerRenderer),\n-                    )\n+            return (\n+                _getDottedName(IPortletType),\n+                _getDottedName(IPortletManager),\n+                _getDottedName(IPortletManagerRenderer),\n+            )\n \n \n @implementer(IPortletAssignmentExportImportHandler)\n class PropertyPortletAssignmentExportImportHandler(object):\n-    """Import portlet assignment settings based on zope.schema properties\n-    """\n+    """Import portlet assignment settings based on zope.schema properties"""\n+\n     adapts(Interface)\n \n     def __init__(self, assignment):\n@@ -153,7 +155,7 @@ def __init__(self, assignment):\n \n     def import_assignment(self, interface, node):\n         for child in node.childNodes:\n-            if child.nodeName == \'property\':\n+            if child.nodeName == "property":\n                 self.import_node(interface, child)\n \n     def export_assignment(self, interface, doc, node):\n@@ -169,9 +171,8 @@ def export_assignment(self, interface, doc, node):\n     # Helper methods\n \n     def import_node(self, interface, child):\n-        """Import a single <property /> node\n-        """\n-        property_name = child.getAttribute(\'name\')\n+        """Import a single <property /> node"""\n+        property_name = child.getAttribute("name")\n \n         __traceback_info__ = "Property name: " + property_name\n \n@@ -189,7 +190,7 @@ def import_node(self, interface, child):\n             value_type = field.value_type\n             value = []\n             for element in child.childNodes:\n-                if element.nodeName != \'element\':\n+                if element.nodeName != "element":\n                     continue\n                 element_value = self.extract_text(element)\n                 value.append(self.from_unicode(value_type, element_value))\n@@ -198,10 +199,10 @@ def import_node(self, interface, child):\n         # Otherwise, just get the value of the <property /> node\n         else:\n             value = self.extract_text(child)\n-            if not (field.getName() == \'root\' and value in [\'\', \'/\']):\n+            if not (field.getName() == "root" and value in ["", "/"]):\n                 value = self.from_unicode(field, value)\n \n-        if field.getName() == \'root\' and value in [\'\', \'/\']:\n+        if field.getName() == "root" and value in ["", "/"]:\n             # these valid values don\'t pass validation of SearchableTextSourceBinder\n             field.set(self.assignment, value)\n         else:\n@@ -209,18 +210,17 @@ def import_node(self, interface, child):\n             field.set(self.assignment, value)\n \n     def export_field(self, doc, field):\n-        """Turn a zope.schema field into a node and return it\n-        """\n+        """Turn a zope.schema field into a node and return it"""\n         field = field.bind(self.assignment)\n         value = field.get(self.assignment)\n \n-        child = doc.createElement(\'property\')\n-        child.setAttribute(\'name\', field.__name__)\n+        child = doc.createElement("property")\n+        child.setAttribute("name", field.__name__)\n \n         if value is not None:\n             if ICollection.providedBy(field):\n                 for e in value:\n-                    list_element = doc.createElement(\'element\')\n+                    list_element = doc.createElement("element")\n                     list_element.appendChild(doc.createTextNode(str(e)))\n                     child.appendChild(list_element)\n             else:\n@@ -232,7 +232,10 @@ def extract_text(self, node):\n         node.normalize()\n         text = u""\n         for child in node.childNodes:\n-            if child.nodeType == node.TEXT_NODE or child.nodeType == node.CDATA_SECTION_NODE:\n+            if (\n+                child.nodeType == node.TEXT_NODE\n+                or child.nodeType == node.CDATA_SECTION_NODE\n+            ):\n                 text += child.nodeValue\n         return text\n \n@@ -241,6 +244,7 @@ def from_unicode(self, field, value):\n         # XXX: Bool incorrectly omits to declare that it implements\n         # IFromUnicode, even though it does.\n         import zope.schema\n+\n         if IFromUnicode.providedBy(field) or isinstance(field, zope.schema.Bool):\n             return field.fromUnicode(value)\n         else:\n@@ -248,10 +252,10 @@ def from_unicode(self, field, value):\n \n     def field_typecast(self, field, value):\n         # A slight hack to force sequence types to the right type\n-        typecast = getattr(field, \'_type\', None)\n+        typecast = getattr(field, "_type", None)\n         if typecast is not None:\n             if not isinstance(typecast, (list, tuple)):\n-                typecast = (typecast, )\n+                typecast = (typecast,)\n             for tc in reversed(typecast):\n                 if callable(tc):\n                     try:\n@@ -264,35 +268,33 @@ def field_typecast(self, field, value):\n \n @implementer(IBody)\n class PortletsXMLAdapter(XMLAdapterBase):\n-    """In- and exporter for a local portlet configuration\n-    """\n+    """In- and exporter for a local portlet configuration"""\n+\n     adapts(IComponentRegistry, ISetupEnviron)\n \n-    name = \'portlets\'\n-    _LOGGER_ID = \'portlets\'\n+    name = "portlets"\n+    _LOGGER_ID = "portlets"\n \n     #\n     # Main control flow\n     #\n \n     def _exportNode(self):\n-        """Export portlet managers and portlet types\n-        """\n-        node = self._doc.createElement(\'portlets\')\n+        """Export portlet managers and portlet types"""\n+        node = self._doc.createElement("portlets")\n         node.appendChild(self._extractPortlets())\n-        self._logger.info(\'Portlets exported\')\n+        self._logger.info("Portlets exported")\n         return node\n \n     def _importNode(self, node):\n-        """Import portlet managers, portlet types and portlet assignments\n-        """\n+        """Import portlet managers, portlet types and portlet assignments"""\n         self._initProvider(node)\n-        self._logger.info(\'Portlets imported\')\n+        self._logger.info("Portlets imported")\n \n     def _initProvider(self, node):\n         purge = self.environ.shouldPurge()\n-        if node.hasAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.hasAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n         if purge:\n             self._purgePortlets()\n         self._initPortlets(node)\n@@ -308,8 +310,11 @@ def _purgePortlets(self):\n \n         # Purge portlet types\n \n-        registeredPortletTypes = [r.name for r in self.context.registeredUtilities()\n-                                        if r.provided == IPortletType]\n+        registeredPortletTypes = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n \n         for name, portletType in getUtilitiesFor(IPortletType):\n             if name in registeredPortletTypes:\n@@ -319,7 +324,9 @@ def _purgePortlets(self):\n         site = self.environ.getSite()\n \n         for name, portletManager in getUtilitiesFor(IPortletManager):\n-            assignable = queryMultiAdapter((site, portletManager), IPortletAssignmentMapping)\n+            assignable = queryMultiAdapter(\n+                (site, portletManager), IPortletAssignmentMapping\n+            )\n             if assignable is not None:\n                 for key in list(assignable.keys()):\n                     del assignable[key]\n@@ -327,46 +334,47 @@ def _purgePortlets(self):\n         # Purge portlet manager registrations - this will also get rid of\n         # global portlet registrations, since these utilities disappear\n \n-        portletManagerRegistrations = [r for r in self.context.registeredUtilities()\n-                                        if r.provided.isOrExtends(IPortletManager)]\n+        portletManagerRegistrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n \n         for registration in portletManagerRegistrations:\n-            self.context.unregisterUtility(provided=registration.provided,\n-                                           name=registration.name)\n+            self.context.unregisterUtility(\n+                provided=registration.provided, name=registration.name\n+            )\n \n     #\n     # Importing\n     #\n \n     def _initPortlets(self, node):\n-        """Actually import portlet data\n-        """\n+        """Actually import portlet data"""\n         for child in node.childNodes:\n             # Portlet managers\n-            if child.nodeName.lower() == \'portletmanager\':\n+            if child.nodeName.lower() == "portletmanager":\n                 self._initPortletManagerNode(child)\n-            elif child.nodeName.lower() == \'portlet\':\n+            elif child.nodeName.lower() == "portlet":\n                 self._initPortletNode(child)\n             # Portlet assignments\n-            elif child.nodeName.lower() == \'assignment\':\n+            elif child.nodeName.lower() == "assignment":\n                 self._initAssignmentNode(child)\n             # Blacklisting (portlet blocking/unblocking)\n-            elif child.nodeName.lower() == \'blacklist\':\n+            elif child.nodeName.lower() == "blacklist":\n                 self._initBlacklistNode(child)\n \n     def _initPortletManagerNode(self, node):\n-        """Create a portlet manager from a node\n-        """\n-        name = str(node.getAttribute(\'name\'))\n+        """Create a portlet manager from a node"""\n+        name = str(node.getAttribute("name"))\n \n-        if node.hasAttribute(\'remove\'):\n-            if self._convertToBoolean(node.getAttribute(\'remove\')):\n-                self.context.unregisterUtility(provided=IPortletManager,\n-                                               name=name)\n+        if node.hasAttribute("remove"):\n+            if self._convertToBoolean(node.getAttribute("remove")):\n+                self.context.unregisterUtility(provided=IPortletManager, name=name)\n                 return\n \n-        if node.hasAttribute(\'purge\'):\n-            if self._convertToBoolean(node.getAttribute(\'purge\')):\n+        if node.hasAttribute("purge"):\n+            if self._convertToBoolean(node.getAttribute("purge")):\n                 manager = getUtility(IPortletManager, name=name)\n                 # remove global assignments\n                 for category in manager.keys():\n@@ -379,16 +387,19 @@ def _initPortletManagerNode(self, node):\n                     del mapping[portlet]\n                 return\n \n-        registeredPortletManagers = [r.name for r in self.context.registeredUtilities()\n-                                        if r.provided.isOrExtends(IPortletManager)]\n+        registeredPortletManagers = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n         if name not in registeredPortletManagers:\n-            managerClass = node.getAttribute(\'class\')\n+            managerClass = node.getAttribute("class")\n             if managerClass:\n                 manager = _resolveDottedName(managerClass)()\n             else:\n                 manager = PortletManager()\n \n-            managerType = node.getAttribute(\'type\')\n+            managerType = node.getAttribute("type")\n             if managerType:\n                 alsoProvides(manager, _resolveDottedName(managerType))\n \n@@ -396,55 +407,55 @@ def _initPortletManagerNode(self, node):\n             manager[GROUP_CATEGORY] = PortletCategoryMapping()\n             manager[CONTENT_TYPE_CATEGORY] = PortletCategoryMapping()\n \n-            self.context.registerUtility(component=manager,\n-                                         provided=IPortletManager,\n-                                         name=name)\n+            self.context.registerUtility(\n+                component=manager, provided=IPortletManager, name=name\n+            )\n \n     def _initPortletNode(self, node):\n-        """Create a portlet type from a node\n-        """\n+        """Create a portlet type from a node"""\n         registeredPortletTypes = [\n-          r.name for r in self.context.registeredUtilities() \\\n-                          if r.provided == IPortletType]\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n \n-        addview = str(node.getAttribute(\'addview\'))\n-        extend = node.hasAttribute(\'extend\')\n-        purge = node.hasAttribute(\'purge\')\n+        addview = str(node.getAttribute("addview"))\n+        extend = node.hasAttribute("extend")\n+        purge = node.hasAttribute("purge")\n \n-        #In certain cases, continue to the next node\n-        if node.hasAttribute(\'remove\'):\n+        # In certain cases, continue to the next node\n+        if node.hasAttribute("remove"):\n             self._removePortlet(name=addview)\n             return\n         if self._checkBasicPortletNodeErrors(node, registeredPortletTypes):\n             return\n \n-        #Retrieve or create the portlet type and determine the current list\n-        #of associated portlet manager interfaces (for_)\n+        # Retrieve or create the portlet type and determine the current list\n+        # of associated portlet manager interfaces (for_)\n         if extend:\n-            #To extend a portlet type that is registered, we modify the title\n-            #and description if provided by the profile.\n-            portlet = queryUtility(IPortletType, name = addview)\n-            if str(node.getAttribute(\'title\')):\n-                portlet.title = str(node.getAttribute(\'title\'))\n-            if str(node.getAttribute(\'description\')):\n-                portlet.description = str(node.getAttribute(\'description\'))\n+            # To extend a portlet type that is registered, we modify the title\n+            # and description if provided by the profile.\n+            portlet = queryUtility(IPortletType, name=addview)\n+            if str(node.getAttribute("title")):\n+                portlet.title = str(node.getAttribute("title"))\n+            if str(node.getAttribute("description")):\n+                portlet.description = str(node.getAttribute("description"))\n             for_ = portlet.for_\n             if for_ is None:\n                 for_ = []\n         else:\n-            #Otherwise, create a new portlet type with the correct attributes.\n+            # Otherwise, create a new portlet type with the correct attributes.\n             portlet = PortletType()\n-            portlet.title = str(node.getAttribute(\'title\'))\n-            portlet.description = str(node.getAttribute(\'description\'))\n+            portlet.title = str(node.getAttribute("title"))\n+            portlet.description = str(node.getAttribute("description"))\n             portlet.addview = addview\n             for_ = []\n \n-\n-        #Process the node\'s child "for" nodes to add or remove portlet\n-        #manager interface names to the for_ list\n+        # Process the node\'s child "for" nodes to add or remove portlet\n+        # manager interface names to the for_ list\n         for_ = self._modifyForList(node, for_)\n \n-        #Store the for_ attribute, with [IDefaultPortletManager] as the default\n+        # Store the for_ attribute, with [IDefaultPortletManager] as the default\n         if for_ == []:\n             for_ = [IDefaultPortletManager]\n         portlet.for_ = for_\n@@ -452,41 +463,40 @@ def _initPortletNode(self, node):\n         if purge:\n             self._removePortlet(addview)\n         if not extend:\n-            self.context.registerUtility(component=portlet,\n-                                         provided=IPortletType,\n-                                         name=addview)\n+            self.context.registerUtility(\n+                component=portlet, provided=IPortletType, name=addview\n+            )\n \n     def _initAssignmentNode(self, node):\n-        """Create an assignment from a node\n-        """\n+        """Create an assignment from a node"""\n         site = self.environ.getSite()\n \n         # 1. Determine the assignment mapping and the name\n-        manager = node.getAttribute(\'manager\')\n-        category = node.getAttribute(\'category\')\n-        key = node.getAttribute(\'key\')\n+        manager = node.getAttribute("manager")\n+        category = node.getAttribute("category")\n+        key = node.getAttribute("key")\n         # convert unicode to str as unicode paths are not allowed in\n         # restrictedTraverse called in assignment_mapping_from_key\n         if six.PY2:\n             key = key.encode()\n \n         purge = False\n-        if node.hasAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.hasAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n \n         mapping = assignment_mapping_from_key(site, manager, category, key, create=True)\n \n         # 2. Either find or create the assignment\n \n         assignment = None\n-        name = node.getAttribute(\'name\')\n+        name = node.getAttribute("name")\n         if name:\n             name = str(name)\n             assignment = mapping.get(name, None)\n \n         __traceback_info__ = "Assignment name: " + name\n \n-        if node.hasAttribute(\'remove\'):\n+        if node.hasAttribute("remove"):\n             if assignment is not None:\n                 del mapping[name]\n             return\n@@ -496,7 +506,7 @@ def _initAssignmentNode(self, node):\n                 del mapping[portlet]\n             return\n \n-        type_ = str(node.getAttribute(\'type\'))\n+        type_ = str(node.getAttribute("type"))\n \n         if assignment is None:\n             portlet_factory = getUtility(IFactory, name=type_)\n@@ -512,10 +522,10 @@ def _initAssignmentNode(self, node):\n         assignment = assignment.__of__(site)\n \n         # set visibility setting\n-        visible = node.getAttribute(\'visible\')\n+        visible = node.getAttribute("visible")\n         if visible:\n             settings = IPortletAssignmentSettings(assignment)\n-            settings[\'visible\'] = self._convertToBoolean(visible)\n+            settings["visible"] = self._convertToBoolean(visible)\n \n         # 3. Use an adapter to update the portlet settings\n \n@@ -525,7 +535,7 @@ def _initAssignmentNode(self, node):\n \n         # 4. Handle ordering\n \n-        insert_before = node.getAttribute(\'insert-before\')\n+        insert_before = node.getAttribute("insert-before")\n         if insert_before:\n             position = None\n             keys = list(mapping.keys())\n@@ -541,18 +551,17 @@ def _initAssignmentNode(self, node):\n                 mapping.updateOrder(keys)\n \n     def _initBlacklistNode(self, node):\n-        """Create a blacklisting from a node\n-        """\n+        """Create a blacklisting from a node"""\n         site = self.environ.getSite()\n \n-        manager = node.getAttribute(\'manager\')\n-        category = node.getAttribute(\'category\')\n-        location = str(node.getAttribute(\'location\'))\n-        status = node.getAttribute(\'status\')\n+        manager = node.getAttribute("manager")\n+        category = node.getAttribute("category")\n+        location = str(node.getAttribute("location"))\n+        status = node.getAttribute("status")\n \n         manager = getUtility(IPortletManager, name=manager)\n \n-        if location.startswith(\'/\'):\n+        if location.startswith("/"):\n             location = location[1:]\n \n         item = site.unrestrictedTraverse(location, None)\n@@ -561,34 +570,40 @@ def _initBlacklistNode(self, node):\n \n         assignable = queryMultiAdapter((item, manager), ILocalPortletAssignmentManager)\n \n-        if status.lower() == \'block\':\n+        if status.lower() == "block":\n             assignable.setBlacklistStatus(category, True)\n-        elif status.lower() == \'show\':\n+        elif status.lower() == "show":\n             assignable.setBlacklistStatus(category, False)\n-        elif status.lower() == \'acquire\':\n+        elif status.lower() == "acquire":\n             assignable.setBlacklistStatus(category, None)\n \n-\n     #\n     # Exporting\n     #\n \n     def _extractPortlets(self):\n-        """Write portlet managers and types to XML\n-        """\n+        """Write portlet managers and types to XML"""\n         fragment = self._doc.createDocumentFragment()\n         site = self.environ.getSite()\n \n-        registeredPortletTypes = [r.name for r in self.context.registeredUtilities()\n-                                            if r.provided == IPortletType]\n-        portletManagerRegistrations = [r for r in self.context.registeredUtilities()\n-                                            if r.provided.isOrExtends(IPortletManager)]\n-\n-        portletSchemata = dict([(iface, name) for name, iface in getUtilitiesFor(IPortletTypeInterface)])\n+        registeredPortletTypes = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n+        portletManagerRegistrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n+\n+        portletSchemata = dict(\n+            [(iface, name) for name, iface in getUtilitiesFor(IPortletTypeInterface)]\n+        )\n \n         # Export portlet manager registrations\n \n-        for r in sorted(portletManagerRegistrations, key=attrgetter(\'name\')):\n+        for r in sorted(portletManagerRegistrations, key=attrgetter("name")):\n             fragment.appendChild(self._extractPortletManagerNode(r))\n \n         # Export portlet type registrations\n@@ -606,18 +621,18 @@ def extractMapping(manager_name, category, key, mapping):\n                         break\n \n                 if type_ is not None:\n-                    child = self._doc.createElement(\'assignment\')\n-                    child.setAttribute(\'manager\', manager_name)\n-                    child.setAttribute(\'category\', category)\n-                    child.setAttribute(\'key\', key)\n-                    child.setAttribute(\'type\', type_)\n-                    child.setAttribute(\'name\', name)\n+                    child = self._doc.createElement("assignment")\n+                    child.setAttribute("manager", manager_name)\n+                    child.setAttribute("category", category)\n+                    child.setAttribute("key", key)\n+                    child.setAttribute("type", type_)\n+                    child.setAttribute("name", name)\n \n                     assignment = assignment.__of__(mapping)\n \n                     settings = IPortletAssignmentSettings(assignment)\n-                    visible = settings.get(\'visible\', True)\n-                    child.setAttribute(\'visible\', repr(visible))\n+                    visible = settings.get("visible", True)\n+                    child.setAttribute("visible", repr(visible))\n \n                     handler = IPortletAssignmentExportImportHandler(assignment)\n                     handler.export_assignment(schema, self._doc, child)\n@@ -630,7 +645,6 @@ def extractMapping(manager_name, category, key, mapping):\n                     mapping = mapping.__of__(site)\n                     extractMapping(manager_name, category, key, mapping)\n \n-\n         # Export assignments at the root of the portal (only)\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n             mapping = queryMultiAdapter((site, manager), IPortletAssignmentMapping)\n@@ -639,22 +653,29 @@ def extractMapping(manager_name, category, key, mapping):\n \n         # Export blacklistings in the portal root\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n-            assignable = queryMultiAdapter((site, manager), ILocalPortletAssignmentManager)\n+            assignable = queryMultiAdapter(\n+                (site, manager), ILocalPortletAssignmentManager\n+            )\n             if assignable is None:\n                 continue\n-            for category in (USER_CATEGORY, GROUP_CATEGORY, CONTENT_TYPE_CATEGORY, CONTEXT_CATEGORY):\n-                child = self._doc.createElement(\'blacklist\')\n-                child.setAttribute(\'manager\', manager_name)\n-                child.setAttribute(\'category\', category)\n-                child.setAttribute(\'location\', u"/")\n+            for category in (\n+                USER_CATEGORY,\n+                GROUP_CATEGORY,\n+                CONTENT_TYPE_CATEGORY,\n+                CONTEXT_CATEGORY,\n+            ):\n+                child = self._doc.createElement("blacklist")\n+                child.setAttribute("manager", manager_name)\n+                child.setAttribute("category", category)\n+                child.setAttribute("location", u"/")\n \n                 status = assignable.getBlacklistStatus(category)\n                 if status == True:\n-                    child.setAttribute(\'status\', u\'block\')\n+                    child.setAttribute("status", u"block")\n                 elif status == False:\n-                    child.setAttribute(\'status\', u\'show\')\n+                    child.setAttribute("status", u"show")\n                 else:\n-                    child.setAttribute(\'status\', u\'acquire\')\n+                    child.setAttribute("status", u"acquire")\n \n                 fragment.appendChild(child)\n \n@@ -662,31 +683,31 @@ def extractMapping(manager_name, category, key, mapping):\n \n     def _extractPortletManagerNode(self, portletManagerRegistration):\n         r = portletManagerRegistration\n-        child = self._doc.createElement(\'portletmanager\')\n+        child = self._doc.createElement("portletmanager")\n         if r.component.__class__ is not PortletManager:\n-            child.setAttribute(\'class\', _getDottedName(r.component.__class__))\n-        child.setAttribute(\'name\', r.name)\n+            child.setAttribute("class", _getDottedName(r.component.__class__))\n+        child.setAttribute("name", r.name)\n \n         specificInterface = next(providedBy(r.component).flattened())\n         if specificInterface != IPortletManager:\n-            child.setAttribute(\'type\', _getDottedName(specificInterface))\n+            child.setAttribute("type", _getDottedName(specificInterface))\n \n         return child\n \n     def _extractPortletNode(self, name, portletType):\n-        child = self._doc.createElement(\'portlet\')\n-        child.setAttribute(\'addview\', portletType.addview)\n-        child.setAttribute(\'title\', portletType.title)\n-        child.setAttribute(\'description\', portletType.description)\n+        child = self._doc.createElement("portlet")\n+        child.setAttribute("addview", portletType.addview)\n+        child.setAttribute("title", portletType.title)\n+        child.setAttribute("description", portletType.description)\n \n         for_ = portletType.for_\n-        #BBB\n+        # BBB\n \n         # [Interface] is previous default value\n         if for_ and for_ not in ([IDefaultPortletManager], [Interface]):\n             for i in for_:\n-                subNode = self._doc.createElement(\'for\')\n-                subNode.setAttribute(\'interface\', _getDottedName(i))\n+                subNode = self._doc.createElement("for")\n+                subNode.setAttribute("interface", _getDottedName(i))\n                 child.appendChild(subNode)\n         return child\n \n@@ -695,22 +716,27 @@ def _extractPortletNode(self, name, portletType):\n     #\n \n     def _checkBasicPortletNodeErrors(self, node, registeredPortletTypes):\n-        addview = str(node.getAttribute(\'addview\'))\n-        extend = node.hasAttribute(\'extend\')\n-        purge = node.hasAttribute(\'purge\')\n+        addview = str(node.getAttribute("addview"))\n+        extend = node.hasAttribute("extend")\n+        purge = node.hasAttribute("purge")\n         exists = addview in registeredPortletTypes\n \n         if extend and purge:\n-            self._logger.warning(\'Cannot extend and purge the same \' \\\n-              \'portlet type %s!\' % addview)\n+            self._logger.warning(\n+                "Cannot extend and purge the same " "portlet type %s!" % addview\n+            )\n             return True\n         if extend and not exists:\n-            self._logger.warning(\'Cannot extend portlet type \' \\\n-              \'%s because it is not registered.\' % addview)\n+            self._logger.warning(\n+                "Cannot extend portlet type "\n+                "%s because it is not registered." % addview\n+            )\n             return True\n         if exists and not purge and not extend:\n-            self._logger.warning(\'Cannot register portlet type \' \\\n-              \'%s because it is already registered.\' % addview)\n+            self._logger.warning(\n+                "Cannot register portlet type "\n+                "%s because it is already registered." % addview\n+            )\n             return True\n \n         return False\n@@ -720,8 +746,10 @@ def _removePortlet(self, name):\n             self.context.unregisterUtility(provided=IPortletType, name=name)\n             return True\n         else:\n-            self._logger.warning(\'Unable to unregister portlet type \' \\\n-              \'%s because it is not registered.\' % name)\n+            self._logger.warning(\n+                "Unable to unregister portlet type "\n+                "%s because it is not registered." % name\n+            )\n             return False\n \n     def _modifyForList(self, node, for_):\n@@ -731,9 +759,9 @@ def _modifyForList(self, node, for_):\n         modified_for = [_getDottedName(i) for i in for_]\n \n         for subNode in node.childNodes:\n-            if subNode.nodeName.lower() == \'for\':\n-                interface_name = str(subNode.getAttribute(\'interface\'))\n-                if subNode.hasAttribute(\'remove\'):\n+            if subNode.nodeName.lower() == "for":\n+                interface_name = str(subNode.getAttribute("interface"))\n+                if subNode.hasAttribute("remove"):\n                     if interface_name in modified_for:\n                         modified_for.remove(interface_name)\n                 elif interface_name not in modified_for:\n@@ -742,18 +770,20 @@ def _modifyForList(self, node, for_):\n         if node.hasAttribute("for"):\n             raise InvalidPortletForDefinition(node)\n \n-        modified_for = [_resolveDottedName(name) for name in modified_for \\\n-          if _resolveDottedName(name) is not None]\n+        modified_for = [\n+            _resolveDottedName(name)\n+            for name in modified_for\n+            if _resolveDottedName(name) is not None\n+        ]\n \n         return modified_for\n \n \n def importPortlets(context):\n-    """Import portlet managers and portlets\n-    """\n+    """Import portlet managers and portlets"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'portlets\')\n+        logger = context.getLogger("portlets")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n@@ -761,21 +791,20 @@ def importPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    importer = queryMultiAdapter((sm, context), IBody, name=\'plone.portlets\')\n+    importer = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if importer:\n-        filename = \'%s%s\' % (importer.name, importer.suffix)\n+        filename = "%s%s" % (importer.name, importer.suffix)\n         body = context.readDataFile(filename)\n         if body is not None:\n-            importer.filename = filename # for error reporting\n+            importer.filename = filename  # for error reporting\n             importer.body = body\n \n \n def exportPortlets(context):\n-    """Export portlet managers and portlets\n-    """\n+    """Export portlet managers and portlets"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'portlets\')\n+        logger = context.getLogger("portlets")\n         logger.info("Nothing to export.")\n         return\n \n@@ -783,9 +812,9 @@ def exportPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    exporter = queryMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+    exporter = queryMultiAdapter((sm, context), IBody, name=u"plone.portlets")\n     if exporter:\n-        filename = \'%s%s\' % (exporter.name, exporter.suffix)\n+        filename = "%s%s" % (exporter.name, exporter.suffix)\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\n@@ -802,4 +831,6 @@ class InvalidPortletForDefinition(Exception):\n \n     def __init__(self, node):\n         node = node.toxml()\n-        self.args = [self.message % node, ]\n+        self.args = [\n+            self.message % node,\n+        ]\ndiff --git a/plone/app/portlets/interfaces.py b/plone/app/portlets/interfaces.py\nindex 47babe76..df36ec19 100644\n--- a/plone/app/portlets/interfaces.py\n+++ b/plone/app/portlets/interfaces.py\n@@ -1,10 +1,9 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import Interface\n-\n+from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n+from zope.interface import Interface\n \n \n class IPortletTypeInterface(Interface):\n@@ -15,13 +14,11 @@ class IPortletTypeInterface(Interface):\n \n \n class IUserPortletAssignmentMapping(IPortletAssignmentMapping):\n-    """A portlet assignment mapping that\'s user-specific\n-    """\n+    """A portlet assignment mapping that\'s user-specific"""\n \n \n class IGroupDashboardPortletAssignmentMapping(IPortletAssignmentMapping):\n-    """Group portlets storage. Has its own security checker.\n-    """\n+    """Group portlets storage. Has its own security checker."""\n \n \n class IPortletPermissionChecker(Interface):\n@@ -36,8 +33,7 @@ def __call__():\n \n \n class IDefaultPortletManager(IPortletManager):\n-    """Default registration for portlets\n-    """\n+    """Default registration for portlets"""\n \n \n class IColumn(IDefaultPortletManager):\n@@ -61,12 +57,14 @@ class IRightColumn(IColumn):\n     Normally, you will register portlets for IColumn instead.\n     """\n \n+\n class IFooter(IColumn):\n     """The footer\n \n     Normally, you will register portlets for IColumn instead.\n     """\n \n+\n class IDashboard(IDefaultPortletManager, IPlacelessPortletManager):\n     """Common base class for dashboard columns\n \n@@ -123,4 +121,4 @@ def __call__(self):\n \n \n class ITopbarManagePortlets(Interface):\n-    pass\n\\ No newline at end of file\n+    pass\ndiff --git a/plone/app/portlets/manager.py b/plone/app/portlets/manager.py\nindex 786cf8eb..9598bbd9 100644\n--- a/plone/app/portlets/manager.py\n+++ b/plone/app/portlets/manager.py\n@@ -1,43 +1,52 @@\n # -*- coding: utf-8 -*-\n-import logging\n-import sys\n-\n-from zope.component import adapts, getMultiAdapter\n+from Acquisition import aq_acquire\n+from Acquisition import aq_inner\n+from Acquisition import Explicit\n+from plone.app.portlets.interfaces import IColumn\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from ZODB.POSException import ConflictError\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserView\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from Acquisition import Explicit, aq_inner, aq_acquire\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from ZODB.POSException import ConflictError\n+import logging\n+import sys\n \n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n-from plone.app.portlets.interfaces import IColumn\n-from plone.app.portlets.interfaces import IDashboard\n \n-logger = logging.getLogger(\'portlets\')\n+logger = logging.getLogger("portlets")\n \n \n class PortletManagerRenderer(BasePortletManagerRenderer, Explicit):\n-    """A Zope 2 implementation of the default PortletManagerRenderer\n-    """\n+    """A Zope 2 implementation of the default PortletManagerRenderer"""\n \n     def _dataToPortlet(self, data):\n         """Helper method to get the correct IPortletRenderer for the given\n         data object.\n         """\n-        portlet = getMultiAdapter((self.context, self.request, self.__parent__,\n-                                  self.manager, data, ), IPortletRenderer)\n+        portlet = getMultiAdapter(\n+            (\n+                self.context,\n+                self.request,\n+                self.__parent__,\n+                self.manager,\n+                data,\n+            ),\n+            IPortletRenderer,\n+        )\n         return portlet\n \n \n class ColumnPortletManagerRenderer(PortletManagerRenderer):\n-    """A renderer for the column portlets\n-    """\n+    """A renderer for the column portlets"""\n+\n     adapts(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n-    template = ViewPageTemplateFile(\'browser/templates/column.pt\')\n-    error_message = ViewPageTemplateFile(\'browser/templates/error_message.pt\')\n+    template = ViewPageTemplateFile("browser/templates/column.pt")\n+    error_message = ViewPageTemplateFile("browser/templates/error_message.pt")\n \n     def _context(self):\n         return aq_inner(self.context)\n@@ -46,8 +55,15 @@ def base_url(self):\n         """If context is a default-page, return URL of folder, else\n         return URL of context.\n         """\n-        return str(getMultiAdapter((self._context(), self.request, ),\n-                                   name=u\'absolute_url\'))\n+        return str(\n+            getMultiAdapter(\n+                (\n+                    self._context(),\n+                    self.request,\n+                ),\n+                name=u"absolute_url",\n+            )\n+        )\n \n     def safe_render(self, portlet_renderer):\n         try:\n@@ -55,14 +71,13 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % self)\n-            aq_acquire(self, \'error_log\').raising(sys.exc_info())\n+            logger.exception("Error while rendering %r" % self)\n+            aq_acquire(self, "error_log").raising(sys.exc_info())\n             return self.error_message()\n \n \n class DashboardPortletManagerRenderer(ColumnPortletManagerRenderer):\n-    """Render a column of the dashboard\n-    """\n+    """Render a column of the dashboard"""\n \n     adapts(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n-    template = ViewPageTemplateFile(\'browser/templates/dashboard-column.pt\')\n+    template = ViewPageTemplateFile("browser/templates/dashboard-column.pt")\ndiff --git a/plone/app/portlets/metaconfigure.py b/plone/app/portlets/metaconfigure.py\nindex a5de87c4..1b37a53d 100644\n--- a/plone/app/portlets/metaconfigure.py\n+++ b/plone/app/portlets/metaconfigure.py\n@@ -1,31 +1,36 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import Interface, alsoProvides\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from zope.publisher.interfaces.browser import IBrowserView\n-\n+from plone.app.portlets.browser.interfaces import IPortletAdding\n+from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n-\n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.browser.interfaces import IPortletAdding\n-\n+from Products.Five.browser.metaconfigure import page\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component.factory import Factory\n+from zope.component.interfaces import IFactory\n from zope.component.zcml import adapter\n from zope.component.zcml import utility\n+from zope.interface import alsoProvides\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserView\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from zope.component.interfaces import IFactory\n-from zope.component.factory import Factory\n-\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.Five.browser.metaconfigure import page\n \n # Keep track of which renderers we\'ve registered so that we can artifically\n # subclass them in portletRendererDirective. Yes, this is evil.\n _default_renderers = {}\n \n \n-def portletDirective(_context, name, interface, assignment, renderer, addview,\n-        view_permission=u"zope2.View", edit_permission="plone.app.portlets.ManageOwnPortlets", editview=None):\n+def portletDirective(\n+    _context,\n+    name,\n+    interface,\n+    assignment,\n+    renderer,\n+    addview,\n+    view_permission=u"zope2.View",\n+    edit_permission="plone.app.portlets.ManageOwnPortlets",\n+    editview=None,\n+):\n     """Register a portlet assignment type using typical options.\n \n     Portlets that consist of a simple assignment class deriving form\n@@ -45,17 +50,11 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     # again (in the GS handler)\n \n     alsoProvides(interface, IPortletTypeInterface)\n-    utility(_context,\n-            provides=IPortletTypeInterface,\n-            name=name,\n-            component=interface)\n+    utility(_context, provides=IPortletTypeInterface, name=name, component=interface)\n \n     # Register a factory\n \n-    utility(_context,\n-            provides=IFactory,\n-            name=name,\n-            component=Factory(assignment))\n+    utility(_context, provides=IFactory, name=name, component=Factory(assignment))\n \n     # Set permissions on the assignment class\n \n@@ -81,8 +80,18 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   provides="plone.portlets.interfaces.IPortletRenderer"\n     #   />\n \n-    adapter(_context, (renderer, ), provides=IPortletRenderer,\n-            for_=(Interface, IDefaultBrowserLayer, IBrowserView, IPortletManager, interface))\n+    adapter(\n+        _context,\n+        (renderer,),\n+        provides=IPortletRenderer,\n+        for_=(\n+            Interface,\n+            IDefaultBrowserLayer,\n+            IBrowserView,\n+            IPortletManager,\n+            interface,\n+        ),\n+    )\n     _default_renderers[interface] = renderer\n \n     # Register the adding view\n@@ -94,11 +103,13 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   permission="[edit_permission]"\n     #   />\n \n-    page(_context,\n-         for_=IPortletAdding,\n-         name=name,\n-         class_=addview,\n-         permission=edit_permission)\n+    page(\n+        _context,\n+        for_=IPortletAdding,\n+        name=name,\n+        class_=addview,\n+        permission=edit_permission,\n+    )\n \n     # Register the edit view, if applicable\n \n@@ -110,17 +121,26 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   />\n \n     if editview is not None:\n-        page(_context,\n-             for_=interface,\n-             name="edit",\n-             class_=editview,\n-             permission=edit_permission)\n-\n-\n-def portletRendererDirective(_context, portlet, class_=None, template=None,\n-        for_=Interface, layer=IDefaultBrowserLayer, view=IBrowserView, manager=IPortletManager):\n-    """Register a custom/override portlet renderer\n-    """\n+        page(\n+            _context,\n+            for_=interface,\n+            name="edit",\n+            class_=editview,\n+            permission=edit_permission,\n+        )\n+\n+\n+def portletRendererDirective(\n+    _context,\n+    portlet,\n+    class_=None,\n+    template=None,\n+    for_=Interface,\n+    layer=IDefaultBrowserLayer,\n+    view=IBrowserView,\n+    manager=IPortletManager,\n+):\n+    """Register a custom/override portlet renderer"""\n \n     if class_ is None and template is None:\n         raise TypeError("Either \'template\' or \'class\' must be given")\n@@ -132,12 +152,22 @@ def portletRendererDirective(_context, portlet, class_=None, template=None,\n         # Look up the default renderer for this portlet\n         base_class = _default_renderers.get(portlet, None)\n         if base_class is None:\n-            raise TypeError("Can\'t find default renderer for %s. "\n-                            "Perhaps the portlet has not been registered yet?" % portlet.__identifier__)\n+            raise TypeError(\n+                "Can\'t find default renderer for %s. "\n+                "Perhaps the portlet has not been registered yet?"\n+                % portlet.__identifier__\n+            )\n \n         # Generate a subclass with \'renderer\' using this template\n-        class_ = type("PortletRenderer from %s" % template.encode(\'UTF-8\'),\n-                            (base_class, ), {\'render\': ViewPageTemplateFile(template)})\n-\n-    adapter(_context, (class_, ), provides=IPortletRenderer,\n-                for_=(for_, layer, view, manager, portlet))\n+        class_ = type(\n+            "PortletRenderer from %s" % template.encode("UTF-8"),\n+            (base_class,),\n+            {"render": ViewPageTemplateFile(template)},\n+        )\n+\n+    adapter(\n+        _context,\n+        (class_,),\n+        provides=IPortletRenderer,\n+        for_=(for_, layer, view, manager, portlet),\n+    )\ndiff --git a/plone/app/portlets/metadirectives.py b/plone/app/portlets/metadirectives.py\nindex 3885b0fa..2e07e44b 100644\n--- a/plone/app/portlets/metadirectives.py\n+++ b/plone/app/portlets/metadirectives.py\n@@ -1,13 +1,11 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import Interface\n-\n+from plone.app.portlets import PloneMessageFactory as _\n+from plone.portlets.interfaces import IPortletManager\n from zope import schema\n from zope.configuration import fields as configuration_fields\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer, IBrowserView\n-from plone.portlets.interfaces import IPortletManager\n-\n-from plone.app.portlets import PloneMessageFactory as _\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserView\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n \n class IPortletDirective(Interface):\n@@ -20,61 +18,64 @@ class IPortletDirective(Interface):\n     name = schema.TextLine(\n         title=_(u"Name"),\n         description=_(u"A unique name for the portlet. Also used for its add view."),\n-        required=True)\n+        required=True,\n+    )\n \n     interface = configuration_fields.GlobalInterface(\n         title=_(u"Assignment type interface"),\n         description=_(u"Should correspond to the public interface of the assignment"),\n-        required=True)\n+        required=True,\n+    )\n \n     assignment = configuration_fields.GlobalObject(\n         title=_(u"Assignment class"),\n         description=_(u"A persistent class storing the portlet assignment"),\n-        required=True)\n+        required=True,\n+    )\n \n     view_permission = schema.TextLine(\n         title=_(u"View permission"),\n         description=_(u"Permission used for viewing the portlet."),\n         required=False,\n-        default=u"zope2.View"\n-        )\n+        default=u"zope2.View",\n+    )\n \n     edit_permission = schema.TextLine(\n         title=_(u"Edit permission"),\n         description=_(u"Permission used for editing the portlet assignment."),\n         required=False,\n-        default=u"plone.app.portlets.ManageOwnPortlets"\n-        )\n+        default=u"plone.app.portlets.ManageOwnPortlets",\n+    )\n \n     renderer = configuration_fields.GlobalObject(\n         title=_(u"Renderer"),\n         description=_(u"A class which renders the portlet data provider"),\n-        required=True\n-        )\n+        required=True,\n+    )\n \n     addview = configuration_fields.GlobalObject(\n         title=_(u"Add view"),\n         description=_(u"View used to add the assignment object"),\n-        required=True\n-        )\n+        required=True,\n+    )\n \n     editview = configuration_fields.GlobalObject(\n         title=_(u"Edit view"),\n         description=_(u"View used to edit the assignment object (if appropriate)"),\n-        required=False\n-        )\n+        required=False,\n+    )\n \n \n class IPortletRendererDirective(Interface):\n-    """Register a portlet renderer, i.e. a different view of a portlet\n-    """\n+    """Register a portlet renderer, i.e. a different view of a portlet"""\n \n     # The portlet data provider type must be given\n \n     portlet = configuration_fields.GlobalObject(\n         title=_("Portlet data provider type for which this renderer is used"),\n         description=_("An interface or class"),\n-        required=True)\n+        required=True,\n+    )\n \n     # Use either class or template to specify the custom renderer\n \n@@ -82,13 +83,15 @@ class IPortletRendererDirective(Interface):\n         title=_("Class"),\n         description=_("A class acting as the renderer."),\n         required=False,\n-        )\n+    )\n \n     template = configuration_fields.Path(\n         title=_(u"The name of a template that implements the renderer."),\n-        description=_(u"If given, the default renderer for this portlet will be used, but with this template"),\n-        required=False\n-        )\n+        description=_(\n+            u"If given, the default renderer for this portlet will be used, but with this template"\n+        ),\n+        required=False,\n+    )\n \n     # Use these to discriminate the renderer.\n \n@@ -97,23 +100,25 @@ class IPortletRendererDirective(Interface):\n         description=_("""An interface or class"""),\n         required=False,\n         default=Interface,\n-        )\n+    )\n \n     layer = configuration_fields.GlobalObject(\n         title=_("Browser layer for which this renderer is used"),\n         description=_("""An interface or class"""),\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     view = configuration_fields.GlobalObject(\n         title=_("Browser view type for this this renderer is used"),\n         description=_("An interface or class"),\n         required=False,\n-        default=IBrowserView)\n+        default=IBrowserView,\n+    )\n \n     manager = configuration_fields.GlobalObject(\n         title=_("Portlet manager type for which this renderer is used"),\n         description=_("An interface or class"),\n         required=False,\n-        default=IPortletManager)\n+        default=IPortletManager,\n+    )\ndiff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex f45ebe46..f61cd8c9 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -1,16 +1,16 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer, Interface\n-from zope.component import adapts\n-\n-from Acquisition import aq_parent, aq_inner, aq_base\n-\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletContext\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-\n-from plone.portlets.interfaces import IPortletContext\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from zope.component import adapts\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n import six\n \n@@ -23,6 +23,7 @@ class ContentContext(object):\n     tools and other non-content items. This may hijack the context in non-CMF\n     contexts, but that is doubtfully going to be an issue.\n     """\n+\n     adapts(Interface)\n \n     def __init__(self, context):\n@@ -30,7 +31,7 @@ def __init__(self, context):\n \n     @property\n     def uid(self):\n-        return \'/\'.join(self.context.getPhysicalPath())\n+        return "/".join(self.context.getPhysicalPath())\n \n     def getParent(self):\n         return aq_parent(aq_inner(self.context))\n@@ -49,7 +50,7 @@ def globalPortletCategories(self, placeless=False):\n         return cats\n \n     def _getUserId(self):\n-        membership = getToolByName(self.context, \'portal_membership\', None)\n+        membership = getToolByName(self.context, "portal_membership", None)\n         if membership is None:\n             return None\n \n@@ -72,7 +73,7 @@ def _getUserId(self):\n         return memberId\n \n     def _getGroupIds(self):\n-        membership = getToolByName(self.context, \'portal_membership\', None)\n+        membership = getToolByName(self.context, "portal_membership", None)\n         if membership is None or membership.isAnonymousUser():\n             return ()\n \n@@ -80,7 +81,7 @@ def _getGroupIds(self):\n         if not member:\n             return ()\n \n-        groups = hasattr(member, \'getGroups\') and member.getGroups() or []\n+        groups = hasattr(member, "getGroups") and member.getGroups() or []\n \n         # Ensure we get the list of ids - getGroups() suffers some acquision\n         # ambiguity - the Plone member-data version returns ids.\n@@ -92,12 +93,12 @@ def _getGroupIds(self):\n         return sorted(groups)\n \n     def _getContentType(self):\n-        typeInfo = getattr(aq_base(self.context), \'getTypeInfo\', None)\n+        typeInfo = getattr(aq_base(self.context), "getTypeInfo", None)\n         if typeInfo is not None:\n             fti = typeInfo()\n             if fti is not None:\n                 return fti.getId()\n-        portal_type = getattr(aq_base(self.context), \'portal_type\', None)\n+        portal_type = getattr(aq_base(self.context), "portal_type", None)\n         if portal_type is not None:\n             return portal_type\n         return None\n@@ -105,8 +106,8 @@ def _getContentType(self):\n \n @implementer(IPortletContext)\n class PortalRootContext(ContentContext):\n-    """A portlet context for the site root.\n-    """\n+    """A portlet context for the site root."""\n+\n     adapts(ISiteRoot)\n \n     def __init__(self, context):\ndiff --git a/plone/app/portlets/portlets/__init__.py b/plone/app/portlets/portlets/__init__.py\nindex 4aa11c79..ec51c5a2 100644\n--- a/plone/app/portlets/portlets/__init__.py\n+++ b/plone/app/portlets/portlets/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/portlets/portlets/actions.py b/plone/app/portlets/portlets/actions.py\nindex 723bc6dd..99a36053 100644\n--- a/plone/app/portlets/portlets/actions.py\n+++ b/plone/app/portlets/portlets/actions.py\n@@ -16,44 +16,45 @@ class IActionsPortlet(IPortletDataProvider):\n     """A portlet that shows an action category"""\n \n     ptitle = schema.TextLine(\n-        title=_(u\'label_title\',\n-                default=u"Title"),\n-        description=_(u\'help_title\',\n-                      default=u"Displayed title of this portlet"),\n+        title=_(u"label_title", default=u"Title"),\n+        description=_(u"help_title", default=u"Displayed title of this portlet"),\n         default=u"",\n-        required=False)\n+        required=False,\n+    )\n \n     show_title = schema.Bool(\n-        title=_(u\'label_show_title\',\n-                default=u"Show title"),\n-        description=_(u\'help_show_title\',\n-                      default=u"Show title of this portlet."),\n+        title=_(u"label_show_title", default=u"Show title"),\n+        description=_(u"help_show_title", default=u"Show title of this portlet."),\n         required=True,\n-        default=True)\n+        default=True,\n+    )\n \n     category = schema.Choice(\n-        title=_(u\'label_actions_category\',\n-                default=u"Actions category"),\n-        description=_(u\'help_actions_category\',\n-                      default=u"Select an action category"),\n+        title=_(u"label_actions_category", default=u"Actions category"),\n+        description=_(u"help_actions_category", default=u"Select an action category"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.Actions\')\n+        vocabulary="plone.app.vocabularies.Actions",\n+    )\n \n     show_icons = schema.Bool(\n-        title=_(u\'label_show_icons\',\n-                default=u"Show icons"),\n-        description=_(u\'help_show_icons\',\n-                      default=u"Show icons or default icon for actions without icon."),\n+        title=_(u"label_show_icons", default=u"Show icons"),\n+        description=_(\n+            u"help_show_icons",\n+            default=u"Show icons or default icon for actions without icon.",\n+        ),\n         required=True,\n-        default=True)\n+        default=True,\n+    )\n \n     default_icon = schema.ASCIILine(\n-        title=_(u\'label_default_icon\',\n-                default=u"Default icon"),\n-        description=_(u\'help_default_icon\',\n-                      default=u"What icon we should use for actions with no specific icons. A 16*16 pixels image."),\n+        title=_(u"label_default_icon", default=u"Default icon"),\n+        description=_(\n+            u"help_default_icon",\n+            default=u"What icon we should use for actions with no specific icons. A 16*16 pixels image.",\n+        ),\n         required=False,\n-        default=\'action_icon.png\')\n+        default="action_icon.png",\n+    )\n \n \n @implementer(IActionsPortlet)\n@@ -67,9 +68,16 @@ class Assignment(base.Assignment):\n     show_title = True\n     category = u""\n     show_icons = True\n-    default_icon = \'action_icon.png\'\n-\n-    def __init__(self, ptitle=u"", show_title=True, category=u"", show_icons=True, default_icon=\'action_icon.png\'):\n+    default_icon = "action_icon.png"\n+\n+    def __init__(\n+        self,\n+        ptitle=u"",\n+        show_title=True,\n+        category=u"",\n+        show_icons=True,\n+        default_icon="action_icon.png",\n+    ):\n         self.ptitle = ptitle\n         self.show_title = show_title\n         self.category = category\n@@ -88,7 +96,7 @@ def title(self):\n class Renderer(base.Renderer):\n     """Actions portlet renderer."""\n \n-    render = ViewPageTemplateFile(\'actions.pt\')\n+    render = ViewPageTemplateFile("actions.pt")\n \n     @property\n     def available(self):\n@@ -107,8 +115,9 @@ def showTitle(self):\n \n     def actionLinks(self):\n         """Features of action links"""\n-        return self.cachedLinks(self.data.category, self.data.default_icon,\n-                                self.data.show_icons)\n+        return self.cachedLinks(\n+            self.data.category, self.data.default_icon, self.data.show_icons\n+        )\n \n     @property\n     def category(self):\n@@ -116,8 +125,9 @@ def category(self):\n \n     @pm_view.memoize\n     def cachedLinks(self, actions_category, default_icon, show_icons):\n-        context_state = getMultiAdapter((aq_inner(self.context), self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (aq_inner(self.context), self.request), name=u"plone_context_state"\n+        )\n         actions = context_state.actions(actions_category)\n \n         def render_icon(category, action_id, default):\n@@ -130,39 +140,40 @@ def render_icon(category, action_id, default):\n         if actions_category == "portal_tabs":\n             # Special case for portal_tabs (we rely on content in Plone root)\n             portal_tabs_view = getMultiAdapter(\n-                (self.context, self.context.REQUEST), name=\'portal_tabs_view\')\n+                (self.context, self.context.REQUEST), name="portal_tabs_view"\n+            )\n             actions = portal_tabs_view.topLevelTabs(actions=actions)\n             for action in actions:\n                 link = {\n-                    \'id\':action[\'id\'],\n-                    \'url\': action[\'url\'],\n-                    \'title\': action[\'name\'],\n-                    \'icon\': render_icon(\n-                        actions_category,\n-                        action,\n-                        default=default_icon)\n-                    }\n+                    "id": action["id"],\n+                    "url": action["url"],\n+                    "title": action["name"],\n+                    "icon": render_icon(actions_category, action, default=default_icon),\n+                }\n                 result.append(link)\n         else:\n-            if actions_category == \'object_buttons\':\n-                actions_tool = getMultiAdapter((aq_inner(self.context), self.request), name=u\'plone_tools\').actions()\n-                actions = actions_tool.listActionInfos(object=aq_inner(self.context), categories=(actions_category,))\n+            if actions_category == "object_buttons":\n+                actions_tool = getMultiAdapter(\n+                    (aq_inner(self.context), self.request), name=u"plone_tools"\n+                ).actions()\n+                actions = actions_tool.listActionInfos(\n+                    object=aq_inner(self.context), categories=(actions_category,)\n+                )\n             for action in actions:\n-                if not (action[\'available\']\n-                        and action[\'visible\']\n-                        and action[\'allowed\']\n-                        and action[\'url\']):\n+                if not (\n+                    action["available"]\n+                    and action["visible"]\n+                    and action["allowed"]\n+                    and action["url"]\n+                ):\n                     continue\n                 link = {\n-                    \'id\': action[\'id\'],\n-                    \'url\': action[\'url\'],\n-                    \'title\': action[\'title\'],\n-                    \'icon\': render_icon(\n-                        actions_category,\n-                        action,\n-                        default=default_icon),\n-                    \'modal\': action.get(\'modal\'),\n-                    }\n+                    "id": action["id"],\n+                    "url": action["url"],\n+                    "title": action["title"],\n+                    "icon": render_icon(actions_category, action, default=default_icon),\n+                    "modal": action.get("modal"),\n+                }\n                 result.append(link)\n         return result\n \n@@ -173,11 +184,13 @@ class AddForm(base.AddForm):\n     plone.autoform which fields to display. The create() method actually\n     constructs the assignment that is being added.\n     """\n+\n     schema = IActionsPortlet\n-    label = _(u\'heading_add_actions_portlet\',\n-              default=u\'Add actions portlet\')\n-    description = _(u\'help_add_actions_portlet\',\n-                    default=u\'An action portlet displays actions from a category\')\n+    label = _(u"heading_add_actions_portlet", default=u"Add actions portlet")\n+    description = _(\n+        u"help_add_actions_portlet",\n+        default=u"An action portlet displays actions from a category",\n+    )\n \n     def create(self, data):\n         return Assignment(**data)\n@@ -189,4 +202,5 @@ class EditForm(base.EditForm):\n     This is registered with configure.zcml. The schema attribute tells\n     plone.autoform which fields to display.\n     """\n+\n     schema = IActionsPortlet\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex 12e5afe3..b13edf97 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -1,5 +1,10 @@\n # -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n+\n+# Convenience imports\n+from plone.app.portlets.browser.formhelper import AddForm\n+from plone.app.portlets.browser.formhelper import EditForm\n+from plone.app.portlets.browser.formhelper import NullAddForm\n from plone.app.portlets.interfaces import IDeferredPortletRenderer\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletRenderer\n@@ -7,11 +12,6 @@\n from zope.container.contained import Contained\n from zope.interface import implementer\n \n-# Convenience imports\n-from plone.app.portlets.browser.formhelper import AddForm\n-from plone.app.portlets.browser.formhelper import NullAddForm\n-from plone.app.portlets.browser.formhelper import EditForm\n-\n \n @implementer(IPortletAssignment)\n class Assignment(SimpleItem, Contained):\n@@ -21,25 +21,23 @@ class Assignment(SimpleItem, Contained):\n     may\n     """\n \n-    __name__ = \'\'\n+    __name__ = ""\n \n     @property\n     def id(self):\n-        return getattr(self, \'__name__\', \'\')\n+        return getattr(self, "__name__", "")\n \n     @property\n     def title(self):\n         return self.id\n \n     def available(self, context, request):\n-        """By default, this portlet is always available\n-        """\n+        """By default, this portlet is always available"""\n         return True\n \n     @property\n     def data(self):\n-        """Make the assignment itself represent the data object that is being rendered.\n-        """\n+        """Make the assignment itself represent the data object that is being rendered."""\n         return self\n \n \n@@ -70,13 +68,13 @@ def update(self):\n         pass\n \n     def render(self):\n-        raise NotImplementedError("You must implement \'render\' as a method "\n-                                  "or page template file attribute")\n+        raise NotImplementedError(\n+            "You must implement \'render\' as a method " "or page template file attribute"\n+        )\n \n     @property\n     def available(self):\n-        """By default, portlets are available\n-        """\n+        """By default, portlets are available"""\n         return True\n \n \n@@ -88,10 +86,12 @@ class DeferredRenderer(Renderer):\n \n     """\n \n-    render_preload = ViewPageTemplateFile(\'deferred_portlet.pt\')\n+    render_preload = ViewPageTemplateFile("deferred_portlet.pt")\n \n     def render_full(self):\n-        raise NotImplemented("You must implement \'render_full\' as a method or page template file attribute")\n+        raise NotImplemented(\n+            "You must implement \'render_full\' as a method or page template file attribute"\n+        )\n \n     def render(self):\n         """render the portlet\ndiff --git a/plone/app/portlets/portlets/classic.py b/plone/app/portlets/portlets/classic.py\nindex bd4b2229..d5102bc3 100644\n--- a/plone/app/portlets/portlets/classic.py\n+++ b/plone/app/portlets/portlets/classic.py\n@@ -8,26 +8,27 @@\n \n \n class IClassicPortlet(IPortletDataProvider):\n-    """A portlet which can render a classic Plone portlet macro\n-    """\n+    """A portlet which can render a classic Plone portlet macro"""\n \n     template = schema.ASCIILine(\n-        title=_(u\'Template\'),\n-        description=_(u\'The template containing the portlet.\'),\n-        required=True)\n+        title=_(u"Template"),\n+        description=_(u"The template containing the portlet."),\n+        required=True,\n+    )\n \n     macro = schema.ASCIILine(\n-        title=_(u\'Macro\'),\n-        description=_(u"The macro containing the portlet. "\n-                      u"Leave blank if there is no macro."),\n-        default=\'portlet\',\n-        required=False)\n+        title=_(u"Macro"),\n+        description=_(\n+            u"The macro containing the portlet. " u"Leave blank if there is no macro."\n+        ),\n+        default="portlet",\n+        required=False,\n+    )\n \n \n @implementer(IClassicPortlet)\n class Assignment(base.Assignment):\n-\n-    def __init__(self, template=\'\', macro=\'\'):\n+    def __init__(self, template="", macro=""):\n         self.template = template\n         self.macro = macro\n \n@@ -37,37 +38,39 @@ def title(self):\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         self.context = context\n         self.request = request\n         self.data = data\n \n-    render = ViewPageTemplateFile(\'classic.pt\')\n+    render = ViewPageTemplateFile("classic.pt")\n \n     def use_macro(self):\n         return bool(self.data.macro)\n \n     def path_expression(self):\n-        expr = \'context/%s\' % self.data.template\n+        expr = "context/%s" % self.data.template\n         if self.use_macro():\n-            expr += \'/macros/%s\' % self.data.macro\n+            expr += "/macros/%s" % self.data.macro\n         return expr\n \n \n class AddForm(base.AddForm):\n     schema = IClassicPortlet\n     label = _(u"Add Classic Portlet")\n-    description = _(u"A classic portlet allows you to use legacy portlet "\n-                    u"templates.")\n+    description = _(\n+        u"A classic portlet allows you to use legacy portlet " u"templates."\n+    )\n \n     def create(self, data):\n-        return Assignment(template=data.get(\'template\', \'\'),\n-                          macro=data.get(\'macro\', \'\'))\n+        return Assignment(\n+            template=data.get("template", ""), macro=data.get("macro", "")\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = IClassicPortlet\n     label = _(u"Edit Classic Portlet")\n-    description = _(u"A classic portlet allows you to use legacy portlet "\n-                    u"templates.")\n+    description = _(\n+        u"A classic portlet allows you to use legacy portlet " u"templates."\n+    )\ndiff --git a/plone/app/portlets/portlets/language.py b/plone/app/portlets/portlets/language.py\nindex 38da5ed0..33b89cd8 100644\n--- a/plone/app/portlets/portlets/language.py\n+++ b/plone/app/portlets/portlets/language.py\n@@ -9,18 +9,16 @@\n \n \n class ILanguagePortlet(IPortletDataProvider):\n-    """A portlet which shows the available portal languages.\n-    """\n+    """A portlet which shows the available portal languages."""\n \n \n @implementer(ILanguagePortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u\'label_languages\', default=u\'Languages\')\n+    title = _(u"label_languages", default=u"Languages")\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n         self.selector = LanguageSelector(context, request, None, None)\n@@ -29,9 +27,9 @@ def __init__(self, context, request, view, manager, data):\n \n         def key(info):\n             return info.get("native", info["name"])\n+\n         self.languages.sort(key=key)\n-        portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.navigation_root_url = portal_state.navigation_root_url()\n \n     def show(self):\n@@ -47,10 +45,9 @@ def showFlags(self):\n     def update(self):\n         pass\n \n-    render = ViewPageTemplateFile(\'language.pt\')\n+    render = ViewPageTemplateFile("language.pt")\n \n \n class AddForm(base.NullAddForm):\n-\n     def create(self):\n         return Assignment()\ndiff --git a/plone/app/portlets/portlets/login.py b/plone/app/portlets/portlets/login.py\nindex 29a7aa08..fc4a96bc 100644\n--- a/plone/app/portlets/portlets/login.py\n+++ b/plone/app/portlets/portlets/login.py\n@@ -10,98 +10,97 @@\n \n \n class ILoginPortlet(IPortletDataProvider):\n-    """A portlet which can render a login form.\n-    """\n+    """A portlet which can render a login form."""\n \n \n @implementer(ILoginPortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u\'label_log_in\', default=u\'Log in\')\n+    title = _(u"label_log_in", default=u"Log in")\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        self.membership = getToolByName(self.context, \'portal_membership\')\n+        self.membership = getToolByName(self.context, "portal_membership")\n \n         self.context_state = getMultiAdapter(\n-            (context, request), name=\'plone_context_state\')\n+            (context, request), name="plone_context_state"\n+        )\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n-        self.pas_info = getMultiAdapter((context, request), name=\'pas_info\')\n+            (context, request), name="plone_portal_state"\n+        )\n+        self.pas_info = getMultiAdapter((context, request), name="pas_info")\n \n     def show(self):\n         if not self.portal_state.anonymous():\n             return False\n         if not self.pas_info.hasLoginPasswordExtractor():\n             return False\n-        page = self.request.get(\'URL\', \'\').split(\'/\')[-1]\n-        return page not in (\'login_form\', \'@@register\')\n+        page = self.request.get("URL", "").split("/")[-1]\n+        return page not in ("login_form", "@@register")\n \n     @property\n     def available(self):\n         return self.auth() is not None and self.show()\n \n     def login_form(self):\n-        return \'%s/login_form\' % self.portal_state.portal_url()\n+        return "%s/login_form" % self.portal_state.portal_url()\n \n     def mail_password_form(self):\n-        return \'%s/mail_password_form\' % self.portal_state.portal_url()\n+        return "%s/mail_password_form" % self.portal_state.portal_url()\n \n     def login_name(self):\n         auth = self.auth()\n         name = None\n         if auth is not None:\n-            name = getattr(auth, \'name_cookie\', None)\n+            name = getattr(auth, "name_cookie", None)\n         if not name:\n-            name = \'__ac_name\'\n+            name = "__ac_name"\n         return name\n \n     def login_password(self):\n         auth = self.auth()\n         passwd = None\n         if auth is not None:\n-            passwd = getattr(auth, \'pw_cookie\', None)\n+            passwd = getattr(auth, "pw_cookie", None)\n         if not passwd:\n-            passwd = \'__ac_password\'\n+            passwd = "__ac_password"\n         return passwd\n \n     def join_action(self):\n         context = self.context\n-        tool = getToolByName(context, \'portal_actions\')\n-        join = tool.listActionInfos(action_chain=\'user/join\', object=context)\n+        tool = getToolByName(context, "portal_actions")\n+        join = tool.listActionInfos(action_chain="user/join", object=context)\n         if len(join) > 0:\n-            return join[0][\'url\']\n+            return join[0]["url"]\n         return None\n \n     def can_register(self):\n-        if getToolByName(self.context, \'portal_registration\', None) is None \\\n-           or not self.join_action():\n+        if (\n+            getToolByName(self.context, "portal_registration", None) is None\n+            or not self.join_action()\n+        ):\n             return False\n-        return self.membership.checkPermission(\n-            \'Add portal member\', self.context)\n+        return self.membership.checkPermission("Add portal member", self.context)\n \n     def can_request_password(self):\n-        return self.membership.checkPermission(\n-            \'Mail forgotten password\', self.context)\n+        return self.membership.checkPermission("Mail forgotten password", self.context)\n \n     @memoize\n     def auth(self, _marker=None):\n         if _marker is None:\n             _marker = []\n-        acl_users = getToolByName(self.context, \'acl_users\')\n-        return getattr(acl_users, \'credentials_cookie_auth\', None)\n+        acl_users = getToolByName(self.context, "acl_users")\n+        return getattr(acl_users, "credentials_cookie_auth", None)\n \n     def update(self):\n         pass\n \n-    render = ViewPageTemplateFile(\'login.pt\')\n+    render = ViewPageTemplateFile("login.pt")\n \n \n class AddForm(base.NullAddForm):\n-\n     def create(self):\n         return Assignment()\ndiff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py\nindex 861b48c2..5e5ff34c 100644\n--- a/plone/app/portlets/portlets/navigation.py\n+++ b/plone/app/portlets/portlets/navigation.py\n@@ -41,76 +41,92 @@\n \n \n class INavigationPortlet(IPortletDataProvider):\n-    """A portlet which can render the navigation tree\n-    """\n+    """A portlet which can render the navigation tree"""\n \n     name = schema.TextLine(\n-            title=_(u"label_navigation_title", default=u"Title"),\n-            description=_(u"help_navigation_title",\n-                          default=u"The title of the navigation tree."),\n-            default=u"",\n-            required=False)\n+        title=_(u"label_navigation_title", default=u"Title"),\n+        description=_(\n+            u"help_navigation_title", default=u"The title of the navigation tree."\n+        ),\n+        default=u"",\n+        required=False,\n+    )\n \n     root_uid = schema.Choice(\n-            title=_(u"label_navigation_root_path", default=u"Root node"),\n-            description=_(u\'help_navigation_root\',\n-                          default=u"You may search for and choose a folder "\n-                                    "to act as the root of the navigation tree. "\n-                                    "Leave blank to use the Plone site root."),\n-            required=False,\n-            source=CatalogSource(is_folderish=True),\n-            )\n+        title=_(u"label_navigation_root_path", default=u"Root node"),\n+        description=_(\n+            u"help_navigation_root",\n+            default=u"You may search for and choose a folder "\n+            "to act as the root of the navigation tree. "\n+            "Leave blank to use the Plone site root.",\n+        ),\n+        required=False,\n+        source=CatalogSource(is_folderish=True),\n+    )\n \n     includeTop = schema.Bool(\n-            title=_(u"label_include_top_node", default=u"Include top node"),\n-            description=_(u"help_include_top_node",\n-                          default=u"Whether or not to show the top, or \'root\', "\n-                                   "node in the navigation tree. This is affected "\n-                                   "by the \'Start level\' setting."),\n-            default=False,\n-            required=False)\n+        title=_(u"label_include_top_node", default=u"Include top node"),\n+        description=_(\n+            u"help_include_top_node",\n+            default=u"Whether or not to show the top, or \'root\', "\n+            "node in the navigation tree. This is affected "\n+            "by the \'Start level\' setting.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n     currentFolderOnly = schema.Bool(\n-            title=_(u"label_current_folder_only",\n-                    default=u"Only show the contents of the current folder."),\n-            description=_(u"help_current_folder_only",\n-                          default=u"If selected, the navigation tree will "\n-                                   "only show the current folder and its "\n-                                   "children at all times."),\n-            default=False,\n-            required=False)\n+        title=_(\n+            u"label_current_folder_only",\n+            default=u"Only show the contents of the current folder.",\n+        ),\n+        description=_(\n+            u"help_current_folder_only",\n+            default=u"If selected, the navigation tree will "\n+            "only show the current folder and its "\n+            "children at all times.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n     topLevel = schema.Int(\n-            title=_(u"label_navigation_startlevel", default=u"Start level"),\n-            description=_(u"help_navigation_start_level",\n-                default=u"An integer value that specifies the number of folder "\n-                         "levels below the site root that must be exceeded "\n-                         "before the navigation tree will display. 0 means "\n-                         "that the navigation tree should be displayed "\n-                         "everywhere including pages in the root of the site. "\n-                         "1 means the tree only shows up inside folders "\n-                         "located in the root and downwards, never showing "\n-                         "at the top level."),\n-            default=1,\n-            required=False)\n+        title=_(u"label_navigation_startlevel", default=u"Start level"),\n+        description=_(\n+            u"help_navigation_start_level",\n+            default=u"An integer value that specifies the number of folder "\n+            "levels below the site root that must be exceeded "\n+            "before the navigation tree will display. 0 means "\n+            "that the navigation tree should be displayed "\n+            "everywhere including pages in the root of the site. "\n+            "1 means the tree only shows up inside folders "\n+            "located in the root and downwards, never showing "\n+            "at the top level.",\n+        ),\n+        default=1,\n+        required=False,\n+    )\n \n     bottomLevel = schema.Int(\n-            title=_(u"label_navigation_tree_depth",\n-                    default=u"Navigation tree depth"),\n-            description=_(u"help_navigation_tree_depth",\n-                          default=u"How many folders should be included "\n-                                   "before the navigation tree stops. 0 "\n-                                   "means no limit. 1 only includes the "\n-                                   "root folder."),\n-            default=0,\n-            required=False)\n+        title=_(u"label_navigation_tree_depth", default=u"Navigation tree depth"),\n+        description=_(\n+            u"help_navigation_tree_depth",\n+            default=u"How many folders should be included "\n+            "before the navigation tree stops. 0 "\n+            "means no limit. 1 only includes the "\n+            "root folder.",\n+        ),\n+        default=0,\n+        required=False,\n+    )\n \n     no_icons = schema.Bool(\n         title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons."),\n+        description=_(u"If enabled, the portlet will not show document type icons."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n         title=_(u"Override thumb scale"),\n@@ -121,14 +137,15 @@ class INavigationPortlet(IPortletDataProvider):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     no_thumbs = schema.Bool(\n         title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n+        description=_(u"If enabled, the portlet will not show thumbs."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(INavigationPortlet)\n@@ -146,16 +163,16 @@ class Assignment(base.Assignment):\n     no_thumbs = False\n \n     def __init__(\n-            self,\n-            name="",\n-            root_uid=None,\n-            currentFolderOnly=False,\n-            includeTop=False,\n-            topLevel=1,\n-            bottomLevel=0,\n-            no_icons=False,\n-            thumb_scale=None,\n-            no_thumbs=False\n+        self,\n+        name="",\n+        root_uid=None,\n+        currentFolderOnly=False,\n+        includeTop=False,\n+        topLevel=1,\n+        bottomLevel=0,\n+        no_icons=False,\n+        thumb_scale=None,\n+        no_thumbs=False,\n     ):\n         self.name = name\n         self.root_uid = root_uid\n@@ -174,7 +191,7 @@ def title(self):\n         """\n         if self.name:\n             return self.name\n-        return _(u\'Navigation\')\n+        return _(u"Navigation")\n \n     def _root(self):\n         # This is only called if the instance doesn\'t have a root_uid\n@@ -183,22 +200,22 @@ def _root(self):\n         root = self.root\n         if not root:\n             return None\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         navroot = getNavigationRootObject(self, portal)\n         try:\n-            root = navroot.unrestrictedTraverse(root.lstrip(\'/\'))\n+            root = navroot.unrestrictedTraverse(root.lstrip("/"))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return root.UID()\n+\n     root_uid = ComputedAttribute(_root, 1)\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        self.urltool = getToolByName(context, \'portal_url\')\n+        self.urltool = getToolByName(context, "portal_url")\n \n     def title(self):\n         return self.data.name or self.data.title\n@@ -216,10 +233,10 @@ def available(self):\n             return True\n \n         tree = self.getNavTree()\n-        return len(tree[\'children\']) > 0\n+        return len(tree["children"]) > 0\n \n     def include_top(self):\n-        return getattr(self.data, \'includeTop\', True)\n+        return getattr(self.data, "includeTop", True)\n \n     def navigation_root(self):\n         return self.getNavRoot()\n@@ -239,7 +256,9 @@ def heading_link_target(self):\n         if not self.data.root_uid and not self.data.currentFolderOnly:\n             # No particular root item assigned -> should get link to the\n             # navigation root sitemap of the current context acquisition chain\n-            portal_state = getMultiAdapter((self.context, self.request), name="plone_portal_state")\n+            portal_state = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            )\n             return portal_state.navigation_root_url() + "/sitemap"\n \n         nav_root = self.getNavRoot()\n@@ -263,11 +282,11 @@ def root_item_class(self):\n         context = aq_inner(self.context)\n         root = self.getNavRoot()\n         container = aq_parent(context)\n-        if (aq_base(root) is aq_base(context) or\n-                (aq_base(root) is aq_base(container) and\n-                is_default_page(container, context))):\n-            return \'navTreeCurrentItem\'\n-        return \'\'\n+        if aq_base(root) is aq_base(context) or (\n+            aq_base(root) is aq_base(container) and is_default_page(container, context)\n+        ):\n+            return "navTreeCurrentItem"\n+        return ""\n \n     def root_is_portal(self):\n         root = self.getNavRoot()\n@@ -283,16 +302,20 @@ def createNavTree(self):\n             # meaning that the admin does not want the listing to be displayed\n             return self.recurse([], level=1, bottomLevel=bottomLevel)\n         else:\n-            return self.recurse(children=data.get(\'children\', []), level=1, bottomLevel=bottomLevel)\n+            return self.recurse(\n+                children=data.get("children", []), level=1, bottomLevel=bottomLevel\n+            )\n \n     # Cached lookups\n \n     @memoize\n     def getNavRootPath(self):\n-        return getRootPath(self.context,\n-                           self.data.currentFolderOnly,\n-                           self.data.topLevel,\n-                           self.data.root_uid)\n+        return getRootPath(\n+            self.context,\n+            self.data.currentFolderOnly,\n+            self.data.topLevel,\n+            self.data.root_uid,\n+        )\n \n     @memoize\n     def getNavRoot(self, _marker=None):\n@@ -321,11 +344,12 @@ def getNavTree(self, _marker=None):\n         queryBuilder = getMultiAdapter((context, self.data), INavigationQueryBuilder)\n         strategy = getMultiAdapter((context, self.data), INavtreeStrategy)\n \n-        return buildFolderTree(context, obj=context, query=queryBuilder(), strategy=strategy)\n-\n+        return buildFolderTree(\n+            context, obj=context, query=queryBuilder(), strategy=strategy\n+        )\n \n-    _template = ViewPageTemplateFile(\'navigation.pt\')\n-    recurse = ViewPageTemplateFile(\'navigation_recurse.pt\')\n+    _template = ViewPageTemplateFile("navigation.pt")\n+    recurse = ViewPageTemplateFile("navigation_recurse.pt")\n \n     @memoize\n     def thumb_scale(self):\n@@ -333,35 +357,31 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', None)\n+        thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n-            return \'none\'\n+            return "none"\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n     def getMimeTypeIcon(self, node):\n         try:\n-            if not node[\'normalized_portal_type\'] == \'file\':\n+            if not node["normalized_portal_type"] == "file":\n                 return None\n-            fileo = node[\'item\'].getObject().file\n+            fileo = node["item"].getObject().file\n             portal_url = getNavigationRoot(self.context)\n-            mtt = getToolByName(self.context, \'mimetypes_registry\')\n+            mtt = getToolByName(self.context, "mimetypes_registry")\n             if fileo.contentType:\n                 ctype = mtt.lookup(fileo.contentType)\n                 if not ctype:\n                     return None\n-                return os.path.join(\n-                    portal_url,\n-                    guess_icon_path(ctype[0])\n-                )\n+                return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         except AttributeError:\n             return None\n         return None\n@@ -379,34 +399,39 @@ class AddForm(base.AddForm):\n     description = _(u"This portlet displays a navigation tree.")\n \n     def create(self, data):\n-        return Assignment(name=data.get(\'name\', ""),\n-                          root_uid=data.get(\'root_uid\', ""),\n-                          currentFolderOnly=data.get(\'currentFolderOnly\', False),\n-                          includeTop=data.get(\'includeTop\', False),\n-                          topLevel=data.get(\'topLevel\', 0),\n-                          bottomLevel=data.get(\'bottomLevel\', 0))\n+        return Assignment(\n+            name=data.get("name", ""),\n+            root_uid=data.get("root_uid", ""),\n+            currentFolderOnly=data.get("currentFolderOnly", False),\n+            includeTop=data.get("includeTop", False),\n+            topLevel=data.get("topLevel", 0),\n+            bottomLevel=data.get("bottomLevel", 0),\n+        )\n+\n \n class EditForm(base.EditForm):\n     schema = INavigationPortlet\n     label = _(u"Edit Navigation Portlet")\n     description = _(u"This portlet displays a navigation tree.")\n \n+\n @implementer(INavigationQueryBuilder)\n class QueryBuilder(object):\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\n+\n     adapts(Interface, INavigationPortlet)\n \n     def __init__(self, context, portlet):\n         self.context = context\n         self.portlet = portlet\n \n-        portal_properties = getToolByName(context, \'portal_properties\')\n-        navtree_properties = getattr(portal_properties, \'navtree_properties\')\n+        portal_properties = getToolByName(context, "portal_properties")\n+        navtree_properties = getattr(portal_properties, "navtree_properties")\n \n         # Acquire a custom nav query if available\n-        customQuery = getattr(context, \'getCustomNavQuery\', None)\n+        customQuery = getattr(context, "getCustomNavQuery", None)\n         if customQuery is not None and utils.safe_callable(customQuery):\n             query = customQuery()\n         else:\n@@ -415,46 +440,43 @@ def __init__(self, context, portlet):\n         # Construct the path query\n         root = uuidToObject(portlet.root_uid)\n         if root is not None:\n-            rootPath = \'/\'.join(root.getPhysicalPath())\n+            rootPath = "/".join(root.getPhysicalPath())\n         else:\n             rootPath = getNavigationRoot(context)\n-        currentPath = \'/\'.join(context.getPhysicalPath())\n+        currentPath = "/".join(context.getPhysicalPath())\n \n         # If we are above the navigation root, a navtree query would return\n         # nothing (since we explicitly start from the root always). Hence,\n         # use a regular depth-1 query in this case.\n \n-        if currentPath != rootPath and not currentPath.startswith(rootPath + \'/\'):\n-            query[\'path\'] = {\'query\': rootPath, \'depth\': 1}\n+        if currentPath != rootPath and not currentPath.startswith(rootPath + "/"):\n+            query["path"] = {"query": rootPath, "depth": 1}\n         else:\n-            query[\'path\'] = {\'query\': currentPath, \'navtree\': 1}\n+            query["path"] = {"query": currentPath, "navtree": 1}\n \n         topLevel = portlet.topLevel\n         if topLevel and topLevel > 0:\n-            query[\'path\'][\'navtree_start\'] = topLevel + 1\n+            query["path"]["navtree_start"] = topLevel + 1\n \n         # XXX: It\'d make sense to use \'depth\' for bottomLevel, but it doesn\'t\n         # seem to work with EPI.\n \n         # Only list the applicable types\n-        query[\'portal_type\'] = utils.typesToList(context)\n+        query["portal_type"] = utils.typesToList(context)\n \n         # Apply the desired sort\n-        sortAttribute = navtree_properties.getProperty(\'sortAttribute\', None)\n+        sortAttribute = navtree_properties.getProperty("sortAttribute", None)\n         if sortAttribute is not None:\n-            query[\'sort_on\'] = sortAttribute\n-            sortOrder = navtree_properties.getProperty(\'sortOrder\', None)\n+            query["sort_on"] = sortAttribute\n+            sortOrder = navtree_properties.getProperty("sortOrder", None)\n             if sortOrder is not None:\n-                query[\'sort_order\'] = sortOrder\n+                query["sort_order"] = sortOrder\n \n         # Filter on workflow states, if enabled\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n-        )\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n         if navigation_settings.filter_on_workflow:\n-            query[\'review_state\'] = navigation_settings.workflow_states_to_show\n+            query["review_state"] = navigation_settings.workflow_states_to_show\n \n         self.query = query\n \n@@ -464,8 +486,8 @@ def __call__(self):\n \n @implementer(INavtreeStrategy)\n class NavtreeStrategy(SitemapNavtreeStrategy):\n-    """The navtree strategy used for the default navigation portlet\n-    """\n+    """The navtree strategy used for the default navigation portlet"""\n+\n     adapts(Interface, INavigationPortlet)\n \n     def __init__(self, context, portlet):\n@@ -474,16 +496,15 @@ def __init__(self, context, portlet):\n         # XXX: We can\'t do this with a \'depth\' query to EPI...\n         self.bottomLevel = portlet.bottomLevel or 0\n \n-        self.rootPath = getRootPath(context,\n-                                    portlet.currentFolderOnly,\n-                                    portlet.topLevel,\n-                                    portlet.root_uid)\n+        self.rootPath = getRootPath(\n+            context, portlet.currentFolderOnly, portlet.topLevel, portlet.root_uid\n+        )\n \n     def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n         if sitemapDecision == False:\n             return False\n-        depth = node.get(\'depth\', 0)\n+        depth = node.get("depth", 0)\n         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n             return False\n         else:\n@@ -491,41 +512,41 @@ def subtreeFilter(self, node):\n \n \n def getRootPath(context, currentFolderOnly, topLevel, root):\n-    """Helper function to calculate the real root path\n-    """\n+    """Helper function to calculate the real root path"""\n     context = aq_inner(context)\n     if currentFolderOnly:\n-        folderish = getattr(aq_base(context), \'isPrincipiaFolderish\', False) and \\\n-                    not INonStructuralFolder.providedBy(context)\n+        folderish = getattr(\n+            aq_base(context), "isPrincipiaFolderish", False\n+        ) and not INonStructuralFolder.providedBy(context)\n         parent = aq_parent(context)\n \n         is_default_page = False\n         browser_default = IBrowserDefault(parent, None)\n         if browser_default is not None:\n-            is_default_page = (browser_default.getDefaultPage() == context.getId())\n+            is_default_page = browser_default.getDefaultPage() == context.getId()\n \n         if not folderish or is_default_page:\n-            return \'/\'.join(parent.getPhysicalPath())\n+            return "/".join(parent.getPhysicalPath())\n         else:\n-            return \'/\'.join(context.getPhysicalPath())\n+            return "/".join(context.getPhysicalPath())\n \n     root = uuidToObject(root)\n     if root is not None:\n-        rootPath = \'/\'.join(root.getPhysicalPath())\n+        rootPath = "/".join(root.getPhysicalPath())\n     else:\n         rootPath = getNavigationRoot(context)\n \n     # Adjust for topLevel\n     if topLevel > 0:\n-        contextPath = \'/\'.join(context.getPhysicalPath())\n+        contextPath = "/".join(context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n             return None\n-        contextSubPathElements = contextPath[len(rootPath) + 1:]\n+        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n-            contextSubPathElements = contextSubPathElements.split(\'/\')\n+            contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n                 return None\n-            rootPath = rootPath + \'/\' + \'/\'.join(contextSubPathElements[:topLevel])\n+            rootPath = rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n         else:\n             return None\n \ndiff --git a/plone/app/portlets/portlets/news.py b/plone/app/portlets/portlets/news.py\nindex e8e84569..7654ddfe 100644\n--- a/plone/app/portlets/portlets/news.py\n+++ b/plone/app/portlets/portlets/news.py\n@@ -1,42 +1,43 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets import PloneMessageFactory as _\n+from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets.portlets import base\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform.directives import widget\n-from plone.memoize.compress import xhtml_compress\n from plone.memoize import ram\n+from plone.memoize.compress import xhtml_compress\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope import schema\n from zope.interface import implementer\n \n \n class INewsPortlet(IPortletDataProvider):\n \n-    count = schema.Int(title=_(u\'Number of items to display\'),\n-                       description=_(u\'How many items to list.\'),\n-                       required=True,\n-                       default=5,\n-                       min=1)\n+    count = schema.Int(\n+        title=_(u"Number of items to display"),\n+        description=_(u"How many items to list."),\n+        required=True,\n+        default=5,\n+        min=1,\n+    )\n \n     widget(state=SelectFieldWidget)\n     state = schema.Tuple(\n         title=_(u"Workflow state"),\n         description=_(u"Items in which workflow state to show."),\n-        default=(\'published\', ),\n+        default=("published",),\n         required=False,\n-        value_type=schema.Choice(\n-            vocabulary="plone.app.vocabularies.WorkflowStates")\n-        )\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n+    )\n \n     thumb_scale = schema.TextLine(\n         title=_(u"Override thumb scale"),\n@@ -47,14 +48,15 @@ class INewsPortlet(IPortletDataProvider):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     no_thumbs = schema.Bool(\n         title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs"),\n+        description=_(u"If enabled, the portlet will not show thumbs"),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(INewsPortlet)\n@@ -63,8 +65,9 @@ class Assignment(base.Assignment):\n     thumb_scale = None\n     no_thumbs = False\n \n-    def __init__(self, count=5, state=(\'published\',),\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(\n+        self, count=5, state=("published",), thumb_scale=None, no_thumbs=False\n+    ):\n         self.count = count\n         self.state = state\n         self.thumb_scale = thumb_scale\n@@ -77,7 +80,7 @@ def title(self):\n \n class Renderer(base.Renderer):\n \n-    _template = ViewPageTemplateFile(\'news.pt\')\n+    _template = ViewPageTemplateFile("news.pt")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -96,42 +99,45 @@ def published_news_items(self):\n     def all_news_link(self):\n         context = aq_inner(self.context)\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         portal = portal_state.portal()\n-        if \'news\' in getNavigationRootObject(context, portal).objectIds():\n-            return \'%s/news\' % portal_state.navigation_root_url()\n+        if "news" in getNavigationRootObject(context, portal).objectIds():\n+            return "%s/news" % portal_state.navigation_root_url()\n         return None\n \n     @memoize\n     def _data(self):\n         context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         path = portal_state.navigation_root_path()\n         limit = self.data.count\n         state = self.data.state\n-        return catalog(portal_type=\'News Item\',\n-                       review_state=state,\n-                       path=path,\n-                       sort_on=\'Date\',\n-                       sort_order=\'reverse\',\n-                       sort_limit=limit)[:limit]\n+        return catalog(\n+            portal_type="News Item",\n+            review_state=state,\n+            path=path,\n+            sort_on="Date",\n+            sort_order="reverse",\n+            sort_limit=limit,\n+        )[:limit]\n \n     def thumb_scale(self):\n         """Use override value or read thumb_scale from registry.\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', \'\')\n+        thsize = getattr(self.data, "thumb_scale", "")\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n             return None\n         thumb_scale_portlet = settings.thumb_scale_portlet\n@@ -145,9 +151,9 @@ class AddForm(base.AddForm):\n \n     def create(self, data):\n         return Assignment(\n-            count=data.get(\'count\', 5),\n-            state=data.get(\'state\', (\'published\', )),\n-            )\n+            count=data.get("count", 5),\n+            state=data.get("state", ("published",)),\n+        )\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/portlets/portlets/recent.py b/plone/app/portlets/portlets/recent.py\nindex d03eca32..ba50c321 100644\n--- a/plone/app/portlets/portlets/recent.py\n+++ b/plone/app/portlets/portlets/recent.py\n@@ -23,18 +23,20 @@\n \n class IRecentPortlet(IPortletDataProvider):\n \n-    count = schema.Int(title=_(u\'Number of items to display\'),\n-                       description=_(u\'How many items to list.\'),\n-                       required=True,\n-                       default=5,\n-                       min=1)\n+    count = schema.Int(\n+        title=_(u"Number of items to display"),\n+        description=_(u"How many items to list."),\n+        required=True,\n+        default=5,\n+        min=1,\n+    )\n \n     no_icons = schema.Bool(\n         title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons"),\n+        description=_(u"If enabled, the portlet will not show document type icons"),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n         title=_(u"Override thumb scale"),\n@@ -45,14 +47,15 @@ class IRecentPortlet(IPortletDataProvider):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     no_thumbs = schema.Bool(\n         title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n+        description=_(u"If enabled, the portlet will not show thumbs."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(IRecentPortlet)\n@@ -60,8 +63,7 @@ class Assignment(base.Assignment):\n     no_icons = False\n     thumb_scale = None\n \n-    def __init__(self, count=5, no_icons=False,\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(self, count=5, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.count = count\n         self.no_icons = no_icons\n         self.thumb_scale = thumb_scale\n@@ -79,26 +81,27 @@ def _render_cachekey(fun, self):\n \n \n class Renderer(base.Renderer):\n-    _template = ViewPageTemplateFile(\'recent.pt\')\n+    _template = ViewPageTemplateFile("recent.pt")\n \n-    title = _(\'box_recent_changes\', default=u"Recent Changes")\n+    title = _("box_recent_changes", default=u"Recent Changes")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n \n         context = aq_inner(self.context)\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         self.anonymous = portal_state.anonymous()\n         self.navigation_root_url = portal_state.navigation_root_url()\n         self.typesToShow = portal_state.friendly_types()\n         self.navigation_root_path = portal_state.navigation_root_path()\n \n-        plone_tools = getMultiAdapter(\n-            (context, self.request), name=\'plone_tools\')\n+        plone_tools = getMultiAdapter((context, self.request), name="plone_tools")\n         self.catalog = plone_tools.catalog()\n \n     ram.cache(_render_cachekey)\n+\n     def render(self):\n         return xhtml_compress(self._template())\n \n@@ -110,17 +113,19 @@ def recent_items(self):\n         return self._data()\n \n     def recently_modified_link(self):\n-        return \'%s/recently_modified\' % self.navigation_root_url\n+        return "%s/recently_modified" % self.navigation_root_url\n \n     @memoize\n     def _data(self):\n         limit = self.data.count\n         path = self.navigation_root_path\n-        return self.catalog(portal_type=self.typesToShow,\n-                            path=path,\n-                            sort_on=\'modified\',\n-                            sort_order=\'reverse\',\n-                            sort_limit=limit)[:limit]\n+        return self.catalog(\n+            portal_type=self.typesToShow,\n+            path=path,\n+            sort_on="modified",\n+            sort_order="reverse",\n+            sort_limit=limit,\n+        )[:limit]\n \n     @memoize\n     def thumb_scale(self):\n@@ -128,28 +133,24 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', None)\n+        thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n     def getMimeTypeIcon(self, obj):\n         fileo = obj.getObject().file\n         portal_url = getNavigationRoot(self.context)\n-        mtt = getToolByName(self.context, \'mimetypes_registry\')\n+        mtt = getToolByName(self.context, "mimetypes_registry")\n         if fileo.contentType:\n             ctype = mtt.lookup(fileo.contentType)\n-            return os.path.join(\n-                portal_url,\n-                guess_icon_path(ctype[0])\n-            )\n+            return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         return None\n \n \n@@ -159,7 +160,7 @@ class AddForm(base.AddForm):\n     description = _(u"This portlet displays recently modified content.")\n \n     def create(self, data):\n-        return Assignment(count=data.get(\'count\', 5))\n+        return Assignment(count=data.get("count", 5))\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/portlets/portlets/review.py b/plone/app/portlets/portlets/review.py\nindex 79f0e8d2..78e3bf4d 100644\n--- a/plone/app/portlets/portlets/review.py\n+++ b/plone/app/portlets/portlets/review.py\n@@ -22,10 +22,10 @@ class IReviewPortlet(IPortletDataProvider):\n \n     no_icons = schema.Bool(\n         title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons"),\n+        description=_(u"If enabled, the portlet will not show document type icons"),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n         title=_(u"Override thumb scale"),\n@@ -36,14 +36,15 @@ class IReviewPortlet(IPortletDataProvider):\n             u" Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     no_thumbs = schema.Bool(\n         title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n+        description=_(u"If enabled, the portlet will not show thumbs."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(IReviewPortlet)\n@@ -52,8 +53,7 @@ class Assignment(base.Assignment):\n     thumb_scale = None\n     no_thumbs = False\n \n-    def __init__(self, no_icons=False,\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(self, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.no_icons = no_icons\n         self.thumb_scale = thumb_scale\n         self.no_thumbs = no_thumbs\n@@ -62,11 +62,12 @@ def __init__(self, no_icons=False,\n     def title(self):\n         return _(u"Review list")\n \n+\n class Renderer(base.Renderer):\n \n-    render = ViewPageTemplateFile(\'review.pt\')\n+    render = ViewPageTemplateFile("review.pt")\n \n-    title = _(\'box_review_list\', default=u"Review List")\n+    title = _("box_review_list", default=u"Review List")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -74,8 +75,9 @@ def __init__(self, *args):\n     @property\n     def anonymous(self):\n         context = aq_inner(self.context)\n-        portal_state = getMultiAdapter((context, self.request),\n-                                       name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter(\n+            (context, self.request), name="plone_portal_state"\n+        )\n         return portal_state.anonymous()\n \n     @property\n@@ -87,10 +89,10 @@ def review_items(self):\n \n     def full_review_link(self):\n         context = aq_inner(self.context)\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n         # check if user is allowed to Review Portal Content here\n-        if mtool.checkPermission(\'Review portal content\', context):\n-            return \'%s/full_review_list\' % context.absolute_url()\n+        if mtool.checkPermission("Review portal content", context):\n+            return "%s/full_review_list" % context.absolute_url()\n         else:\n             return None\n \n@@ -99,10 +101,10 @@ def _data(self):\n         if self.anonymous:\n             return []\n         context = aq_inner(self.context)\n-        workflow = getToolByName(context, \'portal_workflow\')\n+        workflow = getToolByName(context, "portal_workflow")\n \n-        plone_view = getMultiAdapter((context, self.request), name=\'plone\')\n-        getMember = getToolByName(context, \'portal_membership\').getMemberById\n+        plone_view = getMultiAdapter((context, self.request), name="plone")\n+        getMember = getToolByName(context, "portal_membership").getMemberById\n         toLocalizedTime = plone_view.toLocalizedTime\n \n         idnormalizer = queryUtility(IIDNormalizer)\n@@ -110,27 +112,29 @@ def _data(self):\n         objects = workflow.getWorklistsResults()\n         items = []\n         for obj in objects:\n-            review_state = workflow.getInfoFor(obj, \'review_state\')\n+            review_state = workflow.getInfoFor(obj, "review_state")\n             creator_id = obj.Creator()\n             creator = getMember(creator_id)\n             if creator:\n-                creator_name = creator.getProperty(\'fullname\', \'\') or creator_id\n+                creator_name = creator.getProperty("fullname", "") or creator_id\n             else:\n                 creator_name = creator_id\n-            hasImage = True if getattr(obj, \'image\', None) else False\n-            images = obj.restrictedTraverse(\'@@images\') if hasImage else None\n-            items.append(dict(\n-                path=obj.absolute_url(),\n-                title=obj.pretty_title_or_id(),\n-                item_class = \'contenttype-\' + norm(obj.portal_type),\n-                description=obj.Description(),\n-                creator=creator_name,\n-                review_state=review_state,\n-                review_state_class=\'state-%s \' % norm(review_state),\n-                mod_date=toLocalizedTime(obj.ModificationDate()),\n-                hasImage=hasImage,\n-                images=images,\n-            ))\n+            hasImage = True if getattr(obj, "image", None) else False\n+            images = obj.restrictedTraverse("@@images") if hasImage else None\n+            items.append(\n+                dict(\n+                    path=obj.absolute_url(),\n+                    title=obj.pretty_title_or_id(),\n+                    item_class="contenttype-" + norm(obj.portal_type),\n+                    description=obj.Description(),\n+                    creator=creator_name,\n+                    review_state=review_state,\n+                    review_state_class="state-%s " % norm(review_state),\n+                    mod_date=toLocalizedTime(obj.ModificationDate()),\n+                    hasImage=hasImage,\n+                    images=images,\n+                )\n+            )\n         return items\n \n     @memoize\n@@ -139,15 +143,14 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', \'\')\n+        thsize = getattr(self.data, "thumb_scale", "")\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n@@ -155,14 +158,13 @@ def thumb_scale(self):\n class AddForm(formhelper.AddForm):\n     schema = IReviewPortlet\n     label = _(u"Add Review Portlet")\n-    description = _(u"This portlet displays a queue of documents awaiting "\n-                    u"review.")\n+    description = _(u"This portlet displays a queue of documents awaiting " u"review.")\n \n     def create(self, data):\n         return Assignment(**data)\n \n+\n class EditForm(formhelper.EditForm):\n     schema = IReviewPortlet\n     label = _(u"Edit Review Portlet")\n-    description = _(u"displays a queue of documents awaiting "\n-                    u"review.")\n+    description = _(u"displays a queue of documents awaiting " u"review.")\ndiff --git a/plone/app/portlets/portlets/rss.py b/plone/app/portlets/portlets/rss.py\nindex aca4a88c..c2e3ae43 100644\n--- a/plone/app/portlets/portlets/rss.py\n+++ b/plone/app/portlets/portlets/rss.py\n@@ -8,14 +8,16 @@\n from Products.Five.browser.pagetemplatefile import ZopeTwoPageTemplateFile\n from urllib.parse import urlparse\n from zope import schema\n-from zope.interface import implementer, Interface\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n import feedparser\n import time\n \n \n # Accept these bozo_exceptions encountered by feedparser when parsing\n # the feed:\n-ACCEPTED_FEEDPARSER_EXCEPTIONS = (feedparser.CharacterEncodingOverride, )\n+ACCEPTED_FEEDPARSER_EXCEPTIONS = (feedparser.CharacterEncodingOverride,)\n \n # store the feeds here (which means in RAM)\n FEED_DATA = {}  # url: ({date, title, url, itemlist})\n@@ -24,10 +26,9 @@\n \n \n class IFeed(Interface):\n-\n     def __init__(url, timeout):\n         """initialize the feed with the given url. will not automatically load it\n-           timeout defines the time between updates in minutes\n+        timeout defines the time between updates in minutes\n         """\n \n     def loaded():\n@@ -56,7 +57,7 @@ def needs_update():\n \n     def update():\n         """update this feed. will automatically check failure state etc.\n-           returns True or False whether it succeeded or not\n+        returns True or False whether it succeeded or not\n         """\n \n     def update_failed():\n@@ -77,8 +78,8 @@ def __init__(self, url, timeout):\n         self._items = []\n         self._title = ""\n         self._siteurl = ""\n-        self._loaded = False    # is the feed loaded\n-        self._failed = False    # does it fail at the last update?\n+        self._loaded = False  # is the feed loaded\n+        self._failed = False  # does it fail at the last update?\n         self._last_update_time_in_minutes = 0  # when was the feed last updated?\n         self._last_update_time = None  # time as DateTime or Nonw\n         self._etag = None\n@@ -100,7 +101,7 @@ def update_failed(self):\n \n     @property\n     def ok(self):\n-        return (not self._failed and self._loaded)\n+        return not self._failed and self._loaded\n \n     @property\n     def loaded(self):\n@@ -129,20 +130,20 @@ def update(self):\n                 return self._retrieveFeed()\n         except:\n             self._failed = True\n-            logger.exception(\'failed to update RSS feed %s\', self.url)\n+            logger.exception("failed to update RSS feed %s", self.url)\n \n         return self.ok\n \n     def _buildItemDict(self, item):\n-        link = item.links[0][\'href\']\n+        link = item.links[0]["href"]\n         itemdict = {\n-            \'title\': item.title,\n-            \'url\': link,\n-            \'summary\': item.get(\'description\', \'\'),\n+            "title": item.title,\n+            "url": link,\n+            "summary": item.get("description", ""),\n         }\n         if hasattr(item, "updated"):\n             try:\n-                itemdict[\'updated\'] = DateTime(item.updated)\n+                itemdict["updated"] = DateTime(item.updated)\n             except DateTimeError:\n                 # It\'s okay to drop it because in the\n                 # template, this is checked with\n@@ -161,29 +162,30 @@ def _retrieveFeed(self):\n             elif urlparse(url).scheme not in ("https", "http"):\n                 # Mostly: prevent loading local file: urls.\n                 url = ""\n-        if url != \'\':\n+        if url != "":\n             self._last_update_time_in_minutes = time.time() / 60\n             self._last_update_time = DateTime()\n             kwargs = {}\n             if self._last_modified:\n-                kwargs[\'modified\'] = self._last_modified\n+                kwargs["modified"] = self._last_modified\n             if self._etag:\n-                kwargs[\'etag\'] = self._etag\n+                kwargs["etag"] = self._etag\n             d = feedparser.parse(url, **kwargs)\n-            if (getattr(d, \'bozo\', 0) == 1\n-                    and not isinstance(d.get(\'bozo_exception\'),\n-                                       ACCEPTED_FEEDPARSER_EXCEPTIONS)):\n+            if getattr(d, "bozo", 0) == 1 and not isinstance(\n+                d.get("bozo_exception"), ACCEPTED_FEEDPARSER_EXCEPTIONS\n+            ):\n                 self._loaded = True  # we tried at least but have a failed load\n                 self._failed = True\n-                logger.info(\'failed to update RSS feed %s\',\n-                            d.get(\'bozo_exception\', None))\n+                logger.info(\n+                    "failed to update RSS feed %s", d.get("bozo_exception", None)\n+                )\n                 return False\n \n             #  If the response was 304, nothing changed!\n             #  Don\'t change anything...\n             if d.status != 304:\n-                self._etag = getattr(d, \'etag\', None)\n-                self._modified = getattr(d, \'modified\', None)\n+                self._etag = getattr(d, "etag", None)\n+                self._modified = getattr(d, "modified", None)\n \n                 try:\n                     self._title = d.feed.title\n@@ -195,7 +197,7 @@ def _retrieveFeed(self):\n                     self._siteurl = ""\n \n                 self._items = []\n-                for item in d[\'items\']:\n+                for item in d["items"]:\n                     try:\n                         itemdict = self._buildItemDict(item)\n                     except AttributeError:\n@@ -236,47 +238,52 @@ def siteurl(self):\n class IRSSPortlet(IPortletDataProvider):\n \n     portlet_title = schema.TextLine(\n-        title=_(u\'Title\'),\n-        description=_(u\'Title of the portlet.  If omitted, the title of the \'\n-                      u\'feed will be used.\'),\n+        title=_(u"Title"),\n+        description=_(\n+            u"Title of the portlet.  If omitted, the title of the "\n+            u"feed will be used."\n+        ),\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     count = schema.Int(\n-        title=_(u\'Number of items to display\'),\n-        description=_(u\'How many items to list.\'),\n+        title=_(u"Number of items to display"),\n+        description=_(u"How many items to list."),\n         required=True,\n-        default=5)\n+        default=5,\n+    )\n \n     url = schema.TextLine(\n-        title=_(u\'URL of RSS feed\'),\n-        description=_(u\'Link of the RSS feed to display.\'),\n+        title=_(u"URL of RSS feed"),\n+        description=_(u"Link of the RSS feed to display."),\n         required=True,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     timeout = schema.Int(\n-        title=_(u\'Feed reload timeout\'),\n-        description=_(u\'Time in minutes after which the feed should be \'\n-                      u\'reloaded.\'),\n+        title=_(u"Feed reload timeout"),\n+        description=_(u"Time in minutes after which the feed should be " u"reloaded."),\n         required=True,\n-        default=100)\n+        default=100,\n+    )\n \n \n @implementer(IRSSPortlet)\n class Assignment(base.Assignment):\n \n-    portlet_title = u\'\'\n+    portlet_title = u""\n \n     @property\n     def title(self):\n         """return the title with RSS feed title or from URL"""\n         feed = FEED_DATA.get(self.data.url, None)\n         if feed is None:\n-            return u\'RSS: \' + self.url[:20]\n+            return u"RSS: " + self.url[:20]\n         else:\n-            return u\'RSS: \' + feed.title[:20]\n+            return u"RSS: " + feed.title[:20]\n \n-    def __init__(self, portlet_title=u\'\', count=5, url=u"", timeout=100):\n+    def __init__(self, portlet_title=u"", count=5, url=u"", timeout=100):\n         self.portlet_title = portlet_title\n         self.count = count\n         self.url = url\n@@ -285,7 +292,7 @@ def __init__(self, portlet_title=u\'\', count=5, url=u"", timeout=100):\n \n class Renderer(base.DeferredRenderer):\n \n-    render_full = ZopeTwoPageTemplateFile(\'rss.pt\')\n+    render_full = ZopeTwoPageTemplateFile("rss.pt")\n \n     @property\n     def initializing(self):\n@@ -333,7 +340,7 @@ def feedlink(self):\n     @property\n     def title(self):\n         """return title of feed for portlet"""\n-        return getattr(self.data, \'portlet_title\', \'\') or self._getFeed().title\n+        return getattr(self.data, "portlet_title", "") or self._getFeed().title\n \n     @property\n     def feedAvailable(self):\n@@ -342,7 +349,7 @@ def feedAvailable(self):\n \n     @property\n     def items(self):\n-        return self._getFeed().items[:self.data.count]\n+        return self._getFeed().items[: self.data.count]\n \n     @property\n     def enabled(self):\n@@ -356,10 +363,11 @@ class AddForm(base.AddForm):\n \n     def create(self, data):\n         return Assignment(\n-            portlet_title=data.get(\'portlet_title\', u\'\'),\n-            count=data.get(\'count\', 5),\n-            url=data.get(\'url\', \'\'),\n-            timeout=data.get(\'timeout\', 100))\n+            portlet_title=data.get("portlet_title", u""),\n+            count=data.get("count", 5),\n+            url=data.get("url", ""),\n+            timeout=data.get("timeout", 100),\n+        )\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/portlets/portlets/search.py b/plone/app/portlets/portlets/search.py\nindex 8e9d735f..7c814dca 100644\n--- a/plone/app/portlets/portlets/search.py\n+++ b/plone/app/portlets/portlets/search.py\n@@ -10,21 +10,22 @@\n \n \n class ISearchPortlet(IPortletDataProvider):\n-    """ A portlet displaying a (live) search box\n-    """\n+    """A portlet displaying a (live) search box"""\n \n     enableLivesearch = schema.Bool(\n         title=_(u"Enable LiveSearch"),\n-        description=_(u"Enables the LiveSearch feature, which shows "\n-                      u"live results if the browser supports "\n-                      u"JavaScript."),\n+        description=_(\n+            u"Enables the LiveSearch feature, which shows "\n+            u"live results if the browser supports "\n+            u"JavaScript."\n+        ),\n         default=True,\n-        required=False)\n+        required=False,\n+    )\n \n \n @implementer(ISearchPortlet)\n class Assignment(base.Assignment):\n-\n     def __init__(self, enableLivesearch=True):\n         self.enableLivesearch = enableLivesearch\n \n@@ -35,22 +36,21 @@ def title(self):\n \n class Renderer(base.Renderer):\n \n-    render = ViewPageTemplateFile(\'search.pt\')\n-    action = \'@@search\'\n-    livesearch_action = \'livesearch_reply\'\n+    render = ViewPageTemplateFile("search.pt")\n+    action = "@@search"\n+    livesearch_action = "livesearch_reply"\n \n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.navigation_root_url = portal_state.navigation_root_url()\n \n     def enable_livesearch(self):\n         return self.data.enableLivesearch\n \n     def search_action(self):\n-        return \'{0}/{1}\'.format(self.navigation_root_url, self.action)\n+        return "{0}/{1}".format(self.navigation_root_url, self.action)\n \n     def navigation_root_url(self):\n         return getNavigationRoot(self.context)\ndiff --git a/plone/app/portlets/storage.py b/plone/app/portlets/storage.py\nindex 53f382b8..fff0899c 100644\n--- a/plone/app/portlets/storage.py\n+++ b/plone/app/portlets/storage.py\n@@ -1,45 +1,39 @@\n # -*- coding: utf-8 -*-\n-from zope.annotation.interfaces import IAnnotations\n-from zope.interface import implementer\n-from zope.component import adapts\n-from zope.component import getUtility\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from zope.publisher.interfaces.browser import IBrowserPublisher\n-\n-from zope.container.interfaces import INameChooser\n-from zope.container.contained import NameChooser\n-from zope.container.traversal import ItemTraverser\n-\n from Acquisition import aq_base\n from BTrees.OOBTree import OOBTree\n from OFS.SimpleItem import SimpleItem\n-\n+from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n+from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n-\n+from plone.portlets import constants\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets import constants\n from plone.portlets.storage import PortletAssignmentMapping as BaseMapping\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapts\n+from zope.component import getUtility\n+from zope.container.contained import NameChooser\n+from zope.container.interfaces import INameChooser\n+from zope.container.traversal import ItemTraverser\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n-from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n \n ATTEMPTS = 10000\n \n category_to_name = {\n-    constants.CONTEXT_CATEGORY: \'contextportlets\',\n-    constants.USER_CATEGORY: \'dashboard\',\n-    constants.GROUP_CATEGORY: \'groupportlets\',\n-    constants.CONTENT_TYPE_CATEGORY: \'contenttypeportlets\',\n+    constants.CONTEXT_CATEGORY: "contextportlets",\n+    constants.USER_CATEGORY: "dashboard",\n+    constants.GROUP_CATEGORY: "groupportlets",\n+    constants.CONTENT_TYPE_CATEGORY: "contenttypeportlets",\n }\n \n \n class PortletAssignmentMapping(BaseMapping, SimpleItem):\n-    """A Zope 2 version of the default assignment mapping storage.\n-    """\n+    """A Zope 2 version of the default assignment mapping storage."""\n \n-    def __init__(self, manager=u\'\', category=u\'\', name=u\'\', context=None):\n+    def __init__(self, manager=u"", category=u"", name=u"", context=None):\n         super(PortletAssignmentMapping, self).__init__(manager, category, name)\n         # Keep track of context so we can avoid storing anything\n         # until an assignment is actually added.\n@@ -64,7 +58,7 @@ def __getitem__(self, key):\n \n     def __setitem__(self, key, assignment):\n         # add the assignment mapping to the object graph, if it\'s not there yet\n-        if getattr(self, \'_v_context\', None) is not None:\n+        if getattr(self, "_v_context", None) is not None:\n             annotations = IAnnotations(self._v_context)\n             assignments = annotations.get(CONTEXT_ASSIGNMENT_KEY, None)\n             if assignments is None:\n@@ -79,14 +73,12 @@ def __setitem__(self, key, assignment):\n \n @implementer(IUserPortletAssignmentMapping)\n class UserPortletAssignmentMapping(PortletAssignmentMapping):\n-    """An assignment mapping for user/dashboard portlets\n-    """\n+    """An assignment mapping for user/dashboard portlets"""\n \n \n @implementer(IGroupDashboardPortletAssignmentMapping)\n class GroupDashboardPortletAssignmentMapping(PortletAssignmentMapping):\n-    """An assignment mapping for group dashboard portlets\n-    """\n+    """An assignment mapping for group dashboard portlets"""\n \n     @property\n     def id(self):\n@@ -98,8 +90,8 @@ def id(self):\n \n @implementer(IBrowserPublisher)\n class PortletAssignmentMappingTraverser(ItemTraverser):\n-    """A traverser for portlet assignment mappings, that is acqusition-aware\n-    """\n+    """A traverser for portlet assignment mappings, that is acqusition-aware"""\n+\n     adapts(IPortletAssignmentMapping, IDefaultBrowserLayer)\n \n     def publishTraverse(self, request, name):\n@@ -109,8 +101,7 @@ def publishTraverse(self, request, name):\n \n @implementer(INameChooser)\n class PortletsNameChooser(NameChooser):\n-    """A name chooser for portlets\n-    """\n+    """A name chooser for portlets"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -157,7 +148,7 @@ def chooseName(self, name, object):\n         container = self.context\n \n         if not name:\n-            name = getattr(object, \'title\', None)\n+            name = getattr(object, "title", None)\n \n         if not name:\n             name = object.__class__.__name__\ndiff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex 72f5b8b3..d8ab6951 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -1,15 +1,15 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n+from plone.app.testing import login\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import applyProfile\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n from plone.testing import z2\n+from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n import doctest\n@@ -20,28 +20,29 @@ class PloneAppPortlets(PloneSandboxLayer):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        z2.installProduct(app, \'plone.app.portlets\')\n+        z2.installProduct(app, "plone.app.portlets")\n \n         # Include testing profile\n         import plone.app.portlets\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.portlets.tests,\n-                       context=configurationContext)\n+\n+        xmlconfig.file(\n+            "configure.zcml", plone.app.portlets.tests, context=configurationContext\n+        )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n \n         # Prepare test content\n-        pw = getToolByName(portal, \'portal_workflow\')\n+        pw = getToolByName(portal, "portal_workflow")\n         pw.setDefaultChain("simple_publication_workflow")\n-        portal.invokeFactory("Folder", id=\'folder\', title=u"Test Folder")\n-        portal.invokeFactory("Folder", id=\'news\', title=u\'News\')\n-        portal.invokeFactory("Folder", id=\'users\', title=u\'Users\')\n-        portal.invokeFactory("Folder", id=\'events\', title=u\'Events\')\n-        pw.doActionFor(portal.news, \'publish\')\n+        portal.invokeFactory("Folder", id="folder", title=u"Test Folder")\n+        portal.invokeFactory("Folder", id="news", title=u"News")\n+        portal.invokeFactory("Folder", id="users", title=u"Users")\n+        portal.invokeFactory("Folder", id="events", title=u"Events")\n+        pw.doActionFor(portal.news, "publish")\n \n \n PLONE_APP_PORTLETS_FIXTURE = PloneAppPortlets()\ndiff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex 9a819eeb..e9604788 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -14,10 +14,10 @@ class PortletsTestCase(unittest.TestCase):\n     layer = PLONE_APP_PORTLETS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'folder\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["folder"]\n+        self.request = self.layer["request"]\n \n         self.afterSetUp()\n \ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex 5b45916c..b3d0a05b 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -12,9 +12,7 @@\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\n-                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n-            )\n+            got = re.sub("LocationError", "zope.location.interfaces.LocationError", got)\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n@@ -24,12 +22,12 @@ def test_suite():\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'testMemberDashboard.rst\',\n+                "testMemberDashboard.rst",\n                 checker=Py23DocChecker(),\n-                package=\'plone.app.portlets.tests\',\n+                package="plone.app.portlets.tests",\n                 optionflags=OPTIONFLAGS,\n             ),\n-            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING,\n         )\n     )\n     return suite\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex 20831a01..beee4171 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -17,91 +17,96 @@\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_portlet_type_registered(self):\n-        portlet = getUtility(\n-            IPortletType,\n-            name=\'portlets.Actions\')\n-        self.assertEquals(portlet.addview,\n-                          \'portlets.Actions\')\n+        portlet = getUtility(IPortletType, name="portlets.Actions")\n+        self.assertEquals(portlet.addview, "portlets.Actions")\n         return\n \n     def test_interfaces(self):\n-        portlet = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n+        portlet = actions.Assignment(\n+            ptitle=u"actions", category=u"document", show_icons=True\n+        )\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n         return\n \n     def test_invoke_add_view(self):\n-        portlet = getUtility(\n-            IPortletType,\n-            name=\'portlets.Actions\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Actions")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n-        data = {\n-            \'ptitle\': u"Actions",\n-            \'category\': u\'document\',\n-            \'show_icons\': True}\n+        data = {"ptitle": u"Actions", "category": u"document", "show_icons": True}\n         addview.createAndAdd(data=data)\n \n         self.assertEquals(len(mapping), 1)\n-        self.assertTrue(isinstance(mapping.values()[0],\n-                                   actions.Assignment))\n+        self.assertTrue(isinstance(mapping.values()[0], actions.Assignment))\n         return\n \n     def test_invoke_edit_view(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = actions.Assignment(\n+            ptitle=u"actions", category=u"document", show_icons=True\n+        )\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, actions.EditForm))\n         return\n \n     def test_obtain_renderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\',\n-                             context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n \n-        assignment = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n+        assignment = actions.Assignment(\n+            ptitle=u"actions", category=u"document", show_icons=True\n+        )\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, actions.Renderer))\n         return\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n \n-        assignment = assignment or actions.Assignment(ptitle=u\'actions\', category=u\'site_actions\', show_icons=True)\n-        return getMultiAdapter((context, request, view, manager, assignment),\n-                               IPortletRenderer)\n+        assignment = assignment or actions.Assignment(\n+            ptitle=u"actions", category=u"site_actions", show_icons=True\n+        )\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_render(self):\n-        migtool = getToolByName(self.portal, \'portal_migration\')\n+        migtool = getToolByName(self.portal, "portal_migration")\n \n-        r = self.renderer(context=self.portal,\n-                          assignment=actions.Assignment(ptitle=u\'actions\', category=u\'site_actions\', show_icons=True))\n+        r = self.renderer(\n+            context=self.portal,\n+            assignment=actions.Assignment(\n+                ptitle=u"actions", category=u"site_actions", show_icons=True\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n@@ -111,19 +116,21 @@ def test_render(self):\n             self.assertEqual(len(output), 4)\n \n         first = output[0]\n-        self.assertEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n-        self.assertEqual(first[\'title\'], u"Site Map")\n+        self.assertEqual(first["url"], "http://nohost/plone/sitemap")\n+        self.assertEqual(first["title"], u"Site Map")\n \n     def test_render_woicon(self):\n         """Without icons"""\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'site_actions\', show_icons=False))\n+                ptitle=u"actions", category=u"site_actions", show_icons=False\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n         first = output[0]\n-        self.assertTrue(first[\'icon\'] is None, "We should not have an icon")\n+        self.assertTrue(first["icon"] is None, "We should not have an icon")\n         return\n \n     def test_multiple_portlets(self):\n@@ -134,21 +141,28 @@ def test_multiple_portlets(self):\n         This test was written due to bug caused by caching actionLinks portlet\n         renderer\'s method\n         """\n-        migtool = getToolByName(self.portal, \'portal_migration\')\n+        migtool = getToolByName(self.portal, "portal_migration")\n \n         # let\'s create two different portlet renderers for the same context\n         # thus for the same REQUEST, plone memoize uses REQUEST to cache data\n-        r1 = self.renderer(assignment=actions.Assignment(\n-            ptitle=u\'tabs\', category=u\'portal_tabs\', show_icons=True))\n+        r1 = self.renderer(\n+            assignment=actions.Assignment(\n+                ptitle=u"tabs", category=u"portal_tabs", show_icons=True\n+            )\n+        )\n         r1.update()\n         links1 = r1.actionLinks()\n-        r2 = self.renderer(assignment=actions.Assignment(ptitle=u\'site actions\', category=u\'site_actions\', show_icons=False))\n+        r2 = self.renderer(\n+            assignment=actions.Assignment(\n+                ptitle=u"site actions", category=u"site_actions", show_icons=False\n+            )\n+        )\n         r2.update()\n         links2 = r2.actionLinks()\n \n         # check the portal_tabs links (portal_tabs is somehow special)\n         self.assertEquals(len(links1), 5)\n-        self.assertEquals(links1[0][\'title\'], u\'Home\')\n+        self.assertEquals(links1[0]["title"], u"Home")\n \n         # now check the site_actions links\n         # this was failing until the caching of actionLinks method was fixed\n@@ -156,9 +170,9 @@ def test_multiple_portlets(self):\n             self.assertEquals(len(links2), 3)\n         else:\n             self.assertEquals(len(links2), 4)\n-        self.assertEquals(links2[0][\'title\'], u\'Site Map\')\n-        self.assertEquals(links2[0][\'url\'], \'http://nohost/plone/sitemap\')\n-        self.assertEquals(links2[0][\'icon\'], None)\n+        self.assertEquals(links2[0]["title"], u"Site Map")\n+        self.assertEquals(links2[0]["url"], "http://nohost/plone/sitemap")\n+        self.assertEquals(links2[0]["icon"], None)\n         return\n \n     def test_portal_tabs(self):\n@@ -168,56 +182,63 @@ def test_portal_tabs(self):\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'portal_tabs\', show_icons=True))\n+                ptitle=u"actions", category=u"portal_tabs", show_icons=True\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Test Folder\', u\'Home\', u\'Users\', u\'News\', u\'Events\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = set([u"Test Folder", u"Home", u"Users", u"News", u"Events"])\n+        got = set([six.text_type(link["title"]) for link in output])\n         self.assertEqual(got, expected)\n \n     def test_object_buttons(self):\n-        """Special stuff for the object_buttons category\n-        """\n+        """Special stuff for the object_buttons category"""\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=False))\n+                ptitle=u"actions", category=u"object_buttons", show_icons=False\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Cut\', u\'Copy\', u\'Rename\', u\'Delete\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = set([u"Cut", u"Copy", u"Rename", u"Delete"])\n+        got = set([six.text_type(link["title"]) for link in output])\n         self.assertTrue(expected.issubset(got))\n \n     def test_category(self):\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=False))\n+                ptitle=u"actions", category=u"object_buttons", show_icons=False\n+            ),\n+        )\n         r.update()\n-        self.assertEqual(r.category, \'object_buttons\')\n+        self.assertEqual(r.category, "object_buttons")\n \n     def test_category_normalize(self):\n         class DummyData(object):\n-            category = \'Complex Category\'\n+            category = "Complex Category"\n+\n         r = actions.Renderer(None, None, None, None, DummyData())\n-        self.assertEqual(r.category, \'complex-category\')\n+        self.assertEqual(r.category, "complex-category")\n \n     def test_object_buttons_with_icons(self):\n-        """Special stuff for the object_buttons category (bug in render_icons)\n-        """\n+        """Special stuff for the object_buttons category (bug in render_icons)"""\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=True))\n+                ptitle=u"actions", category=u"object_buttons", show_icons=True\n+            ),\n+        )\n         r.update()\n         self.assertTrue(r.actionLinks)\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Cut\', u\'Copy\', u\'Rename\', u\'Delete\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = set([u"Cut", u"Copy", u"Rename", u"Delete"])\n+        got = set([six.text_type(link["title"]) for link in output])\n         self.assertTrue(expected.issubset(got))\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex 8e1de84f..b86c6d5e 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -5,7 +5,6 @@\n \n \n class MockBrain(object):\n-\n     def __init__(self, path="some/path", modified="2002-01-01"):\n         self.path = path\n         self.modified = modified\n@@ -15,14 +14,13 @@ def getPath(self):\n \n \n class MockLocation(object):\n-\n     def __init__(self, name):\n         self.__name__ = name\n \n \n class MockRenderer(object):\n-    manager = MockLocation(\'some_manager\')\n-    data = MockLocation(\'some_assignment\')\n+    manager = MockLocation("some_manager")\n+    data = MockLocation("some_assignment")\n     data_brains = [MockBrain(), MockBrain()]\n \n     def __init__(self, context, request):\n@@ -34,13 +32,12 @@ def _data(self):\n \n \n class TestCacheKey(PortletsTestCase):\n-\n     def testRenderCachekey(self):\n         context = self.folder\n         renderer = MockRenderer(context, context.REQUEST)\n \n         key1 = render_cachekey(None, renderer)\n-        renderer.manager.__name__ += \'__changed__\'\n+        renderer.manager.__name__ += "__changed__"\n         key2 = render_cachekey(None, renderer)\n \n         self.assertTrue(key1 != key2)\n@@ -59,13 +56,14 @@ def testNonASCIIPath(self):\n         # http://dev.plone.org/plone/ticket/7086\n         context = self.folder\n         renderer = MockRenderer(context, context.REQUEST)\n-        renderer.data_brains = [\n-            MockBrain("Pr\\xc5\\xafvodce"), MockBrain("p\\xc5\\x99i")]\n+        renderer.data_brains = [MockBrain("Pr\\xc5\\xafvodce"), MockBrain("p\\xc5\\x99i")]\n         render_cachekey(None, renderer)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestCacheKey))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_classic_portlet.py b/plone/app/portlets/tests/test_classic_portlet.py\nindex cfd16956..6c15ff5a 100644\n--- a/plone/app/portlets/tests/test_classic_portlet.py\n+++ b/plone/app/portlets/tests/test_classic_portlet.py\n@@ -1,50 +1,50 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import classic\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n-        self.assertEqual(portlet.addview, \'portlets.Classic\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n+        self.assertEqual(portlet.addview, "portlets.Classic")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n-        portlet = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n+        portlet = classic.Assignment(template="portlet_recent", macro="portlet")\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -55,51 +55,74 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = classic.Assignment(template="portlet_recent", macro="portlet")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, classic.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = classic.Assignment(template="portlet_recent", macro="portlet")\n+\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, classic.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = assignment or classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = assignment or classic.Assignment(\n+            template="portlet_recent", macro="portlet"\n+        )\n+\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def testUseMacro(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=\'portlet\'))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro="portlet")\n+        )\n         self.assertEqual(True, r.use_macro())\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=None))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro=None)\n+        )\n         self.assertEqual(False, r.use_macro())\n \n     def testPathExpression(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=\'portlet\'))\n-        self.assertEqual(\'context/portlet_recent/macros/portlet\', r.path_expression())\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=None))\n-        self.assertEqual(\'context/portlet_recent\', r.path_expression())\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro="portlet")\n+        )\n+        self.assertEqual("context/portlet_recent/macros/portlet", r.path_expression())\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro=None)\n+        )\n+        self.assertEqual("context/portlet_recent", r.path_expression())\n \n     def testRenderClassicPortlet(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'@@view\', macro=\'content-core\'))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="@@view", macro="content-core")\n+        )\n         r.render()\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex bfdbd8ea..06b60e16 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -1,69 +1,66 @@\n # -*- coding: utf-8 -*-\n \n-import time\n-\n-from zope.i18nmessageid import Message\n-from zope.interface import Interface\n-from zope.component import getUtility, queryUtility, getMultiAdapter\n-from zope.component import getSiteManager\n-from zope.component.interfaces import IFactory\n-\n+from plone.app.portlets.browser.adding import PortletAdding\n+from plone.app.portlets.exportimport.portlets import importPortlets\n+from plone.app.portlets.interfaces import IColumn\n+from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from Products.Five.browser import BrowserView\n-\n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.context import TarballExportContext\n-from Products.GenericSetup.tests.common import DummyImportContext\n-\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentSettings\n-\n+from plone.app.portlets.utils import assignment_mapping_from_key\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from plone.portlets.manager import PortletManager\n+from Products.Five.browser import BrowserView\n+from Products.GenericSetup.context import TarballExportContext\n+from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.tests.common import DummyImportContext\n+from zope.component import getMultiAdapter\n+from zope.component import getSiteManager\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from zope.component.interfaces import IFactory\n+from zope.i18nmessageid import Message\n+from zope.interface import Interface\n \n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.interfaces import IColumn\n-\n-from plone.app.portlets.browser.adding import PortletAdding\n-from plone.app.portlets.utils import assignment_mapping_from_key\n+import time\n \n-from plone.app.portlets.exportimport.portlets import importPortlets\n \n # BBB Zope 2.12\n try:\n-    from Zope2.App import zcml\n     from OFS import metaconfigure\n-    zcml # pyflakes\n+    from Zope2.App import zcml\n+\n+    zcml  # pyflakes\n     metaconfigure\n except ImportError:\n-    from Products.Five import zcml\n     from Products.Five import fiveconfigure as metaconfigure\n+    from Products.Five import zcml\n \n \n class DummyView(BrowserView):\n     pass\n \n-# A sample portlet\n \n-from zope.interface import implementer\n-from zope import schema\n+# A sample portlet\n \n-from plone.portlets.interfaces import IPortletDataProvider\n from plone.app.portlets.portlets import base\n+from plone.portlets.interfaces import IPortletDataProvider\n+from zope import schema\n+from zope.interface import implementer\n \n \n class ITestPortlet(IPortletDataProvider):\n     test_text = schema.TextLine(title=u"Test")\n     test_bool = schema.Bool(title=u"Test")\n-    test_tuple = schema.Tuple(title=u"Test",\n-                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))\n+    test_tuple = schema.Tuple(\n+        title=u"Test",\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n+    )\n \n \n @implementer(ITestPortlet)\n@@ -77,7 +74,6 @@ class TestAssignment(base.Assignment):\n \n \n class TestRenderer(base.Renderer):\n-\n     def render(self):\n         return "Portlet for testing"\n \n@@ -88,7 +84,7 @@ class TestAddForm(base.AddForm):\n \n     def create(self, data):\n         a = TestAssignment()\n-        a.title = data.get(\'title\', u"")\n+        a.title = data.get("title", u"")\n         return a\n \n \n@@ -103,8 +99,8 @@ class TestEditForm(base.EditForm):\n class ITestColumn(IColumn):\n     pass\n \n-class TestZCML(PortletsTestCase):\n \n+class TestZCML(PortletsTestCase):\n     def testPortletTypeInterfaceRegistered(self):\n         iface = getUtility(IPortletTypeInterface, name=u"portlets.test.Test")\n         self.assertEqual(ITestPortlet, iface)\n@@ -120,7 +116,9 @@ def testRendererRegistered(self):\n         manager = PortletManager()\n         assignment = TestAssignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, TestRenderer))\n \n     def testAddViewRegistered(self):\n@@ -139,10 +137,9 @@ def testEditViewRegistered(self):\n \n \n class TestGenericSetup(PortletsTestCase):\n-\n     def afterSetUp(self):\n         portal_setup = self.portal.portal_setup\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n     def testPortletManagerInstalled(self):\n         manager = getUtility(IPortletManager, name=u"test.testcolumn")\n@@ -150,13 +147,17 @@ def testPortletManagerInstalled(self):\n \n     def disabled_testPortletTypeRegistered(self):\n         portlet_type = getUtility(IPortletType, name=u"portlets.test.Test")\n-        self.assertEqual(\'portlets.test.Test\', portlet_type.addview)\n+        self.assertEqual("portlets.test.Test", portlet_type.addview)\n         self.assertEqual([Interface], portlet_type.for_)\n         # XXX Missing i18n support in the exportimport code\n-        self.assertTrue(isinstance(portlet_type.title, Message),\n-                        "Portlet title should be a Message instance")\n-        self.assertTrue(isinstance(portlet_type.description, Message),\n-                        "Portlet description should be a Message instance")\n+        self.assertTrue(\n+            isinstance(portlet_type.title, Message),\n+            "Portlet title should be a Message instance",\n+        )\n+        self.assertTrue(\n+            isinstance(portlet_type.description, Message),\n+            "Portlet description should be a Message instance",\n+        )\n         self.assertEqual(u"title_test_portlet", portlet_type.title)\n         self.assertEqual(u"description_test_portlet", portlet_type.description)\n         self.assertEqual(u"Test portlet", portlet_type.title.default)\n@@ -165,53 +166,77 @@ def disabled_testPortletTypeRegistered(self):\n         self.assertEqual(u"plone", portlet_type.description.domain)\n \n     def testAssignmentCreatedAndOrdered(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n-        self.assertEqual([\'test.portlet3\', \'test.portlet2\', \'test.portlet1\'], list(mapping.keys()))\n+        self.assertEqual(\n+            ["test.portlet3", "test.portlet2", "test.portlet1"], list(mapping.keys())\n+        )\n \n     def testAssignmentPropertiesSet(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n-\n-        assignment = mapping[\'test.portlet1\']\n-        self.assertEqual(u\'Test pr\\xf6p 1\', assignment.test_text)\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n+\n+        assignment = mapping["test.portlet1"]\n+        self.assertEqual(u"Test pr\\xf6p 1", assignment.test_text)\n         self.assertEqual(False, assignment.test_bool)\n-        self.assertEqual((u\'published\', u\'private\'), assignment.test_tuple)\n+        self.assertEqual((u"published", u"private"), assignment.test_tuple)\n \n-        assignment = mapping[\'test.portlet2\']\n-        self.assertEqual(\'Test prop 2\', assignment.test_text)\n+        assignment = mapping["test.portlet2"]\n+        self.assertEqual("Test prop 2", assignment.test_text)\n         self.assertEqual(True, assignment.test_bool)\n         self.assertEqual((), assignment.test_tuple)\n \n-        assignment = mapping[\'test.portlet3\']\n+        assignment = mapping["test.portlet3"]\n         self.assertEqual(None, assignment.test_text)\n         self.assertEqual(None, assignment.test_bool)\n         self.assertEqual(None, assignment.test_tuple)\n \n     def testAssignmentSettings(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n-        assignment = mapping[\'test.portlet1\']\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n+        assignment = mapping["test.portlet1"]\n         settings = IPortletAssignmentSettings(assignment)\n-        self.assertTrue(settings.get(\'visible\', True))\n+        self.assertTrue(settings.get("visible", True))\n \n-        assignment = mapping[\'test.portlet2\']\n+        assignment = mapping["test.portlet2"]\n         settings = IPortletAssignmentSettings(assignment)\n-        self.assertFalse(settings.get(\'visible\', True))\n+        self.assertFalse(settings.get("visible", True))\n \n     def testAssignmentRoot(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         # No assignment in /news subfolder\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/news")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/news",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -225,13 +250,21 @@ def testAssignmentRoot(self):\n         importPortlets(context)\n \n         # Still 3 portlets in the root\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         # but 1 extra in the /news subfolder\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/news")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/news",\n+        )\n         self.assertEqual(1, len(mapping))\n \n     def testAssignmentRemoval(self):\n@@ -239,38 +272,48 @@ def testAssignmentRemoval(self):\n \n         # wait a bit or we get duplicate ids on import\n         time.sleep(1)\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n \n         # initally there should be no portlet7\n-        self.assertEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertEqual(mapping.get("test.portlet7", None), None)\n \n         # now we add one\n-        portlet_factory = getUtility(IFactory, name=\'portlets.test.Test\')\n+        portlet_factory = getUtility(IFactory, name="portlets.test.Test")\n         assignment = portlet_factory()\n-        mapping[\'test.portlet7\'] = assignment\n+        mapping["test.portlet7"] = assignment\n \n         # make sure it\'s there\n-        self.assertNotEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertNotEqual(mapping.get("test.portlet7", None), None)\n \n         # wait a bit or we get duplicate ids on import\n         time.sleep(1)\n         # run the profile\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n         # and should have got rid of it again\n-        self.assertEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertEqual(mapping.get("test.portlet7", None), None)\n \n     def testAssignmentPurging(self):\n         # initially there should be 3 assignments on the root\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -283,18 +326,28 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         # group assignments should still be there\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=GROUP_CATEGORY, key="Reviewers")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n         self.assertEqual(1, len(mapping))\n \n         # and be purgable\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -307,18 +360,28 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=GROUP_CATEGORY, key="Reviewers")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         # also content type assignments should still be there\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n         self.assertEqual(2, len(mapping))\n \n         # and be purgable\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -331,30 +394,32 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testBlacklisting(self):\n         manager = getUtility(IPortletManager, name=u"test.testcolumn")\n \n-        if \'news\' in self.portal.objectIds():\n-            news = self.portal[\'news\']\n+        if "news" in self.portal.objectIds():\n+            news = self.portal["news"]\n \n             assignable = getMultiAdapter(\n-                (news, manager), ILocalPortletAssignmentManager)\n+                (news, manager), ILocalPortletAssignmentManager\n+            )\n \n-            self.assertEqual(\n-                True, assignable.getBlacklistStatus(CONTEXT_CATEGORY))\n-            self.assertEqual(\n-                False, assignable.getBlacklistStatus(GROUP_CATEGORY))\n-            self.assertEqual(\n-                None, assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY))\n+            self.assertEqual(True, assignable.getBlacklistStatus(CONTEXT_CATEGORY))\n+            self.assertEqual(False, assignable.getBlacklistStatus(GROUP_CATEGORY))\n+            self.assertEqual(None, assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY))\n \n     def testPurgeMethod(self):\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+        handler = getMultiAdapter((sm, context), IBody, name=u"plone.portlets")\n         handler._purgePortlets()\n \n         manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n@@ -365,7 +430,9 @@ def testPurge(self):\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets purge="True">\n             </portlets>\n         """\n@@ -379,7 +446,9 @@ def testManagerRemove(self):\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <portletmanager\n                     name="test.testcolumn"\n@@ -394,7 +463,9 @@ def testManagerRemove(self):\n \n     def testManagerPurge(self):\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <portletmanager\n                     name="test.testcolumn"\n@@ -404,32 +475,44 @@ def testManagerPurge(self):\n         """\n         importPortlets(context)\n \n-        self.assertRaises(KeyError,\n-                          assignment_mapping_from_key,\n-                          self.portal, manager_name=u"test.testcolumn",\n-                          category=GROUP_CATEGORY, key="Reviewers")\n-\n-        self.assertRaises(KeyError,\n-                          assignment_mapping_from_key,\n-                          self.portal, manager_name=u"test.testcolumn",\n-                          category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        self.assertRaises(\n+            KeyError,\n+            assignment_mapping_from_key,\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n+\n+        self.assertRaises(\n+            KeyError,\n+            assignment_mapping_from_key,\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n \n         # context assignment at the root are purged as well\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name=u"test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testExport(self):\n         self.maxDiff = None\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+        handler = getMultiAdapter((sm, context), IBody, name=u"plone.portlets")\n         handler._purgePortlets()\n \n         time.sleep(1)\n \n         portal_setup = self.portal.portal_setup\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n         expected = u"""\\\n <?xml version="1.0" encoding="utf-8"?>\n@@ -511,11 +594,13 @@ def testExport(self):\n """\n \n         body = handler.body\n-        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'))\n+        self.assertEqual(expected.strip(), body.strip().decode("utf8"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestZCML))\n     suite.addTest(makeSuite(TestGenericSetup))\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex c5ccf569..0130a680 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -1,14 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-\n+from plone.app.testing import TEST_USER_ID\n from plone.portlets.interfaces import IPortletContext\n \n \n class TestBasicContext(PortletsTestCase):\n-\n     def testParent(self):\n         ctx = IPortletContext(self.folder)\n         self.assertTrue(ctx.getParent() is self.folder.aq_parent)\n@@ -17,51 +15,50 @@ def testGlobalsNoGroups(self):\n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[2], (\'group\', \'Administrators\'))\n-        self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[2], ("group", "Administrators"))\n+        self.assertEqual(g[4], ("group", "Reviewers"))\n \n     def testAnonymous(self):\n         logout()\n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 2)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', \'Anonymous User\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", "Anonymous User"))\n \n \n class TestPortalRootContext(PortletsTestCase):\n-\n     def testParent(self):\n         ctx = IPortletContext(self.portal)\n         self.assertTrue(ctx.getParent() is None)\n@@ -70,51 +67,53 @@ def testGlobalsNoGroups(self):\n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[2], (\'group\', \'Administrators\'))\n-        self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[2], ("group", "Administrators"))\n+        self.assertEqual(g[4], ("group", "Reviewers"))\n \n     def testAnonymous(self):\n         logout()\n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 2)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', \'Anonymous User\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", "Anonymous User"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestBasicContext))\n     suite.addTest(makeSuite(TestPortalRootContext))\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex f8798eea..a037adcf 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -7,41 +7,41 @@\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n from zExceptions import Unauthorized\n-from zope.component import getUtility, getMultiAdapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.event import notify\n \n import six\n \n \n class TestDashboard(PortletsTestCase):\n-\n     def test_default_dashboard_created_for_new_user(self):\n \n-        col = getUtility(IPortletManager, name=\'plone.dashboard1\')\n+        col = getUtility(IPortletManager, name="plone.dashboard1")\n         user_portlets = col[USER_CATEGORY]\n-        self.assertFalse(\'fakeuser\' in user_portlets)\n+        self.assertFalse("fakeuser" in user_portlets)\n \n         # This would normally happen when a user is created\n-        notify(PrincipalCreated(PropertiedUser(\'fakeuser\')))\n+        notify(PrincipalCreated(PropertiedUser("fakeuser")))\n \n         # We would expect some portlets to have been created after the\n         # event handler has finished processing\n \n-        self.assertTrue(\'fakeuser\' in user_portlets)\n-        self.assertTrue(len(user_portlets[\'fakeuser\']) > 0)\n+        self.assertTrue("fakeuser" in user_portlets)\n+        self.assertTrue(len(user_portlets["fakeuser"]) > 0)\n \n     def test_non_ascii_usernames_created(self):\n         if six.PY2:\n-            user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n+            user1, pass1 = u"user1\\xa9".encode("utf-8"), "pass1"\n         else:\n-            user1, pass1 = \'user1\\xa9\', \'pass1\'\n+            user1, pass1 = "user1\\xa9", "pass1"\n         uf = self.portal.acl_users\n \n         # Bug #6100 - Would throw a unicode decode error in event handler\n         # in dashboard.py\n-        uf.userFolderAddUser(user1, pass1, [\'Manager\'], [])\n+        uf.userFolderAddUser(user1, pass1, ["Manager"], [])\n \n-        col = getUtility(IPortletManager, name=\'plone.dashboard1\')\n+        col = getUtility(IPortletManager, name="plone.dashboard1")\n         retriever = getMultiAdapter((self.portal, col), IPortletRetriever)\n \n         # Bug #7860 - Would throw a unicode decode error when fetching\n@@ -50,7 +50,9 @@ def test_non_ascii_usernames_created(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestDashboard))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_exportimport.py b/plone/app/portlets/tests/test_exportimport.py\nindex ab4af6b2..439932b7 100644\n--- a/plone/app/portlets/tests/test_exportimport.py\n+++ b/plone/app/portlets/tests/test_exportimport.py\n@@ -19,15 +19,16 @@\n \n \n class PortletsExportImportTestCase(PortletsTestCase):\n-\n     def afterSetUp(self):\n         self.sm = getSiteManager(self.portal)\n-        self.importer = self.exporter = PortletsXMLAdapter(self.sm,\n-          DummySetupEnviron())\n-\n-    def _searchPortletManagerRegistrations(self, name = None):\n-        results = [r for r in self.sm.registeredUtilities()\n-          if r.provided.isOrExtends(IPortletManager)]\n+        self.importer = self.exporter = PortletsXMLAdapter(self.sm, DummySetupEnviron())\n+\n+    def _searchPortletManagerRegistrations(self, name=None):\n+        results = [\n+            r\n+            for r in self.sm.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n         if name:\n             results = [r for r in results if r.name == name]\n         return results\n@@ -40,37 +41,36 @@ def _node_as_string(self, node):\n \n \n class TestImportPortlets(PortletsExportImportTestCase):\n-\n     def test_removePortlet(self):\n-        self.assertTrue(queryUtility(IPortletType,\n-          name=\'portlets.News\') is not None)\n-        self.assertEqual(True,\n-          self.importer._removePortlet(\'portlets.News\'))\n-        self.assertTrue(queryUtility(IPortletType,\n-          name=\'portlets.News\') is None)\n-        self.assertEqual(False, self.importer._removePortlet(\'foo\'))\n+        self.assertTrue(queryUtility(IPortletType, name="portlets.News") is not None)\n+        self.assertEqual(True, self.importer._removePortlet("portlets.News"))\n+        self.assertTrue(queryUtility(IPortletType, name="portlets.News") is None)\n+        self.assertEqual(False, self.importer._removePortlet("foo"))\n \n     def test_checkBasicPortletNodeErrors(self):\n         node = parseString(_XML_INVALID_EXTEND_AND_PURGE).documentElement\n-        self.assertEqual(True,\n-            self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_INVALID_EXTEND_NONEXISTS).documentElement\n-        self.assertEqual(True,\n-          self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_INVALID_ADD_EXISTING).documentElement\n-        self.assertEqual(True,\n-            self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_EXTEND_EXISTING).documentElement\n-        self.assertEqual(False,\n-          self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            False, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n     def test_modifyForList(self):\n         node = parseString(_XML_SWITCH_COLUMNS).documentElement\n-        self.assertEqual([IColumn],\n-          self.importer._modifyForList(node, [IDashboard]))\n+        self.assertEqual([IColumn], self.importer._modifyForList(node, [IDashboard]))\n \n     def test_initPortletNode_duplicateInterfaces(self):\n         node = parseString(_XML_DUPLICATE_INTERFACES).documentElement\n@@ -84,8 +84,8 @@ def test_initPortletNode_basic(self):\n         self.importer._initPortletNode(node)\n         portlet = queryUtility(IPortletType, name="portlets.New")\n         self.assertTrue(portlet is not None)\n-        self.assertEqual(\'Foo\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Foo", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n         self.assertEqual([IColumn], portlet.for_)\n \n     def disabled_test_initPortletNode_i18n(self):\n@@ -95,10 +95,14 @@ def disabled_test_initPortletNode_i18n(self):\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IColumn], portlet.for_)\n         # XXX Missing i18n support in the exportimport code\n-        self.assertTrue(isinstance(portlet.title, Message),\n-                        "Portlet title should be a Message instance")\n-        self.assertTrue(isinstance(portlet.description, Message),\n-                        "Portlet description should be a Message instance")\n+        self.assertTrue(\n+            isinstance(portlet.title, Message),\n+            "Portlet title should be a Message instance",\n+        )\n+        self.assertTrue(\n+            isinstance(portlet.description, Message),\n+            "Portlet description should be a Message instance",\n+        )\n         self.assertEqual(u"title_foo_portlet", portlet.title)\n         self.assertEqual(u"description_foo_portlet", portlet.description)\n         self.assertEqual(u"Foo", portlet.title.default)\n@@ -132,8 +136,8 @@ def test_initPortletNode_extend(self):\n         portlet = queryUtility(IPortletType, name="portlets.ExtendMe")\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IDashboard], portlet.for_)\n-        self.assertEqual(\'Bar\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Bar", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n \n     def test_initPortletNode_purge(self):\n         node = parseString(_XML_PURGEME_SETUP).documentElement\n@@ -143,50 +147,54 @@ def test_initPortletNode_purge(self):\n         portlet = queryUtility(IPortletType, name="portlets.PurgeMe")\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IColumn], portlet.for_)\n-        self.assertEqual(\'Bar\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Bar", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n \n     def test_initPortletNode_remove(self):\n         node = parseString(_XML_REMOVEME_SETUP).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = queryUtility(IPortletType, name=\'portlets.RemoveMe\')\n+        portlet = queryUtility(IPortletType, name="portlets.RemoveMe")\n         self.assertTrue(portlet is not None)\n         node = parseString(_XML_REMOVEME_REMOVE).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = queryUtility(IPortletType, name=\'portlets.RemoveMe\')\n+        portlet = queryUtility(IPortletType, name="portlets.RemoveMe")\n         self.assertTrue(portlet is None)\n \n \n class TestExportPortlets(PortletsExportImportTestCase):\n-\n     def test_extractPortletNode(self):\n         node = parseString(_XML_MULTIPLE_INTERFACES).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = getUtility(IPortletType, \'portlets.New\')\n-        node = self.exporter._extractPortletNode(\'portlets.New\', portlet)\n+        portlet = getUtility(IPortletType, "portlets.New")\n+        node = self.exporter._extractPortletNode("portlets.New", portlet)\n         file = StringIO()\n         node.writexml(file)\n         file.seek(0)\n-        self.assertEqual("""<portlet title="Foo" addview="portlets.New" description="Foo"><for interface="plone.app.portlets.interfaces.IColumn"/><for interface="plone.app.portlets.interfaces.IDashboard"/></portlet>""", file.read())\n+        self.assertEqual(\n+            """<portlet title="Foo" addview="portlets.New" description="Foo"><for interface="plone.app.portlets.interfaces.IColumn"/><for interface="plone.app.portlets.interfaces.IDashboard"/></portlet>""",\n+            file.read(),\n+        )\n \n     def test_extractPortletNode_defaultManagerInterface(self):\n         node = parseString(_XML_EXPLICIT_DEFAULT_INTERFACE).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = getUtility(IPortletType, \'portlets.New\')\n-        node = self.exporter._extractPortletNode(\'portlets.New\', portlet)\n+        portlet = getUtility(IPortletType, "portlets.New")\n+        node = self.exporter._extractPortletNode("portlets.New", portlet)\n         file = StringIO()\n         node.writexml(file)\n         file.seek(0)\n-        self.assertEqual("""<portlet title="Foo" addview="portlets.New" description="Foo"/>""", file.read())\n+        self.assertEqual(\n+            """<portlet title="Foo" addview="portlets.New" description="Foo"/>""",\n+            file.read(),\n+        )\n \n \n class TestImportPortletManagers(PortletsExportImportTestCase):\n-\n     def test_initPortletManagerNode_basic(self):\n         node = parseString(_XML_PORTLET_MANAGER_BASIC).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertEqual(PortletManager, manager.__class__)\n \n@@ -194,7 +202,7 @@ def test_initPortletManagerNode_customType(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_TYPE).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertTrue(IColumn.providedBy(manager))\n \n@@ -202,40 +210,49 @@ def test_initPortletManagerNode_customClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_CLASS).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertEqual(FooPortletManager, manager.__class__)\n \n \n class TestExportPortletManagers(PortletsExportImportTestCase):\n-\n     def test_extractPortletManagerNode_defaultTypeAndClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_BASIC).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"/>\', self._node_as_string(node)\n+        )\n \n     def test_extractPortletManagerNode_customType(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_TYPE).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"  type="plone.app.portlets.interfaces.IColumn"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"  type="plone.app.portlets.interfaces.IColumn"/>\',\n+            self._node_as_string(node),\n+        )\n \n     def test_extractPortletManagerNode_customClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_CLASS).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"  class="plone.app.portlets.tests.utils.FooPortletManager"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"  class="plone.app.portlets.tests.utils.FooPortletManager"/>\',\n+            self._node_as_string(node),\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestImportPortlets))\n     suite.addTest(makeSuite(TestExportPortlets))\n@@ -243,6 +260,7 @@ def test_suite():\n     suite.addTest(makeSuite(TestExportPortletManagers))\n     return suite\n \n+\n _XML_INVALID_EXTEND_AND_PURGE = """<?xml version="1.0"?>\n <portlet addview="portlets.Exists" extend="" purge="" />\n """\ndiff --git a/plone/app/portlets/tests/test_formextender.py b/plone/app/portlets/tests/test_formextender.py\nindex 86c74aaa..82bcacaf 100644\n--- a/plone/app/portlets/tests/test_formextender.py\n+++ b/plone/app/portlets/tests/test_formextender.py\n@@ -26,23 +26,19 @@\n # A sample schemaextender:\n \n \n-EXTENDER_PREFIX = \'portletcssclass\'\n+EXTENDER_PREFIX = "portletcssclass"\n \n \n class IPortletCssClass(Interface):\n-    """ Schema for portlet css class  """\n+    """Schema for portlet css class"""\n \n     # css_class is just an example.\n     # In real life a css_class implementation would be a\n     # Choice field with a vocabulary, editable in a controlpanel.\n-    css_class = schema.TextLine(\n-        title=u\'Portlet appearance\',\n-        required=False\n-    )\n+    css_class = schema.TextLine(title=u"Portlet appearance", required=False)\n \n \n class PortletCssClassFormExtender(FormExtender):\n-\n     def update(self):\n         self.add(IPortletCssClass, prefix=EXTENDER_PREFIX)\n \n@@ -52,7 +48,7 @@ def update(self):\n class PortletCssClassAdapter(object):\n     def __init__(self, context):\n         # avoid recursion\n-        self.__dict__[\'context\'] = context\n+        self.__dict__["context"] = context\n \n     def __setattr__(self, attr, value):\n         settings = IPortletAssignmentSettings(self.context)\n@@ -64,16 +60,14 @@ def __getattr__(self, attr):\n \n \n class TestSchemaExtender(PortletsTestCase):\n-\n     def test_addform_fields(self):\n         schema_field_names = field.Fields(news.INewsPortlet).keys()\n \n         # We use the news portlet as a random example of a portlet\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n \n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n         addview_field_names = addview.fields.keys()\n \n@@ -82,82 +76,79 @@ def test_addform_fields(self):\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletAddForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n-\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n         addview_field_names = addview.fields.keys()\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletAddForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         # Our addview schema now includes our extended schema:\n-        self.assertEqual(addview_field_names,\n-                         schema_field_names + [EXTENDER_PREFIX+\'.css_class\'])\n+        self.assertEqual(\n+            addview_field_names, schema_field_names + [EXTENDER_PREFIX + ".css_class"]\n+        )\n \n     def test_invoke_add_form(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview.createAndAdd(data={\'count\': 5,\n-                                   EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        addview.createAndAdd(\n+            data={"count": 5, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n         self.assertEqual(portlet_assignment.count, 5)\n         # We have not extended our storage adapter, so nothing gets saved:\n-        self.assertIsNone(settings.get(\'css_class\', None))\n+        self.assertIsNone(settings.get("css_class", None))\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletAddForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview.createAndAdd(data={\'count\': 5,\n-                                   EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        addview.createAndAdd(\n+            data={"count": 5, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletAddForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         self.assertEqual(portlet_assignment.count, 5)\n         # The prefix is used for the form field, not for the stored data:\n-        self.assertEqual(settings.get(\'css_class\'), \'my-class\')\n+        self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_editform_fields(self):\n \n@@ -165,8 +156,8 @@ def test_editform_fields(self):\n \n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n         editview_field_names = editview.fields.keys()\n \n@@ -175,100 +166,103 @@ def test_editform_fields(self):\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletEditForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n \n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n         editview_field_names = editview.fields.keys()\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletEditForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         # Our editview schema now includes our extended schema:\n-        self.assertEqual(editview_field_names,\n-                         schema_field_names + [EXTENDER_PREFIX+\'.css_class\'])\n+        self.assertEqual(\n+            editview_field_names, schema_field_names + [EXTENDER_PREFIX + ".css_class"]\n+        )\n \n     def test_invoke_edit_form(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview.applyChanges(data={\'count\': 6,\n-                                    EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        editview.applyChanges(\n+            data={"count": 6, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n         self.assertEqual(portlet_assignment.count, 6)\n         # We have not extended our storage adapter, so nothing gets saved:\n-        self.assertIsNone(settings.get(\'css_class\', None))\n+        self.assertIsNone(settings.get("css_class", None))\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletEditForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview.applyChanges(data={\'count\': 6,\n-                                    EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        editview.applyChanges(\n+            data={"count": 6, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletEditForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         self.assertEqual(portlet_assignment.count, 6)\n         # The prefix is used for the form field, not for the stored data:\n-        self.assertEqual(settings.get(\'css_class\'), \'my-class\')\n+        self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_renderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = news.Assignment(count=5)\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, news.Renderer))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestSchemaExtender))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_login_portlet.py b/plone/app/portlets/tests/test_login_portlet.py\nindex 49ef3ab8..2a713067 100644\n--- a/plone/app/portlets/tests/test_login_portlet.py\n+++ b/plone/app/portlets/tests/test_login_portlet.py\n@@ -1,38 +1,35 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter, queryMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import login\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryMultiAdapter\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n-        self.assertEqual(portlet.addview, \'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n+        self.assertEqual(portlet.addview, "portlets.Login")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            ["plone.app.portlets.interfaces.IColumn"], registered_interfaces\n+        )\n \n     def testInterfaces(self):\n         portlet = login.Assignment()\n@@ -40,11 +37,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         # This is a NullAddForm - calling it does the work\n         addview()\n@@ -56,31 +53,42 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = login.Assignment()\n-        editview = queryMultiAdapter((mapping[\'foo\'], request), name=\'edit\', default=None)\n+        mapping["foo"] = login.Assignment()\n+        editview = queryMultiAdapter(\n+            (mapping["foo"], request), name="edit", default=None\n+        )\n         self.assertTrue(editview is None)\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = login.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, login.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment or login.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def testAvailable(self):\n         request = self.folder.REQUEST\n@@ -90,7 +98,7 @@ def testAvailable(self):\n         del request.__annotations__\n         r = self.renderer()\n         self.assertEqual(True, r.available)\n-        self.portal.acl_users._delObject(\'credentials_cookie_auth\')\n+        self.portal.acl_users._delObject("credentials_cookie_auth")\n         r = self.renderer()\n         del request.__annotations__\n         self.assertEqual(False, r.available)\n@@ -107,34 +115,35 @@ def testShow(self):\n         self.assertEqual(True, r.show())\n \n         del request.__annotations__\n-        request[\'URL\'] = self.portal.absolute_url() + \'/login_form\'\n+        request["URL"] = self.portal.absolute_url() + "/login_form"\n         self.assertEqual(False, self.renderer(request=request).show())\n \n         del request.__annotations__\n-        request[\'URL\'] = self.portal.absolute_url() + \'/@@register\'\n+        request["URL"] = self.portal.absolute_url() + "/@@register"\n         self.assertEqual(False, self.renderer(request=request).show())\n \n     def testCanRegister(self):\n         r = self.renderer()\n         self.assertFalse(r.can_register())\n \n-        #Enable self-registration to ensure that the register link is shown\n-        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        # Enable self-registration to ensure that the register link is shown\n+        self.portal.manage_permission("Add portal member", roles=["Anonymous"])\n         logout()\n \n-        self.folder.REQUEST[\'_plone_ec_cache\'] = {}\n+        self.folder.REQUEST["_plone_ec_cache"] = {}\n         self.assertTrue(r.can_register())\n \n-        #Hiding the Register action hides the register link\n+        # Hiding the Register action hides the register link\n         self.portal.portal_actions.user.join.visible = False\n         self.assertFalse(r.can_register())\n \n-\n     # TODO: Add more detailed tests here\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_manage_views.py b/plone/app/portlets/tests/test_manage_views.py\nindex d2a886db..d8745121 100644\n--- a/plone/app/portlets/tests/test_manage_views.py\n+++ b/plone/app/portlets/tests/test_manage_views.py\n@@ -3,21 +3,21 @@\n \n \n class TestManageAssignments(PortletsTestCase):\n-\n     def testMoveUp(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n     def testMoveDown(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n     def testDelete(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n \n def test_suite():\n     from unittest import TestSuite\n-    #from unittest import makeSuite\n+\n+    # from unittest import makeSuite\n     suite = TestSuite()\n     # TODO: Write tests that *pass*\n-    #suite.addTest(makeSuite(TestManageAssignments))\n+    # suite.addTest(makeSuite(TestManageAssignments))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_mapping.py b/plone/app/portlets/tests/test_mapping.py\nindex d7881ec4..25dbb48b 100644\n--- a/plone/app/portlets/tests/test_mapping.py\n+++ b/plone/app/portlets/tests/test_mapping.py\n@@ -1,24 +1,19 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.publisher.interfaces.browser import IBrowserPublisher\n-from zope.publisher.interfaces import NotFound\n-from zope.container.interfaces import INameChooser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.portlets import classic\n-\n from plone.app.portlets.browser.adding import PortletAdding\n-\n+from plone.app.portlets.portlets import classic\n+from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.container.interfaces import INameChooser\n+from zope.publisher.interfaces import NotFound\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n \n \n class TestNameChooser(PortletsTestCase):\n-\n     def testNameChooser(self):\n         mapping = PortletAssignmentMapping()\n         chooser = INameChooser(mapping)\n@@ -30,47 +25,57 @@ def testNameChooser(self):\n \n \n class TestContextMapping(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n+        self.manager = getUtility(IPortletManager, name=u"plone.leftcolumn")\n \n     def testAdapting(self):\n-        mapping = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testEquivalence(self):\n-        mapping = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n+        mapping["foo"] = c\n \n-        mapping2 = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n-        self.assertEqual(mapping2[\'foo\'], c)\n+        mapping2 = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n+        self.assertEqual(mapping2["foo"], c)\n \n \n class TestTraverser(PortletsTestCase):\n-\n     def afterSetUp(self):\n         self.mapping = PortletAssignmentMapping()\n         c = classic.Assignment()\n-        self.mapping[\'foo\'] = c\n-        self.traverser = getMultiAdapter((self.mapping, self.folder.REQUEST), IBrowserPublisher)\n+        self.mapping["foo"] = c\n+        self.traverser = getMultiAdapter(\n+            (self.mapping, self.folder.REQUEST), IBrowserPublisher\n+        )\n \n     def testTraverseToName(self):\n-        obj = self.traverser.publishTraverse(self.folder.REQUEST, \'foo\')\n-        self.assertTrue(aq_base(obj) is aq_base(self.mapping[\'foo\']))\n+        obj = self.traverser.publishTraverse(self.folder.REQUEST, "foo")\n+        self.assertTrue(aq_base(obj) is aq_base(self.mapping["foo"]))\n         self.assertTrue(obj.aq_parent is self.mapping)\n \n     def testTraverseToView(self):\n-        view = self.traverser.publishTraverse(self.folder.REQUEST, \'+\')\n+        view = self.traverser.publishTraverse(self.folder.REQUEST, "+")\n         self.assertTrue(isinstance(view, PortletAdding))\n         self.assertTrue(view.aq_parent is self.mapping)\n \n     def testTraverseToNonExistent(self):\n-        self.assertRaises(NotFound, self.traverser.publishTraverse, self.folder.REQUEST, \'bar\')\n+        self.assertRaises(\n+            NotFound, self.traverser.publishTraverse, self.folder.REQUEST, "bar"\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestContextMapping))\n     suite.addTest(makeSuite(TestTraverser))\ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex 0cf7342a..e824bfcc 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -1,22 +1,24 @@\n # -*- coding: utf-8 -*-\n-import unittest\n-import doctest\n-\n-from plone.testing import layered\n-from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n from plone.app.portlets.testing import OPTIONFLAGS\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n+from plone.testing import layered\n+\n+import doctest\n+import unittest\n \n \n def test_suite():\n \n     import plone.app.portlets.storage\n \n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocTestSuite(\n-                module=plone.app.portlets.storage,\n-                optionflags=OPTIONFLAGS,\n-            ),\n-            layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n-        )\n-    ])\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocTestSuite(\n+                    module=plone.app.portlets.storage,\n+                    optionflags=OPTIONFLAGS,\n+                ),\n+                layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n+            )\n+        ]\n+    )\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 605f9b74..75e5bf57 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -1,52 +1,44 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.interface import directlyProvides\n-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n-from zope.intid.interfaces import IIntIds\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.portlets.portlets import navigation\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import INavigationSchema\n-\n from Products.CMFPlone.tests import dummy\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import directlyProvides\n+from zope.intid.interfaces import IIntIds\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        addUtility(\n-            self.portal, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+        addUtility(self.portal, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n-        self.assertEqual(portlet.addview, \'portlets.Navigation\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n+        self.assertEqual(portlet.addview, "portlets.Navigation")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n         self.assertEqual(\n-            [\'plone.app.portlets.interfaces.IColumn\'],\n-            registered_interfaces)\n+            ["plone.app.portlets.interfaces.IColumn"], registered_interfaces\n+        )\n \n     def testInterfaces(self):\n         portlet = navigation.Assignment()\n@@ -54,12 +46,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -70,81 +61,85 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = navigation.Assignment()\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = navigation.Assignment()\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, navigation.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = navigation.Assignment()\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, navigation.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        addUtility(\n-            self.portal, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+        addUtility(self.portal, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n         self.populateSite()\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.request\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = view or self.portal.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment or navigation.Assignment(topLevel=0)\n \n         return getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def populateSite(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        if \'Members\' in self.portal:\n-            self.portal._delObject(\'Members\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n             self.folder = None\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n-        if \'events\' in self.portal:\n-            self.portal._delObject(\'events\')\n-        if \'front-page\' in self.portal:\n-            self.portal._delObject(\'front-page\')\n-        if \'folder\' in self.portal:\n-            self.portal._delObject(\'folder\')\n-        if \'users\' in self.portal:\n-            self.portal._delObject(\'users\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.remoteUrl = \'http://plone.org\'\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.invokeFactory("Document", "doc3")\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Link", "link1")\n+        self.portal.link1.remoteUrl = "http://plone.org"\n         self.portal.link1.reindexObject()\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n-        folder2.invokeFactory(\'File\', \'file21\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("Document", "doc12")\n+        folder1.invokeFactory("Document", "doc13")\n+        self.portal.invokeFactory("Folder", "folder2")\n+        folder2 = getattr(self.portal, "folder2")\n+        folder2.invokeFactory("Document", "doc21")\n+        folder2.invokeFactory("Document", "doc22")\n+        folder2.invokeFactory("Document", "doc23")\n+        folder2.invokeFactory("File", "file21")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def testCreateNavTree(self):\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n+        self.assertTrue("children" in tree)\n \n     def testCreateNavTreeCurrentItem(self):\n         # With the context set to folder2 it should return a dict with\n@@ -152,7 +147,7 @@ def testCreateNavTreeCurrentItem(self):\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'currentItem\'], True)\n+        self.assertEqual(tree["children"][-1]["currentItem"], True)\n \n     def testNavTreeExcludesItemsWithExcludeProperty(self):\n         # Make sure that items with the exclude_from_nav property set get\n@@ -162,8 +157,8 @@ def testNavTreeExcludesItemsWithExcludeProperty(self):\n         view = self.renderer(self.portal.folder1.doc11)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n+        for c in tree["children"]:\n+            if c["item"].getPath() == "/plone/folder2":\n                 self.fail()\n \n     def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n@@ -175,338 +170,424 @@ def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         found = False\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n+        for c in tree["children"]:\n+            if c["item"].getPath() == "/plone/folder2":\n                 found = True\n                 break\n         self.assertTrue(found)\n \n     def testNavTreeExcludesDefaultPage(self):\n         # Make sure that items which are the default page are excluded\n-        self.portal.folder2.setDefaultPage(\'doc21\')\n+        self.portal.folder2.setDefaultPage("doc21")\n         view = self.renderer(self.portal.folder1.doc11)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         # Ensure that our \'doc21\' default page is not in the tree.\n         self.assertEqual(\n-            [c for c in tree[\'children\'][-1][\'children\']\n-             if c[\'item\'].getPath()[-5:] == \'doc21\'], [])\n+            [\n+                c\n+                for c in tree["children"][-1]["children"]\n+                if c["item"].getPath()[-5:] == "doc21"\n+            ],\n+            [],\n+        )\n \n     def testNavTreeMarksParentMetaTypesNotToQuery(self):\n         # Make sure that items whose ids are in the idsNotToList navTree\n         # property get no_display set to True\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][-1][\'show_children\'], True)\n+        self.assertEqual(tree["children"][-1]["show_children"], True)\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][-1][\'show_children\'], False)\n+        self.assertEqual(tree["children"][-1]["show_children"], False)\n \n     def testCreateNavTreeWithLink(self):\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'getRemoteUrl\'])\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(child[\'getRemoteUrl\'], \'http://plone.org\')\n+        for child in tree["children"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n                 # as Creator, link1 should not use the remote Url\n-                self.assertFalse(child[\'useRemoteUrl\'])\n+                self.assertFalse(child["useRemoteUrl"])\n \n-        self.portal.link1.setCreators([\'some_other_user\'])\n+        self.portal.link1.setCreators(["some_other_user"])\n         self.portal.link1.reindexObject()\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'getRemoteUrl\'])\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(child[\'getRemoteUrl\'], \'http://plone.org\')\n+        for child in tree["children"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n                 # as non-Creator user, link1 should use the remote Url\n-                self.assertTrue(child[\'useRemoteUrl\'])\n+                self.assertTrue(child["useRemoteUrl"])\n \n     def testNonStructuralFolderHidesChildren(self):\n         # Make sure NonStructuralFolders act as if parent_types_not_to_query\n         # is set.\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.portal.folder1._setObject(\'ns_folder\', f)\n+        f = dummy.NonStructuralFolder("ns_folder")\n+        self.portal.folder1._setObject("ns_folder", f)\n         self.portal.portal_catalog.reindexObject(self.portal.folder1.ns_folder)\n         self.portal.portal_catalog.reindexObject(self.portal.folder1)\n         view = self.renderer(self.portal.folder1.ns_folder)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][3][\'children\'][3][\'item\'].getPath(),\n-                                \'/plone/folder1/ns_folder\')\n-        self.assertEqual(len(tree[\'children\'][3][\'children\'][3][\'children\']), 0)\n+        self.assertEqual(\n+            tree["children"][3]["children"][3]["item"].getPath(),\n+            "/plone/folder1/ns_folder",\n+        )\n+        self.assertEqual(len(tree["children"][3]["children"][3]["children"]), 0)\n \n     def testTopLevel(self):\n         view = self.renderer(\n-            self.portal.folder2.file21, assignment=navigation.Assignment(\n-                topLevel=1))\n+            self.portal.folder2.file21, assignment=navigation.Assignment(topLevel=1)\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2/file21\')\n+        self.assertEqual(\n+            tree["children"][-1]["item"].getPath(), "/plone/folder2/file21"\n+        )\n \n     def testTopLevelWithContextAboveLevel(self):\n-        view = self.renderer(\n-            self.portal, assignment=navigation.Assignment(topLevel=1))\n+        view = self.renderer(self.portal, assignment=navigation.Assignment(topLevel=1))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testTopLevelTooDeep(self):\n-        view = self.renderer(\n-            self.portal, assignment=navigation.Assignment(topLevel=5))\n+        view = self.renderer(self.portal, assignment=navigation.Assignment(topLevel=5))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testIncludeTopWithoutNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n         view = self.renderer(\n             self.portal.folder2.folder21,\n             assignment=navigation.Assignment(\n-                topLevel=0, root_uid=None, includeTop=True))\n+                topLevel=0, root_uid=None, includeTop=True\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         self.assertTrue(view.root_is_portal())\n-        self.assertEqual(len(tree[\'children\']), 6)\n-        self.assertEqual(view.getNavRootPath(), \'/plone\')\n+        self.assertEqual(len(tree["children"]), 6)\n+        self.assertEqual(view.getNavRootPath(), "/plone")\n \n     def testTopLevelWithNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n         view = self.renderer(\n             self.portal.folder2.folder21,\n             assignment=navigation.Assignment(\n-                topLevel=1, root_uid=self.portal.folder2.UID()))\n+                topLevel=1, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n+        self.assertEqual(len(tree["children"]), 1)\n         self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/folder21/doc211\')\n+            tree["children"][0]["item"].getPath(), "/plone/folder2/folder21/doc211"\n+        )\n \n     def testMultipleTopLevelWithNavigationRoot(self):\n         # See bug 9405\n         # http://dev.plone.org/plone/ticket/9405\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'abc\')\n-        self.portal.invokeFactory(\'Folder\', \'abcde\')\n-        self.portal.abc.invokeFactory(\'Folder\', \'down_abc\')\n-        self.portal.abcde.invokeFactory(\'Folder\', \'down_abcde\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "abc")\n+        self.portal.invokeFactory("Folder", "abcde")\n+        self.portal.abc.invokeFactory("Folder", "down_abc")\n+        self.portal.abcde.invokeFactory("Folder", "down_abcde")\n         view1 = self.renderer(\n-            self.portal.abc, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abc.UID()))\n+            self.portal.abc,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abc.UID()\n+            ),\n+        )\n         view2 = self.renderer(\n-            self.portal.abc, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abcde.UID()))\n+            self.portal.abc,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abcde.UID()\n+            ),\n+        )\n         tree1 = view1.getNavTree()\n         tree2 = view2.getNavTree()\n-        self.assertEqual(len(tree1[\'children\']), 1)\n-        self.assertEqual(len(tree2[\'children\']), 1)\n+        self.assertEqual(len(tree1["children"]), 1)\n+        self.assertEqual(len(tree2["children"]), 1)\n         view1 = self.renderer(\n-            self.portal.abcde, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abc.UID()))\n+            self.portal.abcde,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abc.UID()\n+            ),\n+        )\n         view2 = self.renderer(\n-            self.portal.abcde, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abcde.UID()))\n+            self.portal.abcde,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abcde.UID()\n+            ),\n+        )\n         tree1 = view1.getNavTree()\n         tree2 = view2.getNavTree()\n-        self.assertEqual(len(tree2[\'children\']), 1)\n-        self.assertEqual(len(tree1[\'children\']), 1)\n+        self.assertEqual(len(tree2["children"]), 1)\n+        self.assertEqual(len(tree1["children"]), 1)\n \n     def testShowAllParentsOverridesBottomLevel(self):\n         view = self.renderer(\n-            self.portal.folder2.file21, assignment=navigation.Assignment(\n-                bottomLevel=1, topLevel=0))\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(bottomLevel=1, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         # Note: showAllParents makes sure we actually return items on the,\n         # path to the context, but the portlet will not display anything\n         # below bottomLevel.\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/file21\')\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n+        self.assertEqual(len(tree["children"][-1]["children"]), 1)\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/file21",\n+        )\n \n     def testBottomLevelStopsAtFolder(self):\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=1, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=1, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 0)\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n+        self.assertEqual(len(tree["children"][-1]["children"]), 0)\n \n     def testBottomLevelZeroNoLimit(self):\n         """Test that bottomLevel=0 means no limit for bottomLevel."""\n \n         # first we set a high integer as bottomLevel to simulate "no limit"\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=99, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=99, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/doc21",\n+        )\n \n         # now set bottomLevel to 0 -> outcome should be the same\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=0, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=0, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/doc21",\n+        )\n \n     def testBottomLevelZeroNoLimitRendering(self):\n         """Test that bottomLevel=0 means no limit for bottomLevel."""\n \n         # first we set a high integer as bottomLevel to simulate "no limit"\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=99, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=99, topLevel=0),\n+        )\n         a = view.render()\n \n         # now set bottomLevel to 0 -> outcome should be the same\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=0, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=0, topLevel=0),\n+        )\n         b = view.render()\n \n         self.assertEqual(a, b)\n \n     def testNavRootWithUnicodeNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n-        view = self.renderer(self.portal.folder2.folder21,\n-            assignment=navigation.Assignment(topLevel=1, root_uid=self.portal.folder2.UID()))\n-        self.assertEqual(view.getNavRootPath(), \'/plone/folder2/folder21\')\n-        self.assertEqual(view.getNavRoot().absolute_url(),\n-                         self.portal.folder2.folder21.absolute_url())\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            assignment=navigation.Assignment(\n+                topLevel=1, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n+        self.assertEqual(view.getNavRootPath(), "/plone/folder2/folder21")\n+        self.assertEqual(\n+            view.getNavRoot().absolute_url(),\n+            self.portal.folder2.folder21.absolute_url(),\n+        )\n \n     def testNoRootSet(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=\'\', topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(root_uid="", topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n \n     def testRootIsNotPortal(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=self.portal.folder2.UID(), topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(\n+                root_uid=self.portal.folder2.UID(), topLevel=0\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootDoesNotExist(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=\'DOESNT_EXIST\', topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(root_uid="DOESNT_EXIST", topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 6)\n+        self.assertEqual(len(tree["children"]), 6)\n \n     def testAboveRoot(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.root\'] = u\'/folder2\'\n+        registry["plone.root"] = u"/folder2"\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testOutsideRoot(self):\n-        view = self.renderer(self.portal.folder1, assignment=navigation.Assignment(root_uid=self.portal.folder2.UID()))\n+        view = self.renderer(\n+            self.portal.folder1,\n+            assignment=navigation.Assignment(root_uid=self.portal.folder2.UID()),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootIsCurrent(self):\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(currentFolderOnly=True))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(currentFolderOnly=True),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootIsCurrentWithFolderishDefaultPage(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.setDefaultPage(\'folder21\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.setDefaultPage("folder21")\n \n-        view = self.renderer(self.portal.folder2.folder21, assignment=navigation.Assignment(currentFolderOnly=True))\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            assignment=navigation.Assignment(currentFolderOnly=True),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testCustomQuery(self):\n         # Try a custom query script for the navtree that returns only published\n         # objects\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         workflow = self.portal.portal_workflow\n-        factory = self.portal.manage_addProduct[\'PythonScripts\']\n-        factory.manage_addPythonScript(\'getCustomNavQuery\')\n+        factory = self.portal.manage_addProduct["PythonScripts"]\n+        factory.manage_addPythonScript("getCustomNavQuery")\n         script = self.portal.getCustomNavQuery\n-        script.ZPythonScript_edit(\'\', \'return {"review_state": "published"}\')\n+        script.ZPythonScript_edit("", \'return {"review_state": "published"}\')\n         self.assertEqual(self.portal.getCustomNavQuery(), {"review_state": "published"})\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        #Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        #change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n+        self.assertTrue("children" in tree)\n+        # Should only contain current object\n+        self.assertEqual(len(tree["children"]), 1)\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n         self.portal.folder1.reindexObject()\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n-        #Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["children"]), 2)\n \n     def testStateFiltering(self):\n         # Test Navtree workflow state filtering\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n-        )\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n         workflow = self.portal.portal_workflow\n-        navigation_settings.workflow_states_to_show = (\'published\',)\n+        navigation_settings.workflow_states_to_show = ("published",)\n         navigation_settings.filter_on_workflow = True\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        #Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        #change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n+        self.assertTrue("children" in tree)\n+        # Should only contain current object\n+        self.assertEqual(len(tree["children"]), 1)\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n         self.portal.folder1.reindexObject()\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n-        #Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["children"]), 2)\n \n     def testPrunedRootNode(self):\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n         view = self.renderer(self.portal.folder1, assignment=assignment)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testPrunedRootNodeShowsAllParents(self):\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n         view = self.renderer(self.portal.folder1.doc11, assignment=assignment)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder1/doc11\')\n+        self.assertEqual(len(tree["children"]), 1)\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder1/doc11")\n \n     def testIsCurrentParentWithOverlapingNames(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n-        self.portal.invokeFactory(\'Folder\', \'folder2x\')\n-        self.portal.folder2x.invokeFactory(\'Document\', \'doc2x1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', ])\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Manager",\n+            ],\n+        )\n+        self.portal.invokeFactory("Folder", "folder2x")\n+        self.portal.folder2x.invokeFactory("Document", "doc2x1")\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Member",\n+            ],\n+        )\n         view = self.renderer(self.portal.folder2x.doc2x1)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n \n-        folder2x_node = [n for n in tree[\'children\'] if n[\'path\'] == \'/plone/folder2x\'][0]\n-        self.assertTrue(folder2x_node[\'currentParent\'])\n+        folder2x_node = [n for n in tree["children"] if n["path"] == "/plone/folder2x"][\n+            0\n+        ]\n+        self.assertTrue(folder2x_node["currentParent"])\n \n-        folder2_node = [n for n in tree[\'children\'] if n[\'path\'] == \'/plone/folder2\'][0]\n-        self.assertFalse(folder2_node[\'currentParent\'])\n+        folder2_node = [n for n in tree["children"] if n["path"] == "/plone/folder2"][0]\n+        self.assertFalse(folder2_node["currentParent"])\n \n     def testPortletNotDisplayedOnINavigationRoot(self):\n         """test that navigation portlet does not show on INavigationRoot\n@@ -519,11 +600,10 @@ def testPortletNotDisplayedOnINavigationRoot(self):\n         self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n \n         # add nested subfolder in folder1\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder1_1\')\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n \n         # make a navigation portlet\n-        assignment = navigation.Assignment(bottomLevel=0, topLevel=1,\n-                root_uid=None)\n+        assignment = navigation.Assignment(bottomLevel=0, topLevel=1, root_uid=None)\n         portlet = self.renderer(self.portal.folder1, assignment=assignment)\n \n         # check there is no portlet\n@@ -531,7 +611,7 @@ def testPortletNotDisplayedOnINavigationRoot(self):\n \n     def testINavigationRootWithRelativeRootSet(self):\n         """test that navigation portlet uses relative root set by user\n-           even in INavigationRoot case.\n+        even in INavigationRoot case.\n         """\n         self.assertFalse(INavigationRoot.providedBy(self.portal.folder1))\n \n@@ -540,36 +620,39 @@ def testINavigationRootWithRelativeRootSet(self):\n         self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n \n         # add two nested subfolders in folder1\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder1_1\')\n-        self.portal.folder1.folder1_1.invokeFactory(\'Folder\', \'folder1_1_1\')\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n+        self.portal.folder1.folder1_1.invokeFactory("Folder", "folder1_1_1")\n \n         # make a navigation portlet with navigation root set\n-        assignment = navigation.Assignment(bottomLevel=0, topLevel=0,\n-                root_uid=self.portal.folder1.folder1_1.UID())\n-        portlet = self.renderer(self.portal.folder1.folder1_1,\n-                assignment=assignment)\n+        assignment = navigation.Assignment(\n+            bottomLevel=0, topLevel=0, root_uid=self.portal.folder1.folder1_1.UID()\n+        )\n+        portlet = self.renderer(self.portal.folder1.folder1_1, assignment=assignment)\n \n         # check there is a portlet\n         self.assertTrue(portlet.available)\n \n         # check that portlet root is actually the one specified\n         root = portlet.getNavRoot()\n-        self.assertEqual(root.getId(), \'folder1_1\')\n+        self.assertEqual(root.getId(), "folder1_1")\n \n         # check that portlet tree actually includes children\n         tree = portlet.getNavTree()\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder1/folder1_1/folder1_1_1\')\n+        self.assertEqual(len(tree["children"]), 1)\n+        self.assertEqual(\n+            tree["children"][0]["item"].getPath(),\n+            "/plone/folder1/folder1_1/folder1_1_1",\n+        )\n \n     def testPortletsTitle(self):\n         """If portlet\'s name is not explicitely specified we show\n-           default fallback \'Navigation\', translate it and hide it\n-           with CSS."""\n+        default fallback \'Navigation\', translate it and hide it\n+        with CSS."""\n         view = self.renderer(self.portal)\n         view.getNavTree()\n         self.assertEqual(view.title(), "Navigation")\n         self.assertFalse(view.hasName())\n-        view.data.name = \'New navigation title\'\n+        view.data.name = "New navigation title"\n         self.assertEqual(view.title(), "New navigation title")\n         self.assertTrue(view.hasName())\n \n@@ -579,45 +662,59 @@ def testHeadingLinkRootless(self):\n         """\n \n         directlyProvides(self.portal.folder2, INavigationRoot)\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2, assignment=navigation.Assignment(topLevel=0)\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/folder2/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/folder2/sitemap")\n \n         # Even if the assignment contains no topLevel options and no self.root\n         # one should get link to the navigation root sitemap\n-        view = self.renderer(self.portal.folder2.doc21, assignment=navigation.Assignment())\n+        view = self.renderer(\n+            self.portal.folder2.doc21, assignment=navigation.Assignment()\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/folder2/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/folder2/sitemap")\n \n-        view = self.renderer(self.portal.folder1, assignment=navigation.Assignment(topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder1, assignment=navigation.Assignment(topLevel=0)\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/sitemap")\n \n     def testHeadingLinkRooted(self):\n         """\n         See that heading link points to a content item if root selected, otherwise sitemap.\n         """\n         view = self.renderer(\n-            self.portal.folder2, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.folder2.UID()))\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n         link = view.heading_link_target()\n-        self.assertEqual(link, \'http://nohost/plone/folder2\')\n+        self.assertEqual(link, "http://nohost/plone/folder2")\n \n     def testHeadingLinkRootedItemGone(self):\n         """\n         See that heading link points to a content item which do not exist\n         """\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(topLevel=0, root_uid="DOESNT_EXIST"))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(topLevel=0, root_uid="DOESNT_EXIST"),\n+        )\n         link = view.heading_link_target()\n         # Points to the site root if the item is gone\n         self.assertEqual(link, "http://nohost/plone/sitemap")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_news_portlet.py b/plone/app/portlets/tests/test_news_portlet.py\nindex ed0c6e6b..5cb05473 100644\n--- a/plone/app/portlets/tests/test_news_portlet.py\n+++ b/plone/app/portlets/tests/test_news_portlet.py\n@@ -1,39 +1,38 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        self.assertEqual(portlet.addview, \'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        self.assertEqual(portlet.addview, "portlets.News")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = news.Assignment(count=5)\n@@ -41,11 +40,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -56,60 +55,83 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, news.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = news.Assignment(count=5)\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, news.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n         # Make sure News Items use simple_publication_workflow\n-        self.portal.portal_workflow.setChainForPortalTypes([\'News Item\'], [\'simple_publication_workflow\'])\n+        self.portal.portal_workflow.setChainForPortalTypes(\n+            ["News Item"], ["simple_publication_workflow"]\n+        )\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = assignment or news.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = assignment or news.Assignment(\n+            template="portlet_recent", macro="portlet"\n+        )\n+\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_published_news_items(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'News Item\', \'n1\')\n-        self.portal.invokeFactory(\'News Item\', \'n2\')\n-        self.portal.portal_workflow.doActionFor(self.portal.n1, \'publish\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("News Item", "n1")\n+        self.portal.invokeFactory("News Item", "n2")\n+        self.portal.portal_workflow.doActionFor(self.portal.n1, "publish")\n \n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'draft\', )))\n+        r = self.renderer(assignment=news.Assignment(count=5, state=("draft",)))\n         self.assertEqual(0, len(r.published_news_items()))\n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'published\', )))\n+        r = self.renderer(assignment=news.Assignment(count=5, state=("published",)))\n         self.assertEqual(1, len(r.published_news_items()))\n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'published\', \'private\', )))\n+        r = self.renderer(\n+            assignment=news.Assignment(\n+                count=5,\n+                state=(\n+                    "published",\n+                    "private",\n+                ),\n+            )\n+        )\n         self.assertEqual(2, len(r.published_news_items()))\n \n     def test_all_news_link(self):\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n         r = self.renderer(assignment=news.Assignment(count=5))\n         self.assertEqual(r.all_news_link(), None)\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.assertTrue(r.all_news_link().endswith(\'/news\'))\n+        self.portal.invokeFactory("Folder", "news")\n+        self.assertTrue(r.all_news_link().endswith("/news"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_recent_portlet.py b/plone/app/portlets/tests/test_recent_portlet.py\nindex 9c50f85f..8282fb5b 100644\n--- a/plone/app/portlets/tests/test_recent_portlet.py\n+++ b/plone/app/portlets/tests/test_recent_portlet.py\n@@ -1,38 +1,38 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n-        self.assertEqual(portlet.addview, \'portlets.Recent\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n+        self.assertEqual(portlet.addview, "portlets.Recent")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = recent.Assignment()\n@@ -40,11 +40,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -55,48 +55,57 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = recent.Assignment()\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = recent.Assignment()\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, recent.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = recent.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, recent.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.app.REQUEST\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.portal.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or recent.Assignment()\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_recent_items(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n-        if \'events\' in self.portal:\n-            self.portal._delObject(\'events\')\n-        if \'front-page\' in self.portal:\n-            self.portal._delObject(\'front-page\')\n-        if \'Members\' in self.portal:\n-            self.portal._delObject(\'Members\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n             self.folder = None\n-        if \'folder\' in self.portal:\n-            self.portal._delObject(\'folder\')\n-        if \'users\' in self.portal:\n-            self.portal._delObject(\'users\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n         r = self.renderer(assignment=recent.Assignment())\n         self.assertEqual(2, len(r.recent_items()))\n \n@@ -105,15 +114,17 @@ def test_recent_items(self):\n \n     def test_recently_modified_link(self):\n         r = self.renderer(assignment=recent.Assignment())\n-        self.assertTrue(r.recently_modified_link().endswith(\'/recently_modified\'))\n+        self.assertTrue(r.recently_modified_link().endswith("/recently_modified"))\n \n     def test_title(self):\n         r = self.renderer(assignment=recent.Assignment())\n-        self.assertEqual(str(r.title), \'box_recent_changes\')\n+        self.assertEqual(str(r.title), "box_recent_changes")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py\nindex 2d656ed8..7e9d9ca3 100644\n--- a/plone/app/portlets/tests/test_redirects.py\n+++ b/plone/app/portlets/tests/test_redirects.py\n@@ -8,30 +8,26 @@\n \n class TestRedirects(PortletsTestCase):\n     _test_methods = [\n-        (PortletAdding, \'nextURL\'),\n-        (ManagePortletAssignments, \'_nextUrl\'),\n-        (AddForm, \'nextURL\'),\n-        (EditForm, \'nextURL\'),\n+        (PortletAdding, "nextURL"),\n+        (ManagePortletAssignments, "_nextUrl"),\n+        (AddForm, "nextURL"),\n+        (EditForm, "nextURL"),\n     ]\n \n     def test_regression(self):\n         portal_url = self.portal.absolute_url()\n-        self.request.form.update({\n-            \'referer\': portal_url\n-        })\n+        self.request.form.update({"referer": portal_url})\n         for Klass, method in self._test_methods:\n             view = Klass(self.portal, self.request)\n             view.__parent__ = self.portal\n             self.assertEqual(getattr(view, method)(), portal_url)\n \n     def test_valid_next_url(self):\n-        self.request.form.update({\n-            \'referer\': \'http://attacker.com\'\n-        })\n+        self.request.form.update({"referer": "http://attacker.com"})\n         for Klass, method in self._test_methods:\n             view = Klass(self.portal, self.request)\n             view.__parent__ = self.portal\n-            self.assertNotEqual(\'http://attacker.com\', getattr(view, method)())\n+            self.assertNotEqual("http://attacker.com", getattr(view, method)())\n \n \n def test_suite():\n@@ -52,7 +48,9 @@ def test_suite():\n     # bin/test -s plone.app.portlets -m test_redirects\n     # But the error *is* in this test_redirects.py file,\n     # because it goes away when I delete this file.\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestRedirects))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_review_portlet.py b/plone/app/portlets/tests/test_review_portlet.py\nindex 676416d9..a3917f8a 100644\n--- a/plone/app/portlets/tests/test_review_portlet.py\n+++ b/plone/app/portlets/tests/test_review_portlet.py\n@@ -1,41 +1,40 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import review\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import setRoles\n-from plone.app.testing import login\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n-        self.assertEqual(portlet.addview, \'portlets.Review\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n+        self.assertEqual(portlet.addview, "portlets.Review")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = review.Assignment()\n@@ -43,11 +42,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.createAndAdd(data={})\n \n         self.assertEqual(len(mapping), 1)\n@@ -56,55 +55,65 @@ def testInvokeAddview(self):\n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = review.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, review.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.portal_membership.getMemberById(\'test_user_1_\').setMemberProperties(\n-                                    {\'fullname\': \'Test user\'})\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.portal_membership.getMemberById("test_user_1_").setMemberProperties(\n+            {"fullname": "Test user"}\n+        )\n \n         # add Folder and assign Reviewer role to our Test user there\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n+        self.portal.invokeFactory("Folder", "folder1")\n         self.folder1 = self.portal.folder1\n-        self.folder1.manage_setLocalRoles(\'test_user_1_\', [\'Reviewer\'])\n+        self.folder1.manage_setLocalRoles("test_user_1_", ["Reviewer"])\n         self.folder1.reindexObjectSecurity()\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or review.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_review_items(self):\n         r = self.renderer(assignment=review.Assignment())\n         self.assertEqual(0, len(r.review_items()))\n-        wf = getToolByName(self.portal, \'portal_workflow\')\n-        wf.doActionFor(self.portal.doc1, \'submit\')\n+        wf = getToolByName(self.portal, "portal_workflow")\n+        wf.doActionFor(self.portal.doc1, "submit")\n         r = self.renderer(assignment=review.Assignment())\n         self.assertEqual(1, len(r.review_items()))\n-        self.assertEqual(r.review_items()[0][\'creator\'], "Test user")\n+        self.assertEqual(r.review_items()[0]["creator"], "Test user")\n \n     def test_full_news_link(self):\n         r = self.renderer(assignment=review.Assignment())\n-        self.assertTrue(r.full_review_link().endswith(\'/full_review_list\'))\n+        self.assertTrue(r.full_review_link().endswith("/full_review_list"))\n \n     def test_full_news_link_local_reviewer(self):\n         # login as our test user\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         # there should be no full news link on site root for our local reviewer\n         r = self.renderer(assignment=review.Assignment())\n@@ -112,16 +121,19 @@ def test_full_news_link_local_reviewer(self):\n \n         # get renderer in context of our reviewer\'s folder\n         r = self.renderer(context=self.folder1, assignment=review.Assignment())\n-        self.assertEqual(r.full_review_link(), \'%s/full_review_list\' %\n-            self.folder1.absolute_url())\n+        self.assertEqual(\n+            r.full_review_link(), "%s/full_review_list" % self.folder1.absolute_url()\n+        )\n \n     def test_title(self):\n         r = self.renderer(assignment=review.Assignment())\n-        self.assertEqual(str(r.title), \'box_review_list\')\n+        self.assertEqual(str(r.title), "box_review_list")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_rss_portlet.py b/plone/app/portlets/tests/test_rss_portlet.py\nindex 8e5adc20..7338e327 100644\n--- a/plone/app/portlets/tests/test_rss_portlet.py\n+++ b/plone/app/portlets/tests/test_rss_portlet.py\n@@ -1,21 +1,18 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.namedfile.file import NamedBlobFile\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import rss\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n-\n+from plone.app.testing import TEST_USER_ID\n+from plone.namedfile.file import NamedBlobFile\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n import os\n import transaction\n@@ -29,21 +26,24 @@\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n-        self.assertEqual(portlet.addview, \'portlets.rss\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n+        self.assertEqual(portlet.addview, "portlets.rss")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = rss.Assignment()\n@@ -51,11 +51,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -65,11 +65,15 @@ def testInvokeAddview(self):\n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = rss.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, rss.Renderer))\n \n     def testRSSFeedFile(self):\n@@ -85,15 +89,20 @@ def testRSSFeedFile(self):\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or rss.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_rss_items(self):\n         r = self.renderer(assignment=rss.Assignment())\n@@ -101,9 +110,9 @@ def test_rss_items(self):\n \n     def testTitle(self):\n         r = self.renderer(assignment=rss.Assignment())\n-        self.assertEqual(r.title, u\'\')\n-        r.data.portlet_title = u\'Overridden title\'\n-        self.assertEqual(r.title, u\'Overridden title\')\n+        self.assertEqual(r.title, u"")\n+        r.data.portlet_title = u"Overridden title"\n+        self.assertEqual(r.title, u"Overridden title")\n \n \n class TestFunctional(unittest.TestCase):\n@@ -132,7 +141,9 @@ def test_rss_feed_http(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_setup.py b/plone/app/portlets/tests/test_setup.py\nindex e85cb877..02f88b33 100644\n--- a/plone/app/portlets/tests/test_setup.py\n+++ b/plone/app/portlets/tests/test_setup.py\n@@ -1,29 +1,39 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getSiteManager, getUtilitiesFor, getUtility\n-\n-from plone.portlets.interfaces import IPortletManager\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.app.portlets.interfaces import ILeftColumn\n+from plone.app.portlets.interfaces import IRightColumn\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.portlets.interfaces import ILocalPortletAssignable\n+from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletType\n-\n-from plone.app.portlets.interfaces import ILeftColumn, IRightColumn, IDashboard\n-from plone.app.portlets.tests.base import PortletsTestCase\n+from zope.component import getSiteManager\n+from zope.component import getUtilitiesFor\n+from zope.component import getUtility\n \n \n class TestProductInstall(PortletsTestCase):\n-\n     def testPortletManagersRegistered(self):\n         sm = getSiteManager(self.portal)\n-        registrations = [r.name for r in sm.registeredUtilities()\n-                            if IPortletManager == r.provided]\n-        self.assertEqual([\'plone.dashboard1\', \'plone.dashboard2\',\n-                           \'plone.dashboard3\', \'plone.dashboard4\',\n-                           \'plone.footerportlets\', \'plone.leftcolumn\',\n-                           \'plone.rightcolumn\'], sorted(registrations))\n+        registrations = [\n+            r.name for r in sm.registeredUtilities() if IPortletManager == r.provided\n+        ]\n+        self.assertEqual(\n+            [\n+                "plone.dashboard1",\n+                "plone.dashboard2",\n+                "plone.dashboard3",\n+                "plone.dashboard4",\n+                "plone.footerportlets",\n+                "plone.leftcolumn",\n+                "plone.rightcolumn",\n+            ],\n+            sorted(registrations),\n+        )\n \n     def testInterfaces(self):\n-        left = getUtility(IPortletManager, \'plone.leftcolumn\')\n-        right = getUtility(IPortletManager, \'plone.rightcolumn\')\n-        dashboard = getUtility(IPortletManager, \'plone.dashboard1\')\n+        left = getUtility(IPortletManager, "plone.leftcolumn")\n+        right = getUtility(IPortletManager, "plone.rightcolumn")\n+        dashboard = getUtility(IPortletManager, "plone.dashboard1")\n \n         self.assertTrue(ILeftColumn.providedBy(left))\n         self.assertTrue(IRightColumn.providedBy(right))\n@@ -35,12 +45,14 @@ def testAssignable(self):\n \n     def testPortletTypesRegistered(self):\n         portlets = [u[0] for u in getUtilitiesFor(IPortletType)]\n-        self.assertTrue(\'portlets.Classic\' in portlets)\n-        self.assertTrue(\'portlets.Login\' in portlets)\n+        self.assertTrue("portlets.Classic" in portlets)\n+        self.assertTrue("portlets.Login" in portlets)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestProductInstall))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex b5984506..e2eb78e8 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -1,90 +1,101 @@\n # -*- coding: utf-8 -*-\n+from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from AccessControl import Unauthorized\n-\n-from zope.component import getMultiAdapter, getUtility\n-\n-from plone.portlets.interfaces import IPortletManager, IPortletAssignmentMapping\n-\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.portlets import classic\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestTraversal(PortletsTestCase):\n-\n     def _assertSameObject(self, a, b):\n         self.assertTrue(aq_base(a) is aq_base(b))\n \n     def testContextNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.folder.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.folder.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         self._assertSameObject(aq_parent(mapping), self.folder)\n-        mapping[\'foo\'] = assignment\n+        mapping["foo"] = assignment\n         target = getMultiAdapter((self.folder, manager), IPortletAssignmentMapping)\n-        self._assertSameObject(target[\'foo\'], assignment)\n-        self.assertEqual(\'++contextportlets++plone.leftcolumn\', mapping.id)\n+        self._assertSameObject(target["foo"], assignment)\n+        self.assertEqual("++contextportlets++plone.leftcolumn", mapping.id)\n \n     def testDashboardNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID)\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++dashboard++plone.dashboard1+" + TEST_USER_ID\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID][\'foo\'], assignment)\n-        self.assertEqual(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID, mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID]["foo"], assignment)\n+        self.assertEqual("++dashboard++plone.dashboard1+" + TEST_USER_ID, mapping.id)\n \n     def testGroupDashboardNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++groupdashboard++plone.dashboard1+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupdashboard++plone.dashboard1+Reviewers"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[GROUP_CATEGORY][\'Reviewers\'][\'foo\'], assignment)\n-        self.assertEqual(\'++groupdashboard++plone.dashboard1+Reviewers\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[GROUP_CATEGORY]["Reviewers"]["foo"], assignment)\n+        self.assertEqual("++groupdashboard++plone.dashboard1+Reviewers", mapping.id)\n \n     def testGroupDashboardNamespaceChecker(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++groupdashboard++plone.dashboard1+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupdashboard++plone.dashboard1+Reviewers"\n+        )\n \n         checker = IPortletPermissionChecker(mapping)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        checker() # no exception\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        checker()  # no exception\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertRaises(Unauthorized, checker)\n \n     def testGroupNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.portal.restrictedTraverse(\'++groupportlets++plone.leftcolumn+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupportlets++plone.leftcolumn+Reviewers"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[GROUP_CATEGORY][\'Reviewers\'][\'foo\'], assignment)\n-        self.assertEqual(\'++groupportlets++plone.leftcolumn+Reviewers\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[GROUP_CATEGORY]["Reviewers"]["foo"], assignment)\n+        self.assertEqual("++groupportlets++plone.leftcolumn+Reviewers", mapping.id)\n \n     def testContentTypeNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.portal.restrictedTraverse(\'++contenttypeportlets++plone.leftcolumn+Image\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.portal.restrictedTraverse(\n+            "++contenttypeportlets++plone.leftcolumn+Image"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[CONTENT_TYPE_CATEGORY][\'Image\'][\'foo\'], assignment)\n-        self.assertEqual(\'++contenttypeportlets++plone.leftcolumn+Image\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(\n+            manager[CONTENT_TYPE_CATEGORY]["Image"]["foo"], assignment\n+        )\n+        self.assertEqual("++contenttypeportlets++plone.leftcolumn+Image", mapping.id)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestTraversal))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 64042f73..8ae64a84 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -1,89 +1,99 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n-\n-from plone.app.testing import TEST_USER_ID\n-\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletRenderer\n-\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.utils import hashPortletInfo\n-\n from plone.app.portlets.browser.utils import PortletUtilities\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.utils import assignment_from_key\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.utils import hashPortletInfo\n+from Products.CMFPlone.utils import safe_unicode\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestAssignmentFromKey(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n+        self.manager = getUtility(IPortletManager, name=u"plone.leftcolumn")\n         self.cat = self.manager[USER_CATEGORY]\n-        self.cat[TEST_USER_ID] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n-                                                       category=USER_CATEGORY,\n-                                                       name=TEST_USER_ID)\n+        self.cat[TEST_USER_ID] = PortletAssignmentMapping(\n+            manager=u"plone.leftcolumn", category=USER_CATEGORY, name=TEST_USER_ID\n+        )\n \n     def testGetPortletFromContext(self):\n-        mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.portal, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n-        path = \'/\'.join(self.portal.getPhysicalPath())\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', CONTEXT_CATEGORY, path, \'foo\')\n+        mapping["foo"] = c\n+        path = "/".join(self.portal.getPhysicalPath())\n+        a = assignment_from_key(\n+            self.portal, u"plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+        )\n         self.assertEqual(c, a)\n \n     def testGetPortletFromContextUnicodePath(self):\n         """Do not fail, if path is a unicode object.\n         plone.portlets.utils.unhashPortletInfo returns a unicode path key.\n         """\n-        mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.portal, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n-        path = u\'/\'.join(self.portal.getPhysicalPath())\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', CONTEXT_CATEGORY, path, \'foo\')\n+        mapping["foo"] = c\n+        path = u"/".join(self.portal.getPhysicalPath())\n+        a = assignment_from_key(\n+            self.portal, u"plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+        )\n         self.assertEqual(c, a)\n \n     def testGetPortletFromUserCategory(self):\n         c = classic.Assignment()\n-        self.cat[TEST_USER_ID][\'foo\'] = c\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, TEST_USER_ID, \'foo\')\n+        self.cat[TEST_USER_ID]["foo"] = c\n+        a = assignment_from_key(\n+            self.portal, u"plone.leftcolumn", USER_CATEGORY, TEST_USER_ID, "foo"\n+        )\n         self.assertEqual(c, a)\n \n \n class TestRendering(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.portal.invokeFactory(\'News Item\', \'testnews\', title=u\'Test News\')\n+        self.portal.invokeFactory("News Item", "testnews", title=u"Test News")\n \n     def testTraversalRendererWithHash(self):\n         context = self.folder\n         request = self.folder.REQUEST\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.folder)\n-        assignment = news.Assignment(state=(\'private\', ))\n-        mapping = getMultiAdapter(\n-            (context, manager), IPortletAssignmentMapping)\n-        mapping[\'newsportlet\'] = assignment\n+            IPortletManager, name="plone.leftcolumn", context=self.folder\n+        )\n+        assignment = news.Assignment(state=("private",))\n+        mapping = getMultiAdapter((context, manager), IPortletAssignmentMapping)\n+        mapping["newsportlet"] = assignment\n         portlet_hash = hashPortletInfo(\n-            dict(manager=manager.__name__, category=CONTEXT_CATEGORY,\n-                 key=\'/\'.join(context.getPhysicalPath()),\n-                 name=\'newsportlet\'))\n+            dict(\n+                manager=manager.__name__,\n+                category=CONTEXT_CATEGORY,\n+                key="/".join(context.getPhysicalPath()),\n+                name="newsportlet",\n+            )\n+        )\n         render_portlet_view = PortletUtilities(context, request)\n         rendered_portlet = render_portlet_view.render_portlet(\n-            safe_unicode(portlet_hash))\n-        self.assertIn(u\'portletNews\', rendered_portlet)\n-        self.assertIn(u\'Test News\', rendered_portlet)\n+            safe_unicode(portlet_hash)\n+        )\n+        self.assertIn(u"portletNews", rendered_portlet)\n+        self.assertIn(u"Test News", rendered_portlet)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestAssignmentFromKey))\n     suite.addTest(makeSuite(TestRendering))\ndiff --git a/plone/app/portlets/tests/utils.py b/plone/app/portlets/tests/utils.py\nindex abe40cad..5746603a 100644\n--- a/plone/app/portlets/tests/utils.py\n+++ b/plone/app/portlets/tests/utils.py\n@@ -1,12 +1,13 @@\n # -*- coding: utf-8 -*-\n-import doctest\n from plone.portlets.manager import PortletManager\n \n+import doctest\n+\n \n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n # Helper class for tests\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex bd19a4b5..73a1da34 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -1,28 +1,25 @@\n # -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.container.interfaces import INameChooser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.portlets.constants import CONTEXT_CATEGORY, USER_CATEGORY\n-\n+from Acquisition import aq_base\n+from plone.app.portlets import HAS_PLONE_APP_EVENT\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import login\n-from plone.app.portlets.portlets import news\n from plone.app.portlets.portlets import navigation\n+from plone.app.portlets.portlets import news\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.portlets import review\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n-\n-from Acquisition import aq_base\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.utils import getToolByName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.container.interfaces import INameChooser\n+\n \n-from plone.app.portlets import HAS_PLONE_APP_EVENT\n if HAS_PLONE_APP_EVENT:\n     from plone.app.event.portlets import portlet_calendar as calendar\n     from plone.app.event.portlets import portlet_events as events\n@@ -40,20 +37,20 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n \n     if category == CONTEXT_CATEGORY:\n         path = key\n-        portal = getToolByName(context, \'portal_url\').getPortalObject()\n-        portal_path = \'/\'.join(portal.getPhysicalPath())\n+        portal = getToolByName(context, "portal_url").getPortalObject()\n+        portal_path = "/".join(portal.getPhysicalPath())\n         if path == portal_path:\n             # there may be problem if PloneSite id is \'plone\'.\n             # restrictedTraverse traverses to @@plone BrowserView which\n             # is wrong\n             obj = portal\n         else:\n-            if path.startswith(portal_path + \'/\'):\n-                path = path[len(portal_path)+1:]\n-            while path.startswith(\'/\'):\n+            if path.startswith(portal_path + "/"):\n+                path = path[len(portal_path) + 1 :]\n+            while path.startswith("/"):\n                 path = path[1:]\n             if six.PY2 and isinstance(path, six.text_type):\n-                path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n+                path = path.encode("utf-8")  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n             raise KeyError("Cannot find object at path %s" % path)\n@@ -75,6 +72,7 @@ def assignment_from_key(context, manager_name, category, key, name):\n     """\n     return assignment_mapping_from_key(context, manager_name, category, key)[name]\n \n+\n DONT_MIGRATE = object()\n \n \n@@ -83,30 +81,37 @@ def convert_legacy_portlets(context):\n     context to new-style portlets.\n     """\n \n-    portletsMapping = {\'portlet_login\': login.Assignment(),\n-                       \'portlet_news\': news.Assignment(count=5),\n-                       \'portlet_navigation\': navigation.Assignment(),\n-                       \'portlet_review\': review.Assignment(),\n-                       \'portlet_recent\': recent.Assignment(count=5),\n-                       \'portlet_related\': DONT_MIGRATE,\n-                       \'portlet_languages\': DONT_MIGRATE,\n-                       \'portlet_calendar\': DONT_MIGRATE,\n-                       \'portlet_events\': DONT_MIGRATE,\n-                       }\n+    portletsMapping = {\n+        "portlet_login": login.Assignment(),\n+        "portlet_news": news.Assignment(count=5),\n+        "portlet_navigation": navigation.Assignment(),\n+        "portlet_review": review.Assignment(),\n+        "portlet_recent": recent.Assignment(count=5),\n+        "portlet_related": DONT_MIGRATE,\n+        "portlet_languages": DONT_MIGRATE,\n+        "portlet_calendar": DONT_MIGRATE,\n+        "portlet_events": DONT_MIGRATE,\n+    }\n \n     if HAS_PLONE_APP_EVENT:\n-        portletsMapping.update({\n-            \'portlet_calendar\': calendar.Assignment(),\n-            \'portlet_events\': events.Assignment(count=5),\n-        })\n+        portletsMapping.update(\n+            {\n+                "portlet_calendar": calendar.Assignment(),\n+                "portlet_events": events.Assignment(count=5),\n+            }\n+        )\n \n     # Convert left_slots and right_slots to portlets\n \n-    left = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-    right = getUtility(IPortletManager, name=\'plone.rightcolumn\')\n+    left = getUtility(IPortletManager, name="plone.leftcolumn")\n+    right = getUtility(IPortletManager, name="plone.rightcolumn")\n \n-    leftAssignable = getMultiAdapter((context, left), IPortletAssignmentMapping).__of__(context)\n-    rightAssignable = getMultiAdapter((context, right), IPortletAssignmentMapping).__of__(context)\n+    leftAssignable = getMultiAdapter((context, left), IPortletAssignmentMapping).__of__(\n+        context\n+    )\n+    rightAssignable = getMultiAdapter(\n+        (context, right), IPortletAssignmentMapping\n+    ).__of__(context)\n \n     IPortletPermissionChecker(leftAssignable)()\n     IPortletPermissionChecker(rightAssignable)()\n@@ -114,23 +119,31 @@ def convert_legacy_portlets(context):\n     leftChooser = INameChooser(leftAssignable)\n     rightChooser = INameChooser(rightAssignable)\n \n-    left_slots = getattr(aq_base(context), \'left_slots\', [])\n-    right_slots = getattr(aq_base(context), \'right_slots\', [])\n+    left_slots = getattr(aq_base(context), "left_slots", [])\n+    right_slots = getattr(aq_base(context), "right_slots", [])\n \n     for item in left_slots:\n-        path = item.split(\'/\')\n+        path = item.split("/")\n         if len(path) == 4:\n             newPortlet = portletsMapping.get(path[1], None)\n-            if newPortlet is None and path[0] in (\'context\', \'here\') and path[2] == \'macros\':\n+            if (\n+                newPortlet is None\n+                and path[0] in ("context", "here")\n+                and path[2] == "macros"\n+            ):\n                 newPortlet = classic.Assignment(path[1], path[3])\n             if newPortlet is not None and newPortlet is not DONT_MIGRATE:\n                 leftAssignable[leftChooser.chooseName(None, newPortlet)] = newPortlet\n \n     for item in right_slots:\n-        path = item.split(\'/\')\n+        path = item.split("/")\n         if len(path) == 4:\n             newPortlet = portletsMapping.get(path[1], None)\n-            if newPortlet is None and path[0] in (\'context\', \'here\') and path[2] == \'macros\':\n+            if (\n+                newPortlet is None\n+                and path[0] in ("context", "here")\n+                and path[2] == "macros"\n+            ):\n                 newPortlet = classic.Assignment(path[1], path[3])\n             if newPortlet is not None and newPortlet is not DONT_MIGRATE:\n                 rightAssignable[rightChooser.chooseName(None, newPortlet)] = newPortlet\ndiff --git a/setup.cfg b/setup.cfg\nindex d67feb4c..be9558ad 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,12 +1,9 @@\n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n-not_skip =\n-    __init__.py\n \n [bdist_wheel]\n universal = 1\ndiff --git a/setup.py b/setup.py\nindex 3f16b245..10582e76 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,14 +3,13 @@\n from setuptools import setup\n \n \n-version = \'5.0.0a3.dev0\'\n+version = "5.0.0a3.dev0"\n \n setup(\n-    name=\'plone.app.portlets\',\n+    name="plone.app.portlets",\n     version=version,\n     description="Plone integration for the basic plone.portlets package",\n-    long_description=open("README.rst").read() + "\\n" +\n-    open("CHANGES.rst").read(),\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -25,56 +24,56 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'portlets viewlets plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.portlets\',\n-    license=\'GPL version 2\',\n+    keywords="portlets viewlets plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.portlets",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'five.customerize\',\n-        \'plone.autoform\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.portlets>=1.1\',\n-        \'plone.app.i18n\',\n-        \'plone.app.layout >= 1.2dev\',\n-        \'plone.app.vocabularies >= 2.1.15.dev0\',\n-        \'plone.app.z3cform\',\n-        \'six\',\n-        \'transaction\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.container\',\n-        \'zope.contentprovider\',\n-        \'zope.event\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.traversing\',\n-        \'Products.CMFPlone\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'Products.GenericSetup >= 2.0.dev0\',\n-        \'Products.PluggableAuthService\',\n-        \'ZODB3\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Zope2 >= 2.12.3\',\n-        \'feedparser\',\n+        "setuptools",\n+        "five.customerize",\n+        "plone.autoform",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.portlets>=1.1",\n+        "plone.app.i18n",\n+        "plone.app.layout >= 1.2dev",\n+        "plone.app.vocabularies >= 2.1.15.dev0",\n+        "plone.app.z3cform",\n+        "six",\n+        "transaction",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.configuration",\n+        "zope.container",\n+        "zope.contentprovider",\n+        "zope.event",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.site",\n+        "zope.traversing",\n+        "Products.CMFPlone",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.GenericSetup >= 2.0.dev0",\n+        "Products.PluggableAuthService",\n+        "ZODB3",\n+        "Acquisition",\n+        "DateTime",\n+        "Zope2 >= 2.12.3",\n+        "feedparser",\n     ],\n )\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2021-08-19T12:35:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/8e8e5b5884c32e258fea6771e56f58834a2dbe68

pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/portlets/__init__.py
M plone/app/portlets/assignable.py
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/interfaces.py
M plone/app/portlets/browser/manage.py
M plone/app/portlets/browser/traversal.py
M plone/app/portlets/browser/utils.py
M plone/app/portlets/cache.py
M plone/app/portlets/checker.py
M plone/app/portlets/dashboard.py
M plone/app/portlets/exportimport/__init__.py
M plone/app/portlets/exportimport/interfaces.py
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/interfaces.py
M plone/app/portlets/manager.py
M plone/app/portlets/metaconfigure.py
M plone/app/portlets/metadirectives.py
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/__init__.py
M plone/app/portlets/portlets/actions.py
M plone/app/portlets/portlets/base.py
M plone/app/portlets/portlets/calendar.py
M plone/app/portlets/portlets/classic.py
M plone/app/portlets/portlets/events.py
M plone/app/portlets/portlets/language.py
M plone/app/portlets/portlets/login.py
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/portlets/news.py
M plone/app/portlets/portlets/recent.py
M plone/app/portlets/portlets/review.py
M plone/app/portlets/portlets/rss.py
M plone/app/portlets/portlets/search.py
M plone/app/portlets/storage.py
M plone/app/portlets/testing.py
M plone/app/portlets/tests/__init__.py
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_cache.py
M plone/app/portlets/tests/test_classic_portlet.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/tests/test_exportimport.py
M plone/app/portlets/tests/test_formextender.py
M plone/app/portlets/tests/test_login_portlet.py
M plone/app/portlets/tests/test_manage_views.py
M plone/app/portlets/tests/test_mapping.py
M plone/app/portlets/tests/test_namechooser.py
M plone/app/portlets/tests/test_navigation_portlet.py
M plone/app/portlets/tests/test_news_portlet.py
M plone/app/portlets/tests/test_recent_portlet.py
M plone/app/portlets/tests/test_redirects.py
M plone/app/portlets/tests/test_review_portlet.py
M plone/app/portlets/tests/test_rss_portlet.py
M plone/app/portlets/tests/test_setup.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py
M plone/app/portlets/tests/utils.py
M plone/app/portlets/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex ca12a733..05f0bebb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex ca12a733..05f0bebb 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/portlets/__init__.py b/plone/app/portlets/__init__.py\nindex 203cb6f3..febb48db 100644\n--- a/plone/app/portlets/__init__.py\n+++ b/plone/app/portlets/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Import PloneMessageFactory to create messages in the plone domain\n from zope.i18nmessageid import MessageFactory\n \ndiff --git a/plone/app/portlets/assignable.py b/plone/app/portlets/assignable.py\nindex 2e260759..b6b0471d 100644\n--- a/plone/app/portlets/assignable.py\n+++ b/plone/app/portlets/assignable.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.constants import CONTEXT_CATEGORY\ndiff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py\nindex 15425d88..48340277 100644\n--- a/plone/app/portlets/browser/adding.py\n+++ b/plone/app/portlets/browser/adding.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -42,7 +41,7 @@ def nextURL(self):\n         referer = self.referer\n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n             referer = url + "/@@manage-portlets"\n         return referer\n \ndiff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py\nindex e3e4e3e7..38a468aa 100644\n--- a/plone/app/portlets/browser/editmanager.py\n+++ b/plone/app/portlets/browser/editmanager.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -126,7 +125,7 @@ def portlets_for_assignments(self, assignments, manager, base_url):\n             if editview is None:\n                 editviewName = ""\n             else:\n-                editviewName = "%s/%s/edit" % (base_url, name)\n+                editviewName = f"{base_url}/{name}/edit"\n \n             portlet_hash = hashPortletInfo(\n                 dict(\n@@ -174,7 +173,7 @@ def check_permission(p):\n             if not addview:\n                 return False\n \n-            addview = "%s/+/%s" % (\n+            addview = "{}/+/{}".format(\n                 addviewbase,\n                 addview,\n             )\n@@ -190,7 +189,7 @@ def check_permission(p):\n             {\n                 "title": p.title,\n                 "description": p.description,\n-                "addview": "%s/+/%s" % (addviewbase, p.addview),\n+                "addview": f"{addviewbase}/+/{p.addview}",\n             }\n             for p in self.manager.getAddablePortletTypes()\n             if check_permission(p)\n@@ -385,7 +384,7 @@ def global_portlets(self, category, prefix):\n         pcontext = IPortletContext(self.context)\n \n         portal_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_portal_state"\n+            (context, self.request), name="plone_portal_state"\n         )  # noqa\n         base_url = portal_state.portal_url()\n \n@@ -402,7 +401,7 @@ def global_portlets(self, category, prefix):\n                         [a for a in mapping.get(key, {}).values() if is_visible(a)]\n                     )\n                 if assignments:\n-                    edit_url = "%s/++%s++%s+%s" % (\n+                    edit_url = "{}/++{}++{}+{}".format(\n                         base_url,\n                         prefix,\n                         self.manager.__name__,\n@@ -438,7 +437,7 @@ class ManagePortletAssignments(BrowserView):\n \n     def authorize(self):\n         authenticator = getMultiAdapter(\n-            (self.context, self.request), name=u"authenticator"\n+            (self.context, self.request), name="authenticator"\n         )\n         if not authenticator.verify():\n             raise Unauthorized\n@@ -520,8 +519,8 @@ def _nextUrl(self):\n \n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n-            referer = "%s/@@manage-portlets" % (url,)\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+            referer = f"{url}/@@manage-portlets"\n         return referer\n \n     def toggle_visibility(self, name):\ndiff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py\nindex 471000a2..7f83bc70 100644\n--- a/plone/app/portlets/browser/formhelper.py\n+++ b/plone/app/portlets/browser/formhelper.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -45,7 +44,7 @@ def create(self):\n \n     template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n-    label = _(u"Configure portlet")\n+    label = _("Configure portlet")\n \n     def add(self, object):\n         ob = self.context.add(object)\n@@ -57,7 +56,7 @@ def __call__(self):\n         self.request.set("disable_plone.leftcolumn", 1)\n         self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n-        return super(AddForm, self).__call__()\n+        return super().__call__()\n \n     def createAndAdd(self, data):\n         # Filter away data values that does not come from the \'core\' schema.\n@@ -95,7 +94,7 @@ def nextURL(self):\n         addview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(addview))\n         try:\n-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         except (TypeError, AttributeError):\n             # At least in tests we can get a TypeError: "There isn\'t enough\n             # context to get URL information. This is probably due to a bug in\n@@ -103,7 +102,7 @@ def nextURL(self):\n             url = self.context.absolute_url()\n         return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="add")\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="add")\n     def handleAdd(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -114,7 +113,7 @@ def handleAdd(self, action):\n             # mark only as finished if we get the new object\n             self._finishedAdd = True\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name="cancel_add")\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n@@ -154,7 +153,7 @@ def nextURL(self):\n             context = aq_parent(aq_inner(addview))\n             try:\n                 url = str(\n-                    getMultiAdapter((context, self.request), name=u"absolute_url")\n+                    getMultiAdapter((context, self.request), name="absolute_url")\n                 )\n             except (TypeError, AttributeError):\n                 url = self.context.absolute_url()\n@@ -170,14 +169,14 @@ class EditForm(AutoExtensibleForm, form.EditForm):\n \n     template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n-    label = _(u"Modify portlet")\n+    label = _("Modify portlet")\n \n     def __call__(self):\n         self.request.set("disable_border", 1)\n         self.request.set("disable_plone.leftcolumn", 1)\n         self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n-        return super(EditForm, self).__call__()\n+        return super().__call__()\n \n     @property\n     def referer(self):\n@@ -190,12 +189,12 @@ def nextURL(self):\n         editview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(editview))\n         try:\n-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         except (TypeError, AttributeError):\n             url = self.context.absolute_url()\n         return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="apply")\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="apply")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -204,17 +203,17 @@ def handleSave(self, action):\n         changes = self.applyChanges(data)\n         if changes:\n             self.status = "Changes saved"\n-            IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"), "info")\n+            IStatusMessage(self.request).addStatusMessage(_("Changes saved"), "info")\n         else:\n             self.status = "No changes"\n-            IStatusMessage(self.request).addStatusMessage(_(u"No changes"), "info")\n+            IStatusMessage(self.request).addStatusMessage(_("No changes"), "info")\n \n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n         return ""\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"), name="cancel_add")\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\ndiff --git a/plone/app/portlets/browser/interfaces.py b/plone/app/portlets/browser/interfaces.py\nindex e2e12e3a..6ce29538 100644\n--- a/plone/app/portlets/browser/interfaces.py\n+++ b/plone/app/portlets/browser/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.browser.interfaces import IAdding\n from zope.interface import Attribute\n from zope.interface import Interface\ndiff --git a/plone/app/portlets/browser/manage.py b/plone/app/portlets/browser/manage.py\nindex b97e37b6..916bf7b0 100644\n--- a/plone/app/portlets/browser/manage.py\n+++ b/plone/app/portlets/browser/manage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -34,7 +33,7 @@\n @implementer(IManageContextualPortletsView)\n class ManageContextualPortlets(BrowserView):\n     def __init__(self, context, request):\n-        super(ManageContextualPortlets, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n@@ -55,7 +54,7 @@ def getAssignmentMappingUrl(self, manager):\n         baseUrl = str(\n             getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n-        return "%s/++contextportlets++%s" % (baseUrl, manager.__name__)\n+        return f"{baseUrl}/++contextportlets++{manager.__name__}"\n \n     def getAssignmentsForManager(self, manager):\n         assignments = getMultiAdapter(\n@@ -76,7 +75,7 @@ def set_blacklist_status(\n         self, manager, group_status, content_type_status, context_status\n     ):\n         authenticator = getMultiAdapter(\n-            (self.context, self.request), name=u"authenticator"\n+            (self.context, self.request), name="authenticator"\n         )\n         if not authenticator.verify():\n             raise Unauthorized\n@@ -145,7 +144,7 @@ def getAssignmentMappingUrl(self, manager):\n             getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n         userId = self._getUserId()\n-        return "%s/++dashboard++%s+%s" % (baseUrl, manager.__name__, userId)\n+        return f"{baseUrl}/++dashboard++{manager.__name__}+{userId}"\n \n     def getAssignmentsForManager(self, manager):\n         userId = self._getUserId()\n@@ -198,7 +197,7 @@ def getAssignmentMappingUrl(self, manager):\n         baseUrl = str(\n             getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n-        return "%s/++groupdashboard++%s+%s" % (baseUrl, manager.__name__, self.group)\n+        return f"{baseUrl}/++groupdashboard++{manager.__name__}+{self.group}"\n \n     def getAssignmentsForManager(self, manager):\n         column = getUtility(IPortletManager, name=manager.__name__)\n@@ -229,7 +228,7 @@ def key(self):\n         return self.request["key"]\n \n     def __init__(self, context, request):\n-        super(ManageGroupPortlets, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.request.set("disable_border", True)\n \n     def getAssignmentMappingUrl(self, manager):\n@@ -237,7 +236,7 @@ def getAssignmentMappingUrl(self, manager):\n             getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n         key = self.request["key"]\n-        return "%s/++groupportlets++%s+%s" % (baseUrl, manager.__name__, key)\n+        return f"{baseUrl}/++groupportlets++{manager.__name__}+{key}"\n \n     def getAssignmentsForManager(self, manager):\n         key = self.request["key"]\n@@ -259,7 +258,7 @@ def group(self):\n @implementer(IManageContentTypePortletsView)\n class ManageContentTypePortlets(BrowserView):\n     def __init__(self, context, request):\n-        super(ManageContentTypePortlets, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n@@ -281,7 +280,7 @@ def getAssignmentMappingUrl(self, manager):\n             getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n         pt = self.request["key"]\n-        return "%s/++contenttypeportlets++%s+%s" % (baseUrl, manager.__name__, pt)\n+        return f"{baseUrl}/++contenttypeportlets++{manager.__name__}+{pt}"\n \n     def getAssignmentsForManager(self, manager):\n         pt = self.request["key"]\n@@ -301,7 +300,7 @@ def portal_type(self):\n \n     def portal_type_icon(self):\n         plone_layout = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_layout"\n+            (self.context, self.request), name="plone_layout"\n         )\n         return plone_layout.getIcon(self.fti())\n \n@@ -325,7 +324,7 @@ class ManagePortletsViewlet(BrowserView):\n     """\n \n     def __init__(self, context, request, view, manager):\n-        super(ManagePortletsViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\n@@ -349,7 +348,7 @@ def __getattribute__(self, name):\n         # so a simple property or attribute does not work\n         if name == "__name__":\n             return self.ultimate_parent().__name__\n-        return super(ManagePortletsViewlet, self).__getattribute__(name)\n+        return super().__getattribute__(name)\n \n     def getAssignmentMappingUrl(self, manager):\n         return self.ultimate_parent().getAssignmentMappingUrl(manager)\n@@ -396,7 +395,7 @@ class ManageContentTypePortletsViewlet(ManagePortletsViewlet):\n @implementer_only(ITopbarManagePortlets)\n class TopbarManagePortlets(ManageContextualPortlets):\n     def __init__(self, context, request):\n-        super(TopbarManagePortlets, self).__init__(context, request)\n+        super().__init__(context, request)\n         # Disable the left and right columns\n         self.request.set("disable_plone.leftcolumn", 1)\n         self.request.set("disable_plone.rightcolumn", 1)\ndiff --git a/plone/app/portlets/browser/traversal.py b/plone/app/portlets/browser/traversal.py\nindex 48f14b65..b7c2e1f9 100644\n--- a/plone/app/portlets/browser/traversal.py\n+++ b/plone/app/portlets/browser/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n@@ -18,7 +17,7 @@\n \n \n @implementer(ITraversable)\n-class ContextPortletNamespace(object):\n+class ContextPortletNamespace:\n     """Used to traverse to a contextual portlet assignable"""\n \n     adapts(ILocalPortletAssignable, IHTTPRequest)\n@@ -40,7 +39,7 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n-class DashboardNamespace(object):\n+class DashboardNamespace:\n     """Used to traverse to a portlet assignable for the current user for\n     the dashboard.\n     """\n@@ -73,7 +72,7 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n-class GroupDashboardNamespace(object):\n+class GroupDashboardNamespace:\n     """Used to traverse to a portlet assignable for a group for the dashboard"""\n \n     adapts(ISiteRoot, IHTTPRequest)\n@@ -95,7 +94,7 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n-class GroupPortletNamespace(object):\n+class GroupPortletNamespace:\n     """Used to traverse to a group portlet assignable"""\n \n     adapts(ISiteRoot, IHTTPRequest)\n@@ -126,7 +125,7 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n-class ContentTypePortletNamespace(object):\n+class ContentTypePortletNamespace:\n     """Used to traverse to a content type portlet assignable"""\n \n     adapts(ISiteRoot, IHTTPRequest)\ndiff --git a/plone/app/portlets/browser/utils.py b/plone/app/portlets/browser/utils.py\nindex cddc2d09..c86749f8 100644\n--- a/plone/app/portlets/browser/utils.py\n+++ b/plone/app/portlets/browser/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.interfaces import IDeferredPortletRenderer\n from plone.app.portlets.utils import assignment_from_key\n from plone.portlets.interfaces import IPortletManager\ndiff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex c9eeeb44..e64e82f8 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n from zope import component\n@@ -8,7 +7,7 @@\n \n def get_language(context, request):\n     portal_state = component.getMultiAdapter(\n-        (context, request), name=u"plone_portal_state"\n+        (context, request), name="plone_portal_state"\n     )\n     return portal_state.locale().getLocaleID()\n \n@@ -29,7 +28,7 @@ def render_cachekey(fun, self):\n \n     def add(brain):\n         path = brain.getPath()\n-        return "%s\\n%s\\n\\n" % (path, brain.modified)\n+        return f"{path}\\n{brain.modified}\\n\\n"\n \n     fingerprint = "".join(map(add, self._data()))\n \ndiff --git a/plone/app/portlets/checker.py b/plone/app/portlets/checker.py\nindex f167bea6..11b66051 100644\n--- a/plone/app/portlets/checker.py\n+++ b/plone/app/portlets/checker.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n@@ -11,7 +10,7 @@\n \n \n @implementer(IPortletPermissionChecker)\n-class DefaultPortletPermissionChecker(object):\n+class DefaultPortletPermissionChecker:\n     adapts(IPortletAssignmentMapping)\n \n     def __init__(self, context):\n@@ -28,7 +27,7 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n-class UserPortletPermissionChecker(object):\n+class UserPortletPermissionChecker:\n     adapts(IUserPortletAssignmentMapping)\n \n     def __init__(self, context):\n@@ -50,7 +49,7 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n-class GroupDashboardPortletPermissionChecker(object):\n+class GroupDashboardPortletPermissionChecker:\n     adapts(IGroupDashboardPortletAssignmentMapping)\n \n     def __init__(self, context):\ndiff --git a/plone/app/portlets/dashboard.py b/plone/app/portlets/dashboard.py\nindex c05618e1..84ab94c9 100644\n--- a/plone/app/portlets/dashboard.py\n+++ b/plone/app/portlets/dashboard.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets import portlets\n from plone.app.portlets.interfaces import IDefaultDashboard\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n@@ -43,7 +42,7 @@ def new_user(principal, event):\n \n \n @implementer(IDefaultDashboard)\n-class DefaultDashboard(object):\n+class DefaultDashboard:\n     """The default default dashboard."""\n \n     adapts(IPropertiedUser)\ndiff --git a/plone/app/portlets/exportimport/__init__.py b/plone/app/portlets/exportimport/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/portlets/exportimport/__init__.py\n+++ b/plone/app/portlets/exportimport/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/portlets/exportimport/interfaces.py b/plone/app/portlets/exportimport/interfaces.py\nindex 351072ce..a2389449 100644\n--- a/plone/app/portlets/exportimport/interfaces.py\n+++ b/plone/app/portlets/exportimport/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 1842f253..b9178480 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n In ``portlets.xml`` you can register various objects.\n \n@@ -135,7 +134,7 @@ def dummyGetId():\n if HAS_BLACKLIST:\n \n     @implementer(IComponentsHandlerBlacklist)\n-    class Blacklist(object):\n+    class Blacklist:\n         def getExcludedInterfaces(self):\n             return (\n                 _getDottedName(IPortletType),\n@@ -145,7 +144,7 @@ def getExcludedInterfaces(self):\n \n \n @implementer(IPortletAssignmentExportImportHandler)\n-class PropertyPortletAssignmentExportImportHandler(object):\n+class PropertyPortletAssignmentExportImportHandler:\n     """Import portlet assignment settings based on zope.schema properties"""\n \n     adapts(Interface)\n@@ -224,13 +223,13 @@ def export_field(self, doc, field):\n                     list_element.appendChild(doc.createTextNode(str(e)))\n                     child.appendChild(list_element)\n             else:\n-                child.appendChild(doc.createTextNode(six.text_type(value)))\n+                child.appendChild(doc.createTextNode(str(value)))\n \n         return child\n \n     def extract_text(self, node):\n         node.normalize()\n-        text = u""\n+        text = ""\n         for child in node.childNodes:\n             if (\n                 child.nodeType == node.TEXT_NODE\n@@ -597,9 +596,9 @@ def _extractPortlets(self):\n             if r.provided.isOrExtends(IPortletManager)\n         ]\n \n-        portletSchemata = dict(\n-            [(iface, name) for name, iface in getUtilitiesFor(IPortletTypeInterface)]\n-        )\n+        portletSchemata = {\n+            iface: name for name, iface in getUtilitiesFor(IPortletTypeInterface)\n+        }\n \n         # Export portlet manager registrations\n \n@@ -649,7 +648,7 @@ def extractMapping(manager_name, category, key, mapping):\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n             mapping = queryMultiAdapter((site, manager), IPortletAssignmentMapping)\n             mapping = mapping.__of__(site)\n-            extractMapping(manager_name, CONTEXT_CATEGORY, u"/", mapping)\n+            extractMapping(manager_name, CONTEXT_CATEGORY, "/", mapping)\n \n         # Export blacklistings in the portal root\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n@@ -667,15 +666,15 @@ def extractMapping(manager_name, category, key, mapping):\n                 child = self._doc.createElement("blacklist")\n                 child.setAttribute("manager", manager_name)\n                 child.setAttribute("category", category)\n-                child.setAttribute("location", u"/")\n+                child.setAttribute("location", "/")\n \n                 status = assignable.getBlacklistStatus(category)\n                 if status == True:\n-                    child.setAttribute("status", u"block")\n+                    child.setAttribute("status", "block")\n                 elif status == False:\n-                    child.setAttribute("status", u"show")\n+                    child.setAttribute("status", "show")\n                 else:\n-                    child.setAttribute("status", u"acquire")\n+                    child.setAttribute("status", "acquire")\n \n                 fragment.appendChild(child)\n \n@@ -793,7 +792,7 @@ def importPortlets(context):\n     # object, which in case of a component registry is crucial.\n     importer = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if importer:\n-        filename = "%s%s" % (importer.name, importer.suffix)\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -812,9 +811,9 @@ def exportPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    exporter = queryMultiAdapter((sm, context), IBody, name=u"plone.portlets")\n+    exporter = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if exporter:\n-        filename = "%s%s" % (exporter.name, exporter.suffix)\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\ndiff --git a/plone/app/portlets/interfaces.py b/plone/app/portlets/interfaces.py\nindex df36ec19..bde17c68 100644\n--- a/plone/app/portlets/interfaces.py\n+++ b/plone/app/portlets/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletManager\ndiff --git a/plone/app/portlets/manager.py b/plone/app/portlets/manager.py\nindex 9598bbd9..3d4d4d06 100644\n--- a/plone/app/portlets/manager.py\n+++ b/plone/app/portlets/manager.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_acquire\n from Acquisition import aq_inner\n from Acquisition import Explicit\n@@ -61,7 +60,7 @@ def base_url(self):\n                     self._context(),\n                     self.request,\n                 ),\n-                name=u"absolute_url",\n+                name="absolute_url",\n             )\n         )\n \ndiff --git a/plone/app/portlets/metaconfigure.py b/plone/app/portlets/metaconfigure.py\nindex 1b37a53d..2296c7cb 100644\n--- a/plone/app/portlets/metaconfigure.py\n+++ b/plone/app/portlets/metaconfigure.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.browser.interfaces import IPortletAdding\n from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.portlets.interfaces import IPortletManager\n@@ -27,7 +26,7 @@ def portletDirective(\n     assignment,\n     renderer,\n     addview,\n-    view_permission=u"zope2.View",\n+    view_permission="zope2.View",\n     edit_permission="plone.app.portlets.ManageOwnPortlets",\n     editview=None,\n ):\ndiff --git a/plone/app/portlets/metadirectives.py b/plone/app/portlets/metadirectives.py\nindex 2e07e44b..051bd9a2 100644\n--- a/plone/app/portlets/metadirectives.py\n+++ b/plone/app/portlets/metadirectives.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.portlets.interfaces import IPortletManager\n from zope import schema\n@@ -16,52 +15,52 @@ class IPortletDirective(Interface):\n     """\n \n     name = schema.TextLine(\n-        title=_(u"Name"),\n-        description=_(u"A unique name for the portlet. Also used for its add view."),\n+        title=_("Name"),\n+        description=_("A unique name for the portlet. Also used for its add view."),\n         required=True,\n     )\n \n     interface = configuration_fields.GlobalInterface(\n-        title=_(u"Assignment type interface"),\n-        description=_(u"Should correspond to the public interface of the assignment"),\n+        title=_("Assignment type interface"),\n+        description=_("Should correspond to the public interface of the assignment"),\n         required=True,\n     )\n \n     assignment = configuration_fields.GlobalObject(\n-        title=_(u"Assignment class"),\n-        description=_(u"A persistent class storing the portlet assignment"),\n+        title=_("Assignment class"),\n+        description=_("A persistent class storing the portlet assignment"),\n         required=True,\n     )\n \n     view_permission = schema.TextLine(\n-        title=_(u"View permission"),\n-        description=_(u"Permission used for viewing the portlet."),\n+        title=_("View permission"),\n+        description=_("Permission used for viewing the portlet."),\n         required=False,\n-        default=u"zope2.View",\n+        default="zope2.View",\n     )\n \n     edit_permission = schema.TextLine(\n-        title=_(u"Edit permission"),\n-        description=_(u"Permission used for editing the portlet assignment."),\n+        title=_("Edit permission"),\n+        description=_("Permission used for editing the portlet assignment."),\n         required=False,\n-        default=u"plone.app.portlets.ManageOwnPortlets",\n+        default="plone.app.portlets.ManageOwnPortlets",\n     )\n \n     renderer = configuration_fields.GlobalObject(\n-        title=_(u"Renderer"),\n-        description=_(u"A class which renders the portlet data provider"),\n+        title=_("Renderer"),\n+        description=_("A class which renders the portlet data provider"),\n         required=True,\n     )\n \n     addview = configuration_fields.GlobalObject(\n-        title=_(u"Add view"),\n-        description=_(u"View used to add the assignment object"),\n+        title=_("Add view"),\n+        description=_("View used to add the assignment object"),\n         required=True,\n     )\n \n     editview = configuration_fields.GlobalObject(\n-        title=_(u"Edit view"),\n-        description=_(u"View used to edit the assignment object (if appropriate)"),\n+        title=_("Edit view"),\n+        description=_("View used to edit the assignment object (if appropriate)"),\n         required=False,\n     )\n \n@@ -86,9 +85,9 @@ class IPortletRendererDirective(Interface):\n     )\n \n     template = configuration_fields.Path(\n-        title=_(u"The name of a template that implements the renderer."),\n+        title=_("The name of a template that implements the renderer."),\n         description=_(\n-            u"If given, the default renderer for this portlet will be used, but with this template"\n+            "If given, the default renderer for this portlet will be used, but with this template"\n         ),\n         required=False,\n     )\ndiff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex f61cd8c9..fffd361d 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -16,7 +15,7 @@\n \n \n @implementer(IPortletContext)\n-class ContentContext(object):\n+class ContentContext:\n     """A portlet context for regular content items.\n \n     Note - we register this for Interface so that it can also work for\n@@ -87,7 +86,7 @@ def _getGroupIds(self):\n         # ambiguity - the Plone member-data version returns ids.\n \n         for group in groups:\n-            if not isinstance(group, (six.text_type, six.binary_type)):\n+            if not isinstance(group, (str, bytes)):\n                 return ()\n \n         return sorted(groups)\ndiff --git a/plone/app/portlets/portlets/__init__.py b/plone/app/portlets/portlets/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/portlets/portlets/__init__.py\n+++ b/plone/app/portlets/portlets/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/portlets/portlets/actions.py b/plone/app/portlets/portlets/actions.py\nindex 99a36053..afb24374 100644\n--- a/plone/app/portlets/portlets/actions.py\n+++ b/plone/app/portlets/portlets/actions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n@@ -16,41 +15,41 @@ class IActionsPortlet(IPortletDataProvider):\n     """A portlet that shows an action category"""\n \n     ptitle = schema.TextLine(\n-        title=_(u"label_title", default=u"Title"),\n-        description=_(u"help_title", default=u"Displayed title of this portlet"),\n-        default=u"",\n+        title=_("label_title", default="Title"),\n+        description=_("help_title", default="Displayed title of this portlet"),\n+        default="",\n         required=False,\n     )\n \n     show_title = schema.Bool(\n-        title=_(u"label_show_title", default=u"Show title"),\n-        description=_(u"help_show_title", default=u"Show title of this portlet."),\n+        title=_("label_show_title", default="Show title"),\n+        description=_("help_show_title", default="Show title of this portlet."),\n         required=True,\n         default=True,\n     )\n \n     category = schema.Choice(\n-        title=_(u"label_actions_category", default=u"Actions category"),\n-        description=_(u"help_actions_category", default=u"Select an action category"),\n+        title=_("label_actions_category", default="Actions category"),\n+        description=_("help_actions_category", default="Select an action category"),\n         required=True,\n         vocabulary="plone.app.vocabularies.Actions",\n     )\n \n     show_icons = schema.Bool(\n-        title=_(u"label_show_icons", default=u"Show icons"),\n+        title=_("label_show_icons", default="Show icons"),\n         description=_(\n-            u"help_show_icons",\n-            default=u"Show icons or default icon for actions without icon.",\n+            "help_show_icons",\n+            default="Show icons or default icon for actions without icon.",\n         ),\n         required=True,\n         default=True,\n     )\n \n     default_icon = schema.ASCIILine(\n-        title=_(u"label_default_icon", default=u"Default icon"),\n+        title=_("label_default_icon", default="Default icon"),\n         description=_(\n-            u"help_default_icon",\n-            default=u"What icon we should use for actions with no specific icons. A 16*16 pixels image.",\n+            "help_default_icon",\n+            default="What icon we should use for actions with no specific icons. A 16*16 pixels image.",\n         ),\n         required=False,\n         default="action_icon.png",\n@@ -64,17 +63,17 @@ class Assignment(base.Assignment):\n     with columns.\n     """\n \n-    ptitle = u""\n+    ptitle = ""\n     show_title = True\n-    category = u""\n+    category = ""\n     show_icons = True\n     default_icon = "action_icon.png"\n \n     def __init__(\n         self,\n-        ptitle=u"",\n+        ptitle="",\n         show_title=True,\n-        category=u"",\n+        category="",\n         show_icons=True,\n         default_icon="action_icon.png",\n     ):\n@@ -90,7 +89,7 @@ def title(self):\n         """This property is used to give the title of the portlet in the\n         "manage portlets" screen.\n         """\n-        return _(u"Actions portlet") + \' "%s"\' % (self.ptitle or self.category)\n+        return _("Actions portlet") + \' "%s"\' % (self.ptitle or self.category)\n \n \n class Renderer(base.Renderer):\n@@ -126,7 +125,7 @@ def category(self):\n     @pm_view.memoize\n     def cachedLinks(self, actions_category, default_icon, show_icons):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request), name=u"plone_context_state"\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n         )\n         actions = context_state.actions(actions_category)\n \n@@ -154,7 +153,7 @@ def render_icon(category, action_id, default):\n         else:\n             if actions_category == "object_buttons":\n                 actions_tool = getMultiAdapter(\n-                    (aq_inner(self.context), self.request), name=u"plone_tools"\n+                    (aq_inner(self.context), self.request), name="plone_tools"\n                 ).actions()\n                 actions = actions_tool.listActionInfos(\n                     object=aq_inner(self.context), categories=(actions_category,)\n@@ -186,10 +185,10 @@ class AddForm(base.AddForm):\n     """\n \n     schema = IActionsPortlet\n-    label = _(u"heading_add_actions_portlet", default=u"Add actions portlet")\n+    label = _("heading_add_actions_portlet", default="Add actions portlet")\n     description = _(\n-        u"help_add_actions_portlet",\n-        default=u"An action portlet displays actions from a category",\n+        "help_add_actions_portlet",\n+        default="An action portlet displays actions from a category",\n     )\n \n     def create(self, data):\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex b13edf97..05840a15 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n \n # Convenience imports\n@@ -42,7 +41,7 @@ def data(self):\n \n \n @implementer(IPortletRenderer)\n-class Renderer(object):\n+class Renderer:\n     """Base class for portlet renderers.\n \n     You must override render() to return a string to render. One way of\ndiff --git a/plone/app/portlets/portlets/calendar.py b/plone/app/portlets/portlets/calendar.py\nindex f8430c93..2d0e487f 100644\n--- a/plone/app/portlets/portlets/calendar.py\n+++ b/plone/app/portlets/portlets/calendar.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # avoid broken persistent object\n from plone.app.event.portlets.portlet_calendar import Assignment\ndiff --git a/plone/app/portlets/portlets/classic.py b/plone/app/portlets/portlets/classic.py\nindex d5102bc3..132e12ff 100644\n--- a/plone/app/portlets/portlets/classic.py\n+++ b/plone/app/portlets/portlets/classic.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n from plone.portlets.interfaces import IPortletDataProvider\n@@ -11,15 +10,15 @@ class IClassicPortlet(IPortletDataProvider):\n     """A portlet which can render a classic Plone portlet macro"""\n \n     template = schema.ASCIILine(\n-        title=_(u"Template"),\n-        description=_(u"The template containing the portlet."),\n+        title=_("Template"),\n+        description=_("The template containing the portlet."),\n         required=True,\n     )\n \n     macro = schema.ASCIILine(\n-        title=_(u"Macro"),\n+        title=_("Macro"),\n         description=_(\n-            u"The macro containing the portlet. " u"Leave blank if there is no macro."\n+            "The macro containing the portlet. " "Leave blank if there is no macro."\n         ),\n         default="portlet",\n         required=False,\n@@ -57,9 +56,9 @@ def path_expression(self):\n \n class AddForm(base.AddForm):\n     schema = IClassicPortlet\n-    label = _(u"Add Classic Portlet")\n+    label = _("Add Classic Portlet")\n     description = _(\n-        u"A classic portlet allows you to use legacy portlet " u"templates."\n+        "A classic portlet allows you to use legacy portlet " "templates."\n     )\n \n     def create(self, data):\n@@ -70,7 +69,7 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = IClassicPortlet\n-    label = _(u"Edit Classic Portlet")\n+    label = _("Edit Classic Portlet")\n     description = _(\n-        u"A classic portlet allows you to use legacy portlet " u"templates."\n+        "A classic portlet allows you to use legacy portlet " "templates."\n     )\ndiff --git a/plone/app/portlets/portlets/events.py b/plone/app/portlets/portlets/events.py\nindex 5e29c51a..f8eb93c6 100644\n--- a/plone/app/portlets/portlets/events.py\n+++ b/plone/app/portlets/portlets/events.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # avoid broken persistent object\n from plone.app.event.portlets.portlet_events import Assignment\ndiff --git a/plone/app/portlets/portlets/language.py b/plone/app/portlets/portlets/language.py\nindex 33b89cd8..368a3c03 100644\n--- a/plone/app/portlets/portlets/language.py\n+++ b/plone/app/portlets/portlets/language.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n@@ -15,7 +14,7 @@ class ILanguagePortlet(IPortletDataProvider):\n @implementer(ILanguagePortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u"label_languages", default=u"Languages")\n+    title = _("label_languages", default="Languages")\n \n \n class Renderer(base.Renderer):\ndiff --git a/plone/app/portlets/portlets/login.py b/plone/app/portlets/portlets/login.py\nindex fc4a96bc..9314e23a 100644\n--- a/plone/app/portlets/portlets/login.py\n+++ b/plone/app/portlets/portlets/login.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n from plone.memoize.instance import memoize\n@@ -16,7 +15,7 @@ class ILoginPortlet(IPortletDataProvider):\n @implementer(ILoginPortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u"label_log_in", default=u"Log in")\n+    title = _("label_log_in", default="Log in")\n \n \n class Renderer(base.Renderer):\ndiff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py\nindex 5e5ff34c..f44af093 100644\n--- a/plone/app/portlets/portlets/navigation.py\n+++ b/plone/app/portlets/portlets/navigation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -44,19 +43,19 @@ class INavigationPortlet(IPortletDataProvider):\n     """A portlet which can render the navigation tree"""\n \n     name = schema.TextLine(\n-        title=_(u"label_navigation_title", default=u"Title"),\n+        title=_("label_navigation_title", default="Title"),\n         description=_(\n-            u"help_navigation_title", default=u"The title of the navigation tree."\n+            "help_navigation_title", default="The title of the navigation tree."\n         ),\n-        default=u"",\n+        default="",\n         required=False,\n     )\n \n     root_uid = schema.Choice(\n-        title=_(u"label_navigation_root_path", default=u"Root node"),\n+        title=_("label_navigation_root_path", default="Root node"),\n         description=_(\n-            u"help_navigation_root",\n-            default=u"You may search for and choose a folder "\n+            "help_navigation_root",\n+            default="You may search for and choose a folder "\n             "to act as the root of the navigation tree. "\n             "Leave blank to use the Plone site root.",\n         ),\n@@ -65,10 +64,10 @@ class INavigationPortlet(IPortletDataProvider):\n     )\n \n     includeTop = schema.Bool(\n-        title=_(u"label_include_top_node", default=u"Include top node"),\n+        title=_("label_include_top_node", default="Include top node"),\n         description=_(\n-            u"help_include_top_node",\n-            default=u"Whether or not to show the top, or \'root\', "\n+            "help_include_top_node",\n+            default="Whether or not to show the top, or \'root\', "\n             "node in the navigation tree. This is affected "\n             "by the \'Start level\' setting.",\n         ),\n@@ -78,12 +77,12 @@ class INavigationPortlet(IPortletDataProvider):\n \n     currentFolderOnly = schema.Bool(\n         title=_(\n-            u"label_current_folder_only",\n-            default=u"Only show the contents of the current folder.",\n+            "label_current_folder_only",\n+            default="Only show the contents of the current folder.",\n         ),\n         description=_(\n-            u"help_current_folder_only",\n-            default=u"If selected, the navigation tree will "\n+            "help_current_folder_only",\n+            default="If selected, the navigation tree will "\n             "only show the current folder and its "\n             "children at all times.",\n         ),\n@@ -92,10 +91,10 @@ class INavigationPortlet(IPortletDataProvider):\n     )\n \n     topLevel = schema.Int(\n-        title=_(u"label_navigation_startlevel", default=u"Start level"),\n+        title=_("label_navigation_startlevel", default="Start level"),\n         description=_(\n-            u"help_navigation_start_level",\n-            default=u"An integer value that specifies the number of folder "\n+            "help_navigation_start_level",\n+            default="An integer value that specifies the number of folder "\n             "levels below the site root that must be exceeded "\n             "before the navigation tree will display. 0 means "\n             "that the navigation tree should be displayed "\n@@ -109,10 +108,10 @@ class INavigationPortlet(IPortletDataProvider):\n     )\n \n     bottomLevel = schema.Int(\n-        title=_(u"label_navigation_tree_depth", default=u"Navigation tree depth"),\n+        title=_("label_navigation_tree_depth", default="Navigation tree depth"),\n         description=_(\n-            u"help_navigation_tree_depth",\n-            default=u"How many folders should be included "\n+            "help_navigation_tree_depth",\n+            default="How many folders should be included "\n             "before the navigation tree stops. 0 "\n             "means no limit. 1 only includes the "\n             "root folder.",\n@@ -122,27 +121,27 @@ class INavigationPortlet(IPortletDataProvider):\n     )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(u"If enabled, the portlet will not show document type icons."),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n         required=False,\n         default=False,\n     )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=False,\n         default=False,\n     )\n@@ -191,7 +190,7 @@ def title(self):\n         """\n         if self.name:\n             return self.name\n-        return _(u"Navigation")\n+        return _("Navigation")\n \n     def _root(self):\n         # This is only called if the instance doesn\'t have a root_uid\n@@ -395,8 +394,8 @@ def render(self):\n \n class AddForm(base.AddForm):\n     schema = INavigationPortlet\n-    label = _(u"Add Navigation Portlet")\n-    description = _(u"This portlet displays a navigation tree.")\n+    label = _("Add Navigation Portlet")\n+    description = _("This portlet displays a navigation tree.")\n \n     def create(self, data):\n         return Assignment(\n@@ -411,12 +410,12 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = INavigationPortlet\n-    label = _(u"Edit Navigation Portlet")\n-    description = _(u"This portlet displays a navigation tree.")\n+    label = _("Edit Navigation Portlet")\n+    description = _("This portlet displays a navigation tree.")\n \n \n @implementer(INavigationQueryBuilder)\n-class QueryBuilder(object):\n+class QueryBuilder:\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\ndiff --git a/plone/app/portlets/portlets/news.py b/plone/app/portlets/portlets/news.py\nindex 7654ddfe..ec3aabd2 100644\n--- a/plone/app/portlets/portlets/news.py\n+++ b/plone/app/portlets/portlets/news.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.app.portlets import PloneMessageFactory as _\n@@ -23,8 +22,8 @@\n class INewsPortlet(IPortletDataProvider):\n \n     count = schema.Int(\n-        title=_(u"Number of items to display"),\n-        description=_(u"How many items to list."),\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n         required=True,\n         default=5,\n         min=1,\n@@ -32,28 +31,28 @@ class INewsPortlet(IPortletDataProvider):\n \n     widget(state=SelectFieldWidget)\n     state = schema.Tuple(\n-        title=_(u"Workflow state"),\n-        description=_(u"Items in which workflow state to show."),\n+        title=_("Workflow state"),\n+        description=_("Items in which workflow state to show."),\n         default=("published",),\n         required=False,\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n     )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(u"If enabled, the portlet will not show thumbs"),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs"),\n         required=False,\n         default=False,\n     )\n@@ -75,7 +74,7 @@ def __init__(\n \n     @property\n     def title(self):\n-        return _(u"News")\n+        return _("News")\n \n \n class Renderer(base.Renderer):\n@@ -146,8 +145,8 @@ def thumb_scale(self):\n \n class AddForm(base.AddForm):\n     schema = INewsPortlet\n-    label = _(u"Add News Portlet")\n-    description = _(u"This portlet displays recent News Items.")\n+    label = _("Add News Portlet")\n+    description = _("This portlet displays recent News Items.")\n \n     def create(self, data):\n         return Assignment(\n@@ -158,5 +157,5 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = INewsPortlet\n-    label = _(u"Edit News Portlet")\n-    description = _(u"This portlet displays recent News Items.")\n+    label = _("Edit News Portlet")\n+    description = _("This portlet displays recent News Items.")\ndiff --git a/plone/app/portlets/portlets/recent.py b/plone/app/portlets/portlets/recent.py\nindex ba50c321..e0178218 100644\n--- a/plone/app/portlets/portlets/recent.py\n+++ b/plone/app/portlets/portlets/recent.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.portlets import PloneMessageFactory as _\n@@ -24,35 +23,35 @@\n class IRecentPortlet(IPortletDataProvider):\n \n     count = schema.Int(\n-        title=_(u"Number of items to display"),\n-        description=_(u"How many items to list."),\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n         required=True,\n         default=5,\n         min=1,\n     )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(u"If enabled, the portlet will not show document type icons"),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons"),\n         required=False,\n         default=False,\n     )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=False,\n         default=False,\n     )\n@@ -71,7 +70,7 @@ def __init__(self, count=5, no_icons=False, thumb_scale=None, no_thumbs=False):\n \n     @property\n     def title(self):\n-        return _(u"Recent items")\n+        return _("Recent items")\n \n \n def _render_cachekey(fun, self):\n@@ -83,7 +82,7 @@ def _render_cachekey(fun, self):\n class Renderer(base.Renderer):\n     _template = ViewPageTemplateFile("recent.pt")\n \n-    title = _("box_recent_changes", default=u"Recent Changes")\n+    title = _("box_recent_changes", default="Recent Changes")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -156,8 +155,8 @@ def getMimeTypeIcon(self, obj):\n \n class AddForm(base.AddForm):\n     schema = IRecentPortlet\n-    label = _(u"Add Recent Portlet")\n-    description = _(u"This portlet displays recently modified content.")\n+    label = _("Add Recent Portlet")\n+    description = _("This portlet displays recently modified content.")\n \n     def create(self, data):\n         return Assignment(count=data.get("count", 5))\n@@ -165,5 +164,5 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = IRecentPortlet\n-    label = _(u"Edit Recent Portlet")\n-    description = _(u"This portlet displays recently modified content.")\n+    label = _("Edit Recent Portlet")\n+    description = _("This portlet displays recently modified content.")\ndiff --git a/plone/app/portlets/portlets/review.py b/plone/app/portlets/portlets/review.py\nindex 78e3bf4d..e59d8360 100644\n--- a/plone/app/portlets/portlets/review.py\n+++ b/plone/app/portlets/portlets/review.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.browser import formhelper\n@@ -21,27 +20,27 @@\n class IReviewPortlet(IPortletDataProvider):\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(u"If enabled, the portlet will not show document type icons"),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons"),\n         required=False,\n         default=False,\n     )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=False,\n         default=False,\n     )\n@@ -60,14 +59,14 @@ def __init__(self, no_icons=False, thumb_scale=None, no_thumbs=False):\n \n     @property\n     def title(self):\n-        return _(u"Review list")\n+        return _("Review list")\n \n \n class Renderer(base.Renderer):\n \n     render = ViewPageTemplateFile("review.pt")\n \n-    title = _("box_review_list", default=u"Review List")\n+    title = _("box_review_list", default="Review List")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -157,8 +156,8 @@ def thumb_scale(self):\n \n class AddForm(formhelper.AddForm):\n     schema = IReviewPortlet\n-    label = _(u"Add Review Portlet")\n-    description = _(u"This portlet displays a queue of documents awaiting " u"review.")\n+    label = _("Add Review Portlet")\n+    description = _("This portlet displays a queue of documents awaiting " "review.")\n \n     def create(self, data):\n         return Assignment(**data)\n@@ -166,5 +165,5 @@ def create(self, data):\n \n class EditForm(formhelper.EditForm):\n     schema = IReviewPortlet\n-    label = _(u"Edit Review Portlet")\n-    description = _(u"displays a queue of documents awaiting " u"review.")\n+    label = _("Edit Review Portlet")\n+    description = _("displays a queue of documents awaiting " "review.")\ndiff --git a/plone/app/portlets/portlets/rss.py b/plone/app/portlets/portlets/rss.py\nindex c2e3ae43..c51d9af0 100644\n--- a/plone/app/portlets/portlets/rss.py\n+++ b/plone/app/portlets/portlets/rss.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from logging import getLogger\n@@ -68,7 +67,7 @@ def ok():\n \n \n @implementer(IFeed)\n-class RSSFeed(object):\n+class RSSFeed:\n     """an RSS feed"""\n \n     def __init__(self, url, timeout):\n@@ -238,32 +237,32 @@ def siteurl(self):\n class IRSSPortlet(IPortletDataProvider):\n \n     portlet_title = schema.TextLine(\n-        title=_(u"Title"),\n+        title=_("Title"),\n         description=_(\n-            u"Title of the portlet.  If omitted, the title of the "\n-            u"feed will be used."\n+            "Title of the portlet.  If omitted, the title of the "\n+            "feed will be used."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     count = schema.Int(\n-        title=_(u"Number of items to display"),\n-        description=_(u"How many items to list."),\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n         required=True,\n         default=5,\n     )\n \n     url = schema.TextLine(\n-        title=_(u"URL of RSS feed"),\n-        description=_(u"Link of the RSS feed to display."),\n+        title=_("URL of RSS feed"),\n+        description=_("Link of the RSS feed to display."),\n         required=True,\n-        default=u"",\n+        default="",\n     )\n \n     timeout = schema.Int(\n-        title=_(u"Feed reload timeout"),\n-        description=_(u"Time in minutes after which the feed should be " u"reloaded."),\n+        title=_("Feed reload timeout"),\n+        description=_("Time in minutes after which the feed should be " "reloaded."),\n         required=True,\n         default=100,\n     )\n@@ -272,18 +271,18 @@ class IRSSPortlet(IPortletDataProvider):\n @implementer(IRSSPortlet)\n class Assignment(base.Assignment):\n \n-    portlet_title = u""\n+    portlet_title = ""\n \n     @property\n     def title(self):\n         """return the title with RSS feed title or from URL"""\n         feed = FEED_DATA.get(self.data.url, None)\n         if feed is None:\n-            return u"RSS: " + self.url[:20]\n+            return "RSS: " + self.url[:20]\n         else:\n-            return u"RSS: " + feed.title[:20]\n+            return "RSS: " + feed.title[:20]\n \n-    def __init__(self, portlet_title=u"", count=5, url=u"", timeout=100):\n+    def __init__(self, portlet_title="", count=5, url="", timeout=100):\n         self.portlet_title = portlet_title\n         self.count = count\n         self.url = url\n@@ -358,12 +357,12 @@ def enabled(self):\n \n class AddForm(base.AddForm):\n     schema = IRSSPortlet\n-    label = _(u"Add RSS Portlet")\n-    description = _(u"This portlet displays an RSS feed.")\n+    label = _("Add RSS Portlet")\n+    description = _("This portlet displays an RSS feed.")\n \n     def create(self, data):\n         return Assignment(\n-            portlet_title=data.get("portlet_title", u""),\n+            portlet_title=data.get("portlet_title", ""),\n             count=data.get("count", 5),\n             url=data.get("url", ""),\n             timeout=data.get("timeout", 100),\n@@ -372,5 +371,5 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = IRSSPortlet\n-    label = _(u"Edit RSS Portlet")\n-    description = _(u"This portlet displays an RSS feed.")\n+    label = _("Edit RSS Portlet")\n+    description = _("This portlet displays an RSS feed.")\ndiff --git a/plone/app/portlets/portlets/search.py b/plone/app/portlets/portlets/search.py\nindex 7c814dca..f4813280 100644\n--- a/plone/app/portlets/portlets/search.py\n+++ b/plone/app/portlets/portlets/search.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n@@ -13,11 +12,11 @@ class ISearchPortlet(IPortletDataProvider):\n     """A portlet displaying a (live) search box"""\n \n     enableLivesearch = schema.Bool(\n-        title=_(u"Enable LiveSearch"),\n+        title=_("Enable LiveSearch"),\n         description=_(\n-            u"Enables the LiveSearch feature, which shows "\n-            u"live results if the browser supports "\n-            u"JavaScript."\n+            "Enables the LiveSearch feature, which shows "\n+            "live results if the browser supports "\n+            "JavaScript."\n         ),\n         default=True,\n         required=False,\n@@ -31,7 +30,7 @@ def __init__(self, enableLivesearch=True):\n \n     @property\n     def title(self):\n-        return _(u"Search")\n+        return _("Search")\n \n \n class Renderer(base.Renderer):\n@@ -50,7 +49,7 @@ def enable_livesearch(self):\n         return self.data.enableLivesearch\n \n     def search_action(self):\n-        return "{0}/{1}".format(self.navigation_root_url, self.action)\n+        return f"{self.navigation_root_url}/{self.action}"\n \n     def navigation_root_url(self):\n         return getNavigationRoot(self.context)\n@@ -58,8 +57,8 @@ def navigation_root_url(self):\n \n class AddForm(base.AddForm):\n     schema = ISearchPortlet\n-    label = _(u"Add Search Portlet")\n-    description = _(u"This portlet shows a search box.")\n+    label = _("Add Search Portlet")\n+    description = _("This portlet shows a search box.")\n \n     def create(self, data):\n         return Assignment()\n@@ -67,5 +66,5 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = ISearchPortlet\n-    label = _(u"Edit Search Portlet")\n-    description = _(u"This portlet shows a search box.")\n+    label = _("Edit Search Portlet")\n+    description = _("This portlet shows a search box.")\ndiff --git a/plone/app/portlets/storage.py b/plone/app/portlets/storage.py\nindex fff0899c..ebe94477 100644\n--- a/plone/app/portlets/storage.py\n+++ b/plone/app/portlets/storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from BTrees.OOBTree import OOBTree\n from OFS.SimpleItem import SimpleItem\n@@ -33,8 +32,8 @@\n class PortletAssignmentMapping(BaseMapping, SimpleItem):\n     """A Zope 2 version of the default assignment mapping storage."""\n \n-    def __init__(self, manager=u"", category=u"", name=u"", context=None):\n-        super(PortletAssignmentMapping, self).__init__(manager, category, name)\n+    def __init__(self, manager="", category="", name="", context=None):\n+        super().__init__(manager, category, name)\n         # Keep track of context so we can avoid storing anything\n         # until an assignment is actually added.\n         self._v_context = context\n@@ -49,9 +48,9 @@ def id(self):\n         suffix = manager\n \n         if category != constants.CONTEXT_CATEGORY and key:\n-            suffix = "%s+%s" % (manager, key)\n+            suffix = f"{manager}+{key}"\n \n-        return "++%s++%s" % (prefix, suffix)\n+        return f"++{prefix}++{suffix}"\n \n     def __getitem__(self, key):\n         return BaseMapping.__getitem__(self, key).__of__(self)\n@@ -85,7 +84,7 @@ def id(self):\n         manager = self.__manager__\n         key = self.__name__\n \n-        return "++groupdashboard++%s+%s" % (manager, key)\n+        return f"++groupdashboard++{manager}+{key}"\n \n \n @implementer(IBrowserPublisher)\ndiff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex d8ab6951..f37875e6 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -38,10 +37,10 @@ def setUpPloneSite(self, portal):\n         # Prepare test content\n         pw = getToolByName(portal, "portal_workflow")\n         pw.setDefaultChain("simple_publication_workflow")\n-        portal.invokeFactory("Folder", id="folder", title=u"Test Folder")\n-        portal.invokeFactory("Folder", id="news", title=u"News")\n-        portal.invokeFactory("Folder", id="users", title=u"Users")\n-        portal.invokeFactory("Folder", id="events", title=u"Events")\n+        portal.invokeFactory("Folder", id="folder", title="Test Folder")\n+        portal.invokeFactory("Folder", id="news", title="News")\n+        portal.invokeFactory("Folder", id="users", title="Users")\n+        portal.invokeFactory("Folder", id="events", title="Events")\n         pw.doActionFor(portal.news, "publish")\n \n \ndiff --git a/plone/app/portlets/tests/__init__.py b/plone/app/portlets/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/portlets/tests/__init__.py\n+++ b/plone/app/portlets/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex e9604788..f2a77356 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base class for integration tests."""\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n \ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex b3d0a05b..156e456e 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.testing import OPTIONFLAGS\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.testing import layered\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex beee4171..c1ac19b0 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import actions\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n@@ -27,7 +26,7 @@ def test_portlet_type_registered(self):\n \n     def test_interfaces(self):\n         portlet = actions.Assignment(\n-            ptitle=u"actions", category=u"document", show_icons=True\n+            ptitle="actions", category="document", show_icons=True\n         )\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n@@ -40,7 +39,7 @@ def test_invoke_add_view(self):\n             del mapping[m]\n         addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n-        data = {"ptitle": u"Actions", "category": u"document", "show_icons": True}\n+        data = {"ptitle": "Actions", "category": "document", "show_icons": True}\n         addview.createAndAdd(data=data)\n \n         self.assertEquals(len(mapping), 1)\n@@ -52,7 +51,7 @@ def test_invoke_edit_view(self):\n         request = self.folder.REQUEST\n \n         mapping["foo"] = actions.Assignment(\n-            ptitle=u"actions", category=u"document", show_icons=True\n+            ptitle="actions", category="document", show_icons=True\n         )\n         editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, actions.EditForm))\n@@ -67,7 +66,7 @@ def test_obtain_renderer(self):\n         )\n \n         assignment = actions.Assignment(\n-            ptitle=u"actions", category=u"document", show_icons=True\n+            ptitle="actions", category="document", show_icons=True\n         )\n \n         renderer = getMultiAdapter(\n@@ -92,7 +91,7 @@ def renderer(\n         )\n \n         assignment = assignment or actions.Assignment(\n-            ptitle=u"actions", category=u"site_actions", show_icons=True\n+            ptitle="actions", category="site_actions", show_icons=True\n         )\n         return getMultiAdapter(\n             (context, request, view, manager, assignment), IPortletRenderer\n@@ -104,7 +103,7 @@ def test_render(self):\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u"actions", category=u"site_actions", show_icons=True\n+                ptitle="actions", category="site_actions", show_icons=True\n             ),\n         )\n         r.update()\n@@ -117,14 +116,14 @@ def test_render(self):\n \n         first = output[0]\n         self.assertEqual(first["url"], "http://nohost/plone/sitemap")\n-        self.assertEqual(first["title"], u"Site Map")\n+        self.assertEqual(first["title"], "Site Map")\n \n     def test_render_woicon(self):\n         """Without icons"""\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u"actions", category=u"site_actions", show_icons=False\n+                ptitle="actions", category="site_actions", show_icons=False\n             ),\n         )\n         r.update()\n@@ -147,14 +146,14 @@ def test_multiple_portlets(self):\n         # thus for the same REQUEST, plone memoize uses REQUEST to cache data\n         r1 = self.renderer(\n             assignment=actions.Assignment(\n-                ptitle=u"tabs", category=u"portal_tabs", show_icons=True\n+                ptitle="tabs", category="portal_tabs", show_icons=True\n             )\n         )\n         r1.update()\n         links1 = r1.actionLinks()\n         r2 = self.renderer(\n             assignment=actions.Assignment(\n-                ptitle=u"site actions", category=u"site_actions", show_icons=False\n+                ptitle="site actions", category="site_actions", show_icons=False\n             )\n         )\n         r2.update()\n@@ -162,7 +161,7 @@ def test_multiple_portlets(self):\n \n         # check the portal_tabs links (portal_tabs is somehow special)\n         self.assertEquals(len(links1), 5)\n-        self.assertEquals(links1[0]["title"], u"Home")\n+        self.assertEquals(links1[0]["title"], "Home")\n \n         # now check the site_actions links\n         # this was failing until the caching of actionLinks method was fixed\n@@ -170,7 +169,7 @@ def test_multiple_portlets(self):\n             self.assertEquals(len(links2), 3)\n         else:\n             self.assertEquals(len(links2), 4)\n-        self.assertEquals(links2[0]["title"], u"Site Map")\n+        self.assertEquals(links2[0]["title"], "Site Map")\n         self.assertEquals(links2[0]["url"], "http://nohost/plone/sitemap")\n         self.assertEquals(links2[0]["icon"], None)\n         return\n@@ -182,15 +181,15 @@ def test_portal_tabs(self):\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u"actions", category=u"portal_tabs", show_icons=True\n+                ptitle="actions", category="portal_tabs", show_icons=True\n             ),\n         )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u"Test Folder", u"Home", u"Users", u"News", u"Events"])\n-        got = set([six.text_type(link["title"]) for link in output])\n+        expected = {"Test Folder", "Home", "Users", "News", "Events"}\n+        got = {str(link["title"]) for link in output}\n         self.assertEqual(got, expected)\n \n     def test_object_buttons(self):\n@@ -198,29 +197,29 @@ def test_object_buttons(self):\n         r = self.renderer(\n             context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u"actions", category=u"object_buttons", show_icons=False\n+                ptitle="actions", category="object_buttons", show_icons=False\n             ),\n         )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u"Cut", u"Copy", u"Rename", u"Delete"])\n-        got = set([six.text_type(link["title"]) for link in output])\n+        expected = {"Cut", "Copy", "Rename", "Delete"}\n+        got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\n \n     def test_category(self):\n         r = self.renderer(\n             context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u"actions", category=u"object_buttons", show_icons=False\n+                ptitle="actions", category="object_buttons", show_icons=False\n             ),\n         )\n         r.update()\n         self.assertEqual(r.category, "object_buttons")\n \n     def test_category_normalize(self):\n-        class DummyData(object):\n+        class DummyData:\n             category = "Complex Category"\n \n         r = actions.Renderer(None, None, None, None, DummyData())\n@@ -231,7 +230,7 @@ def test_object_buttons_with_icons(self):\n         r = self.renderer(\n             context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u"actions", category=u"object_buttons", show_icons=True\n+                ptitle="actions", category="object_buttons", show_icons=True\n             ),\n         )\n         r.update()\n@@ -239,6 +238,6 @@ def test_object_buttons_with_icons(self):\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u"Cut", u"Copy", u"Rename", u"Delete"])\n-        got = set([six.text_type(link["title"]) for link in output])\n+        expected = {"Cut", "Copy", "Rename", "Delete"}\n+        got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex b86c6d5e..f3ca0184 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n \n \n-class MockBrain(object):\n+class MockBrain:\n     def __init__(self, path="some/path", modified="2002-01-01"):\n         self.path = path\n         self.modified = modified\n@@ -13,12 +12,12 @@ def getPath(self):\n         return self.path\n \n \n-class MockLocation(object):\n+class MockLocation:\n     def __init__(self, name):\n         self.__name__ = name\n \n \n-class MockRenderer(object):\n+class MockRenderer:\n     manager = MockLocation("some_manager")\n     data = MockLocation("some_assignment")\n     data_brains = [MockBrain(), MockBrain()]\ndiff --git a/plone/app/portlets/tests/test_classic_portlet.py b/plone/app/portlets/tests/test_classic_portlet.py\nindex 6c15ff5a..cbe01e5a 100644\n--- a/plone/app/portlets/tests/test_classic_portlet.py\n+++ b/plone/app/portlets/tests/test_classic_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex 06b60e16..a064e73b 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.portlets.browser.adding import PortletAdding\n from plone.app.portlets.exportimport.portlets import importPortlets\n from plone.app.portlets.interfaces import IColumn\n@@ -55,10 +53,10 @@ class DummyView(BrowserView):\n \n \n class ITestPortlet(IPortletDataProvider):\n-    test_text = schema.TextLine(title=u"Test")\n-    test_bool = schema.Bool(title=u"Test")\n+    test_text = schema.TextLine(title="Test")\n+    test_bool = schema.Bool(title="Test")\n     test_tuple = schema.Tuple(\n-        title=u"Test",\n+        title="Test",\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n     )\n \n@@ -80,17 +78,17 @@ def render(self):\n \n class TestAddForm(base.AddForm):\n     schema = ITestPortlet\n-    label = u"Test portlet"\n+    label = "Test portlet"\n \n     def create(self, data):\n         a = TestAssignment()\n-        a.title = data.get("title", u"")\n+        a.title = data.get("title", "")\n         return a\n \n \n class TestEditForm(base.EditForm):\n     schema = ITestPortlet\n-    label = u"Test portlet"\n+    label = "Test portlet"\n \n \n # A test portlet manager\n@@ -102,11 +100,11 @@ class ITestColumn(IColumn):\n \n class TestZCML(PortletsTestCase):\n     def testPortletTypeInterfaceRegistered(self):\n-        iface = getUtility(IPortletTypeInterface, name=u"portlets.test.Test")\n+        iface = getUtility(IPortletTypeInterface, name="portlets.test.Test")\n         self.assertEqual(ITestPortlet, iface)\n \n     def testFactoryRegistered(self):\n-        factory = getUtility(IFactory, name=u"portlets.test.Test")\n+        factory = getUtility(IFactory, name="portlets.test.Test")\n         self.assertEqual(TestAssignment, factory._callable)\n \n     def testRendererRegistered(self):\n@@ -125,14 +123,14 @@ def testAddViewRegistered(self):\n         request = self.portal.REQUEST\n         adding = PortletAdding(self.portal, request)\n \n-        addview = getMultiAdapter((adding, request), name=u"portlets.test.Test")\n+        addview = getMultiAdapter((adding, request), name="portlets.test.Test")\n         self.assertTrue(isinstance(addview, TestAddForm))\n \n     def testEditViewRegistered(self):\n         assignment = TestAssignment()\n         request = self.portal.REQUEST\n \n-        editview = getMultiAdapter((assignment, request), name=u"edit")\n+        editview = getMultiAdapter((assignment, request), name="edit")\n         self.assertTrue(isinstance(editview, TestEditForm))\n \n \n@@ -142,11 +140,11 @@ def afterSetUp(self):\n         portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n     def testPortletManagerInstalled(self):\n-        manager = getUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = getUtility(IPortletManager, name="test.testcolumn")\n         self.assertTrue(ITestColumn.providedBy(manager))\n \n     def disabled_testPortletTypeRegistered(self):\n-        portlet_type = getUtility(IPortletType, name=u"portlets.test.Test")\n+        portlet_type = getUtility(IPortletType, name="portlets.test.Test")\n         self.assertEqual("portlets.test.Test", portlet_type.addview)\n         self.assertEqual([Interface], portlet_type.for_)\n         # XXX Missing i18n support in the exportimport code\n@@ -158,17 +156,17 @@ def disabled_testPortletTypeRegistered(self):\n             isinstance(portlet_type.description, Message),\n             "Portlet description should be a Message instance",\n         )\n-        self.assertEqual(u"title_test_portlet", portlet_type.title)\n-        self.assertEqual(u"description_test_portlet", portlet_type.description)\n-        self.assertEqual(u"Test portlet", portlet_type.title.default)\n-        self.assertEqual(u"A test portlet", portlet_type.description.default)\n-        self.assertEqual(u"plone", portlet_type.title.domain)\n-        self.assertEqual(u"plone", portlet_type.description.domain)\n+        self.assertEqual("title_test_portlet", portlet_type.title)\n+        self.assertEqual("description_test_portlet", portlet_type.description)\n+        self.assertEqual("Test portlet", portlet_type.title.default)\n+        self.assertEqual("A test portlet", portlet_type.description.default)\n+        self.assertEqual("plone", portlet_type.title.domain)\n+        self.assertEqual("plone", portlet_type.description.domain)\n \n     def testAssignmentCreatedAndOrdered(self):\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -180,15 +178,15 @@ def testAssignmentCreatedAndOrdered(self):\n     def testAssignmentPropertiesSet(self):\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n \n         assignment = mapping["test.portlet1"]\n-        self.assertEqual(u"Test pr\\xf6p 1", assignment.test_text)\n+        self.assertEqual("Test pr\\xf6p 1", assignment.test_text)\n         self.assertEqual(False, assignment.test_bool)\n-        self.assertEqual((u"published", u"private"), assignment.test_tuple)\n+        self.assertEqual(("published", "private"), assignment.test_tuple)\n \n         assignment = mapping["test.portlet2"]\n         self.assertEqual("Test prop 2", assignment.test_text)\n@@ -203,7 +201,7 @@ def testAssignmentPropertiesSet(self):\n     def testAssignmentSettings(self):\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -218,7 +216,7 @@ def testAssignmentSettings(self):\n     def testAssignmentRoot(self):\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -227,7 +225,7 @@ def testAssignmentRoot(self):\n         # No assignment in /news subfolder\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/news",\n         )\n@@ -252,7 +250,7 @@ def testAssignmentRoot(self):\n         # Still 3 portlets in the root\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -261,7 +259,7 @@ def testAssignmentRoot(self):\n         # but 1 extra in the /news subfolder\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/news",\n         )\n@@ -276,7 +274,7 @@ def testAssignmentRemoval(self):\n \n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -304,7 +302,7 @@ def testAssignmentPurging(self):\n         # initially there should be 3 assignments on the root\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -328,7 +326,7 @@ def testAssignmentPurging(self):\n         # now they should be gone\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -337,7 +335,7 @@ def testAssignmentPurging(self):\n         # group assignments should still be there\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=GROUP_CATEGORY,\n             key="Reviewers",\n         )\n@@ -362,7 +360,7 @@ def testAssignmentPurging(self):\n         # now they should be gone\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=GROUP_CATEGORY,\n             key="Reviewers",\n         )\n@@ -371,7 +369,7 @@ def testAssignmentPurging(self):\n         # also content type assignments should still be there\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTENT_TYPE_CATEGORY,\n             key="Folder",\n         )\n@@ -396,14 +394,14 @@ def testAssignmentPurging(self):\n         # now they should be gone\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTENT_TYPE_CATEGORY,\n             key="Folder",\n         )\n         self.assertEqual(0, len(mapping))\n \n     def testBlacklisting(self):\n-        manager = getUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = getUtility(IPortletManager, name="test.testcolumn")\n \n         if "news" in self.portal.objectIds():\n             news = self.portal["news"]\n@@ -419,14 +417,14 @@ def testBlacklisting(self):\n     def testPurgeMethod(self):\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u"plone.portlets")\n+        handler = getMultiAdapter((sm, context), IBody, name="plone.portlets")\n         handler._purgePortlets()\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testPurge(self):\n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n@@ -438,11 +436,11 @@ def testPurge(self):\n         """\n         importPortlets(context)\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testManagerRemove(self):\n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n@@ -458,7 +456,7 @@ def testManagerRemove(self):\n         """\n         importPortlets(context)\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testManagerPurge(self):\n@@ -479,7 +477,7 @@ def testManagerPurge(self):\n             KeyError,\n             assignment_mapping_from_key,\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=GROUP_CATEGORY,\n             key="Reviewers",\n         )\n@@ -488,7 +486,7 @@ def testManagerPurge(self):\n             KeyError,\n             assignment_mapping_from_key,\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTENT_TYPE_CATEGORY,\n             key="Folder",\n         )\n@@ -496,7 +494,7 @@ def testManagerPurge(self):\n         # context assignment at the root are purged as well\n         mapping = assignment_mapping_from_key(\n             self.portal,\n-            manager_name=u"test.testcolumn",\n+            manager_name="test.testcolumn",\n             category=CONTEXT_CATEGORY,\n             key="/",\n         )\n@@ -506,7 +504,7 @@ def testExport(self):\n         self.maxDiff = None\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u"plone.portlets")\n+        handler = getMultiAdapter((sm, context), IBody, name="plone.portlets")\n         handler._purgePortlets()\n \n         time.sleep(1)\n@@ -514,7 +512,7 @@ def testExport(self):\n         portal_setup = self.portal.portal_setup\n         portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n-        expected = u"""\\\n+        expected = """\\\n <?xml version="1.0" encoding="utf-8"?>\n <portlets>\n  <portletmanager name="test.testcolumn"\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex 0130a680..c15b08cd 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n from plone.app.testing import setRoles\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex a037adcf..09688400 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n@@ -31,10 +30,7 @@ def test_default_dashboard_created_for_new_user(self):\n         self.assertTrue(len(user_portlets["fakeuser"]) > 0)\n \n     def test_non_ascii_usernames_created(self):\n-        if six.PY2:\n-            user1, pass1 = u"user1\\xa9".encode("utf-8"), "pass1"\n-        else:\n-            user1, pass1 = "user1\\xa9", "pass1"\n+        user1, pass1 = "user1\\xa9", "pass1"\n         uf = self.portal.acl_users\n \n         # Bug #6100 - Would throw a unicode decode error in event handler\ndiff --git a/plone/app/portlets/tests/test_exportimport.py b/plone/app/portlets/tests/test_exportimport.py\nindex 439932b7..954b1d34 100644\n--- a/plone/app/portlets/tests/test_exportimport.py\n+++ b/plone/app/portlets/tests/test_exportimport.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.portlets.exportimport.portlets import PortletsXMLAdapter\n from plone.app.portlets.interfaces import IColumn\n from plone.app.portlets.interfaces import IDashboard\n@@ -103,12 +101,12 @@ def disabled_test_initPortletNode_i18n(self):\n             isinstance(portlet.description, Message),\n             "Portlet description should be a Message instance",\n         )\n-        self.assertEqual(u"title_foo_portlet", portlet.title)\n-        self.assertEqual(u"description_foo_portlet", portlet.description)\n-        self.assertEqual(u"Foo", portlet.title.default)\n-        self.assertEqual(u"Bar", portlet.description.default)\n-        self.assertEqual(u"foodomain", portlet.title.domain)\n-        self.assertEqual(u"foodomain", portlet.description.domain)\n+        self.assertEqual("title_foo_portlet", portlet.title)\n+        self.assertEqual("description_foo_portlet", portlet.description)\n+        self.assertEqual("Foo", portlet.title.default)\n+        self.assertEqual("Bar", portlet.description.default)\n+        self.assertEqual("foodomain", portlet.title.domain)\n+        self.assertEqual("foodomain", portlet.description.domain)\n \n     def test_initPortletNode_multipleInterfaces(self):\n         node = parseString(_XML_MULTIPLE_INTERFACES).documentElement\ndiff --git a/plone/app/portlets/tests/test_formextender.py b/plone/app/portlets/tests/test_formextender.py\nindex 82bcacaf..6961f178 100644\n--- a/plone/app/portlets/tests/test_formextender.py\n+++ b/plone/app/portlets/tests/test_formextender.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.portlets.browser.interfaces import IPortletAddForm\n from plone.app.portlets.browser.interfaces import IPortletEditForm\n from plone.app.portlets.portlets import news\n@@ -35,7 +33,7 @@ class IPortletCssClass(Interface):\n     # css_class is just an example.\n     # In real life a css_class implementation would be a\n     # Choice field with a vocabulary, editable in a controlpanel.\n-    css_class = schema.TextLine(title=u"Portlet appearance", required=False)\n+    css_class = schema.TextLine(title="Portlet appearance", required=False)\n \n \n class PortletCssClassFormExtender(FormExtender):\n@@ -45,7 +43,7 @@ def update(self):\n \n @adapter(IPortletAssignment)\n @implementer(IPortletCssClass)\n-class PortletCssClassAdapter(object):\n+class PortletCssClassAdapter:\n     def __init__(self, context):\n         # avoid recursion\n         self.__dict__["context"] = context\ndiff --git a/plone/app/portlets/tests/test_login_portlet.py b/plone/app/portlets/tests/test_login_portlet.py\nindex 2a713067..a3f3f810 100644\n--- a/plone/app/portlets/tests/test_login_portlet.py\n+++ b/plone/app/portlets/tests/test_login_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import login\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\ndiff --git a/plone/app/portlets/tests/test_manage_views.py b/plone/app/portlets/tests/test_manage_views.py\nindex d8745121..c78baf9c 100644\n--- a/plone/app/portlets/tests/test_manage_views.py\n+++ b/plone/app/portlets/tests/test_manage_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n \n \ndiff --git a/plone/app/portlets/tests/test_mapping.py b/plone/app/portlets/tests/test_mapping.py\nindex 25dbb48b..b9170971 100644\n--- a/plone/app/portlets/tests/test_mapping.py\n+++ b/plone/app/portlets/tests/test_mapping.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.portlets.browser.adding import PortletAdding\n from plone.app.portlets.portlets import classic\n@@ -26,7 +25,7 @@ def testNameChooser(self):\n \n class TestContextMapping(PortletsTestCase):\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u"plone.leftcolumn")\n+        self.manager = getUtility(IPortletManager, name="plone.leftcolumn")\n \n     def testAdapting(self):\n         mapping = getMultiAdapter(\ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex e824bfcc..b8ee6889 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.testing import OPTIONFLAGS\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n from plone.testing import layered\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 75e5bf57..7cfb2345 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -199,7 +198,7 @@ def testNavTreeMarksParentMetaTypesNotToQuery(self):\n         tree = view.getNavTree()\n         self.assertEqual(tree["children"][-1]["show_children"], True)\n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n         self.assertEqual(tree["children"][-1]["show_children"], False)\n@@ -455,7 +454,7 @@ def testRootDoesNotExist(self):\n \n     def testAboveRoot(self):\n         registry = getUtility(IRegistry)\n-        registry["plone.root"] = u"/folder2"\n+        registry["plone.root"] = "/folder2"\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -539,7 +538,7 @@ def testStateFiltering(self):\n \n     def testPrunedRootNode(self):\n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n@@ -550,7 +549,7 @@ def testPrunedRootNode(self):\n \n     def testPrunedRootNodeShowsAllParents(self):\n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\ndiff --git a/plone/app/portlets/tests/test_news_portlet.py b/plone/app/portlets/tests/test_news_portlet.py\nindex 5cb05473..b021f887 100644\n--- a/plone/app/portlets/tests/test_news_portlet.py\n+++ b/plone/app/portlets/tests/test_news_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\ndiff --git a/plone/app/portlets/tests/test_recent_portlet.py b/plone/app/portlets/tests/test_recent_portlet.py\nindex 8282fb5b..2eba5dd0 100644\n--- a/plone/app/portlets/tests/test_recent_portlet.py\n+++ b/plone/app/portlets/tests/test_recent_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\ndiff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py\nindex 7e9d9ca3..03105469 100644\n--- a/plone/app/portlets/tests/test_redirects.py\n+++ b/plone/app/portlets/tests/test_redirects.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.browser.adding import PortletAdding\n from plone.app.portlets.browser.editmanager import ManagePortletAssignments\n from plone.app.portlets.browser.formhelper import AddForm\ndiff --git a/plone/app/portlets/tests/test_review_portlet.py b/plone/app/portlets/tests/test_review_portlet.py\nindex a3917f8a..53eb64e3 100644\n--- a/plone/app/portlets/tests/test_review_portlet.py\n+++ b/plone/app/portlets/tests/test_review_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import review\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import login\ndiff --git a/plone/app/portlets/tests/test_rss_portlet.py b/plone/app/portlets/tests/test_rss_portlet.py\nindex 7338e327..1ee123ed 100644\n--- a/plone/app/portlets/tests/test_rss_portlet.py\n+++ b/plone/app/portlets/tests/test_rss_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import rss\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.app.portlets.tests.base import PortletsTestCase\n@@ -110,9 +109,9 @@ def test_rss_items(self):\n \n     def testTitle(self):\n         r = self.renderer(assignment=rss.Assignment())\n-        self.assertEqual(r.title, u"")\n-        r.data.portlet_title = u"Overridden title"\n-        self.assertEqual(r.title, u"Overridden title")\n+        self.assertEqual(r.title, "")\n+        r.data.portlet_title = "Overridden title"\n+        self.assertEqual(r.title, "Overridden title")\n \n \n class TestFunctional(unittest.TestCase):\n@@ -123,7 +122,7 @@ def test_rss_feed_http(self):\n         # so that we can try to load this via http.\n         with open(sample_feed, "rb") as myfile:\n             data = myfile.read()\n-        file_field = NamedBlobFile(data, filename=u"feed.xml")\n+        file_field = NamedBlobFile(data, filename="feed.xml")\n         portal = self.layer["portal"]\n         feed_id = portal.invokeFactory("File", "feed")\n         feed = portal[feed_id]\n@@ -136,7 +135,7 @@ def test_rss_feed_http(self):\n         self.assertTrue(feed._loaded)\n         self.assertFalse(feed._failed)\n         self.assertTrue(feed.ok)\n-        self.assertEqual(feed.siteurl, u"https://maurits.vanrees.org/weblog")\n+        self.assertEqual(feed.siteurl, "https://maurits.vanrees.org/weblog")\n         self.assertEqual(len(feed.items), 15)\n \n \ndiff --git a/plone/app/portlets/tests/test_setup.py b/plone/app/portlets/tests/test_setup.py\nindex 02f88b33..4d31bd54 100644\n--- a/plone/app/portlets/tests/test_setup.py\n+++ b/plone/app/portlets/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.interfaces import IDashboard\n from plone.app.portlets.interfaces import ILeftColumn\n from plone.app.portlets.interfaces import IRightColumn\ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex e2eb78e8..c54bfd08 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 8ae64a84..08f4464a 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.browser.utils import PortletUtilities\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import news\n@@ -19,10 +18,10 @@\n \n class TestAssignmentFromKey(PortletsTestCase):\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u"plone.leftcolumn")\n+        self.manager = getUtility(IPortletManager, name="plone.leftcolumn")\n         self.cat = self.manager[USER_CATEGORY]\n         self.cat[TEST_USER_ID] = PortletAssignmentMapping(\n-            manager=u"plone.leftcolumn", category=USER_CATEGORY, name=TEST_USER_ID\n+            manager="plone.leftcolumn", category=USER_CATEGORY, name=TEST_USER_ID\n         )\n \n     def testGetPortletFromContext(self):\n@@ -33,7 +32,7 @@ def testGetPortletFromContext(self):\n         mapping["foo"] = c\n         path = "/".join(self.portal.getPhysicalPath())\n         a = assignment_from_key(\n-            self.portal, u"plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+            self.portal, "plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n         )\n         self.assertEqual(c, a)\n \n@@ -46,9 +45,9 @@ def testGetPortletFromContextUnicodePath(self):\n         )\n         c = classic.Assignment()\n         mapping["foo"] = c\n-        path = u"/".join(self.portal.getPhysicalPath())\n+        path = "/".join(self.portal.getPhysicalPath())\n         a = assignment_from_key(\n-            self.portal, u"plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+            self.portal, "plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n         )\n         self.assertEqual(c, a)\n \n@@ -56,14 +55,14 @@ def testGetPortletFromUserCategory(self):\n         c = classic.Assignment()\n         self.cat[TEST_USER_ID]["foo"] = c\n         a = assignment_from_key(\n-            self.portal, u"plone.leftcolumn", USER_CATEGORY, TEST_USER_ID, "foo"\n+            self.portal, "plone.leftcolumn", USER_CATEGORY, TEST_USER_ID, "foo"\n         )\n         self.assertEqual(c, a)\n \n \n class TestRendering(PortletsTestCase):\n     def afterSetUp(self):\n-        self.portal.invokeFactory("News Item", "testnews", title=u"Test News")\n+        self.portal.invokeFactory("News Item", "testnews", title="Test News")\n \n     def testTraversalRendererWithHash(self):\n         context = self.folder\n@@ -86,8 +85,8 @@ def testTraversalRendererWithHash(self):\n         rendered_portlet = render_portlet_view.render_portlet(\n             safe_unicode(portlet_hash)\n         )\n-        self.assertIn(u"portletNews", rendered_portlet)\n-        self.assertIn(u"Test News", rendered_portlet)\n+        self.assertIn("portletNews", rendered_portlet)\n+        self.assertIn("Test News", rendered_portlet)\n \n \n def test_suite():\ndiff --git a/plone/app/portlets/tests/utils.py b/plone/app/portlets/tests/utils.py\nindex 5746603a..b21f6aa4 100644\n--- a/plone/app/portlets/tests/utils.py\n+++ b/plone/app/portlets/tests/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.portlets.manager import PortletManager\n \n import doctest\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex 73a1da34..e9935f17 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.portlets import HAS_PLONE_APP_EVENT\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n@@ -49,7 +48,7 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n                 path = path[len(portal_path) + 1 :]\n             while path.startswith("/"):\n                 path = path[1:]\n-            if six.PY2 and isinstance(path, six.text_type):\n+            if six.PY2 and isinstance(path, str):\n                 path = path.encode("utf-8")  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\ndiff --git a/setup.py b/setup.py\nindex 10582e76..49b70948 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2021-08-19T14:30:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/659fb1fca9b79e372cb41eb2d2b4838ab42db385

manual remove six, adapts-&gt; @adapter

Files changed:
A news/151.bugfix
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/traversal.py
M plone/app/portlets/cache.py
M plone/app/portlets/checker.py
M plone/app/portlets/dashboard.py
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/manager.py
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/classic.py
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/portlets/rss.py
M plone/app/portlets/storage.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/tests/test_exportimport.py
M plone/app/portlets/utils.py
M setup.py

b'diff --git a/news/151.bugfix b/news/151.bugfix\nnew file mode 100644\nindex 00000000..5aaa6a95\n--- /dev/null\n+++ b/news/151.bugfix\n@@ -0,0 +1,2 @@\n+Codestyle (black/isort/pycln), Pyupgrade, plus minor manual cleanup.\n+[jensens]\ndiff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py\nindex 38a468aa..80a4851a 100644\n--- a/plone/app/portlets/browser/editmanager.py\n+++ b/plone/app/portlets/browser/editmanager.py\n@@ -26,7 +26,7 @@\n from Products.PythonScripts.standard import url_quote\n from Products.PythonScripts.standard import url_unquote\n from zExceptions import NotFound\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryAdapter\n@@ -41,6 +41,7 @@\n \n \n @implementer(IPortletManagerRenderer)\n+@adapter(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n class EditPortletManagerRenderer(Explicit):\n     """Render a portlet manager in edit mode.\n \n@@ -49,8 +50,6 @@ class EditPortletManagerRenderer(Explicit):\n \n     """\n \n-    adapts(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n-\n     template = ViewPageTemplateFile("templates/edit-manager.pt")\n \n     def __init__(self, context, request, view, manager):\n@@ -231,13 +230,12 @@ def context_url(self):\n         return str(getMultiAdapter((self.context, self.request), name="absolute_url"))\n \n \n+@adapter(\n+    Interface, IDefaultBrowserLayer, IManageContextualPortletsView, IPortletManager\n+)\n class ContextualEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for contextual portlets"""\n \n-    adapts(\n-        Interface, IDefaultBrowserLayer, IManageContextualPortletsView, IPortletManager\n-    )\n-\n     template = ViewPageTemplateFile("templates/edit-manager-contextual.pt")\n \n     def __init__(self, context, request, view, manager):\n@@ -385,7 +383,7 @@ def global_portlets(self, category, prefix):\n \n         portal_state = getMultiAdapter(\n             (context, self.request), name="plone_portal_state"\n-        )  # noqa\n+        )\n         base_url = portal_state.portal_url()\n \n         portlets = []\n@@ -396,7 +394,7 @@ def global_portlets(self, category, prefix):\n                 if mapping is not None:\n                     is_visible = lambda a: IPortletAssignmentSettings(a).get(\n                         "visible", True\n-                    )  # noqa\n+                    )\n                     assignments.extend(\n                         [a for a in mapping.get(key, {}).values() if is_visible(a)]\n                     )\n@@ -426,11 +424,10 @@ def content_type_portlets(self):\n         return self.global_portlets(CONTENT_TYPE_CATEGORY, "contenttypeportlets")\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n class DashboardEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for the dashboard"""\n \n-    adapts(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n-\n \n class ManagePortletAssignments(BrowserView):\n     """Utility views for managing portlets for a particular column"""\ndiff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py\nindex 7f83bc70..7740d25a 100644\n--- a/plone/app/portlets/browser/formhelper.py\n+++ b/plone/app/portlets/browser/formhelper.py\n@@ -152,9 +152,7 @@ def nextURL(self):\n             addview = aq_parent(aq_inner(self.context))\n             context = aq_parent(aq_inner(addview))\n             try:\n-                url = str(\n-                    getMultiAdapter((context, self.request), name="absolute_url")\n-                )\n+                url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n             except (TypeError, AttributeError):\n                 url = self.context.absolute_url()\n             return url + "/@@manage-portlets"\ndiff --git a/plone/app/portlets/browser/traversal.py b/plone/app/portlets/browser/traversal.py\nindex b7c2e1f9..8a50bb28 100644\n--- a/plone/app/portlets/browser/traversal.py\n+++ b/plone/app/portlets/browser/traversal.py\n@@ -8,7 +8,7 @@\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.interfaces import ISiteRoot\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import implementer\n@@ -17,11 +17,10 @@\n \n \n @implementer(ITraversable)\n+@adapter(ILocalPortletAssignable, IHTTPRequest)\n class ContextPortletNamespace:\n     """Used to traverse to a contextual portlet assignable"""\n \n-    adapts(ILocalPortletAssignable, IHTTPRequest)\n-\n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n@@ -39,13 +38,12 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n+@adapter(ISiteRoot, IHTTPRequest)\n class DashboardNamespace:\n     """Used to traverse to a portlet assignable for the current user for\n     the dashboard.\n     """\n \n-    adapts(ISiteRoot, IHTTPRequest)\n-\n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n@@ -72,11 +70,10 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n+@adapter(ISiteRoot, IHTTPRequest)\n class GroupDashboardNamespace:\n     """Used to traverse to a portlet assignable for a group for the dashboard"""\n \n-    adapts(ISiteRoot, IHTTPRequest)\n-\n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n@@ -94,11 +91,10 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n+@adapter(ISiteRoot, IHTTPRequest)\n class GroupPortletNamespace:\n     """Used to traverse to a group portlet assignable"""\n \n-    adapts(ISiteRoot, IHTTPRequest)\n-\n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n@@ -125,11 +121,10 @@ def traverse(self, name, ignore):\n \n \n @implementer(ITraversable)\n+@adapter(ISiteRoot, IHTTPRequest)\n class ContentTypePortletNamespace:\n     """Used to traverse to a content type portlet assignable"""\n \n-    adapts(ISiteRoot, IHTTPRequest)\n-\n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex e64e82f8..56b42cb8 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -2,8 +2,6 @@\n from Products.CMFCore.utils import getToolByName\n from zope import component\n \n-import six\n-\n \n def get_language(context, request):\n     portal_state = component.getMultiAdapter(\ndiff --git a/plone/app/portlets/checker.py b/plone/app/portlets/checker.py\nindex 11b66051..274deeef 100644\n--- a/plone/app/portlets/checker.py\n+++ b/plone/app/portlets/checker.py\n@@ -5,14 +5,13 @@\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.interface import implementer\n \n \n @implementer(IPortletPermissionChecker)\n+@adapter(IPortletAssignmentMapping)\n class DefaultPortletPermissionChecker:\n-    adapts(IPortletAssignmentMapping)\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -27,9 +26,8 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n+@adapter(IUserPortletAssignmentMapping)\n class UserPortletPermissionChecker:\n-    adapts(IUserPortletAssignmentMapping)\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -49,9 +47,8 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n+@adapter(IGroupDashboardPortletAssignmentMapping)\n class GroupDashboardPortletPermissionChecker:\n-    adapts(IGroupDashboardPortletAssignmentMapping)\n-\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/portlets/dashboard.py b/plone/app/portlets/dashboard.py\nindex 84ab94c9..cf1cce8e 100644\n--- a/plone/app/portlets/dashboard.py\n+++ b/plone/app/portlets/dashboard.py\n@@ -4,7 +4,7 @@\n from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import queryUtility\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n@@ -42,11 +42,10 @@ def new_user(principal, event):\n \n \n @implementer(IDefaultDashboard)\n+@adapter(IPropertiedUser)\n class DefaultDashboard:\n     """The default default dashboard."""\n \n-    adapts(IPropertiedUser)\n-\n     def __init__(self, principal):\n         self.principal = principal\n \ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex b9178480..f0e30a51 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -74,7 +74,7 @@\n .. These docs are used in http://docs.plone.org/develop/addons/components/genericsetup.html\n .. original content from http://www.sixfeetup.com/company/technologies/plone-content-management-new/quick-reference-cards/swag/swag-images-files/generic_setup.pdf\n \n-"""  # noqa\n+"""\n \n from operator import attrgetter\n from plone.app.portlets.exportimport.interfaces import (\n@@ -97,11 +97,12 @@\n from plone.portlets.registration import PortletType\n from plone.portlets.storage import PortletCategoryMapping\n from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.interfaces import IComponentsHandlerBlacklist\n from Products.GenericSetup.interfaces import ISetupEnviron\n from Products.GenericSetup.utils import _getDottedName\n from Products.GenericSetup.utils import _resolveDottedName\n from Products.GenericSetup.utils import XMLAdapterBase\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getSiteManager\n from zope.component import getUtilitiesFor\n from zope.component import getUtility\n@@ -114,41 +115,31 @@\n from zope.interface import Interface\n from zope.interface import providedBy\n from zope.interface.interfaces import IComponentRegistry\n+from zope.schema import Bool\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IFromUnicode\n \n-import six\n-\n \n def dummyGetId():\n     return ""\n \n \n-HAS_BLACKLIST = True\n-try:\n-    from Products.GenericSetup.interfaces import IComponentsHandlerBlacklist\n-except ImportError:\n-    HAS_BLACKLIST = False\n-\n-if HAS_BLACKLIST:\n-\n-    @implementer(IComponentsHandlerBlacklist)\n-    class Blacklist:\n-        def getExcludedInterfaces(self):\n-            return (\n-                _getDottedName(IPortletType),\n-                _getDottedName(IPortletManager),\n-                _getDottedName(IPortletManagerRenderer),\n-            )\n+@implementer(IComponentsHandlerBlacklist)\n+class Blacklist:\n+    def getExcludedInterfaces(self):\n+        return (\n+            _getDottedName(IPortletType),\n+            _getDottedName(IPortletManager),\n+            _getDottedName(IPortletManagerRenderer),\n+        )\n \n \n @implementer(IPortletAssignmentExportImportHandler)\n+@adapter(Interface)\n class PropertyPortletAssignmentExportImportHandler:\n     """Import portlet assignment settings based on zope.schema properties"""\n \n-    adapts(Interface)\n-\n     def __init__(self, assignment):\n         self.assignment = assignment\n \n@@ -239,15 +230,11 @@ def extract_text(self, node):\n         return text\n \n     def from_unicode(self, field, value):\n-\n         # XXX: Bool incorrectly omits to declare that it implements\n         # IFromUnicode, even though it does.\n-        import zope.schema\n-\n-        if IFromUnicode.providedBy(field) or isinstance(field, zope.schema.Bool):\n+        if IFromUnicode.providedBy(field) or isinstance(field, Bool):\n             return field.fromUnicode(value)\n-        else:\n-            return self.field_typecast(field, value)\n+        return self.field_typecast(field, value)\n \n     def field_typecast(self, field, value):\n         # A slight hack to force sequence types to the right type\n@@ -266,11 +253,10 @@ def field_typecast(self, field, value):\n \n \n @implementer(IBody)\n+@adapter(IComponentRegistry, ISetupEnviron)\n class PortletsXMLAdapter(XMLAdapterBase):\n     """In- and exporter for a local portlet configuration"""\n \n-    adapts(IComponentRegistry, ISetupEnviron)\n-\n     name = "portlets"\n     _LOGGER_ID = "portlets"\n \n@@ -476,8 +462,6 @@ def _initAssignmentNode(self, node):\n         key = node.getAttribute("key")\n         # convert unicode to str as unicode paths are not allowed in\n         # restrictedTraverse called in assignment_mapping_from_key\n-        if six.PY2:\n-            key = key.encode()\n \n         purge = False\n         if node.hasAttribute("purge"):\ndiff --git a/plone/app/portlets/manager.py b/plone/app/portlets/manager.py\nindex 3d4d4d06..e7f3e943 100644\n--- a/plone/app/portlets/manager.py\n+++ b/plone/app/portlets/manager.py\n@@ -7,7 +7,7 @@\n from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from ZODB.POSException import ConflictError\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserView\n@@ -40,10 +40,10 @@ def _dataToPortlet(self, data):\n         return portlet\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n class ColumnPortletManagerRenderer(PortletManagerRenderer):\n     """A renderer for the column portlets"""\n \n-    adapts(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n     template = ViewPageTemplateFile("browser/templates/column.pt")\n     error_message = ViewPageTemplateFile("browser/templates/error_message.pt")\n \n@@ -75,8 +75,8 @@ def safe_render(self, portlet_renderer):\n             return self.error_message()\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n class DashboardPortletManagerRenderer(ColumnPortletManagerRenderer):\n     """Render a column of the dashboard"""\n \n-    adapts(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n     template = ViewPageTemplateFile("browser/templates/dashboard-column.pt")\ndiff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex fffd361d..6528f0c5 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -7,14 +7,13 @@\n from plone.portlets.interfaces import IPortletContext\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n-\n \n @implementer(IPortletContext)\n+@adapter(Interface)\n class ContentContext:\n     """A portlet context for regular content items.\n \n@@ -23,8 +22,6 @@ class ContentContext:\n     contexts, but that is doubtfully going to be an issue.\n     """\n \n-    adapts(Interface)\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -104,11 +101,10 @@ def _getContentType(self):\n \n \n @implementer(IPortletContext)\n+@adapter(ISiteRoot)\n class PortalRootContext(ContentContext):\n     """A portlet context for the site root."""\n \n-    adapts(ISiteRoot)\n-\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/portlets/portlets/classic.py b/plone/app/portlets/portlets/classic.py\nindex 132e12ff..6d9e45c3 100644\n--- a/plone/app/portlets/portlets/classic.py\n+++ b/plone/app/portlets/portlets/classic.py\n@@ -57,9 +57,7 @@ def path_expression(self):\n class AddForm(base.AddForm):\n     schema = IClassicPortlet\n     label = _("Add Classic Portlet")\n-    description = _(\n-        "A classic portlet allows you to use legacy portlet " "templates."\n-    )\n+    description = _("A classic portlet allows you to use legacy portlet " "templates.")\n \n     def create(self, data):\n         return Assignment(\n@@ -70,6 +68,4 @@ def create(self, data):\n class EditForm(base.EditForm):\n     schema = IClassicPortlet\n     label = _("Edit Classic Portlet")\n-    description = _(\n-        "A classic portlet allows you to use legacy portlet " "templates."\n-    )\n+    description = _("A classic portlet allows you to use legacy portlet " "templates.")\ndiff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py\nindex f44af093..a32b7ce7 100644\n--- a/plone/app/portlets/portlets/navigation.py\n+++ b/plone/app/portlets/portlets/navigation.py\n@@ -29,7 +29,7 @@\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zExceptions import NotFound\n from zope import schema\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -415,13 +415,12 @@ class EditForm(base.EditForm):\n \n \n @implementer(INavigationQueryBuilder)\n+@adapter(Interface, INavigationPortlet)\n class QueryBuilder:\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\n \n-    adapts(Interface, INavigationPortlet)\n-\n     def __init__(self, context, portlet):\n         self.context = context\n         self.portlet = portlet\n@@ -484,11 +483,10 @@ def __call__(self):\n \n \n @implementer(INavtreeStrategy)\n+@adapter(Interface, INavigationPortlet)\n class NavtreeStrategy(SitemapNavtreeStrategy):\n     """The navtree strategy used for the default navigation portlet"""\n \n-    adapts(Interface, INavigationPortlet)\n-\n     def __init__(self, context, portlet):\n         SitemapNavtreeStrategy.__init__(self, context, portlet)\n \ndiff --git a/plone/app/portlets/portlets/rss.py b/plone/app/portlets/portlets/rss.py\nindex c51d9af0..6cf4ce12 100644\n--- a/plone/app/portlets/portlets/rss.py\n+++ b/plone/app/portlets/portlets/rss.py\n@@ -239,8 +239,7 @@ class IRSSPortlet(IPortletDataProvider):\n     portlet_title = schema.TextLine(\n         title=_("Title"),\n         description=_(\n-            "Title of the portlet.  If omitted, the title of the "\n-            "feed will be used."\n+            "Title of the portlet.  If omitted, the title of the " "feed will be used."\n         ),\n         required=False,\n         default="",\ndiff --git a/plone/app/portlets/storage.py b/plone/app/portlets/storage.py\nindex ebe94477..8a4eba53 100644\n--- a/plone/app/portlets/storage.py\n+++ b/plone/app/portlets/storage.py\n@@ -9,7 +9,7 @@\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.storage import PortletAssignmentMapping as BaseMapping\n from zope.annotation.interfaces import IAnnotations\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getUtility\n from zope.container.contained import NameChooser\n from zope.container.interfaces import INameChooser\n@@ -88,11 +88,10 @@ def id(self):\n \n \n @implementer(IBrowserPublisher)\n+@adapter(IPortletAssignmentMapping, IDefaultBrowserLayer)\n class PortletAssignmentMappingTraverser(ItemTraverser):\n     """A traverser for portlet assignment mappings, that is acqusition-aware"""\n \n-    adapts(IPortletAssignmentMapping, IDefaultBrowserLayer)\n-\n     def publishTraverse(self, request, name):\n         ob = ItemTraverser.publishTraverse(self, request, name)\n         return ob.__of__(self.context)\ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex 156e456e..c52d40bd 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -1,28 +1,16 @@\n+from doctest import DocFileSuite\n from plone.app.portlets.testing import OPTIONFLAGS\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.testing import layered\n from unittest import TestSuite\n \n-import doctest\n-import re\n-import six\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("LocationError", "zope.location.interfaces.LocationError", got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n \n def test_suite():\n     suite = TestSuite()\n     suite.addTest(\n         layered(\n-            doctest.DocFileSuite(\n+            DocFileSuite(\n                 "testMemberDashboard.rst",\n-                checker=Py23DocChecker(),\n                 package="plone.app.portlets.tests",\n                 optionflags=OPTIONFLAGS,\n             ),\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex c1ac19b0..c9a2b605 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -12,8 +12,6 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n-import six\n-\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex 09688400..0d504f76 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -5,13 +5,13 @@\n from plone.portlets.interfaces import IPortletType\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from unittest import makeSuite\n+from unittest import TestSuite\n from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.event import notify\n \n-import six\n-\n \n class TestDashboard(PortletsTestCase):\n     def test_default_dashboard_created_for_new_user(self):\n@@ -46,8 +46,6 @@ def test_non_ascii_usernames_created(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n \n     suite = TestSuite()\n     suite.addTest(makeSuite(TestDashboard))\ndiff --git a/plone/app/portlets/tests/test_exportimport.py b/plone/app/portlets/tests/test_exportimport.py\nindex 954b1d34..545d53fa 100644\n--- a/plone/app/portlets/tests/test_exportimport.py\n+++ b/plone/app/portlets/tests/test_exportimport.py\n@@ -1,3 +1,4 @@\n+from io import StringIO\n from plone.app.portlets.exportimport.portlets import PortletsXMLAdapter\n from plone.app.portlets.interfaces import IColumn\n from plone.app.portlets.interfaces import IDashboard\n@@ -8,7 +9,6 @@\n from plone.portlets.interfaces import IPortletType\n from plone.portlets.manager import PortletManager\n from Products.GenericSetup.testing import DummySetupEnviron\n-from six import StringIO\n from xml.dom.minidom import parseString\n from zope.component import getSiteManager\n from zope.component import getUtility\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex e9935f17..db69975a 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -1,4 +1,6 @@\n from Acquisition import aq_base\n+from plone.app.event.portlets import portlet_calendar as calendar\n+from plone.app.event.portlets import portlet_events as events\n from plone.app.portlets import HAS_PLONE_APP_EVENT\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.app.portlets.portlets import classic\n@@ -19,13 +21,6 @@\n from zope.container.interfaces import INameChooser\n \n \n-if HAS_PLONE_APP_EVENT:\n-    from plone.app.event.portlets import portlet_calendar as calendar\n-    from plone.app.event.portlets import portlet_events as events\n-\n-import six\n-\n-\n def assignment_mapping_from_key(context, manager_name, category, key, create=False):\n     """Given the name of a portlet manager, the name of a category, and a\n     key in that category, return the IPortletAssignmentMapping.\n@@ -48,8 +43,6 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n                 path = path[len(portal_path) + 1 :]\n             while path.startswith("/"):\n                 path = path[1:]\n-            if six.PY2 and isinstance(path, str):\n-                path = path.encode("utf-8")  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n             raise KeyError("Cannot find object at path %s" % path)\n@@ -90,16 +83,10 @@ def convert_legacy_portlets(context):\n         "portlet_languages": DONT_MIGRATE,\n         "portlet_calendar": DONT_MIGRATE,\n         "portlet_events": DONT_MIGRATE,\n+        "portlet_calendar": calendar.Assignment(),\n+        "portlet_events": events.Assignment(count=5),\n     }\n \n-    if HAS_PLONE_APP_EVENT:\n-        portletsMapping.update(\n-            {\n-                "portlet_calendar": calendar.Assignment(),\n-                "portlet_events": events.Assignment(count=5),\n-            }\n-        )\n-\n     # Convert left_slots and right_slots to portlets\n \n     left = getUtility(IPortletManager, name="plone.leftcolumn")\ndiff --git a/setup.py b/setup.py\nindex 49b70948..05ef8633 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -45,10 +45,10 @@\n         "plone.memoize",\n         "plone.portlets>=1.1",\n         "plone.app.i18n",\n+        "plone.app.event",\n         "plone.app.layout >= 1.2dev",\n         "plone.app.vocabularies >= 2.1.15.dev0",\n         "plone.app.z3cform",\n-        "six",\n         "transaction",\n         "zope.annotation",\n         "zope.browser",\n@@ -69,10 +69,10 @@\n         "Products.CMFDynamicViewFTI",\n         "Products.GenericSetup >= 2.0.dev0",\n         "Products.PluggableAuthService",\n-        "ZODB3",\n+        "ZODB",\n         "Acquisition",\n         "DateTime",\n-        "Zope2 >= 2.12.3",\n+        "Zope >= 5",\n         "feedparser",\n     ],\n )\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2021-08-20T11:23:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/11dab3d1f6bf8126e51cbf8b5f63762f1be4b954

Merge pull request #151 from plone/codestyle

Codestyle &amp; Pyupgrade

Files changed:
A news/151.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/portlets/__init__.py
M plone/app/portlets/assignable.py
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/interfaces.py
M plone/app/portlets/browser/manage.py
M plone/app/portlets/browser/traversal.py
M plone/app/portlets/browser/utils.py
M plone/app/portlets/cache.py
M plone/app/portlets/checker.py
M plone/app/portlets/dashboard.py
M plone/app/portlets/exportimport/__init__.py
M plone/app/portlets/exportimport/interfaces.py
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/interfaces.py
M plone/app/portlets/manager.py
M plone/app/portlets/metaconfigure.py
M plone/app/portlets/metadirectives.py
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/__init__.py
M plone/app/portlets/portlets/actions.py
M plone/app/portlets/portlets/base.py
M plone/app/portlets/portlets/calendar.py
M plone/app/portlets/portlets/classic.py
M plone/app/portlets/portlets/events.py
M plone/app/portlets/portlets/language.py
M plone/app/portlets/portlets/login.py
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/portlets/news.py
M plone/app/portlets/portlets/recent.py
M plone/app/portlets/portlets/review.py
M plone/app/portlets/portlets/rss.py
M plone/app/portlets/portlets/search.py
M plone/app/portlets/storage.py
M plone/app/portlets/testing.py
M plone/app/portlets/tests/__init__.py
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_cache.py
M plone/app/portlets/tests/test_classic_portlet.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/tests/test_exportimport.py
M plone/app/portlets/tests/test_formextender.py
M plone/app/portlets/tests/test_login_portlet.py
M plone/app/portlets/tests/test_manage_views.py
M plone/app/portlets/tests/test_mapping.py
M plone/app/portlets/tests/test_namechooser.py
M plone/app/portlets/tests/test_navigation_portlet.py
M plone/app/portlets/tests/test_news_portlet.py
M plone/app/portlets/tests/test_recent_portlet.py
M plone/app/portlets/tests/test_redirects.py
M plone/app/portlets/tests/test_review_portlet.py
M plone/app/portlets/tests/test_rss_portlet.py
M plone/app/portlets/tests/test_setup.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py
M plone/app/portlets/tests/utils.py
M plone/app/portlets/utils.py
M setup.cfg
M setup.py

b'diff --git a/news/151.bugfix b/news/151.bugfix\nnew file mode 100644\nindex 00000000..5aaa6a95\n--- /dev/null\n+++ b/news/151.bugfix\n@@ -0,0 +1,2 @@\n+Codestyle (black/isort/pycln), Pyupgrade, plus minor manual cleanup.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef0..05f0bebb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef0..05f0bebb 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/portlets/__init__.py b/plone/app/portlets/__init__.py\nindex f7774de1..febb48db 100644\n--- a/plone/app/portlets/__init__.py\n+++ b/plone/app/portlets/__init__.py\n@@ -1,12 +1,13 @@\n-# -*- coding: utf-8 -*-\n # Import PloneMessageFactory to create messages in the plone domain\n from zope.i18nmessageid import MessageFactory\n+\n import pkg_resources\n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+\n+PloneMessageFactory = MessageFactory("plone")\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.event\')\n+    pkg_resources.get_distribution("plone.app.event")\n except pkg_resources.DistributionNotFound:\n     HAS_PLONE_APP_EVENT = False\n else:\ndiff --git a/plone/app/portlets/assignable.py b/plone/app/portlets/assignable.py\nindex d94cadc2..b6b0471d 100644\n--- a/plone/app/portlets/assignable.py\n+++ b/plone/app/portlets/assignable.py\n@@ -1,23 +1,18 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapter\n-from zope.annotation.interfaces import IAnnotations\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignable\n-from plone.portlets.interfaces import IPortletManager\n-\n+from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.portlets.interfaces import ILocalPortletAssignable\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.interface import implementer\n \n \n @adapter(ILocalPortletAssignable, IPortletManager)\n @implementer(IPortletAssignmentMapping)\n def localPortletAssignmentMappingAdapter(context, manager):\n-    """Zope 2 version of the localPortletAssignmentMappingAdapter factory.\n-    """\n+    """Zope 2 version of the localPortletAssignmentMappingAdapter factory."""\n     annotations = IAnnotations(context)\n     local = annotations.get(CONTEXT_ASSIGNMENT_KEY, {})\n     portlets = local.get(manager.__name__, None)\n@@ -26,15 +21,14 @@ def localPortletAssignmentMappingAdapter(context, manager):\n         # but pass along the context so it can be stored\n         # if an assignment is added.\n         portlets = PortletAssignmentMapping(\n-            manager=manager.__name__,\n-            category=CONTEXT_CATEGORY,\n-            context=context)\n+            manager=manager.__name__, category=CONTEXT_CATEGORY, context=context\n+        )\n \n     # XXX: For graceful migration\n-    if not getattr(portlets, \'__manager__\', \'\'):\n+    if not getattr(portlets, "__manager__", ""):\n         portlets.__manager__ = manager.__name__\n \n-    if not getattr(portlets, \'__category__\', \'\'):\n+    if not getattr(portlets, "__category__", ""):\n         portlets.__category__ = CONTEXT_CATEGORY\n \n     return portlets\ndiff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py\nindex b22fc695..48340277 100644\n--- a/plone/app/portlets/browser/adding.py\n+++ b/plone/app/portlets/browser/adding.py\n@@ -1,18 +1,15 @@\n-# -*- coding: utf-8 -*-\n-from warnings import warn\n-\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-\n-from zope.container.interfaces import INameChooser\n-\n-from Acquisition import aq_inner, aq_base, aq_parent\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five import BrowserView\n-\n from plone.app.portlets.browser.interfaces import IPortletAdding\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five import BrowserView\n+from warnings import warn\n+from zope.component import getMultiAdapter\n+from zope.container.interfaces import INameChooser\n+from zope.interface import implementer\n \n \n @implementer(IPortletAdding)\n@@ -23,11 +20,10 @@ class PortletAdding(SimpleItem, BrowserView):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+\'\n+    id = "+"\n \n     def add(self, content):\n-        """Add the rule to the context\n-        """\n+        """Add the rule to the context"""\n         context = aq_inner(self.context)\n         manager = aq_base(context)\n \n@@ -38,21 +34,23 @@ def add(self, content):\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         referer = self.referer\n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n-            referer = url + \'/@@manage-portlets\'\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+            referer = url + "/@@manage-portlets"\n         return referer\n \n     def renderAddButton(self):\n-        warn("The renderAddButton method is deprecated, use nameAllowed",\n-            DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\ndiff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py\nindex 92f0d728..80a4851a 100644\n--- a/plone/app/portlets/browser/editmanager.py\n+++ b/plone/app/portlets/browser/editmanager.py\n@@ -1,46 +1,47 @@\n-# -*- coding: utf-8 -*-\n-import logging\n-\n+from AccessControl import Unauthorized\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Acquisition import Explicit\n+from Acquisition.interfaces import IAcquirer\n+from five.customerize.zpt import TTWViewTemplateRenderer\n+from plone.app.portlets.browser.interfaces import IManageColumnPortletsView\n+from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n+from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.memoize.view import memoize\n-\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.utils import hashPortletInfo\n-\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.PythonScripts.standard import url_quote\n+from Products.PythonScripts.standard import url_unquote\n+from zExceptions import NotFound\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryAdapter\n+from zope.component import queryMultiAdapter\n from zope.container import contained\n-from zope.interface import implementer, Interface\n-from zope.component import (\n-    adapts, getMultiAdapter, queryMultiAdapter, queryAdapter, getUtility)\n from zope.contentprovider.interfaces import UpdateNotCalled\n+from zope.interface import implementer\n+from zope.interface import Interface\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from five.customerize.zpt import TTWViewTemplateRenderer\n-\n-from Acquisition import Explicit, aq_parent, aq_inner\n-from Acquisition.interfaces import IAcquirer\n-\n-from AccessControl import Unauthorized\n-from zExceptions import NotFound\n-\n-from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.PythonScripts.standard import url_quote, url_unquote\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-\n-from plone.app.portlets.browser.interfaces import IManageColumnPortletsView\n-from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n-from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n-from plone.app.portlets.interfaces import IDashboard, IPortletPermissionChecker\n \n-from plone.portlets.interfaces import IPortletAssignmentSettings\n+import logging\n \n \n @implementer(IPortletManagerRenderer)\n+@adapter(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n class EditPortletManagerRenderer(Explicit):\n     """Render a portlet manager in edit mode.\n \n@@ -48,9 +49,8 @@ class EditPortletManagerRenderer(Explicit):\n     which assignments to display.\n \n     """\n-    adapts(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n \n-    template = ViewPageTemplateFile(\'templates/edit-manager.pt\')\n+    template = ViewPageTemplateFile("templates/edit-manager.pt")\n \n     def __init__(self, context, request, view, manager):\n         self.__parent__ = view\n@@ -82,27 +82,30 @@ def view_name(self):\n         if not name:\n             # try to fallback on the \'name\' attribute for\n             # TTW customized views, see #11409\n-            if \'TTWView\' in self.__parent__.__class__.__name__:\n+            if "TTWView" in self.__parent__.__class__.__name__:\n                 try:\n-                    path = self.request.get(\'PATH_INFO\')\n+                    path = self.request.get("PATH_INFO")\n                     template_renderer = self.request.traverse(path)\n-                    name = getattr(template_renderer.template, \'view_name\', None)\n-                except (AttributeError, KeyError, Unauthorized,):\n-                    logging.getLogger(\'plone.app.portlets.browser\').debug(\n-                        \'Cant get view name for TTV %s\' % self.__parent__\n+                    name = getattr(template_renderer.template, "view_name", None)\n+                except (\n+                    AttributeError,\n+                    KeyError,\n+                    Unauthorized,\n+                ):\n+                    logging.getLogger("plone.app.portlets.browser").debug(\n+                        "Cant get view name for TTV %s" % self.__parent__\n                     )\n         return name\n \n     def normalized_manager_name(self):\n-        return self.manager.__name__.replace(\'.\', \'-\')\n+        return self.manager.__name__.replace(".", "-")\n \n     def baseUrl(self):\n         return self.__parent__.getAssignmentMappingUrl(self.manager)\n \n     def portlets(self):\n         assignments = self._lazyLoadAssignments(self.manager)\n-        return self.portlets_for_assignments(\n-            assignments, self.manager, self.baseUrl())\n+        return self.portlets_for_assignments(assignments, self.manager, self.baseUrl())\n \n     def portlets_for_assignments(self, assignments, manager, base_url):\n         category = self.__parent__.category\n@@ -111,56 +114,69 @@ def portlets_for_assignments(self, assignments, manager, base_url):\n         data = []\n         for idx in range(len(assignments)):\n             name = assignments[idx].__name__\n-            if hasattr(assignments[idx], \'__Broken_state__\'):\n-                name = assignments[idx].__Broken_state__[\'__name__\']\n+            if hasattr(assignments[idx], "__Broken_state__"):\n+                name = assignments[idx].__Broken_state__["__name__"]\n \n             editview = queryMultiAdapter(\n-                (assignments[idx], self.request), name=\'edit\', default=None)\n+                (assignments[idx], self.request), name="edit", default=None\n+            )\n \n             if editview is None:\n-                editviewName = \'\'\n+                editviewName = ""\n             else:\n-                editviewName = \'%s/%s/edit\' % (base_url, name)\n+                editviewName = f"{base_url}/{name}/edit"\n \n             portlet_hash = hashPortletInfo(\n-                dict(manager=manager.__name__, category=category,\n-                     key=key, name=name,))\n+                dict(\n+                    manager=manager.__name__,\n+                    category=category,\n+                    key=key,\n+                    name=name,\n+                )\n+            )\n \n             try:\n                 settings = IPortletAssignmentSettings(assignments[idx])\n-                visible = settings.get(\'visible\', True)\n+                visible = settings.get("visible", True)\n             except TypeError:\n                 visible = False\n \n-            data.append({\n-                \'title\': assignments[idx].title,\n-                \'editview\': editviewName,\n-                \'hash\': portlet_hash,\n-                \'name\': name,\n-                \'up_url\': \'%s/@@move-portlet-up\' % (base_url),\n-                \'down_url\': \'%s/@@move-portlet-down\' % (base_url),\n-                \'delete_url\': \'%s/@@delete-portlet\' % (base_url),\n-                \'hide_url\': \'%s/@@toggle-visibility\' % (base_url),\n-                \'show_url\': \'%s/@@toggle-visibility\' % (base_url),\n-                \'visible\': visible,\n-                })\n+            data.append(\n+                {\n+                    "title": assignments[idx].title,\n+                    "editview": editviewName,\n+                    "hash": portlet_hash,\n+                    "name": name,\n+                    "up_url": "%s/@@move-portlet-up" % (base_url),\n+                    "down_url": "%s/@@move-portlet-down" % (base_url),\n+                    "delete_url": "%s/@@delete-portlet" % (base_url),\n+                    "hide_url": "%s/@@toggle-visibility" % (base_url),\n+                    "show_url": "%s/@@toggle-visibility" % (base_url),\n+                    "visible": visible,\n+                }\n+            )\n         if len(data) > 0:\n-            data[0][\'up_url\'] = data[-1][\'down_url\'] = None\n+            data[0]["up_url"] = data[-1]["down_url"] = None\n \n         return data\n \n     def addable_portlets(self):\n         baseUrl = self.baseUrl()\n-        addviewbase = baseUrl.replace(self.context_url(), \'\')\n+        addviewbase = baseUrl.replace(self.context_url(), "")\n+\n         def sort_key(v):\n-            return v.get(\'title\')\n+            return v.get("title")\n+\n         def check_permission(p):\n             addview = p.addview\n             if not addview:\n                 return False\n \n-            addview = "%s/+/%s" % (addviewbase, addview,)\n-            if addview.startswith(\'/\'):\n+            addview = "{}/+/{}".format(\n+                addviewbase,\n+                addview,\n+            )\n+            if addview.startswith("/"):\n                 addview = addview[1:]\n             try:\n                 self.context.restrictedTraverse(str(addview))\n@@ -168,26 +184,30 @@ def check_permission(p):\n                 return False\n             return True\n \n-        portlets = [{\n-            \'title\': p.title,\n-            \'description\': p.description,\n-            \'addview\': \'%s/+/%s\' % (addviewbase, p.addview)\n-            } for p in self.manager.getAddablePortletTypes() if check_permission(p)]\n+        portlets = [\n+            {\n+                "title": p.title,\n+                "description": p.description,\n+                "addview": f"{addviewbase}/+/{p.addview}",\n+            }\n+            for p in self.manager.getAddablePortletTypes()\n+            if check_permission(p)\n+        ]\n \n         portlets.sort(key=sort_key)\n         return portlets\n \n     @memoize\n     def referer(self):\n-        view_name = self.request.get(\'viewname\', None)\n-        key = self.request.get(\'key\', None)\n-        base_url = self.request[\'ACTUAL_URL\']\n+        view_name = self.request.get("viewname", None)\n+        key = self.request.get("key", None)\n+        base_url = self.request["ACTUAL_URL"]\n \n         if view_name:\n-            base_url = self.context_url() + \'/\' + view_name\n+            base_url = self.context_url() + "/" + view_name\n \n         if key:\n-            base_url += \'?key=%s\' % key\n+            base_url += "?key=%s" % key\n \n         return base_url\n \n@@ -197,7 +217,7 @@ def url_quote_referer(self):\n \n     @memoize\n     def key(self):\n-        return self.request.get(\'key\', None)\n+        return self.request.get("key", None)\n \n     # See note in plone.portlets.manager\n \n@@ -207,35 +227,49 @@ def _lazyLoadAssignments(self, manager):\n \n     @memoize\n     def context_url(self):\n-        return str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n+        return str(getMultiAdapter((self.context, self.request), name="absolute_url"))\n+\n \n+@adapter(\n+    Interface, IDefaultBrowserLayer, IManageContextualPortletsView, IPortletManager\n+)\n class ContextualEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for contextual portlets"""\n-    adapts(Interface, IDefaultBrowserLayer,\n-           IManageContextualPortletsView, IPortletManager)\n \n-    template = ViewPageTemplateFile(\'templates/edit-manager-contextual.pt\')\n+    template = ViewPageTemplateFile("templates/edit-manager-contextual.pt")\n \n     def __init__(self, context, request, view, manager):\n         EditPortletManagerRenderer.__init__(self, context, request, view, manager)\n \n     def blacklist_status_action(self):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return baseUrl + \'/@@set-portlet-blacklist-status\'\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return baseUrl + "/@@set-portlet-blacklist-status"\n \n     def manager_name(self):\n         return self.manager.__name__\n \n     def context_blacklist_status(self):\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         return assignable.getBlacklistStatus(CONTEXT_CATEGORY)\n \n     def group_blacklist_status(self, check_parent=False):\n         # If check_parent is True and the blacklist status is None, it returns the\n         # parent status recursively.\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         status = assignable.getBlacklistStatus(GROUP_CATEGORY)\n \n         if check_parent and status is None:\n@@ -245,8 +279,13 @@ def group_blacklist_status(self, check_parent=False):\n         return status\n \n     def content_type_blacklist_status(self, check_parent=False):\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         status = assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY)\n \n         if check_parent and status is None:\n@@ -266,8 +305,13 @@ def parent_blacklist_status(self, category):\n         current = pcontext.getParent()\n         currentpc = pcontext\n         while status is None and current is not None:\n-            assignable = getMultiAdapter((current, self.manager,),\n-                                         ILocalPortletAssignmentManager)\n+            assignable = getMultiAdapter(\n+                (\n+                    current,\n+                    self.manager,\n+                ),\n+                ILocalPortletAssignmentManager,\n+            )\n             status = assignable.getBlacklistStatus(category)\n \n             current = currentpc.getParent()\n@@ -290,7 +334,7 @@ def inherited_portlets(self):\n \n         def is_visible(a):\n             try:\n-                return IPortletAssignmentSettings(a).get(\'visible\', True)\n+                return IPortletAssignmentSettings(a).get("visible", True)\n             except TypeError:\n                 # Assignment is broken\n                 return False\n@@ -302,25 +346,32 @@ def is_visible(a):\n                 context = context.__parent__\n \n             # we get the contextual portlets view to access its utility methods\n-            view = queryMultiAdapter((context, self.request),\n-                                     name=self.__parent__.__name__)\n+            view = queryMultiAdapter(\n+                (context, self.request), name=self.__parent__.__name__\n+            )\n             if view is not None:\n                 assignments = view.getAssignmentsForManager(self.manager)\n                 assignments_to_show = [a for a in assignments if is_visible(a)]\n                 base_url = view.getAssignmentMappingUrl(self.manager)\n-                data.extend(self.portlets_for_assignments(assignments_to_show,\n-                                                          self.manager, base_url))\n-\n-            assignable = queryMultiAdapter((context, self.manager),\n-                                           ILocalPortletAssignmentManager)\n-            if assignable is not None and assignable.getBlacklistStatus(CONTEXT_CATEGORY):\n+                data.extend(\n+                    self.portlets_for_assignments(\n+                        assignments_to_show, self.manager, base_url\n+                    )\n+                )\n+\n+            assignable = queryMultiAdapter(\n+                (context, self.manager), ILocalPortletAssignmentManager\n+            )\n+            if assignable is not None and assignable.getBlacklistStatus(\n+                CONTEXT_CATEGORY\n+            ):\n                 # Current context has blocked inherited portlets, stop.\n                 break\n \n         return data\n \n     def global_portlets(self, category, prefix):\n-        """ Return the list of global portlets from a given category for the current context.\n+        """Return the list of global portlets from a given category for the current context.\n \n         Invisible (hidden) portlets are excluded.\n \n@@ -330,7 +381,9 @@ def global_portlets(self, category, prefix):\n         # get the portlet context\n         pcontext = IPortletContext(self.context)\n \n-        portal_state = getMultiAdapter((context, self.request), name=u\'plone_portal_state\')  # noqa\n+        portal_state = getMultiAdapter(\n+            (context, self.request), name="plone_portal_state"\n+        )\n         base_url = portal_state.portal_url()\n \n         portlets = []\n@@ -339,44 +392,55 @@ def global_portlets(self, category, prefix):\n                 mapping = self.manager.get(category, None)\n                 assignments = []\n                 if mapping is not None:\n-                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\'visible\', True)  # noqa\n-                    assignments.extend([a for a in mapping.get(key, {}).values()\n-                                        if is_visible(a)])\n+                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\n+                        "visible", True\n+                    )\n+                    assignments.extend(\n+                        [a for a in mapping.get(key, {}).values() if is_visible(a)]\n+                    )\n                 if assignments:\n-                    edit_url = \'%s/++%s++%s+%s\' % (\n-                        base_url, prefix, self.manager.__name__, key)\n-                    portlets.extend(self.portlets_for_assignments(\n-                        assignments, self.manager, edit_url))\n+                    edit_url = "{}/++{}++{}+{}".format(\n+                        base_url,\n+                        prefix,\n+                        self.manager.__name__,\n+                        key,\n+                    )\n+                    portlets.extend(\n+                        self.portlets_for_assignments(\n+                            assignments, self.manager, edit_url\n+                        )\n+                    )\n \n         return portlets\n \n     def group_portlets(self):\n         """Return the list of global portlets from the group category for the\n-           current context."""\n-        return self.global_portlets(GROUP_CATEGORY, \'groupportlets\')\n+        current context."""\n+        return self.global_portlets(GROUP_CATEGORY, "groupportlets")\n \n     def content_type_portlets(self):\n         """Return the list of global portlets from the content type category for\n-           the current context."""\n-        return self.global_portlets(CONTENT_TYPE_CATEGORY, \'contenttypeportlets\')\n+        the current context."""\n+        return self.global_portlets(CONTENT_TYPE_CATEGORY, "contenttypeportlets")\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n class DashboardEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for the dashboard"""\n-    adapts(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n \n \n class ManagePortletAssignments(BrowserView):\n     """Utility views for managing portlets for a particular column"""\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u"authenticator")\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n     def _render_column(self):\n-        view_name = self.request.form.get(\'viewname\')\n+        view_name = self.request.form.get("viewname")\n         obj = aq_inner(self.context.__parent__)\n         request = aq_inner(self.request)\n         view = getMultiAdapter((obj, request), name=view_name)\n@@ -385,17 +449,18 @@ def _render_column(self):\n             view = view._getView()\n \n         manager = getUtility(IPortletManager, name=self.context.__manager__)\n-        renderer = getMultiAdapter((obj, request, view, manager),\n-                                   IPortletManagerRenderer)\n+        renderer = getMultiAdapter(\n+            (obj, request, view, manager), IPortletManagerRenderer\n+        )\n         renderer.update()\n         return renderer.__of__(obj).render()\n \n     def finish_portlet_change(self):\n-        if self.request.form.get(\'ajax\', False):\n+        if self.request.form.get("ajax", False):\n             return self._render_column()\n         else:\n             self.request.response.redirect(self._nextUrl())\n-            return \'\'\n+            return ""\n \n     # view @@move-portlet-up\n     def move_portlet_up(self, name):\n@@ -407,7 +472,7 @@ def move_portlet_up(self, name):\n \n         idx = keys.index(name)\n         keys.remove(name)\n-        keys.insert(idx-1, name)\n+        keys.insert(idx - 1, name)\n         assignments.updateOrder(keys)\n         return self.finish_portlet_change()\n \n@@ -421,7 +486,7 @@ def move_portlet_down(self, name):\n \n         idx = keys.index(name)\n         keys.remove(name)\n-        keys.insert(idx+1, name)\n+        keys.insert(idx + 1, name)\n         assignments.updateOrder(keys)\n         return self.finish_portlet_change()\n \n@@ -444,21 +509,21 @@ def delete_portlet(self, name):\n         return self.finish_portlet_change()\n \n     def _nextUrl(self):\n-        referer = self.request.get(\'referer\')\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        referer = self.request.get("referer")\n+        urltool = getToolByName(self.context, "portal_url")\n         if referer:\n             referer = url_unquote(referer)\n \n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n-            referer = \'%s/@@manage-portlets\' % (url,)\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+            referer = f"{url}/@@manage-portlets"\n         return referer\n \n     def toggle_visibility(self, name):\n         self.authorize()\n         assignments = aq_inner(self.context)\n         settings = IPortletAssignmentSettings(assignments[name])\n-        visible = settings.get(\'visible\', True)\n-        settings[\'visible\'] = not visible\n+        visible = settings.get("visible", True)\n+        settings["visible"] = not visible\n         return self.finish_portlet_change()\ndiff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py\nindex 4f98fc75..7740d25a 100644\n--- a/plone/app/portlets/browser/formhelper.py\n+++ b/plone/app/portlets/browser/formhelper.py\n@@ -1,26 +1,24 @@\n-# -*- coding: utf-8 -*-\n-from z3c.form import button\n-from z3c.form import field\n-from z3c.form import form\n-from zope.component import getMultiAdapter\n-from zope.interface import implementer\n-import zope.event\n-import zope.lifecycleevent\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-\n-from Acquisition import aq_parent, aq_inner, aq_base\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.browser.interfaces import IPortletAddForm\n from plone.app.portlets.browser.interfaces import IPortletEditForm\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.autoform.form import AutoExtensibleForm\n-\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+\n+import zope.event\n+import zope.lifecycleevent\n \n \n @implementer(IPortletAddForm)\n@@ -44,9 +42,9 @@ def create(self):\n             return MyAssignment()\n     """\n \n-    template = ViewPageTemplateFile(\'templates/z3cform-portlets-pageform.pt\')\n+    template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n-    label = _(u"Configure portlet")\n+    label = _("Configure portlet")\n \n     def add(self, object):\n         ob = self.context.add(object)\n@@ -54,11 +52,11 @@ def add(self, object):\n         return ob\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n-        return super(AddForm, self).__call__()\n+        return super().__call__()\n \n     def createAndAdd(self, data):\n         # Filter away data values that does not come from the \'core\' schema.\n@@ -69,8 +67,7 @@ def createAndAdd(self, data):\n         # Extender values are set by form.applyChanges below, via the usual\n         # z3cform adapter lookups.\n         schema_keys = field.Fields(self.schema).keys()\n-        unextended_data = {key: data[key]\n-                           for key in schema_keys if key in data}\n+        unextended_data = {key: data[key] for key in schema_keys if key in data}\n         obj = self.create(unextended_data)\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n@@ -88,25 +85,24 @@ def createAndAdd(self, data):\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         addview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(addview))\n         try:\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         except (TypeError, AttributeError):\n             # At least in tests we can get a TypeError: "There isn\'t enough\n             # context to get URL information. This is probably due to a bug in\n             # setting up location information."\n             url = self.context.absolute_url()\n-        return url + \'/@@manage-portlets\'\n+        return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name=\'add\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="add")\n     def handleAdd(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -117,13 +113,12 @@ def handleAdd(self, action):\n             # mark only as finished if we get the new object\n             self._finishedAdd = True\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"),\n-                             name=\'cancel_add\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(nextURL)\n-        return \'\'\n+        return ""\n \n \n class NullAddForm(BrowserView):\n@@ -143,25 +138,24 @@ def __call__(self):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         else:\n             addview = aq_parent(aq_inner(self.context))\n             context = aq_parent(aq_inner(addview))\n             try:\n-                url = str(getMultiAdapter((context, self.request),\n-                                          name=u"absolute_url"))\n+                url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n             except (TypeError, AttributeError):\n                 url = self.context.absolute_url()\n-            return url + \'/@@manage-portlets\'\n+            return url + "/@@manage-portlets"\n \n     def create(self):\n         raise NotImplementedError("concrete classes must implement create()")\n@@ -169,38 +163,36 @@ def create(self):\n \n @implementer(IPortletEditForm)\n class EditForm(AutoExtensibleForm, form.EditForm):\n-    """An edit form for portlets.\n-    """\n+    """An edit form for portlets."""\n \n-    template = ViewPageTemplateFile(\'templates/z3cform-portlets-pageform.pt\')\n+    template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n-    label = _(u"Modify portlet")\n+    label = _("Modify portlet")\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n-        return super(EditForm, self).__call__()\n+        return super().__call__()\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         editview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(editview))\n         try:\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         except (TypeError, AttributeError):\n             url = self.context.absolute_url()\n-        return url + \'/@@manage-portlets\'\n+        return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name=\'apply\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="apply")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -209,22 +201,19 @@ def handleSave(self, action):\n         changes = self.applyChanges(data)\n         if changes:\n             self.status = "Changes saved"\n-            IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"),\n-                                                          "info")\n+            IStatusMessage(self.request).addStatusMessage(_("Changes saved"), "info")\n         else:\n             self.status = "No changes"\n-            IStatusMessage(self.request).addStatusMessage(_(u"No changes"),\n-                                                          "info")\n+            IStatusMessage(self.request).addStatusMessage(_("No changes"), "info")\n \n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"),\n-                             name=\'cancel_add\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(nextURL)\n-        return \'\'\n+        return ""\ndiff --git a/plone/app/portlets/browser/interfaces.py b/plone/app/portlets/browser/interfaces.py\nindex fafa5ab4..6ce29538 100644\n--- a/plone/app/portlets/browser/interfaces.py\n+++ b/plone/app/portlets/browser/interfaces.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface, Attribute\n from zope.browser.interfaces import IAdding\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n \n class IPortletAdding(IAdding):\n     """Marker interface for the add view for portlet managers.\n@@ -8,41 +9,40 @@ class IPortletAdding(IAdding):\n     Portlet add views should be registered for this interface.\n     """\n \n+\n class IPortletForm(Interface):\n-    """Generic marker for form views that are used to create or edit portlets.\n-    """\n+    """Generic marker for form views that are used to create or edit portlets."""\n \n     def referer(self):\n         """Return the URL that the user came from before entering the form\n         for the first time.\n         """\n \n+\n class IPortletAddForm(IPortletForm):\n-    """Add form view for portlets\n-    """\n+    """Add form view for portlets"""\n+\n \n class IPortletEditForm(IPortletForm):\n-    """Edit form view for portlets\n-    """\n+    """Edit form view for portlets"""\n+\n \n class IManagePortletsView(Interface):\n-    """The screen used to manage portlets in a particular context.\n-    """\n+    """The screen used to manage portlets in a particular context."""\n \n     category = Attribute("The portlet category being managed")\n     key = Attribute("The key in the category under which portlets are assigned")\n \n     def getAssignmentMappingUrl(manager):\n-        """Given a portlet manager, get the URL to its assignment mapping.\n-        """\n+        """Given a portlet manager, get the URL to its assignment mapping."""\n \n     def getAssignmentsForManager(manager):\n-        """Get the assignments in the current context for the given manager.\n-        """\n+        """Get the assignments in the current context for the given manager."""\n+\n \n class IManageDashboardPortletsView(IManagePortletsView):\n-    """Marker for the manage dashboard portlets view\n-    """\n+    """Marker for the manage dashboard portlets view"""\n+\n \n class IManageColumnPortletsView(IManagePortletsView):\n     """Base class for views that should display the edit fuctionality\n@@ -52,18 +52,18 @@ class IManageColumnPortletsView(IManagePortletsView):\n     view that can apply to different categories of assignment.\n     """\n \n+\n class IManageContextualPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage contextual portlets view\n-    """\n+    """Marker for the manage contextual portlets view"""\n+\n \n class IManageUserPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage user portlets view\n-    """\n+    """Marker for the manage user portlets view"""\n+\n \n class IManageGroupPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage group portlets view\n-    """\n+    """Marker for the manage group portlets view"""\n+\n \n class IManageContentTypePortletsView(IManageColumnPortletsView):\n-    """Marker for the manage content type portlets view\n-    """\n\\ No newline at end of file\n+    """Marker for the manage content type portlets view"""\ndiff --git a/plone/app/portlets/browser/manage.py b/plone/app/portlets/browser/manage.py\nindex 823eaa5d..916bf7b0 100644\n--- a/plone/app/portlets/browser/manage.py\n+++ b/plone/app/portlets/browser/manage.py\n@@ -1,49 +1,40 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer_only\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter, getUtility\n-from zope.publisher.interfaces.browser import IBrowserView\n-\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner\n from Acquisition import aq_base\n-from Products.Five import BrowserView\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n-from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n-\n-from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.app.portlets.interfaces import ITopbarManagePortlets\n-\n-from plone.app.portlets.browser.interfaces import IManagePortletsView\n+from Acquisition import aq_inner\n+from plone.app.portlets import utils\n+from plone.app.portlets.browser.interfaces import IManageContentTypePortletsView\n from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n from plone.app.portlets.browser.interfaces import IManageGroupPortletsView\n-from plone.app.portlets.browser.interfaces import IManageContentTypePortletsView\n-\n-from plone.app.portlets import utils\n+from plone.app.portlets.browser.interfaces import IManagePortletsView\n+from plone.app.portlets.interfaces import IPortletPermissionChecker\n+from plone.app.portlets.interfaces import ITopbarManagePortlets\n+from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n+from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.app.portlets.storage import UserPortletAssignmentMapping\n from plone.memoize.view import memoize\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n from plone.protect.authenticator import createToken\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five import BrowserView\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n+from zope.publisher.interfaces.browser import IBrowserView\n \n \n @implementer(IManageContextualPortletsView)\n class ManageContextualPortlets(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(ManageContextualPortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        super().__init__(context, request)\n+        self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n \n@@ -57,36 +48,44 @@ def category(self):\n \n     @property\n     def key(self):\n-        return \'/\'.join(self.context.getPhysicalPath())\n+        return "/".join(self.context.getPhysicalPath())\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return \'%s/++contextportlets++%s\' % (baseUrl, manager.__name__)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return f"{baseUrl}/++contextportlets++{manager.__name__}"\n \n     def getAssignmentsForManager(self, manager):\n-        assignments = getMultiAdapter((self.context, manager), IPortletAssignmentMapping)\n+        assignments = getMultiAdapter(\n+            (self.context, manager), IPortletAssignmentMapping\n+        )\n         return assignments.values()\n \n     # view @@manage-portlets\n \n     def has_legacy_portlets(self):\n-        left_slots = getattr(aq_base(self.context), \'left_slots\', [])\n-        right_slots = getattr(aq_base(self.context), \'right_slots\', [])\n+        left_slots = getattr(aq_base(self.context), "left_slots", [])\n+        right_slots = getattr(aq_base(self.context), "right_slots", [])\n \n-        return (left_slots or right_slots)\n+        return left_slots or right_slots\n \n     # view @@set-portlet-blacklist-status\n-    def set_blacklist_status(self, manager, group_status, content_type_status,\n-                             context_status):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u"authenticator")\n+    def set_blacklist_status(\n+        self, manager, group_status, content_type_status, context_status\n+    ):\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n         portletManager = getUtility(IPortletManager, name=manager)\n-        assignable = getMultiAdapter((self.context, portletManager),\n-                                     ILocalPortletAssignmentManager)\n-        assignments = getMultiAdapter((self.context, portletManager),\n-                                      IPortletAssignmentMapping)\n+        assignable = getMultiAdapter(\n+            (self.context, portletManager), ILocalPortletAssignmentManager\n+        )\n+        assignments = getMultiAdapter(\n+            (self.context, portletManager), IPortletAssignmentMapping\n+        )\n \n         IPortletPermissionChecker(assignments.__of__(aq_inner(self.context)))()\n \n@@ -99,19 +98,24 @@ def int2status(status):\n                 return False\n \n         assignable.setBlacklistStatus(GROUP_CATEGORY, int2status(group_status))\n-        assignable.setBlacklistStatus(CONTENT_TYPE_CATEGORY,\n-                                      int2status(content_type_status))\n+        assignable.setBlacklistStatus(\n+            CONTENT_TYPE_CATEGORY, int2status(content_type_status)\n+        )\n         assignable.setBlacklistStatus(CONTEXT_CATEGORY, int2status(context_status))\n \n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        self.request.response.redirect(baseUrl + \'/@@manage-portlets\')\n-        return \'\'\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        self.request.response.redirect(baseUrl + "/@@manage-portlets")\n+        return ""\n \n     # view @@convert-legacy-portlets\n \n     def convert_legacy_portlets(self):\n         utils.convert_legacy_portlets(self.context)\n-        self.request.response.redirect(self.context.absolute_url() + \'/@@manage-portlets\')\n+        self.request.response.redirect(\n+            self.context.absolute_url() + "/@@manage-portlets"\n+        )\n \n \n @implementer(IManageDashboardPortletsView)\n@@ -136,9 +140,11 @@ def key(self):\n         return self._getUserId()\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n         userId = self._getUserId()\n-        return \'%s/++dashboard++%s+%s\' % (baseUrl, manager.__name__, userId)\n+        return f"{baseUrl}/++dashboard++{manager.__name__}+{userId}"\n \n     def getAssignmentsForManager(self, manager):\n         userId = self._getUserId()\n@@ -147,14 +153,16 @@ def getAssignmentsForManager(self, manager):\n         mapping = category.get(userId, None)\n         if mapping is None:\n             mapping = category[userId] = UserPortletAssignmentMapping(\n-                manager=manager.__name__, category=USER_CATEGORY, name=userId)\n+                manager=manager.__name__, category=USER_CATEGORY, name=userId\n+            )\n         return mapping.values()\n \n     def _getUserId(self):\n-        membership = getToolByName(aq_inner(self.context), \'portal_membership\', None)\n+        membership = getToolByName(aq_inner(self.context), "portal_membership", None)\n         if membership.isAnonymousUser():\n-            raise Unauthorized("Cannot get portlet assignments for anonymous "\n-                               "through this view")\n+            raise Unauthorized(\n+                "Cannot get portlet assignments for anonymous " "through this view"\n+            )\n \n         member = membership.getAuthenticatedMember()\n         memberId = member.getId()\n@@ -167,10 +175,9 @@ def _getUserId(self):\n \n @implementer(IManageDashboardPortletsView)\n class ManageGroupDashboardPortlets(BrowserView):\n-\n     @property\n     def group(self):\n-        return self.request.get(\'key\', None)\n+        return self.request.get("key", None)\n \n     # IManagePortletsView implementation\n \n@@ -187,18 +194,19 @@ def key(self):\n         return self.group\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return \'%s/++groupdashboard++%s+%s\' % (baseUrl, manager.__name__, self.group)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return f"{baseUrl}/++groupdashboard++{manager.__name__}+{self.group}"\n \n     def getAssignmentsForManager(self, manager):\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[GROUP_CATEGORY]\n         mapping = category.get(self.group, None)\n         if mapping is None:\n-            mapping = category[self.group] = \\\n-                GroupDashboardPortletAssignmentMapping(manager=manager.__name__,\n-                                                       category=GROUP_CATEGORY,\n-                                                       name=self.group)\n+            mapping = category[self.group] = GroupDashboardPortletAssignmentMapping(\n+                manager=manager.__name__, category=GROUP_CATEGORY, name=self.group\n+            )\n         return mapping.values()\n \n \n@@ -217,40 +225,41 @@ def category(self):\n \n     @property\n     def key(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n     def __init__(self, context, request):\n-        super(ManageGroupPortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        super().__init__(context, request)\n+        self.request.set("disable_border", True)\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        key = self.request[\'key\']\n-        return \'%s/++groupportlets++%s+%s\' % (baseUrl, manager.__name__, key)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        key = self.request["key"]\n+        return f"{baseUrl}/++groupportlets++{manager.__name__}+{key}"\n \n     def getAssignmentsForManager(self, manager):\n-        key = self.request[\'key\']\n+        key = self.request["key"]\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[GROUP_CATEGORY]\n         mapping = category.get(key, None)\n         if mapping is None:\n-            mapping = category[key] = PortletAssignmentMapping(manager=manager.__name__,\n-                                                               category=GROUP_CATEGORY,\n-                                                               name=key)\n+            mapping = category[key] = PortletAssignmentMapping(\n+                manager=manager.__name__, category=GROUP_CATEGORY, name=key\n+            )\n         return mapping.values()\n \n     # View attributes\n \n     def group(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n \n @implementer(IManageContentTypePortletsView)\n class ManageContentTypePortlets(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(ManageContentTypePortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        super().__init__(context, request)\n+        self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n \n@@ -264,21 +273,24 @@ def category(self):\n \n     @property\n     def key(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        pt = self.request[\'key\']\n-        return \'%s/++contenttypeportlets++%s+%s\' % (baseUrl, manager.__name__, pt)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        pt = self.request["key"]\n+        return f"{baseUrl}/++contenttypeportlets++{manager.__name__}+{pt}"\n \n     def getAssignmentsForManager(self, manager):\n-        pt = self.request[\'key\']\n+        pt = self.request["key"]\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[CONTENT_TYPE_CATEGORY]\n         mapping = category.get(pt, None)\n         if mapping is None:\n             mapping = category[pt] = PortletAssignmentMapping(\n-                manager=manager.__name__, category=CONTENT_TYPE_CATEGORY, name=pt)\n+                manager=manager.__name__, category=CONTENT_TYPE_CATEGORY, name=pt\n+            )\n         return mapping.values()\n \n     # View attributes\n@@ -288,13 +300,14 @@ def portal_type(self):\n \n     def portal_type_icon(self):\n         plone_layout = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_layout")\n+            (self.context, self.request), name="plone_layout"\n+        )\n         return plone_layout.getIcon(self.fti())\n \n     @memoize\n     def fti(self):\n-        portal_types = getToolByName(aq_inner(self.context), \'portal_types\')\n-        portal_type = self.request[\'key\']\n+        portal_types = getToolByName(aq_inner(self.context), "portal_types")\n+        portal_type = self.request["key"]\n         for fti in portal_types.listTypeInfo():\n             if fti.getId() == portal_type:\n                 return fti\n@@ -311,7 +324,7 @@ class ManagePortletsViewlet(BrowserView):\n     """\n \n     def __init__(self, context, request, view, manager):\n-        super(ManagePortletsViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\n@@ -333,9 +346,9 @@ def key(self):\n     def __getattribute__(self, name):\n         # Products.Five.viewlet.viewlet.SimpleViewletClass redefines __name__\n         # so a simple property or attribute does not work\n-        if name == \'__name__\':\n+        if name == "__name__":\n             return self.ultimate_parent().__name__\n-        return super(ManagePortletsViewlet, self).__getattribute__(name)\n+        return super().__getattribute__(name)\n \n     def getAssignmentMappingUrl(self, manager):\n         return self.ultimate_parent().getAssignmentMappingUrl(manager)\n@@ -347,8 +360,9 @@ def getAssignmentsForManager(self, manager):\n     def ultimate_parent(self):\n         # Walk the __parent__ chain to find the principal view\n         parent = self.__parent__\n-        while (hasattr(parent, \'__parent__\') and\n-                IBrowserView.providedBy(parent.__parent__)):\n+        while hasattr(parent, "__parent__") and IBrowserView.providedBy(\n+            parent.__parent__\n+        ):\n             parent = parent.__parent__\n         return parent\n \n@@ -380,15 +394,14 @@ class ManageContentTypePortletsViewlet(ManagePortletsViewlet):\n \n @implementer_only(ITopbarManagePortlets)\n class TopbarManagePortlets(ManageContextualPortlets):\n-\n     def __init__(self, context, request):\n-        super(TopbarManagePortlets, self).__init__(context, request)\n+        super().__init__(context, request)\n         # Disable the left and right columns\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         # Initialize the manager name in case there is nothing\n         # in the traversal path\n-        self.manager_name = \'plone.leftcolumn\'\n+        self.manager_name = "plone.leftcolumn"\n \n     def publishTraverse(self, request, name):\n         """Get the portlet manager via traversal so that we can re-use\n@@ -402,8 +415,9 @@ def render_edit_manager_portlets(self):\n         # Here we manually render the portlets instead of doing\n         # something like provider:${view/manager_name} in the template\n         manager_view = ManageContextualPortlets(self.context, self.request)\n-        manager_view.__name__ = \'manage-portlets\'\n+        manager_view.__name__ = "manage-portlets"\n         portlet_manager = getMultiAdapter(\n-            (self.context, self.request, manager_view), name=self.manager_name)\n+            (self.context, self.request, manager_view), name=self.manager_name\n+        )\n         portlet_manager.update()\n-        return portlet_manager.render()\n\\ No newline at end of file\n+        return portlet_manager.render()\ndiff --git a/plone/app/portlets/browser/traversal.py b/plone/app/portlets/browser/traversal.py\nindex eb0cce64..8a50bb28 100644\n--- a/plone/app/portlets/browser/traversal.py\n+++ b/plone/app/portlets/browser/traversal.py\n@@ -1,29 +1,25 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts, getUtility, getMultiAdapter\n-\n-from zope.traversing.interfaces import ITraversable\n-from zope.publisher.interfaces.http import IHTTPRequest\n-\n+from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n+from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.app.portlets.storage import UserPortletAssignmentMapping\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import ILocalPortletAssignable\n-from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n+from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.interfaces import ISiteRoot\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.publisher.interfaces.http import IHTTPRequest\n+from zope.traversing.interfaces import ITraversable\n \n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n-from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n \n @implementer(ITraversable)\n-class ContextPortletNamespace(object):\n-    """Used to traverse to a contextual portlet assignable\n-    """\n-    adapts(ILocalPortletAssignable, IHTTPRequest)\n+@adapter(ILocalPortletAssignable, IHTTPRequest)\n+class ContextPortletNamespace:\n+    """Used to traverse to a contextual portlet assignable"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n@@ -31,116 +27,124 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         column = getUtility(IPortletManager, name=name)\n-        manager = getMultiAdapter((self.context, column,), IPortletAssignmentMapping)\n+        manager = getMultiAdapter(\n+            (\n+                self.context,\n+                column,\n+            ),\n+            IPortletAssignmentMapping,\n+        )\n         return manager\n \n+\n @implementer(ITraversable)\n-class DashboardNamespace(object):\n+@adapter(ISiteRoot, IHTTPRequest)\n+class DashboardNamespace:\n     """Used to traverse to a portlet assignable for the current user for\n     the dashboard.\n     """\n-    adapts(ISiteRoot, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, user = name.split(\'+\')\n+        col, user = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[USER_CATEGORY]\n         manager = category.get(user, None)\n         if manager is None:\n             manager = category[user] = UserPortletAssignmentMapping(\n-                manager=col, category=USER_CATEGORY, name=user)\n+                manager=col, category=USER_CATEGORY, name=user\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = USER_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = user\n \n         return manager\n \n+\n @implementer(ITraversable)\n-class GroupDashboardNamespace(object):\n-    """Used to traverse to a portlet assignable for a group for the dashboard\n-    """\n-    adapts(ISiteRoot, IHTTPRequest)\n+@adapter(ISiteRoot, IHTTPRequest)\n+class GroupDashboardNamespace:\n+    """Used to traverse to a portlet assignable for a group for the dashboard"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, group = name.split(\'+\')\n+        col, group = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[GROUP_CATEGORY]\n         manager = category.get(group, None)\n         if manager is None:\n-            manager = category[group] = \\\n-                GroupDashboardPortletAssignmentMapping(manager=col,\n-                                                       category=GROUP_CATEGORY,\n-                                                       name=group)\n+            manager = category[group] = GroupDashboardPortletAssignmentMapping(\n+                manager=col, category=GROUP_CATEGORY, name=group\n+            )\n         return manager\n \n+\n @implementer(ITraversable)\n-class GroupPortletNamespace(object):\n-    """Used to traverse to a group portlet assignable\n-    """\n-    adapts(ISiteRoot, IHTTPRequest)\n+@adapter(ISiteRoot, IHTTPRequest)\n+class GroupPortletNamespace:\n+    """Used to traverse to a group portlet assignable"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, group = name.split(\'+\')\n+        col, group = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[GROUP_CATEGORY]\n         manager = category.get(group, None)\n         if manager is None:\n-            manager = category[group] = PortletAssignmentMapping(manager=col,\n-                                                                 category=GROUP_CATEGORY,\n-                                                                 name=group)\n+            manager = category[group] = PortletAssignmentMapping(\n+                manager=col, category=GROUP_CATEGORY, name=group\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = GROUP_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = group\n \n         return manager\n \n+\n @implementer(ITraversable)\n-class ContentTypePortletNamespace(object):\n-    """Used to traverse to a content type portlet assignable\n-    """\n-    adapts(ISiteRoot, IHTTPRequest)\n+@adapter(ISiteRoot, IHTTPRequest)\n+class ContentTypePortletNamespace:\n+    """Used to traverse to a content type portlet assignable"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, pt = name.split(\'+\')\n+        col, pt = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[CONTENT_TYPE_CATEGORY]\n         manager = category.get(pt, None)\n         if manager is None:\n             manager = category[pt] = PortletAssignmentMapping(\n-                manager=col, category=CONTENT_TYPE_CATEGORY, name=pt)\n+                manager=col, category=CONTENT_TYPE_CATEGORY, name=pt\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = CONTENT_TYPE_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = pt\n \n         return manager\ndiff --git a/plone/app/portlets/browser/utils.py b/plone/app/portlets/browser/utils.py\nindex 073f113a..c86749f8 100644\n--- a/plone/app/portlets/browser/utils.py\n+++ b/plone/app/portlets/browser/utils.py\n@@ -1,32 +1,30 @@\n-# -*- coding: utf-8 -*-\n-from Products.Five import BrowserView\n-from zope.component import getUtility, getMultiAdapter\n-\n+from plone.app.portlets.interfaces import IDeferredPortletRenderer\n+from plone.app.portlets.utils import assignment_from_key\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.utils import unhashPortletInfo\n-\n-from plone.app.portlets.interfaces import IDeferredPortletRenderer\n-from plone.app.portlets.utils import assignment_from_key\n+from Products.Five import BrowserView\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class PortletUtilities(BrowserView):\n-\n     def render_portlet(self, portlethash, **kw):\n         # Prepare the portlet and render the data\n         info = unhashPortletInfo(portlethash)\n-        manager = getUtility(IPortletManager, info[\'manager\'])\n+        manager = getUtility(IPortletManager, info["manager"])\n \n-        assignment = assignment_from_key(context=self.context,\n-                                         manager_name=info[\'manager\'],\n-                                         category=info[\'category\'],\n-                                         key=info[\'key\'],\n-                                         name=info[\'name\'])\n+        assignment = assignment_from_key(\n+            context=self.context,\n+            manager_name=info["manager"],\n+            category=info["category"],\n+            key=info["key"],\n+            name=info["name"],\n+        )\n         renderer = getMultiAdapter(\n-                (self.context, self.request, self,\n-                 manager, assignment.data),\n-                IPortletRenderer\n-            )\n+            (self.context, self.request, self, manager, assignment.data),\n+            IPortletRenderer,\n+        )\n \n         renderer.update()\n         if IDeferredPortletRenderer.providedBy(renderer):\ndiff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex 39f0e82d..56b42cb8 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -1,14 +1,12 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n from zope import component\n \n-import six\n-\n \n def get_language(context, request):\n     portal_state = component.getMultiAdapter(\n-        (context, request), name=u\'plone_portal_state\')\n+        (context, request), name="plone_portal_state"\n+    )\n     return portal_state.locale().getLocaleID()\n \n \n@@ -28,16 +26,19 @@ def render_cachekey(fun, self):\n \n     def add(brain):\n         path = brain.getPath()\n-        return "%s\\n%s\\n\\n" % (path, brain.modified)\n+        return f"{path}\\n{brain.modified}\\n\\n"\n \n     fingerprint = "".join(map(add, self._data()))\n \n-    anonymous = getToolByName(context, \'portal_membership\').isAnonymousUser()\n-\n-    return "".join((\n-        getToolByName(aq_inner(self.context), \'portal_url\')(),\n-        str(get_language(aq_inner(self.context), self.request)),\n-        str(anonymous),\n-        self.manager.__name__,\n-        self.data.__name__,\n-        fingerprint))\n+    anonymous = getToolByName(context, "portal_membership").isAnonymousUser()\n+\n+    return "".join(\n+        (\n+            getToolByName(aq_inner(self.context), "portal_url")(),\n+            str(get_language(aq_inner(self.context), self.request)),\n+            str(anonymous),\n+            self.manager.__name__,\n+            self.data.__name__,\n+            fingerprint,\n+        )\n+    )\ndiff --git a/plone/app/portlets/checker.py b/plone/app/portlets/checker.py\nindex 50a2e267..274deeef 100644\n--- a/plone/app/portlets/checker.py\n+++ b/plone/app/portlets/checker.py\n@@ -1,21 +1,17 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n+from AccessControl import getSecurityManager\n+from AccessControl import Unauthorized\n+from Acquisition import aq_inner\n from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-\n-from AccessControl import getSecurityManager, Unauthorized\n-from Acquisition import aq_inner\n+from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from zope.component import adapter\n+from zope.interface import implementer\n \n \n @implementer(IPortletPermissionChecker)\n-class DefaultPortletPermissionChecker(object):\n-    adapts(IPortletAssignmentMapping)\n-\n+@adapter(IPortletAssignmentMapping)\n+class DefaultPortletPermissionChecker:\n     def __init__(self, context):\n         self.context = context\n \n@@ -30,9 +26,8 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n-class UserPortletPermissionChecker(object):\n-    adapts(IUserPortletAssignmentMapping)\n-\n+@adapter(IUserPortletAssignmentMapping)\n+class UserPortletPermissionChecker:\n     def __init__(self, context):\n         self.context = context\n \n@@ -52,9 +47,8 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n-class GroupDashboardPortletPermissionChecker(object):\n-    adapts(IGroupDashboardPortletAssignmentMapping)\n-\n+@adapter(IGroupDashboardPortletAssignmentMapping)\n+class GroupDashboardPortletPermissionChecker:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/portlets/dashboard.py b/plone/app/portlets/dashboard.py\nindex 0bdc9db9..cf1cce8e 100644\n--- a/plone/app/portlets/dashboard.py\n+++ b/plone/app/portlets/dashboard.py\n@@ -1,23 +1,17 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts, queryUtility\n-\n-from zope.container.interfaces import INameChooser\n-\n-from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.constants import USER_CATEGORY\n-\n-from plone.app.portlets.interfaces import IDefaultDashboard\n from plone.app.portlets import portlets\n-\n+from plone.app.portlets.interfaces import IDefaultDashboard\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletManager\n+from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n+from zope.component import adapter\n+from zope.component import queryUtility\n+from zope.container.interfaces import INameChooser\n+from zope.interface import implementer\n \n \n def new_user(principal, event):\n-    """Initialise the dashboard for a new user\n-    """\n+    """Initialise the dashboard for a new user"""\n     defaults = IDefaultDashboard(principal, None)\n     if defaults is None:\n         return\n@@ -25,7 +19,12 @@ def new_user(principal, event):\n     userid = principal.getId()\n     portlets = defaults()\n \n-    for name in (\'plone.dashboard1\', \'plone.dashboard2\', \'plone.dashboard3\', \'plone.dashboard4\'):\n+    for name in (\n+        "plone.dashboard1",\n+        "plone.dashboard2",\n+        "plone.dashboard3",\n+        "plone.dashboard4",\n+    ):\n         assignments = portlets.get(name)\n         if assignments:\n             column = queryUtility(IPortletManager, name=name)\n@@ -34,27 +33,26 @@ def new_user(principal, event):\n                 if category is not None:\n                     manager = category.get(userid, None)\n                     if manager is None:\n-                        manager = category[userid] = UserPortletAssignmentMapping(manager=name,\n-                                                                                  category=USER_CATEGORY,\n-                                                                                  name=userid)\n+                        manager = category[userid] = UserPortletAssignmentMapping(\n+                            manager=name, category=USER_CATEGORY, name=userid\n+                        )\n                     chooser = INameChooser(manager)\n                     for assignment in assignments:\n                         manager[chooser.chooseName(None, assignment)] = assignment\n \n \n @implementer(IDefaultDashboard)\n-class DefaultDashboard(object):\n-    """The default default dashboard.\n-    """\n-    adapts(IPropertiedUser)\n+@adapter(IPropertiedUser)\n+class DefaultDashboard:\n+    """The default default dashboard."""\n \n     def __init__(self, principal):\n         self.principal = principal\n \n     def __call__(self):\n         return {\n-            \'plone.dashboard1\': (portlets.news.Assignment(), ),\n-            \'plone.dashboard2\': (portlets.recent.Assignment(), ),\n-            \'plone.dashboard3\': (),\n-            \'plone.dashboard4\': (portlets.review.Assignment(), ),\n+            "plone.dashboard1": (portlets.news.Assignment(),),\n+            "plone.dashboard2": (portlets.recent.Assignment(),),\n+            "plone.dashboard3": (),\n+            "plone.dashboard4": (portlets.review.Assignment(),),\n         }\ndiff --git a/plone/app/portlets/exportimport/__init__.py b/plone/app/portlets/exportimport/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/portlets/exportimport/__init__.py\n+++ b/plone/app/portlets/exportimport/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/portlets/exportimport/interfaces.py b/plone/app/portlets/exportimport/interfaces.py\nindex 351072ce..a2389449 100644\n--- a/plone/app/portlets/exportimport/interfaces.py\n+++ b/plone/app/portlets/exportimport/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 570e93af..f0e30a51 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n In ``portlets.xml`` you can register various objects.\n \n@@ -75,10 +74,12 @@\n .. These docs are used in http://docs.plone.org/develop/addons/components/genericsetup.html\n .. original content from http://www.sixfeetup.com/company/technologies/plone-content-management-new/quick-reference-cards/swag/swag-images-files/generic_setup.pdf\n \n-"""  # noqa\n+"""\n \n from operator import attrgetter\n-from plone.app.portlets.exportimport.interfaces import IPortletAssignmentExportImportHandler\n+from plone.app.portlets.exportimport.interfaces import (\n+    IPortletAssignmentExportImportHandler,\n+)\n from plone.app.portlets.interfaces import IDefaultPortletManager\n from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.app.portlets.utils import assignment_mapping_from_key\n@@ -96,11 +97,12 @@\n from plone.portlets.registration import PortletType\n from plone.portlets.storage import PortletCategoryMapping\n from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.interfaces import IComponentsHandlerBlacklist\n from Products.GenericSetup.interfaces import ISetupEnviron\n from Products.GenericSetup.utils import _getDottedName\n from Products.GenericSetup.utils import _resolveDottedName\n from Products.GenericSetup.utils import XMLAdapterBase\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getSiteManager\n from zope.component import getUtilitiesFor\n from zope.component import getUtility\n@@ -113,47 +115,37 @@\n from zope.interface import Interface\n from zope.interface import providedBy\n from zope.interface.interfaces import IComponentRegistry\n+from zope.schema import Bool\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IFromUnicode\n \n-import six\n-\n \n def dummyGetId():\n-    return \'\'\n-\n+    return ""\n \n-HAS_BLACKLIST = True\n-try:\n-    from Products.GenericSetup.interfaces import IComponentsHandlerBlacklist\n-except ImportError:\n-    HAS_BLACKLIST = False\n \n-if HAS_BLACKLIST:\n-\n-    @implementer(IComponentsHandlerBlacklist)\n-    class Blacklist(object):\n-\n-        def getExcludedInterfaces(self):\n-            return (_getDottedName(IPortletType),\n-                    _getDottedName(IPortletManager),\n-                    _getDottedName(IPortletManagerRenderer),\n-                    )\n+@implementer(IComponentsHandlerBlacklist)\n+class Blacklist:\n+    def getExcludedInterfaces(self):\n+        return (\n+            _getDottedName(IPortletType),\n+            _getDottedName(IPortletManager),\n+            _getDottedName(IPortletManagerRenderer),\n+        )\n \n \n @implementer(IPortletAssignmentExportImportHandler)\n-class PropertyPortletAssignmentExportImportHandler(object):\n-    """Import portlet assignment settings based on zope.schema properties\n-    """\n-    adapts(Interface)\n+@adapter(Interface)\n+class PropertyPortletAssignmentExportImportHandler:\n+    """Import portlet assignment settings based on zope.schema properties"""\n \n     def __init__(self, assignment):\n         self.assignment = assignment\n \n     def import_assignment(self, interface, node):\n         for child in node.childNodes:\n-            if child.nodeName == \'property\':\n+            if child.nodeName == "property":\n                 self.import_node(interface, child)\n \n     def export_assignment(self, interface, doc, node):\n@@ -169,9 +161,8 @@ def export_assignment(self, interface, doc, node):\n     # Helper methods\n \n     def import_node(self, interface, child):\n-        """Import a single <property /> node\n-        """\n-        property_name = child.getAttribute(\'name\')\n+        """Import a single <property /> node"""\n+        property_name = child.getAttribute("name")\n \n         __traceback_info__ = "Property name: " + property_name\n \n@@ -189,7 +180,7 @@ def import_node(self, interface, child):\n             value_type = field.value_type\n             value = []\n             for element in child.childNodes:\n-                if element.nodeName != \'element\':\n+                if element.nodeName != "element":\n                     continue\n                 element_value = self.extract_text(element)\n                 value.append(self.from_unicode(value_type, element_value))\n@@ -198,10 +189,10 @@ def import_node(self, interface, child):\n         # Otherwise, just get the value of the <property /> node\n         else:\n             value = self.extract_text(child)\n-            if not (field.getName() == \'root\' and value in [\'\', \'/\']):\n+            if not (field.getName() == "root" and value in ["", "/"]):\n                 value = self.from_unicode(field, value)\n \n-        if field.getName() == \'root\' and value in [\'\', \'/\']:\n+        if field.getName() == "root" and value in ["", "/"]:\n             # these valid values don\'t pass validation of SearchableTextSourceBinder\n             field.set(self.assignment, value)\n         else:\n@@ -209,49 +200,48 @@ def import_node(self, interface, child):\n             field.set(self.assignment, value)\n \n     def export_field(self, doc, field):\n-        """Turn a zope.schema field into a node and return it\n-        """\n+        """Turn a zope.schema field into a node and return it"""\n         field = field.bind(self.assignment)\n         value = field.get(self.assignment)\n \n-        child = doc.createElement(\'property\')\n-        child.setAttribute(\'name\', field.__name__)\n+        child = doc.createElement("property")\n+        child.setAttribute("name", field.__name__)\n \n         if value is not None:\n             if ICollection.providedBy(field):\n                 for e in value:\n-                    list_element = doc.createElement(\'element\')\n+                    list_element = doc.createElement("element")\n                     list_element.appendChild(doc.createTextNode(str(e)))\n                     child.appendChild(list_element)\n             else:\n-                child.appendChild(doc.createTextNode(six.text_type(value)))\n+                child.appendChild(doc.createTextNode(str(value)))\n \n         return child\n \n     def extract_text(self, node):\n         node.normalize()\n-        text = u""\n+        text = ""\n         for child in node.childNodes:\n-            if child.nodeType == node.TEXT_NODE or child.nodeType == node.CDATA_SECTION_NODE:\n+            if (\n+                child.nodeType == node.TEXT_NODE\n+                or child.nodeType == node.CDATA_SECTION_NODE\n+            ):\n                 text += child.nodeValue\n         return text\n \n     def from_unicode(self, field, value):\n-\n         # XXX: Bool incorrectly omits to declare that it implements\n         # IFromUnicode, even though it does.\n-        import zope.schema\n-        if IFromUnicode.providedBy(field) or isinstance(field, zope.schema.Bool):\n+        if IFromUnicode.providedBy(field) or isinstance(field, Bool):\n             return field.fromUnicode(value)\n-        else:\n-            return self.field_typecast(field, value)\n+        return self.field_typecast(field, value)\n \n     def field_typecast(self, field, value):\n         # A slight hack to force sequence types to the right type\n-        typecast = getattr(field, \'_type\', None)\n+        typecast = getattr(field, "_type", None)\n         if typecast is not None:\n             if not isinstance(typecast, (list, tuple)):\n-                typecast = (typecast, )\n+                typecast = (typecast,)\n             for tc in reversed(typecast):\n                 if callable(tc):\n                     try:\n@@ -263,36 +253,33 @@ def field_typecast(self, field, value):\n \n \n @implementer(IBody)\n+@adapter(IComponentRegistry, ISetupEnviron)\n class PortletsXMLAdapter(XMLAdapterBase):\n-    """In- and exporter for a local portlet configuration\n-    """\n-    adapts(IComponentRegistry, ISetupEnviron)\n+    """In- and exporter for a local portlet configuration"""\n \n-    name = \'portlets\'\n-    _LOGGER_ID = \'portlets\'\n+    name = "portlets"\n+    _LOGGER_ID = "portlets"\n \n     #\n     # Main control flow\n     #\n \n     def _exportNode(self):\n-        """Export portlet managers and portlet types\n-        """\n-        node = self._doc.createElement(\'portlets\')\n+        """Export portlet managers and portlet types"""\n+        node = self._doc.createElement("portlets")\n         node.appendChild(self._extractPortlets())\n-        self._logger.info(\'Portlets exported\')\n+        self._logger.info("Portlets exported")\n         return node\n \n     def _importNode(self, node):\n-        """Import portlet managers, portlet types and portlet assignments\n-        """\n+        """Import portlet managers, portlet types and portlet assignments"""\n         self._initProvider(node)\n-        self._logger.info(\'Portlets imported\')\n+        self._logger.info("Portlets imported")\n \n     def _initProvider(self, node):\n         purge = self.environ.shouldPurge()\n-        if node.hasAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.hasAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n         if purge:\n             self._purgePortlets()\n         self._initPortlets(node)\n@@ -308,8 +295,11 @@ def _purgePortlets(self):\n \n         # Purge portlet types\n \n-        registeredPortletTypes = [r.name for r in self.context.registeredUtilities()\n-                                        if r.provided == IPortletType]\n+        registeredPortletTypes = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n \n         for name, portletType in getUtilitiesFor(IPortletType):\n             if name in registeredPortletTypes:\n@@ -319,7 +309,9 @@ def _purgePortlets(self):\n         site = self.environ.getSite()\n \n         for name, portletManager in getUtilitiesFor(IPortletManager):\n-            assignable = queryMultiAdapter((site, portletManager), IPortletAssignmentMapping)\n+            assignable = queryMultiAdapter(\n+                (site, portletManager), IPortletAssignmentMapping\n+            )\n             if assignable is not None:\n                 for key in list(assignable.keys()):\n                     del assignable[key]\n@@ -327,46 +319,47 @@ def _purgePortlets(self):\n         # Purge portlet manager registrations - this will also get rid of\n         # global portlet registrations, since these utilities disappear\n \n-        portletManagerRegistrations = [r for r in self.context.registeredUtilities()\n-                                        if r.provided.isOrExtends(IPortletManager)]\n+        portletManagerRegistrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n \n         for registration in portletManagerRegistrations:\n-            self.context.unregisterUtility(provided=registration.provided,\n-                                           name=registration.name)\n+            self.context.unregisterUtility(\n+                provided=registration.provided, name=registration.name\n+            )\n \n     #\n     # Importing\n     #\n \n     def _initPortlets(self, node):\n-        """Actually import portlet data\n-        """\n+        """Actually import portlet data"""\n         for child in node.childNodes:\n             # Portlet managers\n-            if child.nodeName.lower() == \'portletmanager\':\n+            if child.nodeName.lower() == "portletmanager":\n                 self._initPortletManagerNode(child)\n-            elif child.nodeName.lower() == \'portlet\':\n+            elif child.nodeName.lower() == "portlet":\n                 self._initPortletNode(child)\n             # Portlet assignments\n-            elif child.nodeName.lower() == \'assignment\':\n+            elif child.nodeName.lower() == "assignment":\n                 self._initAssignmentNode(child)\n             # Blacklisting (portlet blocking/unblocking)\n-            elif child.nodeName.lower() == \'blacklist\':\n+            elif child.nodeName.lower() == "blacklist":\n                 self._initBlacklistNode(child)\n \n     def _initPortletManagerNode(self, node):\n-        """Create a portlet manager from a node\n-        """\n-        name = str(node.getAttribute(\'name\'))\n+        """Create a portlet manager from a node"""\n+        name = str(node.getAttribute("name"))\n \n-        if node.hasAttribute(\'remove\'):\n-            if self._convertToBoolean(node.getAttribute(\'remove\')):\n-                self.context.unregisterUtility(provided=IPortletManager,\n-                                               name=name)\n+        if node.hasAttribute("remove"):\n+            if self._convertToBoolean(node.getAttribute("remove")):\n+                self.context.unregisterUtility(provided=IPortletManager, name=name)\n                 return\n \n-        if node.hasAttribute(\'purge\'):\n-            if self._convertToBoolean(node.getAttribute(\'purge\')):\n+        if node.hasAttribute("purge"):\n+            if self._convertToBoolean(node.getAttribute("purge")):\n                 manager = getUtility(IPortletManager, name=name)\n                 # remove global assignments\n                 for category in manager.keys():\n@@ -379,16 +372,19 @@ def _initPortletManagerNode(self, node):\n                     del mapping[portlet]\n                 return\n \n-        registeredPortletManagers = [r.name for r in self.context.registeredUtilities()\n-                                        if r.provided.isOrExtends(IPortletManager)]\n+        registeredPortletManagers = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n         if name not in registeredPortletManagers:\n-            managerClass = node.getAttribute(\'class\')\n+            managerClass = node.getAttribute("class")\n             if managerClass:\n                 manager = _resolveDottedName(managerClass)()\n             else:\n                 manager = PortletManager()\n \n-            managerType = node.getAttribute(\'type\')\n+            managerType = node.getAttribute("type")\n             if managerType:\n                 alsoProvides(manager, _resolveDottedName(managerType))\n \n@@ -396,55 +392,55 @@ def _initPortletManagerNode(self, node):\n             manager[GROUP_CATEGORY] = PortletCategoryMapping()\n             manager[CONTENT_TYPE_CATEGORY] = PortletCategoryMapping()\n \n-            self.context.registerUtility(component=manager,\n-                                         provided=IPortletManager,\n-                                         name=name)\n+            self.context.registerUtility(\n+                component=manager, provided=IPortletManager, name=name\n+            )\n \n     def _initPortletNode(self, node):\n-        """Create a portlet type from a node\n-        """\n+        """Create a portlet type from a node"""\n         registeredPortletTypes = [\n-          r.name for r in self.context.registeredUtilities() \\\n-                          if r.provided == IPortletType]\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n \n-        addview = str(node.getAttribute(\'addview\'))\n-        extend = node.hasAttribute(\'extend\')\n-        purge = node.hasAttribute(\'purge\')\n+        addview = str(node.getAttribute("addview"))\n+        extend = node.hasAttribute("extend")\n+        purge = node.hasAttribute("purge")\n \n-        #In certain cases, continue to the next node\n-        if node.hasAttribute(\'remove\'):\n+        # In certain cases, continue to the next node\n+        if node.hasAttribute("remove"):\n             self._removePortlet(name=addview)\n             return\n         if self._checkBasicPortletNodeErrors(node, registeredPortletTypes):\n             return\n \n-        #Retrieve or create the portlet type and determine the current list\n-        #of associated portlet manager interfaces (for_)\n+        # Retrieve or create the portlet type and determine the current list\n+        # of associated portlet manager interfaces (for_)\n         if extend:\n-            #To extend a portlet type that is registered, we modify the title\n-            #and description if provided by the profile.\n-            portlet = queryUtility(IPortletType, name = addview)\n-            if str(node.getAttribute(\'title\')):\n-                portlet.title = str(node.getAttribute(\'title\'))\n-            if str(node.getAttribute(\'description\')):\n-                portlet.description = str(node.getAttribute(\'description\'))\n+            # To extend a portlet type that is registered, we modify the title\n+            # and description if provided by the profile.\n+            portlet = queryUtility(IPortletType, name=addview)\n+            if str(node.getAttribute("title")):\n+                portlet.title = str(node.getAttribute("title"))\n+            if str(node.getAttribute("description")):\n+                portlet.description = str(node.getAttribute("description"))\n             for_ = portlet.for_\n             if for_ is None:\n                 for_ = []\n         else:\n-            #Otherwise, create a new portlet type with the correct attributes.\n+            # Otherwise, create a new portlet type with the correct attributes.\n             portlet = PortletType()\n-            portlet.title = str(node.getAttribute(\'title\'))\n-            portlet.description = str(node.getAttribute(\'description\'))\n+            portlet.title = str(node.getAttribute("title"))\n+            portlet.description = str(node.getAttribute("description"))\n             portlet.addview = addview\n             for_ = []\n \n-\n-        #Process the node\'s child "for" nodes to add or remove portlet\n-        #manager interface names to the for_ list\n+        # Process the node\'s child "for" nodes to add or remove portlet\n+        # manager interface names to the for_ list\n         for_ = self._modifyForList(node, for_)\n \n-        #Store the for_ attribute, with [IDefaultPortletManager] as the default\n+        # Store the for_ attribute, with [IDefaultPortletManager] as the default\n         if for_ == []:\n             for_ = [IDefaultPortletManager]\n         portlet.for_ = for_\n@@ -452,41 +448,38 @@ def _initPortletNode(self, node):\n         if purge:\n             self._removePortlet(addview)\n         if not extend:\n-            self.context.registerUtility(component=portlet,\n-                                         provided=IPortletType,\n-                                         name=addview)\n+            self.context.registerUtility(\n+                component=portlet, provided=IPortletType, name=addview\n+            )\n \n     def _initAssignmentNode(self, node):\n-        """Create an assignment from a node\n-        """\n+        """Create an assignment from a node"""\n         site = self.environ.getSite()\n \n         # 1. Determine the assignment mapping and the name\n-        manager = node.getAttribute(\'manager\')\n-        category = node.getAttribute(\'category\')\n-        key = node.getAttribute(\'key\')\n+        manager = node.getAttribute("manager")\n+        category = node.getAttribute("category")\n+        key = node.getAttribute("key")\n         # convert unicode to str as unicode paths are not allowed in\n         # restrictedTraverse called in assignment_mapping_from_key\n-        if six.PY2:\n-            key = key.encode()\n \n         purge = False\n-        if node.hasAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.hasAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n \n         mapping = assignment_mapping_from_key(site, manager, category, key, create=True)\n \n         # 2. Either find or create the assignment\n \n         assignment = None\n-        name = node.getAttribute(\'name\')\n+        name = node.getAttribute("name")\n         if name:\n             name = str(name)\n             assignment = mapping.get(name, None)\n \n         __traceback_info__ = "Assignment name: " + name\n \n-        if node.hasAttribute(\'remove\'):\n+        if node.hasAttribute("remove"):\n             if assignment is not None:\n                 del mapping[name]\n             return\n@@ -496,7 +489,7 @@ def _initAssignmentNode(self, node):\n                 del mapping[portlet]\n             return\n \n-        type_ = str(node.getAttribute(\'type\'))\n+        type_ = str(node.getAttribute("type"))\n \n         if assignment is None:\n             portlet_factory = getUtility(IFactory, name=type_)\n@@ -512,10 +505,10 @@ def _initAssignmentNode(self, node):\n         assignment = assignment.__of__(site)\n \n         # set visibility setting\n-        visible = node.getAttribute(\'visible\')\n+        visible = node.getAttribute("visible")\n         if visible:\n             settings = IPortletAssignmentSettings(assignment)\n-            settings[\'visible\'] = self._convertToBoolean(visible)\n+            settings["visible"] = self._convertToBoolean(visible)\n \n         # 3. Use an adapter to update the portlet settings\n \n@@ -525,7 +518,7 @@ def _initAssignmentNode(self, node):\n \n         # 4. Handle ordering\n \n-        insert_before = node.getAttribute(\'insert-before\')\n+        insert_before = node.getAttribute("insert-before")\n         if insert_before:\n             position = None\n             keys = list(mapping.keys())\n@@ -541,18 +534,17 @@ def _initAssignmentNode(self, node):\n                 mapping.updateOrder(keys)\n \n     def _initBlacklistNode(self, node):\n-        """Create a blacklisting from a node\n-        """\n+        """Create a blacklisting from a node"""\n         site = self.environ.getSite()\n \n-        manager = node.getAttribute(\'manager\')\n-        category = node.getAttribute(\'category\')\n-        location = str(node.getAttribute(\'location\'))\n-        status = node.getAttribute(\'status\')\n+        manager = node.getAttribute("manager")\n+        category = node.getAttribute("category")\n+        location = str(node.getAttribute("location"))\n+        status = node.getAttribute("status")\n \n         manager = getUtility(IPortletManager, name=manager)\n \n-        if location.startswith(\'/\'):\n+        if location.startswith("/"):\n             location = location[1:]\n \n         item = site.unrestrictedTraverse(location, None)\n@@ -561,34 +553,40 @@ def _initBlacklistNode(self, node):\n \n         assignable = queryMultiAdapter((item, manager), ILocalPortletAssignmentManager)\n \n-        if status.lower() == \'block\':\n+        if status.lower() == "block":\n             assignable.setBlacklistStatus(category, True)\n-        elif status.lower() == \'show\':\n+        elif status.lower() == "show":\n             assignable.setBlacklistStatus(category, False)\n-        elif status.lower() == \'acquire\':\n+        elif status.lower() == "acquire":\n             assignable.setBlacklistStatus(category, None)\n \n-\n     #\n     # Exporting\n     #\n \n     def _extractPortlets(self):\n-        """Write portlet managers and types to XML\n-        """\n+        """Write portlet managers and types to XML"""\n         fragment = self._doc.createDocumentFragment()\n         site = self.environ.getSite()\n \n-        registeredPortletTypes = [r.name for r in self.context.registeredUtilities()\n-                                            if r.provided == IPortletType]\n-        portletManagerRegistrations = [r for r in self.context.registeredUtilities()\n-                                            if r.provided.isOrExtends(IPortletManager)]\n-\n-        portletSchemata = dict([(iface, name) for name, iface in getUtilitiesFor(IPortletTypeInterface)])\n+        registeredPortletTypes = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n+        portletManagerRegistrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n+\n+        portletSchemata = {\n+            iface: name for name, iface in getUtilitiesFor(IPortletTypeInterface)\n+        }\n \n         # Export portlet manager registrations\n \n-        for r in sorted(portletManagerRegistrations, key=attrgetter(\'name\')):\n+        for r in sorted(portletManagerRegistrations, key=attrgetter("name")):\n             fragment.appendChild(self._extractPortletManagerNode(r))\n \n         # Export portlet type registrations\n@@ -606,18 +604,18 @@ def extractMapping(manager_name, category, key, mapping):\n                         break\n \n                 if type_ is not None:\n-                    child = self._doc.createElement(\'assignment\')\n-                    child.setAttribute(\'manager\', manager_name)\n-                    child.setAttribute(\'category\', category)\n-                    child.setAttribute(\'key\', key)\n-                    child.setAttribute(\'type\', type_)\n-                    child.setAttribute(\'name\', name)\n+                    child = self._doc.createElement("assignment")\n+                    child.setAttribute("manager", manager_name)\n+                    child.setAttribute("category", category)\n+                    child.setAttribute("key", key)\n+                    child.setAttribute("type", type_)\n+                    child.setAttribute("name", name)\n \n                     assignment = assignment.__of__(mapping)\n \n                     settings = IPortletAssignmentSettings(assignment)\n-                    visible = settings.get(\'visible\', True)\n-                    child.setAttribute(\'visible\', repr(visible))\n+                    visible = settings.get("visible", True)\n+                    child.setAttribute("visible", repr(visible))\n \n                     handler = IPortletAssignmentExportImportHandler(assignment)\n                     handler.export_assignment(schema, self._doc, child)\n@@ -630,31 +628,37 @@ def extractMapping(manager_name, category, key, mapping):\n                     mapping = mapping.__of__(site)\n                     extractMapping(manager_name, category, key, mapping)\n \n-\n         # Export assignments at the root of the portal (only)\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n             mapping = queryMultiAdapter((site, manager), IPortletAssignmentMapping)\n             mapping = mapping.__of__(site)\n-            extractMapping(manager_name, CONTEXT_CATEGORY, u"/", mapping)\n+            extractMapping(manager_name, CONTEXT_CATEGORY, "/", mapping)\n \n         # Export blacklistings in the portal root\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n-            assignable = queryMultiAdapter((site, manager), ILocalPortletAssignmentManager)\n+            assignable = queryMultiAdapter(\n+                (site, manager), ILocalPortletAssignmentManager\n+            )\n             if assignable is None:\n                 continue\n-            for category in (USER_CATEGORY, GROUP_CATEGORY, CONTENT_TYPE_CATEGORY, CONTEXT_CATEGORY):\n-                child = self._doc.createElement(\'blacklist\')\n-                child.setAttribute(\'manager\', manager_name)\n-                child.setAttribute(\'category\', category)\n-                child.setAttribute(\'location\', u"/")\n+            for category in (\n+                USER_CATEGORY,\n+                GROUP_CATEGORY,\n+                CONTENT_TYPE_CATEGORY,\n+                CONTEXT_CATEGORY,\n+            ):\n+                child = self._doc.createElement("blacklist")\n+                child.setAttribute("manager", manager_name)\n+                child.setAttribute("category", category)\n+                child.setAttribute("location", "/")\n \n                 status = assignable.getBlacklistStatus(category)\n                 if status == True:\n-                    child.setAttribute(\'status\', u\'block\')\n+                    child.setAttribute("status", "block")\n                 elif status == False:\n-                    child.setAttribute(\'status\', u\'show\')\n+                    child.setAttribute("status", "show")\n                 else:\n-                    child.setAttribute(\'status\', u\'acquire\')\n+                    child.setAttribute("status", "acquire")\n \n                 fragment.appendChild(child)\n \n@@ -662,31 +666,31 @@ def extractMapping(manager_name, category, key, mapping):\n \n     def _extractPortletManagerNode(self, portletManagerRegistration):\n         r = portletManagerRegistration\n-        child = self._doc.createElement(\'portletmanager\')\n+        child = self._doc.createElement("portletmanager")\n         if r.component.__class__ is not PortletManager:\n-            child.setAttribute(\'class\', _getDottedName(r.component.__class__))\n-        child.setAttribute(\'name\', r.name)\n+            child.setAttribute("class", _getDottedName(r.component.__class__))\n+        child.setAttribute("name", r.name)\n \n         specificInterface = next(providedBy(r.component).flattened())\n         if specificInterface != IPortletManager:\n-            child.setAttribute(\'type\', _getDottedName(specificInterface))\n+            child.setAttribute("type", _getDottedName(specificInterface))\n \n         return child\n \n     def _extractPortletNode(self, name, portletType):\n-        child = self._doc.createElement(\'portlet\')\n-        child.setAttribute(\'addview\', portletType.addview)\n-        child.setAttribute(\'title\', portletType.title)\n-        child.setAttribute(\'description\', portletType.description)\n+        child = self._doc.createElement("portlet")\n+        child.setAttribute("addview", portletType.addview)\n+        child.setAttribute("title", portletType.title)\n+        child.setAttribute("description", portletType.description)\n \n         for_ = portletType.for_\n-        #BBB\n+        # BBB\n \n         # [Interface] is previous default value\n         if for_ and for_ not in ([IDefaultPortletManager], [Interface]):\n             for i in for_:\n-                subNode = self._doc.createElement(\'for\')\n-                subNode.setAttribute(\'interface\', _getDottedName(i))\n+                subNode = self._doc.createElement("for")\n+                subNode.setAttribute("interface", _getDottedName(i))\n                 child.appendChild(subNode)\n         return child\n \n@@ -695,22 +699,27 @@ def _extractPortletNode(self, name, portletType):\n     #\n \n     def _checkBasicPortletNodeErrors(self, node, registeredPortletTypes):\n-        addview = str(node.getAttribute(\'addview\'))\n-        extend = node.hasAttribute(\'extend\')\n-        purge = node.hasAttribute(\'purge\')\n+        addview = str(node.getAttribute("addview"))\n+        extend = node.hasAttribute("extend")\n+        purge = node.hasAttribute("purge")\n         exists = addview in registeredPortletTypes\n \n         if extend and purge:\n-            self._logger.warning(\'Cannot extend and purge the same \' \\\n-              \'portlet type %s!\' % addview)\n+            self._logger.warning(\n+                "Cannot extend and purge the same " "portlet type %s!" % addview\n+            )\n             return True\n         if extend and not exists:\n-            self._logger.warning(\'Cannot extend portlet type \' \\\n-              \'%s because it is not registered.\' % addview)\n+            self._logger.warning(\n+                "Cannot extend portlet type "\n+                "%s because it is not registered." % addview\n+            )\n             return True\n         if exists and not purge and not extend:\n-            self._logger.warning(\'Cannot register portlet type \' \\\n-              \'%s because it is already registered.\' % addview)\n+            self._logger.warning(\n+                "Cannot register portlet type "\n+                "%s because it is already registered." % addview\n+            )\n             return True\n \n         return False\n@@ -720,8 +729,10 @@ def _removePortlet(self, name):\n             self.context.unregisterUtility(provided=IPortletType, name=name)\n             return True\n         else:\n-            self._logger.warning(\'Unable to unregister portlet type \' \\\n-              \'%s because it is not registered.\' % name)\n+            self._logger.warning(\n+                "Unable to unregister portlet type "\n+                "%s because it is not registered." % name\n+            )\n             return False\n \n     def _modifyForList(self, node, for_):\n@@ -731,9 +742,9 @@ def _modifyForList(self, node, for_):\n         modified_for = [_getDottedName(i) for i in for_]\n \n         for subNode in node.childNodes:\n-            if subNode.nodeName.lower() == \'for\':\n-                interface_name = str(subNode.getAttribute(\'interface\'))\n-                if subNode.hasAttribute(\'remove\'):\n+            if subNode.nodeName.lower() == "for":\n+                interface_name = str(subNode.getAttribute("interface"))\n+                if subNode.hasAttribute("remove"):\n                     if interface_name in modified_for:\n                         modified_for.remove(interface_name)\n                 elif interface_name not in modified_for:\n@@ -742,18 +753,20 @@ def _modifyForList(self, node, for_):\n         if node.hasAttribute("for"):\n             raise InvalidPortletForDefinition(node)\n \n-        modified_for = [_resolveDottedName(name) for name in modified_for \\\n-          if _resolveDottedName(name) is not None]\n+        modified_for = [\n+            _resolveDottedName(name)\n+            for name in modified_for\n+            if _resolveDottedName(name) is not None\n+        ]\n \n         return modified_for\n \n \n def importPortlets(context):\n-    """Import portlet managers and portlets\n-    """\n+    """Import portlet managers and portlets"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'portlets\')\n+        logger = context.getLogger("portlets")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n@@ -761,21 +774,20 @@ def importPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    importer = queryMultiAdapter((sm, context), IBody, name=\'plone.portlets\')\n+    importer = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if importer:\n-        filename = \'%s%s\' % (importer.name, importer.suffix)\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n-            importer.filename = filename # for error reporting\n+            importer.filename = filename  # for error reporting\n             importer.body = body\n \n \n def exportPortlets(context):\n-    """Export portlet managers and portlets\n-    """\n+    """Export portlet managers and portlets"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'portlets\')\n+        logger = context.getLogger("portlets")\n         logger.info("Nothing to export.")\n         return\n \n@@ -783,9 +795,9 @@ def exportPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    exporter = queryMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+    exporter = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if exporter:\n-        filename = \'%s%s\' % (exporter.name, exporter.suffix)\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\n@@ -802,4 +814,6 @@ class InvalidPortletForDefinition(Exception):\n \n     def __init__(self, node):\n         node = node.toxml()\n-        self.args = [self.message % node, ]\n+        self.args = [\n+            self.message % node,\n+        ]\ndiff --git a/plone/app/portlets/interfaces.py b/plone/app/portlets/interfaces.py\nindex 47babe76..bde17c68 100644\n--- a/plone/app/portlets/interfaces.py\n+++ b/plone/app/portlets/interfaces.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface\n-\n+from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n+from zope.interface import Interface\n \n \n class IPortletTypeInterface(Interface):\n@@ -15,13 +13,11 @@ class IPortletTypeInterface(Interface):\n \n \n class IUserPortletAssignmentMapping(IPortletAssignmentMapping):\n-    """A portlet assignment mapping that\'s user-specific\n-    """\n+    """A portlet assignment mapping that\'s user-specific"""\n \n \n class IGroupDashboardPortletAssignmentMapping(IPortletAssignmentMapping):\n-    """Group portlets storage. Has its own security checker.\n-    """\n+    """Group portlets storage. Has its own security checker."""\n \n \n class IPortletPermissionChecker(Interface):\n@@ -36,8 +32,7 @@ def __call__():\n \n \n class IDefaultPortletManager(IPortletManager):\n-    """Default registration for portlets\n-    """\n+    """Default registration for portlets"""\n \n \n class IColumn(IDefaultPortletManager):\n@@ -61,12 +56,14 @@ class IRightColumn(IColumn):\n     Normally, you will register portlets for IColumn instead.\n     """\n \n+\n class IFooter(IColumn):\n     """The footer\n \n     Normally, you will register portlets for IColumn instead.\n     """\n \n+\n class IDashboard(IDefaultPortletManager, IPlacelessPortletManager):\n     """Common base class for dashboard columns\n \n@@ -123,4 +120,4 @@ def __call__(self):\n \n \n class ITopbarManagePortlets(Interface):\n-    pass\n\\ No newline at end of file\n+    pass\ndiff --git a/plone/app/portlets/manager.py b/plone/app/portlets/manager.py\nindex 786cf8eb..e7f3e943 100644\n--- a/plone/app/portlets/manager.py\n+++ b/plone/app/portlets/manager.py\n@@ -1,43 +1,51 @@\n-# -*- coding: utf-8 -*-\n-import logging\n-import sys\n-\n-from zope.component import adapts, getMultiAdapter\n+from Acquisition import aq_acquire\n+from Acquisition import aq_inner\n+from Acquisition import Explicit\n+from plone.app.portlets.interfaces import IColumn\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from ZODB.POSException import ConflictError\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserView\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from Acquisition import Explicit, aq_inner, aq_acquire\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from ZODB.POSException import ConflictError\n+import logging\n+import sys\n \n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n-from plone.app.portlets.interfaces import IColumn\n-from plone.app.portlets.interfaces import IDashboard\n \n-logger = logging.getLogger(\'portlets\')\n+logger = logging.getLogger("portlets")\n \n \n class PortletManagerRenderer(BasePortletManagerRenderer, Explicit):\n-    """A Zope 2 implementation of the default PortletManagerRenderer\n-    """\n+    """A Zope 2 implementation of the default PortletManagerRenderer"""\n \n     def _dataToPortlet(self, data):\n         """Helper method to get the correct IPortletRenderer for the given\n         data object.\n         """\n-        portlet = getMultiAdapter((self.context, self.request, self.__parent__,\n-                                  self.manager, data, ), IPortletRenderer)\n+        portlet = getMultiAdapter(\n+            (\n+                self.context,\n+                self.request,\n+                self.__parent__,\n+                self.manager,\n+                data,\n+            ),\n+            IPortletRenderer,\n+        )\n         return portlet\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n class ColumnPortletManagerRenderer(PortletManagerRenderer):\n-    """A renderer for the column portlets\n-    """\n-    adapts(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n-    template = ViewPageTemplateFile(\'browser/templates/column.pt\')\n-    error_message = ViewPageTemplateFile(\'browser/templates/error_message.pt\')\n+    """A renderer for the column portlets"""\n+\n+    template = ViewPageTemplateFile("browser/templates/column.pt")\n+    error_message = ViewPageTemplateFile("browser/templates/error_message.pt")\n \n     def _context(self):\n         return aq_inner(self.context)\n@@ -46,8 +54,15 @@ def base_url(self):\n         """If context is a default-page, return URL of folder, else\n         return URL of context.\n         """\n-        return str(getMultiAdapter((self._context(), self.request, ),\n-                                   name=u\'absolute_url\'))\n+        return str(\n+            getMultiAdapter(\n+                (\n+                    self._context(),\n+                    self.request,\n+                ),\n+                name="absolute_url",\n+            )\n+        )\n \n     def safe_render(self, portlet_renderer):\n         try:\n@@ -55,14 +70,13 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % self)\n-            aq_acquire(self, \'error_log\').raising(sys.exc_info())\n+            logger.exception("Error while rendering %r" % self)\n+            aq_acquire(self, "error_log").raising(sys.exc_info())\n             return self.error_message()\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n class DashboardPortletManagerRenderer(ColumnPortletManagerRenderer):\n-    """Render a column of the dashboard\n-    """\n+    """Render a column of the dashboard"""\n \n-    adapts(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n-    template = ViewPageTemplateFile(\'browser/templates/dashboard-column.pt\')\n+    template = ViewPageTemplateFile("browser/templates/dashboard-column.pt")\ndiff --git a/plone/app/portlets/metaconfigure.py b/plone/app/portlets/metaconfigure.py\nindex a5de87c4..2296c7cb 100644\n--- a/plone/app/portlets/metaconfigure.py\n+++ b/plone/app/portlets/metaconfigure.py\n@@ -1,31 +1,35 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface, alsoProvides\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from zope.publisher.interfaces.browser import IBrowserView\n-\n+from plone.app.portlets.browser.interfaces import IPortletAdding\n+from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n-\n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.browser.interfaces import IPortletAdding\n-\n+from Products.Five.browser.metaconfigure import page\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component.factory import Factory\n+from zope.component.interfaces import IFactory\n from zope.component.zcml import adapter\n from zope.component.zcml import utility\n+from zope.interface import alsoProvides\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserView\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from zope.component.interfaces import IFactory\n-from zope.component.factory import Factory\n-\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.Five.browser.metaconfigure import page\n \n # Keep track of which renderers we\'ve registered so that we can artifically\n # subclass them in portletRendererDirective. Yes, this is evil.\n _default_renderers = {}\n \n \n-def portletDirective(_context, name, interface, assignment, renderer, addview,\n-        view_permission=u"zope2.View", edit_permission="plone.app.portlets.ManageOwnPortlets", editview=None):\n+def portletDirective(\n+    _context,\n+    name,\n+    interface,\n+    assignment,\n+    renderer,\n+    addview,\n+    view_permission="zope2.View",\n+    edit_permission="plone.app.portlets.ManageOwnPortlets",\n+    editview=None,\n+):\n     """Register a portlet assignment type using typical options.\n \n     Portlets that consist of a simple assignment class deriving form\n@@ -45,17 +49,11 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     # again (in the GS handler)\n \n     alsoProvides(interface, IPortletTypeInterface)\n-    utility(_context,\n-            provides=IPortletTypeInterface,\n-            name=name,\n-            component=interface)\n+    utility(_context, provides=IPortletTypeInterface, name=name, component=interface)\n \n     # Register a factory\n \n-    utility(_context,\n-            provides=IFactory,\n-            name=name,\n-            component=Factory(assignment))\n+    utility(_context, provides=IFactory, name=name, component=Factory(assignment))\n \n     # Set permissions on the assignment class\n \n@@ -81,8 +79,18 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   provides="plone.portlets.interfaces.IPortletRenderer"\n     #   />\n \n-    adapter(_context, (renderer, ), provides=IPortletRenderer,\n-            for_=(Interface, IDefaultBrowserLayer, IBrowserView, IPortletManager, interface))\n+    adapter(\n+        _context,\n+        (renderer,),\n+        provides=IPortletRenderer,\n+        for_=(\n+            Interface,\n+            IDefaultBrowserLayer,\n+            IBrowserView,\n+            IPortletManager,\n+            interface,\n+        ),\n+    )\n     _default_renderers[interface] = renderer\n \n     # Register the adding view\n@@ -94,11 +102,13 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   permission="[edit_permission]"\n     #   />\n \n-    page(_context,\n-         for_=IPortletAdding,\n-         name=name,\n-         class_=addview,\n-         permission=edit_permission)\n+    page(\n+        _context,\n+        for_=IPortletAdding,\n+        name=name,\n+        class_=addview,\n+        permission=edit_permission,\n+    )\n \n     # Register the edit view, if applicable\n \n@@ -110,17 +120,26 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   />\n \n     if editview is not None:\n-        page(_context,\n-             for_=interface,\n-             name="edit",\n-             class_=editview,\n-             permission=edit_permission)\n-\n-\n-def portletRendererDirective(_context, portlet, class_=None, template=None,\n-        for_=Interface, layer=IDefaultBrowserLayer, view=IBrowserView, manager=IPortletManager):\n-    """Register a custom/override portlet renderer\n-    """\n+        page(\n+            _context,\n+            for_=interface,\n+            name="edit",\n+            class_=editview,\n+            permission=edit_permission,\n+        )\n+\n+\n+def portletRendererDirective(\n+    _context,\n+    portlet,\n+    class_=None,\n+    template=None,\n+    for_=Interface,\n+    layer=IDefaultBrowserLayer,\n+    view=IBrowserView,\n+    manager=IPortletManager,\n+):\n+    """Register a custom/override portlet renderer"""\n \n     if class_ is None and template is None:\n         raise TypeError("Either \'template\' or \'class\' must be given")\n@@ -132,12 +151,22 @@ def portletRendererDirective(_context, portlet, class_=None, template=None,\n         # Look up the default renderer for this portlet\n         base_class = _default_renderers.get(portlet, None)\n         if base_class is None:\n-            raise TypeError("Can\'t find default renderer for %s. "\n-                            "Perhaps the portlet has not been registered yet?" % portlet.__identifier__)\n+            raise TypeError(\n+                "Can\'t find default renderer for %s. "\n+                "Perhaps the portlet has not been registered yet?"\n+                % portlet.__identifier__\n+            )\n \n         # Generate a subclass with \'renderer\' using this template\n-        class_ = type("PortletRenderer from %s" % template.encode(\'UTF-8\'),\n-                            (base_class, ), {\'render\': ViewPageTemplateFile(template)})\n-\n-    adapter(_context, (class_, ), provides=IPortletRenderer,\n-                for_=(for_, layer, view, manager, portlet))\n+        class_ = type(\n+            "PortletRenderer from %s" % template.encode("UTF-8"),\n+            (base_class,),\n+            {"render": ViewPageTemplateFile(template)},\n+        )\n+\n+    adapter(\n+        _context,\n+        (class_,),\n+        provides=IPortletRenderer,\n+        for_=(for_, layer, view, manager, portlet),\n+    )\ndiff --git a/plone/app/portlets/metadirectives.py b/plone/app/portlets/metadirectives.py\nindex 3885b0fa..051bd9a2 100644\n--- a/plone/app/portlets/metadirectives.py\n+++ b/plone/app/portlets/metadirectives.py\n@@ -1,13 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface\n-\n+from plone.app.portlets import PloneMessageFactory as _\n+from plone.portlets.interfaces import IPortletManager\n from zope import schema\n from zope.configuration import fields as configuration_fields\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer, IBrowserView\n-from plone.portlets.interfaces import IPortletManager\n-\n-from plone.app.portlets import PloneMessageFactory as _\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserView\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n \n class IPortletDirective(Interface):\n@@ -18,63 +15,66 @@ class IPortletDirective(Interface):\n     """\n \n     name = schema.TextLine(\n-        title=_(u"Name"),\n-        description=_(u"A unique name for the portlet. Also used for its add view."),\n-        required=True)\n+        title=_("Name"),\n+        description=_("A unique name for the portlet. Also used for its add view."),\n+        required=True,\n+    )\n \n     interface = configuration_fields.GlobalInterface(\n-        title=_(u"Assignment type interface"),\n-        description=_(u"Should correspond to the public interface of the assignment"),\n-        required=True)\n+        title=_("Assignment type interface"),\n+        description=_("Should correspond to the public interface of the assignment"),\n+        required=True,\n+    )\n \n     assignment = configuration_fields.GlobalObject(\n-        title=_(u"Assignment class"),\n-        description=_(u"A persistent class storing the portlet assignment"),\n-        required=True)\n+        title=_("Assignment class"),\n+        description=_("A persistent class storing the portlet assignment"),\n+        required=True,\n+    )\n \n     view_permission = schema.TextLine(\n-        title=_(u"View permission"),\n-        description=_(u"Permission used for viewing the portlet."),\n+        title=_("View permission"),\n+        description=_("Permission used for viewing the portlet."),\n         required=False,\n-        default=u"zope2.View"\n-        )\n+        default="zope2.View",\n+    )\n \n     edit_permission = schema.TextLine(\n-        title=_(u"Edit permission"),\n-        description=_(u"Permission used for editing the portlet assignment."),\n+        title=_("Edit permission"),\n+        description=_("Permission used for editing the portlet assignment."),\n         required=False,\n-        default=u"plone.app.portlets.ManageOwnPortlets"\n-        )\n+        default="plone.app.portlets.ManageOwnPortlets",\n+    )\n \n     renderer = configuration_fields.GlobalObject(\n-        title=_(u"Renderer"),\n-        description=_(u"A class which renders the portlet data provider"),\n-        required=True\n-        )\n+        title=_("Renderer"),\n+        description=_("A class which renders the portlet data provider"),\n+        required=True,\n+    )\n \n     addview = configuration_fields.GlobalObject(\n-        title=_(u"Add view"),\n-        description=_(u"View used to add the assignment object"),\n-        required=True\n-        )\n+        title=_("Add view"),\n+        description=_("View used to add the assignment object"),\n+        required=True,\n+    )\n \n     editview = configuration_fields.GlobalObject(\n-        title=_(u"Edit view"),\n-        description=_(u"View used to edit the assignment object (if appropriate)"),\n-        required=False\n-        )\n+        title=_("Edit view"),\n+        description=_("View used to edit the assignment object (if appropriate)"),\n+        required=False,\n+    )\n \n \n class IPortletRendererDirective(Interface):\n-    """Register a portlet renderer, i.e. a different view of a portlet\n-    """\n+    """Register a portlet renderer, i.e. a different view of a portlet"""\n \n     # The portlet data provider type must be given\n \n     portlet = configuration_fields.GlobalObject(\n         title=_("Portlet data provider type for which this renderer is used"),\n         description=_("An interface or class"),\n-        required=True)\n+        required=True,\n+    )\n \n     # Use either class or template to specify the custom renderer\n \n@@ -82,13 +82,15 @@ class IPortletRendererDirective(Interface):\n         title=_("Class"),\n         description=_("A class acting as the renderer."),\n         required=False,\n-        )\n+    )\n \n     template = configuration_fields.Path(\n-        title=_(u"The name of a template that implements the renderer."),\n-        description=_(u"If given, the default renderer for this portlet will be used, but with this template"),\n-        required=False\n-        )\n+        title=_("The name of a template that implements the renderer."),\n+        description=_(\n+            "If given, the default renderer for this portlet will be used, but with this template"\n+        ),\n+        required=False,\n+    )\n \n     # Use these to discriminate the renderer.\n \n@@ -97,23 +99,25 @@ class IPortletRendererDirective(Interface):\n         description=_("""An interface or class"""),\n         required=False,\n         default=Interface,\n-        )\n+    )\n \n     layer = configuration_fields.GlobalObject(\n         title=_("Browser layer for which this renderer is used"),\n         description=_("""An interface or class"""),\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     view = configuration_fields.GlobalObject(\n         title=_("Browser view type for this this renderer is used"),\n         description=_("An interface or class"),\n         required=False,\n-        default=IBrowserView)\n+        default=IBrowserView,\n+    )\n \n     manager = configuration_fields.GlobalObject(\n         title=_("Portlet manager type for which this renderer is used"),\n         description=_("An interface or class"),\n         required=False,\n-        default=IPortletManager)\n+        default=IPortletManager,\n+    )\ndiff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex f45ebe46..6528f0c5 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer, Interface\n-from zope.component import adapts\n-\n-from Acquisition import aq_parent, aq_inner, aq_base\n-\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletContext\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-\n-from plone.portlets.interfaces import IPortletContext\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n-import six\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @implementer(IPortletContext)\n-class ContentContext(object):\n+@adapter(Interface)\n+class ContentContext:\n     """A portlet context for regular content items.\n \n     Note - we register this for Interface so that it can also work for\n     tools and other non-content items. This may hijack the context in non-CMF\n     contexts, but that is doubtfully going to be an issue.\n     """\n-    adapts(Interface)\n \n     def __init__(self, context):\n         self.context = context\n \n     @property\n     def uid(self):\n-        return \'/\'.join(self.context.getPhysicalPath())\n+        return "/".join(self.context.getPhysicalPath())\n \n     def getParent(self):\n         return aq_parent(aq_inner(self.context))\n@@ -49,7 +46,7 @@ def globalPortletCategories(self, placeless=False):\n         return cats\n \n     def _getUserId(self):\n-        membership = getToolByName(self.context, \'portal_membership\', None)\n+        membership = getToolByName(self.context, "portal_membership", None)\n         if membership is None:\n             return None\n \n@@ -72,7 +69,7 @@ def _getUserId(self):\n         return memberId\n \n     def _getGroupIds(self):\n-        membership = getToolByName(self.context, \'portal_membership\', None)\n+        membership = getToolByName(self.context, "portal_membership", None)\n         if membership is None or membership.isAnonymousUser():\n             return ()\n \n@@ -80,34 +77,33 @@ def _getGroupIds(self):\n         if not member:\n             return ()\n \n-        groups = hasattr(member, \'getGroups\') and member.getGroups() or []\n+        groups = hasattr(member, "getGroups") and member.getGroups() or []\n \n         # Ensure we get the list of ids - getGroups() suffers some acquision\n         # ambiguity - the Plone member-data version returns ids.\n \n         for group in groups:\n-            if not isinstance(group, (six.text_type, six.binary_type)):\n+            if not isinstance(group, (str, bytes)):\n                 return ()\n \n         return sorted(groups)\n \n     def _getContentType(self):\n-        typeInfo = getattr(aq_base(self.context), \'getTypeInfo\', None)\n+        typeInfo = getattr(aq_base(self.context), "getTypeInfo", None)\n         if typeInfo is not None:\n             fti = typeInfo()\n             if fti is not None:\n                 return fti.getId()\n-        portal_type = getattr(aq_base(self.context), \'portal_type\', None)\n+        portal_type = getattr(aq_base(self.context), "portal_type", None)\n         if portal_type is not None:\n             return portal_type\n         return None\n \n \n @implementer(IPortletContext)\n+@adapter(ISiteRoot)\n class PortalRootContext(ContentContext):\n-    """A portlet context for the site root.\n-    """\n-    adapts(ISiteRoot)\n+    """A portlet context for the site root."""\n \n     def __init__(self, context):\n         self.context = context\ndiff --git a/plone/app/portlets/portlets/__init__.py b/plone/app/portlets/portlets/__init__.py\nindex 4aa11c79..792d6005 100644\n--- a/plone/app/portlets/portlets/__init__.py\n+++ b/plone/app/portlets/portlets/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/portlets/portlets/actions.py b/plone/app/portlets/portlets/actions.py\nindex 723bc6dd..afb24374 100644\n--- a/plone/app/portlets/portlets/actions.py\n+++ b/plone/app/portlets/portlets/actions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n@@ -16,44 +15,45 @@ class IActionsPortlet(IPortletDataProvider):\n     """A portlet that shows an action category"""\n \n     ptitle = schema.TextLine(\n-        title=_(u\'label_title\',\n-                default=u"Title"),\n-        description=_(u\'help_title\',\n-                      default=u"Displayed title of this portlet"),\n-        default=u"",\n-        required=False)\n+        title=_("label_title", default="Title"),\n+        description=_("help_title", default="Displayed title of this portlet"),\n+        default="",\n+        required=False,\n+    )\n \n     show_title = schema.Bool(\n-        title=_(u\'label_show_title\',\n-                default=u"Show title"),\n-        description=_(u\'help_show_title\',\n-                      default=u"Show title of this portlet."),\n+        title=_("label_show_title", default="Show title"),\n+        description=_("help_show_title", default="Show title of this portlet."),\n         required=True,\n-        default=True)\n+        default=True,\n+    )\n \n     category = schema.Choice(\n-        title=_(u\'label_actions_category\',\n-                default=u"Actions category"),\n-        description=_(u\'help_actions_category\',\n-                      default=u"Select an action category"),\n+        title=_("label_actions_category", default="Actions category"),\n+        description=_("help_actions_category", default="Select an action category"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.Actions\')\n+        vocabulary="plone.app.vocabularies.Actions",\n+    )\n \n     show_icons = schema.Bool(\n-        title=_(u\'label_show_icons\',\n-                default=u"Show icons"),\n-        description=_(u\'help_show_icons\',\n-                      default=u"Show icons or default icon for actions without icon."),\n+        title=_("label_show_icons", default="Show icons"),\n+        description=_(\n+            "help_show_icons",\n+            default="Show icons or default icon for actions without icon.",\n+        ),\n         required=True,\n-        default=True)\n+        default=True,\n+    )\n \n     default_icon = schema.ASCIILine(\n-        title=_(u\'label_default_icon\',\n-                default=u"Default icon"),\n-        description=_(u\'help_default_icon\',\n-                      default=u"What icon we should use for actions with no specific icons. A 16*16 pixels image."),\n+        title=_("label_default_icon", default="Default icon"),\n+        description=_(\n+            "help_default_icon",\n+            default="What icon we should use for actions with no specific icons. A 16*16 pixels image.",\n+        ),\n         required=False,\n-        default=\'action_icon.png\')\n+        default="action_icon.png",\n+    )\n \n \n @implementer(IActionsPortlet)\n@@ -63,13 +63,20 @@ class Assignment(base.Assignment):\n     with columns.\n     """\n \n-    ptitle = u""\n+    ptitle = ""\n     show_title = True\n-    category = u""\n+    category = ""\n     show_icons = True\n-    default_icon = \'action_icon.png\'\n-\n-    def __init__(self, ptitle=u"", show_title=True, category=u"", show_icons=True, default_icon=\'action_icon.png\'):\n+    default_icon = "action_icon.png"\n+\n+    def __init__(\n+        self,\n+        ptitle="",\n+        show_title=True,\n+        category="",\n+        show_icons=True,\n+        default_icon="action_icon.png",\n+    ):\n         self.ptitle = ptitle\n         self.show_title = show_title\n         self.category = category\n@@ -82,13 +89,13 @@ def title(self):\n         """This property is used to give the title of the portlet in the\n         "manage portlets" screen.\n         """\n-        return _(u"Actions portlet") + \' "%s"\' % (self.ptitle or self.category)\n+        return _("Actions portlet") + \' "%s"\' % (self.ptitle or self.category)\n \n \n class Renderer(base.Renderer):\n     """Actions portlet renderer."""\n \n-    render = ViewPageTemplateFile(\'actions.pt\')\n+    render = ViewPageTemplateFile("actions.pt")\n \n     @property\n     def available(self):\n@@ -107,8 +114,9 @@ def showTitle(self):\n \n     def actionLinks(self):\n         """Features of action links"""\n-        return self.cachedLinks(self.data.category, self.data.default_icon,\n-                                self.data.show_icons)\n+        return self.cachedLinks(\n+            self.data.category, self.data.default_icon, self.data.show_icons\n+        )\n \n     @property\n     def category(self):\n@@ -116,8 +124,9 @@ def category(self):\n \n     @pm_view.memoize\n     def cachedLinks(self, actions_category, default_icon, show_icons):\n-        context_state = getMultiAdapter((aq_inner(self.context), self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         actions = context_state.actions(actions_category)\n \n         def render_icon(category, action_id, default):\n@@ -130,39 +139,40 @@ def render_icon(category, action_id, default):\n         if actions_category == "portal_tabs":\n             # Special case for portal_tabs (we rely on content in Plone root)\n             portal_tabs_view = getMultiAdapter(\n-                (self.context, self.context.REQUEST), name=\'portal_tabs_view\')\n+                (self.context, self.context.REQUEST), name="portal_tabs_view"\n+            )\n             actions = portal_tabs_view.topLevelTabs(actions=actions)\n             for action in actions:\n                 link = {\n-                    \'id\':action[\'id\'],\n-                    \'url\': action[\'url\'],\n-                    \'title\': action[\'name\'],\n-                    \'icon\': render_icon(\n-                        actions_category,\n-                        action,\n-                        default=default_icon)\n-                    }\n+                    "id": action["id"],\n+                    "url": action["url"],\n+                    "title": action["name"],\n+                    "icon": render_icon(actions_category, action, default=default_icon),\n+                }\n                 result.append(link)\n         else:\n-            if actions_category == \'object_buttons\':\n-                actions_tool = getMultiAdapter((aq_inner(self.context), self.request), name=u\'plone_tools\').actions()\n-                actions = actions_tool.listActionInfos(object=aq_inner(self.context), categories=(actions_category,))\n+            if actions_category == "object_buttons":\n+                actions_tool = getMultiAdapter(\n+                    (aq_inner(self.context), self.request), name="plone_tools"\n+                ).actions()\n+                actions = actions_tool.listActionInfos(\n+                    object=aq_inner(self.context), categories=(actions_category,)\n+                )\n             for action in actions:\n-                if not (action[\'available\']\n-                        and action[\'visible\']\n-                        and action[\'allowed\']\n-                        and action[\'url\']):\n+                if not (\n+                    action["available"]\n+                    and action["visible"]\n+                    and action["allowed"]\n+                    and action["url"]\n+                ):\n                     continue\n                 link = {\n-                    \'id\': action[\'id\'],\n-                    \'url\': action[\'url\'],\n-                    \'title\': action[\'title\'],\n-                    \'icon\': render_icon(\n-                        actions_category,\n-                        action,\n-                        default=default_icon),\n-                    \'modal\': action.get(\'modal\'),\n-                    }\n+                    "id": action["id"],\n+                    "url": action["url"],\n+                    "title": action["title"],\n+                    "icon": render_icon(actions_category, action, default=default_icon),\n+                    "modal": action.get("modal"),\n+                }\n                 result.append(link)\n         return result\n \n@@ -173,11 +183,13 @@ class AddForm(base.AddForm):\n     plone.autoform which fields to display. The create() method actually\n     constructs the assignment that is being added.\n     """\n+\n     schema = IActionsPortlet\n-    label = _(u\'heading_add_actions_portlet\',\n-              default=u\'Add actions portlet\')\n-    description = _(u\'help_add_actions_portlet\',\n-                    default=u\'An action portlet displays actions from a category\')\n+    label = _("heading_add_actions_portlet", default="Add actions portlet")\n+    description = _(\n+        "help_add_actions_portlet",\n+        default="An action portlet displays actions from a category",\n+    )\n \n     def create(self, data):\n         return Assignment(**data)\n@@ -189,4 +201,5 @@ class EditForm(base.EditForm):\n     This is registered with configure.zcml. The schema attribute tells\n     plone.autoform which fields to display.\n     """\n+\n     schema = IActionsPortlet\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex 12e5afe3..05840a15 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -1,5 +1,9 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n+\n+# Convenience imports\n+from plone.app.portlets.browser.formhelper import AddForm\n+from plone.app.portlets.browser.formhelper import EditForm\n+from plone.app.portlets.browser.formhelper import NullAddForm\n from plone.app.portlets.interfaces import IDeferredPortletRenderer\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletRenderer\n@@ -7,11 +11,6 @@\n from zope.container.contained import Contained\n from zope.interface import implementer\n \n-# Convenience imports\n-from plone.app.portlets.browser.formhelper import AddForm\n-from plone.app.portlets.browser.formhelper import NullAddForm\n-from plone.app.portlets.browser.formhelper import EditForm\n-\n \n @implementer(IPortletAssignment)\n class Assignment(SimpleItem, Contained):\n@@ -21,30 +20,28 @@ class Assignment(SimpleItem, Contained):\n     may\n     """\n \n-    __name__ = \'\'\n+    __name__ = ""\n \n     @property\n     def id(self):\n-        return getattr(self, \'__name__\', \'\')\n+        return getattr(self, "__name__", "")\n \n     @property\n     def title(self):\n         return self.id\n \n     def available(self, context, request):\n-        """By default, this portlet is always available\n-        """\n+        """By default, this portlet is always available"""\n         return True\n \n     @property\n     def data(self):\n-        """Make the assignment itself represent the data object that is being rendered.\n-        """\n+        """Make the assignment itself represent the data object that is being rendered."""\n         return self\n \n \n @implementer(IPortletRenderer)\n-class Renderer(object):\n+class Renderer:\n     """Base class for portlet renderers.\n \n     You must override render() to return a string to render. One way of\n@@ -70,13 +67,13 @@ def update(self):\n         pass\n \n     def render(self):\n-        raise NotImplementedError("You must implement \'render\' as a method "\n-                                  "or page template file attribute")\n+        raise NotImplementedError(\n+            "You must implement \'render\' as a method " "or page template file attribute"\n+        )\n \n     @property\n     def available(self):\n-        """By default, portlets are available\n-        """\n+        """By default, portlets are available"""\n         return True\n \n \n@@ -88,10 +85,12 @@ class DeferredRenderer(Renderer):\n \n     """\n \n-    render_preload = ViewPageTemplateFile(\'deferred_portlet.pt\')\n+    render_preload = ViewPageTemplateFile("deferred_portlet.pt")\n \n     def render_full(self):\n-        raise NotImplemented("You must implement \'render_full\' as a method or page template file attribute")\n+        raise NotImplemented(\n+            "You must implement \'render_full\' as a method or page template file attribute"\n+        )\n \n     def render(self):\n         """render the portlet\ndiff --git a/plone/app/portlets/portlets/calendar.py b/plone/app/portlets/portlets/calendar.py\nindex f8430c93..2d0e487f 100644\n--- a/plone/app/portlets/portlets/calendar.py\n+++ b/plone/app/portlets/portlets/calendar.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # avoid broken persistent object\n from plone.app.event.portlets.portlet_calendar import Assignment\ndiff --git a/plone/app/portlets/portlets/classic.py b/plone/app/portlets/portlets/classic.py\nindex bd4b2229..6d9e45c3 100644\n--- a/plone/app/portlets/portlets/classic.py\n+++ b/plone/app/portlets/portlets/classic.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n from plone.portlets.interfaces import IPortletDataProvider\n@@ -8,26 +7,27 @@\n \n \n class IClassicPortlet(IPortletDataProvider):\n-    """A portlet which can render a classic Plone portlet macro\n-    """\n+    """A portlet which can render a classic Plone portlet macro"""\n \n     template = schema.ASCIILine(\n-        title=_(u\'Template\'),\n-        description=_(u\'The template containing the portlet.\'),\n-        required=True)\n+        title=_("Template"),\n+        description=_("The template containing the portlet."),\n+        required=True,\n+    )\n \n     macro = schema.ASCIILine(\n-        title=_(u\'Macro\'),\n-        description=_(u"The macro containing the portlet. "\n-                      u"Leave blank if there is no macro."),\n-        default=\'portlet\',\n-        required=False)\n+        title=_("Macro"),\n+        description=_(\n+            "The macro containing the portlet. " "Leave blank if there is no macro."\n+        ),\n+        default="portlet",\n+        required=False,\n+    )\n \n \n @implementer(IClassicPortlet)\n class Assignment(base.Assignment):\n-\n-    def __init__(self, template=\'\', macro=\'\'):\n+    def __init__(self, template="", macro=""):\n         self.template = template\n         self.macro = macro\n \n@@ -37,37 +37,35 @@ def title(self):\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         self.context = context\n         self.request = request\n         self.data = data\n \n-    render = ViewPageTemplateFile(\'classic.pt\')\n+    render = ViewPageTemplateFile("classic.pt")\n \n     def use_macro(self):\n         return bool(self.data.macro)\n \n     def path_expression(self):\n-        expr = \'context/%s\' % self.data.template\n+        expr = "context/%s" % self.data.template\n         if self.use_macro():\n-            expr += \'/macros/%s\' % self.data.macro\n+            expr += "/macros/%s" % self.data.macro\n         return expr\n \n \n class AddForm(base.AddForm):\n     schema = IClassicPortlet\n-    label = _(u"Add Classic Portlet")\n-    description = _(u"A classic portlet allows you to use legacy portlet "\n-                    u"templates.")\n+    label = _("Add Classic Portlet")\n+    description = _("A classic portlet allows you to use legacy portlet " "templates.")\n \n     def create(self, data):\n-        return Assignment(template=data.get(\'template\', \'\'),\n-                          macro=data.get(\'macro\', \'\'))\n+        return Assignment(\n+            template=data.get("template", ""), macro=data.get("macro", "")\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = IClassicPortlet\n-    label = _(u"Edit Classic Portlet")\n-    description = _(u"A classic portlet allows you to use legacy portlet "\n-                    u"templates.")\n+    label = _("Edit Classic Portlet")\n+    description = _("A classic portlet allows you to use legacy portlet " "templates.")\ndiff --git a/plone/app/portlets/portlets/events.py b/plone/app/portlets/portlets/events.py\nindex 5e29c51a..f8eb93c6 100644\n--- a/plone/app/portlets/portlets/events.py\n+++ b/plone/app/portlets/portlets/events.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # avoid broken persistent object\n from plone.app.event.portlets.portlet_events import Assignment\ndiff --git a/plone/app/portlets/portlets/language.py b/plone/app/portlets/portlets/language.py\nindex 38da5ed0..368a3c03 100644\n--- a/plone/app/portlets/portlets/language.py\n+++ b/plone/app/portlets/portlets/language.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n@@ -9,18 +8,16 @@\n \n \n class ILanguagePortlet(IPortletDataProvider):\n-    """A portlet which shows the available portal languages.\n-    """\n+    """A portlet which shows the available portal languages."""\n \n \n @implementer(ILanguagePortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u\'label_languages\', default=u\'Languages\')\n+    title = _("label_languages", default="Languages")\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n         self.selector = LanguageSelector(context, request, None, None)\n@@ -29,9 +26,9 @@ def __init__(self, context, request, view, manager, data):\n \n         def key(info):\n             return info.get("native", info["name"])\n+\n         self.languages.sort(key=key)\n-        portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.navigation_root_url = portal_state.navigation_root_url()\n \n     def show(self):\n@@ -47,10 +44,9 @@ def showFlags(self):\n     def update(self):\n         pass\n \n-    render = ViewPageTemplateFile(\'language.pt\')\n+    render = ViewPageTemplateFile("language.pt")\n \n \n class AddForm(base.NullAddForm):\n-\n     def create(self):\n         return Assignment()\ndiff --git a/plone/app/portlets/portlets/login.py b/plone/app/portlets/portlets/login.py\nindex 29a7aa08..9314e23a 100644\n--- a/plone/app/portlets/portlets/login.py\n+++ b/plone/app/portlets/portlets/login.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n from plone.memoize.instance import memoize\n@@ -10,98 +9,97 @@\n \n \n class ILoginPortlet(IPortletDataProvider):\n-    """A portlet which can render a login form.\n-    """\n+    """A portlet which can render a login form."""\n \n \n @implementer(ILoginPortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u\'label_log_in\', default=u\'Log in\')\n+    title = _("label_log_in", default="Log in")\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        self.membership = getToolByName(self.context, \'portal_membership\')\n+        self.membership = getToolByName(self.context, "portal_membership")\n \n         self.context_state = getMultiAdapter(\n-            (context, request), name=\'plone_context_state\')\n+            (context, request), name="plone_context_state"\n+        )\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n-        self.pas_info = getMultiAdapter((context, request), name=\'pas_info\')\n+            (context, request), name="plone_portal_state"\n+        )\n+        self.pas_info = getMultiAdapter((context, request), name="pas_info")\n \n     def show(self):\n         if not self.portal_state.anonymous():\n             return False\n         if not self.pas_info.hasLoginPasswordExtractor():\n             return False\n-        page = self.request.get(\'URL\', \'\').split(\'/\')[-1]\n-        return page not in (\'login_form\', \'@@register\')\n+        page = self.request.get("URL", "").split("/")[-1]\n+        return page not in ("login_form", "@@register")\n \n     @property\n     def available(self):\n         return self.auth() is not None and self.show()\n \n     def login_form(self):\n-        return \'%s/login_form\' % self.portal_state.portal_url()\n+        return "%s/login_form" % self.portal_state.portal_url()\n \n     def mail_password_form(self):\n-        return \'%s/mail_password_form\' % self.portal_state.portal_url()\n+        return "%s/mail_password_form" % self.portal_state.portal_url()\n \n     def login_name(self):\n         auth = self.auth()\n         name = None\n         if auth is not None:\n-            name = getattr(auth, \'name_cookie\', None)\n+            name = getattr(auth, "name_cookie", None)\n         if not name:\n-            name = \'__ac_name\'\n+            name = "__ac_name"\n         return name\n \n     def login_password(self):\n         auth = self.auth()\n         passwd = None\n         if auth is not None:\n-            passwd = getattr(auth, \'pw_cookie\', None)\n+            passwd = getattr(auth, "pw_cookie", None)\n         if not passwd:\n-            passwd = \'__ac_password\'\n+            passwd = "__ac_password"\n         return passwd\n \n     def join_action(self):\n         context = self.context\n-        tool = getToolByName(context, \'portal_actions\')\n-        join = tool.listActionInfos(action_chain=\'user/join\', object=context)\n+        tool = getToolByName(context, "portal_actions")\n+        join = tool.listActionInfos(action_chain="user/join", object=context)\n         if len(join) > 0:\n-            return join[0][\'url\']\n+            return join[0]["url"]\n         return None\n \n     def can_register(self):\n-        if getToolByName(self.context, \'portal_registration\', None) is None \\\n-           or not self.join_action():\n+        if (\n+            getToolByName(self.context, "portal_registration", None) is None\n+            or not self.join_action()\n+        ):\n             return False\n-        return self.membership.checkPermission(\n-            \'Add portal member\', self.context)\n+        return self.membership.checkPermission("Add portal member", self.context)\n \n     def can_request_password(self):\n-        return self.membership.checkPermission(\n-            \'Mail forgotten password\', self.context)\n+        return self.membership.checkPermission("Mail forgotten password", self.context)\n \n     @memoize\n     def auth(self, _marker=None):\n         if _marker is None:\n             _marker = []\n-        acl_users = getToolByName(self.context, \'acl_users\')\n-        return getattr(acl_users, \'credentials_cookie_auth\', None)\n+        acl_users = getToolByName(self.context, "acl_users")\n+        return getattr(acl_users, "credentials_cookie_auth", None)\n \n     def update(self):\n         pass\n \n-    render = ViewPageTemplateFile(\'login.pt\')\n+    render = ViewPageTemplateFile("login.pt")\n \n \n class AddForm(base.NullAddForm):\n-\n     def create(self):\n         return Assignment()\ndiff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py\nindex 861b48c2..a32b7ce7 100644\n--- a/plone/app/portlets/portlets/navigation.py\n+++ b/plone/app/portlets/portlets/navigation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -30,7 +29,7 @@\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zExceptions import NotFound\n from zope import schema\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -41,94 +40,111 @@\n \n \n class INavigationPortlet(IPortletDataProvider):\n-    """A portlet which can render the navigation tree\n-    """\n+    """A portlet which can render the navigation tree"""\n \n     name = schema.TextLine(\n-            title=_(u"label_navigation_title", default=u"Title"),\n-            description=_(u"help_navigation_title",\n-                          default=u"The title of the navigation tree."),\n-            default=u"",\n-            required=False)\n+        title=_("label_navigation_title", default="Title"),\n+        description=_(\n+            "help_navigation_title", default="The title of the navigation tree."\n+        ),\n+        default="",\n+        required=False,\n+    )\n \n     root_uid = schema.Choice(\n-            title=_(u"label_navigation_root_path", default=u"Root node"),\n-            description=_(u\'help_navigation_root\',\n-                          default=u"You may search for and choose a folder "\n-                                    "to act as the root of the navigation tree. "\n-                                    "Leave blank to use the Plone site root."),\n-            required=False,\n-            source=CatalogSource(is_folderish=True),\n-            )\n+        title=_("label_navigation_root_path", default="Root node"),\n+        description=_(\n+            "help_navigation_root",\n+            default="You may search for and choose a folder "\n+            "to act as the root of the navigation tree. "\n+            "Leave blank to use the Plone site root.",\n+        ),\n+        required=False,\n+        source=CatalogSource(is_folderish=True),\n+    )\n \n     includeTop = schema.Bool(\n-            title=_(u"label_include_top_node", default=u"Include top node"),\n-            description=_(u"help_include_top_node",\n-                          default=u"Whether or not to show the top, or \'root\', "\n-                                   "node in the navigation tree. This is affected "\n-                                   "by the \'Start level\' setting."),\n-            default=False,\n-            required=False)\n+        title=_("label_include_top_node", default="Include top node"),\n+        description=_(\n+            "help_include_top_node",\n+            default="Whether or not to show the top, or \'root\', "\n+            "node in the navigation tree. This is affected "\n+            "by the \'Start level\' setting.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n     currentFolderOnly = schema.Bool(\n-            title=_(u"label_current_folder_only",\n-                    default=u"Only show the contents of the current folder."),\n-            description=_(u"help_current_folder_only",\n-                          default=u"If selected, the navigation tree will "\n-                                   "only show the current folder and its "\n-                                   "children at all times."),\n-            default=False,\n-            required=False)\n+        title=_(\n+            "label_current_folder_only",\n+            default="Only show the contents of the current folder.",\n+        ),\n+        description=_(\n+            "help_current_folder_only",\n+            default="If selected, the navigation tree will "\n+            "only show the current folder and its "\n+            "children at all times.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n     topLevel = schema.Int(\n-            title=_(u"label_navigation_startlevel", default=u"Start level"),\n-            description=_(u"help_navigation_start_level",\n-                default=u"An integer value that specifies the number of folder "\n-                         "levels below the site root that must be exceeded "\n-                         "before the navigation tree will display. 0 means "\n-                         "that the navigation tree should be displayed "\n-                         "everywhere including pages in the root of the site. "\n-                         "1 means the tree only shows up inside folders "\n-                         "located in the root and downwards, never showing "\n-                         "at the top level."),\n-            default=1,\n-            required=False)\n+        title=_("label_navigation_startlevel", default="Start level"),\n+        description=_(\n+            "help_navigation_start_level",\n+            default="An integer value that specifies the number of folder "\n+            "levels below the site root that must be exceeded "\n+            "before the navigation tree will display. 0 means "\n+            "that the navigation tree should be displayed "\n+            "everywhere including pages in the root of the site. "\n+            "1 means the tree only shows up inside folders "\n+            "located in the root and downwards, never showing "\n+            "at the top level.",\n+        ),\n+        default=1,\n+        required=False,\n+    )\n \n     bottomLevel = schema.Int(\n-            title=_(u"label_navigation_tree_depth",\n-                    default=u"Navigation tree depth"),\n-            description=_(u"help_navigation_tree_depth",\n-                          default=u"How many folders should be included "\n-                                   "before the navigation tree stops. 0 "\n-                                   "means no limit. 1 only includes the "\n-                                   "root folder."),\n-            default=0,\n-            required=False)\n+        title=_("label_navigation_tree_depth", default="Navigation tree depth"),\n+        description=_(\n+            "help_navigation_tree_depth",\n+            default="How many folders should be included "\n+            "before the navigation tree stops. 0 "\n+            "means no limit. 1 only includes the "\n+            "root folder.",\n+        ),\n+        default=0,\n+        required=False,\n+    )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons."),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(INavigationPortlet)\n@@ -146,16 +162,16 @@ class Assignment(base.Assignment):\n     no_thumbs = False\n \n     def __init__(\n-            self,\n-            name="",\n-            root_uid=None,\n-            currentFolderOnly=False,\n-            includeTop=False,\n-            topLevel=1,\n-            bottomLevel=0,\n-            no_icons=False,\n-            thumb_scale=None,\n-            no_thumbs=False\n+        self,\n+        name="",\n+        root_uid=None,\n+        currentFolderOnly=False,\n+        includeTop=False,\n+        topLevel=1,\n+        bottomLevel=0,\n+        no_icons=False,\n+        thumb_scale=None,\n+        no_thumbs=False,\n     ):\n         self.name = name\n         self.root_uid = root_uid\n@@ -174,7 +190,7 @@ def title(self):\n         """\n         if self.name:\n             return self.name\n-        return _(u\'Navigation\')\n+        return _("Navigation")\n \n     def _root(self):\n         # This is only called if the instance doesn\'t have a root_uid\n@@ -183,22 +199,22 @@ def _root(self):\n         root = self.root\n         if not root:\n             return None\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         navroot = getNavigationRootObject(self, portal)\n         try:\n-            root = navroot.unrestrictedTraverse(root.lstrip(\'/\'))\n+            root = navroot.unrestrictedTraverse(root.lstrip("/"))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return root.UID()\n+\n     root_uid = ComputedAttribute(_root, 1)\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        self.urltool = getToolByName(context, \'portal_url\')\n+        self.urltool = getToolByName(context, "portal_url")\n \n     def title(self):\n         return self.data.name or self.data.title\n@@ -216,10 +232,10 @@ def available(self):\n             return True\n \n         tree = self.getNavTree()\n-        return len(tree[\'children\']) > 0\n+        return len(tree["children"]) > 0\n \n     def include_top(self):\n-        return getattr(self.data, \'includeTop\', True)\n+        return getattr(self.data, "includeTop", True)\n \n     def navigation_root(self):\n         return self.getNavRoot()\n@@ -239,7 +255,9 @@ def heading_link_target(self):\n         if not self.data.root_uid and not self.data.currentFolderOnly:\n             # No particular root item assigned -> should get link to the\n             # navigation root sitemap of the current context acquisition chain\n-            portal_state = getMultiAdapter((self.context, self.request), name="plone_portal_state")\n+            portal_state = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            )\n             return portal_state.navigation_root_url() + "/sitemap"\n \n         nav_root = self.getNavRoot()\n@@ -263,11 +281,11 @@ def root_item_class(self):\n         context = aq_inner(self.context)\n         root = self.getNavRoot()\n         container = aq_parent(context)\n-        if (aq_base(root) is aq_base(context) or\n-                (aq_base(root) is aq_base(container) and\n-                is_default_page(container, context))):\n-            return \'navTreeCurrentItem\'\n-        return \'\'\n+        if aq_base(root) is aq_base(context) or (\n+            aq_base(root) is aq_base(container) and is_default_page(container, context)\n+        ):\n+            return "navTreeCurrentItem"\n+        return ""\n \n     def root_is_portal(self):\n         root = self.getNavRoot()\n@@ -283,16 +301,20 @@ def createNavTree(self):\n             # meaning that the admin does not want the listing to be displayed\n             return self.recurse([], level=1, bottomLevel=bottomLevel)\n         else:\n-            return self.recurse(children=data.get(\'children\', []), level=1, bottomLevel=bottomLevel)\n+            return self.recurse(\n+                children=data.get("children", []), level=1, bottomLevel=bottomLevel\n+            )\n \n     # Cached lookups\n \n     @memoize\n     def getNavRootPath(self):\n-        return getRootPath(self.context,\n-                           self.data.currentFolderOnly,\n-                           self.data.topLevel,\n-                           self.data.root_uid)\n+        return getRootPath(\n+            self.context,\n+            self.data.currentFolderOnly,\n+            self.data.topLevel,\n+            self.data.root_uid,\n+        )\n \n     @memoize\n     def getNavRoot(self, _marker=None):\n@@ -321,11 +343,12 @@ def getNavTree(self, _marker=None):\n         queryBuilder = getMultiAdapter((context, self.data), INavigationQueryBuilder)\n         strategy = getMultiAdapter((context, self.data), INavtreeStrategy)\n \n-        return buildFolderTree(context, obj=context, query=queryBuilder(), strategy=strategy)\n-\n+        return buildFolderTree(\n+            context, obj=context, query=queryBuilder(), strategy=strategy\n+        )\n \n-    _template = ViewPageTemplateFile(\'navigation.pt\')\n-    recurse = ViewPageTemplateFile(\'navigation_recurse.pt\')\n+    _template = ViewPageTemplateFile("navigation.pt")\n+    recurse = ViewPageTemplateFile("navigation_recurse.pt")\n \n     @memoize\n     def thumb_scale(self):\n@@ -333,35 +356,31 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', None)\n+        thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n-            return \'none\'\n+            return "none"\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n     def getMimeTypeIcon(self, node):\n         try:\n-            if not node[\'normalized_portal_type\'] == \'file\':\n+            if not node["normalized_portal_type"] == "file":\n                 return None\n-            fileo = node[\'item\'].getObject().file\n+            fileo = node["item"].getObject().file\n             portal_url = getNavigationRoot(self.context)\n-            mtt = getToolByName(self.context, \'mimetypes_registry\')\n+            mtt = getToolByName(self.context, "mimetypes_registry")\n             if fileo.contentType:\n                 ctype = mtt.lookup(fileo.contentType)\n                 if not ctype:\n                     return None\n-                return os.path.join(\n-                    portal_url,\n-                    guess_icon_path(ctype[0])\n-                )\n+                return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         except AttributeError:\n             return None\n         return None\n@@ -375,38 +394,42 @@ def render(self):\n \n class AddForm(base.AddForm):\n     schema = INavigationPortlet\n-    label = _(u"Add Navigation Portlet")\n-    description = _(u"This portlet displays a navigation tree.")\n+    label = _("Add Navigation Portlet")\n+    description = _("This portlet displays a navigation tree.")\n \n     def create(self, data):\n-        return Assignment(name=data.get(\'name\', ""),\n-                          root_uid=data.get(\'root_uid\', ""),\n-                          currentFolderOnly=data.get(\'currentFolderOnly\', False),\n-                          includeTop=data.get(\'includeTop\', False),\n-                          topLevel=data.get(\'topLevel\', 0),\n-                          bottomLevel=data.get(\'bottomLevel\', 0))\n+        return Assignment(\n+            name=data.get("name", ""),\n+            root_uid=data.get("root_uid", ""),\n+            currentFolderOnly=data.get("currentFolderOnly", False),\n+            includeTop=data.get("includeTop", False),\n+            topLevel=data.get("topLevel", 0),\n+            bottomLevel=data.get("bottomLevel", 0),\n+        )\n+\n \n class EditForm(base.EditForm):\n     schema = INavigationPortlet\n-    label = _(u"Edit Navigation Portlet")\n-    description = _(u"This portlet displays a navigation tree.")\n+    label = _("Edit Navigation Portlet")\n+    description = _("This portlet displays a navigation tree.")\n+\n \n @implementer(INavigationQueryBuilder)\n-class QueryBuilder(object):\n+@adapter(Interface, INavigationPortlet)\n+class QueryBuilder:\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\n-    adapts(Interface, INavigationPortlet)\n \n     def __init__(self, context, portlet):\n         self.context = context\n         self.portlet = portlet\n \n-        portal_properties = getToolByName(context, \'portal_properties\')\n-        navtree_properties = getattr(portal_properties, \'navtree_properties\')\n+        portal_properties = getToolByName(context, "portal_properties")\n+        navtree_properties = getattr(portal_properties, "navtree_properties")\n \n         # Acquire a custom nav query if available\n-        customQuery = getattr(context, \'getCustomNavQuery\', None)\n+        customQuery = getattr(context, "getCustomNavQuery", None)\n         if customQuery is not None and utils.safe_callable(customQuery):\n             query = customQuery()\n         else:\n@@ -415,46 +438,43 @@ def __init__(self, context, portlet):\n         # Construct the path query\n         root = uuidToObject(portlet.root_uid)\n         if root is not None:\n-            rootPath = \'/\'.join(root.getPhysicalPath())\n+            rootPath = "/".join(root.getPhysicalPath())\n         else:\n             rootPath = getNavigationRoot(context)\n-        currentPath = \'/\'.join(context.getPhysicalPath())\n+        currentPath = "/".join(context.getPhysicalPath())\n \n         # If we are above the navigation root, a navtree query would return\n         # nothing (since we explicitly start from the root always). Hence,\n         # use a regular depth-1 query in this case.\n \n-        if currentPath != rootPath and not currentPath.startswith(rootPath + \'/\'):\n-            query[\'path\'] = {\'query\': rootPath, \'depth\': 1}\n+        if currentPath != rootPath and not currentPath.startswith(rootPath + "/"):\n+            query["path"] = {"query": rootPath, "depth": 1}\n         else:\n-            query[\'path\'] = {\'query\': currentPath, \'navtree\': 1}\n+            query["path"] = {"query": currentPath, "navtree": 1}\n \n         topLevel = portlet.topLevel\n         if topLevel and topLevel > 0:\n-            query[\'path\'][\'navtree_start\'] = topLevel + 1\n+            query["path"]["navtree_start"] = topLevel + 1\n \n         # XXX: It\'d make sense to use \'depth\' for bottomLevel, but it doesn\'t\n         # seem to work with EPI.\n \n         # Only list the applicable types\n-        query[\'portal_type\'] = utils.typesToList(context)\n+        query["portal_type"] = utils.typesToList(context)\n \n         # Apply the desired sort\n-        sortAttribute = navtree_properties.getProperty(\'sortAttribute\', None)\n+        sortAttribute = navtree_properties.getProperty("sortAttribute", None)\n         if sortAttribute is not None:\n-            query[\'sort_on\'] = sortAttribute\n-            sortOrder = navtree_properties.getProperty(\'sortOrder\', None)\n+            query["sort_on"] = sortAttribute\n+            sortOrder = navtree_properties.getProperty("sortOrder", None)\n             if sortOrder is not None:\n-                query[\'sort_order\'] = sortOrder\n+                query["sort_order"] = sortOrder\n \n         # Filter on workflow states, if enabled\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n-        )\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n         if navigation_settings.filter_on_workflow:\n-            query[\'review_state\'] = navigation_settings.workflow_states_to_show\n+            query["review_state"] = navigation_settings.workflow_states_to_show\n \n         self.query = query\n \n@@ -463,10 +483,9 @@ def __call__(self):\n \n \n @implementer(INavtreeStrategy)\n+@adapter(Interface, INavigationPortlet)\n class NavtreeStrategy(SitemapNavtreeStrategy):\n-    """The navtree strategy used for the default navigation portlet\n-    """\n-    adapts(Interface, INavigationPortlet)\n+    """The navtree strategy used for the default navigation portlet"""\n \n     def __init__(self, context, portlet):\n         SitemapNavtreeStrategy.__init__(self, context, portlet)\n@@ -474,16 +493,15 @@ def __init__(self, context, portlet):\n         # XXX: We can\'t do this with a \'depth\' query to EPI...\n         self.bottomLevel = portlet.bottomLevel or 0\n \n-        self.rootPath = getRootPath(context,\n-                                    portlet.currentFolderOnly,\n-                                    portlet.topLevel,\n-                                    portlet.root_uid)\n+        self.rootPath = getRootPath(\n+            context, portlet.currentFolderOnly, portlet.topLevel, portlet.root_uid\n+        )\n \n     def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n         if sitemapDecision == False:\n             return False\n-        depth = node.get(\'depth\', 0)\n+        depth = node.get("depth", 0)\n         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n             return False\n         else:\n@@ -491,41 +509,41 @@ def subtreeFilter(self, node):\n \n \n def getRootPath(context, currentFolderOnly, topLevel, root):\n-    """Helper function to calculate the real root path\n-    """\n+    """Helper function to calculate the real root path"""\n     context = aq_inner(context)\n     if currentFolderOnly:\n-        folderish = getattr(aq_base(context), \'isPrincipiaFolderish\', False) and \\\n-                    not INonStructuralFolder.providedBy(context)\n+        folderish = getattr(\n+            aq_base(context), "isPrincipiaFolderish", False\n+        ) and not INonStructuralFolder.providedBy(context)\n         parent = aq_parent(context)\n \n         is_default_page = False\n         browser_default = IBrowserDefault(parent, None)\n         if browser_default is not None:\n-            is_default_page = (browser_default.getDefaultPage() == context.getId())\n+            is_default_page = browser_default.getDefaultPage() == context.getId()\n \n         if not folderish or is_default_page:\n-            return \'/\'.join(parent.getPhysicalPath())\n+            return "/".join(parent.getPhysicalPath())\n         else:\n-            return \'/\'.join(context.getPhysicalPath())\n+            return "/".join(context.getPhysicalPath())\n \n     root = uuidToObject(root)\n     if root is not None:\n-        rootPath = \'/\'.join(root.getPhysicalPath())\n+        rootPath = "/".join(root.getPhysicalPath())\n     else:\n         rootPath = getNavigationRoot(context)\n \n     # Adjust for topLevel\n     if topLevel > 0:\n-        contextPath = \'/\'.join(context.getPhysicalPath())\n+        contextPath = "/".join(context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n             return None\n-        contextSubPathElements = contextPath[len(rootPath) + 1:]\n+        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n-            contextSubPathElements = contextSubPathElements.split(\'/\')\n+            contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n                 return None\n-            rootPath = rootPath + \'/\' + \'/\'.join(contextSubPathElements[:topLevel])\n+            rootPath = rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n         else:\n             return None\n \ndiff --git a/plone/app/portlets/portlets/news.py b/plone/app/portlets/portlets/news.py\nindex e8e84569..ec3aabd2 100644\n--- a/plone/app/portlets/portlets/news.py\n+++ b/plone/app/portlets/portlets/news.py\n@@ -1,60 +1,61 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets import PloneMessageFactory as _\n+from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets.portlets import base\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform.directives import widget\n-from plone.memoize.compress import xhtml_compress\n from plone.memoize import ram\n+from plone.memoize.compress import xhtml_compress\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope import schema\n from zope.interface import implementer\n \n \n class INewsPortlet(IPortletDataProvider):\n \n-    count = schema.Int(title=_(u\'Number of items to display\'),\n-                       description=_(u\'How many items to list.\'),\n-                       required=True,\n-                       default=5,\n-                       min=1)\n+    count = schema.Int(\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n+        required=True,\n+        default=5,\n+        min=1,\n+    )\n \n     widget(state=SelectFieldWidget)\n     state = schema.Tuple(\n-        title=_(u"Workflow state"),\n-        description=_(u"Items in which workflow state to show."),\n-        default=(\'published\', ),\n+        title=_("Workflow state"),\n+        description=_("Items in which workflow state to show."),\n+        default=("published",),\n         required=False,\n-        value_type=schema.Choice(\n-            vocabulary="plone.app.vocabularies.WorkflowStates")\n-        )\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs"),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs"),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(INewsPortlet)\n@@ -63,8 +64,9 @@ class Assignment(base.Assignment):\n     thumb_scale = None\n     no_thumbs = False\n \n-    def __init__(self, count=5, state=(\'published\',),\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(\n+        self, count=5, state=("published",), thumb_scale=None, no_thumbs=False\n+    ):\n         self.count = count\n         self.state = state\n         self.thumb_scale = thumb_scale\n@@ -72,12 +74,12 @@ def __init__(self, count=5, state=(\'published\',),\n \n     @property\n     def title(self):\n-        return _(u"News")\n+        return _("News")\n \n \n class Renderer(base.Renderer):\n \n-    _template = ViewPageTemplateFile(\'news.pt\')\n+    _template = ViewPageTemplateFile("news.pt")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -96,42 +98,45 @@ def published_news_items(self):\n     def all_news_link(self):\n         context = aq_inner(self.context)\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         portal = portal_state.portal()\n-        if \'news\' in getNavigationRootObject(context, portal).objectIds():\n-            return \'%s/news\' % portal_state.navigation_root_url()\n+        if "news" in getNavigationRootObject(context, portal).objectIds():\n+            return "%s/news" % portal_state.navigation_root_url()\n         return None\n \n     @memoize\n     def _data(self):\n         context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         path = portal_state.navigation_root_path()\n         limit = self.data.count\n         state = self.data.state\n-        return catalog(portal_type=\'News Item\',\n-                       review_state=state,\n-                       path=path,\n-                       sort_on=\'Date\',\n-                       sort_order=\'reverse\',\n-                       sort_limit=limit)[:limit]\n+        return catalog(\n+            portal_type="News Item",\n+            review_state=state,\n+            path=path,\n+            sort_on="Date",\n+            sort_order="reverse",\n+            sort_limit=limit,\n+        )[:limit]\n \n     def thumb_scale(self):\n         """Use override value or read thumb_scale from registry.\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', \'\')\n+        thsize = getattr(self.data, "thumb_scale", "")\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n             return None\n         thumb_scale_portlet = settings.thumb_scale_portlet\n@@ -140,17 +145,17 @@ def thumb_scale(self):\n \n class AddForm(base.AddForm):\n     schema = INewsPortlet\n-    label = _(u"Add News Portlet")\n-    description = _(u"This portlet displays recent News Items.")\n+    label = _("Add News Portlet")\n+    description = _("This portlet displays recent News Items.")\n \n     def create(self, data):\n         return Assignment(\n-            count=data.get(\'count\', 5),\n-            state=data.get(\'state\', (\'published\', )),\n-            )\n+            count=data.get("count", 5),\n+            state=data.get("state", ("published",)),\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = INewsPortlet\n-    label = _(u"Edit News Portlet")\n-    description = _(u"This portlet displays recent News Items.")\n+    label = _("Edit News Portlet")\n+    description = _("This portlet displays recent News Items.")\ndiff --git a/plone/app/portlets/portlets/recent.py b/plone/app/portlets/portlets/recent.py\nindex d03eca32..e0178218 100644\n--- a/plone/app/portlets/portlets/recent.py\n+++ b/plone/app/portlets/portlets/recent.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.portlets import PloneMessageFactory as _\n@@ -23,36 +22,39 @@\n \n class IRecentPortlet(IPortletDataProvider):\n \n-    count = schema.Int(title=_(u\'Number of items to display\'),\n-                       description=_(u\'How many items to list.\'),\n-                       required=True,\n-                       default=5,\n-                       min=1)\n+    count = schema.Int(\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n+        required=True,\n+        default=5,\n+        min=1,\n+    )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons"),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons"),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(IRecentPortlet)\n@@ -60,8 +62,7 @@ class Assignment(base.Assignment):\n     no_icons = False\n     thumb_scale = None\n \n-    def __init__(self, count=5, no_icons=False,\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(self, count=5, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.count = count\n         self.no_icons = no_icons\n         self.thumb_scale = thumb_scale\n@@ -69,7 +70,7 @@ def __init__(self, count=5, no_icons=False,\n \n     @property\n     def title(self):\n-        return _(u"Recent items")\n+        return _("Recent items")\n \n \n def _render_cachekey(fun, self):\n@@ -79,26 +80,27 @@ def _render_cachekey(fun, self):\n \n \n class Renderer(base.Renderer):\n-    _template = ViewPageTemplateFile(\'recent.pt\')\n+    _template = ViewPageTemplateFile("recent.pt")\n \n-    title = _(\'box_recent_changes\', default=u"Recent Changes")\n+    title = _("box_recent_changes", default="Recent Changes")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n \n         context = aq_inner(self.context)\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         self.anonymous = portal_state.anonymous()\n         self.navigation_root_url = portal_state.navigation_root_url()\n         self.typesToShow = portal_state.friendly_types()\n         self.navigation_root_path = portal_state.navigation_root_path()\n \n-        plone_tools = getMultiAdapter(\n-            (context, self.request), name=\'plone_tools\')\n+        plone_tools = getMultiAdapter((context, self.request), name="plone_tools")\n         self.catalog = plone_tools.catalog()\n \n     ram.cache(_render_cachekey)\n+\n     def render(self):\n         return xhtml_compress(self._template())\n \n@@ -110,17 +112,19 @@ def recent_items(self):\n         return self._data()\n \n     def recently_modified_link(self):\n-        return \'%s/recently_modified\' % self.navigation_root_url\n+        return "%s/recently_modified" % self.navigation_root_url\n \n     @memoize\n     def _data(self):\n         limit = self.data.count\n         path = self.navigation_root_path\n-        return self.catalog(portal_type=self.typesToShow,\n-                            path=path,\n-                            sort_on=\'modified\',\n-                            sort_order=\'reverse\',\n-                            sort_limit=limit)[:limit]\n+        return self.catalog(\n+            portal_type=self.typesToShow,\n+            path=path,\n+            sort_on="modified",\n+            sort_order="reverse",\n+            sort_limit=limit,\n+        )[:limit]\n \n     @memoize\n     def thumb_scale(self):\n@@ -128,41 +132,37 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', None)\n+        thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n     def getMimeTypeIcon(self, obj):\n         fileo = obj.getObject().file\n         portal_url = getNavigationRoot(self.context)\n-        mtt = getToolByName(self.context, \'mimetypes_registry\')\n+        mtt = getToolByName(self.context, "mimetypes_registry")\n         if fileo.contentType:\n             ctype = mtt.lookup(fileo.contentType)\n-            return os.path.join(\n-                portal_url,\n-                guess_icon_path(ctype[0])\n-            )\n+            return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         return None\n \n \n class AddForm(base.AddForm):\n     schema = IRecentPortlet\n-    label = _(u"Add Recent Portlet")\n-    description = _(u"This portlet displays recently modified content.")\n+    label = _("Add Recent Portlet")\n+    description = _("This portlet displays recently modified content.")\n \n     def create(self, data):\n-        return Assignment(count=data.get(\'count\', 5))\n+        return Assignment(count=data.get("count", 5))\n \n \n class EditForm(base.EditForm):\n     schema = IRecentPortlet\n-    label = _(u"Edit Recent Portlet")\n-    description = _(u"This portlet displays recently modified content.")\n+    label = _("Edit Recent Portlet")\n+    description = _("This portlet displays recently modified content.")\ndiff --git a/plone/app/portlets/portlets/review.py b/plone/app/portlets/portlets/review.py\nindex 79f0e8d2..e59d8360 100644\n--- a/plone/app/portlets/portlets/review.py\n+++ b/plone/app/portlets/portlets/review.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.browser import formhelper\n@@ -21,29 +20,30 @@\n class IReviewPortlet(IPortletDataProvider):\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons"),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons"),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n @implementer(IReviewPortlet)\n@@ -52,21 +52,21 @@ class Assignment(base.Assignment):\n     thumb_scale = None\n     no_thumbs = False\n \n-    def __init__(self, no_icons=False,\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(self, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.no_icons = no_icons\n         self.thumb_scale = thumb_scale\n         self.no_thumbs = no_thumbs\n \n     @property\n     def title(self):\n-        return _(u"Review list")\n+        return _("Review list")\n+\n \n class Renderer(base.Renderer):\n \n-    render = ViewPageTemplateFile(\'review.pt\')\n+    render = ViewPageTemplateFile("review.pt")\n \n-    title = _(\'box_review_list\', default=u"Review List")\n+    title = _("box_review_list", default="Review List")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -74,8 +74,9 @@ def __init__(self, *args):\n     @property\n     def anonymous(self):\n         context = aq_inner(self.context)\n-        portal_state = getMultiAdapter((context, self.request),\n-                                       name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter(\n+            (context, self.request), name="plone_portal_state"\n+        )\n         return portal_state.anonymous()\n \n     @property\n@@ -87,10 +88,10 @@ def review_items(self):\n \n     def full_review_link(self):\n         context = aq_inner(self.context)\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n         # check if user is allowed to Review Portal Content here\n-        if mtool.checkPermission(\'Review portal content\', context):\n-            return \'%s/full_review_list\' % context.absolute_url()\n+        if mtool.checkPermission("Review portal content", context):\n+            return "%s/full_review_list" % context.absolute_url()\n         else:\n             return None\n \n@@ -99,10 +100,10 @@ def _data(self):\n         if self.anonymous:\n             return []\n         context = aq_inner(self.context)\n-        workflow = getToolByName(context, \'portal_workflow\')\n+        workflow = getToolByName(context, "portal_workflow")\n \n-        plone_view = getMultiAdapter((context, self.request), name=\'plone\')\n-        getMember = getToolByName(context, \'portal_membership\').getMemberById\n+        plone_view = getMultiAdapter((context, self.request), name="plone")\n+        getMember = getToolByName(context, "portal_membership").getMemberById\n         toLocalizedTime = plone_view.toLocalizedTime\n \n         idnormalizer = queryUtility(IIDNormalizer)\n@@ -110,27 +111,29 @@ def _data(self):\n         objects = workflow.getWorklistsResults()\n         items = []\n         for obj in objects:\n-            review_state = workflow.getInfoFor(obj, \'review_state\')\n+            review_state = workflow.getInfoFor(obj, "review_state")\n             creator_id = obj.Creator()\n             creator = getMember(creator_id)\n             if creator:\n-                creator_name = creator.getProperty(\'fullname\', \'\') or creator_id\n+                creator_name = creator.getProperty("fullname", "") or creator_id\n             else:\n                 creator_name = creator_id\n-            hasImage = True if getattr(obj, \'image\', None) else False\n-            images = obj.restrictedTraverse(\'@@images\') if hasImage else None\n-            items.append(dict(\n-                path=obj.absolute_url(),\n-                title=obj.pretty_title_or_id(),\n-                item_class = \'contenttype-\' + norm(obj.portal_type),\n-                description=obj.Description(),\n-                creator=creator_name,\n-                review_state=review_state,\n-                review_state_class=\'state-%s \' % norm(review_state),\n-                mod_date=toLocalizedTime(obj.ModificationDate()),\n-                hasImage=hasImage,\n-                images=images,\n-            ))\n+            hasImage = True if getattr(obj, "image", None) else False\n+            images = obj.restrictedTraverse("@@images") if hasImage else None\n+            items.append(\n+                dict(\n+                    path=obj.absolute_url(),\n+                    title=obj.pretty_title_or_id(),\n+                    item_class="contenttype-" + norm(obj.portal_type),\n+                    description=obj.Description(),\n+                    creator=creator_name,\n+                    review_state=review_state,\n+                    review_state_class="state-%s " % norm(review_state),\n+                    mod_date=toLocalizedTime(obj.ModificationDate()),\n+                    hasImage=hasImage,\n+                    images=images,\n+                )\n+            )\n         return items\n \n     @memoize\n@@ -139,30 +142,28 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', \'\')\n+        thsize = getattr(self.data, "thumb_scale", "")\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n \n class AddForm(formhelper.AddForm):\n     schema = IReviewPortlet\n-    label = _(u"Add Review Portlet")\n-    description = _(u"This portlet displays a queue of documents awaiting "\n-                    u"review.")\n+    label = _("Add Review Portlet")\n+    description = _("This portlet displays a queue of documents awaiting " "review.")\n \n     def create(self, data):\n         return Assignment(**data)\n \n+\n class EditForm(formhelper.EditForm):\n     schema = IReviewPortlet\n-    label = _(u"Edit Review Portlet")\n-    description = _(u"displays a queue of documents awaiting "\n-                    u"review.")\n+    label = _("Edit Review Portlet")\n+    description = _("displays a queue of documents awaiting " "review.")\ndiff --git a/plone/app/portlets/portlets/rss.py b/plone/app/portlets/portlets/rss.py\nindex aca4a88c..6cf4ce12 100644\n--- a/plone/app/portlets/portlets/rss.py\n+++ b/plone/app/portlets/portlets/rss.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from logging import getLogger\n@@ -8,14 +7,16 @@\n from Products.Five.browser.pagetemplatefile import ZopeTwoPageTemplateFile\n from urllib.parse import urlparse\n from zope import schema\n-from zope.interface import implementer, Interface\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n import feedparser\n import time\n \n \n # Accept these bozo_exceptions encountered by feedparser when parsing\n # the feed:\n-ACCEPTED_FEEDPARSER_EXCEPTIONS = (feedparser.CharacterEncodingOverride, )\n+ACCEPTED_FEEDPARSER_EXCEPTIONS = (feedparser.CharacterEncodingOverride,)\n \n # store the feeds here (which means in RAM)\n FEED_DATA = {}  # url: ({date, title, url, itemlist})\n@@ -24,10 +25,9 @@\n \n \n class IFeed(Interface):\n-\n     def __init__(url, timeout):\n         """initialize the feed with the given url. will not automatically load it\n-           timeout defines the time between updates in minutes\n+        timeout defines the time between updates in minutes\n         """\n \n     def loaded():\n@@ -56,7 +56,7 @@ def needs_update():\n \n     def update():\n         """update this feed. will automatically check failure state etc.\n-           returns True or False whether it succeeded or not\n+        returns True or False whether it succeeded or not\n         """\n \n     def update_failed():\n@@ -67,7 +67,7 @@ def ok():\n \n \n @implementer(IFeed)\n-class RSSFeed(object):\n+class RSSFeed:\n     """an RSS feed"""\n \n     def __init__(self, url, timeout):\n@@ -77,8 +77,8 @@ def __init__(self, url, timeout):\n         self._items = []\n         self._title = ""\n         self._siteurl = ""\n-        self._loaded = False    # is the feed loaded\n-        self._failed = False    # does it fail at the last update?\n+        self._loaded = False  # is the feed loaded\n+        self._failed = False  # does it fail at the last update?\n         self._last_update_time_in_minutes = 0  # when was the feed last updated?\n         self._last_update_time = None  # time as DateTime or Nonw\n         self._etag = None\n@@ -100,7 +100,7 @@ def update_failed(self):\n \n     @property\n     def ok(self):\n-        return (not self._failed and self._loaded)\n+        return not self._failed and self._loaded\n \n     @property\n     def loaded(self):\n@@ -129,20 +129,20 @@ def update(self):\n                 return self._retrieveFeed()\n         except:\n             self._failed = True\n-            logger.exception(\'failed to update RSS feed %s\', self.url)\n+            logger.exception("failed to update RSS feed %s", self.url)\n \n         return self.ok\n \n     def _buildItemDict(self, item):\n-        link = item.links[0][\'href\']\n+        link = item.links[0]["href"]\n         itemdict = {\n-            \'title\': item.title,\n-            \'url\': link,\n-            \'summary\': item.get(\'description\', \'\'),\n+            "title": item.title,\n+            "url": link,\n+            "summary": item.get("description", ""),\n         }\n         if hasattr(item, "updated"):\n             try:\n-                itemdict[\'updated\'] = DateTime(item.updated)\n+                itemdict["updated"] = DateTime(item.updated)\n             except DateTimeError:\n                 # It\'s okay to drop it because in the\n                 # template, this is checked with\n@@ -161,29 +161,30 @@ def _retrieveFeed(self):\n             elif urlparse(url).scheme not in ("https", "http"):\n                 # Mostly: prevent loading local file: urls.\n                 url = ""\n-        if url != \'\':\n+        if url != "":\n             self._last_update_time_in_minutes = time.time() / 60\n             self._last_update_time = DateTime()\n             kwargs = {}\n             if self._last_modified:\n-                kwargs[\'modified\'] = self._last_modified\n+                kwargs["modified"] = self._last_modified\n             if self._etag:\n-                kwargs[\'etag\'] = self._etag\n+                kwargs["etag"] = self._etag\n             d = feedparser.parse(url, **kwargs)\n-            if (getattr(d, \'bozo\', 0) == 1\n-                    and not isinstance(d.get(\'bozo_exception\'),\n-                                       ACCEPTED_FEEDPARSER_EXCEPTIONS)):\n+            if getattr(d, "bozo", 0) == 1 and not isinstance(\n+                d.get("bozo_exception"), ACCEPTED_FEEDPARSER_EXCEPTIONS\n+            ):\n                 self._loaded = True  # we tried at least but have a failed load\n                 self._failed = True\n-                logger.info(\'failed to update RSS feed %s\',\n-                            d.get(\'bozo_exception\', None))\n+                logger.info(\n+                    "failed to update RSS feed %s", d.get("bozo_exception", None)\n+                )\n                 return False\n \n             #  If the response was 304, nothing changed!\n             #  Don\'t change anything...\n             if d.status != 304:\n-                self._etag = getattr(d, \'etag\', None)\n-                self._modified = getattr(d, \'modified\', None)\n+                self._etag = getattr(d, "etag", None)\n+                self._modified = getattr(d, "modified", None)\n \n                 try:\n                     self._title = d.feed.title\n@@ -195,7 +196,7 @@ def _retrieveFeed(self):\n                     self._siteurl = ""\n \n                 self._items = []\n-                for item in d[\'items\']:\n+                for item in d["items"]:\n                     try:\n                         itemdict = self._buildItemDict(item)\n                     except AttributeError:\n@@ -236,47 +237,51 @@ def siteurl(self):\n class IRSSPortlet(IPortletDataProvider):\n \n     portlet_title = schema.TextLine(\n-        title=_(u\'Title\'),\n-        description=_(u\'Title of the portlet.  If omitted, the title of the \'\n-                      u\'feed will be used.\'),\n+        title=_("Title"),\n+        description=_(\n+            "Title of the portlet.  If omitted, the title of the " "feed will be used."\n+        ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     count = schema.Int(\n-        title=_(u\'Number of items to display\'),\n-        description=_(u\'How many items to list.\'),\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n         required=True,\n-        default=5)\n+        default=5,\n+    )\n \n     url = schema.TextLine(\n-        title=_(u\'URL of RSS feed\'),\n-        description=_(u\'Link of the RSS feed to display.\'),\n+        title=_("URL of RSS feed"),\n+        description=_("Link of the RSS feed to display."),\n         required=True,\n-        default=u\'\')\n+        default="",\n+    )\n \n     timeout = schema.Int(\n-        title=_(u\'Feed reload timeout\'),\n-        description=_(u\'Time in minutes after which the feed should be \'\n-                      u\'reloaded.\'),\n+        title=_("Feed reload timeout"),\n+        description=_("Time in minutes after which the feed should be " "reloaded."),\n         required=True,\n-        default=100)\n+        default=100,\n+    )\n \n \n @implementer(IRSSPortlet)\n class Assignment(base.Assignment):\n \n-    portlet_title = u\'\'\n+    portlet_title = ""\n \n     @property\n     def title(self):\n         """return the title with RSS feed title or from URL"""\n         feed = FEED_DATA.get(self.data.url, None)\n         if feed is None:\n-            return u\'RSS: \' + self.url[:20]\n+            return "RSS: " + self.url[:20]\n         else:\n-            return u\'RSS: \' + feed.title[:20]\n+            return "RSS: " + feed.title[:20]\n \n-    def __init__(self, portlet_title=u\'\', count=5, url=u"", timeout=100):\n+    def __init__(self, portlet_title="", count=5, url="", timeout=100):\n         self.portlet_title = portlet_title\n         self.count = count\n         self.url = url\n@@ -285,7 +290,7 @@ def __init__(self, portlet_title=u\'\', count=5, url=u"", timeout=100):\n \n class Renderer(base.DeferredRenderer):\n \n-    render_full = ZopeTwoPageTemplateFile(\'rss.pt\')\n+    render_full = ZopeTwoPageTemplateFile("rss.pt")\n \n     @property\n     def initializing(self):\n@@ -333,7 +338,7 @@ def feedlink(self):\n     @property\n     def title(self):\n         """return title of feed for portlet"""\n-        return getattr(self.data, \'portlet_title\', \'\') or self._getFeed().title\n+        return getattr(self.data, "portlet_title", "") or self._getFeed().title\n \n     @property\n     def feedAvailable(self):\n@@ -342,7 +347,7 @@ def feedAvailable(self):\n \n     @property\n     def items(self):\n-        return self._getFeed().items[:self.data.count]\n+        return self._getFeed().items[: self.data.count]\n \n     @property\n     def enabled(self):\n@@ -351,18 +356,19 @@ def enabled(self):\n \n class AddForm(base.AddForm):\n     schema = IRSSPortlet\n-    label = _(u"Add RSS Portlet")\n-    description = _(u"This portlet displays an RSS feed.")\n+    label = _("Add RSS Portlet")\n+    description = _("This portlet displays an RSS feed.")\n \n     def create(self, data):\n         return Assignment(\n-            portlet_title=data.get(\'portlet_title\', u\'\'),\n-            count=data.get(\'count\', 5),\n-            url=data.get(\'url\', \'\'),\n-            timeout=data.get(\'timeout\', 100))\n+            portlet_title=data.get("portlet_title", ""),\n+            count=data.get("count", 5),\n+            url=data.get("url", ""),\n+            timeout=data.get("timeout", 100),\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = IRSSPortlet\n-    label = _(u"Edit RSS Portlet")\n-    description = _(u"This portlet displays an RSS feed.")\n+    label = _("Edit RSS Portlet")\n+    description = _("This portlet displays an RSS feed.")\ndiff --git a/plone/app/portlets/portlets/search.py b/plone/app/portlets/portlets/search.py\nindex 8e9d735f..f4813280 100644\n--- a/plone/app/portlets/portlets/search.py\n+++ b/plone/app/portlets/portlets/search.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.portlets import PloneMessageFactory as _\n from plone.app.portlets.portlets import base\n@@ -10,47 +9,47 @@\n \n \n class ISearchPortlet(IPortletDataProvider):\n-    """ A portlet displaying a (live) search box\n-    """\n+    """A portlet displaying a (live) search box"""\n \n     enableLivesearch = schema.Bool(\n-        title=_(u"Enable LiveSearch"),\n-        description=_(u"Enables the LiveSearch feature, which shows "\n-                      u"live results if the browser supports "\n-                      u"JavaScript."),\n+        title=_("Enable LiveSearch"),\n+        description=_(\n+            "Enables the LiveSearch feature, which shows "\n+            "live results if the browser supports "\n+            "JavaScript."\n+        ),\n         default=True,\n-        required=False)\n+        required=False,\n+    )\n \n \n @implementer(ISearchPortlet)\n class Assignment(base.Assignment):\n-\n     def __init__(self, enableLivesearch=True):\n         self.enableLivesearch = enableLivesearch\n \n     @property\n     def title(self):\n-        return _(u"Search")\n+        return _("Search")\n \n \n class Renderer(base.Renderer):\n \n-    render = ViewPageTemplateFile(\'search.pt\')\n-    action = \'@@search\'\n-    livesearch_action = \'livesearch_reply\'\n+    render = ViewPageTemplateFile("search.pt")\n+    action = "@@search"\n+    livesearch_action = "livesearch_reply"\n \n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.navigation_root_url = portal_state.navigation_root_url()\n \n     def enable_livesearch(self):\n         return self.data.enableLivesearch\n \n     def search_action(self):\n-        return \'{0}/{1}\'.format(self.navigation_root_url, self.action)\n+        return f"{self.navigation_root_url}/{self.action}"\n \n     def navigation_root_url(self):\n         return getNavigationRoot(self.context)\n@@ -58,8 +57,8 @@ def navigation_root_url(self):\n \n class AddForm(base.AddForm):\n     schema = ISearchPortlet\n-    label = _(u"Add Search Portlet")\n-    description = _(u"This portlet shows a search box.")\n+    label = _("Add Search Portlet")\n+    description = _("This portlet shows a search box.")\n \n     def create(self, data):\n         return Assignment()\n@@ -67,5 +66,5 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = ISearchPortlet\n-    label = _(u"Edit Search Portlet")\n-    description = _(u"This portlet shows a search box.")\n+    label = _("Edit Search Portlet")\n+    description = _("This portlet shows a search box.")\ndiff --git a/plone/app/portlets/storage.py b/plone/app/portlets/storage.py\nindex 53f382b8..8a4eba53 100644\n--- a/plone/app/portlets/storage.py\n+++ b/plone/app/portlets/storage.py\n@@ -1,46 +1,39 @@\n-# -*- coding: utf-8 -*-\n-from zope.annotation.interfaces import IAnnotations\n-from zope.interface import implementer\n-from zope.component import adapts\n-from zope.component import getUtility\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from zope.publisher.interfaces.browser import IBrowserPublisher\n-\n-from zope.container.interfaces import INameChooser\n-from zope.container.contained import NameChooser\n-from zope.container.traversal import ItemTraverser\n-\n from Acquisition import aq_base\n from BTrees.OOBTree import OOBTree\n from OFS.SimpleItem import SimpleItem\n-\n+from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n+from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n-\n+from plone.portlets import constants\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets import constants\n from plone.portlets.storage import PortletAssignmentMapping as BaseMapping\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.component import getUtility\n+from zope.container.contained import NameChooser\n+from zope.container.interfaces import INameChooser\n+from zope.container.traversal import ItemTraverser\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n-from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n \n ATTEMPTS = 10000\n \n category_to_name = {\n-    constants.CONTEXT_CATEGORY: \'contextportlets\',\n-    constants.USER_CATEGORY: \'dashboard\',\n-    constants.GROUP_CATEGORY: \'groupportlets\',\n-    constants.CONTENT_TYPE_CATEGORY: \'contenttypeportlets\',\n+    constants.CONTEXT_CATEGORY: "contextportlets",\n+    constants.USER_CATEGORY: "dashboard",\n+    constants.GROUP_CATEGORY: "groupportlets",\n+    constants.CONTENT_TYPE_CATEGORY: "contenttypeportlets",\n }\n \n \n class PortletAssignmentMapping(BaseMapping, SimpleItem):\n-    """A Zope 2 version of the default assignment mapping storage.\n-    """\n+    """A Zope 2 version of the default assignment mapping storage."""\n \n-    def __init__(self, manager=u\'\', category=u\'\', name=u\'\', context=None):\n-        super(PortletAssignmentMapping, self).__init__(manager, category, name)\n+    def __init__(self, manager="", category="", name="", context=None):\n+        super().__init__(manager, category, name)\n         # Keep track of context so we can avoid storing anything\n         # until an assignment is actually added.\n         self._v_context = context\n@@ -55,16 +48,16 @@ def id(self):\n         suffix = manager\n \n         if category != constants.CONTEXT_CATEGORY and key:\n-            suffix = "%s+%s" % (manager, key)\n+            suffix = f"{manager}+{key}"\n \n-        return "++%s++%s" % (prefix, suffix)\n+        return f"++{prefix}++{suffix}"\n \n     def __getitem__(self, key):\n         return BaseMapping.__getitem__(self, key).__of__(self)\n \n     def __setitem__(self, key, assignment):\n         # add the assignment mapping to the object graph, if it\'s not there yet\n-        if getattr(self, \'_v_context\', None) is not None:\n+        if getattr(self, "_v_context", None) is not None:\n             annotations = IAnnotations(self._v_context)\n             assignments = annotations.get(CONTEXT_ASSIGNMENT_KEY, None)\n             if assignments is None:\n@@ -79,28 +72,25 @@ def __setitem__(self, key, assignment):\n \n @implementer(IUserPortletAssignmentMapping)\n class UserPortletAssignmentMapping(PortletAssignmentMapping):\n-    """An assignment mapping for user/dashboard portlets\n-    """\n+    """An assignment mapping for user/dashboard portlets"""\n \n \n @implementer(IGroupDashboardPortletAssignmentMapping)\n class GroupDashboardPortletAssignmentMapping(PortletAssignmentMapping):\n-    """An assignment mapping for group dashboard portlets\n-    """\n+    """An assignment mapping for group dashboard portlets"""\n \n     @property\n     def id(self):\n         manager = self.__manager__\n         key = self.__name__\n \n-        return "++groupdashboard++%s+%s" % (manager, key)\n+        return f"++groupdashboard++{manager}+{key}"\n \n \n @implementer(IBrowserPublisher)\n+@adapter(IPortletAssignmentMapping, IDefaultBrowserLayer)\n class PortletAssignmentMappingTraverser(ItemTraverser):\n-    """A traverser for portlet assignment mappings, that is acqusition-aware\n-    """\n-    adapts(IPortletAssignmentMapping, IDefaultBrowserLayer)\n+    """A traverser for portlet assignment mappings, that is acqusition-aware"""\n \n     def publishTraverse(self, request, name):\n         ob = ItemTraverser.publishTraverse(self, request, name)\n@@ -109,8 +99,7 @@ def publishTraverse(self, request, name):\n \n @implementer(INameChooser)\n class PortletsNameChooser(NameChooser):\n-    """A name chooser for portlets\n-    """\n+    """A name chooser for portlets"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -157,7 +146,7 @@ def chooseName(self, name, object):\n         container = self.context\n \n         if not name:\n-            name = getattr(object, \'title\', None)\n+            name = getattr(object, "title", None)\n \n         if not name:\n             name = object.__class__.__name__\ndiff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex 72f5b8b3..f37875e6 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n+from plone.app.testing import login\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import applyProfile\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n from plone.testing import z2\n+from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n import doctest\n@@ -20,28 +19,29 @@ class PloneAppPortlets(PloneSandboxLayer):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        z2.installProduct(app, \'plone.app.portlets\')\n+        z2.installProduct(app, "plone.app.portlets")\n \n         # Include testing profile\n         import plone.app.portlets\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.portlets.tests,\n-                       context=configurationContext)\n+\n+        xmlconfig.file(\n+            "configure.zcml", plone.app.portlets.tests, context=configurationContext\n+        )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n \n         # Prepare test content\n-        pw = getToolByName(portal, \'portal_workflow\')\n+        pw = getToolByName(portal, "portal_workflow")\n         pw.setDefaultChain("simple_publication_workflow")\n-        portal.invokeFactory("Folder", id=\'folder\', title=u"Test Folder")\n-        portal.invokeFactory("Folder", id=\'news\', title=u\'News\')\n-        portal.invokeFactory("Folder", id=\'users\', title=u\'Users\')\n-        portal.invokeFactory("Folder", id=\'events\', title=u\'Events\')\n-        pw.doActionFor(portal.news, \'publish\')\n+        portal.invokeFactory("Folder", id="folder", title="Test Folder")\n+        portal.invokeFactory("Folder", id="news", title="News")\n+        portal.invokeFactory("Folder", id="users", title="Users")\n+        portal.invokeFactory("Folder", id="events", title="Events")\n+        pw.doActionFor(portal.news, "publish")\n \n \n PLONE_APP_PORTLETS_FIXTURE = PloneAppPortlets()\ndiff --git a/plone/app/portlets/tests/__init__.py b/plone/app/portlets/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/portlets/tests/__init__.py\n+++ b/plone/app/portlets/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex 9a819eeb..f2a77356 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base class for integration tests."""\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n \n@@ -14,10 +13,10 @@ class PortletsTestCase(unittest.TestCase):\n     layer = PLONE_APP_PORTLETS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'folder\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["folder"]\n+        self.request = self.layer["request"]\n \n         self.afterSetUp()\n \ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex 5b45916c..c52d40bd 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -1,35 +1,20 @@\n-# -*- coding: utf-8 -*-\n+from doctest import DocFileSuite\n from plone.app.portlets.testing import OPTIONFLAGS\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.testing import layered\n from unittest import TestSuite\n \n-import doctest\n-import re\n-import six\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub(\n-                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n-            )\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n \n def test_suite():\n     suite = TestSuite()\n     suite.addTest(\n         layered(\n-            doctest.DocFileSuite(\n-                \'testMemberDashboard.rst\',\n-                checker=Py23DocChecker(),\n-                package=\'plone.app.portlets.tests\',\n+            DocFileSuite(\n+                "testMemberDashboard.rst",\n+                package="plone.app.portlets.tests",\n                 optionflags=OPTIONFLAGS,\n             ),\n-            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING,\n         )\n     )\n     return suite\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex 20831a01..c9a2b605 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import actions\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n@@ -13,95 +12,98 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n-import six\n-\n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_portlet_type_registered(self):\n-        portlet = getUtility(\n-            IPortletType,\n-            name=\'portlets.Actions\')\n-        self.assertEquals(portlet.addview,\n-                          \'portlets.Actions\')\n+        portlet = getUtility(IPortletType, name="portlets.Actions")\n+        self.assertEquals(portlet.addview, "portlets.Actions")\n         return\n \n     def test_interfaces(self):\n-        portlet = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n+        portlet = actions.Assignment(\n+            ptitle="actions", category="document", show_icons=True\n+        )\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n         return\n \n     def test_invoke_add_view(self):\n-        portlet = getUtility(\n-            IPortletType,\n-            name=\'portlets.Actions\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Actions")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n-        data = {\n-            \'ptitle\': u"Actions",\n-            \'category\': u\'document\',\n-            \'show_icons\': True}\n+        data = {"ptitle": "Actions", "category": "document", "show_icons": True}\n         addview.createAndAdd(data=data)\n \n         self.assertEquals(len(mapping), 1)\n-        self.assertTrue(isinstance(mapping.values()[0],\n-                                   actions.Assignment))\n+        self.assertTrue(isinstance(mapping.values()[0], actions.Assignment))\n         return\n \n     def test_invoke_edit_view(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = actions.Assignment(\n+            ptitle="actions", category="document", show_icons=True\n+        )\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, actions.EditForm))\n         return\n \n     def test_obtain_renderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\',\n-                             context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n \n-        assignment = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n+        assignment = actions.Assignment(\n+            ptitle="actions", category="document", show_icons=True\n+        )\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, actions.Renderer))\n         return\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n \n-        assignment = assignment or actions.Assignment(ptitle=u\'actions\', category=u\'site_actions\', show_icons=True)\n-        return getMultiAdapter((context, request, view, manager, assignment),\n-                               IPortletRenderer)\n+        assignment = assignment or actions.Assignment(\n+            ptitle="actions", category="site_actions", show_icons=True\n+        )\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_render(self):\n-        migtool = getToolByName(self.portal, \'portal_migration\')\n+        migtool = getToolByName(self.portal, "portal_migration")\n \n-        r = self.renderer(context=self.portal,\n-                          assignment=actions.Assignment(ptitle=u\'actions\', category=u\'site_actions\', show_icons=True))\n+        r = self.renderer(\n+            context=self.portal,\n+            assignment=actions.Assignment(\n+                ptitle="actions", category="site_actions", show_icons=True\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n@@ -111,19 +113,21 @@ def test_render(self):\n             self.assertEqual(len(output), 4)\n \n         first = output[0]\n-        self.assertEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n-        self.assertEqual(first[\'title\'], u"Site Map")\n+        self.assertEqual(first["url"], "http://nohost/plone/sitemap")\n+        self.assertEqual(first["title"], "Site Map")\n \n     def test_render_woicon(self):\n         """Without icons"""\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'site_actions\', show_icons=False))\n+                ptitle="actions", category="site_actions", show_icons=False\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n         first = output[0]\n-        self.assertTrue(first[\'icon\'] is None, "We should not have an icon")\n+        self.assertTrue(first["icon"] is None, "We should not have an icon")\n         return\n \n     def test_multiple_portlets(self):\n@@ -134,21 +138,28 @@ def test_multiple_portlets(self):\n         This test was written due to bug caused by caching actionLinks portlet\n         renderer\'s method\n         """\n-        migtool = getToolByName(self.portal, \'portal_migration\')\n+        migtool = getToolByName(self.portal, "portal_migration")\n \n         # let\'s create two different portlet renderers for the same context\n         # thus for the same REQUEST, plone memoize uses REQUEST to cache data\n-        r1 = self.renderer(assignment=actions.Assignment(\n-            ptitle=u\'tabs\', category=u\'portal_tabs\', show_icons=True))\n+        r1 = self.renderer(\n+            assignment=actions.Assignment(\n+                ptitle="tabs", category="portal_tabs", show_icons=True\n+            )\n+        )\n         r1.update()\n         links1 = r1.actionLinks()\n-        r2 = self.renderer(assignment=actions.Assignment(ptitle=u\'site actions\', category=u\'site_actions\', show_icons=False))\n+        r2 = self.renderer(\n+            assignment=actions.Assignment(\n+                ptitle="site actions", category="site_actions", show_icons=False\n+            )\n+        )\n         r2.update()\n         links2 = r2.actionLinks()\n \n         # check the portal_tabs links (portal_tabs is somehow special)\n         self.assertEquals(len(links1), 5)\n-        self.assertEquals(links1[0][\'title\'], u\'Home\')\n+        self.assertEquals(links1[0]["title"], "Home")\n \n         # now check the site_actions links\n         # this was failing until the caching of actionLinks method was fixed\n@@ -156,9 +167,9 @@ def test_multiple_portlets(self):\n             self.assertEquals(len(links2), 3)\n         else:\n             self.assertEquals(len(links2), 4)\n-        self.assertEquals(links2[0][\'title\'], u\'Site Map\')\n-        self.assertEquals(links2[0][\'url\'], \'http://nohost/plone/sitemap\')\n-        self.assertEquals(links2[0][\'icon\'], None)\n+        self.assertEquals(links2[0]["title"], "Site Map")\n+        self.assertEquals(links2[0]["url"], "http://nohost/plone/sitemap")\n+        self.assertEquals(links2[0]["icon"], None)\n         return\n \n     def test_portal_tabs(self):\n@@ -168,56 +179,63 @@ def test_portal_tabs(self):\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'portal_tabs\', show_icons=True))\n+                ptitle="actions", category="portal_tabs", show_icons=True\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Test Folder\', u\'Home\', u\'Users\', u\'News\', u\'Events\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = {"Test Folder", "Home", "Users", "News", "Events"}\n+        got = {str(link["title"]) for link in output}\n         self.assertEqual(got, expected)\n \n     def test_object_buttons(self):\n-        """Special stuff for the object_buttons category\n-        """\n+        """Special stuff for the object_buttons category"""\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=False))\n+                ptitle="actions", category="object_buttons", show_icons=False\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Cut\', u\'Copy\', u\'Rename\', u\'Delete\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = {"Cut", "Copy", "Rename", "Delete"}\n+        got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\n \n     def test_category(self):\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=False))\n+                ptitle="actions", category="object_buttons", show_icons=False\n+            ),\n+        )\n         r.update()\n-        self.assertEqual(r.category, \'object_buttons\')\n+        self.assertEqual(r.category, "object_buttons")\n \n     def test_category_normalize(self):\n-        class DummyData(object):\n-            category = \'Complex Category\'\n+        class DummyData:\n+            category = "Complex Category"\n+\n         r = actions.Renderer(None, None, None, None, DummyData())\n-        self.assertEqual(r.category, \'complex-category\')\n+        self.assertEqual(r.category, "complex-category")\n \n     def test_object_buttons_with_icons(self):\n-        """Special stuff for the object_buttons category (bug in render_icons)\n-        """\n+        """Special stuff for the object_buttons category (bug in render_icons)"""\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=True))\n+                ptitle="actions", category="object_buttons", show_icons=True\n+            ),\n+        )\n         r.update()\n         self.assertTrue(r.actionLinks)\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Cut\', u\'Copy\', u\'Rename\', u\'Delete\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = {"Cut", "Copy", "Rename", "Delete"}\n+        got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex 8e1de84f..f3ca0184 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n \n \n-class MockBrain(object):\n-\n+class MockBrain:\n     def __init__(self, path="some/path", modified="2002-01-01"):\n         self.path = path\n         self.modified = modified\n@@ -14,15 +12,14 @@ def getPath(self):\n         return self.path\n \n \n-class MockLocation(object):\n-\n+class MockLocation:\n     def __init__(self, name):\n         self.__name__ = name\n \n \n-class MockRenderer(object):\n-    manager = MockLocation(\'some_manager\')\n-    data = MockLocation(\'some_assignment\')\n+class MockRenderer:\n+    manager = MockLocation("some_manager")\n+    data = MockLocation("some_assignment")\n     data_brains = [MockBrain(), MockBrain()]\n \n     def __init__(self, context, request):\n@@ -34,13 +31,12 @@ def _data(self):\n \n \n class TestCacheKey(PortletsTestCase):\n-\n     def testRenderCachekey(self):\n         context = self.folder\n         renderer = MockRenderer(context, context.REQUEST)\n \n         key1 = render_cachekey(None, renderer)\n-        renderer.manager.__name__ += \'__changed__\'\n+        renderer.manager.__name__ += "__changed__"\n         key2 = render_cachekey(None, renderer)\n \n         self.assertTrue(key1 != key2)\n@@ -59,13 +55,14 @@ def testNonASCIIPath(self):\n         # http://dev.plone.org/plone/ticket/7086\n         context = self.folder\n         renderer = MockRenderer(context, context.REQUEST)\n-        renderer.data_brains = [\n-            MockBrain("Pr\\xc5\\xafvodce"), MockBrain("p\\xc5\\x99i")]\n+        renderer.data_brains = [MockBrain("Pr\\xc5\\xafvodce"), MockBrain("p\\xc5\\x99i")]\n         render_cachekey(None, renderer)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestCacheKey))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_classic_portlet.py b/plone/app/portlets/tests/test_classic_portlet.py\nindex cfd16956..cbe01e5a 100644\n--- a/plone/app/portlets/tests/test_classic_portlet.py\n+++ b/plone/app/portlets/tests/test_classic_portlet.py\n@@ -1,50 +1,49 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import classic\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n-        self.assertEqual(portlet.addview, \'portlets.Classic\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n+        self.assertEqual(portlet.addview, "portlets.Classic")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n-        portlet = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n+        portlet = classic.Assignment(template="portlet_recent", macro="portlet")\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -55,51 +54,74 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = classic.Assignment(template="portlet_recent", macro="portlet")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, classic.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = classic.Assignment(template="portlet_recent", macro="portlet")\n+\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, classic.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = assignment or classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = assignment or classic.Assignment(\n+            template="portlet_recent", macro="portlet"\n+        )\n+\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def testUseMacro(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=\'portlet\'))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro="portlet")\n+        )\n         self.assertEqual(True, r.use_macro())\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=None))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro=None)\n+        )\n         self.assertEqual(False, r.use_macro())\n \n     def testPathExpression(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=\'portlet\'))\n-        self.assertEqual(\'context/portlet_recent/macros/portlet\', r.path_expression())\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=None))\n-        self.assertEqual(\'context/portlet_recent\', r.path_expression())\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro="portlet")\n+        )\n+        self.assertEqual("context/portlet_recent/macros/portlet", r.path_expression())\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro=None)\n+        )\n+        self.assertEqual("context/portlet_recent", r.path_expression())\n \n     def testRenderClassicPortlet(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'@@view\', macro=\'content-core\'))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="@@view", macro="content-core")\n+        )\n         r.render()\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex bfdbd8ea..a064e73b 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -1,69 +1,64 @@\n-# -*- coding: utf-8 -*-\n-\n-import time\n-\n-from zope.i18nmessageid import Message\n-from zope.interface import Interface\n-from zope.component import getUtility, queryUtility, getMultiAdapter\n-from zope.component import getSiteManager\n-from zope.component.interfaces import IFactory\n-\n+from plone.app.portlets.browser.adding import PortletAdding\n+from plone.app.portlets.exportimport.portlets import importPortlets\n+from plone.app.portlets.interfaces import IColumn\n+from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from Products.Five.browser import BrowserView\n-\n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.context import TarballExportContext\n-from Products.GenericSetup.tests.common import DummyImportContext\n-\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentSettings\n-\n+from plone.app.portlets.utils import assignment_mapping_from_key\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from plone.portlets.manager import PortletManager\n+from Products.Five.browser import BrowserView\n+from Products.GenericSetup.context import TarballExportContext\n+from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.tests.common import DummyImportContext\n+from zope.component import getMultiAdapter\n+from zope.component import getSiteManager\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from zope.component.interfaces import IFactory\n+from zope.i18nmessageid import Message\n+from zope.interface import Interface\n \n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.interfaces import IColumn\n-\n-from plone.app.portlets.browser.adding import PortletAdding\n-from plone.app.portlets.utils import assignment_mapping_from_key\n+import time\n \n-from plone.app.portlets.exportimport.portlets import importPortlets\n \n # BBB Zope 2.12\n try:\n-    from Zope2.App import zcml\n     from OFS import metaconfigure\n-    zcml # pyflakes\n+    from Zope2.App import zcml\n+\n+    zcml  # pyflakes\n     metaconfigure\n except ImportError:\n-    from Products.Five import zcml\n     from Products.Five import fiveconfigure as metaconfigure\n+    from Products.Five import zcml\n \n \n class DummyView(BrowserView):\n     pass\n \n-# A sample portlet\n \n-from zope.interface import implementer\n-from zope import schema\n+# A sample portlet\n \n-from plone.portlets.interfaces import IPortletDataProvider\n from plone.app.portlets.portlets import base\n+from plone.portlets.interfaces import IPortletDataProvider\n+from zope import schema\n+from zope.interface import implementer\n \n \n class ITestPortlet(IPortletDataProvider):\n-    test_text = schema.TextLine(title=u"Test")\n-    test_bool = schema.Bool(title=u"Test")\n-    test_tuple = schema.Tuple(title=u"Test",\n-                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))\n+    test_text = schema.TextLine(title="Test")\n+    test_bool = schema.Bool(title="Test")\n+    test_tuple = schema.Tuple(\n+        title="Test",\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n+    )\n \n \n @implementer(ITestPortlet)\n@@ -77,24 +72,23 @@ class TestAssignment(base.Assignment):\n \n \n class TestRenderer(base.Renderer):\n-\n     def render(self):\n         return "Portlet for testing"\n \n \n class TestAddForm(base.AddForm):\n     schema = ITestPortlet\n-    label = u"Test portlet"\n+    label = "Test portlet"\n \n     def create(self, data):\n         a = TestAssignment()\n-        a.title = data.get(\'title\', u"")\n+        a.title = data.get("title", "")\n         return a\n \n \n class TestEditForm(base.EditForm):\n     schema = ITestPortlet\n-    label = u"Test portlet"\n+    label = "Test portlet"\n \n \n # A test portlet manager\n@@ -103,14 +97,14 @@ class TestEditForm(base.EditForm):\n class ITestColumn(IColumn):\n     pass\n \n-class TestZCML(PortletsTestCase):\n \n+class TestZCML(PortletsTestCase):\n     def testPortletTypeInterfaceRegistered(self):\n-        iface = getUtility(IPortletTypeInterface, name=u"portlets.test.Test")\n+        iface = getUtility(IPortletTypeInterface, name="portlets.test.Test")\n         self.assertEqual(ITestPortlet, iface)\n \n     def testFactoryRegistered(self):\n-        factory = getUtility(IFactory, name=u"portlets.test.Test")\n+        factory = getUtility(IFactory, name="portlets.test.Test")\n         self.assertEqual(TestAssignment, factory._callable)\n \n     def testRendererRegistered(self):\n@@ -120,98 +114,127 @@ def testRendererRegistered(self):\n         manager = PortletManager()\n         assignment = TestAssignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, TestRenderer))\n \n     def testAddViewRegistered(self):\n         request = self.portal.REQUEST\n         adding = PortletAdding(self.portal, request)\n \n-        addview = getMultiAdapter((adding, request), name=u"portlets.test.Test")\n+        addview = getMultiAdapter((adding, request), name="portlets.test.Test")\n         self.assertTrue(isinstance(addview, TestAddForm))\n \n     def testEditViewRegistered(self):\n         assignment = TestAssignment()\n         request = self.portal.REQUEST\n \n-        editview = getMultiAdapter((assignment, request), name=u"edit")\n+        editview = getMultiAdapter((assignment, request), name="edit")\n         self.assertTrue(isinstance(editview, TestEditForm))\n \n \n class TestGenericSetup(PortletsTestCase):\n-\n     def afterSetUp(self):\n         portal_setup = self.portal.portal_setup\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n     def testPortletManagerInstalled(self):\n-        manager = getUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = getUtility(IPortletManager, name="test.testcolumn")\n         self.assertTrue(ITestColumn.providedBy(manager))\n \n     def disabled_testPortletTypeRegistered(self):\n-        portlet_type = getUtility(IPortletType, name=u"portlets.test.Test")\n-        self.assertEqual(\'portlets.test.Test\', portlet_type.addview)\n+        portlet_type = getUtility(IPortletType, name="portlets.test.Test")\n+        self.assertEqual("portlets.test.Test", portlet_type.addview)\n         self.assertEqual([Interface], portlet_type.for_)\n         # XXX Missing i18n support in the exportimport code\n-        self.assertTrue(isinstance(portlet_type.title, Message),\n-                        "Portlet title should be a Message instance")\n-        self.assertTrue(isinstance(portlet_type.description, Message),\n-                        "Portlet description should be a Message instance")\n-        self.assertEqual(u"title_test_portlet", portlet_type.title)\n-        self.assertEqual(u"description_test_portlet", portlet_type.description)\n-        self.assertEqual(u"Test portlet", portlet_type.title.default)\n-        self.assertEqual(u"A test portlet", portlet_type.description.default)\n-        self.assertEqual(u"plone", portlet_type.title.domain)\n-        self.assertEqual(u"plone", portlet_type.description.domain)\n+        self.assertTrue(\n+            isinstance(portlet_type.title, Message),\n+            "Portlet title should be a Message instance",\n+        )\n+        self.assertTrue(\n+            isinstance(portlet_type.description, Message),\n+            "Portlet description should be a Message instance",\n+        )\n+        self.assertEqual("title_test_portlet", portlet_type.title)\n+        self.assertEqual("description_test_portlet", portlet_type.description)\n+        self.assertEqual("Test portlet", portlet_type.title.default)\n+        self.assertEqual("A test portlet", portlet_type.description.default)\n+        self.assertEqual("plone", portlet_type.title.domain)\n+        self.assertEqual("plone", portlet_type.description.domain)\n \n     def testAssignmentCreatedAndOrdered(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n-        self.assertEqual([\'test.portlet3\', \'test.portlet2\', \'test.portlet1\'], list(mapping.keys()))\n+        self.assertEqual(\n+            ["test.portlet3", "test.portlet2", "test.portlet1"], list(mapping.keys())\n+        )\n \n     def testAssignmentPropertiesSet(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n-\n-        assignment = mapping[\'test.portlet1\']\n-        self.assertEqual(u\'Test pr\\xf6p 1\', assignment.test_text)\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n+\n+        assignment = mapping["test.portlet1"]\n+        self.assertEqual("Test pr\\xf6p 1", assignment.test_text)\n         self.assertEqual(False, assignment.test_bool)\n-        self.assertEqual((u\'published\', u\'private\'), assignment.test_tuple)\n+        self.assertEqual(("published", "private"), assignment.test_tuple)\n \n-        assignment = mapping[\'test.portlet2\']\n-        self.assertEqual(\'Test prop 2\', assignment.test_text)\n+        assignment = mapping["test.portlet2"]\n+        self.assertEqual("Test prop 2", assignment.test_text)\n         self.assertEqual(True, assignment.test_bool)\n         self.assertEqual((), assignment.test_tuple)\n \n-        assignment = mapping[\'test.portlet3\']\n+        assignment = mapping["test.portlet3"]\n         self.assertEqual(None, assignment.test_text)\n         self.assertEqual(None, assignment.test_bool)\n         self.assertEqual(None, assignment.test_tuple)\n \n     def testAssignmentSettings(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n-        assignment = mapping[\'test.portlet1\']\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n+        assignment = mapping["test.portlet1"]\n         settings = IPortletAssignmentSettings(assignment)\n-        self.assertTrue(settings.get(\'visible\', True))\n+        self.assertTrue(settings.get("visible", True))\n \n-        assignment = mapping[\'test.portlet2\']\n+        assignment = mapping["test.portlet2"]\n         settings = IPortletAssignmentSettings(assignment)\n-        self.assertFalse(settings.get(\'visible\', True))\n+        self.assertFalse(settings.get("visible", True))\n \n     def testAssignmentRoot(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         # No assignment in /news subfolder\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/news")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/news",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -225,13 +248,21 @@ def testAssignmentRoot(self):\n         importPortlets(context)\n \n         # Still 3 portlets in the root\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         # but 1 extra in the /news subfolder\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/news")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/news",\n+        )\n         self.assertEqual(1, len(mapping))\n \n     def testAssignmentRemoval(self):\n@@ -239,38 +270,48 @@ def testAssignmentRemoval(self):\n \n         # wait a bit or we get duplicate ids on import\n         time.sleep(1)\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n \n         # initally there should be no portlet7\n-        self.assertEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertEqual(mapping.get("test.portlet7", None), None)\n \n         # now we add one\n-        portlet_factory = getUtility(IFactory, name=\'portlets.test.Test\')\n+        portlet_factory = getUtility(IFactory, name="portlets.test.Test")\n         assignment = portlet_factory()\n-        mapping[\'test.portlet7\'] = assignment\n+        mapping["test.portlet7"] = assignment\n \n         # make sure it\'s there\n-        self.assertNotEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertNotEqual(mapping.get("test.portlet7", None), None)\n \n         # wait a bit or we get duplicate ids on import\n         time.sleep(1)\n         # run the profile\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n         # and should have got rid of it again\n-        self.assertEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertEqual(mapping.get("test.portlet7", None), None)\n \n     def testAssignmentPurging(self):\n         # initially there should be 3 assignments on the root\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -283,18 +324,28 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         # group assignments should still be there\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=GROUP_CATEGORY, key="Reviewers")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n         self.assertEqual(1, len(mapping))\n \n         # and be purgable\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -307,18 +358,28 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=GROUP_CATEGORY, key="Reviewers")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         # also content type assignments should still be there\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n         self.assertEqual(2, len(mapping))\n \n         # and be purgable\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -331,55 +392,61 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testBlacklisting(self):\n-        manager = getUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = getUtility(IPortletManager, name="test.testcolumn")\n \n-        if \'news\' in self.portal.objectIds():\n-            news = self.portal[\'news\']\n+        if "news" in self.portal.objectIds():\n+            news = self.portal["news"]\n \n             assignable = getMultiAdapter(\n-                (news, manager), ILocalPortletAssignmentManager)\n+                (news, manager), ILocalPortletAssignmentManager\n+            )\n \n-            self.assertEqual(\n-                True, assignable.getBlacklistStatus(CONTEXT_CATEGORY))\n-            self.assertEqual(\n-                False, assignable.getBlacklistStatus(GROUP_CATEGORY))\n-            self.assertEqual(\n-                None, assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY))\n+            self.assertEqual(True, assignable.getBlacklistStatus(CONTEXT_CATEGORY))\n+            self.assertEqual(False, assignable.getBlacklistStatus(GROUP_CATEGORY))\n+            self.assertEqual(None, assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY))\n \n     def testPurgeMethod(self):\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+        handler = getMultiAdapter((sm, context), IBody, name="plone.portlets")\n         handler._purgePortlets()\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testPurge(self):\n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets purge="True">\n             </portlets>\n         """\n         importPortlets(context)\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testManagerRemove(self):\n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <portletmanager\n                     name="test.testcolumn"\n@@ -389,12 +456,14 @@ def testManagerRemove(self):\n         """\n         importPortlets(context)\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testManagerPurge(self):\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <portletmanager\n                     name="test.testcolumn"\n@@ -404,34 +473,46 @@ def testManagerPurge(self):\n         """\n         importPortlets(context)\n \n-        self.assertRaises(KeyError,\n-                          assignment_mapping_from_key,\n-                          self.portal, manager_name=u"test.testcolumn",\n-                          category=GROUP_CATEGORY, key="Reviewers")\n-\n-        self.assertRaises(KeyError,\n-                          assignment_mapping_from_key,\n-                          self.portal, manager_name=u"test.testcolumn",\n-                          category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        self.assertRaises(\n+            KeyError,\n+            assignment_mapping_from_key,\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n+\n+        self.assertRaises(\n+            KeyError,\n+            assignment_mapping_from_key,\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n \n         # context assignment at the root are purged as well\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testExport(self):\n         self.maxDiff = None\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+        handler = getMultiAdapter((sm, context), IBody, name="plone.portlets")\n         handler._purgePortlets()\n \n         time.sleep(1)\n \n         portal_setup = self.portal.portal_setup\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n-        expected = u"""\\\n+        expected = """\\\n <?xml version="1.0" encoding="utf-8"?>\n <portlets>\n  <portletmanager name="test.testcolumn"\n@@ -511,11 +592,13 @@ def testExport(self):\n """\n \n         body = handler.body\n-        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'))\n+        self.assertEqual(expected.strip(), body.strip().decode("utf8"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestZCML))\n     suite.addTest(makeSuite(TestGenericSetup))\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex c5ccf569..c15b08cd 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -1,14 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-\n+from plone.app.testing import TEST_USER_ID\n from plone.portlets.interfaces import IPortletContext\n \n \n class TestBasicContext(PortletsTestCase):\n-\n     def testParent(self):\n         ctx = IPortletContext(self.folder)\n         self.assertTrue(ctx.getParent() is self.folder.aq_parent)\n@@ -17,51 +14,50 @@ def testGlobalsNoGroups(self):\n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[2], (\'group\', \'Administrators\'))\n-        self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[2], ("group", "Administrators"))\n+        self.assertEqual(g[4], ("group", "Reviewers"))\n \n     def testAnonymous(self):\n         logout()\n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 2)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', \'Anonymous User\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", "Anonymous User"))\n \n \n class TestPortalRootContext(PortletsTestCase):\n-\n     def testParent(self):\n         ctx = IPortletContext(self.portal)\n         self.assertTrue(ctx.getParent() is None)\n@@ -70,51 +66,53 @@ def testGlobalsNoGroups(self):\n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[2], (\'group\', \'Administrators\'))\n-        self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[2], ("group", "Administrators"))\n+        self.assertEqual(g[4], ("group", "Reviewers"))\n \n     def testAnonymous(self):\n         logout()\n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 2)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', \'Anonymous User\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", "Anonymous User"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestBasicContext))\n     suite.addTest(makeSuite(TestPortalRootContext))\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex f8798eea..0d504f76 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n@@ -6,42 +5,39 @@\n from plone.portlets.interfaces import IPortletType\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from unittest import makeSuite\n+from unittest import TestSuite\n from zExceptions import Unauthorized\n-from zope.component import getUtility, getMultiAdapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.event import notify\n \n-import six\n-\n \n class TestDashboard(PortletsTestCase):\n-\n     def test_default_dashboard_created_for_new_user(self):\n \n-        col = getUtility(IPortletManager, name=\'plone.dashboard1\')\n+        col = getUtility(IPortletManager, name="plone.dashboard1")\n         user_portlets = col[USER_CATEGORY]\n-        self.assertFalse(\'fakeuser\' in user_portlets)\n+        self.assertFalse("fakeuser" in user_portlets)\n \n         # This would normally happen when a user is created\n-        notify(PrincipalCreated(PropertiedUser(\'fakeuser\')))\n+        notify(PrincipalCreated(PropertiedUser("fakeuser")))\n \n         # We would expect some portlets to have been created after the\n         # event handler has finished processing\n \n-        self.assertTrue(\'fakeuser\' in user_portlets)\n-        self.assertTrue(len(user_portlets[\'fakeuser\']) > 0)\n+        self.assertTrue("fakeuser" in user_portlets)\n+        self.assertTrue(len(user_portlets["fakeuser"]) > 0)\n \n     def test_non_ascii_usernames_created(self):\n-        if six.PY2:\n-            user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n-        else:\n-            user1, pass1 = \'user1\\xa9\', \'pass1\'\n+        user1, pass1 = "user1\\xa9", "pass1"\n         uf = self.portal.acl_users\n \n         # Bug #6100 - Would throw a unicode decode error in event handler\n         # in dashboard.py\n-        uf.userFolderAddUser(user1, pass1, [\'Manager\'], [])\n+        uf.userFolderAddUser(user1, pass1, ["Manager"], [])\n \n-        col = getUtility(IPortletManager, name=\'plone.dashboard1\')\n+        col = getUtility(IPortletManager, name="plone.dashboard1")\n         retriever = getMultiAdapter((self.portal, col), IPortletRetriever)\n \n         # Bug #7860 - Would throw a unicode decode error when fetching\n@@ -50,7 +46,7 @@ def test_non_ascii_usernames_created(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestDashboard))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_exportimport.py b/plone/app/portlets/tests/test_exportimport.py\nindex ab4af6b2..545d53fa 100644\n--- a/plone/app/portlets/tests/test_exportimport.py\n+++ b/plone/app/portlets/tests/test_exportimport.py\n@@ -1,5 +1,4 @@\n-# -*- coding: utf-8 -*-\n-\n+from io import StringIO\n from plone.app.portlets.exportimport.portlets import PortletsXMLAdapter\n from plone.app.portlets.interfaces import IColumn\n from plone.app.portlets.interfaces import IDashboard\n@@ -10,7 +9,6 @@\n from plone.portlets.interfaces import IPortletType\n from plone.portlets.manager import PortletManager\n from Products.GenericSetup.testing import DummySetupEnviron\n-from six import StringIO\n from xml.dom.minidom import parseString\n from zope.component import getSiteManager\n from zope.component import getUtility\n@@ -19,15 +17,16 @@\n \n \n class PortletsExportImportTestCase(PortletsTestCase):\n-\n     def afterSetUp(self):\n         self.sm = getSiteManager(self.portal)\n-        self.importer = self.exporter = PortletsXMLAdapter(self.sm,\n-          DummySetupEnviron())\n-\n-    def _searchPortletManagerRegistrations(self, name = None):\n-        results = [r for r in self.sm.registeredUtilities()\n-          if r.provided.isOrExtends(IPortletManager)]\n+        self.importer = self.exporter = PortletsXMLAdapter(self.sm, DummySetupEnviron())\n+\n+    def _searchPortletManagerRegistrations(self, name=None):\n+        results = [\n+            r\n+            for r in self.sm.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n         if name:\n             results = [r for r in results if r.name == name]\n         return results\n@@ -40,37 +39,36 @@ def _node_as_string(self, node):\n \n \n class TestImportPortlets(PortletsExportImportTestCase):\n-\n     def test_removePortlet(self):\n-        self.assertTrue(queryUtility(IPortletType,\n-          name=\'portlets.News\') is not None)\n-        self.assertEqual(True,\n-          self.importer._removePortlet(\'portlets.News\'))\n-        self.assertTrue(queryUtility(IPortletType,\n-          name=\'portlets.News\') is None)\n-        self.assertEqual(False, self.importer._removePortlet(\'foo\'))\n+        self.assertTrue(queryUtility(IPortletType, name="portlets.News") is not None)\n+        self.assertEqual(True, self.importer._removePortlet("portlets.News"))\n+        self.assertTrue(queryUtility(IPortletType, name="portlets.News") is None)\n+        self.assertEqual(False, self.importer._removePortlet("foo"))\n \n     def test_checkBasicPortletNodeErrors(self):\n         node = parseString(_XML_INVALID_EXTEND_AND_PURGE).documentElement\n-        self.assertEqual(True,\n-            self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_INVALID_EXTEND_NONEXISTS).documentElement\n-        self.assertEqual(True,\n-          self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_INVALID_ADD_EXISTING).documentElement\n-        self.assertEqual(True,\n-            self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_EXTEND_EXISTING).documentElement\n-        self.assertEqual(False,\n-          self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            False, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n     def test_modifyForList(self):\n         node = parseString(_XML_SWITCH_COLUMNS).documentElement\n-        self.assertEqual([IColumn],\n-          self.importer._modifyForList(node, [IDashboard]))\n+        self.assertEqual([IColumn], self.importer._modifyForList(node, [IDashboard]))\n \n     def test_initPortletNode_duplicateInterfaces(self):\n         node = parseString(_XML_DUPLICATE_INTERFACES).documentElement\n@@ -84,8 +82,8 @@ def test_initPortletNode_basic(self):\n         self.importer._initPortletNode(node)\n         portlet = queryUtility(IPortletType, name="portlets.New")\n         self.assertTrue(portlet is not None)\n-        self.assertEqual(\'Foo\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Foo", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n         self.assertEqual([IColumn], portlet.for_)\n \n     def disabled_test_initPortletNode_i18n(self):\n@@ -95,16 +93,20 @@ def disabled_test_initPortletNode_i18n(self):\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IColumn], portlet.for_)\n         # XXX Missing i18n support in the exportimport code\n-        self.assertTrue(isinstance(portlet.title, Message),\n-                        "Portlet title should be a Message instance")\n-        self.assertTrue(isinstance(portlet.description, Message),\n-                        "Portlet description should be a Message instance")\n-        self.assertEqual(u"title_foo_portlet", portlet.title)\n-        self.assertEqual(u"description_foo_portlet", portlet.description)\n-        self.assertEqual(u"Foo", portlet.title.default)\n-        self.assertEqual(u"Bar", portlet.description.default)\n-        self.assertEqual(u"foodomain", portlet.title.domain)\n-        self.assertEqual(u"foodomain", portlet.description.domain)\n+        self.assertTrue(\n+            isinstance(portlet.title, Message),\n+            "Portlet title should be a Message instance",\n+        )\n+        self.assertTrue(\n+            isinstance(portlet.description, Message),\n+            "Portlet description should be a Message instance",\n+        )\n+        self.assertEqual("title_foo_portlet", portlet.title)\n+        self.assertEqual("description_foo_portlet", portlet.description)\n+        self.assertEqual("Foo", portlet.title.default)\n+        self.assertEqual("Bar", portlet.description.default)\n+        self.assertEqual("foodomain", portlet.title.domain)\n+        self.assertEqual("foodomain", portlet.description.domain)\n \n     def test_initPortletNode_multipleInterfaces(self):\n         node = parseString(_XML_MULTIPLE_INTERFACES).documentElement\n@@ -132,8 +134,8 @@ def test_initPortletNode_extend(self):\n         portlet = queryUtility(IPortletType, name="portlets.ExtendMe")\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IDashboard], portlet.for_)\n-        self.assertEqual(\'Bar\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Bar", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n \n     def test_initPortletNode_purge(self):\n         node = parseString(_XML_PURGEME_SETUP).documentElement\n@@ -143,50 +145,54 @@ def test_initPortletNode_purge(self):\n         portlet = queryUtility(IPortletType, name="portlets.PurgeMe")\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IColumn], portlet.for_)\n-        self.assertEqual(\'Bar\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Bar", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n \n     def test_initPortletNode_remove(self):\n         node = parseString(_XML_REMOVEME_SETUP).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = queryUtility(IPortletType, name=\'portlets.RemoveMe\')\n+        portlet = queryUtility(IPortletType, name="portlets.RemoveMe")\n         self.assertTrue(portlet is not None)\n         node = parseString(_XML_REMOVEME_REMOVE).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = queryUtility(IPortletType, name=\'portlets.RemoveMe\')\n+        portlet = queryUtility(IPortletType, name="portlets.RemoveMe")\n         self.assertTrue(portlet is None)\n \n \n class TestExportPortlets(PortletsExportImportTestCase):\n-\n     def test_extractPortletNode(self):\n         node = parseString(_XML_MULTIPLE_INTERFACES).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = getUtility(IPortletType, \'portlets.New\')\n-        node = self.exporter._extractPortletNode(\'portlets.New\', portlet)\n+        portlet = getUtility(IPortletType, "portlets.New")\n+        node = self.exporter._extractPortletNode("portlets.New", portlet)\n         file = StringIO()\n         node.writexml(file)\n         file.seek(0)\n-        self.assertEqual("""<portlet title="Foo" addview="portlets.New" description="Foo"><for interface="plone.app.portlets.interfaces.IColumn"/><for interface="plone.app.portlets.interfaces.IDashboard"/></portlet>""", file.read())\n+        self.assertEqual(\n+            """<portlet title="Foo" addview="portlets.New" description="Foo"><for interface="plone.app.portlets.interfaces.IColumn"/><for interface="plone.app.portlets.interfaces.IDashboard"/></portlet>""",\n+            file.read(),\n+        )\n \n     def test_extractPortletNode_defaultManagerInterface(self):\n         node = parseString(_XML_EXPLICIT_DEFAULT_INTERFACE).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = getUtility(IPortletType, \'portlets.New\')\n-        node = self.exporter._extractPortletNode(\'portlets.New\', portlet)\n+        portlet = getUtility(IPortletType, "portlets.New")\n+        node = self.exporter._extractPortletNode("portlets.New", portlet)\n         file = StringIO()\n         node.writexml(file)\n         file.seek(0)\n-        self.assertEqual("""<portlet title="Foo" addview="portlets.New" description="Foo"/>""", file.read())\n+        self.assertEqual(\n+            """<portlet title="Foo" addview="portlets.New" description="Foo"/>""",\n+            file.read(),\n+        )\n \n \n class TestImportPortletManagers(PortletsExportImportTestCase):\n-\n     def test_initPortletManagerNode_basic(self):\n         node = parseString(_XML_PORTLET_MANAGER_BASIC).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertEqual(PortletManager, manager.__class__)\n \n@@ -194,7 +200,7 @@ def test_initPortletManagerNode_customType(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_TYPE).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertTrue(IColumn.providedBy(manager))\n \n@@ -202,40 +208,49 @@ def test_initPortletManagerNode_customClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_CLASS).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertEqual(FooPortletManager, manager.__class__)\n \n \n class TestExportPortletManagers(PortletsExportImportTestCase):\n-\n     def test_extractPortletManagerNode_defaultTypeAndClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_BASIC).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"/>\', self._node_as_string(node)\n+        )\n \n     def test_extractPortletManagerNode_customType(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_TYPE).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"  type="plone.app.portlets.interfaces.IColumn"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"  type="plone.app.portlets.interfaces.IColumn"/>\',\n+            self._node_as_string(node),\n+        )\n \n     def test_extractPortletManagerNode_customClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_CLASS).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"  class="plone.app.portlets.tests.utils.FooPortletManager"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"  class="plone.app.portlets.tests.utils.FooPortletManager"/>\',\n+            self._node_as_string(node),\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestImportPortlets))\n     suite.addTest(makeSuite(TestExportPortlets))\n@@ -243,6 +258,7 @@ def test_suite():\n     suite.addTest(makeSuite(TestExportPortletManagers))\n     return suite\n \n+\n _XML_INVALID_EXTEND_AND_PURGE = """<?xml version="1.0"?>\n <portlet addview="portlets.Exists" extend="" purge="" />\n """\ndiff --git a/plone/app/portlets/tests/test_formextender.py b/plone/app/portlets/tests/test_formextender.py\nindex 86c74aaa..6961f178 100644\n--- a/plone/app/portlets/tests/test_formextender.py\n+++ b/plone/app/portlets/tests/test_formextender.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.portlets.browser.interfaces import IPortletAddForm\n from plone.app.portlets.browser.interfaces import IPortletEditForm\n from plone.app.portlets.portlets import news\n@@ -26,33 +24,29 @@\n # A sample schemaextender:\n \n \n-EXTENDER_PREFIX = \'portletcssclass\'\n+EXTENDER_PREFIX = "portletcssclass"\n \n \n class IPortletCssClass(Interface):\n-    """ Schema for portlet css class  """\n+    """Schema for portlet css class"""\n \n     # css_class is just an example.\n     # In real life a css_class implementation would be a\n     # Choice field with a vocabulary, editable in a controlpanel.\n-    css_class = schema.TextLine(\n-        title=u\'Portlet appearance\',\n-        required=False\n-    )\n+    css_class = schema.TextLine(title="Portlet appearance", required=False)\n \n \n class PortletCssClassFormExtender(FormExtender):\n-\n     def update(self):\n         self.add(IPortletCssClass, prefix=EXTENDER_PREFIX)\n \n \n @adapter(IPortletAssignment)\n @implementer(IPortletCssClass)\n-class PortletCssClassAdapter(object):\n+class PortletCssClassAdapter:\n     def __init__(self, context):\n         # avoid recursion\n-        self.__dict__[\'context\'] = context\n+        self.__dict__["context"] = context\n \n     def __setattr__(self, attr, value):\n         settings = IPortletAssignmentSettings(self.context)\n@@ -64,16 +58,14 @@ def __getattr__(self, attr):\n \n \n class TestSchemaExtender(PortletsTestCase):\n-\n     def test_addform_fields(self):\n         schema_field_names = field.Fields(news.INewsPortlet).keys()\n \n         # We use the news portlet as a random example of a portlet\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n \n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n         addview_field_names = addview.fields.keys()\n \n@@ -82,82 +74,79 @@ def test_addform_fields(self):\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletAddForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n-\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n         addview_field_names = addview.fields.keys()\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletAddForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         # Our addview schema now includes our extended schema:\n-        self.assertEqual(addview_field_names,\n-                         schema_field_names + [EXTENDER_PREFIX+\'.css_class\'])\n+        self.assertEqual(\n+            addview_field_names, schema_field_names + [EXTENDER_PREFIX + ".css_class"]\n+        )\n \n     def test_invoke_add_form(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview.createAndAdd(data={\'count\': 5,\n-                                   EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        addview.createAndAdd(\n+            data={"count": 5, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n         self.assertEqual(portlet_assignment.count, 5)\n         # We have not extended our storage adapter, so nothing gets saved:\n-        self.assertIsNone(settings.get(\'css_class\', None))\n+        self.assertIsNone(settings.get("css_class", None))\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletAddForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview.createAndAdd(data={\'count\': 5,\n-                                   EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        addview.createAndAdd(\n+            data={"count": 5, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletAddForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         self.assertEqual(portlet_assignment.count, 5)\n         # The prefix is used for the form field, not for the stored data:\n-        self.assertEqual(settings.get(\'css_class\'), \'my-class\')\n+        self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_editform_fields(self):\n \n@@ -165,8 +154,8 @@ def test_editform_fields(self):\n \n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n         editview_field_names = editview.fields.keys()\n \n@@ -175,100 +164,103 @@ def test_editform_fields(self):\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletEditForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n \n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n         editview_field_names = editview.fields.keys()\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletEditForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         # Our editview schema now includes our extended schema:\n-        self.assertEqual(editview_field_names,\n-                         schema_field_names + [EXTENDER_PREFIX+\'.css_class\'])\n+        self.assertEqual(\n+            editview_field_names, schema_field_names + [EXTENDER_PREFIX + ".css_class"]\n+        )\n \n     def test_invoke_edit_form(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview.applyChanges(data={\'count\': 6,\n-                                    EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        editview.applyChanges(\n+            data={"count": 6, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n         self.assertEqual(portlet_assignment.count, 6)\n         # We have not extended our storage adapter, so nothing gets saved:\n-        self.assertIsNone(settings.get(\'css_class\', None))\n+        self.assertIsNone(settings.get("css_class", None))\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletEditForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview.applyChanges(data={\'count\': 6,\n-                                    EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        editview.applyChanges(\n+            data={"count": 6, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletEditForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         self.assertEqual(portlet_assignment.count, 6)\n         # The prefix is used for the form field, not for the stored data:\n-        self.assertEqual(settings.get(\'css_class\'), \'my-class\')\n+        self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_renderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = news.Assignment(count=5)\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, news.Renderer))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestSchemaExtender))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_login_portlet.py b/plone/app/portlets/tests/test_login_portlet.py\nindex 49ef3ab8..a3f3f810 100644\n--- a/plone/app/portlets/tests/test_login_portlet.py\n+++ b/plone/app/portlets/tests/test_login_portlet.py\n@@ -1,38 +1,34 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter, queryMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import login\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryMultiAdapter\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n-        self.assertEqual(portlet.addview, \'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n+        self.assertEqual(portlet.addview, "portlets.Login")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            ["plone.app.portlets.interfaces.IColumn"], registered_interfaces\n+        )\n \n     def testInterfaces(self):\n         portlet = login.Assignment()\n@@ -40,11 +36,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         # This is a NullAddForm - calling it does the work\n         addview()\n@@ -56,31 +52,42 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = login.Assignment()\n-        editview = queryMultiAdapter((mapping[\'foo\'], request), name=\'edit\', default=None)\n+        mapping["foo"] = login.Assignment()\n+        editview = queryMultiAdapter(\n+            (mapping["foo"], request), name="edit", default=None\n+        )\n         self.assertTrue(editview is None)\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = login.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, login.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment or login.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def testAvailable(self):\n         request = self.folder.REQUEST\n@@ -90,7 +97,7 @@ def testAvailable(self):\n         del request.__annotations__\n         r = self.renderer()\n         self.assertEqual(True, r.available)\n-        self.portal.acl_users._delObject(\'credentials_cookie_auth\')\n+        self.portal.acl_users._delObject("credentials_cookie_auth")\n         r = self.renderer()\n         del request.__annotations__\n         self.assertEqual(False, r.available)\n@@ -107,34 +114,35 @@ def testShow(self):\n         self.assertEqual(True, r.show())\n \n         del request.__annotations__\n-        request[\'URL\'] = self.portal.absolute_url() + \'/login_form\'\n+        request["URL"] = self.portal.absolute_url() + "/login_form"\n         self.assertEqual(False, self.renderer(request=request).show())\n \n         del request.__annotations__\n-        request[\'URL\'] = self.portal.absolute_url() + \'/@@register\'\n+        request["URL"] = self.portal.absolute_url() + "/@@register"\n         self.assertEqual(False, self.renderer(request=request).show())\n \n     def testCanRegister(self):\n         r = self.renderer()\n         self.assertFalse(r.can_register())\n \n-        #Enable self-registration to ensure that the register link is shown\n-        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        # Enable self-registration to ensure that the register link is shown\n+        self.portal.manage_permission("Add portal member", roles=["Anonymous"])\n         logout()\n \n-        self.folder.REQUEST[\'_plone_ec_cache\'] = {}\n+        self.folder.REQUEST["_plone_ec_cache"] = {}\n         self.assertTrue(r.can_register())\n \n-        #Hiding the Register action hides the register link\n+        # Hiding the Register action hides the register link\n         self.portal.portal_actions.user.join.visible = False\n         self.assertFalse(r.can_register())\n \n-\n     # TODO: Add more detailed tests here\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_manage_views.py b/plone/app/portlets/tests/test_manage_views.py\nindex d2a886db..c78baf9c 100644\n--- a/plone/app/portlets/tests/test_manage_views.py\n+++ b/plone/app/portlets/tests/test_manage_views.py\n@@ -1,23 +1,22 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n \n \n class TestManageAssignments(PortletsTestCase):\n-\n     def testMoveUp(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n     def testMoveDown(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n     def testDelete(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n \n def test_suite():\n     from unittest import TestSuite\n-    #from unittest import makeSuite\n+\n+    # from unittest import makeSuite\n     suite = TestSuite()\n     # TODO: Write tests that *pass*\n-    #suite.addTest(makeSuite(TestManageAssignments))\n+    # suite.addTest(makeSuite(TestManageAssignments))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_mapping.py b/plone/app/portlets/tests/test_mapping.py\nindex d7881ec4..b9170971 100644\n--- a/plone/app/portlets/tests/test_mapping.py\n+++ b/plone/app/portlets/tests/test_mapping.py\n@@ -1,24 +1,18 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.publisher.interfaces.browser import IBrowserPublisher\n-from zope.publisher.interfaces import NotFound\n-from zope.container.interfaces import INameChooser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.portlets import classic\n-\n from plone.app.portlets.browser.adding import PortletAdding\n-\n+from plone.app.portlets.portlets import classic\n+from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.container.interfaces import INameChooser\n+from zope.publisher.interfaces import NotFound\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n \n \n class TestNameChooser(PortletsTestCase):\n-\n     def testNameChooser(self):\n         mapping = PortletAssignmentMapping()\n         chooser = INameChooser(mapping)\n@@ -30,47 +24,57 @@ def testNameChooser(self):\n \n \n class TestContextMapping(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n+        self.manager = getUtility(IPortletManager, name="plone.leftcolumn")\n \n     def testAdapting(self):\n-        mapping = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testEquivalence(self):\n-        mapping = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n+        mapping["foo"] = c\n \n-        mapping2 = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n-        self.assertEqual(mapping2[\'foo\'], c)\n+        mapping2 = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n+        self.assertEqual(mapping2["foo"], c)\n \n \n class TestTraverser(PortletsTestCase):\n-\n     def afterSetUp(self):\n         self.mapping = PortletAssignmentMapping()\n         c = classic.Assignment()\n-        self.mapping[\'foo\'] = c\n-        self.traverser = getMultiAdapter((self.mapping, self.folder.REQUEST), IBrowserPublisher)\n+        self.mapping["foo"] = c\n+        self.traverser = getMultiAdapter(\n+            (self.mapping, self.folder.REQUEST), IBrowserPublisher\n+        )\n \n     def testTraverseToName(self):\n-        obj = self.traverser.publishTraverse(self.folder.REQUEST, \'foo\')\n-        self.assertTrue(aq_base(obj) is aq_base(self.mapping[\'foo\']))\n+        obj = self.traverser.publishTraverse(self.folder.REQUEST, "foo")\n+        self.assertTrue(aq_base(obj) is aq_base(self.mapping["foo"]))\n         self.assertTrue(obj.aq_parent is self.mapping)\n \n     def testTraverseToView(self):\n-        view = self.traverser.publishTraverse(self.folder.REQUEST, \'+\')\n+        view = self.traverser.publishTraverse(self.folder.REQUEST, "+")\n         self.assertTrue(isinstance(view, PortletAdding))\n         self.assertTrue(view.aq_parent is self.mapping)\n \n     def testTraverseToNonExistent(self):\n-        self.assertRaises(NotFound, self.traverser.publishTraverse, self.folder.REQUEST, \'bar\')\n+        self.assertRaises(\n+            NotFound, self.traverser.publishTraverse, self.folder.REQUEST, "bar"\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestContextMapping))\n     suite.addTest(makeSuite(TestTraverser))\ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex 0cf7342a..b8ee6889 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -1,22 +1,23 @@\n-# -*- coding: utf-8 -*-\n-import unittest\n-import doctest\n-\n-from plone.testing import layered\n-from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n from plone.app.portlets.testing import OPTIONFLAGS\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n+from plone.testing import layered\n+\n+import doctest\n+import unittest\n \n \n def test_suite():\n \n     import plone.app.portlets.storage\n \n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocTestSuite(\n-                module=plone.app.portlets.storage,\n-                optionflags=OPTIONFLAGS,\n-            ),\n-            layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n-        )\n-    ])\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocTestSuite(\n+                    module=plone.app.portlets.storage,\n+                    optionflags=OPTIONFLAGS,\n+                ),\n+                layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n+            )\n+        ]\n+    )\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 605f9b74..7cfb2345 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -1,52 +1,43 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.interface import directlyProvides\n-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n-from zope.intid.interfaces import IIntIds\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.portlets.portlets import navigation\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import INavigationSchema\n-\n from Products.CMFPlone.tests import dummy\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import directlyProvides\n+from zope.intid.interfaces import IIntIds\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        addUtility(\n-            self.portal, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+        addUtility(self.portal, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n-        self.assertEqual(portlet.addview, \'portlets.Navigation\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n+        self.assertEqual(portlet.addview, "portlets.Navigation")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n         self.assertEqual(\n-            [\'plone.app.portlets.interfaces.IColumn\'],\n-            registered_interfaces)\n+            ["plone.app.portlets.interfaces.IColumn"], registered_interfaces\n+        )\n \n     def testInterfaces(self):\n         portlet = navigation.Assignment()\n@@ -54,12 +45,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -70,81 +60,85 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = navigation.Assignment()\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = navigation.Assignment()\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, navigation.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = navigation.Assignment()\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, navigation.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        addUtility(\n-            self.portal, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+        addUtility(self.portal, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n         self.populateSite()\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.request\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = view or self.portal.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment or navigation.Assignment(topLevel=0)\n \n         return getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def populateSite(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        if \'Members\' in self.portal:\n-            self.portal._delObject(\'Members\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n             self.folder = None\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n-        if \'events\' in self.portal:\n-            self.portal._delObject(\'events\')\n-        if \'front-page\' in self.portal:\n-            self.portal._delObject(\'front-page\')\n-        if \'folder\' in self.portal:\n-            self.portal._delObject(\'folder\')\n-        if \'users\' in self.portal:\n-            self.portal._delObject(\'users\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.remoteUrl = \'http://plone.org\'\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.invokeFactory("Document", "doc3")\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Link", "link1")\n+        self.portal.link1.remoteUrl = "http://plone.org"\n         self.portal.link1.reindexObject()\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n-        folder2.invokeFactory(\'File\', \'file21\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("Document", "doc12")\n+        folder1.invokeFactory("Document", "doc13")\n+        self.portal.invokeFactory("Folder", "folder2")\n+        folder2 = getattr(self.portal, "folder2")\n+        folder2.invokeFactory("Document", "doc21")\n+        folder2.invokeFactory("Document", "doc22")\n+        folder2.invokeFactory("Document", "doc23")\n+        folder2.invokeFactory("File", "file21")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def testCreateNavTree(self):\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n+        self.assertTrue("children" in tree)\n \n     def testCreateNavTreeCurrentItem(self):\n         # With the context set to folder2 it should return a dict with\n@@ -152,7 +146,7 @@ def testCreateNavTreeCurrentItem(self):\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'currentItem\'], True)\n+        self.assertEqual(tree["children"][-1]["currentItem"], True)\n \n     def testNavTreeExcludesItemsWithExcludeProperty(self):\n         # Make sure that items with the exclude_from_nav property set get\n@@ -162,8 +156,8 @@ def testNavTreeExcludesItemsWithExcludeProperty(self):\n         view = self.renderer(self.portal.folder1.doc11)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n+        for c in tree["children"]:\n+            if c["item"].getPath() == "/plone/folder2":\n                 self.fail()\n \n     def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n@@ -175,338 +169,424 @@ def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         found = False\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n+        for c in tree["children"]:\n+            if c["item"].getPath() == "/plone/folder2":\n                 found = True\n                 break\n         self.assertTrue(found)\n \n     def testNavTreeExcludesDefaultPage(self):\n         # Make sure that items which are the default page are excluded\n-        self.portal.folder2.setDefaultPage(\'doc21\')\n+        self.portal.folder2.setDefaultPage("doc21")\n         view = self.renderer(self.portal.folder1.doc11)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         # Ensure that our \'doc21\' default page is not in the tree.\n         self.assertEqual(\n-            [c for c in tree[\'children\'][-1][\'children\']\n-             if c[\'item\'].getPath()[-5:] == \'doc21\'], [])\n+            [\n+                c\n+                for c in tree["children"][-1]["children"]\n+                if c["item"].getPath()[-5:] == "doc21"\n+            ],\n+            [],\n+        )\n \n     def testNavTreeMarksParentMetaTypesNotToQuery(self):\n         # Make sure that items whose ids are in the idsNotToList navTree\n         # property get no_display set to True\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][-1][\'show_children\'], True)\n+        self.assertEqual(tree["children"][-1]["show_children"], True)\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][-1][\'show_children\'], False)\n+        self.assertEqual(tree["children"][-1]["show_children"], False)\n \n     def testCreateNavTreeWithLink(self):\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'getRemoteUrl\'])\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(child[\'getRemoteUrl\'], \'http://plone.org\')\n+        for child in tree["children"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n                 # as Creator, link1 should not use the remote Url\n-                self.assertFalse(child[\'useRemoteUrl\'])\n+                self.assertFalse(child["useRemoteUrl"])\n \n-        self.portal.link1.setCreators([\'some_other_user\'])\n+        self.portal.link1.setCreators(["some_other_user"])\n         self.portal.link1.reindexObject()\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'getRemoteUrl\'])\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(child[\'getRemoteUrl\'], \'http://plone.org\')\n+        for child in tree["children"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n                 # as non-Creator user, link1 should use the remote Url\n-                self.assertTrue(child[\'useRemoteUrl\'])\n+                self.assertTrue(child["useRemoteUrl"])\n \n     def testNonStructuralFolderHidesChildren(self):\n         # Make sure NonStructuralFolders act as if parent_types_not_to_query\n         # is set.\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.portal.folder1._setObject(\'ns_folder\', f)\n+        f = dummy.NonStructuralFolder("ns_folder")\n+        self.portal.folder1._setObject("ns_folder", f)\n         self.portal.portal_catalog.reindexObject(self.portal.folder1.ns_folder)\n         self.portal.portal_catalog.reindexObject(self.portal.folder1)\n         view = self.renderer(self.portal.folder1.ns_folder)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][3][\'children\'][3][\'item\'].getPath(),\n-                                \'/plone/folder1/ns_folder\')\n-        self.assertEqual(len(tree[\'children\'][3][\'children\'][3][\'children\']), 0)\n+        self.assertEqual(\n+            tree["children"][3]["children"][3]["item"].getPath(),\n+            "/plone/folder1/ns_folder",\n+        )\n+        self.assertEqual(len(tree["children"][3]["children"][3]["children"]), 0)\n \n     def testTopLevel(self):\n         view = self.renderer(\n-            self.portal.folder2.file21, assignment=navigation.Assignment(\n-                topLevel=1))\n+            self.portal.folder2.file21, assignment=navigation.Assignment(topLevel=1)\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2/file21\')\n+        self.assertEqual(\n+            tree["children"][-1]["item"].getPath(), "/plone/folder2/file21"\n+        )\n \n     def testTopLevelWithContextAboveLevel(self):\n-        view = self.renderer(\n-            self.portal, assignment=navigation.Assignment(topLevel=1))\n+        view = self.renderer(self.portal, assignment=navigation.Assignment(topLevel=1))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testTopLevelTooDeep(self):\n-        view = self.renderer(\n-            self.portal, assignment=navigation.Assignment(topLevel=5))\n+        view = self.renderer(self.portal, assignment=navigation.Assignment(topLevel=5))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testIncludeTopWithoutNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n         view = self.renderer(\n             self.portal.folder2.folder21,\n             assignment=navigation.Assignment(\n-                topLevel=0, root_uid=None, includeTop=True))\n+                topLevel=0, root_uid=None, includeTop=True\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         self.assertTrue(view.root_is_portal())\n-        self.assertEqual(len(tree[\'children\']), 6)\n-        self.assertEqual(view.getNavRootPath(), \'/plone\')\n+        self.assertEqual(len(tree["children"]), 6)\n+        self.assertEqual(view.getNavRootPath(), "/plone")\n \n     def testTopLevelWithNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n         view = self.renderer(\n             self.portal.folder2.folder21,\n             assignment=navigation.Assignment(\n-                topLevel=1, root_uid=self.portal.folder2.UID()))\n+                topLevel=1, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n+        self.assertEqual(len(tree["children"]), 1)\n         self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/folder21/doc211\')\n+            tree["children"][0]["item"].getPath(), "/plone/folder2/folder21/doc211"\n+        )\n \n     def testMultipleTopLevelWithNavigationRoot(self):\n         # See bug 9405\n         # http://dev.plone.org/plone/ticket/9405\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'abc\')\n-        self.portal.invokeFactory(\'Folder\', \'abcde\')\n-        self.portal.abc.invokeFactory(\'Folder\', \'down_abc\')\n-        self.portal.abcde.invokeFactory(\'Folder\', \'down_abcde\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "abc")\n+        self.portal.invokeFactory("Folder", "abcde")\n+        self.portal.abc.invokeFactory("Folder", "down_abc")\n+        self.portal.abcde.invokeFactory("Folder", "down_abcde")\n         view1 = self.renderer(\n-            self.portal.abc, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abc.UID()))\n+            self.portal.abc,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abc.UID()\n+            ),\n+        )\n         view2 = self.renderer(\n-            self.portal.abc, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abcde.UID()))\n+            self.portal.abc,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abcde.UID()\n+            ),\n+        )\n         tree1 = view1.getNavTree()\n         tree2 = view2.getNavTree()\n-        self.assertEqual(len(tree1[\'children\']), 1)\n-        self.assertEqual(len(tree2[\'children\']), 1)\n+        self.assertEqual(len(tree1["children"]), 1)\n+        self.assertEqual(len(tree2["children"]), 1)\n         view1 = self.renderer(\n-            self.portal.abcde, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abc.UID()))\n+            self.portal.abcde,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abc.UID()\n+            ),\n+        )\n         view2 = self.renderer(\n-            self.portal.abcde, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abcde.UID()))\n+            self.portal.abcde,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abcde.UID()\n+            ),\n+        )\n         tree1 = view1.getNavTree()\n         tree2 = view2.getNavTree()\n-        self.assertEqual(len(tree2[\'children\']), 1)\n-        self.assertEqual(len(tree1[\'children\']), 1)\n+        self.assertEqual(len(tree2["children"]), 1)\n+        self.assertEqual(len(tree1["children"]), 1)\n \n     def testShowAllParentsOverridesBottomLevel(self):\n         view = self.renderer(\n-            self.portal.folder2.file21, assignment=navigation.Assignment(\n-                bottomLevel=1, topLevel=0))\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(bottomLevel=1, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         # Note: showAllParents makes sure we actually return items on the,\n         # path to the context, but the portlet will not display anything\n         # below bottomLevel.\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/file21\')\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n+        self.assertEqual(len(tree["children"][-1]["children"]), 1)\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/file21",\n+        )\n \n     def testBottomLevelStopsAtFolder(self):\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=1, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=1, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 0)\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n+        self.assertEqual(len(tree["children"][-1]["children"]), 0)\n \n     def testBottomLevelZeroNoLimit(self):\n         """Test that bottomLevel=0 means no limit for bottomLevel."""\n \n         # first we set a high integer as bottomLevel to simulate "no limit"\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=99, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=99, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/doc21",\n+        )\n \n         # now set bottomLevel to 0 -> outcome should be the same\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=0, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=0, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/doc21",\n+        )\n \n     def testBottomLevelZeroNoLimitRendering(self):\n         """Test that bottomLevel=0 means no limit for bottomLevel."""\n \n         # first we set a high integer as bottomLevel to simulate "no limit"\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=99, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=99, topLevel=0),\n+        )\n         a = view.render()\n \n         # now set bottomLevel to 0 -> outcome should be the same\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=0, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=0, topLevel=0),\n+        )\n         b = view.render()\n \n         self.assertEqual(a, b)\n \n     def testNavRootWithUnicodeNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n-        view = self.renderer(self.portal.folder2.folder21,\n-            assignment=navigation.Assignment(topLevel=1, root_uid=self.portal.folder2.UID()))\n-        self.assertEqual(view.getNavRootPath(), \'/plone/folder2/folder21\')\n-        self.assertEqual(view.getNavRoot().absolute_url(),\n-                         self.portal.folder2.folder21.absolute_url())\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            assignment=navigation.Assignment(\n+                topLevel=1, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n+        self.assertEqual(view.getNavRootPath(), "/plone/folder2/folder21")\n+        self.assertEqual(\n+            view.getNavRoot().absolute_url(),\n+            self.portal.folder2.folder21.absolute_url(),\n+        )\n \n     def testNoRootSet(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=\'\', topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(root_uid="", topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n \n     def testRootIsNotPortal(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=self.portal.folder2.UID(), topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(\n+                root_uid=self.portal.folder2.UID(), topLevel=0\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootDoesNotExist(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=\'DOESNT_EXIST\', topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(root_uid="DOESNT_EXIST", topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 6)\n+        self.assertEqual(len(tree["children"]), 6)\n \n     def testAboveRoot(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.root\'] = u\'/folder2\'\n+        registry["plone.root"] = "/folder2"\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testOutsideRoot(self):\n-        view = self.renderer(self.portal.folder1, assignment=navigation.Assignment(root_uid=self.portal.folder2.UID()))\n+        view = self.renderer(\n+            self.portal.folder1,\n+            assignment=navigation.Assignment(root_uid=self.portal.folder2.UID()),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootIsCurrent(self):\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(currentFolderOnly=True))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(currentFolderOnly=True),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootIsCurrentWithFolderishDefaultPage(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.setDefaultPage(\'folder21\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.setDefaultPage("folder21")\n \n-        view = self.renderer(self.portal.folder2.folder21, assignment=navigation.Assignment(currentFolderOnly=True))\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            assignment=navigation.Assignment(currentFolderOnly=True),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testCustomQuery(self):\n         # Try a custom query script for the navtree that returns only published\n         # objects\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         workflow = self.portal.portal_workflow\n-        factory = self.portal.manage_addProduct[\'PythonScripts\']\n-        factory.manage_addPythonScript(\'getCustomNavQuery\')\n+        factory = self.portal.manage_addProduct["PythonScripts"]\n+        factory.manage_addPythonScript("getCustomNavQuery")\n         script = self.portal.getCustomNavQuery\n-        script.ZPythonScript_edit(\'\', \'return {"review_state": "published"}\')\n+        script.ZPythonScript_edit("", \'return {"review_state": "published"}\')\n         self.assertEqual(self.portal.getCustomNavQuery(), {"review_state": "published"})\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        #Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        #change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n+        self.assertTrue("children" in tree)\n+        # Should only contain current object\n+        self.assertEqual(len(tree["children"]), 1)\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n         self.portal.folder1.reindexObject()\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n-        #Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["children"]), 2)\n \n     def testStateFiltering(self):\n         # Test Navtree workflow state filtering\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n-        )\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n         workflow = self.portal.portal_workflow\n-        navigation_settings.workflow_states_to_show = (\'published\',)\n+        navigation_settings.workflow_states_to_show = ("published",)\n         navigation_settings.filter_on_workflow = True\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        #Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        #change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n+        self.assertTrue("children" in tree)\n+        # Should only contain current object\n+        self.assertEqual(len(tree["children"]), 1)\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n         self.portal.folder1.reindexObject()\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n-        #Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["children"]), 2)\n \n     def testPrunedRootNode(self):\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n         view = self.renderer(self.portal.folder1, assignment=assignment)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testPrunedRootNodeShowsAllParents(self):\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n         view = self.renderer(self.portal.folder1.doc11, assignment=assignment)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder1/doc11\')\n+        self.assertEqual(len(tree["children"]), 1)\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder1/doc11")\n \n     def testIsCurrentParentWithOverlapingNames(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n-        self.portal.invokeFactory(\'Folder\', \'folder2x\')\n-        self.portal.folder2x.invokeFactory(\'Document\', \'doc2x1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', ])\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Manager",\n+            ],\n+        )\n+        self.portal.invokeFactory("Folder", "folder2x")\n+        self.portal.folder2x.invokeFactory("Document", "doc2x1")\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Member",\n+            ],\n+        )\n         view = self.renderer(self.portal.folder2x.doc2x1)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n \n-        folder2x_node = [n for n in tree[\'children\'] if n[\'path\'] == \'/plone/folder2x\'][0]\n-        self.assertTrue(folder2x_node[\'currentParent\'])\n+        folder2x_node = [n for n in tree["children"] if n["path"] == "/plone/folder2x"][\n+            0\n+        ]\n+        self.assertTrue(folder2x_node["currentParent"])\n \n-        folder2_node = [n for n in tree[\'children\'] if n[\'path\'] == \'/plone/folder2\'][0]\n-        self.assertFalse(folder2_node[\'currentParent\'])\n+        folder2_node = [n for n in tree["children"] if n["path"] == "/plone/folder2"][0]\n+        self.assertFalse(folder2_node["currentParent"])\n \n     def testPortletNotDisplayedOnINavigationRoot(self):\n         """test that navigation portlet does not show on INavigationRoot\n@@ -519,11 +599,10 @@ def testPortletNotDisplayedOnINavigationRoot(self):\n         self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n \n         # add nested subfolder in folder1\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder1_1\')\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n \n         # make a navigation portlet\n-        assignment = navigation.Assignment(bottomLevel=0, topLevel=1,\n-                root_uid=None)\n+        assignment = navigation.Assignment(bottomLevel=0, topLevel=1, root_uid=None)\n         portlet = self.renderer(self.portal.folder1, assignment=assignment)\n \n         # check there is no portlet\n@@ -531,7 +610,7 @@ def testPortletNotDisplayedOnINavigationRoot(self):\n \n     def testINavigationRootWithRelativeRootSet(self):\n         """test that navigation portlet uses relative root set by user\n-           even in INavigationRoot case.\n+        even in INavigationRoot case.\n         """\n         self.assertFalse(INavigationRoot.providedBy(self.portal.folder1))\n \n@@ -540,36 +619,39 @@ def testINavigationRootWithRelativeRootSet(self):\n         self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n \n         # add two nested subfolders in folder1\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder1_1\')\n-        self.portal.folder1.folder1_1.invokeFactory(\'Folder\', \'folder1_1_1\')\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n+        self.portal.folder1.folder1_1.invokeFactory("Folder", "folder1_1_1")\n \n         # make a navigation portlet with navigation root set\n-        assignment = navigation.Assignment(bottomLevel=0, topLevel=0,\n-                root_uid=self.portal.folder1.folder1_1.UID())\n-        portlet = self.renderer(self.portal.folder1.folder1_1,\n-                assignment=assignment)\n+        assignment = navigation.Assignment(\n+            bottomLevel=0, topLevel=0, root_uid=self.portal.folder1.folder1_1.UID()\n+        )\n+        portlet = self.renderer(self.portal.folder1.folder1_1, assignment=assignment)\n \n         # check there is a portlet\n         self.assertTrue(portlet.available)\n \n         # check that portlet root is actually the one specified\n         root = portlet.getNavRoot()\n-        self.assertEqual(root.getId(), \'folder1_1\')\n+        self.assertEqual(root.getId(), "folder1_1")\n \n         # check that portlet tree actually includes children\n         tree = portlet.getNavTree()\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder1/folder1_1/folder1_1_1\')\n+        self.assertEqual(len(tree["children"]), 1)\n+        self.assertEqual(\n+            tree["children"][0]["item"].getPath(),\n+            "/plone/folder1/folder1_1/folder1_1_1",\n+        )\n \n     def testPortletsTitle(self):\n         """If portlet\'s name is not explicitely specified we show\n-           default fallback \'Navigation\', translate it and hide it\n-           with CSS."""\n+        default fallback \'Navigation\', translate it and hide it\n+        with CSS."""\n         view = self.renderer(self.portal)\n         view.getNavTree()\n         self.assertEqual(view.title(), "Navigation")\n         self.assertFalse(view.hasName())\n-        view.data.name = \'New navigation title\'\n+        view.data.name = "New navigation title"\n         self.assertEqual(view.title(), "New navigation title")\n         self.assertTrue(view.hasName())\n \n@@ -579,45 +661,59 @@ def testHeadingLinkRootless(self):\n         """\n \n         directlyProvides(self.portal.folder2, INavigationRoot)\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2, assignment=navigation.Assignment(topLevel=0)\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/folder2/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/folder2/sitemap")\n \n         # Even if the assignment contains no topLevel options and no self.root\n         # one should get link to the navigation root sitemap\n-        view = self.renderer(self.portal.folder2.doc21, assignment=navigation.Assignment())\n+        view = self.renderer(\n+            self.portal.folder2.doc21, assignment=navigation.Assignment()\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/folder2/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/folder2/sitemap")\n \n-        view = self.renderer(self.portal.folder1, assignment=navigation.Assignment(topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder1, assignment=navigation.Assignment(topLevel=0)\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/sitemap")\n \n     def testHeadingLinkRooted(self):\n         """\n         See that heading link points to a content item if root selected, otherwise sitemap.\n         """\n         view = self.renderer(\n-            self.portal.folder2, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.folder2.UID()))\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n         link = view.heading_link_target()\n-        self.assertEqual(link, \'http://nohost/plone/folder2\')\n+        self.assertEqual(link, "http://nohost/plone/folder2")\n \n     def testHeadingLinkRootedItemGone(self):\n         """\n         See that heading link points to a content item which do not exist\n         """\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(topLevel=0, root_uid="DOESNT_EXIST"))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(topLevel=0, root_uid="DOESNT_EXIST"),\n+        )\n         link = view.heading_link_target()\n         # Points to the site root if the item is gone\n         self.assertEqual(link, "http://nohost/plone/sitemap")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_news_portlet.py b/plone/app/portlets/tests/test_news_portlet.py\nindex ed0c6e6b..b021f887 100644\n--- a/plone/app/portlets/tests/test_news_portlet.py\n+++ b/plone/app/portlets/tests/test_news_portlet.py\n@@ -1,39 +1,37 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        self.assertEqual(portlet.addview, \'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        self.assertEqual(portlet.addview, "portlets.News")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = news.Assignment(count=5)\n@@ -41,11 +39,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -56,60 +54,83 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, news.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = news.Assignment(count=5)\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, news.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n         # Make sure News Items use simple_publication_workflow\n-        self.portal.portal_workflow.setChainForPortalTypes([\'News Item\'], [\'simple_publication_workflow\'])\n+        self.portal.portal_workflow.setChainForPortalTypes(\n+            ["News Item"], ["simple_publication_workflow"]\n+        )\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = assignment or news.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = assignment or news.Assignment(\n+            template="portlet_recent", macro="portlet"\n+        )\n+\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_published_news_items(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'News Item\', \'n1\')\n-        self.portal.invokeFactory(\'News Item\', \'n2\')\n-        self.portal.portal_workflow.doActionFor(self.portal.n1, \'publish\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("News Item", "n1")\n+        self.portal.invokeFactory("News Item", "n2")\n+        self.portal.portal_workflow.doActionFor(self.portal.n1, "publish")\n \n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'draft\', )))\n+        r = self.renderer(assignment=news.Assignment(count=5, state=("draft",)))\n         self.assertEqual(0, len(r.published_news_items()))\n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'published\', )))\n+        r = self.renderer(assignment=news.Assignment(count=5, state=("published",)))\n         self.assertEqual(1, len(r.published_news_items()))\n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'published\', \'private\', )))\n+        r = self.renderer(\n+            assignment=news.Assignment(\n+                count=5,\n+                state=(\n+                    "published",\n+                    "private",\n+                ),\n+            )\n+        )\n         self.assertEqual(2, len(r.published_news_items()))\n \n     def test_all_news_link(self):\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n         r = self.renderer(assignment=news.Assignment(count=5))\n         self.assertEqual(r.all_news_link(), None)\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.assertTrue(r.all_news_link().endswith(\'/news\'))\n+        self.portal.invokeFactory("Folder", "news")\n+        self.assertTrue(r.all_news_link().endswith("/news"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_recent_portlet.py b/plone/app/portlets/tests/test_recent_portlet.py\nindex 9c50f85f..2eba5dd0 100644\n--- a/plone/app/portlets/tests/test_recent_portlet.py\n+++ b/plone/app/portlets/tests/test_recent_portlet.py\n@@ -1,38 +1,37 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n-        self.assertEqual(portlet.addview, \'portlets.Recent\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n+        self.assertEqual(portlet.addview, "portlets.Recent")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = recent.Assignment()\n@@ -40,11 +39,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -55,48 +54,57 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = recent.Assignment()\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = recent.Assignment()\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, recent.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = recent.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, recent.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.app.REQUEST\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.portal.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or recent.Assignment()\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_recent_items(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n-        if \'events\' in self.portal:\n-            self.portal._delObject(\'events\')\n-        if \'front-page\' in self.portal:\n-            self.portal._delObject(\'front-page\')\n-        if \'Members\' in self.portal:\n-            self.portal._delObject(\'Members\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n             self.folder = None\n-        if \'folder\' in self.portal:\n-            self.portal._delObject(\'folder\')\n-        if \'users\' in self.portal:\n-            self.portal._delObject(\'users\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n         r = self.renderer(assignment=recent.Assignment())\n         self.assertEqual(2, len(r.recent_items()))\n \n@@ -105,15 +113,17 @@ def test_recent_items(self):\n \n     def test_recently_modified_link(self):\n         r = self.renderer(assignment=recent.Assignment())\n-        self.assertTrue(r.recently_modified_link().endswith(\'/recently_modified\'))\n+        self.assertTrue(r.recently_modified_link().endswith("/recently_modified"))\n \n     def test_title(self):\n         r = self.renderer(assignment=recent.Assignment())\n-        self.assertEqual(str(r.title), \'box_recent_changes\')\n+        self.assertEqual(str(r.title), "box_recent_changes")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py\nindex 2d656ed8..03105469 100644\n--- a/plone/app/portlets/tests/test_redirects.py\n+++ b/plone/app/portlets/tests/test_redirects.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.browser.adding import PortletAdding\n from plone.app.portlets.browser.editmanager import ManagePortletAssignments\n from plone.app.portlets.browser.formhelper import AddForm\n@@ -8,30 +7,26 @@\n \n class TestRedirects(PortletsTestCase):\n     _test_methods = [\n-        (PortletAdding, \'nextURL\'),\n-        (ManagePortletAssignments, \'_nextUrl\'),\n-        (AddForm, \'nextURL\'),\n-        (EditForm, \'nextURL\'),\n+        (PortletAdding, "nextURL"),\n+        (ManagePortletAssignments, "_nextUrl"),\n+        (AddForm, "nextURL"),\n+        (EditForm, "nextURL"),\n     ]\n \n     def test_regression(self):\n         portal_url = self.portal.absolute_url()\n-        self.request.form.update({\n-            \'referer\': portal_url\n-        })\n+        self.request.form.update({"referer": portal_url})\n         for Klass, method in self._test_methods:\n             view = Klass(self.portal, self.request)\n             view.__parent__ = self.portal\n             self.assertEqual(getattr(view, method)(), portal_url)\n \n     def test_valid_next_url(self):\n-        self.request.form.update({\n-            \'referer\': \'http://attacker.com\'\n-        })\n+        self.request.form.update({"referer": "http://attacker.com"})\n         for Klass, method in self._test_methods:\n             view = Klass(self.portal, self.request)\n             view.__parent__ = self.portal\n-            self.assertNotEqual(\'http://attacker.com\', getattr(view, method)())\n+            self.assertNotEqual("http://attacker.com", getattr(view, method)())\n \n \n def test_suite():\n@@ -52,7 +47,9 @@ def test_suite():\n     # bin/test -s plone.app.portlets -m test_redirects\n     # But the error *is* in this test_redirects.py file,\n     # because it goes away when I delete this file.\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestRedirects))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_review_portlet.py b/plone/app/portlets/tests/test_review_portlet.py\nindex 676416d9..53eb64e3 100644\n--- a/plone/app/portlets/tests/test_review_portlet.py\n+++ b/plone/app/portlets/tests/test_review_portlet.py\n@@ -1,41 +1,39 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import review\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import setRoles\n-from plone.app.testing import login\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n-        self.assertEqual(portlet.addview, \'portlets.Review\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n+        self.assertEqual(portlet.addview, "portlets.Review")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = review.Assignment()\n@@ -43,11 +41,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.createAndAdd(data={})\n \n         self.assertEqual(len(mapping), 1)\n@@ -56,55 +54,65 @@ def testInvokeAddview(self):\n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = review.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, review.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.portal_membership.getMemberById(\'test_user_1_\').setMemberProperties(\n-                                    {\'fullname\': \'Test user\'})\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.portal_membership.getMemberById("test_user_1_").setMemberProperties(\n+            {"fullname": "Test user"}\n+        )\n \n         # add Folder and assign Reviewer role to our Test user there\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n+        self.portal.invokeFactory("Folder", "folder1")\n         self.folder1 = self.portal.folder1\n-        self.folder1.manage_setLocalRoles(\'test_user_1_\', [\'Reviewer\'])\n+        self.folder1.manage_setLocalRoles("test_user_1_", ["Reviewer"])\n         self.folder1.reindexObjectSecurity()\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or review.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_review_items(self):\n         r = self.renderer(assignment=review.Assignment())\n         self.assertEqual(0, len(r.review_items()))\n-        wf = getToolByName(self.portal, \'portal_workflow\')\n-        wf.doActionFor(self.portal.doc1, \'submit\')\n+        wf = getToolByName(self.portal, "portal_workflow")\n+        wf.doActionFor(self.portal.doc1, "submit")\n         r = self.renderer(assignment=review.Assignment())\n         self.assertEqual(1, len(r.review_items()))\n-        self.assertEqual(r.review_items()[0][\'creator\'], "Test user")\n+        self.assertEqual(r.review_items()[0]["creator"], "Test user")\n \n     def test_full_news_link(self):\n         r = self.renderer(assignment=review.Assignment())\n-        self.assertTrue(r.full_review_link().endswith(\'/full_review_list\'))\n+        self.assertTrue(r.full_review_link().endswith("/full_review_list"))\n \n     def test_full_news_link_local_reviewer(self):\n         # login as our test user\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         # there should be no full news link on site root for our local reviewer\n         r = self.renderer(assignment=review.Assignment())\n@@ -112,16 +120,19 @@ def test_full_news_link_local_reviewer(self):\n \n         # get renderer in context of our reviewer\'s folder\n         r = self.renderer(context=self.folder1, assignment=review.Assignment())\n-        self.assertEqual(r.full_review_link(), \'%s/full_review_list\' %\n-            self.folder1.absolute_url())\n+        self.assertEqual(\n+            r.full_review_link(), "%s/full_review_list" % self.folder1.absolute_url()\n+        )\n \n     def test_title(self):\n         r = self.renderer(assignment=review.Assignment())\n-        self.assertEqual(str(r.title), \'box_review_list\')\n+        self.assertEqual(str(r.title), "box_review_list")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_rss_portlet.py b/plone/app/portlets/tests/test_rss_portlet.py\nindex 8e5adc20..1ee123ed 100644\n--- a/plone/app/portlets/tests/test_rss_portlet.py\n+++ b/plone/app/portlets/tests/test_rss_portlet.py\n@@ -1,21 +1,17 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.namedfile.file import NamedBlobFile\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import rss\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n-\n+from plone.app.testing import TEST_USER_ID\n+from plone.namedfile.file import NamedBlobFile\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n import os\n import transaction\n@@ -29,21 +25,24 @@\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n-        self.assertEqual(portlet.addview, \'portlets.rss\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n+        self.assertEqual(portlet.addview, "portlets.rss")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = rss.Assignment()\n@@ -51,11 +50,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -65,11 +64,15 @@ def testInvokeAddview(self):\n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = rss.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, rss.Renderer))\n \n     def testRSSFeedFile(self):\n@@ -85,15 +88,20 @@ def testRSSFeedFile(self):\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or rss.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_rss_items(self):\n         r = self.renderer(assignment=rss.Assignment())\n@@ -101,9 +109,9 @@ def test_rss_items(self):\n \n     def testTitle(self):\n         r = self.renderer(assignment=rss.Assignment())\n-        self.assertEqual(r.title, u\'\')\n-        r.data.portlet_title = u\'Overridden title\'\n-        self.assertEqual(r.title, u\'Overridden title\')\n+        self.assertEqual(r.title, "")\n+        r.data.portlet_title = "Overridden title"\n+        self.assertEqual(r.title, "Overridden title")\n \n \n class TestFunctional(unittest.TestCase):\n@@ -114,7 +122,7 @@ def test_rss_feed_http(self):\n         # so that we can try to load this via http.\n         with open(sample_feed, "rb") as myfile:\n             data = myfile.read()\n-        file_field = NamedBlobFile(data, filename=u"feed.xml")\n+        file_field = NamedBlobFile(data, filename="feed.xml")\n         portal = self.layer["portal"]\n         feed_id = portal.invokeFactory("File", "feed")\n         feed = portal[feed_id]\n@@ -127,12 +135,14 @@ def test_rss_feed_http(self):\n         self.assertTrue(feed._loaded)\n         self.assertFalse(feed._failed)\n         self.assertTrue(feed.ok)\n-        self.assertEqual(feed.siteurl, u"https://maurits.vanrees.org/weblog")\n+        self.assertEqual(feed.siteurl, "https://maurits.vanrees.org/weblog")\n         self.assertEqual(len(feed.items), 15)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_setup.py b/plone/app/portlets/tests/test_setup.py\nindex e85cb877..4d31bd54 100644\n--- a/plone/app/portlets/tests/test_setup.py\n+++ b/plone/app/portlets/tests/test_setup.py\n@@ -1,29 +1,38 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getSiteManager, getUtilitiesFor, getUtility\n-\n-from plone.portlets.interfaces import IPortletManager\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.app.portlets.interfaces import ILeftColumn\n+from plone.app.portlets.interfaces import IRightColumn\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.portlets.interfaces import ILocalPortletAssignable\n+from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletType\n-\n-from plone.app.portlets.interfaces import ILeftColumn, IRightColumn, IDashboard\n-from plone.app.portlets.tests.base import PortletsTestCase\n+from zope.component import getSiteManager\n+from zope.component import getUtilitiesFor\n+from zope.component import getUtility\n \n \n class TestProductInstall(PortletsTestCase):\n-\n     def testPortletManagersRegistered(self):\n         sm = getSiteManager(self.portal)\n-        registrations = [r.name for r in sm.registeredUtilities()\n-                            if IPortletManager == r.provided]\n-        self.assertEqual([\'plone.dashboard1\', \'plone.dashboard2\',\n-                           \'plone.dashboard3\', \'plone.dashboard4\',\n-                           \'plone.footerportlets\', \'plone.leftcolumn\',\n-                           \'plone.rightcolumn\'], sorted(registrations))\n+        registrations = [\n+            r.name for r in sm.registeredUtilities() if IPortletManager == r.provided\n+        ]\n+        self.assertEqual(\n+            [\n+                "plone.dashboard1",\n+                "plone.dashboard2",\n+                "plone.dashboard3",\n+                "plone.dashboard4",\n+                "plone.footerportlets",\n+                "plone.leftcolumn",\n+                "plone.rightcolumn",\n+            ],\n+            sorted(registrations),\n+        )\n \n     def testInterfaces(self):\n-        left = getUtility(IPortletManager, \'plone.leftcolumn\')\n-        right = getUtility(IPortletManager, \'plone.rightcolumn\')\n-        dashboard = getUtility(IPortletManager, \'plone.dashboard1\')\n+        left = getUtility(IPortletManager, "plone.leftcolumn")\n+        right = getUtility(IPortletManager, "plone.rightcolumn")\n+        dashboard = getUtility(IPortletManager, "plone.dashboard1")\n \n         self.assertTrue(ILeftColumn.providedBy(left))\n         self.assertTrue(IRightColumn.providedBy(right))\n@@ -35,12 +44,14 @@ def testAssignable(self):\n \n     def testPortletTypesRegistered(self):\n         portlets = [u[0] for u in getUtilitiesFor(IPortletType)]\n-        self.assertTrue(\'portlets.Classic\' in portlets)\n-        self.assertTrue(\'portlets.Login\' in portlets)\n+        self.assertTrue("portlets.Classic" in portlets)\n+        self.assertTrue("portlets.Login" in portlets)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestProductInstall))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex b5984506..c54bfd08 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -1,90 +1,100 @@\n-# -*- coding: utf-8 -*-\n+from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from AccessControl import Unauthorized\n-\n-from zope.component import getMultiAdapter, getUtility\n-\n-from plone.portlets.interfaces import IPortletManager, IPortletAssignmentMapping\n-\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.portlets import classic\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestTraversal(PortletsTestCase):\n-\n     def _assertSameObject(self, a, b):\n         self.assertTrue(aq_base(a) is aq_base(b))\n \n     def testContextNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.folder.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.folder.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         self._assertSameObject(aq_parent(mapping), self.folder)\n-        mapping[\'foo\'] = assignment\n+        mapping["foo"] = assignment\n         target = getMultiAdapter((self.folder, manager), IPortletAssignmentMapping)\n-        self._assertSameObject(target[\'foo\'], assignment)\n-        self.assertEqual(\'++contextportlets++plone.leftcolumn\', mapping.id)\n+        self._assertSameObject(target["foo"], assignment)\n+        self.assertEqual("++contextportlets++plone.leftcolumn", mapping.id)\n \n     def testDashboardNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID)\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++dashboard++plone.dashboard1+" + TEST_USER_ID\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID][\'foo\'], assignment)\n-        self.assertEqual(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID, mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID]["foo"], assignment)\n+        self.assertEqual("++dashboard++plone.dashboard1+" + TEST_USER_ID, mapping.id)\n \n     def testGroupDashboardNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++groupdashboard++plone.dashboard1+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupdashboard++plone.dashboard1+Reviewers"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[GROUP_CATEGORY][\'Reviewers\'][\'foo\'], assignment)\n-        self.assertEqual(\'++groupdashboard++plone.dashboard1+Reviewers\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[GROUP_CATEGORY]["Reviewers"]["foo"], assignment)\n+        self.assertEqual("++groupdashboard++plone.dashboard1+Reviewers", mapping.id)\n \n     def testGroupDashboardNamespaceChecker(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++groupdashboard++plone.dashboard1+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupdashboard++plone.dashboard1+Reviewers"\n+        )\n \n         checker = IPortletPermissionChecker(mapping)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        checker() # no exception\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        checker()  # no exception\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertRaises(Unauthorized, checker)\n \n     def testGroupNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.portal.restrictedTraverse(\'++groupportlets++plone.leftcolumn+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupportlets++plone.leftcolumn+Reviewers"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[GROUP_CATEGORY][\'Reviewers\'][\'foo\'], assignment)\n-        self.assertEqual(\'++groupportlets++plone.leftcolumn+Reviewers\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[GROUP_CATEGORY]["Reviewers"]["foo"], assignment)\n+        self.assertEqual("++groupportlets++plone.leftcolumn+Reviewers", mapping.id)\n \n     def testContentTypeNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.portal.restrictedTraverse(\'++contenttypeportlets++plone.leftcolumn+Image\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.portal.restrictedTraverse(\n+            "++contenttypeportlets++plone.leftcolumn+Image"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[CONTENT_TYPE_CATEGORY][\'Image\'][\'foo\'], assignment)\n-        self.assertEqual(\'++contenttypeportlets++plone.leftcolumn+Image\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(\n+            manager[CONTENT_TYPE_CATEGORY]["Image"]["foo"], assignment\n+        )\n+        self.assertEqual("++contenttypeportlets++plone.leftcolumn+Image", mapping.id)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestTraversal))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 64042f73..08f4464a 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -1,89 +1,98 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n-\n-from plone.app.testing import TEST_USER_ID\n-\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletRenderer\n-\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.utils import hashPortletInfo\n-\n from plone.app.portlets.browser.utils import PortletUtilities\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.utils import assignment_from_key\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.utils import hashPortletInfo\n+from Products.CMFPlone.utils import safe_unicode\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestAssignmentFromKey(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n+        self.manager = getUtility(IPortletManager, name="plone.leftcolumn")\n         self.cat = self.manager[USER_CATEGORY]\n-        self.cat[TEST_USER_ID] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n-                                                       category=USER_CATEGORY,\n-                                                       name=TEST_USER_ID)\n+        self.cat[TEST_USER_ID] = PortletAssignmentMapping(\n+            manager="plone.leftcolumn", category=USER_CATEGORY, name=TEST_USER_ID\n+        )\n \n     def testGetPortletFromContext(self):\n-        mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.portal, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n-        path = \'/\'.join(self.portal.getPhysicalPath())\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', CONTEXT_CATEGORY, path, \'foo\')\n+        mapping["foo"] = c\n+        path = "/".join(self.portal.getPhysicalPath())\n+        a = assignment_from_key(\n+            self.portal, "plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+        )\n         self.assertEqual(c, a)\n \n     def testGetPortletFromContextUnicodePath(self):\n         """Do not fail, if path is a unicode object.\n         plone.portlets.utils.unhashPortletInfo returns a unicode path key.\n         """\n-        mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.portal, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n-        path = u\'/\'.join(self.portal.getPhysicalPath())\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', CONTEXT_CATEGORY, path, \'foo\')\n+        mapping["foo"] = c\n+        path = "/".join(self.portal.getPhysicalPath())\n+        a = assignment_from_key(\n+            self.portal, "plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+        )\n         self.assertEqual(c, a)\n \n     def testGetPortletFromUserCategory(self):\n         c = classic.Assignment()\n-        self.cat[TEST_USER_ID][\'foo\'] = c\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, TEST_USER_ID, \'foo\')\n+        self.cat[TEST_USER_ID]["foo"] = c\n+        a = assignment_from_key(\n+            self.portal, "plone.leftcolumn", USER_CATEGORY, TEST_USER_ID, "foo"\n+        )\n         self.assertEqual(c, a)\n \n \n class TestRendering(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.portal.invokeFactory(\'News Item\', \'testnews\', title=u\'Test News\')\n+        self.portal.invokeFactory("News Item", "testnews", title="Test News")\n \n     def testTraversalRendererWithHash(self):\n         context = self.folder\n         request = self.folder.REQUEST\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.folder)\n-        assignment = news.Assignment(state=(\'private\', ))\n-        mapping = getMultiAdapter(\n-            (context, manager), IPortletAssignmentMapping)\n-        mapping[\'newsportlet\'] = assignment\n+            IPortletManager, name="plone.leftcolumn", context=self.folder\n+        )\n+        assignment = news.Assignment(state=("private",))\n+        mapping = getMultiAdapter((context, manager), IPortletAssignmentMapping)\n+        mapping["newsportlet"] = assignment\n         portlet_hash = hashPortletInfo(\n-            dict(manager=manager.__name__, category=CONTEXT_CATEGORY,\n-                 key=\'/\'.join(context.getPhysicalPath()),\n-                 name=\'newsportlet\'))\n+            dict(\n+                manager=manager.__name__,\n+                category=CONTEXT_CATEGORY,\n+                key="/".join(context.getPhysicalPath()),\n+                name="newsportlet",\n+            )\n+        )\n         render_portlet_view = PortletUtilities(context, request)\n         rendered_portlet = render_portlet_view.render_portlet(\n-            safe_unicode(portlet_hash))\n-        self.assertIn(u\'portletNews\', rendered_portlet)\n-        self.assertIn(u\'Test News\', rendered_portlet)\n+            safe_unicode(portlet_hash)\n+        )\n+        self.assertIn("portletNews", rendered_portlet)\n+        self.assertIn("Test News", rendered_portlet)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestAssignmentFromKey))\n     suite.addTest(makeSuite(TestRendering))\ndiff --git a/plone/app/portlets/tests/utils.py b/plone/app/portlets/tests/utils.py\nindex abe40cad..b21f6aa4 100644\n--- a/plone/app/portlets/tests/utils.py\n+++ b/plone/app/portlets/tests/utils.py\n@@ -1,12 +1,12 @@\n-# -*- coding: utf-8 -*-\n-import doctest\n from plone.portlets.manager import PortletManager\n \n+import doctest\n+\n \n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n # Helper class for tests\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex bd19a4b5..db69975a 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -1,33 +1,24 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.container.interfaces import INameChooser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.portlets.constants import CONTEXT_CATEGORY, USER_CATEGORY\n-\n+from Acquisition import aq_base\n+from plone.app.event.portlets import portlet_calendar as calendar\n+from plone.app.event.portlets import portlet_events as events\n+from plone.app.portlets import HAS_PLONE_APP_EVENT\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import login\n-from plone.app.portlets.portlets import news\n from plone.app.portlets.portlets import navigation\n+from plone.app.portlets.portlets import news\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.portlets import review\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n-\n-from Acquisition import aq_base\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.utils import getToolByName\n-\n-from plone.app.portlets import HAS_PLONE_APP_EVENT\n-if HAS_PLONE_APP_EVENT:\n-    from plone.app.event.portlets import portlet_calendar as calendar\n-    from plone.app.event.portlets import portlet_events as events\n-\n-import six\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.container.interfaces import INameChooser\n \n \n def assignment_mapping_from_key(context, manager_name, category, key, create=False):\n@@ -40,20 +31,18 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n \n     if category == CONTEXT_CATEGORY:\n         path = key\n-        portal = getToolByName(context, \'portal_url\').getPortalObject()\n-        portal_path = \'/\'.join(portal.getPhysicalPath())\n+        portal = getToolByName(context, "portal_url").getPortalObject()\n+        portal_path = "/".join(portal.getPhysicalPath())\n         if path == portal_path:\n             # there may be problem if PloneSite id is \'plone\'.\n             # restrictedTraverse traverses to @@plone BrowserView which\n             # is wrong\n             obj = portal\n         else:\n-            if path.startswith(portal_path + \'/\'):\n-                path = path[len(portal_path)+1:]\n-            while path.startswith(\'/\'):\n+            if path.startswith(portal_path + "/"):\n+                path = path[len(portal_path) + 1 :]\n+            while path.startswith("/"):\n                 path = path[1:]\n-            if six.PY2 and isinstance(path, six.text_type):\n-                path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n             raise KeyError("Cannot find object at path %s" % path)\n@@ -75,6 +64,7 @@ def assignment_from_key(context, manager_name, category, key, name):\n     """\n     return assignment_mapping_from_key(context, manager_name, category, key)[name]\n \n+\n DONT_MIGRATE = object()\n \n \n@@ -83,30 +73,31 @@ def convert_legacy_portlets(context):\n     context to new-style portlets.\n     """\n \n-    portletsMapping = {\'portlet_login\': login.Assignment(),\n-                       \'portlet_news\': news.Assignment(count=5),\n-                       \'portlet_navigation\': navigation.Assignment(),\n-                       \'portlet_review\': review.Assignment(),\n-                       \'portlet_recent\': recent.Assignment(count=5),\n-                       \'portlet_related\': DONT_MIGRATE,\n-                       \'portlet_languages\': DONT_MIGRATE,\n-                       \'portlet_calendar\': DONT_MIGRATE,\n-                       \'portlet_events\': DONT_MIGRATE,\n-                       }\n-\n-    if HAS_PLONE_APP_EVENT:\n-        portletsMapping.update({\n-            \'portlet_calendar\': calendar.Assignment(),\n-            \'portlet_events\': events.Assignment(count=5),\n-        })\n+    portletsMapping = {\n+        "portlet_login": login.Assignment(),\n+        "portlet_news": news.Assignment(count=5),\n+        "portlet_navigation": navigation.Assignment(),\n+        "portlet_review": review.Assignment(),\n+        "portlet_recent": recent.Assignment(count=5),\n+        "portlet_related": DONT_MIGRATE,\n+        "portlet_languages": DONT_MIGRATE,\n+        "portlet_calendar": DONT_MIGRATE,\n+        "portlet_events": DONT_MIGRATE,\n+        "portlet_calendar": calendar.Assignment(),\n+        "portlet_events": events.Assignment(count=5),\n+    }\n \n     # Convert left_slots and right_slots to portlets\n \n-    left = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-    right = getUtility(IPortletManager, name=\'plone.rightcolumn\')\n+    left = getUtility(IPortletManager, name="plone.leftcolumn")\n+    right = getUtility(IPortletManager, name="plone.rightcolumn")\n \n-    leftAssignable = getMultiAdapter((context, left), IPortletAssignmentMapping).__of__(context)\n-    rightAssignable = getMultiAdapter((context, right), IPortletAssignmentMapping).__of__(context)\n+    leftAssignable = getMultiAdapter((context, left), IPortletAssignmentMapping).__of__(\n+        context\n+    )\n+    rightAssignable = getMultiAdapter(\n+        (context, right), IPortletAssignmentMapping\n+    ).__of__(context)\n \n     IPortletPermissionChecker(leftAssignable)()\n     IPortletPermissionChecker(rightAssignable)()\n@@ -114,23 +105,31 @@ def convert_legacy_portlets(context):\n     leftChooser = INameChooser(leftAssignable)\n     rightChooser = INameChooser(rightAssignable)\n \n-    left_slots = getattr(aq_base(context), \'left_slots\', [])\n-    right_slots = getattr(aq_base(context), \'right_slots\', [])\n+    left_slots = getattr(aq_base(context), "left_slots", [])\n+    right_slots = getattr(aq_base(context), "right_slots", [])\n \n     for item in left_slots:\n-        path = item.split(\'/\')\n+        path = item.split("/")\n         if len(path) == 4:\n             newPortlet = portletsMapping.get(path[1], None)\n-            if newPortlet is None and path[0] in (\'context\', \'here\') and path[2] == \'macros\':\n+            if (\n+                newPortlet is None\n+                and path[0] in ("context", "here")\n+                and path[2] == "macros"\n+            ):\n                 newPortlet = classic.Assignment(path[1], path[3])\n             if newPortlet is not None and newPortlet is not DONT_MIGRATE:\n                 leftAssignable[leftChooser.chooseName(None, newPortlet)] = newPortlet\n \n     for item in right_slots:\n-        path = item.split(\'/\')\n+        path = item.split("/")\n         if len(path) == 4:\n             newPortlet = portletsMapping.get(path[1], None)\n-            if newPortlet is None and path[0] in (\'context\', \'here\') and path[2] == \'macros\':\n+            if (\n+                newPortlet is None\n+                and path[0] in ("context", "here")\n+                and path[2] == "macros"\n+            ):\n                 newPortlet = classic.Assignment(path[1], path[3])\n             if newPortlet is not None and newPortlet is not DONT_MIGRATE:\n                 rightAssignable[rightChooser.chooseName(None, newPortlet)] = newPortlet\ndiff --git a/setup.cfg b/setup.cfg\nindex d67feb4c..be9558ad 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,12 +1,9 @@\n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n-not_skip =\n-    __init__.py\n \n [bdist_wheel]\n universal = 1\ndiff --git a/setup.py b/setup.py\nindex 3f16b245..05ef8633 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,16 +1,14 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'5.0.0a3.dev0\'\n+version = "5.0.0a3.dev0"\n \n setup(\n-    name=\'plone.app.portlets\',\n+    name="plone.app.portlets",\n     version=version,\n     description="Plone integration for the basic plone.portlets package",\n-    long_description=open("README.rst").read() + "\\n" +\n-    open("CHANGES.rst").read(),\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -25,56 +23,56 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'portlets viewlets plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.portlets\',\n-    license=\'GPL version 2\',\n+    keywords="portlets viewlets plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.portlets",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'five.customerize\',\n-        \'plone.autoform\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.portlets>=1.1\',\n-        \'plone.app.i18n\',\n-        \'plone.app.layout >= 1.2dev\',\n-        \'plone.app.vocabularies >= 2.1.15.dev0\',\n-        \'plone.app.z3cform\',\n-        \'six\',\n-        \'transaction\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.container\',\n-        \'zope.contentprovider\',\n-        \'zope.event\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.traversing\',\n-        \'Products.CMFPlone\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'Products.GenericSetup >= 2.0.dev0\',\n-        \'Products.PluggableAuthService\',\n-        \'ZODB3\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Zope2 >= 2.12.3\',\n-        \'feedparser\',\n+        "setuptools",\n+        "five.customerize",\n+        "plone.autoform",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.portlets>=1.1",\n+        "plone.app.i18n",\n+        "plone.app.event",\n+        "plone.app.layout >= 1.2dev",\n+        "plone.app.vocabularies >= 2.1.15.dev0",\n+        "plone.app.z3cform",\n+        "transaction",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.configuration",\n+        "zope.container",\n+        "zope.contentprovider",\n+        "zope.event",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.site",\n+        "zope.traversing",\n+        "Products.CMFPlone",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.GenericSetup >= 2.0.dev0",\n+        "Products.PluggableAuthService",\n+        "ZODB",\n+        "Acquisition",\n+        "DateTime",\n+        "Zope >= 5",\n+        "feedparser",\n     ],\n )\n'

