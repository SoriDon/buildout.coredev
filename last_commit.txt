Repository: mockup


Branch: refs/heads/master
Date: 2017-04-13T12:04:57+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/baf5c8fff7a71f90e69bcd4da6c388b402ae36a0

Add ineffective label, show as badges.
Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
Show effective and ineffective label styled as bootstrap badges.

Files changed:
M CHANGES.rst
M mockup/patterns/structure/js/views/tablerow.js
M mockup/patterns/structure/less/pattern.structure.less
M mockup/patterns/structure/templates/tablerow.xml
M mockup/tests/pattern-structure-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 2b4dbec..1846f76 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,10 @@ Breaking changes:
 
 New features:
 
+- Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
+  Show effective and ineffective label styled as bootstrap badges.
+  [thet]
+
 - Related Items widget:
     - Add new mode "auto", which automatically sets ``search`` mode when a searchterm is present, otherwise ``browse`` mode.
     - Use searchterm as substring, which matches also within words by wrapping searchterm with the "*" wildcard.
@@ -18,6 +22,7 @@ New features:
     - Filter out non-selectable and non-folderish items in the result set when in browse mode.
     - Add option to scan the selected list of items for other patterns.
     - Add option for contextPath - objects with this path will not be selectable. This prevents the object where the relation is set on to from being selected and self-referenced.
+  [thet]
 
 Bug fixes:
 
diff --git a/mockup/patterns/structure/js/views/tablerow.js b/mockup/patterns/structure/js/views/tablerow.js
index 33fc855..00d10db 100644
--- a/mockup/patterns/structure/js/views/tablerow.js
+++ b/mockup/patterns/structure/js/views/tablerow.js
@@ -28,14 +28,22 @@ define([
       this.now = moment();
     },
 
-    expired: function(data){
-      if(!data.attributes.ExpirationDate){
+    expired: function(data) {
+      if (!data.attributes.ExpirationDate) {
         return false;
       }
       var dt = moment(data.attributes.ExpirationDate);
       return dt.diff(this.now, 'seconds') < 0;
     },
 
+    ineffective: function(data) {
+      if (!data.attributes.EffectiveDate) {
+        return false;
+      }
+      var dt = moment(data.attributes.EffectiveDate);
+      return dt.diff(this.now, 'seconds') > 0;
+    },
+
     render: function() {
       var self = this;
       var data = this.model.toJSON();
@@ -56,6 +64,7 @@ define([
 
       data._t = _t;
       data.expired = this.expired(data);
+      data.ineffective = this.ineffective(data);
       self.$el.html(self.template(data));
       var attrs = self.model.attributes;
       self.$el.addClass('state-' + attrs['review_state']).addClass('type-' + attrs.portal_type); // jshint ignore:line
@@ -68,11 +77,16 @@ define([
       self.$el.attr('data-type', data.portal_type);
       self.$el.attr('data-folderish', data['is_folderish']); // jshint ignore:line
       self.$el.removeClass('expired');
+      self.$el.removeClass('ineffective');
 
-      if(data.expired){
+      if (data.expired) {
         self.$el.addClass('expired');
       }
 
+      if (data.ineffective) {
+        self.$el.addClass('ineffective');
+      }
+
       self.el.model = this.model;
 
       var canMove = (!(!self.app.options.moveUrl));
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 9882d60..73332cf 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -87,9 +87,12 @@
                 padding-top: 2px;
             }
         }
-        .plone-item-expired {
+        .plone-item-expired,
+        .plone-item-ineffective {
+          .badge();
           font-size: 12px;
-          color: #d00202;
+          background-color: #d00202;
+          color: white;
         }
     }
     .navbar {
diff --git a/mockup/patterns/structure/templates/tablerow.xml b/mockup/patterns/structure/templates/tablerow.xml
index 12ed574..afaf9a2 100644
--- a/mockup/patterns/structure/templates/tablerow.xml
+++ b/mockup/patterns/structure/templates/tablerow.xml
@@ -14,6 +14,10 @@
     <% if(expired){ %>
       <span class="plone-item-expired"><%- _t('Expired') %></span>
     <% } %>
+    <% if(ineffective){ %>
+      <span class="plone-item-ineffective"><%- _t('Before publishing date') %></span>
+    <% } %>
+
   </div>
   <% if(attributes["getIcon"] ){ %>
   <img class="image-<%- iconSize %> pull-right" src="<%- getURL %>/@@images/image/<%- iconSize %>">
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index be8678a..3675c12 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -701,6 +701,52 @@ define([
 
     });
 
+    it('should display an expired label for expired contend', function() {
+
+      var expired = new Date();
+      expired.setDate(expired.getDate() - 10);
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document",
+        'ExpirationDate': expired.toJSON()
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .plone-item-expired', el).length).to.equal(1);
+      expect($('.title .plone-item-ineffective', el).length).to.equal(0);
+    });
+
+    it('should display an before publication date label for content which has an effective date in the future', function() {
+
+      var effective = new Date();
+      effective.setDate(effective.getDate() + 10);
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document",
+        'EffectiveDate': effective.toJSON()
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .plone-item-expired', el).length).to.equal(0);
+      expect($('.title .plone-item-ineffective', el).length).to.equal(1);
+    });
+
   });
 
   /* ==========================


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-13T13:19:07+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/031c0ed908eb0928041e090463ef3d2b80117051

Show "Description" below title, if it's set in ``availableColumns`` and ``activeColumns`` to save some screen space.

Files changed:
M CHANGES.rst
M mockup/patterns/structure/templates/table.xml
M mockup/patterns/structure/templates/tablerow.xml
M mockup/tests/pattern-structure-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 1846f76..b96eebf 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,8 +10,10 @@ Breaking changes:
 
 New features:
 
-- Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
-  Show effective and ineffective label styled as bootstrap badges.
+- Structure widget:
+  - Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
+    Show effective and ineffective label styled as bootstrap badges.
+  - Show "Description" below title, if it's set in ``availableColumns`` and ``activeColumns`` to save some screen space.
   [thet]
 
 - Related Items widget:
diff --git a/mockup/patterns/structure/templates/table.xml b/mockup/patterns/structure/templates/table.xml
index 07ff3d2..db88efc 100644
--- a/mockup/patterns/structure/templates/table.xml
+++ b/mockup/patterns/structure/templates/table.xml
@@ -24,7 +24,7 @@
       <th class="selection"><input type="checkbox" class="select-all" /></th>
       <th class="title">Title</th>
       <% _.each(activeColumns, function(column){ %>
-        <% if(_.has(availableColumns, column)) { %>
+        <% if(column !== 'Description' && _.has(availableColumns, column)) { %>
           <th><%- availableColumns[column] %></th>
         <% } %>
       <% }); %>
diff --git a/mockup/patterns/structure/templates/tablerow.xml b/mockup/patterns/structure/templates/tablerow.xml
index afaf9a2..7eea5e0 100644
--- a/mockup/patterns/structure/templates/tablerow.xml
+++ b/mockup/patterns/structure/templates/tablerow.xml
@@ -17,7 +17,13 @@
     <% if(ineffective){ %>
       <span class="plone-item-ineffective"><%- _t('Before publishing date') %></span>
     <% } %>
-
+    <% if(activeColumns.indexOf('Description') !== -1 && _.has(availableColumns, 'Description') && Description) { %>
+    <p class="Description">
+      <small>
+        <%- Description %>
+      </small>
+    </p>
+    <% } %>
   </div>
   <% if(attributes["getIcon"] ){ %>
   <img class="image-<%- iconSize %> pull-right" src="<%- getURL %>/@@images/image/<%- iconSize %>">
@@ -25,7 +31,7 @@
 </td>
 
 <% _.each(activeColumns, function(column) { %>
-  <% if(_.has(availableColumns, column)) { %>
+  <% if(column !== 'Description' && _.has(availableColumns, column)) { %>
     <td class="<%- column %>"><%- attributes[column] %></td>
   <% } %>
 <% }); %>
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index 3675c12..811cb55 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -747,6 +747,60 @@ define([
       expect($('.title .plone-item-ineffective', el).length).to.equal(1);
     });
 
+    it('should show Description below title, if available', function() {
+
+      // Ensure, Description is set.
+      this.app.activeColumns = [
+        'Description'
+      ];
+      this.app.availableColumns = {
+        'Description': 'Description'
+      };
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'Description': "Oh, this is a description of this content!",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document"
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .Description', el).length).to.equal(1);
+      // Description should be shown below title, but not in a column.
+      expect($('td.Description', el).length).to.equal(0);
+    });
+
+    it('should not show Description, if not set', function() {
+
+      // Ensure, Description is not set.
+      this.app.activeColumns = [];
+      this.app.availableColumns = {};
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'Description': "Oh, this is a description of this content!",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document"
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .Description', el).length).to.equal(0);
+      expect($('td.Description', el).length).to.equal(0);
+    });
+
+
   });
 
   /* ==========================


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-13T13:19:07+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/9af1a7cf775346734ecfcf056072c578a6eeedf0

Add default plone color less variables for a more consistent design.
They will be overwritten by values set by Plone or integration projects.

Files changed:
M CHANGES.rst
M mockup/less/mixins.less
M mockup/patterns/structure/less/pattern.structure.less

diff --git a/CHANGES.rst b/CHANGES.rst
index b96eebf..6006702 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,10 @@ Breaking changes:
 
 New features:
 
+- Add default plone color less variables for a more consistent design.
+  They will be overwritten by values set by Plone or integration projects.
+  [thet]
+
 - Structure widget:
   - Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
     Show effective and ineffective label styled as bootstrap badges.
diff --git a/mockup/less/mixins.less b/mockup/less/mixins.less
index 8083548..14ab3f0 100644
--- a/mockup/less/mixins.less
+++ b/mockup/less/mixins.less
@@ -1,4 +1,11 @@
 @isBrowser: false;
 @pathPrefix: '';
 @isMockup: true;
-@plone-link-color: "black";
\ No newline at end of file
+// Plone toolbar colors. Will be overwritten.
+@plone-link-color:                          #007bb3;
+@plone-toolbar-published-color:             @plone-link-color;
+@plone-toolbar-draft-color:                 #fab82a;
+@plone-toolbar-pending-color:               #e2e721;
+@plone-toolbar-private-color:               #c4183c;
+@plone-toolbar-internal-color:              #fab82a;
+@plone-toolbar-internally-published-color:  #883dfa;
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 73332cf..69abecd 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -91,9 +91,14 @@
         .plone-item-ineffective {
           .badge();
           font-size: 12px;
-          background-color: #d00202;
           color: white;
         }
+        .plone-item-expired {
+          background-color: @plone-toolbar-private-color;
+        }
+        .plone-item-ineffective {
+          background-color: @plone-toolbar-internal-color;
+        }
     }
     .navbar {
         min-height: inherit;


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-13T13:33:37+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/bb32110af70a13fb53ea233c58b7097b3f364bb3

Do not break whitespace within actionmenu links and don't underline them when hovering.

Files changed:
M CHANGES.rst
M mockup/patterns/structure/less/pattern.structure.less

diff --git a/CHANGES.rst b/CHANGES.rst
index 6006702..9a1dfa3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,7 @@ New features:
   - Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
     Show effective and ineffective label styled as bootstrap badges.
   - Show "Description" below title, if it's set in ``availableColumns`` and ``activeColumns`` to save some screen space.
+  - Don't underline actionmenu links.
   [thet]
 
 - Related Items widget:
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 69abecd..55710cb 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -79,6 +79,13 @@
                 .btn{
                     padding: 2px 4px;
                 }
+                a {
+                    white-space: nowrap;
+                    &,
+                    &:hover {
+                        text-decoration: none;
+                    }
+                }
             }
         }
         .fc-breadcrumbs-container{


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-13T13:44:20+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/mockup/commit/4546c92ce3b1651e130dc65fbe6cab6f747dc478

Merge pull request #755 from plone/thet-structure-ineffective

More structure widget optimizations

Files changed:
M CHANGES.rst
M mockup/less/mixins.less
M mockup/patterns/structure/js/views/tablerow.js
M mockup/patterns/structure/less/pattern.structure.less
M mockup/patterns/structure/templates/table.xml
M mockup/patterns/structure/templates/tablerow.xml
M mockup/tests/pattern-structure-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 2b4dbec..9a1dfa3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,17 @@ Breaking changes:
 
 New features:
 
+- Add default plone color less variables for a more consistent design.
+  They will be overwritten by values set by Plone or integration projects.
+  [thet]
+
+- Structure widget:
+  - Show ineffective label in folder contents for not yet effective and published content, likewise it's done with expires.
+    Show effective and ineffective label styled as bootstrap badges.
+  - Show "Description" below title, if it's set in ``availableColumns`` and ``activeColumns`` to save some screen space.
+  - Don't underline actionmenu links.
+  [thet]
+
 - Related Items widget:
     - Add new mode "auto", which automatically sets ``search`` mode when a searchterm is present, otherwise ``browse`` mode.
     - Use searchterm as substring, which matches also within words by wrapping searchterm with the "*" wildcard.
@@ -18,6 +29,7 @@ New features:
     - Filter out non-selectable and non-folderish items in the result set when in browse mode.
     - Add option to scan the selected list of items for other patterns.
     - Add option for contextPath - objects with this path will not be selectable. This prevents the object where the relation is set on to from being selected and self-referenced.
+  [thet]
 
 Bug fixes:
 
diff --git a/mockup/less/mixins.less b/mockup/less/mixins.less
index 8083548..14ab3f0 100644
--- a/mockup/less/mixins.less
+++ b/mockup/less/mixins.less
@@ -1,4 +1,11 @@
 @isBrowser: false;
 @pathPrefix: '';
 @isMockup: true;
-@plone-link-color: "black";
\ No newline at end of file
+// Plone toolbar colors. Will be overwritten.
+@plone-link-color:                          #007bb3;
+@plone-toolbar-published-color:             @plone-link-color;
+@plone-toolbar-draft-color:                 #fab82a;
+@plone-toolbar-pending-color:               #e2e721;
+@plone-toolbar-private-color:               #c4183c;
+@plone-toolbar-internal-color:              #fab82a;
+@plone-toolbar-internally-published-color:  #883dfa;
diff --git a/mockup/patterns/structure/js/views/tablerow.js b/mockup/patterns/structure/js/views/tablerow.js
index 33fc855..00d10db 100644
--- a/mockup/patterns/structure/js/views/tablerow.js
+++ b/mockup/patterns/structure/js/views/tablerow.js
@@ -28,14 +28,22 @@ define([
       this.now = moment();
     },
 
-    expired: function(data){
-      if(!data.attributes.ExpirationDate){
+    expired: function(data) {
+      if (!data.attributes.ExpirationDate) {
         return false;
       }
       var dt = moment(data.attributes.ExpirationDate);
       return dt.diff(this.now, 'seconds') < 0;
     },
 
+    ineffective: function(data) {
+      if (!data.attributes.EffectiveDate) {
+        return false;
+      }
+      var dt = moment(data.attributes.EffectiveDate);
+      return dt.diff(this.now, 'seconds') > 0;
+    },
+
     render: function() {
       var self = this;
       var data = this.model.toJSON();
@@ -56,6 +64,7 @@ define([
 
       data._t = _t;
       data.expired = this.expired(data);
+      data.ineffective = this.ineffective(data);
       self.$el.html(self.template(data));
       var attrs = self.model.attributes;
       self.$el.addClass('state-' + attrs['review_state']).addClass('type-' + attrs.portal_type); // jshint ignore:line
@@ -68,11 +77,16 @@ define([
       self.$el.attr('data-type', data.portal_type);
       self.$el.attr('data-folderish', data['is_folderish']); // jshint ignore:line
       self.$el.removeClass('expired');
+      self.$el.removeClass('ineffective');
 
-      if(data.expired){
+      if (data.expired) {
         self.$el.addClass('expired');
       }
 
+      if (data.ineffective) {
+        self.$el.addClass('ineffective');
+      }
+
       self.el.model = this.model;
 
       var canMove = (!(!self.app.options.moveUrl));
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 9882d60..55710cb 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -79,6 +79,13 @@
                 .btn{
                     padding: 2px 4px;
                 }
+                a {
+                    white-space: nowrap;
+                    &,
+                    &:hover {
+                        text-decoration: none;
+                    }
+                }
             }
         }
         .fc-breadcrumbs-container{
@@ -87,9 +94,17 @@
                 padding-top: 2px;
             }
         }
-        .plone-item-expired {
+        .plone-item-expired,
+        .plone-item-ineffective {
+          .badge();
           font-size: 12px;
-          color: #d00202;
+          color: white;
+        }
+        .plone-item-expired {
+          background-color: @plone-toolbar-private-color;
+        }
+        .plone-item-ineffective {
+          background-color: @plone-toolbar-internal-color;
         }
     }
     .navbar {
diff --git a/mockup/patterns/structure/templates/table.xml b/mockup/patterns/structure/templates/table.xml
index 07ff3d2..db88efc 100644
--- a/mockup/patterns/structure/templates/table.xml
+++ b/mockup/patterns/structure/templates/table.xml
@@ -24,7 +24,7 @@
       <th class="selection"><input type="checkbox" class="select-all" /></th>
       <th class="title">Title</th>
       <% _.each(activeColumns, function(column){ %>
-        <% if(_.has(availableColumns, column)) { %>
+        <% if(column !== 'Description' && _.has(availableColumns, column)) { %>
           <th><%- availableColumns[column] %></th>
         <% } %>
       <% }); %>
diff --git a/mockup/patterns/structure/templates/tablerow.xml b/mockup/patterns/structure/templates/tablerow.xml
index 12ed574..7eea5e0 100644
--- a/mockup/patterns/structure/templates/tablerow.xml
+++ b/mockup/patterns/structure/templates/tablerow.xml
@@ -14,6 +14,16 @@
     <% if(expired){ %>
       <span class="plone-item-expired"><%- _t('Expired') %></span>
     <% } %>
+    <% if(ineffective){ %>
+      <span class="plone-item-ineffective"><%- _t('Before publishing date') %></span>
+    <% } %>
+    <% if(activeColumns.indexOf('Description') !== -1 && _.has(availableColumns, 'Description') && Description) { %>
+    <p class="Description">
+      <small>
+        <%- Description %>
+      </small>
+    </p>
+    <% } %>
   </div>
   <% if(attributes["getIcon"] ){ %>
   <img class="image-<%- iconSize %> pull-right" src="<%- getURL %>/@@images/image/<%- iconSize %>">
@@ -21,7 +31,7 @@
 </td>
 
 <% _.each(activeColumns, function(column) { %>
-  <% if(_.has(availableColumns, column)) { %>
+  <% if(column !== 'Description' && _.has(availableColumns, column)) { %>
     <td class="<%- column %>"><%- attributes[column] %></td>
   <% } %>
 <% }); %>
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index be8678a..811cb55 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -701,6 +701,106 @@ define([
 
     });
 
+    it('should display an expired label for expired contend', function() {
+
+      var expired = new Date();
+      expired.setDate(expired.getDate() - 10);
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document",
+        'ExpirationDate': expired.toJSON()
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .plone-item-expired', el).length).to.equal(1);
+      expect($('.title .plone-item-ineffective', el).length).to.equal(0);
+    });
+
+    it('should display an before publication date label for content which has an effective date in the future', function() {
+
+      var effective = new Date();
+      effective.setDate(effective.getDate() + 10);
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document",
+        'EffectiveDate': effective.toJSON()
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .plone-item-expired', el).length).to.equal(0);
+      expect($('.title .plone-item-ineffective', el).length).to.equal(1);
+    });
+
+    it('should show Description below title, if available', function() {
+
+      // Ensure, Description is set.
+      this.app.activeColumns = [
+        'Description'
+      ];
+      this.app.availableColumns = {
+        'Description': 'Description'
+      };
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'Description': "Oh, this is a description of this content!",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document"
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .Description', el).length).to.equal(1);
+      // Description should be shown below title, but not in a column.
+      expect($('td.Description', el).length).to.equal(0);
+    });
+
+    it('should not show Description, if not set', function() {
+
+      // Ensure, Description is not set.
+      this.app.activeColumns = [];
+      this.app.availableColumns = {};
+
+      var model = new Result({
+        'Title': "Dummy Document",
+        'Description': "Oh, this is a description of this content!",
+        'id': "dummy_document",
+        'is_folderish': false,
+        'portal_type': "Document"
+      });
+
+      var row = new TableRowView({
+        model: model,
+        app: this.app
+      });
+      var el = row.render().el;
+
+      expect($('.title .Description', el).length).to.equal(0);
+      expect($('td.Description', el).length).to.equal(0);
+    });
+
+
   });
 
   /* ==========================


