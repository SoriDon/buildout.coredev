Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2023-03-14T20:15:12+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/4efbdb7a353fa95263cf62dc232193ce0a33fc49

upgrade to py3 and plone codestyle

- pyupgrade, drop support for Python &lt; 3.8
- isort
- black
- manual edits
- fix deprecation warnings for imports from Products.CMFPlone
- import and depend from plone.base

Files changed:
A news/15.breaking
M README.rst
M plone/__init__.py
M plone/stringinterp/__init__.py
M plone/stringinterp/adapters.py
M plone/stringinterp/browser.py
M plone/stringinterp/configure.zcml
M plone/stringinterp/dollarReplace.py
M plone/stringinterp/interfaces.py
M plone/stringinterp/tests/__init__.py
M plone/stringinterp/tests/testDocTests.py
M setup.cfg
M setup.py

b'diff --git a/README.rst b/README.rst\nindex 44f807c..b78fc0d 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,8 +1,5 @@\n-Introduction\n-============\n-Provides ${id} style string interpolation using named adapters to look up\n-variables. This is meant to provide a trivially simple template system\n-for clients like plone.app.contentrules.\n+Provides ``${id}`` style string interpolation using named adapters to look up variables.\n+This is meant to provide a trivially simple template system for clients like plone.app.contentrules.\n \n To interpolate a string in context, just follow the pattern::\n \n@@ -10,24 +7,19 @@ To interpolate a string in context, just follow the pattern::\n \n     IStringInterpolator(context)("Here is the title: ${title}")\n \n-Substitution of variables that are part of the Dublin Core are\n-provided with the package. To provide additional substitutions, just\n-provide a named adapter implementing interfaces.IStringSubstitution\n-for your context. The adapter name is used for the lookup.\n+Substitution of variables that are part of the Dublin Core are provided with the package.\n+To provide additional substitutions, provide a named adapter implementing ``interfaces.IStringSubstitution`` for your context.\n+The adapter name is used for the lookup.\n \n-You can also wrap your context with IContextWrapper adapter if you need to pass\n-custom messages within your substitutions.\n+You can also wrap your context with ``IContextWrapper`` adapter if you need to pass custom messages within your substitutions.\n \n-Dependencies\n-============\n-Dependencies are all in the CMF* namespace, so this is theoretically useful\n-outside Plone. It does use the \'plone\' identifier for the message factory.\n \n Implemented Substitutions\n =========================\n \n All Content\n -----------\n+\n - id\n - parent_id\n - url\n@@ -36,12 +28,14 @@ All Content\n \n Minimal Dublin Core\n -------------------\n+\n - title\n - description\n - type (content type)\n \n Workflow Aware\n --------------\n+\n - review_state\n - review_state_title\n \n@@ -62,6 +56,7 @@ Dublin Core\n \n Catalogable Dublin Core\n -----------------------\n+\n Everything should be in long local time format\n \n - created\n@@ -71,6 +66,7 @@ Everything should be in long local time format\n \n Member / Group Information for roles on content\n -----------------------------------------------\n+\n - owner_emails\n - reviewer_emails\n - manager_emails\n@@ -79,12 +75,22 @@ Member / Group Information for roles on content\n \n Current User Information\n ------------------------\n+\n - user_fullname\n - user_id\n \n Last Change (workflow or version) Information\n ---------------------------------------------\n+\n - change_comment\n - change_title\n - change_type\n - change_authorid\n+\n+\n+Source Code\n+===========\n+\n+Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n+\n+Sources and issue tracker are at the `Plone code repository hosted at Github <https://github.com/plone/plone.stringinterp>`_.\ndiff --git a/news/15.breaking b/news/15.breaking\nnew file mode 100644\nindex 0000000..dc1a8a1\n--- /dev/null\n+++ b/news/15.breaking\n@@ -0,0 +1,5 @@\n+pyupgrade, drop support for Python < 3.8.\n+isort, black, manual edits.\n+Fix deprecation warnings for imports from Products.CMFPlone.\n+Import and depend from plone.base.\n+\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/stringinterp/__init__.py b/plone/stringinterp/__init__.py\nindex eb6d7c9..32d03e1 100644\n--- a/plone/stringinterp/__init__.py\n+++ b/plone/stringinterp/__init__.py\n@@ -1,4 +1 @@\n from .dollarReplace import Interpolator\n-\n-from zope.i18nmessageid import MessageFactory\n-_ = MessageFactory(\'plone\')\ndiff --git a/plone/stringinterp/adapters.py b/plone/stringinterp/adapters.py\nindex db55e43..74f900e 100644\n--- a/plone/stringinterp/adapters.py\n+++ b/plone/stringinterp/adapters.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n adapters.py\n \n@@ -7,43 +6,38 @@\n Copyright (c) 2009 Plone Foundation.\n """\n \n-from zope.interface import implementer, Interface, alsoProvides\n-from zope.component import adapter\n-from zope.i18n import translate\n-\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner, aq_parent, aq_get, Implicit\n-\n from AccessControl.interfaces import IRoleManager\n-from Products.PlonePAS.interfaces.group import IGroupData\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFCore.interfaces import (\n-    IContentish, IMinimalDublinCore, IWorkflowAware, IDublinCore,\n-    ICatalogableDublinCore)\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.CMFPlone.i18nl10n import ulocalized_time\n-\n+from Acquisition import aq_get\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Acquisition import Implicit\n+from plone.base import PloneMessageFactory as _\n+from plone.base.i18nl10n import ulocalized_time\n+from plone.base.utils import safe_text\n from plone.memoize.request import memoize_diy_request\n-\n-from plone.stringinterp import _\n-from plone.stringinterp.interfaces import IStringSubstitution\n from plone.stringinterp.interfaces import IContextWrapper\n-\n-# BBB: on Zope 5 the fallback will not work anymore,\n-# as long as we want compatibility with Zope 4 and earlier\n-# we need to keep the fallback\n-try:\n-    from zope.component.hooks import getSite\n-except:\n-    from zope.site.hooks import getSite\n-\n+from plone.stringinterp.interfaces import IStringSubstitution\n+from Products.CMFCore.interfaces import ICatalogableDublinCore\n+from Products.CMFCore.interfaces import IContentish\n+from Products.CMFCore.interfaces import IDublinCore\n+from Products.CMFCore.interfaces import IMinimalDublinCore\n+from Products.CMFCore.interfaces import IWorkflowAware\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFCore.WorkflowCore import WorkflowException\n+from Products.PlonePAS.interfaces.group import IGroupData\n+from zope.component import adapter\n+from zope.component.hooks import getSite\n+from zope.i18n import translate\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @implementer(IContextWrapper)\n class ContextWrapper(Implicit):\n-    """ Wrapper for context\n-    """\n+    """Wrapper for context"""\n+\n     def __init__(self, context):\n         self.context = context\n \n@@ -66,9 +60,9 @@ def __call__(self, **kwargs):\n \n \n @implementer(IStringSubstitution)\n-class BaseSubstitution(object):\n-    """ Base substitution\n-    """\n+class BaseSubstitution:\n+    """Base substitution"""\n+\n     def __init__(self, context):\n         if IContextWrapper.providedBy(context):\n             self.wrapper = context\n@@ -82,16 +76,15 @@ def __init__(self, context):\n     # not generating unauth exceptions or returning non-unicode.\n     def __call__(self):\n         try:\n-            return safe_unicode(self.safe_call())\n+            return safe_text(self.safe_call())\n         except Unauthorized:\n-            return _(u\'Unauthorized\')\n+            return _("Unauthorized")\n \n \n @adapter(IContentish)\n class UrlSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u\'URL\')\n+    category = _("All Content")\n+    description = _("URL")\n \n     def safe_call(self):\n         return self.context.absolute_url()\n@@ -99,9 +92,8 @@ def safe_call(self):\n \n @adapter(Interface)\n class ParentIdSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u"Identifier of the parent content or login of managed user")\n+    category = _("All Content")\n+    description = _("Identifier of the parent content or login of managed user")\n \n     def safe_call(self):\n         return aq_parent(self.context).getId()\n@@ -109,9 +101,8 @@ def safe_call(self):\n \n @adapter(Interface)\n class IdSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u"Identifier of the content or login of managed user")\n+    category = _("All Content")\n+    description = _("Identifier of the content or login of managed user")\n \n     def safe_call(self):\n         return self.context.getId()\n@@ -119,19 +110,17 @@ def safe_call(self):\n \n @adapter(IContentish)\n class ParentUrlSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u"Folder URL")\n+    category = _("All Content")\n+    description = _("Folder URL")\n \n     def safe_call(self):\n-        return aq_get(aq_parent(self.context), \'absolute_url\')()\n+        return aq_get(aq_parent(self.context), "absolute_url")()\n \n \n @adapter(IMinimalDublinCore)\n class TitleSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Title\')\n+    category = _("Dublin Core")\n+    description = _("Title")\n \n     def safe_call(self):\n         return self.context.Title()\n@@ -139,19 +128,17 @@ def safe_call(self):\n \n @adapter(IContentish)\n class ParentTitleSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u\'Parent title\')\n+    category = _("All Content")\n+    description = _("Parent title")\n \n     def safe_call(self):\n-        return aq_get(aq_parent(self.context), \'Title\')()\n+        return aq_get(aq_parent(self.context), "Title")()\n \n \n @adapter(IMinimalDublinCore)\n class DescriptionSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Description\')\n+    category = _("Dublin Core")\n+    description = _("Description")\n \n     def safe_call(self):\n         return self.context.Description()\n@@ -159,9 +146,8 @@ def safe_call(self):\n \n @adapter(IMinimalDublinCore)\n class TypeSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Content Type\')\n+    category = _("Dublin Core")\n+    description = _("Content Type")\n \n     def safe_call(self):\n         return translate(self.context.Type(), context=self.context.REQUEST)\n@@ -169,33 +155,31 @@ def safe_call(self):\n \n @adapter(IDublinCore)\n class CreatorSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creator Id\')\n+    category = _("Dublin Core")\n+    description = _("Creator Id")\n \n     def safe_call(self):\n         for creator in self.context.listCreators():\n             return creator\n-        return \'\'\n+        return ""\n \n \n @adapter(IContentish)\n class CreatorFullNameSubstitution(CreatorSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creator Full Name\')\n+    category = _("Dublin Core")\n+    description = _("Creator Full Name")\n \n     def safe_call(self):\n-        creator = super(CreatorFullNameSubstitution, self).safe_call()\n+        creator = super().safe_call()\n         if not creator:\n-            return \'\'\n+            return ""\n \n         pm = getToolByName(self.context, "portal_membership")\n         member = pm.getMemberById(creator)\n         if not member:\n             return creator\n \n-        fname = member.getProperty(\'fullname\', None)\n+        fname = member.getProperty("fullname", None)\n         if not fname:\n             return creator\n         return fname\n@@ -203,39 +187,36 @@ def safe_call(self):\n \n @adapter(IDublinCore)\n class CreatorEmailSubstitution(CreatorSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creator E-Mail\')\n+    category = _("Dublin Core")\n+    description = _("Creator E-Mail")\n \n     def safe_call(self):\n-        creator = super(CreatorEmailSubstitution, self).safe_call()\n+        creator = super().safe_call()\n         if not creator:\n-            return \'\'\n+            return ""\n         pm = getToolByName(self.context, "portal_membership")\n         member = pm.getMemberById(creator)\n         if not member:\n-            return \'\'\n-        email = member.getProperty(\'email\', \'\')\n+            return ""\n+        email = member.getProperty("email", "")\n         if not email:\n-            return \'\'\n+            return ""\n         return email\n \n \n @adapter(IDublinCore)\n class CreatorsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creators Ids\')\n+    category = _("Dublin Core")\n+    description = _("Creators Ids")\n \n     def safe_call(self):\n-        return  \', \'.join(self.context.listCreators())\n+        return ", ".join(self.context.listCreators())\n \n \n @adapter(IDublinCore)\n class CreatorsEmailsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creators E-Mails\')\n+    category = _("Dublin Core")\n+    description = _("Creators E-Mails")\n \n     def safe_call(self):\n         creators = self.context.listCreators()\n@@ -245,28 +226,26 @@ def safe_call(self):\n             member = pm.getMemberById(creator)\n             if not member:\n                 continue\n-            email = member.getProperty(\'email\', None)\n+            email = member.getProperty("email", None)\n             if not email:\n                 continue\n             emails.append(email)\n-        return \', \'.join(emails)\n+        return ", ".join(emails)\n \n \n @adapter(IDublinCore)\n class ContributorsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Contributors Ids\')\n+    category = _("Dublin Core")\n+    description = _("Contributors Ids")\n \n     def safe_call(self):\n-        return  \', \'.join(self.context.listContributors())\n+        return ", ".join(self.context.listContributors())\n \n \n @adapter(IDublinCore)\n class ContributorsEmailsSubstitution(BaseSubstitution):\n-\n-    category = (u\'Dublin Core\')\n-    description = _(u\'Contributors E-Mails\')\n+    category = "Dublin Core"\n+    description = _("Contributors E-Mails")\n \n     def safe_call(self):\n         contributors = self.context.listContributors()\n@@ -276,102 +255,93 @@ def safe_call(self):\n             member = pm.getMemberById(contributor)\n             if not member:\n                 continue\n-            email = member.getProperty(\'email\', None)\n+            email = member.getProperty("email", None)\n             if not email:\n                 continue\n             emails.append(email)\n-        return \', \'.join(emails)\n+        return ", ".join(emails)\n \n \n @adapter(IDublinCore)\n class SubjectSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Subject\')\n+    category = _("Dublin Core")\n+    description = _("Subject")\n \n     def safe_call(self):\n-        return  \', \'.join(self.context.Subject())\n+        return ", ".join(self.context.Subject())\n \n \n @adapter(IDublinCore)\n class FormatSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Format\')\n+    category = _("Dublin Core")\n+    description = _("Format")\n \n     def safe_call(self):\n-        return  self.context.Format()\n+        return self.context.Format()\n \n \n @adapter(IDublinCore)\n class LanguageSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Language\')\n+    category = _("Dublin Core")\n+    description = _("Language")\n \n     def safe_call(self):\n-        return  self.context.Language()\n+        return self.context.Language()\n \n \n @adapter(IDublinCore)\n class IdentifierSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Identifier, actually URL of the content\')\n+    category = _("Dublin Core")\n+    description = _("Identifier, actually URL of the content")\n \n     def safe_call(self):\n-        return  self.context.Identifier()\n+        return self.context.Identifier()\n \n \n @adapter(IDublinCore)\n class RightsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Rights\')\n+    category = _("Dublin Core")\n+    description = _("Rights")\n \n     def safe_call(self):\n-        return  self.context.Rights()\n+        return self.context.Rights()\n \n \n @adapter(IWorkflowAware)\n class ReviewStateSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Workflow\')\n-    description = _(u\'Review State\')\n+    category = _("Workflow")\n+    description = _("Review State")\n \n     def safe_call(self):\n-        wft = getToolByName(self.context, \'portal_workflow\')\n-        return wft.getInfoFor(self.context, \'review_state\')\n+        wft = getToolByName(self.context, "portal_workflow")\n+        return wft.getInfoFor(self.context, "review_state")\n \n \n @adapter(IWorkflowAware)\n class ReviewStateTitleSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Workflow\')\n-    description = _(u\'Review State Title\')\n+    category = _("Workflow")\n+    description = _("Review State Title")\n \n     def safe_call(self):\n-        wft = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wft.getInfoFor(self.context, \'review_state\')\n-        return _(wft.getTitleForStateOnType(review_state,\n-                                            self.context.portal_type))\n+        wft = getToolByName(self.context, "portal_workflow")\n+        review_state = wft.getInfoFor(self.context, "review_state")\n+        return _(wft.getTitleForStateOnType(review_state, self.context.portal_type))\n \n \n class DateSubstitution(BaseSubstitution):\n-\n     def formatDate(self, adate):\n         try:\n-            return safe_unicode(\n-               ulocalized_time(adate, long_format=True, context=self.context))\n+            return safe_text(\n+                ulocalized_time(adate, long_format=True, context=self.context)\n+            )\n         except ValueError:\n-            return u\'???\'\n+            return "???"\n \n \n @adapter(ICatalogableDublinCore)\n class CreatedSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Created\')\n+    category = _("Dublin Core")\n+    description = _("Date Created")\n \n     def safe_call(self):\n         return self.formatDate(self.context.created())\n@@ -379,9 +349,8 @@ def safe_call(self):\n \n @adapter(ICatalogableDublinCore)\n class EffectiveSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Effective\')\n+    category = _("Dublin Core")\n+    description = _("Date Effective")\n \n     def safe_call(self):\n         return self.formatDate(self.context.effective())\n@@ -389,9 +358,8 @@ def safe_call(self):\n \n @adapter(ICatalogableDublinCore)\n class ExpiresSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Expires\')\n+    category = _("Dublin Core")\n+    description = _("Date Expires")\n \n     def safe_call(self):\n         return self.formatDate(self.context.expires())\n@@ -399,9 +367,8 @@ def safe_call(self):\n \n @adapter(ICatalogableDublinCore)\n class ModifiedSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Modified\')\n+    category = _("Dublin Core")\n+    description = _("Date Modified")\n \n     def safe_call(self):\n         return self.formatDate(self.context.modified())\n@@ -410,9 +377,8 @@ def safe_call(self):\n # A base class for adapters that need member information\n @adapter(IContentish)\n class MemberSubstitution(BaseSubstitution):\n-\n     def __init__(self, context):\n-        super(MemberSubstitution, self).__init__(context)\n+        super().__init__(context)\n         self.mtool = getToolByName(self.context, "portal_membership")\n         self.gtool = getToolByName(self.context, "portal_groups")\n \n@@ -441,35 +407,35 @@ def getPropsForIds(self, ids, propname):\n         return self.getPropsForMembers(self.getMembersFromIds(ids), propname)\n \n \n-# A base class for all the role->email list adapters\n+# A base class for all the role-&gt;email list adapters\n @adapter(IContentish)\n class MailAddressSubstitution(MemberSubstitution):\n-\n     def getEmailsForRole(self, role):\n-\n         portal = getSite()\n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n \n         # get a set of ids of members with the global role\n-        ids = set([p[0] for p in acl_users.portal_role_manager.listAssignedPrincipals(role)])\n+        ids = {p[0] for p in acl_users.portal_role_manager.listAssignedPrincipals(role)}\n \n         # union with set of ids of members with the local role\n-        ids |= set([id for id, irole\n-                       in acl_users._getAllLocalRoles(self.context).items()\n-                       if role in irole])\n+        ids |= {\n+            id\n+            for id, irole in acl_users._getAllLocalRoles(self.context).items()\n+            if role in irole\n+        }\n \n         # get members from group or member ids\n         members = _recursiveGetMembersFromIds(portal, ids)\n \n         # get emails\n-        return u\', \'.join(self.getPropsForMembers(members, \'email\'))\n+        return ", ".join(self.getPropsForMembers(members, "email"))\n \n \n def _recursiveGetMembersFromIds(portal, group_and_user_ids):\n-    """ get members from a list of group and member ids """\n+    """get members from a list of group and member ids"""\n \n-    gtool = getToolByName(portal, \'portal_groups\')\n-    mtool = getToolByName(portal, \'portal_membership\')\n+    gtool = getToolByName(portal, "portal_groups")\n+    mtool = getToolByName(portal, "portal_membership")\n     members = set()\n     seen = set()\n \n@@ -488,7 +454,8 @@ def recursiveGetGroupUsers(mtool, gtool, seen, group):\n \n                 seen.add(group_or_user_id)\n                 users = users.union(\n-                            recursiveGetGroupUsers(mtool, gtool, seen, group_or_user))\n+                    recursiveGetGroupUsers(mtool, gtool, seen, group_or_user)\n+                )\n             elif group_or_user is not None:\n                 # Other group data PAS plugins might not filter no\n                 # longer existing group members.\n@@ -510,110 +477,100 @@ def recursiveGetGroupUsers(mtool, gtool, seen, group):\n \n \n class OwnerEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Owners E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Owners E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Owner\')\n+        return self.getEmailsForRole("Owner")\n \n \n class ReviewerEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Reviewers E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Reviewers E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Reviewer\')\n+        return self.getEmailsForRole("Reviewer")\n \n \n class ReaderEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Readers E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Readers E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Reader\')\n+        return self.getEmailsForRole("Reader")\n \n \n class ContributorEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Contributors E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Contributors E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Contributor\')\n+        return self.getEmailsForRole("Contributor")\n \n \n class EditorEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Editors E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Editors E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Editor\')\n+        return self.getEmailsForRole("Editor")\n \n \n class ManagerEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Managers E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Managers E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Manager\')\n+        return self.getEmailsForRole("Manager")\n \n \n class MemberEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Members E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Members E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Member\')\n+        return self.getEmailsForRole("Member")\n \n \n @adapter(IContentish)\n class UserEmailSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Current User\')\n-    description = _(u\'E-Mail Address\')\n+    category = _("Current User")\n+    description = _("E-Mail Address")\n \n     def safe_call(self):\n         pm = getToolByName(self.context, "portal_membership")\n         if not pm.isAnonymousUser():\n             user = pm.getAuthenticatedMember()\n             if user is not None:\n-                email = user.getProperty(\'email\', None)\n+                email = user.getProperty("email", None)\n                 if email:\n                     return email\n-        return u\'\'\n+        return ""\n \n \n @adapter(IContentish)\n class UserFullNameSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Current User\')\n-    description = _(u\'Full Name\')\n+    category = _("Current User")\n+    description = _("Full Name")\n \n     def safe_call(self):\n         pm = getToolByName(self.context, "portal_membership")\n         if not pm.isAnonymousUser():\n             user = pm.getAuthenticatedMember()\n             if user is not None:\n-                fname = user.getProperty(\'fullname\', None)\n+                fname = user.getProperty("fullname", None)\n                 if fname:\n                     return fname\n                 else:\n                     return user.getId()\n \n-        return u\'\'\n+        return ""\n \n \n @adapter(IContentish)\n class UserIdSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Current User\')\n-    description = _(u\'Id\')\n+    category = _("Current User")\n+    description = _("Id")\n \n     def safe_call(self):\n         pm = getToolByName(self.context, "portal_membership")\n@@ -621,7 +578,7 @@ def safe_call(self):\n             user = pm.getAuthenticatedMember()\n             if user is not None:\n                 return user.getId()\n-        return u\'\'\n+        return ""\n \n \n # memoize on the request an expensive function called by the\n@@ -635,31 +592,33 @@ def _lastChange(request, context):\n     elif not last_revision:\n         return workflow_change\n \n-    if workflow_change and last_revision and \\\n-       workflow_change.get(\'time\') > last_revision.get(\'time\'):\n+    if (\n+        workflow_change\n+        and last_revision\n+        and workflow_change.get("time") > last_revision.get("time")\n+    ):\n         return workflow_change\n \n     return last_revision\n \n \n def _lastWorkflowChange(context):\n-    workflow = getToolByName(context, \'portal_workflow\')\n+    workflow = getToolByName(context, "portal_workflow")\n     try:\n-        review_history = workflow.getInfoFor(context, \'review_history\')\n+        review_history = workflow.getInfoFor(context, "review_history")\n     except WorkflowException:\n         return {}\n \n     # filter out automatic transitions.\n-    review_history = [r for r in review_history if r[\'action\']]\n+    review_history = [r for r in review_history if r["action"]]\n \n     if review_history:\n         r = review_history[-1]\n-        r[\'type\'] = \'workflow\'\n-        r[\'transition_title\'] = \\\n-            workflow.getTitleForTransitionOnType(\n-             r[\'action\'],\n-             context.portal_type)\n-        r[\'actorid\'] = r[\'actor\']\n+        r["type"] = "workflow"\n+        r["transition_title"] = workflow.getTitleForTransitionOnType(\n+            r["action"], context.portal_type\n+        )\n+        r["actorid"] = r["actor"]\n     else:\n         r = {}\n \n@@ -674,17 +633,18 @@ def _lastRevision(context):\n         if history:\n             # history = ImplicitAcquisitionWrapper(history, pa)\n             meta = history.retrieve(\n-               history.getLength(countPurged=False)-1,\n-               countPurged=False,\n-              )[\'metadata\'][\'sys_metadata\']\n-            return dict(type=\'versioning\',\n-                    action=_(u"edit"),\n-                    transition_title=_(u"Edit"),\n-                    actorid=meta["principal"],\n-                    time=meta["timestamp"],\n-                    comments=meta[\'comment\'],\n-                    review_state=meta["review_state"],\n-                    )\n+                history.getLength(countPurged=False) - 1,\n+                countPurged=False,\n+            )["metadata"]["sys_metadata"]\n+            return dict(\n+                type="versioning",\n+                action=_("edit"),\n+                transition_title=_("Edit"),\n+                actorid=meta["principal"],\n+                time=meta["timestamp"],\n+                comments=meta["comment"],\n+                review_state=meta["review_state"],\n+            )\n \n     return {}\n \n@@ -692,70 +652,63 @@ def _lastRevision(context):\n # a base class for substitutions that use\n # last revision or workflow information\n class ChangeSubstitution(BaseSubstitution):\n-\n     def lastChangeMetadata(self, id):\n-        return  _lastChange(self.context.REQUEST, self.context).get(id, \'\')\n+        return _lastChange(self.context.REQUEST, self.context).get(id, "")\n \n \n @adapter(IContentish)\n class LastChangeCommentSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Comment\')\n+    category = _("History")\n+    description = _("Comment")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'comments\')\n+        return self.lastChangeMetadata("comments")\n \n \n @adapter(IContentish)\n class LastChangeTitleSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Transition title\')\n+    category = _("History")\n+    description = _("Transition title")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'transition_title\')\n+        return self.lastChangeMetadata("transition_title")\n \n \n @adapter(IContentish)\n class LastChangeTypeSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Change type\')\n+    category = _("History")\n+    description = _("Change type")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'type\')\n+        return self.lastChangeMetadata("type")\n \n \n @adapter(IContentish)\n class LastChangeActorIdSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Change author\')\n+    category = _("History")\n+    description = _("Change author")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'actorid\')\n+        return self.lastChangeMetadata("actorid")\n \n \n class PortalSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Portal\')\n+    category = _("Portal")\n \n     def __init__(self, context):\n         BaseSubstitution.__init__(self, context)\n-        self.portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n+        self.portal = getToolByName(self.context, "portal_url").getPortalObject()\n \n-class PortalURLSubstitution(PortalSubstitution):\n \n-    description = _(u\'Portal URL\')\n+class PortalURLSubstitution(PortalSubstitution):\n+    description = _("Portal URL")\n \n     def safe_call(self):\n         return self.portal.absolute_url()\n \n \n class PortalTitleSubstitution(PortalSubstitution):\n-\n-    description = _(u\'Portal title\')\n+    description = _("Portal title")\n \n     def safe_call(self):\n         return self.portal.Title()\ndiff --git a/plone/stringinterp/browser.py b/plone/stringinterp/browser.py\nindex b98801f..d1fcd87 100644\n--- a/plone/stringinterp/browser.py\n+++ b/plone/stringinterp/browser.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n interfaces.py\n \n@@ -7,12 +6,10 @@\n Copyright (c) 2009 Plone Foundation.\n """\n \n-from zope.component import getSiteManager\n-\n-from Products.Five import BrowserView\n-\n+from plone.base import PloneMessageFactory as _\n from plone.stringinterp.interfaces import IStringSubstitution\n-from plone.stringinterp import _\n+from Products.Five import BrowserView\n+from zope.component import getSiteManager\n \n \n def find_adapters(reg):\n@@ -45,10 +42,9 @@ def substitutionList(self):\n         categories = {}\n         for a in find_adapters(getSiteManager()):\n             id = a.name\n-            cat = getattr(a.factory, \'category\', _(u\'Miscellaneous\'))\n-            desc = getattr(a.factory, \'description\', u\'\')\n-            categories.setdefault(cat, []).append(\n-              {\'id\': id, \'description\': desc})\n+            cat = getattr(a.factory, "category", _("Miscellaneous"))\n+            desc = getattr(a.factory, "description", "")\n+            categories.setdefault(cat, []).append({"id": id, "description": desc})\n \n         # rearrange again into a sorted list\n         res = []\n@@ -57,7 +53,7 @@ def substitutionList(self):\n         for key in sorted(keys, key=lambda s: s.lower()):\n             acat = categories[key]\n             # sort by id, ignoring case\n-            acat = sorted(acat, key=lambda i: i[\'id\'].lower())\n-            res.append({\'category\': key, \'items\': acat})\n+            acat = sorted(acat, key=lambda i: i["id"].lower())\n+            res.append({"category": key, "items": acat})\n \n         return res\ndiff --git a/plone/stringinterp/configure.zcml b/plone/stringinterp/configure.zcml\nindex 3736b7a..4a259ab 100644\n--- a/plone/stringinterp/configure.zcml\n+++ b/plone/stringinterp/configure.zcml\n@@ -1,322 +1,323 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n-\n-    <browser:page\n-        for="*"\n-        name="stringinterp_info"\n-        class=".browser.SubstitutionInfo"\n-        allowed_interface=".interfaces.IStringSubstitutionInfo"\n-        permission="zope.Public"\n-    />\n-\n-\n-    <adapter\n-        for="zope.interface.Interface"\n-        provides="plone.stringinterp.interfaces.IStringInterpolator"\n-        factory=".dollarReplace.Interpolator"\n-    />\n-\n-\n-    <adapter\n-        for="zope.interface.Interface"\n-        provides="plone.stringinterp.interfaces.IContextWrapper"\n-        factory=".adapters.ContextWrapper"\n-    />\n-\n-   <adapter\n-       for="*"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.UrlSubstitution"\n-       name="absolute_url"\n-       />\n-   <adapter\n-       for="*"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.UrlSubstitution"\n-       name="url"\n-       />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ParentUrlSubstitution"\n-        name="parent_url"\n-       />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ParentIdSubstitution"\n-        name="parent_id"\n-    />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.IdSubstitution"\n-        name="id"\n-    />\n-   <adapter\n-       for="Products.CMFCore.interfaces.IMinimalDublinCore"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.TitleSubstitution"\n-       name="title"\n-       />\n-   <adapter\n-       for="*"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.ParentTitleSubstitution"\n-       name="parent_title"\n-       />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IMinimalDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.DescriptionSubstitution"\n-        name="description"\n-        />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IMinimalDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.TypeSubstitution"\n-        name="type"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IWorkflowAware"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReviewStateSubstitution"\n-        name="review_state"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IWorkflowAware"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReviewStateTitleSubstitution"\n-        name="review_state_title"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatedSubstitution"\n-        name="created"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.EffectiveSubstitution"\n-        name="effective"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ExpiresSubstitution"\n-        name="expires"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ModifiedSubstitution"\n-        name="modified"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorSubstitution"\n-        name="creator"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorFullNameSubstitution"\n-        name="creator_fullname"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorEmailSubstitution"\n-        name="creator_email"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorsSubstitution"\n-        name="creators"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorsEmailsSubstitution"\n-        name="creators_emails"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ContributorsSubstitution"\n-        name="contributors"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ContributorsEmailsSubstitution"\n-        name="contributors_emails"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.SubjectSubstitution"\n-        name="subject"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.SubjectSubstitution"\n-        name="keywords"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.FormatSubstitution"\n-        name="format"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LanguageSubstitution"\n-        name="language"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.RightsSubstitution"\n-        name="rights"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.IdentifierSubstitution"\n-        name="identifier"\n-    />\n-\n-    <adapter\n-        for="AccessControl.interfaces.IRoleManager"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.OwnerEmailSubstitution"\n-        name="owner_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReviewerEmailSubstitution"\n-        name="reviewer_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReaderEmailSubstitution"\n-        name="reader_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.EditorEmailSubstitution"\n-        name="editor_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ContributorEmailSubstitution"\n-        name="contributor_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ManagerEmailSubstitution"\n-        name="manager_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.MemberEmailSubstitution"\n-        name="member_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.UserEmailSubstitution"\n-        name="user_email"\n-    />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.UserFullNameSubstitution"\n-        name="user_fullname"\n-    />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.UserIdSubstitution"\n-        name="user_id"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeCommentSubstitution"\n-        name="change_comment"\n-    />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeTitleSubstitution"\n-        name="change_title"\n-    />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeTypeSubstitution"\n-        name="change_type"\n-    />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeActorIdSubstitution"\n-        name="change_authorid"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.PortalTitleSubstitution"\n-        name="portal_title"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.PortalURLSubstitution"\n-        name="portal_url"\n-    />\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n+\n+  <browser:page\n+      name="stringinterp_info"\n+      for="*"\n+      class=".browser.SubstitutionInfo"\n+      allowed_interface=".interfaces.IStringSubstitutionInfo"\n+      permission="zope.Public"\n+      />\n+\n+\n+  <adapter\n+      factory=".dollarReplace.Interpolator"\n+      provides="plone.stringinterp.interfaces.IStringInterpolator"\n+      for="zope.interface.Interface"\n+      />\n+\n+\n+  <adapter\n+      factory=".adapters.ContextWrapper"\n+      provides="plone.stringinterp.interfaces.IContextWrapper"\n+      for="zope.interface.Interface"\n+      />\n+\n+  <adapter\n+      factory=".adapters.UrlSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="absolute_url"\n+      />\n+  <adapter\n+      factory=".adapters.UrlSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="url"\n+      />\n+  <adapter\n+      factory=".adapters.ParentUrlSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="parent_url"\n+      />\n+  <adapter\n+      factory=".adapters.ParentIdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="parent_id"\n+      />\n+  <adapter\n+      factory=".adapters.IdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="id"\n+      />\n+  <adapter\n+      factory=".adapters.TitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IMinimalDublinCore"\n+      name="title"\n+      />\n+  <adapter\n+      factory=".adapters.ParentTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="parent_title"\n+      />\n+  <adapter\n+      factory=".adapters.DescriptionSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IMinimalDublinCore"\n+      name="description"\n+      />\n+  <adapter\n+      factory=".adapters.TypeSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IMinimalDublinCore"\n+      name="type"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReviewStateSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IWorkflowAware"\n+      name="review_state"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReviewStateTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IWorkflowAware"\n+      name="review_state_title"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatedSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="created"\n+      />\n+\n+  <adapter\n+      factory=".adapters.EffectiveSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="effective"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ExpiresSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="expires"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ModifiedSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="modified"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creator"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorFullNameSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creator_fullname"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creator_email"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creators"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorsEmailsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creators_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ContributorsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="contributors"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ContributorsEmailsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="contributors_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.SubjectSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="subject"\n+      />\n+\n+  <adapter\n+      factory=".adapters.SubjectSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="keywords"\n+      />\n+\n+  <adapter\n+      factory=".adapters.FormatSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="format"\n+      />\n+\n+  <adapter\n+      factory=".adapters.LanguageSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="language"\n+      />\n+\n+  <adapter\n+      factory=".adapters.RightsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="rights"\n+      />\n+\n+  <adapter\n+      factory=".adapters.IdentifierSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="identifier"\n+      />\n+\n+  <adapter\n+      factory=".adapters.OwnerEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="AccessControl.interfaces.IRoleManager"\n+      name="owner_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReviewerEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="reviewer_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReaderEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="reader_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.EditorEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="editor_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ContributorEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="contributor_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ManagerEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="manager_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.MemberEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="member_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.UserEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="user_email"\n+      />\n+  <adapter\n+      factory=".adapters.UserFullNameSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="user_fullname"\n+      />\n+  <adapter\n+      factory=".adapters.UserIdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="user_id"\n+      />\n+\n+  <adapter\n+      factory=".adapters.LastChangeCommentSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_comment"\n+      />\n+  <adapter\n+      factory=".adapters.LastChangeTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_title"\n+      />\n+  <adapter\n+      factory=".adapters.LastChangeTypeSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_type"\n+      />\n+  <adapter\n+      factory=".adapters.LastChangeActorIdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_authorid"\n+      />\n+\n+  <adapter\n+      factory=".adapters.PortalTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="portal_title"\n+      />\n+\n+  <adapter\n+      factory=".adapters.PortalURLSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="portal_url"\n+      />\n \n </configure>\ndiff --git a/plone/stringinterp/dollarReplace.py b/plone/stringinterp/dollarReplace.py\nindex df97aed..3338698 100644\n--- a/plone/stringinterp/dollarReplace.py\n+++ b/plone/stringinterp/dollarReplace.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n dollarReplace.py\n \n@@ -7,29 +6,30 @@\n Copyright (c) 2009 Plone Foundation.\n """\n \n-import string\n-\n-from zope.interface import implementer\n-from zope.component import adapts, getAdapter, ComponentLookupError\n-\n from AccessControl import Unauthorized\n-\n+from plone.stringinterp.interfaces import IStringInterpolator\n+from plone.stringinterp.interfaces import IStringSubstitution\n from Products.CMFCore.interfaces import IContentish\n+from zope.component import adapter\n+from zope.component import ComponentLookupError\n+from zope.component import getAdapter\n+from zope.interface import implementer\n+\n+import string\n \n-from plone.stringinterp.interfaces import IStringSubstitution, IStringInterpolator\n \n+_marker = "_bad_"\n \n-_marker = u\'_bad_\'\n \n-class LazyDict(object):\n-    """ cached lookup via adapter """\n+class LazyDict:\n+    """cached lookup via adapter"""\n \n     def __init__(self, context):\n         self.context = context\n         self._cache = {}\n \n     def __getitem__(self, key):\n-        if key and key[0] not in [\'_\', \'.\']:\n+        if key and key[0] not in ["_", "."]:\n             res = self._cache.get(key)\n             if res is None:\n                 try:\n@@ -37,7 +37,7 @@ def __getitem__(self, key):\n                 except ComponentLookupError:\n                     res = _marker\n                 except Unauthorized:\n-                    res = u\'Unauthorized\'\n+                    res = "Unauthorized"\n \n                 self._cache[key] = res\n \n@@ -48,9 +48,8 @@ def __getitem__(self, key):\n \n \n @implementer(IStringInterpolator)\n-class Interpolator(object):\n-    adapts(IContentish)\n-\n+@adapter(IContentish)\n+class Interpolator:\n     def __init__(self, context):\n         self._ldict = LazyDict(context)\n \ndiff --git a/plone/stringinterp/interfaces.py b/plone/stringinterp/interfaces.py\nindex c6e8a1f..c9429ed 100644\n--- a/plone/stringinterp/interfaces.py\n+++ b/plone/stringinterp/interfaces.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n interfaces.py\n \n@@ -12,34 +11,34 @@\n \n class IStringSubstitution(Interface):\n     """\n-        provides callable returning the substitution\n+    provides callable returning the substitution\n \n-        if you would like your substitution listed\n-        in lists, provide name, description and category\n-        class attributes\n+    if you would like your substitution listed\n+    in lists, provide name, description and category\n+    class attributes\n     """\n \n     def __call__():\n         """\n-            return substitution\n+        return substitution\n         """\n \n \n class IStringInterpolator(Interface):\n     """\n-        provides callable returning\n-        interpolated string\n+    provides callable returning\n+    interpolated string\n     """\n \n     def __call__():\n         """\n-            return interpolated string\n+        return interpolated string\n         """\n \n \n class IStringSubstitutionInfo(Interface):\n     """\n-      provides information on available IStringSubstitution adapters\n+    provides information on available IStringSubstitution adapters\n     """\n \n     def substitutionList():\n@@ -49,18 +48,18 @@ def substitutionList():\n           [{\'id\':subId, \'description\':subDescription}, ...]), ...  ]\n         """\n \n+\n class IContextWrapper(Interface):\n     """\n-        Wrap context in order to be able to provide custom strings\n-        not stored on context\n+    Wrap context in order to be able to provide custom strings\n+    not stored on context\n \n-        Usage:\n+    Usage:\n \n-        >>> wrapper = IContextWrapper(obj)(m1=\'A message\', m2="Another one")\n-        >>> notify(CustomEvent(wrapper))\n+    &gt;&gt;&gt; wrapper = IContextWrapper(obj)(m1=\'A message\', m2="Another one")\n+    &gt;&gt;&gt; notify(CustomEvent(wrapper))\n     """\n \n     def __call__(kwargs):\n-        """"\n-           Return wrapped context\n-        """\n+        """ "\n+        Return wrapped context"""\ndiff --git a/plone/stringinterp/tests/__init__.py b/plone/stringinterp/tests/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/stringinterp/tests/__init__.py\n+++ b/plone/stringinterp/tests/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/stringinterp/tests/testDocTests.py b/plone/stringinterp/tests/testDocTests.py\nindex 98e185f..f05c94a 100644\n--- a/plone/stringinterp/tests/testDocTests.py\n+++ b/plone/stringinterp/tests/testDocTests.py\n@@ -1,38 +1,29 @@\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n from plone.testing import layered\n-# from plone.app.testing import PLONE_INTEGRATION_TESTING\n-from plone.app.contenttypes.testing import (\n-    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n-)\n+\n import doctest\n-import re\n-import six\n import unittest\n \n \n testfiles = (\n-    \'substitutionTests.txt\',\n-    \'moreSubstitutionTests.txt\',\'\'\n-    \'wrapperTests.txt\',\n-    \'interpolationTests.txt\',\n+    "substitutionTests.txt",\n+    "moreSubstitutionTests.txt",\n+    "" "wrapperTests.txt",\n+    "interpolationTests.txt",\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocFileSuite(\n-                f,\n-                package=\'plone.stringinterp.tests\',\n-                optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-            ) for f in testfiles\n-        ])\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    f,\n+                    package="plone.stringinterp.tests",\n+                    optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n+                ),\n+                layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+            )\n+            for f in testfiles\n+        ]\n+    )\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..3293a61 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,5 @@\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[isort]\n+profile = plone\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 9da3d1c..d2d9eda 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,51 +1,49 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'1.3.4.dev0\'\n+\n+version = "2.0.0.dev0"\n \n setup(\n-    name=\'plone.stringinterp\',\n+    name="plone.stringinterp",\n     version=version,\n     description="Adaptable string interpolation",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone Zope Interpolation\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.stringinterp\',\n-    license=\'GPL version 2\',\n+    keywords="Plone Zope Interpolation",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.stringinterp",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'Products.CMFCore\',\n-        \'zope.i18n\',\n-        \'plone.memoize\',\n+        "setuptools",\n+        "plone.base",\n+        "plone.memoize",\n+        "zope.i18n",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.testing\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.testing",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2023-03-15T07:59:19+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/5a746613ad801024c71b6c74dcd264f8ce3c7b1e

Update plone/stringinterp/tests/testDocTests.py

Co-authored-by: Gil Forcada Codinachs &lt;gil.gnome@gmail.com&gt;

Files changed:
M plone/stringinterp/tests/testDocTests.py

b'diff --git a/plone/stringinterp/tests/testDocTests.py b/plone/stringinterp/tests/testDocTests.py\nindex f05c94a..981bdba 100644\n--- a/plone/stringinterp/tests/testDocTests.py\n+++ b/plone/stringinterp/tests/testDocTests.py\n@@ -18,12 +18,12 @@ def test_suite():\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    f,\n+                    test_file,\n                     package="plone.stringinterp.tests",\n                     optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n                 ),\n                 layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n             )\n-            for f in testfiles\n+            for test_file in testfiles\n         ]\n     )\n'

Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2023-03-15T10:14:25+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/69bfd438fa3bb7a1f2d2c3fa9351ac34ab473a66

fix superfluous empty string

Files changed:
M plone/stringinterp/tests/testDocTests.py

b'diff --git a/plone/stringinterp/tests/testDocTests.py b/plone/stringinterp/tests/testDocTests.py\nindex 981bdba..79a2481 100644\n--- a/plone/stringinterp/tests/testDocTests.py\n+++ b/plone/stringinterp/tests/testDocTests.py\n@@ -8,7 +8,7 @@\n testfiles = (\n     "substitutionTests.txt",\n     "moreSubstitutionTests.txt",\n-    "" "wrapperTests.txt",\n+    "wrapperTests.txt",\n     "interpolationTests.txt",\n )\n \n'

Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2023-03-15T14:28:39+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/225a363c5d291044e879da5e7dbd16ef793b4b10

Update plone/stringinterp/adapters.py

Co-authored-by: Maurits van Rees &lt;maurits@vanrees.org&gt;

Files changed:
M plone/stringinterp/adapters.py

b'diff --git a/plone/stringinterp/adapters.py b/plone/stringinterp/adapters.py\nindex 74f900e..9209b72 100644\n--- a/plone/stringinterp/adapters.py\n+++ b/plone/stringinterp/adapters.py\n@@ -407,7 +407,7 @@ def getPropsForIds(self, ids, propname):\n         return self.getPropsForMembers(self.getMembersFromIds(ids), propname)\n \n \n-# A base class for all the role-&gt;email list adapters\n+# A base class for all the role to email list adapters\n @adapter(IContentish)\n class MailAddressSubstitution(MemberSubstitution):\n     def getEmailsForRole(self, role):\n'

Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2023-03-15T14:29:22+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/b15088833682d1587f77aff54b483525ddf26161

Update plone/stringinterp/interfaces.py

Co-authored-by: Maurits van Rees &lt;maurits@vanrees.org&gt;

Files changed:
M plone/stringinterp/interfaces.py

b'diff --git a/plone/stringinterp/interfaces.py b/plone/stringinterp/interfaces.py\nindex c9429ed..dfaad3e 100644\n--- a/plone/stringinterp/interfaces.py\n+++ b/plone/stringinterp/interfaces.py\n@@ -56,8 +56,8 @@ class IContextWrapper(Interface):\n \n     Usage:\n \n-    &gt;&gt;&gt; wrapper = IContextWrapper(obj)(m1=\'A message\', m2="Another one")\n-    &gt;&gt;&gt; notify(CustomEvent(wrapper))\n+    >>> wrapper = IContextWrapper(obj)(m1=\'A message\', m2="Another one")\n+    >>> notify(CustomEvent(wrapper))\n     """\n \n     def __call__(kwargs):\n'

Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2023-03-15T20:03:23+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/a6f984ec382832c98ec38db992496d9aa78d6bdb

Merge pull request #15 from plone/housecleaning

upgrade to py3 and plone codestyle

Files changed:
A news/15.breaking
M README.rst
M plone/__init__.py
M plone/stringinterp/__init__.py
M plone/stringinterp/adapters.py
M plone/stringinterp/browser.py
M plone/stringinterp/configure.zcml
M plone/stringinterp/dollarReplace.py
M plone/stringinterp/interfaces.py
M plone/stringinterp/tests/__init__.py
M plone/stringinterp/tests/testDocTests.py
M setup.cfg
M setup.py

b'diff --git a/README.rst b/README.rst\nindex 44f807c..b78fc0d 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,8 +1,5 @@\n-Introduction\n-============\n-Provides ${id} style string interpolation using named adapters to look up\n-variables. This is meant to provide a trivially simple template system\n-for clients like plone.app.contentrules.\n+Provides ``${id}`` style string interpolation using named adapters to look up variables.\n+This is meant to provide a trivially simple template system for clients like plone.app.contentrules.\n \n To interpolate a string in context, just follow the pattern::\n \n@@ -10,24 +7,19 @@ To interpolate a string in context, just follow the pattern::\n \n     IStringInterpolator(context)("Here is the title: ${title}")\n \n-Substitution of variables that are part of the Dublin Core are\n-provided with the package. To provide additional substitutions, just\n-provide a named adapter implementing interfaces.IStringSubstitution\n-for your context. The adapter name is used for the lookup.\n+Substitution of variables that are part of the Dublin Core are provided with the package.\n+To provide additional substitutions, provide a named adapter implementing ``interfaces.IStringSubstitution`` for your context.\n+The adapter name is used for the lookup.\n \n-You can also wrap your context with IContextWrapper adapter if you need to pass\n-custom messages within your substitutions.\n+You can also wrap your context with ``IContextWrapper`` adapter if you need to pass custom messages within your substitutions.\n \n-Dependencies\n-============\n-Dependencies are all in the CMF* namespace, so this is theoretically useful\n-outside Plone. It does use the \'plone\' identifier for the message factory.\n \n Implemented Substitutions\n =========================\n \n All Content\n -----------\n+\n - id\n - parent_id\n - url\n@@ -36,12 +28,14 @@ All Content\n \n Minimal Dublin Core\n -------------------\n+\n - title\n - description\n - type (content type)\n \n Workflow Aware\n --------------\n+\n - review_state\n - review_state_title\n \n@@ -62,6 +56,7 @@ Dublin Core\n \n Catalogable Dublin Core\n -----------------------\n+\n Everything should be in long local time format\n \n - created\n@@ -71,6 +66,7 @@ Everything should be in long local time format\n \n Member / Group Information for roles on content\n -----------------------------------------------\n+\n - owner_emails\n - reviewer_emails\n - manager_emails\n@@ -79,12 +75,22 @@ Member / Group Information for roles on content\n \n Current User Information\n ------------------------\n+\n - user_fullname\n - user_id\n \n Last Change (workflow or version) Information\n ---------------------------------------------\n+\n - change_comment\n - change_title\n - change_type\n - change_authorid\n+\n+\n+Source Code\n+===========\n+\n+Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n+\n+Sources and issue tracker are at the `Plone code repository hosted at Github <https://github.com/plone/plone.stringinterp>`_.\ndiff --git a/news/15.breaking b/news/15.breaking\nnew file mode 100644\nindex 0000000..dc1a8a1\n--- /dev/null\n+++ b/news/15.breaking\n@@ -0,0 +1,5 @@\n+pyupgrade, drop support for Python < 3.8.\n+isort, black, manual edits.\n+Fix deprecation warnings for imports from Products.CMFPlone.\n+Import and depend from plone.base.\n+\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/stringinterp/__init__.py b/plone/stringinterp/__init__.py\nindex eb6d7c9..32d03e1 100644\n--- a/plone/stringinterp/__init__.py\n+++ b/plone/stringinterp/__init__.py\n@@ -1,4 +1 @@\n from .dollarReplace import Interpolator\n-\n-from zope.i18nmessageid import MessageFactory\n-_ = MessageFactory(\'plone\')\ndiff --git a/plone/stringinterp/adapters.py b/plone/stringinterp/adapters.py\nindex db55e43..9209b72 100644\n--- a/plone/stringinterp/adapters.py\n+++ b/plone/stringinterp/adapters.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n adapters.py\n \n@@ -7,43 +6,38 @@\n Copyright (c) 2009 Plone Foundation.\n """\n \n-from zope.interface import implementer, Interface, alsoProvides\n-from zope.component import adapter\n-from zope.i18n import translate\n-\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner, aq_parent, aq_get, Implicit\n-\n from AccessControl.interfaces import IRoleManager\n-from Products.PlonePAS.interfaces.group import IGroupData\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFCore.interfaces import (\n-    IContentish, IMinimalDublinCore, IWorkflowAware, IDublinCore,\n-    ICatalogableDublinCore)\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.CMFPlone.i18nl10n import ulocalized_time\n-\n+from Acquisition import aq_get\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Acquisition import Implicit\n+from plone.base import PloneMessageFactory as _\n+from plone.base.i18nl10n import ulocalized_time\n+from plone.base.utils import safe_text\n from plone.memoize.request import memoize_diy_request\n-\n-from plone.stringinterp import _\n-from plone.stringinterp.interfaces import IStringSubstitution\n from plone.stringinterp.interfaces import IContextWrapper\n-\n-# BBB: on Zope 5 the fallback will not work anymore,\n-# as long as we want compatibility with Zope 4 and earlier\n-# we need to keep the fallback\n-try:\n-    from zope.component.hooks import getSite\n-except:\n-    from zope.site.hooks import getSite\n-\n+from plone.stringinterp.interfaces import IStringSubstitution\n+from Products.CMFCore.interfaces import ICatalogableDublinCore\n+from Products.CMFCore.interfaces import IContentish\n+from Products.CMFCore.interfaces import IDublinCore\n+from Products.CMFCore.interfaces import IMinimalDublinCore\n+from Products.CMFCore.interfaces import IWorkflowAware\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFCore.WorkflowCore import WorkflowException\n+from Products.PlonePAS.interfaces.group import IGroupData\n+from zope.component import adapter\n+from zope.component.hooks import getSite\n+from zope.i18n import translate\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @implementer(IContextWrapper)\n class ContextWrapper(Implicit):\n-    """ Wrapper for context\n-    """\n+    """Wrapper for context"""\n+\n     def __init__(self, context):\n         self.context = context\n \n@@ -66,9 +60,9 @@ def __call__(self, **kwargs):\n \n \n @implementer(IStringSubstitution)\n-class BaseSubstitution(object):\n-    """ Base substitution\n-    """\n+class BaseSubstitution:\n+    """Base substitution"""\n+\n     def __init__(self, context):\n         if IContextWrapper.providedBy(context):\n             self.wrapper = context\n@@ -82,16 +76,15 @@ def __init__(self, context):\n     # not generating unauth exceptions or returning non-unicode.\n     def __call__(self):\n         try:\n-            return safe_unicode(self.safe_call())\n+            return safe_text(self.safe_call())\n         except Unauthorized:\n-            return _(u\'Unauthorized\')\n+            return _("Unauthorized")\n \n \n @adapter(IContentish)\n class UrlSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u\'URL\')\n+    category = _("All Content")\n+    description = _("URL")\n \n     def safe_call(self):\n         return self.context.absolute_url()\n@@ -99,9 +92,8 @@ def safe_call(self):\n \n @adapter(Interface)\n class ParentIdSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u"Identifier of the parent content or login of managed user")\n+    category = _("All Content")\n+    description = _("Identifier of the parent content or login of managed user")\n \n     def safe_call(self):\n         return aq_parent(self.context).getId()\n@@ -109,9 +101,8 @@ def safe_call(self):\n \n @adapter(Interface)\n class IdSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u"Identifier of the content or login of managed user")\n+    category = _("All Content")\n+    description = _("Identifier of the content or login of managed user")\n \n     def safe_call(self):\n         return self.context.getId()\n@@ -119,19 +110,17 @@ def safe_call(self):\n \n @adapter(IContentish)\n class ParentUrlSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u"Folder URL")\n+    category = _("All Content")\n+    description = _("Folder URL")\n \n     def safe_call(self):\n-        return aq_get(aq_parent(self.context), \'absolute_url\')()\n+        return aq_get(aq_parent(self.context), "absolute_url")()\n \n \n @adapter(IMinimalDublinCore)\n class TitleSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Title\')\n+    category = _("Dublin Core")\n+    description = _("Title")\n \n     def safe_call(self):\n         return self.context.Title()\n@@ -139,19 +128,17 @@ def safe_call(self):\n \n @adapter(IContentish)\n class ParentTitleSubstitution(BaseSubstitution):\n-\n-    category = _(u\'All Content\')\n-    description = _(u\'Parent title\')\n+    category = _("All Content")\n+    description = _("Parent title")\n \n     def safe_call(self):\n-        return aq_get(aq_parent(self.context), \'Title\')()\n+        return aq_get(aq_parent(self.context), "Title")()\n \n \n @adapter(IMinimalDublinCore)\n class DescriptionSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Description\')\n+    category = _("Dublin Core")\n+    description = _("Description")\n \n     def safe_call(self):\n         return self.context.Description()\n@@ -159,9 +146,8 @@ def safe_call(self):\n \n @adapter(IMinimalDublinCore)\n class TypeSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Content Type\')\n+    category = _("Dublin Core")\n+    description = _("Content Type")\n \n     def safe_call(self):\n         return translate(self.context.Type(), context=self.context.REQUEST)\n@@ -169,33 +155,31 @@ def safe_call(self):\n \n @adapter(IDublinCore)\n class CreatorSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creator Id\')\n+    category = _("Dublin Core")\n+    description = _("Creator Id")\n \n     def safe_call(self):\n         for creator in self.context.listCreators():\n             return creator\n-        return \'\'\n+        return ""\n \n \n @adapter(IContentish)\n class CreatorFullNameSubstitution(CreatorSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creator Full Name\')\n+    category = _("Dublin Core")\n+    description = _("Creator Full Name")\n \n     def safe_call(self):\n-        creator = super(CreatorFullNameSubstitution, self).safe_call()\n+        creator = super().safe_call()\n         if not creator:\n-            return \'\'\n+            return ""\n \n         pm = getToolByName(self.context, "portal_membership")\n         member = pm.getMemberById(creator)\n         if not member:\n             return creator\n \n-        fname = member.getProperty(\'fullname\', None)\n+        fname = member.getProperty("fullname", None)\n         if not fname:\n             return creator\n         return fname\n@@ -203,39 +187,36 @@ def safe_call(self):\n \n @adapter(IDublinCore)\n class CreatorEmailSubstitution(CreatorSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creator E-Mail\')\n+    category = _("Dublin Core")\n+    description = _("Creator E-Mail")\n \n     def safe_call(self):\n-        creator = super(CreatorEmailSubstitution, self).safe_call()\n+        creator = super().safe_call()\n         if not creator:\n-            return \'\'\n+            return ""\n         pm = getToolByName(self.context, "portal_membership")\n         member = pm.getMemberById(creator)\n         if not member:\n-            return \'\'\n-        email = member.getProperty(\'email\', \'\')\n+            return ""\n+        email = member.getProperty("email", "")\n         if not email:\n-            return \'\'\n+            return ""\n         return email\n \n \n @adapter(IDublinCore)\n class CreatorsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creators Ids\')\n+    category = _("Dublin Core")\n+    description = _("Creators Ids")\n \n     def safe_call(self):\n-        return  \', \'.join(self.context.listCreators())\n+        return ", ".join(self.context.listCreators())\n \n \n @adapter(IDublinCore)\n class CreatorsEmailsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Creators E-Mails\')\n+    category = _("Dublin Core")\n+    description = _("Creators E-Mails")\n \n     def safe_call(self):\n         creators = self.context.listCreators()\n@@ -245,28 +226,26 @@ def safe_call(self):\n             member = pm.getMemberById(creator)\n             if not member:\n                 continue\n-            email = member.getProperty(\'email\', None)\n+            email = member.getProperty("email", None)\n             if not email:\n                 continue\n             emails.append(email)\n-        return \', \'.join(emails)\n+        return ", ".join(emails)\n \n \n @adapter(IDublinCore)\n class ContributorsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Contributors Ids\')\n+    category = _("Dublin Core")\n+    description = _("Contributors Ids")\n \n     def safe_call(self):\n-        return  \', \'.join(self.context.listContributors())\n+        return ", ".join(self.context.listContributors())\n \n \n @adapter(IDublinCore)\n class ContributorsEmailsSubstitution(BaseSubstitution):\n-\n-    category = (u\'Dublin Core\')\n-    description = _(u\'Contributors E-Mails\')\n+    category = "Dublin Core"\n+    description = _("Contributors E-Mails")\n \n     def safe_call(self):\n         contributors = self.context.listContributors()\n@@ -276,102 +255,93 @@ def safe_call(self):\n             member = pm.getMemberById(contributor)\n             if not member:\n                 continue\n-            email = member.getProperty(\'email\', None)\n+            email = member.getProperty("email", None)\n             if not email:\n                 continue\n             emails.append(email)\n-        return \', \'.join(emails)\n+        return ", ".join(emails)\n \n \n @adapter(IDublinCore)\n class SubjectSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Subject\')\n+    category = _("Dublin Core")\n+    description = _("Subject")\n \n     def safe_call(self):\n-        return  \', \'.join(self.context.Subject())\n+        return ", ".join(self.context.Subject())\n \n \n @adapter(IDublinCore)\n class FormatSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Format\')\n+    category = _("Dublin Core")\n+    description = _("Format")\n \n     def safe_call(self):\n-        return  self.context.Format()\n+        return self.context.Format()\n \n \n @adapter(IDublinCore)\n class LanguageSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Language\')\n+    category = _("Dublin Core")\n+    description = _("Language")\n \n     def safe_call(self):\n-        return  self.context.Language()\n+        return self.context.Language()\n \n \n @adapter(IDublinCore)\n class IdentifierSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Identifier, actually URL of the content\')\n+    category = _("Dublin Core")\n+    description = _("Identifier, actually URL of the content")\n \n     def safe_call(self):\n-        return  self.context.Identifier()\n+        return self.context.Identifier()\n \n \n @adapter(IDublinCore)\n class RightsSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Rights\')\n+    category = _("Dublin Core")\n+    description = _("Rights")\n \n     def safe_call(self):\n-        return  self.context.Rights()\n+        return self.context.Rights()\n \n \n @adapter(IWorkflowAware)\n class ReviewStateSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Workflow\')\n-    description = _(u\'Review State\')\n+    category = _("Workflow")\n+    description = _("Review State")\n \n     def safe_call(self):\n-        wft = getToolByName(self.context, \'portal_workflow\')\n-        return wft.getInfoFor(self.context, \'review_state\')\n+        wft = getToolByName(self.context, "portal_workflow")\n+        return wft.getInfoFor(self.context, "review_state")\n \n \n @adapter(IWorkflowAware)\n class ReviewStateTitleSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Workflow\')\n-    description = _(u\'Review State Title\')\n+    category = _("Workflow")\n+    description = _("Review State Title")\n \n     def safe_call(self):\n-        wft = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wft.getInfoFor(self.context, \'review_state\')\n-        return _(wft.getTitleForStateOnType(review_state,\n-                                            self.context.portal_type))\n+        wft = getToolByName(self.context, "portal_workflow")\n+        review_state = wft.getInfoFor(self.context, "review_state")\n+        return _(wft.getTitleForStateOnType(review_state, self.context.portal_type))\n \n \n class DateSubstitution(BaseSubstitution):\n-\n     def formatDate(self, adate):\n         try:\n-            return safe_unicode(\n-               ulocalized_time(adate, long_format=True, context=self.context))\n+            return safe_text(\n+                ulocalized_time(adate, long_format=True, context=self.context)\n+            )\n         except ValueError:\n-            return u\'???\'\n+            return "???"\n \n \n @adapter(ICatalogableDublinCore)\n class CreatedSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Created\')\n+    category = _("Dublin Core")\n+    description = _("Date Created")\n \n     def safe_call(self):\n         return self.formatDate(self.context.created())\n@@ -379,9 +349,8 @@ def safe_call(self):\n \n @adapter(ICatalogableDublinCore)\n class EffectiveSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Effective\')\n+    category = _("Dublin Core")\n+    description = _("Date Effective")\n \n     def safe_call(self):\n         return self.formatDate(self.context.effective())\n@@ -389,9 +358,8 @@ def safe_call(self):\n \n @adapter(ICatalogableDublinCore)\n class ExpiresSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Expires\')\n+    category = _("Dublin Core")\n+    description = _("Date Expires")\n \n     def safe_call(self):\n         return self.formatDate(self.context.expires())\n@@ -399,9 +367,8 @@ def safe_call(self):\n \n @adapter(ICatalogableDublinCore)\n class ModifiedSubstitution(DateSubstitution):\n-\n-    category = _(u\'Dublin Core\')\n-    description = _(u\'Date Modified\')\n+    category = _("Dublin Core")\n+    description = _("Date Modified")\n \n     def safe_call(self):\n         return self.formatDate(self.context.modified())\n@@ -410,9 +377,8 @@ def safe_call(self):\n # A base class for adapters that need member information\n @adapter(IContentish)\n class MemberSubstitution(BaseSubstitution):\n-\n     def __init__(self, context):\n-        super(MemberSubstitution, self).__init__(context)\n+        super().__init__(context)\n         self.mtool = getToolByName(self.context, "portal_membership")\n         self.gtool = getToolByName(self.context, "portal_groups")\n \n@@ -441,35 +407,35 @@ def getPropsForIds(self, ids, propname):\n         return self.getPropsForMembers(self.getMembersFromIds(ids), propname)\n \n \n-# A base class for all the role->email list adapters\n+# A base class for all the role to email list adapters\n @adapter(IContentish)\n class MailAddressSubstitution(MemberSubstitution):\n-\n     def getEmailsForRole(self, role):\n-\n         portal = getSite()\n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n \n         # get a set of ids of members with the global role\n-        ids = set([p[0] for p in acl_users.portal_role_manager.listAssignedPrincipals(role)])\n+        ids = {p[0] for p in acl_users.portal_role_manager.listAssignedPrincipals(role)}\n \n         # union with set of ids of members with the local role\n-        ids |= set([id for id, irole\n-                       in acl_users._getAllLocalRoles(self.context).items()\n-                       if role in irole])\n+        ids |= {\n+            id\n+            for id, irole in acl_users._getAllLocalRoles(self.context).items()\n+            if role in irole\n+        }\n \n         # get members from group or member ids\n         members = _recursiveGetMembersFromIds(portal, ids)\n \n         # get emails\n-        return u\', \'.join(self.getPropsForMembers(members, \'email\'))\n+        return ", ".join(self.getPropsForMembers(members, "email"))\n \n \n def _recursiveGetMembersFromIds(portal, group_and_user_ids):\n-    """ get members from a list of group and member ids """\n+    """get members from a list of group and member ids"""\n \n-    gtool = getToolByName(portal, \'portal_groups\')\n-    mtool = getToolByName(portal, \'portal_membership\')\n+    gtool = getToolByName(portal, "portal_groups")\n+    mtool = getToolByName(portal, "portal_membership")\n     members = set()\n     seen = set()\n \n@@ -488,7 +454,8 @@ def recursiveGetGroupUsers(mtool, gtool, seen, group):\n \n                 seen.add(group_or_user_id)\n                 users = users.union(\n-                            recursiveGetGroupUsers(mtool, gtool, seen, group_or_user))\n+                    recursiveGetGroupUsers(mtool, gtool, seen, group_or_user)\n+                )\n             elif group_or_user is not None:\n                 # Other group data PAS plugins might not filter no\n                 # longer existing group members.\n@@ -510,110 +477,100 @@ def recursiveGetGroupUsers(mtool, gtool, seen, group):\n \n \n class OwnerEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Owners E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Owners E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Owner\')\n+        return self.getEmailsForRole("Owner")\n \n \n class ReviewerEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Reviewers E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Reviewers E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Reviewer\')\n+        return self.getEmailsForRole("Reviewer")\n \n \n class ReaderEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Readers E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Readers E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Reader\')\n+        return self.getEmailsForRole("Reader")\n \n \n class ContributorEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Contributors E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Contributors E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Contributor\')\n+        return self.getEmailsForRole("Contributor")\n \n \n class EditorEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Editors E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Editors E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Editor\')\n+        return self.getEmailsForRole("Editor")\n \n \n class ManagerEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Managers E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Managers E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Manager\')\n+        return self.getEmailsForRole("Manager")\n \n \n class MemberEmailSubstitution(MailAddressSubstitution):\n-\n-    category = _(u\'Local Roles\')\n-    description = _(u\'Members E-Mails\')\n+    category = _("Local Roles")\n+    description = _("Members E-Mails")\n \n     def safe_call(self):\n-        return self.getEmailsForRole(\'Member\')\n+        return self.getEmailsForRole("Member")\n \n \n @adapter(IContentish)\n class UserEmailSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Current User\')\n-    description = _(u\'E-Mail Address\')\n+    category = _("Current User")\n+    description = _("E-Mail Address")\n \n     def safe_call(self):\n         pm = getToolByName(self.context, "portal_membership")\n         if not pm.isAnonymousUser():\n             user = pm.getAuthenticatedMember()\n             if user is not None:\n-                email = user.getProperty(\'email\', None)\n+                email = user.getProperty("email", None)\n                 if email:\n                     return email\n-        return u\'\'\n+        return ""\n \n \n @adapter(IContentish)\n class UserFullNameSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Current User\')\n-    description = _(u\'Full Name\')\n+    category = _("Current User")\n+    description = _("Full Name")\n \n     def safe_call(self):\n         pm = getToolByName(self.context, "portal_membership")\n         if not pm.isAnonymousUser():\n             user = pm.getAuthenticatedMember()\n             if user is not None:\n-                fname = user.getProperty(\'fullname\', None)\n+                fname = user.getProperty("fullname", None)\n                 if fname:\n                     return fname\n                 else:\n                     return user.getId()\n \n-        return u\'\'\n+        return ""\n \n \n @adapter(IContentish)\n class UserIdSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Current User\')\n-    description = _(u\'Id\')\n+    category = _("Current User")\n+    description = _("Id")\n \n     def safe_call(self):\n         pm = getToolByName(self.context, "portal_membership")\n@@ -621,7 +578,7 @@ def safe_call(self):\n             user = pm.getAuthenticatedMember()\n             if user is not None:\n                 return user.getId()\n-        return u\'\'\n+        return ""\n \n \n # memoize on the request an expensive function called by the\n@@ -635,31 +592,33 @@ def _lastChange(request, context):\n     elif not last_revision:\n         return workflow_change\n \n-    if workflow_change and last_revision and \\\n-       workflow_change.get(\'time\') > last_revision.get(\'time\'):\n+    if (\n+        workflow_change\n+        and last_revision\n+        and workflow_change.get("time") > last_revision.get("time")\n+    ):\n         return workflow_change\n \n     return last_revision\n \n \n def _lastWorkflowChange(context):\n-    workflow = getToolByName(context, \'portal_workflow\')\n+    workflow = getToolByName(context, "portal_workflow")\n     try:\n-        review_history = workflow.getInfoFor(context, \'review_history\')\n+        review_history = workflow.getInfoFor(context, "review_history")\n     except WorkflowException:\n         return {}\n \n     # filter out automatic transitions.\n-    review_history = [r for r in review_history if r[\'action\']]\n+    review_history = [r for r in review_history if r["action"]]\n \n     if review_history:\n         r = review_history[-1]\n-        r[\'type\'] = \'workflow\'\n-        r[\'transition_title\'] = \\\n-            workflow.getTitleForTransitionOnType(\n-             r[\'action\'],\n-             context.portal_type)\n-        r[\'actorid\'] = r[\'actor\']\n+        r["type"] = "workflow"\n+        r["transition_title"] = workflow.getTitleForTransitionOnType(\n+            r["action"], context.portal_type\n+        )\n+        r["actorid"] = r["actor"]\n     else:\n         r = {}\n \n@@ -674,17 +633,18 @@ def _lastRevision(context):\n         if history:\n             # history = ImplicitAcquisitionWrapper(history, pa)\n             meta = history.retrieve(\n-               history.getLength(countPurged=False)-1,\n-               countPurged=False,\n-              )[\'metadata\'][\'sys_metadata\']\n-            return dict(type=\'versioning\',\n-                    action=_(u"edit"),\n-                    transition_title=_(u"Edit"),\n-                    actorid=meta["principal"],\n-                    time=meta["timestamp"],\n-                    comments=meta[\'comment\'],\n-                    review_state=meta["review_state"],\n-                    )\n+                history.getLength(countPurged=False) - 1,\n+                countPurged=False,\n+            )["metadata"]["sys_metadata"]\n+            return dict(\n+                type="versioning",\n+                action=_("edit"),\n+                transition_title=_("Edit"),\n+                actorid=meta["principal"],\n+                time=meta["timestamp"],\n+                comments=meta["comment"],\n+                review_state=meta["review_state"],\n+            )\n \n     return {}\n \n@@ -692,70 +652,63 @@ def _lastRevision(context):\n # a base class for substitutions that use\n # last revision or workflow information\n class ChangeSubstitution(BaseSubstitution):\n-\n     def lastChangeMetadata(self, id):\n-        return  _lastChange(self.context.REQUEST, self.context).get(id, \'\')\n+        return _lastChange(self.context.REQUEST, self.context).get(id, "")\n \n \n @adapter(IContentish)\n class LastChangeCommentSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Comment\')\n+    category = _("History")\n+    description = _("Comment")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'comments\')\n+        return self.lastChangeMetadata("comments")\n \n \n @adapter(IContentish)\n class LastChangeTitleSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Transition title\')\n+    category = _("History")\n+    description = _("Transition title")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'transition_title\')\n+        return self.lastChangeMetadata("transition_title")\n \n \n @adapter(IContentish)\n class LastChangeTypeSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Change type\')\n+    category = _("History")\n+    description = _("Change type")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'type\')\n+        return self.lastChangeMetadata("type")\n \n \n @adapter(IContentish)\n class LastChangeActorIdSubstitution(ChangeSubstitution):\n-\n-    category = _(u\'History\')\n-    description = _(u\'Change author\')\n+    category = _("History")\n+    description = _("Change author")\n \n     def safe_call(self):\n-        return self.lastChangeMetadata(\'actorid\')\n+        return self.lastChangeMetadata("actorid")\n \n \n class PortalSubstitution(BaseSubstitution):\n-\n-    category = _(u\'Portal\')\n+    category = _("Portal")\n \n     def __init__(self, context):\n         BaseSubstitution.__init__(self, context)\n-        self.portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n+        self.portal = getToolByName(self.context, "portal_url").getPortalObject()\n \n-class PortalURLSubstitution(PortalSubstitution):\n \n-    description = _(u\'Portal URL\')\n+class PortalURLSubstitution(PortalSubstitution):\n+    description = _("Portal URL")\n \n     def safe_call(self):\n         return self.portal.absolute_url()\n \n \n class PortalTitleSubstitution(PortalSubstitution):\n-\n-    description = _(u\'Portal title\')\n+    description = _("Portal title")\n \n     def safe_call(self):\n         return self.portal.Title()\ndiff --git a/plone/stringinterp/browser.py b/plone/stringinterp/browser.py\nindex b98801f..d1fcd87 100644\n--- a/plone/stringinterp/browser.py\n+++ b/plone/stringinterp/browser.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n interfaces.py\n \n@@ -7,12 +6,10 @@\n Copyright (c) 2009 Plone Foundation.\n """\n \n-from zope.component import getSiteManager\n-\n-from Products.Five import BrowserView\n-\n+from plone.base import PloneMessageFactory as _\n from plone.stringinterp.interfaces import IStringSubstitution\n-from plone.stringinterp import _\n+from Products.Five import BrowserView\n+from zope.component import getSiteManager\n \n \n def find_adapters(reg):\n@@ -45,10 +42,9 @@ def substitutionList(self):\n         categories = {}\n         for a in find_adapters(getSiteManager()):\n             id = a.name\n-            cat = getattr(a.factory, \'category\', _(u\'Miscellaneous\'))\n-            desc = getattr(a.factory, \'description\', u\'\')\n-            categories.setdefault(cat, []).append(\n-              {\'id\': id, \'description\': desc})\n+            cat = getattr(a.factory, "category", _("Miscellaneous"))\n+            desc = getattr(a.factory, "description", "")\n+            categories.setdefault(cat, []).append({"id": id, "description": desc})\n \n         # rearrange again into a sorted list\n         res = []\n@@ -57,7 +53,7 @@ def substitutionList(self):\n         for key in sorted(keys, key=lambda s: s.lower()):\n             acat = categories[key]\n             # sort by id, ignoring case\n-            acat = sorted(acat, key=lambda i: i[\'id\'].lower())\n-            res.append({\'category\': key, \'items\': acat})\n+            acat = sorted(acat, key=lambda i: i["id"].lower())\n+            res.append({"category": key, "items": acat})\n \n         return res\ndiff --git a/plone/stringinterp/configure.zcml b/plone/stringinterp/configure.zcml\nindex 3736b7a..4a259ab 100644\n--- a/plone/stringinterp/configure.zcml\n+++ b/plone/stringinterp/configure.zcml\n@@ -1,322 +1,323 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n-\n-    <browser:page\n-        for="*"\n-        name="stringinterp_info"\n-        class=".browser.SubstitutionInfo"\n-        allowed_interface=".interfaces.IStringSubstitutionInfo"\n-        permission="zope.Public"\n-    />\n-\n-\n-    <adapter\n-        for="zope.interface.Interface"\n-        provides="plone.stringinterp.interfaces.IStringInterpolator"\n-        factory=".dollarReplace.Interpolator"\n-    />\n-\n-\n-    <adapter\n-        for="zope.interface.Interface"\n-        provides="plone.stringinterp.interfaces.IContextWrapper"\n-        factory=".adapters.ContextWrapper"\n-    />\n-\n-   <adapter\n-       for="*"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.UrlSubstitution"\n-       name="absolute_url"\n-       />\n-   <adapter\n-       for="*"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.UrlSubstitution"\n-       name="url"\n-       />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ParentUrlSubstitution"\n-        name="parent_url"\n-       />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ParentIdSubstitution"\n-        name="parent_id"\n-    />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.IdSubstitution"\n-        name="id"\n-    />\n-   <adapter\n-       for="Products.CMFCore.interfaces.IMinimalDublinCore"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.TitleSubstitution"\n-       name="title"\n-       />\n-   <adapter\n-       for="*"\n-       provides="plone.stringinterp.interfaces.IStringSubstitution"\n-       factory=".adapters.ParentTitleSubstitution"\n-       name="parent_title"\n-       />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IMinimalDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.DescriptionSubstitution"\n-        name="description"\n-        />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IMinimalDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.TypeSubstitution"\n-        name="type"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IWorkflowAware"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReviewStateSubstitution"\n-        name="review_state"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IWorkflowAware"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReviewStateTitleSubstitution"\n-        name="review_state_title"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatedSubstitution"\n-        name="created"\n-        />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.EffectiveSubstitution"\n-        name="effective"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ExpiresSubstitution"\n-        name="expires"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ModifiedSubstitution"\n-        name="modified"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorSubstitution"\n-        name="creator"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorFullNameSubstitution"\n-        name="creator_fullname"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorEmailSubstitution"\n-        name="creator_email"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorsSubstitution"\n-        name="creators"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.CreatorsEmailsSubstitution"\n-        name="creators_emails"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ContributorsSubstitution"\n-        name="contributors"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ContributorsEmailsSubstitution"\n-        name="contributors_emails"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.SubjectSubstitution"\n-        name="subject"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.SubjectSubstitution"\n-        name="keywords"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.FormatSubstitution"\n-        name="format"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LanguageSubstitution"\n-        name="language"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.RightsSubstitution"\n-        name="rights"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IDublinCore"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.IdentifierSubstitution"\n-        name="identifier"\n-    />\n-\n-    <adapter\n-        for="AccessControl.interfaces.IRoleManager"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.OwnerEmailSubstitution"\n-        name="owner_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReviewerEmailSubstitution"\n-        name="reviewer_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ReaderEmailSubstitution"\n-        name="reader_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.EditorEmailSubstitution"\n-        name="editor_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ContributorEmailSubstitution"\n-        name="contributor_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.ManagerEmailSubstitution"\n-        name="manager_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.MemberEmailSubstitution"\n-        name="member_emails"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.UserEmailSubstitution"\n-        name="user_email"\n-    />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.UserFullNameSubstitution"\n-        name="user_fullname"\n-    />\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.UserIdSubstitution"\n-        name="user_id"\n-    />\n-\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeCommentSubstitution"\n-        name="change_comment"\n-    />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeTitleSubstitution"\n-        name="change_title"\n-    />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeTypeSubstitution"\n-        name="change_type"\n-    />\n-    <adapter\n-        for="Products.CMFCore.interfaces.IContentish"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.LastChangeActorIdSubstitution"\n-        name="change_authorid"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.PortalTitleSubstitution"\n-        name="portal_title"\n-    />\n-\n-    <adapter\n-        for="*"\n-        provides="plone.stringinterp.interfaces.IStringSubstitution"\n-        factory=".adapters.PortalURLSubstitution"\n-        name="portal_url"\n-    />\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n+\n+  <browser:page\n+      name="stringinterp_info"\n+      for="*"\n+      class=".browser.SubstitutionInfo"\n+      allowed_interface=".interfaces.IStringSubstitutionInfo"\n+      permission="zope.Public"\n+      />\n+\n+\n+  <adapter\n+      factory=".dollarReplace.Interpolator"\n+      provides="plone.stringinterp.interfaces.IStringInterpolator"\n+      for="zope.interface.Interface"\n+      />\n+\n+\n+  <adapter\n+      factory=".adapters.ContextWrapper"\n+      provides="plone.stringinterp.interfaces.IContextWrapper"\n+      for="zope.interface.Interface"\n+      />\n+\n+  <adapter\n+      factory=".adapters.UrlSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="absolute_url"\n+      />\n+  <adapter\n+      factory=".adapters.UrlSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="url"\n+      />\n+  <adapter\n+      factory=".adapters.ParentUrlSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="parent_url"\n+      />\n+  <adapter\n+      factory=".adapters.ParentIdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="parent_id"\n+      />\n+  <adapter\n+      factory=".adapters.IdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="id"\n+      />\n+  <adapter\n+      factory=".adapters.TitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IMinimalDublinCore"\n+      name="title"\n+      />\n+  <adapter\n+      factory=".adapters.ParentTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="parent_title"\n+      />\n+  <adapter\n+      factory=".adapters.DescriptionSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IMinimalDublinCore"\n+      name="description"\n+      />\n+  <adapter\n+      factory=".adapters.TypeSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IMinimalDublinCore"\n+      name="type"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReviewStateSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IWorkflowAware"\n+      name="review_state"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReviewStateTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IWorkflowAware"\n+      name="review_state_title"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatedSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="created"\n+      />\n+\n+  <adapter\n+      factory=".adapters.EffectiveSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="effective"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ExpiresSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="expires"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ModifiedSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.ICatalogableDublinCore"\n+      name="modified"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creator"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorFullNameSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creator_fullname"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creator_email"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creators"\n+      />\n+\n+  <adapter\n+      factory=".adapters.CreatorsEmailsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="creators_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ContributorsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="contributors"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ContributorsEmailsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="contributors_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.SubjectSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="subject"\n+      />\n+\n+  <adapter\n+      factory=".adapters.SubjectSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="keywords"\n+      />\n+\n+  <adapter\n+      factory=".adapters.FormatSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="format"\n+      />\n+\n+  <adapter\n+      factory=".adapters.LanguageSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="language"\n+      />\n+\n+  <adapter\n+      factory=".adapters.RightsSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="rights"\n+      />\n+\n+  <adapter\n+      factory=".adapters.IdentifierSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IDublinCore"\n+      name="identifier"\n+      />\n+\n+  <adapter\n+      factory=".adapters.OwnerEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="AccessControl.interfaces.IRoleManager"\n+      name="owner_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReviewerEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="reviewer_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ReaderEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="reader_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.EditorEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="editor_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ContributorEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="contributor_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.ManagerEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="manager_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.MemberEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="member_emails"\n+      />\n+\n+  <adapter\n+      factory=".adapters.UserEmailSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="user_email"\n+      />\n+  <adapter\n+      factory=".adapters.UserFullNameSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="user_fullname"\n+      />\n+  <adapter\n+      factory=".adapters.UserIdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="user_id"\n+      />\n+\n+  <adapter\n+      factory=".adapters.LastChangeCommentSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_comment"\n+      />\n+  <adapter\n+      factory=".adapters.LastChangeTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_title"\n+      />\n+  <adapter\n+      factory=".adapters.LastChangeTypeSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_type"\n+      />\n+  <adapter\n+      factory=".adapters.LastChangeActorIdSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      name="change_authorid"\n+      />\n+\n+  <adapter\n+      factory=".adapters.PortalTitleSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="portal_title"\n+      />\n+\n+  <adapter\n+      factory=".adapters.PortalURLSubstitution"\n+      provides="plone.stringinterp.interfaces.IStringSubstitution"\n+      for="*"\n+      name="portal_url"\n+      />\n \n </configure>\ndiff --git a/plone/stringinterp/dollarReplace.py b/plone/stringinterp/dollarReplace.py\nindex df97aed..3338698 100644\n--- a/plone/stringinterp/dollarReplace.py\n+++ b/plone/stringinterp/dollarReplace.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n dollarReplace.py\n \n@@ -7,29 +6,30 @@\n Copyright (c) 2009 Plone Foundation.\n """\n \n-import string\n-\n-from zope.interface import implementer\n-from zope.component import adapts, getAdapter, ComponentLookupError\n-\n from AccessControl import Unauthorized\n-\n+from plone.stringinterp.interfaces import IStringInterpolator\n+from plone.stringinterp.interfaces import IStringSubstitution\n from Products.CMFCore.interfaces import IContentish\n+from zope.component import adapter\n+from zope.component import ComponentLookupError\n+from zope.component import getAdapter\n+from zope.interface import implementer\n+\n+import string\n \n-from plone.stringinterp.interfaces import IStringSubstitution, IStringInterpolator\n \n+_marker = "_bad_"\n \n-_marker = u\'_bad_\'\n \n-class LazyDict(object):\n-    """ cached lookup via adapter """\n+class LazyDict:\n+    """cached lookup via adapter"""\n \n     def __init__(self, context):\n         self.context = context\n         self._cache = {}\n \n     def __getitem__(self, key):\n-        if key and key[0] not in [\'_\', \'.\']:\n+        if key and key[0] not in ["_", "."]:\n             res = self._cache.get(key)\n             if res is None:\n                 try:\n@@ -37,7 +37,7 @@ def __getitem__(self, key):\n                 except ComponentLookupError:\n                     res = _marker\n                 except Unauthorized:\n-                    res = u\'Unauthorized\'\n+                    res = "Unauthorized"\n \n                 self._cache[key] = res\n \n@@ -48,9 +48,8 @@ def __getitem__(self, key):\n \n \n @implementer(IStringInterpolator)\n-class Interpolator(object):\n-    adapts(IContentish)\n-\n+@adapter(IContentish)\n+class Interpolator:\n     def __init__(self, context):\n         self._ldict = LazyDict(context)\n \ndiff --git a/plone/stringinterp/interfaces.py b/plone/stringinterp/interfaces.py\nindex c6e8a1f..dfaad3e 100644\n--- a/plone/stringinterp/interfaces.py\n+++ b/plone/stringinterp/interfaces.py\n@@ -1,5 +1,4 @@\n #!/usr/bin/env python\n-# encoding: utf-8\n """\n interfaces.py\n \n@@ -12,34 +11,34 @@\n \n class IStringSubstitution(Interface):\n     """\n-        provides callable returning the substitution\n+    provides callable returning the substitution\n \n-        if you would like your substitution listed\n-        in lists, provide name, description and category\n-        class attributes\n+    if you would like your substitution listed\n+    in lists, provide name, description and category\n+    class attributes\n     """\n \n     def __call__():\n         """\n-            return substitution\n+        return substitution\n         """\n \n \n class IStringInterpolator(Interface):\n     """\n-        provides callable returning\n-        interpolated string\n+    provides callable returning\n+    interpolated string\n     """\n \n     def __call__():\n         """\n-            return interpolated string\n+        return interpolated string\n         """\n \n \n class IStringSubstitutionInfo(Interface):\n     """\n-      provides information on available IStringSubstitution adapters\n+    provides information on available IStringSubstitution adapters\n     """\n \n     def substitutionList():\n@@ -49,18 +48,18 @@ def substitutionList():\n           [{\'id\':subId, \'description\':subDescription}, ...]), ...  ]\n         """\n \n+\n class IContextWrapper(Interface):\n     """\n-        Wrap context in order to be able to provide custom strings\n-        not stored on context\n+    Wrap context in order to be able to provide custom strings\n+    not stored on context\n \n-        Usage:\n+    Usage:\n \n-        >>> wrapper = IContextWrapper(obj)(m1=\'A message\', m2="Another one")\n-        >>> notify(CustomEvent(wrapper))\n+    >>> wrapper = IContextWrapper(obj)(m1=\'A message\', m2="Another one")\n+    >>> notify(CustomEvent(wrapper))\n     """\n \n     def __call__(kwargs):\n-        """"\n-           Return wrapped context\n-        """\n+        """ "\n+        Return wrapped context"""\ndiff --git a/plone/stringinterp/tests/__init__.py b/plone/stringinterp/tests/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/stringinterp/tests/__init__.py\n+++ b/plone/stringinterp/tests/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/stringinterp/tests/testDocTests.py b/plone/stringinterp/tests/testDocTests.py\nindex 98e185f..79a2481 100644\n--- a/plone/stringinterp/tests/testDocTests.py\n+++ b/plone/stringinterp/tests/testDocTests.py\n@@ -1,38 +1,29 @@\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n from plone.testing import layered\n-# from plone.app.testing import PLONE_INTEGRATION_TESTING\n-from plone.app.contenttypes.testing import (\n-    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n-)\n+\n import doctest\n-import re\n-import six\n import unittest\n \n \n testfiles = (\n-    \'substitutionTests.txt\',\n-    \'moreSubstitutionTests.txt\',\'\'\n-    \'wrapperTests.txt\',\n-    \'interpolationTests.txt\',\n+    "substitutionTests.txt",\n+    "moreSubstitutionTests.txt",\n+    "wrapperTests.txt",\n+    "interpolationTests.txt",\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocFileSuite(\n-                f,\n-                package=\'plone.stringinterp.tests\',\n-                optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n-            ) for f in testfiles\n-        ])\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test_file,\n+                    package="plone.stringinterp.tests",\n+                    optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n+                ),\n+                layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+            )\n+            for test_file in testfiles\n+        ]\n+    )\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..3293a61 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,5 @@\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[isort]\n+profile = plone\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 9da3d1c..d2d9eda 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,51 +1,49 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'1.3.4.dev0\'\n+\n+version = "2.0.0.dev0"\n \n setup(\n-    name=\'plone.stringinterp\',\n+    name="plone.stringinterp",\n     version=version,\n     description="Adaptable string interpolation",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone Zope Interpolation\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.stringinterp\',\n-    license=\'GPL version 2\',\n+    keywords="Plone Zope Interpolation",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.stringinterp",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'Products.CMFCore\',\n-        \'zope.i18n\',\n-        \'plone.memoize\',\n+        "setuptools",\n+        "plone.base",\n+        "plone.memoize",\n+        "zope.i18n",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.testing\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.testing",\n         ],\n     },\n     entry_points="""\n'

