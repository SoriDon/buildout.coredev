Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-02-01T17:16:29+01:00
Author: Georg Gogo. BERNHARD (gogobd) <gogo@bluedynamics.com>
Commit: https://github.com/plone/Products.Archetypes/commit/d4e75af60c8bbe819f96be40f86683ceed1c8e3e

Fixed tests to accept HTTP/1...

Files changed:
M Products/Archetypes/tests/folder_marshall.txt
M Products/Archetypes/tests/traversal.txt
M Products/Archetypes/tests/traversal_4981.txt
D Products/Archetypes/tests/test_athistoryaware.py

diff --git a/Products/Archetypes/tests/folder_marshall.txt b/Products/Archetypes/tests/folder_marshall.txt
index 4aceeb2..448226f 100644
--- a/Products/Archetypes/tests/folder_marshall.txt
+++ b/Products/Archetypes/tests/folder_marshall.txt
@@ -44,20 +44,20 @@ enable the new behaviour on folderish objects that have
   >>> from Testing.ZopeTestCase.sandbox import AppZapper 
   >>> AppZapper().set(layer['app'])
   >>> print http(r"""
-  ... PUT /%s/simple_folder HTTP/1.1
+  ... PUT /%s/simple_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: Simple Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
   >>> folder.called_afterPUT_hook
   Traceback (most recent call last):
   ...
-  AttributeError: called_afterPUT_hook
+  AttributeError: ... has no attribute 'called_afterPUT_hook'
 
   >>> print folder.Description()
   <BLANKLINE>
@@ -67,10 +67,10 @@ WebDAV 'GET' by appending 'manage_DAVget' to the target, which is just
 about what the 'WebDAVSrcHandler' does:
 
   >>> print http(r"""
-  ... GET /%s/simple_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
 Then we set ``__dav_marshall__`` to ``True`` and it should behave
@@ -79,14 +79,14 @@ like a normal resource:
   >>> folder.__dav_marshall__ = True
 
   >>> print http(r"""
-  ... PUT /%s/simple_folder HTTP/1.1
+  ... PUT /%s/simple_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: Simple Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 204 No Content
+  HTTP/1... 204 No Content
   ...
 
   >>> print folder.Description()
@@ -97,10 +97,10 @@ like a normal resource:
   True
 
   >>> print http(r"""
-  ... GET /%s/simple_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 200 OK
+  HTTP/1... 200 OK
   ...
   id: simple_folder
   title:
@@ -122,14 +122,14 @@ The same for BTreeFolder:
   >>> folder = portal.simple_btree_folder
 
   >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/ HTTP/1.1
+  ... PUT /%s/simple_btree_folder/ HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: BTree Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
   >>> print folder.Description()
@@ -138,17 +138,17 @@ The same for BTreeFolder:
   >>> folder.called_afterPUT_hook
   Traceback (most recent call last):
   ...
-  AttributeError: called_afterPUT_hook
+  AttributeError: ... object has no attribute 'called_afterPUT_hook'
 
 Note that 'GET' will also result in the same response. We simulate a
 WebDAV 'GET' by appending 'manage_DAVget' to the target, which is just
 about what the 'WebDAVSrcHandler' does:
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
 Then we set ``__dav_marshall__`` to ``True`` and it should behave
@@ -157,14 +157,14 @@ like a normal resource:
   >>> folder.__dav_marshall__ = True
 
   >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/ HTTP/1.1
+  ... PUT /%s/simple_btree_folder/ HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: BTree Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 204 No Content
+  HTTP/1... 204 No Content
   ...
 
   >>> print folder.Description()
@@ -175,10 +175,10 @@ like a normal resource:
   True
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 200 OK
+  HTTP/1... 200 OK
   ...
   id: simple_btree_folder
   title:
diff --git a/Products/Archetypes/tests/test_athistoryaware.py b/Products/Archetypes/tests/test_athistoryaware.py
deleted file mode 100644
index b64cffc..0000000
--- a/Products/Archetypes/tests/test_athistoryaware.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import shutil
-import tempfile
-import unittest
-
-import Acquisition
-import BTrees
-import transaction
-import OFS
-import persistent
-import ZODB
-from ZODB.FileStorage import FileStorage
-
-from Products.Archetypes.annotations import AT_ANN_STORAGE
-from Products.Archetypes.athistoryaware import ATHistoryAwareMixin
-
-KEY1 = AT_ANN_STORAGE + '-monty'
-KEY2 = AT_ANN_STORAGE + '-python'
-KEY3 = AT_ANN_STORAGE + '-lumberjack'
-
-
-class DummyAnnotation(persistent.Persistent):
-    spam = 'eggs'
-
-
-class DummyObject(Acquisition.Implicit, persistent.Persistent,
-                  ATHistoryAwareMixin):
-    foo = 'bar'
-
-    def __init__(self):
-        annotations = BTrees.OOBTree.OOBTree()
-        annotations[KEY1] = DummyAnnotation()
-        annotations[KEY2] = DummyAnnotation()
-        setattr(self, '__annotations__', annotations)
-
-
-class ATHistoryAwareTests(unittest.TestCase):
-
-    def setUp(self):
-        # Set up a ZODB and Application object. We can't use DemoStorage
-        # as it doesn't support the history() API.
-        self._dir = tempfile.mkdtemp()
-        self._storage = FileStorage(
-            os.path.join(self._dir, 'test_athistoryaware.fs'),
-            create=True)
-        self._connection = ZODB.DB(self._storage).open()
-        root = self._connection.root()
-        root['Application'] = OFS.Application.Application()
-        self.app = root['Application']
-
-        # Our basic testing object
-        self.app.object = DummyObject()
-        self.object = self.app.object
-        t = transaction.get()
-        t.description = None  # clear initial transaction note
-        t.note('Transaction 1')
-        t.setUser('User 1')
-        t.commit()
-
-        # Alter object and annotations over several transactions
-        annotations = self.object.__annotations__
-        self.object.foo = 'baz'
-        annotations[KEY1].spam = 'python'
-        t = transaction.get()
-        t.note('Transaction 2')
-        t.setUser('User 2')
-        t.commit()
-
-        annotations[KEY3] = DummyAnnotation()
-        t = transaction.get()
-        t.note('Transaction 3')
-        t.setUser('User 3')
-        t.commit()
-
-        del annotations[KEY3]
-        annotations[KEY2].spam = 'lumberjack'
-        t = transaction.get()
-        t.note('Transaction 4')
-        t.setUser('User 4')
-        t.commit()
-
-        self.object.foo = 'mit'
-        annotations[KEY1].spam = 'trout'
-        t = transaction.get()
-        t.note('Transaction 5')
-        t.setUser('User 5')
-        t.commit()
-
-    def tearDown(self):
-        transaction.abort()
-        del self.app
-        self._connection.close()
-        del self._connection
-        self._storage.close()
-        del self._storage
-        shutil.rmtree(self._dir)
-
-    def test_historyMetadata(self):
-        """Each revision entry has unique metadata"""
-        for i, entry in enumerate(self.object.getHistories()):
-            # History is returned in reverse order, so Transaction 5 is first
-            self.assertEqual(entry[2], 'Transaction %d' % (5 - i))
-            self.assertEqual(entry[3], '/ User %d' % (5 - i))
-
-    def test_objectContext(self):
-        """Objects are returned with an acquisition context"""
-        for entry in self.object.getHistories():
-            self.assertEqual(entry[0].aq_parent, self.app)
-
-    def test_simpleAttributes(self):
-        """Simple, non-persistent attributes are tracked"""
-        foo_history = (e[0].foo for e in self.object.getHistories())
-        expected = ('mit', 'baz', 'baz', 'baz', 'bar')
-        self.assertEqual(tuple(foo_history), expected)
-
-    def test_annotation(self):
-        """Persistent subkeys of the __annotations__ object"""
-        key1_history = (e[0].__annotations__[KEY1].spam
-                        for e in self.object.getHistories())
-        expected = ('trout', 'python', 'python', 'python', 'eggs')
-        self.assertEqual(tuple(key1_history), expected)
-
-        key2_history = (e[0].__annotations__[KEY2].spam
-                        for e in self.object.getHistories())
-        expected = ('lumberjack', 'lumberjack', 'eggs', 'eggs', 'eggs')
-        self.assertEqual(tuple(key2_history), expected)
-
-    def test_annotationlifetime(self):
-        """Addition and deletion of subkeys is tracked"""
-        key3_history = (bool(KEY3 in e[0].__annotations__)
-                        for e in self.object.getHistories())
-        expected = (False, False, True, False, False)
-        self.assertEqual(tuple(key3_history), expected)
-
-    def test_maxReturned(self):
-        history = list(self.object.getHistories(max=2))
-        self.assertEqual(len(history), 2)
diff --git a/Products/Archetypes/tests/traversal.txt b/Products/Archetypes/tests/traversal.txt
index 72016e3..ed8f471 100644
--- a/Products/Archetypes/tests/traversal.txt
+++ b/Products/Archetypes/tests/traversal.txt
@@ -47,7 +47,7 @@ be allowed to acquire content from higher-level hierarchies:
   >>> from Testing.ZopeTestCase.sandbox import AppZapper
   >>> AppZapper().set(layer['app'])
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -59,7 +59,7 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Portal Title...
 
   >>> print portal.test_document.getPortalTypeName()
@@ -69,7 +69,7 @@ be allowed to acquire content from higher-level hierarchies:
   Root Document
 
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -81,14 +81,14 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -100,14 +100,14 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_btree_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -119,7 +119,7 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
 Browser
@@ -132,10 +132,10 @@ method instead.
   Portal Title
 
   >>> print http(r"""
-  ... GET /%s/title_or_id HTTP/1.0
+  ... GET /%s/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Portal Title...
 
   >>> print portal.test_document.getPortalTypeName()
@@ -145,30 +145,30 @@ method instead.
   Root Document
 
   >>> print http(r"""
-  ... GET /%s/test_document/title_or_id HTTP/1.0
+  ... GET /%s/test_document/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... GET /%s/simple_folder/test_document/title_or_id HTTP/1.0
+  ... GET /%s/simple_folder/test_document/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_btree_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/title_or_id HTTP/1.0
+  ... GET /%s/simple_btree_folder/test_document/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
 Lets make sure view lookup takes precedence over acquired views.
@@ -194,10 +194,10 @@ ZCML registrations in function tests.
   ... </configure>''', context=zcmlcontext)
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/document_view HTTP/1.0
+  ... GET /%s/simple_btree_folder/test_document/document_view HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...SimpleView simple output...
 
   >>> setSite(site)
@@ -210,7 +210,7 @@ content, because that would completely break creation of content
 through WebDAV.
 
   >>> print http(r"""
-  ... PROPFIND /%s/test_document HTTP/1.1
+  ... PROPFIND /%s/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml; charset="utf-8"
   ... Depth: 0
@@ -221,11 +221,11 @@ through WebDAV.
   ...      <DAV:prop><zope:title/></DAV:prop>
   ...   </DAV:propfind>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 207 Multi-Status
+  HTTP/1... 207 Multi-Status
   ...Root Document...
 
   >>> print http(r"""
-  ... PROPFIND /%s/simple_folder/test_document HTTP/1.1
+  ... PROPFIND /%s/simple_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml; charset="utf-8"
   ... Depth: 0
@@ -236,11 +236,11 @@ through WebDAV.
   ...      <DAV:prop><zope:title/></DAV:prop>
   ...   </DAV:propfind>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 404 Not Found
+  HTTP/1... 404 Not Found
   ...
 
   >>> print http(r"""
-  ... PROPFIND /%s/simple_btree_folder/test_document HTTP/1.1
+  ... PROPFIND /%s/simple_btree_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml; charset="utf-8"
   ... Depth: 0
@@ -251,7 +251,7 @@ through WebDAV.
   ...      <DAV:prop><zope:title/></DAV:prop>
   ...   </DAV:propfind>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 404 Not Found
+  HTTP/1... 404 Not Found
   ...
 
 Should be possible to create objects via PUT that would otherwise be
@@ -271,14 +271,14 @@ Create a CTR predicate to map any content to ``DDocument``:
   >>> ctr.reorderPredicate(p_id, 0)
 
   >>> print http(r"""
-  ... PUT /%s/simple_folder/test_document HTTP/1.1
+  ... PUT /%s/simple_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... Simple Folder Document Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_folder
@@ -296,14 +296,14 @@ Create a CTR predicate to map any content to ``DDocument``:
   True
 
   >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/test_document HTTP/1.1
+  ... PUT /%s/simple_btree_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... BTree Folder Document Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_btree_folder
@@ -331,14 +331,14 @@ AT-based folder.
   None
 
   >>> print http(r"""
-  ... PUT /%s/simple_folder/index_html HTTP/1.1
+  ... PUT /%s/simple_folder/index_html HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... Simple Folder Index
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> print folder.index_html.title_or_id()
@@ -357,10 +357,10 @@ Creating folders should work the same way. And the newly created folder
 should be of the same kind as the parent:
 
   >>> print http(r"""
-  ... MKCOL /%s/simple_folder/simple_folder HTTP/1.1
+  ... MKCOL /%s/simple_folder/simple_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_folder.simple_folder
@@ -373,10 +373,10 @@ test types are assigning a dummy var called_afterMKCOL_hook.
   True
 
   >>> print http(r"""
-  ... MKCOL /%s/simple_btree_folder/simple_btree_folder HTTP/1.1
+  ... MKCOL /%s/simple_btree_folder/simple_btree_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_btree_folder.simple_btree_folder
diff --git a/Products/Archetypes/tests/traversal_4981.txt b/Products/Archetypes/tests/traversal_4981.txt
index 6552af0..bb4a80c 100644
--- a/Products/Archetypes/tests/traversal_4981.txt
+++ b/Products/Archetypes/tests/traversal_4981.txt
@@ -19,24 +19,24 @@ BaseObject.__bobo_traverse__ intercepts GET and POST, but not HEAD.
   >>> from Testing.ZopeTestCase.sandbox import AppZapper 
   >>> AppZapper().set(layer['app'])
   >>> print http(r"""
-  ... HEAD /%s/test_document HTTP/1.0
+  ... HEAD /%s/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...
 
   >>> print http(r"""
-  ... HEAD /%s/simple_folder/test_document HTTP/1.0
+  ... HEAD /%s/simple_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...
 
   >>> print http(r"""
-  ... HEAD /%s/simple_btree_folder/test_document HTTP/1.0
+  ... HEAD /%s/simple_btree_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...
 
   >>> AppZapper().clear()


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-02-02T08:05:29+01:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.Archetypes/commit/feb67e89f2d15739f18b1d6dcab218acab431b17

fix test

Files changed:
M Products/Archetypes/tests/folder_marshall.txt

diff --git a/Products/Archetypes/tests/folder_marshall.txt b/Products/Archetypes/tests/folder_marshall.txt
index 448226f..6b818d3 100644
--- a/Products/Archetypes/tests/folder_marshall.txt
+++ b/Products/Archetypes/tests/folder_marshall.txt
@@ -57,7 +57,7 @@ enable the new behaviour on folderish objects that have
   >>> folder.called_afterPUT_hook
   Traceback (most recent call last):
   ...
-  AttributeError: ... has no attribute 'called_afterPUT_hook'
+  AttributeError: ...called_afterPUT_hook...
 
   >>> print folder.Description()
   <BLANKLINE>
@@ -138,7 +138,7 @@ The same for BTreeFolder:
   >>> folder.called_afterPUT_hook
   Traceback (most recent call last):
   ...
-  AttributeError: ... object has no attribute 'called_afterPUT_hook'
+  AttributeError: ...called_afterPUT_hook...
 
 Note that 'GET' will also result in the same response. We simulate a
 WebDAV 'GET' by appending 'manage_DAVget' to the target, which is just


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-02-02T22:00:27+01:00
Author: Georg Gogo. BERNHARD (gogobd) <gogo@bluedynamics.com>
Commit: https://github.com/plone/Products.Archetypes/commit/6e5791b9861f5c91d416659de5638c89f02c492e

Update CHANGES.rst

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 0280c31..d5bd3d7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,9 @@ New features:
 
 Bug fixes:
 
+- Fix tests to work with HTTP1.0 as well as HTTP1.1 answers.
+  [gogobd]
+
 - Fix tests to work with latest plone.app.widgets 2.1.
   [thet]
 


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-02-03T11:11:02+01:00
Author: Georg Gogo. BERNHARD (gogobd) <gogo@bluedynamics.com>
Commit: https://github.com/plone/Products.Archetypes/commit/47f559151b05285c23cb94bf7bf2ec46499549b2

Merge pull request #76 from plone/plonezope4

Fixed tests to accept HTTP/1...

Files changed:
M CHANGES.rst
M Products/Archetypes/tests/folder_marshall.txt
M Products/Archetypes/tests/traversal.txt
M Products/Archetypes/tests/traversal_4981.txt
D Products/Archetypes/tests/test_athistoryaware.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0280c31..d5bd3d7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,9 @@ New features:
 
 Bug fixes:
 
+- Fix tests to work with HTTP1.0 as well as HTTP1.1 answers.
+  [gogobd]
+
 - Fix tests to work with latest plone.app.widgets 2.1.
   [thet]
 
diff --git a/Products/Archetypes/tests/folder_marshall.txt b/Products/Archetypes/tests/folder_marshall.txt
index 4aceeb2..6b818d3 100644
--- a/Products/Archetypes/tests/folder_marshall.txt
+++ b/Products/Archetypes/tests/folder_marshall.txt
@@ -44,20 +44,20 @@ enable the new behaviour on folderish objects that have
   >>> from Testing.ZopeTestCase.sandbox import AppZapper 
   >>> AppZapper().set(layer['app'])
   >>> print http(r"""
-  ... PUT /%s/simple_folder HTTP/1.1
+  ... PUT /%s/simple_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: Simple Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
   >>> folder.called_afterPUT_hook
   Traceback (most recent call last):
   ...
-  AttributeError: called_afterPUT_hook
+  AttributeError: ...called_afterPUT_hook...
 
   >>> print folder.Description()
   <BLANKLINE>
@@ -67,10 +67,10 @@ WebDAV 'GET' by appending 'manage_DAVget' to the target, which is just
 about what the 'WebDAVSrcHandler' does:
 
   >>> print http(r"""
-  ... GET /%s/simple_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
 Then we set ``__dav_marshall__`` to ``True`` and it should behave
@@ -79,14 +79,14 @@ like a normal resource:
   >>> folder.__dav_marshall__ = True
 
   >>> print http(r"""
-  ... PUT /%s/simple_folder HTTP/1.1
+  ... PUT /%s/simple_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: Simple Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 204 No Content
+  HTTP/1... 204 No Content
   ...
 
   >>> print folder.Description()
@@ -97,10 +97,10 @@ like a normal resource:
   True
 
   >>> print http(r"""
-  ... GET /%s/simple_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 200 OK
+  HTTP/1... 200 OK
   ...
   id: simple_folder
   title:
@@ -122,14 +122,14 @@ The same for BTreeFolder:
   >>> folder = portal.simple_btree_folder
 
   >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/ HTTP/1.1
+  ... PUT /%s/simple_btree_folder/ HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: BTree Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
   >>> print folder.Description()
@@ -138,17 +138,17 @@ The same for BTreeFolder:
   >>> folder.called_afterPUT_hook
   Traceback (most recent call last):
   ...
-  AttributeError: called_afterPUT_hook
+  AttributeError: ...called_afterPUT_hook...
 
 Note that 'GET' will also result in the same response. We simulate a
 WebDAV 'GET' by appending 'manage_DAVget' to the target, which is just
 about what the 'WebDAVSrcHandler' does:
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 405 Method Not Allowed
+  HTTP/1... 405 Method Not Allowed
   ...
 
 Then we set ``__dav_marshall__`` to ``True`` and it should behave
@@ -157,14 +157,14 @@ like a normal resource:
   >>> folder.__dav_marshall__ = True
 
   >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/ HTTP/1.1
+  ... PUT /%s/simple_btree_folder/ HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... description: BTree Folder Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 204 No Content
+  HTTP/1... 204 No Content
   ...
 
   >>> print folder.Description()
@@ -175,10 +175,10 @@ like a normal resource:
   True
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1.1
+  ... GET /%s/simple_btree_folder/manage_DAVget HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 200 OK
+  HTTP/1... 200 OK
   ...
   id: simple_btree_folder
   title:
diff --git a/Products/Archetypes/tests/test_athistoryaware.py b/Products/Archetypes/tests/test_athistoryaware.py
deleted file mode 100644
index b64cffc..0000000
--- a/Products/Archetypes/tests/test_athistoryaware.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import shutil
-import tempfile
-import unittest
-
-import Acquisition
-import BTrees
-import transaction
-import OFS
-import persistent
-import ZODB
-from ZODB.FileStorage import FileStorage
-
-from Products.Archetypes.annotations import AT_ANN_STORAGE
-from Products.Archetypes.athistoryaware import ATHistoryAwareMixin
-
-KEY1 = AT_ANN_STORAGE + '-monty'
-KEY2 = AT_ANN_STORAGE + '-python'
-KEY3 = AT_ANN_STORAGE + '-lumberjack'
-
-
-class DummyAnnotation(persistent.Persistent):
-    spam = 'eggs'
-
-
-class DummyObject(Acquisition.Implicit, persistent.Persistent,
-                  ATHistoryAwareMixin):
-    foo = 'bar'
-
-    def __init__(self):
-        annotations = BTrees.OOBTree.OOBTree()
-        annotations[KEY1] = DummyAnnotation()
-        annotations[KEY2] = DummyAnnotation()
-        setattr(self, '__annotations__', annotations)
-
-
-class ATHistoryAwareTests(unittest.TestCase):
-
-    def setUp(self):
-        # Set up a ZODB and Application object. We can't use DemoStorage
-        # as it doesn't support the history() API.
-        self._dir = tempfile.mkdtemp()
-        self._storage = FileStorage(
-            os.path.join(self._dir, 'test_athistoryaware.fs'),
-            create=True)
-        self._connection = ZODB.DB(self._storage).open()
-        root = self._connection.root()
-        root['Application'] = OFS.Application.Application()
-        self.app = root['Application']
-
-        # Our basic testing object
-        self.app.object = DummyObject()
-        self.object = self.app.object
-        t = transaction.get()
-        t.description = None  # clear initial transaction note
-        t.note('Transaction 1')
-        t.setUser('User 1')
-        t.commit()
-
-        # Alter object and annotations over several transactions
-        annotations = self.object.__annotations__
-        self.object.foo = 'baz'
-        annotations[KEY1].spam = 'python'
-        t = transaction.get()
-        t.note('Transaction 2')
-        t.setUser('User 2')
-        t.commit()
-
-        annotations[KEY3] = DummyAnnotation()
-        t = transaction.get()
-        t.note('Transaction 3')
-        t.setUser('User 3')
-        t.commit()
-
-        del annotations[KEY3]
-        annotations[KEY2].spam = 'lumberjack'
-        t = transaction.get()
-        t.note('Transaction 4')
-        t.setUser('User 4')
-        t.commit()
-
-        self.object.foo = 'mit'
-        annotations[KEY1].spam = 'trout'
-        t = transaction.get()
-        t.note('Transaction 5')
-        t.setUser('User 5')
-        t.commit()
-
-    def tearDown(self):
-        transaction.abort()
-        del self.app
-        self._connection.close()
-        del self._connection
-        self._storage.close()
-        del self._storage
-        shutil.rmtree(self._dir)
-
-    def test_historyMetadata(self):
-        """Each revision entry has unique metadata"""
-        for i, entry in enumerate(self.object.getHistories()):
-            # History is returned in reverse order, so Transaction 5 is first
-            self.assertEqual(entry[2], 'Transaction %d' % (5 - i))
-            self.assertEqual(entry[3], '/ User %d' % (5 - i))
-
-    def test_objectContext(self):
-        """Objects are returned with an acquisition context"""
-        for entry in self.object.getHistories():
-            self.assertEqual(entry[0].aq_parent, self.app)
-
-    def test_simpleAttributes(self):
-        """Simple, non-persistent attributes are tracked"""
-        foo_history = (e[0].foo for e in self.object.getHistories())
-        expected = ('mit', 'baz', 'baz', 'baz', 'bar')
-        self.assertEqual(tuple(foo_history), expected)
-
-    def test_annotation(self):
-        """Persistent subkeys of the __annotations__ object"""
-        key1_history = (e[0].__annotations__[KEY1].spam
-                        for e in self.object.getHistories())
-        expected = ('trout', 'python', 'python', 'python', 'eggs')
-        self.assertEqual(tuple(key1_history), expected)
-
-        key2_history = (e[0].__annotations__[KEY2].spam
-                        for e in self.object.getHistories())
-        expected = ('lumberjack', 'lumberjack', 'eggs', 'eggs', 'eggs')
-        self.assertEqual(tuple(key2_history), expected)
-
-    def test_annotationlifetime(self):
-        """Addition and deletion of subkeys is tracked"""
-        key3_history = (bool(KEY3 in e[0].__annotations__)
-                        for e in self.object.getHistories())
-        expected = (False, False, True, False, False)
-        self.assertEqual(tuple(key3_history), expected)
-
-    def test_maxReturned(self):
-        history = list(self.object.getHistories(max=2))
-        self.assertEqual(len(history), 2)
diff --git a/Products/Archetypes/tests/traversal.txt b/Products/Archetypes/tests/traversal.txt
index 72016e3..ed8f471 100644
--- a/Products/Archetypes/tests/traversal.txt
+++ b/Products/Archetypes/tests/traversal.txt
@@ -47,7 +47,7 @@ be allowed to acquire content from higher-level hierarchies:
   >>> from Testing.ZopeTestCase.sandbox import AppZapper
   >>> AppZapper().set(layer['app'])
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -59,7 +59,7 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Portal Title...
 
   >>> print portal.test_document.getPortalTypeName()
@@ -69,7 +69,7 @@ be allowed to acquire content from higher-level hierarchies:
   Root Document
 
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -81,14 +81,14 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -100,14 +100,14 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_btree_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... POST /%s HTTP/1.0
+  ... POST /%s HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml
   ...
@@ -119,7 +119,7 @@ be allowed to acquire content from higher-level hierarchies:
   ...
   ... </methodCall>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
 Browser
@@ -132,10 +132,10 @@ method instead.
   Portal Title
 
   >>> print http(r"""
-  ... GET /%s/title_or_id HTTP/1.0
+  ... GET /%s/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Portal Title...
 
   >>> print portal.test_document.getPortalTypeName()
@@ -145,30 +145,30 @@ method instead.
   Root Document
 
   >>> print http(r"""
-  ... GET /%s/test_document/title_or_id HTTP/1.0
+  ... GET /%s/test_document/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... GET /%s/simple_folder/test_document/title_or_id HTTP/1.0
+  ... GET /%s/simple_folder/test_document/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
   >>> 'test_document' in portal.simple_btree_folder.objectIds()
   False
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/title_or_id HTTP/1.0
+  ... GET /%s/simple_btree_folder/test_document/title_or_id HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...Root Document...
 
 Lets make sure view lookup takes precedence over acquired views.
@@ -194,10 +194,10 @@ ZCML registrations in function tests.
   ... </configure>''', context=zcmlcontext)
 
   >>> print http(r"""
-  ... GET /%s/simple_btree_folder/test_document/document_view HTTP/1.0
+  ... GET /%s/simple_btree_folder/test_document/document_view HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...SimpleView simple output...
 
   >>> setSite(site)
@@ -210,7 +210,7 @@ content, because that would completely break creation of content
 through WebDAV.
 
   >>> print http(r"""
-  ... PROPFIND /%s/test_document HTTP/1.1
+  ... PROPFIND /%s/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml; charset="utf-8"
   ... Depth: 0
@@ -221,11 +221,11 @@ through WebDAV.
   ...      <DAV:prop><zope:title/></DAV:prop>
   ...   </DAV:propfind>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 207 Multi-Status
+  HTTP/1... 207 Multi-Status
   ...Root Document...
 
   >>> print http(r"""
-  ... PROPFIND /%s/simple_folder/test_document HTTP/1.1
+  ... PROPFIND /%s/simple_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml; charset="utf-8"
   ... Depth: 0
@@ -236,11 +236,11 @@ through WebDAV.
   ...      <DAV:prop><zope:title/></DAV:prop>
   ...   </DAV:propfind>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 404 Not Found
+  HTTP/1... 404 Not Found
   ...
 
   >>> print http(r"""
-  ... PROPFIND /%s/simple_btree_folder/test_document HTTP/1.1
+  ... PROPFIND /%s/simple_btree_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/xml; charset="utf-8"
   ... Depth: 0
@@ -251,7 +251,7 @@ through WebDAV.
   ...      <DAV:prop><zope:title/></DAV:prop>
   ...   </DAV:propfind>
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 404 Not Found
+  HTTP/1... 404 Not Found
   ...
 
 Should be possible to create objects via PUT that would otherwise be
@@ -271,14 +271,14 @@ Create a CTR predicate to map any content to ``DDocument``:
   >>> ctr.reorderPredicate(p_id, 0)
 
   >>> print http(r"""
-  ... PUT /%s/simple_folder/test_document HTTP/1.1
+  ... PUT /%s/simple_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... Simple Folder Document Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_folder
@@ -296,14 +296,14 @@ Create a CTR predicate to map any content to ``DDocument``:
   True
 
   >>> print http(r"""
-  ... PUT /%s/simple_btree_folder/test_document HTTP/1.1
+  ... PUT /%s/simple_btree_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... BTree Folder Document Content
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_btree_folder
@@ -331,14 +331,14 @@ AT-based folder.
   None
 
   >>> print http(r"""
-  ... PUT /%s/simple_folder/index_html HTTP/1.1
+  ... PUT /%s/simple_folder/index_html HTTP/1...
   ... Authorization: Basic %s:%s
   ... Content-Type: text/plain; charset="utf-8"
   ... Depth: 0
   ...
   ... Simple Folder Index
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> print folder.index_html.title_or_id()
@@ -357,10 +357,10 @@ Creating folders should work the same way. And the newly created folder
 should be of the same kind as the parent:
 
   >>> print http(r"""
-  ... MKCOL /%s/simple_folder/simple_folder HTTP/1.1
+  ... MKCOL /%s/simple_folder/simple_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_folder.simple_folder
@@ -373,10 +373,10 @@ test types are assigning a dummy var called_afterMKCOL_hook.
   True
 
   >>> print http(r"""
-  ... MKCOL /%s/simple_btree_folder/simple_btree_folder HTTP/1.1
+  ... MKCOL /%s/simple_btree_folder/simple_btree_folder HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.1 201 Created
+  HTTP/1... 201 Created
   ...
 
   >>> folder = portal.simple_btree_folder.simple_btree_folder
diff --git a/Products/Archetypes/tests/traversal_4981.txt b/Products/Archetypes/tests/traversal_4981.txt
index 6552af0..bb4a80c 100644
--- a/Products/Archetypes/tests/traversal_4981.txt
+++ b/Products/Archetypes/tests/traversal_4981.txt
@@ -19,24 +19,24 @@ BaseObject.__bobo_traverse__ intercepts GET and POST, but not HEAD.
   >>> from Testing.ZopeTestCase.sandbox import AppZapper 
   >>> AppZapper().set(layer['app'])
   >>> print http(r"""
-  ... HEAD /%s/test_document HTTP/1.0
+  ... HEAD /%s/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...
 
   >>> print http(r"""
-  ... HEAD /%s/simple_folder/test_document HTTP/1.0
+  ... HEAD /%s/simple_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...
 
   >>> print http(r"""
-  ... HEAD /%s/simple_btree_folder/test_document HTTP/1.0
+  ... HEAD /%s/simple_btree_folder/test_document HTTP/1...
   ... Authorization: Basic %s:%s
   ... """ % (portal_name, user_name, user_password))
-  HTTP/1.0 200 OK
+  HTTP/1... 200 OK
   ...
 
   >>> AppZapper().clear()


