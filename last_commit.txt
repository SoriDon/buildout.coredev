Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-31T17:16:24+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/e4eb27a8f1f0ea2bbaf65285dbff701dfef80511

Add support for importing profiles in `@addons` endpoint (#1478)

* First working version

* Changelog and resp file

* Revert src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp to master version

Files changed:
A news/1479.feature
A src/plone/restapi/tests/http-examples/addons_install_profile.req
A src/plone/restapi/tests/http-examples/addons_install_profile.resp
M docs/source/addons.md
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/tests/test_addons.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/addons.md b/docs/source/addons.md\nindex 2ba3b7dde..92be1ba13 100644\n--- a/docs/source/addons.md\n+++ b/docs/source/addons.md\n@@ -93,3 +93,16 @@ An individual add-on can be upgraded by issuing a `POST` to the given URL:\n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_upgrade.resp\n :language: http\n ```\n+\n+## Install a profile of an add-on\n+\n+You can install a profile of a given add-on by issuing a `POST` to the given URL and providing the name of the profile like:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_install_profile.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_install_profile.resp\n+:language: http\n+```\ndiff --git a/news/1479.feature b/news/1479.feature\nnew file mode 100644\nindex 000000000..15b47c49d\n--- /dev/null\n+++ b/news/1479.feature\n@@ -0,0 +1,2 @@\n+Add support for importing profiles in @addons endpoint\n+[sneridagh]\ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 64e70d85a..a849dcc7b 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -358,6 +358,17 @@ def uninstall_product(self, product_id):\n             self.ps.unsetLastVersionForProfile(install_profile["id"])\n         return True\n \n+    def import_profile(self, product_id, profile_id):\n+        profile = self._get_profile(\n+            product_id, profile_id, strict=True, allow_hidden=True\n+        )\n+        if not profile:\n+            logger.error("Could not find %s: profile", product_id)\n+            return False\n+        else:\n+            self.ps.runAllImportStepsFromProfile("profile-%s" % profile["id"])\n+            return True\n+\n     @view.memoize\n     def marshall_addons(self):\n         addons = {}\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex 4ab6fc63b..d9fe87dde 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -28,7 +28,8 @@ def publishTraverse(self, request, name):\n         return self\n \n     def reply(self):\n-        addon, action = self.params\n+        # Unpack taking into account that third argument might not be present\n+        addon, action, profile = (self.params + [None] * 3)[:3]\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -40,6 +41,8 @@ def reply(self):\n             result = self.addons.uninstall_product(addon)\n         elif action == "upgrade":\n             result = self.addons.upgrade_product(addon)\n+        elif action == "import":\n+            result = self.addons.import_profile(addon, profile)\n         else:\n             raise Exception(f"Unknown action {action}")\n \ndiff --git a/src/plone/restapi/tests/http-examples/addons_install_profile.req b/src/plone/restapi/tests/http-examples/addons_install_profile.req\nnew file mode 100644\nindex 000000000..83cc20b10\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/addons_install_profile.req\n@@ -0,0 +1,3 @@\n+POST /plone/@addons/plone.restapi/import/testing-workflows HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/addons_install_profile.resp b/src/plone/restapi/tests/http-examples/addons_install_profile.resp\nnew file mode 100644\nindex 000000000..58e46abbc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/addons_install_profile.resp\n@@ -0,0 +1 @@\n+HTTP/1.1 204 No Content\ndiff --git a/src/plone/restapi/tests/test_addons.py b/src/plone/restapi/tests/test_addons.py\nindex 78ab4fa2e..44f2aef64 100644\n--- a/src/plone/restapi/tests/test_addons.py\n+++ b/src/plone/restapi/tests/test_addons.py\n@@ -1,3 +1,4 @@\n+from plone import api\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -200,3 +201,16 @@ def _get_upgrade_info(self):\n \n         self.assertEqual(1, len(response.json()["items"]))\n         self.assertEqual("plone.restapi", response.json()["items"][0]["id"])\n+\n+    def test_install_specific_profile(self):\n+        response = self.api_session.post(\n+            "/@addons/plone.restapi/import/testing-workflows"\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        transaction.commit()\n+\n+        # This test installs the profile \'testing-workflows\', which installs\n+        # a workflow named "restriction_workflow", we check for it to be present\n+        pw = api.portal.get_tool("portal_workflow")\n+        self.assertIn("restriction_workflow", pw.listWorkflows())\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex fe5708b1d..81ab01c05 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1640,6 +1640,12 @@ def test_database_get(self):\n         response = self.api_session.get("/@database")\n         save_request_for_docs("database_get", response)\n \n+    def test_addons_install_specific_profile(self):\n+        response = self.api_session.post(\n+            "/@addons/plone.restapi/import/testing-workflows"\n+        )\n+        save_request_for_docs("addons_install_profile", response)\n+\n \n class TestDocumentationMessageTranslations(TestDocumentationBase):\n \n'

