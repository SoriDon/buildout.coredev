Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-30T19:29:46-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.api/commit/3ca653c3509f128bd253b65c2200d391e061b270

Fix #487: plone.api.content.get should always return a content.

Files changed:
A news/487.bugfix
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

b'diff --git a/news/487.bugfix b/news/487.bugfix\nnew file mode 100644\nindex 00000000..779c5d47\n--- /dev/null\n+++ b/news/487.bugfix\n@@ -0,0 +1 @@\n+- plone.api.content.get should always return a content [ericof]\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 777b503a..0b334dc3 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -9,6 +9,7 @@\n from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.uuid.utils import uuidToObject\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.DynamicType import DynamicType\n from Products.CMFCore.WorkflowCore import WorkflowException\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n@@ -130,7 +131,10 @@ def get(path=None, UID=None):\n             )\n \n         try:\n-            return site.restrictedTraverse(path)\n+            content = site.restrictedTraverse(path)\n+            # Only return a content if it implements DynamicType,\n+            # which is true for Dexterity content and Comment (plone.app.discussion)\n+            return content if isinstance(content, DynamicType) else None\n         except (KeyError, AttributeError):\n             return None  # When no object is found don\'t raise an error\n \ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 03200cf6..95af825c 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -472,6 +472,12 @@ def test_get(self):\n         # Test getting a non-existing subfolder by path\n         self.assertFalse(api.content.get("/about/spam"))\n \n+        # Test get will always return a content\n+        # Title is a method\n+        self.assertIsNone(api.content.get("/about/team/Title"))\n+        # title is an attribute\n+        self.assertIsNone(api.content.get("/about/team/title"))\n+\n     def test_move_constraints(self):\n         """Test the constraints for moving content."""\n         from plone.api.exc import MissingParameterError\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-31T08:50:26-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.api/commit/28b38b98e2ef5e212b487f494aeab0512c649d8f

Move return into else

Files changed:
M src/plone/api/content.py

b"diff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 0b334dc3..c578d6b3 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -129,14 +129,14 @@ def get(path=None, UID=None):\n                 site_path=site_absolute_path,\n                 relative_path=path,\n             )\n-\n         try:\n             content = site.restrictedTraverse(path)\n+        except (KeyError, AttributeError):\n+            return None  # When no object is found don't raise an error\n+        else:\n             # Only return a content if it implements DynamicType,\n             # which is true for Dexterity content and Comment (plone.app.discussion)\n             return content if isinstance(content, DynamicType) else None\n-        except (KeyError, AttributeError):\n-            return None  # When no object is found don't raise an error\n \n     elif UID:\n         return uuidToObject(UID)\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-06-01T10:28:31+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/1db5012b35b2223f2cb9a0805b8248ede0d26a3a

Merge pull request #488 from plone/issue-487-get-should-return-content

plone.api.content.get should always return a content.

Files changed:
A news/487.bugfix
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

b'diff --git a/news/487.bugfix b/news/487.bugfix\nnew file mode 100644\nindex 00000000..779c5d47\n--- /dev/null\n+++ b/news/487.bugfix\n@@ -0,0 +1 @@\n+- plone.api.content.get should always return a content [ericof]\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 777b503a..c578d6b3 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -9,6 +9,7 @@\n from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.uuid.utils import uuidToObject\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.DynamicType import DynamicType\n from Products.CMFCore.WorkflowCore import WorkflowException\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n@@ -128,11 +129,14 @@ def get(path=None, UID=None):\n                 site_path=site_absolute_path,\n                 relative_path=path,\n             )\n-\n         try:\n-            return site.restrictedTraverse(path)\n+            content = site.restrictedTraverse(path)\n         except (KeyError, AttributeError):\n             return None  # When no object is found don\'t raise an error\n+        else:\n+            # Only return a content if it implements DynamicType,\n+            # which is true for Dexterity content and Comment (plone.app.discussion)\n+            return content if isinstance(content, DynamicType) else None\n \n     elif UID:\n         return uuidToObject(UID)\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 03200cf6..95af825c 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -472,6 +472,12 @@ def test_get(self):\n         # Test getting a non-existing subfolder by path\n         self.assertFalse(api.content.get("/about/spam"))\n \n+        # Test get will always return a content\n+        # Title is a method\n+        self.assertIsNone(api.content.get("/about/team/Title"))\n+        # title is an attribute\n+        self.assertIsNone(api.content.get("/about/team/title"))\n+\n     def test_move_constraints(self):\n         """Test the constraints for moving content."""\n         from plone.api.exc import MissingParameterError\n'

