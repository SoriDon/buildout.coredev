Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-30T11:24:47+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/d0f2b1f6f893eea6bcfa58a213e0d4cd664548ae

Add @userschema endpoint for getting the user schema. (#707)

* Add @userschema endpoint for getting the user schema.

* Refactor docs from rst to md

* Apply suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* add userschema to toctree

Co-authored-by: Nilesh &lt;nileshgulia@gmail.com&gt;
Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

Files changed:
A docs/source/endpoints/userschema.md
A news/706.feature
A src/plone/restapi/services/userschema/__init__.py
A src/plone/restapi/services/userschema/configure.zcml
A src/plone/restapi/services/userschema/user.py
A src/plone/restapi/tests/http-examples/userschema.req
A src/plone/restapi/tests/http-examples/userschema.resp
A src/plone/restapi/tests/test_services_userschema.py
M docs/source/endpoints/index.md
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/endpoints/index.md b/docs/source/endpoints/index.md\nindex 2787fbc3b..2eec48957 100644\n--- a/docs/source/endpoints/index.md\n+++ b/docs/source/endpoints/index.md\n@@ -48,6 +48,7 @@ translations\n tusupload\n types\n users\n+userschema\n vocabularies\n workflow\n workingcopy\ndiff --git a/docs/source/endpoints/userschema.md b/docs/source/endpoints/userschema.md\nnew file mode 100644\nindex 000000000..a59f582c9\n--- /dev/null\n+++ b/docs/source/endpoints/userschema.md\n@@ -0,0 +1,39 @@\n+---\n+myst:\n+  html_meta:\n+    "description": "Given a user in the site, one can get its properties and available fields."\n+    "property=og:description": "Given a user in the site, one can get its properties and available fields."\n+    "property=og:title": "User schema"\n+    "keywords": "Plone, plone.restapi, REST, API, Users, profile"\n+---\n+\n+# User schema\n+\n+```{note}\n+    This is only available on Plone 5.\n+```\n+\n+Users in Plone have a set of properties defined by a default set of fields such as `fullname`, `email`, `portrait`, and so on.\n+These properties define the site user\'s profile and the user itself via the Plone UI, or the site managers can add them in a variety of ways including PAS plugins.\n+\n+These fields are dynamic and customizable by integrators so they do not adhere to a fixed schema interface.\n+This dynamic schema is exposed by this endpoint in order to build the user\'s profile form.\n+\n+## Getting the user schema\n+\n+To get the current user schema, make a request to the `/@userschema` endpoint.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/userschema.req\n+```\n+\n+The server will respond with the user schema.\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/userschema.resp\n+   :language: http\n+```\n+\n+The user schema uses the same serialization as the type\'s JSON schema.\n+\n+See {ref}`types-schema` for detailed documentation about the available field types.\ndiff --git a/news/706.feature b/news/706.feature\nnew file mode 100644\nindex 000000000..53d9f31db\n--- /dev/null\n+++ b/news/706.feature\n@@ -0,0 +1,2 @@\n+- Add @userschema endpoint for getting the user schema.\n+  [sneridagh]\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex ac53d13af..5ae759dcc 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -36,6 +36,7 @@\n   <include package=".transactions" />\n   <include package=".types" />\n   <include package=".users" />\n+  <include package=".userschema" />\n   <include package=".vocabularies" />\n   <include package=".workflow" />\n   <include\ndiff --git a/src/plone/restapi/services/userschema/__init__.py b/src/plone/restapi/services/userschema/__init__.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/src/plone/restapi/services/userschema/configure.zcml b/src/plone/restapi/services/userschema/configure.zcml\nnew file mode 100644\nindex 000000000..ce25cc016\n--- /dev/null\n+++ b/src/plone/restapi/services/userschema/configure.zcml\n@@ -0,0 +1,15 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n+\n+  <plone:service\n+      method="GET"\n+      factory=".user.UserSchemaGet"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      permission="zope2.View"\n+      name="@userschema"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/userschema/user.py b/src/plone/restapi/services/userschema/user.py\nnew file mode 100644\nindex 000000000..2d074e96f\n--- /dev/null\n+++ b/src/plone/restapi/services/userschema/user.py\n@@ -0,0 +1,35 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+from plone.restapi.types.utils import get_jsonschema_properties\n+from plone.restapi.types.utils import get_fieldsets\n+from plone.restapi.types.utils import get_fieldset_infos\n+from plone.restapi.types.utils import iter_fields\n+from plone.app.users.browser.userdatapanel import getUserDataSchema\n+from plone.restapi.serializer.converters import json_compatible\n+\n+\n+class UserSchemaGet(Service):\n+    def reply(self):\n+        user_schema = getUserDataSchema()\n+        fieldsets = get_fieldsets(self.context, self.request, user_schema)\n+\n+        # Build JSON schema properties\n+        properties = get_jsonschema_properties(self.context, self.request, fieldsets)\n+\n+        # Determine required fields\n+        required = []\n+        for field in iter_fields(fieldsets):\n+            if field.field.required:\n+                required.append(field.field.getName())\n+\n+        # Include field modes\n+        for field in iter_fields(fieldsets):\n+            if field.mode:\n+                properties[field.field.getName()]["mode"] = field.mode\n+\n+        return {\n+            "type": "object",\n+            "properties": json_compatible(properties),\n+            "required": required,\n+            "fieldsets": get_fieldset_infos(fieldsets),\n+        }\ndiff --git a/src/plone/restapi/tests/http-examples/userschema.req b/src/plone/restapi/tests/http-examples/userschema.req\nnew file mode 100644\nindex 000000000..a8a0e3a21\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/userschema.req\n@@ -0,0 +1,3 @@\n+GET /plone/@userschema HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/userschema.resp b/src/plone/restapi/tests/http-examples/userschema.resp\nnew file mode 100644\nindex 000000000..d8f7d4173\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/userschema.resp\n@@ -0,0 +1,87 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "fieldsets": [\n+        {\n+            "behavior": "plone",\n+            "fields": [\n+                "fullname",\n+                "email",\n+                "home_page",\n+                "description",\n+                "location",\n+                "portrait"\n+            ],\n+            "id": "default",\n+            "title": "Default"\n+        }\n+    ],\n+    "properties": {\n+        "description": {\n+            "description": "\\n          A short overview of who you are and what you do. Will be displayed on your author page, linked from the items you create.\\n      ",\n+            "factory": "Text",\n+            "title": "Biography",\n+            "type": "string",\n+            "widget": "textarea"\n+        },\n+        "email": {\n+            "description": "We will use this address if you need to recover your password",\n+            "factory": "Email",\n+            "title": "Email",\n+            "type": "string",\n+            "widget": "email"\n+        },\n+        "fullname": {\n+            "description": "Enter full name, e.g. John Smith.",\n+            "factory": "Text line (String)",\n+            "title": "Full Name",\n+            "type": "string"\n+        },\n+        "home_page": {\n+            "description": "\\n          The URL for your external home page, if you have one.\\n      ",\n+            "factory": "URL",\n+            "title": "Home page",\n+            "type": "string",\n+            "widget": "url"\n+        },\n+        "location": {\n+            "description": "\\n          Your location - either city and country - or in a company setting, where your office is located.\\n      ",\n+            "factory": "Text line (String)",\n+            "title": "Location",\n+            "type": "string"\n+        },\n+        "portrait": {\n+            "description": "\\n          To add or change the portrait: click the \\"Browse\\" button; select a picture of yourself. Recommended image size is 75 pixels wide by 100 pixels tall.\\n      ",\n+            "factory": "Image",\n+            "properties": {\n+                "portrait.contentType": {\n+                    "default": "",\n+                    "description": "The content type identifies the type of data.",\n+                    "factory": "Text line (String)",\n+                    "title": "Content Type",\n+                    "type": "string"\n+                },\n+                "portrait.data": {\n+                    "default": "",\n+                    "description": "The actual content of the object.",\n+                    "factory": "Text line (String)",\n+                    "title": "Data",\n+                    "type": "string"\n+                },\n+                "portrait.filename": {\n+                    "description": "",\n+                    "factory": "Text line (String)",\n+                    "title": "Filename",\n+                    "type": "string"\n+                }\n+            },\n+            "title": "Portrait",\n+            "type": "object"\n+        }\n+    },\n+    "required": [\n+        "email"\n+    ],\n+    "type": "object"\n+}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 4e34a3439..f58567580 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -251,7 +251,8 @@ def test_documentation_content_crud(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            folder.absolute_url(), json={"@type": "Document", "title": "My Document"}\n+            folder.absolute_url(),\n+            json={"@type": "Document", "title": "My Document"},\n         )\n         save_request_and_response_for_docs("content_post", response)\n \n@@ -414,7 +415,11 @@ def test_documentation_search_options(self):\n         self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n         self.portal.folder1.invokeFactory("Folder", id="folder2", title="Folder 2")\n         transaction.commit()\n-        query = {"sort_on": "path", "path.query": "/plone/folder1", "path.depth": "1"}\n+        query = {\n+            "sort_on": "path",\n+            "path.query": "/plone/folder1",\n+            "path.depth": "1",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         save_request_and_response_for_docs("search_options", response)\n \n@@ -435,7 +440,10 @@ def test_documentation_search_multiple_paths(self):\n     def test_documentation_search_metadata_fields(self):\n         self.portal.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {"SearchableText": "lorem", "metadata_fields": ["modified", "created"]}\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["modified", "created"],\n+        }\n         response = self.api_session.get("/@search", params=query)\n         save_request_and_response_for_docs("search_metadata_fields", response)\n \n@@ -478,7 +486,8 @@ def test_documentation_registry_get(self):\n \n     def test_documentation_registry_update(self):\n         response = self.api_session.patch(\n-            "/@registry/", json={"plone.app.querystring.field.path.title": "Value"}\n+            "/@registry/",\n+            json={"plone.app.querystring.field.path.title": "Value"},\n         )\n         save_request_and_response_for_docs("registry_update", response)\n \n@@ -762,7 +771,9 @@ def test_documentation_batching(self):\n         ]\n         for i in range(7):\n             folder.invokeFactory(\n-                "Document", id="doc-%s" % str(i + 1), title="Document %s" % str(i + 1)\n+                "Document",\n+                id="doc-%s" % str(i + 1),\n+                title="Document %s" % str(i + 1),\n             )\n         transaction.commit()\n \n@@ -840,7 +851,9 @@ def test_documentation_users_get(self):\n             "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email="noam.chomsky@example.com", username="noam", properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n         )\n         transaction.commit()\n         response = self.api_session.get("@users/noam")\n@@ -856,7 +869,9 @@ def test_documentation_users_anonymous_get(self):\n             "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email="noam.chomsky@example.com", username="noam", properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n         )\n         transaction.commit()\n \n@@ -932,7 +947,9 @@ def test_documentation_users_filtered_get(self):\n             "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email="noam.chomsky@example.com", username="noam", properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n         )\n         api.group.add_user(groupname="Reviewers", username="noam")\n         transaction.commit()\n@@ -1003,7 +1020,9 @@ def test_documentation_users_update(self):\n             "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email="noam.chomsky@example.com", username="noam", properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n         )\n         transaction.commit()\n \n@@ -1061,7 +1080,9 @@ def test_documentation_users_delete(self):\n             "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email="noam.chomsky@example.com", username="noam", properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n         )\n         transaction.commit()\n \n@@ -1232,7 +1253,10 @@ def test_documentation_navigation_tree(self):\n         )\n         createContentInContainer(folder, "Folder", id="subfolder2", title="SubFolder 2")\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n+            subfolder1,\n+            "Folder",\n+            id="thirdlevelfolder",\n+            title="Third Level Folder",\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n@@ -1261,7 +1285,10 @@ def test_documentation_contextnavigation(self):\n         )\n         createContentInContainer(folder, "Folder", id="subfolder2", title="SubFolder 2")\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n+            subfolder1,\n+            "Folder",\n+            id="thirdlevelfolder",\n+            title="Third Level Folder",\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n@@ -1308,7 +1335,12 @@ def test_documentation_copy_multiple(self):\n \n         response = self.api_session.post(\n             "/@copy",\n-            json={"source": [self.document.absolute_url(), newsitem.absolute_url()]},\n+            json={\n+                "source": [\n+                    self.document.absolute_url(),\n+                    newsitem.absolute_url(),\n+                ]\n+            },\n         )\n         save_request_and_response_for_docs("copy_multiple", response)\n \n@@ -1353,7 +1385,10 @@ def test_documentation_vocabularies_get_filtered_by_token(self):\n \n     def test_documentation_sources_get(self):\n         api.content.create(\n-            container=self.portal, id="doc", type="DXTestDocument", title="DX Document"\n+            container=self.portal,\n+            id="doc",\n+            type="DXTestDocument",\n+            title="DX Document",\n         )\n         transaction.commit()\n         response = self.api_session.get("/doc/@sources/test_choice_with_source")\n@@ -1545,7 +1580,8 @@ def test_locking_lock(self):\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n-            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token":\'\n+            b\' "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content,\n         )\n         save_request_and_response_for_docs("lock", response)\n@@ -1558,7 +1594,8 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n-            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token":\'\n+            b\' "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content,\n         )\n         save_request_and_response_for_docs("lock_nonstealable_timeout", response)\n@@ -1584,7 +1621,8 @@ def test_locking_refresh_lock(self):\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n-            b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n+            b\'"token":\'\n+            b\' "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n             response.content,\n         )\n         save_request_and_response_for_docs("refresh_lock", response)\n@@ -2217,3 +2255,8 @@ def test_documentation_vocabularies_get_filtered_by_token_list(self):\n         save_request_and_response_for_docs(\n             "vocabularies_get_filtered_by_token_list", response\n         )\n+\n+    def test_documentation_schema_user(self):\n+        response = self.api_session.get("/@userschema")\n+\n+        save_request_and_response_for_docs("userschema", response)\ndiff --git a/src/plone/restapi/tests/test_services_userschema.py b/src/plone/restapi/tests/test_services_userschema.py\nnew file mode 100644\nindex 000000000..50a972a51\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_userschema.py\n@@ -0,0 +1,197 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.users.setuphandlers import import_schema\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from Products.GenericSetup.tests.common import DummyImportContext\n+\n+import transaction\n+import unittest\n+\n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    PLONE5 = False\n+else:\n+    PLONE5 = True\n+\n+\n+@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n+class TestUserSchemaEndpoint(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_userschema_get(self):\n+        response = self.api_session.get("/@userschema")\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+\n+        self.assertIn("fullname", response["fieldsets"][0]["fields"])\n+        self.assertIn("email", response["fieldsets"][0]["fields"])\n+        self.assertIn("home_page", response["fieldsets"][0]["fields"])\n+        self.assertIn("description", response["fieldsets"][0]["fields"])\n+        self.assertIn("location", response["fieldsets"][0]["fields"])\n+        self.assertIn("portrait", response["fieldsets"][0]["fields"])\n+\n+        self.assertIn("fullname", response["properties"])\n+        self.assertIn("email", response["properties"])\n+        self.assertIn("home_page", response["properties"])\n+        self.assertIn("description", response["properties"])\n+        self.assertIn("location", response["properties"])\n+        self.assertIn("portrait", response["properties"])\n+\n+        self.assertIn("email", response["required"])\n+\n+        self.assertTrue("object", response["type"])\n+\n+\n+@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n+class TestCustomUserSchema(unittest.TestCase):\n+    """test userschema endpoint with a custom defined schema.\n+    we have taken the same example as in plone.app.users, that\xc3\xa7\n+    handles all kind of schema fields\n+    """\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n+  <schema name="member-fields">\n+    <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\n+      <description i18n:translate="help_homepage">\n+          The URL for your external home page, if you have one.\n+      </description>\n+      <required>False</required>\n+      <title i18n:translate="label_homepage">Home Page</title>\n+    </field>\n+    <field name="description" type="zope.schema.Text" users:forms="In User Profile">\n+      <description i18n:translate="help_biography">\n+          A short overview of who you are and what you do. Will be displayed\n+          on your author page, linked from the items you create.\n+      </description>\n+      <required>False</required>\n+      <title i18n:translate="label_biography">Biography</title>\n+    </field>\n+    <field name="location" type="zope.schema.TextLine" users:forms="In User Profile">\n+      <description i18n:translate="help_location">\n+          Your location - either city and country - or in\n+          a company setting, where your office is located.\n+      </description>\n+      <required>False</required>\n+      <title i18n:translate="label_biography">Location</title>\n+    </field>\n+    <field name="portrait" type="plone.namedfile.field.NamedBlobImage" users:forms="In User Profile">\n+      <description i18n:translate="help_portrait">\n+          To add or change the portrait: click the "Browse" button; select a\n+          picture of yourself. Recommended image size is 75 pixels wide by\n+          100 pixels tall.\n+      </description>\n+      <required>False</required>\n+      <title i18n:translate="label_portrait">Portrait</title>\n+    </field>\n+    <field name="birthdate" type="zope.schema.Date" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Birthdate</title>\n+    </field>\n+    <field name="another_date" type="zope.schema.Datetime" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Another date</title>\n+    </field>\n+    <field name="age" type="zope.schema.Int" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Age</title>\n+    </field>\n+    <field name="department" type="zope.schema.Choice" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Department</title>\n+      <values>\n+        <element>Marketing</element>\n+        <element>Production</element>\n+        <element>HR</element>\n+      </values>\n+    </field>\n+    <field name="skills" type="zope.schema.Set" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Skills</title>\n+      <value_type type="zope.schema.Choice">\n+        <values>\n+          <element>Programming</element>\n+          <element>Management</element>\n+        </values>\n+      </value_type>\n+    </field>\n+    <field name="pi" type="zope.schema.Float" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Pi</title>\n+    </field>\n+    <field name="vegetarian" type="zope.schema.Bool" users:forms="In User Profile">\n+      <description/>\n+      <required>False</required>\n+      <title>Vegetarian</title>\n+    </field>\n+  </schema>\n+</model>\n+"""\n+        context = DummyImportContext(self.portal, purge=False)\n+        context._files = {"userschema.xml": xml}\n+        import_schema(context)\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_userschema_get(self):\n+        response = self.api_session.get("/@userschema")\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        # Default fields\n+        self.assertIn("fullname", response["fieldsets"][0]["fields"])\n+        self.assertIn("email", response["fieldsets"][0]["fields"])\n+        self.assertIn("home_page", response["fieldsets"][0]["fields"])\n+        self.assertIn("description", response["fieldsets"][0]["fields"])\n+        self.assertIn("location", response["fieldsets"][0]["fields"])\n+\n+        # added fields\n+        self.assertIn("portrait", response["fieldsets"][0]["fields"])\n+        self.assertIn("birthdate", response["fieldsets"][0]["fields"])\n+        self.assertIn("another_date", response["fieldsets"][0]["fields"])\n+        self.assertIn("age", response["fieldsets"][0]["fields"])\n+        self.assertIn("department", response["fieldsets"][0]["fields"])\n+        self.assertIn("skills", response["fieldsets"][0]["fields"])\n+        self.assertIn("pi", response["fieldsets"][0]["fields"])\n+        self.assertIn("vegetarian", response["fieldsets"][0]["fields"])\n'

