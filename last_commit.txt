Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-26T20:52:02+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contenttypes/commit/6d1af0e78730da9c9dcfeedf927099636aca236a

Removed unused uninstall code, and migration/rfc822 tests.

Files changed:
A news/641.bugfix
M plone/app/contenttypes/profiles.zcml
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/test_webdav.py
D plone/app/contenttypes/profiles/uninstall/browserlayer.xml
D plone/app/contenttypes/profiles/uninstall/metadata.xml
D plone/app/contenttypes/profiles/uninstall/types.xml

b'diff --git a/news/641.bugfix b/news/641.bugfix\nnew file mode 100644\nindex 000000000..d2f32eceb\n--- /dev/null\n+++ b/news/641.bugfix\n@@ -0,0 +1,2 @@\n+Removed unused migration and uninstall code, and rfc822 tests.\n+[maurits]\ndiff --git a/plone/app/contenttypes/profiles.zcml b/plone/app/contenttypes/profiles.zcml\nindex f3aba88d1..0e3bb57b0 100644\n--- a/plone/app/contenttypes/profiles.zcml\n+++ b/plone/app/contenttypes/profiles.zcml\n@@ -22,13 +22,4 @@\n     post_handler=".setuphandlers.setup_various"\n     />\n \n-  <!-- Uninstall -->\n-  <gs:registerProfile\n-    name="uninstall"\n-    title="Uninstall Dexterity-based Plone Default Types (plone.app.contenttypes)"\n-    directory="profiles/uninstall"\n-    description="Uninstall Base Dexterity content-types and restore Archetypes default-content-types"\n-    provides="Products.GenericSetup.interfaces.EXTENSION"\n-    />\n-\n </configure>\ndiff --git a/plone/app/contenttypes/profiles/uninstall/browserlayer.xml b/plone/app/contenttypes/profiles/uninstall/browserlayer.xml\ndeleted file mode 100644\nindex b806c9df7..000000000\n--- a/plone/app/contenttypes/profiles/uninstall/browserlayer.xml\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-<layers>\n-  <layer\n-    name="plone.app.contenttypes"\n-    interface="plone.app.contenttypes.interfaces.IPloneAppContenttypesLayer"\n-    remove="True"\n-    />\n-</layers>\ndiff --git a/plone/app/contenttypes/profiles/uninstall/metadata.xml b/plone/app/contenttypes/profiles/uninstall/metadata.xml\ndeleted file mode 100644\nindex d00238a55..000000000\n--- a/plone/app/contenttypes/profiles/uninstall/metadata.xml\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-<metadata>\n- <version>1.0</version>\n-</metadata>\ndiff --git a/plone/app/contenttypes/profiles/uninstall/types.xml b/plone/app/contenttypes/profiles/uninstall/types.xml\ndeleted file mode 100644\nindex dd1af0563..000000000\n--- a/plone/app/contenttypes/profiles/uninstall/types.xml\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-<?xml version="1.0"?>\n-<object meta_type="Plone Types Tool" name="portal_types">\n- <property name="title">Controls the available content types in your portal</property>\n-\n- <object meta_type="Dexterity FTI" name="Document" remove="True" />\n- <object meta_type="Dexterity FTI" name="Folder" remove="True" />\n- <object meta_type="Dexterity FTI" name="Link" remove="True" />\n- <object meta_type="Dexterity FTI" name="File" remove="True" />\n- <object meta_type="Dexterity FTI" name="Image" remove="True" />\n- <object meta_type="Dexterity FTI" name="News Item" remove="True" />\n- <object meta_type="Dexterity FTI" name="Event" remove="True" />\n- <object meta_type="Dexterity FTI" name="Collection" remove="True" />\n-\n-</object>\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex a47837970..e8023156a 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -36,7 +36,6 @@ def getNonInstallableProfiles(self):\n         profile list when creating a Plone site.\n         """\n         return [\n-            u\'plone.app.contenttypes:uninstall\',\n             u\'plone.app.contenttypes:default\',\n         ]\n \ndiff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py\nindex 3e943ebb1..50545bdf6 100644\n--- a/plone/app/contenttypes/testing.py\n+++ b/plone/app/contenttypes/testing.py\n@@ -3,7 +3,6 @@\n from plone.app.contenttypes.tests.robot.variables import TEST_FOLDER_ID\n from plone.app.event.testing import PAEvent_FIXTURE\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n-from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import login\n@@ -12,11 +11,8 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing import zope\n-from Products.CMFPlone.utils import get_installer\n from zope.interface import alsoProvides\n \n-import pkg_resources\n-\n \n def set_browserlayer(request):\n     """Set the BrowserLayer for the request.\n@@ -38,12 +34,8 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.event.dx)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n         portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')\n \n-    def tearDownPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:uninstall\')\n-\n \n class PloneAppContenttypesRobot(PloneAppContenttypes):\n     """Same as the default but with a added folder \'robot-test-folder\'.\n@@ -65,91 +57,6 @@ def tearDownPloneSite(self, portal):\n         super(PloneAppContenttypesRobot, self).tearDownPloneSite(portal)\n \n \n-try:\n-    pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    import Products.ATContentTypes\n-    TEST_MIGRATION = True\n-except pkg_resources.DistributionNotFound:\n-    TEST_MIGRATION = False\n-\n-\n-class PloneAppContenttypesMigration(PloneSandboxLayer):\n-    """ A setup that installs the old default AT-Types to migrate them to\n-    Dexterity. The profile of pac is not only in the individual tests.\n-    """\n-\n-    defaultBases = (PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        # prepare installing Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        zope.installProduct(app, \'Products.Archetypes\')\n-        zope.installProduct(app, \'Products.ATContentTypes\')\n-        zope.installProduct(app, \'plone.app.blob\')\n-\n-        # prepare installing plone.app.collection\n-        try:\n-            pkg_resources.get_distribution(\'plone.app.collection\')\n-            zope.installProduct(app, \'plone.app.collection\')\n-        except pkg_resources.DistributionNotFound:\n-            pass\n-\n-        # prepare installing plone.app.contenttypes\n-        zope.installProduct(app, \'Products.DateRecurringIndex\')\n-\n-        import plone.app.contenttypes\n-        self.loadZCML(package=plone.app.contenttypes)\n-        import plone.app.referenceablebehavior\n-        self.loadZCML(package=plone.app.referenceablebehavior)\n-\n-    def setUpPloneSite(self, portal):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        # Uninstall plone.app.contenttypes if already installed\n-        qi = get_installer(portal)\n-        if qi.is_product_installed(\'plone.app.contenttypes\'):\n-            qi.uninstall_product(\'plone.app.contenttypes\')\n-\n-        # install Products.ATContentTypes manually if profile is available\n-        # (this is only needed for Plone >= 5)\n-        profiles = [x[\'id\'] for x in portal.portal_setup.listProfileInfo()]\n-        if \'Products.ATContentTypes:default\' in profiles:\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n-\n-        # enable old Topic\n-        portal.portal_types.Topic.global_allow = True\n-\n-        # install plone.app.collections manually if profile is available\n-        # (this is only needed for Plone >= 5)\n-        if \'plone.app.collection:default\' in profiles:\n-            applyProfile(portal, \'plone.app.collection:default\')\n-\n-        applyProfile(portal, \'plone.app.referenceablebehavior:default\')\n-\n-    def tearDownPloneSite(self, portal):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        applyProfile(portal, \'plone.app.contenttypes:uninstall\')\n-\n-    def tearDownZope(self, app):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        try:\n-            pkg_resources.get_distribution(\'plone.app.collection\')\n-            zope.uninstallProduct(app, \'plone.app.collection\')\n-        except pkg_resources.DistributionNotFound:\n-            pass\n-        zope.uninstallProduct(app, \'plone.app.blob\')\n-        zope.uninstallProduct(app, \'Products.ATContentTypes\')\n-        zope.uninstallProduct(app, \'Products.Archetypes\')\n-\n-\n PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()\n PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_CONTENTTYPES_FIXTURE,),\n@@ -167,12 +74,3 @@ def tearDownZope(self, app):\n     ),\n     name=\'PloneAppContenttypes:Robot\'\n )\n-PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE = PloneAppContenttypesMigration()\n-PLONE_APP_CONTENTTYPES_MIGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,),\n-    name=\'PloneAppContenttypes:Migration\'\n-)\n-PLONE_APP_CONTENTTYPES_MIGRATION_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,),\n-    name=\'PloneAppContenttypes:Migration_Functional\'\n-)\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex 78f166d28..f329a3bba 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -2,22 +2,13 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from io import BytesIO\n from zope.publisher.browser import TestRequest\n from ZPublisher.HTTPResponse import HTTPResponse\n \n import os.path\n-import pkg_resources\n import unittest\n \n \n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n-\n class DAVTestRequest(TestRequest):\n     """Mock webdav request."""\n \n@@ -70,49 +61,3 @@ def test_file_put(self):\n         self.assertEqual(self.file.file.filename, u\'file.pdf\')\n         self.assertEqual(self.file.get_size(), 8561)\n         self.assertEqual(self.file.content_type(), \'application/pdf\')\n-\n-    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n-    def test_image_put_rfc822(self):\n-        """Upload an image through webdav/rfc822."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        body = BytesIO()\n-        body.write(b"""title: My image\n-Content-Type: image/jpeg\n-Content-Disposition: attachment; filename*="utf-8\'\'image.jpg"\n-Portal-Type: Image\n-\n-""" + open(filename, \'rb\').read()\n-        )\n-        body.seek(0)\n-        request = DAVTestRequest(environ={\n-            \'BODYFILE\': body,\n-            \'PATH_INFO\': \'/foo/bar/image.jpg\',\n-        })\n-        self.image.REQUEST = request\n-        self.image.PUT()\n-        self.assertEqual(self.image.image.filename, u\'image.jpg\')\n-        self.assertEqual(self.image.get_size(), 5131)\n-        self.assertEqual(self.image.content_type(), \'image/jpeg\')\n-\n-    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n-    def test_file_put_rfc822(self):\n-        """Upload a file through webdav/rfc822."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        body = BytesIO()\n-        body.write(b"""title: My file\n-Content-Type: application/pdf\n-Content-Disposition: attachment; filename*="utf-8\'\'file.pdf"\n-Portal-Type: File\n-\n-""" + open(filename, \'rb\').read()\n-        )\n-        body.seek(0)\n-        request = DAVTestRequest(environ={\n-            \'BODYFILE\': body,\n-            \'PATH_INFO\': \'/foo/bar/file.pdf\',\n-        })\n-        self.file.REQUEST = request\n-        self.file.PUT()\n-        self.assertEqual(self.file.file.filename, u\'file.pdf\')\n-        self.assertEqual(self.file.get_size(), 8561)\n-        self.assertEqual(self.file.content_type(), \'application/pdf\')\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-27T23:18:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/4640ee9a89f704712b9a19072c636334dd138c7e

Merge pull request #643 from plone/maurits-remove-unused-migration-uninstall-2

Removed unused uninstall code, and migration/rfc822 tests.

Files changed:
A news/641.bugfix
M plone/app/contenttypes/profiles.zcml
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/testing.py
M plone/app/contenttypes/tests/test_webdav.py
D plone/app/contenttypes/profiles/uninstall/browserlayer.xml
D plone/app/contenttypes/profiles/uninstall/metadata.xml
D plone/app/contenttypes/profiles/uninstall/types.xml

b'diff --git a/news/641.bugfix b/news/641.bugfix\nnew file mode 100644\nindex 000000000..d2f32eceb\n--- /dev/null\n+++ b/news/641.bugfix\n@@ -0,0 +1,2 @@\n+Removed unused migration and uninstall code, and rfc822 tests.\n+[maurits]\ndiff --git a/plone/app/contenttypes/profiles.zcml b/plone/app/contenttypes/profiles.zcml\nindex f3aba88d1..0e3bb57b0 100644\n--- a/plone/app/contenttypes/profiles.zcml\n+++ b/plone/app/contenttypes/profiles.zcml\n@@ -22,13 +22,4 @@\n     post_handler=".setuphandlers.setup_various"\n     />\n \n-  <!-- Uninstall -->\n-  <gs:registerProfile\n-    name="uninstall"\n-    title="Uninstall Dexterity-based Plone Default Types (plone.app.contenttypes)"\n-    directory="profiles/uninstall"\n-    description="Uninstall Base Dexterity content-types and restore Archetypes default-content-types"\n-    provides="Products.GenericSetup.interfaces.EXTENSION"\n-    />\n-\n </configure>\ndiff --git a/plone/app/contenttypes/profiles/uninstall/browserlayer.xml b/plone/app/contenttypes/profiles/uninstall/browserlayer.xml\ndeleted file mode 100644\nindex b806c9df7..000000000\n--- a/plone/app/contenttypes/profiles/uninstall/browserlayer.xml\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-<layers>\n-  <layer\n-    name="plone.app.contenttypes"\n-    interface="plone.app.contenttypes.interfaces.IPloneAppContenttypesLayer"\n-    remove="True"\n-    />\n-</layers>\ndiff --git a/plone/app/contenttypes/profiles/uninstall/metadata.xml b/plone/app/contenttypes/profiles/uninstall/metadata.xml\ndeleted file mode 100644\nindex d00238a55..000000000\n--- a/plone/app/contenttypes/profiles/uninstall/metadata.xml\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-<metadata>\n- <version>1.0</version>\n-</metadata>\ndiff --git a/plone/app/contenttypes/profiles/uninstall/types.xml b/plone/app/contenttypes/profiles/uninstall/types.xml\ndeleted file mode 100644\nindex dd1af0563..000000000\n--- a/plone/app/contenttypes/profiles/uninstall/types.xml\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-<?xml version="1.0"?>\n-<object meta_type="Plone Types Tool" name="portal_types">\n- <property name="title">Controls the available content types in your portal</property>\n-\n- <object meta_type="Dexterity FTI" name="Document" remove="True" />\n- <object meta_type="Dexterity FTI" name="Folder" remove="True" />\n- <object meta_type="Dexterity FTI" name="Link" remove="True" />\n- <object meta_type="Dexterity FTI" name="File" remove="True" />\n- <object meta_type="Dexterity FTI" name="Image" remove="True" />\n- <object meta_type="Dexterity FTI" name="News Item" remove="True" />\n- <object meta_type="Dexterity FTI" name="Event" remove="True" />\n- <object meta_type="Dexterity FTI" name="Collection" remove="True" />\n-\n-</object>\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex a47837970..e8023156a 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -36,7 +36,6 @@ def getNonInstallableProfiles(self):\n         profile list when creating a Plone site.\n         """\n         return [\n-            u\'plone.app.contenttypes:uninstall\',\n             u\'plone.app.contenttypes:default\',\n         ]\n \ndiff --git a/plone/app/contenttypes/testing.py b/plone/app/contenttypes/testing.py\nindex 3e943ebb1..50545bdf6 100644\n--- a/plone/app/contenttypes/testing.py\n+++ b/plone/app/contenttypes/testing.py\n@@ -3,7 +3,6 @@\n from plone.app.contenttypes.tests.robot.variables import TEST_FOLDER_ID\n from plone.app.event.testing import PAEvent_FIXTURE\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n-from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import login\n@@ -12,11 +11,8 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing import zope\n-from Products.CMFPlone.utils import get_installer\n from zope.interface import alsoProvides\n \n-import pkg_resources\n-\n \n def set_browserlayer(request):\n     """Set the BrowserLayer for the request.\n@@ -38,12 +34,8 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.event.dx)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n         portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')\n \n-    def tearDownPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:uninstall\')\n-\n \n class PloneAppContenttypesRobot(PloneAppContenttypes):\n     """Same as the default but with a added folder \'robot-test-folder\'.\n@@ -65,91 +57,6 @@ def tearDownPloneSite(self, portal):\n         super(PloneAppContenttypesRobot, self).tearDownPloneSite(portal)\n \n \n-try:\n-    pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    import Products.ATContentTypes\n-    TEST_MIGRATION = True\n-except pkg_resources.DistributionNotFound:\n-    TEST_MIGRATION = False\n-\n-\n-class PloneAppContenttypesMigration(PloneSandboxLayer):\n-    """ A setup that installs the old default AT-Types to migrate them to\n-    Dexterity. The profile of pac is not only in the individual tests.\n-    """\n-\n-    defaultBases = (PLONE_FIXTURE,)\n-\n-    def setUpZope(self, app, configurationContext):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        # prepare installing Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        zope.installProduct(app, \'Products.Archetypes\')\n-        zope.installProduct(app, \'Products.ATContentTypes\')\n-        zope.installProduct(app, \'plone.app.blob\')\n-\n-        # prepare installing plone.app.collection\n-        try:\n-            pkg_resources.get_distribution(\'plone.app.collection\')\n-            zope.installProduct(app, \'plone.app.collection\')\n-        except pkg_resources.DistributionNotFound:\n-            pass\n-\n-        # prepare installing plone.app.contenttypes\n-        zope.installProduct(app, \'Products.DateRecurringIndex\')\n-\n-        import plone.app.contenttypes\n-        self.loadZCML(package=plone.app.contenttypes)\n-        import plone.app.referenceablebehavior\n-        self.loadZCML(package=plone.app.referenceablebehavior)\n-\n-    def setUpPloneSite(self, portal):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        # Uninstall plone.app.contenttypes if already installed\n-        qi = get_installer(portal)\n-        if qi.is_product_installed(\'plone.app.contenttypes\'):\n-            qi.uninstall_product(\'plone.app.contenttypes\')\n-\n-        # install Products.ATContentTypes manually if profile is available\n-        # (this is only needed for Plone >= 5)\n-        profiles = [x[\'id\'] for x in portal.portal_setup.listProfileInfo()]\n-        if \'Products.ATContentTypes:default\' in profiles:\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n-\n-        # enable old Topic\n-        portal.portal_types.Topic.global_allow = True\n-\n-        # install plone.app.collections manually if profile is available\n-        # (this is only needed for Plone >= 5)\n-        if \'plone.app.collection:default\' in profiles:\n-            applyProfile(portal, \'plone.app.collection:default\')\n-\n-        applyProfile(portal, \'plone.app.referenceablebehavior:default\')\n-\n-    def tearDownPloneSite(self, portal):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        applyProfile(portal, \'plone.app.contenttypes:uninstall\')\n-\n-    def tearDownZope(self, app):\n-        if not TEST_MIGRATION:\n-            return\n-\n-        try:\n-            pkg_resources.get_distribution(\'plone.app.collection\')\n-            zope.uninstallProduct(app, \'plone.app.collection\')\n-        except pkg_resources.DistributionNotFound:\n-            pass\n-        zope.uninstallProduct(app, \'plone.app.blob\')\n-        zope.uninstallProduct(app, \'Products.ATContentTypes\')\n-        zope.uninstallProduct(app, \'Products.Archetypes\')\n-\n-\n PLONE_APP_CONTENTTYPES_FIXTURE = PloneAppContenttypes()\n PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_CONTENTTYPES_FIXTURE,),\n@@ -167,12 +74,3 @@ def tearDownZope(self, app):\n     ),\n     name=\'PloneAppContenttypes:Robot\'\n )\n-PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE = PloneAppContenttypesMigration()\n-PLONE_APP_CONTENTTYPES_MIGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,),\n-    name=\'PloneAppContenttypes:Migration\'\n-)\n-PLONE_APP_CONTENTTYPES_MIGRATION_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,),\n-    name=\'PloneAppContenttypes:Migration_Functional\'\n-)\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex 78f166d28..f329a3bba 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -2,22 +2,13 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from io import BytesIO\n from zope.publisher.browser import TestRequest\n from ZPublisher.HTTPResponse import HTTPResponse\n \n import os.path\n-import pkg_resources\n import unittest\n \n \n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n-\n class DAVTestRequest(TestRequest):\n     """Mock webdav request."""\n \n@@ -70,49 +61,3 @@ def test_file_put(self):\n         self.assertEqual(self.file.file.filename, u\'file.pdf\')\n         self.assertEqual(self.file.get_size(), 8561)\n         self.assertEqual(self.file.content_type(), \'application/pdf\')\n-\n-    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n-    def test_image_put_rfc822(self):\n-        """Upload an image through webdav/rfc822."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        body = BytesIO()\n-        body.write(b"""title: My image\n-Content-Type: image/jpeg\n-Content-Disposition: attachment; filename*="utf-8\'\'image.jpg"\n-Portal-Type: Image\n-\n-""" + open(filename, \'rb\').read()\n-        )\n-        body.seek(0)\n-        request = DAVTestRequest(environ={\n-            \'BODYFILE\': body,\n-            \'PATH_INFO\': \'/foo/bar/image.jpg\',\n-        })\n-        self.image.REQUEST = request\n-        self.image.PUT()\n-        self.assertEqual(self.image.image.filename, u\'image.jpg\')\n-        self.assertEqual(self.image.get_size(), 5131)\n-        self.assertEqual(self.image.content_type(), \'image/jpeg\')\n-\n-    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n-    def test_file_put_rfc822(self):\n-        """Upload a file through webdav/rfc822."""\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        body = BytesIO()\n-        body.write(b"""title: My file\n-Content-Type: application/pdf\n-Content-Disposition: attachment; filename*="utf-8\'\'file.pdf"\n-Portal-Type: File\n-\n-""" + open(filename, \'rb\').read()\n-        )\n-        body.seek(0)\n-        request = DAVTestRequest(environ={\n-            \'BODYFILE\': body,\n-            \'PATH_INFO\': \'/foo/bar/file.pdf\',\n-        })\n-        self.file.REQUEST = request\n-        self.file.PUT()\n-        self.assertEqual(self.file.file.filename, u\'file.pdf\')\n-        self.assertEqual(self.file.get_size(), 8561)\n-        self.assertEqual(self.file.content_type(), \'application/pdf\')\n'

