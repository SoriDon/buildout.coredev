Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T09:41:36+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/6760d55d5fd5ce10adae86b8c79612d5b5545910

@users: Support search for fullname, email, id with `?search=`

The change is backward compatible: `?query=` works like before: query for username.
I corrected the documentation for `?query=` : it queries and queried already in username not only startswith!

Files changed:
A src/plone/restapi/tests/http-examples/users_searched.req
A src/plone/restapi/tests/http-examples/users_searched.resp
M docs/source/users.md
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/http-examples/users_filtered_by_username.req
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/users.md b/docs/source/users.md\nindex ace4ba2b8..d68cf3189 100644\n--- a/docs/source/users.md\n+++ b/docs/source/users.md\n@@ -66,7 +66,7 @@ Filtering by `id`:\n     :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n ```\n \n-The server will respond with a list of the filtered users in the portal where the `username` starts with the `query` parameter\'s value:\n+The server will respond with a list of the filtered users in the portal where the `username` contains the `query` parameter\'s value:\n \n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n :language: http\n@@ -88,6 +88,21 @@ The server will respond with a list of users where the users are member of one o\n The endpoint also takes a `limit` parameter.\n Its default is a maximum of 25 users at a time for performance reasons.\n \n+### Search users\n+\n+Search by `id`, `fullname` and `email`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_searched.req\n+```\n+\n+The server will respond with a list of users where the `fullname`, `email` or `id` contains the `query` parameter\'s value:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_searched.resp\n+:language: http\n+```\n+\n \n ## Create User\n \ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex eebacbc8f..b5139ff8e 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -1,10 +1,13 @@\n from AccessControl import getSecurityManager\n+from itertools import chain\n+from plone.app.workflow.browser.sharing import merge_search_results\n from plone.restapi.interfaces import ISerializeToJson, ISerializeToJsonSummary\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import normalizeString\n from urllib.parse import parse_qs\n from zExceptions import BadRequest\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import implementer\n@@ -23,6 +26,7 @@ def __init__(self, context, request):\n         self.portal_membership = getToolByName(portal, "portal_membership")\n         self.acl_users = getToolByName(portal, "acl_users")\n         self.query = parse_qs(self.request["QUERY_STRING"])\n+        self.search_term = self.query.get("search", [""])[0]\n \n     def publishTraverse(self, request, name):\n         # Consume any path segments after /@users as parameters\n@@ -46,21 +50,67 @@ def _sort_users(users):\n         )\n         return users\n \n+    def _principal_search_results(\n+        self, search_for_principal, get_principal_by_id, principal_type, id_key\n+    ):\n+\n+        hunter = getMultiAdapter((self.context, self.request), name="pas_search")\n+\n+        principals = []\n+        for principal_info in search_for_principal(hunter, self.search_term):\n+            principal_id = principal_info[id_key]\n+            principals.append(get_principal_by_id(principal_id))\n+\n+        return principals\n+\n     def _get_users(self):\n         results = {user["userid"] for user in self.acl_users.searchUsers()}\n         users = [self.portal_membership.getMemberById(userid) for userid in results]\n         return self._sort_users(users)\n \n-    def _get_filtered_users(self, query, groups_filter, limit):\n-        results = self.acl_users.searchUsers(id=query, max_results=limit)\n-        users = [\n-            self.portal_membership.getMemberById(user["userid"]) for user in results\n-        ]\n+    def _user_search_results(self):\n+        def search_for_principal(hunter, search_term):\n+            return merge_search_results(\n+                chain(\n+                    *(\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    )\n+                ),\n+                "userid",\n+            )\n+\n+        def get_principal_by_id(user_id):\n+            mtool = getToolByName(self.context, "portal_membership")\n+            return mtool.getMemberById(user_id)\n+\n+        return self._principal_search_results(\n+            search_for_principal, get_principal_by_id, "user", "userid"\n+        )\n+\n+    def _get_filtered_users(self, query, groups_filter, search_term, limit):\n+        """Filter or search users by id, fullname, email and/or groups.\n+\n+        Args:\n+            query (str): filter by query\n+            groups_filter (list of str): list of groups\n+            search_term (str): search by id, fullname, email\n+            limit (integer): limit result\n+\n+        Returns:\n+            list: list of users sorted by fullname\n+        """\n+        if search_term:\n+            users = self._user_search_results()\n+        else:\n+            results = self.acl_users.searchUsers(id=query, max_results=limit)\n+            users = [\n+                self.portal_membership.getMemberById(user["userid"]) for user in results\n+            ]\n         if groups_filter:\n             users = [\n                 user for user in users if set(user.getGroups()) & set(groups_filter)\n             ]\n-\n         return self._sort_users(users)\n \n     def has_permission_to_query(self):\n@@ -80,14 +130,13 @@ def has_permission_to_access_user_info(self):\n     def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n-            groups_filter = self.query.get(\n-                "groups-filter:list", self.query.get("groups-filter%3Alist", [])\n-            )\n+            groups_filter = self.query.get("groups-filter:list", [])\n             limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n-            if query or groups_filter:\n-                # Someone is searching users, check if they are authorized\n+            if query or groups_filter or self.search_term:\n                 if self.has_permission_to_query():\n-                    users = self._get_filtered_users(query, groups_filter, limit)\n+                    users = self._get_filtered_users(\n+                        query, groups_filter, self.search_term, limit\n+                    )\n                     result = []\n                     for user in users:\n                         serializer = queryMultiAdapter(\n@@ -99,7 +148,7 @@ def reply(self):\n                     self.request.response.setStatus(401)\n                     return\n             else:\n-                raise BadRequest("Query string supplied is not valid")\n+                raise BadRequest("Parameters supplied are not valid")\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if they are authorized\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.req b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\nindex d87613371..80bbed34b 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n@@ -1,3 +1,3 @@\n-GET /plone/@users?query=noa HTTP/1.1\n+GET /plone/@users?query=oam HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex 2c940f0a4..d69cc2364 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -8,7 +8,7 @@ Content-Type: application/json\n         "email": "noam.chomsky@example.com",\n         "fullname": "Noam Avram Chomsky",\n         "groups": {\n-            "@id": "http://localhost:55001/plone/@users?query=noa",\n+            "@id": "http://localhost:55001/plone/@users?query=oam",\n             "items": [\n                 {\n                     "id": "AuthenticatedUsers",\ndiff --git a/src/plone/restapi/tests/http-examples/users_searched.req b/src/plone/restapi/tests/http-examples/users_searched.req\nnew file mode 100644\nindex 000000000..87cdda1d9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_searched.req\n@@ -0,0 +1,3 @@\n+GET /plone/@users?search=avram HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_searched.resp b/src/plone/restapi/tests/http-examples/users_searched.resp\nnew file mode 100644\nindex 000000000..812c3632a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_searched.resp\n@@ -0,0 +1,34 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+[\n+    {\n+        "@id": "http://localhost:55001/plone/@users/noam",\n+        "description": "Professor of Linguistics",\n+        "email": "noam.chomsky@example.com",\n+        "fullname": "Noam Avram Chomsky",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users?search=avram",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                },\n+                {\n+                    "id": "Reviewers",\n+                    "title": "Reviewers"\n+                }\n+            ],\n+            "items_total": 2\n+        },\n+        "home_page": "web.mit.edu/chomsky",\n+        "id": "noam",\n+        "location": "Cambridge, MA",\n+        "portrait": null,\n+        "roles": [\n+            "Reviewer",\n+            "Member"\n+        ],\n+        "username": "noam"\n+    }\n+]\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 849594388..fe5708b1d 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -936,7 +936,7 @@ def test_documentation_users_filtered_get(self):\n         api.group.add_user(groupname="Reviewers", username="noam")\n         transaction.commit()\n         # filter by username\n-        response = self.api_session.get("@users", params={"query": "noa"})\n+        response = self.api_session.get("@users", params={"query": "oam"})\n         save_request_and_response_for_docs("users_filtered_by_username", response)\n         # filter by groups\n         response = self.api_session.get(\n@@ -945,6 +945,22 @@ def test_documentation_users_filtered_get(self):\n         )\n         save_request_and_response_for_docs("users_filtered_by_groups", response)\n \n+    def test_documentation_users_searched_get(self):\n+        properties = {\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n+        )\n+        api.group.add_user(groupname="Reviewers", username="noam")\n+        transaction.commit()\n+        # search by fullname\n+        response = self.api_session.get("@users", params={"search": "avram"})\n+        save_request_and_response_for_docs("users_searched", response)\n+\n     def test_documentation_users_created(self):\n         response = self.api_session.post(\n             "/@users",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T09:41:36+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/172bb9cf946eba5ceb4d9eccedc00651c6274b65

Create 1443.feature

Files changed:
A news/1443.feature

b'diff --git a/news/1443.feature b/news/1443.feature\nnew file mode 100644\nindex 000000000..5cc61c03c\n--- /dev/null\n+++ b/news/1443.feature\n@@ -0,0 +1 @@\n+@users: Support search for fullname, email, id with ?search= [ksuess]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T09:41:36+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/609962b153716dc807835875d7cc75c84e6ba54e

Update users_searched.resp

Files changed:
M src/plone/restapi/tests/http-examples/users_searched.resp

b'diff --git a/src/plone/restapi/tests/http-examples/users_searched.resp b/src/plone/restapi/tests/http-examples/users_searched.resp\nindex 812c3632a..a7d26d834 100644\n--- a/src/plone/restapi/tests/http-examples/users_searched.resp\n+++ b/src/plone/restapi/tests/http-examples/users_searched.resp\n@@ -26,8 +26,8 @@ Content-Type: application/json\n         "location": "Cambridge, MA",\n         "portrait": null,\n         "roles": [\n-            "Reviewer",\n-            "Member"\n+            "Member",\n+            "Reviewer"\n         ],\n         "username": "noam"\n     }\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T09:41:36+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/f8483c322f5e796f4ce75c9ca8ee8a59600ef8a3

Fix limit parameter (@users)

Files changed:
M src/plone/restapi/services/users/get.py

b'diff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex b5139ff8e..62bd2a9fc 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -131,7 +131,7 @@ def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n             groups_filter = self.query.get("groups-filter:list", [])\n-            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n+            limit = self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0]\n             if query or groups_filter or self.search_term:\n                 if self.has_permission_to_query():\n                     users = self._get_filtered_users(\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T09:41:36+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/9e1959f5cae5a1eec206ddab8b48c8731e613517

Support parameter 'limit' in @users.

Files changed:
M src/plone/restapi/services/users/get.py

b'diff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 62bd2a9fc..4bc5271f4 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -132,7 +132,7 @@ def reply(self):\n             query = self.query.get("query", "")\n             groups_filter = self.query.get("groups-filter:list", [])\n             limit = self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0]\n-            if query or groups_filter or self.search_term:\n+            if query or groups_filter or self.search_term or limit:\n                 if self.has_permission_to_query():\n                     users = self._get_filtered_users(\n                         query, groups_filter, self.search_term, limit\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T09:51:13+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/bd48bbd4c896d3f90179e371d6a73e56e55646a4

Update translated_messages_addons.resp

Files changed:
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp

b'diff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex 005f86376..a9de8d8b2 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.22.1.dev0"\n+            "version": "8.23.1.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-27T19:06:41+02:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/ab4f9215c067c12cd4c3f9b8bff3020f2188d0f0

Merge pull request #1444 from plone/users-endpoint-search-fullname

@users: Support search for fullname, email, id with `?search=`
Do you release, @tisto ?

Files changed:
A news/1443.feature
A src/plone/restapi/tests/http-examples/users_searched.req
A src/plone/restapi/tests/http-examples/users_searched.resp
M docs/source/users.md
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.req
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/users.md b/docs/source/users.md\nindex ace4ba2b8..d68cf3189 100644\n--- a/docs/source/users.md\n+++ b/docs/source/users.md\n@@ -66,7 +66,7 @@ Filtering by `id`:\n     :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n ```\n \n-The server will respond with a list of the filtered users in the portal where the `username` starts with the `query` parameter\'s value:\n+The server will respond with a list of the filtered users in the portal where the `username` contains the `query` parameter\'s value:\n \n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n :language: http\n@@ -88,6 +88,21 @@ The server will respond with a list of users where the users are member of one o\n The endpoint also takes a `limit` parameter.\n Its default is a maximum of 25 users at a time for performance reasons.\n \n+### Search users\n+\n+Search by `id`, `fullname` and `email`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_searched.req\n+```\n+\n+The server will respond with a list of users where the `fullname`, `email` or `id` contains the `query` parameter\'s value:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_searched.resp\n+:language: http\n+```\n+\n \n ## Create User\n \ndiff --git a/news/1443.feature b/news/1443.feature\nnew file mode 100644\nindex 000000000..5cc61c03c\n--- /dev/null\n+++ b/news/1443.feature\n@@ -0,0 +1 @@\n+@users: Support search for fullname, email, id with ?search= [ksuess]\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex eebacbc8f..4bc5271f4 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -1,10 +1,13 @@\n from AccessControl import getSecurityManager\n+from itertools import chain\n+from plone.app.workflow.browser.sharing import merge_search_results\n from plone.restapi.interfaces import ISerializeToJson, ISerializeToJsonSummary\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import normalizeString\n from urllib.parse import parse_qs\n from zExceptions import BadRequest\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import implementer\n@@ -23,6 +26,7 @@ def __init__(self, context, request):\n         self.portal_membership = getToolByName(portal, "portal_membership")\n         self.acl_users = getToolByName(portal, "acl_users")\n         self.query = parse_qs(self.request["QUERY_STRING"])\n+        self.search_term = self.query.get("search", [""])[0]\n \n     def publishTraverse(self, request, name):\n         # Consume any path segments after /@users as parameters\n@@ -46,21 +50,67 @@ def _sort_users(users):\n         )\n         return users\n \n+    def _principal_search_results(\n+        self, search_for_principal, get_principal_by_id, principal_type, id_key\n+    ):\n+\n+        hunter = getMultiAdapter((self.context, self.request), name="pas_search")\n+\n+        principals = []\n+        for principal_info in search_for_principal(hunter, self.search_term):\n+            principal_id = principal_info[id_key]\n+            principals.append(get_principal_by_id(principal_id))\n+\n+        return principals\n+\n     def _get_users(self):\n         results = {user["userid"] for user in self.acl_users.searchUsers()}\n         users = [self.portal_membership.getMemberById(userid) for userid in results]\n         return self._sort_users(users)\n \n-    def _get_filtered_users(self, query, groups_filter, limit):\n-        results = self.acl_users.searchUsers(id=query, max_results=limit)\n-        users = [\n-            self.portal_membership.getMemberById(user["userid"]) for user in results\n-        ]\n+    def _user_search_results(self):\n+        def search_for_principal(hunter, search_term):\n+            return merge_search_results(\n+                chain(\n+                    *(\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    )\n+                ),\n+                "userid",\n+            )\n+\n+        def get_principal_by_id(user_id):\n+            mtool = getToolByName(self.context, "portal_membership")\n+            return mtool.getMemberById(user_id)\n+\n+        return self._principal_search_results(\n+            search_for_principal, get_principal_by_id, "user", "userid"\n+        )\n+\n+    def _get_filtered_users(self, query, groups_filter, search_term, limit):\n+        """Filter or search users by id, fullname, email and/or groups.\n+\n+        Args:\n+            query (str): filter by query\n+            groups_filter (list of str): list of groups\n+            search_term (str): search by id, fullname, email\n+            limit (integer): limit result\n+\n+        Returns:\n+            list: list of users sorted by fullname\n+        """\n+        if search_term:\n+            users = self._user_search_results()\n+        else:\n+            results = self.acl_users.searchUsers(id=query, max_results=limit)\n+            users = [\n+                self.portal_membership.getMemberById(user["userid"]) for user in results\n+            ]\n         if groups_filter:\n             users = [\n                 user for user in users if set(user.getGroups()) & set(groups_filter)\n             ]\n-\n         return self._sort_users(users)\n \n     def has_permission_to_query(self):\n@@ -80,14 +130,13 @@ def has_permission_to_access_user_info(self):\n     def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n-            groups_filter = self.query.get(\n-                "groups-filter:list", self.query.get("groups-filter%3Alist", [])\n-            )\n-            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n-            if query or groups_filter:\n-                # Someone is searching users, check if they are authorized\n+            groups_filter = self.query.get("groups-filter:list", [])\n+            limit = self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0]\n+            if query or groups_filter or self.search_term or limit:\n                 if self.has_permission_to_query():\n-                    users = self._get_filtered_users(query, groups_filter, limit)\n+                    users = self._get_filtered_users(\n+                        query, groups_filter, self.search_term, limit\n+                    )\n                     result = []\n                     for user in users:\n                         serializer = queryMultiAdapter(\n@@ -99,7 +148,7 @@ def reply(self):\n                     self.request.response.setStatus(401)\n                     return\n             else:\n-                raise BadRequest("Query string supplied is not valid")\n+                raise BadRequest("Parameters supplied are not valid")\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if they are authorized\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex 005f86376..a9de8d8b2 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.22.1.dev0"\n+            "version": "8.23.1.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.req b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\nindex d87613371..80bbed34b 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n@@ -1,3 +1,3 @@\n-GET /plone/@users?query=noa HTTP/1.1\n+GET /plone/@users?query=oam HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex 2c940f0a4..d69cc2364 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -8,7 +8,7 @@ Content-Type: application/json\n         "email": "noam.chomsky@example.com",\n         "fullname": "Noam Avram Chomsky",\n         "groups": {\n-            "@id": "http://localhost:55001/plone/@users?query=noa",\n+            "@id": "http://localhost:55001/plone/@users?query=oam",\n             "items": [\n                 {\n                     "id": "AuthenticatedUsers",\ndiff --git a/src/plone/restapi/tests/http-examples/users_searched.req b/src/plone/restapi/tests/http-examples/users_searched.req\nnew file mode 100644\nindex 000000000..87cdda1d9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_searched.req\n@@ -0,0 +1,3 @@\n+GET /plone/@users?search=avram HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_searched.resp b/src/plone/restapi/tests/http-examples/users_searched.resp\nnew file mode 100644\nindex 000000000..a7d26d834\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_searched.resp\n@@ -0,0 +1,34 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+[\n+    {\n+        "@id": "http://localhost:55001/plone/@users/noam",\n+        "description": "Professor of Linguistics",\n+        "email": "noam.chomsky@example.com",\n+        "fullname": "Noam Avram Chomsky",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users?search=avram",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                },\n+                {\n+                    "id": "Reviewers",\n+                    "title": "Reviewers"\n+                }\n+            ],\n+            "items_total": 2\n+        },\n+        "home_page": "web.mit.edu/chomsky",\n+        "id": "noam",\n+        "location": "Cambridge, MA",\n+        "portrait": null,\n+        "roles": [\n+            "Member",\n+            "Reviewer"\n+        ],\n+        "username": "noam"\n+    }\n+]\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 849594388..fe5708b1d 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -936,7 +936,7 @@ def test_documentation_users_filtered_get(self):\n         api.group.add_user(groupname="Reviewers", username="noam")\n         transaction.commit()\n         # filter by username\n-        response = self.api_session.get("@users", params={"query": "noa"})\n+        response = self.api_session.get("@users", params={"query": "oam"})\n         save_request_and_response_for_docs("users_filtered_by_username", response)\n         # filter by groups\n         response = self.api_session.get(\n@@ -945,6 +945,22 @@ def test_documentation_users_filtered_get(self):\n         )\n         save_request_and_response_for_docs("users_filtered_by_groups", response)\n \n+    def test_documentation_users_searched_get(self):\n+        properties = {\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n+        )\n+        api.group.add_user(groupname="Reviewers", username="noam")\n+        transaction.commit()\n+        # search by fullname\n+        response = self.api_session.get("@users", params={"search": "avram"})\n+        save_request_and_response_for_docs("users_searched", response)\n+\n     def test_documentation_users_created(self):\n         response = self.api_session.post(\n             "/@users",\n'

