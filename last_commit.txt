Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T22:55:18+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/101e1ba64b13cb8ae2efe4511c2ae2cfe72520b9

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/243ca9ec.internal
A tox.ini
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..17f7b14\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "243ca9ec"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 85111f9..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,234 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-from optparse import OptionParser\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-\n-__version__ = "2015-07-01"\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n-\n-usage = """\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-"""\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option(\n-    "--version",\n-    action="store_true",\n-    default=False,\n-    help=("Return bootstrap.py version."),\n-)\n-parser.add_option(\n-    "-t",\n-    "--accept-buildout-test-releases",\n-    dest="accept_buildout_test_releases",\n-    action="store_true",\n-    default=False,\n-    help=(\n-        "Normally, if you do not specify a --buildout-version, "\n-        "the bootstrap script and buildout gets the newest "\n-        "*final* versions of zc.buildout and its recipes and "\n-        "extensions for you.  If you use this flag, "\n-        "bootstrap and buildout will get the newest releases "\n-        "even if they are alphas or betas."\n-    ),\n-)\n-parser.add_option(\n-    "-c",\n-    "--config-file",\n-    help=("Specify the path to the buildout configuration " "file to be used."),\n-)\n-parser.add_option(\n-    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n-)\n-parser.add_option(\n-    "--allow-site-packages",\n-    action="store_true",\n-    default=False,\n-    help=("Let bootstrap.py use existing site packages"),\n-)\n-parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n-parser.add_option(\n-    "--setuptools-to-dir",\n-    help=("Allow for re-use of existing directory of " "setuptools versions"),\n-)\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists("ez_setup.py"):\n-    exec(open("ez_setup.py").read(), ez)\n-else:\n-    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, "getsitepackages"):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args["version"] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args["to_dir"] = options.setuptools_to_dir\n-\n-ez["use_setuptools"](**setup_args)\n-import pkg_resources\n-import setuptools\n-\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [\n-    sys.executable,\n-    "-c",\n-    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n-    + "from setuptools.command.easy_install import main; main()",\n-    "-mZqNxd",\n-    tmpeggs,\n-]\n-\n-find_links = os.environ.get(\n-    "bootstrap-testing-find-links",\n-    options.find_links\n-    or (\n-        "http://downloads.buildout.org/"\n-        if options.accept_buildout_test_releases\n-        else None\n-    ),\n-)\n-if find_links:\n-    cmd.extend(["-f", find_links])\n-\n-requirement = "zc.buildout"\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-\n-    _final_parts = "*final-", "*final"\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == "*") and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = "==".join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-\n-\n-if subprocess.call(cmd) != 0:\n-    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-\n-if not [a for a in args if "=" not in a]:\n-    args.append("bootstrap")\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = ["-c", options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/243ca9ec.internal b/news/243ca9ec.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/243ca9ec.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9d0c563 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 3e076fd..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c830e4a\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.outputfilters\n+extras =\n+    test\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T22:56:50+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/35069816b3135abe50265b98aaa5c0c9cbd52827

chore: isort

Files changed:
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex b3328ad..1d839c4 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,11 +1,11 @@\n from Acquisition import aq_base\n+from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n-from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n \n \n try:\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 6d3b10b..3b87e13 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -5,8 +5,8 @@\n from bs4 import BeautifulSoup\n from DocumentTemplate.DT_Var import newline_to_br\n from DocumentTemplate.html_quote import html_quote\n-from plone.base.utils import safe_text\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.utils import safe_text\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T22:57:19+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/6468eb517c51727f351ee38cd1cbf3853c2f4991

chore: black

Files changed:
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 1d839c4..fc64540 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -23,9 +23,7 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n-@deprecate(\n-    "Import from plone.app.uuid.utils instead. To be removed in version 6"\n-)\n+@deprecate("Import from plone.app.uuid.utils instead. To be removed in version 6")\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the Physical Path"""\n     return new_uuidToObject(uuid, unrestricted=True)\ndiff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py\nindex e6d7de2..207e751 100644\n--- a/plone/outputfilters/mimetype.py\n+++ b/plone/outputfilters/mimetype.py\n@@ -2,7 +2,6 @@\n \n \n class text_plone_outputfilters_html(MimeTypeItem):\n-\n     __name__ = "Plone Output Filters HTML"\n     mimetypes = ("text/x-plone-outputfilters-html",)\n     binary = 0\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex d8bc86d..c3b194a 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -13,12 +13,10 @@\n \n @implementer(IImageCaptioningEnabler)\n class DummyImageCaptioningEnabler:\n-\n     available = True\n \n \n class PloneOutputfilters(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex 01515d9..3246774 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -28,7 +28,6 @@ def dummy_image():\n \n \n class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n-\n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n     image_id = "image.jpg"\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 7f1ff28..610d5ca 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -30,7 +30,6 @@ def dummy_image():\n \n \n class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):\n-\n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n     image_id = "image.jpg"\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex e148af4..e149e07 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -6,7 +6,6 @@\n \n \n class TransformsTestCase(unittest.TestCase):\n-\n     layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\nindex 22e98bd..c06fc08 100644\n--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n@@ -4,7 +4,6 @@\n \n @implementer(ITransform)\n class plone_outputfilters_html_to_html:\n-\n     __name__ = "plone_outputfilters_html_to_html"\n     inputs = ("text/x-plone-outputfilters-html",)\n     output = "text/html"\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T22:59:04+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/73dcc0644bad1ab6b6b667a7bedb3d897d628fed

chore: zpretty

Files changed:
M plone/outputfilters/browser/captioned_image.pt
M plone/outputfilters/browser/configure.zcml
M plone/outputfilters/configure.zcml
M plone/outputfilters/filters/configure.zcml

b'diff --git a/plone/outputfilters/browser/captioned_image.pt b/plone/outputfilters/browser/captioned_image.pt\nindex 637ba2a..96486d8 100644\n--- a/plone/outputfilters/browser/captioned_image.pt\n+++ b/plone/outputfilters/browser/captioned_image.pt\n@@ -1,4 +1,8 @@\n-<figure tal:attributes="class options/class;">\n+<figure tal:attributes="\n+          class options/class;\n+        ">\n   <picture tal:replace="structure options/tag"></picture>\n-  <figcaption class="image-caption" tal:content="options/caption|nothing"></figcaption>\n+  <figcaption class="image-caption"\n+              tal:content="options/caption|nothing"\n+  ></figcaption>\n </figure>\ndiff --git a/plone/outputfilters/browser/configure.zcml b/plone/outputfilters/browser/configure.zcml\nindex 2d4ebe3..070a346 100644\n--- a/plone/outputfilters/browser/configure.zcml\n+++ b/plone/outputfilters/browser/configure.zcml\n@@ -1,20 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n   <browser:page\n-    name="plone.outputfilters_captioned_image"\n-    for="*"\n-    class=".captioned_image.CaptionedImageView"\n-    template="captioned_image.pt"\n-    permission="zope.Public"\n-    />\n+      name="plone.outputfilters_captioned_image"\n+      for="*"\n+      class=".captioned_image.CaptionedImageView"\n+      template="captioned_image.pt"\n+      permission="zope.Public"\n+      />\n \n   <browser:page\n-    name="resolveuid"\n-    for="*"\n-    class=".resolveuid.ResolveUIDView"\n-    permission="zope.Public"\n-    />\n+      name="resolveuid"\n+      for="*"\n+      class=".resolveuid.ResolveUIDView"\n+      permission="zope.Public"\n+      />\n \n </configure>\ndiff --git a/plone/outputfilters/configure.zcml b/plone/outputfilters/configure.zcml\nindex 0b758ef..d6aa270 100644\n--- a/plone/outputfilters/configure.zcml\n+++ b/plone/outputfilters/configure.zcml\n@@ -1,25 +1,27 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.outputfilters">\n+    i18n_domain="plone.outputfilters"\n+    >\n \n-  <include package=".browser"/>\n-  <include package=".filters"/>\n+  <include package=".browser" />\n+  <include package=".filters" />\n \n   <gs:registerProfile\n       name="default"\n       title="HTML Output Filters"\n-      directory="profiles/default"\n       description="Framework for applying filters to HTML as it is rendered."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n \n   <gs:importStep\n       name="plone_outputfilters_various"\n       title="HTML Output Filters installation"\n       description="Import various plone.outputfilters"\n-      handler="plone.outputfilters.setuphandlers.importVarious">\n-      <depends name="componentregistry"/>\n+      handler="plone.outputfilters.setuphandlers.importVarious"\n+      >\n+    <depends name="componentregistry" />\n   </gs:importStep>\n \n </configure>\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 4376517..0cd8755 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -1,28 +1,35 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    >\n \n   <adapter\n-    provides="..interfaces.IFilter"\n-    name="picture_variants"\n-    for="* *"\n-    factory=".picture_variants.PictureVariantsFilter"\n-    />\n+      factory=".picture_variants.PictureVariantsFilter"\n+      provides="..interfaces.IFilter"\n+      for="*\n+           *"\n+      name="picture_variants"\n+      />\n \n   <adapter\n-    provides="..interfaces.IFilter"\n-    name="resolveuid_and_caption"\n-    for="* *"\n-    factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n-    />\n+      factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n+      provides="..interfaces.IFilter"\n+      for="*\n+           *"\n+      name="resolveuid_and_caption"\n+      />\n \n   <!-- in Plone 5, we always resolve uids -->\n-  <utility factory=".resolveuid_and_caption.ResolveUidsAlwaysEnabled"\n-           name="plone5-always-enabled"\n-           zcml:condition="have plone-5" />\n+  <utility\n+      factory=".resolveuid_and_caption.ResolveUidsAlwaysEnabled"\n+      name="plone5-always-enabled"\n+      zcml:condition="have plone-5"\n+      />\n \n-  <utility factory=".resolveuid_and_caption.ImageCaptioningEnabler"\n-           name="image-captioning-enabler" />\n+  <utility\n+      factory=".resolveuid_and_caption.ImageCaptioningEnabler"\n+      name="image-captioning-enabler"\n+      />\n \n </configure>\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T23:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/2bd1ef661bf63385beedfef2e470d255942b43ec

feat: configue codespell

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 9d0c563..8e161cc 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,6 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+\n+[tool.codespell]\n+ignore-words-list = "discreet"\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T23:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/df1756cd20528856b3fd9274a3e6c9882a3e36c7

feat: codespell

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 3b87e13..0fdb256 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -214,9 +214,9 @@ def __call__(self, data):\n                 # Check to see if the alt / title tags need setting\n                 title = safe_text(aq_acquire(fullimage, "Title")())\n                 if not attributes.get("alt"):\n-                    # bettr an emty alt tag than none. This avoid\'s screen readers\n+                    # better an empty alt tag than none. This avoids screen readers\n                     # to read the file name instead. A better fallback would be\n-                    # a fallback alt text comming from the img object.\n+                    # a fallback alt text coming from the img object.\n                     attributes["alt"] = ""\n                 if "title" not in attributes:\n                     attributes["title"] = title\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 610d5ca..7b5dfd5 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -248,7 +248,7 @@ def test_resolve_unresolvable_uids(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolve_uids_non_AT_content(self):\n-        # UUIDs can be derefenced as long as they are in the UID index\n+        # UUIDs can be dereferenced as long as they are in the UID index\n         self._makeDummyContent()\n         text_in = """<a href="resolveuid/foo">foo</a>"""\n         text_out = """<a href="http://nohost/plone/foo">foo</a>"""\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T23:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/6df27936366e7b7e1404a645d492994358773345

feat: flake8

Files changed:
M plone/outputfilters/__init__.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_picture_variants.py

b'diff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py\nindex aa75185..e1a001d 100644\n--- a/plone/outputfilters/__init__.py\n+++ b/plone/outputfilters/__init__.py\n@@ -1,6 +1,5 @@\n def apply_filters(filters, data):\n-    by_order = lambda x: x.order\n-    filters = sorted(filters, key=by_order)\n+    filters = sorted(filters, key=lambda x: x.order)\n     for filter in filters:\n         if filter.is_enabled():\n             res = filter(data)\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 0fdb256..e957172 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,6 +1,5 @@\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n-from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n from DocumentTemplate.DT_Var import newline_to_br\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex 3246774..8e8d074 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -245,10 +245,5 @@ def test_parsing_with_nonexisting_srcset(self):\n         )\n         res = self.parser(text)\n         self.assertTrue(res)\n-        text_out = """\n-<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n-        """.format(\n-            uid=self.UID\n-        )\n         # verify that tag was not converted:\n         self.assertTrue("data-picturevariant" in res)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T23:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/0c1be5196ceb3974fa73ce96511ae4a1228e6f16

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex be350ba..6187077 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,6 +58,7 @@ def read(filename):\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "Products.CMFCore",\n         "Products.GenericSetup",\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T23:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/1f4c17fe03dddffa0faf4943d99e44278d144f7f

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 8e161cc..ec374bd 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,6 +60,8 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+beautifulsoup4 = [\'bs4\', ]\n+ignore-packages = [\'zope.app.component\']\n \n [tool.codespell]\n ignore-words-list = "discreet"\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-14T23:31:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/a858148af91ee5b4136ecf017ebe0fe9e03da9f8

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 6187077..dd579e4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -60,24 +60,25 @@ def read(filename):\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        "Products.CMFCore",\n+        "beautifulsoup4",\n+        "DocumentTemplate",\n         "Products.GenericSetup",\n         "Products.MimetypesRegistry",\n         "Products.PortalTransforms>=2.0",\n-        "plone.namedfile",\n         "plone.app.uuid>=2.2.0",\n-        "setuptools",\n-        "unidecode",\n-        "zope.deprecation",\n-        "beautifulsoup4",\n-        "lxml",\n+        "plone.base",\n+        "plone.namedfile",\n+        "plone.registry",\n+        "plone.uuid",\n+        "zope.cachedescriptors",\n     ],\n     extras_require={\n         "test": [\n-            "plone.app.contenttypes",\n+            "plone.app.contenttypes[test]",\n             "plone.app.testing",\n-            "plone.app.robotframework",\n+            "plone.app.textfield",\n             "plone.namedfile",\n+            "plone.testing",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-15T23:13:00+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/135447aad7dc5e051e1ec0586b612bc74ef4f38a

chore: update deprecation notices

Files changed:
M plone/outputfilters/browser/resolveuid.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex fc64540..093dde1 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -14,7 +14,9 @@\n     from zope.app.component.hooks import getSite\n \n \n-@deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n+@deprecate(\n+    "Please use plone.app.uuid.utils.uuidToURL instead. Will be removed in Plone 7"\n+)\n def uuidToURL(uuid):\n     """Resolves a UUID to a URL via the UID index of portal_catalog."""\n     catalog = getToolByName(getSite(), "portal_catalog")\n@@ -23,7 +25,7 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n-@deprecate("Import from plone.app.uuid.utils instead. To be removed in version 6")\n+@deprecate("Import from plone.app.uuid.utils instead. Will be removed in Plone 7")\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the Physical Path"""\n     return new_uuidToObject(uuid, unrestricted=True)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2023-03-16T10:30:12+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/1ccb4dce08047a58bdf25045d74c1dd5da6e81d9

Merge pull request #57 from plone/config-with-default-template-e1483c4e

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/243ca9ec.internal
A tox.ini
M plone/outputfilters/__init__.py
M plone/outputfilters/browser/captioned_image.pt
M plone/outputfilters/browser/configure.zcml
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/configure.zcml
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M pyproject.toml
M setup.cfg
M setup.py
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..17f7b14\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "243ca9ec"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 85111f9..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,234 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-from optparse import OptionParser\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-\n-__version__ = "2015-07-01"\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n-\n-usage = """\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-"""\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option(\n-    "--version",\n-    action="store_true",\n-    default=False,\n-    help=("Return bootstrap.py version."),\n-)\n-parser.add_option(\n-    "-t",\n-    "--accept-buildout-test-releases",\n-    dest="accept_buildout_test_releases",\n-    action="store_true",\n-    default=False,\n-    help=(\n-        "Normally, if you do not specify a --buildout-version, "\n-        "the bootstrap script and buildout gets the newest "\n-        "*final* versions of zc.buildout and its recipes and "\n-        "extensions for you.  If you use this flag, "\n-        "bootstrap and buildout will get the newest releases "\n-        "even if they are alphas or betas."\n-    ),\n-)\n-parser.add_option(\n-    "-c",\n-    "--config-file",\n-    help=("Specify the path to the buildout configuration " "file to be used."),\n-)\n-parser.add_option(\n-    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n-)\n-parser.add_option(\n-    "--allow-site-packages",\n-    action="store_true",\n-    default=False,\n-    help=("Let bootstrap.py use existing site packages"),\n-)\n-parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n-parser.add_option(\n-    "--setuptools-to-dir",\n-    help=("Allow for re-use of existing directory of " "setuptools versions"),\n-)\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists("ez_setup.py"):\n-    exec(open("ez_setup.py").read(), ez)\n-else:\n-    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, "getsitepackages"):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args["version"] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args["to_dir"] = options.setuptools_to_dir\n-\n-ez["use_setuptools"](**setup_args)\n-import pkg_resources\n-import setuptools\n-\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [\n-    sys.executable,\n-    "-c",\n-    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n-    + "from setuptools.command.easy_install import main; main()",\n-    "-mZqNxd",\n-    tmpeggs,\n-]\n-\n-find_links = os.environ.get(\n-    "bootstrap-testing-find-links",\n-    options.find_links\n-    or (\n-        "http://downloads.buildout.org/"\n-        if options.accept_buildout_test_releases\n-        else None\n-    ),\n-)\n-if find_links:\n-    cmd.extend(["-f", find_links])\n-\n-requirement = "zc.buildout"\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-\n-    _final_parts = "*final-", "*final"\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == "*") and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = "==".join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-\n-\n-if subprocess.call(cmd) != 0:\n-    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-\n-if not [a for a in args if "=" not in a]:\n-    args.append("bootstrap")\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = ["-c", options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/243ca9ec.internal b/news/243ca9ec.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/243ca9ec.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py\nindex aa75185..e1a001d 100644\n--- a/plone/outputfilters/__init__.py\n+++ b/plone/outputfilters/__init__.py\n@@ -1,6 +1,5 @@\n def apply_filters(filters, data):\n-    by_order = lambda x: x.order\n-    filters = sorted(filters, key=by_order)\n+    filters = sorted(filters, key=lambda x: x.order)\n     for filter in filters:\n         if filter.is_enabled():\n             res = filter(data)\ndiff --git a/plone/outputfilters/browser/captioned_image.pt b/plone/outputfilters/browser/captioned_image.pt\nindex 637ba2a..96486d8 100644\n--- a/plone/outputfilters/browser/captioned_image.pt\n+++ b/plone/outputfilters/browser/captioned_image.pt\n@@ -1,4 +1,8 @@\n-<figure tal:attributes="class options/class;">\n+<figure tal:attributes="\n+          class options/class;\n+        ">\n   <picture tal:replace="structure options/tag"></picture>\n-  <figcaption class="image-caption" tal:content="options/caption|nothing"></figcaption>\n+  <figcaption class="image-caption"\n+              tal:content="options/caption|nothing"\n+  ></figcaption>\n </figure>\ndiff --git a/plone/outputfilters/browser/configure.zcml b/plone/outputfilters/browser/configure.zcml\nindex 2d4ebe3..070a346 100644\n--- a/plone/outputfilters/browser/configure.zcml\n+++ b/plone/outputfilters/browser/configure.zcml\n@@ -1,20 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n   <browser:page\n-    name="plone.outputfilters_captioned_image"\n-    for="*"\n-    class=".captioned_image.CaptionedImageView"\n-    template="captioned_image.pt"\n-    permission="zope.Public"\n-    />\n+      name="plone.outputfilters_captioned_image"\n+      for="*"\n+      class=".captioned_image.CaptionedImageView"\n+      template="captioned_image.pt"\n+      permission="zope.Public"\n+      />\n \n   <browser:page\n-    name="resolveuid"\n-    for="*"\n-    class=".resolveuid.ResolveUIDView"\n-    permission="zope.Public"\n-    />\n+      name="resolveuid"\n+      for="*"\n+      class=".resolveuid.ResolveUIDView"\n+      permission="zope.Public"\n+      />\n \n </configure>\ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex b3328ad..093dde1 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,11 +1,11 @@\n from Acquisition import aq_base\n+from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n-from plone.app.uuid.utils import uuidToObject as new_uuidToObject\n \n \n try:\n@@ -14,7 +14,9 @@\n     from zope.app.component.hooks import getSite\n \n \n-@deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n+@deprecate(\n+    "Please use plone.app.uuid.utils.uuidToURL instead. Will be removed in Plone 7"\n+)\n def uuidToURL(uuid):\n     """Resolves a UUID to a URL via the UID index of portal_catalog."""\n     catalog = getToolByName(getSite(), "portal_catalog")\n@@ -23,9 +25,7 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n-@deprecate(\n-    "Import from plone.app.uuid.utils instead. To be removed in version 6"\n-)\n+@deprecate("Import from plone.app.uuid.utils instead. Will be removed in Plone 7")\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the Physical Path"""\n     return new_uuidToObject(uuid, unrestricted=True)\ndiff --git a/plone/outputfilters/configure.zcml b/plone/outputfilters/configure.zcml\nindex 0b758ef..d6aa270 100644\n--- a/plone/outputfilters/configure.zcml\n+++ b/plone/outputfilters/configure.zcml\n@@ -1,25 +1,27 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:gs="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.outputfilters">\n+    i18n_domain="plone.outputfilters"\n+    >\n \n-  <include package=".browser"/>\n-  <include package=".filters"/>\n+  <include package=".browser" />\n+  <include package=".filters" />\n \n   <gs:registerProfile\n       name="default"\n       title="HTML Output Filters"\n-      directory="profiles/default"\n       description="Framework for applying filters to HTML as it is rendered."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n \n   <gs:importStep\n       name="plone_outputfilters_various"\n       title="HTML Output Filters installation"\n       description="Import various plone.outputfilters"\n-      handler="plone.outputfilters.setuphandlers.importVarious">\n-      <depends name="componentregistry"/>\n+      handler="plone.outputfilters.setuphandlers.importVarious"\n+      >\n+    <depends name="componentregistry" />\n   </gs:importStep>\n \n </configure>\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 4376517..0cd8755 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -1,28 +1,35 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    >\n \n   <adapter\n-    provides="..interfaces.IFilter"\n-    name="picture_variants"\n-    for="* *"\n-    factory=".picture_variants.PictureVariantsFilter"\n-    />\n+      factory=".picture_variants.PictureVariantsFilter"\n+      provides="..interfaces.IFilter"\n+      for="*\n+           *"\n+      name="picture_variants"\n+      />\n \n   <adapter\n-    provides="..interfaces.IFilter"\n-    name="resolveuid_and_caption"\n-    for="* *"\n-    factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n-    />\n+      factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n+      provides="..interfaces.IFilter"\n+      for="*\n+           *"\n+      name="resolveuid_and_caption"\n+      />\n \n   <!-- in Plone 5, we always resolve uids -->\n-  <utility factory=".resolveuid_and_caption.ResolveUidsAlwaysEnabled"\n-           name="plone5-always-enabled"\n-           zcml:condition="have plone-5" />\n+  <utility\n+      factory=".resolveuid_and_caption.ResolveUidsAlwaysEnabled"\n+      name="plone5-always-enabled"\n+      zcml:condition="have plone-5"\n+      />\n \n-  <utility factory=".resolveuid_and_caption.ImageCaptioningEnabler"\n-           name="image-captioning-enabler" />\n+  <utility\n+      factory=".resolveuid_and_caption.ImageCaptioningEnabler"\n+      name="image-captioning-enabler"\n+      />\n \n </configure>\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 6d3b10b..e957172 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,12 +1,11 @@\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n-from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n from DocumentTemplate.DT_Var import newline_to_br\n from DocumentTemplate.html_quote import html_quote\n-from plone.base.utils import safe_text\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.utils import safe_text\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n@@ -214,9 +213,9 @@ def __call__(self, data):\n                 # Check to see if the alt / title tags need setting\n                 title = safe_text(aq_acquire(fullimage, "Title")())\n                 if not attributes.get("alt"):\n-                    # bettr an emty alt tag than none. This avoid\'s screen readers\n+                    # better an empty alt tag than none. This avoids screen readers\n                     # to read the file name instead. A better fallback would be\n-                    # a fallback alt text comming from the img object.\n+                    # a fallback alt text coming from the img object.\n                     attributes["alt"] = ""\n                 if "title" not in attributes:\n                     attributes["title"] = title\ndiff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py\nindex e6d7de2..207e751 100644\n--- a/plone/outputfilters/mimetype.py\n+++ b/plone/outputfilters/mimetype.py\n@@ -2,7 +2,6 @@\n \n \n class text_plone_outputfilters_html(MimeTypeItem):\n-\n     __name__ = "Plone Output Filters HTML"\n     mimetypes = ("text/x-plone-outputfilters-html",)\n     binary = 0\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex d8bc86d..c3b194a 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -13,12 +13,10 @@\n \n @implementer(IImageCaptioningEnabler)\n class DummyImageCaptioningEnabler:\n-\n     available = True\n \n \n class PloneOutputfilters(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex 01515d9..8e8d074 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -28,7 +28,6 @@ def dummy_image():\n \n \n class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n-\n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n     image_id = "image.jpg"\n@@ -246,10 +245,5 @@ def test_parsing_with_nonexisting_srcset(self):\n         )\n         res = self.parser(text)\n         self.assertTrue(res)\n-        text_out = """\n-<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n-        """.format(\n-            uid=self.UID\n-        )\n         # verify that tag was not converted:\n         self.assertTrue("data-picturevariant" in res)\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 7f1ff28..7b5dfd5 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -30,7 +30,6 @@ def dummy_image():\n \n \n class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):\n-\n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n     image_id = "image.jpg"\n@@ -249,7 +248,7 @@ def test_resolve_unresolvable_uids(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolve_uids_non_AT_content(self):\n-        # UUIDs can be derefenced as long as they are in the UID index\n+        # UUIDs can be dereferenced as long as they are in the UID index\n         self._makeDummyContent()\n         text_in = """<a href="resolveuid/foo">foo</a>"""\n         text_out = """<a href="http://nohost/plone/foo">foo</a>"""\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex e148af4..e149e07 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -6,7 +6,6 @@\n \n \n class TransformsTestCase(unittest.TestCase):\n-\n     layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\nindex 22e98bd..c06fc08 100644\n--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n@@ -4,7 +4,6 @@\n \n @implementer(ITransform)\n class plone_outputfilters_html_to_html:\n-\n     __name__ = "plone_outputfilters_html_to_html"\n     inputs = ("text/x-plone-outputfilters-html",)\n     output = "text/html"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..ec374bd 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,48 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+beautifulsoup4 = [\'bs4\', ]\n+ignore-packages = [\'zope.app.component\']\n+\n+[tool.codespell]\n+ignore-words-list = "discreet"\ndiff --git a/setup.cfg b/setup.cfg\nindex 3e076fd..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex be350ba..dd579e4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,25 +58,27 @@ def read(filename):\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        "Products.CMFCore",\n+        "beautifulsoup4",\n+        "DocumentTemplate",\n         "Products.GenericSetup",\n         "Products.MimetypesRegistry",\n         "Products.PortalTransforms>=2.0",\n-        "plone.namedfile",\n         "plone.app.uuid>=2.2.0",\n-        "setuptools",\n-        "unidecode",\n-        "zope.deprecation",\n-        "beautifulsoup4",\n-        "lxml",\n+        "plone.base",\n+        "plone.namedfile",\n+        "plone.registry",\n+        "plone.uuid",\n+        "zope.cachedescriptors",\n     ],\n     extras_require={\n         "test": [\n-            "plone.app.contenttypes",\n+            "plone.app.contenttypes[test]",\n             "plone.app.testing",\n-            "plone.app.robotframework",\n+            "plone.app.textfield",\n             "plone.namedfile",\n+            "plone.testing",\n         ]\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c830e4a\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.outputfilters\n+extras =\n+    test\n'

