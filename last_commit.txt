Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-24T17:57:17+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/fbbc911e9e8566e33d7bc17ef1a0b4bb6e6a4aad

Move PasswordResetTool from own product to here

Files changed:
A Products/CMFPlone/PasswordResetTool.py
A Products/CMFPlone/browser/password_reset.py
A Products/CMFPlone/browser/templates/explainPWResetTool.pt
A Products/CMFPlone/browser/templates/mail_password_form.pt
A Products/CMFPlone/browser/templates/mail_password_response.pt
A Products/CMFPlone/browser/templates/mail_password_template.pt
A Products/CMFPlone/browser/templates/pwreset_expired.pt
A Products/CMFPlone/browser/templates/pwreset_finish.pt
A Products/CMFPlone/browser/templates/pwreset_form.pt
A Products/CMFPlone/browser/templates/pwreset_invalid.pt
A Products/CMFPlone/browser/templates/registered_notify_template.pt
A Products/CMFPlone/interfaces/password_reset.py
A Products/CMFPlone/tests/pwreset_browser.txt
A Products/CMFPlone/tests/test_passwordreset.py
M CHANGES.rst
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/browser/configure.zcml
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/profiles/default/metadata.xml
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/tests/test_functional.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b1d46c1..b9e126e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -54,6 +54,8 @@ New features:
 - Include mockup 2.4.0.
   [thet]
 
+- PasswordResetTool moved from its own package to here
+  [tomgross]
 - Prevent workflow menu overflowing in toolbar [MatthewWilkes]
 
 - Add default icon for top-level contentview and contentmenu toolbar entries [alecm]
diff --git a/Products/CMFPlone/PasswordResetTool.py b/Products/CMFPlone/PasswordResetTool.py
new file mode 100644
index 0000000..246645b
--- /dev/null
+++ b/Products/CMFPlone/PasswordResetTool.py
@@ -0,0 +1,247 @@
+"""PasswordResetTool.py
+
+Mailback password reset product for CMF.
+Author: J Cameron Cooper, Sept 2003
+"""
+from Products.CMFCore.utils import UniqueObject
+from Products.CMFCore.utils import getToolByName
+from OFS.SimpleItem import SimpleItem
+from App.class_init import InitializeClass
+from AccessControl import ClassSecurityInfo
+from AccessControl import ModuleSecurityInfo
+from BTrees.OOBTree import OOBTree
+from plone.uuid.interfaces import IUUIDGenerator
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFPlone.interfaces import IPWResetTool
+from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.RegistrationTool import get_member_by_login_name
+
+import datetime
+from zope.component import getUtility
+from zope.interface import implementer
+
+module_security = ModuleSecurityInfo('Products.CMFPlone.PasswordResetTool')
+
+module_security.declarePublic('InvalidRequestError')
+class InvalidRequestError(Exception):
+    """ Request reset URL is invalid """
+    def __init__(self, value=''):
+        self.value = value
+
+    def __str__(self):
+        return repr(self.value)
+
+module_security.declarePublic('ExpiredRequestError')
+class ExpiredRequestError(InvalidRequestError):
+    """ Request reset URL is expired """
+
+
+@implementer(IPWResetTool)
+class PasswordResetTool (UniqueObject, SimpleItem):
+    """Provides a default implementation for a password reset scheme.
+
+    From a 'forgotten password' template, you submit your username to
+    a handler script that does a 'requestReset', and sends an email
+    with an unguessable unique hash in a url as built by 'constructURL'
+    to the user.
+
+    The user visits that URL (the 'reset form') and enters their username,
+    """
+
+    id = 'portal_password_reset'
+    meta_type = 'Password Reset Tool'
+
+    security = ClassSecurityInfo()
+
+    def __init__(self):
+        self._requests = OOBTree()
+
+    ## Internal attributes
+    _user_check = True
+    _timedelta = 7   # DAYS
+
+    ## Interface fulfillment ##
+    security.declareProtected(ManagePortal, 'requestReset')
+
+    def requestReset(self, userid):
+        """Ask the system to start the password reset procedure for
+        user 'userid'.
+
+        Returns a dictionary with the random string that must be
+        used to reset the password in 'randomstring', the expiration date
+        as a datetime in 'expires', and the userid (for convenience) in
+        'userid'. Returns None if no such user.
+        """
+        if not self.getValidUser(userid):
+            return None
+        randomstring = self.uniqueString(userid)
+        expiry = self.expirationDate()
+        self._requests[randomstring] = (userid, expiry)
+
+        self.clearExpired(10)   # clear out untouched records more than 10 days old
+        # this is a cheap sort of "automatic" clearing
+        self._p_changed = 1
+
+        retval = {}
+        retval['randomstring'] = randomstring
+        retval['expires'] = expiry
+        retval['userid'] = userid
+        return retval
+
+    security.declarePublic('resetPassword')
+
+    def resetPassword(self, userid, randomstring, password):
+        """Set the password (in 'password') for the user who maps to
+        the string in 'randomstring' iff the entered 'userid' is equal
+        to the mapped userid. (This can be turned off with the
+        'toggleUserCheck' method.)
+
+        Note that this method will *not* check password validity: this
+        must be done by the caller.
+
+        Throws an 'ExpiredRequestError' if request is expired.
+        Throws an 'InvalidRequestError' if no such record exists,
+        or 'userid' is not in the record.
+        """
+        if get_member_by_login_name:
+            found_member = get_member_by_login_name(
+                self, userid, raise_exceptions=False)
+            if found_member is not None:
+                userid = found_member.getId()
+        try:
+            stored_user, expiry = self._requests[randomstring]
+        except KeyError:
+            raise InvalidRequestError
+
+        if self.checkUser() and (userid != stored_user):
+            raise InvalidRequestError
+        if self.expired(expiry):
+            del self._requests[randomstring]
+            self._p_changed = 1
+            raise ExpiredRequestError
+
+        member = self.getValidUser(stored_user)
+        if not member:
+            raise InvalidRequestError
+
+        # actually change password
+        user = member.getUser()
+        uf = getToolByName(self, 'acl_users')
+        uf.userSetPassword(user.getUserId(), password)
+        member.setMemberProperties(dict(must_change_password=0))
+
+        # clean out the request
+        del self._requests[randomstring]
+        self._p_changed = 1
+    ## Implementation ##
+
+    # external
+
+    security.declareProtected(ManagePortal, 'setExpirationTimeout')
+
+    def setExpirationTimeout(self, timedelta):
+        """Set the length of time a reset request will be valid in days.
+        """
+        self._timedelta = abs(timedelta)
+
+    security.declarePublic('getExpirationTimeout')
+
+    def getExpirationTimeout(self):
+        """Get the length of time a reset request will be valid.
+        """
+        return self._timedelta
+
+    security.declarePublic('checkUser')
+
+    def checkUser(self):
+        """Returns a boolean representing the state of 'user check' as described
+        in 'toggleUserCheck'. True means on, and is the default."""
+        return self._user_check
+
+    security.declarePublic('verifyKey')
+
+    def verifyKey(self, key):
+        """Verify a key. Raises an exception if the key is invalid or expired.
+        """
+        try:
+            u, expiry = self._requests[key]
+        except KeyError:
+            raise InvalidRequestError
+
+        if self.expired(expiry):
+            raise ExpiredRequestError
+
+        if not self.getValidUser(u):
+            raise InvalidRequestError('No such user')
+
+    security.declareProtected(ManagePortal, 'getStats')
+
+
+    security.declarePrivate('clearExpired')
+
+    def clearExpired(self, days=0):
+        """Destroys all expired reset request records.
+        Parameter controls how many days past expired it must be to disappear.
+        """
+        now = datetime.datetime.utcnow()
+        for key, record in self._requests.items():
+            stored_user, expiry = record
+            if self.expired(expiry, now - datetime.timedelta(days=days)):
+                del self._requests[key]
+                self._p_changed = 1
+    # customization points
+
+    security.declarePrivate('uniqueString')
+
+    def uniqueString(self, userid):
+        """Returns a string that is random and unguessable, or at
+        least as close as possible.
+
+        This is used by 'requestReset' to generate the auth
+        string. Override if you wish different format.
+
+        This implementation ignores userid and simply generates a
+        UUID. That parameter is for convenience of extenders, and
+        will be passed properly in the default implementation.
+        """
+        uuid_generator = getUtility(IUUIDGenerator)
+        return uuid_generator()
+
+    security.declarePrivate('expirationDate')
+
+    def expirationDate(self):
+        """Returns a DateTime for exipiry of a request from the
+        current time.
+
+        This is used by housekeeping methods (like clearEpired)
+        and stored in reset request records."""
+        return datetime.datetime.utcnow() + datetime.timedelta(days=self._timedelta)
+
+    security.declarePrivate('getValidUser')
+
+    def getValidUser(self, userid):
+        """Returns the member with 'userid' if available and None otherwise."""
+        if get_member_by_login_name:
+            registry = getUtility(IRegistry)
+            settings = registry.forInterface(ISecuritySchema, prefix='plone')
+
+            if settings.use_email_as_login:
+                return get_member_by_login_name(
+                    self, userid, raise_exceptions=False)
+        membertool = getToolByName(self, 'portal_membership')
+        return membertool.getMemberById(userid)
+
+
+    security.declarePrivate('expired')
+
+    def expired(self, dt, now=None):
+        """Tells whether a DateTime or timestamp 'datetime' is expired
+        with regards to either 'now', if provided, or the current
+        time."""
+        if not now:
+            now = datetime.datetime.utcnow()
+        return now >= dt
+
+
+InitializeClass(PasswordResetTool)
\ No newline at end of file
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index e4ebd3c..c4dbf71 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -18,12 +18,13 @@
 from Products.CMFPlone.permissions import ManagePortal
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
 from Products.CMFPlone.PloneTool import EMAIL_RE
+from Products.CMFPlone import PloneMessageFactory as _
 from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.permissions import SetOwnPassword
 from smtplib import SMTPException, SMTPRecipientsRefused
 from zope.component import getUtility
-from zope.i18nmessageid import MessageFactory
+from zope.component import getMultiAdapter
 from zope.schema import ValidationError
 import random
 import re
@@ -33,8 +34,6 @@
 # - remove vowels to avoid spelling words
 invalid_password_chars = ['a', 'e', 'i', 'o', 'u', 'y', 'l', 'q']
 
-_ = MessageFactory('plone')
-
 
 def getValidPasswordChars():
     password_chars = []
@@ -368,8 +367,10 @@ def mailPassword(self, login, REQUEST, immediate=False):
 
         registry = getUtility(IRegistry)
         encoding = registry.get('plone.email_charset', 'utf-8')
-        mail_text = self.mail_password_template(
-            self, REQUEST, member=member, reset=reset,
+        mail_password_template = getMultiAdapter(
+            (self, self.REQUEST), name='mail_password_template')
+        mail_text = mail_password_template(
+            member=member, reset=reset,
             password=member.getPassword(), charset=encoding)
         # The mail headers are not properly encoded we need to extract
         # them and let MailHost manage the encoding.
@@ -391,12 +392,11 @@ def mailPassword(self, login, REQUEST, immediate=False):
                 _(u'Recipient address rejected by server.'))
         except SMTPException as e:
             raise(e)
-        # return the rendered template "mail_password_response.pt"
-        # (in Products.PasswordResetTool)
-        return self.mail_password_response(self, REQUEST)
+        mail_password_response = getMultiAdapter(
+            (self, self.REQUEST), name='mail_password_response')
+        return mail_password_response()
 
     security.declarePublic('registeredNotify')
-
     def registeredNotify(self, new_member_id):
         # Wrapper around registeredNotify.
         membership = getToolByName(self, 'portal_membership')
@@ -422,9 +422,10 @@ def registeredNotify(self, new_member_id):
         # don't need to worry about 'UseMailHost' permissions).
         registry = getUtility(IRegistry)
         encoding = registry.get('plone.email_charset', 'utf-8')
-        mail_text = self.registered_notify_template(
-            self, self.REQUEST, member=member, reset=reset, email=email,
-            charset=encoding)
+        registered_notify_template = getMultiAdapter(
+            (self, self.REQUEST), name='registered_notify_template')
+        mail_text = registered_notify_template(
+            member=member, reset=reset, email=email, charset=encoding)
 
         # The mail headers are not properly encoded we need to extract
         # them and let MailHost manage the encoding.
@@ -439,7 +440,9 @@ def registeredNotify(self, new_member_id):
         host.send(mail_text, m_to, m_from, subject=subject, charset=encoding,
                   msg_type=msg_type, immediate=True)
 
-        return self.mail_password_response(self, self.REQUEST)
+        mail_password_response = getMultiAdapter(
+            (self, self.REQUEST), name='mail_password_response')
+        return mail_password_response()
 
     security.declareProtected(ManagePortal, 'editMember')
 
diff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml
index 2b70f9e..946f954 100644
--- a/Products/CMFPlone/browser/configure.zcml
+++ b/Products/CMFPlone/browser/configure.zcml
@@ -225,4 +225,49 @@
       template="templates/colophon.pt"
       />
 
+  <browser:page
+      name="mail_password_template"
+      for="*"
+      class=".password_reset.PasswordResetToolView"
+      template="templates/mail_password_template.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="registered_notify_template"
+      for="*"
+      class=".password_reset.PasswordResetToolView"
+      template="templates/registered_notify_template.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="mail_password_form"
+      for="*"
+      template="templates/mail_password_form.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="mail_password_response"
+      for="*"
+      template="templates/mail_password_response.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="passwordreset"
+      for="*"
+      class=".password_reset.PasswordResetView"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="explainPWResetTool"
+      for="Products.CMFPlone.interfaces.IPWResetTool"
+      class=".password_reset.ExplainPWResetToolView"
+      template="templates/explainPWResetTool.pt"
+      permission="zope2.ViewManagementScreens"
+      />
+
 </configure>
diff --git a/Products/CMFPlone/browser/password_reset.py b/Products/CMFPlone/browser/password_reset.py
new file mode 100644
index 0000000..c5f83b3
--- /dev/null
+++ b/Products/CMFPlone/browser/password_reset.py
@@ -0,0 +1,167 @@
+from zope.interface import implementer
+from zope.component import getMultiAdapter
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.memoize import view
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode
+from Products.CMFPlone.utils import safeToInt
+from Products.CMFPlone.PasswordResetTool import ExpiredRequestError
+from Products.CMFPlone.PasswordResetTool import InvalidRequestError
+from zope.i18n import translate
+from zope.publisher.interfaces import IPublishTraverse
+
+from Products.CMFPlone.interfaces import IPasswordResetToolView
+from Products.CMFPlone import PloneMessageFactory as _
+from email.Header import Header
+
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+
+from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+
+
+@implementer(IPasswordResetToolView)
+class PasswordResetToolView(BrowserView):
+
+    @view.memoize_contextless
+    def portal_state(self):
+        """ return portal_state of plone.app.layout
+        """
+        return getMultiAdapter((self.context, self.request),
+                               name=u"plone_portal_state")
+
+    def encode_mail_header(self, text):
+        """ Encodes text into correctly encoded email header """
+        return Header(safe_unicode(text), 'utf-8')
+
+    def encoded_mail_sender(self):
+        """ returns encoded version of Portal name <portal_email> """
+        registry = getUtility(IRegistry)
+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")
+        from_ = mail_settings.email_from_name
+        mail = mail_settings.email_from_address
+        return '"%s" <%s>' % (self.encode_mail_header(from_), mail)
+
+    def registered_notify_subject(self):
+        portal_name = self.portal_state().portal_title()
+        return translate(_(u"mailtemplate_user_account_info",
+                           default=u"User Account Information for ${portal_name}",
+                           mapping={'portal_name': safe_unicode(portal_name)}),
+                           context=self.request)
+
+    def mail_password_subject(self):
+        return translate(_(u"mailtemplate_subject_resetpasswordrequest",
+                           default=u"Password reset request"),
+                           context=self.request)
+
+    def construct_url(self, randomstring):
+        return "%s/passwordreset/%s" % (
+            self.portal_state().navigation_root_url(), randomstring)
+
+
+@implementer(IPublishTraverse)
+class PasswordResetView(BrowserView):
+    """ """
+
+    invalid = ViewPageTemplateFile('templates/pwreset_invalid.pt')
+    expired = ViewPageTemplateFile('templates/pwreset_expired.pt')
+    finish = ViewPageTemplateFile('templates/pwreset_finish.pt')
+    form = ViewPageTemplateFile('templates/pwreset_form.pt')
+    subpath = None
+
+    def __call__(self):
+        if self.subpath:
+            # Try traverse subpath first:
+            randomstring = self.subpath[0]
+        else:
+            randomstring = self.request.get('key', None)
+
+        pw_tool = getToolByName(self.context, 'portal_password_reset')
+        if self.request.method == 'POST':
+            userid = self.request.form.get('userid')
+            password = self.request.form.get('password')
+            try:
+                pw_tool.resetPassword(userid, randomstring, password)
+            except ExpiredRequestError:
+                return self.expired()
+            except InvalidRequestError:
+                return self.invalid()
+            except RuntimeError:
+                return self.invalid()
+            return self.finish()
+        else:
+            try:
+                pw_tool.verifyKey(randomstring)
+            except InvalidRequestError:
+                return self.invalid()
+            except ExpiredRequestError:
+                return self.expired()
+            return self.form()
+
+    def publishTraverse(self, request, name):
+        if self.subpath is None:
+            self.subpath = []
+        self.subpath.append(name)
+        return self
+
+    def getErrors(self):
+        if self.request.method != 'POST':
+            return
+        password = self.request.form.get('password')
+        password2 = self.request.form.get('password2')
+        userid = self.request.form.get('userid')
+        reg_tool = getToolByName(self.context, 'portal_registration')
+        pw_fail = reg_tool.testPasswordValidity(password, password2)
+        state = {}
+        if pw_fail:
+            state['password'] = pw_fail
+
+        # Determine if we're checking userids or not
+        pw_tool = getToolByName(self.context, 'portal_password_reset')
+        if not pw_tool.checkUser():
+            return state
+
+        if not userid:
+            state['userid'] = _('This field is required, please provide some information.')
+        if state:
+            state['status'] = 'failure'
+            state['portal_status_message'] = _('Please correct the indicated errors.')
+        return state
+
+    def login_url(self):
+        portal_state = getMultiAdapter((self.context, self.request),
+                                       name=u"plone_portal_state")
+        return '{0}/login?__ac_name={1}'.format(
+            portal_state.navigation_root_url(),
+            self.request.form.get('userid', ''))
+
+
+class ExplainPWResetToolView(BrowserView):
+    """ """
+
+    def timeout_days(self):
+        return self.context.getExpirationTimeout()
+
+    def user_check(self):
+        return self.context._user_check and 'checked' or None
+
+    @property
+    def stats(self):
+        """Return a dictionary like so:
+            {"open":3, "expired":0}
+        about the number of open and expired reset requests.
+        """
+        # count expired reset requests by creating a list of it
+        bad = len([1 for expiry in self.context._requests.values()
+                   if self.context.expired(expiry)])
+        # open reset requests are all requests without the expired ones
+        good = len(self.context._requests) - bad
+        return {"open": good, "expired": bad}
+
+    def __call__(self):
+        if self.request.method == 'POST':
+            timeout_days = safeToInt(self.request.get('timeout_days'), 7)
+            self.context.setExpirationTimeout(timeout_days)
+            self.context._user_check = bool(self.request.get('user_check', False))
+        return self.index()
\ No newline at end of file
diff --git a/Products/CMFPlone/browser/templates/explainPWResetTool.pt b/Products/CMFPlone/browser/templates/explainPWResetTool.pt
new file mode 100644
index 0000000..c85dffd
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/explainPWResetTool.pt
@@ -0,0 +1,52 @@
+<html lang="en"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main">
+  <h2 i18n:translate="title_pw_reset_tool">Password Reset Tool</h2>
+
+  <p i18n:translate="desc_pw_reset_tool">This tool enables a mechanism for securely resetting user's forgotten passwords.</p>
+
+  <h3 i18n:translate="title_set_exp_intervall">Expiration Interval</h3>
+  <p i18n:translate="desc_set_exp_intervall">
+    Specify the time until timeout of password reset requests in hours. This interval,
+    added to the time a user makes a request, will decide the expiration of the request.
+  </p>
+  <p i18n:translate="desc2_set_exp_intervall">
+    The default is <em>7 days</em>. If you leave the field blank, the timeout interval
+    will reset to the default.
+  </p>
+  <form action="#" method="post"
+        tal:attributes="action request/getURL">
+    <p>Set timeout interval to
+      <input type="text" name="timeout_days" value="${view/timeout_days}" size="10"
+             style="display: inline; width: auto;"/> days.</p>
+
+  <h3 i18n:translate="">Username Check</h3>
+  <p>
+    If "username check" is on, users following the confirmation link from their email
+    will be required to re-enter their username. This is to combat anonymous email
+    sniffing attacks and it is <strong>highly recommended</strong> that you leave
+    this <strong>ON</strong> if the portal is publicly accesible.
+  </p>
+    <p>
+    <input type="checkbox" name="user_check" checked="${view/user_check}" />
+    <label for="user_check" i18n:translate="">Username check</label>
+    </p>
+    <input type="submit" value="Change" i18n:attributes="value" />
+  </form>
+
+  <h3 i18n:translate="">Information</h3>
+
+  <p><tal:i18n i18n:translate="">Open reset requests:</tal:i18n> ${view/stats/open}</p>
+  <p i18n:translate="">Expired reset requests: ${view/stats/expired} (expired requests deleted after 10 days)</p>
+
+</metal:main>
+
+</body>
+</html>
+
+
+
+
diff --git a/Products/CMFPlone/browser/templates/mail_password_form.pt b/Products/CMFPlone/browser/templates/mail_password_form.pt
new file mode 100644
index 0000000..04d6c56
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/mail_password_form.pt
@@ -0,0 +1,89 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+
+<head>
+    <metal:block fill-slot="top_slot"
+                 tal:define="dummy python:request.set('disable_border',1);
+                             disable_column_one python:request.set('disable_plone.leftcolumn',1);
+                             disable_column_two python:request.set('disable_plone.rightcolumn',1);" />
+</head>
+<body>
+<metal:main fill-slot="main"
+     tal:define="use_email_as_login python:context.portal_registry['plone.use_email_as_login'];">
+
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_lost_password">Lost Password</h1>
+
+    <div class="documentDescription" i18n:translate="description_lost_password">
+        For security reasons, we store your password encrypted, and cannot mail
+        it to you. If you would like to reset your password, fill out the form
+        below and we will send you an email at the address you gave when you
+        registered to start the process of resetting your password.
+    </div>
+
+    <div id="content-core">
+
+        <form name="mail_password"
+              class="enableAutoFocus"
+              action="mail_password"
+              method="post">
+            <fieldset>
+                <legend i18n:translate="heading_lost_password">Lost Password</legend>
+
+                <div class="field">
+                    <label i18n:translate="label_my_user_name_is"
+                           tal:condition="not:use_email_as_login"
+                           for="userid">
+                        My user name is
+                    </label>
+                    <label i18n:translate="label_my_email_address_is"
+                           tal:condition="use_email_as_login"
+                           for="userid">
+                      My email address is
+                    </label>
+
+                    <input name="userid"
+                           type="text"
+                           id="userid"
+                           value=""
+                           tal:attributes="value request/userid|nothing;"
+                           />
+                </div>
+
+                <div class="formControls">
+                    <input class="context"
+                           type="submit"
+                           value="Start password reset"
+                           i18n:attributes="value"
+                           />
+                </div>
+            </fieldset>
+        </form>
+
+        <p i18n:translate="description_lost_password_mail_admin"
+           tal:condition="not:use_email_as_login">
+            If this will not work for you (for example, if you forgot your user
+            name or your email address has changed), contact the
+            <span i18n:name="site_admin">
+            <a href="#"
+               i18n:translate="label_site_admin"
+               tal:attributes="href string:${portal_url}/contact-info">site administration</a></span>.
+        </p>
+
+        <p i18n:translate="description_lost_password_mail_admin_2"
+           tal:condition="use_email_as_login">
+            If this will not work for you (for example, if your email
+            address has changed), contact the
+            <span i18n:name="site_admin">
+            <a href="#"
+               i18n:translate="label_site_admin"
+               tal:attributes="href string:${portal_url}/contact-info">site administration</a></span>.
+        </p>
+
+    </div>
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/mail_password_response.pt b/Products/CMFPlone/browser/templates/mail_password_response.pt
new file mode 100644
index 0000000..ba3aeb0
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/mail_password_response.pt
@@ -0,0 +1,21 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main">
+
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_sent_password">Password reset confirmation sent</h1>
+
+    <div class="documentDescription" i18n:translate="description_sent_password">
+        Your password reset request has been mailed. It should arrive in your
+        mailbox shortly. When you receive the message, visit the address it
+        contains to reset your password.
+    </div>
+
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/mail_password_template.pt b/Products/CMFPlone/browser/templates/mail_password_template.pt
new file mode 100644
index 0000000..350e17e
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/mail_password_template.pt
@@ -0,0 +1,40 @@
+<tal:root define="member python:options['member'];
+                  portal_state context/@@plone_portal_state;
+                  isAnon portal_state/anonymous;
+                  reset options/reset"
+          i18n:domain="plone"
+>From: <span tal:replace="structure view/encoded_mail_sender" />
+To: <span tal:replace="python:member.getProperty('email')" />
+Subject: <span tal:replace="view/mail_password_subject" />
+Content-Type: text/plain
+Precedence: bulk
+
+<tal:i18n i18n:translate="mailtemplate_reset_information"
+     tal:condition="not:isAnon">
+The site administrator asks you to reset your password for '<span i18n:name="userid"
+          tal:omit-tag=""
+          tal:content="member/id" />' userid. Your old password doesn't work anymore.
+</tal:i18n>
+
+<tal:i18n i18n:domain="passwordresettool"
+     i18n:translate="mailtemplate_text_linkreset">
+The following link will take you to a page where you can reset your password for <tal:i18n i18n:name="site_name"
+          tal:content="portal_state/navigation_root_title" /> site:
+
+<tal:i18n tal:content="python:view.construct_url(reset['randomstring'])" i18n:name="reset_url" /></tal:i18n>
+
+<tal:i18n
+     i18n:translate="mailtemplate_text_expirationdate_linkreset">
+  (This link is valid for <span tal:replace="here/portal_password_reset/getExpirationTimeout"
+          i18n:name="hours" /> hours)
+</tal:i18n>
+
+<tal:i18n
+     i18n:translate="mailtemplate_tracking_information"
+     tal:condition="isAnon">
+If you didn't expect to receive this email, please ignore it. Your password has not been changed.
+Request made from IP address <tal:i18n tal:define="host request/HTTP_X_FORWARDED_FOR|request/REMOTE_ADDR"
+          tal:content="host"
+          i18n:name="ipaddress" />
+</tal:i18n>
+</tal:root>
diff --git a/Products/CMFPlone/browser/templates/pwreset_expired.pt b/Products/CMFPlone/browser/templates/pwreset_expired.pt
new file mode 100644
index 0000000..91c91a6
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_expired.pt
@@ -0,0 +1,21 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+    <metal:main fill-slot="main">
+        <h1 class="documentFirstHeading"
+            i18n:translate="heading_pwreset_expired">Password request expired</h1>
+        <div id="content-core">
+            <p i18n:translate="message_pwreset_expired">
+                For your security, password reset URLs are only valid for
+                <span i18n:name="hours" tal:replace="here/portal_password_reset/getExpirationTimeout" />
+                hours. This URL has expired, but you may
+                <span i18n:name="message_request_new">
+                   <a href="/mail_password_form" tal:attributes="href string:$portal_url/mail_password_form"
+                      i18n:translate="message_request_new">request a new one</a></span>.
+            </p>
+        </div>
+    </metal:main>
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/pwreset_finish.pt b/Products/CMFPlone/browser/templates/pwreset_finish.pt
new file mode 100644
index 0000000..1e6404c
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_finish.pt
@@ -0,0 +1,21 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main">
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_pwreset_success">Password set</h1>
+
+    <div class="documentDescription" i18n:translate="message_pwreset_success">
+        Your password has been set successfully. You may now
+        <a href="#" tal:attributes="href view/login_url"
+         i18n:name="login_url">log in</a> with your
+        new password.
+    </div>
+
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/pwreset_form.pt b/Products/CMFPlone/browser/templates/pwreset_form.pt
new file mode 100644
index 0000000..3b64180
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_form.pt
@@ -0,0 +1,111 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      lang="en"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+    <metal:main fill-slot="main"
+         tal:define="errors view/getErrors">
+
+        <h1 class="documentFirstHeading"
+            i18n:translate="heading_reset_password">Set your password</h1>
+
+        <div class="documentDescription"
+           i18n:translate="description_reset_password">
+            Please fill out the form below to set your password.
+        </div>
+
+        <div id="content-core">
+            <form class="enableAutoFocus"
+                  name="pwreset_action"
+                  method="post"
+                  tal:attributes="action request/getURL">
+                <fieldset>
+                    <legend i18n:translate="legend_new_password">New Password</legend>
+                    <input type="hidden"
+                           name="randomstring"
+                           value=""
+                           tal:attributes="value options/randomstring | request/randomstring | nothing" />
+
+                    <div class="field"
+                         tal:define="error errors/userid | nothing;
+                                     use_email_as_login python:context.portal_registry['plone.use_email_as_login'];"
+                         tal:attributes="class python:error and 'field error' or 'field'"
+                         tal:condition="here/portal_password_reset/checkUser | nothing">
+
+                      <tal:username tal:condition="not:use_email_as_login">
+                        <label for="userid"
+                               i18n:translate="label_my_user_name_is">My user name is</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp" i18n:translate="help_userid">
+                            Enter your user name for verification.
+                        </div>
+                      </tal:username>
+                      <tal:email tal:condition="use_email_as_login">
+                        <label for="userid"
+                               i18n:translate="label_my_email_address_is">My email address is</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp" i18n:translate="help_verify_email">
+                            Enter your email address for verification.
+                        </div>
+                      </tal:email>
+
+                        <input name="userid" id="userid" />
+                    </div>
+
+                    <div class="field"
+                         tal:define="error errors/password | nothing;"
+                         tal:attributes="class python:error and 'field error' or 'field'">
+
+                        <label for="password"
+                               i18n:translate="label_new_password">New password</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp"
+                             i18n:translate="help_new_password">
+                            Enter your new password. Minimum 5 characters.
+                        </div>
+
+                        <input type="password"
+                               id="password"
+                               name="password"
+                               size="10" />
+                    </div>
+
+                    <div class="field"
+                         tal:define="error errors/password | nothing;"
+                         tal:attributes="class python:error and 'field error' or 'field'">
+
+                        <label for="password2" i18n:translate="label_confirm_password">Confirm password</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp" i18n:translate="help_confirm_password">
+                            Re-enter the password. Make sure the passwords are identical.
+                        </div>
+
+                        <input type="password"
+                               id="password2"
+                               name="password2"
+                               size="10"
+                               />
+                    </div>
+
+                    <div>
+                        <div class="label">&nbsp;</div>
+
+                        <div class="field">
+                            <input class="context"
+                                   type="submit"
+                                   value="Set my password"
+                                   i18n:attributes="value"
+                                   />
+                        </div>
+                    </div>
+                    <input type="hidden" name="form.submitted" value="1" />
+                </fieldset>
+            </form>
+        </div>
+    </metal:main>
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/pwreset_invalid.pt b/Products/CMFPlone/browser/templates/pwreset_invalid.pt
new file mode 100644
index 0000000..fed3af1
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_invalid.pt
@@ -0,0 +1,30 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      lang="en"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main"
+     tal:define="use_email_as_login python:context.portal_registry['plone.use_email_as_login'];">
+
+    <h1 class="documentFirstHeading" i18n:translate="heading_pwreset_invalid">Error setting password</h1>
+
+    <div id="content-core">
+        <p i18n:translate="message_pwreset_invalid"
+           tal:condition="not:use_email_as_login">
+           Sorry, this appears to be an invalid request. Please make sure you copied
+           the URL exactly as it appears in your email and that you entered your
+           user name correctly.
+        </p>
+        <p i18n:translate="message_pwreset_invalid_with_email"
+           tal:condition="use_email_as_login">
+           Sorry, this appears to be an invalid request. Please make sure you copied
+           the URL exactly as it appears in your email and that you entered your
+           email address correctly.
+        </p>
+    </div>
+
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/registered_notify_template.pt b/Products/CMFPlone/browser/templates/registered_notify_template.pt
new file mode 100644
index 0000000..f7d0980
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/registered_notify_template.pt
@@ -0,0 +1,36 @@
+<tal:root define="lt string:&lt;;gt string:&gt;;
+                  member python:options['member'];
+                  reset python:options.get('reset', None) or here.portal_password_reset.requestReset(member.getId());
+                  email_from_name python:context.portal_registry['plone.email_from_name'];"
+>From: <span tal:replace="structure view/encoded_mail_sender" />
+To: <span tal:replace="python:member.getProperty('email')" />
+Subject: <span tal:replace="view/registered_notify_subject" />
+Content-Type: text/plain
+Precedence: bulk
+
+<div i18n:domain="plone"
+     i18n:translate="mailtemplate_registered_user_body"
+     tal:omit-tag=""
+     tal:define="fullname python:member.getProperty('fullname')">
+    Welcome <span i18n:name="fullname" tal:replace="fullname" />,
+  
+    Your user account has been created.
+  Your username is <span i18n:name="member" tal:replace="python:member.getUserName()" />.
+  Please activate it by visiting
+
+    <span i18n:name="set_password" tal:replace="python:view.construct_url(reset['randomstring'])+'?userid='+member.getUserName()" />
+
+    Please activate your account before <span i18n:name="expirationdate" tal:replace="python:
+    context.toLocalizedTime(reset['expires'], long_format=1)" />
+
+</div>
+
+<div i18n:domain="plone"
+     i18n:translate="greetings"
+     tal:omit-tag="">
+    With kind regards,
+</div>
+--
+
+<span tal:replace="email_from_name" />
+</tal:root>
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 8e5025c..e1c8bdd 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -40,6 +40,8 @@
 from language import ILanguage
 from migration import IMigrationTool
 from patterns import IPatternsSettings
+from password_reset import IPasswordResetToolView
+from password_reset import IPWResetTool
 from properties import IPropertiesTool
 from properties import ISimpleItemWithProperties
 from resources import IBundleRegistry
diff --git a/Products/CMFPlone/interfaces/password_reset.py b/Products/CMFPlone/interfaces/password_reset.py
new file mode 100644
index 0000000..fde6f96
--- /dev/null
+++ b/Products/CMFPlone/interfaces/password_reset.py
@@ -0,0 +1,41 @@
+from zope.interface import Interface, Attribute
+
+
+class IPasswordResetToolView(Interface):
+    """ BrowserView with utility methods """
+
+    def encode_mail_header(text):
+        """ Encodes text into correctly encoded email header """
+
+    def encoded_mail_sender():
+        """ returns encoded version of Portal name <portal_email> """
+
+    def registered_notify_subject():
+        """ returns encoded version of registered notify template subject line """
+
+    def mail_password_subject():
+        """ returns encoded version of mail password template subject line """
+
+
+class IPWResetTool(Interface):
+    """Defines an interface for a tool that provides a facility to
+    reset forgotten passwords.
+
+    This interface is rather sparse, but sufficient to describe the
+    task. (In this manner we void being dependant on a specific
+    process) The details of the process are in the implementation,
+    where they belong."""
+
+    id = Attribute('id', 'Must be set to "portal_password_reset"')
+
+    def requestReset(userid):
+        """Ask the system to start the password reset procedure for
+        user 'userid'.
+
+        Returns the random string that must be used to reset the
+        password."""
+
+    def resetPassword(userid, randomstring, password):
+        """Set the password (in 'password') for the user who maps to
+        the string in 'randomstring'. The 'userid' parameter is provided
+        in case extra authentication is needed."""
diff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml
index c12d71f..133821c 100644
--- a/Products/CMFPlone/profiles/default/metadata.xml
+++ b/Products/CMFPlone/profiles/default/metadata.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>5103</version>
+  <version>5104</version>
 </metadata>
diff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml
index 1c99efc..8e7c956 100644
--- a/Products/CMFPlone/profiles/default/skins.xml
+++ b/Products/CMFPlone/profiles/default/skins.xml
@@ -3,8 +3,6 @@
    cookie_persistence="False" default_skin="Plone Default"
    request_varname="plone_skin">
  <object name="custom" meta_type="Folder"/>
- <object name="PasswordReset" meta_type="Filesystem Directory View"
-    directory="Products.PasswordResetTool:skins/PasswordReset"/>
  <object name="plone_content" meta_type="Filesystem Directory View"
     directory="Products.CMFPlone:skins/plone_content"/>
  <object name="plone_ecmascript" meta_type="Filesystem Directory View"
@@ -25,7 +23,6 @@
     directory="Products.CMFPlone:skins/plone_wysiwyg"/>
  <skin-path name="Plone Default">
   <layer name="custom"/>
-  <layer name="PasswordReset"/>
   <layer name="plone_ecmascript"/>
   <layer name="plone_wysiwyg"/>
   <layer name="plone_prefs"/>
diff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml
index 4c42b19..4837d70 100644
--- a/Products/CMFPlone/profiles/default/toolset.xml
+++ b/Products/CMFPlone/profiles/default/toolset.xml
@@ -31,7 +31,7 @@
  <required tool_id="portal_migration"
            class="Products.CMFPlone.MigrationTool.MigrationTool"/>
  <required tool_id="portal_password_reset"
-           class="Products.PasswordResetTool.PasswordResetTool.PasswordResetTool"/>
+           class="Products.CMFPlone.PasswordResetTool.PasswordResetTool"/>
  <required tool_id="portal_properties"
            class="Products.CMFPlone.PropertiesTool.PropertiesTool"/>
  <required tool_id="portal_quickinstaller"
diff --git a/Products/CMFPlone/tests/pwreset_browser.txt b/Products/CMFPlone/tests/pwreset_browser.txt
new file mode 100644
index 0000000..b7fbd5c
--- /dev/null
+++ b/Products/CMFPlone/tests/pwreset_browser.txt
@@ -0,0 +1,541 @@
+Functional tests for PasswordResetTool
+======================================
+
+Introduction
+------------
+
+Note that our usage of testbrowser is unusual and inconsistent, mostly
+because Plone forms have inconsistencies and because testbrowser makes
+assumptions that are not true for Plone forms.
+
+  >>> from plone.testing.z2 import Browser
+  >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+  >>> browser = Browser(layer['app'])
+  >>> from plone.registry.interfaces import IRegistry
+  >>> from zope.component import getUtility
+  >>> registry = getUtility(IRegistry, context=layer['portal'])
+
+  >>> from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+  >>> mail_settings = registry.forInterface(IMailSchema, prefix="plone")
+  >>> mail_settings.smtp_host = u'localhost'
+  >>> mail_settings.email_from_address = 'smith@example.com'
+  >>> import transaction
+  >>> transaction.commit()
+
+Assumptions
+-----------
+
+First of all we have to be aware that Plone by default implements two
+distinct password policies regarding member registration.
+
+  A. Users can provide their own password (and can optionally be send
+     an e-mail with login credentials) and can login directly without
+     validation of the e-mail address.
+
+  B. A password is generated for the users (and an e-mail with login
+     credentials is sent automatically).
+
+This policy can be enabled or disabled with the ``enable_user_pwd_choice``
+setting in the security control panel.  By default ``enable_user_pwd_choice`` is
+disabled and the second policy applies.
+
+Another aspect we have to take into account is the fact that Plone by
+default only allows Administrators to register (other) members, but allowing
+users to register themselves can be enabled.
+
+Users of PasswordResetTool don't want any credentials to be sent out
+via e-mail.  Instead, PasswordResetTool sends out an e-mail containing
+an URL where the user can set their password.
+
+The PasswordResetTool has to respect both policies (A and B) and both
+use cases (Anonymous or Admin?).  The desired result after installing
+PasswordResetTool is as follows:
+
+  1. Anonymous user registers himself
+
+    A. Users can provide their own password during registration, but
+       don't have the option to send credentials by e-mail.
+
+    B. Users can't provide a password but are sent an e-mail with a
+       link to set their password.  (Validates e-mail address.)
+
+  2. Site Admin registers a user
+
+    A. The Site Admin can provide a password.  He is not allowed to
+       send the credentials via e-mail.
+
+    B. The Site Admin can't provide a password.  Instead, Plone will
+       send the registered user an e-mail with a link to set the
+       password.  (Validates e-mail address.)
+
+In addition, we want users to be logged in directly whenever possible.
+E.g., whenever a user enters his credentials he should not be asked
+for it again on the next page.
+
+
+1A. User joins and forgets password
+-----------------------------------
+
+What we do here:
+
+  - Join the portal
+  - Log in
+  - Log out again
+  - Forget our password (this is where PasswordResetTool comes in)
+  - Check if this is a soft reset (old password already works until changed)
+  - Read the e-mail that contains the URL we visit to reset our password
+  - Reset our password
+  - Log in with our new password
+
+Let's go directly to the security control panel:
+
+  >>> from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+  >>> browser.addHeader('Authorization',
+  ...                   'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))
+  >>> browser.open('http://nohost/plone/@@security-controlpanel')
+  >>> ctrl = browser.getControl(name="form.widgets.enable_self_reg:list")
+  >>> ctrl.value = ['selected']
+  >>> ctrl = browser.getControl(name="form.widgets.enable_user_pwd_choice:list")
+  >>> ctrl.value = ['selected']
+  >>> browser.getControl("Save").click()
+
+Let's join as a new user. Plone's default settings won't let the user
+type in his initial password, so we need to enable that:
+
+  >>> browser = Browser(layer['app'])
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getLink('Log in').click()
+  >>> browser.getControl(name='__ac_name').value = TEST_USER_NAME
+  >>> browser.getControl(name='__ac_password').value = TEST_USER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again and then join:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+  >>> 'New user?' in browser.contents  # Sunburst theme has no Register link
+  True
+
+Now register a new user:
+
+  >>> browser.open('http://nohost/plone/@@register')
+  >>> browser.url
+  'http://nohost/plone/@@register'
+
+  >>> browser.getControl('User Name').value = 'jsmith'
+  >>> browser.getControl('E-mail').value = 'jsmith@example.com'
+  >>> browser.getControl('Password').value = 'secret'
+  >>> browser.getControl('Confirm password').value = 'secret'
+  >>> browser.getControl('Register').click()
+
+XXX Make sure we don't have a way to receive our credentials via
+e-mail.
+
+  >>> "You have been registered" in browser.contents
+  True
+
+We are not logged in yet at this point.  Let's try to log in:
+
+  >>> browser.getLink('Log in').click()
+  >>> browser.url.startswith('http://nohost/plone/login')
+  True
+  >>> browser.getControl(name='__ac_name').value = 'jsmith'
+  >>> browser.getControl(name='__ac_password').value = 'secret'
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+Now it is time to forget our password and click the ``Forgot your
+password`` in the login form:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getLink('we can send you a new one').click()
+  >>> browser.url.startswith('http://nohost/plone/mail_password_form')
+  True
+  >>> form = browser.getForm(name='mail_password')
+  >>> form.getControl(name='userid').value = 'jsmith'
+  >>> form.submit()
+
+We check if the old password always works.
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'jsmith'
+  >>> browser.getControl(name='__ac_password').value = 'secret'
+  >>> browser.getControl(name='submit').click()
+
+We should be logged in now:
+
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+As part of our test setup, we replaced the original MailHost with our
+own version.  Our version doesn't mail messages, it just collects them
+in a list called ``messages``:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  1
+  >>> msg = mailhost.messages[0]
+
+Now that we have the message, we want to look at its contents, and
+then we extract the address that lets us reset our password:
+
+  >>> import quopri
+  >>> msg = quopri.decodestring(msg)
+  >>> "To: jsmith@example.com" in msg
+  True
+  >>> "The site administrator asks you to reset your password for 'jsmith' userid" in msg
+  False
+  >>> please_visit_text = "The following link will take you to a page where you can reset your password for Plone site site:"
+  >>> please_visit_text in msg
+  True
+  >>> url_index = msg.index(please_visit_text) + len(please_visit_text)
+  >>> address = msg[url_index:].strip().split()[0]
+  >>> address # doctest: +ELLIPSIS
+  'http://nohost/plone/passwordreset/...'
+  >>> "If you didn't expect to receive this email" in msg
+  True
+
+Now that we have the address, we will reset our password:
+
+  >>> browser.open(address)
+  >>> "Set your password" in browser.contents
+  True
+
+  >>> form = browser.getForm(name='pwreset_action')
+  >>> form.getControl(name='userid').value = 'jsmith'
+  >>> form.getControl(name='password').value = 'secretion'
+  >>> form.getControl(name='password2').value = 'secretion'
+  >>> form.submit()
+
+We can now login using our new password:
+
+  >>> "Your password has been set successfully." in browser.contents
+  True
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'jsmith'
+  >>> browser.getControl(name='__ac_password').value = 'secretion'
+  >>> browser.getControl(name='submit').click()
+
+We should be logged in now:
+
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+
+2A. Administrator registers user
+--------------------------------
+
+  - Log in as the portal owner
+  - Browse to User and Group Management and add user
+  - Register a member (with send email checked???)
+  - Log out
+  - Log in as the new member
+  - A manager resets a user password
+  - Check if this is a hard reset (old password is changed)
+  - Check the received mail
+
+First, we want to login as the portal owner:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+We navigate to the Users Overview page and register a new user:
+
+  >>> browser.getLink('Site Setup').click()
+  >>> browser.getLink('Users and Groups').click()
+  >>> browser.getLink('Add New User').click()
+  >>> browser.url
+  'http://nohost/plone/@@new-user'
+
+  >>> browser.getControl('User Name').value = 'wsmith'
+  >>> browser.getControl('E-mail').value = 'wsmith@example.com'
+  >>> browser.getControl('Password').value = 'supersecret'
+  >>> browser.getControl('Confirm password').value = 'supersecret'
+  >>> browser.getControl('Register').click()
+  >>> 'User added.' in browser.contents
+  True
+
+XXX Make sure we don't have a way to send the credentials via e-mail.
+
+We want to logout and login as the new member:
+
+  >>> browser.getLink('Log out').click()
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'wsmith'
+  >>> browser.getControl(name='__ac_password').value = 'supersecret'
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+  >>> browser.getLink('Log out').click()
+
+Again, we want to login as the portal owner:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+We navigate to the Users Overview page and reset a password user:
+
+  >>> browser.getLink('Site Setup').click()
+  >>> browser.getLink('Users and Groups').click()
+  >>> resets = browser.getControl(name='users.resetpassword:records')
+  >>> reset = resets.getControl(value='wsmith')
+  >>> reset.selected = True  
+  >>> browser.getControl(name="form.button.Modify").click()
+  >>> "Changes applied." in browser.contents
+  True
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+We check if the old password is well changed.
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'wsmith'
+  >>> browser.getControl(name='__ac_password').value = 'supersecret'
+  >>> browser.getControl(name='submit').click()
+
+We should not be logged in:
+
+  >>> "Login failed" in browser.contents
+  True
+
+We should have received an e-mail at this point:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  2
+  >>> import quopri
+  >>> msg = quopri.decodestring(str(mailhost.messages[-1]))
+  >>> "The site administrator asks you to reset your password for 'wsmith' userid" in msg
+  True
+  >>> please_visit_text = "The following link will take you to a page where you can reset your password for Plone site site:"
+  >>> please_visit_text in msg
+  True
+  >>> "If you didn't expect to receive this email" in msg
+  False
+
+
+1B. User joins with e-mail validation enabled and forgets password
+------------------------------------------------------------------
+
+What we do here is quite similiar to 1A, but instead of typing in the
+password ourselves, we will be sent an e-mail with the URL to set our
+password.
+
+First off, we need to set ``validate_mail`` to False:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Let's go directly to the security control panel:
+
+  >>> browser.open('http://nohost/plone/@@security-controlpanel')
+  >>> ctrl = browser.getControl("Let users select their own passwords")
+  >>> ctrl.selected = False
+  >>> browser.getControl('Save').click()
+
+Log out again and then join:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+  >>> browser.open('http://nohost/plone/@@register')
+  >>> browser.getControl('User Name').value = 'bsmith'
+  >>> browser.getControl('E-mail').value = 'bsmith@example.com'
+
+We shouldn't be able to fill in our password:
+
+  >>> browser.getControl('Password').value = 'secret' # doctest: +ELLIPSIS
+  Traceback (most recent call last):
+  ...
+  LookupError: label 'Password'
+
+Now register:
+
+  >>> browser.getControl('Register').click()
+  >>> "You have been registered" in browser.contents
+  True
+
+We should have received an e-mail at this point:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  3
+  >>> msg = str(mailhost.messages[-1])
+
+Now that we have the message, we want to look at its contents, and
+then we extract the address that lets us reset our password:
+
+  >>> from email.parser import Parser
+  >>> import re
+  >>> parser = Parser()
+  >>> message = parser.parsestr(msg)
+  >>> message["To"]
+  'bsmith@example.com'
+  >>> msgtext = quopri.decodestring(message.get_payload())
+  >>> "Please activate it by visiting" in msgtext
+  True
+  >>> address = re.search('(http://nohost/plone/passwordreset/[a-z0-9]+\?userid=[\w]*)\s', msgtext).groups()[0]
+
+Now that we have the address, we will reset our password:
+
+  >>> browser.open(address)
+  >>> "Please fill out the form below to set your password" in browser.contents
+  True
+  >>> browser.getControl(name='userid').value = 'bsmith'
+  >>> browser.getControl(name='password').value = 'secret'
+  >>> browser.getControl(name='password2').value = 'secret'
+  >>> browser.getControl("Set my password").click()
+  >>> "Your password has been set successfully." in browser.contents
+  True
+
+Now we can log in:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl("Login Name").value = 'bsmith'
+  >>> browser.getControl("Password").value = 'secret'
+  >>> browser.getControl("Log in").click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+
+2B. Administrator adds user with email validation enabled
+---------------------------------------------------------
+
+Simliar to 2A, but instead of setting the password for new member, an
+e-mail is sent containing the URL that lets the user log in.
+
+First, we want to login as the portal owner:
+
+  >>> from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+We navigate to the Users Overview page and register a new user:
+
+  >>> browser.getLink('Site Setup').click()
+  >>> browser.getLink('Users and Groups').click()
+  >>> browser.getLink('Add New User').click()
+  >>> browser.url
+  'http://nohost/plone/@@new-user'
+
+  >>> browser.getControl('User Name').value = 'wwwsmith'
+  >>> browser.getControl('E-mail').value = 'wwwsmith@example.com'
+  >>> browser.getControl('Password').value = 'secret'
+  >>> browser.getControl('Confirm password').value = 'secret'
+  >>> browser.getControl('Send a confirmation mail with a link to set the password').selected = True
+
+Now register and logout:
+
+  >>> browser.getControl('Register').click()
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+We should have received an e-mail at this point:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  4
+  >>> msg = str(mailhost.messages[-1])
+
+Now that we have the message, we want to look at its contents, and
+then we extract the address that lets us reset our password:
+
+  >>> message = parser.parsestr(msg)
+  >>> message["To"]
+  'wwwsmith@example.com'
+  >>> msgtext = quopri.decodestring(message.get_payload())
+  >>> "Please activate it by visiting" in msgtext
+  True
+  >>> address = re.search('(http://nohost/plone/passwordreset/[a-z0-9]+\?userid=[\w]*)\s', msgtext).groups()[0]
+
+Now that we have the address, we will reset our password:
+
+  >>> browser.open(address)
+  >>> "Please fill out the form below to set your password" in browser.contents
+  True
+  >>> browser.getControl(name='userid').value = 'wwwsmith'
+  >>> browser.getControl(name='password').value = 'superstr0ng'
+  >>> browser.getControl(name='password2').value = 'superstr0ng'
+  >>> browser.getControl("Set my password").click()
+  >>> "Your password has been set successfully." in browser.contents
+  True
+
+Now we can log in:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl("Login Name").value = 'wwwsmith'
+  >>> browser.getControl("Password").value = 'superstr0ng'
+  >>> browser.getControl("Log in").click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+  >>> browser.getLink('Log out').click()
+
+Test passwordreset BrowserView
+
+    Setup Plone email sender
+
+    >>> portal = layer['portal']
+    >>> mail_settings.email_from_name = u'Old\u0159ich a Bo\u017eena'
+    >>> from Products.CMFPlone.interfaces.controlpanel import ISiteSchema
+    >>> site_settings = registry.forInterface(ISiteSchema, prefix='plone')
+    >>> site_settings.site_title = u'Koko\u0159\xedn Portal'
+
+    Check view methods
+
+    >>> view = portal.restrictedTraverse('@@mail_password_template')
+    >>> view.encoded_mail_sender()
+    '"=?utf-8?q?Old=C5=99ich_a_Bo=C5=BEena?=" <smith@example.com>'
+
+    >>> view.registered_notify_subject()
+    u'User Account Information for Koko\u0159\xedn Portal'
+
+    >>> view.mail_password_subject()
+    u'Password reset request'
diff --git a/Products/CMFPlone/tests/test_functional.py b/Products/CMFPlone/tests/test_functional.py
index 09e2cdd..f278db9 100644
--- a/Products/CMFPlone/tests/test_functional.py
+++ b/Products/CMFPlone/tests/test_functional.py
@@ -10,7 +10,8 @@
 from Testing.ZopeTestCase import ZopeDocFileSuite
 
 
-UNITTESTS = ['messages.txt', 'mails.txt', 'emaillogin.txt', 'translate.txt']
+UNITTESTS = ['messages.txt', 'mails.txt', 'emaillogin.txt', 'translate.txt',
+             'pwreset_browser.txt']
 OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
 
 from Products.GenericSetup import EXTENSION, profile_registry
diff --git a/Products/CMFPlone/tests/test_passwordreset.py b/Products/CMFPlone/tests/test_passwordreset.py
new file mode 100644
index 0000000..b32fde7
--- /dev/null
+++ b/Products/CMFPlone/tests/test_passwordreset.py
@@ -0,0 +1,28 @@
+"""
+PasswordResetTool doctests
+"""
+
+import doctest
+import unittest
+
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from plone.testing import layered
+
+
+OPTIONFLAGS = (doctest.ELLIPSIS |
+               doctest.NORMALIZE_WHITESPACE # |
+#               doctest.REPORT_ONLY_FIRST_FAILURE
+               )
+
+
+def test_suite():
+    return unittest.TestSuite((
+        layered(
+            doctest.DocFileSuite(
+                'pwreset_browser.txt',
+                optionflags=OPTIONFLAGS,
+                package='Products.CMFPlone.tests',
+            ),
+            layer=PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+        ),
+    ))
diff --git a/setup.py b/setup.py
index 019a8c6..9052c5d 100644
--- a/setup.py
+++ b/setup.py
@@ -59,7 +59,6 @@
         'Products.ExternalEditor',
         'Products.GenericSetup >= 1.8.2',
         'Products.MimetypesRegistry',
-        'Products.PasswordResetTool',
         'Products.PlacelessTranslationService',
         # 'Products.PloneLanguageTool',
         'Products.PlonePAS',


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-27T16:53:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/46b12f9c1e5bdc3daf233e31eebc07a8ad663ae4

Merge pull request #1809 from plone/tomgross-move_pw_tool

Move PasswordResetTool from own product to here

Files changed:
A Products/CMFPlone/PasswordResetTool.py
A Products/CMFPlone/browser/password_reset.py
A Products/CMFPlone/browser/templates/explainPWResetTool.pt
A Products/CMFPlone/browser/templates/mail_password_form.pt
A Products/CMFPlone/browser/templates/mail_password_response.pt
A Products/CMFPlone/browser/templates/mail_password_template.pt
A Products/CMFPlone/browser/templates/pwreset_expired.pt
A Products/CMFPlone/browser/templates/pwreset_finish.pt
A Products/CMFPlone/browser/templates/pwreset_form.pt
A Products/CMFPlone/browser/templates/pwreset_invalid.pt
A Products/CMFPlone/browser/templates/registered_notify_template.pt
A Products/CMFPlone/interfaces/password_reset.py
A Products/CMFPlone/tests/pwreset_browser.txt
A Products/CMFPlone/tests/test_passwordreset.py
M CHANGES.rst
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/browser/configure.zcml
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/profiles/default/metadata.xml
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/tests/test_functional.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a06c936..4e1c900 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -54,6 +54,8 @@ New features:
 - Include mockup 2.4.0.
   [thet]
 
+- PasswordResetTool moved from its own package to here
+  [tomgross]
 - Prevent workflow menu overflowing in toolbar [MatthewWilkes]
 
 - Add default icon for top-level contentview and contentmenu toolbar entries [alecm]
diff --git a/Products/CMFPlone/PasswordResetTool.py b/Products/CMFPlone/PasswordResetTool.py
new file mode 100644
index 0000000..246645b
--- /dev/null
+++ b/Products/CMFPlone/PasswordResetTool.py
@@ -0,0 +1,247 @@
+"""PasswordResetTool.py
+
+Mailback password reset product for CMF.
+Author: J Cameron Cooper, Sept 2003
+"""
+from Products.CMFCore.utils import UniqueObject
+from Products.CMFCore.utils import getToolByName
+from OFS.SimpleItem import SimpleItem
+from App.class_init import InitializeClass
+from AccessControl import ClassSecurityInfo
+from AccessControl import ModuleSecurityInfo
+from BTrees.OOBTree import OOBTree
+from plone.uuid.interfaces import IUUIDGenerator
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFPlone.interfaces import IPWResetTool
+from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.RegistrationTool import get_member_by_login_name
+
+import datetime
+from zope.component import getUtility
+from zope.interface import implementer
+
+module_security = ModuleSecurityInfo('Products.CMFPlone.PasswordResetTool')
+
+module_security.declarePublic('InvalidRequestError')
+class InvalidRequestError(Exception):
+    """ Request reset URL is invalid """
+    def __init__(self, value=''):
+        self.value = value
+
+    def __str__(self):
+        return repr(self.value)
+
+module_security.declarePublic('ExpiredRequestError')
+class ExpiredRequestError(InvalidRequestError):
+    """ Request reset URL is expired """
+
+
+@implementer(IPWResetTool)
+class PasswordResetTool (UniqueObject, SimpleItem):
+    """Provides a default implementation for a password reset scheme.
+
+    From a 'forgotten password' template, you submit your username to
+    a handler script that does a 'requestReset', and sends an email
+    with an unguessable unique hash in a url as built by 'constructURL'
+    to the user.
+
+    The user visits that URL (the 'reset form') and enters their username,
+    """
+
+    id = 'portal_password_reset'
+    meta_type = 'Password Reset Tool'
+
+    security = ClassSecurityInfo()
+
+    def __init__(self):
+        self._requests = OOBTree()
+
+    ## Internal attributes
+    _user_check = True
+    _timedelta = 7   # DAYS
+
+    ## Interface fulfillment ##
+    security.declareProtected(ManagePortal, 'requestReset')
+
+    def requestReset(self, userid):
+        """Ask the system to start the password reset procedure for
+        user 'userid'.
+
+        Returns a dictionary with the random string that must be
+        used to reset the password in 'randomstring', the expiration date
+        as a datetime in 'expires', and the userid (for convenience) in
+        'userid'. Returns None if no such user.
+        """
+        if not self.getValidUser(userid):
+            return None
+        randomstring = self.uniqueString(userid)
+        expiry = self.expirationDate()
+        self._requests[randomstring] = (userid, expiry)
+
+        self.clearExpired(10)   # clear out untouched records more than 10 days old
+        # this is a cheap sort of "automatic" clearing
+        self._p_changed = 1
+
+        retval = {}
+        retval['randomstring'] = randomstring
+        retval['expires'] = expiry
+        retval['userid'] = userid
+        return retval
+
+    security.declarePublic('resetPassword')
+
+    def resetPassword(self, userid, randomstring, password):
+        """Set the password (in 'password') for the user who maps to
+        the string in 'randomstring' iff the entered 'userid' is equal
+        to the mapped userid. (This can be turned off with the
+        'toggleUserCheck' method.)
+
+        Note that this method will *not* check password validity: this
+        must be done by the caller.
+
+        Throws an 'ExpiredRequestError' if request is expired.
+        Throws an 'InvalidRequestError' if no such record exists,
+        or 'userid' is not in the record.
+        """
+        if get_member_by_login_name:
+            found_member = get_member_by_login_name(
+                self, userid, raise_exceptions=False)
+            if found_member is not None:
+                userid = found_member.getId()
+        try:
+            stored_user, expiry = self._requests[randomstring]
+        except KeyError:
+            raise InvalidRequestError
+
+        if self.checkUser() and (userid != stored_user):
+            raise InvalidRequestError
+        if self.expired(expiry):
+            del self._requests[randomstring]
+            self._p_changed = 1
+            raise ExpiredRequestError
+
+        member = self.getValidUser(stored_user)
+        if not member:
+            raise InvalidRequestError
+
+        # actually change password
+        user = member.getUser()
+        uf = getToolByName(self, 'acl_users')
+        uf.userSetPassword(user.getUserId(), password)
+        member.setMemberProperties(dict(must_change_password=0))
+
+        # clean out the request
+        del self._requests[randomstring]
+        self._p_changed = 1
+    ## Implementation ##
+
+    # external
+
+    security.declareProtected(ManagePortal, 'setExpirationTimeout')
+
+    def setExpirationTimeout(self, timedelta):
+        """Set the length of time a reset request will be valid in days.
+        """
+        self._timedelta = abs(timedelta)
+
+    security.declarePublic('getExpirationTimeout')
+
+    def getExpirationTimeout(self):
+        """Get the length of time a reset request will be valid.
+        """
+        return self._timedelta
+
+    security.declarePublic('checkUser')
+
+    def checkUser(self):
+        """Returns a boolean representing the state of 'user check' as described
+        in 'toggleUserCheck'. True means on, and is the default."""
+        return self._user_check
+
+    security.declarePublic('verifyKey')
+
+    def verifyKey(self, key):
+        """Verify a key. Raises an exception if the key is invalid or expired.
+        """
+        try:
+            u, expiry = self._requests[key]
+        except KeyError:
+            raise InvalidRequestError
+
+        if self.expired(expiry):
+            raise ExpiredRequestError
+
+        if not self.getValidUser(u):
+            raise InvalidRequestError('No such user')
+
+    security.declareProtected(ManagePortal, 'getStats')
+
+
+    security.declarePrivate('clearExpired')
+
+    def clearExpired(self, days=0):
+        """Destroys all expired reset request records.
+        Parameter controls how many days past expired it must be to disappear.
+        """
+        now = datetime.datetime.utcnow()
+        for key, record in self._requests.items():
+            stored_user, expiry = record
+            if self.expired(expiry, now - datetime.timedelta(days=days)):
+                del self._requests[key]
+                self._p_changed = 1
+    # customization points
+
+    security.declarePrivate('uniqueString')
+
+    def uniqueString(self, userid):
+        """Returns a string that is random and unguessable, or at
+        least as close as possible.
+
+        This is used by 'requestReset' to generate the auth
+        string. Override if you wish different format.
+
+        This implementation ignores userid and simply generates a
+        UUID. That parameter is for convenience of extenders, and
+        will be passed properly in the default implementation.
+        """
+        uuid_generator = getUtility(IUUIDGenerator)
+        return uuid_generator()
+
+    security.declarePrivate('expirationDate')
+
+    def expirationDate(self):
+        """Returns a DateTime for exipiry of a request from the
+        current time.
+
+        This is used by housekeeping methods (like clearEpired)
+        and stored in reset request records."""
+        return datetime.datetime.utcnow() + datetime.timedelta(days=self._timedelta)
+
+    security.declarePrivate('getValidUser')
+
+    def getValidUser(self, userid):
+        """Returns the member with 'userid' if available and None otherwise."""
+        if get_member_by_login_name:
+            registry = getUtility(IRegistry)
+            settings = registry.forInterface(ISecuritySchema, prefix='plone')
+
+            if settings.use_email_as_login:
+                return get_member_by_login_name(
+                    self, userid, raise_exceptions=False)
+        membertool = getToolByName(self, 'portal_membership')
+        return membertool.getMemberById(userid)
+
+
+    security.declarePrivate('expired')
+
+    def expired(self, dt, now=None):
+        """Tells whether a DateTime or timestamp 'datetime' is expired
+        with regards to either 'now', if provided, or the current
+        time."""
+        if not now:
+            now = datetime.datetime.utcnow()
+        return now >= dt
+
+
+InitializeClass(PasswordResetTool)
\ No newline at end of file
diff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py
index e4ebd3c..c4dbf71 100644
--- a/Products/CMFPlone/RegistrationTool.py
+++ b/Products/CMFPlone/RegistrationTool.py
@@ -18,12 +18,13 @@
 from Products.CMFPlone.permissions import ManagePortal
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
 from Products.CMFPlone.PloneTool import EMAIL_RE
+from Products.CMFPlone import PloneMessageFactory as _
 from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.permissions import SetOwnPassword
 from smtplib import SMTPException, SMTPRecipientsRefused
 from zope.component import getUtility
-from zope.i18nmessageid import MessageFactory
+from zope.component import getMultiAdapter
 from zope.schema import ValidationError
 import random
 import re
@@ -33,8 +34,6 @@
 # - remove vowels to avoid spelling words
 invalid_password_chars = ['a', 'e', 'i', 'o', 'u', 'y', 'l', 'q']
 
-_ = MessageFactory('plone')
-
 
 def getValidPasswordChars():
     password_chars = []
@@ -368,8 +367,10 @@ def mailPassword(self, login, REQUEST, immediate=False):
 
         registry = getUtility(IRegistry)
         encoding = registry.get('plone.email_charset', 'utf-8')
-        mail_text = self.mail_password_template(
-            self, REQUEST, member=member, reset=reset,
+        mail_password_template = getMultiAdapter(
+            (self, self.REQUEST), name='mail_password_template')
+        mail_text = mail_password_template(
+            member=member, reset=reset,
             password=member.getPassword(), charset=encoding)
         # The mail headers are not properly encoded we need to extract
         # them and let MailHost manage the encoding.
@@ -391,12 +392,11 @@ def mailPassword(self, login, REQUEST, immediate=False):
                 _(u'Recipient address rejected by server.'))
         except SMTPException as e:
             raise(e)
-        # return the rendered template "mail_password_response.pt"
-        # (in Products.PasswordResetTool)
-        return self.mail_password_response(self, REQUEST)
+        mail_password_response = getMultiAdapter(
+            (self, self.REQUEST), name='mail_password_response')
+        return mail_password_response()
 
     security.declarePublic('registeredNotify')
-
     def registeredNotify(self, new_member_id):
         # Wrapper around registeredNotify.
         membership = getToolByName(self, 'portal_membership')
@@ -422,9 +422,10 @@ def registeredNotify(self, new_member_id):
         # don't need to worry about 'UseMailHost' permissions).
         registry = getUtility(IRegistry)
         encoding = registry.get('plone.email_charset', 'utf-8')
-        mail_text = self.registered_notify_template(
-            self, self.REQUEST, member=member, reset=reset, email=email,
-            charset=encoding)
+        registered_notify_template = getMultiAdapter(
+            (self, self.REQUEST), name='registered_notify_template')
+        mail_text = registered_notify_template(
+            member=member, reset=reset, email=email, charset=encoding)
 
         # The mail headers are not properly encoded we need to extract
         # them and let MailHost manage the encoding.
@@ -439,7 +440,9 @@ def registeredNotify(self, new_member_id):
         host.send(mail_text, m_to, m_from, subject=subject, charset=encoding,
                   msg_type=msg_type, immediate=True)
 
-        return self.mail_password_response(self, self.REQUEST)
+        mail_password_response = getMultiAdapter(
+            (self, self.REQUEST), name='mail_password_response')
+        return mail_password_response()
 
     security.declareProtected(ManagePortal, 'editMember')
 
diff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml
index 2b70f9e..946f954 100644
--- a/Products/CMFPlone/browser/configure.zcml
+++ b/Products/CMFPlone/browser/configure.zcml
@@ -225,4 +225,49 @@
       template="templates/colophon.pt"
       />
 
+  <browser:page
+      name="mail_password_template"
+      for="*"
+      class=".password_reset.PasswordResetToolView"
+      template="templates/mail_password_template.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="registered_notify_template"
+      for="*"
+      class=".password_reset.PasswordResetToolView"
+      template="templates/registered_notify_template.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="mail_password_form"
+      for="*"
+      template="templates/mail_password_form.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="mail_password_response"
+      for="*"
+      template="templates/mail_password_response.pt"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="passwordreset"
+      for="*"
+      class=".password_reset.PasswordResetView"
+      permission="zope.Public"
+      />
+
+  <browser:page
+      name="explainPWResetTool"
+      for="Products.CMFPlone.interfaces.IPWResetTool"
+      class=".password_reset.ExplainPWResetToolView"
+      template="templates/explainPWResetTool.pt"
+      permission="zope2.ViewManagementScreens"
+      />
+
 </configure>
diff --git a/Products/CMFPlone/browser/password_reset.py b/Products/CMFPlone/browser/password_reset.py
new file mode 100644
index 0000000..c5f83b3
--- /dev/null
+++ b/Products/CMFPlone/browser/password_reset.py
@@ -0,0 +1,167 @@
+from zope.interface import implementer
+from zope.component import getMultiAdapter
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from plone.memoize import view
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode
+from Products.CMFPlone.utils import safeToInt
+from Products.CMFPlone.PasswordResetTool import ExpiredRequestError
+from Products.CMFPlone.PasswordResetTool import InvalidRequestError
+from zope.i18n import translate
+from zope.publisher.interfaces import IPublishTraverse
+
+from Products.CMFPlone.interfaces import IPasswordResetToolView
+from Products.CMFPlone import PloneMessageFactory as _
+from email.Header import Header
+
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+
+from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+
+
+@implementer(IPasswordResetToolView)
+class PasswordResetToolView(BrowserView):
+
+    @view.memoize_contextless
+    def portal_state(self):
+        """ return portal_state of plone.app.layout
+        """
+        return getMultiAdapter((self.context, self.request),
+                               name=u"plone_portal_state")
+
+    def encode_mail_header(self, text):
+        """ Encodes text into correctly encoded email header """
+        return Header(safe_unicode(text), 'utf-8')
+
+    def encoded_mail_sender(self):
+        """ returns encoded version of Portal name <portal_email> """
+        registry = getUtility(IRegistry)
+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")
+        from_ = mail_settings.email_from_name
+        mail = mail_settings.email_from_address
+        return '"%s" <%s>' % (self.encode_mail_header(from_), mail)
+
+    def registered_notify_subject(self):
+        portal_name = self.portal_state().portal_title()
+        return translate(_(u"mailtemplate_user_account_info",
+                           default=u"User Account Information for ${portal_name}",
+                           mapping={'portal_name': safe_unicode(portal_name)}),
+                           context=self.request)
+
+    def mail_password_subject(self):
+        return translate(_(u"mailtemplate_subject_resetpasswordrequest",
+                           default=u"Password reset request"),
+                           context=self.request)
+
+    def construct_url(self, randomstring):
+        return "%s/passwordreset/%s" % (
+            self.portal_state().navigation_root_url(), randomstring)
+
+
+@implementer(IPublishTraverse)
+class PasswordResetView(BrowserView):
+    """ """
+
+    invalid = ViewPageTemplateFile('templates/pwreset_invalid.pt')
+    expired = ViewPageTemplateFile('templates/pwreset_expired.pt')
+    finish = ViewPageTemplateFile('templates/pwreset_finish.pt')
+    form = ViewPageTemplateFile('templates/pwreset_form.pt')
+    subpath = None
+
+    def __call__(self):
+        if self.subpath:
+            # Try traverse subpath first:
+            randomstring = self.subpath[0]
+        else:
+            randomstring = self.request.get('key', None)
+
+        pw_tool = getToolByName(self.context, 'portal_password_reset')
+        if self.request.method == 'POST':
+            userid = self.request.form.get('userid')
+            password = self.request.form.get('password')
+            try:
+                pw_tool.resetPassword(userid, randomstring, password)
+            except ExpiredRequestError:
+                return self.expired()
+            except InvalidRequestError:
+                return self.invalid()
+            except RuntimeError:
+                return self.invalid()
+            return self.finish()
+        else:
+            try:
+                pw_tool.verifyKey(randomstring)
+            except InvalidRequestError:
+                return self.invalid()
+            except ExpiredRequestError:
+                return self.expired()
+            return self.form()
+
+    def publishTraverse(self, request, name):
+        if self.subpath is None:
+            self.subpath = []
+        self.subpath.append(name)
+        return self
+
+    def getErrors(self):
+        if self.request.method != 'POST':
+            return
+        password = self.request.form.get('password')
+        password2 = self.request.form.get('password2')
+        userid = self.request.form.get('userid')
+        reg_tool = getToolByName(self.context, 'portal_registration')
+        pw_fail = reg_tool.testPasswordValidity(password, password2)
+        state = {}
+        if pw_fail:
+            state['password'] = pw_fail
+
+        # Determine if we're checking userids or not
+        pw_tool = getToolByName(self.context, 'portal_password_reset')
+        if not pw_tool.checkUser():
+            return state
+
+        if not userid:
+            state['userid'] = _('This field is required, please provide some information.')
+        if state:
+            state['status'] = 'failure'
+            state['portal_status_message'] = _('Please correct the indicated errors.')
+        return state
+
+    def login_url(self):
+        portal_state = getMultiAdapter((self.context, self.request),
+                                       name=u"plone_portal_state")
+        return '{0}/login?__ac_name={1}'.format(
+            portal_state.navigation_root_url(),
+            self.request.form.get('userid', ''))
+
+
+class ExplainPWResetToolView(BrowserView):
+    """ """
+
+    def timeout_days(self):
+        return self.context.getExpirationTimeout()
+
+    def user_check(self):
+        return self.context._user_check and 'checked' or None
+
+    @property
+    def stats(self):
+        """Return a dictionary like so:
+            {"open":3, "expired":0}
+        about the number of open and expired reset requests.
+        """
+        # count expired reset requests by creating a list of it
+        bad = len([1 for expiry in self.context._requests.values()
+                   if self.context.expired(expiry)])
+        # open reset requests are all requests without the expired ones
+        good = len(self.context._requests) - bad
+        return {"open": good, "expired": bad}
+
+    def __call__(self):
+        if self.request.method == 'POST':
+            timeout_days = safeToInt(self.request.get('timeout_days'), 7)
+            self.context.setExpirationTimeout(timeout_days)
+            self.context._user_check = bool(self.request.get('user_check', False))
+        return self.index()
\ No newline at end of file
diff --git a/Products/CMFPlone/browser/templates/explainPWResetTool.pt b/Products/CMFPlone/browser/templates/explainPWResetTool.pt
new file mode 100644
index 0000000..c85dffd
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/explainPWResetTool.pt
@@ -0,0 +1,52 @@
+<html lang="en"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main">
+  <h2 i18n:translate="title_pw_reset_tool">Password Reset Tool</h2>
+
+  <p i18n:translate="desc_pw_reset_tool">This tool enables a mechanism for securely resetting user's forgotten passwords.</p>
+
+  <h3 i18n:translate="title_set_exp_intervall">Expiration Interval</h3>
+  <p i18n:translate="desc_set_exp_intervall">
+    Specify the time until timeout of password reset requests in hours. This interval,
+    added to the time a user makes a request, will decide the expiration of the request.
+  </p>
+  <p i18n:translate="desc2_set_exp_intervall">
+    The default is <em>7 days</em>. If you leave the field blank, the timeout interval
+    will reset to the default.
+  </p>
+  <form action="#" method="post"
+        tal:attributes="action request/getURL">
+    <p>Set timeout interval to
+      <input type="text" name="timeout_days" value="${view/timeout_days}" size="10"
+             style="display: inline; width: auto;"/> days.</p>
+
+  <h3 i18n:translate="">Username Check</h3>
+  <p>
+    If "username check" is on, users following the confirmation link from their email
+    will be required to re-enter their username. This is to combat anonymous email
+    sniffing attacks and it is <strong>highly recommended</strong> that you leave
+    this <strong>ON</strong> if the portal is publicly accesible.
+  </p>
+    <p>
+    <input type="checkbox" name="user_check" checked="${view/user_check}" />
+    <label for="user_check" i18n:translate="">Username check</label>
+    </p>
+    <input type="submit" value="Change" i18n:attributes="value" />
+  </form>
+
+  <h3 i18n:translate="">Information</h3>
+
+  <p><tal:i18n i18n:translate="">Open reset requests:</tal:i18n> ${view/stats/open}</p>
+  <p i18n:translate="">Expired reset requests: ${view/stats/expired} (expired requests deleted after 10 days)</p>
+
+</metal:main>
+
+</body>
+</html>
+
+
+
+
diff --git a/Products/CMFPlone/browser/templates/mail_password_form.pt b/Products/CMFPlone/browser/templates/mail_password_form.pt
new file mode 100644
index 0000000..04d6c56
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/mail_password_form.pt
@@ -0,0 +1,89 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+
+<head>
+    <metal:block fill-slot="top_slot"
+                 tal:define="dummy python:request.set('disable_border',1);
+                             disable_column_one python:request.set('disable_plone.leftcolumn',1);
+                             disable_column_two python:request.set('disable_plone.rightcolumn',1);" />
+</head>
+<body>
+<metal:main fill-slot="main"
+     tal:define="use_email_as_login python:context.portal_registry['plone.use_email_as_login'];">
+
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_lost_password">Lost Password</h1>
+
+    <div class="documentDescription" i18n:translate="description_lost_password">
+        For security reasons, we store your password encrypted, and cannot mail
+        it to you. If you would like to reset your password, fill out the form
+        below and we will send you an email at the address you gave when you
+        registered to start the process of resetting your password.
+    </div>
+
+    <div id="content-core">
+
+        <form name="mail_password"
+              class="enableAutoFocus"
+              action="mail_password"
+              method="post">
+            <fieldset>
+                <legend i18n:translate="heading_lost_password">Lost Password</legend>
+
+                <div class="field">
+                    <label i18n:translate="label_my_user_name_is"
+                           tal:condition="not:use_email_as_login"
+                           for="userid">
+                        My user name is
+                    </label>
+                    <label i18n:translate="label_my_email_address_is"
+                           tal:condition="use_email_as_login"
+                           for="userid">
+                      My email address is
+                    </label>
+
+                    <input name="userid"
+                           type="text"
+                           id="userid"
+                           value=""
+                           tal:attributes="value request/userid|nothing;"
+                           />
+                </div>
+
+                <div class="formControls">
+                    <input class="context"
+                           type="submit"
+                           value="Start password reset"
+                           i18n:attributes="value"
+                           />
+                </div>
+            </fieldset>
+        </form>
+
+        <p i18n:translate="description_lost_password_mail_admin"
+           tal:condition="not:use_email_as_login">
+            If this will not work for you (for example, if you forgot your user
+            name or your email address has changed), contact the
+            <span i18n:name="site_admin">
+            <a href="#"
+               i18n:translate="label_site_admin"
+               tal:attributes="href string:${portal_url}/contact-info">site administration</a></span>.
+        </p>
+
+        <p i18n:translate="description_lost_password_mail_admin_2"
+           tal:condition="use_email_as_login">
+            If this will not work for you (for example, if your email
+            address has changed), contact the
+            <span i18n:name="site_admin">
+            <a href="#"
+               i18n:translate="label_site_admin"
+               tal:attributes="href string:${portal_url}/contact-info">site administration</a></span>.
+        </p>
+
+    </div>
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/mail_password_response.pt b/Products/CMFPlone/browser/templates/mail_password_response.pt
new file mode 100644
index 0000000..ba3aeb0
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/mail_password_response.pt
@@ -0,0 +1,21 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main">
+
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_sent_password">Password reset confirmation sent</h1>
+
+    <div class="documentDescription" i18n:translate="description_sent_password">
+        Your password reset request has been mailed. It should arrive in your
+        mailbox shortly. When you receive the message, visit the address it
+        contains to reset your password.
+    </div>
+
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/mail_password_template.pt b/Products/CMFPlone/browser/templates/mail_password_template.pt
new file mode 100644
index 0000000..350e17e
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/mail_password_template.pt
@@ -0,0 +1,40 @@
+<tal:root define="member python:options['member'];
+                  portal_state context/@@plone_portal_state;
+                  isAnon portal_state/anonymous;
+                  reset options/reset"
+          i18n:domain="plone"
+>From: <span tal:replace="structure view/encoded_mail_sender" />
+To: <span tal:replace="python:member.getProperty('email')" />
+Subject: <span tal:replace="view/mail_password_subject" />
+Content-Type: text/plain
+Precedence: bulk
+
+<tal:i18n i18n:translate="mailtemplate_reset_information"
+     tal:condition="not:isAnon">
+The site administrator asks you to reset your password for '<span i18n:name="userid"
+          tal:omit-tag=""
+          tal:content="member/id" />' userid. Your old password doesn't work anymore.
+</tal:i18n>
+
+<tal:i18n i18n:domain="passwordresettool"
+     i18n:translate="mailtemplate_text_linkreset">
+The following link will take you to a page where you can reset your password for <tal:i18n i18n:name="site_name"
+          tal:content="portal_state/navigation_root_title" /> site:
+
+<tal:i18n tal:content="python:view.construct_url(reset['randomstring'])" i18n:name="reset_url" /></tal:i18n>
+
+<tal:i18n
+     i18n:translate="mailtemplate_text_expirationdate_linkreset">
+  (This link is valid for <span tal:replace="here/portal_password_reset/getExpirationTimeout"
+          i18n:name="hours" /> hours)
+</tal:i18n>
+
+<tal:i18n
+     i18n:translate="mailtemplate_tracking_information"
+     tal:condition="isAnon">
+If you didn't expect to receive this email, please ignore it. Your password has not been changed.
+Request made from IP address <tal:i18n tal:define="host request/HTTP_X_FORWARDED_FOR|request/REMOTE_ADDR"
+          tal:content="host"
+          i18n:name="ipaddress" />
+</tal:i18n>
+</tal:root>
diff --git a/Products/CMFPlone/browser/templates/pwreset_expired.pt b/Products/CMFPlone/browser/templates/pwreset_expired.pt
new file mode 100644
index 0000000..91c91a6
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_expired.pt
@@ -0,0 +1,21 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+    <metal:main fill-slot="main">
+        <h1 class="documentFirstHeading"
+            i18n:translate="heading_pwreset_expired">Password request expired</h1>
+        <div id="content-core">
+            <p i18n:translate="message_pwreset_expired">
+                For your security, password reset URLs are only valid for
+                <span i18n:name="hours" tal:replace="here/portal_password_reset/getExpirationTimeout" />
+                hours. This URL has expired, but you may
+                <span i18n:name="message_request_new">
+                   <a href="/mail_password_form" tal:attributes="href string:$portal_url/mail_password_form"
+                      i18n:translate="message_request_new">request a new one</a></span>.
+            </p>
+        </div>
+    </metal:main>
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/pwreset_finish.pt b/Products/CMFPlone/browser/templates/pwreset_finish.pt
new file mode 100644
index 0000000..1e6404c
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_finish.pt
@@ -0,0 +1,21 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
+      lang="en-US"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main">
+    <h1 class="documentFirstHeading"
+        i18n:translate="heading_pwreset_success">Password set</h1>
+
+    <div class="documentDescription" i18n:translate="message_pwreset_success">
+        Your password has been set successfully. You may now
+        <a href="#" tal:attributes="href view/login_url"
+         i18n:name="login_url">log in</a> with your
+        new password.
+    </div>
+
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/pwreset_form.pt b/Products/CMFPlone/browser/templates/pwreset_form.pt
new file mode 100644
index 0000000..3b64180
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_form.pt
@@ -0,0 +1,111 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      lang="en"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+    <metal:main fill-slot="main"
+         tal:define="errors view/getErrors">
+
+        <h1 class="documentFirstHeading"
+            i18n:translate="heading_reset_password">Set your password</h1>
+
+        <div class="documentDescription"
+           i18n:translate="description_reset_password">
+            Please fill out the form below to set your password.
+        </div>
+
+        <div id="content-core">
+            <form class="enableAutoFocus"
+                  name="pwreset_action"
+                  method="post"
+                  tal:attributes="action request/getURL">
+                <fieldset>
+                    <legend i18n:translate="legend_new_password">New Password</legend>
+                    <input type="hidden"
+                           name="randomstring"
+                           value=""
+                           tal:attributes="value options/randomstring | request/randomstring | nothing" />
+
+                    <div class="field"
+                         tal:define="error errors/userid | nothing;
+                                     use_email_as_login python:context.portal_registry['plone.use_email_as_login'];"
+                         tal:attributes="class python:error and 'field error' or 'field'"
+                         tal:condition="here/portal_password_reset/checkUser | nothing">
+
+                      <tal:username tal:condition="not:use_email_as_login">
+                        <label for="userid"
+                               i18n:translate="label_my_user_name_is">My user name is</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp" i18n:translate="help_userid">
+                            Enter your user name for verification.
+                        </div>
+                      </tal:username>
+                      <tal:email tal:condition="use_email_as_login">
+                        <label for="userid"
+                               i18n:translate="label_my_email_address_is">My email address is</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp" i18n:translate="help_verify_email">
+                            Enter your email address for verification.
+                        </div>
+                      </tal:email>
+
+                        <input name="userid" id="userid" />
+                    </div>
+
+                    <div class="field"
+                         tal:define="error errors/password | nothing;"
+                         tal:attributes="class python:error and 'field error' or 'field'">
+
+                        <label for="password"
+                               i18n:translate="label_new_password">New password</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp"
+                             i18n:translate="help_new_password">
+                            Enter your new password. Minimum 5 characters.
+                        </div>
+
+                        <input type="password"
+                               id="password"
+                               name="password"
+                               size="10" />
+                    </div>
+
+                    <div class="field"
+                         tal:define="error errors/password | nothing;"
+                         tal:attributes="class python:error and 'field error' or 'field'">
+
+                        <label for="password2" i18n:translate="label_confirm_password">Confirm password</label>
+                        <div tal:content="error">Validation error output</div>
+
+                        <div class="formHelp" i18n:translate="help_confirm_password">
+                            Re-enter the password. Make sure the passwords are identical.
+                        </div>
+
+                        <input type="password"
+                               id="password2"
+                               name="password2"
+                               size="10"
+                               />
+                    </div>
+
+                    <div>
+                        <div class="label">&nbsp;</div>
+
+                        <div class="field">
+                            <input class="context"
+                                   type="submit"
+                                   value="Set my password"
+                                   i18n:attributes="value"
+                                   />
+                        </div>
+                    </div>
+                    <input type="hidden" name="form.submitted" value="1" />
+                </fieldset>
+            </form>
+        </div>
+    </metal:main>
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/pwreset_invalid.pt b/Products/CMFPlone/browser/templates/pwreset_invalid.pt
new file mode 100644
index 0000000..fed3af1
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/pwreset_invalid.pt
@@ -0,0 +1,30 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      lang="en"
+      metal:use-macro="here/main_template/macros/master"
+      i18n:domain="plone">
+<body>
+
+<metal:main fill-slot="main"
+     tal:define="use_email_as_login python:context.portal_registry['plone.use_email_as_login'];">
+
+    <h1 class="documentFirstHeading" i18n:translate="heading_pwreset_invalid">Error setting password</h1>
+
+    <div id="content-core">
+        <p i18n:translate="message_pwreset_invalid"
+           tal:condition="not:use_email_as_login">
+           Sorry, this appears to be an invalid request. Please make sure you copied
+           the URL exactly as it appears in your email and that you entered your
+           user name correctly.
+        </p>
+        <p i18n:translate="message_pwreset_invalid_with_email"
+           tal:condition="use_email_as_login">
+           Sorry, this appears to be an invalid request. Please make sure you copied
+           the URL exactly as it appears in your email and that you entered your
+           email address correctly.
+        </p>
+    </div>
+
+</metal:main>
+
+</body>
+</html>
diff --git a/Products/CMFPlone/browser/templates/registered_notify_template.pt b/Products/CMFPlone/browser/templates/registered_notify_template.pt
new file mode 100644
index 0000000..f7d0980
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/registered_notify_template.pt
@@ -0,0 +1,36 @@
+<tal:root define="lt string:&lt;;gt string:&gt;;
+                  member python:options['member'];
+                  reset python:options.get('reset', None) or here.portal_password_reset.requestReset(member.getId());
+                  email_from_name python:context.portal_registry['plone.email_from_name'];"
+>From: <span tal:replace="structure view/encoded_mail_sender" />
+To: <span tal:replace="python:member.getProperty('email')" />
+Subject: <span tal:replace="view/registered_notify_subject" />
+Content-Type: text/plain
+Precedence: bulk
+
+<div i18n:domain="plone"
+     i18n:translate="mailtemplate_registered_user_body"
+     tal:omit-tag=""
+     tal:define="fullname python:member.getProperty('fullname')">
+    Welcome <span i18n:name="fullname" tal:replace="fullname" />,
+  
+    Your user account has been created.
+  Your username is <span i18n:name="member" tal:replace="python:member.getUserName()" />.
+  Please activate it by visiting
+
+    <span i18n:name="set_password" tal:replace="python:view.construct_url(reset['randomstring'])+'?userid='+member.getUserName()" />
+
+    Please activate your account before <span i18n:name="expirationdate" tal:replace="python:
+    context.toLocalizedTime(reset['expires'], long_format=1)" />
+
+</div>
+
+<div i18n:domain="plone"
+     i18n:translate="greetings"
+     tal:omit-tag="">
+    With kind regards,
+</div>
+--
+
+<span tal:replace="email_from_name" />
+</tal:root>
diff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py
index 8e5025c..e1c8bdd 100644
--- a/Products/CMFPlone/interfaces/__init__.py
+++ b/Products/CMFPlone/interfaces/__init__.py
@@ -40,6 +40,8 @@
 from language import ILanguage
 from migration import IMigrationTool
 from patterns import IPatternsSettings
+from password_reset import IPasswordResetToolView
+from password_reset import IPWResetTool
 from properties import IPropertiesTool
 from properties import ISimpleItemWithProperties
 from resources import IBundleRegistry
diff --git a/Products/CMFPlone/interfaces/password_reset.py b/Products/CMFPlone/interfaces/password_reset.py
new file mode 100644
index 0000000..fde6f96
--- /dev/null
+++ b/Products/CMFPlone/interfaces/password_reset.py
@@ -0,0 +1,41 @@
+from zope.interface import Interface, Attribute
+
+
+class IPasswordResetToolView(Interface):
+    """ BrowserView with utility methods """
+
+    def encode_mail_header(text):
+        """ Encodes text into correctly encoded email header """
+
+    def encoded_mail_sender():
+        """ returns encoded version of Portal name <portal_email> """
+
+    def registered_notify_subject():
+        """ returns encoded version of registered notify template subject line """
+
+    def mail_password_subject():
+        """ returns encoded version of mail password template subject line """
+
+
+class IPWResetTool(Interface):
+    """Defines an interface for a tool that provides a facility to
+    reset forgotten passwords.
+
+    This interface is rather sparse, but sufficient to describe the
+    task. (In this manner we void being dependant on a specific
+    process) The details of the process are in the implementation,
+    where they belong."""
+
+    id = Attribute('id', 'Must be set to "portal_password_reset"')
+
+    def requestReset(userid):
+        """Ask the system to start the password reset procedure for
+        user 'userid'.
+
+        Returns the random string that must be used to reset the
+        password."""
+
+    def resetPassword(userid, randomstring, password):
+        """Set the password (in 'password') for the user who maps to
+        the string in 'randomstring'. The 'userid' parameter is provided
+        in case extra authentication is needed."""
diff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml
index c12d71f..133821c 100644
--- a/Products/CMFPlone/profiles/default/metadata.xml
+++ b/Products/CMFPlone/profiles/default/metadata.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>5103</version>
+  <version>5104</version>
 </metadata>
diff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml
index 1c99efc..8e7c956 100644
--- a/Products/CMFPlone/profiles/default/skins.xml
+++ b/Products/CMFPlone/profiles/default/skins.xml
@@ -3,8 +3,6 @@
    cookie_persistence="False" default_skin="Plone Default"
    request_varname="plone_skin">
  <object name="custom" meta_type="Folder"/>
- <object name="PasswordReset" meta_type="Filesystem Directory View"
-    directory="Products.PasswordResetTool:skins/PasswordReset"/>
  <object name="plone_content" meta_type="Filesystem Directory View"
     directory="Products.CMFPlone:skins/plone_content"/>
  <object name="plone_ecmascript" meta_type="Filesystem Directory View"
@@ -25,7 +23,6 @@
     directory="Products.CMFPlone:skins/plone_wysiwyg"/>
  <skin-path name="Plone Default">
   <layer name="custom"/>
-  <layer name="PasswordReset"/>
   <layer name="plone_ecmascript"/>
   <layer name="plone_wysiwyg"/>
   <layer name="plone_prefs"/>
diff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml
index 4c42b19..4837d70 100644
--- a/Products/CMFPlone/profiles/default/toolset.xml
+++ b/Products/CMFPlone/profiles/default/toolset.xml
@@ -31,7 +31,7 @@
  <required tool_id="portal_migration"
            class="Products.CMFPlone.MigrationTool.MigrationTool"/>
  <required tool_id="portal_password_reset"
-           class="Products.PasswordResetTool.PasswordResetTool.PasswordResetTool"/>
+           class="Products.CMFPlone.PasswordResetTool.PasswordResetTool"/>
  <required tool_id="portal_properties"
            class="Products.CMFPlone.PropertiesTool.PropertiesTool"/>
  <required tool_id="portal_quickinstaller"
diff --git a/Products/CMFPlone/tests/pwreset_browser.txt b/Products/CMFPlone/tests/pwreset_browser.txt
new file mode 100644
index 0000000..b7fbd5c
--- /dev/null
+++ b/Products/CMFPlone/tests/pwreset_browser.txt
@@ -0,0 +1,541 @@
+Functional tests for PasswordResetTool
+======================================
+
+Introduction
+------------
+
+Note that our usage of testbrowser is unusual and inconsistent, mostly
+because Plone forms have inconsistencies and because testbrowser makes
+assumptions that are not true for Plone forms.
+
+  >>> from plone.testing.z2 import Browser
+  >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
+  >>> browser = Browser(layer['app'])
+  >>> from plone.registry.interfaces import IRegistry
+  >>> from zope.component import getUtility
+  >>> registry = getUtility(IRegistry, context=layer['portal'])
+
+  >>> from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+  >>> mail_settings = registry.forInterface(IMailSchema, prefix="plone")
+  >>> mail_settings.smtp_host = u'localhost'
+  >>> mail_settings.email_from_address = 'smith@example.com'
+  >>> import transaction
+  >>> transaction.commit()
+
+Assumptions
+-----------
+
+First of all we have to be aware that Plone by default implements two
+distinct password policies regarding member registration.
+
+  A. Users can provide their own password (and can optionally be send
+     an e-mail with login credentials) and can login directly without
+     validation of the e-mail address.
+
+  B. A password is generated for the users (and an e-mail with login
+     credentials is sent automatically).
+
+This policy can be enabled or disabled with the ``enable_user_pwd_choice``
+setting in the security control panel.  By default ``enable_user_pwd_choice`` is
+disabled and the second policy applies.
+
+Another aspect we have to take into account is the fact that Plone by
+default only allows Administrators to register (other) members, but allowing
+users to register themselves can be enabled.
+
+Users of PasswordResetTool don't want any credentials to be sent out
+via e-mail.  Instead, PasswordResetTool sends out an e-mail containing
+an URL where the user can set their password.
+
+The PasswordResetTool has to respect both policies (A and B) and both
+use cases (Anonymous or Admin?).  The desired result after installing
+PasswordResetTool is as follows:
+
+  1. Anonymous user registers himself
+
+    A. Users can provide their own password during registration, but
+       don't have the option to send credentials by e-mail.
+
+    B. Users can't provide a password but are sent an e-mail with a
+       link to set their password.  (Validates e-mail address.)
+
+  2. Site Admin registers a user
+
+    A. The Site Admin can provide a password.  He is not allowed to
+       send the credentials via e-mail.
+
+    B. The Site Admin can't provide a password.  Instead, Plone will
+       send the registered user an e-mail with a link to set the
+       password.  (Validates e-mail address.)
+
+In addition, we want users to be logged in directly whenever possible.
+E.g., whenever a user enters his credentials he should not be asked
+for it again on the next page.
+
+
+1A. User joins and forgets password
+-----------------------------------
+
+What we do here:
+
+  - Join the portal
+  - Log in
+  - Log out again
+  - Forget our password (this is where PasswordResetTool comes in)
+  - Check if this is a soft reset (old password already works until changed)
+  - Read the e-mail that contains the URL we visit to reset our password
+  - Reset our password
+  - Log in with our new password
+
+Let's go directly to the security control panel:
+
+  >>> from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+  >>> browser.addHeader('Authorization',
+  ...                   'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))
+  >>> browser.open('http://nohost/plone/@@security-controlpanel')
+  >>> ctrl = browser.getControl(name="form.widgets.enable_self_reg:list")
+  >>> ctrl.value = ['selected']
+  >>> ctrl = browser.getControl(name="form.widgets.enable_user_pwd_choice:list")
+  >>> ctrl.value = ['selected']
+  >>> browser.getControl("Save").click()
+
+Let's join as a new user. Plone's default settings won't let the user
+type in his initial password, so we need to enable that:
+
+  >>> browser = Browser(layer['app'])
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getLink('Log in').click()
+  >>> browser.getControl(name='__ac_name').value = TEST_USER_NAME
+  >>> browser.getControl(name='__ac_password').value = TEST_USER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again and then join:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+  >>> 'New user?' in browser.contents  # Sunburst theme has no Register link
+  True
+
+Now register a new user:
+
+  >>> browser.open('http://nohost/plone/@@register')
+  >>> browser.url
+  'http://nohost/plone/@@register'
+
+  >>> browser.getControl('User Name').value = 'jsmith'
+  >>> browser.getControl('E-mail').value = 'jsmith@example.com'
+  >>> browser.getControl('Password').value = 'secret'
+  >>> browser.getControl('Confirm password').value = 'secret'
+  >>> browser.getControl('Register').click()
+
+XXX Make sure we don't have a way to receive our credentials via
+e-mail.
+
+  >>> "You have been registered" in browser.contents
+  True
+
+We are not logged in yet at this point.  Let's try to log in:
+
+  >>> browser.getLink('Log in').click()
+  >>> browser.url.startswith('http://nohost/plone/login')
+  True
+  >>> browser.getControl(name='__ac_name').value = 'jsmith'
+  >>> browser.getControl(name='__ac_password').value = 'secret'
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+Now it is time to forget our password and click the ``Forgot your
+password`` in the login form:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getLink('we can send you a new one').click()
+  >>> browser.url.startswith('http://nohost/plone/mail_password_form')
+  True
+  >>> form = browser.getForm(name='mail_password')
+  >>> form.getControl(name='userid').value = 'jsmith'
+  >>> form.submit()
+
+We check if the old password always works.
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'jsmith'
+  >>> browser.getControl(name='__ac_password').value = 'secret'
+  >>> browser.getControl(name='submit').click()
+
+We should be logged in now:
+
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+As part of our test setup, we replaced the original MailHost with our
+own version.  Our version doesn't mail messages, it just collects them
+in a list called ``messages``:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  1
+  >>> msg = mailhost.messages[0]
+
+Now that we have the message, we want to look at its contents, and
+then we extract the address that lets us reset our password:
+
+  >>> import quopri
+  >>> msg = quopri.decodestring(msg)
+  >>> "To: jsmith@example.com" in msg
+  True
+  >>> "The site administrator asks you to reset your password for 'jsmith' userid" in msg
+  False
+  >>> please_visit_text = "The following link will take you to a page where you can reset your password for Plone site site:"
+  >>> please_visit_text in msg
+  True
+  >>> url_index = msg.index(please_visit_text) + len(please_visit_text)
+  >>> address = msg[url_index:].strip().split()[0]
+  >>> address # doctest: +ELLIPSIS
+  'http://nohost/plone/passwordreset/...'
+  >>> "If you didn't expect to receive this email" in msg
+  True
+
+Now that we have the address, we will reset our password:
+
+  >>> browser.open(address)
+  >>> "Set your password" in browser.contents
+  True
+
+  >>> form = browser.getForm(name='pwreset_action')
+  >>> form.getControl(name='userid').value = 'jsmith'
+  >>> form.getControl(name='password').value = 'secretion'
+  >>> form.getControl(name='password2').value = 'secretion'
+  >>> form.submit()
+
+We can now login using our new password:
+
+  >>> "Your password has been set successfully." in browser.contents
+  True
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'jsmith'
+  >>> browser.getControl(name='__ac_password').value = 'secretion'
+  >>> browser.getControl(name='submit').click()
+
+We should be logged in now:
+
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+
+2A. Administrator registers user
+--------------------------------
+
+  - Log in as the portal owner
+  - Browse to User and Group Management and add user
+  - Register a member (with send email checked???)
+  - Log out
+  - Log in as the new member
+  - A manager resets a user password
+  - Check if this is a hard reset (old password is changed)
+  - Check the received mail
+
+First, we want to login as the portal owner:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+We navigate to the Users Overview page and register a new user:
+
+  >>> browser.getLink('Site Setup').click()
+  >>> browser.getLink('Users and Groups').click()
+  >>> browser.getLink('Add New User').click()
+  >>> browser.url
+  'http://nohost/plone/@@new-user'
+
+  >>> browser.getControl('User Name').value = 'wsmith'
+  >>> browser.getControl('E-mail').value = 'wsmith@example.com'
+  >>> browser.getControl('Password').value = 'supersecret'
+  >>> browser.getControl('Confirm password').value = 'supersecret'
+  >>> browser.getControl('Register').click()
+  >>> 'User added.' in browser.contents
+  True
+
+XXX Make sure we don't have a way to send the credentials via e-mail.
+
+We want to logout and login as the new member:
+
+  >>> browser.getLink('Log out').click()
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'wsmith'
+  >>> browser.getControl(name='__ac_password').value = 'supersecret'
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+  >>> browser.getLink('Log out').click()
+
+Again, we want to login as the portal owner:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+We navigate to the Users Overview page and reset a password user:
+
+  >>> browser.getLink('Site Setup').click()
+  >>> browser.getLink('Users and Groups').click()
+  >>> resets = browser.getControl(name='users.resetpassword:records')
+  >>> reset = resets.getControl(value='wsmith')
+  >>> reset.selected = True  
+  >>> browser.getControl(name="form.button.Modify").click()
+  >>> "Changes applied." in browser.contents
+  True
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+We check if the old password is well changed.
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = 'wsmith'
+  >>> browser.getControl(name='__ac_password').value = 'supersecret'
+  >>> browser.getControl(name='submit').click()
+
+We should not be logged in:
+
+  >>> "Login failed" in browser.contents
+  True
+
+We should have received an e-mail at this point:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  2
+  >>> import quopri
+  >>> msg = quopri.decodestring(str(mailhost.messages[-1]))
+  >>> "The site administrator asks you to reset your password for 'wsmith' userid" in msg
+  True
+  >>> please_visit_text = "The following link will take you to a page where you can reset your password for Plone site site:"
+  >>> please_visit_text in msg
+  True
+  >>> "If you didn't expect to receive this email" in msg
+  False
+
+
+1B. User joins with e-mail validation enabled and forgets password
+------------------------------------------------------------------
+
+What we do here is quite similiar to 1A, but instead of typing in the
+password ourselves, we will be sent an e-mail with the URL to set our
+password.
+
+First off, we need to set ``validate_mail`` to False:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Let's go directly to the security control panel:
+
+  >>> browser.open('http://nohost/plone/@@security-controlpanel')
+  >>> ctrl = browser.getControl("Let users select their own passwords")
+  >>> ctrl.selected = False
+  >>> browser.getControl('Save').click()
+
+Log out again and then join:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+  >>> browser.open('http://nohost/plone/@@register')
+  >>> browser.getControl('User Name').value = 'bsmith'
+  >>> browser.getControl('E-mail').value = 'bsmith@example.com'
+
+We shouldn't be able to fill in our password:
+
+  >>> browser.getControl('Password').value = 'secret' # doctest: +ELLIPSIS
+  Traceback (most recent call last):
+  ...
+  LookupError: label 'Password'
+
+Now register:
+
+  >>> browser.getControl('Register').click()
+  >>> "You have been registered" in browser.contents
+  True
+
+We should have received an e-mail at this point:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  3
+  >>> msg = str(mailhost.messages[-1])
+
+Now that we have the message, we want to look at its contents, and
+then we extract the address that lets us reset our password:
+
+  >>> from email.parser import Parser
+  >>> import re
+  >>> parser = Parser()
+  >>> message = parser.parsestr(msg)
+  >>> message["To"]
+  'bsmith@example.com'
+  >>> msgtext = quopri.decodestring(message.get_payload())
+  >>> "Please activate it by visiting" in msgtext
+  True
+  >>> address = re.search('(http://nohost/plone/passwordreset/[a-z0-9]+\?userid=[\w]*)\s', msgtext).groups()[0]
+
+Now that we have the address, we will reset our password:
+
+  >>> browser.open(address)
+  >>> "Please fill out the form below to set your password" in browser.contents
+  True
+  >>> browser.getControl(name='userid').value = 'bsmith'
+  >>> browser.getControl(name='password').value = 'secret'
+  >>> browser.getControl(name='password2').value = 'secret'
+  >>> browser.getControl("Set my password").click()
+  >>> "Your password has been set successfully." in browser.contents
+  True
+
+Now we can log in:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl("Login Name").value = 'bsmith'
+  >>> browser.getControl("Password").value = 'secret'
+  >>> browser.getControl("Log in").click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+Log out again:
+
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+
+2B. Administrator adds user with email validation enabled
+---------------------------------------------------------
+
+Simliar to 2A, but instead of setting the password for new member, an
+e-mail is sent containing the URL that lets the user log in.
+
+First, we want to login as the portal owner:
+
+  >>> from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
+  >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
+  >>> browser.getControl(name='submit').click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+We navigate to the Users Overview page and register a new user:
+
+  >>> browser.getLink('Site Setup').click()
+  >>> browser.getLink('Users and Groups').click()
+  >>> browser.getLink('Add New User').click()
+  >>> browser.url
+  'http://nohost/plone/@@new-user'
+
+  >>> browser.getControl('User Name').value = 'wwwsmith'
+  >>> browser.getControl('E-mail').value = 'wwwsmith@example.com'
+  >>> browser.getControl('Password').value = 'secret'
+  >>> browser.getControl('Confirm password').value = 'secret'
+  >>> browser.getControl('Send a confirmation mail with a link to set the password').selected = True
+
+Now register and logout:
+
+  >>> browser.getControl('Register').click()
+  >>> browser.getLink('Log out').click()
+  >>> "You are now logged out" in browser.contents
+  True
+
+We should have received an e-mail at this point:
+
+  >>> mailhost = layer['portal'].MailHost
+  >>> len(mailhost.messages)
+  4
+  >>> msg = str(mailhost.messages[-1])
+
+Now that we have the message, we want to look at its contents, and
+then we extract the address that lets us reset our password:
+
+  >>> message = parser.parsestr(msg)
+  >>> message["To"]
+  'wwwsmith@example.com'
+  >>> msgtext = quopri.decodestring(message.get_payload())
+  >>> "Please activate it by visiting" in msgtext
+  True
+  >>> address = re.search('(http://nohost/plone/passwordreset/[a-z0-9]+\?userid=[\w]*)\s', msgtext).groups()[0]
+
+Now that we have the address, we will reset our password:
+
+  >>> browser.open(address)
+  >>> "Please fill out the form below to set your password" in browser.contents
+  True
+  >>> browser.getControl(name='userid').value = 'wwwsmith'
+  >>> browser.getControl(name='password').value = 'superstr0ng'
+  >>> browser.getControl(name='password2').value = 'superstr0ng'
+  >>> browser.getControl("Set my password").click()
+  >>> "Your password has been set successfully." in browser.contents
+  True
+
+Now we can log in:
+
+  >>> browser.open('http://nohost/plone/login')
+  >>> browser.getControl("Login Name").value = 'wwwsmith'
+  >>> browser.getControl("Password").value = 'superstr0ng'
+  >>> browser.getControl("Log in").click()
+  >>> "You are now logged in" in browser.contents
+  True
+
+  >>> browser.getLink('Log out').click()
+
+Test passwordreset BrowserView
+
+    Setup Plone email sender
+
+    >>> portal = layer['portal']
+    >>> mail_settings.email_from_name = u'Old\u0159ich a Bo\u017eena'
+    >>> from Products.CMFPlone.interfaces.controlpanel import ISiteSchema
+    >>> site_settings = registry.forInterface(ISiteSchema, prefix='plone')
+    >>> site_settings.site_title = u'Koko\u0159\xedn Portal'
+
+    Check view methods
+
+    >>> view = portal.restrictedTraverse('@@mail_password_template')
+    >>> view.encoded_mail_sender()
+    '"=?utf-8?q?Old=C5=99ich_a_Bo=C5=BEena?=" <smith@example.com>'
+
+    >>> view.registered_notify_subject()
+    u'User Account Information for Koko\u0159\xedn Portal'
+
+    >>> view.mail_password_subject()
+    u'Password reset request'
diff --git a/Products/CMFPlone/tests/test_functional.py b/Products/CMFPlone/tests/test_functional.py
index 09e2cdd..f278db9 100644
--- a/Products/CMFPlone/tests/test_functional.py
+++ b/Products/CMFPlone/tests/test_functional.py
@@ -10,7 +10,8 @@
 from Testing.ZopeTestCase import ZopeDocFileSuite
 
 
-UNITTESTS = ['messages.txt', 'mails.txt', 'emaillogin.txt', 'translate.txt']
+UNITTESTS = ['messages.txt', 'mails.txt', 'emaillogin.txt', 'translate.txt',
+             'pwreset_browser.txt']
 OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
 
 from Products.GenericSetup import EXTENSION, profile_registry
diff --git a/Products/CMFPlone/tests/test_passwordreset.py b/Products/CMFPlone/tests/test_passwordreset.py
new file mode 100644
index 0000000..b32fde7
--- /dev/null
+++ b/Products/CMFPlone/tests/test_passwordreset.py
@@ -0,0 +1,28 @@
+"""
+PasswordResetTool doctests
+"""
+
+import doctest
+import unittest
+
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from plone.testing import layered
+
+
+OPTIONFLAGS = (doctest.ELLIPSIS |
+               doctest.NORMALIZE_WHITESPACE # |
+#               doctest.REPORT_ONLY_FIRST_FAILURE
+               )
+
+
+def test_suite():
+    return unittest.TestSuite((
+        layered(
+            doctest.DocFileSuite(
+                'pwreset_browser.txt',
+                optionflags=OPTIONFLAGS,
+                package='Products.CMFPlone.tests',
+            ),
+            layer=PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+        ),
+    ))
diff --git a/setup.py b/setup.py
index 019a8c6..9052c5d 100644
--- a/setup.py
+++ b/setup.py
@@ -59,7 +59,6 @@
         'Products.ExternalEditor',
         'Products.GenericSetup >= 1.8.2',
         'Products.MimetypesRegistry',
-        'Products.PasswordResetTool',
         'Products.PlacelessTranslationService',
         # 'Products.PloneLanguageTool',
         'Products.PlonePAS',


