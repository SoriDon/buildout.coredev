Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T11:01:23+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/9bdf326f025f7d38b4597f120ea5125bef16d1f2

isort

Files changed:
M bootstrap.py
M plone/app/dexterity/behaviors/tests/test_contrains.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_upgrades.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex a629566..479fc7b 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,12 +18,13 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n tmpeggs = tempfile.mkdtemp()\n \n@@ -84,6 +85,7 @@\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n     if hasattr(site, \'getsitepackages\'):\n@@ -96,8 +98,9 @@\n     setup_args[\'version\'] = options.setuptools_version\n \n ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -167,6 +170,8 @@ def _final_version(parsed_version):\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n     raise Exception(\n         "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n@@ -178,6 +183,7 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n+\n if not [a for a in args if \'=\' not in a]:\n     args.append(\'bootstrap\')\n \ndiff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nindex 97b623f..8b882c6 100644\n--- a/plone/app/dexterity/behaviors/tests/test_contrains.py\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -1,10 +1,8 @@\n # -*- coding: utf-8 -*-\n+from plone.app.dexterity.behaviors.constrains import ACQUIRE\n+from plone.app.dexterity.behaviors.constrains import ConstrainTypesBehavior\n+from plone.app.dexterity.behaviors.constrains import DISABLED\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from plone.app.dexterity.behaviors.constrains import (\n-    ConstrainTypesBehavior,\n-    DISABLED,\n-    ACQUIRE,\n-)\n from zope.interface import alsoProvides\n \n import unittest\ndiff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py\nindex 7d39822..747eb98 100644\n--- a/plone/app/dexterity/browser/add_type.py\n+++ b/plone/app/dexterity/browser/add_type.py\n@@ -7,6 +7,7 @@\n from z3c.form import field\n from z3c.form import form\n \n+\n try:\n     from Products.CMFPlone.utils import safe_nativestring\n except ImportError:\ndiff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py\nindex c70f711..742d5e0 100644\n--- a/plone/app/dexterity/browser/types.py\n+++ b/plone/app/dexterity/browser/types.py\n@@ -13,7 +13,9 @@\n from plone.z3cform.crud import crud\n from plone.z3cform.layout import FormWrapper\n from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile as FiveViewPageTemplateFile  # noqa\n+from Products.Five.browser.pagetemplatefile import (\n+    ViewPageTemplateFile as FiveViewPageTemplateFile,\n+)  # noqa\n from six.moves import urllib\n from z3c.form import button\n from z3c.form import field\ndiff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py\nindex 62e6545..eb8f244 100644\n--- a/plone/app/dexterity/tests/test_permissions.py\n+++ b/plone/app/dexterity/tests/test_permissions.py\n@@ -4,8 +4,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING\n+from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY\n from plone.dexterity.browser.add import DefaultAddForm\ndiff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py\nindex cfe22e4..60c405a 100644\n--- a/plone/app/dexterity/tests/test_upgrades.py\n+++ b/plone/app/dexterity/tests/test_upgrades.py\n@@ -9,10 +9,11 @@ class TestUpgrades(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def test_add_missing_uuids(self):\n+        from plone.app.dexterity.upgrades.to2001 import add_missing_uuids\n         from plone.dexterity.fti import DexterityFTI\n         from plone.dexterity.utils import createContentInContainer\n-        from plone.app.dexterity.upgrades.to2001 import add_missing_uuids\n-        from plone.uuid.interfaces import IUUID, ATTRIBUTE_NAME\n+        from plone.uuid.interfaces import ATTRIBUTE_NAME\n+        from plone.uuid.interfaces import IUUID\n \n         # create a type and item and remove its UUID\n         self.layer[\'portal\'].portal_types._setObject(\n@@ -46,8 +47,7 @@ def test_upgrade_2003(self):\n         from plone.app.dexterity.upgrades.to2003 import fix_installed_products\n         from Products.CMFCore.utils import getToolByName\n         try:\n-            from Products.CMFQuickInstallerTool.InstalledProduct import \\\n-                InstalledProduct\n+            from Products.CMFQuickInstallerTool.InstalledProduct import InstalledProduct\n         except ImportError:\n             # nothing to test\n             return\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T11:01:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/8cb8ca8bb6adaaf2d2d21c1b41255c1c9d8c7998

black

Files changed:
M bootstrap.py
M docs/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/discussion.py
M plone/app/dexterity/behaviors/exclfromnav.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/id.py
M plone/app/dexterity/behaviors/nextprevious.py
M plone/app/dexterity/behaviors/related.py
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/fields.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/overview.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/browser/utils.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/serialize.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M plone/app/dexterity/tests/test_nextprevious.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_robot.py
M plone/app/dexterity/tests/test_upgrades.py
M plone/app/dexterity/upgrades/to1.py
M plone/app/dexterity/upgrades/to2.py
M plone/app/dexterity/upgrades/to2000.py
M plone/app/dexterity/upgrades/to2001.py
M plone/app/dexterity/upgrades/to2002.py
M plone/app/dexterity/upgrades/to2003.py
M plone/app/dexterity/upgrades/to2004.py
M plone/app/dexterity/upgrades/to2005.py
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex 479fc7b..dbd50b3 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -28,7 +28,7 @@\n \n tmpeggs = tempfile.mkdtemp()\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -38,30 +38,41 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n \n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--setuptools-version",\n-                  help="use a specific setuptools version")\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--setuptools-version", help="use a specific setuptools version")\n \n \n options, args = parser.parse_args()\n@@ -78,7 +89,7 @@\n     from urllib2 import urlopen\n \n ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n@@ -88,16 +99,16 @@\n \n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n \n-ez[\'use_setuptools\'](**setup_args)\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n import setuptools\n \n@@ -113,28 +124,35 @@\n \n ws = pkg_resources.working_set\n \n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -142,12 +160,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -166,15 +183,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n \n \n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -184,12 +200,12 @@ def _final_version(parsed_version):\n import zc.buildout.buildout\n \n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 95a2bec..0eb193b 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -18,133 +18,134 @@\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.append(os.path.abspath(\'.\'))\n+# sys.path.append(os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinx.ext.autodoc\',\n-#              \'collective.sphinx.autoatschema\',\n-#              \'collective.sphinx.includedoc\'\n-    ]\n+extensions = [\n+    "sphinx.ext.autodoc",\n+    #              \'collective.sphinx.autoatschema\',\n+    #              \'collective.sphinx.includedoc\'\n+]\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8\'\n+# source_encoding = \'utf-8\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'Dexterity Developer Manual\'\n-copyright = u\'Plone community and other individual contributors\'\n+project = u"Dexterity Developer Manual"\n+copyright = u"Plone community and other individual contributors"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n release = version\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of documents that shouldn\'t be included in the build.\n-#unused_docs = []\n+# unused_docs = []\n \n # List of directories, relative to source directory, that shouldn\'t be searched\n # for source files.\n # exclude_trees = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  Major themes that come with\n # Sphinx are currently \'default\' and \'sphinxdoc\'.\n-#html_theme = \'default\'\n-#html_theme = \'plone\'\n+# html_theme = \'default\'\n+# html_theme = \'plone\'\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-html_theme_path = [\'_themes\']\n+html_theme_path = ["_themes"]\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n html_title = "Dexterity Developer Manual"\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_style=\'plone.css\'\n-#html_logo=\'_static/logo.png\'\n+# html_style=\'plone.css\'\n+# html_logo=\'_static/logo.png\'\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n-#html_sidebars = {\n+# html_sidebars = {}\n+# html_sidebars = {\n #   \'**\': [\'localtoc.html\', \'searchbox.html\', \'plone.html\'],\n-#}\n+# }\n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n html_use_modindex = True\n@@ -153,54 +154,59 @@\n html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = \'\'\n+# html_file_suffix = \'\'\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'DexterityDeveloperManual\'\n+htmlhelp_basename = "DexterityDeveloperManual"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n # The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'letter\'\n+# latex_paper_size = \'letter\'\n \n # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n+# latex_font_size = \'10pt\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'DexterityDeveloperManual.tex\', u\'Dexterity Developer Manual\',\n-   u\'Plone community and individual contributors\', \'manual\'),\n+    (\n+        "index",\n+        "DexterityDeveloperManual.tex",\n+        u"Dexterity Developer Manual",\n+        u"Plone community and individual contributors",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n+# latex_preamble = \'\'\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_use_modindex = True\n+# latex_use_modindex = True\n \n # Do not try do funny things on our characters\n # http://sphinx.pocoo.org/config.html#confval-html_use_smartypants\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py\nindex 458e068..e6713e8 100644\n--- a/plone/app/dexterity/__init__.py\n+++ b/plone/app/dexterity/__init__.py\n@@ -4,5 +4,4 @@\n import warnings\n \n \n-_ = ZMessageFactory(\'plone\')\n-\n+_ = ZMessageFactory("plone")\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 557125f..0558495 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -11,7 +11,6 @@\n \n \n class ConstrainTypesBehavior(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -22,7 +21,7 @@ def getConstrainTypesMode(self):\n         and can be adapted to ISelectableConstrainTypes.\n         Else it is DISABLED\n         """\n-        if base_hasattr(self.context, \'constrain_types_mode\'):\n+        if base_hasattr(self.context, "constrain_types_mode"):\n             return self.context.constrain_types_mode\n         parent = self.context.__parent__\n         if not parent:\n@@ -41,10 +40,9 @@ def setConstrainTypesMode(self, mode):\n         self.context.constrain_types_mode = mode\n \n     def canSetConstrainTypes(self):\n-        mtool = getToolByName(self.context, \'portal_membership\')\n+        mtool = getToolByName(self.context, "portal_membership")\n         member = mtool.getAuthenticatedMember()\n-        return member.has_permission(\n-            \'Modify constrain types\', self.context)\n+        return member.has_permission("Modify constrain types", self.context)\n \n     def getDefaultAddableTypes(self, context=None):\n         if context is None:\n@@ -58,11 +56,14 @@ def _getAddableTypesFor(self, obj, context):\n         information in the types tool and for that the current user\n         has the correct add permission in the context of `context`\n         """\n-        portal_types = getToolByName(context, \'portal_types\')\n+        portal_types = getToolByName(context, "portal_types")\n         my_type = portal_types.getTypeInfo(obj)\n         result = portal_types.listTypeInfo()\n-        return [t for t in result if my_type.allowType(t.getId()) and\n-                t.isConstructionAllowed(context)]\n+        return [\n+            t\n+            for t in result\n+            if my_type.allowType(t.getId()) and t.isConstructionAllowed(context)\n+        ]\n \n     def _filterByDefaults(self, types, context=None):\n         """\n@@ -71,9 +72,7 @@ def _filterByDefaults(self, types, context=None):\n         """\n         if context is None:\n             context = self.context\n-        defaults = [\n-            fti.getId() for fti in self.getDefaultAddableTypes(context)\n-        ]\n+        defaults = [fti.getId() for fti in self.getDefaultAddableTypes(context)]\n         return [x for x in types if x in defaults]\n \n     def allowedContentTypes(self, context=None):\n@@ -92,9 +91,12 @@ def allowedContentTypes(self, context=None):\n         if mode == DISABLED:\n             return default_addable\n         elif mode == ENABLED:\n-            if hasattr(self.context, \'locally_allowed_types\'):\n-                return [t for t in default_addable if t.getId() in\n-                        self.context.locally_allowed_types]\n+            if hasattr(self.context, "locally_allowed_types"):\n+                return [\n+                    t\n+                    for t in default_addable\n+                    if t.getId() in self.context.locally_allowed_types\n+                ]\n             else:\n                 return default_addable\n         elif mode == ACQUIRE:\n@@ -103,11 +105,11 @@ def allowedContentTypes(self, context=None):\n             if not parent_constrain_adapter:\n                 return default_addable\n             return_tids = self._filterByDefaults(\n-                parent_constrain_adapter.getLocallyAllowedTypes(\n-                    context), context)\n+                parent_constrain_adapter.getLocallyAllowedTypes(context), context\n+            )\n             return [t for t in default_addable if t.getId() in return_tids]\n         else:\n-            msg = \'Wrong constraint setting. %i is an invalid value\'\n+            msg = "Wrong constraint setting. %i is an invalid value"\n             raise Exception(msg, mode)\n \n     def getLocallyAllowedTypes(self, context=None):\n@@ -123,7 +125,7 @@ def setLocallyAllowedTypes(self, types):\n         defaults = [t.getId() for t in self.getDefaultAddableTypes()]\n         for type_ in types:\n             if type_ not in defaults:\n-                raise ValueError(\'%s is not a valid type id\', type_)\n+                raise ValueError("%s is not a valid type id", type_)\n         self.context.locally_allowed_types = types\n \n     def getImmediatelyAddableTypes(self, context=None):\n@@ -137,16 +139,15 @@ def getImmediatelyAddableTypes(self, context=None):\n         if context is None:\n             context = self.context\n         mode = self.getConstrainTypesMode()\n-        default_addable = [\n-            t.getId() for t in self.getDefaultAddableTypes(context)\n-        ]\n+        default_addable = [t.getId() for t in self.getDefaultAddableTypes(context)]\n \n         if mode == DISABLED:\n             return default_addable\n         elif mode == ENABLED:\n-            if hasattr(self.context, \'immediately_addable_types\'):\n+            if hasattr(self.context, "immediately_addable_types"):\n                 return self._filterByDefaults(\n-                    self.context.immediately_addable_types, context)\n+                    self.context.immediately_addable_types, context\n+                )\n             return default_addable\n         elif mode == ACQUIRE:\n             parent = self.context.__parent__\n@@ -154,15 +155,15 @@ def getImmediatelyAddableTypes(self, context=None):\n             if not parent_constrain_adapter:\n                 return default_addable\n             return self._filterByDefaults(\n-                parent_constrain_adapter.getImmediatelyAddableTypes(\n-                    context), context)\n+                parent_constrain_adapter.getImmediatelyAddableTypes(context), context\n+            )\n         else:\n-            msg = \'Wrong constraint setting. %i is an invalid value\'\n+            msg = "Wrong constraint setting. %i is an invalid value"\n             raise Exception(msg, mode)\n \n     def setImmediatelyAddableTypes(self, types):\n         defaults = [t.getId() for t in self.getDefaultAddableTypes()]\n         for type_ in types:\n             if type_ not in defaults:\n-                raise ValueError(\'%s is not a valid type id\', type_)\n+                raise ValueError("%s is not a valid type id", type_)\n         self.context.immediately_addable_types = types\ndiff --git a/plone/app/dexterity/behaviors/discussion.py b/plone/app/dexterity/behaviors/discussion.py\nindex b3f3d52..522db29 100644\n--- a/plone/app/dexterity/behaviors/discussion.py\n+++ b/plone/app/dexterity/behaviors/discussion.py\n@@ -11,29 +11,31 @@\n from zope.schema.vocabulary import SimpleVocabulary\n \n \n-options = SimpleVocabulary([\n-    SimpleTerm(value=True, title=_(u\'Yes\')),\n-    SimpleTerm(value=False, title=_(u\'No\')),\n-])\n+options = SimpleVocabulary(\n+    [\n+        SimpleTerm(value=True, title=_(u"Yes")),\n+        SimpleTerm(value=False, title=_(u"No")),\n+    ]\n+)\n \n \n @provider(IFormFieldProvider)\n class IAllowDiscussion(model.Schema):\n \n     model.fieldset(\n-        \'settings\',\n+        "settings",\n         label=_(u"Settings"),\n-        fields=[\'allow_discussion\'],\n+        fields=["allow_discussion"],\n     )\n \n     allow_discussion = schema.Choice(\n-        title=_(u\'Allow discussion\'),\n-        description=_(u\'Allow discussion for this content object.\'),\n+        title=_(u"Allow discussion"),\n+        description=_(u"Allow discussion for this content object."),\n         vocabulary=options,\n         required=False,\n         default=None,\n     )\n \n-    directives.omitted(\'allow_discussion\')\n-    directives.no_omit(IEditForm, \'allow_discussion\')\n-    directives.no_omit(IAddForm, \'allow_discussion\')\n+    directives.omitted("allow_discussion")\n+    directives.no_omit(IEditForm, "allow_discussion")\n+    directives.no_omit(IAddForm, "allow_discussion")\ndiff --git a/plone/app/dexterity/behaviors/exclfromnav.py b/plone/app/dexterity/behaviors/exclfromnav.py\nindex 3d8c9ec..4e331fd 100644\n--- a/plone/app/dexterity/behaviors/exclfromnav.py\n+++ b/plone/app/dexterity/behaviors/exclfromnav.py\n@@ -13,23 +13,19 @@\n \n \n class IExcludeFromNavigationDefault(Interface):\n-\n     def __call__():\n-        """boolean if item is by default excluded from navigation or not.\n-        """\n+        """boolean if item is by default excluded from navigation or not."""\n \n \n @implementer(IExcludeFromNavigationDefault)\n def default_exclude_false(context):\n-    """provide a default adapter with the standard uses\n-    """\n+    """provide a default adapter with the standard uses"""\n     return False\n \n \n @implementer(IExcludeFromNavigationDefault)\n def default_exclude_true(context):\n-    """provide a alternative adapter with opposite default as standard\n-    """\n+    """provide a alternative adapter with opposite default as standard"""\n     return True\n \n \n@@ -40,29 +36,21 @@ def default_exclude(context):\n \n @provider(IFormFieldProvider)\n class IExcludeFromNavigation(model.Schema):\n-    """Behavior interface to exclude items from navigation.\n-    """\n+    """Behavior interface to exclude items from navigation."""\n \n-    model.fieldset(\n-        \'settings\',\n-        label=_(u"Settings"),\n-        fields=[\'exclude_from_nav\']\n-    )\n+    model.fieldset("settings", label=_(u"Settings"), fields=["exclude_from_nav"])\n \n     exclude_from_nav = schema.Bool(\n-        title=_(\n-            u\'label_exclude_from_nav\',\n-            default=u\'Exclude from navigation\'\n-        ),\n+        title=_(u"label_exclude_from_nav", default=u"Exclude from navigation"),\n         description=_(\n-            u\'help_exclude_from_nav\',\n-            default=u\'If selected, this item will not appear in the \'\n-                    u\'navigation tree\'\n+            u"help_exclude_from_nav",\n+            default=u"If selected, this item will not appear in the "\n+            u"navigation tree",\n         ),\n         defaultFactory=default_exclude,\n         required=False,\n     )\n \n-    directives.omitted(\'exclude_from_nav\')\n-    directives.no_omit(IEditForm, \'exclude_from_nav\')\n-    directives.no_omit(IAddForm, \'exclude_from_nav\')\n+    directives.omitted("exclude_from_nav")\n+    directives.no_omit(IEditForm, "exclude_from_nav")\n+    directives.no_omit(IAddForm, "exclude_from_nav")\ndiff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py\nindex 92a6b62..6e53cac 100644\n--- a/plone/app/dexterity/behaviors/filename.py\n+++ b/plone/app/dexterity/behaviors/filename.py\n@@ -16,17 +16,16 @@ class INameFromFileName(Interface):\n @implementer(INameFromTitle)\n @adapter(INameFromFileName)\n class NameFromFileName(object):\n-\n     def __new__(cls, context):\n         info = IPrimaryFieldInfo(context, None)\n         if info is None:\n             return None\n-        filename = getattr(info.value, \'filename\', None)\n+        filename = getattr(info.value, "filename", None)\n         if not isinstance(filename, six.string_types) or not filename:\n             return None\n         instance = super(NameFromFileName, cls).__new__(cls)\n         instance.title = filename\n-        if safe_hasattr(context, \'title\') and not context.title:\n+        if safe_hasattr(context, "title") and not context.title:\n             context.title = filename\n         return instance\n \ndiff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py\nindex 1cf8046..d3d865a 100644\n--- a/plone/app/dexterity/behaviors/id.py\n+++ b/plone/app/dexterity/behaviors/id.py\n@@ -18,21 +18,20 @@\n class IShortName(model.Schema):\n \n     model.fieldset(\n-        \'settings\',\n+        "settings",\n         label=_(u"Settings"),\n-        fields=[\'id\'],\n+        fields=["id"],\n     )\n \n     id = schema.ASCIILine(\n-        title=_(u\'Short name\'),\n-        description=_(u\'This name will be displayed in the URL.\'),\n+        title=_(u"Short name"),\n+        description=_(u"This name will be displayed in the URL."),\n         required=False,\n     )\n-    directives.write_permission(id=\'cmf.AddPortalContent\')\n+    directives.write_permission(id="cmf.AddPortalContent")\n \n \n class ShortName(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -49,7 +48,7 @@ def _set_id(self, value):\n             context.id = value\n             return\n         new_id = INameChooser(parent).chooseName(value, context)\n-        if getattr(aq_base(context), \'id\', None):\n+        if getattr(aq_base(context), "id", None):\n             transaction.savepoint()\n             locked = False\n             lockable = ILockable(context, None)\n@@ -61,4 +60,5 @@ def _set_id(self, value):\n                 lockable.lock()\n         else:\n             context.id = new_id\n+\n     id = property(_get_id, _set_id)\ndiff --git a/plone/app/dexterity/behaviors/nextprevious.py b/plone/app/dexterity/behaviors/nextprevious.py\nindex a1f7b1c..17148a8 100644\n--- a/plone/app/dexterity/behaviors/nextprevious.py\n+++ b/plone/app/dexterity/behaviors/nextprevious.py\n@@ -27,29 +27,24 @@ class INextPreviousEnabled(Interface):\n \n @provider(IFormFieldProvider)\n class INextPreviousToggle(model.Schema):\n-    """Behavior interface to enable next previous navigation per item.\n-    """\n+    """Behavior interface to enable next previous navigation per item."""\n \n-    model.fieldset(\'settings\', label=_(u"Settings"),\n-                   fields=[\'nextPreviousEnabled\'])\n+    model.fieldset("settings", label=_(u"Settings"), fields=["nextPreviousEnabled"])\n \n     nextPreviousEnabled = schema.Bool(\n-        title=_(\n-            u\'label_nextprevious\',\n-            default=u\'Enable next previous navigation\'\n-        ),\n+        title=_(u"label_nextprevious", default=u"Enable next previous navigation"),\n         description=_(\n-            u\'help_nextprevious\',\n-            default=u\'This enables next/previous widget on content items \' +\n-                    u\'contained in this folder.\'\n+            u"help_nextprevious",\n+            default=u"This enables next/previous widget on content items "\n+            + u"contained in this folder.",\n         ),\n         default=False,\n         required=False,\n     )\n \n-    directives.omitted(\'nextPreviousEnabled\')\n-    directives.no_omit(IEditForm, \'nextPreviousEnabled\')\n-    directives.no_omit(IAddForm, \'nextPreviousEnabled\')\n+    directives.omitted("nextPreviousEnabled")\n+    directives.no_omit(IEditForm, "nextPreviousEnabled")\n+    directives.no_omit(IAddForm, "nextPreviousEnabled")\n \n \n def getNextPreviousParentValue(adapter_):\n@@ -59,20 +54,21 @@ def getNextPreviousParentValue(adapter_):\n         return False\n     return nextprevious.enabled\n \n+\n DefaultNextPreviousEnabled = widget.ComputedWidgetAttribute(\n     getNextPreviousParentValue,\n-    field=INextPreviousToggle[\'nextPreviousEnabled\'],\n+    field=INextPreviousToggle["nextPreviousEnabled"],\n )\n \n \n # This is taken from plone.app.folder\n class NextPreviousBase(object):\n-    """ adapter for acting as a next/previous provider """\n+    """adapter for acting as a next/previous provider"""\n \n     def __init__(self, context):\n         self.context = context\n         registry = getUtility(IRegistry)\n-        self.vat = registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        self.vat = registry.get("plone.types_use_view_action_in_listings", [])\n         self.security = getSecurityManager()\n         order = context.getOrdering()\n         if not isinstance(order, list):\n@@ -82,31 +78,31 @@ def __init__(self, context):\n         self.order = order\n \n     def getNextItem(self, obj):\n-        """ return info about the next item in the container """\n+        """return info about the next item in the container"""\n         if not self.order:\n             return None\n         pos = self.context.getObjectPosition(obj.getId())\n         if pos is None:\n             return None\n-        for oid in self.order[pos + 1:]:\n+        for oid in self.order[pos + 1 :]:\n             data = self.getData(self.context[oid])\n             if data:\n                 return data\n \n     def getPreviousItem(self, obj):\n-        """ return info about the previous item in the container """\n+        """return info about the previous item in the container"""\n         if not self.order:\n             return None\n         order_reversed = list(reversed(self.order))\n         pos = order_reversed.index(obj.getId())\n-        for oid in order_reversed[pos + 1:]:\n+        for oid in order_reversed[pos + 1 :]:\n             data = self.getData(self.context[oid])\n             if data:\n                 return data\n \n     def getData(self, obj):\n-        """ return the expected mapping, see `INextPreviousProvider` """\n-        if not self.security.checkPermission(\'View\', obj):\n+        """return the expected mapping, see `INextPreviousProvider`"""\n+        if not self.security.checkPermission("View", obj):\n             return None\n         elif not IContentish.providedBy(obj):\n             # do not return a not contentish object\n@@ -115,30 +111,30 @@ def getData(self, obj):\n \n         ptype = obj.portal_type\n         url = obj.absolute_url()\n-        if ptype in self.vat:       # "use view action in listings"\n-            url += \'/view\'\n+        if ptype in self.vat:  # "use view action in listings"\n+            url += "/view"\n         return dict(\n             id=obj.getId(),\n             url=url,\n             title=obj.Title(),\n             description=obj.Description(),\n-            portal_type=ptype\n+            portal_type=ptype,\n         )\n \n \n @implementer(INextPreviousProvider)\n @adapter(INextPreviousToggle)\n class NextPreviousToggle(NextPreviousBase):\n-    """ adapter for acting as a next/previous provider """\n+    """adapter for acting as a next/previous provider"""\n \n     @property\n     def enabled(self):\n-        return getattr(aq_base(self.context), \'nextPreviousEnabled\', False)\n+        return getattr(aq_base(self.context), "nextPreviousEnabled", False)\n \n \n @implementer(INextPreviousProvider)\n @adapter(INextPreviousEnabled)\n class NextPreviousEnabled(NextPreviousBase):\n-    """ adapter for acting as a next/previous provider """\n+    """adapter for acting as a next/previous provider"""\n \n     enabled = True\ndiff --git a/plone/app/dexterity/behaviors/related.py b/plone/app/dexterity/behaviors/related.py\nindex 4405c59..86b8b06 100644\n--- a/plone/app/dexterity/behaviors/related.py\n+++ b/plone/app/dexterity/behaviors/related.py\n@@ -13,6 +13,5 @@\n \n def related_items_behavior_BBB():\n     return queryUtility(\n-        IBehavior,\n-        name=u\'plone.app.relationfield.behavior.IRelatedItems\'\n+        IBehavior, name=u"plone.app.relationfield.behavior.IRelatedItems"\n     )\ndiff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py\nindex 701b809..fc966cd 100644\n--- a/plone/app/dexterity/behaviors/tests/test_id.py\n+++ b/plone/app/dexterity/behaviors/tests/test_id.py\n@@ -15,100 +15,101 @@ class TestShortNameBehavior(unittest.TestCase):\n \n     def setUp(self):\n         # add IShortName behavior to Page\n-        behaviors = list(self.layer[\'portal\'].portal_types.Document.behaviors)\n-        behaviors.append(\'plone.app.dexterity.behaviors.id.IShortName\')\n-        self.layer[\'portal\'].portal_types.Document.behaviors = tuple(behaviors)\n+        behaviors = list(self.layer["portal"].portal_types.Document.behaviors)\n+        behaviors.append("plone.app.dexterity.behaviors.id.IShortName")\n+        self.layer["portal"].portal_types.Document.behaviors = tuple(behaviors)\n         transaction.commit()\n \n         # prepare browser\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n-        self.browser.open(\'http://nohost/plone\')\n+        self.browser.open("http://nohost/plone")\n \n     def test_add_item_w_id_specified(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo")\n \n         # adding another item should append a suffix\n-        self.browser.open(\'http://nohost/plone\')\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo-1\')\n+        self.browser.open("http://nohost/plone")\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo-1")\n \n     def test_add_item_w_reserved_name(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'login\'  # naughty\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/login-1\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "login"  # naughty\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/login-1")\n \n     def test_add_item_w_title_only(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'Id from Title\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/id-from-title\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "Id from Title"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/id-from-title")\n \n     def test_edit_item_renames(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(\'Edit\').click()\n-        self.assertEqual(self.browser.getControl(\'Short name\').value, \'foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink("Edit").click()\n+        self.assertEqual(self.browser.getControl("Short name").value, "foo")\n         # spaces should get stripped\n-        self.browser.getControl(\'Short name\').value = \' bar \'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/bar\')\n+        self.browser.getControl("Short name").value = " bar "\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/bar")\n \n     def test_edit_item_doesnt_rename_if_id_blank(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(\'Edit\').click()\n-        self.browser.getControl(\'Short name\').value = \'\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink("Edit").click()\n+        self.browser.getControl("Short name").value = ""\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo")\n \n     def test_edit_item_doesnt_rename_if_same_id(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        mtime = DateTime(self.layer[\'portal\'].foo._p_mtime)\n-        self.browser.getLink(\'Edit\').click()\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        mtime = DateTime(self.layer["portal"].foo._p_mtime)\n+        self.browser.getLink("Edit").click()\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo")\n         # assert that object has not been modified\n-        self.assertEqual(\n-            mtime, DateTime(self.layer[\'portal\'].foo._p_mtime)\n-        )\n+        self.assertEqual(mtime, DateTime(self.layer["portal"].foo._p_mtime))\n \n-        behaviors = list(self.layer[\'portal\'].portal_types.Document.behaviors)\n-        behaviors.append(\'plone.app.lockingbehavior.behaviors.ILocking\')\n+        behaviors = list(self.layer["portal"].portal_types.Document.behaviors)\n+        behaviors.append("plone.app.lockingbehavior.behaviors.ILocking")\n \n     def test_rename_works_with_lockingbehavior(self):\n         """Test if the object is unlocked before renaming"""\n-        behaviors = list(self.layer[\'portal\'].portal_types.Document.behaviors)\n-        behaviors.append(\'plone.app.lockingbehavior.behaviors.ILocking\')\n-        self.layer[\'portal\'].portal_types.Document.behaviors = tuple(behaviors)\n+        behaviors = list(self.layer["portal"].portal_types.Document.behaviors)\n+        behaviors.append("plone.app.lockingbehavior.behaviors.ILocking")\n+        self.layer["portal"].portal_types.Document.behaviors = tuple(behaviors)\n         transaction.commit()\n \n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(\'Edit\').click()\n-        self.assertEqual(self.browser.getControl(\'Short name\').value, \'foo\')\n-        self.browser.getControl(\'Short name\').value = \'bar\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/bar\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink("Edit").click()\n+        self.assertEqual(self.browser.getControl("Short name").value, "foo")\n+        self.browser.getControl("Short name").value = "bar"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/bar")\ndiff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py\nindex a1c698e..0d987a3 100644\n--- a/plone/app/dexterity/behaviors/tests/test_metadata.py\n+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py\n@@ -14,80 +14,82 @@\n \n \n class TestBasic(unittest.TestCase):\n-\n     def _makeOne(self):\n         class Dummy(object):\n             pass\n+\n         dummy = Dummy()\n         from plone.app.dexterity.behaviors.metadata import Basic\n+\n         return Basic(dummy)\n \n     def test_title_setter(self):\n         b = self._makeOne()\n-        b.title = u\'foo\'\n-        self.assertEqual(u\'foo\', b.context.title)\n+        b.title = u"foo"\n+        self.assertEqual(u"foo", b.context.title)\n \n-    @unittest.skipUnless(six.PY2, \'Only for py2\')\n+    @unittest.skipUnless(six.PY2, "Only for py2")\n     def test_title_setter_rejects_bytestrings(self):\n         b = self._makeOne()\n         with self.assertRaises(ValueError):\n-            setattr(b, \'title\', \'f\xc3\xb8\xc3\xb8\')\n+            setattr(b, "title", "f\xc3\xb8\xc3\xb8")\n \n     def test_title_getter(self):\n         b = self._makeOne()\n-        b.context.title = u\'foo\'\n-        self.assertEqual(u\'foo\', b.title)\n+        b.context.title = u"foo"\n+        self.assertEqual(u"foo", b.title)\n \n     def test_description_setter(self):\n         b = self._makeOne()\n-        b.description = u\'foo\'\n-        self.assertEqual(u\'foo\', b.context.description)\n+        b.description = u"foo"\n+        self.assertEqual(u"foo", b.context.description)\n \n-    @unittest.skipUnless(six.PY2, \'Only for py2\')\n+    @unittest.skipUnless(six.PY2, "Only for py2")\n     def test_description_setter_rejects_bytestrings(self):\n         b = self._makeOne()\n         with self.assertRaises(ValueError):\n-            setattr(b, \'description\', \'f\xc3\xb8\xc3\xb8\')\n+            setattr(b, "description", "f\xc3\xb8\xc3\xb8")\n \n     def test_description_getter(self):\n         b = self._makeOne()\n-        b.context.description = u\'foo\'\n-        self.assertEqual(u\'foo\', b.description)\n+        b.context.description = u"foo"\n+        self.assertEqual(u"foo", b.description)\n \n     def test_description_remains_newlines(self):\n         b = self._makeOne()\n-        b.description = u\'foo\\r\\nbar\\nbaz\\r\'\n-        self.assertEqual(u\'foo\\r\\nbar\\nbaz\\r\', b.context.description)\n+        b.description = u"foo\\r\\nbar\\nbaz\\r"\n+        self.assertEqual(u"foo\\r\\nbar\\nbaz\\r", b.context.description)\n \n \n class TestCategorization(unittest.TestCase):\n-\n     def _makeOne(self):\n         class Dummy(object):\n             pass\n+\n         dummy = Dummy()\n         from plone.app.dexterity.behaviors.metadata import Categorization\n+\n         return Categorization(dummy)\n \n     def test_subjects_setter(self):\n         b = self._makeOne()\n-        b.subjects = (u\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((u\'f\xc3\xb8\xc3\xb8\',), b.context.subject)\n+        b.subjects = (u"f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual((u"f\xc3\xb8\xc3\xb8",), b.context.subject)\n \n     def test_subjects_getter(self):\n         b = self._makeOne()\n-        b.context.subject = (u\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((u\'f\xc3\xb8\xc3\xb8\',), b.subjects)\n+        b.context.subject = (u"f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual((u"f\xc3\xb8\xc3\xb8",), b.subjects)\n \n \n class CategorizationIntegrationTests(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_categorization_language(self):\n         """The vocabulary of the language field in the ICategorization\n@@ -96,32 +98,30 @@ def test_categorization_language(self):\n         """\n         # set available languages\n         registry = getUtility(IRegistry)\n-        registry[\'plone.available_languages\'] = [\'hu\', \'sl\']\n+        registry["plone.available_languages"] = ["hu", "sl"]\n \n-        self.portal.invokeFactory(\'Folder\', \'test\')\n+        self.portal.invokeFactory("Folder", "test")\n         ob = self.portal.test\n         cat = ICategorization(ob)\n \n-        cat.language = \'hu\'\n-        self.assertEqual(ob.language, \'hu\')\n+        cat.language = "hu"\n+        self.assertEqual(ob.language, "hu")\n \n-        cat.language = \'sl\'\n-        self.assertEqual(ob.language, \'sl\')\n+        cat.language = "sl"\n+        self.assertEqual(ob.language, "sl")\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            cat.language = \'de\'\n+            cat.language = "de"\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            cat.language = \'en\'\n+            cat.language = "en"\n \n \n class TestDCFieldProperty(unittest.TestCase):\n-\n     def _makeOne(self):\n         class Dummy(object):\n-\n             def addCreator(self, creator=None):\n-                self.creators = (creator or \'dummy_user\', )\n+                self.creators = (creator or "dummy_user",)\n \n             def setRights(self, rights):\n                 self.rights = rights\n@@ -137,24 +137,25 @@ def listCreators(self):\n \n         dummy = Dummy()\n         from plone.app.dexterity.behaviors.metadata import DublinCore\n+\n         return DublinCore(dummy)\n \n     def test_sequence_text_setter(self):\n         b = self._makeOne()\n-        b.creators = (u\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((\'f\xc3\xb8\xc3\xb8\',), b.context.creators)\n+        b.creators = (u"f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.context.creators)\n \n     def test_sequence_text_getter(self):\n         b = self._makeOne()\n-        b.context.creators = (\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((u\'f\xc3\xb8\xc3\xb8\',), b.creators)\n+        b.context.creators = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual((u"f\xc3\xb8\xc3\xb8",), b.creators)\n \n     def test_text_setter(self):\n         b = self._makeOne()\n-        b.rights = u\'f\xc3\xb8\xc3\xb8\'\n-        self.assertEqual(\'f\xc3\xb8\xc3\xb8\', b.context.rights)\n+        b.rights = u"f\xc3\xb8\xc3\xb8"\n+        self.assertEqual("f\xc3\xb8\xc3\xb8", b.context.rights)\n \n     def test_text_getter(self):\n         b = self._makeOne()\n-        b.context.rights = \'f\xc3\xb8\xc3\xb8\'\n-        self.assertEqual(u\'f\xc3\xb8\xc3\xb8\', b.rights)\n+        b.context.rights = "f\xc3\xb8\xc3\xb8"\n+        self.assertEqual(u"f\xc3\xb8\xc3\xb8", b.rights)\ndiff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py\nindex 747eb98..04e2286 100644\n--- a/plone/app/dexterity/browser/add_type.py\n+++ b/plone/app/dexterity/browser/add_type.py\n@@ -17,9 +17,8 @@\n \n     import six\n \n-    def safe_nativestring(value, encoding=\'utf-8\'):\n-        """Convert a value to str in py2 and to text in py3\n-        """\n+    def safe_nativestring(value, encoding="utf-8"):\n+        """Convert a value to str in py2 and to text in py3"""\n         if six.PY2 and isinstance(value, six.text_type):\n             value = safe_encode(value, encoding)\n         if not six.PY2 and isinstance(value, six.binary_type):\n@@ -29,39 +28,43 @@ def safe_nativestring(value, encoding=\'utf-8\'):\n \n class TypeAddForm(form.AddForm):\n \n-    label = _(u\'Add Content Type\')\n-    fields = field.Fields(ITypeSettings).select(\'title\', \'id\', \'description\')\n-    id = \'add-type-form\'\n+    label = _(u"Add Content Type")\n+    fields = field.Fields(ITypeSettings).select("title", "id", "description")\n+    id = "add-type-form"\n     fti_id = None\n \n     def create(self, data):\n-        id = data.pop(\'id\')\n+        id = data.pop("id")\n \n         fti = DexterityFTI(id)\n         fti.id = id\n-        data[\'title\'] = safe_nativestring(data[\'title\'])\n-        if data[\'description\']:\n-            data[\'description\'] = safe_nativestring(data[\'description\'])\n-        data[\'i18n_domain\'] = \'plone\'\n-        data[\'behaviors\'] = \'\\n\'.join([\n-            \'plone.dublincore\',\n-            \'plone.namefromtitle\',\n-        ])\n-        data[\'model_source\'] = """\n+        data["title"] = safe_nativestring(data["title"])\n+        if data["description"]:\n+            data["description"] = safe_nativestring(data["description"])\n+        data["i18n_domain"] = "plone"\n+        data["behaviors"] = "\\n".join(\n+            [\n+                "plone.dublincore",\n+                "plone.namefromtitle",\n+            ]\n+        )\n+        data[\n+            "model_source"\n+        ] = """\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n     <schema>\n     </schema>\n </model>\n """\n \n-        data[\'klass\'] = \'plone.dexterity.content.Container\'\n-        data[\'filter_content_types\'] = True\n-        data[\'icon_expr\'] = \'string:file-earmark-text\'\n+        data["klass"] = "plone.dexterity.content.Container"\n+        data["filter_content_types"] = True\n+        data["icon_expr"] = "string:file-earmark-text"\n         fti.manage_changeProperties(**data)\n         return fti\n \n     def add(self, fti):\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         ttool._setObject(fti.id, fti)\n         self.fti_id = fti.id\n         self.status = _(u"Type added successfully.")\n@@ -69,7 +72,8 @@ def add(self, fti):\n     def nextURL(self):\n         url = self.context.absolute_url()\n         if self.fti_id is not None:\n-            url += \'/{0}/@@fields\'.format(self.fti_id)\n+            url += "/{0}/@@fields".format(self.fti_id)\n         return url\n \n+\n TypeAddFormPage = wrap_form(TypeAddForm)\ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 1ee12a2..57289af 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -28,9 +28,8 @@\n     from Products.CMFPlone.utils import safe_encode\n     from Products.CMFPlone.utils import safe_unicode\n \n-    def safe_nativestring(value, encoding=\'utf-8\'):\n-        """Convert a value to str in py2 and to text in py3\n-        """\n+    def safe_nativestring(value, encoding="utf-8"):\n+        """Convert a value to str in py2 and to text in py3"""\n         if six.PY2 and isinstance(value, six.text_type):\n             value = safe_encode(value, encoding)\n         if not six.PY2 and isinstance(value, six.binary_type):\n@@ -40,29 +39,28 @@ def safe_nativestring(value, encoding=\'utf-8\'):\n \n TTW_BEHAVIOR_BLACKLIST = [\n     # skip deprecated behavior\n-    \'plone.app.dexterity.behaviors.related.IRelatedItems\',\n+    "plone.app.dexterity.behaviors.related.IRelatedItems",\n ]\n \n \n def behaviorConfigurationModified(object, event):\n-    description = DexterityFTIModificationDescription(\'behaviors\', \'\')\n+    description = DexterityFTIModificationDescription("behaviors", "")\n     modified(object.fti, description)\n \n \n @adapter(ITypeSchemaContext)\n class BehaviorConfigurationAdapter(object):\n-\n     def __init__(self, context):\n-        self.__dict__[\'context\'] = context\n-        self.__dict__[\'fti\'] = self.context.fti\n+        self.__dict__["context"] = context\n+        self.__dict__["fti"] = self.context.fti\n \n     def __getattr__(self, name):\n         # be sure to get a valid value\n         reg = lookup_behavior_registration(name=name)\n         iid = reg.interface.__identifier__\n         return (\n-            iid in self.fti.behaviors or\n-            safe_nativestring(reg.name) in self.fti.behaviors\n+            iid in self.fti.behaviors\n+            or safe_nativestring(reg.name) in self.fti.behaviors\n         )\n \n     def __setattr__(self, name, value):\n@@ -105,22 +103,20 @@ def __iter__(self):\n \n class TypeBehaviorsForm(form.EditForm):\n \n-    template = ViewPageTemplateFile(\'behaviors.pt\')\n-    label = _(u\'Behaviors\')\n-    description = _(u\'Select the behaviors to enable for this content type.\')\n-    successMessage = _(u\'Behaviors successfully updated.\')\n-    noChangesMessage = _(u\'No changes were made.\')\n+    template = ViewPageTemplateFile("behaviors.pt")\n+    label = _(u"Behaviors")\n+    description = _(u"Select the behaviors to enable for this content type.")\n+    successMessage = _(u"Behaviors successfully updated.")\n+    noChangesMessage = _(u"No changes were made.")\n     buttons = deepcopy(form.EditForm.buttons)\n-    buttons[\'apply\'].title = _(u\'Save\')\n+    buttons["apply"].title = _(u"Save")\n \n     def getContent(self):\n         return BehaviorConfigurationAdapter(self.context)\n \n     @property\n     def fields(self):\n-        counts = Counter(\n-            [id(reg) for name, reg in getUtilitiesFor(IBehavior)]\n-        )\n+        counts = Counter([id(reg) for name, reg in getUtilitiesFor(IBehavior)])\n         fields = []\n         for name, reg in getUtilitiesFor(IBehavior):\n             if name in TTW_BEHAVIOR_BLACKLIST:\n@@ -135,10 +131,10 @@ def fields(self):\n                     __name__=fname,\n                     title=reg.title,\n                     description=reg.description,\n-                    required=False\n+                    required=False,\n                 )\n             )\n-        form_fields = field.Fields(*sorted(fields, key=attrgetter(\'title\')))\n+        form_fields = field.Fields(*sorted(fields, key=attrgetter("title")))\n         for ff in form_fields.values():\n             ff.widgetFactory = SingleCheckBoxFieldWidget\n         return form_fields\n@@ -146,4 +142,4 @@ def fields(self):\n \n class TypeBehaviorsPage(TypeFormLayout):\n     form = TypeBehaviorsForm\n-    label = _(u\'Behaviors\')\n+    label = _(u"Behaviors")\ndiff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py\nindex 5fd573c..a6c246d 100644\n--- a/plone/app/dexterity/browser/clone_type.py\n+++ b/plone/app/dexterity/browser/clone_type.py\n@@ -10,31 +10,31 @@\n \n class TypeCloneForm(form.AddForm):\n \n-    label = _(u\'Clone Content Type\')\n-    fields = field.Fields(ITypeSettings).select(\'title\', \'id\')\n-    id = \'clone-type-form\'\n+    label = _(u"Clone Content Type")\n+    fields = field.Fields(ITypeSettings).select("title", "id")\n+    id = "clone-type-form"\n \n     def create(self, data):\n-        type_id = data.pop(\'id\')\n+        type_id = data.pop("id")\n         props = dict(self.context.fti.propertyItems())\n         # make sure we don\'t share the factory\n-        if props[\'factory\'] == self.context.fti.getId():\n-            del props[\'factory\']\n+        if props["factory"] == self.context.fti.getId():\n+            del props["factory"]\n \n-        props[\'title\'] = data[\'title\']\n-        props[\'add_view_expr\'] = props[\'add_view_expr\'].replace(\n-            self.context.fti.getId(),\n-            type_id\n+        props["title"] = data["title"]\n+        props["add_view_expr"] = props["add_view_expr"].replace(\n+            self.context.fti.getId(), type_id\n         )\n         fti = DexterityFTI(type_id, **props)\n         return fti\n \n     def add(self, fti):\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         ttool._setObject(fti.id, fti)\n         self.status = _(u"Type cloned successfully.")\n \n     def nextURL(self):\n         return self.context.aq_parent.absolute_url()\n \n+\n TypeCloneFormPage = wrap_form(TypeCloneForm)\ndiff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex 80ca225..34682c6 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -17,70 +17,67 @@\n \n \n class SelectiveZipExportContext(TarballExportContext):\n-\n-    def __init__(self, tool, typelist, encoding=None, base_name=\'setup_tool\'):\n+    def __init__(self, tool, typelist, encoding=None, base_name="setup_tool"):\n \n         BaseContext.__init__(self, tool, encoding)\n \n         self.typelist = typelist\n-        self.filenames = [\'types.xml\']\n+        self.filenames = ["types.xml"]\n         for tn in typelist:\n-            self.filenames.append(\'types/{0}.xml\'.format(tn))\n+            self.filenames.append("types/{0}.xml".format(tn))\n \n         timestamp = time.gmtime()\n-        self._archive_filename = (base_name + \'-%4d%02d%02d%02d%02d%02d.zip\'\n-                                  % timestamp[:6])\n+        self._archive_filename = (\n+            base_name + "-%4d%02d%02d%02d%02d%02d.zip" % timestamp[:6]\n+        )\n \n         self._archive_stream = BytesIO()\n-        self._archive = ZipFile(self._archive_stream, \'w\')\n+        self._archive = ZipFile(self._archive_stream, "w")\n \n     def writeDataFile(self, filename, text, content_type, subdir=None):\n         if filename not in self.filenames:\n             return\n \n-        if filename == \'types.xml\':\n+        if filename == "types.xml":\n             # Remove all the types except our targets.\n             # Strategy: suck into ElementTree element, remove nodes,\n             # convert back to text, prettify.\n             root = etree.fromstring(text)\n             todelete = []\n             for element in root.getchildren():\n-                name = element.attrib[\'name\']\n-                if name != \'title\' and name not in self.typelist:\n+                name = element.attrib["name"]\n+                if name != "title" and name not in self.typelist:\n                     todelete.append(element)\n             for element in todelete:\n                 root.remove(element)\n             # Add a marker for ZopeSkel additions\n-            root.append(etree.Comment(\' -*- extra stuff goes here -*- \'))\n+            root.append(etree.Comment(" -*- extra stuff goes here -*- "))\n             # minor prettifying\n             root_str = safe_unicode(etree.tostring(root))\n             text = \'<?xml version="1.0"?>\\n{0}\'.format(root_str)\n-            text = text.replace(\'<!--\', \' <!--\')\n-            text = text.replace(\'-->\', \'-->\\n\')\n+            text = text.replace("<!--", " <!--")\n+            text = text.replace("-->", "-->\\n")\n \n         self._archive.writestr(filename, safe_encode(text))\n \n \n class TypesExport(BrowserView):\n-    """Generate a types export archive for download\n-    """\n+    """Generate a types export archive for download"""\n \n     def __call__(self):\n         RESPONSE = self.request.RESPONSE\n-        ps = getToolByName(self.context, \'portal_setup\')\n+        ps = getToolByName(self.context, "portal_setup")\n \n-        items = self.request.selected.split(\',\')\n-        context = SelectiveZipExportContext(ps, items,\n-                                            base_name=\'dexterity_export\')\n-        handler = ps.getExportStep(u\'typeinfo\')\n+        items = self.request.selected.split(",")\n+        context = SelectiveZipExportContext(ps, items, base_name="dexterity_export")\n+        handler = ps.getExportStep(u"typeinfo")\n         handler(context)\n \n         filename = context.getArchiveFilename()\n \n-        RESPONSE.setHeader(\'Content-type\', \'application/zip\')\n+        RESPONSE.setHeader("Content-type", "application/zip")\n         RESPONSE.setHeader(\n-            \'Content-disposition\',\n-            \'attachment; filename={0}\'.format(filename)\n+            "Content-disposition", "attachment; filename={0}".format(filename)\n         )\n \n         return context.getArchive()\n@@ -88,26 +85,25 @@ def __call__(self):\n \n class ModelsExport(BrowserView):\n     """Generate an archive for download of model xml files for selected\n-       types.\n+    types.\n     """\n \n     def __call__(self):\n         RESPONSE = self.request.RESPONSE\n-        pt = getToolByName(self.context, \'portal_types\')\n+        pt = getToolByName(self.context, "portal_types")\n \n-        items = self.request.selected.split(\',\')\n+        items = self.request.selected.split(",")\n \n         if len(items) == 1:\n             # return a single XML file\n \n             item = items[0]\n-            filename = \'{0}.xml\'.format(item)\n+            filename = "{0}.xml".format(item)\n             text = serializeModel(pt[item].lookupModel())\n \n-            RESPONSE.setHeader(\'Content-type\', \'application/xml\')\n+            RESPONSE.setHeader("Content-type", "application/xml")\n             RESPONSE.setHeader(\n-                \'Content-disposition\',\n-                \'attachment; filename={0}\'.format(filename)\n+                "Content-disposition", "attachment; filename={0}".format(filename)\n             )\n \n             return text\n@@ -116,26 +112,27 @@ def __call__(self):\n             # pack multiple items into a zip file\n \n             timestamp = time.gmtime()\n-            archive_filename = (\'dexterity_models-%4d%02d%02d%02d%02d%02d.zip\'\n-                                % timestamp[:6])\n+            archive_filename = (\n+                "dexterity_models-%4d%02d%02d%02d%02d%02d.zip" % timestamp[:6]\n+            )\n \n             archive_stream = BytesIO()\n-            archive = ZipFile(archive_stream, \'w\')\n+            archive = ZipFile(archive_stream, "w")\n \n             for item in items:\n-                filename = \'models/{0}.xml\'.format(item)\n+                filename = "models/{0}.xml".format(item)\n                 text = serializeModel(pt[item].lookupModel())\n                 archive.writestr(filename, text)\n \n             archive.close()\n \n-            RESPONSE.setHeader(\'Content-type\', \'application/zip\')\n+            RESPONSE.setHeader("Content-type", "application/zip")\n             RESPONSE.setHeader(\n-                \'Content-disposition\',\n-                \'attachment; filename={0}\'.format(archive_filename)\n+                "Content-disposition",\n+                "attachment; filename={0}".format(archive_filename),\n             )\n \n             return archive_stream.getvalue()\n \n         else:\n-            return \'\'\n+            return ""\ndiff --git a/plone/app/dexterity/browser/fields.py b/plone/app/dexterity/browser/fields.py\nindex 072ebdb..853cfbd 100644\n--- a/plone/app/dexterity/browser/fields.py\n+++ b/plone/app/dexterity/browser/fields.py\n@@ -14,19 +14,19 @@\n \n \n class EnhancedSchemaListing(SchemaListing):\n-\n     def handleModelEdit(self, action):\n-        self.request.response.redirect(\'@@modeleditor\')\n+        self.request.response.redirect("@@modeleditor")\n+\n \n-if pkg_resources.get_distribution(\'plone.resourceeditor\'):\n-    but = button.Button(\'modeleditor\', title=u\'Edit XML Field Model\')\n+if pkg_resources.get_distribution("plone.resourceeditor"):\n+    but = button.Button("modeleditor", title=u"Edit XML Field Model")\n     EnhancedSchemaListing.buttons += button.Buttons(but)\n     handler = button.Handler(but, EnhancedSchemaListing.handleModelEdit)\n     EnhancedSchemaListing.handlers.addHandler(but, handler)\n \n \n class TypeFieldsPage(TypeFormLayout):\n-    label = _(u\'Fields\')\n+    label = _(u"Fields")\n \n     @property\n     def form(self):\ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 1310ad7..8c5e87d 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -26,68 +26,73 @@\n \n \n class ITypeProfileImport(Interface):\n-    """ Fields for a zip import form\n-    """\n+    """Fields for a zip import form"""\n \n     profile_file = NamedFile(\n-        title=_(u\'Type profiles archive file\'),\n+        title=_(u"Type profiles archive file"),\n         required=True,\n     )\n \n     @invariant\n     def isGoodImportFile(data):\n-        nfile = getattr(data, \'profile_file\', None)\n+        nfile = getattr(data, "profile_file", None)\n         if nfile is None:\n             # let required validator handle this\n             return None\n         try:\n-            archive = ZipFile(BytesIO(data.profile_file.data), \'r\')\n+            archive = ZipFile(BytesIO(data.profile_file.data), "r")\n         except BadZipfile:\n             raise Invalid(\n                 _(u"Error: The file submitted must be a zip archive."),\n             )\n         name_list = archive.namelist()\n         for fname in name_list:\n-            if fname == \'types.xml\':\n+            if fname == "types.xml":\n                 continue\n-            if os.path.dirname(fname) != \'types\' \\\n-               or os.path.splitext(fname)[1] != \'.xml\':\n+            if (\n+                os.path.dirname(fname) != "types"\n+                or os.path.splitext(fname)[1] != ".xml"\n+            ):\n                 raise Invalid(\n-                    _(u"Error: The file submitted must be a zip archive "\n-                      u"containing only type profile information.")\n+                    _(\n+                        u"Error: The file submitted must be a zip archive "\n+                        u"containing only type profile information."\n+                    )\n                 )\n \n         # check XML for basic integrity\n-        with archive.open(\'types.xml\', \'r\') as f:\n+        with archive.open("types.xml", "r") as f:\n             source = f.read()\n             root = etree.fromstring(source)\n-            if root.tag != \'object\':\n-                raise Invalid(_(u\'types.xml in archive is invalid.\'))\n+            if root.tag != "object":\n+                raise Invalid(_(u"types.xml in archive is invalid."))\n \n         # check against existing types; don\'t allow overwrites\n         site = getSite()\n-        existing_types = getToolByName(site, \'portal_types\').listContentTypes()\n+        existing_types = getToolByName(site, "portal_types").listContentTypes()\n         for element in root.getchildren():\n-            if element.tag == \'object\':\n+            if element.tag == "object":\n                 attribs = element.attrib\n-                if not attribs[\'meta_type\'] == \'Dexterity FTI\':\n-                    raise Invalid(_(\n-                        \'Types in archive must be only Dexterity types.\'\n-                    ),)\n-                if attribs[\'name\'] in existing_types:\n+                if not attribs["meta_type"] == "Dexterity FTI":\n+                    raise Invalid(\n+                        _("Types in archive must be only Dexterity types."),\n+                    )\n+                if attribs["name"] in existing_types:\n                     msg = (\n-                        u\'One or more types in the import archive is an \'\n+                        u"One or more types in the import archive is an "\n                         u\'existing type. Delete "%s" if you \'\n-                        u\'really wish to replace it.\'\n+                        u"really wish to replace it."\n+                    )\n+                    raise Invalid(\n+                        _(msg, attribs["name"]),\n                     )\n-                    raise Invalid(_(msg, attribs[\'name\']), )\n \n \n @implementer(ITypeProfileImport)\n class TypeProfileImport(object):\n     form_fields = field.Fields(ITypeProfileImport)\n     profile_file = zope.schema.fieldproperty.FieldProperty(\n-        ITypeProfileImport[\'profile_file\']\n+        ITypeProfileImport["profile_file"]\n     )\n \n     def __init__(self, profile_file):\n@@ -96,7 +101,7 @@ def __init__(self, profile_file):\n \n class TypeProfileImportForm(form.AddForm):\n \n-    label = _(u\'Import Content Types\')\n+    label = _(u"Import Content Types")\n     description = _(\n         u"You may import types by uploading a zip archive containing type "\n         u"profiles. The import archive should contain a types.xml file and a "\n@@ -105,21 +110,20 @@ class TypeProfileImportForm(form.AddForm):\n         u"Dexterity Content Types page."\n     )\n     fields = field.Fields(ITypeProfileImport)\n-    id = \'import-types-form\'\n+    id = "import-types-form"\n \n     def create(self, data):\n         return TypeProfileImport(**data)\n \n     def add(self, profile_import):\n         # initialize import context\n-        types_tool = getToolByName(self.context, \'portal_types\')\n+        types_tool = getToolByName(self.context, "portal_types")\n         import_context = ZipFileImportContext(\n-            types_tool,\n-            BytesIO(profile_import.profile_file.data)\n+            types_tool, BytesIO(profile_import.profile_file.data)\n         )\n         # run the profile\n-        setup_tool = getToolByName(self.context, \'portal_setup\')\n-        handler = setup_tool.getImportStep(u\'typeinfo\')\n+        setup_tool = getToolByName(self.context, "portal_setup")\n+        handler = setup_tool.getImportStep(u"typeinfo")\n         handler(import_context)\n         self.status = _(u"Imported successfully.")\n \n@@ -133,21 +137,21 @@ def nextURL(self):\n \n @implementer(IImportContext)\n class ZipFileImportContext(BaseContext):\n-    """ GS Import context for a ZipFile """\n+    """GS Import context for a ZipFile"""\n \n     def __init__(self, tool, archive_bits, encoding=None, should_purge=False):\n         super(ZipFileImportContext, self).__init__(tool, encoding)\n-        self._archive = ZipFile(archive_bits, \'r\')\n+        self._archive = ZipFile(archive_bits, "r")\n         self._should_purge = bool(should_purge)\n         self.name_list = self._archive.namelist()\n \n     def readDataFile(self, filename, subdir=None):\n \n         if subdir is not None:\n-            filename = \'/\'.join((subdir, filename))\n+            filename = "/".join((subdir, filename))\n \n         try:\n-            file = self._archive.open(filename, \'r\')\n+            file = self._archive.open(filename, "r")\n         except KeyError:\n             return None\n \n@@ -161,29 +165,30 @@ def getLastModified(self, path):\n         return DateTime(*zip_info.date_time)\n \n     def isDirectory(self, path):\n-        """ See IImportContext """\n+        """See IImportContext"""\n \n         # namelist only includes full filenames, not directories\n         return path not in self.name_list\n \n     def listDirectory(self, path, skip=[]):\n-        """ See IImportContext """\n+        """See IImportContext"""\n \n         # namelist contains only full path/filenames, not\n         # directories. But we need to include directories.\n \n         if path is None:\n-            path = \'\'\n-        path_parts = path.split(\'/\')\n+            path = ""\n+        path_parts = path.split("/")\n         res = set()\n         for pn in self.name_list:\n             dn, bn = os.path.split(pn)\n-            dn_parts = dn.split(\'/\')\n+            dn_parts = dn.split("/")\n             if dn == path:\n                 if bn not in skip:\n                     res.add(bn)\n                 continue\n-            if dn.startswith(path) \\\n-               and (path == \'\' or len(dn_parts) == len(path_parts) + 1):\n+            if dn.startswith(path) and (\n+                path == "" or len(dn_parts) == len(path_parts) + 1\n+            ):\n                 res.add(dn_parts[-1])\n         return list(res)\ndiff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py\nindex b428767..ec53887 100644\n--- a/plone/app/dexterity/browser/layout.py\n+++ b/plone/app/dexterity/browser/layout.py\n@@ -6,12 +6,12 @@\n \n class TypeFormLayout(FormWrapper):\n \n-    index = ViewPageTemplateFile(\'tabbed_forms.pt\')\n+    index = ViewPageTemplateFile("tabbed_forms.pt")\n \n     @property\n     def tabs(self):\n         return (\n-            (_(\'Overview\'), \'@@overview\'),\n-            (_(\'Fields\'), \'@@fields\'),\n-            (_(\'Behaviors\'), \'@@behaviors\'),\n+            (_("Overview"), "@@overview"),\n+            (_("Fields"), "@@fields"),\n+            (_("Behaviors"), "@@behaviors"),\n         )\ndiff --git a/plone/app/dexterity/browser/overview.py b/plone/app/dexterity/browser/overview.py\nindex 0762894..3194714 100644\n--- a/plone/app/dexterity/browser/overview.py\n+++ b/plone/app/dexterity/browser/overview.py\n@@ -11,7 +11,7 @@\n \n class TypeOverviewForm(form.EditForm):\n     enableCSRFProtection = True\n-    template = ViewPageTemplateFile(\'overview.pt\')\n+    template = ViewPageTemplateFile("overview.pt")\n \n     @property\n     def fields(self):\n@@ -19,11 +19,11 @@ def fields(self):\n         # remove the field for filtering contained content types\n         klass = resolveDottedName(self.context.fti.klass)\n         fields = field.Fields(ITypeSettings)\n-        filtered = fields.select(\'title\', \'description\',\n-                                 \'allowed_content_types\',\n-                                 \'filter_content_types\')\n+        filtered = fields.select(\n+            "title", "description", "allowed_content_types", "filter_content_types"\n+        )\n         if not IFolderish.implementedBy(klass):\n-            del filtered[\'filter_content_types\']\n+            del filtered["filter_content_types"]\n         return filtered\n \n     def getContent(self):\n@@ -32,4 +32,4 @@ def getContent(self):\n \n class TypeOverviewPage(TypeFormLayout):\n     form = TypeOverviewForm\n-    label = _(u\'Overview\')\n+    label = _(u"Overview")\ndiff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py\nindex 742d5e0..a26e3b7 100644\n--- a/plone/app/dexterity/browser/types.py\n+++ b/plone/app/dexterity/browser/types.py\n@@ -31,31 +31,31 @@\n \n \n ALLOWED_FIELDS = [\n-    u\'plone.app.textfield.RichText\',\n-    u\'plone.namedfile.field.NamedBlobImage\',\n-    u\'plone.namedfile.field.NamedBlobFile\',\n-    u\'plone.schema.email.Email\',\n-    u\'z3c.relationfield.schema.RelationChoice\',\n-    u\'z3c.relationfield.schema.RelationList\',\n-    u\'zope.schema._bootstrapfields.Bool\',\n-    u\'zope.schema._bootstrapfields.Int\',\n-    u\'plone.schema.jsonfield.JSONField\',\n-    u\'zope.schema._bootstrapfields.Password\',\n-    u\'zope.schema._bootstrapfields.Text\',\n-    u\'zope.schema._bootstrapfields.TextLine\',\n-    u\'zope.schema._field.Choice\',\n-    u\'zope.schema._field.Date\',\n-    u\'zope.schema._field.Datetime\',\n-    u\'zope.schema._field.Float\',\n-    u\'zope.schema._field.Set\',\n-    u\'zope.schema._field.URI\',\n+    u"plone.app.textfield.RichText",\n+    u"plone.namedfile.field.NamedBlobImage",\n+    u"plone.namedfile.field.NamedBlobFile",\n+    u"plone.schema.email.Email",\n+    u"z3c.relationfield.schema.RelationChoice",\n+    u"z3c.relationfield.schema.RelationList",\n+    u"zope.schema._bootstrapfields.Bool",\n+    u"zope.schema._bootstrapfields.Int",\n+    u"plone.schema.jsonfield.JSONField",\n+    u"zope.schema._bootstrapfields.Password",\n+    u"zope.schema._bootstrapfields.Text",\n+    u"zope.schema._bootstrapfields.TextLine",\n+    u"zope.schema._field.Choice",\n+    u"zope.schema._field.Date",\n+    u"zope.schema._field.Datetime",\n+    u"zope.schema._field.Float",\n+    u"zope.schema._field.Set",\n+    u"zope.schema._field.URI",\n ]\n \n \n class TypeEditSubForm(crud.EditSubForm):\n-    """ Content type edit subform. Just here to use a custom template.\n-    """\n-    template = ViewPageTemplateFile(\'types_listing_row.pt\')\n+    """Content type edit subform. Just here to use a custom template."""\n+\n+    template = ViewPageTemplateFile("types_listing_row.pt")\n \n \n class TypeEditForm(crud.EditForm):\n@@ -67,63 +67,58 @@ class TypeEditForm(crud.EditForm):\n     label = None\n     editsubform_factory = TypeEditSubForm\n \n-    buttons = crud.EditForm.buttons.copy().omit(\'edit\')\n+    buttons = crud.EditForm.buttons.copy().omit("edit")\n     handlers = crud.EditForm.handlers.copy()\n \n-    @button.buttonAndHandler(_(u\'Clone\'))\n+    @button.buttonAndHandler(_(u"Clone"))\n     def handleClone(self, action):\n         selected = self.selected_items()\n \n         if len(selected) > 1:\n-            self.status = _(u\'Please select a single type to clone.\')\n+            self.status = _(u"Please select a single type to clone.")\n         elif len(selected) == 1:\n             id = selected[0][0]\n-            url = \'{0}/{1}/@@clone\'.format(\n-                self.context.context.absolute_url(),\n-                id\n-            )\n+            url = "{0}/{1}/@@clone".format(self.context.context.absolute_url(), id)\n             self.request.response.redirect(url)\n         else:\n-            self.status = _(u\'Please select a type to clone.\')\n+            self.status = _(u"Please select a type to clone.")\n \n-    @button.buttonAndHandler(_(u\'Export Type Profiles\'))\n+    @button.buttonAndHandler(_(u"Export Type Profiles"))\n     def handleExport(self, action):\n-        selected = \',\'.join([items[0] for items in self.selected_items()])\n+        selected = ",".join([items[0] for items in self.selected_items()])\n \n         if len(selected) == 0:\n-            self.status = _(u\'Please select types to export.\')\n+            self.status = _(u"Please select types to export.")\n         elif len(selected) > 0:\n-            url = \'{0}/@@types-export?selected={1}\'.format(\n+            url = "{0}/@@types-export?selected={1}".format(\n                 self.context.context.absolute_url(),\n                 urllib.parse.quote(selected),\n             )\n             self.request.response.redirect(url)\n \n-    @button.buttonAndHandler(_(u\'Export Schema Models\'))\n+    @button.buttonAndHandler(_(u"Export Schema Models"))\n     def handleExportModels(self, action):\n-        selected = \',\'.join([items[0] for items in self.selected_items()])\n+        selected = ",".join([items[0] for items in self.selected_items()])\n \n         if len(selected) == 0:\n-            self.status = _(u\'Please select types to export.\')\n+            self.status = _(u"Please select types to export.")\n         elif len(selected) > 0:\n-            url = \'{0}/@@models-export?selected={1}\'.format(\n-                self.context.context.absolute_url(),\n-                urllib.parse.quote(selected)\n+            url = "{0}/@@models-export?selected={1}".format(\n+                self.context.context.absolute_url(), urllib.parse.quote(selected)\n             )\n             self.request.response.redirect(url)\n \n \n class TypesEditFormWrapper(FormWrapper):\n-    """ Render Plone frame around our form with little modifications """\n+    """Render Plone frame around our form with little modifications"""\n \n     form = TypeEditForm\n-    index = FiveViewPageTemplateFile(\'typesformwrapper.pt\')\n+    index = FiveViewPageTemplateFile("typesformwrapper.pt")\n \n \n @adapter(IDexterityFTI)\n @implementer(ITypeSettings)\n class TypeSettingsAdapter(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -131,8 +126,8 @@ def __init__(self, context):\n     def id(self):\n         return self.context.getId()\n \n-    title = UTF8Property(\'title\')\n-    description = UTF8Property(\'description\')\n+    title = UTF8Property("title")\n+    description = UTF8Property("description")\n \n     @property\n     def container(self):\n@@ -149,65 +144,64 @@ def _set_allowed_content_types(self, value):\n             self.context.filter_content_types = True\n \n     allowed_content_types = property(\n-        _get_allowed_content_types, _set_allowed_content_types)\n+        _get_allowed_content_types, _set_allowed_content_types\n+    )\n \n     def _get_filter_content_types(self):\n         value = self.context.filter_content_types\n         if not value:\n-            return \'all\'\n+            return "all"\n         elif value and not self.allowed_content_types:\n-            return \'none\'\n+            return "none"\n         else:\n-            return \'some\'\n+            return "some"\n \n     def _set_filter_content_types(self, value):\n-        if value == \'none\':\n+        if value == "none":\n             self.context.filter_content_types = True\n             self.context.allowed_content_types = ()\n-        elif value == \'all\':\n+        elif value == "all":\n             self.context.filter_content_types = False\n-        elif value == \'some\':\n+        elif value == "some":\n             self.context.filter_content_types = True\n \n     filter_content_types = property(\n-        _get_filter_content_types, _set_filter_content_types)\n+        _get_filter_content_types, _set_filter_content_types\n+    )\n \n \n @adapter(IDexterityFTI)\n @implementer(ITypeStats)\n class TypeStatsAdapter(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n     @property\n     def item_count(self):\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        lengths = dict(\n-            catalog.Indexes[\'portal_type\'].uniqueValues(withLengths=True))\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        lengths = dict(catalog.Indexes["portal_type"].uniqueValues(withLengths=True))\n         return lengths.get(self.context.getId(), 0)\n \n \n class TypesListing(crud.CrudForm):\n-    """ The combined content type edit + add forms.\n-    """\n+    """The combined content type edit + add forms."""\n \n     @lazy_property\n     def description(self):\n         if self.get_items():\n             return _(\n-                u\'The following custom content types are available for your \'\n-                u\'site.\'\n+                u"The following custom content types are available for your " u"site."\n             )\n         return _(\n-            \'help_addcontenttype_button\',\n+            "help_addcontenttype_button",\n             default=u\'Content types show up on Plone\\\'s "Add Item" menu and \'\n-            u\'allow you to store custom data in your site. Click the \'\n+            u"allow you to store custom data in your site. Click the "\n             u\'"Add Content Type" button to begin creating a new \'\n-            u\'content type with its own fields.\')\n+            u"content type with its own fields.",\n+        )\n \n-    template = ViewPageTemplateFile(\'types_listing.pt\')\n-    view_schema = field.Fields(ITypeSettings).select(\'title\', \'description\')\n+    template = ViewPageTemplateFile("types_listing.pt")\n+    view_schema = field.Fields(ITypeSettings).select("title", "description")\n     view_schema += field.Fields(ITypeStats)\n     addform_factory = crud.NullForm\n     editform_factory = TypeEditForm\n@@ -222,9 +216,8 @@ def get_items(self):\n         return [(fti.__name__, fti) for fti in ftis]\n \n     def remove(self, id_and_item):\n-        """ Remove a content type.\n-        """\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        """Remove a content type."""\n+        ttool = getToolByName(self.context, "portal_types")\n         ttool.manage_delObjects([id_and_item[0]])\n \n     def link(self, item, field):\n@@ -232,28 +225,28 @@ def link(self, item, field):\n \n         (But only for types with schemata that can be edited through the web.)\n         """\n-        if field == \'title\':\n-            return \'{0}/{1}\'.format(\n-                self.context.absolute_url(),\n-                urllib.parse.quote(item.__name__)\n+        if field == "title":\n+            return "{0}/{1}".format(\n+                self.context.absolute_url(), urllib.parse.quote(item.__name__)\n             )\n \n+\n # Create a form wrapper so the form gets layout.\n TypesListingPage = layout.wrap_form(\n-    TypesListing, __wrapper_class=TypesEditFormWrapper,\n-    label=_(u\'Content Types\'))\n+    TypesListing, __wrapper_class=TypesEditFormWrapper, label=_(u"Content Types")\n+)\n \n \n @implementer(ITypeSchemaContext)\n class TypeSchemaContext(SchemaContext):\n \n     fti = None\n-    schemaName = u\'\'\n-    schemaEditorView = \'fields\'\n+    schemaName = u""\n+    schemaEditorView = "fields"\n     allowedFields = ALLOWED_FIELDS\n \n     def browserDefault(self, request):\n-        return self, (\'@@overview\',)\n+        return self, ("@@overview",)\n \n     @property\n     def additionalSchemata(self):\n@@ -275,10 +268,10 @@ def __init__(self, context, request):\n \n         # make sure that breadcrumbs will be correct\n         self.id = None\n-        self.Title = lambda: _(u\'Content Types\')\n+        self.Title = lambda: _(u"Content Types")\n \n         # turn off green edit border for anything in the type control panel\n-        request.set(\'disable_border\', 1)\n+        request.set("disable_border", 1)\n \n     def publishTraverse(self, request, name):\n         """Traverse to a schema context.\n@@ -292,16 +285,14 @@ def publishTraverse(self, request, name):\n         try:\n             fti = getUtility(IDexterityFTI, name=name)\n         except ComponentLookupError:\n-            return DefaultPublishTraverse(self, request).publishTraverse(\n-                request,\n-                name\n-            )\n+            return DefaultPublishTraverse(self, request).publishTraverse(request, name)\n \n         schema = fti.lookupSchema()\n         schema_context = TypeSchemaContext(\n-            schema, request, name=name, title=fti.title).__of__(self)\n+            schema, request, name=name, title=fti.title\n+        ).__of__(self)\n         schema_context.fti = fti\n-        schema_context.schemaName = u\'\'\n+        schema_context.schemaName = u""\n         return schema_context\n \n     def browserDefault(self, request):\n@@ -310,4 +301,4 @@ def browserDefault(self, request):\n         If we aren\'t traversing to a schema beneath the types configlet,\n         we actually want to see the TypesListingPage.\n         """\n-        return self, (\'@@edit\',)\n+        return self, ("@@edit",)\ndiff --git a/plone/app/dexterity/browser/utils.py b/plone/app/dexterity/browser/utils.py\nindex 0107441..b3605bf 100644\n--- a/plone/app/dexterity/browser/utils.py\n+++ b/plone/app/dexterity/browser/utils.py\n@@ -3,17 +3,16 @@\n \n \n class UTF8Property(object):\n-\n     def __init__(self, name):\n         self.name = name\n \n     def __get__(self, inst, type=None):\n         value = getattr(inst.context, self.name)\n         if six.PY2 and isinstance(value, six.binary_type):\n-            value = value.decode(\'utf8\')\n+            value = value.decode("utf8")\n         return value\n \n     def __set__(self, inst, value):\n         if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode(\'utf8\')\n+            value = value.encode("utf8")\n         setattr(inst.context, self.name, value)\ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex 0499e07..7cb33c3 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -18,13 +18,12 @@\n @adapter(IFolderish)\n @implementer(IDXFileFactory)\n class DXFileFactory(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n     def __call__(self, name, content_type, data):\n-        ctr = getToolByName(self.context, \'content_type_registry\')\n-        type_ = ctr.findTypeName(name.lower(), content_type, data) or \'File\'\n+        ctr = getToolByName(self.context, "content_type_registry")\n+        type_ = ctr.findTypeName(name.lower(), content_type, data) or "File"\n \n         name = ploneutils.safe_unicode(name)\n \n@@ -42,29 +41,18 @@ def __call__(self, name, content_type, data):\n             # XXX heuristics are harmful behavior, here a better implemenation\n             #     is needed\n             filename = name\n-            if \'Image\' in type_:\n+            if "Image" in type_:\n                 image = NamedBlobImage(\n-                    data=data,\n-                    filename=filename,\n-                    contentType=content_type\n+                    data=data, filename=filename, contentType=content_type\n                 )\n                 obj = createContentInContainer(\n-                    self.context, type_,\n-                    id=newid,\n-                    image=image\n+                    self.context, type_, id=newid, image=image\n                 )\n             else:\n                 file = NamedBlobFile(\n-                    data=data,\n-                    filename=filename,\n-                    contentType=content_type\n-                )\n-                obj = createContentInContainer(\n-                    self.context,\n-                    type_,\n-                    id=newid,\n-                    file=file\n+                    data=data, filename=filename, contentType=content_type\n                 )\n+                obj = createContentInContainer(self.context, type_, id=newid, file=file)\n \n             obj.title = name\n             obj.reindexObject()\ndiff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py\nindex 6a0d776..0fc0c44 100644\n--- a/plone/app/dexterity/interfaces.py\n+++ b/plone/app/dexterity/interfaces.py\n@@ -14,25 +14,23 @@\n \n \n class ITypesContext(IBrowserPage):\n-    """ A non-persistent traversable item corresponding to a Dexterity FTI\n-    """\n+    """A non-persistent traversable item corresponding to a Dexterity FTI"""\n \n \n class ITypeSchemaContext(Interface):\n-    """ Marker interface for plone.schemaeditor schema contexts that are\n-        associated with a Dexterity FTI """\n+    """Marker interface for plone.schemaeditor schema contexts that are\n+    associated with a Dexterity FTI"""\n \n     fti = Attribute(u"The FTI object associated with this schema.")\n     schemaName = Attribute(u"The name of this schema within its FTI\'s model.")\n \n \n class InvalidIdError(schema.ValidationError):\n-    __doc__ = _(\n-        u\'Please use only letters, numbers and the following characters: .-_\')\n+    __doc__ = _(u"Please use only letters, numbers and the following characters: .-_")\n \n \n # a letter followed by letters, numbers, period, hyphen, or underscore\n-ID_RE = re.compile(r\'^[a-z][\\w\\d\\.-]*$\')\n+ID_RE = re.compile(r"^[a-z][\\w\\d\\.-]*$")\n \n \n def isValidId(value):\n@@ -42,100 +40,89 @@ def isValidId(value):\n \n \n class ITypeSettings(Interface):\n-    """ Define the fields for the content type add form\n-    """\n+    """Define the fields for the content type add form"""\n+\n     title = schema.TextLine(\n-        title=_(u\'Type Name\'),\n+        title=_(u"Type Name"),\n     )\n \n     id = schema.ASCIILine(\n-        title=_(u\'Short Name\'),\n-        description=_(u\'Used for programmatic access to the type.\'),\n+        title=_(u"Short Name"),\n+        description=_(u"Used for programmatic access to the type."),\n         required=True,\n         constraint=isValidId,\n     )\n \n-    description = schema.Text(\n-        title=_(u\'Description\'),\n-        required=False\n-    )\n+    description = schema.Text(title=_(u"Description"), required=False)\n \n     container = schema.Bool(\n-        title=_(u\'Container\'),\n-        description=_(\n-            u\'Items of this type will be able to contain other items.\'),\n+        title=_(u"Container"),\n+        description=_(u"Items of this type will be able to contain other items."),\n         required=True,\n         default=False,\n     )\n \n     filter_content_types = schema.Choice(\n-        title=_(u\'Filter Contained Types\'),\n+        title=_(u"Filter Contained Types"),\n         description=_(\n-            \'label_filter_contained_types\',\n+            "label_filter_contained_types",\n             default=(\n-                u\'Items of this type can act as a folder containing other \'\n-                u\' items. What content types should be allowed inside?\')\n+                u"Items of this type can act as a folder containing other "\n+                u" items. What content types should be allowed inside?"\n+            ),\n         ),\n-        values=(\'none\', \'all\', \'some\'),\n-        default=\'none\',\n-        required=True\n+        values=("none", "all", "some"),\n+        default="none",\n+        required=True,\n     )\n \n     allowed_content_types = schema.Set(\n-        title=_(u\'Allowed Content Types\'),\n+        title=_(u"Allowed Content Types"),\n         required=False,\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n-            required=False\n-        )\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes", required=False\n+        ),\n     )\n \n \n class ITypeStats(Interface):\n \n     item_count = schema.Int(\n-        title=_(u\'# of items\'),\n+        title=_(u"# of items"),\n     )\n \n \n class TypeIdValidator(validator.SimpleFieldValidator):\n-\n     def validate(self, value):\n         super(TypeIdValidator, self).validate(value)\n \n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         if value in ttool.objectIds():\n             msg = u"There is already a content type named \'${name}\'"\n-            raise Invalid(_(msg, mapping={\'name\': value}))\n+            raise Invalid(_(msg, mapping={"name": value}))\n \n \n-validator.WidgetValidatorDiscriminators(\n-    TypeIdValidator,\n-    field=ITypeSettings[\'id\']\n-)\n+validator.WidgetValidatorDiscriminators(TypeIdValidator, field=ITypeSettings["id"])\n \n \n class TypeTitleValidator(validator.SimpleFieldValidator):\n-\n     def validate(self, value):\n         super(TypeTitleValidator, self).validate(value)\n \n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         for existing_fti in ttool.objectValues():\n             if aq_base(existing_fti) is aq_base(self.context):\n                 continue\n \n             if existing_fti.Title() == value:\n                 msg = u"There is already a content type named \'${name}\'"\n-                raise Invalid(_(msg, mapping={\'name\': value}))\n+                raise Invalid(_(msg, mapping={"name": value}))\n \n \n validator.WidgetValidatorDiscriminators(\n-    TypeTitleValidator,\n-    field=ITypeSettings[\'title\']\n+    TypeTitleValidator, field=ITypeSettings["title"]\n )\n \n \n class IDXFileFactory(IFileFactory):\n-    """ adapter factory for DX types\n-    """\n+    """adapter factory for DX types"""\ndiff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py\nindex 0c8b893..cd3b2d6 100644\n--- a/plone/app/dexterity/permissions.py\n+++ b/plone/app/dexterity/permissions.py\n@@ -33,10 +33,9 @@ class MockRequest(TestRequest):\n @adapter(IDexterityContent)\n @implementer(IFieldPermissionChecker)\n class DXFieldPermissionChecker(object):\n-    """\n-    """\n+    """ """\n \n-    DEFAULT_PERMISSION = \'Modify portal content\'\n+    DEFAULT_PERMISSION = "Modify portal content"\n \n     def __init__(self, context):\n         self.context = context\n@@ -48,10 +47,9 @@ def _get_schemata(self):\n     def _validate_vocabulary_name(self, schema, field, vocabulary_name):\n         if not vocabulary_name:\n             return True\n-        if (\n-            vocabulary_name != getattr(field, \'vocabulary\', None) and\n-            vocabulary_name != getattr(field, \'vocabularyName\', None)\n-        ):\n+        if vocabulary_name != getattr(\n+            field, "vocabulary", None\n+        ) and vocabulary_name != getattr(field, "vocabularyName", None):\n             # Determine the widget to check for vocabulary there\n             widgets = mergedTaggedValueDict(schema, WIDGETS_KEY)\n             widget = widgets.get(field.getName())\n@@ -62,13 +60,10 @@ def _validate_vocabulary_name(self, schema, field, vocabulary_name):\n                     widget = widget(field, self._request)\n             else:\n                 # default widget\n-                widget = queryMultiAdapter(\n-                    (field, self._request),\n-                    IFieldWidget\n-                )\n+                widget = queryMultiAdapter((field, self._request), IFieldWidget)\n             if widget:\n                 widget.update()\n-            if getattr(widget, \'vocabulary\', None) != vocabulary_name:\n+            if getattr(widget, "vocabulary", None) != vocabulary_name:\n                 return False\n         return True\n \n@@ -83,24 +78,14 @@ def validate(self, field_name, vocabulary_name=None):\n             # match the vocabulary name for the field or widget,\n             # fail.\n             field = schema[field_name]\n-            if not self._validate_vocabulary_name(\n-                schema,\n-                field,\n-                vocabulary_name\n-            ):\n+            if not self._validate_vocabulary_name(schema, field, vocabulary_name):\n                 return False\n             # Create mapping of all schema permissions\n-            permissions = mergedTaggedValueDict(\n-                schema,\n-                WRITE_PERMISSIONS_KEY\n-            )\n+            permissions = mergedTaggedValueDict(schema, WRITE_PERMISSIONS_KEY)\n             permission_name = permissions.get(field_name, None)\n             if permission_name is not None:\n                 # if we have explicit permissions, check them\n-                permission = queryUtility(\n-                    IPermission,\n-                    name=permission_name\n-                )\n+                permission = queryUtility(IPermission, name=permission_name)\n                 if permission:\n                     return checker(permission.title, context)\n \n@@ -108,19 +93,19 @@ def validate(self, field_name, vocabulary_name=None):\n             # specified, fall back to the default edit permission\n             return checker(self.DEFAULT_PERMISSION, context)\n         else:\n-            raise AttributeError(\'No such field: {0}\'.format(field_name))\n+            raise AttributeError("No such field: {0}".format(field_name))\n \n \n @adapter(IForm)\n class GenericFormFieldPermissionChecker(DXFieldPermissionChecker):\n     """Permission checker for when we just have an add view"""\n \n-    DEFAULT_PERMISSION = \'Add portal content\'\n+    DEFAULT_PERMISSION = "Add portal content"\n \n     def __init__(self, view):\n-        if getattr(view, \'form_instance\', None) is not None:\n+        if getattr(view, "form_instance", None) is not None:\n             view = view.form_instance\n-        if getattr(view, \'create\', None):\n+        if getattr(view, "create", None):\n             content = view.create({})\n             self.context = content.__of__(view.context)\n         else:\n@@ -130,7 +115,7 @@ def __init__(self, view):\n         self.view = view\n \n     def _get_schemata(self):\n-        if getattr(self.view, \'create\', None):\n+        if getattr(self.view, "create", None):\n             return iterSchemata(self.context)\n         return [self.view.schema]\n \n@@ -138,7 +123,8 @@ def _get_schemata(self):\n # BBB: Old name to match prior more limited function\n DXAddViewFieldPermissionChecker = GenericFormFieldPermissionChecker\n deprecated(\n-    \'DXAddViewFieldPermissionChecker\',\n-    \'plone.app.dexterity.permissions.DXAddViewFieldPermissionChecker has been \'\n-    \'replaced with GenericFormFieldPermissionChecker, please update any \'\n-    \'imports.\')\n+    "DXAddViewFieldPermissionChecker",\n+    "plone.app.dexterity.permissions.DXAddViewFieldPermissionChecker has been "\n+    "replaced with GenericFormFieldPermissionChecker, please update any "\n+    "imports.",\n+)\ndiff --git a/plone/app/dexterity/serialize.py b/plone/app/dexterity/serialize.py\nindex 5c5122d..a60fbc2 100644\n--- a/plone/app/dexterity/serialize.py\n+++ b/plone/app/dexterity/serialize.py\n@@ -7,7 +7,7 @@\n \n \n def serializeSchemaContext(schema_context, event=None):\n-    """ Serializes the schema associated with a schema context.\n+    """Serializes the schema associated with a schema context.\n \n     The serialized schema is saved to the model_source property of the FTI\n     associated with the schema context.\n@@ -24,13 +24,13 @@ def serializeSchemaContext(schema_context, event=None):\n \n \n def serializeSchema(schema):\n-    """ Finds the FTI and model associated with a schema, and synchronizes\n-        the schema to the FTI model_source attribute.\n+    """Finds the FTI and model associated with a schema, and synchronizes\n+    the schema to the FTI model_source attribute.\n \n-        This method only works for schemas that were created from an FTI\'s\n-        model_source property\n+    This method only works for schemas that were created from an FTI\'s\n+    model_source property\n \n-        BBB - deprecated\n+    BBB - deprecated\n     """\n \n     # determine portal_type\n@@ -49,4 +49,4 @@ def serializeSchema(schema):\n         syncSchema(schema, model.schemata[schemaName], overwrite=True)\n         fti.model_source = serializeModel(model)\n     else:\n-        raise TypeError(\'Changes to non-dynamic schemata not yet supported.\')\n+        raise TypeError("Changes to non-dynamic schemata not yet supported.")\ndiff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py\nindex ec1e980..b239ef9 100644\n--- a/plone/app/dexterity/testing.py\n+++ b/plone/app/dexterity/testing.py\n@@ -11,24 +11,22 @@ class DexterityFixture(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.dexterity\n-        self.loadZCML(name=\'meta.zcml\', package=plone.app.dexterity)\n+\n+        self.loadZCML(name="meta.zcml", package=plone.app.dexterity)\n         self.loadZCML(package=plone.app.dexterity)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.dexterity:testing\')\n+        self.applyProfile(portal, "plone.app.dexterity:testing")\n \n \n DEXTERITY_FIXTURE = DexterityFixture()\n \n DEXTERITY_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(DEXTERITY_FIXTURE,),\n-    name=\'dexterity:Integration\'\n+    bases=(DEXTERITY_FIXTURE,), name="dexterity:Integration"\n )\n DEXTERITY_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(DEXTERITY_FIXTURE,),\n-    name=\'dexterity:Functional\'\n+    bases=(DEXTERITY_FIXTURE,), name="dexterity:Functional"\n )\n DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(\n-    bases=(DEXTERITY_FIXTURE, WSGI_SERVER_FIXTURE),\n-    name=\'dexterity:Acceptance\'\n+    bases=(DEXTERITY_FIXTURE, WSGI_SERVER_FIXTURE), name="dexterity:Acceptance"\n )\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex 43cb573..86615cc 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -18,24 +18,23 @@\n \n \n def add_folder_type(portal):\n-    fti = DexterityFTI(\'folder\')\n-    portal.portal_types._setObject(\'folder\', fti)\n-    fti.klass = \'plone.dexterity.content.Container\'\n+    fti = DexterityFTI("folder")\n+    portal.portal_types._setObject("folder", fti)\n+    fti.klass = "plone.dexterity.content.Container"\n     fti.filter_content_types = False\n     fti.behaviors = (\n-        \'Products.CMFPlone.interfaces.constrains.\'\n-        \'ISelectableConstrainTypes\',\n-        \'plone.app.dexterity.behaviors.metadata.IBasic\')\n+        "Products.CMFPlone.interfaces.constrains." "ISelectableConstrainTypes",\n+        "plone.app.dexterity.behaviors.metadata.IBasic",\n+    )\n     return fti\n \n \n def add_item_type(portal):\n-    fti = DexterityFTI(\'item\')\n-    portal.portal_types._setObject(\'item\', fti)\n-    fti.klass = \'plone.dexterity.content.Item\'\n+    fti = DexterityFTI("item")\n+    portal.portal_types._setObject("item", fti)\n+    fti.klass = "plone.dexterity.content.Item"\n     fti.filter_content_types = False\n-    fti.behaviors = (\n-        \'plone.app.dexterity.behaviors.metadata.IBasic\')\n+    fti.behaviors = "plone.app.dexterity.behaviors.metadata.IBasic"\n     return fti\n \n \n@@ -44,41 +43,40 @@ class DocumentIntegrationTest(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.fti = add_folder_type(self.portal)\n \n-        self.portal.invokeFactory(\'folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal.invokeFactory("folder", "folder")\n+        self.folder = self.portal["folder"]\n \n-        self.folder.invokeFactory(\'folder\', \'inner_folder\')\n-        self.inner_folder = self.folder[\'inner_folder\']\n+        self.folder.invokeFactory("folder", "inner_folder")\n+        self.inner_folder = self.folder["inner_folder"]\n \n-        self.types_tool = getToolByName(self.portal, \'portal_types\')\n+        self.types_tool = getToolByName(self.portal, "portal_types")\n         folder_type = self.types_tool.getTypeInfo(self.folder)\n         self.default_types = [\n             t\n             for t in self.types_tool.listTypeInfo()\n-            if t.isConstructionAllowed(self.folder) and\n-            folder_type.allowType(t.getId())\n+            if t.isConstructionAllowed(self.folder) and folder_type.allowType(t.getId())\n         ]\n         assert len(self.default_types) > 1\n         self.types_id_subset = [t.getId() for t in self.default_types][:1]\n \n     def test_behavior_added(self):\n-        self.assertIn(\'Products.CMFPlone.interfaces.\'\n-                      \'constrains.ISelectableConstrainTypes\',\n-                      self.types_tool.getTypeInfo(self.folder).behaviors)\n+        self.assertIn(\n+            "Products.CMFPlone.interfaces." "constrains.ISelectableConstrainTypes",\n+            self.types_tool.getTypeInfo(self.folder).behaviors,\n+        )\n         self.assertTrue(ISelectableConstrainTypes(self.folder))\n \n     def test_constrainTypesModeDefault(self):\n         behavior1 = ISelectableConstrainTypes(self.folder)\n         behavior2 = ISelectableConstrainTypes(self.inner_folder)\n-        self.assertEqual(\n-            constrains.DISABLED, behavior1.getConstrainTypesMode())\n+        self.assertEqual(constrains.DISABLED, behavior1.getConstrainTypesMode())\n         self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n \n     def test_constrainTypesAcquireDoesNotMatchParent(self):\n@@ -101,8 +99,7 @@ def test_constrainTypesModeValidSet(self):\n \n     def test_constrainTypesModeInvalidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n-        self.assertRaises(\n-            ValueError, behavior.setConstrainTypesMode, \'INVALID\')\n+        self.assertRaises(ValueError, behavior.setConstrainTypesMode, "INVALID")\n \n     def test_canSetConstrainTypesMode(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n@@ -142,8 +139,7 @@ def test_locallyAllowedTypesDefaultWhenEnabled(self):\n         outer_behavior.setConstrainTypesMode(constrains.ENABLED)\n         outer_behavior.setLocallyAllowedTypes([])\n \n-        types = [t for t in self.default_types\n-                 if t.getId() in self.types_id_subset]\n+        types = [t for t in self.default_types if t.getId() in self.types_id_subset]\n         type_ids = self.types_id_subset\n \n         self.assertEqual(types, behavior.allowedContentTypes())\n@@ -180,31 +176,28 @@ def test_locallyAllowedTypesDefaultWhenMultipleAcquired(self):\n         Multiple (two or more) acquisition from parent must not fail if\n         user doesn\'t have add permission on parent.\n         """\n-        self.inner_folder.invokeFactory(\'folder\', \'deeper_folder\')\n+        self.inner_folder.invokeFactory("folder", "deeper_folder")\n         deeper_folder = self.inner_folder.deeper_folder\n-        self.portal.acl_users._doAddUser(\n-            \'user_contributor\', \'secret\', [\'Member\'],\n-            []\n-        )\n-        deeper_folder.manage_addLocalRoles(\'user_contributor\', [\'Contributor\'])\n-        login(self.portal, \'user_contributor\')\n+        self.portal.acl_users._doAddUser("user_contributor", "secret", ["Member"], [])\n+        deeper_folder.manage_addLocalRoles("user_contributor", ["Contributor"])\n+        login(self.portal, "user_contributor")\n         behavior = ISelectableConstrainTypes(deeper_folder)\n         types = behavior.getLocallyAllowedTypes()\n         self.assertTrue(len(types) > 0)\n \n     def test_locallyAllowedTypesInvalidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n-        self.assertRaises(ValueError,\n-                          behavior.setLocallyAllowedTypes,\n-                          self.types_id_subset + [\'invalid\'])\n+        self.assertRaises(\n+            ValueError,\n+            behavior.setLocallyAllowedTypes,\n+            self.types_id_subset + ["invalid"],\n+        )\n \n     def test_locallyAllowedTypesInvalidValuesGetFiltered(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n-        self.folder.locally_allowed_types = self.types_id_subset + \\\n-            [\'invalid\']\n-        self.assertEqual(\n-            self.types_id_subset, behavior.getLocallyAllowedTypes())\n+        self.folder.locally_allowed_types = self.types_id_subset + ["invalid"]\n+        self.assertEqual(self.types_id_subset, behavior.getLocallyAllowedTypes())\n \n     def test_immediatelyAllowedTypesDefaultWhenDisabled(self):\n         """\n@@ -267,17 +260,17 @@ def test_immediatelyAllowedTypesDefaultWhenAcquired(self):\n \n     def test_immediatelyAllowedTypesInvalidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n-        self.assertRaises(ValueError,\n-                          behavior.setImmediatelyAddableTypes,\n-                          self.types_id_subset + [\'invalid\'])\n+        self.assertRaises(\n+            ValueError,\n+            behavior.setImmediatelyAddableTypes,\n+            self.types_id_subset + ["invalid"],\n+        )\n \n     def test_immediatelyAllowedTypesInvalidValuesGetFiltered(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n-        self.folder.immediately_addable_types = self.types_id_subset + \\\n-            [\'invalid\']\n-        self.assertEqual(\n-            self.types_id_subset, behavior.getImmediatelyAddableTypes())\n+        self.folder.immediately_addable_types = self.types_id_subset + ["invalid"]\n+        self.assertEqual(self.types_id_subset, behavior.getImmediatelyAddableTypes())\n \n     def test_defaultAddableTypesDefault(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n@@ -318,8 +311,7 @@ def test_allowedContentTypesExit3(self):\n         behavior = ISelectableConstrainTypes(self.inner_folder)\n         behavior.setConstrainTypesMode(constrains.ACQUIRE)\n         self.assertEqual(\n-            self.types_id_subset,\n-            [x.getId() for x in behavior.allowedContentTypes()]\n+            self.types_id_subset, [x.getId() for x in behavior.allowedContentTypes()]\n         )\n \n     def test_allowedContentTypesExit4(self):\n@@ -332,19 +324,19 @@ def test_allowedContentTypesExit4(self):\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n \n         self.assertEqual(\n-            self.types_id_subset,\n-            [x.getId() for x in behavior.allowedContentTypes()]\n+            self.types_id_subset, [x.getId() for x in behavior.allowedContentTypes()]\n         )\n \n     def test_formschemainvariants(self):\n         class Data(object):\n             allowed_types = []\n             secondary_types = []\n+\n         bad = Data()\n         bad.allowed_types = []\n-        bad.secondary_types = [\'1\']\n+        bad.secondary_types = ["1"]\n         good = Data()\n-        good.allowed_types = [\'1\']\n+        good.allowed_types = ["1"]\n         good.secondary_types = []\n         self.assertTrue(IConstrainForm.validateInvariants(good) is None)\n         self.assertRaises(Invalid, IConstrainForm.validateInvariants, bad)\n@@ -355,80 +347,79 @@ class FolderConstrainViewFunctionalText(unittest.TestCase):\n     layer = DEXTERITY_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal_url = self.portal.absolute_url()\n \n         self.fti = add_folder_type(self.portal)\n \n-        self.portal.invokeFactory(\'folder\', id=\'folder\', title=\'My Folder\')\n+        self.portal.invokeFactory("folder", id="folder", title="My Folder")\n         self.folder = self.portal.folder\n         self.folder_url = self.folder.absolute_url()\n         import transaction\n+\n         transaction.commit()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_folder_view(self):\n-        self.browser.open(self.folder_url + \'/view\')\n-        self.assertTrue(\'My Folder\' in self.browser.contents)\n-        self.assertTrue(\'Restrictions\' in self.browser.contents)\n+        self.browser.open(self.folder_url + "/view")\n+        self.assertTrue("My Folder" in self.browser.contents)\n+        self.assertTrue("Restrictions" in self.browser.contents)\n \n     def test_folder_restrictions_view(self):\n-        self.browser.open(self.folder_url + \'/folder_constraintypes_form\')\n-        self.assertIn(\'Restrict what types\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/folder_constraintypes_form")\n+        self.assertIn("Restrict what types", self.browser.contents)\n         self.assertIn(\n-            \'// Custom form constraints for constrain form\',\n+            "// Custom form constraints for constrain form",\n             self.browser.contents,\n         )\n-        self.assertIn(\'current_prefer_form\', self.browser.contents)\n+        self.assertIn("current_prefer_form", self.browser.contents)\n \n     def test_form_save_restrictions(self):\n         self.browser.open(self.folder_url)\n-        self.browser.getLink(\'Restrictions\').click()\n+        self.browser.getLink("Restrictions").click()\n \n         def ctrl(name):\n             return self.browser.getControl(name=name)\n \n-        self.browser.getControl(\'Type restrictions\').value = [\'1\']\n-        ctrl(\'form.widgets.allowed_types:list\').value = [\'Document\', \'Folder\']\n-        ctrl(\'form.widgets.secondary_types:list\').value = [\'Document\']\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Type restrictions").value = ["1"]\n+        ctrl("form.widgets.allowed_types:list").value = ["Document", "Folder"]\n+        ctrl("form.widgets.secondary_types:list").value = ["Document"]\n+        self.browser.getControl("Save").click()\n         aspect = ISelectableConstrainTypes(self.folder)\n         self.assertEqual(1, aspect.getConstrainTypesMode())\n-        self.assertEqual(\n-            [\'Document\', \'Folder\'],\n-            aspect.getLocallyAllowedTypes()\n-        )\n-        self.assertEqual([\'Folder\'], aspect.getImmediatelyAddableTypes())\n+        self.assertEqual(["Document", "Folder"], aspect.getLocallyAllowedTypes())\n+        self.assertEqual(["Folder"], aspect.getImmediatelyAddableTypes())\n \n     def test_form_bad_save(self):\n         aspect = ISelectableConstrainTypes(self.folder)\n         constraint_before = aspect.getConstrainTypesMode()\n-        assert constraint_before != 1, (\'Default constraint should not be 1. \'\n-                                        \'Test is outdated.\')\n+        assert constraint_before != 1, (\n+            "Default constraint should not be 1. " "Test is outdated."\n+        )\n \n         self.browser.open(self.folder_url)\n-        self.browser.getLink(\'Restrictions\').click()\n+        self.browser.getLink("Restrictions").click()\n \n         def ctrl(name):\n             return self.browser.getControl(name=name)\n \n-        self.browser.getControl(\'Type restrictions\').value = [\'1\']\n-        ctrl(\'form.widgets.allowed_types:list\').value = [\'Document\']\n-        ctrl(\'form.widgets.secondary_types:list\').value = [\n-            \'Document\',\n-            \'Folder\'\n-        ]\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Type restrictions").value = ["1"]\n+        ctrl("form.widgets.allowed_types:list").value = ["Document"]\n+        ctrl("form.widgets.secondary_types:list").value = ["Document", "Folder"]\n+        self.browser.getControl("Save").click()\n         self.assertEqual(constraint_before, aspect.getConstrainTypesMode())\n-        self.assertTrue(\'There were some errors\' in self.browser.contents)\n+        self.assertTrue("There were some errors" in self.browser.contents)\n \n \n class ConstrainControlFunctionalText(unittest.TestCase):\n@@ -436,57 +427,61 @@ class ConstrainControlFunctionalText(unittest.TestCase):\n     layer = DEXTERITY_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal_url = self.portal.absolute_url()\n \n         self.folder_fti = add_folder_type(self.portal)\n         self.item_fti = add_item_type(self.portal)\n \n         import transaction\n+\n         transaction.commit()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),\n+            "Authorization",\n+            "Basic {0}:{1}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_overview_folder_view(self):\n-        url = \'/dexterity-types/folder/@@overview\'\n+        url = "/dexterity-types/folder/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertTrue(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertTrue(\'No content types\' in self.browser.contents)\n+        self.assertTrue("Filter Contained Types" in self.browser.contents)\n+        self.assertTrue("No content types" in self.browser.contents)\n \n     def test_overview_item_view(self):\n-        url = \'/dexterity-types/item/@@overview\'\n+        url = "/dexterity-types/item/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertFalse(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertFalse(\'No content types\' in self.browser.contents)\n+        self.assertFalse("Filter Contained Types" in self.browser.contents)\n+        self.assertFalse("No content types" in self.browser.contents)\n \n     def test_overview_folder_item_view(self):\n         # First we access folder content types and check\n         # that is possible to fiter content types (as it is a container)\n-        url = \'/dexterity-types/folder/@@overview\'\n+        url = "/dexterity-types/folder/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertTrue(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertTrue(\'No content types\' in self.browser.contents)\n+        self.assertTrue("Filter Contained Types" in self.browser.contents)\n+        self.assertTrue("No content types" in self.browser.contents)\n \n         # Then we access item content types and check\n         # that is NOT possible to fiter content types\n-        url = \'/dexterity-types/item/@@overview\'\n+        url = "/dexterity-types/item/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertFalse(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertFalse(\'No content types\' in self.browser.contents)\n+        self.assertFalse("Filter Contained Types" in self.browser.contents)\n+        self.assertFalse("No content types" in self.browser.contents)\n \n         # Acessing folder content types again\n         # and it should be possible to filter content types\n-        url = \'/dexterity-types/folder/@@overview\'\n+        url = "/dexterity-types/folder/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertTrue(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertTrue(\'No content types\' in self.browser.contents)\n+        self.assertTrue("Filter Contained Types" in self.browser.contents)\n+        self.assertTrue("No content types" in self.browser.contents)\n \n \n def test_suite():\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex 9b128c3..baafd0d 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -9,23 +9,31 @@\n \n \n tests = (\n-    \'discussion.txt\',\n-    \'editing.rst\',\n-    \'namefromtitle.txt\',\n-    \'metadata.txt\',\n-    \'nextprevious.txt\',\n-    \'filename.txt\',\n-    \'schema_events.txt\',\n+    "discussion.txt",\n+    "editing.rst",\n+    "namefromtitle.txt",\n+    "metadata.txt",\n+    "nextprevious.txt",\n+    "filename.txt",\n+    "schema_events.txt",\n )\n \n \n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            want = re.sub(\'zExceptions.NotFound\', \'NotFound\', want)\n-            want = re.sub(\'zope.interface.interfaces.ComponentLookupError\', \'ComponentLookupError\', want)\n-            want = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', want)\n-            want = re.sub(\'AccessControl.unauthorized.Unauthorized\', \'Unauthorized\', want)\n+            want = re.sub("zExceptions.NotFound", "NotFound", want)\n+            want = re.sub(\n+                "zope.interface.interfaces.ComponentLookupError",\n+                "ComponentLookupError",\n+                want,\n+            )\n+            want = re.sub(\n+                "zope.testbrowser.browser.LinkNotFoundError", "LinkNotFoundError", want\n+            )\n+            want = re.sub(\n+                "AccessControl.unauthorized.Unauthorized", "Unauthorized", want\n+            )\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n             want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n@@ -33,7 +41,7 @@ def check_output(self, want, got, optionflags):\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+    OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n     for testfile in tests:\n         suite.addTest(\n             layered(\n@@ -43,7 +51,7 @@ def test_suite():\n                     # package=\'plone.app.dexterity.tests\',\n                     checker=Py23DocChecker(),\n                 ),\n-                layer=DEXTERITY_FUNCTIONAL_TESTING\n+                layer=DEXTERITY_FUNCTIONAL_TESTING,\n             )\n         )\n     return suite\ndiff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py\nindex 3d150ce..95c32d2 100644\n--- a/plone/app/dexterity/tests/test_export.py\n+++ b/plone/app/dexterity/tests/test_export.py\n@@ -18,25 +18,27 @@ class TestExportXMLValidity(unittest.TestCase):\n \n     def test_exported_XML_valid_for_GS(self):\n         """Test that exported XMLs can be parsed by GenericSetup\'s parser."""\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # create a Dexterity item that we can export\n         self.item = add_item_type(self.portal)\n \n         # request is expected to have the \'selected\' parameter set\n-        self.request[\'selected\'] = \'item\'\n+        self.request["selected"] = "item"\n \n         # get the export view\n         dexterity_control_panel = getMultiAdapter(\n-            (self.portal, self.request), name=\'dexterity-types\')\n+            (self.portal, self.request), name="dexterity-types"\n+        )\n         types_export_view = getMultiAdapter(\n-            (dexterity_control_panel, self.request), name=\'types-export\')\n+            (dexterity_control_panel, self.request), name="types-export"\n+        )\n \n         # export the \'item\' type and try to parse all XMLs\n         output = types_export_view.__call__()\n         fd = six.BytesIO(output)\n-        archive = zipfile.ZipFile(fd, mode=\'r\')\n+        archive = zipfile.ZipFile(fd, mode="r")\n         filenames = archive.namelist()\n         for filename in filenames:\n             file_xml = archive.read(filename)\n@@ -45,7 +47,7 @@ def test_exported_XML_valid_for_GS(self):\n             try:\n                 parseString(file_xml)\n             except ExpatError as e:\n-                msg = \'Parsing XML failed with ExpatError: {0}\'\n+                msg = "Parsing XML failed with ExpatError: {0}"\n                 self.fail(msg.format(e.args[0]))\n \n \ndiff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py\nindex d0f427c..dcd1053 100644\n--- a/plone/app/dexterity/tests/test_import.py\n+++ b/plone/app/dexterity/tests/test_import.py\n@@ -19,38 +19,30 @@ class TestDexterityTypesImport(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def testZipFileImportContext(self):\n-        portal = self.layer[\'portal\']\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        portal = self.layer["portal"]\n+        types_tool = getToolByName(portal, "portal_types")\n \n         zname = os.path.join(\n             os.path.dirname(__file__),\n-            \'import\',\n-            \'dexterity_export.zip\',\n+            "import",\n+            "dexterity_export.zip",\n         )\n-        f = open(zname, \'rb\')\n+        f = open(zname, "rb")\n         icontext = ZipFileImportContext(types_tool, f)\n \n-        types_xml = icontext.readDataFile(\'types.xml\')\n+        types_xml = icontext.readDataFile("types.xml")\n         self.assertTrue(\n             types_xml,\n-            msg=\'Unable to read types.xml in sample import file\',\n+            msg="Unable to read types.xml in sample import file",\n         )\n \n-        self.assertTrue(\n-            isinstance(\n-                icontext.getLastModified(\'types.xml\'),\n-                DateTime\n-            )\n-        )\n+        self.assertTrue(isinstance(icontext.getLastModified("types.xml"), DateTime))\n \n-        self.assertEqual(\n-            set(icontext.listDirectory(\'\')),\n-            set([\'types\', \'types.xml\'])\n-        )\n+        self.assertEqual(set(icontext.listDirectory("")), set(["types", "types.xml"]))\n \n         self.assertEqual(\n-            set(icontext.listDirectory(\'types\')),\n-            set([\'test_type_two.xml\', \'test_type_one.xml\'])\n+            set(icontext.listDirectory("types")),\n+            set(["test_type_two.xml", "test_type_one.xml"]),\n         )\n \n         # test importIsTypesOnly check\n@@ -59,41 +51,36 @@ def testZipFileImportContext(self):\n         f.close()\n \n     def testSampleImportStep(self):\n-        """ Import our sample file\n-        """\n+        """Import our sample file"""\n \n-        portal = self.layer[\'portal\']\n-        setup_tool = getToolByName(portal, \'portal_setup\')\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        portal = self.layer["portal"]\n+        setup_tool = getToolByName(portal, "portal_setup")\n+        types_tool = getToolByName(portal, "portal_types")\n         old_types = set(types_tool.listContentTypes())\n \n-        handler = setup_tool.getImportStep(u\'typeinfo\')\n+        handler = setup_tool.getImportStep(u"typeinfo")\n \n         zname = os.path.join(\n-            os.path.dirname(__file__),\n-            \'import\',\n-            \'dexterity_export.zip\'\n+            os.path.dirname(__file__), "import", "dexterity_export.zip"\n         )\n-        with open(zname, \'rb\') as f:\n+        with open(zname, "rb") as f:\n             icontext = ZipFileImportContext(types_tool, f)\n             handler(icontext)\n \n         # Our types list should have our two new types\n         self.assertEqual(\n             set(types_tool.listContentTypes()) - old_types,\n-            set([\'test_type_one\', \'test_type_two\'])\n+            set(["test_type_one", "test_type_two"]),\n         )\n \n         # Trying to import now should fail, since\n         # it would be importing existing types.\n         # This is tested in an invariant.\n         data = TypeProfileImport(profile_file=plone.namedfile.NamedFile())\n-        with open(zname, \'rb\') as f:\n+        with open(zname, "rb") as f:\n             data.profile_file.data = f.read()\n         self.assertRaises(\n-            zope.interface.Invalid,\n-            ITypeProfileImport.validateInvariants,\n-            data\n+            zope.interface.Invalid, ITypeProfileImport.validateInvariants, data\n         )\n \n \ndiff --git a/plone/app/dexterity/tests/test_nextprevious.py b/plone/app/dexterity/tests/test_nextprevious.py\nindex fe56ee0..b933d92 100644\n--- a/plone/app/dexterity/tests/test_nextprevious.py\n+++ b/plone/app/dexterity/tests/test_nextprevious.py\n@@ -19,41 +19,40 @@ class NextPreviousBase:\n     def _setupFTI(self):\n         fti = DexterityFTI(self._portal_type)\n         self.portal.portal_types._setObject(self._portal_type, fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n+        fti.klass = "plone.dexterity.content.Container"\n         fti.filter_content_types = False\n         fti.behaviors = self._behaviors\n \n \n class NextPreviousEnabledTests(NextPreviousBase, unittest.TestCase):\n-    """ basic use cases and tests for next/previous navigation, essentially\n-        borrowed from `plone.app.folder.tests.test_nextprevious.py` """\n+    """basic use cases and tests for next/previous navigation, essentially\n+    borrowed from `plone.app.folder.tests.test_nextprevious.py`"""\n \n     layer = DEXTERITY_INTEGRATION_TESTING\n \n-    _behaviors = (\n-        \'plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled\',)\n-    _portal_type = \'FolderEnabled\'\n+    _behaviors = ("plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled",)\n+    _portal_type = "FolderEnabled"\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.wf = getToolByName(self.portal, \'portal_workflow\')\n-        self.wf.setDefaultChain(\'simple_publication_workflow\')\n-        self.portal.acl_users._doAddUser(\'user_std\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.wf = getToolByName(self.portal, "portal_workflow")\n+        self.wf.setDefaultChain("simple_publication_workflow")\n+        self.portal.acl_users._doAddUser("user_std", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self._setupFTI()\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(self._portal_type, \'folder1\')\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(self._portal_type, \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.invokeFactory("Document", "doc3")\n+        self.portal.invokeFactory(self._portal_type, "folder1")\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("Document", "doc12")\n+        folder1.invokeFactory("Document", "doc13")\n+        self.portal.invokeFactory(self._portal_type, "folder2")\n+        folder2 = getattr(self.portal, "folder2")\n+        folder2.invokeFactory("Document", "doc21")\n+        folder2.invokeFactory("Document", "doc22")\n+        folder2.invokeFactory("Document", "doc23")\n \n     def testIfFolderImplementsPreviousNext(self):\n         self.assertTrue(INextPreviousProvider(self.portal.folder1, None))\n@@ -63,39 +62,39 @@ def testNextPreviousEnablingOnCreation(self):\n \n     def testNextPreviousViewEnabled(self):\n         doc = self.portal.folder1.doc11\n-        view = doc.restrictedTraverse(\'@@plone_nextprevious_view\')\n+        view = doc.restrictedTraverse("@@plone_nextprevious_view")\n         self.assertFalse(view is None)\n         self.assertTrue(view.enabled())\n \n     def testNextPreviousItems(self):\n-        container = self.portal[self.portal.invokeFactory(\n-            self._portal_type, \'case3\')]\n+        container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         for id in range(1, 4):\n-            container.invokeFactory(\'Document\', \'subDoc{0}\'.format(id))\n+            container.invokeFactory("Document", "subDoc{0}".format(id))\n \n         from OFS.Folder import manage_addFolder\n-        manage_addFolder(container, \'notacontentishtype\')\n+\n+        manage_addFolder(container, "notacontentishtype")\n \n         for id in range(5, 6):\n-            container.invokeFactory(\'Document\', \'subDoc{0}\'.format(id))\n+            container.invokeFactory("Document", "subDoc{0}".format(id))\n \n         adapter = INextPreviousProvider(container)\n         # text data for next/previous items\n         next = adapter.getNextItem(container.subDoc2)\n-        self.assertEqual(next[\'id\'], \'subDoc3\')\n-        self.assertEqual(next[\'portal_type\'], \'Document\')\n-        self.assertEqual(next[\'url\'], container.subDoc3.absolute_url())\n+        self.assertEqual(next["id"], "subDoc3")\n+        self.assertEqual(next["portal_type"], "Document")\n+        self.assertEqual(next["url"], container.subDoc3.absolute_url())\n         previous = adapter.getPreviousItem(container.subDoc2)\n-        self.assertEqual(previous[\'id\'], \'subDoc1\')\n-        self.assertEqual(previous[\'portal_type\'], \'Document\')\n-        self.assertEqual(previous[\'url\'], container.subDoc1.absolute_url())\n+        self.assertEqual(previous["id"], "subDoc1")\n+        self.assertEqual(previous["portal_type"], "Document")\n+        self.assertEqual(previous["url"], container.subDoc1.absolute_url())\n \n         # #11234 not contentish contents shouldn\'t be returned\n         # as next or previous content\n         next = adapter.getNextItem(container.subDoc3)\n-        self.assertEqual(next[\'id\'], \'subDoc5\')\n+        self.assertEqual(next["id"], "subDoc5")\n         previous = adapter.getPreviousItem(container.subDoc5)\n-        self.assertEqual(previous[\'id\'], \'subDoc3\')\n+        self.assertEqual(previous["id"], "subDoc3")\n \n         # first item should not have a previous item\n         previous = adapter.getPreviousItem(container.subDoc1)\n@@ -105,73 +104,68 @@ def testNextPreviousItems(self):\n         self.assertEqual(next, None)\n \n     def testNextItemOnlyShowViewable(self):\n-        container = self.portal[self.portal.invokeFactory(\n-            self._portal_type, \'case3\')]\n+        container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         # create objects [subDoc1,subDoc2,subDoc3,subDoc4,subDoc5,subDoc6]\n         # published objects [subDoc2, subDoc4, subDoc5]\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         for id in range(1, 7):\n-            doc = container[container.invokeFactory(\n-                \'Document\', \'subDoc{0}\'.format(id))]\n+            doc = container[container.invokeFactory("Document", "subDoc{0}".format(id))]\n             if id in [2, 4, 5]:\n-                self.wf.doActionFor(doc, \'publish\')\n+                self.wf.doActionFor(doc, "publish")\n \n         # Member should only see the published items\n         logout()\n-        login(self.portal, \'user_std\')\n+        login(self.portal, "user_std")\n         adapter = INextPreviousProvider(container)\n         # text data for next/tems\n         next = adapter.getNextItem(container.subDoc2)\n-        self.assertEqual(next[\'id\'], \'subDoc4\')\n+        self.assertEqual(next["id"], "subDoc4")\n         next = adapter.getNextItem(container.subDoc4)\n-        self.assertEqual(next[\'id\'], \'subDoc5\')\n+        self.assertEqual(next["id"], "subDoc5")\n         next = adapter.getNextItem(container.subDoc5)\n         self.assertEqual(next, None)\n \n     def testPreviousItemOnlyShowViewable(self):\n-        container = self.portal[self.portal.invokeFactory(\n-            self._portal_type, \'case3\')]\n+        container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         # create objects [subDoc1,subDoc2,subDoc3,subDoc4,subDoc5,subDoc6]\n         # published objects [subDoc2, subDoc4, subDoc5]\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         for id in range(1, 7):\n-            doc = container[container.invokeFactory(\n-                \'Document\', \'subDoc{0}\'.format(id))]\n+            doc = container[container.invokeFactory("Document", "subDoc{0}".format(id))]\n             if id in [2, 4, 5]:\n-                self.wf.doActionFor(doc, \'publish\')\n+                self.wf.doActionFor(doc, "publish")\n \n         # Member should only see the published items\n         logout()\n-        login(self.portal, \'user_std\')\n+        login(self.portal, "user_std")\n         adapter = INextPreviousProvider(container)\n         # text data for next/tems\n         previous = adapter.getPreviousItem(container.subDoc5)\n-        self.assertEqual(previous[\'id\'], \'subDoc4\')\n+        self.assertEqual(previous["id"], "subDoc4")\n         previous = adapter.getPreviousItem(container.subDoc4)\n-        self.assertEqual(previous[\'id\'], \'subDoc2\')\n+        self.assertEqual(previous["id"], "subDoc2")\n         previous = adapter.getPreviousItem(container.subDoc2)\n         self.assertEqual(previous, None)\n \n \n class NextPreviousToggleTests(NextPreviousBase, unittest.TestCase):\n-    """ basic use cases and tests for next/previous navigation, essentially\n-        borrowed from `plone.app.folder.tests.test_nextprevious.py` """\n+    """basic use cases and tests for next/previous navigation, essentially\n+    borrowed from `plone.app.folder.tests.test_nextprevious.py`"""\n \n     layer = DEXTERITY_INTEGRATION_TESTING\n \n-    _behaviors = (\n-        \'plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle\',)\n-    _portal_type = \'FolderWithToggle\'\n+    _behaviors = ("plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle",)\n+    _portal_type = "FolderWithToggle"\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.wf = getToolByName(self.portal, \'portal_workflow\')\n-        self.portal.acl_users._doAddUser(\'user_std\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.wf = getToolByName(self.portal, "portal_workflow")\n+        self.portal.acl_users._doAddUser("user_std", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self._setupFTI()\n-        self.portal.invokeFactory(self._portal_type, \'folder1\')\n-        self.portal.folder1.invokeFactory(\'Document\', \'doc11\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal.invokeFactory(self._portal_type, "folder1")\n+        self.portal.folder1.invokeFactory("Document", "doc11")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def testIfFolderImplementsPreviousNext(self):\n         self.assertTrue(INextPreviousProvider(self.portal.folder1, None))\n@@ -183,18 +177,19 @@ def testNextPreviousEnablingOnCreation(self):\n \n     def testNextPreviousViewDisabled(self):\n         doc = self.portal.folder1.doc11\n-        view = doc.restrictedTraverse(\'@@plone_nextprevious_view\')\n+        view = doc.restrictedTraverse("@@plone_nextprevious_view")\n         self.assertFalse(view is None)\n         self.assertFalse(view.enabled())\n \n     def testNextPreviousViewEnabled(self):\n         self.portal.folder1.nextPreviousEnabled = True\n         doc = self.portal.folder1.doc11\n-        view = doc.restrictedTraverse(\'@@plone_nextprevious_view\')\n+        view = doc.restrictedTraverse("@@plone_nextprevious_view")\n         self.assertFalse(view is None)\n         self.assertTrue(view.enabled())\n \n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py\nindex eb8f244..febd048 100644\n--- a/plone/app/dexterity/tests/test_permissions.py\n+++ b/plone/app/dexterity/tests/test_permissions.py\n@@ -27,54 +27,61 @@\n \n def add_mock_fti(portal):\n     # Fake DX Type\n-    fti = DexterityFTI(\'dx_mock\')\n-    portal.portal_types._setObject(\'dx_mock\', fti)\n-    fti.klass = \'plone.dexterity.content.Item\'\n-    fti.schema = \'plone.app.dexterity.tests.test_permissions.IMockSchema\'\n+    fti = DexterityFTI("dx_mock")\n+    portal.portal_types._setObject("dx_mock", fti)\n+    fti.klass = "plone.dexterity.content.Item"\n+    fti.schema = "plone.app.dexterity.tests.test_permissions.IMockSchema"\n     fti.filter_content_types = False\n-    fti.behaviors = (\'plone.app.dexterity.behaviors.metadata.IBasic\',)\n+    fti.behaviors = ("plone.app.dexterity.behaviors.metadata.IBasic",)\n \n \n def _custom_field_widget(field, request):\n     from plone.app.z3cform.widget import AjaxSelectWidget\n+\n     widget = FieldWidget(field, AjaxSelectWidget(request))\n-    widget.vocabulary = \'plone.app.vocabularies.PortalTypes\'\n+    widget.vocabulary = "plone.app.vocabularies.PortalTypes"\n     return widget\n \n \n class IMockSchema(Interface):\n-    allowed_field = schema.Choice(\n-        vocabulary=\'plone.app.vocabularies.PortalTypes\')\n-    disallowed_field = schema.Choice(\n-        vocabulary=\'plone.app.vocabularies.PortalTypes\')\n-    default_field = schema.Choice(\n-        vocabulary=\'plone.app.vocabularies.PortalTypes\')\n+    allowed_field = schema.Choice(vocabulary="plone.app.vocabularies.PortalTypes")\n+    disallowed_field = schema.Choice(vocabulary="plone.app.vocabularies.PortalTypes")\n+    default_field = schema.Choice(vocabulary="plone.app.vocabularies.PortalTypes")\n     custom_widget_field = schema.TextLine()\n     adapted_widget_field = schema.TextLine()\n \n \n-IMockSchema.setTaggedValue(WRITE_PERMISSIONS_KEY, {\n-    \'allowed_field\': u\'zope2.View\',\n-    \'disallowed_field\': u\'zope2.ViewManagementScreens\',\n-    \'custom_widget_field\': u\'zope2.View\',\n-    \'adapted_widget_field\': u\'zope2.View\',\n-})\n-IMockSchema.setTaggedValue(WIDGETS_KEY, {\n-    \'custom_widget_field\': _custom_field_widget,\n-})\n+IMockSchema.setTaggedValue(\n+    WRITE_PERMISSIONS_KEY,\n+    {\n+        "allowed_field": u"zope2.View",\n+        "disallowed_field": u"zope2.ViewManagementScreens",\n+        "custom_widget_field": u"zope2.View",\n+        "adapted_widget_field": u"zope2.View",\n+    },\n+)\n+IMockSchema.setTaggedValue(\n+    WIDGETS_KEY,\n+    {\n+        "custom_widget_field": _custom_field_widget,\n+    },\n+)\n \n \n def _enable_custom_widget(field):\n     provideAdapter(\n         _custom_field_widget,\n         adapts=(getSpecification(field), IPloneFormLayer),\n-        provides=IFieldWidget\n+        provides=IFieldWidget,\n     )\n \n \n def _disable_custom_widget(field):\n     base.unregisterAdapter(\n-        required=(getSpecification(field), IPloneFormLayer, ),\n+        required=(\n+            getSpecification(field),\n+            IPloneFormLayer,\n+        ),\n         provided=IFieldWidget,\n     )\n \n@@ -84,155 +91,175 @@ class DexterityVocabularyPermissionTests(unittest.TestCase):\n     layer = PLONEAPPWIDGETS_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n+        self.request = TestRequest(environ={"HTTP_ACCEPT_LANGUAGE": "en"})\n         setRequest(self.request)\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         add_mock_fti(self.portal)\n-        self.portal.invokeFactory(\'dx_mock\', \'test_dx\')\n-\n-        self.portal.test_dx.manage_permission(\'View\',\n-                                              (\'Anonymous\',),\n-                                              acquire=False)\n-        self.portal.test_dx.manage_permission(\'View management screens\',\n-                                              (),\n-                                              acquire=False)\n-        self.portal.test_dx.manage_permission(\'Modify portal content\',\n-                                              (\'Editor\', \'Manager\',\n-                                               \'Site Adiminstrator\'),\n-                                              acquire=False)\n+        self.portal.invokeFactory("dx_mock", "test_dx")\n+\n+        self.portal.test_dx.manage_permission("View", ("Anonymous",), acquire=False)\n+        self.portal.test_dx.manage_permission(\n+            "View management screens", (), acquire=False\n+        )\n+        self.portal.test_dx.manage_permission(\n+            "Modify portal content",\n+            ("Editor", "Manager", "Site Adiminstrator"),\n+            acquire=False,\n+        )\n \n     def test_vocabulary_field_allowed(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n     def test_vocabulary_field_wrong_vocabulary_disallowed(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Fake\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Fake",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_field_disallowed(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'disallowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "disallowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_field_default_permission(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'default_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "default_field",\n+            }\n+        )\n         # If the field is does not have a security declaration, the\n         # default edit permission is tested (Modify portal content)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Editor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Editor"])\n         # Now access should be allowed, but the vocabulary does not exist\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n     def test_vocabulary_field_default_permission_wrong_vocab(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Fake\',\n-            \'field\': \'default_field\',\n-        })\n-        setRoles(self.portal, TEST_USER_ID, [\'Editor\'])\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Fake",\n+                "field": "default_field",\n+            }\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Editor"])\n         # Now access should be allowed, but the vocabulary does not exist\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_missing_field(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'missing_field\',\n-        })\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "missing_field",\n+            }\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         with self.assertRaises(AttributeError):\n             view()\n \n     def test_vocabulary_on_widget(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'custom_widget_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "custom_widget_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Fake\'\n+        self.request.form["name"] = "plone.app.vocabularies.Fake"\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_on_adapted_widget(self):\n-        _enable_custom_widget(IMockSchema[\'adapted_widget_field\'])\n+        _enable_custom_widget(IMockSchema["adapted_widget_field"])\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'adapted_widget_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "adapted_widget_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Fake\'\n+        self.request.form["name"] = "plone.app.vocabularies.Fake"\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n-        _disable_custom_widget(IMockSchema[\'adapted_widget_field\'])\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n+        _disable_custom_widget(IMockSchema["adapted_widget_field"])\n \n     def test_vocabulary_field_allowed_from_add_view(self):\n-        add_view = DefaultAddView(self.portal, self.request,\n-                                  self.portal.portal_types[\'dx_mock\'])\n+        add_view = DefaultAddView(\n+            self.portal, self.request, self.portal.portal_types["dx_mock"]\n+        )\n         view = VocabularyView(add_view, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n     def test_vocabulary_field_allowed_from_add_form(self):\n         add_form = DefaultAddForm(self.portal, self.request)\n-        add_form.portal_type = \'dx_mock\'\n+        add_form.portal_type = "dx_mock"\n         view = VocabularyView(add_form, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\ndiff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py\nindex aa9cf7d..7c2fa0a 100644\n--- a/plone/app/dexterity/tests/test_robot.py\n+++ b/plone/app/dexterity/tests/test_robot.py\n@@ -11,18 +11,18 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     current_dir = os.path.abspath(os.path.dirname(__file__))\n-    robot_dir = os.path.join(current_dir, \'robot\')\n+    robot_dir = os.path.join(current_dir, "robot")\n     robot_tests = [\n-        os.path.join(\'robot\', doc) for doc in os.listdir(robot_dir)\n-        if doc.endswith(\'.robot\') and doc.startswith(\'test_\')\n+        os.path.join("robot", doc)\n+        for doc in os.listdir(robot_dir)\n+        if doc.endswith(".robot") and doc.startswith("test_")\n     ]\n     for robot_test in robot_tests:\n         robottestsuite = robotsuite.RobotTestSuite(robot_test)\n         robottestsuite.level = ROBOT_TEST_LEVEL\n-        suite.addTests([\n-            layered(\n-                robottestsuite,\n-                layer=DEXTERITY_ACCEPTANCE_TESTING\n-            ),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(robottestsuite, layer=DEXTERITY_ACCEPTANCE_TESTING),\n+            ]\n+        )\n     return suite\ndiff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py\nindex 60c405a..84af321 100644\n--- a/plone/app/dexterity/tests/test_upgrades.py\n+++ b/plone/app/dexterity/tests/test_upgrades.py\n@@ -16,49 +16,48 @@ def test_add_missing_uuids(self):\n         from plone.uuid.interfaces import IUUID\n \n         # create a type and item and remove its UUID\n-        self.layer[\'portal\'].portal_types._setObject(\n-            \'page\', DexterityFTI(\'page\'))\n+        self.layer["portal"].portal_types._setObject("page", DexterityFTI("page"))\n         page = createContentInContainer(\n-            self.layer[\'portal\'],\n-            \'page\',\n-            checkConstraints=False\n+            self.layer["portal"], "page", checkConstraints=False\n         )\n         setattr(page, ATTRIBUTE_NAME, None)\n         self.assertTrue(IUUID(page, None) is None)\n         # reindex to remove the UUID it got when the page was created\n-        page.reindexObject(idxs=[\'UID\'])\n+        page.reindexObject(idxs=["UID"])\n \n         # run the migration\n-        add_missing_uuids(self.layer[\'portal\'])\n+        add_missing_uuids(self.layer["portal"])\n         # make sure we have a new UUID\n         uuid = IUUID(page, None)\n         self.assertTrue(uuid is not None)\n         # make sure the catalog was updated\n-        b = self.layer[\'portal\'].portal_catalog.unrestrictedSearchResults(\n-            portal_type=\'page\')[0]\n+        b = self.layer["portal"].portal_catalog.unrestrictedSearchResults(\n+            portal_type="page"\n+        )[0]\n         self.assertTrue(b.UID == uuid)\n \n         # make sure running the upgrade again doesn\'t change the UUID\n-        add_missing_uuids(self.layer[\'portal\'])\n+        add_missing_uuids(self.layer["portal"])\n         uuid2 = IUUID(page, None)\n-        self.assertEqual(uuid2, uuid, \'Upgrade changes existing uuids.\')\n+        self.assertEqual(uuid2, uuid, "Upgrade changes existing uuids.")\n \n     def test_upgrade_2003(self):\n         from plone.app.dexterity.upgrades.to2003 import fix_installed_products\n         from Products.CMFCore.utils import getToolByName\n+\n         try:\n             from Products.CMFQuickInstallerTool.InstalledProduct import InstalledProduct\n         except ImportError:\n             # nothing to test\n             return\n-        qi = getToolByName(self.layer[\'portal\'], \'portal_quickinstaller\', None)\n+        qi = getToolByName(self.layer["portal"], "portal_quickinstaller", None)\n         if qi is None:\n             # nothing to test\n             return\n-        ip = InstalledProduct(\'foo\')\n-        ip.utilities = [(\'zope.intid.interfaces.IIntIds\', \'\')]\n-        qi._setObject(\'foo\', ip)\n+        ip = InstalledProduct("foo")\n+        ip.utilities = [("zope.intid.interfaces.IIntIds", "")]\n+        qi._setObject("foo", ip)\n \n-        fix_installed_products(self.layer[\'portal\'])\n+        fix_installed_products(self.layer["portal"])\n \n         self.assertEqual([], ip.utilities)\ndiff --git a/plone/app/dexterity/upgrades/to1.py b/plone/app/dexterity/upgrades/to1.py\nindex a94b9ae..9620ff4 100644\n--- a/plone/app/dexterity/upgrades/to1.py\n+++ b/plone/app/dexterity/upgrades/to1.py\n@@ -3,6 +3,6 @@\n \n \n def install_z3cform_profile(context):\n-    gs = getToolByName(context, \'portal_setup\')\n-    profile = \'profile-plone.app.z3cform:default\'\n+    gs = getToolByName(context, "portal_setup")\n+    profile = "profile-plone.app.z3cform:default"\n     gs.runAllImportStepsFromProfile(profile, purge_old=False)\ndiff --git a/plone/app/dexterity/upgrades/to2.py b/plone/app/dexterity/upgrades/to2.py\nindex 511fee9..49b0bfd 100644\n--- a/plone/app/dexterity/upgrades/to2.py\n+++ b/plone/app/dexterity/upgrades/to2.py\n@@ -3,5 +3,5 @@\n \n \n def remove_stylesheet(context):\n-    cssreg = getToolByName(context, \'portal_css\')\n-    cssreg.unregisterResource(\'++resource++schemaeditor.css\')\n+    cssreg = getToolByName(context, "portal_css")\n+    cssreg.unregisterResource("++resource++schemaeditor.css")\ndiff --git a/plone/app/dexterity/upgrades/to2000.py b/plone/app/dexterity/upgrades/to2000.py\nindex 82efeda..db03ef2 100644\n--- a/plone/app/dexterity/upgrades/to2000.py\n+++ b/plone/app/dexterity/upgrades/to2000.py\n@@ -3,6 +3,5 @@\n \n \n def remove_overlays_css(context):\n-    portal_css = getToolByName(context, \'portal_css\')\n-    portal_css.unregisterResource(\n-        \'++resource++plone.app.dexterity.overlays.css\')\n+    portal_css = getToolByName(context, "portal_css")\n+    portal_css.unregisterResource("++resource++plone.app.dexterity.overlays.css")\ndiff --git a/plone/app/dexterity/upgrades/to2001.py b/plone/app/dexterity/upgrades/to2001.py\nindex e8e7356..a925a71 100644\n--- a/plone/app/dexterity/upgrades/to2001.py\n+++ b/plone/app/dexterity/upgrades/to2001.py\n@@ -6,12 +6,12 @@\n \n \n def add_missing_uuids(context):\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    query = {\'object_provides\': IDexterityContent.__identifier__}\n+    catalog = getToolByName(context, "portal_catalog")\n+    query = {"object_provides": IDexterityContent.__identifier__}\n     for brain in catalog.unrestrictedSearchResults(query):\n-        if getattr(brain, \'UID\', None) is not None:\n+        if getattr(brain, "UID", None) is not None:\n             continue\n         ob = brain.getObject()\n         if IUUID(ob, None) is None:\n             addAttributeUUID(ob, None)\n-            ob.reindexObject(idxs=[\'UID\'])\n+            ob.reindexObject(idxs=["UID"])\ndiff --git a/plone/app/dexterity/upgrades/to2002.py b/plone/app/dexterity/upgrades/to2002.py\nindex 4d4d3f3..c9ba292 100644\n--- a/plone/app/dexterity/upgrades/to2002.py\n+++ b/plone/app/dexterity/upgrades/to2002.py\n@@ -3,6 +3,6 @@\n \n \n def install_datepicker_profile(context):\n-    gs = getToolByName(context, \'portal_setup\')\n-    profile = \'profile-collective.z3cform.datetimewidget:default\'\n+    gs = getToolByName(context, "portal_setup")\n+    profile = "profile-collective.z3cform.datetimewidget:default"\n     gs.runAllImportStepsFromProfile(profile, purge_old=False)\ndiff --git a/plone/app/dexterity/upgrades/to2003.py b/plone/app/dexterity/upgrades/to2003.py\nindex d50ec9d..54e21a9 100644\n--- a/plone/app/dexterity/upgrades/to2003.py\n+++ b/plone/app/dexterity/upgrades/to2003.py\n@@ -3,17 +3,17 @@\n from Products.CMFCore.utils import getToolByName\n \n \n-BAD_GUY = (\'zope.intid.interfaces.IIntIds\', \'\')\n+BAD_GUY = ("zope.intid.interfaces.IIntIds", "")\n \n \n def fix_installed_products(context):\n-    qi = getToolByName(context, \'portal_quickinstaller\', None)\n+    qi = getToolByName(context, "portal_quickinstaller", None)\n     if qi is None:\n         # Nothing to do.\n         return\n-    for installed_product in qi.objectValues(spec=\'Installed Product\'):\n-        if installed_product.getId() == \'plone.app.intid\':\n+    for installed_product in qi.objectValues(spec="Installed Product"):\n+        if installed_product.getId() == "plone.app.intid":\n             continue\n-        utilities = getattr(aq_base(installed_product), \'utilities\', [])\n+        utilities = getattr(aq_base(installed_product), "utilities", [])\n         if BAD_GUY in utilities:\n             installed_product.utilities.remove(BAD_GUY)\ndiff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py\nindex 3f22551..0195342 100644\n--- a/plone/app/dexterity/upgrades/to2004.py\n+++ b/plone/app/dexterity/upgrades/to2004.py\n@@ -7,8 +7,8 @@ def remove_cr_and_lf_description(context):\n     types = []\n \n     behaviors = [\n-        \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-        \'plone.app.dexterity.behaviors.metadata.IDublinCore\'\n+        "plone.app.dexterity.behaviors.metadata.IBasic",\n+        "plone.app.dexterity.behaviors.metadata.IDublinCore",\n     ]\n \n     context = context.aq_parent\n@@ -18,18 +18,16 @@ def remove_cr_and_lf_description(context):\n             if behavior in fti.behaviors:\n                 types.append(name)\n \n-    catalog = getToolByName(context, \'portal_catalog\')\n+    catalog = getToolByName(context, "portal_catalog")\n \n     for portal_type in types:\n-        brains = catalog.searchResults(\n-            portal_type=portal_type\n-        )\n+        brains = catalog.searchResults(portal_type=portal_type)\n \n         for brain in brains:\n             obj = brain.getObject()\n \n-            if \'\\n\' in obj.description:\n-                obj.description = obj.description.replace(\'\\n\', \'\')\n+            if "\\n" in obj.description:\n+                obj.description = obj.description.replace("\\n", "")\n \n-            if \'\\r\' in obj.description:\n-                obj.description = obj.description.replace(\'\\r\', \'\')\n+            if "\\r" in obj.description:\n+                obj.description = obj.description.replace("\\r", "")\ndiff --git a/plone/app/dexterity/upgrades/to2005.py b/plone/app/dexterity/upgrades/to2005.py\nindex 6a9e8a7..a923ca8 100644\n--- a/plone/app/dexterity/upgrades/to2005.py\n+++ b/plone/app/dexterity/upgrades/to2005.py\n@@ -4,39 +4,39 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.app.dexterity\')\n+logger = logging.getLogger("plone.app.dexterity")\n \n \n def cleanup_portal_actions(context):\n     # Our actions.xml registers dexterity-types as controlpanel item.  But this\n     # is what controlpanel.xml is for.  So remove it.\n     # https://github.com/plone/plone.app.dexterity/issues/218\n-    actions_tool = getToolByName(context, \'portal_actions\')\n-    main_category = \'controlpanel\'\n-    sub_category = \'controlpanel_addons\'\n-    action_name = \'dexterity-types\'\n+    actions_tool = getToolByName(context, "portal_actions")\n+    main_category = "controlpanel"\n+    sub_category = "controlpanel_addons"\n+    action_name = "dexterity-types"\n \n     # Lookup for action in category.\n     main = getattr(actions_tool, main_category, None)\n     if main is None:\n-        logger.info(\'%s category was already removed.\', main_category)\n+        logger.info("%s category was already removed.", main_category)\n         return\n     sub = getattr(main, sub_category, None)\n     if sub is None:\n-        logger.info(\'%s category was already removed.\', sub_category)\n+        logger.info("%s category was already removed.", sub_category)\n         return\n     if action_name not in sub.objectIds():\n-        logger.info(\'%s action was already removed.\', action_name)\n+        logger.info("%s action was already removed.", action_name)\n         return\n     sub._delObject(action_name)\n-    logger.info(\'Removed %s from portal_actions.\', action_name)\n+    logger.info("Removed %s from portal_actions.", action_name)\n \n     # Cleanup empty categories.\n     if len(sub.objectIds()) > 0:\n         return\n     main._delObject(sub_category)\n-    logger.info(\'Removed empty %s action sub category.\', sub_category)\n+    logger.info("Removed empty %s action sub category.", sub_category)\n     if len(main.objectIds()) > 0:\n         return\n     actions_tool._delObject(main_category)\n-    logger.info(\'Removed empty %s action main category.\', main_category)\n+    logger.info("Removed empty %s action main category.", main_category)\ndiff --git a/setup.py b/setup.py\nindex 55f889b..a980d1e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,22 +3,22 @@\n from setuptools import setup\n \n \n-version = \'3.0.0a10.dev0\'\n+version = "3.0.0a10.dev0"\n \n short_description = (\n-    \'Dexterity is a content type framework for CMF  applications, \'\n-    \'with particular emphasis on Plone. It can be viewed as an \'\n-    \'alternative to Archetypes that is more light-weight and modular.\'\n+    "Dexterity is a content type framework for CMF  applications, "\n+    "with particular emphasis on Plone. It can be viewed as an "\n+    "alternative to Archetypes that is more light-weight and modular."\n )\n \n-long_description = \'{0}\\n{1}\\n{2}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'RELEASE_NOTES.rst\').read(),\n-    open(\'CHANGES.rst\').read(),\n+long_description = "{0}\\n{1}\\n{2}".format(\n+    open("README.rst").read(),\n+    open("RELEASE_NOTES.rst").read(),\n+    open("CHANGES.rst").read(),\n )\n \n setup(\n-    name=\'plone.app.dexterity\',\n+    name="plone.app.dexterity",\n     version=version,\n     description=short_description,\n     long_description=long_description,\n@@ -36,63 +36,63 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone ttw dexterity schema interface\',\n-    author=\'Martin Aspeli, David Glick, et al\',\n-    author_email=\'dexterity-development@googlegroups.com\',\n-    url=\'http://plone.org/products/dexterity\',\n-    license=\'GPL\',\n+    keywords="plone ttw dexterity schema interface",\n+    author="Martin Aspeli, David Glick, et al",\n+    author_email="dexterity-development@googlegroups.com",\n+    url="http://plone.org/products/dexterity",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n         # Dexterity\n-        \'plone.app.textfield\',\n-        \'plone.behavior>=1.0\',\n-        \'plone.dexterity>=2.2.2\',\n-        \'plone.formwidget.namedfile\',\n-        \'plone.namedfile>=1.0.0\',\n-        \'plone.rfc822\',\n-        \'plone.schemaeditor >1.3.3\',\n+        "plone.app.textfield",\n+        "plone.behavior>=1.0",\n+        "plone.dexterity>=2.2.2",\n+        "plone.formwidget.namedfile",\n+        "plone.namedfile>=1.0.0",\n+        "plone.rfc822",\n+        "plone.schemaeditor >1.3.3",\n         # Plone/Zope core\n-        \'lxml\',\n-        \'plone.app.content\',\n-        \'plone.app.layout\',\n-        \'plone.app.uuid\',\n-        \'plone.app.z3cform>=1.1.0\',\n-        \'plone.autoform>=1.1\',\n-        \'plone.contentrules\',\n-        \'plone.portlets\',\n-        \'plone.schema>=1.1.0\',\n-        \'plone.supermodel>=1.1\',\n-        \'plone.z3cform>=0.6.0\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'setuptools\',\n-        \'Zope2\',\n-        \'zope.browserpage\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'zope.deprecation\',\n-        \'zope.schema\',\n-        \'zope.publisher\',\n-        \'z3c.form>=3.0.0\',\n+        "lxml",\n+        "plone.app.content",\n+        "plone.app.layout",\n+        "plone.app.uuid",\n+        "plone.app.z3cform>=1.1.0",\n+        "plone.autoform>=1.1",\n+        "plone.contentrules",\n+        "plone.portlets",\n+        "plone.schema>=1.1.0",\n+        "plone.supermodel>=1.1",\n+        "plone.z3cform>=0.6.0",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "setuptools",\n+        "Zope2",\n+        "zope.browserpage",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.deprecation",\n+        "zope.schema",\n+        "zope.publisher",\n+        "z3c.form>=3.0.0",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.robotframework\',\n-            \'plone.app.testing\',\n+        "test": [\n+            "plone.app.robotframework",\n+            "plone.app.testing",\n         ],\n-        \'grok\': [\n-            \'five.grok\',\n-            \'plone.directives.dexterity\',\n-            \'plone.directives.form>=1.1\',\n+        "grok": [\n+            "five.grok",\n+            "plone.directives.dexterity",\n+            "plone.directives.form>=1.1",\n+        ],\n+        "relations": [\n+            "plone.app.relationfield",\n+            "plone.app.intid",\n+            "z3c.relationfield",\n         ],\n-        \'relations\': [\n-            \'plone.app.relationfield\',\n-            \'plone.app.intid\',\n-            \'z3c.relationfield\',\n-        ]\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T11:02:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/2d579cb3b8a174159e9980eb2f13eea03ee7005f

find  -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M docs/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/__init__.py
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/discussion.py
M plone/app/dexterity/behaviors/exclfromnav.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/id.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/behaviors/nextprevious.py
M plone/app/dexterity/behaviors/related.py
M plone/app/dexterity/behaviors/tests/test_contrains.py
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/__init__.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/fields.py
M plone/app/dexterity/browser/folder_listing.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/overview.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/browser/utils.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/serialize.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/__init__.py
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M plone/app/dexterity/tests/test_nextprevious.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_robot.py
M plone/app/dexterity/tests/test_upgrades.py
M plone/app/dexterity/upgrades/to1.py
M plone/app/dexterity/upgrades/to2.py
M plone/app/dexterity/upgrades/to2000.py
M plone/app/dexterity/upgrades/to2001.py
M plone/app/dexterity/upgrades/to2002.py
M plone/app/dexterity/upgrades/to2003.py
M plone/app/dexterity/upgrades/to2004.py
M plone/app/dexterity/upgrades/to2005.py
M setup.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 0eb193b..60c63f5 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # Plone Developer Manual documentation build configuration file, created by\n # sphinx-quickstart on Sun Aug 16 13:38:00 2009.\n@@ -43,8 +42,8 @@\n master_doc = "index"\n \n # General information about the project.\n-project = u"Dexterity Developer Manual"\n-copyright = u"Plone community and other individual contributors"\n+project = "Dexterity Developer Manual"\n+copyright = "Plone community and other individual contributors"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -185,8 +184,8 @@\n     (\n         "index",\n         "DexterityDeveloperManual.tex",\n-        u"Dexterity Developer Manual",\n-        u"Plone community and individual contributors",\n+        "Dexterity Developer Manual",\n+        "Plone community and individual contributors",\n         "manual",\n     ),\n ]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py\nindex e6713e8..38bb5a7 100644\n--- a/plone/app/dexterity/__init__.py\n+++ b/plone/app/dexterity/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory as ZMessageFactory\n \n import warnings\ndiff --git a/plone/app/dexterity/behaviors/__init__.py b/plone/app/dexterity/behaviors/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/dexterity/behaviors/__init__.py\n+++ b/plone/app/dexterity/behaviors/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 0558495..ce00107 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from Products.CMFPlone.utils import base_hasattr\n@@ -10,7 +9,7 @@\n ENABLED = 1  # allow types from locallyAllowedTypes only\n \n \n-class ConstrainTypesBehavior(object):\n+class ConstrainTypesBehavior:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/dexterity/behaviors/discussion.py b/plone/app/dexterity/behaviors/discussion.py\nindex 522db29..041bd97 100644\n--- a/plone/app/dexterity/behaviors/discussion.py\n+++ b/plone/app/dexterity/behaviors/discussion.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -13,8 +12,8 @@\n \n options = SimpleVocabulary(\n     [\n-        SimpleTerm(value=True, title=_(u"Yes")),\n-        SimpleTerm(value=False, title=_(u"No")),\n+        SimpleTerm(value=True, title=_("Yes")),\n+        SimpleTerm(value=False, title=_("No")),\n     ]\n )\n \n@@ -24,13 +23,13 @@ class IAllowDiscussion(model.Schema):\n \n     model.fieldset(\n         "settings",\n-        label=_(u"Settings"),\n+        label=_("Settings"),\n         fields=["allow_discussion"],\n     )\n \n     allow_discussion = schema.Choice(\n-        title=_(u"Allow discussion"),\n-        description=_(u"Allow discussion for this content object."),\n+        title=_("Allow discussion"),\n+        description=_("Allow discussion for this content object."),\n         vocabulary=options,\n         required=False,\n         default=None,\ndiff --git a/plone/app/dexterity/behaviors/exclfromnav.py b/plone/app/dexterity/behaviors/exclfromnav.py\nindex 4e331fd..6fe6cec 100644\n--- a/plone/app/dexterity/behaviors/exclfromnav.py\n+++ b/plone/app/dexterity/behaviors/exclfromnav.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -38,14 +37,13 @@ def default_exclude(context):\n class IExcludeFromNavigation(model.Schema):\n     """Behavior interface to exclude items from navigation."""\n \n-    model.fieldset("settings", label=_(u"Settings"), fields=["exclude_from_nav"])\n+    model.fieldset("settings", label=_("Settings"), fields=["exclude_from_nav"])\n \n     exclude_from_nav = schema.Bool(\n-        title=_(u"label_exclude_from_nav", default=u"Exclude from navigation"),\n+        title=_("label_exclude_from_nav", default="Exclude from navigation"),\n         description=_(\n-            u"help_exclude_from_nav",\n-            default=u"If selected, this item will not appear in the "\n-            u"navigation tree",\n+            "help_exclude_from_nav",\n+            default="If selected, this item will not appear in the " "navigation tree",\n         ),\n         defaultFactory=default_exclude,\n         required=False,\ndiff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py\nindex 6e53cac..5efee85 100644\n--- a/plone/app/dexterity/behaviors/filename.py\n+++ b/plone/app/dexterity/behaviors/filename.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.interfaces import INameFromTitle\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFPlone.utils import safe_hasattr\n@@ -15,15 +14,15 @@ class INameFromFileName(Interface):\n \n @implementer(INameFromTitle)\n @adapter(INameFromFileName)\n-class NameFromFileName(object):\n+class NameFromFileName:\n     def __new__(cls, context):\n         info = IPrimaryFieldInfo(context, None)\n         if info is None:\n             return None\n         filename = getattr(info.value, "filename", None)\n-        if not isinstance(filename, six.string_types) or not filename:\n+        if not isinstance(filename, str) or not filename:\n             return None\n-        instance = super(NameFromFileName, cls).__new__(cls)\n+        instance = super().__new__(cls)\n         instance.title = filename\n         if safe_hasattr(context, "title") and not context.title:\n             context.title = filename\ndiff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py\nindex d3d865a..22ded84 100644\n--- a/plone/app/dexterity/behaviors/id.py\n+++ b/plone/app/dexterity/behaviors/id.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -19,19 +18,19 @@ class IShortName(model.Schema):\n \n     model.fieldset(\n         "settings",\n-        label=_(u"Settings"),\n+        label=_("Settings"),\n         fields=["id"],\n     )\n \n     id = schema.ASCIILine(\n-        title=_(u"Short name"),\n-        description=_(u"This name will be displayed in the URL."),\n+        title=_("Short name"),\n+        description=_("This name will be displayed in the URL."),\n         required=False,\n     )\n     directives.write_permission(id="cmf.AddPortalContent")\n \n \n-class ShortName(object):\n+class ShortName:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py\nindex 3f08312..8eabe5b 100644\n--- a/plone/app/dexterity/behaviors/metadata.py\n+++ b/plone/app/dexterity/behaviors/metadata.py\n@@ -62,15 +62,15 @@ def default_language(context):\n class IBasic(model.Schema):\n \n     # default fieldset\n-    title = schema.TextLine(title=_(u"label_title", default=u"Title"), required=True)\n+    title = schema.TextLine(title=_("label_title", default="Title"), required=True)\n \n     description = schema.Text(\n-        title=_(u"label_description", default=u"Summary"),\n+        title=_("label_description", default="Summary"),\n         description=_(\n-            u"help_description", default=u"Used in item listings and search results."\n+            "help_description", default="Used in item listings and search results."\n         ),\n         required=False,\n-        missing_value=u"",\n+        missing_value="",\n     )\n \n     directives.order_before(description="*")\n@@ -87,15 +87,15 @@ class ICategorization(model.Schema):\n     # categorization fieldset\n     model.fieldset(\n         "categorization",\n-        label=_(u"label_schema_categorization", default=u"Categorization"),\n+        label=_("label_schema_categorization", default="Categorization"),\n         fields=["subjects", "language"],\n     )\n \n     subjects = schema.Tuple(\n-        title=_(u"label_tags", default=u"Tags"),\n+        title=_("label_tags", default="Tags"),\n         description=_(\n-            u"help_tags",\n-            default=u"Tags are commonly used for ad-hoc organization of " + u"content.",\n+            "help_tags",\n+            default="Tags are commonly used for ad-hoc organization of " + "content.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -106,7 +106,7 @@ class ICategorization(model.Schema):\n     )\n \n     language = schema.Choice(\n-        title=_(u"label_language", default=u"Language"),\n+        title=_("label_language", default="Language"),\n         vocabulary="plone.app.vocabularies.SupportedContentLanguages",\n         required=False,\n         missing_value="",\n@@ -121,7 +121,7 @@ class ICategorization(model.Schema):\n \n class EffectiveAfterExpires(Invalid):\n     __doc__ = _(\n-        "error_invalid_publication", default=u"Invalid effective or expires date"\n+        "error_invalid_publication", default="Invalid effective or expires date"\n     )\n \n \n@@ -130,27 +130,27 @@ class IPublication(model.Schema):\n     # dates fieldset\n     model.fieldset(\n         "dates",\n-        label=_(u"label_schema_dates", default=u"Dates"),\n+        label=_("label_schema_dates", default="Dates"),\n         fields=["effective", "expires"],\n     )\n \n     effective = schema.Datetime(\n-        title=_(u"label_effective_date", u"Publishing Date"),\n+        title=_("label_effective_date", "Publishing Date"),\n         description=_(\n-            u"help_effective_date",\n-            default=u"If this date is in the future, the content will "\n-            u"not show up in listings and searches until this date.",\n+            "help_effective_date",\n+            default="If this date is in the future, the content will "\n+            "not show up in listings and searches until this date.",\n         ),\n         required=False,\n     )\n     directives.widget("effective", DatetimeFieldWidget)\n \n     expires = schema.Datetime(\n-        title=_(u"label_expiration_date", u"Expiration Date"),\n+        title=_("label_expiration_date", "Expiration Date"),\n         description=_(\n-            u"help_expiration_date",\n-            default=u"When this date is reached, the content will no "\n-            u"longer be visible in listings and searches.",\n+            "help_expiration_date",\n+            default="When this date is reached, the content will no "\n+            "longer be visible in listings and searches.",\n         ),\n         required=False,\n     )\n@@ -162,7 +162,7 @@ def validate_start_end(data):\n             raise EffectiveAfterExpires(\n                 _(\n                     "error_expiration_must_be_after_effective_date",\n-                    default=u"Expiration date must be after publishing date.",\n+                    default="Expiration date must be after publishing date.",\n                 )\n             )\n \n@@ -177,17 +177,17 @@ class IOwnership(model.Schema):\n     # ownership fieldset\n     model.fieldset(\n         "ownership",\n-        label=_("label_schema_ownership", default=u"Ownership"),\n+        label=_("label_schema_ownership", default="Ownership"),\n         fields=["creators", "contributors", "rights"],\n     )\n \n     creators = schema.Tuple(\n-        title=_(u"label_creators", u"Creators"),\n+        title=_("label_creators", "Creators"),\n         description=_(\n-            u"help_creators",\n-            default=u"Persons responsible for creating the content of "\n-            u"this item. Please enter a list of user names, one "\n-            u"per line. The principal creator should come first.",\n+            "help_creators",\n+            default="Persons responsible for creating the content of "\n+            "this item. Please enter a list of user names, one "\n+            "per line. The principal creator should come first.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -198,12 +198,12 @@ class IOwnership(model.Schema):\n     )\n \n     contributors = schema.Tuple(\n-        title=_(u"contributors", u"Contributors"),\n+        title=_("contributors", "Contributors"),\n         description=_(\n-            u"help_contributors",\n-            default=u"The names of people that have contributed "\n-            u"to this item. Each contributor should "\n-            u"be on a separate line.",\n+            "help_contributors",\n+            default="The names of people that have contributed "\n+            "to this item. Each contributor should "\n+            "be on a separate line.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -214,11 +214,10 @@ class IOwnership(model.Schema):\n     )\n \n     rights = schema.Text(\n-        title=_(u"label_copyrights", default=u"Rights"),\n+        title=_("label_copyrights", default="Rights"),\n         description=_(\n-            u"help_copyrights",\n-            default=u"Copyright statement or other rights information on this "\n-            u"item.",\n+            "help_copyrights",\n+            default="Copyright statement or other rights information on this " "item.",\n         ),\n         required=False,\n     )\n@@ -248,7 +247,7 @@ class IDublinCore(IOwnership, IPublication, ICategorization, IBasic):\n \n \n @adapter(IDexterityContent)\n-class MetadataBase(object):\n+class MetadataBase:\n     """This adapter uses DCFieldProperty to store metadata directly on an\n     object using the standard CMF DefaultDublinCoreImpl getters and\n     setters.\n@@ -261,7 +260,7 @@ def __init__(self, context):\n _marker = object()\n \n \n-class DCFieldProperty(object):\n+class DCFieldProperty:\n     """Computed attributes based on schema fields.\n     Based on zope.schema.fieldproperty.FieldProperty.\n     """\n@@ -373,7 +372,7 @@ class Ownership(MetadataBase):\n     )\n \n     def __init__(self, *args, **kwargs):\n-        super(Ownership, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n         self.context.addCreator()\n \n \ndiff --git a/plone/app/dexterity/behaviors/nextprevious.py b/plone/app/dexterity/behaviors/nextprevious.py\nindex 17148a8..0304a1d 100644\n--- a/plone/app/dexterity/behaviors/nextprevious.py\n+++ b/plone/app/dexterity/behaviors/nextprevious.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from plone.app.dexterity import _\n@@ -29,14 +28,14 @@ class INextPreviousEnabled(Interface):\n class INextPreviousToggle(model.Schema):\n     """Behavior interface to enable next previous navigation per item."""\n \n-    model.fieldset("settings", label=_(u"Settings"), fields=["nextPreviousEnabled"])\n+    model.fieldset("settings", label=_("Settings"), fields=["nextPreviousEnabled"])\n \n     nextPreviousEnabled = schema.Bool(\n-        title=_(u"label_nextprevious", default=u"Enable next previous navigation"),\n+        title=_("label_nextprevious", default="Enable next previous navigation"),\n         description=_(\n-            u"help_nextprevious",\n-            default=u"This enables next/previous widget on content items "\n-            + u"contained in this folder.",\n+            "help_nextprevious",\n+            default="This enables next/previous widget on content items "\n+            + "contained in this folder.",\n         ),\n         default=False,\n         required=False,\n@@ -62,7 +61,7 @@ def getNextPreviousParentValue(adapter_):\n \n \n # This is taken from plone.app.folder\n-class NextPreviousBase(object):\n+class NextPreviousBase:\n     """adapter for acting as a next/previous provider"""\n \n     def __init__(self, context):\ndiff --git a/plone/app/dexterity/behaviors/related.py b/plone/app/dexterity/behaviors/related.py\nindex 86b8b06..bfbe502 100644\n--- a/plone/app/dexterity/behaviors/related.py\n+++ b/plone/app/dexterity/behaviors/related.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """BBB import for \'Related Items\' behavior that was moved to\n plone.app.relationfield in Dexterity 2.0.\n """\n@@ -13,5 +12,5 @@\n \n def related_items_behavior_BBB():\n     return queryUtility(\n-        IBehavior, name=u"plone.app.relationfield.behavior.IRelatedItems"\n+        IBehavior, name="plone.app.relationfield.behavior.IRelatedItems"\n     )\ndiff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nindex 8b882c6..376e7d8 100644\n--- a/plone/app/dexterity/behaviors/tests/test_contrains.py\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.behaviors.constrains import ACQUIRE\n from plone.app.dexterity.behaviors.constrains import ConstrainTypesBehavior\n from plone.app.dexterity.behaviors.constrains import DISABLED\ndiff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py\nindex fc966cd..b003337 100644\n--- a/plone/app/dexterity/behaviors/tests/test_id.py\n+++ b/plone/app/dexterity/behaviors/tests/test_id.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME\n@@ -24,7 +23,7 @@ def setUp(self):\n         self.browser = Browser(self.layer["app"])\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py\nindex 0d987a3..798b777 100644\n--- a/plone/app/dexterity/behaviors/tests/test_metadata.py\n+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n from plone.app.testing import login\n@@ -15,7 +14,7 @@\n \n class TestBasic(unittest.TestCase):\n     def _makeOne(self):\n-        class Dummy(object):\n+        class Dummy:\n             pass\n \n         dummy = Dummy()\n@@ -25,8 +24,8 @@ class Dummy(object):\n \n     def test_title_setter(self):\n         b = self._makeOne()\n-        b.title = u"foo"\n-        self.assertEqual(u"foo", b.context.title)\n+        b.title = "foo"\n+        self.assertEqual("foo", b.context.title)\n \n     @unittest.skipUnless(six.PY2, "Only for py2")\n     def test_title_setter_rejects_bytestrings(self):\n@@ -36,13 +35,13 @@ def test_title_setter_rejects_bytestrings(self):\n \n     def test_title_getter(self):\n         b = self._makeOne()\n-        b.context.title = u"foo"\n-        self.assertEqual(u"foo", b.title)\n+        b.context.title = "foo"\n+        self.assertEqual("foo", b.title)\n \n     def test_description_setter(self):\n         b = self._makeOne()\n-        b.description = u"foo"\n-        self.assertEqual(u"foo", b.context.description)\n+        b.description = "foo"\n+        self.assertEqual("foo", b.context.description)\n \n     @unittest.skipUnless(six.PY2, "Only for py2")\n     def test_description_setter_rejects_bytestrings(self):\n@@ -52,18 +51,18 @@ def test_description_setter_rejects_bytestrings(self):\n \n     def test_description_getter(self):\n         b = self._makeOne()\n-        b.context.description = u"foo"\n-        self.assertEqual(u"foo", b.description)\n+        b.context.description = "foo"\n+        self.assertEqual("foo", b.description)\n \n     def test_description_remains_newlines(self):\n         b = self._makeOne()\n-        b.description = u"foo\\r\\nbar\\nbaz\\r"\n-        self.assertEqual(u"foo\\r\\nbar\\nbaz\\r", b.context.description)\n+        b.description = "foo\\r\\nbar\\nbaz\\r"\n+        self.assertEqual("foo\\r\\nbar\\nbaz\\r", b.context.description)\n \n \n class TestCategorization(unittest.TestCase):\n     def _makeOne(self):\n-        class Dummy(object):\n+        class Dummy:\n             pass\n \n         dummy = Dummy()\n@@ -73,13 +72,13 @@ class Dummy(object):\n \n     def test_subjects_setter(self):\n         b = self._makeOne()\n-        b.subjects = (u"f\xc3\xb8\xc3\xb8",)\n-        self.assertEqual((u"f\xc3\xb8\xc3\xb8",), b.context.subject)\n+        b.subjects = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.context.subject)\n \n     def test_subjects_getter(self):\n         b = self._makeOne()\n-        b.context.subject = (u"f\xc3\xb8\xc3\xb8",)\n-        self.assertEqual((u"f\xc3\xb8\xc3\xb8",), b.subjects)\n+        b.context.subject = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.subjects)\n \n \n class CategorizationIntegrationTests(unittest.TestCase):\n@@ -119,7 +118,7 @@ def test_categorization_language(self):\n \n class TestDCFieldProperty(unittest.TestCase):\n     def _makeOne(self):\n-        class Dummy(object):\n+        class Dummy:\n             def addCreator(self, creator=None):\n                 self.creators = (creator or "dummy_user",)\n \n@@ -142,20 +141,20 @@ def listCreators(self):\n \n     def test_sequence_text_setter(self):\n         b = self._makeOne()\n-        b.creators = (u"f\xc3\xb8\xc3\xb8",)\n+        b.creators = ("f\xc3\xb8\xc3\xb8",)\n         self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.context.creators)\n \n     def test_sequence_text_getter(self):\n         b = self._makeOne()\n         b.context.creators = ("f\xc3\xb8\xc3\xb8",)\n-        self.assertEqual((u"f\xc3\xb8\xc3\xb8",), b.creators)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.creators)\n \n     def test_text_setter(self):\n         b = self._makeOne()\n-        b.rights = u"f\xc3\xb8\xc3\xb8"\n+        b.rights = "f\xc3\xb8\xc3\xb8"\n         self.assertEqual("f\xc3\xb8\xc3\xb8", b.context.rights)\n \n     def test_text_getter(self):\n         b = self._makeOne()\n         b.context.rights = "f\xc3\xb8\xc3\xb8"\n-        self.assertEqual(u"f\xc3\xb8\xc3\xb8", b.rights)\n+        self.assertEqual("f\xc3\xb8\xc3\xb8", b.rights)\ndiff --git a/plone/app/dexterity/browser/__init__.py b/plone/app/dexterity/browser/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/dexterity/browser/__init__.py\n+++ b/plone/app/dexterity/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py\nindex 04e2286..8899341 100644\n--- a/plone/app/dexterity/browser/add_type.py\n+++ b/plone/app/dexterity/browser/add_type.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.interfaces import ITypeSettings\n from plone.dexterity.fti import DexterityFTI\n@@ -19,16 +18,16 @@\n \n     def safe_nativestring(value, encoding="utf-8"):\n         """Convert a value to str in py2 and to text in py3"""\n-        if six.PY2 and isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, str):\n             value = safe_encode(value, encoding)\n-        if not six.PY2 and isinstance(value, six.binary_type):\n+        if not six.PY2 and isinstance(value, bytes):\n             value = safe_unicode(value, encoding)\n         return value\n \n \n class TypeAddForm(form.AddForm):\n \n-    label = _(u"Add Content Type")\n+    label = _("Add Content Type")\n     fields = field.Fields(ITypeSettings).select("title", "id", "description")\n     id = "add-type-form"\n     fti_id = None\n@@ -67,12 +66,12 @@ def add(self, fti):\n         ttool = getToolByName(self.context, "portal_types")\n         ttool._setObject(fti.id, fti)\n         self.fti_id = fti.id\n-        self.status = _(u"Type added successfully.")\n+        self.status = _("Type added successfully.")\n \n     def nextURL(self):\n         url = self.context.absolute_url()\n         if self.fti_id is not None:\n-            url += "/{0}/@@fields".format(self.fti_id)\n+            url += f"/{self.fti_id}/@@fields"\n         return url\n \n \ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 57289af..747d220 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from collections import Counter\n from copy import deepcopy\n from operator import attrgetter\n@@ -30,9 +29,9 @@\n \n     def safe_nativestring(value, encoding="utf-8"):\n         """Convert a value to str in py2 and to text in py3"""\n-        if six.PY2 and isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, str):\n             value = safe_encode(value, encoding)\n-        if not six.PY2 and isinstance(value, six.binary_type):\n+        if not six.PY2 and isinstance(value, bytes):\n             value = safe_unicode(value, encoding)\n         return value\n \n@@ -49,7 +48,7 @@ def behaviorConfigurationModified(object, event):\n \n \n @adapter(ITypeSchemaContext)\n-class BehaviorConfigurationAdapter(object):\n+class BehaviorConfigurationAdapter:\n     def __init__(self, context):\n         self.__dict__["context"] = context\n         self.__dict__["fti"] = self.context.fti\n@@ -104,12 +103,12 @@ def __iter__(self):\n class TypeBehaviorsForm(form.EditForm):\n \n     template = ViewPageTemplateFile("behaviors.pt")\n-    label = _(u"Behaviors")\n-    description = _(u"Select the behaviors to enable for this content type.")\n-    successMessage = _(u"Behaviors successfully updated.")\n-    noChangesMessage = _(u"No changes were made.")\n+    label = _("Behaviors")\n+    description = _("Select the behaviors to enable for this content type.")\n+    successMessage = _("Behaviors successfully updated.")\n+    noChangesMessage = _("No changes were made.")\n     buttons = deepcopy(form.EditForm.buttons)\n-    buttons["apply"].title = _(u"Save")\n+    buttons["apply"].title = _("Save")\n \n     def getContent(self):\n         return BehaviorConfigurationAdapter(self.context)\n@@ -142,4 +141,4 @@ def fields(self):\n \n class TypeBehaviorsPage(TypeFormLayout):\n     form = TypeBehaviorsForm\n-    label = _(u"Behaviors")\n+    label = _("Behaviors")\ndiff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py\nindex a6c246d..e3e0bd4 100644\n--- a/plone/app/dexterity/browser/clone_type.py\n+++ b/plone/app/dexterity/browser/clone_type.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.interfaces import ITypeSettings\n from plone.dexterity.fti import DexterityFTI\n@@ -10,7 +9,7 @@\n \n class TypeCloneForm(form.AddForm):\n \n-    label = _(u"Clone Content Type")\n+    label = _("Clone Content Type")\n     fields = field.Fields(ITypeSettings).select("title", "id")\n     id = "clone-type-form"\n \n@@ -31,7 +30,7 @@ def create(self, data):\n     def add(self, fti):\n         ttool = getToolByName(self.context, "portal_types")\n         ttool._setObject(fti.id, fti)\n-        self.status = _(u"Type cloned successfully.")\n+        self.status = _("Type cloned successfully.")\n \n     def nextURL(self):\n         return self.context.aq_parent.absolute_url()\ndiff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex 34682c6..58cac29 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # @@types-export view for dexterity types configlet. View support for the\n # "Export" button. This is done by repurposing the GS typeinfo export and\n # removing unselected type information from its output.\n@@ -24,7 +23,7 @@ def __init__(self, tool, typelist, encoding=None, base_name="setup_tool"):\n         self.typelist = typelist\n         self.filenames = ["types.xml"]\n         for tn in typelist:\n-            self.filenames.append("types/{0}.xml".format(tn))\n+            self.filenames.append(f"types/{tn}.xml")\n \n         timestamp = time.gmtime()\n         self._archive_filename = (\n@@ -54,7 +53,7 @@ def writeDataFile(self, filename, text, content_type, subdir=None):\n             root.append(etree.Comment(" -*- extra stuff goes here -*- "))\n             # minor prettifying\n             root_str = safe_unicode(etree.tostring(root))\n-            text = \'<?xml version="1.0"?>\\n{0}\'.format(root_str)\n+            text = f\'<?xml version="1.0"?>\\n{root_str}\'\n             text = text.replace("<!--", " <!--")\n             text = text.replace("-->", "-->\\n")\n \n@@ -70,15 +69,13 @@ def __call__(self):\n \n         items = self.request.selected.split(",")\n         context = SelectiveZipExportContext(ps, items, base_name="dexterity_export")\n-        handler = ps.getExportStep(u"typeinfo")\n+        handler = ps.getExportStep("typeinfo")\n         handler(context)\n \n         filename = context.getArchiveFilename()\n \n         RESPONSE.setHeader("Content-type", "application/zip")\n-        RESPONSE.setHeader(\n-            "Content-disposition", "attachment; filename={0}".format(filename)\n-        )\n+        RESPONSE.setHeader("Content-disposition", f"attachment; filename={filename}")\n \n         return context.getArchive()\n \n@@ -98,12 +95,12 @@ def __call__(self):\n             # return a single XML file\n \n             item = items[0]\n-            filename = "{0}.xml".format(item)\n+            filename = f"{item}.xml"\n             text = serializeModel(pt[item].lookupModel())\n \n             RESPONSE.setHeader("Content-type", "application/xml")\n             RESPONSE.setHeader(\n-                "Content-disposition", "attachment; filename={0}".format(filename)\n+                "Content-disposition", f"attachment; filename={filename}"\n             )\n \n             return text\n@@ -120,7 +117,7 @@ def __call__(self):\n             archive = ZipFile(archive_stream, "w")\n \n             for item in items:\n-                filename = "models/{0}.xml".format(item)\n+                filename = f"models/{item}.xml"\n                 text = serializeModel(pt[item].lookupModel())\n                 archive.writestr(filename, text)\n \n@@ -129,7 +126,7 @@ def __call__(self):\n             RESPONSE.setHeader("Content-type", "application/zip")\n             RESPONSE.setHeader(\n                 "Content-disposition",\n-                "attachment; filename={0}".format(archive_filename),\n+                f"attachment; filename={archive_filename}",\n             )\n \n             return archive_stream.getvalue()\ndiff --git a/plone/app/dexterity/browser/fields.py b/plone/app/dexterity/browser/fields.py\nindex 853cfbd..ad0192f 100644\n--- a/plone/app/dexterity/browser/fields.py\n+++ b/plone/app/dexterity/browser/fields.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.layout import TypeFormLayout\n from plone.schemaeditor.browser.schema.listing import ReadOnlySchemaListing\n@@ -19,14 +18,14 @@ def handleModelEdit(self, action):\n \n \n if pkg_resources.get_distribution("plone.resourceeditor"):\n-    but = button.Button("modeleditor", title=u"Edit XML Field Model")\n+    but = button.Button("modeleditor", title="Edit XML Field Model")\n     EnhancedSchemaListing.buttons += button.Buttons(but)\n     handler = button.Handler(but, EnhancedSchemaListing.handleModelEdit)\n     EnhancedSchemaListing.handlers.addHandler(but, handler)\n \n \n class TypeFieldsPage(TypeFormLayout):\n-    label = _(u"Fields")\n+    label = _("Fields")\n \n     @property\n     def form(self):\ndiff --git a/plone/app/dexterity/browser/folder_listing.py b/plone/app/dexterity/browser/folder_listing.py\nindex 1f1cb4a..00e30e7 100644\n--- a/plone/app/dexterity/browser/folder_listing.py\n+++ b/plone/app/dexterity/browser/folder_listing.py\n@@ -10,13 +10,13 @@\n \n class FolderView(BrowserView):\n     def __init__(self, context, request):\n-        super(FolderView, self).__init__(context, request)\n+        super().__init__(context, request)\n \n-        self.plone_view = getMultiAdapter((context, request), name=u"plone")\n+        self.plone_view = getMultiAdapter((context, request), name="plone")\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=u"plone_portal_state"\n+            (context, request), name="plone_portal_state"\n         )\n-        self.pas_member = getMultiAdapter((context, request), name=u"pas_member")\n+        self.pas_member = getMultiAdapter((context, request), name="pas_member")\n \n         limit_display = getattr(self.request, "limit_display", None)\n         limit_display = int(limit_display) if limit_display is not None else 20\n@@ -89,5 +89,5 @@ def show_about(self):\n     def no_items_message(self):\n         return _(\n             "description_no_items_in_folder",\n-            default=u"There are currently no items in this folder.",\n+            default="There are currently no items in this folder.",\n         )\ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 8c5e87d..534b368 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Support for importing Dexterity types from GS zip file.\n """\n # XXX: need to make exceptions more specific, shorten messages\n@@ -29,7 +28,7 @@ class ITypeProfileImport(Interface):\n     """Fields for a zip import form"""\n \n     profile_file = NamedFile(\n-        title=_(u"Type profiles archive file"),\n+        title=_("Type profiles archive file"),\n         required=True,\n     )\n \n@@ -43,7 +42,7 @@ def isGoodImportFile(data):\n             archive = ZipFile(BytesIO(data.profile_file.data), "r")\n         except BadZipfile:\n             raise Invalid(\n-                _(u"Error: The file submitted must be a zip archive."),\n+                _("Error: The file submitted must be a zip archive."),\n             )\n         name_list = archive.namelist()\n         for fname in name_list:\n@@ -55,8 +54,8 @@ def isGoodImportFile(data):\n             ):\n                 raise Invalid(\n                     _(\n-                        u"Error: The file submitted must be a zip archive "\n-                        u"containing only type profile information."\n+                        "Error: The file submitted must be a zip archive "\n+                        "containing only type profile information."\n                     )\n                 )\n \n@@ -65,7 +64,7 @@ def isGoodImportFile(data):\n             source = f.read()\n             root = etree.fromstring(source)\n             if root.tag != "object":\n-                raise Invalid(_(u"types.xml in archive is invalid."))\n+                raise Invalid(_("types.xml in archive is invalid."))\n \n         # check against existing types; don\'t allow overwrites\n         site = getSite()\n@@ -79,9 +78,9 @@ def isGoodImportFile(data):\n                     )\n                 if attribs["name"] in existing_types:\n                     msg = (\n-                        u"One or more types in the import archive is an "\n-                        u\'existing type. Delete "%s" if you \'\n-                        u"really wish to replace it."\n+                        "One or more types in the import archive is an "\n+                        \'existing type. Delete "%s" if you \'\n+                        "really wish to replace it."\n                     )\n                     raise Invalid(\n                         _(msg, attribs["name"]),\n@@ -89,7 +88,7 @@ def isGoodImportFile(data):\n \n \n @implementer(ITypeProfileImport)\n-class TypeProfileImport(object):\n+class TypeProfileImport:\n     form_fields = field.Fields(ITypeProfileImport)\n     profile_file = zope.schema.fieldproperty.FieldProperty(\n         ITypeProfileImport["profile_file"]\n@@ -101,13 +100,13 @@ def __init__(self, profile_file):\n \n class TypeProfileImportForm(form.AddForm):\n \n-    label = _(u"Import Content Types")\n+    label = _("Import Content Types")\n     description = _(\n-        u"You may import types by uploading a zip archive containing type "\n-        u"profiles. The import archive should contain a types.xml file and a "\n-        u"types directory containing one or more Dexterity type information "\n-        u"files. For a sample, create a content type and export it from the "\n-        u"Dexterity Content Types page."\n+        "You may import types by uploading a zip archive containing type "\n+        "profiles. The import archive should contain a types.xml file and a "\n+        "types directory containing one or more Dexterity type information "\n+        "files. For a sample, create a content type and export it from the "\n+        "Dexterity Content Types page."\n     )\n     fields = field.Fields(ITypeProfileImport)\n     id = "import-types-form"\n@@ -123,9 +122,9 @@ def add(self, profile_import):\n         )\n         # run the profile\n         setup_tool = getToolByName(self.context, "portal_setup")\n-        handler = setup_tool.getImportStep(u"typeinfo")\n+        handler = setup_tool.getImportStep("typeinfo")\n         handler(import_context)\n-        self.status = _(u"Imported successfully.")\n+        self.status = _("Imported successfully.")\n \n     def nextURL(self):\n         url = self.context.absolute_url()\n@@ -140,7 +139,7 @@ class ZipFileImportContext(BaseContext):\n     """GS Import context for a ZipFile"""\n \n     def __init__(self, tool, archive_bits, encoding=None, should_purge=False):\n-        super(ZipFileImportContext, self).__init__(tool, encoding)\n+        super().__init__(tool, encoding)\n         self._archive = ZipFile(archive_bits, "r")\n         self._should_purge = bool(should_purge)\n         self.name_list = self._archive.namelist()\ndiff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py\nindex ec53887..4854d9f 100644\n--- a/plone/app/dexterity/browser/layout.py\n+++ b/plone/app/dexterity/browser/layout.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.z3cform.layout import FormWrapper\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex ea3fcfb..c6a9fcb 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -36,7 +36,7 @@ def model_source(self):\n         return serializeModel(model)\n \n     def authorized(self, context, request):\n-        authenticator = queryMultiAdapter((context, request), name=u"authenticator")\n+        authenticator = queryMultiAdapter((context, request), name="authenticator")\n         return authenticator and authenticator.verify()\n \n     def __call__(self):\n@@ -61,7 +61,7 @@ def __call__(self):\n                 root = etree.fromstring(source, parser=parser)\n             except etree.XMLSyntaxError as e:\n                 IStatusMessage(self.request).addStatusMessage(\n-                    "XMLSyntaxError: {0}".format(html.escape(safe_text(e.args[0]))),\n+                    f"XMLSyntaxError: {html.escape(safe_text(e.args[0]))}",\n                     "error",\n                 )\n                 return super().__call__()\n@@ -69,7 +69,7 @@ def __call__(self):\n             # a little more sanity checking, look at first two element levels\n             if root.tag != NAMESPACE + "model":\n                 IStatusMessage(self.request).addStatusMessage(\n-                    _(u"Error: root tag must be \'model\'"),\n+                    _("Error: root tag must be \'model\'"),\n                     "error",\n                 )\n                 return super().__call__()\n@@ -77,7 +77,7 @@ def __call__(self):\n             for element in root.getchildren():\n                 if element.tag != NAMESPACE + "schema":\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(u"Error: all model elements must be \'schema\'"),\n+                        _("Error: all model elements must be \'schema\'"),\n                         "error",\n                     )\n                     return super().__call__()\n@@ -85,11 +85,11 @@ def __call__(self):\n             # can supermodel parse it?\n             # This is mainly good for catching bad dotted names.\n             try:\n-                loadString(source, policy=u"dexterity")\n+                loadString(source, policy="dexterity")\n             except SupermodelParseError as e:\n                 message = e.args[0].replace(\'\\n  File "<unknown>"\', "")\n                 IStatusMessage(self.request).addStatusMessage(\n-                    u"SuperModelParseError: {0}".format(html.escape(message)),\n+                    f"SuperModelParseError: {html.escape(message)}",\n                     "error",\n                 )\n                 return super().__call__()\ndiff --git a/plone/app/dexterity/browser/overview.py b/plone/app/dexterity/browser/overview.py\nindex 3194714..ec91e6d 100644\n--- a/plone/app/dexterity/browser/overview.py\n+++ b/plone/app/dexterity/browser/overview.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.layout import TypeFormLayout\n from plone.app.dexterity.interfaces import ITypeSettings\n@@ -32,4 +31,4 @@ def getContent(self):\n \n class TypeOverviewPage(TypeFormLayout):\n     form = TypeOverviewForm\n-    label = _(u"Overview")\n+    label = _("Overview")\ndiff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py\nindex a26e3b7..140a793 100644\n--- a/plone/app/dexterity/browser/types.py\n+++ b/plone/app/dexterity/browser/types.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.utils import UTF8Property\n@@ -31,24 +30,24 @@\n \n \n ALLOWED_FIELDS = [\n-    u"plone.app.textfield.RichText",\n-    u"plone.namedfile.field.NamedBlobImage",\n-    u"plone.namedfile.field.NamedBlobFile",\n-    u"plone.schema.email.Email",\n-    u"z3c.relationfield.schema.RelationChoice",\n-    u"z3c.relationfield.schema.RelationList",\n-    u"zope.schema._bootstrapfields.Bool",\n-    u"zope.schema._bootstrapfields.Int",\n-    u"plone.schema.jsonfield.JSONField",\n-    u"zope.schema._bootstrapfields.Password",\n-    u"zope.schema._bootstrapfields.Text",\n-    u"zope.schema._bootstrapfields.TextLine",\n-    u"zope.schema._field.Choice",\n-    u"zope.schema._field.Date",\n-    u"zope.schema._field.Datetime",\n-    u"zope.schema._field.Float",\n-    u"zope.schema._field.Set",\n-    u"zope.schema._field.URI",\n+    "plone.app.textfield.RichText",\n+    "plone.namedfile.field.NamedBlobImage",\n+    "plone.namedfile.field.NamedBlobFile",\n+    "plone.schema.email.Email",\n+    "z3c.relationfield.schema.RelationChoice",\n+    "z3c.relationfield.schema.RelationList",\n+    "zope.schema._bootstrapfields.Bool",\n+    "zope.schema._bootstrapfields.Int",\n+    "plone.schema.jsonfield.JSONField",\n+    "zope.schema._bootstrapfields.Password",\n+    "zope.schema._bootstrapfields.Text",\n+    "zope.schema._bootstrapfields.TextLine",\n+    "zope.schema._field.Choice",\n+    "zope.schema._field.Date",\n+    "zope.schema._field.Datetime",\n+    "zope.schema._field.Float",\n+    "zope.schema._field.Set",\n+    "zope.schema._field.URI",\n ]\n \n \n@@ -70,40 +69,40 @@ class TypeEditForm(crud.EditForm):\n     buttons = crud.EditForm.buttons.copy().omit("edit")\n     handlers = crud.EditForm.handlers.copy()\n \n-    @button.buttonAndHandler(_(u"Clone"))\n+    @button.buttonAndHandler(_("Clone"))\n     def handleClone(self, action):\n         selected = self.selected_items()\n \n         if len(selected) > 1:\n-            self.status = _(u"Please select a single type to clone.")\n+            self.status = _("Please select a single type to clone.")\n         elif len(selected) == 1:\n             id = selected[0][0]\n-            url = "{0}/{1}/@@clone".format(self.context.context.absolute_url(), id)\n+            url = f"{self.context.context.absolute_url()}/{id}/@@clone"\n             self.request.response.redirect(url)\n         else:\n-            self.status = _(u"Please select a type to clone.")\n+            self.status = _("Please select a type to clone.")\n \n-    @button.buttonAndHandler(_(u"Export Type Profiles"))\n+    @button.buttonAndHandler(_("Export Type Profiles"))\n     def handleExport(self, action):\n         selected = ",".join([items[0] for items in self.selected_items()])\n \n         if len(selected) == 0:\n-            self.status = _(u"Please select types to export.")\n+            self.status = _("Please select types to export.")\n         elif len(selected) > 0:\n-            url = "{0}/@@types-export?selected={1}".format(\n+            url = "{}/@@types-export?selected={}".format(\n                 self.context.context.absolute_url(),\n                 urllib.parse.quote(selected),\n             )\n             self.request.response.redirect(url)\n \n-    @button.buttonAndHandler(_(u"Export Schema Models"))\n+    @button.buttonAndHandler(_("Export Schema Models"))\n     def handleExportModels(self, action):\n         selected = ",".join([items[0] for items in self.selected_items()])\n \n         if len(selected) == 0:\n-            self.status = _(u"Please select types to export.")\n+            self.status = _("Please select types to export.")\n         elif len(selected) > 0:\n-            url = "{0}/@@models-export?selected={1}".format(\n+            url = "{}/@@models-export?selected={}".format(\n                 self.context.context.absolute_url(), urllib.parse.quote(selected)\n             )\n             self.request.response.redirect(url)\n@@ -118,7 +117,7 @@ class TypesEditFormWrapper(FormWrapper):\n \n @adapter(IDexterityFTI)\n @implementer(ITypeSettings)\n-class TypeSettingsAdapter(object):\n+class TypeSettingsAdapter:\n     def __init__(self, context):\n         self.context = context\n \n@@ -172,7 +171,7 @@ def _set_filter_content_types(self, value):\n \n @adapter(IDexterityFTI)\n @implementer(ITypeStats)\n-class TypeStatsAdapter(object):\n+class TypeStatsAdapter:\n     def __init__(self, context):\n         self.context = context\n \n@@ -190,14 +189,14 @@ class TypesListing(crud.CrudForm):\n     def description(self):\n         if self.get_items():\n             return _(\n-                u"The following custom content types are available for your " u"site."\n+                "The following custom content types are available for your " "site."\n             )\n         return _(\n             "help_addcontenttype_button",\n-            default=u\'Content types show up on Plone\\\'s "Add Item" menu and \'\n-            u"allow you to store custom data in your site. Click the "\n-            u\'"Add Content Type" button to begin creating a new \'\n-            u"content type with its own fields.",\n+            default=\'Content types show up on Plone\\\'s "Add Item" menu and \'\n+            "allow you to store custom data in your site. Click the "\n+            \'"Add Content Type" button to begin creating a new \'\n+            "content type with its own fields.",\n         )\n \n     template = ViewPageTemplateFile("types_listing.pt")\n@@ -226,14 +225,14 @@ def link(self, item, field):\n         (But only for types with schemata that can be edited through the web.)\n         """\n         if field == "title":\n-            return "{0}/{1}".format(\n+            return "{}/{}".format(\n                 self.context.absolute_url(), urllib.parse.quote(item.__name__)\n             )\n \n \n # Create a form wrapper so the form gets layout.\n TypesListingPage = layout.wrap_form(\n-    TypesListing, __wrapper_class=TypesEditFormWrapper, label=_(u"Content Types")\n+    TypesListing, __wrapper_class=TypesEditFormWrapper, label=_("Content Types")\n )\n \n \n@@ -241,7 +240,7 @@ def link(self, item, field):\n class TypeSchemaContext(SchemaContext):\n \n     fti = None\n-    schemaName = u""\n+    schemaName = ""\n     schemaEditorView = "fields"\n     allowedFields = ALLOWED_FIELDS\n \n@@ -264,11 +263,11 @@ class TypesContext(SimpleItem):\n     """\n \n     def __init__(self, context, request):\n-        super(TypesContext, self).__init__(context, request)\n+        super().__init__(context, request)\n \n         # make sure that breadcrumbs will be correct\n         self.id = None\n-        self.Title = lambda: _(u"Content Types")\n+        self.Title = lambda: _("Content Types")\n \n         # turn off green edit border for anything in the type control panel\n         request.set("disable_border", 1)\n@@ -292,7 +291,7 @@ def publishTraverse(self, request, name):\n             schema, request, name=name, title=fti.title\n         ).__of__(self)\n         schema_context.fti = fti\n-        schema_context.schemaName = u""\n+        schema_context.schemaName = ""\n         return schema_context\n \n     def browserDefault(self, request):\ndiff --git a/plone/app/dexterity/browser/utils.py b/plone/app/dexterity/browser/utils.py\nindex b3605bf..03e514d 100644\n--- a/plone/app/dexterity/browser/utils.py\n+++ b/plone/app/dexterity/browser/utils.py\n@@ -1,18 +1,17 @@\n-# -*- coding: utf-8 -*-\n import six\n \n \n-class UTF8Property(object):\n+class UTF8Property:\n     def __init__(self, name):\n         self.name = name\n \n     def __get__(self, inst, type=None):\n         value = getattr(inst.context, self.name)\n-        if six.PY2 and isinstance(value, six.binary_type):\n+        if six.PY2 and isinstance(value, bytes):\n             value = value.decode("utf8")\n         return value\n \n     def __set__(self, inst, value):\n-        if six.PY2 and isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, str):\n             value = value.encode("utf8")\n         setattr(inst.context, self.name, value)\ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex 7cb33c3..5bd6ba0 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.interfaces import IDXFileFactory\n from plone.dexterity.utils import createContentInContainer\n from plone.namedfile.file import NamedBlobFile\n@@ -17,7 +16,7 @@\n \n @adapter(IFolderish)\n @implementer(IDXFileFactory)\n-class DXFileFactory(object):\n+class DXFileFactory:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py\nindex 0fc0c44..180e8c9 100644\n--- a/plone/app/dexterity/interfaces.py\n+++ b/plone/app/dexterity/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.dexterity import _\n from Products.CMFCore.utils import getToolByName\n@@ -21,12 +20,12 @@ class ITypeSchemaContext(Interface):\n     """Marker interface for plone.schemaeditor schema contexts that are\n     associated with a Dexterity FTI"""\n \n-    fti = Attribute(u"The FTI object associated with this schema.")\n-    schemaName = Attribute(u"The name of this schema within its FTI\'s model.")\n+    fti = Attribute("The FTI object associated with this schema.")\n+    schemaName = Attribute("The name of this schema within its FTI\'s model.")\n \n \n class InvalidIdError(schema.ValidationError):\n-    __doc__ = _(u"Please use only letters, numbers and the following characters: .-_")\n+    __doc__ = _("Please use only letters, numbers and the following characters: .-_")\n \n \n # a letter followed by letters, numbers, period, hyphen, or underscore\n@@ -43,32 +42,32 @@ class ITypeSettings(Interface):\n     """Define the fields for the content type add form"""\n \n     title = schema.TextLine(\n-        title=_(u"Type Name"),\n+        title=_("Type Name"),\n     )\n \n     id = schema.ASCIILine(\n-        title=_(u"Short Name"),\n-        description=_(u"Used for programmatic access to the type."),\n+        title=_("Short Name"),\n+        description=_("Used for programmatic access to the type."),\n         required=True,\n         constraint=isValidId,\n     )\n \n-    description = schema.Text(title=_(u"Description"), required=False)\n+    description = schema.Text(title=_("Description"), required=False)\n \n     container = schema.Bool(\n-        title=_(u"Container"),\n-        description=_(u"Items of this type will be able to contain other items."),\n+        title=_("Container"),\n+        description=_("Items of this type will be able to contain other items."),\n         required=True,\n         default=False,\n     )\n \n     filter_content_types = schema.Choice(\n-        title=_(u"Filter Contained Types"),\n+        title=_("Filter Contained Types"),\n         description=_(\n             "label_filter_contained_types",\n             default=(\n-                u"Items of this type can act as a folder containing other "\n-                u" items. What content types should be allowed inside?"\n+                "Items of this type can act as a folder containing other "\n+                " items. What content types should be allowed inside?"\n             ),\n         ),\n         values=("none", "all", "some"),\n@@ -77,7 +76,7 @@ class ITypeSettings(Interface):\n     )\n \n     allowed_content_types = schema.Set(\n-        title=_(u"Allowed Content Types"),\n+        title=_("Allowed Content Types"),\n         required=False,\n         value_type=schema.Choice(\n             vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes", required=False\n@@ -88,17 +87,17 @@ class ITypeSettings(Interface):\n class ITypeStats(Interface):\n \n     item_count = schema.Int(\n-        title=_(u"# of items"),\n+        title=_("# of items"),\n     )\n \n \n class TypeIdValidator(validator.SimpleFieldValidator):\n     def validate(self, value):\n-        super(TypeIdValidator, self).validate(value)\n+        super().validate(value)\n \n         ttool = getToolByName(self.context, "portal_types")\n         if value in ttool.objectIds():\n-            msg = u"There is already a content type named \'${name}\'"\n+            msg = "There is already a content type named \'${name}\'"\n             raise Invalid(_(msg, mapping={"name": value}))\n \n \n@@ -107,7 +106,7 @@ def validate(self, value):\n \n class TypeTitleValidator(validator.SimpleFieldValidator):\n     def validate(self, value):\n-        super(TypeTitleValidator, self).validate(value)\n+        super().validate(value)\n \n         ttool = getToolByName(self.context, "portal_types")\n         for existing_fti in ttool.objectValues():\n@@ -115,7 +114,7 @@ def validate(self, value):\n                 continue\n \n             if existing_fti.Title() == value:\n-                msg = u"There is already a content type named \'${name}\'"\n+                msg = "There is already a content type named \'${name}\'"\n                 raise Invalid(_(msg, mapping={"name": value}))\n \n \ndiff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py\nindex cd3b2d6..93d5caa 100644\n--- a/plone/app/dexterity/permissions.py\n+++ b/plone/app/dexterity/permissions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.autoform.interfaces import WIDGETS_KEY\n@@ -32,7 +31,7 @@ class MockRequest(TestRequest):\n \n @adapter(IDexterityContent)\n @implementer(IFieldPermissionChecker)\n-class DXFieldPermissionChecker(object):\n+class DXFieldPermissionChecker:\n     """ """\n \n     DEFAULT_PERMISSION = "Modify portal content"\n@@ -93,7 +92,7 @@ def validate(self, field_name, vocabulary_name=None):\n             # specified, fall back to the default edit permission\n             return checker(self.DEFAULT_PERMISSION, context)\n         else:\n-            raise AttributeError("No such field: {0}".format(field_name))\n+            raise AttributeError(f"No such field: {field_name}")\n \n \n @adapter(IForm)\ndiff --git a/plone/app/dexterity/serialize.py b/plone/app/dexterity/serialize.py\nindex a60fbc2..87d3230 100644\n--- a/plone/app/dexterity/serialize.py\n+++ b/plone/app/dexterity/serialize.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import splitSchemaName\n from plone.supermodel import serializeModel\ndiff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py\nindex b239ef9..64368eb 100644\n--- a/plone/app/dexterity/testing.py\n+++ b/plone/app/dexterity/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\ndiff --git a/plone/app/dexterity/tests/__init__.py b/plone/app/dexterity/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/dexterity/tests/__init__.py\n+++ b/plone/app/dexterity/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex 86615cc..ce9061f 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.browser.constraintypes import IConstrainForm\n from plone.app.dexterity.behaviors import constrains\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n@@ -328,7 +327,7 @@ def test_allowedContentTypesExit4(self):\n         )\n \n     def test_formschemainvariants(self):\n-        class Data(object):\n+        class Data:\n             allowed_types = []\n             secondary_types = []\n \n@@ -365,7 +364,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\n@@ -443,7 +442,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(\n+            "Basic {}:{}".format(\n                 SITE_OWNER_NAME,\n                 SITE_OWNER_PASSWORD,\n             ),\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex baafd0d..b5b3cf9 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py\nindex 95c32d2..84e1b59 100644\n--- a/plone/app/dexterity/tests/test_export.py\n+++ b/plone/app/dexterity/tests/test_export.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test the @@types-export view."""\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n from plone.app.dexterity.tests.test_constrains import add_item_type\ndiff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py\nindex dcd1053..026af16 100644\n--- a/plone/app/dexterity/tests/test_import.py\n+++ b/plone/app/dexterity/tests/test_import.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test the types import."""\n from DateTime.DateTime import DateTime\n from plone.app.dexterity.browser.import_types import ITypeProfileImport\n@@ -38,11 +37,11 @@ def testZipFileImportContext(self):\n \n         self.assertTrue(isinstance(icontext.getLastModified("types.xml"), DateTime))\n \n-        self.assertEqual(set(icontext.listDirectory("")), set(["types", "types.xml"]))\n+        self.assertEqual(set(icontext.listDirectory("")), {"types", "types.xml"})\n \n         self.assertEqual(\n             set(icontext.listDirectory("types")),\n-            set(["test_type_two.xml", "test_type_one.xml"]),\n+            {"test_type_two.xml", "test_type_one.xml"},\n         )\n \n         # test importIsTypesOnly check\n@@ -58,7 +57,7 @@ def testSampleImportStep(self):\n         types_tool = getToolByName(portal, "portal_types")\n         old_types = set(types_tool.listContentTypes())\n \n-        handler = setup_tool.getImportStep(u"typeinfo")\n+        handler = setup_tool.getImportStep("typeinfo")\n \n         zname = os.path.join(\n             os.path.dirname(__file__), "import", "dexterity_export.zip"\n@@ -70,7 +69,7 @@ def testSampleImportStep(self):\n         # Our types list should have our two new types\n         self.assertEqual(\n             set(types_tool.listContentTypes()) - old_types,\n-            set(["test_type_one", "test_type_two"]),\n+            {"test_type_one", "test_type_two"},\n         )\n \n         # Trying to import now should fail, since\ndiff --git a/plone/app/dexterity/tests/test_nextprevious.py b/plone/app/dexterity/tests/test_nextprevious.py\nindex b933d92..6ec7ae1 100644\n--- a/plone/app/dexterity/tests/test_nextprevious.py\n+++ b/plone/app/dexterity/tests/test_nextprevious.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n from plone.app.layout.nextprevious.interfaces import INextPreviousProvider\n from plone.app.testing import login\n@@ -69,14 +68,14 @@ def testNextPreviousViewEnabled(self):\n     def testNextPreviousItems(self):\n         container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         for id in range(1, 4):\n-            container.invokeFactory("Document", "subDoc{0}".format(id))\n+            container.invokeFactory("Document", f"subDoc{id}")\n \n         from OFS.Folder import manage_addFolder\n \n         manage_addFolder(container, "notacontentishtype")\n \n         for id in range(5, 6):\n-            container.invokeFactory("Document", "subDoc{0}".format(id))\n+            container.invokeFactory("Document", f"subDoc{id}")\n \n         adapter = INextPreviousProvider(container)\n         # text data for next/previous items\n@@ -109,7 +108,7 @@ def testNextItemOnlyShowViewable(self):\n         # published objects [subDoc2, subDoc4, subDoc5]\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         for id in range(1, 7):\n-            doc = container[container.invokeFactory("Document", "subDoc{0}".format(id))]\n+            doc = container[container.invokeFactory("Document", f"subDoc{id}")]\n             if id in [2, 4, 5]:\n                 self.wf.doActionFor(doc, "publish")\n \n@@ -131,7 +130,7 @@ def testPreviousItemOnlyShowViewable(self):\n         # published objects [subDoc2, subDoc4, subDoc5]\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         for id in range(1, 7):\n-            doc = container[container.invokeFactory("Document", "subDoc{0}".format(id))]\n+            doc = container[container.invokeFactory("Document", f"subDoc{id}")]\n             if id in [2, 4, 5]:\n                 self.wf.doActionFor(doc, "publish")\n \ndiff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py\nindex febd048..7092d3c 100644\n--- a/plone/app/dexterity/tests/test_permissions.py\n+++ b/plone/app/dexterity/tests/test_permissions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.browser.vocabulary import VocabularyView\n from plone.app.testing import login\n from plone.app.testing import setRoles\n@@ -54,10 +53,10 @@ class IMockSchema(Interface):\n IMockSchema.setTaggedValue(\n     WRITE_PERMISSIONS_KEY,\n     {\n-        "allowed_field": u"zope2.View",\n-        "disallowed_field": u"zope2.ViewManagementScreens",\n-        "custom_widget_field": u"zope2.View",\n-        "adapted_widget_field": u"zope2.View",\n+        "allowed_field": "zope2.View",\n+        "disallowed_field": "zope2.ViewManagementScreens",\n+        "custom_widget_field": "zope2.View",\n+        "adapted_widget_field": "zope2.View",\n     },\n )\n IMockSchema.setTaggedValue(\ndiff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py\nindex 7c2fa0a..7c6703c 100644\n--- a/plone/app/dexterity/tests/test_robot.py\n+++ b/plone/app/dexterity/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_ACCEPTANCE_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\ndiff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py\nindex 84af321..15c1b7a 100644\n--- a/plone/app/dexterity/tests/test_upgrades.py\n+++ b/plone/app/dexterity/tests/test_upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n \n import unittest\ndiff --git a/plone/app/dexterity/upgrades/to1.py b/plone/app/dexterity/upgrades/to1.py\nindex 9620ff4..f4b3375 100644\n--- a/plone/app/dexterity/upgrades/to1.py\n+++ b/plone/app/dexterity/upgrades/to1.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/plone/app/dexterity/upgrades/to2.py b/plone/app/dexterity/upgrades/to2.py\nindex 49b0bfd..1fc725b 100644\n--- a/plone/app/dexterity/upgrades/to2.py\n+++ b/plone/app/dexterity/upgrades/to2.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/plone/app/dexterity/upgrades/to2000.py b/plone/app/dexterity/upgrades/to2000.py\nindex db03ef2..bae48e0 100644\n--- a/plone/app/dexterity/upgrades/to2000.py\n+++ b/plone/app/dexterity/upgrades/to2000.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/plone/app/dexterity/upgrades/to2001.py b/plone/app/dexterity/upgrades/to2001.py\nindex a925a71..81f9542 100644\n--- a/plone/app/dexterity/upgrades/to2001.py\n+++ b/plone/app/dexterity/upgrades/to2001.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityContent\n from plone.uuid.handlers import addAttributeUUID\n from plone.uuid.interfaces import IUUID\ndiff --git a/plone/app/dexterity/upgrades/to2002.py b/plone/app/dexterity/upgrades/to2002.py\nindex c9ba292..3a2ed42 100644\n--- a/plone/app/dexterity/upgrades/to2002.py\n+++ b/plone/app/dexterity/upgrades/to2002.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/plone/app/dexterity/upgrades/to2003.py b/plone/app/dexterity/upgrades/to2003.py\nindex 54e21a9..c4a87e7 100644\n--- a/plone/app/dexterity/upgrades/to2003.py\n+++ b/plone/app/dexterity/upgrades/to2003.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n \ndiff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py\nindex 0195342..b76c72f 100644\n--- a/plone/app/dexterity/upgrades/to2004.py\n+++ b/plone/app/dexterity/upgrades/to2004.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityFTI\n from Products.CMFCore.utils import getToolByName\n \ndiff --git a/plone/app/dexterity/upgrades/to2005.py b/plone/app/dexterity/upgrades/to2005.py\nindex a923ca8..6750031 100644\n--- a/plone/app/dexterity/upgrades/to2005.py\n+++ b/plone/app/dexterity/upgrades/to2005.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n import logging\ndiff --git a/setup.py b/setup.py\nindex a980d1e..5c732a9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n@@ -11,7 +10,7 @@\n     "alternative to Archetypes that is more light-weight and modular."\n )\n \n-long_description = "{0}\\n{1}\\n{2}".format(\n+long_description = "{}\\n{}\\n{}".format(\n     open("README.rst").read(),\n     open("RELEASE_NOTES.rst").read(),\n     open("CHANGES.rst").read(),\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T11:32:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/8b75671b551863263e58192a5e03150ab3b1bbd1

remove traces of six

Files changed:
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/browser/utils.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/tests/editing.rst
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/textindexer/testing.py
M setup.py

b'diff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py\nindex 5efee85..8bceed9 100644\n--- a/plone/app/dexterity/behaviors/filename.py\n+++ b/plone/app/dexterity/behaviors/filename.py\n@@ -5,8 +5,6 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n-\n \n class INameFromFileName(Interface):\n     """Marker interface to enable name from filename behavior"""\ndiff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py\nindex 798b777..0df4489 100644\n--- a/plone/app/dexterity/behaviors/tests/test_metadata.py\n+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py\n@@ -8,7 +8,6 @@\n from zope.component import getUtility\n from zope.schema.interfaces import ConstraintNotSatisfied\n \n-import six\n import unittest\n \n \n@@ -27,12 +26,6 @@ def test_title_setter(self):\n         b.title = "foo"\n         self.assertEqual("foo", b.context.title)\n \n-    @unittest.skipUnless(six.PY2, "Only for py2")\n-    def test_title_setter_rejects_bytestrings(self):\n-        b = self._makeOne()\n-        with self.assertRaises(ValueError):\n-            setattr(b, "title", "f\xc3\xb8\xc3\xb8")\n-\n     def test_title_getter(self):\n         b = self._makeOne()\n         b.context.title = "foo"\n@@ -43,12 +36,6 @@ def test_description_setter(self):\n         b.description = "foo"\n         self.assertEqual("foo", b.context.description)\n \n-    @unittest.skipUnless(six.PY2, "Only for py2")\n-    def test_description_setter_rejects_bytestrings(self):\n-        b = self._makeOne()\n-        with self.assertRaises(ValueError):\n-            setattr(b, "description", "f\xc3\xb8\xc3\xb8")\n-\n     def test_description_getter(self):\n         b = self._makeOne()\n         b.context.description = "foo"\ndiff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py\nindex 8899341..bceceb3 100644\n--- a/plone/app/dexterity/browser/add_type.py\n+++ b/plone/app/dexterity/browser/add_type.py\n@@ -3,28 +3,11 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_nativestring\n from z3c.form import field\n from z3c.form import form\n \n \n-try:\n-    from Products.CMFPlone.utils import safe_nativestring\n-except ImportError:\n-    # Not needed for Products.CMFPlone >= 5.2a1\n-    from Products.CMFPlone.utils import safe_encode\n-    from Products.CMFPlone.utils import safe_unicode\n-\n-    import six\n-\n-    def safe_nativestring(value, encoding="utf-8"):\n-        """Convert a value to str in py2 and to text in py3"""\n-        if six.PY2 and isinstance(value, str):\n-            value = safe_encode(value, encoding)\n-        if not six.PY2 and isinstance(value, bytes):\n-            value = safe_unicode(value, encoding)\n-        return value\n-\n-\n class TypeAddForm(form.AddForm):\n \n     label = _("Add Content Type")\ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 747d220..9feff80 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -8,6 +8,7 @@\n from plone.behavior.registration import BehaviorRegistrationNotFound\n from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.fti import DexterityFTIModificationDescription\n+from Products.CMFPlone.utils import safe_nativestring\n from z3c.form import field\n from z3c.form import form\n from z3c.form.browser.checkbox import SingleCheckBoxFieldWidget\n@@ -17,24 +18,6 @@\n from zope.component import getUtilitiesFor\n from zope.lifecycleevent import modified\n \n-import six\n-\n-\n-try:\n-    from Products.CMFPlone.utils import safe_nativestring\n-except ImportError:\n-    # Not needed for Products.CMFPlone >= 5.2a1\n-    from Products.CMFPlone.utils import safe_encode\n-    from Products.CMFPlone.utils import safe_unicode\n-\n-    def safe_nativestring(value, encoding="utf-8"):\n-        """Convert a value to str in py2 and to text in py3"""\n-        if six.PY2 and isinstance(value, str):\n-            value = safe_encode(value, encoding)\n-        if not six.PY2 and isinstance(value, bytes):\n-            value = safe_unicode(value, encoding)\n-        return value\n-\n \n TTW_BEHAVIOR_BLACKLIST = [\n     # skip deprecated behavior\ndiff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex 58cac29..df54dda 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -1,6 +1,7 @@\n # @@types-export view for dexterity types configlet. View support for the\n # "Export" button. This is done by repurposing the GS typeinfo export and\n # removing unselected type information from its output.\n+from io import BytesIO\n from lxml import etree\n from plone.supermodel import serializeModel\n from Products.CMFCore.utils import getToolByName\n@@ -9,7 +10,6 @@\n from Products.Five.browser import BrowserView\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.context import TarballExportContext\n-from six import BytesIO\n from zipfile import ZipFile\n \n import time\ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 534b368..dc13029 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -2,6 +2,7 @@\n """\n # XXX: need to make exceptions more specific, shorten messages\n from DateTime.DateTime import DateTime\n+from io import BytesIO\n from lxml import etree\n from plone.app.dexterity import _\n from plone.namedfile.field import NamedFile\n@@ -9,7 +10,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.interfaces import IImportContext\n-from six import BytesIO\n from z3c.form import field\n from z3c.form import form\n from zipfile import BadZipfile\ndiff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py\nindex 140a793..1bf8f5c 100644\n--- a/plone/app/dexterity/browser/types.py\n+++ b/plone/app/dexterity/browser/types.py\n@@ -14,8 +14,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser.pagetemplatefile import (\n     ViewPageTemplateFile as FiveViewPageTemplateFile,\n-)  # noqa\n-from six.moves import urllib\n+)\n from z3c.form import button\n from z3c.form import field\n from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\n@@ -28,6 +27,8 @@\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n+import urllib\n+\n \n ALLOWED_FIELDS = [\n     "plone.app.textfield.RichText",\ndiff --git a/plone/app/dexterity/browser/utils.py b/plone/app/dexterity/browser/utils.py\nindex 03e514d..17f47a4 100644\n--- a/plone/app/dexterity/browser/utils.py\n+++ b/plone/app/dexterity/browser/utils.py\n@@ -1,17 +1,9 @@\n-import six\n-\n-\n class UTF8Property:\n     def __init__(self, name):\n         self.name = name\n \n     def __get__(self, inst, type=None):\n-        value = getattr(inst.context, self.name)\n-        if six.PY2 and isinstance(value, bytes):\n-            value = value.decode("utf8")\n-        return value\n+        return getattr(inst.context, self.name)\n \n     def __set__(self, inst, value):\n-        if six.PY2 and isinstance(value, str):\n-            value = value.encode("utf8")\n         setattr(inst.context, self.name, value)\ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex 5bd6ba0..1bafade 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -1,3 +1,4 @@\n+from _thread import allocate_lock\n from plone.app.dexterity.interfaces import IDXFileFactory\n from plone.dexterity.utils import createContentInContainer\n from plone.namedfile.file import NamedBlobFile\n@@ -5,7 +6,6 @@\n from Products.CMFCore.interfaces._content import IFolderish\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils as ploneutils\n-from six.moves._thread import allocate_lock\n from zope.component import adapter\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 1498a67..6dd45d5 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -494,8 +494,8 @@ zip archive containing files ready to drop into our profile::\n     \'attachment; filename=dexterity_export-....zip\'\n \n     >>> import zipfile\n-    >>> import six\n-    >>> fd = six.BytesIO(browser.contents)\n+    >>> import io\n+    >>> fd = io.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'types.xml\', \'types/plonista2.xml\', \'types/plonista-folder.xml\']\n@@ -524,8 +524,8 @@ zip archive containing supermodel xml files::\n     \'attachment; filename=dexterity_models-....zip\'\n \n     >>> import zipfile\n-    >>> import six\n-    >>> fd = six.BytesIO(browser.contents)\n+    >>> import io\n+    >>> fd = io.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'models/plonista2.xml\', \'models/plonista-folder.xml\']\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex b5b3cf9..889afaa 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -3,7 +3,6 @@\n \n import doctest\n import re\n-import six\n import unittest\n \n \n@@ -18,26 +17,6 @@\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("zExceptions.NotFound", "NotFound", want)\n-            want = re.sub(\n-                "zope.interface.interfaces.ComponentLookupError",\n-                "ComponentLookupError",\n-                want,\n-            )\n-            want = re.sub(\n-                "zope.testbrowser.browser.LinkNotFoundError", "LinkNotFoundError", want\n-            )\n-            want = re.sub(\n-                "AccessControl.unauthorized.Unauthorized", "Unauthorized", want\n-            )\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n@@ -48,7 +27,6 @@ def test_suite():\n                     testfile,\n                     optionflags=OPTIONFLAGS,\n                     # package=\'plone.app.dexterity.tests\',\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=DEXTERITY_FUNCTIONAL_TESTING,\n             )\ndiff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py\nindex 84e1b59..ae944ad 100644\n--- a/plone/app/dexterity/tests/test_export.py\n+++ b/plone/app/dexterity/tests/test_export.py\n@@ -5,7 +5,7 @@\n from xml.parsers.expat import ExpatError\n from zope.component import getMultiAdapter\n \n-import six\n+import io\n import unittest\n import zipfile\n \n@@ -36,7 +36,7 @@ def test_exported_XML_valid_for_GS(self):\n \n         # export the \'item\' type and try to parse all XMLs\n         output = types_export_view.__call__()\n-        fd = six.BytesIO(output)\n+        fd = io.BytesIO(output)\n         archive = zipfile.ZipFile(fd, mode="r")\n         filenames = archive.namelist()\n         for filename in filenames:\ndiff --git a/plone/app/dexterity/textindexer/testing.py b/plone/app/dexterity/textindexer/testing.py\nindex 84ccb4a..f1cb92e 100644\n--- a/plone/app/dexterity/textindexer/testing.py\n+++ b/plone/app/dexterity/textindexer/testing.py\n@@ -5,13 +5,13 @@\n TEXT_INDEXER_FUNCTIONAL_TESTING    functional testing layer\n """\n \n+from io import StringIO\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from six import StringIO\n \n import logging\n \ndiff --git a/setup.py b/setup.py\nindex 5c732a9..711cf05 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -68,7 +68,7 @@\n         "Products.CMFCore",\n         "Products.GenericSetup",\n         "setuptools",\n-        "Zope2",\n+        "Zope",\n         "zope.browserpage",\n         "zope.interface",\n         "zope.component",\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T11:36:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/9dea3753d06da5214de891dfce089f06f323def0

use shortnames of behaviors in tests

Files changed:
M plone/app/dexterity/profiles/testing/types/Document.xml
M plone/app/dexterity/profiles/testing/types/Folder.xml

b'diff --git a/plone/app/dexterity/profiles/testing/types/Document.xml b/plone/app/dexterity/profiles/testing/types/Document.xml\nindex 17174d70..dc7de274 100644\n--- a/plone/app/dexterity/profiles/testing/types/Document.xml\n+++ b/plone/app/dexterity/profiles/testing/types/Document.xml\n@@ -19,10 +19,10 @@\n   <property name="add_permission">cmf.AddPortalContent</property>\n   <property name="klass">plone.dexterity.content.Item</property>\n   <property name="behaviors">\n-    <element value="plone.app.content.interfaces.INameFromTitle" />\n-    <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion" />\n-    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation" />\n-    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n+    <element value="plone.namefromtitle" />\n+    <element value="plone.allowdiscussion" />\n+    <element value="plone.excludefromnavigation" />\n+    <element value="plone.dublincore" />\n   </property>\n   <property name="schema">zope.interface.Interface</property>\n   <alias from="(Default)" to="(dynamic view)" />\ndiff --git a/plone/app/dexterity/profiles/testing/types/Folder.xml b/plone/app/dexterity/profiles/testing/types/Folder.xml\nindex dcd26bad..5e56fdb3 100644\n--- a/plone/app/dexterity/profiles/testing/types/Folder.xml\n+++ b/plone/app/dexterity/profiles/testing/types/Folder.xml\n@@ -23,12 +23,11 @@\n   <property name="add_permission">cmf.AddPortalContent</property>\n   <property name="klass">plone.dexterity.content.Container</property>\n   <property name="behaviors">\n-    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n-    <element value="plone.app.content.interfaces.INameFromTitle" />\n-    <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion" />\n-    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation" />\n-    <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes" />\n-    <element value="plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle" />\n+    <element value="plone.dublincore" />\n+    <element value="plone.excludefromnavigation" />\n+    <element value="plone.namefromtitle" />\n+    <element value="plone.allowdiscussion" />\n+    <element value="plone.nextprevioustoggle" />\n   </property>\n   <property name="schema">zope.interface.Interface</property>\n   <alias from="(Default)" to="(dynamic view)" />\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T13:47:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/5e3042df58f97c88a106d2b1a88ba33bd87e44c8

speedup, 1sec is way to long to wait

Files changed:
M plone/app/dexterity/tests/editing.rst

b"diff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 6dd45d5..8191565 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -123,9 +123,9 @@ and saved::\n   ...         continue\n   ...     browser.open(schemaeditor_url)\n   ...     # If two changes happen in the same second, the schema lookup will find an old schema,\n-  ...     # so we sleep till the next second.\n+  ...     # so we sleep short.\n   ...     now = time.time()\n-  ...     time.sleep(int(now) + 1 - now)\n+  ...     time.sleep(0.1)\n   ...     browser.getLink('Add new field').click()\n   ...     browser.getControl('Title').value = name\n   ...     field_id = normalizer.normalize(name).replace('-', '_')\n"

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T14:07:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/4b57de935b42fd909107a2ea2c07d456c8d76828

use plone.base

Files changed:
M plone/app/dexterity/behaviors/configure.zcml
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/tests/test_contrains.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/configure.zcml
M plone/app/dexterity/factories.py
M plone/app/dexterity/tests/editing.rst
M plone/app/dexterity/textindexer/converters.py

b'diff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml\nindex 1f87ff0..85255a0 100644\n--- a/plone/app/dexterity/behaviors/configure.zcml\n+++ b/plone/app/dexterity/behaviors/configure.zcml\n@@ -129,7 +129,7 @@\n       name="plone.constraintypes"\n       title="Folder Addable Constrains"\n       description="Restrict the content types that can be added to folderish content"\n-      provides="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"\n+      provides="plone.base.interfaces.constrains.ISelectableConstrainTypes"\n       factory=".constrains.ConstrainTypesBehavior"\n       for="plone.dexterity.interfaces.IDexterityContainer"\n       />\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex ce00107..ede8be8 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -1,6 +1,6 @@\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.utils import base_hasattr\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from Products.CMFPlone.utils import base_hasattr\n \n \n # constants for enableConstrain. Copied from AT\ndiff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py\nindex 8bceed9..fc3987c 100644\n--- a/plone/app/dexterity/behaviors/filename.py\n+++ b/plone/app/dexterity/behaviors/filename.py\n@@ -1,6 +1,6 @@\n from plone.app.content.interfaces import INameFromTitle\n+from plone.base.utils import safe_hasattr\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n-from Products.CMFPlone.utils import safe_hasattr\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\ndiff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nindex 376e7d8..69bc2ed 100644\n--- a/plone/app/dexterity/behaviors/tests/test_contrains.py\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -1,7 +1,7 @@\n from plone.app.dexterity.behaviors.constrains import ACQUIRE\n from plone.app.dexterity.behaviors.constrains import ConstrainTypesBehavior\n from plone.app.dexterity.behaviors.constrains import DISABLED\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n from zope.interface import alsoProvides\n \n import unittest\ndiff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py\nindex bceceb3..c46ab33 100644\n--- a/plone/app/dexterity/browser/add_type.py\n+++ b/plone/app/dexterity/browser/add_type.py\n@@ -1,9 +1,9 @@\n from plone.app.dexterity import _\n from plone.app.dexterity.interfaces import ITypeSettings\n+from plone.base.utils import safe_text\n from plone.dexterity.fti import DexterityFTI\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_nativestring\n from z3c.form import field\n from z3c.form import form\n \n@@ -20,9 +20,9 @@ def create(self, data):\n \n         fti = DexterityFTI(id)\n         fti.id = id\n-        data["title"] = safe_nativestring(data["title"])\n+        data["title"] = safe_text(data["title"])\n         if data["description"]:\n-            data["description"] = safe_nativestring(data["description"])\n+            data["description"] = safe_text(data["description"])\n         data["i18n_domain"] = "plone"\n         data["behaviors"] = "\\n".join(\n             [\ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 9feff80..7537986 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -8,7 +8,7 @@\n from plone.behavior.registration import BehaviorRegistrationNotFound\n from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.fti import DexterityFTIModificationDescription\n-from Products.CMFPlone.utils import safe_nativestring\n+from plone.base.utils import safe_text\n from z3c.form import field\n from z3c.form import form\n from z3c.form.browser.checkbox import SingleCheckBoxFieldWidget\n@@ -42,7 +42,7 @@ def __getattr__(self, name):\n         iid = reg.interface.__identifier__\n         return (\n             iid in self.fti.behaviors\n-            or safe_nativestring(reg.name) in self.fti.behaviors\n+            or safe_text(reg.name) in self.fti.behaviors\n         )\n \n     def __setattr__(self, name, value):\n@@ -56,7 +56,7 @@ def __setattr__(self, name, value):\n             if iid in self.fti.behaviors:\n                 behaviors.remove(iid)\n             # prepare named behavior for add/remove\n-            bname = safe_nativestring(reg.name)\n+            bname = safe_text(reg.name)\n         else:\n             # no name found -> prepare dotted behavior for add/remove instead\n             bname = iid\n@@ -78,7 +78,7 @@ def __iter__(self):\n                 # ignore wrong names\n                 continue\n             if reg.name:\n-                yield safe_nativestring(reg.name)\n+                yield safe_text(reg.name)\n             else:\n                 yield name\n \n@@ -107,7 +107,7 @@ def fields(self):\n             with_name = counts[id(reg)] > 1\n             if with_name and reg.name != name:\n                 continue\n-            fname = safe_nativestring(reg.name if reg.name else name)\n+            fname = safe_text(reg.name if reg.name else name)\n             fields.append(\n                 schema.Bool(\n                     __name__=fname,\ndiff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml\nindex 8069d11..9026c47 100644\n--- a/plone/app/dexterity/browser/configure.zcml\n+++ b/plone/app/dexterity/browser/configure.zcml\n@@ -31,7 +31,7 @@\n \n   <configure zcml:condition="have plone-51">\n     <browser:page\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         name="folder_listing"\n         class=".folder_listing.FolderView"\n         template="folder_listing.pt"\n@@ -52,7 +52,7 @@\n \n   <browser:page\n       name="dexterity-types"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".types.TypesContext"\n       permission="plone.schemaeditor.ManageSchemata"\n       allowed_interface="OFS.interfaces.IItem" />\ndiff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex df54dda..6432de6 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -3,10 +3,10 @@\n # removing unselected type information from its output.\n from io import BytesIO\n from lxml import etree\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from plone.supermodel import serializeModel\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_encode\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.context import TarballExportContext\n@@ -52,12 +52,12 @@ def writeDataFile(self, filename, text, content_type, subdir=None):\n             # Add a marker for ZopeSkel additions\n             root.append(etree.Comment(" -*- extra stuff goes here -*- "))\n             # minor prettifying\n-            root_str = safe_unicode(etree.tostring(root))\n+            root_str = safe_text(etree.tostring(root))\n             text = f\'<?xml version="1.0"?>\\n{root_str}\'\n             text = text.replace("<!--", " <!--")\n             text = text.replace("-->", "-->\\n")\n \n-        self._archive.writestr(filename, safe_encode(text))\n+        self._archive.writestr(filename, safe_bytes(text))\n \n \n class TypesExport(BrowserView):\ndiff --git a/plone/app/dexterity/configure.zcml b/plone/app/dexterity/configure.zcml\nindex d9494d4..135ded4 100644\n--- a/plone/app/dexterity/configure.zcml\n+++ b/plone/app/dexterity/configure.zcml\n@@ -23,7 +23,7 @@\n       description="Configures various components needed for full Dexterity support."\n       directory="profiles/default"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       />\n \n   <genericsetup:registerProfile\n@@ -32,7 +32,7 @@\n       description="Adds Dexterity-based Folder and Document types for testing."\n       directory="profiles/testing"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"\n+      for="plone.base.interfaces.ITestCasePloneSiteRoot"\n       />\n \n   <include package=".browser" />\ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex 1bafade..f0bca28 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -1,11 +1,11 @@\n from _thread import allocate_lock\n from plone.app.dexterity.interfaces import IDXFileFactory\n+from plone.base.utils import safe_text\n from plone.dexterity.utils import createContentInContainer\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore.interfaces._content import IFolderish\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils as ploneutils\n from zope.component import adapter\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n@@ -24,7 +24,7 @@ def __call__(self, name, content_type, data):\n         ctr = getToolByName(self.context, "content_type_registry")\n         type_ = ctr.findTypeName(name.lower(), content_type, data) or "File"\n \n-        name = ploneutils.safe_unicode(name)\n+        name = safe_text(name)\n \n         chooser = INameChooser(self.context)\n \ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 8191565..1bedabf 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -530,8 +530,8 @@ zip archive containing supermodel xml files::\n     >>> archive.namelist()\n     [\'models/plonista2.xml\', \'models/plonista-folder.xml\']\n \n-    >>> from Products.CMFPlone.utils import safe_unicode\n-    >>> print(safe_unicode(archive.read(\'models/plonista2.xml\')))\n+    >>> from plone.base.utils import safe_text\n+    >>> print(safe_text(archive.read(\'models/plonista2.xml\')))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\n@@ -553,7 +553,7 @@ file::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=plonista2.xml\'\n \n-    >>> print(safe_unicode(browser.contents))\n+    >>> print(safe_text(browser.contents))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\ndiff --git a/plone/app/dexterity/textindexer/converters.py b/plone/app/dexterity/textindexer/converters.py\nindex e0e994f..0db1ef5 100644\n--- a/plone/app/dexterity/textindexer/converters.py\n+++ b/plone/app/dexterity/textindexer/converters.py\n@@ -6,10 +6,10 @@\n \n from plone.app.dexterity.textindexer import interfaces\n from plone.app.textfield.interfaces import IRichText\n+from plone.base.utils import safe_text\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from z3c.form.interfaces import IWidget\n from ZODB.POSException import ConflictError\n from zope.component import adapter\n@@ -62,7 +62,7 @@ def convert(self):\n         textvalue = self.field.get(self.context)\n         if textvalue is None:\n             return ""\n-        html = safe_unicode(textvalue.output)\n+        html = safe_text(textvalue.output)\n         transforms = getToolByName(self.context, "portal_transforms")\n         stream = transforms.convertTo("text/plain", html, mimetype=textvalue.mimeType)\n         return stream.getData().strip()\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T14:19:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/cf0a54058788f73870a088ca946f94570596d6ec

add newsfile, code style

Files changed:
A news/348.breaking
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/tests/test_constrains.py

b'diff --git a/news/348.breaking b/news/348.breaking\nnew file mode 100644\nindex 0000000..994d1aa\n--- /dev/null\n+++ b/news/348.breaking\n@@ -0,0 +1,6 @@\n+Code Style: isort + black.\n+Pyupgrade and six removal.\n+Short name usage of behaviors in tests.\n+Sleep in editing.rst reduced (saves 10sec in tests).\n+Use plone.base.\n+[jensens]\ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 7537986..07cda51 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -4,11 +4,11 @@\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.layout import TypeFormLayout\n from plone.app.dexterity.interfaces import ITypeSchemaContext\n+from plone.base.utils import safe_text\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.registration import BehaviorRegistrationNotFound\n from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.fti import DexterityFTIModificationDescription\n-from plone.base.utils import safe_text\n from z3c.form import field\n from z3c.form import form\n from z3c.form.browser.checkbox import SingleCheckBoxFieldWidget\n@@ -40,10 +40,7 @@ def __getattr__(self, name):\n         # be sure to get a valid value\n         reg = lookup_behavior_registration(name=name)\n         iid = reg.interface.__identifier__\n-        return (\n-            iid in self.fti.behaviors\n-            or safe_text(reg.name) in self.fti.behaviors\n-        )\n+        return iid in self.fti.behaviors or safe_text(reg.name) in self.fti.behaviors\n \n     def __setattr__(self, name, value):\n         # add or remove the behavior based on the value from the form\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex ce9061f..0e4dfa9 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -7,10 +7,10 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n from plone.dexterity.fti import DexterityFTI\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from zope.interface.exceptions import Invalid\n \n import unittest\n@@ -22,8 +22,8 @@ def add_folder_type(portal):\n     fti.klass = "plone.dexterity.content.Container"\n     fti.filter_content_types = False\n     fti.behaviors = (\n-        "Products.CMFPlone.interfaces.constrains." "ISelectableConstrainTypes",\n-        "plone.app.dexterity.behaviors.metadata.IBasic",\n+        "plone.constraintypes",\n+        "plone.basic",\n     )\n     return fti\n \n@@ -33,7 +33,7 @@ def add_item_type(portal):\n     portal.portal_types._setObject("item", fti)\n     fti.klass = "plone.dexterity.content.Item"\n     fti.filter_content_types = False\n-    fti.behaviors = "plone.app.dexterity.behaviors.metadata.IBasic"\n+    fti.behaviors = "plone.basic"\n     return fti\n \n \n@@ -67,7 +67,7 @@ def setUp(self):\n \n     def test_behavior_added(self):\n         self.assertIn(\n-            "Products.CMFPlone.interfaces." "constrains.ISelectableConstrainTypes",\n+            "plone.constraintypes",\n             self.types_tool.getTypeInfo(self.folder).behaviors,\n         )\n         self.assertTrue(ISelectableConstrainTypes(self.folder))\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T22:47:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/96f60e526d42e0b920879010ab9beac5be2938c0

fix comment to be more distinct

Files changed:
M plone/app/dexterity/tests/editing.rst

b"diff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 1bedabf..56c3512 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -122,8 +122,8 @@ and saved::\n   ...     if hasattr(factory, 'protected') and factory.protected(None):\n   ...         continue\n   ...     browser.open(schemaeditor_url)\n-  ...     # If two changes happen in the same second, the schema lookup will find an old schema,\n-  ...     # so we sleep short.\n+  ...     # If two changes happen in the same moment, the schema lookup will find an old schema,\n+  ...     # so we sleep shortly.\n   ...     now = time.time()\n   ...     time.sleep(0.1)\n   ...     browser.getLink('Add new field').click()\n"

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-01T22:48:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/4a092b4d9443e0c40752c5ad7c03e6fbdb93cf3e

remove Plone 5.1 zcml:conditional

Files changed:
M plone/app/dexterity/browser/configure.zcml

b'diff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml\nindex 9026c47..293b0c0 100644\n--- a/plone/app/dexterity/browser/configure.zcml\n+++ b/plone/app/dexterity/browser/configure.zcml\n@@ -29,15 +29,13 @@\n       permission="zope2.View"\n       />\n \n-  <configure zcml:condition="have plone-51">\n-    <browser:page\n-        for="plone.base.interfaces.IPloneSiteRoot"\n-        name="folder_listing"\n-        class=".folder_listing.FolderView"\n-        template="folder_listing.pt"\n-        permission="zope2.View"\n-        />\n-  </configure>\n+  <browser:page\n+      for="plone.base.interfaces.IPloneSiteRoot"\n+      name="folder_listing"\n+      class=".folder_listing.FolderView"\n+      template="folder_listing.pt"\n+      permission="zope2.View"\n+      />\n \n   <!-- warning when editing default pages -->\n   <browser:viewlet\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-05-02T23:19:15+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/b9cd09dcdde8c0538a16cedaa4bca4c0c893ca82

Merge pull request #348 from plone/plone-base-overhaul

Plone base overhaul

Files changed:
A news/348.breaking
M bootstrap.py
M docs/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/__init__.py
M plone/app/dexterity/behaviors/configure.zcml
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/discussion.py
M plone/app/dexterity/behaviors/exclfromnav.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/id.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/behaviors/nextprevious.py
M plone/app/dexterity/behaviors/related.py
M plone/app/dexterity/behaviors/tests/test_contrains.py
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/__init__.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/fields.py
M plone/app/dexterity/browser/folder_listing.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/overview.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/browser/utils.py
M plone/app/dexterity/configure.zcml
M plone/app/dexterity/factories.py
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/profiles/testing/types/Document.xml
M plone/app/dexterity/profiles/testing/types/Folder.xml
M plone/app/dexterity/serialize.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/__init__.py
M plone/app/dexterity/tests/editing.rst
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M plone/app/dexterity/tests/test_nextprevious.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_robot.py
M plone/app/dexterity/tests/test_upgrades.py
M plone/app/dexterity/textindexer/converters.py
M plone/app/dexterity/textindexer/testing.py
M plone/app/dexterity/upgrades/to1.py
M plone/app/dexterity/upgrades/to2.py
M plone/app/dexterity/upgrades/to2000.py
M plone/app/dexterity/upgrades/to2001.py
M plone/app/dexterity/upgrades/to2002.py
M plone/app/dexterity/upgrades/to2003.py
M plone/app/dexterity/upgrades/to2004.py
M plone/app/dexterity/upgrades/to2005.py
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex a6295667..dbd50b3e 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,16 +18,17 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n tmpeggs = tempfile.mkdtemp()\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -37,30 +38,41 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n \n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--setuptools-version",\n-                  help="use a specific setuptools version")\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--setuptools-version", help="use a specific setuptools version")\n \n \n options, args = parser.parse_args()\n@@ -77,27 +89,29 @@\n     from urllib2 import urlopen\n \n ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n \n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -110,28 +124,35 @@\n \n ws = pkg_resources.working_set\n \n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -139,12 +160,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -163,13 +183,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -178,12 +199,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 95a2bec5..60c63f50 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # Plone Developer Manual documentation build configuration file, created by\n # sphinx-quickstart on Sun Aug 16 13:38:00 2009.\n@@ -18,133 +17,134 @@\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.append(os.path.abspath(\'.\'))\n+# sys.path.append(os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinx.ext.autodoc\',\n-#              \'collective.sphinx.autoatschema\',\n-#              \'collective.sphinx.includedoc\'\n-    ]\n+extensions = [\n+    "sphinx.ext.autodoc",\n+    #              \'collective.sphinx.autoatschema\',\n+    #              \'collective.sphinx.includedoc\'\n+]\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8\'\n+# source_encoding = \'utf-8\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'Dexterity Developer Manual\'\n-copyright = u\'Plone community and other individual contributors\'\n+project = "Dexterity Developer Manual"\n+copyright = "Plone community and other individual contributors"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n release = version\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of documents that shouldn\'t be included in the build.\n-#unused_docs = []\n+# unused_docs = []\n \n # List of directories, relative to source directory, that shouldn\'t be searched\n # for source files.\n # exclude_trees = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  Major themes that come with\n # Sphinx are currently \'default\' and \'sphinxdoc\'.\n-#html_theme = \'default\'\n-#html_theme = \'plone\'\n+# html_theme = \'default\'\n+# html_theme = \'plone\'\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-html_theme_path = [\'_themes\']\n+html_theme_path = ["_themes"]\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n html_title = "Dexterity Developer Manual"\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_style=\'plone.css\'\n-#html_logo=\'_static/logo.png\'\n+# html_style=\'plone.css\'\n+# html_logo=\'_static/logo.png\'\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n-#html_sidebars = {\n+# html_sidebars = {}\n+# html_sidebars = {\n #   \'**\': [\'localtoc.html\', \'searchbox.html\', \'plone.html\'],\n-#}\n+# }\n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n html_use_modindex = True\n@@ -153,54 +153,59 @@\n html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = \'\'\n+# html_file_suffix = \'\'\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'DexterityDeveloperManual\'\n+htmlhelp_basename = "DexterityDeveloperManual"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n # The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'letter\'\n+# latex_paper_size = \'letter\'\n \n # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n+# latex_font_size = \'10pt\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'DexterityDeveloperManual.tex\', u\'Dexterity Developer Manual\',\n-   u\'Plone community and individual contributors\', \'manual\'),\n+    (\n+        "index",\n+        "DexterityDeveloperManual.tex",\n+        "Dexterity Developer Manual",\n+        "Plone community and individual contributors",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n+# latex_preamble = \'\'\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_use_modindex = True\n+# latex_use_modindex = True\n \n # Do not try do funny things on our characters\n # http://sphinx.pocoo.org/config.html#confval-html_use_smartypants\ndiff --git a/news/348.breaking b/news/348.breaking\nnew file mode 100644\nindex 00000000..994d1aaf\n--- /dev/null\n+++ b/news/348.breaking\n@@ -0,0 +1,6 @@\n+Code Style: isort + black.\n+Pyupgrade and six removal.\n+Short name usage of behaviors in tests.\n+Sleep in editing.rst reduced (saves 10sec in tests).\n+Use plone.base.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py\nindex 458e0680..38bb5a77 100644\n--- a/plone/app/dexterity/__init__.py\n+++ b/plone/app/dexterity/__init__.py\n@@ -1,8 +1,6 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory as ZMessageFactory\n \n import warnings\n \n \n-_ = ZMessageFactory(\'plone\')\n-\n+_ = ZMessageFactory("plone")\ndiff --git a/plone/app/dexterity/behaviors/__init__.py b/plone/app/dexterity/behaviors/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/dexterity/behaviors/__init__.py\n+++ b/plone/app/dexterity/behaviors/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml\nindex 1f87ff0b..85255a09 100644\n--- a/plone/app/dexterity/behaviors/configure.zcml\n+++ b/plone/app/dexterity/behaviors/configure.zcml\n@@ -129,7 +129,7 @@\n       name="plone.constraintypes"\n       title="Folder Addable Constrains"\n       description="Restrict the content types that can be added to folderish content"\n-      provides="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"\n+      provides="plone.base.interfaces.constrains.ISelectableConstrainTypes"\n       factory=".constrains.ConstrainTypesBehavior"\n       for="plone.dexterity.interfaces.IDexterityContainer"\n       />\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 557125fb..ede8be8d 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.utils import base_hasattr\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from Products.CMFPlone.utils import base_hasattr\n \n \n # constants for enableConstrain. Copied from AT\n@@ -10,8 +9,7 @@\n ENABLED = 1  # allow types from locallyAllowedTypes only\n \n \n-class ConstrainTypesBehavior(object):\n-\n+class ConstrainTypesBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -22,7 +20,7 @@ def getConstrainTypesMode(self):\n         and can be adapted to ISelectableConstrainTypes.\n         Else it is DISABLED\n         """\n-        if base_hasattr(self.context, \'constrain_types_mode\'):\n+        if base_hasattr(self.context, "constrain_types_mode"):\n             return self.context.constrain_types_mode\n         parent = self.context.__parent__\n         if not parent:\n@@ -41,10 +39,9 @@ def setConstrainTypesMode(self, mode):\n         self.context.constrain_types_mode = mode\n \n     def canSetConstrainTypes(self):\n-        mtool = getToolByName(self.context, \'portal_membership\')\n+        mtool = getToolByName(self.context, "portal_membership")\n         member = mtool.getAuthenticatedMember()\n-        return member.has_permission(\n-            \'Modify constrain types\', self.context)\n+        return member.has_permission("Modify constrain types", self.context)\n \n     def getDefaultAddableTypes(self, context=None):\n         if context is None:\n@@ -58,11 +55,14 @@ def _getAddableTypesFor(self, obj, context):\n         information in the types tool and for that the current user\n         has the correct add permission in the context of `context`\n         """\n-        portal_types = getToolByName(context, \'portal_types\')\n+        portal_types = getToolByName(context, "portal_types")\n         my_type = portal_types.getTypeInfo(obj)\n         result = portal_types.listTypeInfo()\n-        return [t for t in result if my_type.allowType(t.getId()) and\n-                t.isConstructionAllowed(context)]\n+        return [\n+            t\n+            for t in result\n+            if my_type.allowType(t.getId()) and t.isConstructionAllowed(context)\n+        ]\n \n     def _filterByDefaults(self, types, context=None):\n         """\n@@ -71,9 +71,7 @@ def _filterByDefaults(self, types, context=None):\n         """\n         if context is None:\n             context = self.context\n-        defaults = [\n-            fti.getId() for fti in self.getDefaultAddableTypes(context)\n-        ]\n+        defaults = [fti.getId() for fti in self.getDefaultAddableTypes(context)]\n         return [x for x in types if x in defaults]\n \n     def allowedContentTypes(self, context=None):\n@@ -92,9 +90,12 @@ def allowedContentTypes(self, context=None):\n         if mode == DISABLED:\n             return default_addable\n         elif mode == ENABLED:\n-            if hasattr(self.context, \'locally_allowed_types\'):\n-                return [t for t in default_addable if t.getId() in\n-                        self.context.locally_allowed_types]\n+            if hasattr(self.context, "locally_allowed_types"):\n+                return [\n+                    t\n+                    for t in default_addable\n+                    if t.getId() in self.context.locally_allowed_types\n+                ]\n             else:\n                 return default_addable\n         elif mode == ACQUIRE:\n@@ -103,11 +104,11 @@ def allowedContentTypes(self, context=None):\n             if not parent_constrain_adapter:\n                 return default_addable\n             return_tids = self._filterByDefaults(\n-                parent_constrain_adapter.getLocallyAllowedTypes(\n-                    context), context)\n+                parent_constrain_adapter.getLocallyAllowedTypes(context), context\n+            )\n             return [t for t in default_addable if t.getId() in return_tids]\n         else:\n-            msg = \'Wrong constraint setting. %i is an invalid value\'\n+            msg = "Wrong constraint setting. %i is an invalid value"\n             raise Exception(msg, mode)\n \n     def getLocallyAllowedTypes(self, context=None):\n@@ -123,7 +124,7 @@ def setLocallyAllowedTypes(self, types):\n         defaults = [t.getId() for t in self.getDefaultAddableTypes()]\n         for type_ in types:\n             if type_ not in defaults:\n-                raise ValueError(\'%s is not a valid type id\', type_)\n+                raise ValueError("%s is not a valid type id", type_)\n         self.context.locally_allowed_types = types\n \n     def getImmediatelyAddableTypes(self, context=None):\n@@ -137,16 +138,15 @@ def getImmediatelyAddableTypes(self, context=None):\n         if context is None:\n             context = self.context\n         mode = self.getConstrainTypesMode()\n-        default_addable = [\n-            t.getId() for t in self.getDefaultAddableTypes(context)\n-        ]\n+        default_addable = [t.getId() for t in self.getDefaultAddableTypes(context)]\n \n         if mode == DISABLED:\n             return default_addable\n         elif mode == ENABLED:\n-            if hasattr(self.context, \'immediately_addable_types\'):\n+            if hasattr(self.context, "immediately_addable_types"):\n                 return self._filterByDefaults(\n-                    self.context.immediately_addable_types, context)\n+                    self.context.immediately_addable_types, context\n+                )\n             return default_addable\n         elif mode == ACQUIRE:\n             parent = self.context.__parent__\n@@ -154,15 +154,15 @@ def getImmediatelyAddableTypes(self, context=None):\n             if not parent_constrain_adapter:\n                 return default_addable\n             return self._filterByDefaults(\n-                parent_constrain_adapter.getImmediatelyAddableTypes(\n-                    context), context)\n+                parent_constrain_adapter.getImmediatelyAddableTypes(context), context\n+            )\n         else:\n-            msg = \'Wrong constraint setting. %i is an invalid value\'\n+            msg = "Wrong constraint setting. %i is an invalid value"\n             raise Exception(msg, mode)\n \n     def setImmediatelyAddableTypes(self, types):\n         defaults = [t.getId() for t in self.getDefaultAddableTypes()]\n         for type_ in types:\n             if type_ not in defaults:\n-                raise ValueError(\'%s is not a valid type id\', type_)\n+                raise ValueError("%s is not a valid type id", type_)\n         self.context.immediately_addable_types = types\ndiff --git a/plone/app/dexterity/behaviors/discussion.py b/plone/app/dexterity/behaviors/discussion.py\nindex b3f3d521..041bd971 100644\n--- a/plone/app/dexterity/behaviors/discussion.py\n+++ b/plone/app/dexterity/behaviors/discussion.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -11,29 +10,31 @@\n from zope.schema.vocabulary import SimpleVocabulary\n \n \n-options = SimpleVocabulary([\n-    SimpleTerm(value=True, title=_(u\'Yes\')),\n-    SimpleTerm(value=False, title=_(u\'No\')),\n-])\n+options = SimpleVocabulary(\n+    [\n+        SimpleTerm(value=True, title=_("Yes")),\n+        SimpleTerm(value=False, title=_("No")),\n+    ]\n+)\n \n \n @provider(IFormFieldProvider)\n class IAllowDiscussion(model.Schema):\n \n     model.fieldset(\n-        \'settings\',\n-        label=_(u"Settings"),\n-        fields=[\'allow_discussion\'],\n+        "settings",\n+        label=_("Settings"),\n+        fields=["allow_discussion"],\n     )\n \n     allow_discussion = schema.Choice(\n-        title=_(u\'Allow discussion\'),\n-        description=_(u\'Allow discussion for this content object.\'),\n+        title=_("Allow discussion"),\n+        description=_("Allow discussion for this content object."),\n         vocabulary=options,\n         required=False,\n         default=None,\n     )\n \n-    directives.omitted(\'allow_discussion\')\n-    directives.no_omit(IEditForm, \'allow_discussion\')\n-    directives.no_omit(IAddForm, \'allow_discussion\')\n+    directives.omitted("allow_discussion")\n+    directives.no_omit(IEditForm, "allow_discussion")\n+    directives.no_omit(IAddForm, "allow_discussion")\ndiff --git a/plone/app/dexterity/behaviors/exclfromnav.py b/plone/app/dexterity/behaviors/exclfromnav.py\nindex 3d8c9ec9..6fe6cec9 100644\n--- a/plone/app/dexterity/behaviors/exclfromnav.py\n+++ b/plone/app/dexterity/behaviors/exclfromnav.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -13,23 +12,19 @@\n \n \n class IExcludeFromNavigationDefault(Interface):\n-\n     def __call__():\n-        """boolean if item is by default excluded from navigation or not.\n-        """\n+        """boolean if item is by default excluded from navigation or not."""\n \n \n @implementer(IExcludeFromNavigationDefault)\n def default_exclude_false(context):\n-    """provide a default adapter with the standard uses\n-    """\n+    """provide a default adapter with the standard uses"""\n     return False\n \n \n @implementer(IExcludeFromNavigationDefault)\n def default_exclude_true(context):\n-    """provide a alternative adapter with opposite default as standard\n-    """\n+    """provide a alternative adapter with opposite default as standard"""\n     return True\n \n \n@@ -40,29 +35,20 @@ def default_exclude(context):\n \n @provider(IFormFieldProvider)\n class IExcludeFromNavigation(model.Schema):\n-    """Behavior interface to exclude items from navigation.\n-    """\n+    """Behavior interface to exclude items from navigation."""\n \n-    model.fieldset(\n-        \'settings\',\n-        label=_(u"Settings"),\n-        fields=[\'exclude_from_nav\']\n-    )\n+    model.fieldset("settings", label=_("Settings"), fields=["exclude_from_nav"])\n \n     exclude_from_nav = schema.Bool(\n-        title=_(\n-            u\'label_exclude_from_nav\',\n-            default=u\'Exclude from navigation\'\n-        ),\n+        title=_("label_exclude_from_nav", default="Exclude from navigation"),\n         description=_(\n-            u\'help_exclude_from_nav\',\n-            default=u\'If selected, this item will not appear in the \'\n-                    u\'navigation tree\'\n+            "help_exclude_from_nav",\n+            default="If selected, this item will not appear in the " "navigation tree",\n         ),\n         defaultFactory=default_exclude,\n         required=False,\n     )\n \n-    directives.omitted(\'exclude_from_nav\')\n-    directives.no_omit(IEditForm, \'exclude_from_nav\')\n-    directives.no_omit(IAddForm, \'exclude_from_nav\')\n+    directives.omitted("exclude_from_nav")\n+    directives.no_omit(IEditForm, "exclude_from_nav")\n+    directives.no_omit(IAddForm, "exclude_from_nav")\ndiff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py\nindex 92a6b620..fc3987c3 100644\n--- a/plone/app/dexterity/behaviors/filename.py\n+++ b/plone/app/dexterity/behaviors/filename.py\n@@ -1,13 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.interfaces import INameFromTitle\n+from plone.base.utils import safe_hasattr\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n-from Products.CMFPlone.utils import safe_hasattr\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n-\n \n class INameFromFileName(Interface):\n     """Marker interface to enable name from filename behavior"""\n@@ -15,18 +12,17 @@ class INameFromFileName(Interface):\n \n @implementer(INameFromTitle)\n @adapter(INameFromFileName)\n-class NameFromFileName(object):\n-\n+class NameFromFileName:\n     def __new__(cls, context):\n         info = IPrimaryFieldInfo(context, None)\n         if info is None:\n             return None\n-        filename = getattr(info.value, \'filename\', None)\n-        if not isinstance(filename, six.string_types) or not filename:\n+        filename = getattr(info.value, "filename", None)\n+        if not isinstance(filename, str) or not filename:\n             return None\n-        instance = super(NameFromFileName, cls).__new__(cls)\n+        instance = super().__new__(cls)\n         instance.title = filename\n-        if safe_hasattr(context, \'title\') and not context.title:\n+        if safe_hasattr(context, "title") and not context.title:\n             context.title = filename\n         return instance\n \ndiff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py\nindex 1cf8046b..22ded847 100644\n--- a/plone/app/dexterity/behaviors/id.py\n+++ b/plone/app/dexterity/behaviors/id.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -18,21 +17,20 @@\n class IShortName(model.Schema):\n \n     model.fieldset(\n-        \'settings\',\n-        label=_(u"Settings"),\n-        fields=[\'id\'],\n+        "settings",\n+        label=_("Settings"),\n+        fields=["id"],\n     )\n \n     id = schema.ASCIILine(\n-        title=_(u\'Short name\'),\n-        description=_(u\'This name will be displayed in the URL.\'),\n+        title=_("Short name"),\n+        description=_("This name will be displayed in the URL."),\n         required=False,\n     )\n-    directives.write_permission(id=\'cmf.AddPortalContent\')\n+    directives.write_permission(id="cmf.AddPortalContent")\n \n \n-class ShortName(object):\n-\n+class ShortName:\n     def __init__(self, context):\n         self.context = context\n \n@@ -49,7 +47,7 @@ def _set_id(self, value):\n             context.id = value\n             return\n         new_id = INameChooser(parent).chooseName(value, context)\n-        if getattr(aq_base(context), \'id\', None):\n+        if getattr(aq_base(context), "id", None):\n             transaction.savepoint()\n             locked = False\n             lockable = ILockable(context, None)\n@@ -61,4 +59,5 @@ def _set_id(self, value):\n                 lockable.lock()\n         else:\n             context.id = new_id\n+\n     id = property(_get_id, _set_id)\ndiff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py\nindex 3f083122..8eabe5b0 100644\n--- a/plone/app/dexterity/behaviors/metadata.py\n+++ b/plone/app/dexterity/behaviors/metadata.py\n@@ -62,15 +62,15 @@ def default_language(context):\n class IBasic(model.Schema):\n \n     # default fieldset\n-    title = schema.TextLine(title=_(u"label_title", default=u"Title"), required=True)\n+    title = schema.TextLine(title=_("label_title", default="Title"), required=True)\n \n     description = schema.Text(\n-        title=_(u"label_description", default=u"Summary"),\n+        title=_("label_description", default="Summary"),\n         description=_(\n-            u"help_description", default=u"Used in item listings and search results."\n+            "help_description", default="Used in item listings and search results."\n         ),\n         required=False,\n-        missing_value=u"",\n+        missing_value="",\n     )\n \n     directives.order_before(description="*")\n@@ -87,15 +87,15 @@ class ICategorization(model.Schema):\n     # categorization fieldset\n     model.fieldset(\n         "categorization",\n-        label=_(u"label_schema_categorization", default=u"Categorization"),\n+        label=_("label_schema_categorization", default="Categorization"),\n         fields=["subjects", "language"],\n     )\n \n     subjects = schema.Tuple(\n-        title=_(u"label_tags", default=u"Tags"),\n+        title=_("label_tags", default="Tags"),\n         description=_(\n-            u"help_tags",\n-            default=u"Tags are commonly used for ad-hoc organization of " + u"content.",\n+            "help_tags",\n+            default="Tags are commonly used for ad-hoc organization of " + "content.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -106,7 +106,7 @@ class ICategorization(model.Schema):\n     )\n \n     language = schema.Choice(\n-        title=_(u"label_language", default=u"Language"),\n+        title=_("label_language", default="Language"),\n         vocabulary="plone.app.vocabularies.SupportedContentLanguages",\n         required=False,\n         missing_value="",\n@@ -121,7 +121,7 @@ class ICategorization(model.Schema):\n \n class EffectiveAfterExpires(Invalid):\n     __doc__ = _(\n-        "error_invalid_publication", default=u"Invalid effective or expires date"\n+        "error_invalid_publication", default="Invalid effective or expires date"\n     )\n \n \n@@ -130,27 +130,27 @@ class IPublication(model.Schema):\n     # dates fieldset\n     model.fieldset(\n         "dates",\n-        label=_(u"label_schema_dates", default=u"Dates"),\n+        label=_("label_schema_dates", default="Dates"),\n         fields=["effective", "expires"],\n     )\n \n     effective = schema.Datetime(\n-        title=_(u"label_effective_date", u"Publishing Date"),\n+        title=_("label_effective_date", "Publishing Date"),\n         description=_(\n-            u"help_effective_date",\n-            default=u"If this date is in the future, the content will "\n-            u"not show up in listings and searches until this date.",\n+            "help_effective_date",\n+            default="If this date is in the future, the content will "\n+            "not show up in listings and searches until this date.",\n         ),\n         required=False,\n     )\n     directives.widget("effective", DatetimeFieldWidget)\n \n     expires = schema.Datetime(\n-        title=_(u"label_expiration_date", u"Expiration Date"),\n+        title=_("label_expiration_date", "Expiration Date"),\n         description=_(\n-            u"help_expiration_date",\n-            default=u"When this date is reached, the content will no "\n-            u"longer be visible in listings and searches.",\n+            "help_expiration_date",\n+            default="When this date is reached, the content will no "\n+            "longer be visible in listings and searches.",\n         ),\n         required=False,\n     )\n@@ -162,7 +162,7 @@ def validate_start_end(data):\n             raise EffectiveAfterExpires(\n                 _(\n                     "error_expiration_must_be_after_effective_date",\n-                    default=u"Expiration date must be after publishing date.",\n+                    default="Expiration date must be after publishing date.",\n                 )\n             )\n \n@@ -177,17 +177,17 @@ class IOwnership(model.Schema):\n     # ownership fieldset\n     model.fieldset(\n         "ownership",\n-        label=_("label_schema_ownership", default=u"Ownership"),\n+        label=_("label_schema_ownership", default="Ownership"),\n         fields=["creators", "contributors", "rights"],\n     )\n \n     creators = schema.Tuple(\n-        title=_(u"label_creators", u"Creators"),\n+        title=_("label_creators", "Creators"),\n         description=_(\n-            u"help_creators",\n-            default=u"Persons responsible for creating the content of "\n-            u"this item. Please enter a list of user names, one "\n-            u"per line. The principal creator should come first.",\n+            "help_creators",\n+            default="Persons responsible for creating the content of "\n+            "this item. Please enter a list of user names, one "\n+            "per line. The principal creator should come first.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -198,12 +198,12 @@ class IOwnership(model.Schema):\n     )\n \n     contributors = schema.Tuple(\n-        title=_(u"contributors", u"Contributors"),\n+        title=_("contributors", "Contributors"),\n         description=_(\n-            u"help_contributors",\n-            default=u"The names of people that have contributed "\n-            u"to this item. Each contributor should "\n-            u"be on a separate line.",\n+            "help_contributors",\n+            default="The names of people that have contributed "\n+            "to this item. Each contributor should "\n+            "be on a separate line.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -214,11 +214,10 @@ class IOwnership(model.Schema):\n     )\n \n     rights = schema.Text(\n-        title=_(u"label_copyrights", default=u"Rights"),\n+        title=_("label_copyrights", default="Rights"),\n         description=_(\n-            u"help_copyrights",\n-            default=u"Copyright statement or other rights information on this "\n-            u"item.",\n+            "help_copyrights",\n+            default="Copyright statement or other rights information on this " "item.",\n         ),\n         required=False,\n     )\n@@ -248,7 +247,7 @@ class IDublinCore(IOwnership, IPublication, ICategorization, IBasic):\n \n \n @adapter(IDexterityContent)\n-class MetadataBase(object):\n+class MetadataBase:\n     """This adapter uses DCFieldProperty to store metadata directly on an\n     object using the standard CMF DefaultDublinCoreImpl getters and\n     setters.\n@@ -261,7 +260,7 @@ def __init__(self, context):\n _marker = object()\n \n \n-class DCFieldProperty(object):\n+class DCFieldProperty:\n     """Computed attributes based on schema fields.\n     Based on zope.schema.fieldproperty.FieldProperty.\n     """\n@@ -373,7 +372,7 @@ class Ownership(MetadataBase):\n     )\n \n     def __init__(self, *args, **kwargs):\n-        super(Ownership, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n         self.context.addCreator()\n \n \ndiff --git a/plone/app/dexterity/behaviors/nextprevious.py b/plone/app/dexterity/behaviors/nextprevious.py\nindex a1f7b1ca..0304a1d0 100644\n--- a/plone/app/dexterity/behaviors/nextprevious.py\n+++ b/plone/app/dexterity/behaviors/nextprevious.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from plone.app.dexterity import _\n@@ -27,29 +26,24 @@ class INextPreviousEnabled(Interface):\n \n @provider(IFormFieldProvider)\n class INextPreviousToggle(model.Schema):\n-    """Behavior interface to enable next previous navigation per item.\n-    """\n+    """Behavior interface to enable next previous navigation per item."""\n \n-    model.fieldset(\'settings\', label=_(u"Settings"),\n-                   fields=[\'nextPreviousEnabled\'])\n+    model.fieldset("settings", label=_("Settings"), fields=["nextPreviousEnabled"])\n \n     nextPreviousEnabled = schema.Bool(\n-        title=_(\n-            u\'label_nextprevious\',\n-            default=u\'Enable next previous navigation\'\n-        ),\n+        title=_("label_nextprevious", default="Enable next previous navigation"),\n         description=_(\n-            u\'help_nextprevious\',\n-            default=u\'This enables next/previous widget on content items \' +\n-                    u\'contained in this folder.\'\n+            "help_nextprevious",\n+            default="This enables next/previous widget on content items "\n+            + "contained in this folder.",\n         ),\n         default=False,\n         required=False,\n     )\n \n-    directives.omitted(\'nextPreviousEnabled\')\n-    directives.no_omit(IEditForm, \'nextPreviousEnabled\')\n-    directives.no_omit(IAddForm, \'nextPreviousEnabled\')\n+    directives.omitted("nextPreviousEnabled")\n+    directives.no_omit(IEditForm, "nextPreviousEnabled")\n+    directives.no_omit(IAddForm, "nextPreviousEnabled")\n \n \n def getNextPreviousParentValue(adapter_):\n@@ -59,20 +53,21 @@ def getNextPreviousParentValue(adapter_):\n         return False\n     return nextprevious.enabled\n \n+\n DefaultNextPreviousEnabled = widget.ComputedWidgetAttribute(\n     getNextPreviousParentValue,\n-    field=INextPreviousToggle[\'nextPreviousEnabled\'],\n+    field=INextPreviousToggle["nextPreviousEnabled"],\n )\n \n \n # This is taken from plone.app.folder\n-class NextPreviousBase(object):\n-    """ adapter for acting as a next/previous provider """\n+class NextPreviousBase:\n+    """adapter for acting as a next/previous provider"""\n \n     def __init__(self, context):\n         self.context = context\n         registry = getUtility(IRegistry)\n-        self.vat = registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        self.vat = registry.get("plone.types_use_view_action_in_listings", [])\n         self.security = getSecurityManager()\n         order = context.getOrdering()\n         if not isinstance(order, list):\n@@ -82,31 +77,31 @@ def __init__(self, context):\n         self.order = order\n \n     def getNextItem(self, obj):\n-        """ return info about the next item in the container """\n+        """return info about the next item in the container"""\n         if not self.order:\n             return None\n         pos = self.context.getObjectPosition(obj.getId())\n         if pos is None:\n             return None\n-        for oid in self.order[pos + 1:]:\n+        for oid in self.order[pos + 1 :]:\n             data = self.getData(self.context[oid])\n             if data:\n                 return data\n \n     def getPreviousItem(self, obj):\n-        """ return info about the previous item in the container """\n+        """return info about the previous item in the container"""\n         if not self.order:\n             return None\n         order_reversed = list(reversed(self.order))\n         pos = order_reversed.index(obj.getId())\n-        for oid in order_reversed[pos + 1:]:\n+        for oid in order_reversed[pos + 1 :]:\n             data = self.getData(self.context[oid])\n             if data:\n                 return data\n \n     def getData(self, obj):\n-        """ return the expected mapping, see `INextPreviousProvider` """\n-        if not self.security.checkPermission(\'View\', obj):\n+        """return the expected mapping, see `INextPreviousProvider`"""\n+        if not self.security.checkPermission("View", obj):\n             return None\n         elif not IContentish.providedBy(obj):\n             # do not return a not contentish object\n@@ -115,30 +110,30 @@ def getData(self, obj):\n \n         ptype = obj.portal_type\n         url = obj.absolute_url()\n-        if ptype in self.vat:       # "use view action in listings"\n-            url += \'/view\'\n+        if ptype in self.vat:  # "use view action in listings"\n+            url += "/view"\n         return dict(\n             id=obj.getId(),\n             url=url,\n             title=obj.Title(),\n             description=obj.Description(),\n-            portal_type=ptype\n+            portal_type=ptype,\n         )\n \n \n @implementer(INextPreviousProvider)\n @adapter(INextPreviousToggle)\n class NextPreviousToggle(NextPreviousBase):\n-    """ adapter for acting as a next/previous provider """\n+    """adapter for acting as a next/previous provider"""\n \n     @property\n     def enabled(self):\n-        return getattr(aq_base(self.context), \'nextPreviousEnabled\', False)\n+        return getattr(aq_base(self.context), "nextPreviousEnabled", False)\n \n \n @implementer(INextPreviousProvider)\n @adapter(INextPreviousEnabled)\n class NextPreviousEnabled(NextPreviousBase):\n-    """ adapter for acting as a next/previous provider """\n+    """adapter for acting as a next/previous provider"""\n \n     enabled = True\ndiff --git a/plone/app/dexterity/behaviors/related.py b/plone/app/dexterity/behaviors/related.py\nindex 4405c593..bfbe5022 100644\n--- a/plone/app/dexterity/behaviors/related.py\n+++ b/plone/app/dexterity/behaviors/related.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """BBB import for \'Related Items\' behavior that was moved to\n plone.app.relationfield in Dexterity 2.0.\n """\n@@ -13,6 +12,5 @@\n \n def related_items_behavior_BBB():\n     return queryUtility(\n-        IBehavior,\n-        name=u\'plone.app.relationfield.behavior.IRelatedItems\'\n+        IBehavior, name="plone.app.relationfield.behavior.IRelatedItems"\n     )\ndiff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nindex 97b623fb..69bc2edc 100644\n--- a/plone/app/dexterity/behaviors/tests/test_contrains.py\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -1,10 +1,7 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from plone.app.dexterity.behaviors.constrains import (\n-    ConstrainTypesBehavior,\n-    DISABLED,\n-    ACQUIRE,\n-)\n+from plone.app.dexterity.behaviors.constrains import ACQUIRE\n+from plone.app.dexterity.behaviors.constrains import ConstrainTypesBehavior\n+from plone.app.dexterity.behaviors.constrains import DISABLED\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n from zope.interface import alsoProvides\n \n import unittest\ndiff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py\nindex 701b8090..b003337d 100644\n--- a/plone/app/dexterity/behaviors/tests/test_id.py\n+++ b/plone/app/dexterity/behaviors/tests/test_id.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME\n@@ -15,100 +14,101 @@ class TestShortNameBehavior(unittest.TestCase):\n \n     def setUp(self):\n         # add IShortName behavior to Page\n-        behaviors = list(self.layer[\'portal\'].portal_types.Document.behaviors)\n-        behaviors.append(\'plone.app.dexterity.behaviors.id.IShortName\')\n-        self.layer[\'portal\'].portal_types.Document.behaviors = tuple(behaviors)\n+        behaviors = list(self.layer["portal"].portal_types.Document.behaviors)\n+        behaviors.append("plone.app.dexterity.behaviors.id.IShortName")\n+        self.layer["portal"].portal_types.Document.behaviors = tuple(behaviors)\n         transaction.commit()\n \n         # prepare browser\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n-        self.browser.open(\'http://nohost/plone\')\n+        self.browser.open("http://nohost/plone")\n \n     def test_add_item_w_id_specified(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo")\n \n         # adding another item should append a suffix\n-        self.browser.open(\'http://nohost/plone\')\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo-1\')\n+        self.browser.open("http://nohost/plone")\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo-1")\n \n     def test_add_item_w_reserved_name(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'login\'  # naughty\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/login-1\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "login"  # naughty\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/login-1")\n \n     def test_add_item_w_title_only(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'Id from Title\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/id-from-title\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "Id from Title"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/id-from-title")\n \n     def test_edit_item_renames(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(\'Edit\').click()\n-        self.assertEqual(self.browser.getControl(\'Short name\').value, \'foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink("Edit").click()\n+        self.assertEqual(self.browser.getControl("Short name").value, "foo")\n         # spaces should get stripped\n-        self.browser.getControl(\'Short name\').value = \' bar \'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/bar\')\n+        self.browser.getControl("Short name").value = " bar "\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/bar")\n \n     def test_edit_item_doesnt_rename_if_id_blank(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(\'Edit\').click()\n-        self.browser.getControl(\'Short name\').value = \'\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink("Edit").click()\n+        self.browser.getControl("Short name").value = ""\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo")\n \n     def test_edit_item_doesnt_rename_if_same_id(self):\n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        mtime = DateTime(self.layer[\'portal\'].foo._p_mtime)\n-        self.browser.getLink(\'Edit\').click()\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/foo\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        mtime = DateTime(self.layer["portal"].foo._p_mtime)\n+        self.browser.getLink("Edit").click()\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/foo")\n         # assert that object has not been modified\n-        self.assertEqual(\n-            mtime, DateTime(self.layer[\'portal\'].foo._p_mtime)\n-        )\n+        self.assertEqual(mtime, DateTime(self.layer["portal"].foo._p_mtime))\n \n-        behaviors = list(self.layer[\'portal\'].portal_types.Document.behaviors)\n-        behaviors.append(\'plone.app.lockingbehavior.behaviors.ILocking\')\n+        behaviors = list(self.layer["portal"].portal_types.Document.behaviors)\n+        behaviors.append("plone.app.lockingbehavior.behaviors.ILocking")\n \n     def test_rename_works_with_lockingbehavior(self):\n         """Test if the object is unlocked before renaming"""\n-        behaviors = list(self.layer[\'portal\'].portal_types.Document.behaviors)\n-        behaviors.append(\'plone.app.lockingbehavior.behaviors.ILocking\')\n-        self.layer[\'portal\'].portal_types.Document.behaviors = tuple(behaviors)\n+        behaviors = list(self.layer["portal"].portal_types.Document.behaviors)\n+        behaviors.append("plone.app.lockingbehavior.behaviors.ILocking")\n+        self.layer["portal"].portal_types.Document.behaviors = tuple(behaviors)\n         transaction.commit()\n \n-        self.browser.getLink(\'Page\').click()\n-        self.browser.getControl(\'Title\').value = \'title\'\n-        self.browser.getControl(\'Short name\').value = \'foo\'\n-        self.browser.getControl(\'Save\').click()\n-        self.browser.getLink(\'Edit\').click()\n-        self.assertEqual(self.browser.getControl(\'Short name\').value, \'foo\')\n-        self.browser.getControl(\'Short name\').value = \'bar\'\n-        self.browser.getControl(\'Save\').click()\n-        self.assertEqual(self.browser.url, \'http://nohost/plone/bar\')\n+        self.browser.getLink("Page").click()\n+        self.browser.getControl("Title").value = "title"\n+        self.browser.getControl("Short name").value = "foo"\n+        self.browser.getControl("Save").click()\n+        self.browser.getLink("Edit").click()\n+        self.assertEqual(self.browser.getControl("Short name").value, "foo")\n+        self.browser.getControl("Short name").value = "bar"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, "http://nohost/plone/bar")\ndiff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py\nindex a1c698ec..0df44892 100644\n--- a/plone/app/dexterity/behaviors/tests/test_metadata.py\n+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n from plone.app.testing import login\n@@ -9,85 +8,74 @@\n from zope.component import getUtility\n from zope.schema.interfaces import ConstraintNotSatisfied\n \n-import six\n import unittest\n \n \n class TestBasic(unittest.TestCase):\n-\n     def _makeOne(self):\n-        class Dummy(object):\n+        class Dummy:\n             pass\n+\n         dummy = Dummy()\n         from plone.app.dexterity.behaviors.metadata import Basic\n+\n         return Basic(dummy)\n \n     def test_title_setter(self):\n         b = self._makeOne()\n-        b.title = u\'foo\'\n-        self.assertEqual(u\'foo\', b.context.title)\n-\n-    @unittest.skipUnless(six.PY2, \'Only for py2\')\n-    def test_title_setter_rejects_bytestrings(self):\n-        b = self._makeOne()\n-        with self.assertRaises(ValueError):\n-            setattr(b, \'title\', \'f\xc3\xb8\xc3\xb8\')\n+        b.title = "foo"\n+        self.assertEqual("foo", b.context.title)\n \n     def test_title_getter(self):\n         b = self._makeOne()\n-        b.context.title = u\'foo\'\n-        self.assertEqual(u\'foo\', b.title)\n+        b.context.title = "foo"\n+        self.assertEqual("foo", b.title)\n \n     def test_description_setter(self):\n         b = self._makeOne()\n-        b.description = u\'foo\'\n-        self.assertEqual(u\'foo\', b.context.description)\n-\n-    @unittest.skipUnless(six.PY2, \'Only for py2\')\n-    def test_description_setter_rejects_bytestrings(self):\n-        b = self._makeOne()\n-        with self.assertRaises(ValueError):\n-            setattr(b, \'description\', \'f\xc3\xb8\xc3\xb8\')\n+        b.description = "foo"\n+        self.assertEqual("foo", b.context.description)\n \n     def test_description_getter(self):\n         b = self._makeOne()\n-        b.context.description = u\'foo\'\n-        self.assertEqual(u\'foo\', b.description)\n+        b.context.description = "foo"\n+        self.assertEqual("foo", b.description)\n \n     def test_description_remains_newlines(self):\n         b = self._makeOne()\n-        b.description = u\'foo\\r\\nbar\\nbaz\\r\'\n-        self.assertEqual(u\'foo\\r\\nbar\\nbaz\\r\', b.context.description)\n+        b.description = "foo\\r\\nbar\\nbaz\\r"\n+        self.assertEqual("foo\\r\\nbar\\nbaz\\r", b.context.description)\n \n \n class TestCategorization(unittest.TestCase):\n-\n     def _makeOne(self):\n-        class Dummy(object):\n+        class Dummy:\n             pass\n+\n         dummy = Dummy()\n         from plone.app.dexterity.behaviors.metadata import Categorization\n+\n         return Categorization(dummy)\n \n     def test_subjects_setter(self):\n         b = self._makeOne()\n-        b.subjects = (u\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((u\'f\xc3\xb8\xc3\xb8\',), b.context.subject)\n+        b.subjects = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.context.subject)\n \n     def test_subjects_getter(self):\n         b = self._makeOne()\n-        b.context.subject = (u\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((u\'f\xc3\xb8\xc3\xb8\',), b.subjects)\n+        b.context.subject = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.subjects)\n \n \n class CategorizationIntegrationTests(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_categorization_language(self):\n         """The vocabulary of the language field in the ICategorization\n@@ -96,32 +84,30 @@ def test_categorization_language(self):\n         """\n         # set available languages\n         registry = getUtility(IRegistry)\n-        registry[\'plone.available_languages\'] = [\'hu\', \'sl\']\n+        registry["plone.available_languages"] = ["hu", "sl"]\n \n-        self.portal.invokeFactory(\'Folder\', \'test\')\n+        self.portal.invokeFactory("Folder", "test")\n         ob = self.portal.test\n         cat = ICategorization(ob)\n \n-        cat.language = \'hu\'\n-        self.assertEqual(ob.language, \'hu\')\n+        cat.language = "hu"\n+        self.assertEqual(ob.language, "hu")\n \n-        cat.language = \'sl\'\n-        self.assertEqual(ob.language, \'sl\')\n+        cat.language = "sl"\n+        self.assertEqual(ob.language, "sl")\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            cat.language = \'de\'\n+            cat.language = "de"\n \n         with self.assertRaises(ConstraintNotSatisfied):\n-            cat.language = \'en\'\n+            cat.language = "en"\n \n \n class TestDCFieldProperty(unittest.TestCase):\n-\n     def _makeOne(self):\n-        class Dummy(object):\n-\n+        class Dummy:\n             def addCreator(self, creator=None):\n-                self.creators = (creator or \'dummy_user\', )\n+                self.creators = (creator or "dummy_user",)\n \n             def setRights(self, rights):\n                 self.rights = rights\n@@ -137,24 +123,25 @@ def listCreators(self):\n \n         dummy = Dummy()\n         from plone.app.dexterity.behaviors.metadata import DublinCore\n+\n         return DublinCore(dummy)\n \n     def test_sequence_text_setter(self):\n         b = self._makeOne()\n-        b.creators = (u\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((\'f\xc3\xb8\xc3\xb8\',), b.context.creators)\n+        b.creators = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.context.creators)\n \n     def test_sequence_text_getter(self):\n         b = self._makeOne()\n-        b.context.creators = (\'f\xc3\xb8\xc3\xb8\',)\n-        self.assertEqual((u\'f\xc3\xb8\xc3\xb8\',), b.creators)\n+        b.context.creators = ("f\xc3\xb8\xc3\xb8",)\n+        self.assertEqual(("f\xc3\xb8\xc3\xb8",), b.creators)\n \n     def test_text_setter(self):\n         b = self._makeOne()\n-        b.rights = u\'f\xc3\xb8\xc3\xb8\'\n-        self.assertEqual(\'f\xc3\xb8\xc3\xb8\', b.context.rights)\n+        b.rights = "f\xc3\xb8\xc3\xb8"\n+        self.assertEqual("f\xc3\xb8\xc3\xb8", b.context.rights)\n \n     def test_text_getter(self):\n         b = self._makeOne()\n-        b.context.rights = \'f\xc3\xb8\xc3\xb8\'\n-        self.assertEqual(u\'f\xc3\xb8\xc3\xb8\', b.rights)\n+        b.context.rights = "f\xc3\xb8\xc3\xb8"\n+        self.assertEqual("f\xc3\xb8\xc3\xb8", b.rights)\ndiff --git a/plone/app/dexterity/browser/__init__.py b/plone/app/dexterity/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/dexterity/browser/__init__.py\n+++ b/plone/app/dexterity/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py\nindex 7d398229..c46ab33f 100644\n--- a/plone/app/dexterity/browser/add_type.py\n+++ b/plone/app/dexterity/browser/add_type.py\n@@ -1,74 +1,61 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.interfaces import ITypeSettings\n+from plone.base.utils import safe_text\n from plone.dexterity.fti import DexterityFTI\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\n from z3c.form import field\n from z3c.form import form\n \n-try:\n-    from Products.CMFPlone.utils import safe_nativestring\n-except ImportError:\n-    # Not needed for Products.CMFPlone >= 5.2a1\n-    from Products.CMFPlone.utils import safe_encode\n-    from Products.CMFPlone.utils import safe_unicode\n-\n-    import six\n-\n-    def safe_nativestring(value, encoding=\'utf-8\'):\n-        """Convert a value to str in py2 and to text in py3\n-        """\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = safe_encode(value, encoding)\n-        if not six.PY2 and isinstance(value, six.binary_type):\n-            value = safe_unicode(value, encoding)\n-        return value\n-\n \n class TypeAddForm(form.AddForm):\n \n-    label = _(u\'Add Content Type\')\n-    fields = field.Fields(ITypeSettings).select(\'title\', \'id\', \'description\')\n-    id = \'add-type-form\'\n+    label = _("Add Content Type")\n+    fields = field.Fields(ITypeSettings).select("title", "id", "description")\n+    id = "add-type-form"\n     fti_id = None\n \n     def create(self, data):\n-        id = data.pop(\'id\')\n+        id = data.pop("id")\n \n         fti = DexterityFTI(id)\n         fti.id = id\n-        data[\'title\'] = safe_nativestring(data[\'title\'])\n-        if data[\'description\']:\n-            data[\'description\'] = safe_nativestring(data[\'description\'])\n-        data[\'i18n_domain\'] = \'plone\'\n-        data[\'behaviors\'] = \'\\n\'.join([\n-            \'plone.dublincore\',\n-            \'plone.namefromtitle\',\n-        ])\n-        data[\'model_source\'] = """\n+        data["title"] = safe_text(data["title"])\n+        if data["description"]:\n+            data["description"] = safe_text(data["description"])\n+        data["i18n_domain"] = "plone"\n+        data["behaviors"] = "\\n".join(\n+            [\n+                "plone.dublincore",\n+                "plone.namefromtitle",\n+            ]\n+        )\n+        data[\n+            "model_source"\n+        ] = """\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n     <schema>\n     </schema>\n </model>\n """\n \n-        data[\'klass\'] = \'plone.dexterity.content.Container\'\n-        data[\'filter_content_types\'] = True\n-        data[\'icon_expr\'] = \'string:file-earmark-text\'\n+        data["klass"] = "plone.dexterity.content.Container"\n+        data["filter_content_types"] = True\n+        data["icon_expr"] = "string:file-earmark-text"\n         fti.manage_changeProperties(**data)\n         return fti\n \n     def add(self, fti):\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         ttool._setObject(fti.id, fti)\n         self.fti_id = fti.id\n-        self.status = _(u"Type added successfully.")\n+        self.status = _("Type added successfully.")\n \n     def nextURL(self):\n         url = self.context.absolute_url()\n         if self.fti_id is not None:\n-            url += \'/{0}/@@fields\'.format(self.fti_id)\n+            url += f"/{self.fti_id}/@@fields"\n         return url\n \n+\n TypeAddFormPage = wrap_form(TypeAddForm)\ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 1ee12a28..07cda510 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -1,10 +1,10 @@\n-# -*- coding: utf-8 -*-\n from collections import Counter\n from copy import deepcopy\n from operator import attrgetter\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.layout import TypeFormLayout\n from plone.app.dexterity.interfaces import ITypeSchemaContext\n+from plone.base.utils import safe_text\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.registration import BehaviorRegistrationNotFound\n from plone.behavior.registration import lookup_behavior_registration\n@@ -18,52 +18,29 @@\n from zope.component import getUtilitiesFor\n from zope.lifecycleevent import modified\n \n-import six\n-\n-\n-try:\n-    from Products.CMFPlone.utils import safe_nativestring\n-except ImportError:\n-    # Not needed for Products.CMFPlone >= 5.2a1\n-    from Products.CMFPlone.utils import safe_encode\n-    from Products.CMFPlone.utils import safe_unicode\n-\n-    def safe_nativestring(value, encoding=\'utf-8\'):\n-        """Convert a value to str in py2 and to text in py3\n-        """\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = safe_encode(value, encoding)\n-        if not six.PY2 and isinstance(value, six.binary_type):\n-            value = safe_unicode(value, encoding)\n-        return value\n-\n \n TTW_BEHAVIOR_BLACKLIST = [\n     # skip deprecated behavior\n-    \'plone.app.dexterity.behaviors.related.IRelatedItems\',\n+    "plone.app.dexterity.behaviors.related.IRelatedItems",\n ]\n \n \n def behaviorConfigurationModified(object, event):\n-    description = DexterityFTIModificationDescription(\'behaviors\', \'\')\n+    description = DexterityFTIModificationDescription("behaviors", "")\n     modified(object.fti, description)\n \n \n @adapter(ITypeSchemaContext)\n-class BehaviorConfigurationAdapter(object):\n-\n+class BehaviorConfigurationAdapter:\n     def __init__(self, context):\n-        self.__dict__[\'context\'] = context\n-        self.__dict__[\'fti\'] = self.context.fti\n+        self.__dict__["context"] = context\n+        self.__dict__["fti"] = self.context.fti\n \n     def __getattr__(self, name):\n         # be sure to get a valid value\n         reg = lookup_behavior_registration(name=name)\n         iid = reg.interface.__identifier__\n-        return (\n-            iid in self.fti.behaviors or\n-            safe_nativestring(reg.name) in self.fti.behaviors\n-        )\n+        return iid in self.fti.behaviors or safe_text(reg.name) in self.fti.behaviors\n \n     def __setattr__(self, name, value):\n         # add or remove the behavior based on the value from the form\n@@ -76,7 +53,7 @@ def __setattr__(self, name, value):\n             if iid in self.fti.behaviors:\n                 behaviors.remove(iid)\n             # prepare named behavior for add/remove\n-            bname = safe_nativestring(reg.name)\n+            bname = safe_text(reg.name)\n         else:\n             # no name found -> prepare dotted behavior for add/remove instead\n             bname = iid\n@@ -98,29 +75,27 @@ def __iter__(self):\n                 # ignore wrong names\n                 continue\n             if reg.name:\n-                yield safe_nativestring(reg.name)\n+                yield safe_text(reg.name)\n             else:\n                 yield name\n \n \n class TypeBehaviorsForm(form.EditForm):\n \n-    template = ViewPageTemplateFile(\'behaviors.pt\')\n-    label = _(u\'Behaviors\')\n-    description = _(u\'Select the behaviors to enable for this content type.\')\n-    successMessage = _(u\'Behaviors successfully updated.\')\n-    noChangesMessage = _(u\'No changes were made.\')\n+    template = ViewPageTemplateFile("behaviors.pt")\n+    label = _("Behaviors")\n+    description = _("Select the behaviors to enable for this content type.")\n+    successMessage = _("Behaviors successfully updated.")\n+    noChangesMessage = _("No changes were made.")\n     buttons = deepcopy(form.EditForm.buttons)\n-    buttons[\'apply\'].title = _(u\'Save\')\n+    buttons["apply"].title = _("Save")\n \n     def getContent(self):\n         return BehaviorConfigurationAdapter(self.context)\n \n     @property\n     def fields(self):\n-        counts = Counter(\n-            [id(reg) for name, reg in getUtilitiesFor(IBehavior)]\n-        )\n+        counts = Counter([id(reg) for name, reg in getUtilitiesFor(IBehavior)])\n         fields = []\n         for name, reg in getUtilitiesFor(IBehavior):\n             if name in TTW_BEHAVIOR_BLACKLIST:\n@@ -129,16 +104,16 @@ def fields(self):\n             with_name = counts[id(reg)] > 1\n             if with_name and reg.name != name:\n                 continue\n-            fname = safe_nativestring(reg.name if reg.name else name)\n+            fname = safe_text(reg.name if reg.name else name)\n             fields.append(\n                 schema.Bool(\n                     __name__=fname,\n                     title=reg.title,\n                     description=reg.description,\n-                    required=False\n+                    required=False,\n                 )\n             )\n-        form_fields = field.Fields(*sorted(fields, key=attrgetter(\'title\')))\n+        form_fields = field.Fields(*sorted(fields, key=attrgetter("title")))\n         for ff in form_fields.values():\n             ff.widgetFactory = SingleCheckBoxFieldWidget\n         return form_fields\n@@ -146,4 +121,4 @@ def fields(self):\n \n class TypeBehaviorsPage(TypeFormLayout):\n     form = TypeBehaviorsForm\n-    label = _(u\'Behaviors\')\n+    label = _("Behaviors")\ndiff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py\nindex 5fd573cc..e3e0bd49 100644\n--- a/plone/app/dexterity/browser/clone_type.py\n+++ b/plone/app/dexterity/browser/clone_type.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.interfaces import ITypeSettings\n from plone.dexterity.fti import DexterityFTI\n@@ -10,31 +9,31 @@\n \n class TypeCloneForm(form.AddForm):\n \n-    label = _(u\'Clone Content Type\')\n-    fields = field.Fields(ITypeSettings).select(\'title\', \'id\')\n-    id = \'clone-type-form\'\n+    label = _("Clone Content Type")\n+    fields = field.Fields(ITypeSettings).select("title", "id")\n+    id = "clone-type-form"\n \n     def create(self, data):\n-        type_id = data.pop(\'id\')\n+        type_id = data.pop("id")\n         props = dict(self.context.fti.propertyItems())\n         # make sure we don\'t share the factory\n-        if props[\'factory\'] == self.context.fti.getId():\n-            del props[\'factory\']\n+        if props["factory"] == self.context.fti.getId():\n+            del props["factory"]\n \n-        props[\'title\'] = data[\'title\']\n-        props[\'add_view_expr\'] = props[\'add_view_expr\'].replace(\n-            self.context.fti.getId(),\n-            type_id\n+        props["title"] = data["title"]\n+        props["add_view_expr"] = props["add_view_expr"].replace(\n+            self.context.fti.getId(), type_id\n         )\n         fti = DexterityFTI(type_id, **props)\n         return fti\n \n     def add(self, fti):\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         ttool._setObject(fti.id, fti)\n-        self.status = _(u"Type cloned successfully.")\n+        self.status = _("Type cloned successfully.")\n \n     def nextURL(self):\n         return self.context.aq_parent.absolute_url()\n \n+\n TypeCloneFormPage = wrap_form(TypeCloneForm)\ndiff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml\nindex 8069d119..293b0c0c 100644\n--- a/plone/app/dexterity/browser/configure.zcml\n+++ b/plone/app/dexterity/browser/configure.zcml\n@@ -29,15 +29,13 @@\n       permission="zope2.View"\n       />\n \n-  <configure zcml:condition="have plone-51">\n-    <browser:page\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        name="folder_listing"\n-        class=".folder_listing.FolderView"\n-        template="folder_listing.pt"\n-        permission="zope2.View"\n-        />\n-  </configure>\n+  <browser:page\n+      for="plone.base.interfaces.IPloneSiteRoot"\n+      name="folder_listing"\n+      class=".folder_listing.FolderView"\n+      template="folder_listing.pt"\n+      permission="zope2.View"\n+      />\n \n   <!-- warning when editing default pages -->\n   <browser:viewlet\n@@ -52,7 +50,7 @@\n \n   <browser:page\n       name="dexterity-types"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".types.TypesContext"\n       permission="plone.schemaeditor.ManageSchemata"\n       allowed_interface="OFS.interfaces.IItem" />\ndiff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex 80ca225c..6432de6b 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -1,113 +1,106 @@\n-# -*- coding: utf-8 -*-\n # @@types-export view for dexterity types configlet. View support for the\n # "Export" button. This is done by repurposing the GS typeinfo export and\n # removing unselected type information from its output.\n+from io import BytesIO\n from lxml import etree\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from plone.supermodel import serializeModel\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_encode\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.context import TarballExportContext\n-from six import BytesIO\n from zipfile import ZipFile\n \n import time\n \n \n class SelectiveZipExportContext(TarballExportContext):\n-\n-    def __init__(self, tool, typelist, encoding=None, base_name=\'setup_tool\'):\n+    def __init__(self, tool, typelist, encoding=None, base_name="setup_tool"):\n \n         BaseContext.__init__(self, tool, encoding)\n \n         self.typelist = typelist\n-        self.filenames = [\'types.xml\']\n+        self.filenames = ["types.xml"]\n         for tn in typelist:\n-            self.filenames.append(\'types/{0}.xml\'.format(tn))\n+            self.filenames.append(f"types/{tn}.xml")\n \n         timestamp = time.gmtime()\n-        self._archive_filename = (base_name + \'-%4d%02d%02d%02d%02d%02d.zip\'\n-                                  % timestamp[:6])\n+        self._archive_filename = (\n+            base_name + "-%4d%02d%02d%02d%02d%02d.zip" % timestamp[:6]\n+        )\n \n         self._archive_stream = BytesIO()\n-        self._archive = ZipFile(self._archive_stream, \'w\')\n+        self._archive = ZipFile(self._archive_stream, "w")\n \n     def writeDataFile(self, filename, text, content_type, subdir=None):\n         if filename not in self.filenames:\n             return\n \n-        if filename == \'types.xml\':\n+        if filename == "types.xml":\n             # Remove all the types except our targets.\n             # Strategy: suck into ElementTree element, remove nodes,\n             # convert back to text, prettify.\n             root = etree.fromstring(text)\n             todelete = []\n             for element in root.getchildren():\n-                name = element.attrib[\'name\']\n-                if name != \'title\' and name not in self.typelist:\n+                name = element.attrib["name"]\n+                if name != "title" and name not in self.typelist:\n                     todelete.append(element)\n             for element in todelete:\n                 root.remove(element)\n             # Add a marker for ZopeSkel additions\n-            root.append(etree.Comment(\' -*- extra stuff goes here -*- \'))\n+            root.append(etree.Comment(" -*- extra stuff goes here -*- "))\n             # minor prettifying\n-            root_str = safe_unicode(etree.tostring(root))\n-            text = \'<?xml version="1.0"?>\\n{0}\'.format(root_str)\n-            text = text.replace(\'<!--\', \' <!--\')\n-            text = text.replace(\'-->\', \'-->\\n\')\n+            root_str = safe_text(etree.tostring(root))\n+            text = f\'<?xml version="1.0"?>\\n{root_str}\'\n+            text = text.replace("<!--", " <!--")\n+            text = text.replace("-->", "-->\\n")\n \n-        self._archive.writestr(filename, safe_encode(text))\n+        self._archive.writestr(filename, safe_bytes(text))\n \n \n class TypesExport(BrowserView):\n-    """Generate a types export archive for download\n-    """\n+    """Generate a types export archive for download"""\n \n     def __call__(self):\n         RESPONSE = self.request.RESPONSE\n-        ps = getToolByName(self.context, \'portal_setup\')\n+        ps = getToolByName(self.context, "portal_setup")\n \n-        items = self.request.selected.split(\',\')\n-        context = SelectiveZipExportContext(ps, items,\n-                                            base_name=\'dexterity_export\')\n-        handler = ps.getExportStep(u\'typeinfo\')\n+        items = self.request.selected.split(",")\n+        context = SelectiveZipExportContext(ps, items, base_name="dexterity_export")\n+        handler = ps.getExportStep("typeinfo")\n         handler(context)\n \n         filename = context.getArchiveFilename()\n \n-        RESPONSE.setHeader(\'Content-type\', \'application/zip\')\n-        RESPONSE.setHeader(\n-            \'Content-disposition\',\n-            \'attachment; filename={0}\'.format(filename)\n-        )\n+        RESPONSE.setHeader("Content-type", "application/zip")\n+        RESPONSE.setHeader("Content-disposition", f"attachment; filename={filename}")\n \n         return context.getArchive()\n \n \n class ModelsExport(BrowserView):\n     """Generate an archive for download of model xml files for selected\n-       types.\n+    types.\n     """\n \n     def __call__(self):\n         RESPONSE = self.request.RESPONSE\n-        pt = getToolByName(self.context, \'portal_types\')\n+        pt = getToolByName(self.context, "portal_types")\n \n-        items = self.request.selected.split(\',\')\n+        items = self.request.selected.split(",")\n \n         if len(items) == 1:\n             # return a single XML file\n \n             item = items[0]\n-            filename = \'{0}.xml\'.format(item)\n+            filename = f"{item}.xml"\n             text = serializeModel(pt[item].lookupModel())\n \n-            RESPONSE.setHeader(\'Content-type\', \'application/xml\')\n+            RESPONSE.setHeader("Content-type", "application/xml")\n             RESPONSE.setHeader(\n-                \'Content-disposition\',\n-                \'attachment; filename={0}\'.format(filename)\n+                "Content-disposition", f"attachment; filename={filename}"\n             )\n \n             return text\n@@ -116,26 +109,27 @@ def __call__(self):\n             # pack multiple items into a zip file\n \n             timestamp = time.gmtime()\n-            archive_filename = (\'dexterity_models-%4d%02d%02d%02d%02d%02d.zip\'\n-                                % timestamp[:6])\n+            archive_filename = (\n+                "dexterity_models-%4d%02d%02d%02d%02d%02d.zip" % timestamp[:6]\n+            )\n \n             archive_stream = BytesIO()\n-            archive = ZipFile(archive_stream, \'w\')\n+            archive = ZipFile(archive_stream, "w")\n \n             for item in items:\n-                filename = \'models/{0}.xml\'.format(item)\n+                filename = f"models/{item}.xml"\n                 text = serializeModel(pt[item].lookupModel())\n                 archive.writestr(filename, text)\n \n             archive.close()\n \n-            RESPONSE.setHeader(\'Content-type\', \'application/zip\')\n+            RESPONSE.setHeader("Content-type", "application/zip")\n             RESPONSE.setHeader(\n-                \'Content-disposition\',\n-                \'attachment; filename={0}\'.format(archive_filename)\n+                "Content-disposition",\n+                f"attachment; filename={archive_filename}",\n             )\n \n             return archive_stream.getvalue()\n \n         else:\n-            return \'\'\n+            return ""\ndiff --git a/plone/app/dexterity/browser/fields.py b/plone/app/dexterity/browser/fields.py\nindex 072ebdbf..ad0192f3 100644\n--- a/plone/app/dexterity/browser/fields.py\n+++ b/plone/app/dexterity/browser/fields.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.layout import TypeFormLayout\n from plone.schemaeditor.browser.schema.listing import ReadOnlySchemaListing\n@@ -14,19 +13,19 @@\n \n \n class EnhancedSchemaListing(SchemaListing):\n-\n     def handleModelEdit(self, action):\n-        self.request.response.redirect(\'@@modeleditor\')\n+        self.request.response.redirect("@@modeleditor")\n+\n \n-if pkg_resources.get_distribution(\'plone.resourceeditor\'):\n-    but = button.Button(\'modeleditor\', title=u\'Edit XML Field Model\')\n+if pkg_resources.get_distribution("plone.resourceeditor"):\n+    but = button.Button("modeleditor", title="Edit XML Field Model")\n     EnhancedSchemaListing.buttons += button.Buttons(but)\n     handler = button.Handler(but, EnhancedSchemaListing.handleModelEdit)\n     EnhancedSchemaListing.handlers.addHandler(but, handler)\n \n \n class TypeFieldsPage(TypeFormLayout):\n-    label = _(u\'Fields\')\n+    label = _("Fields")\n \n     @property\n     def form(self):\ndiff --git a/plone/app/dexterity/browser/folder_listing.py b/plone/app/dexterity/browser/folder_listing.py\nindex 1f1cb4a9..00e30e70 100644\n--- a/plone/app/dexterity/browser/folder_listing.py\n+++ b/plone/app/dexterity/browser/folder_listing.py\n@@ -10,13 +10,13 @@\n \n class FolderView(BrowserView):\n     def __init__(self, context, request):\n-        super(FolderView, self).__init__(context, request)\n+        super().__init__(context, request)\n \n-        self.plone_view = getMultiAdapter((context, request), name=u"plone")\n+        self.plone_view = getMultiAdapter((context, request), name="plone")\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=u"plone_portal_state"\n+            (context, request), name="plone_portal_state"\n         )\n-        self.pas_member = getMultiAdapter((context, request), name=u"pas_member")\n+        self.pas_member = getMultiAdapter((context, request), name="pas_member")\n \n         limit_display = getattr(self.request, "limit_display", None)\n         limit_display = int(limit_display) if limit_display is not None else 20\n@@ -89,5 +89,5 @@ def show_about(self):\n     def no_items_message(self):\n         return _(\n             "description_no_items_in_folder",\n-            default=u"There are currently no items in this folder.",\n+            default="There are currently no items in this folder.",\n         )\ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 1310ad78..dc130296 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -1,8 +1,8 @@\n-# -*- coding: utf-8 -*-\n """ Support for importing Dexterity types from GS zip file.\n """\n # XXX: need to make exceptions more specific, shorten messages\n from DateTime.DateTime import DateTime\n+from io import BytesIO\n from lxml import etree\n from plone.app.dexterity import _\n from plone.namedfile.field import NamedFile\n@@ -10,7 +10,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.interfaces import IImportContext\n-from six import BytesIO\n from z3c.form import field\n from z3c.form import form\n from zipfile import BadZipfile\n@@ -26,68 +25,73 @@\n \n \n class ITypeProfileImport(Interface):\n-    """ Fields for a zip import form\n-    """\n+    """Fields for a zip import form"""\n \n     profile_file = NamedFile(\n-        title=_(u\'Type profiles archive file\'),\n+        title=_("Type profiles archive file"),\n         required=True,\n     )\n \n     @invariant\n     def isGoodImportFile(data):\n-        nfile = getattr(data, \'profile_file\', None)\n+        nfile = getattr(data, "profile_file", None)\n         if nfile is None:\n             # let required validator handle this\n             return None\n         try:\n-            archive = ZipFile(BytesIO(data.profile_file.data), \'r\')\n+            archive = ZipFile(BytesIO(data.profile_file.data), "r")\n         except BadZipfile:\n             raise Invalid(\n-                _(u"Error: The file submitted must be a zip archive."),\n+                _("Error: The file submitted must be a zip archive."),\n             )\n         name_list = archive.namelist()\n         for fname in name_list:\n-            if fname == \'types.xml\':\n+            if fname == "types.xml":\n                 continue\n-            if os.path.dirname(fname) != \'types\' \\\n-               or os.path.splitext(fname)[1] != \'.xml\':\n+            if (\n+                os.path.dirname(fname) != "types"\n+                or os.path.splitext(fname)[1] != ".xml"\n+            ):\n                 raise Invalid(\n-                    _(u"Error: The file submitted must be a zip archive "\n-                      u"containing only type profile information.")\n+                    _(\n+                        "Error: The file submitted must be a zip archive "\n+                        "containing only type profile information."\n+                    )\n                 )\n \n         # check XML for basic integrity\n-        with archive.open(\'types.xml\', \'r\') as f:\n+        with archive.open("types.xml", "r") as f:\n             source = f.read()\n             root = etree.fromstring(source)\n-            if root.tag != \'object\':\n-                raise Invalid(_(u\'types.xml in archive is invalid.\'))\n+            if root.tag != "object":\n+                raise Invalid(_("types.xml in archive is invalid."))\n \n         # check against existing types; don\'t allow overwrites\n         site = getSite()\n-        existing_types = getToolByName(site, \'portal_types\').listContentTypes()\n+        existing_types = getToolByName(site, "portal_types").listContentTypes()\n         for element in root.getchildren():\n-            if element.tag == \'object\':\n+            if element.tag == "object":\n                 attribs = element.attrib\n-                if not attribs[\'meta_type\'] == \'Dexterity FTI\':\n-                    raise Invalid(_(\n-                        \'Types in archive must be only Dexterity types.\'\n-                    ),)\n-                if attribs[\'name\'] in existing_types:\n+                if not attribs["meta_type"] == "Dexterity FTI":\n+                    raise Invalid(\n+                        _("Types in archive must be only Dexterity types."),\n+                    )\n+                if attribs["name"] in existing_types:\n                     msg = (\n-                        u\'One or more types in the import archive is an \'\n-                        u\'existing type. Delete "%s" if you \'\n-                        u\'really wish to replace it.\'\n+                        "One or more types in the import archive is an "\n+                        \'existing type. Delete "%s" if you \'\n+                        "really wish to replace it."\n+                    )\n+                    raise Invalid(\n+                        _(msg, attribs["name"]),\n                     )\n-                    raise Invalid(_(msg, attribs[\'name\']), )\n \n \n @implementer(ITypeProfileImport)\n-class TypeProfileImport(object):\n+class TypeProfileImport:\n     form_fields = field.Fields(ITypeProfileImport)\n     profile_file = zope.schema.fieldproperty.FieldProperty(\n-        ITypeProfileImport[\'profile_file\']\n+        ITypeProfileImport["profile_file"]\n     )\n \n     def __init__(self, profile_file):\n@@ -96,32 +100,31 @@ def __init__(self, profile_file):\n \n class TypeProfileImportForm(form.AddForm):\n \n-    label = _(u\'Import Content Types\')\n+    label = _("Import Content Types")\n     description = _(\n-        u"You may import types by uploading a zip archive containing type "\n-        u"profiles. The import archive should contain a types.xml file and a "\n-        u"types directory containing one or more Dexterity type information "\n-        u"files. For a sample, create a content type and export it from the "\n-        u"Dexterity Content Types page."\n+        "You may import types by uploading a zip archive containing type "\n+        "profiles. The import archive should contain a types.xml file and a "\n+        "types directory containing one or more Dexterity type information "\n+        "files. For a sample, create a content type and export it from the "\n+        "Dexterity Content Types page."\n     )\n     fields = field.Fields(ITypeProfileImport)\n-    id = \'import-types-form\'\n+    id = "import-types-form"\n \n     def create(self, data):\n         return TypeProfileImport(**data)\n \n     def add(self, profile_import):\n         # initialize import context\n-        types_tool = getToolByName(self.context, \'portal_types\')\n+        types_tool = getToolByName(self.context, "portal_types")\n         import_context = ZipFileImportContext(\n-            types_tool,\n-            BytesIO(profile_import.profile_file.data)\n+            types_tool, BytesIO(profile_import.profile_file.data)\n         )\n         # run the profile\n-        setup_tool = getToolByName(self.context, \'portal_setup\')\n-        handler = setup_tool.getImportStep(u\'typeinfo\')\n+        setup_tool = getToolByName(self.context, "portal_setup")\n+        handler = setup_tool.getImportStep("typeinfo")\n         handler(import_context)\n-        self.status = _(u"Imported successfully.")\n+        self.status = _("Imported successfully.")\n \n     def nextURL(self):\n         url = self.context.absolute_url()\n@@ -133,21 +136,21 @@ def nextURL(self):\n \n @implementer(IImportContext)\n class ZipFileImportContext(BaseContext):\n-    """ GS Import context for a ZipFile """\n+    """GS Import context for a ZipFile"""\n \n     def __init__(self, tool, archive_bits, encoding=None, should_purge=False):\n-        super(ZipFileImportContext, self).__init__(tool, encoding)\n-        self._archive = ZipFile(archive_bits, \'r\')\n+        super().__init__(tool, encoding)\n+        self._archive = ZipFile(archive_bits, "r")\n         self._should_purge = bool(should_purge)\n         self.name_list = self._archive.namelist()\n \n     def readDataFile(self, filename, subdir=None):\n \n         if subdir is not None:\n-            filename = \'/\'.join((subdir, filename))\n+            filename = "/".join((subdir, filename))\n \n         try:\n-            file = self._archive.open(filename, \'r\')\n+            file = self._archive.open(filename, "r")\n         except KeyError:\n             return None\n \n@@ -161,29 +164,30 @@ def getLastModified(self, path):\n         return DateTime(*zip_info.date_time)\n \n     def isDirectory(self, path):\n-        """ See IImportContext """\n+        """See IImportContext"""\n \n         # namelist only includes full filenames, not directories\n         return path not in self.name_list\n \n     def listDirectory(self, path, skip=[]):\n-        """ See IImportContext """\n+        """See IImportContext"""\n \n         # namelist contains only full path/filenames, not\n         # directories. But we need to include directories.\n \n         if path is None:\n-            path = \'\'\n-        path_parts = path.split(\'/\')\n+            path = ""\n+        path_parts = path.split("/")\n         res = set()\n         for pn in self.name_list:\n             dn, bn = os.path.split(pn)\n-            dn_parts = dn.split(\'/\')\n+            dn_parts = dn.split("/")\n             if dn == path:\n                 if bn not in skip:\n                     res.add(bn)\n                 continue\n-            if dn.startswith(path) \\\n-               and (path == \'\' or len(dn_parts) == len(path_parts) + 1):\n+            if dn.startswith(path) and (\n+                path == "" or len(dn_parts) == len(path_parts) + 1\n+            ):\n                 res.add(dn_parts[-1])\n         return list(res)\ndiff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py\nindex b4287677..4854d9fa 100644\n--- a/plone/app/dexterity/browser/layout.py\n+++ b/plone/app/dexterity/browser/layout.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.z3cform.layout import FormWrapper\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -6,12 +5,12 @@\n \n class TypeFormLayout(FormWrapper):\n \n-    index = ViewPageTemplateFile(\'tabbed_forms.pt\')\n+    index = ViewPageTemplateFile("tabbed_forms.pt")\n \n     @property\n     def tabs(self):\n         return (\n-            (_(\'Overview\'), \'@@overview\'),\n-            (_(\'Fields\'), \'@@fields\'),\n-            (_(\'Behaviors\'), \'@@behaviors\'),\n+            (_("Overview"), "@@overview"),\n+            (_("Fields"), "@@fields"),\n+            (_("Behaviors"), "@@behaviors"),\n         )\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex ea3fcfb3..c6a9fcb6 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -36,7 +36,7 @@ def model_source(self):\n         return serializeModel(model)\n \n     def authorized(self, context, request):\n-        authenticator = queryMultiAdapter((context, request), name=u"authenticator")\n+        authenticator = queryMultiAdapter((context, request), name="authenticator")\n         return authenticator and authenticator.verify()\n \n     def __call__(self):\n@@ -61,7 +61,7 @@ def __call__(self):\n                 root = etree.fromstring(source, parser=parser)\n             except etree.XMLSyntaxError as e:\n                 IStatusMessage(self.request).addStatusMessage(\n-                    "XMLSyntaxError: {0}".format(html.escape(safe_text(e.args[0]))),\n+                    f"XMLSyntaxError: {html.escape(safe_text(e.args[0]))}",\n                     "error",\n                 )\n                 return super().__call__()\n@@ -69,7 +69,7 @@ def __call__(self):\n             # a little more sanity checking, look at first two element levels\n             if root.tag != NAMESPACE + "model":\n                 IStatusMessage(self.request).addStatusMessage(\n-                    _(u"Error: root tag must be \'model\'"),\n+                    _("Error: root tag must be \'model\'"),\n                     "error",\n                 )\n                 return super().__call__()\n@@ -77,7 +77,7 @@ def __call__(self):\n             for element in root.getchildren():\n                 if element.tag != NAMESPACE + "schema":\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(u"Error: all model elements must be \'schema\'"),\n+                        _("Error: all model elements must be \'schema\'"),\n                         "error",\n                     )\n                     return super().__call__()\n@@ -85,11 +85,11 @@ def __call__(self):\n             # can supermodel parse it?\n             # This is mainly good for catching bad dotted names.\n             try:\n-                loadString(source, policy=u"dexterity")\n+                loadString(source, policy="dexterity")\n             except SupermodelParseError as e:\n                 message = e.args[0].replace(\'\\n  File "<unknown>"\', "")\n                 IStatusMessage(self.request).addStatusMessage(\n-                    u"SuperModelParseError: {0}".format(html.escape(message)),\n+                    f"SuperModelParseError: {html.escape(message)}",\n                     "error",\n                 )\n                 return super().__call__()\ndiff --git a/plone/app/dexterity/browser/overview.py b/plone/app/dexterity/browser/overview.py\nindex 0762894b..ec91e6de 100644\n--- a/plone/app/dexterity/browser/overview.py\n+++ b/plone/app/dexterity/browser/overview.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.layout import TypeFormLayout\n from plone.app.dexterity.interfaces import ITypeSettings\n@@ -11,7 +10,7 @@\n \n class TypeOverviewForm(form.EditForm):\n     enableCSRFProtection = True\n-    template = ViewPageTemplateFile(\'overview.pt\')\n+    template = ViewPageTemplateFile("overview.pt")\n \n     @property\n     def fields(self):\n@@ -19,11 +18,11 @@ def fields(self):\n         # remove the field for filtering contained content types\n         klass = resolveDottedName(self.context.fti.klass)\n         fields = field.Fields(ITypeSettings)\n-        filtered = fields.select(\'title\', \'description\',\n-                                 \'allowed_content_types\',\n-                                 \'filter_content_types\')\n+        filtered = fields.select(\n+            "title", "description", "allowed_content_types", "filter_content_types"\n+        )\n         if not IFolderish.implementedBy(klass):\n-            del filtered[\'filter_content_types\']\n+            del filtered["filter_content_types"]\n         return filtered\n \n     def getContent(self):\n@@ -32,4 +31,4 @@ def getContent(self):\n \n class TypeOverviewPage(TypeFormLayout):\n     form = TypeOverviewForm\n-    label = _(u\'Overview\')\n+    label = _("Overview")\ndiff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py\nindex c70f7117..1bf8f5c6 100644\n--- a/plone/app/dexterity/browser/types.py\n+++ b/plone/app/dexterity/browser/types.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.dexterity import _\n from plone.app.dexterity.browser.utils import UTF8Property\n@@ -13,8 +12,9 @@\n from plone.z3cform.crud import crud\n from plone.z3cform.layout import FormWrapper\n from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile as FiveViewPageTemplateFile  # noqa\n-from six.moves import urllib\n+from Products.Five.browser.pagetemplatefile import (\n+    ViewPageTemplateFile as FiveViewPageTemplateFile,\n+)\n from z3c.form import button\n from z3c.form import field\n from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\n@@ -27,33 +27,35 @@\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n+import urllib\n+\n \n ALLOWED_FIELDS = [\n-    u\'plone.app.textfield.RichText\',\n-    u\'plone.namedfile.field.NamedBlobImage\',\n-    u\'plone.namedfile.field.NamedBlobFile\',\n-    u\'plone.schema.email.Email\',\n-    u\'z3c.relationfield.schema.RelationChoice\',\n-    u\'z3c.relationfield.schema.RelationList\',\n-    u\'zope.schema._bootstrapfields.Bool\',\n-    u\'zope.schema._bootstrapfields.Int\',\n-    u\'plone.schema.jsonfield.JSONField\',\n-    u\'zope.schema._bootstrapfields.Password\',\n-    u\'zope.schema._bootstrapfields.Text\',\n-    u\'zope.schema._bootstrapfields.TextLine\',\n-    u\'zope.schema._field.Choice\',\n-    u\'zope.schema._field.Date\',\n-    u\'zope.schema._field.Datetime\',\n-    u\'zope.schema._field.Float\',\n-    u\'zope.schema._field.Set\',\n-    u\'zope.schema._field.URI\',\n+    "plone.app.textfield.RichText",\n+    "plone.namedfile.field.NamedBlobImage",\n+    "plone.namedfile.field.NamedBlobFile",\n+    "plone.schema.email.Email",\n+    "z3c.relationfield.schema.RelationChoice",\n+    "z3c.relationfield.schema.RelationList",\n+    "zope.schema._bootstrapfields.Bool",\n+    "zope.schema._bootstrapfields.Int",\n+    "plone.schema.jsonfield.JSONField",\n+    "zope.schema._bootstrapfields.Password",\n+    "zope.schema._bootstrapfields.Text",\n+    "zope.schema._bootstrapfields.TextLine",\n+    "zope.schema._field.Choice",\n+    "zope.schema._field.Date",\n+    "zope.schema._field.Datetime",\n+    "zope.schema._field.Float",\n+    "zope.schema._field.Set",\n+    "zope.schema._field.URI",\n ]\n \n \n class TypeEditSubForm(crud.EditSubForm):\n-    """ Content type edit subform. Just here to use a custom template.\n-    """\n-    template = ViewPageTemplateFile(\'types_listing_row.pt\')\n+    """Content type edit subform. Just here to use a custom template."""\n+\n+    template = ViewPageTemplateFile("types_listing_row.pt")\n \n \n class TypeEditForm(crud.EditForm):\n@@ -65,63 +67,58 @@ class TypeEditForm(crud.EditForm):\n     label = None\n     editsubform_factory = TypeEditSubForm\n \n-    buttons = crud.EditForm.buttons.copy().omit(\'edit\')\n+    buttons = crud.EditForm.buttons.copy().omit("edit")\n     handlers = crud.EditForm.handlers.copy()\n \n-    @button.buttonAndHandler(_(u\'Clone\'))\n+    @button.buttonAndHandler(_("Clone"))\n     def handleClone(self, action):\n         selected = self.selected_items()\n \n         if len(selected) > 1:\n-            self.status = _(u\'Please select a single type to clone.\')\n+            self.status = _("Please select a single type to clone.")\n         elif len(selected) == 1:\n             id = selected[0][0]\n-            url = \'{0}/{1}/@@clone\'.format(\n-                self.context.context.absolute_url(),\n-                id\n-            )\n+            url = f"{self.context.context.absolute_url()}/{id}/@@clone"\n             self.request.response.redirect(url)\n         else:\n-            self.status = _(u\'Please select a type to clone.\')\n+            self.status = _("Please select a type to clone.")\n \n-    @button.buttonAndHandler(_(u\'Export Type Profiles\'))\n+    @button.buttonAndHandler(_("Export Type Profiles"))\n     def handleExport(self, action):\n-        selected = \',\'.join([items[0] for items in self.selected_items()])\n+        selected = ",".join([items[0] for items in self.selected_items()])\n \n         if len(selected) == 0:\n-            self.status = _(u\'Please select types to export.\')\n+            self.status = _("Please select types to export.")\n         elif len(selected) > 0:\n-            url = \'{0}/@@types-export?selected={1}\'.format(\n+            url = "{}/@@types-export?selected={}".format(\n                 self.context.context.absolute_url(),\n                 urllib.parse.quote(selected),\n             )\n             self.request.response.redirect(url)\n \n-    @button.buttonAndHandler(_(u\'Export Schema Models\'))\n+    @button.buttonAndHandler(_("Export Schema Models"))\n     def handleExportModels(self, action):\n-        selected = \',\'.join([items[0] for items in self.selected_items()])\n+        selected = ",".join([items[0] for items in self.selected_items()])\n \n         if len(selected) == 0:\n-            self.status = _(u\'Please select types to export.\')\n+            self.status = _("Please select types to export.")\n         elif len(selected) > 0:\n-            url = \'{0}/@@models-export?selected={1}\'.format(\n-                self.context.context.absolute_url(),\n-                urllib.parse.quote(selected)\n+            url = "{}/@@models-export?selected={}".format(\n+                self.context.context.absolute_url(), urllib.parse.quote(selected)\n             )\n             self.request.response.redirect(url)\n \n \n class TypesEditFormWrapper(FormWrapper):\n-    """ Render Plone frame around our form with little modifications """\n+    """Render Plone frame around our form with little modifications"""\n \n     form = TypeEditForm\n-    index = FiveViewPageTemplateFile(\'typesformwrapper.pt\')\n+    index = FiveViewPageTemplateFile("typesformwrapper.pt")\n \n \n @adapter(IDexterityFTI)\n @implementer(ITypeSettings)\n-class TypeSettingsAdapter(object):\n-\n+class TypeSettingsAdapter:\n     def __init__(self, context):\n         self.context = context\n \n@@ -129,8 +126,8 @@ def __init__(self, context):\n     def id(self):\n         return self.context.getId()\n \n-    title = UTF8Property(\'title\')\n-    description = UTF8Property(\'description\')\n+    title = UTF8Property("title")\n+    description = UTF8Property("description")\n \n     @property\n     def container(self):\n@@ -147,65 +144,64 @@ def _set_allowed_content_types(self, value):\n             self.context.filter_content_types = True\n \n     allowed_content_types = property(\n-        _get_allowed_content_types, _set_allowed_content_types)\n+        _get_allowed_content_types, _set_allowed_content_types\n+    )\n \n     def _get_filter_content_types(self):\n         value = self.context.filter_content_types\n         if not value:\n-            return \'all\'\n+            return "all"\n         elif value and not self.allowed_content_types:\n-            return \'none\'\n+            return "none"\n         else:\n-            return \'some\'\n+            return "some"\n \n     def _set_filter_content_types(self, value):\n-        if value == \'none\':\n+        if value == "none":\n             self.context.filter_content_types = True\n             self.context.allowed_content_types = ()\n-        elif value == \'all\':\n+        elif value == "all":\n             self.context.filter_content_types = False\n-        elif value == \'some\':\n+        elif value == "some":\n             self.context.filter_content_types = True\n \n     filter_content_types = property(\n-        _get_filter_content_types, _set_filter_content_types)\n+        _get_filter_content_types, _set_filter_content_types\n+    )\n \n \n @adapter(IDexterityFTI)\n @implementer(ITypeStats)\n-class TypeStatsAdapter(object):\n-\n+class TypeStatsAdapter:\n     def __init__(self, context):\n         self.context = context\n \n     @property\n     def item_count(self):\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        lengths = dict(\n-            catalog.Indexes[\'portal_type\'].uniqueValues(withLengths=True))\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        lengths = dict(catalog.Indexes["portal_type"].uniqueValues(withLengths=True))\n         return lengths.get(self.context.getId(), 0)\n \n \n class TypesListing(crud.CrudForm):\n-    """ The combined content type edit + add forms.\n-    """\n+    """The combined content type edit + add forms."""\n \n     @lazy_property\n     def description(self):\n         if self.get_items():\n             return _(\n-                u\'The following custom content types are available for your \'\n-                u\'site.\'\n+                "The following custom content types are available for your " "site."\n             )\n         return _(\n-            \'help_addcontenttype_button\',\n-            default=u\'Content types show up on Plone\\\'s "Add Item" menu and \'\n-            u\'allow you to store custom data in your site. Click the \'\n-            u\'"Add Content Type" button to begin creating a new \'\n-            u\'content type with its own fields.\')\n-\n-    template = ViewPageTemplateFile(\'types_listing.pt\')\n-    view_schema = field.Fields(ITypeSettings).select(\'title\', \'description\')\n+            "help_addcontenttype_button",\n+            default=\'Content types show up on Plone\\\'s "Add Item" menu and \'\n+            "allow you to store custom data in your site. Click the "\n+            \'"Add Content Type" button to begin creating a new \'\n+            "content type with its own fields.",\n+        )\n+\n+    template = ViewPageTemplateFile("types_listing.pt")\n+    view_schema = field.Fields(ITypeSettings).select("title", "description")\n     view_schema += field.Fields(ITypeStats)\n     addform_factory = crud.NullForm\n     editform_factory = TypeEditForm\n@@ -220,9 +216,8 @@ def get_items(self):\n         return [(fti.__name__, fti) for fti in ftis]\n \n     def remove(self, id_and_item):\n-        """ Remove a content type.\n-        """\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        """Remove a content type."""\n+        ttool = getToolByName(self.context, "portal_types")\n         ttool.manage_delObjects([id_and_item[0]])\n \n     def link(self, item, field):\n@@ -230,28 +225,28 @@ def link(self, item, field):\n \n         (But only for types with schemata that can be edited through the web.)\n         """\n-        if field == \'title\':\n-            return \'{0}/{1}\'.format(\n-                self.context.absolute_url(),\n-                urllib.parse.quote(item.__name__)\n+        if field == "title":\n+            return "{}/{}".format(\n+                self.context.absolute_url(), urllib.parse.quote(item.__name__)\n             )\n \n+\n # Create a form wrapper so the form gets layout.\n TypesListingPage = layout.wrap_form(\n-    TypesListing, __wrapper_class=TypesEditFormWrapper,\n-    label=_(u\'Content Types\'))\n+    TypesListing, __wrapper_class=TypesEditFormWrapper, label=_("Content Types")\n+)\n \n \n @implementer(ITypeSchemaContext)\n class TypeSchemaContext(SchemaContext):\n \n     fti = None\n-    schemaName = u\'\'\n-    schemaEditorView = \'fields\'\n+    schemaName = ""\n+    schemaEditorView = "fields"\n     allowedFields = ALLOWED_FIELDS\n \n     def browserDefault(self, request):\n-        return self, (\'@@overview\',)\n+        return self, ("@@overview",)\n \n     @property\n     def additionalSchemata(self):\n@@ -269,14 +264,14 @@ class TypesContext(SimpleItem):\n     """\n \n     def __init__(self, context, request):\n-        super(TypesContext, self).__init__(context, request)\n+        super().__init__(context, request)\n \n         # make sure that breadcrumbs will be correct\n         self.id = None\n-        self.Title = lambda: _(u\'Content Types\')\n+        self.Title = lambda: _("Content Types")\n \n         # turn off green edit border for anything in the type control panel\n-        request.set(\'disable_border\', 1)\n+        request.set("disable_border", 1)\n \n     def publishTraverse(self, request, name):\n         """Traverse to a schema context.\n@@ -290,16 +285,14 @@ def publishTraverse(self, request, name):\n         try:\n             fti = getUtility(IDexterityFTI, name=name)\n         except ComponentLookupError:\n-            return DefaultPublishTraverse(self, request).publishTraverse(\n-                request,\n-                name\n-            )\n+            return DefaultPublishTraverse(self, request).publishTraverse(request, name)\n \n         schema = fti.lookupSchema()\n         schema_context = TypeSchemaContext(\n-            schema, request, name=name, title=fti.title).__of__(self)\n+            schema, request, name=name, title=fti.title\n+        ).__of__(self)\n         schema_context.fti = fti\n-        schema_context.schemaName = u\'\'\n+        schema_context.schemaName = ""\n         return schema_context\n \n     def browserDefault(self, request):\n@@ -308,4 +301,4 @@ def browserDefault(self, request):\n         If we aren\'t traversing to a schema beneath the types configlet,\n         we actually want to see the TypesListingPage.\n         """\n-        return self, (\'@@edit\',)\n+        return self, ("@@edit",)\ndiff --git a/plone/app/dexterity/browser/utils.py b/plone/app/dexterity/browser/utils.py\nindex 0107441a..17f47a43 100644\n--- a/plone/app/dexterity/browser/utils.py\n+++ b/plone/app/dexterity/browser/utils.py\n@@ -1,19 +1,9 @@\n-# -*- coding: utf-8 -*-\n-import six\n-\n-\n-class UTF8Property(object):\n-\n+class UTF8Property:\n     def __init__(self, name):\n         self.name = name\n \n     def __get__(self, inst, type=None):\n-        value = getattr(inst.context, self.name)\n-        if six.PY2 and isinstance(value, six.binary_type):\n-            value = value.decode(\'utf8\')\n-        return value\n+        return getattr(inst.context, self.name)\n \n     def __set__(self, inst, value):\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode(\'utf8\')\n         setattr(inst.context, self.name, value)\ndiff --git a/plone/app/dexterity/configure.zcml b/plone/app/dexterity/configure.zcml\nindex d9494d43..135ded4b 100644\n--- a/plone/app/dexterity/configure.zcml\n+++ b/plone/app/dexterity/configure.zcml\n@@ -23,7 +23,7 @@\n       description="Configures various components needed for full Dexterity support."\n       directory="profiles/default"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       />\n \n   <genericsetup:registerProfile\n@@ -32,7 +32,7 @@\n       description="Adds Dexterity-based Folder and Document types for testing."\n       directory="profiles/testing"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"\n+      for="plone.base.interfaces.ITestCasePloneSiteRoot"\n       />\n \n   <include package=".browser" />\ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex 0499e077..f0bca286 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n+from _thread import allocate_lock\n from plone.app.dexterity.interfaces import IDXFileFactory\n+from plone.base.utils import safe_text\n from plone.dexterity.utils import createContentInContainer\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore.interfaces._content import IFolderish\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils as ploneutils\n-from six.moves._thread import allocate_lock\n from zope.component import adapter\n from zope.container.interfaces import INameChooser\n from zope.interface import implementer\n@@ -17,16 +16,15 @@\n \n @adapter(IFolderish)\n @implementer(IDXFileFactory)\n-class DXFileFactory(object):\n-\n+class DXFileFactory:\n     def __init__(self, context):\n         self.context = context\n \n     def __call__(self, name, content_type, data):\n-        ctr = getToolByName(self.context, \'content_type_registry\')\n-        type_ = ctr.findTypeName(name.lower(), content_type, data) or \'File\'\n+        ctr = getToolByName(self.context, "content_type_registry")\n+        type_ = ctr.findTypeName(name.lower(), content_type, data) or "File"\n \n-        name = ploneutils.safe_unicode(name)\n+        name = safe_text(name)\n \n         chooser = INameChooser(self.context)\n \n@@ -42,29 +40,18 @@ def __call__(self, name, content_type, data):\n             # XXX heuristics are harmful behavior, here a better implemenation\n             #     is needed\n             filename = name\n-            if \'Image\' in type_:\n+            if "Image" in type_:\n                 image = NamedBlobImage(\n-                    data=data,\n-                    filename=filename,\n-                    contentType=content_type\n+                    data=data, filename=filename, contentType=content_type\n                 )\n                 obj = createContentInContainer(\n-                    self.context, type_,\n-                    id=newid,\n-                    image=image\n+                    self.context, type_, id=newid, image=image\n                 )\n             else:\n                 file = NamedBlobFile(\n-                    data=data,\n-                    filename=filename,\n-                    contentType=content_type\n-                )\n-                obj = createContentInContainer(\n-                    self.context,\n-                    type_,\n-                    id=newid,\n-                    file=file\n+                    data=data, filename=filename, contentType=content_type\n                 )\n+                obj = createContentInContainer(self.context, type_, id=newid, file=file)\n \n             obj.title = name\n             obj.reindexObject()\ndiff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py\nindex 6a0d7762..180e8c92 100644\n--- a/plone/app/dexterity/interfaces.py\n+++ b/plone/app/dexterity/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.dexterity import _\n from Products.CMFCore.utils import getToolByName\n@@ -14,25 +13,23 @@\n \n \n class ITypesContext(IBrowserPage):\n-    """ A non-persistent traversable item corresponding to a Dexterity FTI\n-    """\n+    """A non-persistent traversable item corresponding to a Dexterity FTI"""\n \n \n class ITypeSchemaContext(Interface):\n-    """ Marker interface for plone.schemaeditor schema contexts that are\n-        associated with a Dexterity FTI """\n+    """Marker interface for plone.schemaeditor schema contexts that are\n+    associated with a Dexterity FTI"""\n \n-    fti = Attribute(u"The FTI object associated with this schema.")\n-    schemaName = Attribute(u"The name of this schema within its FTI\'s model.")\n+    fti = Attribute("The FTI object associated with this schema.")\n+    schemaName = Attribute("The name of this schema within its FTI\'s model.")\n \n \n class InvalidIdError(schema.ValidationError):\n-    __doc__ = _(\n-        u\'Please use only letters, numbers and the following characters: .-_\')\n+    __doc__ = _("Please use only letters, numbers and the following characters: .-_")\n \n \n # a letter followed by letters, numbers, period, hyphen, or underscore\n-ID_RE = re.compile(r\'^[a-z][\\w\\d\\.-]*$\')\n+ID_RE = re.compile(r"^[a-z][\\w\\d\\.-]*$")\n \n \n def isValidId(value):\n@@ -42,100 +39,89 @@ def isValidId(value):\n \n \n class ITypeSettings(Interface):\n-    """ Define the fields for the content type add form\n-    """\n+    """Define the fields for the content type add form"""\n+\n     title = schema.TextLine(\n-        title=_(u\'Type Name\'),\n+        title=_("Type Name"),\n     )\n \n     id = schema.ASCIILine(\n-        title=_(u\'Short Name\'),\n-        description=_(u\'Used for programmatic access to the type.\'),\n+        title=_("Short Name"),\n+        description=_("Used for programmatic access to the type."),\n         required=True,\n         constraint=isValidId,\n     )\n \n-    description = schema.Text(\n-        title=_(u\'Description\'),\n-        required=False\n-    )\n+    description = schema.Text(title=_("Description"), required=False)\n \n     container = schema.Bool(\n-        title=_(u\'Container\'),\n-        description=_(\n-            u\'Items of this type will be able to contain other items.\'),\n+        title=_("Container"),\n+        description=_("Items of this type will be able to contain other items."),\n         required=True,\n         default=False,\n     )\n \n     filter_content_types = schema.Choice(\n-        title=_(u\'Filter Contained Types\'),\n+        title=_("Filter Contained Types"),\n         description=_(\n-            \'label_filter_contained_types\',\n+            "label_filter_contained_types",\n             default=(\n-                u\'Items of this type can act as a folder containing other \'\n-                u\' items. What content types should be allowed inside?\')\n+                "Items of this type can act as a folder containing other "\n+                " items. What content types should be allowed inside?"\n+            ),\n         ),\n-        values=(\'none\', \'all\', \'some\'),\n-        default=\'none\',\n-        required=True\n+        values=("none", "all", "some"),\n+        default="none",\n+        required=True,\n     )\n \n     allowed_content_types = schema.Set(\n-        title=_(u\'Allowed Content Types\'),\n+        title=_("Allowed Content Types"),\n         required=False,\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n-            required=False\n-        )\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes", required=False\n+        ),\n     )\n \n \n class ITypeStats(Interface):\n \n     item_count = schema.Int(\n-        title=_(u\'# of items\'),\n+        title=_("# of items"),\n     )\n \n \n class TypeIdValidator(validator.SimpleFieldValidator):\n-\n     def validate(self, value):\n-        super(TypeIdValidator, self).validate(value)\n+        super().validate(value)\n \n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         if value in ttool.objectIds():\n-            msg = u"There is already a content type named \'${name}\'"\n-            raise Invalid(_(msg, mapping={\'name\': value}))\n+            msg = "There is already a content type named \'${name}\'"\n+            raise Invalid(_(msg, mapping={"name": value}))\n \n \n-validator.WidgetValidatorDiscriminators(\n-    TypeIdValidator,\n-    field=ITypeSettings[\'id\']\n-)\n+validator.WidgetValidatorDiscriminators(TypeIdValidator, field=ITypeSettings["id"])\n \n \n class TypeTitleValidator(validator.SimpleFieldValidator):\n-\n     def validate(self, value):\n-        super(TypeTitleValidator, self).validate(value)\n+        super().validate(value)\n \n-        ttool = getToolByName(self.context, \'portal_types\')\n+        ttool = getToolByName(self.context, "portal_types")\n         for existing_fti in ttool.objectValues():\n             if aq_base(existing_fti) is aq_base(self.context):\n                 continue\n \n             if existing_fti.Title() == value:\n-                msg = u"There is already a content type named \'${name}\'"\n-                raise Invalid(_(msg, mapping={\'name\': value}))\n+                msg = "There is already a content type named \'${name}\'"\n+                raise Invalid(_(msg, mapping={"name": value}))\n \n \n validator.WidgetValidatorDiscriminators(\n-    TypeTitleValidator,\n-    field=ITypeSettings[\'title\']\n+    TypeTitleValidator, field=ITypeSettings["title"]\n )\n \n \n class IDXFileFactory(IFileFactory):\n-    """ adapter factory for DX types\n-    """\n+    """adapter factory for DX types"""\ndiff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py\nindex 0c8b8939..93d5caa0 100644\n--- a/plone/app/dexterity/permissions.py\n+++ b/plone/app/dexterity/permissions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.autoform.interfaces import WIDGETS_KEY\n@@ -32,11 +31,10 @@ class MockRequest(TestRequest):\n \n @adapter(IDexterityContent)\n @implementer(IFieldPermissionChecker)\n-class DXFieldPermissionChecker(object):\n-    """\n-    """\n+class DXFieldPermissionChecker:\n+    """ """\n \n-    DEFAULT_PERMISSION = \'Modify portal content\'\n+    DEFAULT_PERMISSION = "Modify portal content"\n \n     def __init__(self, context):\n         self.context = context\n@@ -48,10 +46,9 @@ def _get_schemata(self):\n     def _validate_vocabulary_name(self, schema, field, vocabulary_name):\n         if not vocabulary_name:\n             return True\n-        if (\n-            vocabulary_name != getattr(field, \'vocabulary\', None) and\n-            vocabulary_name != getattr(field, \'vocabularyName\', None)\n-        ):\n+        if vocabulary_name != getattr(\n+            field, "vocabulary", None\n+        ) and vocabulary_name != getattr(field, "vocabularyName", None):\n             # Determine the widget to check for vocabulary there\n             widgets = mergedTaggedValueDict(schema, WIDGETS_KEY)\n             widget = widgets.get(field.getName())\n@@ -62,13 +59,10 @@ def _validate_vocabulary_name(self, schema, field, vocabulary_name):\n                     widget = widget(field, self._request)\n             else:\n                 # default widget\n-                widget = queryMultiAdapter(\n-                    (field, self._request),\n-                    IFieldWidget\n-                )\n+                widget = queryMultiAdapter((field, self._request), IFieldWidget)\n             if widget:\n                 widget.update()\n-            if getattr(widget, \'vocabulary\', None) != vocabulary_name:\n+            if getattr(widget, "vocabulary", None) != vocabulary_name:\n                 return False\n         return True\n \n@@ -83,24 +77,14 @@ def validate(self, field_name, vocabulary_name=None):\n             # match the vocabulary name for the field or widget,\n             # fail.\n             field = schema[field_name]\n-            if not self._validate_vocabulary_name(\n-                schema,\n-                field,\n-                vocabulary_name\n-            ):\n+            if not self._validate_vocabulary_name(schema, field, vocabulary_name):\n                 return False\n             # Create mapping of all schema permissions\n-            permissions = mergedTaggedValueDict(\n-                schema,\n-                WRITE_PERMISSIONS_KEY\n-            )\n+            permissions = mergedTaggedValueDict(schema, WRITE_PERMISSIONS_KEY)\n             permission_name = permissions.get(field_name, None)\n             if permission_name is not None:\n                 # if we have explicit permissions, check them\n-                permission = queryUtility(\n-                    IPermission,\n-                    name=permission_name\n-                )\n+                permission = queryUtility(IPermission, name=permission_name)\n                 if permission:\n                     return checker(permission.title, context)\n \n@@ -108,19 +92,19 @@ def validate(self, field_name, vocabulary_name=None):\n             # specified, fall back to the default edit permission\n             return checker(self.DEFAULT_PERMISSION, context)\n         else:\n-            raise AttributeError(\'No such field: {0}\'.format(field_name))\n+            raise AttributeError(f"No such field: {field_name}")\n \n \n @adapter(IForm)\n class GenericFormFieldPermissionChecker(DXFieldPermissionChecker):\n     """Permission checker for when we just have an add view"""\n \n-    DEFAULT_PERMISSION = \'Add portal content\'\n+    DEFAULT_PERMISSION = "Add portal content"\n \n     def __init__(self, view):\n-        if getattr(view, \'form_instance\', None) is not None:\n+        if getattr(view, "form_instance", None) is not None:\n             view = view.form_instance\n-        if getattr(view, \'create\', None):\n+        if getattr(view, "create", None):\n             content = view.create({})\n             self.context = content.__of__(view.context)\n         else:\n@@ -130,7 +114,7 @@ def __init__(self, view):\n         self.view = view\n \n     def _get_schemata(self):\n-        if getattr(self.view, \'create\', None):\n+        if getattr(self.view, "create", None):\n             return iterSchemata(self.context)\n         return [self.view.schema]\n \n@@ -138,7 +122,8 @@ def _get_schemata(self):\n # BBB: Old name to match prior more limited function\n DXAddViewFieldPermissionChecker = GenericFormFieldPermissionChecker\n deprecated(\n-    \'DXAddViewFieldPermissionChecker\',\n-    \'plone.app.dexterity.permissions.DXAddViewFieldPermissionChecker has been \'\n-    \'replaced with GenericFormFieldPermissionChecker, please update any \'\n-    \'imports.\')\n+    "DXAddViewFieldPermissionChecker",\n+    "plone.app.dexterity.permissions.DXAddViewFieldPermissionChecker has been "\n+    "replaced with GenericFormFieldPermissionChecker, please update any "\n+    "imports.",\n+)\ndiff --git a/plone/app/dexterity/profiles/testing/types/Document.xml b/plone/app/dexterity/profiles/testing/types/Document.xml\nindex 17174d70..dc7de274 100644\n--- a/plone/app/dexterity/profiles/testing/types/Document.xml\n+++ b/plone/app/dexterity/profiles/testing/types/Document.xml\n@@ -19,10 +19,10 @@\n   <property name="add_permission">cmf.AddPortalContent</property>\n   <property name="klass">plone.dexterity.content.Item</property>\n   <property name="behaviors">\n-    <element value="plone.app.content.interfaces.INameFromTitle" />\n-    <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion" />\n-    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation" />\n-    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n+    <element value="plone.namefromtitle" />\n+    <element value="plone.allowdiscussion" />\n+    <element value="plone.excludefromnavigation" />\n+    <element value="plone.dublincore" />\n   </property>\n   <property name="schema">zope.interface.Interface</property>\n   <alias from="(Default)" to="(dynamic view)" />\ndiff --git a/plone/app/dexterity/profiles/testing/types/Folder.xml b/plone/app/dexterity/profiles/testing/types/Folder.xml\nindex dcd26bad..5e56fdb3 100644\n--- a/plone/app/dexterity/profiles/testing/types/Folder.xml\n+++ b/plone/app/dexterity/profiles/testing/types/Folder.xml\n@@ -23,12 +23,11 @@\n   <property name="add_permission">cmf.AddPortalContent</property>\n   <property name="klass">plone.dexterity.content.Container</property>\n   <property name="behaviors">\n-    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n-    <element value="plone.app.content.interfaces.INameFromTitle" />\n-    <element value="plone.app.dexterity.behaviors.discussion.IAllowDiscussion" />\n-    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation" />\n-    <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes" />\n-    <element value="plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle" />\n+    <element value="plone.dublincore" />\n+    <element value="plone.excludefromnavigation" />\n+    <element value="plone.namefromtitle" />\n+    <element value="plone.allowdiscussion" />\n+    <element value="plone.nextprevioustoggle" />\n   </property>\n   <property name="schema">zope.interface.Interface</property>\n   <alias from="(Default)" to="(dynamic view)" />\ndiff --git a/plone/app/dexterity/serialize.py b/plone/app/dexterity/serialize.py\nindex 5c5122dd..87d3230d 100644\n--- a/plone/app/dexterity/serialize.py\n+++ b/plone/app/dexterity/serialize.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import splitSchemaName\n from plone.supermodel import serializeModel\n@@ -7,7 +6,7 @@\n \n \n def serializeSchemaContext(schema_context, event=None):\n-    """ Serializes the schema associated with a schema context.\n+    """Serializes the schema associated with a schema context.\n \n     The serialized schema is saved to the model_source property of the FTI\n     associated with the schema context.\n@@ -24,13 +23,13 @@ def serializeSchemaContext(schema_context, event=None):\n \n \n def serializeSchema(schema):\n-    """ Finds the FTI and model associated with a schema, and synchronizes\n-        the schema to the FTI model_source attribute.\n+    """Finds the FTI and model associated with a schema, and synchronizes\n+    the schema to the FTI model_source attribute.\n \n-        This method only works for schemas that were created from an FTI\'s\n-        model_source property\n+    This method only works for schemas that were created from an FTI\'s\n+    model_source property\n \n-        BBB - deprecated\n+    BBB - deprecated\n     """\n \n     # determine portal_type\n@@ -49,4 +48,4 @@ def serializeSchema(schema):\n         syncSchema(schema, model.schemata[schemaName], overwrite=True)\n         fti.model_source = serializeModel(model)\n     else:\n-        raise TypeError(\'Changes to non-dynamic schemata not yet supported.\')\n+        raise TypeError("Changes to non-dynamic schemata not yet supported.")\ndiff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py\nindex ec1e980e..64368ebf 100644\n--- a/plone/app/dexterity/testing.py\n+++ b/plone/app/dexterity/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -11,24 +10,22 @@ class DexterityFixture(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.dexterity\n-        self.loadZCML(name=\'meta.zcml\', package=plone.app.dexterity)\n+\n+        self.loadZCML(name="meta.zcml", package=plone.app.dexterity)\n         self.loadZCML(package=plone.app.dexterity)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.dexterity:testing\')\n+        self.applyProfile(portal, "plone.app.dexterity:testing")\n \n \n DEXTERITY_FIXTURE = DexterityFixture()\n \n DEXTERITY_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(DEXTERITY_FIXTURE,),\n-    name=\'dexterity:Integration\'\n+    bases=(DEXTERITY_FIXTURE,), name="dexterity:Integration"\n )\n DEXTERITY_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(DEXTERITY_FIXTURE,),\n-    name=\'dexterity:Functional\'\n+    bases=(DEXTERITY_FIXTURE,), name="dexterity:Functional"\n )\n DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(\n-    bases=(DEXTERITY_FIXTURE, WSGI_SERVER_FIXTURE),\n-    name=\'dexterity:Acceptance\'\n+    bases=(DEXTERITY_FIXTURE, WSGI_SERVER_FIXTURE), name="dexterity:Acceptance"\n )\ndiff --git a/plone/app/dexterity/tests/__init__.py b/plone/app/dexterity/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/dexterity/tests/__init__.py\n+++ b/plone/app/dexterity/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 1498a678..56c3512b 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -122,10 +122,10 @@ and saved::\n   ...     if hasattr(factory, \'protected\') and factory.protected(None):\n   ...         continue\n   ...     browser.open(schemaeditor_url)\n-  ...     # If two changes happen in the same second, the schema lookup will find an old schema,\n-  ...     # so we sleep till the next second.\n+  ...     # If two changes happen in the same moment, the schema lookup will find an old schema,\n+  ...     # so we sleep shortly.\n   ...     now = time.time()\n-  ...     time.sleep(int(now) + 1 - now)\n+  ...     time.sleep(0.1)\n   ...     browser.getLink(\'Add new field\').click()\n   ...     browser.getControl(\'Title\').value = name\n   ...     field_id = normalizer.normalize(name).replace(\'-\', \'_\')\n@@ -494,8 +494,8 @@ zip archive containing files ready to drop into our profile::\n     \'attachment; filename=dexterity_export-....zip\'\n \n     >>> import zipfile\n-    >>> import six\n-    >>> fd = six.BytesIO(browser.contents)\n+    >>> import io\n+    >>> fd = io.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'types.xml\', \'types/plonista2.xml\', \'types/plonista-folder.xml\']\n@@ -524,14 +524,14 @@ zip archive containing supermodel xml files::\n     \'attachment; filename=dexterity_models-....zip\'\n \n     >>> import zipfile\n-    >>> import six\n-    >>> fd = six.BytesIO(browser.contents)\n+    >>> import io\n+    >>> fd = io.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'models/plonista2.xml\', \'models/plonista-folder.xml\']\n \n-    >>> from Products.CMFPlone.utils import safe_unicode\n-    >>> print(safe_unicode(archive.read(\'models/plonista2.xml\')))\n+    >>> from plone.base.utils import safe_text\n+    >>> print(safe_text(archive.read(\'models/plonista2.xml\')))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\n@@ -553,7 +553,7 @@ file::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=plonista2.xml\'\n \n-    >>> print(safe_unicode(browser.contents))\n+    >>> print(safe_text(browser.contents))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex 43cb5738..0e4dfa9a 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.browser.constraintypes import IConstrainForm\n from plone.app.dexterity.behaviors import constrains\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n@@ -8,34 +7,33 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n from plone.dexterity.fti import DexterityFTI\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from zope.interface.exceptions import Invalid\n \n import unittest\n \n \n def add_folder_type(portal):\n-    fti = DexterityFTI(\'folder\')\n-    portal.portal_types._setObject(\'folder\', fti)\n-    fti.klass = \'plone.dexterity.content.Container\'\n+    fti = DexterityFTI("folder")\n+    portal.portal_types._setObject("folder", fti)\n+    fti.klass = "plone.dexterity.content.Container"\n     fti.filter_content_types = False\n     fti.behaviors = (\n-        \'Products.CMFPlone.interfaces.constrains.\'\n-        \'ISelectableConstrainTypes\',\n-        \'plone.app.dexterity.behaviors.metadata.IBasic\')\n+        "plone.constraintypes",\n+        "plone.basic",\n+    )\n     return fti\n \n \n def add_item_type(portal):\n-    fti = DexterityFTI(\'item\')\n-    portal.portal_types._setObject(\'item\', fti)\n-    fti.klass = \'plone.dexterity.content.Item\'\n+    fti = DexterityFTI("item")\n+    portal.portal_types._setObject("item", fti)\n+    fti.klass = "plone.dexterity.content.Item"\n     fti.filter_content_types = False\n-    fti.behaviors = (\n-        \'plone.app.dexterity.behaviors.metadata.IBasic\')\n+    fti.behaviors = "plone.basic"\n     return fti\n \n \n@@ -44,41 +42,40 @@ class DocumentIntegrationTest(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.fti = add_folder_type(self.portal)\n \n-        self.portal.invokeFactory(\'folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal.invokeFactory("folder", "folder")\n+        self.folder = self.portal["folder"]\n \n-        self.folder.invokeFactory(\'folder\', \'inner_folder\')\n-        self.inner_folder = self.folder[\'inner_folder\']\n+        self.folder.invokeFactory("folder", "inner_folder")\n+        self.inner_folder = self.folder["inner_folder"]\n \n-        self.types_tool = getToolByName(self.portal, \'portal_types\')\n+        self.types_tool = getToolByName(self.portal, "portal_types")\n         folder_type = self.types_tool.getTypeInfo(self.folder)\n         self.default_types = [\n             t\n             for t in self.types_tool.listTypeInfo()\n-            if t.isConstructionAllowed(self.folder) and\n-            folder_type.allowType(t.getId())\n+            if t.isConstructionAllowed(self.folder) and folder_type.allowType(t.getId())\n         ]\n         assert len(self.default_types) > 1\n         self.types_id_subset = [t.getId() for t in self.default_types][:1]\n \n     def test_behavior_added(self):\n-        self.assertIn(\'Products.CMFPlone.interfaces.\'\n-                      \'constrains.ISelectableConstrainTypes\',\n-                      self.types_tool.getTypeInfo(self.folder).behaviors)\n+        self.assertIn(\n+            "plone.constraintypes",\n+            self.types_tool.getTypeInfo(self.folder).behaviors,\n+        )\n         self.assertTrue(ISelectableConstrainTypes(self.folder))\n \n     def test_constrainTypesModeDefault(self):\n         behavior1 = ISelectableConstrainTypes(self.folder)\n         behavior2 = ISelectableConstrainTypes(self.inner_folder)\n-        self.assertEqual(\n-            constrains.DISABLED, behavior1.getConstrainTypesMode())\n+        self.assertEqual(constrains.DISABLED, behavior1.getConstrainTypesMode())\n         self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n \n     def test_constrainTypesAcquireDoesNotMatchParent(self):\n@@ -101,8 +98,7 @@ def test_constrainTypesModeValidSet(self):\n \n     def test_constrainTypesModeInvalidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n-        self.assertRaises(\n-            ValueError, behavior.setConstrainTypesMode, \'INVALID\')\n+        self.assertRaises(ValueError, behavior.setConstrainTypesMode, "INVALID")\n \n     def test_canSetConstrainTypesMode(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n@@ -142,8 +138,7 @@ def test_locallyAllowedTypesDefaultWhenEnabled(self):\n         outer_behavior.setConstrainTypesMode(constrains.ENABLED)\n         outer_behavior.setLocallyAllowedTypes([])\n \n-        types = [t for t in self.default_types\n-                 if t.getId() in self.types_id_subset]\n+        types = [t for t in self.default_types if t.getId() in self.types_id_subset]\n         type_ids = self.types_id_subset\n \n         self.assertEqual(types, behavior.allowedContentTypes())\n@@ -180,31 +175,28 @@ def test_locallyAllowedTypesDefaultWhenMultipleAcquired(self):\n         Multiple (two or more) acquisition from parent must not fail if\n         user doesn\'t have add permission on parent.\n         """\n-        self.inner_folder.invokeFactory(\'folder\', \'deeper_folder\')\n+        self.inner_folder.invokeFactory("folder", "deeper_folder")\n         deeper_folder = self.inner_folder.deeper_folder\n-        self.portal.acl_users._doAddUser(\n-            \'user_contributor\', \'secret\', [\'Member\'],\n-            []\n-        )\n-        deeper_folder.manage_addLocalRoles(\'user_contributor\', [\'Contributor\'])\n-        login(self.portal, \'user_contributor\')\n+        self.portal.acl_users._doAddUser("user_contributor", "secret", ["Member"], [])\n+        deeper_folder.manage_addLocalRoles("user_contributor", ["Contributor"])\n+        login(self.portal, "user_contributor")\n         behavior = ISelectableConstrainTypes(deeper_folder)\n         types = behavior.getLocallyAllowedTypes()\n         self.assertTrue(len(types) > 0)\n \n     def test_locallyAllowedTypesInvalidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n-        self.assertRaises(ValueError,\n-                          behavior.setLocallyAllowedTypes,\n-                          self.types_id_subset + [\'invalid\'])\n+        self.assertRaises(\n+            ValueError,\n+            behavior.setLocallyAllowedTypes,\n+            self.types_id_subset + ["invalid"],\n+        )\n \n     def test_locallyAllowedTypesInvalidValuesGetFiltered(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n-        self.folder.locally_allowed_types = self.types_id_subset + \\\n-            [\'invalid\']\n-        self.assertEqual(\n-            self.types_id_subset, behavior.getLocallyAllowedTypes())\n+        self.folder.locally_allowed_types = self.types_id_subset + ["invalid"]\n+        self.assertEqual(self.types_id_subset, behavior.getLocallyAllowedTypes())\n \n     def test_immediatelyAllowedTypesDefaultWhenDisabled(self):\n         """\n@@ -267,17 +259,17 @@ def test_immediatelyAllowedTypesDefaultWhenAcquired(self):\n \n     def test_immediatelyAllowedTypesInvalidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n-        self.assertRaises(ValueError,\n-                          behavior.setImmediatelyAddableTypes,\n-                          self.types_id_subset + [\'invalid\'])\n+        self.assertRaises(\n+            ValueError,\n+            behavior.setImmediatelyAddableTypes,\n+            self.types_id_subset + ["invalid"],\n+        )\n \n     def test_immediatelyAllowedTypesInvalidValuesGetFiltered(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n-        self.folder.immediately_addable_types = self.types_id_subset + \\\n-            [\'invalid\']\n-        self.assertEqual(\n-            self.types_id_subset, behavior.getImmediatelyAddableTypes())\n+        self.folder.immediately_addable_types = self.types_id_subset + ["invalid"]\n+        self.assertEqual(self.types_id_subset, behavior.getImmediatelyAddableTypes())\n \n     def test_defaultAddableTypesDefault(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n@@ -318,8 +310,7 @@ def test_allowedContentTypesExit3(self):\n         behavior = ISelectableConstrainTypes(self.inner_folder)\n         behavior.setConstrainTypesMode(constrains.ACQUIRE)\n         self.assertEqual(\n-            self.types_id_subset,\n-            [x.getId() for x in behavior.allowedContentTypes()]\n+            self.types_id_subset, [x.getId() for x in behavior.allowedContentTypes()]\n         )\n \n     def test_allowedContentTypesExit4(self):\n@@ -332,19 +323,19 @@ def test_allowedContentTypesExit4(self):\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n \n         self.assertEqual(\n-            self.types_id_subset,\n-            [x.getId() for x in behavior.allowedContentTypes()]\n+            self.types_id_subset, [x.getId() for x in behavior.allowedContentTypes()]\n         )\n \n     def test_formschemainvariants(self):\n-        class Data(object):\n+        class Data:\n             allowed_types = []\n             secondary_types = []\n+\n         bad = Data()\n         bad.allowed_types = []\n-        bad.secondary_types = [\'1\']\n+        bad.secondary_types = ["1"]\n         good = Data()\n-        good.allowed_types = [\'1\']\n+        good.allowed_types = ["1"]\n         good.secondary_types = []\n         self.assertTrue(IConstrainForm.validateInvariants(good) is None)\n         self.assertRaises(Invalid, IConstrainForm.validateInvariants, bad)\n@@ -355,80 +346,79 @@ class FolderConstrainViewFunctionalText(unittest.TestCase):\n     layer = DEXTERITY_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal_url = self.portal.absolute_url()\n \n         self.fti = add_folder_type(self.portal)\n \n-        self.portal.invokeFactory(\'folder\', id=\'folder\', title=\'My Folder\')\n+        self.portal.invokeFactory("folder", id="folder", title="My Folder")\n         self.folder = self.portal.folder\n         self.folder_url = self.folder.absolute_url()\n         import transaction\n+\n         transaction.commit()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_folder_view(self):\n-        self.browser.open(self.folder_url + \'/view\')\n-        self.assertTrue(\'My Folder\' in self.browser.contents)\n-        self.assertTrue(\'Restrictions\' in self.browser.contents)\n+        self.browser.open(self.folder_url + "/view")\n+        self.assertTrue("My Folder" in self.browser.contents)\n+        self.assertTrue("Restrictions" in self.browser.contents)\n \n     def test_folder_restrictions_view(self):\n-        self.browser.open(self.folder_url + \'/folder_constraintypes_form\')\n-        self.assertIn(\'Restrict what types\', self.browser.contents)\n+        self.browser.open(self.folder_url + "/folder_constraintypes_form")\n+        self.assertIn("Restrict what types", self.browser.contents)\n         self.assertIn(\n-            \'// Custom form constraints for constrain form\',\n+            "// Custom form constraints for constrain form",\n             self.browser.contents,\n         )\n-        self.assertIn(\'current_prefer_form\', self.browser.contents)\n+        self.assertIn("current_prefer_form", self.browser.contents)\n \n     def test_form_save_restrictions(self):\n         self.browser.open(self.folder_url)\n-        self.browser.getLink(\'Restrictions\').click()\n+        self.browser.getLink("Restrictions").click()\n \n         def ctrl(name):\n             return self.browser.getControl(name=name)\n \n-        self.browser.getControl(\'Type restrictions\').value = [\'1\']\n-        ctrl(\'form.widgets.allowed_types:list\').value = [\'Document\', \'Folder\']\n-        ctrl(\'form.widgets.secondary_types:list\').value = [\'Document\']\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Type restrictions").value = ["1"]\n+        ctrl("form.widgets.allowed_types:list").value = ["Document", "Folder"]\n+        ctrl("form.widgets.secondary_types:list").value = ["Document"]\n+        self.browser.getControl("Save").click()\n         aspect = ISelectableConstrainTypes(self.folder)\n         self.assertEqual(1, aspect.getConstrainTypesMode())\n-        self.assertEqual(\n-            [\'Document\', \'Folder\'],\n-            aspect.getLocallyAllowedTypes()\n-        )\n-        self.assertEqual([\'Folder\'], aspect.getImmediatelyAddableTypes())\n+        self.assertEqual(["Document", "Folder"], aspect.getLocallyAllowedTypes())\n+        self.assertEqual(["Folder"], aspect.getImmediatelyAddableTypes())\n \n     def test_form_bad_save(self):\n         aspect = ISelectableConstrainTypes(self.folder)\n         constraint_before = aspect.getConstrainTypesMode()\n-        assert constraint_before != 1, (\'Default constraint should not be 1. \'\n-                                        \'Test is outdated.\')\n+        assert constraint_before != 1, (\n+            "Default constraint should not be 1. " "Test is outdated."\n+        )\n \n         self.browser.open(self.folder_url)\n-        self.browser.getLink(\'Restrictions\').click()\n+        self.browser.getLink("Restrictions").click()\n \n         def ctrl(name):\n             return self.browser.getControl(name=name)\n \n-        self.browser.getControl(\'Type restrictions\').value = [\'1\']\n-        ctrl(\'form.widgets.allowed_types:list\').value = [\'Document\']\n-        ctrl(\'form.widgets.secondary_types:list\').value = [\n-            \'Document\',\n-            \'Folder\'\n-        ]\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Type restrictions").value = ["1"]\n+        ctrl("form.widgets.allowed_types:list").value = ["Document"]\n+        ctrl("form.widgets.secondary_types:list").value = ["Document", "Folder"]\n+        self.browser.getControl("Save").click()\n         self.assertEqual(constraint_before, aspect.getConstrainTypesMode())\n-        self.assertTrue(\'There were some errors\' in self.browser.contents)\n+        self.assertTrue("There were some errors" in self.browser.contents)\n \n \n class ConstrainControlFunctionalText(unittest.TestCase):\n@@ -436,57 +426,61 @@ class ConstrainControlFunctionalText(unittest.TestCase):\n     layer = DEXTERITY_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal_url = self.portal.absolute_url()\n \n         self.folder_fti = add_folder_type(self.portal)\n         self.item_fti = add_item_type(self.portal)\n \n         import transaction\n+\n         transaction.commit()\n         self.browser = Browser(app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD,\n+            ),\n         )\n \n     def test_overview_folder_view(self):\n-        url = \'/dexterity-types/folder/@@overview\'\n+        url = "/dexterity-types/folder/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertTrue(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertTrue(\'No content types\' in self.browser.contents)\n+        self.assertTrue("Filter Contained Types" in self.browser.contents)\n+        self.assertTrue("No content types" in self.browser.contents)\n \n     def test_overview_item_view(self):\n-        url = \'/dexterity-types/item/@@overview\'\n+        url = "/dexterity-types/item/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertFalse(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertFalse(\'No content types\' in self.browser.contents)\n+        self.assertFalse("Filter Contained Types" in self.browser.contents)\n+        self.assertFalse("No content types" in self.browser.contents)\n \n     def test_overview_folder_item_view(self):\n         # First we access folder content types and check\n         # that is possible to fiter content types (as it is a container)\n-        url = \'/dexterity-types/folder/@@overview\'\n+        url = "/dexterity-types/folder/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertTrue(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertTrue(\'No content types\' in self.browser.contents)\n+        self.assertTrue("Filter Contained Types" in self.browser.contents)\n+        self.assertTrue("No content types" in self.browser.contents)\n \n         # Then we access item content types and check\n         # that is NOT possible to fiter content types\n-        url = \'/dexterity-types/item/@@overview\'\n+        url = "/dexterity-types/item/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertFalse(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertFalse(\'No content types\' in self.browser.contents)\n+        self.assertFalse("Filter Contained Types" in self.browser.contents)\n+        self.assertFalse("No content types" in self.browser.contents)\n \n         # Acessing folder content types again\n         # and it should be possible to filter content types\n-        url = \'/dexterity-types/folder/@@overview\'\n+        url = "/dexterity-types/folder/@@overview"\n         self.browser.open(self.portal_url + url)\n-        self.assertTrue(\'Filter Contained Types\' in self.browser.contents)\n-        self.assertTrue(\'No content types\' in self.browser.contents)\n+        self.assertTrue("Filter Contained Types" in self.browser.contents)\n+        self.assertTrue("No content types" in self.browser.contents)\n \n \n def test_suite():\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex 9b128c34..889afaad 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -1,39 +1,25 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n import re\n-import six\n import unittest\n \n \n tests = (\n-    \'discussion.txt\',\n-    \'editing.rst\',\n-    \'namefromtitle.txt\',\n-    \'metadata.txt\',\n-    \'nextprevious.txt\',\n-    \'filename.txt\',\n-    \'schema_events.txt\',\n+    "discussion.txt",\n+    "editing.rst",\n+    "namefromtitle.txt",\n+    "metadata.txt",\n+    "nextprevious.txt",\n+    "filename.txt",\n+    "schema_events.txt",\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub(\'zExceptions.NotFound\', \'NotFound\', want)\n-            want = re.sub(\'zope.interface.interfaces.ComponentLookupError\', \'ComponentLookupError\', want)\n-            want = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', want)\n-            want = re.sub(\'AccessControl.unauthorized.Unauthorized\', \'Unauthorized\', want)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n-    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+    OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n     for testfile in tests:\n         suite.addTest(\n             layered(\n@@ -41,9 +27,8 @@ def test_suite():\n                     testfile,\n                     optionflags=OPTIONFLAGS,\n                     # package=\'plone.app.dexterity.tests\',\n-                    checker=Py23DocChecker(),\n                 ),\n-                layer=DEXTERITY_FUNCTIONAL_TESTING\n+                layer=DEXTERITY_FUNCTIONAL_TESTING,\n             )\n         )\n     return suite\ndiff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py\nindex 3d150ce2..ae944ad1 100644\n--- a/plone/app/dexterity/tests/test_export.py\n+++ b/plone/app/dexterity/tests/test_export.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test the @@types-export view."""\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n from plone.app.dexterity.tests.test_constrains import add_item_type\n@@ -6,7 +5,7 @@\n from xml.parsers.expat import ExpatError\n from zope.component import getMultiAdapter\n \n-import six\n+import io\n import unittest\n import zipfile\n \n@@ -18,25 +17,27 @@ class TestExportXMLValidity(unittest.TestCase):\n \n     def test_exported_XML_valid_for_GS(self):\n         """Test that exported XMLs can be parsed by GenericSetup\'s parser."""\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # create a Dexterity item that we can export\n         self.item = add_item_type(self.portal)\n \n         # request is expected to have the \'selected\' parameter set\n-        self.request[\'selected\'] = \'item\'\n+        self.request["selected"] = "item"\n \n         # get the export view\n         dexterity_control_panel = getMultiAdapter(\n-            (self.portal, self.request), name=\'dexterity-types\')\n+            (self.portal, self.request), name="dexterity-types"\n+        )\n         types_export_view = getMultiAdapter(\n-            (dexterity_control_panel, self.request), name=\'types-export\')\n+            (dexterity_control_panel, self.request), name="types-export"\n+        )\n \n         # export the \'item\' type and try to parse all XMLs\n         output = types_export_view.__call__()\n-        fd = six.BytesIO(output)\n-        archive = zipfile.ZipFile(fd, mode=\'r\')\n+        fd = io.BytesIO(output)\n+        archive = zipfile.ZipFile(fd, mode="r")\n         filenames = archive.namelist()\n         for filename in filenames:\n             file_xml = archive.read(filename)\n@@ -45,7 +46,7 @@ def test_exported_XML_valid_for_GS(self):\n             try:\n                 parseString(file_xml)\n             except ExpatError as e:\n-                msg = \'Parsing XML failed with ExpatError: {0}\'\n+                msg = "Parsing XML failed with ExpatError: {0}"\n                 self.fail(msg.format(e.args[0]))\n \n \ndiff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py\nindex d0f427c7..026af16b 100644\n--- a/plone/app/dexterity/tests/test_import.py\n+++ b/plone/app/dexterity/tests/test_import.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test the types import."""\n from DateTime.DateTime import DateTime\n from plone.app.dexterity.browser.import_types import ITypeProfileImport\n@@ -19,38 +18,30 @@ class TestDexterityTypesImport(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def testZipFileImportContext(self):\n-        portal = self.layer[\'portal\']\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        portal = self.layer["portal"]\n+        types_tool = getToolByName(portal, "portal_types")\n \n         zname = os.path.join(\n             os.path.dirname(__file__),\n-            \'import\',\n-            \'dexterity_export.zip\',\n+            "import",\n+            "dexterity_export.zip",\n         )\n-        f = open(zname, \'rb\')\n+        f = open(zname, "rb")\n         icontext = ZipFileImportContext(types_tool, f)\n \n-        types_xml = icontext.readDataFile(\'types.xml\')\n+        types_xml = icontext.readDataFile("types.xml")\n         self.assertTrue(\n             types_xml,\n-            msg=\'Unable to read types.xml in sample import file\',\n+            msg="Unable to read types.xml in sample import file",\n         )\n \n-        self.assertTrue(\n-            isinstance(\n-                icontext.getLastModified(\'types.xml\'),\n-                DateTime\n-            )\n-        )\n+        self.assertTrue(isinstance(icontext.getLastModified("types.xml"), DateTime))\n \n-        self.assertEqual(\n-            set(icontext.listDirectory(\'\')),\n-            set([\'types\', \'types.xml\'])\n-        )\n+        self.assertEqual(set(icontext.listDirectory("")), {"types", "types.xml"})\n \n         self.assertEqual(\n-            set(icontext.listDirectory(\'types\')),\n-            set([\'test_type_two.xml\', \'test_type_one.xml\'])\n+            set(icontext.listDirectory("types")),\n+            {"test_type_two.xml", "test_type_one.xml"},\n         )\n \n         # test importIsTypesOnly check\n@@ -59,41 +50,36 @@ def testZipFileImportContext(self):\n         f.close()\n \n     def testSampleImportStep(self):\n-        """ Import our sample file\n-        """\n+        """Import our sample file"""\n \n-        portal = self.layer[\'portal\']\n-        setup_tool = getToolByName(portal, \'portal_setup\')\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        portal = self.layer["portal"]\n+        setup_tool = getToolByName(portal, "portal_setup")\n+        types_tool = getToolByName(portal, "portal_types")\n         old_types = set(types_tool.listContentTypes())\n \n-        handler = setup_tool.getImportStep(u\'typeinfo\')\n+        handler = setup_tool.getImportStep("typeinfo")\n \n         zname = os.path.join(\n-            os.path.dirname(__file__),\n-            \'import\',\n-            \'dexterity_export.zip\'\n+            os.path.dirname(__file__), "import", "dexterity_export.zip"\n         )\n-        with open(zname, \'rb\') as f:\n+        with open(zname, "rb") as f:\n             icontext = ZipFileImportContext(types_tool, f)\n             handler(icontext)\n \n         # Our types list should have our two new types\n         self.assertEqual(\n             set(types_tool.listContentTypes()) - old_types,\n-            set([\'test_type_one\', \'test_type_two\'])\n+            {"test_type_one", "test_type_two"},\n         )\n \n         # Trying to import now should fail, since\n         # it would be importing existing types.\n         # This is tested in an invariant.\n         data = TypeProfileImport(profile_file=plone.namedfile.NamedFile())\n-        with open(zname, \'rb\') as f:\n+        with open(zname, "rb") as f:\n             data.profile_file.data = f.read()\n         self.assertRaises(\n-            zope.interface.Invalid,\n-            ITypeProfileImport.validateInvariants,\n-            data\n+            zope.interface.Invalid, ITypeProfileImport.validateInvariants, data\n         )\n \n \ndiff --git a/plone/app/dexterity/tests/test_nextprevious.py b/plone/app/dexterity/tests/test_nextprevious.py\nindex fe56ee0a..6ec7ae1b 100644\n--- a/plone/app/dexterity/tests/test_nextprevious.py\n+++ b/plone/app/dexterity/tests/test_nextprevious.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n from plone.app.layout.nextprevious.interfaces import INextPreviousProvider\n from plone.app.testing import login\n@@ -19,41 +18,40 @@ class NextPreviousBase:\n     def _setupFTI(self):\n         fti = DexterityFTI(self._portal_type)\n         self.portal.portal_types._setObject(self._portal_type, fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n+        fti.klass = "plone.dexterity.content.Container"\n         fti.filter_content_types = False\n         fti.behaviors = self._behaviors\n \n \n class NextPreviousEnabledTests(NextPreviousBase, unittest.TestCase):\n-    """ basic use cases and tests for next/previous navigation, essentially\n-        borrowed from `plone.app.folder.tests.test_nextprevious.py` """\n+    """basic use cases and tests for next/previous navigation, essentially\n+    borrowed from `plone.app.folder.tests.test_nextprevious.py`"""\n \n     layer = DEXTERITY_INTEGRATION_TESTING\n \n-    _behaviors = (\n-        \'plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled\',)\n-    _portal_type = \'FolderEnabled\'\n+    _behaviors = ("plone.app.dexterity.behaviors.nextprevious.INextPreviousEnabled",)\n+    _portal_type = "FolderEnabled"\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.wf = getToolByName(self.portal, \'portal_workflow\')\n-        self.wf.setDefaultChain(\'simple_publication_workflow\')\n-        self.portal.acl_users._doAddUser(\'user_std\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.wf = getToolByName(self.portal, "portal_workflow")\n+        self.wf.setDefaultChain("simple_publication_workflow")\n+        self.portal.acl_users._doAddUser("user_std", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self._setupFTI()\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(self._portal_type, \'folder1\')\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(self._portal_type, \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.invokeFactory("Document", "doc3")\n+        self.portal.invokeFactory(self._portal_type, "folder1")\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("Document", "doc12")\n+        folder1.invokeFactory("Document", "doc13")\n+        self.portal.invokeFactory(self._portal_type, "folder2")\n+        folder2 = getattr(self.portal, "folder2")\n+        folder2.invokeFactory("Document", "doc21")\n+        folder2.invokeFactory("Document", "doc22")\n+        folder2.invokeFactory("Document", "doc23")\n \n     def testIfFolderImplementsPreviousNext(self):\n         self.assertTrue(INextPreviousProvider(self.portal.folder1, None))\n@@ -63,39 +61,39 @@ def testNextPreviousEnablingOnCreation(self):\n \n     def testNextPreviousViewEnabled(self):\n         doc = self.portal.folder1.doc11\n-        view = doc.restrictedTraverse(\'@@plone_nextprevious_view\')\n+        view = doc.restrictedTraverse("@@plone_nextprevious_view")\n         self.assertFalse(view is None)\n         self.assertTrue(view.enabled())\n \n     def testNextPreviousItems(self):\n-        container = self.portal[self.portal.invokeFactory(\n-            self._portal_type, \'case3\')]\n+        container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         for id in range(1, 4):\n-            container.invokeFactory(\'Document\', \'subDoc{0}\'.format(id))\n+            container.invokeFactory("Document", f"subDoc{id}")\n \n         from OFS.Folder import manage_addFolder\n-        manage_addFolder(container, \'notacontentishtype\')\n+\n+        manage_addFolder(container, "notacontentishtype")\n \n         for id in range(5, 6):\n-            container.invokeFactory(\'Document\', \'subDoc{0}\'.format(id))\n+            container.invokeFactory("Document", f"subDoc{id}")\n \n         adapter = INextPreviousProvider(container)\n         # text data for next/previous items\n         next = adapter.getNextItem(container.subDoc2)\n-        self.assertEqual(next[\'id\'], \'subDoc3\')\n-        self.assertEqual(next[\'portal_type\'], \'Document\')\n-        self.assertEqual(next[\'url\'], container.subDoc3.absolute_url())\n+        self.assertEqual(next["id"], "subDoc3")\n+        self.assertEqual(next["portal_type"], "Document")\n+        self.assertEqual(next["url"], container.subDoc3.absolute_url())\n         previous = adapter.getPreviousItem(container.subDoc2)\n-        self.assertEqual(previous[\'id\'], \'subDoc1\')\n-        self.assertEqual(previous[\'portal_type\'], \'Document\')\n-        self.assertEqual(previous[\'url\'], container.subDoc1.absolute_url())\n+        self.assertEqual(previous["id"], "subDoc1")\n+        self.assertEqual(previous["portal_type"], "Document")\n+        self.assertEqual(previous["url"], container.subDoc1.absolute_url())\n \n         # #11234 not contentish contents shouldn\'t be returned\n         # as next or previous content\n         next = adapter.getNextItem(container.subDoc3)\n-        self.assertEqual(next[\'id\'], \'subDoc5\')\n+        self.assertEqual(next["id"], "subDoc5")\n         previous = adapter.getPreviousItem(container.subDoc5)\n-        self.assertEqual(previous[\'id\'], \'subDoc3\')\n+        self.assertEqual(previous["id"], "subDoc3")\n \n         # first item should not have a previous item\n         previous = adapter.getPreviousItem(container.subDoc1)\n@@ -105,73 +103,68 @@ def testNextPreviousItems(self):\n         self.assertEqual(next, None)\n \n     def testNextItemOnlyShowViewable(self):\n-        container = self.portal[self.portal.invokeFactory(\n-            self._portal_type, \'case3\')]\n+        container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         # create objects [subDoc1,subDoc2,subDoc3,subDoc4,subDoc5,subDoc6]\n         # published objects [subDoc2, subDoc4, subDoc5]\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         for id in range(1, 7):\n-            doc = container[container.invokeFactory(\n-                \'Document\', \'subDoc{0}\'.format(id))]\n+            doc = container[container.invokeFactory("Document", f"subDoc{id}")]\n             if id in [2, 4, 5]:\n-                self.wf.doActionFor(doc, \'publish\')\n+                self.wf.doActionFor(doc, "publish")\n \n         # Member should only see the published items\n         logout()\n-        login(self.portal, \'user_std\')\n+        login(self.portal, "user_std")\n         adapter = INextPreviousProvider(container)\n         # text data for next/tems\n         next = adapter.getNextItem(container.subDoc2)\n-        self.assertEqual(next[\'id\'], \'subDoc4\')\n+        self.assertEqual(next["id"], "subDoc4")\n         next = adapter.getNextItem(container.subDoc4)\n-        self.assertEqual(next[\'id\'], \'subDoc5\')\n+        self.assertEqual(next["id"], "subDoc5")\n         next = adapter.getNextItem(container.subDoc5)\n         self.assertEqual(next, None)\n \n     def testPreviousItemOnlyShowViewable(self):\n-        container = self.portal[self.portal.invokeFactory(\n-            self._portal_type, \'case3\')]\n+        container = self.portal[self.portal.invokeFactory(self._portal_type, "case3")]\n         # create objects [subDoc1,subDoc2,subDoc3,subDoc4,subDoc5,subDoc6]\n         # published objects [subDoc2, subDoc4, subDoc5]\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         for id in range(1, 7):\n-            doc = container[container.invokeFactory(\n-                \'Document\', \'subDoc{0}\'.format(id))]\n+            doc = container[container.invokeFactory("Document", f"subDoc{id}")]\n             if id in [2, 4, 5]:\n-                self.wf.doActionFor(doc, \'publish\')\n+                self.wf.doActionFor(doc, "publish")\n \n         # Member should only see the published items\n         logout()\n-        login(self.portal, \'user_std\')\n+        login(self.portal, "user_std")\n         adapter = INextPreviousProvider(container)\n         # text data for next/tems\n         previous = adapter.getPreviousItem(container.subDoc5)\n-        self.assertEqual(previous[\'id\'], \'subDoc4\')\n+        self.assertEqual(previous["id"], "subDoc4")\n         previous = adapter.getPreviousItem(container.subDoc4)\n-        self.assertEqual(previous[\'id\'], \'subDoc2\')\n+        self.assertEqual(previous["id"], "subDoc2")\n         previous = adapter.getPreviousItem(container.subDoc2)\n         self.assertEqual(previous, None)\n \n \n class NextPreviousToggleTests(NextPreviousBase, unittest.TestCase):\n-    """ basic use cases and tests for next/previous navigation, essentially\n-        borrowed from `plone.app.folder.tests.test_nextprevious.py` """\n+    """basic use cases and tests for next/previous navigation, essentially\n+    borrowed from `plone.app.folder.tests.test_nextprevious.py`"""\n \n     layer = DEXTERITY_INTEGRATION_TESTING\n \n-    _behaviors = (\n-        \'plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle\',)\n-    _portal_type = \'FolderWithToggle\'\n+    _behaviors = ("plone.app.dexterity.behaviors.nextprevious.INextPreviousToggle",)\n+    _portal_type = "FolderWithToggle"\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.wf = getToolByName(self.portal, \'portal_workflow\')\n-        self.portal.acl_users._doAddUser(\'user_std\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.wf = getToolByName(self.portal, "portal_workflow")\n+        self.portal.acl_users._doAddUser("user_std", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self._setupFTI()\n-        self.portal.invokeFactory(self._portal_type, \'folder1\')\n-        self.portal.folder1.invokeFactory(\'Document\', \'doc11\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal.invokeFactory(self._portal_type, "folder1")\n+        self.portal.folder1.invokeFactory("Document", "doc11")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def testIfFolderImplementsPreviousNext(self):\n         self.assertTrue(INextPreviousProvider(self.portal.folder1, None))\n@@ -183,18 +176,19 @@ def testNextPreviousEnablingOnCreation(self):\n \n     def testNextPreviousViewDisabled(self):\n         doc = self.portal.folder1.doc11\n-        view = doc.restrictedTraverse(\'@@plone_nextprevious_view\')\n+        view = doc.restrictedTraverse("@@plone_nextprevious_view")\n         self.assertFalse(view is None)\n         self.assertFalse(view.enabled())\n \n     def testNextPreviousViewEnabled(self):\n         self.portal.folder1.nextPreviousEnabled = True\n         doc = self.portal.folder1.doc11\n-        view = doc.restrictedTraverse(\'@@plone_nextprevious_view\')\n+        view = doc.restrictedTraverse("@@plone_nextprevious_view")\n         self.assertFalse(view is None)\n         self.assertTrue(view.enabled())\n \n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py\nindex 62e6545a..7092d3c9 100644\n--- a/plone/app/dexterity/tests/test_permissions.py\n+++ b/plone/app/dexterity/tests/test_permissions.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.browser.vocabulary import VocabularyView\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING\n+from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY\n from plone.dexterity.browser.add import DefaultAddForm\n@@ -27,54 +26,61 @@\n \n def add_mock_fti(portal):\n     # Fake DX Type\n-    fti = DexterityFTI(\'dx_mock\')\n-    portal.portal_types._setObject(\'dx_mock\', fti)\n-    fti.klass = \'plone.dexterity.content.Item\'\n-    fti.schema = \'plone.app.dexterity.tests.test_permissions.IMockSchema\'\n+    fti = DexterityFTI("dx_mock")\n+    portal.portal_types._setObject("dx_mock", fti)\n+    fti.klass = "plone.dexterity.content.Item"\n+    fti.schema = "plone.app.dexterity.tests.test_permissions.IMockSchema"\n     fti.filter_content_types = False\n-    fti.behaviors = (\'plone.app.dexterity.behaviors.metadata.IBasic\',)\n+    fti.behaviors = ("plone.app.dexterity.behaviors.metadata.IBasic",)\n \n \n def _custom_field_widget(field, request):\n     from plone.app.z3cform.widget import AjaxSelectWidget\n+\n     widget = FieldWidget(field, AjaxSelectWidget(request))\n-    widget.vocabulary = \'plone.app.vocabularies.PortalTypes\'\n+    widget.vocabulary = "plone.app.vocabularies.PortalTypes"\n     return widget\n \n \n class IMockSchema(Interface):\n-    allowed_field = schema.Choice(\n-        vocabulary=\'plone.app.vocabularies.PortalTypes\')\n-    disallowed_field = schema.Choice(\n-        vocabulary=\'plone.app.vocabularies.PortalTypes\')\n-    default_field = schema.Choice(\n-        vocabulary=\'plone.app.vocabularies.PortalTypes\')\n+    allowed_field = schema.Choice(vocabulary="plone.app.vocabularies.PortalTypes")\n+    disallowed_field = schema.Choice(vocabulary="plone.app.vocabularies.PortalTypes")\n+    default_field = schema.Choice(vocabulary="plone.app.vocabularies.PortalTypes")\n     custom_widget_field = schema.TextLine()\n     adapted_widget_field = schema.TextLine()\n \n \n-IMockSchema.setTaggedValue(WRITE_PERMISSIONS_KEY, {\n-    \'allowed_field\': u\'zope2.View\',\n-    \'disallowed_field\': u\'zope2.ViewManagementScreens\',\n-    \'custom_widget_field\': u\'zope2.View\',\n-    \'adapted_widget_field\': u\'zope2.View\',\n-})\n-IMockSchema.setTaggedValue(WIDGETS_KEY, {\n-    \'custom_widget_field\': _custom_field_widget,\n-})\n+IMockSchema.setTaggedValue(\n+    WRITE_PERMISSIONS_KEY,\n+    {\n+        "allowed_field": "zope2.View",\n+        "disallowed_field": "zope2.ViewManagementScreens",\n+        "custom_widget_field": "zope2.View",\n+        "adapted_widget_field": "zope2.View",\n+    },\n+)\n+IMockSchema.setTaggedValue(\n+    WIDGETS_KEY,\n+    {\n+        "custom_widget_field": _custom_field_widget,\n+    },\n+)\n \n \n def _enable_custom_widget(field):\n     provideAdapter(\n         _custom_field_widget,\n         adapts=(getSpecification(field), IPloneFormLayer),\n-        provides=IFieldWidget\n+        provides=IFieldWidget,\n     )\n \n \n def _disable_custom_widget(field):\n     base.unregisterAdapter(\n-        required=(getSpecification(field), IPloneFormLayer, ),\n+        required=(\n+            getSpecification(field),\n+            IPloneFormLayer,\n+        ),\n         provided=IFieldWidget,\n     )\n \n@@ -84,155 +90,175 @@ class DexterityVocabularyPermissionTests(unittest.TestCase):\n     layer = PLONEAPPWIDGETS_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n+        self.request = TestRequest(environ={"HTTP_ACCEPT_LANGUAGE": "en"})\n         setRequest(self.request)\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         add_mock_fti(self.portal)\n-        self.portal.invokeFactory(\'dx_mock\', \'test_dx\')\n-\n-        self.portal.test_dx.manage_permission(\'View\',\n-                                              (\'Anonymous\',),\n-                                              acquire=False)\n-        self.portal.test_dx.manage_permission(\'View management screens\',\n-                                              (),\n-                                              acquire=False)\n-        self.portal.test_dx.manage_permission(\'Modify portal content\',\n-                                              (\'Editor\', \'Manager\',\n-                                               \'Site Adiminstrator\'),\n-                                              acquire=False)\n+        self.portal.invokeFactory("dx_mock", "test_dx")\n+\n+        self.portal.test_dx.manage_permission("View", ("Anonymous",), acquire=False)\n+        self.portal.test_dx.manage_permission(\n+            "View management screens", (), acquire=False\n+        )\n+        self.portal.test_dx.manage_permission(\n+            "Modify portal content",\n+            ("Editor", "Manager", "Site Adiminstrator"),\n+            acquire=False,\n+        )\n \n     def test_vocabulary_field_allowed(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n     def test_vocabulary_field_wrong_vocabulary_disallowed(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Fake\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Fake",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_field_disallowed(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'disallowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "disallowed_field",\n+            }\n+        )\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_field_default_permission(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'default_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "default_field",\n+            }\n+        )\n         # If the field is does not have a security declaration, the\n         # default edit permission is tested (Modify portal content)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Editor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Editor"])\n         # Now access should be allowed, but the vocabulary does not exist\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n     def test_vocabulary_field_default_permission_wrong_vocab(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.Fake\',\n-            \'field\': \'default_field\',\n-        })\n-        setRoles(self.portal, TEST_USER_ID, [\'Editor\'])\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Fake",\n+                "field": "default_field",\n+            }\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Editor"])\n         # Now access should be allowed, but the vocabulary does not exist\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_missing_field(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'missing_field\',\n-        })\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "missing_field",\n+            }\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         with self.assertRaises(AttributeError):\n             view()\n \n     def test_vocabulary_on_widget(self):\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'custom_widget_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "custom_widget_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Fake\'\n+        self.request.form["name"] = "plone.app.vocabularies.Fake"\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n \n     def test_vocabulary_on_adapted_widget(self):\n-        _enable_custom_widget(IMockSchema[\'adapted_widget_field\'])\n+        _enable_custom_widget(IMockSchema["adapted_widget_field"])\n         view = VocabularyView(self.portal.test_dx, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'adapted_widget_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "adapted_widget_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n-        self.request.form[\'name\'] = \'plone.app.vocabularies.Fake\'\n+        self.request.form["name"] = "plone.app.vocabularies.Fake"\n         data = json.loads(view())\n-        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n-        _disable_custom_widget(IMockSchema[\'adapted_widget_field\'])\n+        self.assertEqual(data["error"], "Vocabulary lookup not allowed")\n+        _disable_custom_widget(IMockSchema["adapted_widget_field"])\n \n     def test_vocabulary_field_allowed_from_add_view(self):\n-        add_view = DefaultAddView(self.portal, self.request,\n-                                  self.portal.portal_types[\'dx_mock\'])\n+        add_view = DefaultAddView(\n+            self.portal, self.request, self.portal.portal_types["dx_mock"]\n+        )\n         view = VocabularyView(add_view, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\n \n     def test_vocabulary_field_allowed_from_add_form(self):\n         add_form = DefaultAddForm(self.portal, self.request)\n-        add_form.portal_type = \'dx_mock\'\n+        add_form.portal_type = "dx_mock"\n         view = VocabularyView(add_form, self.request)\n-        self.request.form.update({\n-            \'name\': \'plone.app.vocabularies.PortalTypes\',\n-            \'field\': \'allowed_field\',\n-        })\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.PortalTypes",\n+                "field": "allowed_field",\n+            }\n+        )\n         data = json.loads(view())\n         self.assertEqual(\n-            len(data[\'results\']),\n+            len(data["results"]),\n             len(self.portal.portal_types.objectIds()),\n         )\ndiff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py\nindex aa9cf7d8..7c6703ce 100644\n--- a/plone/app/dexterity/tests/test_robot.py\n+++ b/plone/app/dexterity/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_ACCEPTANCE_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\n@@ -11,18 +10,18 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     current_dir = os.path.abspath(os.path.dirname(__file__))\n-    robot_dir = os.path.join(current_dir, \'robot\')\n+    robot_dir = os.path.join(current_dir, "robot")\n     robot_tests = [\n-        os.path.join(\'robot\', doc) for doc in os.listdir(robot_dir)\n-        if doc.endswith(\'.robot\') and doc.startswith(\'test_\')\n+        os.path.join("robot", doc)\n+        for doc in os.listdir(robot_dir)\n+        if doc.endswith(".robot") and doc.startswith("test_")\n     ]\n     for robot_test in robot_tests:\n         robottestsuite = robotsuite.RobotTestSuite(robot_test)\n         robottestsuite.level = ROBOT_TEST_LEVEL\n-        suite.addTests([\n-            layered(\n-                robottestsuite,\n-                layer=DEXTERITY_ACCEPTANCE_TESTING\n-            ),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(robottestsuite, layer=DEXTERITY_ACCEPTANCE_TESTING),\n+            ]\n+        )\n     return suite\ndiff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py\nindex cfe22e43..15c1b7ac 100644\n--- a/plone/app/dexterity/tests/test_upgrades.py\n+++ b/plone/app/dexterity/tests/test_upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n \n import unittest\n@@ -9,56 +8,55 @@ class TestUpgrades(unittest.TestCase):\n     layer = DEXTERITY_INTEGRATION_TESTING\n \n     def test_add_missing_uuids(self):\n+        from plone.app.dexterity.upgrades.to2001 import add_missing_uuids\n         from plone.dexterity.fti import DexterityFTI\n         from plone.dexterity.utils import createContentInContainer\n-        from plone.app.dexterity.upgrades.to2001 import add_missing_uuids\n-        from plone.uuid.interfaces import IUUID, ATTRIBUTE_NAME\n+        from plone.uuid.interfaces import ATTRIBUTE_NAME\n+        from plone.uuid.interfaces import IUUID\n \n         # create a type and item and remove its UUID\n-        self.layer[\'portal\'].portal_types._setObject(\n-            \'page\', DexterityFTI(\'page\'))\n+        self.layer["portal"].portal_types._setObject("page", DexterityFTI("page"))\n         page = createContentInContainer(\n-            self.layer[\'portal\'],\n-            \'page\',\n-            checkConstraints=False\n+            self.layer["portal"], "page", checkConstraints=False\n         )\n         setattr(page, ATTRIBUTE_NAME, None)\n         self.assertTrue(IUUID(page, None) is None)\n         # reindex to remove the UUID it got when the page was created\n-        page.reindexObject(idxs=[\'UID\'])\n+        page.reindexObject(idxs=["UID"])\n \n         # run the migration\n-        add_missing_uuids(self.layer[\'portal\'])\n+        add_missing_uuids(self.layer["portal"])\n         # make sure we have a new UUID\n         uuid = IUUID(page, None)\n         self.assertTrue(uuid is not None)\n         # make sure the catalog was updated\n-        b = self.layer[\'portal\'].portal_catalog.unrestrictedSearchResults(\n-            portal_type=\'page\')[0]\n+        b = self.layer["portal"].portal_catalog.unrestrictedSearchResults(\n+            portal_type="page"\n+        )[0]\n         self.assertTrue(b.UID == uuid)\n \n         # make sure running the upgrade again doesn\'t change the UUID\n-        add_missing_uuids(self.layer[\'portal\'])\n+        add_missing_uuids(self.layer["portal"])\n         uuid2 = IUUID(page, None)\n-        self.assertEqual(uuid2, uuid, \'Upgrade changes existing uuids.\')\n+        self.assertEqual(uuid2, uuid, "Upgrade changes existing uuids.")\n \n     def test_upgrade_2003(self):\n         from plone.app.dexterity.upgrades.to2003 import fix_installed_products\n         from Products.CMFCore.utils import getToolByName\n+\n         try:\n-            from Products.CMFQuickInstallerTool.InstalledProduct import \\\n-                InstalledProduct\n+            from Products.CMFQuickInstallerTool.InstalledProduct import InstalledProduct\n         except ImportError:\n             # nothing to test\n             return\n-        qi = getToolByName(self.layer[\'portal\'], \'portal_quickinstaller\', None)\n+        qi = getToolByName(self.layer["portal"], "portal_quickinstaller", None)\n         if qi is None:\n             # nothing to test\n             return\n-        ip = InstalledProduct(\'foo\')\n-        ip.utilities = [(\'zope.intid.interfaces.IIntIds\', \'\')]\n-        qi._setObject(\'foo\', ip)\n+        ip = InstalledProduct("foo")\n+        ip.utilities = [("zope.intid.interfaces.IIntIds", "")]\n+        qi._setObject("foo", ip)\n \n-        fix_installed_products(self.layer[\'portal\'])\n+        fix_installed_products(self.layer["portal"])\n \n         self.assertEqual([], ip.utilities)\ndiff --git a/plone/app/dexterity/textindexer/converters.py b/plone/app/dexterity/textindexer/converters.py\nindex e0e994fc..0db1ef55 100644\n--- a/plone/app/dexterity/textindexer/converters.py\n+++ b/plone/app/dexterity/textindexer/converters.py\n@@ -6,10 +6,10 @@\n \n from plone.app.dexterity.textindexer import interfaces\n from plone.app.textfield.interfaces import IRichText\n+from plone.base.utils import safe_text\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from z3c.form.interfaces import IWidget\n from ZODB.POSException import ConflictError\n from zope.component import adapter\n@@ -62,7 +62,7 @@ def convert(self):\n         textvalue = self.field.get(self.context)\n         if textvalue is None:\n             return ""\n-        html = safe_unicode(textvalue.output)\n+        html = safe_text(textvalue.output)\n         transforms = getToolByName(self.context, "portal_transforms")\n         stream = transforms.convertTo("text/plain", html, mimetype=textvalue.mimeType)\n         return stream.getData().strip()\ndiff --git a/plone/app/dexterity/textindexer/testing.py b/plone/app/dexterity/textindexer/testing.py\nindex 84ccb4a8..f1cb92e2 100644\n--- a/plone/app/dexterity/textindexer/testing.py\n+++ b/plone/app/dexterity/textindexer/testing.py\n@@ -5,13 +5,13 @@\n TEXT_INDEXER_FUNCTIONAL_TESTING    functional testing layer\n """\n \n+from io import StringIO\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from six import StringIO\n \n import logging\n \ndiff --git a/plone/app/dexterity/upgrades/to1.py b/plone/app/dexterity/upgrades/to1.py\nindex a94b9aea..f4b33753 100644\n--- a/plone/app/dexterity/upgrades/to1.py\n+++ b/plone/app/dexterity/upgrades/to1.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \n def install_z3cform_profile(context):\n-    gs = getToolByName(context, \'portal_setup\')\n-    profile = \'profile-plone.app.z3cform:default\'\n+    gs = getToolByName(context, "portal_setup")\n+    profile = "profile-plone.app.z3cform:default"\n     gs.runAllImportStepsFromProfile(profile, purge_old=False)\ndiff --git a/plone/app/dexterity/upgrades/to2.py b/plone/app/dexterity/upgrades/to2.py\nindex 511fee9b..1fc725b7 100644\n--- a/plone/app/dexterity/upgrades/to2.py\n+++ b/plone/app/dexterity/upgrades/to2.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \n def remove_stylesheet(context):\n-    cssreg = getToolByName(context, \'portal_css\')\n-    cssreg.unregisterResource(\'++resource++schemaeditor.css\')\n+    cssreg = getToolByName(context, "portal_css")\n+    cssreg.unregisterResource("++resource++schemaeditor.css")\ndiff --git a/plone/app/dexterity/upgrades/to2000.py b/plone/app/dexterity/upgrades/to2000.py\nindex 82efeda1..bae48e0c 100644\n--- a/plone/app/dexterity/upgrades/to2000.py\n+++ b/plone/app/dexterity/upgrades/to2000.py\n@@ -1,8 +1,6 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \n def remove_overlays_css(context):\n-    portal_css = getToolByName(context, \'portal_css\')\n-    portal_css.unregisterResource(\n-        \'++resource++plone.app.dexterity.overlays.css\')\n+    portal_css = getToolByName(context, "portal_css")\n+    portal_css.unregisterResource("++resource++plone.app.dexterity.overlays.css")\ndiff --git a/plone/app/dexterity/upgrades/to2001.py b/plone/app/dexterity/upgrades/to2001.py\nindex e8e7356d..81f95428 100644\n--- a/plone/app/dexterity/upgrades/to2001.py\n+++ b/plone/app/dexterity/upgrades/to2001.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityContent\n from plone.uuid.handlers import addAttributeUUID\n from plone.uuid.interfaces import IUUID\n@@ -6,12 +5,12 @@\n \n \n def add_missing_uuids(context):\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    query = {\'object_provides\': IDexterityContent.__identifier__}\n+    catalog = getToolByName(context, "portal_catalog")\n+    query = {"object_provides": IDexterityContent.__identifier__}\n     for brain in catalog.unrestrictedSearchResults(query):\n-        if getattr(brain, \'UID\', None) is not None:\n+        if getattr(brain, "UID", None) is not None:\n             continue\n         ob = brain.getObject()\n         if IUUID(ob, None) is None:\n             addAttributeUUID(ob, None)\n-            ob.reindexObject(idxs=[\'UID\'])\n+            ob.reindexObject(idxs=["UID"])\ndiff --git a/plone/app/dexterity/upgrades/to2002.py b/plone/app/dexterity/upgrades/to2002.py\nindex 4d4d3f3a..3a2ed421 100644\n--- a/plone/app/dexterity/upgrades/to2002.py\n+++ b/plone/app/dexterity/upgrades/to2002.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \n def install_datepicker_profile(context):\n-    gs = getToolByName(context, \'portal_setup\')\n-    profile = \'profile-collective.z3cform.datetimewidget:default\'\n+    gs = getToolByName(context, "portal_setup")\n+    profile = "profile-collective.z3cform.datetimewidget:default"\n     gs.runAllImportStepsFromProfile(profile, purge_old=False)\ndiff --git a/plone/app/dexterity/upgrades/to2003.py b/plone/app/dexterity/upgrades/to2003.py\nindex d50ec9de..c4a87e7b 100644\n--- a/plone/app/dexterity/upgrades/to2003.py\n+++ b/plone/app/dexterity/upgrades/to2003.py\n@@ -1,19 +1,18 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n \n \n-BAD_GUY = (\'zope.intid.interfaces.IIntIds\', \'\')\n+BAD_GUY = ("zope.intid.interfaces.IIntIds", "")\n \n \n def fix_installed_products(context):\n-    qi = getToolByName(context, \'portal_quickinstaller\', None)\n+    qi = getToolByName(context, "portal_quickinstaller", None)\n     if qi is None:\n         # Nothing to do.\n         return\n-    for installed_product in qi.objectValues(spec=\'Installed Product\'):\n-        if installed_product.getId() == \'plone.app.intid\':\n+    for installed_product in qi.objectValues(spec="Installed Product"):\n+        if installed_product.getId() == "plone.app.intid":\n             continue\n-        utilities = getattr(aq_base(installed_product), \'utilities\', [])\n+        utilities = getattr(aq_base(installed_product), "utilities", [])\n         if BAD_GUY in utilities:\n             installed_product.utilities.remove(BAD_GUY)\ndiff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py\nindex 3f225518..b76c72f7 100644\n--- a/plone/app/dexterity/upgrades/to2004.py\n+++ b/plone/app/dexterity/upgrades/to2004.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityFTI\n from Products.CMFCore.utils import getToolByName\n \n@@ -7,8 +6,8 @@ def remove_cr_and_lf_description(context):\n     types = []\n \n     behaviors = [\n-        \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-        \'plone.app.dexterity.behaviors.metadata.IDublinCore\'\n+        "plone.app.dexterity.behaviors.metadata.IBasic",\n+        "plone.app.dexterity.behaviors.metadata.IDublinCore",\n     ]\n \n     context = context.aq_parent\n@@ -18,18 +17,16 @@ def remove_cr_and_lf_description(context):\n             if behavior in fti.behaviors:\n                 types.append(name)\n \n-    catalog = getToolByName(context, \'portal_catalog\')\n+    catalog = getToolByName(context, "portal_catalog")\n \n     for portal_type in types:\n-        brains = catalog.searchResults(\n-            portal_type=portal_type\n-        )\n+        brains = catalog.searchResults(portal_type=portal_type)\n \n         for brain in brains:\n             obj = brain.getObject()\n \n-            if \'\\n\' in obj.description:\n-                obj.description = obj.description.replace(\'\\n\', \'\')\n+            if "\\n" in obj.description:\n+                obj.description = obj.description.replace("\\n", "")\n \n-            if \'\\r\' in obj.description:\n-                obj.description = obj.description.replace(\'\\r\', \'\')\n+            if "\\r" in obj.description:\n+                obj.description = obj.description.replace("\\r", "")\ndiff --git a/plone/app/dexterity/upgrades/to2005.py b/plone/app/dexterity/upgrades/to2005.py\nindex 6a9e8a79..67500314 100644\n--- a/plone/app/dexterity/upgrades/to2005.py\n+++ b/plone/app/dexterity/upgrades/to2005.py\n@@ -1,42 +1,41 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n import logging\n \n \n-logger = logging.getLogger(\'plone.app.dexterity\')\n+logger = logging.getLogger("plone.app.dexterity")\n \n \n def cleanup_portal_actions(context):\n     # Our actions.xml registers dexterity-types as controlpanel item.  But this\n     # is what controlpanel.xml is for.  So remove it.\n     # https://github.com/plone/plone.app.dexterity/issues/218\n-    actions_tool = getToolByName(context, \'portal_actions\')\n-    main_category = \'controlpanel\'\n-    sub_category = \'controlpanel_addons\'\n-    action_name = \'dexterity-types\'\n+    actions_tool = getToolByName(context, "portal_actions")\n+    main_category = "controlpanel"\n+    sub_category = "controlpanel_addons"\n+    action_name = "dexterity-types"\n \n     # Lookup for action in category.\n     main = getattr(actions_tool, main_category, None)\n     if main is None:\n-        logger.info(\'%s category was already removed.\', main_category)\n+        logger.info("%s category was already removed.", main_category)\n         return\n     sub = getattr(main, sub_category, None)\n     if sub is None:\n-        logger.info(\'%s category was already removed.\', sub_category)\n+        logger.info("%s category was already removed.", sub_category)\n         return\n     if action_name not in sub.objectIds():\n-        logger.info(\'%s action was already removed.\', action_name)\n+        logger.info("%s action was already removed.", action_name)\n         return\n     sub._delObject(action_name)\n-    logger.info(\'Removed %s from portal_actions.\', action_name)\n+    logger.info("Removed %s from portal_actions.", action_name)\n \n     # Cleanup empty categories.\n     if len(sub.objectIds()) > 0:\n         return\n     main._delObject(sub_category)\n-    logger.info(\'Removed empty %s action sub category.\', sub_category)\n+    logger.info("Removed empty %s action sub category.", sub_category)\n     if len(main.objectIds()) > 0:\n         return\n     actions_tool._delObject(main_category)\n-    logger.info(\'Removed empty %s action main category.\', main_category)\n+    logger.info("Removed empty %s action main category.", main_category)\ndiff --git a/setup.py b/setup.py\nindex 55f889ba..711cf058 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,24 +1,23 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'3.0.0a10.dev0\'\n+version = "3.0.0a10.dev0"\n \n short_description = (\n-    \'Dexterity is a content type framework for CMF  applications, \'\n-    \'with particular emphasis on Plone. It can be viewed as an \'\n-    \'alternative to Archetypes that is more light-weight and modular.\'\n+    "Dexterity is a content type framework for CMF  applications, "\n+    "with particular emphasis on Plone. It can be viewed as an "\n+    "alternative to Archetypes that is more light-weight and modular."\n )\n \n-long_description = \'{0}\\n{1}\\n{2}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'RELEASE_NOTES.rst\').read(),\n-    open(\'CHANGES.rst\').read(),\n+long_description = "{}\\n{}\\n{}".format(\n+    open("README.rst").read(),\n+    open("RELEASE_NOTES.rst").read(),\n+    open("CHANGES.rst").read(),\n )\n \n setup(\n-    name=\'plone.app.dexterity\',\n+    name="plone.app.dexterity",\n     version=version,\n     description=short_description,\n     long_description=long_description,\n@@ -36,63 +35,63 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone ttw dexterity schema interface\',\n-    author=\'Martin Aspeli, David Glick, et al\',\n-    author_email=\'dexterity-development@googlegroups.com\',\n-    url=\'http://plone.org/products/dexterity\',\n-    license=\'GPL\',\n+    keywords="plone ttw dexterity schema interface",\n+    author="Martin Aspeli, David Glick, et al",\n+    author_email="dexterity-development@googlegroups.com",\n+    url="http://plone.org/products/dexterity",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n         # Dexterity\n-        \'plone.app.textfield\',\n-        \'plone.behavior>=1.0\',\n-        \'plone.dexterity>=2.2.2\',\n-        \'plone.formwidget.namedfile\',\n-        \'plone.namedfile>=1.0.0\',\n-        \'plone.rfc822\',\n-        \'plone.schemaeditor >1.3.3\',\n+        "plone.app.textfield",\n+        "plone.behavior>=1.0",\n+        "plone.dexterity>=2.2.2",\n+        "plone.formwidget.namedfile",\n+        "plone.namedfile>=1.0.0",\n+        "plone.rfc822",\n+        "plone.schemaeditor >1.3.3",\n         # Plone/Zope core\n-        \'lxml\',\n-        \'plone.app.content\',\n-        \'plone.app.layout\',\n-        \'plone.app.uuid\',\n-        \'plone.app.z3cform>=1.1.0\',\n-        \'plone.autoform>=1.1\',\n-        \'plone.contentrules\',\n-        \'plone.portlets\',\n-        \'plone.schema>=1.1.0\',\n-        \'plone.supermodel>=1.1\',\n-        \'plone.z3cform>=0.6.0\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'setuptools\',\n-        \'Zope2\',\n-        \'zope.browserpage\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'zope.deprecation\',\n-        \'zope.schema\',\n-        \'zope.publisher\',\n-        \'z3c.form>=3.0.0\',\n+        "lxml",\n+        "plone.app.content",\n+        "plone.app.layout",\n+        "plone.app.uuid",\n+        "plone.app.z3cform>=1.1.0",\n+        "plone.autoform>=1.1",\n+        "plone.contentrules",\n+        "plone.portlets",\n+        "plone.schema>=1.1.0",\n+        "plone.supermodel>=1.1",\n+        "plone.z3cform>=0.6.0",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "setuptools",\n+        "Zope",\n+        "zope.browserpage",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.deprecation",\n+        "zope.schema",\n+        "zope.publisher",\n+        "z3c.form>=3.0.0",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.robotframework\',\n-            \'plone.app.testing\',\n+        "test": [\n+            "plone.app.robotframework",\n+            "plone.app.testing",\n         ],\n-        \'grok\': [\n-            \'five.grok\',\n-            \'plone.directives.dexterity\',\n-            \'plone.directives.form>=1.1\',\n+        "grok": [\n+            "five.grok",\n+            "plone.directives.dexterity",\n+            "plone.directives.form>=1.1",\n+        ],\n+        "relations": [\n+            "plone.app.relationfield",\n+            "plone.app.intid",\n+            "z3c.relationfield",\n         ],\n-        \'relations\': [\n-            \'plone.app.relationfield\',\n-            \'plone.app.intid\',\n-            \'z3c.relationfield\',\n-        ]\n     },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

