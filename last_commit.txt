Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-07-05T23:18:22+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/ef7e0cf009eb61c908cde379058f9329029fd93e

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M Products/ATContentTypes/browser/download.py
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/exportimport/content.py
M Products/ATContentTypes/factories.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7bdfc34..b5fe61b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.2.12 (2016-05-15)
diff --git a/Products/ATContentTypes/browser/download.py b/Products/ATContentTypes/browser/download.py
index d16a858..a53ee9a 100644
--- a/Products/ATContentTypes/browser/download.py
+++ b/Products/ATContentTypes/browser/download.py
@@ -1,15 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from Products.Five import BrowserView
-from zope.interface import implements
+from zope.interface import implementer
 from zope.publisher.interfaces import IPublishTraverse
 from zope.publisher.interfaces import NotFound as pNotFound
 
 
+@implementer(IPublishTraverse)
 class DownloadArchetypeFile(BrowserView):
     """Basically, straight copy from plone.namedfile
     """
-    implements(IPublishTraverse)
 
     def __init__(self, context, request):
         super(DownloadArchetypeFile, self).__init__(context, request)
diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index 46211bc..145dbce 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -7,15 +7,14 @@
 from Products.CMFCore.utils import getToolByName
 from zope.component import adapts
 from zope.component import getUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(INextPreviousProvider)
 class ATFolderNextPrevious(object):
     """Let a folder act as a next/previous provider. This will be
     automatically found by the @@plone_nextprevious_view and viewlet.
     """
-
-    implements(INextPreviousProvider)
     adapts(IATFolder)
 
     def __init__(self, context):
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index a756db3..9f4bb59 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -21,7 +21,7 @@
 from webdav.NullResource import NullResource
 from webdav.Resource import Resource as WebdavResoure
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 import os
@@ -88,6 +88,7 @@ def __getattr__(self, name):
         return getattr(self.__ob, name)
 
 
+@implementer(IATContentType)
 class ATCTMixin(BrowserDefaultMixin):
     """Mixin class for AT Content Types"""
 
@@ -103,8 +104,6 @@ class ATCTMixin(BrowserDefaultMixin):
     isDocTemp = False
     _at_rename_after_creation = True  # rename object according to the title?
 
-    implements(IATContentType)
-
     security = ClassSecurityInfo()
 
     @security.protected(ModifyPortalContent)
@@ -438,11 +437,10 @@ def get_size(self):
 InitializeClass(ATCTFolder)
 
 
+@implementer(ISelectableConstrainTypes)
 class ATCTFolderMixin(ConstrainTypesMixin, ATCTMixin):
     """ Constrained folderish type """
 
-    implements(ISelectableConstrainTypes)
-
     security = ClassSecurityInfo()
 
     def __browser_default__(self, request):
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index c992be8..a161651 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -24,7 +24,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.interfaces import IDAVAware
 from types import TupleType
-from zope.interface import implements
+from zope.interface import implementer
 from ZPublisher.HTTPRequest import HTTPRequest
 
 
@@ -217,6 +217,7 @@ def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                                     RESPONSE)
 
 
+@implementer(IATDocument, IDAVAware)
 class ATDocument(ATDocumentBase):
     """A page in the site. Can contain rich text."""
 
@@ -228,6 +229,4 @@ class ATDocument(ATDocumentBase):
     assocMimetypes = ('application/xhtml+xml', 'message/rfc822', 'text/*',)
     assocFileExt = ('txt', 'stx', 'rst', 'rest', 'py',)
 
-    implements(IATDocument, IDAVAware)
-
 registerATCT(ATDocument, PROJECTNAME)
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index c751a1f..74d89ef 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -25,7 +25,7 @@
 from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATEventSchema = ATContentTypeSchema.copy() + Schema((
@@ -164,6 +164,7 @@
 ATEventSchema.moveField('location', before='startDate')
 
 
+@implementer(IATEvent)
 class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
     """Information about an upcoming event.
 
@@ -183,8 +184,6 @@ class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
                     'start_date', 'end_date', 'contact_name', 'contact_email',
                     'contact_phone', 'event_url')
 
-    implements(IATEvent)
-
     security = ClassSecurityInfo()
 
     @security.private
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index d6b0e4d..0a73256 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -23,7 +23,7 @@
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
 from urllib import quote
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 
@@ -56,6 +56,7 @@
 finalizeATCTSchema(ATFileSchema)
 
 
+@implementer(IATFile)
 class ATFile(ATCTFileContent):
     """An external file uploaded to the site."""
 
@@ -74,8 +75,6 @@ class ATFile(ATCTFileContent):
                        'application/pdf',
                        'application/x-shockwave-flash',)
 
-    implements(IATFile)
-
     security = ClassSecurityInfo()
 
     @security.protected(View)
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index cf08dfb..8cef707 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -13,7 +13,7 @@
 from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema  # noqa
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATFolderSchema = folder.ATFolderSchema
@@ -32,6 +32,7 @@
     HAS_LINGUAPLONE = False
 
 
+@implementer(IATFolder, IOrderedContainer)
 class ObsoleteATFolder(ATCTOrderedFolder):
     """A folder which can contain other items."""
 
@@ -45,8 +46,6 @@ class ObsoleteATFolder(ATCTOrderedFolder):
     assocFileExt = ()
     cmf_edit_kws = ()
 
-    implements(IATFolder, IOrderedContainer)
-
     # Enable marshalling via WebDAV/FTP.
     __dav_marshall__ = True
 
@@ -96,6 +95,7 @@ class ATFolder(folder.ATFolder):
 registerATCT(ATFolder, PROJECTNAME)
 
 
+@implementer(IATBTreeFolder)
 class ATBTreeFolder(ATCTBTreeFolder):
     """A folder suitable for holding a very large number of items.
 
@@ -115,8 +115,6 @@ class ATBTreeFolder(ATCTBTreeFolder):
     assocFileExt = ()
     cmf_edit_kws = ()
 
-    implements(IATBTreeFolder)
-
     # Enable marshalling via WebDAV/FTP.
     __dav_marshall__ = True
 
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index 72bcb05..49125c4 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -21,7 +21,7 @@
 from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from zope.interface import implements
+from zope.interface import implementer
 
 
 validation.register(MaxSizeValidator('checkImageMaxSize',
@@ -65,6 +65,7 @@
 finalizeATCTSchema(ATImageSchema)
 
 
+@implementer(IATImage)
 class ATImage(ATCTFileContent, ATCTImageTransform):
     """An image, which can be referenced in documents.
 
@@ -81,8 +82,6 @@ class ATImage(ATCTFileContent, ATCTImageTransform):
     assocFileExt = ('jpg', 'jpeg', 'png', 'gif', )
     cmf_edit_kws = ('file', )
 
-    implements(IATImage)
-
     security = ClassSecurityInfo()
 
     def exportImage(self, format, width, height):
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index f3e4453..91bc466 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -13,7 +13,7 @@
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from urllib import quote
-from zope.interface import implements
+from zope.interface import implementer
 
 import urlparse
 
@@ -35,6 +35,7 @@
 finalizeATCTSchema(ATLinkSchema)
 
 
+@implementer(IATLink)
 class ATLink(ATCTContent):
     """A link to an internal or external resource."""
 
@@ -47,8 +48,6 @@ class ATLink(ATCTContent):
     assocFileExt = ('link', 'url', )
     cmf_edit_kws = ('remote_url', )
 
-    implements(IATLink)
-
     security = ClassSecurityInfo()
 
     @security.protected(ModifyPortalContent)
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index da2b7f8..bd21382 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -23,7 +23,7 @@
 from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from zope.interface import implements
+from zope.interface import implementer
 
 
 validation.register(MaxSizeValidator('checkNewsImageMaxSize',
@@ -90,6 +90,7 @@
 finalizeATCTSchema(ATNewsItemSchema)
 
 
+@implementer(IATNewsItem)
 class ATNewsItem(ATDocumentBase, ATCTImageTransform):
     """An announcement that will show up on the news portlet.
 
@@ -106,8 +107,6 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
     assocFileExt = ('news', )
     cmf_edit_kws = ATDocumentBase.cmf_edit_kws
 
-    implements(IATNewsItem)
-
     security = ClassSecurityInfo()
 
     @security.protected(View)
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index 5bf4e2c..e91488e 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -37,7 +37,7 @@
 from types import StringType
 from types import TupleType
 from webdav.Resource import Resource as WebdavResoure
-from zope.interface import implements
+from zope.interface import implementer
 from ZPublisher.HTTPRequest import HTTPRequest
 
 
@@ -144,6 +144,7 @@
 finalizeATCTSchema(ATTopicSchema, folderish=False, moveDiscussion=False)
 
 
+@implementer(IATTopic, IDisabledExport)
 class ATTopic(ATCTFolder):
     """An automatically updated stored search.
 
@@ -159,7 +160,6 @@ class ATTopic(ATCTFolder):
     assocMimetypes = ()
     assocFileExt = ()
     cmf_edit_kws = ()
-    implements(IATTopic, IDisabledExport)
 
     # Enable marshalling via WebDAV/FTP
     __dav_marshall__ = True
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index bc1fbb5..0cf0d8a 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.permissions import View
 from zope.interface import classImplementsOnly
 from zope.interface import implementedBy
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class NonRefCatalogContent(BaseContentMixin):
@@ -42,13 +42,12 @@ def reindexObject(self, *args, **kwargs): pass
                       if iface is not IReferenceable))
 
 
+@implementer(IATTopicCriterion)
 class ATBaseCriterion(NonRefCatalogContent):
     """A basic criterion"""
 
     security = ClassSecurityInfo()
 
-    implements(IATTopicCriterion)
-
     schema = ATBaseCriterionSchema
     meta_type = 'ATBaseCriterion'
     archetype_name = 'Base Criterion'
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index cb0b18c..a7f4248 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -12,7 +12,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATBooleanCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -30,11 +30,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATBooleanCriterion(ATBaseCriterion):
     """A boolean criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATBooleanCriterionSchema
     meta_type = 'ATBooleanCriterion'
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 44989d3..c89964e 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -7,17 +7,16 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATCurrentAuthorSchema = ATBaseCriterionSchema
 
 
+@implementer(IATTopicSearchCriterion)
 class ATCurrentAuthorCriterion(ATBaseCriterion):
     """A criterion that searches for the currently logged in user's id"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATCurrentAuthorSchema
     meta_type = 'ATCurrentAuthorCriterion'
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 4a555d5..6aef2ca 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -15,7 +15,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 DateOptions = IntDisplayList((
@@ -97,11 +97,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATDateCriteria(ATBaseCriterion):
     """A relative date criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATDateCriteriaSchema
     meta_type = 'ATFriendlyDateCriteria'
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index 4e27530..36fb318 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -11,7 +11,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 RELEVANT_INDICES = list(DATE_INDICES)
@@ -52,11 +52,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATDateRangeCriterion(ATBaseCriterion):
     """A date range criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATDateRangeCriterionSchema
     meta_type = 'ATDateRangeCriterion'
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index 0d7a153..5da98e5 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 CompareOperators = DisplayList((
@@ -56,11 +56,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATListCriterion(ATBaseCriterion):
     """A list criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATListCriterionSchema
     meta_type = 'ATListCriterion'
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index 0eece15..2506e3a 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATPathCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -52,11 +52,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATPathCriterion(ATBaseCriterion):
     """A path criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATPathCriterionSchema
     meta_type = 'ATPathCriterion'
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 930878f..02e97c1 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 
 
@@ -26,11 +26,10 @@
 VOCAB_ID = u'plone.app.vocabularies.ReallyUserFriendlyTypes'
 
 
+@implementer(IATTopicSearchCriterion)
 class ATPortalTypeCriterion(ATSelectionCriterion):
     """A portal_types criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATPortalTypeCriterionSchema
     meta_type = 'ATPortalTypeCriterion'
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 13107fd..e98ae38 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -6,17 +6,16 @@
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATReferenceCriterionSchema = ATSelectionCriterion.schema
 
 
+@implementer(IATTopicSearchCriterion)
 class ATReferenceCriterion(ATSelectionCriterion):
     """A reference criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     meta_type = 'ATReferenceCriterion'
     archetype_name = 'Reference Criterion'
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index 82c2a22..c1080b1 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATRelativePathCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -47,11 +47,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATRelativePathCriterion(ATBaseCriterion):
     """A path criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATRelativePathCriterionSchema
     meta_type = 'ATRelativePathCriterion'
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index f1c78ed..b71594a 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -15,7 +15,7 @@
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 CompareOperators = DisplayList((
@@ -58,11 +58,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATSelectionCriterion(ATBaseCriterion):
     """A selection criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATSelectionCriterionSchema
     meta_type = 'ATSelectionCriterion'
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 5fd1674..d7021e8 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 DirectionOperations = DisplayList((
@@ -77,11 +77,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATSimpleIntCriterion(ATBaseCriterion):
     """A simple int criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATSimpleIntCriterionSchema
     meta_type = 'ATSimpleIntCriterion'
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index 2dff2e2..6eb7f54 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -11,7 +11,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATSimpleStringCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -30,11 +30,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATSimpleStringCriterion(ATBaseCriterion):
     """A simple string criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATSimpleStringCriterionSchema
     meta_type = 'ATSimpleStringCriterion'
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index d60489c..d95e3a0 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -11,7 +11,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSortCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATSortCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -26,10 +26,9 @@
 ))
 
 
+@implementer(IATTopicSortCriterion)
 class ATSortCriterion(ATBaseCriterion):
     """A sort criterion"""
-
-    implements(IATTopicSortCriterion)
     security = ClassSecurityInfo()
     schema = ATSortCriterionSchema
     meta_type = 'ATSortCriterion'
diff --git a/Products/ATContentTypes/exportimport/content.py b/Products/ATContentTypes/exportimport/content.py
index 791e6d7..38e575b 100644
--- a/Products/ATContentTypes/exportimport/content.py
+++ b/Products/ATContentTypes/exportimport/content.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 from Products.GenericSetup.interfaces import IFilesystemExporter
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 
 
@@ -12,12 +12,11 @@ class IDisabledExport(Interface):
     pass
 
 
+@implementer(IFilesystemExporter)
 class NullExporterAdapter(object):
     """Dummy exporter that does nothing
     """
 
-    implements(IFilesystemExporter)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
index 0acf18f..9cb8881 100644
--- a/Products/ATContentTypes/factories.py
+++ b/Products/ATContentTypes/factories.py
@@ -10,7 +10,7 @@
 from zope.component import getUtility
 from zope.container.interfaces import INameChooser
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.lifecycleevent import ObjectModifiedEvent
 
 import transaction
@@ -19,11 +19,11 @@
 upload_lock = allocate_lock()
 
 
+@implementer(IATCTFileFactory)
 class ATCTFileFactory(object):
     """
     ripped out of collective.uploadify
     """
-    implements(IATCTFileFactory)
     adapts(IFolderish)
 
     def __init__(self, context):
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index de16e4a..b59652a 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -5,7 +5,7 @@
 from DateTime import DateTime
 from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 PRODID = "-//AT Content Types//AT Event//EN"
@@ -79,12 +79,11 @@
 """
 
 
+@implementer(ICalendarSupport)
 class CalendarSupportMixin:
     """Mixin class for iCal/vCal support
     """
 
-    implements(ICalendarSupport)
-
     security = ClassSecurityInfo()
 
     actions = ({
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index 1d14d9f..2556af8 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -18,7 +18,7 @@
 from Products.CMFCore.permissions import View
 from Products.CMFCore.PortalFolder import PortalFolderBase as PortalFolder
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 # Constants for enableConstrainMixin.
@@ -141,13 +141,12 @@ def parentPortalTypeEqual(obj):
     return False
 
 
+@implementer(ISelectableConstrainTypes)
 class ConstrainTypesMixin:
     """ Gives the user with given rights the possibility to
         constrain the addable types on a per-folder basis.
     """
 
-    implements(ISelectableConstrainTypes)
-
     security = ClassSecurityInfo()
 
     #
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index eded116..b610f68 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -7,11 +7,12 @@
 from Products.ATContentTypes.interfaces import IHistoryAware
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 import difflib
 
 
+@implementer(IHistoryAware)
 class HistoryAwareMixin(ATHistoryAwareMixin):
     """History aware mixin class
 
@@ -24,8 +25,6 @@ class HistoryAwareMixin(ATHistoryAwareMixin):
     managers.
     """
 
-    implements(IHistoryAware)
-
     security = ClassSecurityInfo()
 
     actions = ({
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 66c296e..e7448a7 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -8,7 +8,7 @@
 from Products.validation.config import validation
 from Products.validation.interfaces.IValidator import IValidator
 from types import FileType
-from zope.interface import implements
+from zope.interface import implementer
 from zope.tal.htmltalparser import HTMLTALParser
 from zope.tal.talgenerator import TALGenerator
 from ZPublisher.HTTPRequest import FileUpload
@@ -49,11 +49,11 @@
 validatorList = []
 
 
+@implementer(IValidator)
 class TALValidator:
     """Validates a text to be valid TAL code
 
     """
-    implements(IValidator)
 
     def __init__(self, name, title='', description=''):
         self.name = name
@@ -72,6 +72,7 @@ def __call__(self, value, *args, **kw):
 validatorList.append(TALValidator('isTAL', title='', description=''))
 
 
+@implementer(IValidator)
 class TidyHtmlValidator:
     """use mxTidy to check HTML
 
@@ -79,8 +80,6 @@ class TidyHtmlValidator:
     Do not clean up the value
     """
 
-    implements(IValidator)
-
     def __init__(self, name, title='', description=''):
         self.name = name
         self.title = title or name
@@ -109,6 +108,7 @@ def __call__(self, value, *args, **kw):
 validatorList.append(TidyHtmlValidator('isTidyHtml', title='', description=''))
 
 
+@implementer(IValidator)
 class TidyHtmlWithCleanupValidator:
     """use mxTidy to check HTML
 
@@ -116,8 +116,6 @@ class TidyHtmlWithCleanupValidator:
     Clean up
     """
 
-    implements(IValidator)
-
     def __init__(self, name, title='', description=''):
         self.name = name
         self.title = title or name
@@ -156,12 +154,11 @@ def __call__(self, value, *args, **kw):
     'isTidyHtmlWithCleanup', title='', description=''))
 
 
+@implementer(IValidator)
 class NonEmptyFileValidator:
     """Fails on empty non-existant files
     """
 
-    implements(IValidator)
-
     def __init__(self, name, title='', description=''):
         self.name = name
         self.title = title or name
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index ca0083c..ed9878e 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -7,7 +7,7 @@
 from Products.ATContentTypes.interfaces import IATTopicCriterion
 from Products.CMFCore.permissions import setDefaultRoles
 from zope.component import adapts
-from zope.interface import implements
+from zope.interface import implementer
 
 
 TYPE_ROLES = ('Manager', 'Site Administrator', 'Owner')
@@ -63,8 +63,8 @@ def wireAddPermissions():
     return permissions
 
 
+@implementer(IFieldPermissionChecker)
 class ATFieldPermissionChecker(object):
-    implements(IFieldPermissionChecker)
     adapts(IBaseObject)
 
     def __init__(self, context):
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index 5bb3f6f..defb2ee 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -15,7 +15,7 @@
 from Products.CMFCore.utils import UniqueObject
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 
@@ -27,6 +27,7 @@ def log(message, summary='', severity=logging.DEBUG):
     LOG.log(severity, 'ATCT: %s \n%s', summary, message)
 
 
+@implementer(IATCTTool)
 class ATCTTool(UniqueObject, SimpleItem, PropertyManager, ATTopicsTool):
     """ATContentTypes tool
     """
@@ -36,8 +37,6 @@ class ATCTTool(UniqueObject, SimpleItem, PropertyManager, ATTopicsTool):
     meta_type = 'ATCT Tool'
     title = 'Collection and image scales settings'
 
-    implements(IATCTTool)
-
     manage_options = (
         {'label': 'Overview', 'action': 'manage_overview'},
         {'label': 'Image scales', 'action': 'manage_imageScales'}
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index ed35c57..aa0e5e2 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -22,7 +22,7 @@
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from zExceptions import NotFound
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 from zope.structuredtext import stx2html
 from ZPublisher.mapply import mapply
 from ZPublisher.Publish import call_object
@@ -83,13 +83,12 @@ def _createObjectByType(type_name, container, id, *args, **kw):
 # we can add all types to types_tool's allowed_content_types
 # for the class without having side effects in the rest of
 # the portal.
+@implementer(IHideFromBreadcrumbs)
 class TempFolder(TempFolderBase):
 
     portal_type = meta_type = 'TempFolder'
     isPrincipiaFolderish = 0
 
-    implements(IHideFromBreadcrumbs)
-
     # override getPhysicalPath so that temporary objects return a full path
     # that includes the acquisition parent of portal_factory (otherwise we get
     # portal_root/portal_factory/... no matter where the object will reside)
@@ -248,6 +247,7 @@ def manage_renameObject(self, id, new_id, REQUEST=None):
 
 
 # #############################################################################
+@implementer(IFactoryTool, IHideFromBreadcrumbs)
 class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     """ """
     id = 'portal_factory'
@@ -256,8 +256,6 @@ class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     security = ClassSecurityInfo()
     isPrincipiaFolderish = 0
 
-    implements(IFactoryTool, IHideFromBreadcrumbs)
-
     manage_options = (
         ({'label': 'Overview', 'action': 'manage_overview'},
          {'label': 'Documentation', 'action': 'manage_docs'},
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 0e147b7..6d97dcd 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -27,7 +27,7 @@
 from Products.CMFPlone.permissions import ModifyPortalContent
 from Products.CMFPlone.permissions import View
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class MetadataError(Exception):
@@ -307,10 +307,9 @@ def listPolicies(self, typ=None):
 )
 
 
+@implementer(IMetadataTool)
 class MetadataTool(PloneBaseTool, UniqueObject, Folder):
 
-    implements(IMetadataTool)
-
     id = 'portal_metadata'
     meta_type = 'Default Metadata Tool'
     toolicon = 'skins/plone_images/info_icon.png'
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index 554c6db..721d875 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -10,7 +10,7 @@
 from Products.ATContentTypes.interfaces import IATCTTopicsTool
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class TopicIndex(SimpleItem, Persistent):
@@ -24,12 +24,12 @@ def __init__(self, index, friendlyName='',
         self.criteria = tuple(criteria)
 
 
+@implementer(IATCTTopicsTool)
 class ATTopicsTool(Base):
     """This tool makes it possible to manage the indexes that are used
        inside topics and allows you to enter a friendly name instead of
        cryptic indexes.
     """
-    implements(IATCTTopicsTool)
 
     security = ClassSecurityInfo()
 


Repository: Products.ATContentTypes


Branch: refs/heads/master
Date: 2016-07-10T19:01:30+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.ATContentTypes/commit/0214cf2fb2adf1d1408fb759b5476118a9723103

Merge pull request #36 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M Products/ATContentTypes/browser/download.py
M Products/ATContentTypes/browser/nextprevious.py
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/boolean.py
M Products/ATContentTypes/criteria/currentauthor.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/daterange.py
M Products/ATContentTypes/criteria/list.py
M Products/ATContentTypes/criteria/path.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/reference.py
M Products/ATContentTypes/criteria/relativepath.py
M Products/ATContentTypes/criteria/selection.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/criteria/simplestring.py
M Products/ATContentTypes/criteria/sort.py
M Products/ATContentTypes/exportimport/content.py
M Products/ATContentTypes/factories.py
M Products/ATContentTypes/lib/calendarsupport.py
M Products/ATContentTypes/lib/constraintypes.py
M Products/ATContentTypes/lib/historyaware.py
M Products/ATContentTypes/lib/validators.py
M Products/ATContentTypes/permission.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/factory.py
M Products/ATContentTypes/tool/metadata.py
M Products/ATContentTypes/tool/topic.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7bdfc34..b5fe61b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.2.12 (2016-05-15)
diff --git a/Products/ATContentTypes/browser/download.py b/Products/ATContentTypes/browser/download.py
index d16a858..a53ee9a 100644
--- a/Products/ATContentTypes/browser/download.py
+++ b/Products/ATContentTypes/browser/download.py
@@ -1,15 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from Products.Five import BrowserView
-from zope.interface import implements
+from zope.interface import implementer
 from zope.publisher.interfaces import IPublishTraverse
 from zope.publisher.interfaces import NotFound as pNotFound
 
 
+@implementer(IPublishTraverse)
 class DownloadArchetypeFile(BrowserView):
     """Basically, straight copy from plone.namedfile
     """
-    implements(IPublishTraverse)
 
     def __init__(self, context, request):
         super(DownloadArchetypeFile, self).__init__(context, request)
diff --git a/Products/ATContentTypes/browser/nextprevious.py b/Products/ATContentTypes/browser/nextprevious.py
index 46211bc..145dbce 100644
--- a/Products/ATContentTypes/browser/nextprevious.py
+++ b/Products/ATContentTypes/browser/nextprevious.py
@@ -7,15 +7,14 @@
 from Products.CMFCore.utils import getToolByName
 from zope.component import adapts
 from zope.component import getUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(INextPreviousProvider)
 class ATFolderNextPrevious(object):
     """Let a folder act as a next/previous provider. This will be
     automatically found by the @@plone_nextprevious_view and viewlet.
     """
-
-    implements(INextPreviousProvider)
     adapts(IATFolder)
 
     def __init__(self, context):
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index a756db3..9f4bb59 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -21,7 +21,7 @@
 from webdav.NullResource import NullResource
 from webdav.Resource import Resource as WebdavResoure
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 import os
@@ -88,6 +88,7 @@ def __getattr__(self, name):
         return getattr(self.__ob, name)
 
 
+@implementer(IATContentType)
 class ATCTMixin(BrowserDefaultMixin):
     """Mixin class for AT Content Types"""
 
@@ -103,8 +104,6 @@ class ATCTMixin(BrowserDefaultMixin):
     isDocTemp = False
     _at_rename_after_creation = True  # rename object according to the title?
 
-    implements(IATContentType)
-
     security = ClassSecurityInfo()
 
     @security.protected(ModifyPortalContent)
@@ -438,11 +437,10 @@ def get_size(self):
 InitializeClass(ATCTFolder)
 
 
+@implementer(ISelectableConstrainTypes)
 class ATCTFolderMixin(ConstrainTypesMixin, ATCTMixin):
     """ Constrained folderish type """
 
-    implements(ISelectableConstrainTypes)
-
     security = ClassSecurityInfo()
 
     def __browser_default__(self, request):
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index c992be8..a161651 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -24,7 +24,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.interfaces import IDAVAware
 from types import TupleType
-from zope.interface import implements
+from zope.interface import implementer
 from ZPublisher.HTTPRequest import HTTPRequest
 
 
@@ -217,6 +217,7 @@ def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                                     RESPONSE)
 
 
+@implementer(IATDocument, IDAVAware)
 class ATDocument(ATDocumentBase):
     """A page in the site. Can contain rich text."""
 
@@ -228,6 +229,4 @@ class ATDocument(ATDocumentBase):
     assocMimetypes = ('application/xhtml+xml', 'message/rfc822', 'text/*',)
     assocFileExt = ('txt', 'stx', 'rst', 'rest', 'py',)
 
-    implements(IATDocument, IDAVAware)
-
 registerATCT(ATDocument, PROJECTNAME)
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index c751a1f..74d89ef 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -25,7 +25,7 @@
 from Products.ATContentTypes.lib.historyaware import HistoryAwareMixin
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATEventSchema = ATContentTypeSchema.copy() + Schema((
@@ -164,6 +164,7 @@
 ATEventSchema.moveField('location', before='startDate')
 
 
+@implementer(IATEvent)
 class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
     """Information about an upcoming event.
 
@@ -183,8 +184,6 @@ class ATEvent(ATCTContent, CalendarSupportMixin, HistoryAwareMixin):
                     'start_date', 'end_date', 'contact_name', 'contact_email',
                     'contact_phone', 'event_url')
 
-    implements(IATEvent)
-
     security = ClassSecurityInfo()
 
     @security.private
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index d6b0e4d..0a73256 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -23,7 +23,7 @@
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
 from urllib import quote
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 
@@ -56,6 +56,7 @@
 finalizeATCTSchema(ATFileSchema)
 
 
+@implementer(IATFile)
 class ATFile(ATCTFileContent):
     """An external file uploaded to the site."""
 
@@ -74,8 +75,6 @@ class ATFile(ATCTFileContent):
                        'application/pdf',
                        'application/x-shockwave-flash',)
 
-    implements(IATFile)
-
     security = ClassSecurityInfo()
 
     @security.protected(View)
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index cf08dfb..8cef707 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -13,7 +13,7 @@
 from Products.ATContentTypes.interfaces import IATFolder
 from Products.ATContentTypes.lib.constraintypes import ConstrainTypesMixinSchema  # noqa
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATFolderSchema = folder.ATFolderSchema
@@ -32,6 +32,7 @@
     HAS_LINGUAPLONE = False
 
 
+@implementer(IATFolder, IOrderedContainer)
 class ObsoleteATFolder(ATCTOrderedFolder):
     """A folder which can contain other items."""
 
@@ -45,8 +46,6 @@ class ObsoleteATFolder(ATCTOrderedFolder):
     assocFileExt = ()
     cmf_edit_kws = ()
 
-    implements(IATFolder, IOrderedContainer)
-
     # Enable marshalling via WebDAV/FTP.
     __dav_marshall__ = True
 
@@ -96,6 +95,7 @@ class ATFolder(folder.ATFolder):
 registerATCT(ATFolder, PROJECTNAME)
 
 
+@implementer(IATBTreeFolder)
 class ATBTreeFolder(ATCTBTreeFolder):
     """A folder suitable for holding a very large number of items.
 
@@ -115,8 +115,6 @@ class ATBTreeFolder(ATCTBTreeFolder):
     assocFileExt = ()
     cmf_edit_kws = ()
 
-    implements(IATBTreeFolder)
-
     # Enable marshalling via WebDAV/FTP.
     __dav_marshall__ = True
 
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index 72bcb05..49125c4 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -21,7 +21,7 @@
 from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from zope.interface import implements
+from zope.interface import implementer
 
 
 validation.register(MaxSizeValidator('checkImageMaxSize',
@@ -65,6 +65,7 @@
 finalizeATCTSchema(ATImageSchema)
 
 
+@implementer(IATImage)
 class ATImage(ATCTFileContent, ATCTImageTransform):
     """An image, which can be referenced in documents.
 
@@ -81,8 +82,6 @@ class ATImage(ATCTFileContent, ATCTImageTransform):
     assocFileExt = ('jpg', 'jpeg', 'png', 'gif', )
     cmf_edit_kws = ('file', )
 
-    implements(IATImage)
-
     security = ClassSecurityInfo()
 
     def exportImage(self, format, width, height):
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index f3e4453..91bc466 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -13,7 +13,7 @@
 from Products.CMFCore.permissions import ModifyPortalContent
 from Products.CMFCore.permissions import View
 from urllib import quote
-from zope.interface import implements
+from zope.interface import implementer
 
 import urlparse
 
@@ -35,6 +35,7 @@
 finalizeATCTSchema(ATLinkSchema)
 
 
+@implementer(IATLink)
 class ATLink(ATCTContent):
     """A link to an internal or external resource."""
 
@@ -47,8 +48,6 @@ class ATLink(ATCTContent):
     assocFileExt = ('link', 'url', )
     cmf_edit_kws = ('remote_url', )
 
-    implements(IATLink)
-
     security = ClassSecurityInfo()
 
     @security.protected(ModifyPortalContent)
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index da2b7f8..bd21382 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -23,7 +23,7 @@
 from Products.validation import V_REQUIRED
 from Products.validation.config import validation
 from Products.validation.validators.SupplValidators import MaxSizeValidator
-from zope.interface import implements
+from zope.interface import implementer
 
 
 validation.register(MaxSizeValidator('checkNewsImageMaxSize',
@@ -90,6 +90,7 @@
 finalizeATCTSchema(ATNewsItemSchema)
 
 
+@implementer(IATNewsItem)
 class ATNewsItem(ATDocumentBase, ATCTImageTransform):
     """An announcement that will show up on the news portlet.
 
@@ -106,8 +107,6 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
     assocFileExt = ('news', )
     cmf_edit_kws = ATDocumentBase.cmf_edit_kws
 
-    implements(IATNewsItem)
-
     security = ClassSecurityInfo()
 
     @security.protected(View)
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index 5bf4e2c..e91488e 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -37,7 +37,7 @@
 from types import StringType
 from types import TupleType
 from webdav.Resource import Resource as WebdavResoure
-from zope.interface import implements
+from zope.interface import implementer
 from ZPublisher.HTTPRequest import HTTPRequest
 
 
@@ -144,6 +144,7 @@
 finalizeATCTSchema(ATTopicSchema, folderish=False, moveDiscussion=False)
 
 
+@implementer(IATTopic, IDisabledExport)
 class ATTopic(ATCTFolder):
     """An automatically updated stored search.
 
@@ -159,7 +160,6 @@ class ATTopic(ATCTFolder):
     assocMimetypes = ()
     assocFileExt = ()
     cmf_edit_kws = ()
-    implements(IATTopic, IDisabledExport)
 
     # Enable marshalling via WebDAV/FTP
     __dav_marshall__ = True
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index bc1fbb5..0cf0d8a 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.permissions import View
 from zope.interface import classImplementsOnly
 from zope.interface import implementedBy
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class NonRefCatalogContent(BaseContentMixin):
@@ -42,13 +42,12 @@ def reindexObject(self, *args, **kwargs): pass
                       if iface is not IReferenceable))
 
 
+@implementer(IATTopicCriterion)
 class ATBaseCriterion(NonRefCatalogContent):
     """A basic criterion"""
 
     security = ClassSecurityInfo()
 
-    implements(IATTopicCriterion)
-
     schema = ATBaseCriterionSchema
     meta_type = 'ATBaseCriterion'
     archetype_name = 'Base Criterion'
diff --git a/Products/ATContentTypes/criteria/boolean.py b/Products/ATContentTypes/criteria/boolean.py
index cb0b18c..a7f4248 100644
--- a/Products/ATContentTypes/criteria/boolean.py
+++ b/Products/ATContentTypes/criteria/boolean.py
@@ -12,7 +12,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATBooleanCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -30,11 +30,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATBooleanCriterion(ATBaseCriterion):
     """A boolean criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATBooleanCriterionSchema
     meta_type = 'ATBooleanCriterion'
diff --git a/Products/ATContentTypes/criteria/currentauthor.py b/Products/ATContentTypes/criteria/currentauthor.py
index 44989d3..c89964e 100644
--- a/Products/ATContentTypes/criteria/currentauthor.py
+++ b/Products/ATContentTypes/criteria/currentauthor.py
@@ -7,17 +7,16 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATCurrentAuthorSchema = ATBaseCriterionSchema
 
 
+@implementer(IATTopicSearchCriterion)
 class ATCurrentAuthorCriterion(ATBaseCriterion):
     """A criterion that searches for the currently logged in user's id"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATCurrentAuthorSchema
     meta_type = 'ATCurrentAuthorCriterion'
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index 4a555d5..6aef2ca 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -15,7 +15,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 DateOptions = IntDisplayList((
@@ -97,11 +97,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATDateCriteria(ATBaseCriterion):
     """A relative date criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATDateCriteriaSchema
     meta_type = 'ATFriendlyDateCriteria'
diff --git a/Products/ATContentTypes/criteria/daterange.py b/Products/ATContentTypes/criteria/daterange.py
index 4e27530..36fb318 100644
--- a/Products/ATContentTypes/criteria/daterange.py
+++ b/Products/ATContentTypes/criteria/daterange.py
@@ -11,7 +11,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 RELEVANT_INDICES = list(DATE_INDICES)
@@ -52,11 +52,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATDateRangeCriterion(ATBaseCriterion):
     """A date range criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATDateRangeCriterionSchema
     meta_type = 'ATDateRangeCriterion'
diff --git a/Products/ATContentTypes/criteria/list.py b/Products/ATContentTypes/criteria/list.py
index 0d7a153..5da98e5 100644
--- a/Products/ATContentTypes/criteria/list.py
+++ b/Products/ATContentTypes/criteria/list.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 CompareOperators = DisplayList((
@@ -56,11 +56,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATListCriterion(ATBaseCriterion):
     """A list criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATListCriterionSchema
     meta_type = 'ATListCriterion'
diff --git a/Products/ATContentTypes/criteria/path.py b/Products/ATContentTypes/criteria/path.py
index 0eece15..2506e3a 100644
--- a/Products/ATContentTypes/criteria/path.py
+++ b/Products/ATContentTypes/criteria/path.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATPathCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -52,11 +52,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATPathCriterion(ATBaseCriterion):
     """A path criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATPathCriterionSchema
     meta_type = 'ATPathCriterion'
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 930878f..02e97c1 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 
 
@@ -26,11 +26,10 @@
 VOCAB_ID = u'plone.app.vocabularies.ReallyUserFriendlyTypes'
 
 
+@implementer(IATTopicSearchCriterion)
 class ATPortalTypeCriterion(ATSelectionCriterion):
     """A portal_types criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATPortalTypeCriterionSchema
     meta_type = 'ATPortalTypeCriterion'
diff --git a/Products/ATContentTypes/criteria/reference.py b/Products/ATContentTypes/criteria/reference.py
index 13107fd..e98ae38 100644
--- a/Products/ATContentTypes/criteria/reference.py
+++ b/Products/ATContentTypes/criteria/reference.py
@@ -6,17 +6,16 @@
 from Products.ATContentTypes.criteria.selection import ATSelectionCriterion
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATReferenceCriterionSchema = ATSelectionCriterion.schema
 
 
+@implementer(IATTopicSearchCriterion)
 class ATReferenceCriterion(ATSelectionCriterion):
     """A reference criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     meta_type = 'ATReferenceCriterion'
     archetype_name = 'Reference Criterion'
diff --git a/Products/ATContentTypes/criteria/relativepath.py b/Products/ATContentTypes/criteria/relativepath.py
index 82c2a22..c1080b1 100644
--- a/Products/ATContentTypes/criteria/relativepath.py
+++ b/Products/ATContentTypes/criteria/relativepath.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATRelativePathCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -47,11 +47,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATRelativePathCriterion(ATBaseCriterion):
     """A path criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATRelativePathCriterionSchema
     meta_type = 'ATRelativePathCriterion'
diff --git a/Products/ATContentTypes/criteria/selection.py b/Products/ATContentTypes/criteria/selection.py
index f1c78ed..b71594a 100644
--- a/Products/ATContentTypes/criteria/selection.py
+++ b/Products/ATContentTypes/criteria/selection.py
@@ -15,7 +15,7 @@
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 CompareOperators = DisplayList((
@@ -58,11 +58,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATSelectionCriterion(ATBaseCriterion):
     """A selection criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATSelectionCriterionSchema
     meta_type = 'ATSelectionCriterion'
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 5fd1674..d7021e8 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -14,7 +14,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 DirectionOperations = DisplayList((
@@ -77,11 +77,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATSimpleIntCriterion(ATBaseCriterion):
     """A simple int criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATSimpleIntCriterionSchema
     meta_type = 'ATSimpleIntCriterion'
diff --git a/Products/ATContentTypes/criteria/simplestring.py b/Products/ATContentTypes/criteria/simplestring.py
index 2dff2e2..6eb7f54 100644
--- a/Products/ATContentTypes/criteria/simplestring.py
+++ b/Products/ATContentTypes/criteria/simplestring.py
@@ -11,7 +11,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSearchCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATSimpleStringCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -30,11 +30,10 @@
 ))
 
 
+@implementer(IATTopicSearchCriterion)
 class ATSimpleStringCriterion(ATBaseCriterion):
     """A simple string criterion"""
 
-    implements(IATTopicSearchCriterion)
-
     security = ClassSecurityInfo()
     schema = ATSimpleStringCriterionSchema
     meta_type = 'ATSimpleStringCriterion'
diff --git a/Products/ATContentTypes/criteria/sort.py b/Products/ATContentTypes/criteria/sort.py
index d60489c..d95e3a0 100644
--- a/Products/ATContentTypes/criteria/sort.py
+++ b/Products/ATContentTypes/criteria/sort.py
@@ -11,7 +11,7 @@
 from Products.ATContentTypes.interfaces import IATTopicSortCriterion
 from Products.ATContentTypes.permission import ChangeTopics
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 ATSortCriterionSchema = ATBaseCriterionSchema + Schema((
@@ -26,10 +26,9 @@
 ))
 
 
+@implementer(IATTopicSortCriterion)
 class ATSortCriterion(ATBaseCriterion):
     """A sort criterion"""
-
-    implements(IATTopicSortCriterion)
     security = ClassSecurityInfo()
     schema = ATSortCriterionSchema
     meta_type = 'ATSortCriterion'
diff --git a/Products/ATContentTypes/exportimport/content.py b/Products/ATContentTypes/exportimport/content.py
index 791e6d7..38e575b 100644
--- a/Products/ATContentTypes/exportimport/content.py
+++ b/Products/ATContentTypes/exportimport/content.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 from Products.GenericSetup.interfaces import IFilesystemExporter
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 
 
@@ -12,12 +12,11 @@ class IDisabledExport(Interface):
     pass
 
 
+@implementer(IFilesystemExporter)
 class NullExporterAdapter(object):
     """Dummy exporter that does nothing
     """
 
-    implements(IFilesystemExporter)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/Products/ATContentTypes/factories.py b/Products/ATContentTypes/factories.py
index 0acf18f..9cb8881 100644
--- a/Products/ATContentTypes/factories.py
+++ b/Products/ATContentTypes/factories.py
@@ -10,7 +10,7 @@
 from zope.component import getUtility
 from zope.container.interfaces import INameChooser
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.lifecycleevent import ObjectModifiedEvent
 
 import transaction
@@ -19,11 +19,11 @@
 upload_lock = allocate_lock()
 
 
+@implementer(IATCTFileFactory)
 class ATCTFileFactory(object):
     """
     ripped out of collective.uploadify
     """
-    implements(IATCTFileFactory)
     adapts(IFolderish)
 
     def __init__(self, context):
diff --git a/Products/ATContentTypes/lib/calendarsupport.py b/Products/ATContentTypes/lib/calendarsupport.py
index de16e4a..b59652a 100644
--- a/Products/ATContentTypes/lib/calendarsupport.py
+++ b/Products/ATContentTypes/lib/calendarsupport.py
@@ -5,7 +5,7 @@
 from DateTime import DateTime
 from Products.ATContentTypes.interfaces import ICalendarSupport
 from Products.CMFCore.permissions import View
-from zope.interface import implements
+from zope.interface import implementer
 
 
 PRODID = "-//AT Content Types//AT Event//EN"
@@ -79,12 +79,11 @@
 """
 
 
+@implementer(ICalendarSupport)
 class CalendarSupportMixin:
     """Mixin class for iCal/vCal support
     """
 
-    implements(ICalendarSupport)
-
     security = ClassSecurityInfo()
 
     actions = ({
diff --git a/Products/ATContentTypes/lib/constraintypes.py b/Products/ATContentTypes/lib/constraintypes.py
index 1d14d9f..2556af8 100644
--- a/Products/ATContentTypes/lib/constraintypes.py
+++ b/Products/ATContentTypes/lib/constraintypes.py
@@ -18,7 +18,7 @@
 from Products.CMFCore.permissions import View
 from Products.CMFCore.PortalFolder import PortalFolderBase as PortalFolder
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 # Constants for enableConstrainMixin.
@@ -141,13 +141,12 @@ def parentPortalTypeEqual(obj):
     return False
 
 
+@implementer(ISelectableConstrainTypes)
 class ConstrainTypesMixin:
     """ Gives the user with given rights the possibility to
         constrain the addable types on a per-folder basis.
     """
 
-    implements(ISelectableConstrainTypes)
-
     security = ClassSecurityInfo()
 
     #
diff --git a/Products/ATContentTypes/lib/historyaware.py b/Products/ATContentTypes/lib/historyaware.py
index eded116..b610f68 100644
--- a/Products/ATContentTypes/lib/historyaware.py
+++ b/Products/ATContentTypes/lib/historyaware.py
@@ -7,11 +7,12 @@
 from Products.ATContentTypes.interfaces import IHistoryAware
 from Products.CMFCore.permissions import View
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 import difflib
 
 
+@implementer(IHistoryAware)
 class HistoryAwareMixin(ATHistoryAwareMixin):
     """History aware mixin class
 
@@ -24,8 +25,6 @@ class HistoryAwareMixin(ATHistoryAwareMixin):
     managers.
     """
 
-    implements(IHistoryAware)
-
     security = ClassSecurityInfo()
 
     actions = ({
diff --git a/Products/ATContentTypes/lib/validators.py b/Products/ATContentTypes/lib/validators.py
index 66c296e..e7448a7 100644
--- a/Products/ATContentTypes/lib/validators.py
+++ b/Products/ATContentTypes/lib/validators.py
@@ -8,7 +8,7 @@
 from Products.validation.config import validation
 from Products.validation.interfaces.IValidator import IValidator
 from types import FileType
-from zope.interface import implements
+from zope.interface import implementer
 from zope.tal.htmltalparser import HTMLTALParser
 from zope.tal.talgenerator import TALGenerator
 from ZPublisher.HTTPRequest import FileUpload
@@ -49,11 +49,11 @@
 validatorList = []
 
 
+@implementer(IValidator)
 class TALValidator:
     """Validates a text to be valid TAL code
 
     """
-    implements(IValidator)
 
     def __init__(self, name, title='', description=''):
         self.name = name
@@ -72,6 +72,7 @@ def __call__(self, value, *args, **kw):
 validatorList.append(TALValidator('isTAL', title='', description=''))
 
 
+@implementer(IValidator)
 class TidyHtmlValidator:
     """use mxTidy to check HTML
 
@@ -79,8 +80,6 @@ class TidyHtmlValidator:
     Do not clean up the value
     """
 
-    implements(IValidator)
-
     def __init__(self, name, title='', description=''):
         self.name = name
         self.title = title or name
@@ -109,6 +108,7 @@ def __call__(self, value, *args, **kw):
 validatorList.append(TidyHtmlValidator('isTidyHtml', title='', description=''))
 
 
+@implementer(IValidator)
 class TidyHtmlWithCleanupValidator:
     """use mxTidy to check HTML
 
@@ -116,8 +116,6 @@ class TidyHtmlWithCleanupValidator:
     Clean up
     """
 
-    implements(IValidator)
-
     def __init__(self, name, title='', description=''):
         self.name = name
         self.title = title or name
@@ -156,12 +154,11 @@ def __call__(self, value, *args, **kw):
     'isTidyHtmlWithCleanup', title='', description=''))
 
 
+@implementer(IValidator)
 class NonEmptyFileValidator:
     """Fails on empty non-existant files
     """
 
-    implements(IValidator)
-
     def __init__(self, name, title='', description=''):
         self.name = name
         self.title = title or name
diff --git a/Products/ATContentTypes/permission.py b/Products/ATContentTypes/permission.py
index ca0083c..ed9878e 100644
--- a/Products/ATContentTypes/permission.py
+++ b/Products/ATContentTypes/permission.py
@@ -7,7 +7,7 @@
 from Products.ATContentTypes.interfaces import IATTopicCriterion
 from Products.CMFCore.permissions import setDefaultRoles
 from zope.component import adapts
-from zope.interface import implements
+from zope.interface import implementer
 
 
 TYPE_ROLES = ('Manager', 'Site Administrator', 'Owner')
@@ -63,8 +63,8 @@ def wireAddPermissions():
     return permissions
 
 
+@implementer(IFieldPermissionChecker)
 class ATFieldPermissionChecker(object):
-    implements(IFieldPermissionChecker)
     adapts(IBaseObject)
 
     def __init__(self, context):
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index 5bb3f6f..defb2ee 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -15,7 +15,7 @@
 from Products.CMFCore.utils import UniqueObject
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 
@@ -27,6 +27,7 @@ def log(message, summary='', severity=logging.DEBUG):
     LOG.log(severity, 'ATCT: %s \n%s', summary, message)
 
 
+@implementer(IATCTTool)
 class ATCTTool(UniqueObject, SimpleItem, PropertyManager, ATTopicsTool):
     """ATContentTypes tool
     """
@@ -36,8 +37,6 @@ class ATCTTool(UniqueObject, SimpleItem, PropertyManager, ATTopicsTool):
     meta_type = 'ATCT Tool'
     title = 'Collection and image scales settings'
 
-    implements(IATCTTool)
-
     manage_options = (
         {'label': 'Overview', 'action': 'manage_overview'},
         {'label': 'Image scales', 'action': 'manage_imageScales'}
diff --git a/Products/ATContentTypes/tool/factory.py b/Products/ATContentTypes/tool/factory.py
index ed35c57..aa0e5e2 100644
--- a/Products/ATContentTypes/tool/factory.py
+++ b/Products/ATContentTypes/tool/factory.py
@@ -22,7 +22,7 @@
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from zExceptions import NotFound
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 from zope.structuredtext import stx2html
 from ZPublisher.mapply import mapply
 from ZPublisher.Publish import call_object
@@ -83,13 +83,12 @@ def _createObjectByType(type_name, container, id, *args, **kw):
 # we can add all types to types_tool's allowed_content_types
 # for the class without having side effects in the rest of
 # the portal.
+@implementer(IHideFromBreadcrumbs)
 class TempFolder(TempFolderBase):
 
     portal_type = meta_type = 'TempFolder'
     isPrincipiaFolderish = 0
 
-    implements(IHideFromBreadcrumbs)
-
     # override getPhysicalPath so that temporary objects return a full path
     # that includes the acquisition parent of portal_factory (otherwise we get
     # portal_root/portal_factory/... no matter where the object will reside)
@@ -248,6 +247,7 @@ def manage_renameObject(self, id, new_id, REQUEST=None):
 
 
 # #############################################################################
+@implementer(IFactoryTool, IHideFromBreadcrumbs)
 class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     """ """
     id = 'portal_factory'
@@ -256,8 +256,6 @@ class FactoryTool(PloneBaseTool, UniqueObject, SimpleItem):
     security = ClassSecurityInfo()
     isPrincipiaFolderish = 0
 
-    implements(IFactoryTool, IHideFromBreadcrumbs)
-
     manage_options = (
         ({'label': 'Overview', 'action': 'manage_overview'},
          {'label': 'Documentation', 'action': 'manage_docs'},
diff --git a/Products/ATContentTypes/tool/metadata.py b/Products/ATContentTypes/tool/metadata.py
index 0e147b7..6d97dcd 100644
--- a/Products/ATContentTypes/tool/metadata.py
+++ b/Products/ATContentTypes/tool/metadata.py
@@ -27,7 +27,7 @@
 from Products.CMFPlone.permissions import ModifyPortalContent
 from Products.CMFPlone.permissions import View
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class MetadataError(Exception):
@@ -307,10 +307,9 @@ def listPolicies(self, typ=None):
 )
 
 
+@implementer(IMetadataTool)
 class MetadataTool(PloneBaseTool, UniqueObject, Folder):
 
-    implements(IMetadataTool)
-
     id = 'portal_metadata'
     meta_type = 'Default Metadata Tool'
     toolicon = 'skins/plone_images/info_icon.png'
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index 554c6db..721d875 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -10,7 +10,7 @@
 from Products.ATContentTypes.interfaces import IATCTTopicsTool
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
-from zope.interface import implements
+from zope.interface import implementer
 
 
 class TopicIndex(SimpleItem, Persistent):
@@ -24,12 +24,12 @@ def __init__(self, index, friendlyName='',
         self.criteria = tuple(criteria)
 
 
+@implementer(IATCTTopicsTool)
 class ATTopicsTool(Base):
     """This tool makes it possible to manage the indexes that are used
        inside topics and allows you to enter a friendly name instead of
        cryptic indexes.
     """
-    implements(IATCTTopicsTool)
 
     security = ClassSecurityInfo()
 


