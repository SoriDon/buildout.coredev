Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:53:10+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/068d5f6322515a21dbf112f3999ed373fe6d155e

Implement viewlet dummy ordering needed for Python 3 sorting

Files changed:
M CHANGES.rst
M plone/app/layout/viewlets/common.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e6d26c5..ec5fb79 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -36,6 +36,8 @@ Bug fixes:\n - Helper `getNavigationRoot` returns site, if context is not in\n   acquisition chain (eg AJAX calls)\n   [tomgross]\n+- Implement viewlet dummy ordering needed for Python 3 sorting\n+  [ale-rt]\n \n \n 2.8.0 (2018-04-24)\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 0da1f9f..d7762c1 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_inner\n from cgi import escape\n from datetime import date\n+from functools import total_ordering\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.memoize.view import memoize\n@@ -29,6 +30,7 @@\n \n \n @implementer(IViewlet)\n+@total_ordering\n class ViewletBase(BrowserView):\n     """ Base class with common functions for link viewlets.\n     """\n@@ -62,6 +64,16 @@ def index(self):\n         raise NotImplementedError(\n             \'`index` method must be implemented by subclass.\')\n \n+    def __lt__(self, other):\n+        \'\'\' Sort by name\n+        \'\'\'\n+        return self.__name__ < other.__name__\n+\n+    def __eq__(self, other):\n+        \'\'\' Check for equality\n+        \'\'\'\n+        return id(self) == id(other)\n+\n \n class TitleViewlet(ViewletBase):\n     index = ViewPageTemplateFile(\'title.pt\')\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:53:10+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/ce1b9175aba3b1cc63626fa52b32f052b7da5006

Switch to sort by id

Files changed:
M plone/app/layout/viewlets/common.py

b"diff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex d7762c1..1a7e699 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -67,7 +67,7 @@ def index(self):\n     def __lt__(self, other):\n         ''' Sort by name\n         '''\n-        return self.__name__ < other.__name__\n+        return id(self) < id(other)\n \n     def __eq__(self, other):\n         ''' Check for equality\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/2e4fad5aac69ca5525385d61423ef90420281ba8

Fix print statement

Files changed:
M plone/app/layout/viewlets/tests/history.txt

b'diff --git a/plone/app/layout/viewlets/tests/history.txt b/plone/app/layout/viewlets/tests/history.txt\nindex a9cf845..7bebda2 100644\n--- a/plone/app/layout/viewlets/tests/history.txt\n+++ b/plone/app/layout/viewlets/tests/history.txt\n@@ -56,8 +56,10 @@ Create a public page with workflow.\n The history viewlet gracefully handles initial default workflow state.\n \n     >>> browser.follow(url=\'@@historyview\')\n-    >>> browser.contents\n-    \'...<span class="historyAction state-private">Create</span>...\'\n+    >>> from __future__ import print_function\n+    >>> print(browser.contents)\n+    <...<span class="historyAction state-private">Create</span>...\n+\n \n The history viewlet handles revert actions sucessfully. Let\'s make a revision.\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/7497becea60d580c44bb0d64cf88359bfc36bcc8

Use implementer decorators

Files changed:
M plone/app/layout/globals/tests/test_interface.py

b'diff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex 3532bae..fc0dbe7 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -38,8 +38,10 @@ class NotAnInterface(object):\n def test_interface_view(self):\n     """Information about the interfaces of an object\n \n-    >>> from zope.interface import Interface, implements\n-    >>> from zope.interface import directlyProvides, classProvides\n+    >>> from zope.interface import implementer\n+    >>> from zope.interface import Interface\n+    >>> from zope.interface import directlyProvides\n+    >>> from zope.interface import provider\n     >>> from zope.component import provideAdapter, getMultiAdapter\n     >>> from zope.publisher.interfaces.browser import IBrowserRequest\n     >>> from zope.publisher.browser import TestRequest\n@@ -50,9 +52,10 @@ def test_interface_view(self):\n \n     >>> from plone.app.layout.globals.tests.test_interface import IOne, ITwo\n \n-    >>> class One(object):\n-    ...     implements(IOne)\n-    ...     classProvides(ITwo)\n+    >>> @implementer(IOne)\n+    ... @provider(ITwo)\n+    ... class One(object):\n+    ...     pass\n \n     >>> from plone.app.layout.globals.interface import InterfaceInformation\n     >>> provideAdapter(\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/5b9bfbaf1cea43a32c37d00c4286e398ea06ecf4

fix sitemap in py3

Files changed:
M plone/app/layout/sitemap/sitemap.py

b'diff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex 98ca9c5..e8ae0a5 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -8,10 +8,12 @@\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six import StringIO\n+from six import BytesIO\n from zope.component import getUtility\n from zope.publisher.interfaces import NotFound\n \n+import six\n+\n \n def _render_cachekey(fun, self):\n     # Cache by filename\n@@ -101,8 +103,10 @@ def objects(self):\n     def generate(self):\n         """Generates the Gzipped sitemap."""\n         xml = self.template()\n-        fp = StringIO()\n-        gzip = GzipFile(self.filename, \'w\', 9, fp)\n+        fp = BytesIO()\n+        gzip = GzipFile(self.filename, \'wb\', 9, fp)\n+        if isinstance(xml, six.text_type):\n+            xml = xml.encode(\'utf8\')\n         gzip.write(xml)\n         gzip.close()\n         data = fp.getvalue()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: Franz Gerhard Reinisch (fgrcon) <franz@fgrcon.net>
Commit: https://github.com/plone/plone.app.layout/commit/a650448ce8579dbbf2e6d1ab78326c2ea76e652b

fix tests for python 3

Files changed:
A plone/app/layout/globals/tests/data/bodyclass_nametest.pt
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py

b'diff --git a/plone/app/layout/globals/tests/data/bodyclass_nametest.pt b/plone/app/layout/globals/tests/data/bodyclass_nametest.pt\nnew file mode 100644\nindex 0000000..f11b613\n--- /dev/null\n+++ b/plone/app/layout/globals/tests/data/bodyclass_nametest.pt\n@@ -0,0 +1 @@\n+<html><body>foo</body></html>\n\\ No newline at end of file\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex 74b37f2..d97940f 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -1,24 +1,33 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING \n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.helpers import logout\n from plone.locking.interfaces import ILockable\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.utils import _createObjectByType\n from zope.interface import directlyProvides\n \n+import unittest\n \n-class TestContextStateView(GlobalsTestCase):\n+\n+class TestContextStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n+    layer = INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n-        self.fview = self.folder.restrictedTraverse(\'@@plone_context_state\')\n \n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.portal.invokeFactory(\'Folder\', \'f0\')\n+        self.folder = self.portal[\'f0\']\n+        self.fview = self.folder.restrictedTraverse(\'@@plone_context_state\')\n         self.folder.invokeFactory(\'Document\', \'d1\')\n         self.folder.setDefaultPage(\'d1\')\n         self.dview = self.folder.d1.restrictedTraverse(\'@@plone_context_state\')\n-\n         self.folder.invokeFactory(\'Folder\', \'f1\')\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n         self.sview = self.folder.f1.restrictedTraverse(\'@@plone_context_state\')\n@@ -214,14 +223,14 @@ def test_is_portal_root(self):\n \n     def test_is_editable(self):\n         self.assertEqual(self.dview.is_editable(), True)\n-        self.logout()\n+        logout()\n         del self.app.REQUEST.__annotations__\n         self.assertEqual(self.dview.is_editable(), False)\n \n     def test_is_locked(self):\n         self.assertEqual(self.dview.is_locked(), False)\n         ILockable(self.folder.d1).lock()\n-        self.logout()\n+        logout()\n         # The object is not "locked" if it was locked by the\n         # current user\n         del self.app.REQUEST.__annotations__\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex fc0dbe7..cbc64b3 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -116,7 +116,7 @@ def test_interface_view(self):\n     [<InterfaceClass plone.app.layout.globals.tests.test_interface.IZero>]\n     >>> iface_info[\'base_names\']\n     [\'plone.app.layout.globals.tests.test_interface.IOne\']\n-    >>> iface_info[\'attributes\'][0][\'doc\']\n+    >>> iface_info[\'attrisbutes\'][0][\'doc\']\n     \'One name for IOne\'\n     >>> iface_info[\'attributes\'][0][\'name\']\n     \'one_name\'\ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex 8973345..9c13fa8 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -1,19 +1,30 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.helpers import logout\n from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces.controlpanel import ILinkSchema\n from zope.component import getUtility\n \n+import os\n+import unittest\n import zope.interface\n \n \n-class TestLayoutView(GlobalsTestCase):\n+class TestLayoutView(unittest.TestCase):\n     """Tests the global layout view."""\n+    layer = INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\'] \n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])             \n         self.view = self.portal.restrictedTraverse(\'@@plone_layout\')\n+        self.portal.invokeFactory(\'Folder\', \'folder1\')\n+        self.portal.invokeFactory(\'Document\', \'front-page\')\n+        self.portal.setDefaultPage(\'front-page\')\n \n     def testHavePortlets(self):\n         have_portlets = self.view.have_portlets\n@@ -24,12 +35,13 @@ def testHavePortlets(self):\n     def testEnableColumns(self):\n         # Make sure we can force a column to appear even if there are no\n         # portlets\n+        self.app = self.layer[\'app\']\n         self.app.REQUEST.set(\'disable_plone.leftcolumn\', 0)\n         self.assertEqual(True, self.view.have_portlets(\'plone.leftcolumn\'))\n \n     def testDisableColumns(self):\n-        self.setRoles((\'Manager\', ))\n-\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.app = self.layer[\'app\']\n         # Now add some portlets to be sure we have columns.  For\n         # simplicity we want a portlet that has no add form.  Note\n         # that apparently the Calender had no add form until Plone\n@@ -53,7 +65,7 @@ def testDisableColumns(self):\n         addview_right()\n \n         # Logout, otherwise the login portlet will never show.\n-        self.logout()\n+        logout()\n \n         # Check that we do not explicitly disable the columns.  This\n         # may happen if we change the request in this method or if the\n@@ -71,79 +83,83 @@ def testDisableColumns(self):\n \n     def testBodyClass(self):\n         context = self.portal[\'front-page\']\n-        template = context.document_view\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        body_class = view.bodyClass(template, view)\n+        view = context.restrictedTraverse(\'view\')\n+        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        body_class = layout_view.bodyClass(view, layout_view)\n         assert \'section-front-page\' in body_class\n \n     def testBodyClassTemplate(self):\n+        # test of first parameter only\n         context = self.portal[\'front-page\']\n \n-        template = context.document_view\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-\n-        body_class = view.bodyClass(template, view)\n-        assert \'template-document_view\' in body_class\n+        view = context.restrictedTraverse(\'view\')\n+        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        \n+        # case 1: name from first parameter, expected a template or view\n+        from Products.CMFCore.FSPageTemplate import FSPageTemplate\n+        template = FSPageTemplate(\'document_view\', \n+            os.path.join(os.path.dirname(__file__),\'data\',\'bodyclass_nametest.pt\')\n+        )\n+        body_class = layout_view.bodyClass(template, view)\n+        self.assertIn(\'template-document_view\', body_class)\n \n-        body_class = view.bodyClass(template, None)\n-        assert \'template-document_view\' in body_class\n+        # case 2: even w/o second parameter it has to work         \n+        body_class = layout_view.bodyClass(template, None)\n+        self.assertIn(\'template-document_view\', body_class)\n \n-        body_class = view.bodyClass(None, view)\n-        assert \'template-plone_layout\' in body_class\n+        # case 3: if theres no template get name from view\n+        body_class = layout_view.bodyClass(None, view)\n+        self.assertIn(\'template-view\', body_class)\n \n     def testBodyClassWithNavigationRoot(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        context = self.folder\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n+        context = self.portal.folder1\n         view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.folder_listing\n+        template = context.restrictedTraverse(\'view\')\n         body_class = view.bodyClass(template, view)\n-        assert \'section-%s\' % context.getId() in body_class\n-        assert \'site-Members\' in body_class\n+        assert \'site-%s\' % context.getId() in body_class        \n \n     def testBodyClassWithEverySection(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        self.folder.invokeFactory(\'Folder\', \'folder2\')\n-        self.folder.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.folder.folder2.folder3.invokeFactory(\'Document\', \'page\')\n-        context = self.folder.folder2.folder3.page\n+        zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n+        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n+        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        context = self.portal.folder1.folder2.folder3.page\n         view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.document_view\n-        body_class = view.bodyClass(template, view)\n-        assert \'subsection-folder2 subsection-folder2-folder3\' in body_class\n-        assert \' subsection-folder2-folder3-page\' in body_class\n+        template = context.restrictedTraverse(\'view\')\n+        body_class = view.bodyClass(template, view)        \n+        assert \'section-folder2 site-folder1\' in body_class\n+        assert \' subsection-folder3 subsection-folder3-page\' in body_class\n \n     def testBodyClassWithEverySectionTurnedOff(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        self.folder.invokeFactory(\'Folder\', \'folder2\')\n-        self.folder.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.folder.folder2.folder3.invokeFactory(\'Document\', \'page\')\n-        context = self.folder.folder2.folder3.page\n+        registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0        \n+        zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n+        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n+        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        context = self.portal.folder1.folder2.folder3.page\n         view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.document_view\n+        template = context.restrictedTraverse(\'view\')\n         body_class = view.bodyClass(template, view)\n         assert \'subsection-folder2 subsection-folder2-folder3\' \\\n             not in body_class\n         assert \' subsection-folder2-folder3-page\' not in body_class\n \n-    def testBodyClassWithMarkSpecialLinksOnOff(self):\n+    def testBodyClassWithMarkSpecialLinksOnOff(self):            \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n             ILinkSchema,\n             prefix="plone",\n             check=False\n         )\n-\n         context = self.portal[\'front-page\']\n-        template = context.document_view\n+        template = context.restrictedTraverse(\'view\')\n         view = context.restrictedTraverse(\'@@plone_layout\')\n \n         # Case 1\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex 38217c0..d60d852 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+from plone.app.layout.testing import INTEGRATION_TESTING \n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.helpers import logout\n from plone.app.layout.globals.tests.base import GlobalsTestCase\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n@@ -11,17 +15,25 @@\n from zope.i18n.locales import locales\n from zope.traversing.interfaces import BeforeTraverseEvent\n \n+import unittest\n import zope.interface\n \n \n-class TestPortalStateView(GlobalsTestCase):\n+class TestPortalStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n-\n-    def afterSetUp(self):\n+    layer = INTEGRATION_TESTING\n+    def setUp(self):\n+        #import pdb; pdb.set_trace()\n+        #self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.portal.invokeFactory(\'Folder\', \'f0\')\n+        self.folder = self.portal[\'f0\']\n         self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n-\n-    def test_portal(self):\n+ \n+    def test_portal(self):                                                                                                                \n         self.assertEqual(self.view.portal(), self.portal)\n \n     def test_portal_title(self):\n@@ -35,13 +47,13 @@ def test_portal_url(self):\n \n     def test_navigation_root(self):\n         self.assertEqual(self.view.navigation_root(), self.portal)\n-\n+        import pdb; pdb.set_trace() \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n-        self.assertEqual(view.navigation_root(), members)\n+        f1 = self.folder\n+        zope.interface.alsoProvides(f1, INavigationRoot)\n+        view = f1.restrictedTraverse(\'@@plone_portal_state\')\n+        self.assertEqual(view.navigation_root(), f1)\n \n     def test_navigation_root_path(self):\n         self.assertEqual(self.view.navigation_root_path(), \'/plone\')\n@@ -50,12 +62,12 @@ def test_navigation_root_path(self):\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n+        f1 = self.folder\n+        zope.interface.alsoProvides(f1, INavigationRoot)\n+        view = f1.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(\n             view.navigation_root_path(),\n-            \'/plone/Members\'\n+            \'/plone/folder\'\n         )\n         self.assertEqual(\n             view.navigation_root_path(), getNavigationRoot(self.folder))\n@@ -66,7 +78,8 @@ def test_navigation_root_title(self):\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n+        import pdb; pdb.set_trace()       \n+        folder = self.portal.folder\n         zope.interface.alsoProvides(members, INavigationRoot)\n         view = members.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(view.navigation_root_title(), members.Title())\n@@ -80,8 +93,8 @@ def test_navigation_root_url(self):\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n+        \n+        zope.interface.alsoProvides(self.portal.folder, INavigationRoot)\n         view = members.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(\n             view.navigation_root_url(),\n@@ -133,8 +146,11 @@ def test_member(self):\n         )\n \n     def test_anonymous(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        #self.portal.invokeFactory(\'Folder\', \'f0\')\n         self.assertEqual(self.view.anonymous(), False)\n-        self.logout()\n+        logout()\n         del self.app.REQUEST.__annotations__\n         self.assertEqual(self.view.anonymous(), True)\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: Franz Gerhard Reinisch (fgrcon) <franz@fgrcon.net>
Commit: https://github.com/plone/plone.app.layout/commit/97c75067f7311021c4cb3eb0d044d46104eeb1d5

was soll das

Files changed:
M plone/app/layout/globals/tests/test_portal.py

b'diff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex d60d852..bafb953 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -47,12 +47,12 @@ def test_portal_url(self):\n \n     def test_navigation_root(self):\n         self.assertEqual(self.view.navigation_root(), self.portal)\n-        import pdb; pdb.set_trace() \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n         f1 = self.folder\n         zope.interface.alsoProvides(f1, INavigationRoot)\n         view = f1.restrictedTraverse(\'@@plone_portal_state\')\n+        import pdb; pdb.set_trace()\n         self.assertEqual(view.navigation_root(), f1)\n \n     def test_navigation_root_path(self):\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/5d49e5a1a372901a362e1a0bedef7a55094dac44

re-add Member folder and adapt test accordingly

Files changed:
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/testing.py
D plone/app/layout/globals/tests/base.py

b'diff --git a/plone/app/layout/globals/tests/base.py b/plone/app/layout/globals/tests/base.py\ndeleted file mode 100644\nindex 982856b..0000000\n--- a/plone/app/layout/globals/tests/base.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n-\n-\n-class GlobalsTestCase(PloneTestCase):\n-    """ Base testing class for globals tests """\n-\n-\n-class GlobalsFunctionalTestCase(PloneTestCase):\n-    """ Base testing class for globals functional tests """\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex bafb953..79902dd 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,9 +1,8 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.testing import INTEGRATION_TESTING \n+from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing.helpers import logout\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.registry.interfaces import IRegistry\n@@ -23,17 +22,15 @@ class TestPortalStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n     layer = INTEGRATION_TESTING\n+\n     def setUp(self):\n-        #import pdb; pdb.set_trace()\n-        #self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n-        self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n         setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f0\')\n-        self.folder = self.portal[\'f0\']\n+        self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)\n         self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n- \n-    def test_portal(self):                                                                                                                \n+\n+    def test_portal(self):\n         self.assertEqual(self.view.portal(), self.portal)\n \n     def test_portal_title(self):\n@@ -49,11 +46,10 @@ def test_navigation_root(self):\n         self.assertEqual(self.view.navigation_root(), self.portal)\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        f1 = self.folder\n-        zope.interface.alsoProvides(f1, INavigationRoot)\n-        view = f1.restrictedTraverse(\'@@plone_portal_state\')\n-        import pdb; pdb.set_trace()\n-        self.assertEqual(view.navigation_root(), f1)\n+        members = self.portal[\'Members\']\n+        zope.interface.alsoProvides(members, INavigationRoot)\n+        view = members.restrictedTraverse(\'@@plone_portal_state\')\n+        self.assertEqual(view.navigation_root(), members)\n \n     def test_navigation_root_path(self):\n         self.assertEqual(self.view.navigation_root_path(), \'/plone\')\n@@ -62,12 +58,12 @@ def test_navigation_root_path(self):\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        f1 = self.folder\n-        zope.interface.alsoProvides(f1, INavigationRoot)\n-        view = f1.restrictedTraverse(\'@@plone_portal_state\')\n+        members = self.portal[\'Members\']\n+        zope.interface.alsoProvides(members, INavigationRoot)\n+        view = members.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(\n             view.navigation_root_path(),\n-            \'/plone/folder\'\n+            \'/plone/Members\'\n         )\n         self.assertEqual(\n             view.navigation_root_path(), getNavigationRoot(self.folder))\n@@ -75,15 +71,14 @@ def test_navigation_root_path(self):\n     def test_navigation_root_title(self):\n         self.portal.Title = "Portal title"\n         self.assertEqual(self.view.navigation_root_title(), "Portal title")\n-\n+        members = self.portal[\'Members\']\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        import pdb; pdb.set_trace()       \n-        folder = self.portal.folder\n         zope.interface.alsoProvides(members, INavigationRoot)\n         view = members.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(view.navigation_root_title(), members.Title())\n \n+\n     def test_navigation_root_url(self):\n         url = self.app.REQUEST.physicalPathToURL(\n             getNavigationRoot(self.folder))\n@@ -93,8 +88,9 @@ def test_navigation_root_url(self):\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        \n-        zope.interface.alsoProvides(self.portal.folder, INavigationRoot)\n+\n+        members = self.portal[\'Members\']\n+        zope.interface.alsoProvides(members, INavigationRoot)\n         view = members.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(\n             view.navigation_root_url(),\ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex 4aefc56..b9e7c13 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,13 +1,19 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n from Products.CMFPlone.utils import getToolByName\n+from plone.app.layout.testing import INTEGRATION_TESTING\n \n+import unittest\n \n-class TestToolsView(GlobalsTestCase):\n+\n+class TestToolsView(unittest.TestCase):\n     """Tests the global tools view.\n     """\n \n-    def afterSetUp(self):\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.folder = self.portal[\'Members\']\n         self.view = self.folder.restrictedTraverse(\'@@plone_tools\')\n \n     def test_actions(self):\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex 4c6b15e..9570064 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -3,6 +3,8 @@\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import TEST_USER_ID\n+from Products.CMFPlone.utils import _createObjectByType\n \n \n class Fixture(PloneSandboxLayer):\n@@ -14,6 +16,18 @@ def setUpZope(self, app, configurationContext):\n         import plone.app.layout\n         self.loadZCML(package=plone.app.layout)\n \n+    def setUpPloneSite(self, portal):\n+        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        mtool = portal.portal_membership\n+        if not mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+        mtool.createMemberArea(TEST_USER_ID)\n+        if mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+\n+        # _createObjectByType(\'Folder\', portal, id=\'folder\')\n+\n+\n FIXTURE = Fixture()\n INTEGRATION_TESTING = IntegrationTesting(\n     bases=(FIXTURE,),\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/760905fdcc17fa364455f6bf117bb0ee38468d4a

fix tests for py3 and drop use of PloneTestCase

Files changed:
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/navigation/tests/test_root.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/base.py
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_functional.py
M plone/app/layout/viewlets/tests/test_history.py
M plone/app/layout/viewlets/tests/test_social.py
D plone/app/layout/analytics/tests/base.py

b'diff --git a/plone/app/layout/analytics/tests/base.py b/plone/app/layout/analytics/tests/base.py\ndeleted file mode 100644\nindex b328697..0000000\n--- a/plone/app/layout/analytics/tests/base.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n-\n-\n-class AnalyticsTestCase(PloneTestCase):\n-    """ Base testing class for analytics tests """\n-\n-\n-class AnalyticsFunctionalTestCase(PloneTestCase):\n-    """ Base testing class for analytics functional tests """\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex cbc64b3..03e04d8 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -96,13 +96,6 @@ def test_interface_view(self):\n \'plone.app.layout.globals.tests.test_interface.NotAnInterface\' \\\n is not a valid Interface.\n \n-    >>> view.names_and_descriptions(\n-    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[0]\n-    (\'one_function\', \'One function for IOne\')\n-    >>> view.names_and_descriptions(\n-    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[1]\n-    (\'one_name\', \'One name for IOne\')\n-\n     >>> view.get_base_interface()\n     []\n     >>> iface_info = view.get_interface_informations(IOne)\n@@ -126,6 +119,13 @@ def test_interface_view(self):\n     \'one_function\'\n     >>> iface_info[\'methods\'][0][\'signature\']\n     \'()\'\n+    >>> view.names_and_descriptions(\n+    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[0]\n+    (\'one_function\', \'One function for IOne\')\n+    >>> view.names_and_descriptions(\n+    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[1]\n+    (\'one_name\', \'One name for IOne\')\n+\n     """\n \n \ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex 9c13fa8..00e9479 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -19,8 +19,8 @@ class TestLayoutView(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\'] \n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])             \n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n         self.view = self.portal.restrictedTraverse(\'@@plone_layout\')\n         self.portal.invokeFactory(\'Folder\', \'folder1\')\n         self.portal.invokeFactory(\'Document\', \'front-page\')\n@@ -94,16 +94,16 @@ def testBodyClassTemplate(self):\n \n         view = context.restrictedTraverse(\'view\')\n         layout_view = context.restrictedTraverse(\'@@plone_layout\')\n-        \n+\n         # case 1: name from first parameter, expected a template or view\n         from Products.CMFCore.FSPageTemplate import FSPageTemplate\n-        template = FSPageTemplate(\'document_view\', \n+        template = FSPageTemplate(\'document_view\',\n             os.path.join(os.path.dirname(__file__),\'data\',\'bodyclass_nametest.pt\')\n         )\n         body_class = layout_view.bodyClass(template, view)\n         self.assertIn(\'template-document_view\', body_class)\n \n-        # case 2: even w/o second parameter it has to work         \n+        # case 2: even w/o second parameter it has to work\n         body_class = layout_view.bodyClass(template, None)\n         self.assertIn(\'template-document_view\', body_class)\n \n@@ -120,7 +120,7 @@ def testBodyClassWithNavigationRoot(self):\n         view = context.restrictedTraverse(\'@@plone_layout\')\n         template = context.restrictedTraverse(\'view\')\n         body_class = view.bodyClass(template, view)\n-        assert \'site-%s\' % context.getId() in body_class        \n+        assert \'site-%s\' % context.getId() in body_class\n \n     def testBodyClassWithEverySection(self):\n         # mark a folder "between" self.folder and self.portal with\n@@ -132,13 +132,13 @@ def testBodyClassWithEverySection(self):\n         context = self.portal.folder1.folder2.folder3.page\n         view = context.restrictedTraverse(\'@@plone_layout\')\n         template = context.restrictedTraverse(\'view\')\n-        body_class = view.bodyClass(template, view)        \n+        body_class = view.bodyClass(template, view)\n         assert \'section-folder2 site-folder1\' in body_class\n         assert \' subsection-folder3 subsection-folder3-page\' in body_class\n \n     def testBodyClassWithEverySectionTurnedOff(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0        \n+        registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n         self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n         self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n@@ -151,7 +151,7 @@ def testBodyClassWithEverySectionTurnedOff(self):\n             not in body_class\n         assert \' subsection-folder2-folder3-page\' not in body_class\n \n-    def testBodyClassWithMarkSpecialLinksOnOff(self):            \n+    def testBodyClassWithMarkSpecialLinksOnOff(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n             ILinkSchema,\ndiff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 06320ac..64db226 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -1,36 +1,30 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.links.viewlets import RSSViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n \n class TestRSSViewletView(ViewletsTestCase):\n-    """\n-    Test the document by line viewlet\n-    """\n-\n-    def afterSetUp(self):\n-        pass\n \n     def test_RSSViewlet(self):\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\'Folder\', \'news\')\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSyndicationSettings)\n         if settings.allowed:\n             # make sure syndication is disabled\n-            self.loginAsPortalOwner()\n             settings.allowed = False\n-            self.logout()\n         request = self.app.REQUEST\n         viewlet = RSSViewlet(self.portal, request, None, None)\n         viewlet.update()\n         result = viewlet.render()\n         self.assertEqual(result.strip(), \'\')\n-        self.loginAsPortalOwner()\n         settings.allowed = True\n         settings.site_rss_items = (self.portal.news.UID(),)\n-        self.logout()\n         request = self.app.REQUEST\n         viewlet = RSSViewlet(self.portal, request, None, None)\n         viewlet.update()\ndiff --git a/plone/app/layout/navigation/tests/test_root.py b/plone/app/layout/navigation/tests/test_root.py\nindex d86c3e3..4ec47e7 100644\n--- a/plone/app/layout/navigation/tests/test_root.py\n+++ b/plone/app/layout/navigation/tests/test_root.py\n@@ -1,16 +1,20 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n \n+import unittest\n \n-class NavigationRootTestCase(PloneTestCase):\n-    """base test case with convenience methods for all navigation root tests"""\n+\n+class NavigationRootTestCase(unittest.TestCase):\n+\n+    layer = INTEGRATION_TESTING\n \n     def test_getNavigationRootObject_no_context(self):\n         \'\'\'\n         If you don\'t know the context then you also don\'t know what the\n         navigation root is.\n         \'\'\'\n+        self.portal = self.layer[\'portal\']\n         self.assertEqual(\n             None,\n             getNavigationRootObject(None, self.portal)\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex 41d038b..d4a132b 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -2,23 +2,33 @@\n from DateTime import DateTime\n from gzip import GzipFile\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from six import StringIO\n+from Products.CMFPlone.utils import safe_unicode\n+from six import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n from zope.publisher.interfaces import INotFound\n \n+import unittest\n \n-class SiteMapTestCase(PloneTestCase):\n+\n+class SiteMapTestCase(unittest.TestCase):\n     """base test case with convenience methods for all sitemap tests"""\n \n-    def afterSetUp(self):\n-        super(SiteMapTestCase, self).afterSetUp()\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n         self.site_settings.enable_sitemap = True\n@@ -39,7 +49,7 @@ def afterSetUp(self):\n             self.portal, \'portal_properties\').site_properties\n \n         # setup private content that isn\'t accessible for anonymous\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(id=\'private\', type_name=\'Document\')\n         private = self.portal.private\n         self.assertTrue(\'private\' == self.wftool.getInfoFor(private,\n@@ -58,14 +68,14 @@ def afterSetUp(self):\n         self.wftool.doActionFor(pending, \'submit\')\n         self.assertTrue(\'pending\' == self.wftool.getInfoFor(pending,\n                                                             \'review_state\'))\n-        self.logout()\n+        logout()\n \n     def uncompress(self, sitemapdata):\n-        sio = StringIO(sitemapdata)\n+        sio = BytesIO(sitemapdata)\n         unziped = GzipFile(fileobj=sio)\n         xml = unziped.read()\n         unziped.close()\n-        return xml\n+        return safe_unicode(xml)\n \n     def test_disabled(self):\n         \'\'\'\n@@ -89,14 +99,15 @@ def test_authenticated_before_anonymous(self):\n         \'\'\'\n \n         # first round as an authenticated (manager)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n         self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n         self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n \n         # second round as anonymous\n-        self.logout()\n+        logout()\n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\'<loc>http://nohost/plone/private</loc>\' in xml)\n         self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n@@ -116,7 +127,8 @@ def test_anonymous_before_authenticated(self):\n         self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n \n         # second round as an authenticated (manager)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n         self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n@@ -132,18 +144,19 @@ def test_changed_catalog(self):\n         self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n \n         # changing the workflow state\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         pending = self.portal.pending\n         self.wftool.doActionFor(pending, \'publish\')\n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n \n         # removing content\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.manage_delObjects([\'published\', ])\n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n@@ -153,7 +166,8 @@ def test_navroot(self):\n         Sitemap generated from an INavigationRoot\n         \'\'\'\n         # setup navroot content that is accessible for anonymous\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'navroot\', type_name=\'Folder\')\n         navroot = self.portal.navroot\n         self.wftool.doActionFor(navroot, \'publish\')\n@@ -165,7 +179,7 @@ def test_navroot(self):\n         self.wftool.doActionFor(published, \'publish\')\n         self.assertTrue(\'published\' == self.wftool.getInfoFor(\n             published, \'review_state\'))\n-        self.logout()\n+        logout()\n \n         sitemap = getMultiAdapter((self.portal.navroot, self.portal.REQUEST),\n                                   name=\'sitemap.xml.gz\')\n@@ -180,7 +194,8 @@ def test_types_not_searched(self):\n         Test that types_not_searched is respected\n         \'\'\'\n         # Set News Items not to be searchable (more likely Images)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n         newsitem = self.portal.newsitem\n         self.wftool.doActionFor(newsitem, \'publish\')\n@@ -189,7 +204,7 @@ def test_types_not_searched(self):\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         search_settings.types_not_searched = (\'News Item\',)\n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\'<loc>http://nohost/plone/newsitem</loc>\' in xml)\n@@ -199,7 +214,8 @@ def test_typesUseViewActionInListings(self):\n         Test that typesUseViewActionInListings is respected\n         \'\'\'\n         # Set News Items not to be searchable (more likely Images)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n         newsitem = self.portal.newsitem\n         self.wftool.doActionFor(newsitem, \'publish\')\n@@ -208,7 +224,7 @@ def test_typesUseViewActionInListings(self):\n         registry = getUtility(IRegistry)\n         registry[\'plone.types_use_view_action_in_listings\'] = [u\'News Item\']\n \n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/newsitem/view</loc>\' in xml)\n@@ -219,7 +235,8 @@ def test_default_pages(self):\n         their or their parent\'s modification time.\n         \'\'\'\n \n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'folder\', type_name=\'Folder\')\n         folder = self.portal.folder\n         folder.default_page = "default"\n@@ -233,14 +250,13 @@ def test_default_pages(self):\n         self.assertTrue(\'published\' == self.wftool.getInfoFor(\n             default, \'review_state\'))\n         self.assertTrue(self.portal.plone_utils.isDefaultPage(default))\n-\n         default.modification_date = DateTime("2001-01-01")\n         folder.modification_date = DateTime("2000-01-01")\n-        self.portal.portal_catalog.reindexObject(folder)\n-        self.portal.portal_catalog.reindexObject(default)\n+        self.portal.portal_catalog.reindexObject(folder, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        self.portal.portal_catalog.reindexObject(default, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n         self.portal.default_page = "published"\n-        self.portal.portal_catalog.reindexObject(self.portal.published)\n-        self.logout()\n+        self.portal.portal_catalog.reindexObject(self.portal.published, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex 9570064..dc684d6 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -4,6 +4,8 @@\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.utils import _createObjectByType\n \n \n@@ -25,8 +27,6 @@ def setUpPloneSite(self, portal):\n         if mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n \n-        # _createObjectByType(\'Folder\', portal, id=\'folder\')\n-\n \n FIXTURE = Fixture()\n INTEGRATION_TESTING = IntegrationTesting(\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 1a7e699..5aebdbe 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -43,6 +43,9 @@ def __init__(self, context, request, view, manager=None):\n         self.view = view\n         self.manager = manager\n \n+    def __hash__(self):\n+        return id(self) * 16\n+\n     @property\n     @deprecate("Use site_url instead. " +\n                "ViewletBase.portal_url will be removed in Plone 4")\ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex 312caf6..2f528d0 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -28,12 +28,12 @@ def body_tag_filter(self, value):\n     @property\n     def tags(self):\n         # Do not show items with \'itemprop\'.\n-        return filter(self.head_tag_filter, self._get_tags())\n+        return list(filter(self.head_tag_filter, self._get_tags()))\n \n     @property\n     def body_tags(self):\n         # Show only items without \'itemprop\'.\n-        return filter(self.body_tag_filter, self._get_tags())\n+        return list(filter(self.body_tag_filter, self._get_tags()))\n \n     @memoize\n     def _get_tags(self):\ndiff --git a/plone/app/layout/viewlets/tests/base.py b/plone/app/layout/viewlets/tests/base.py\nindex f579fbd..09d5d08 100644\n--- a/plone/app/layout/viewlets/tests/base.py\n+++ b/plone/app/layout/viewlets/tests/base.py\n@@ -1,6 +1,26 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.layout.testing import TEST_USER_ID\n \n+import unittest\n \n-class ViewletsTestCase(PloneTestCase):\n-    """ Base testing class for viewlets tests """\n+\n+class ViewletsTestCase(unittest.TestCase):\n+\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+\n+\n+class ViewletsFunctionalTestCase(unittest.TestCase):\n+\n+    layer = FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.folder = self.portal[\'Members\'][TEST_USER_ID]\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 9c98651..a9d6327 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -6,6 +6,8 @@\n from plone.app.layout.viewlets.common import TitleViewlet\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import INonStructuralFolder\n@@ -28,8 +30,8 @@ class TestViewletBase(ViewletsTestCase):\n     """\n \n     def test_update(self):\n-        request = self.app.REQUEST\n-        self.setRoles([\'Manager\', \'Member\'])\n+        request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.portal.invokeFactory(\'Folder\', \'f1\')\n         context = getattr(self.portal, \'f1\')\n         alsoProvides(context, INavigationRoot)\n@@ -43,11 +45,11 @@ class TestContentViewsViewlet(ViewletsTestCase):\n     """Test the content views viewlet.\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestContentViewsViewlet, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'test\',\n                                   title=\'Test default page\')\n-        self.folder.test.unmarkCreationFlag()\n-        self.folder.setTitle(u"Folder")\n+        self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -57,7 +59,7 @@ def _invalidateRequestMemoizations(self):\n \n     def test_set1_on_portal_root(self):\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n         view = ContentViewsViewlet(self.portal, self.app.REQUEST, None)\n         view.update()\n@@ -65,7 +67,7 @@ def test_set1_on_portal_root(self):\n \n     def test_set1_NonStructuralFolder(self):\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url()\n         directlyProvides(self.folder, INonStructuralFolder)\n         view = ContentViewsViewlet(self.folder, self.app.REQUEST, None)\n@@ -76,7 +78,7 @@ def test_set1_NonStructuralFolder(self):\n \n     def test_set1(self):\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = \'%s/edit?_authenticator=%s\' % (\n             self.folder.test.absolute_url(),\n             auth.createToken()\n@@ -93,11 +95,11 @@ class TestTitleViewsViewlet(ViewletsTestCase):\n     """Test the title viewlet.\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestTitleViewsViewlet, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'test\',\n                                   title=\'Test default page\')\n-        self.folder.test.unmarkCreationFlag()\n-        self.folder.setTitle(u"Folder")\n+        self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -109,7 +111,7 @@ def test_title_viewlet_on_portal(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n         viewlet = TitleViewlet(self.portal, self.app.REQUEST, None)\n         viewlet.update()\n@@ -126,7 +128,7 @@ def test_title_viewlet_on_content(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n@@ -145,7 +147,7 @@ def test_title_viewlet_with_navigation_root(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n         directlyProvides(self.folder, INavigationRoot)\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n@@ -153,23 +155,6 @@ def test_title_viewlet_with_navigation_root(self):\n         self.assertEqual(viewlet.site_title,\n                          u\'Test default page &mdash; Folder\')\n \n-    def test_title_viewlet_in_portal_factory(self):\n-        """Title viewlet renders navigation root title in portal factory\n-        """\n-        self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n-\n-        factory_folder = self.folder.portal_factory\n-        factory_document = (factory_folder\n-                            .restrictedTraverse(\'Document/document\'))\n-        self.app.REQUEST[\'ACTUAL_URL\'] = factory_document.absolute_url()\n-\n-        directlyProvides(self.folder, INavigationRoot)\n-        viewlet = TitleViewlet(factory_document, self.app.REQUEST, None)\n-        viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         u\'Add Page &mdash; Folder\')\n-\n \n class TestLogoViewlet(ViewletsTestCase):\n     """Test the site logo viewlet.\n@@ -254,7 +239,7 @@ def test_selectedtabs(self):\n     def test_selectedtabs_navroot(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        self.setRoles((\'Manager\',))\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\'Folder\', \'navroot\', title=\'My new root\')\n         navroot = self.portal[\'navroot\']\n         alsoProvides(navroot, INavigationRoot)\ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex b8914c4..53cb9b3 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -4,6 +4,9 @@\n from plone.app.layout.viewlets.content import DocumentBylineViewlet\n from plone.app.layout.viewlets.content import HistoryByLineView\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.testing import logout\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import setRoles\n from plone.locking.interfaces import ILockable\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -34,7 +37,8 @@ class TestDocumentBylineViewletView(ViewletsTestCase):\n     Test the document by line viewlet\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestDocumentBylineViewletView, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n         self.context = self.folder[\'doc1\']\n \n@@ -60,7 +64,7 @@ def test_pub_date(self):\n \n         settings.display_publication_date_in_byline = True\n \n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n \n         # publication date should be None as there is not Effective date set\n@@ -108,7 +112,8 @@ class TestHistoryBylineViewletView(ViewletsTestCase):\n     Test the document by line viewlet\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestHistoryBylineViewletView, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n         self.context = self.folder[\'doc1\']\n \n@@ -126,13 +131,13 @@ def _get_viewlet(self):\n \n     def test_show_anonymous_not_allowed(self):\n         self.security_settings.allow_anon_views_about = False\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertFalse(viewlet.show())\n \n     def test_show_anonymous_allowed(self):\n         self.security_settings.allow_anon_views_about = True\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertTrue(viewlet.show())\n \n@@ -147,12 +152,12 @@ def test_show_logged_in_anonymous_allowed(self):\n         self.assertTrue(viewlet.show())\n \n     def test_anonymous_locked_icon_not_locked(self):\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertEqual(viewlet.locked_icon(), "")\n \n     def test_anonymous_locked_icon_is_locked(self):\n-        self.logout()\n+        logout()\n         ILockable(self.context).lock()\n         viewlet = self._get_viewlet()\n         self.assertEqual(viewlet.locked_icon(), "")\n@@ -178,7 +183,7 @@ def test_pub_date(self):\n \n         settings.display_publication_date_in_byline = True\n \n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n \n         # publication date should be None as there is not Effective date set\n@@ -198,11 +203,16 @@ def test_pub_date(self):\n \n class TestRelatedItemsViewlet(ViewletsTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestRelatedItemsViewlet, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n         self.folder.invokeFactory(\'Document\', \'doc2\', title=\'Document 2\')\n         self.folder.invokeFactory(\'Document\', \'doc3\', title=\'Document 3\')\n-        self.folder.doc1.setRelatedItems([self.folder.doc2, self.folder.doc3])\n+        intids = getUtility(IIntIds)\n+        self.folder.doc1.relatedItems = [\n+            RelationValue(intids.getId(self.folder.doc2)),\n+            RelationValue(intids.getId(self.folder.doc3)),\n+        ]\n \n     def testRelatedItems(self):\n         request = self.app.REQUEST\n@@ -224,12 +234,11 @@ def testDeletedRelatedItems(self):\n \n class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestDexterityRelatedItemsViewlet, self).setUp()\n         """ create some sample content to test with """\n         from Products.CMFPlone.utils import get_installer\n-        if not HAS_DEXTERITY:\n-            return\n-        self.setRoles((\'Manager\',))\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         fti = DexterityFTI(\'Dexterity Item with relatedItems behavior\')\n         self.portal.portal_types._setObject(\n             \'Dexterity Item with relatedItems behavior\', fti)\ndiff --git a/plone/app/layout/viewlets/tests/test_functional.py b/plone/app/layout/viewlets/tests/test_functional.py\nindex e816796..f7fc131 100644\n--- a/plone/app/layout/viewlets/tests/test_functional.py\n+++ b/plone/app/layout/viewlets/tests/test_functional.py\n@@ -1,9 +1,5 @@\n # -*- coding: utf-8 -*-\n-"""Functional Doctests for plone.app.discussion.\n-\n-   These test are only triggered when Plone 4 (and plone.testing) is installed.\n-"""\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n@@ -22,6 +18,6 @@ def test_suite():\n         layered(doctest.DocFileSuite(test,\n                                      optionflags=optionflags,\n                                      ),\n-                layer=PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING)\n+                layer=FUNCTIONAL_TESTING)\n         for test in normal_testfiles])\n     return suite\ndiff --git a/plone/app/layout/viewlets/tests/test_history.py b/plone/app/layout/viewlets/tests/test_history.py\nindex caedc57..6e9ed76 100644\n--- a/plone/app/layout/viewlets/tests/test_history.py\n+++ b/plone/app/layout/viewlets/tests/test_history.py\n@@ -1,15 +1,18 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.content import ContentHistoryViewlet\n from plone.app.layout.viewlets.content import WorkflowHistoryViewlet\n-from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.viewlets.tests.base import ViewletsFunctionalTestCase\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_ID\n \n \n-class TestWorkflowHistoryViewlet(ViewletsTestCase):\n-    """\n-    Test the workflow history viewlet\n-    """\n+class TestWorkflowHistoryViewlet(ViewletsFunctionalTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestWorkflowHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory(\'Document\', \'d1\')\n@@ -33,7 +36,8 @@ def test_transitionHistory(self):\n         wf_tool = self.portal.portal_workflow\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         wf_tool.doActionFor(context, \'publish\')\n \n         viewlet = WorkflowHistoryViewlet(context, request, None, None)\n@@ -45,11 +49,11 @@ def test_transitionHistory(self):\n \n         # add a temporary user to perform a transition\n         self.addMember(\'tempuser\', roles=(\'Member\', \'Manager\'))\n-        self.login(\'tempuser\')\n+        login(self.portal, \'tempuser\')\n         wf_tool.doActionFor(context, action=\'retract\', actor=None)\n-        self.logout()\n+        logout()\n \n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n \n         # remove the user\n         self.delMember(\'tempuser\')\n@@ -64,43 +68,44 @@ def test_transitionHistory(self):\n         self.assertEqual(history[0][\'actor_home\'], \'\')\n \n \n-class TestContentHistoryViewlet(ViewletsTestCase):\n-    """\n-    Test the workflow history viewlet\n-    """\n+class TestContentHistoryViewlet(ViewletsFunctionalTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestContentHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory(\'Document\', \'d1\')\n \n-    def test_emptyHistory(self):\n+    def test_initialHistory(self):\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.revisionHistory(), [])\n+        self.assertEqual(len(viewlet.revisionHistory()), 1)\n \n     def test_revisionHistory(self):\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n-        self.loginAsPortalOwner()\n-        repo_tool.save(context, comment=\'Initial Revision\')\n-\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n \n+        # after creating the item the is a first revision\n         history = viewlet.revisionHistory()\n         self.assertEqual(len(history), 1)\n+\n+        repo_tool.save(context, comment=\'Initial Revision\')\n+        viewlet.update()\n+        history = viewlet.revisionHistory()\n+        self.assertEqual(len(history), 2)\n         self.assertEqual(history[0][\'comments\'], \'Initial Revision\')\n \n         repo_tool.save(context, comment=\'Second Revision\')\n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertTrue(\n-            \'http://nohost/plone/Members/test_user_1_/d1/@@history?one=1&two=0\' in history[\n-                0][\'diff_previous_url\']\n+            \'http://nohost/plone/Members/test_user_1_/d1/@@history?one=2&two=1\'\n+            in history[0][\'diff_previous_url\']\n         )\n \n         # check diff link does not appear if content is not diffable\n@@ -116,7 +121,8 @@ def test_revertAbility(self):\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         repo_tool.save(context, comment=\'Initial Revision\')\n         repo_tool.save(context, comment=\'Second Revision\')\n \ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex 9b7bc9e..2b37715 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -2,6 +2,10 @@\n from plone.app.layout.viewlets.social import SocialTagsViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import logout\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISocialMediaSchema\n from zope.annotation.interfaces import IAnnotations\n@@ -12,8 +16,10 @@ class TestSocialViewlet(ViewletsTestCase):\n     """Test the content views viewlet.\n     """\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+    def setUp(self):\n+        super(TestSocialViewlet, self).setUp()\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.folder.invokeFactory(\'News Item\', \'news-item\',\n                                   title=\'News Item\')\n         self.news = self.folder[\'news-item\']\n@@ -85,7 +91,7 @@ def testDisabled(self):\n         self.assertEquals(len(viewlet.tags), 0)\n \n     def testDisabledForLoggedUser(self):\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEquals(len(viewlet.tags), 0)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T08:56:48+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/86a71f919c7c48285e3de0b01b81f35dbe4374f0

fix test for

Files changed:
M plone/app/layout/globals/tests/test_interface.py

b'diff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex 03e04d8..324e6e8 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -96,6 +96,13 @@ def test_interface_view(self):\n \'plone.app.layout.globals.tests.test_interface.NotAnInterface\' \\\n is not a valid Interface.\n \n+    >>> sorted(view.names_and_descriptions(\n+    ...     \'plone.app.layout.globals.tests.test_interface.IOne\'))[0]\n+    (\'one_function\', \'One function for IOne\')\n+    >>> sorted(view.names_and_descriptions(\n+    ...     \'plone.app.layout.globals.tests.test_interface.IOne\'))[1]\n+    (\'one_name\', \'One name for IOne\')\n+\n     >>> view.get_base_interface()\n     []\n     >>> iface_info = view.get_interface_informations(IOne)\n@@ -104,12 +111,12 @@ def test_interface_view(self):\n     >>> iface_info[\'name\']\n     \'IOne\'\n     >>> iface_info[\'doc\']\n-    \'One name for IOne\'\n+    \'One function for IOne\'\n     >>> iface_info[\'bases\']\n     [<InterfaceClass plone.app.layout.globals.tests.test_interface.IZero>]\n     >>> iface_info[\'base_names\']\n     [\'plone.app.layout.globals.tests.test_interface.IOne\']\n-    >>> iface_info[\'attrisbutes\'][0][\'doc\']\n+    >>> iface_info[\'attributes\'][0][\'doc\']\n     \'One name for IOne\'\n     >>> iface_info[\'attributes\'][0][\'name\']\n     \'one_name\'\n@@ -119,12 +126,6 @@ def test_interface_view(self):\n     \'one_function\'\n     >>> iface_info[\'methods\'][0][\'signature\']\n     \'()\'\n-    >>> view.names_and_descriptions(\n-    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[0]\n-    (\'one_function\', \'One function for IOne\')\n-    >>> view.names_and_descriptions(\n-    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[1]\n-    (\'one_name\', \'One name for IOne\')\n \n     """\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T09:00:13+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/3bb70dd500beb2e09e6b996a3113498fd978b169

add/fix changenotes and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ec5fb79..2333f74 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -21,6 +21,14 @@ Bug fixes:\n - Get rid of obsolete ``X-UA-Compatible`` header.\n   [hvelarde]\n \n+- Implement viewlet dummy ordering needed for Python 3 sorting.\n+  [ale-rt]\n+\n+- Fix sitemap in py3.\n+  [pbauer]\n+\n+- Fix tests for py3 and drop use of PloneTestCase.\n+  [pbauer, fgrcon]\n \n \n 2.8.1 (2018-06-18)\n@@ -36,8 +44,6 @@ Bug fixes:\n - Helper `getNavigationRoot` returns site, if context is not in\n   acquisition chain (eg AJAX calls)\n   [tomgross]\n-- Implement viewlet dummy ordering needed for Python 3 sorting\n-  [ale-rt]\n \n \n 2.8.0 (2018-04-24)\ndiff --git a/setup.py b/setup.py\nindex 460d633..6818aab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,11 +15,14 @@\n           "Environment :: Web Environment",\n           "Framework :: Plone",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "Framework :: Zope2",\n           "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n       ],\n       keywords=\'plone layout viewlet\',\n       author=\'Plone Foundation\',\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T13:39:47+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/79b369c0cac2500545031d334edd4a6716137cfa

fix tests

Files changed:
M plone/app/layout/viewlets/tests/test_content.py

b'diff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 53cb9b3..81dfdd2 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -81,16 +81,15 @@ def test_pub_date(self):\n         settings.display_publication_date_in_byline = False\n         self.assertEqual(viewlet.pub_date(), None)\n \n-\n     def test_anonymous_users_see_byline_if_show_enabled(self):\n         self.security_settings.allow_anon_views_about = True\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertTrue(viewlet.show())\n \n     def test_anonymous_users_dont_see_byline_if_show_disabled(self):\n         self.security_settings.allow_anon_views_about = False\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertFalse(viewlet.show())\n \n@@ -105,8 +104,6 @@ def test_logged_users_see_byline_if_show_disabled(self):\n         self.assertTrue(viewlet.show())\n \n \n-\n-\n class TestHistoryBylineViewletView(ViewletsTestCase):\n     """\n     Test the document by line viewlet\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T14:28:36+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/d39b6a4447845ac122d0c358690a2007e18c683b

so sort by name we should compare names, not ids

Files changed:
M plone/app/layout/viewlets/common.py

b"diff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 5aebdbe..82277fe 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -70,7 +70,7 @@ def index(self):\n     def __lt__(self, other):\n         ''' Sort by name\n         '''\n-        return id(self) < id(other)\n+        return self.__name__ < other.__name__\n \n     def __eq__(self, other):\n         ''' Check for equality\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T14:29:32+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/b1e094e58225281aaf6c8bcbf00766b931d102d8

remove unused local variable

Files changed:
M plone/app/layout/viewlets/common.py

b"diff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 82277fe..e43a5fe 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -441,8 +441,6 @@ class ManagePortletsFallbackViewlet(ViewletBase):\n     index = ViewPageTemplateFile('manage_portlets_fallback.pt')\n \n     def update(self):\n-        ploneview = getMultiAdapter((\n-            self.context, self.request), name=u'plone')\n         plonelayout = getMultiAdapter((\n             self.context, self.request), name=u'plone_layout')\n         context_state = getMultiAdapter((self.context, self.request),\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T14:41:59+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/8de75fdb66f40a8503de5d14e493a69afbdecab3

get_interface_informations should contain docstring of interface not of arbitrary method

Files changed:
M plone/app/layout/globals/interface.py
M plone/app/layout/globals/tests/test_interface.py

b"diff --git a/plone/app/layout/globals/interface.py b/plone/app/layout/globals/interface.py\nindex bcc61bf..06701d3 100644\n--- a/plone/app/layout/globals/interface.py\n+++ b/plone/app/layout/globals/interface.py\n@@ -118,7 +118,7 @@ def get_interface_informations(self, iface):\n         result = {\n             'name': iface.getName(),\n             'dotted_name': getDottedName(iface),\n-            'doc': _trim_doc_string(desc.getDoc()),\n+            'doc': _trim_doc_string(iface.getDoc()),\n             'bases': bases,\n             'base_names': [getDottedName(iface) for base in bases],\n             'attributes': attributes,\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex 324e6e8..dc93d67 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -111,7 +111,7 @@ def test_interface_view(self):\n     >>> iface_info['name']\n     'IOne'\n     >>> iface_info['doc']\n-    'One function for IOne'\n+    'Test interface one'\n     >>> iface_info['bases']\n     [<InterfaceClass plone.app.layout.globals.tests.test_interface.IZero>]\n     >>> iface_info['base_names']\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T14:49:17+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/382586fcc49803699e960f8bbf8da47424206ccb

site_logo needs to be bytes

Files changed:
M plone/app/layout/viewlets/tests/test_common.py

b"diff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex a9d6327..9fd85e5 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -20,9 +20,9 @@\n \n \n # Red pixel with filename pixel.png\n-SITE_LOGO_BASE64 = 'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA'\\\n-                   'AAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAAAA'\\\n-                   'ElFTkSuQmCC'\n+SITE_LOGO_BASE64 = b'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA'\\\n+                   b'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA'\\\n+                   b'AAElFTkSuQmCC'\n \n \n class TestViewletBase(ViewletsTestCase):\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2018-09-17T16:37:37+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.layout/commit/27b0fe9e2473fcb45b22b58e2ec8af723c6d8754

Merge pull request #152 from plone/python3

Implement viewlet dummy ordering needed for Python 3 sorting

Files changed:
A plone/app/layout/globals/tests/data/bodyclass_nametest.pt
M CHANGES.rst
M plone/app/layout/globals/interface.py
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/navigation/tests/test_root.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/base.py
M plone/app/layout/viewlets/tests/history.txt
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_functional.py
M plone/app/layout/viewlets/tests/test_history.py
M plone/app/layout/viewlets/tests/test_social.py
M setup.py
D plone/app/layout/analytics/tests/base.py
D plone/app/layout/globals/tests/base.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e6d26c5..2333f74 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -21,6 +21,14 @@ Bug fixes:\n - Get rid of obsolete ``X-UA-Compatible`` header.\n   [hvelarde]\n \n+- Implement viewlet dummy ordering needed for Python 3 sorting.\n+  [ale-rt]\n+\n+- Fix sitemap in py3.\n+  [pbauer]\n+\n+- Fix tests for py3 and drop use of PloneTestCase.\n+  [pbauer, fgrcon]\n \n \n 2.8.1 (2018-06-18)\ndiff --git a/plone/app/layout/analytics/tests/base.py b/plone/app/layout/analytics/tests/base.py\ndeleted file mode 100644\nindex b328697..0000000\n--- a/plone/app/layout/analytics/tests/base.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n-\n-\n-class AnalyticsTestCase(PloneTestCase):\n-    """ Base testing class for analytics tests """\n-\n-\n-class AnalyticsFunctionalTestCase(PloneTestCase):\n-    """ Base testing class for analytics functional tests """\ndiff --git a/plone/app/layout/globals/interface.py b/plone/app/layout/globals/interface.py\nindex bcc61bf..06701d3 100644\n--- a/plone/app/layout/globals/interface.py\n+++ b/plone/app/layout/globals/interface.py\n@@ -118,7 +118,7 @@ def get_interface_informations(self, iface):\n         result = {\n             \'name\': iface.getName(),\n             \'dotted_name\': getDottedName(iface),\n-            \'doc\': _trim_doc_string(desc.getDoc()),\n+            \'doc\': _trim_doc_string(iface.getDoc()),\n             \'bases\': bases,\n             \'base_names\': [getDottedName(iface) for base in bases],\n             \'attributes\': attributes,\ndiff --git a/plone/app/layout/globals/tests/base.py b/plone/app/layout/globals/tests/base.py\ndeleted file mode 100644\nindex 982856b..0000000\n--- a/plone/app/layout/globals/tests/base.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n-\n-\n-class GlobalsTestCase(PloneTestCase):\n-    """ Base testing class for globals tests """\n-\n-\n-class GlobalsFunctionalTestCase(PloneTestCase):\n-    """ Base testing class for globals functional tests """\ndiff --git a/plone/app/layout/globals/tests/data/bodyclass_nametest.pt b/plone/app/layout/globals/tests/data/bodyclass_nametest.pt\nnew file mode 100644\nindex 0000000..f11b613\n--- /dev/null\n+++ b/plone/app/layout/globals/tests/data/bodyclass_nametest.pt\n@@ -0,0 +1 @@\n+<html><body>foo</body></html>\n\\ No newline at end of file\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex 74b37f2..d97940f 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -1,24 +1,33 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING \n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.helpers import logout\n from plone.locking.interfaces import ILockable\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.utils import _createObjectByType\n from zope.interface import directlyProvides\n \n+import unittest\n \n-class TestContextStateView(GlobalsTestCase):\n+\n+class TestContextStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n+    layer = INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n-        self.fview = self.folder.restrictedTraverse(\'@@plone_context_state\')\n \n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.portal.invokeFactory(\'Folder\', \'f0\')\n+        self.folder = self.portal[\'f0\']\n+        self.fview = self.folder.restrictedTraverse(\'@@plone_context_state\')\n         self.folder.invokeFactory(\'Document\', \'d1\')\n         self.folder.setDefaultPage(\'d1\')\n         self.dview = self.folder.d1.restrictedTraverse(\'@@plone_context_state\')\n-\n         self.folder.invokeFactory(\'Folder\', \'f1\')\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n         self.sview = self.folder.f1.restrictedTraverse(\'@@plone_context_state\')\n@@ -214,14 +223,14 @@ def test_is_portal_root(self):\n \n     def test_is_editable(self):\n         self.assertEqual(self.dview.is_editable(), True)\n-        self.logout()\n+        logout()\n         del self.app.REQUEST.__annotations__\n         self.assertEqual(self.dview.is_editable(), False)\n \n     def test_is_locked(self):\n         self.assertEqual(self.dview.is_locked(), False)\n         ILockable(self.folder.d1).lock()\n-        self.logout()\n+        logout()\n         # The object is not "locked" if it was locked by the\n         # current user\n         del self.app.REQUEST.__annotations__\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex 3532bae..dc93d67 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -38,8 +38,10 @@ class NotAnInterface(object):\n def test_interface_view(self):\n     """Information about the interfaces of an object\n \n-    >>> from zope.interface import Interface, implements\n-    >>> from zope.interface import directlyProvides, classProvides\n+    >>> from zope.interface import implementer\n+    >>> from zope.interface import Interface\n+    >>> from zope.interface import directlyProvides\n+    >>> from zope.interface import provider\n     >>> from zope.component import provideAdapter, getMultiAdapter\n     >>> from zope.publisher.interfaces.browser import IBrowserRequest\n     >>> from zope.publisher.browser import TestRequest\n@@ -50,9 +52,10 @@ def test_interface_view(self):\n \n     >>> from plone.app.layout.globals.tests.test_interface import IOne, ITwo\n \n-    >>> class One(object):\n-    ...     implements(IOne)\n-    ...     classProvides(ITwo)\n+    >>> @implementer(IOne)\n+    ... @provider(ITwo)\n+    ... class One(object):\n+    ...     pass\n \n     >>> from plone.app.layout.globals.interface import InterfaceInformation\n     >>> provideAdapter(\n@@ -93,11 +96,11 @@ def test_interface_view(self):\n \'plone.app.layout.globals.tests.test_interface.NotAnInterface\' \\\n is not a valid Interface.\n \n-    >>> view.names_and_descriptions(\n-    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[0]\n+    >>> sorted(view.names_and_descriptions(\n+    ...     \'plone.app.layout.globals.tests.test_interface.IOne\'))[0]\n     (\'one_function\', \'One function for IOne\')\n-    >>> view.names_and_descriptions(\n-    ...     \'plone.app.layout.globals.tests.test_interface.IOne\')[1]\n+    >>> sorted(view.names_and_descriptions(\n+    ...     \'plone.app.layout.globals.tests.test_interface.IOne\'))[1]\n     (\'one_name\', \'One name for IOne\')\n \n     >>> view.get_base_interface()\n@@ -108,7 +111,7 @@ def test_interface_view(self):\n     >>> iface_info[\'name\']\n     \'IOne\'\n     >>> iface_info[\'doc\']\n-    \'One name for IOne\'\n+    \'Test interface one\'\n     >>> iface_info[\'bases\']\n     [<InterfaceClass plone.app.layout.globals.tests.test_interface.IZero>]\n     >>> iface_info[\'base_names\']\n@@ -123,6 +126,7 @@ def test_interface_view(self):\n     \'one_function\'\n     >>> iface_info[\'methods\'][0][\'signature\']\n     \'()\'\n+\n     """\n \n \ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex 8973345..00e9479 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -1,19 +1,30 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.helpers import logout\n from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces.controlpanel import ILinkSchema\n from zope.component import getUtility\n \n+import os\n+import unittest\n import zope.interface\n \n \n-class TestLayoutView(GlobalsTestCase):\n+class TestLayoutView(unittest.TestCase):\n     """Tests the global layout view."""\n+    layer = INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n         self.view = self.portal.restrictedTraverse(\'@@plone_layout\')\n+        self.portal.invokeFactory(\'Folder\', \'folder1\')\n+        self.portal.invokeFactory(\'Document\', \'front-page\')\n+        self.portal.setDefaultPage(\'front-page\')\n \n     def testHavePortlets(self):\n         have_portlets = self.view.have_portlets\n@@ -24,12 +35,13 @@ def testHavePortlets(self):\n     def testEnableColumns(self):\n         # Make sure we can force a column to appear even if there are no\n         # portlets\n+        self.app = self.layer[\'app\']\n         self.app.REQUEST.set(\'disable_plone.leftcolumn\', 0)\n         self.assertEqual(True, self.view.have_portlets(\'plone.leftcolumn\'))\n \n     def testDisableColumns(self):\n-        self.setRoles((\'Manager\', ))\n-\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.app = self.layer[\'app\']\n         # Now add some portlets to be sure we have columns.  For\n         # simplicity we want a portlet that has no add form.  Note\n         # that apparently the Calender had no add form until Plone\n@@ -53,7 +65,7 @@ def testDisableColumns(self):\n         addview_right()\n \n         # Logout, otherwise the login portlet will never show.\n-        self.logout()\n+        logout()\n \n         # Check that we do not explicitly disable the columns.  This\n         # may happen if we change the request in this method or if the\n@@ -71,64 +83,69 @@ def testDisableColumns(self):\n \n     def testBodyClass(self):\n         context = self.portal[\'front-page\']\n-        template = context.document_view\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        body_class = view.bodyClass(template, view)\n+        view = context.restrictedTraverse(\'view\')\n+        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        body_class = layout_view.bodyClass(view, layout_view)\n         assert \'section-front-page\' in body_class\n \n     def testBodyClassTemplate(self):\n+        # test of first parameter only\n         context = self.portal[\'front-page\']\n \n-        template = context.document_view\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n+        view = context.restrictedTraverse(\'view\')\n+        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n \n-        body_class = view.bodyClass(template, view)\n-        assert \'template-document_view\' in body_class\n+        # case 1: name from first parameter, expected a template or view\n+        from Products.CMFCore.FSPageTemplate import FSPageTemplate\n+        template = FSPageTemplate(\'document_view\',\n+            os.path.join(os.path.dirname(__file__),\'data\',\'bodyclass_nametest.pt\')\n+        )\n+        body_class = layout_view.bodyClass(template, view)\n+        self.assertIn(\'template-document_view\', body_class)\n \n-        body_class = view.bodyClass(template, None)\n-        assert \'template-document_view\' in body_class\n+        # case 2: even w/o second parameter it has to work\n+        body_class = layout_view.bodyClass(template, None)\n+        self.assertIn(\'template-document_view\', body_class)\n \n-        body_class = view.bodyClass(None, view)\n-        assert \'template-plone_layout\' in body_class\n+        # case 3: if theres no template get name from view\n+        body_class = layout_view.bodyClass(None, view)\n+        self.assertIn(\'template-view\', body_class)\n \n     def testBodyClassWithNavigationRoot(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        context = self.folder\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n+        context = self.portal.folder1\n         view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.folder_listing\n+        template = context.restrictedTraverse(\'view\')\n         body_class = view.bodyClass(template, view)\n-        assert \'section-%s\' % context.getId() in body_class\n-        assert \'site-Members\' in body_class\n+        assert \'site-%s\' % context.getId() in body_class\n \n     def testBodyClassWithEverySection(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        self.folder.invokeFactory(\'Folder\', \'folder2\')\n-        self.folder.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.folder.folder2.folder3.invokeFactory(\'Document\', \'page\')\n-        context = self.folder.folder2.folder3.page\n+        zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n+        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n+        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        context = self.portal.folder1.folder2.folder3.page\n         view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.document_view\n+        template = context.restrictedTraverse(\'view\')\n         body_class = view.bodyClass(template, view)\n-        assert \'subsection-folder2 subsection-folder2-folder3\' in body_class\n-        assert \' subsection-folder2-folder3-page\' in body_class\n+        assert \'section-folder2 site-folder1\' in body_class\n+        assert \' subsection-folder3 subsection-folder3-page\' in body_class\n \n     def testBodyClassWithEverySectionTurnedOff(self):\n         registry = getUtility(IRegistry)\n         registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0\n-        members = self.portal[\'Members\']\n-        zope.interface.alsoProvides(members, INavigationRoot)\n-        self.folder.invokeFactory(\'Folder\', \'folder2\')\n-        self.folder.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.folder.folder2.folder3.invokeFactory(\'Document\', \'page\')\n-        context = self.folder.folder2.folder3.page\n+        zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n+        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n+        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n+        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        context = self.portal.folder1.folder2.folder3.page\n         view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.document_view\n+        template = context.restrictedTraverse(\'view\')\n         body_class = view.bodyClass(template, view)\n         assert \'subsection-folder2 subsection-folder2-folder3\' \\\n             not in body_class\n@@ -141,9 +158,8 @@ def testBodyClassWithMarkSpecialLinksOnOff(self):\n             prefix="plone",\n             check=False\n         )\n-\n         context = self.portal[\'front-page\']\n-        template = context.document_view\n+        template = context.restrictedTraverse(\'view\')\n         view = context.restrictedTraverse(\'@@plone_layout\')\n \n         # Case 1\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex 38217c0..79902dd 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,5 +1,8 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.helpers import logout\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.registry.interfaces import IRegistry\n@@ -11,14 +14,20 @@\n from zope.i18n.locales import locales\n from zope.traversing.interfaces import BeforeTraverseEvent\n \n+import unittest\n import zope.interface\n \n \n-class TestPortalStateView(GlobalsTestCase):\n+class TestPortalStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n+    layer = INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)\n         self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n \n     def test_portal(self):\n@@ -35,7 +44,6 @@ def test_portal_url(self):\n \n     def test_navigation_root(self):\n         self.assertEqual(self.view.navigation_root(), self.portal)\n-\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n         members = self.portal[\'Members\']\n@@ -63,14 +71,14 @@ def test_navigation_root_path(self):\n     def test_navigation_root_title(self):\n         self.portal.Title = "Portal title"\n         self.assertEqual(self.view.navigation_root_title(), "Portal title")\n-\n+        members = self.portal[\'Members\']\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n         zope.interface.alsoProvides(members, INavigationRoot)\n         view = members.restrictedTraverse(\'@@plone_portal_state\')\n         self.assertEqual(view.navigation_root_title(), members.Title())\n \n+\n     def test_navigation_root_url(self):\n         url = self.app.REQUEST.physicalPathToURL(\n             getNavigationRoot(self.folder))\n@@ -80,6 +88,7 @@ def test_navigation_root_url(self):\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n+\n         members = self.portal[\'Members\']\n         zope.interface.alsoProvides(members, INavigationRoot)\n         view = members.restrictedTraverse(\'@@plone_portal_state\')\n@@ -133,8 +142,11 @@ def test_member(self):\n         )\n \n     def test_anonymous(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        #self.portal.invokeFactory(\'Folder\', \'f0\')\n         self.assertEqual(self.view.anonymous(), False)\n-        self.logout()\n+        logout()\n         del self.app.REQUEST.__annotations__\n         self.assertEqual(self.view.anonymous(), True)\n \ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex 4aefc56..b9e7c13 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,13 +1,19 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.globals.tests.base import GlobalsTestCase\n from Products.CMFPlone.utils import getToolByName\n+from plone.app.layout.testing import INTEGRATION_TESTING\n \n+import unittest\n \n-class TestToolsView(GlobalsTestCase):\n+\n+class TestToolsView(unittest.TestCase):\n     """Tests the global tools view.\n     """\n \n-    def afterSetUp(self):\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.folder = self.portal[\'Members\']\n         self.view = self.folder.restrictedTraverse(\'@@plone_tools\')\n \n     def test_actions(self):\ndiff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 06320ac..64db226 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -1,36 +1,30 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.links.viewlets import RSSViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n \n class TestRSSViewletView(ViewletsTestCase):\n-    """\n-    Test the document by line viewlet\n-    """\n-\n-    def afterSetUp(self):\n-        pass\n \n     def test_RSSViewlet(self):\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\'Folder\', \'news\')\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSyndicationSettings)\n         if settings.allowed:\n             # make sure syndication is disabled\n-            self.loginAsPortalOwner()\n             settings.allowed = False\n-            self.logout()\n         request = self.app.REQUEST\n         viewlet = RSSViewlet(self.portal, request, None, None)\n         viewlet.update()\n         result = viewlet.render()\n         self.assertEqual(result.strip(), \'\')\n-        self.loginAsPortalOwner()\n         settings.allowed = True\n         settings.site_rss_items = (self.portal.news.UID(),)\n-        self.logout()\n         request = self.app.REQUEST\n         viewlet = RSSViewlet(self.portal, request, None, None)\n         viewlet.update()\ndiff --git a/plone/app/layout/navigation/tests/test_root.py b/plone/app/layout/navigation/tests/test_root.py\nindex d86c3e3..4ec47e7 100644\n--- a/plone/app/layout/navigation/tests/test_root.py\n+++ b/plone/app/layout/navigation/tests/test_root.py\n@@ -1,16 +1,20 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n \n+import unittest\n \n-class NavigationRootTestCase(PloneTestCase):\n-    """base test case with convenience methods for all navigation root tests"""\n+\n+class NavigationRootTestCase(unittest.TestCase):\n+\n+    layer = INTEGRATION_TESTING\n \n     def test_getNavigationRootObject_no_context(self):\n         \'\'\'\n         If you don\'t know the context then you also don\'t know what the\n         navigation root is.\n         \'\'\'\n+        self.portal = self.layer[\'portal\']\n         self.assertEqual(\n             None,\n             getNavigationRootObject(None, self.portal)\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex 98ca9c5..e8ae0a5 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -8,10 +8,12 @@\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six import StringIO\n+from six import BytesIO\n from zope.component import getUtility\n from zope.publisher.interfaces import NotFound\n \n+import six\n+\n \n def _render_cachekey(fun, self):\n     # Cache by filename\n@@ -101,8 +103,10 @@ def objects(self):\n     def generate(self):\n         """Generates the Gzipped sitemap."""\n         xml = self.template()\n-        fp = StringIO()\n-        gzip = GzipFile(self.filename, \'w\', 9, fp)\n+        fp = BytesIO()\n+        gzip = GzipFile(self.filename, \'wb\', 9, fp)\n+        if isinstance(xml, six.text_type):\n+            xml = xml.encode(\'utf8\')\n         gzip.write(xml)\n         gzip.close()\n         data = fp.getvalue()\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex 41d038b..d4a132b 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -2,23 +2,33 @@\n from DateTime import DateTime\n from gzip import GzipFile\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from six import StringIO\n+from Products.CMFPlone.utils import safe_unicode\n+from six import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n from zope.publisher.interfaces import INotFound\n \n+import unittest\n \n-class SiteMapTestCase(PloneTestCase):\n+\n+class SiteMapTestCase(unittest.TestCase):\n     """base test case with convenience methods for all sitemap tests"""\n \n-    def afterSetUp(self):\n-        super(SiteMapTestCase, self).afterSetUp()\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n         self.site_settings.enable_sitemap = True\n@@ -39,7 +49,7 @@ def afterSetUp(self):\n             self.portal, \'portal_properties\').site_properties\n \n         # setup private content that isn\'t accessible for anonymous\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(id=\'private\', type_name=\'Document\')\n         private = self.portal.private\n         self.assertTrue(\'private\' == self.wftool.getInfoFor(private,\n@@ -58,14 +68,14 @@ def afterSetUp(self):\n         self.wftool.doActionFor(pending, \'submit\')\n         self.assertTrue(\'pending\' == self.wftool.getInfoFor(pending,\n                                                             \'review_state\'))\n-        self.logout()\n+        logout()\n \n     def uncompress(self, sitemapdata):\n-        sio = StringIO(sitemapdata)\n+        sio = BytesIO(sitemapdata)\n         unziped = GzipFile(fileobj=sio)\n         xml = unziped.read()\n         unziped.close()\n-        return xml\n+        return safe_unicode(xml)\n \n     def test_disabled(self):\n         \'\'\'\n@@ -89,14 +99,15 @@ def test_authenticated_before_anonymous(self):\n         \'\'\'\n \n         # first round as an authenticated (manager)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n         self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n         self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n \n         # second round as anonymous\n-        self.logout()\n+        logout()\n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\'<loc>http://nohost/plone/private</loc>\' in xml)\n         self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n@@ -116,7 +127,8 @@ def test_anonymous_before_authenticated(self):\n         self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n \n         # second round as an authenticated (manager)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n         self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n@@ -132,18 +144,19 @@ def test_changed_catalog(self):\n         self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n \n         # changing the workflow state\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         pending = self.portal.pending\n         self.wftool.doActionFor(pending, \'publish\')\n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n \n         # removing content\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.manage_delObjects([\'published\', ])\n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n@@ -153,7 +166,8 @@ def test_navroot(self):\n         Sitemap generated from an INavigationRoot\n         \'\'\'\n         # setup navroot content that is accessible for anonymous\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'navroot\', type_name=\'Folder\')\n         navroot = self.portal.navroot\n         self.wftool.doActionFor(navroot, \'publish\')\n@@ -165,7 +179,7 @@ def test_navroot(self):\n         self.wftool.doActionFor(published, \'publish\')\n         self.assertTrue(\'published\' == self.wftool.getInfoFor(\n             published, \'review_state\'))\n-        self.logout()\n+        logout()\n \n         sitemap = getMultiAdapter((self.portal.navroot, self.portal.REQUEST),\n                                   name=\'sitemap.xml.gz\')\n@@ -180,7 +194,8 @@ def test_types_not_searched(self):\n         Test that types_not_searched is respected\n         \'\'\'\n         # Set News Items not to be searchable (more likely Images)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n         newsitem = self.portal.newsitem\n         self.wftool.doActionFor(newsitem, \'publish\')\n@@ -189,7 +204,7 @@ def test_types_not_searched(self):\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         search_settings.types_not_searched = (\'News Item\',)\n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\'<loc>http://nohost/plone/newsitem</loc>\' in xml)\n@@ -199,7 +214,8 @@ def test_typesUseViewActionInListings(self):\n         Test that typesUseViewActionInListings is respected\n         \'\'\'\n         # Set News Items not to be searchable (more likely Images)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n         newsitem = self.portal.newsitem\n         self.wftool.doActionFor(newsitem, \'publish\')\n@@ -208,7 +224,7 @@ def test_typesUseViewActionInListings(self):\n         registry = getUtility(IRegistry)\n         registry[\'plone.types_use_view_action_in_listings\'] = [u\'News Item\']\n \n-        self.logout()\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertTrue(\'<loc>http://nohost/plone/newsitem/view</loc>\' in xml)\n@@ -219,7 +235,8 @@ def test_default_pages(self):\n         their or their parent\'s modification time.\n         \'\'\'\n \n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         self.portal.invokeFactory(id=\'folder\', type_name=\'Folder\')\n         folder = self.portal.folder\n         folder.default_page = "default"\n@@ -233,14 +250,13 @@ def test_default_pages(self):\n         self.assertTrue(\'published\' == self.wftool.getInfoFor(\n             default, \'review_state\'))\n         self.assertTrue(self.portal.plone_utils.isDefaultPage(default))\n-\n         default.modification_date = DateTime("2001-01-01")\n         folder.modification_date = DateTime("2000-01-01")\n-        self.portal.portal_catalog.reindexObject(folder)\n-        self.portal.portal_catalog.reindexObject(default)\n+        self.portal.portal_catalog.reindexObject(folder, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        self.portal.portal_catalog.reindexObject(default, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n         self.portal.default_page = "published"\n-        self.portal.portal_catalog.reindexObject(self.portal.published)\n-        self.logout()\n+        self.portal.portal_catalog.reindexObject(self.portal.published, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        logout()\n \n         xml = self.uncompress(self.sitemap())\n         self.assertFalse(\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex 4c6b15e..dc684d6 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -3,6 +3,10 @@\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from Products.CMFPlone.utils import _createObjectByType\n \n \n class Fixture(PloneSandboxLayer):\n@@ -14,6 +18,16 @@ def setUpZope(self, app, configurationContext):\n         import plone.app.layout\n         self.loadZCML(package=plone.app.layout)\n \n+    def setUpPloneSite(self, portal):\n+        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        mtool = portal.portal_membership\n+        if not mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+        mtool.createMemberArea(TEST_USER_ID)\n+        if mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+\n+\n FIXTURE = Fixture()\n INTEGRATION_TESTING = IntegrationTesting(\n     bases=(FIXTURE,),\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 0da1f9f..e43a5fe 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_inner\n from cgi import escape\n from datetime import date\n+from functools import total_ordering\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.memoize.view import memoize\n@@ -29,6 +30,7 @@\n \n \n @implementer(IViewlet)\n+@total_ordering\n class ViewletBase(BrowserView):\n     """ Base class with common functions for link viewlets.\n     """\n@@ -41,6 +43,9 @@ def __init__(self, context, request, view, manager=None):\n         self.view = view\n         self.manager = manager\n \n+    def __hash__(self):\n+        return id(self) * 16\n+\n     @property\n     @deprecate("Use site_url instead. " +\n                "ViewletBase.portal_url will be removed in Plone 4")\n@@ -62,6 +67,16 @@ def index(self):\n         raise NotImplementedError(\n             \'`index` method must be implemented by subclass.\')\n \n+    def __lt__(self, other):\n+        \'\'\' Sort by name\n+        \'\'\'\n+        return self.__name__ < other.__name__\n+\n+    def __eq__(self, other):\n+        \'\'\' Check for equality\n+        \'\'\'\n+        return id(self) == id(other)\n+\n \n class TitleViewlet(ViewletBase):\n     index = ViewPageTemplateFile(\'title.pt\')\n@@ -426,8 +441,6 @@ class ManagePortletsFallbackViewlet(ViewletBase):\n     index = ViewPageTemplateFile(\'manage_portlets_fallback.pt\')\n \n     def update(self):\n-        ploneview = getMultiAdapter((\n-            self.context, self.request), name=u\'plone\')\n         plonelayout = getMultiAdapter((\n             self.context, self.request), name=u\'plone_layout\')\n         context_state = getMultiAdapter((self.context, self.request),\ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex 312caf6..2f528d0 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -28,12 +28,12 @@ def body_tag_filter(self, value):\n     @property\n     def tags(self):\n         # Do not show items with \'itemprop\'.\n-        return filter(self.head_tag_filter, self._get_tags())\n+        return list(filter(self.head_tag_filter, self._get_tags()))\n \n     @property\n     def body_tags(self):\n         # Show only items without \'itemprop\'.\n-        return filter(self.body_tag_filter, self._get_tags())\n+        return list(filter(self.body_tag_filter, self._get_tags()))\n \n     @memoize\n     def _get_tags(self):\ndiff --git a/plone/app/layout/viewlets/tests/base.py b/plone/app/layout/viewlets/tests/base.py\nindex f579fbd..09d5d08 100644\n--- a/plone/app/layout/viewlets/tests/base.py\n+++ b/plone/app/layout/viewlets/tests/base.py\n@@ -1,6 +1,26 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.layout.testing import TEST_USER_ID\n \n+import unittest\n \n-class ViewletsTestCase(PloneTestCase):\n-    """ Base testing class for viewlets tests """\n+\n+class ViewletsTestCase(unittest.TestCase):\n+\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+\n+\n+class ViewletsFunctionalTestCase(unittest.TestCase):\n+\n+    layer = FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.folder = self.portal[\'Members\'][TEST_USER_ID]\ndiff --git a/plone/app/layout/viewlets/tests/history.txt b/plone/app/layout/viewlets/tests/history.txt\nindex a9cf845..7bebda2 100644\n--- a/plone/app/layout/viewlets/tests/history.txt\n+++ b/plone/app/layout/viewlets/tests/history.txt\n@@ -56,8 +56,10 @@ Create a public page with workflow.\n The history viewlet gracefully handles initial default workflow state.\n \n     >>> browser.follow(url=\'@@historyview\')\n-    >>> browser.contents\n-    \'...<span class="historyAction state-private">Create</span>...\'\n+    >>> from __future__ import print_function\n+    >>> print(browser.contents)\n+    <...<span class="historyAction state-private">Create</span>...\n+\n \n The history viewlet handles revert actions sucessfully. Let\'s make a revision.\n \ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 9c98651..9fd85e5 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -6,6 +6,8 @@\n from plone.app.layout.viewlets.common import TitleViewlet\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import INonStructuralFolder\n@@ -18,9 +20,9 @@\n \n \n # Red pixel with filename pixel.png\n-SITE_LOGO_BASE64 = \'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA\'\\\n-                   \'AAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAAAA\'\\\n-                   \'ElFTkSuQmCC\'\n+SITE_LOGO_BASE64 = b\'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA\'\\\n+                   b\'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA\'\\\n+                   b\'AAElFTkSuQmCC\'\n \n \n class TestViewletBase(ViewletsTestCase):\n@@ -28,8 +30,8 @@ class TestViewletBase(ViewletsTestCase):\n     """\n \n     def test_update(self):\n-        request = self.app.REQUEST\n-        self.setRoles([\'Manager\', \'Member\'])\n+        request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.portal.invokeFactory(\'Folder\', \'f1\')\n         context = getattr(self.portal, \'f1\')\n         alsoProvides(context, INavigationRoot)\n@@ -43,11 +45,11 @@ class TestContentViewsViewlet(ViewletsTestCase):\n     """Test the content views viewlet.\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestContentViewsViewlet, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'test\',\n                                   title=\'Test default page\')\n-        self.folder.test.unmarkCreationFlag()\n-        self.folder.setTitle(u"Folder")\n+        self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -57,7 +59,7 @@ def _invalidateRequestMemoizations(self):\n \n     def test_set1_on_portal_root(self):\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n         view = ContentViewsViewlet(self.portal, self.app.REQUEST, None)\n         view.update()\n@@ -65,7 +67,7 @@ def test_set1_on_portal_root(self):\n \n     def test_set1_NonStructuralFolder(self):\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url()\n         directlyProvides(self.folder, INonStructuralFolder)\n         view = ContentViewsViewlet(self.folder, self.app.REQUEST, None)\n@@ -76,7 +78,7 @@ def test_set1_NonStructuralFolder(self):\n \n     def test_set1(self):\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = \'%s/edit?_authenticator=%s\' % (\n             self.folder.test.absolute_url(),\n             auth.createToken()\n@@ -93,11 +95,11 @@ class TestTitleViewsViewlet(ViewletsTestCase):\n     """Test the title viewlet.\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestTitleViewsViewlet, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'test\',\n                                   title=\'Test default page\')\n-        self.folder.test.unmarkCreationFlag()\n-        self.folder.setTitle(u"Folder")\n+        self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -109,7 +111,7 @@ def test_title_viewlet_on_portal(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n         viewlet = TitleViewlet(self.portal, self.app.REQUEST, None)\n         viewlet.update()\n@@ -126,7 +128,7 @@ def test_title_viewlet_on_content(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n@@ -145,7 +147,7 @@ def test_title_viewlet_with_navigation_root(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n         directlyProvides(self.folder, INavigationRoot)\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n@@ -153,23 +155,6 @@ def test_title_viewlet_with_navigation_root(self):\n         self.assertEqual(viewlet.site_title,\n                          u\'Test default page &mdash; Folder\')\n \n-    def test_title_viewlet_in_portal_factory(self):\n-        """Title viewlet renders navigation root title in portal factory\n-        """\n-        self._invalidateRequestMemoizations()\n-        self.loginAsPortalOwner()\n-\n-        factory_folder = self.folder.portal_factory\n-        factory_document = (factory_folder\n-                            .restrictedTraverse(\'Document/document\'))\n-        self.app.REQUEST[\'ACTUAL_URL\'] = factory_document.absolute_url()\n-\n-        directlyProvides(self.folder, INavigationRoot)\n-        viewlet = TitleViewlet(factory_document, self.app.REQUEST, None)\n-        viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         u\'Add Page &mdash; Folder\')\n-\n \n class TestLogoViewlet(ViewletsTestCase):\n     """Test the site logo viewlet.\n@@ -254,7 +239,7 @@ def test_selectedtabs(self):\n     def test_selectedtabs_navroot(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        self.setRoles((\'Manager\',))\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\'Folder\', \'navroot\', title=\'My new root\')\n         navroot = self.portal[\'navroot\']\n         alsoProvides(navroot, INavigationRoot)\ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex b8914c4..81dfdd2 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -4,6 +4,9 @@\n from plone.app.layout.viewlets.content import DocumentBylineViewlet\n from plone.app.layout.viewlets.content import HistoryByLineView\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.testing import logout\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import setRoles\n from plone.locking.interfaces import ILockable\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -34,7 +37,8 @@ class TestDocumentBylineViewletView(ViewletsTestCase):\n     Test the document by line viewlet\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestDocumentBylineViewletView, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n         self.context = self.folder[\'doc1\']\n \n@@ -60,7 +64,7 @@ def test_pub_date(self):\n \n         settings.display_publication_date_in_byline = True\n \n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n \n         # publication date should be None as there is not Effective date set\n@@ -77,16 +81,15 @@ def test_pub_date(self):\n         settings.display_publication_date_in_byline = False\n         self.assertEqual(viewlet.pub_date(), None)\n \n-\n     def test_anonymous_users_see_byline_if_show_enabled(self):\n         self.security_settings.allow_anon_views_about = True\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertTrue(viewlet.show())\n \n     def test_anonymous_users_dont_see_byline_if_show_disabled(self):\n         self.security_settings.allow_anon_views_about = False\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertFalse(viewlet.show())\n \n@@ -101,14 +104,13 @@ def test_logged_users_see_byline_if_show_disabled(self):\n         self.assertTrue(viewlet.show())\n \n \n-\n-\n class TestHistoryBylineViewletView(ViewletsTestCase):\n     """\n     Test the document by line viewlet\n     """\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestHistoryBylineViewletView, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n         self.context = self.folder[\'doc1\']\n \n@@ -126,13 +128,13 @@ def _get_viewlet(self):\n \n     def test_show_anonymous_not_allowed(self):\n         self.security_settings.allow_anon_views_about = False\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertFalse(viewlet.show())\n \n     def test_show_anonymous_allowed(self):\n         self.security_settings.allow_anon_views_about = True\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertTrue(viewlet.show())\n \n@@ -147,12 +149,12 @@ def test_show_logged_in_anonymous_allowed(self):\n         self.assertTrue(viewlet.show())\n \n     def test_anonymous_locked_icon_not_locked(self):\n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n         self.assertEqual(viewlet.locked_icon(), "")\n \n     def test_anonymous_locked_icon_is_locked(self):\n-        self.logout()\n+        logout()\n         ILockable(self.context).lock()\n         viewlet = self._get_viewlet()\n         self.assertEqual(viewlet.locked_icon(), "")\n@@ -178,7 +180,7 @@ def test_pub_date(self):\n \n         settings.display_publication_date_in_byline = True\n \n-        self.logout()\n+        logout()\n         viewlet = self._get_viewlet()\n \n         # publication date should be None as there is not Effective date set\n@@ -198,11 +200,16 @@ def test_pub_date(self):\n \n class TestRelatedItemsViewlet(ViewletsTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestRelatedItemsViewlet, self).setUp()\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n         self.folder.invokeFactory(\'Document\', \'doc2\', title=\'Document 2\')\n         self.folder.invokeFactory(\'Document\', \'doc3\', title=\'Document 3\')\n-        self.folder.doc1.setRelatedItems([self.folder.doc2, self.folder.doc3])\n+        intids = getUtility(IIntIds)\n+        self.folder.doc1.relatedItems = [\n+            RelationValue(intids.getId(self.folder.doc2)),\n+            RelationValue(intids.getId(self.folder.doc3)),\n+        ]\n \n     def testRelatedItems(self):\n         request = self.app.REQUEST\n@@ -224,12 +231,11 @@ def testDeletedRelatedItems(self):\n \n class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestDexterityRelatedItemsViewlet, self).setUp()\n         """ create some sample content to test with """\n         from Products.CMFPlone.utils import get_installer\n-        if not HAS_DEXTERITY:\n-            return\n-        self.setRoles((\'Manager\',))\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         fti = DexterityFTI(\'Dexterity Item with relatedItems behavior\')\n         self.portal.portal_types._setObject(\n             \'Dexterity Item with relatedItems behavior\', fti)\ndiff --git a/plone/app/layout/viewlets/tests/test_functional.py b/plone/app/layout/viewlets/tests/test_functional.py\nindex e816796..f7fc131 100644\n--- a/plone/app/layout/viewlets/tests/test_functional.py\n+++ b/plone/app/layout/viewlets/tests/test_functional.py\n@@ -1,9 +1,5 @@\n # -*- coding: utf-8 -*-\n-"""Functional Doctests for plone.app.discussion.\n-\n-   These test are only triggered when Plone 4 (and plone.testing) is installed.\n-"""\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n@@ -22,6 +18,6 @@ def test_suite():\n         layered(doctest.DocFileSuite(test,\n                                      optionflags=optionflags,\n                                      ),\n-                layer=PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING)\n+                layer=FUNCTIONAL_TESTING)\n         for test in normal_testfiles])\n     return suite\ndiff --git a/plone/app/layout/viewlets/tests/test_history.py b/plone/app/layout/viewlets/tests/test_history.py\nindex caedc57..6e9ed76 100644\n--- a/plone/app/layout/viewlets/tests/test_history.py\n+++ b/plone/app/layout/viewlets/tests/test_history.py\n@@ -1,15 +1,18 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.content import ContentHistoryViewlet\n from plone.app.layout.viewlets.content import WorkflowHistoryViewlet\n-from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.viewlets.tests.base import ViewletsFunctionalTestCase\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_ID\n \n \n-class TestWorkflowHistoryViewlet(ViewletsTestCase):\n-    """\n-    Test the workflow history viewlet\n-    """\n+class TestWorkflowHistoryViewlet(ViewletsFunctionalTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestWorkflowHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory(\'Document\', \'d1\')\n@@ -33,7 +36,8 @@ def test_transitionHistory(self):\n         wf_tool = self.portal.portal_workflow\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         wf_tool.doActionFor(context, \'publish\')\n \n         viewlet = WorkflowHistoryViewlet(context, request, None, None)\n@@ -45,11 +49,11 @@ def test_transitionHistory(self):\n \n         # add a temporary user to perform a transition\n         self.addMember(\'tempuser\', roles=(\'Member\', \'Manager\'))\n-        self.login(\'tempuser\')\n+        login(self.portal, \'tempuser\')\n         wf_tool.doActionFor(context, action=\'retract\', actor=None)\n-        self.logout()\n+        logout()\n \n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n \n         # remove the user\n         self.delMember(\'tempuser\')\n@@ -64,43 +68,44 @@ def test_transitionHistory(self):\n         self.assertEqual(history[0][\'actor_home\'], \'\')\n \n \n-class TestContentHistoryViewlet(ViewletsTestCase):\n-    """\n-    Test the workflow history viewlet\n-    """\n+class TestContentHistoryViewlet(ViewletsFunctionalTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestContentHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory(\'Document\', \'d1\')\n \n-    def test_emptyHistory(self):\n+    def test_initialHistory(self):\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.revisionHistory(), [])\n+        self.assertEqual(len(viewlet.revisionHistory()), 1)\n \n     def test_revisionHistory(self):\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n-        self.loginAsPortalOwner()\n-        repo_tool.save(context, comment=\'Initial Revision\')\n-\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n \n+        # after creating the item the is a first revision\n         history = viewlet.revisionHistory()\n         self.assertEqual(len(history), 1)\n+\n+        repo_tool.save(context, comment=\'Initial Revision\')\n+        viewlet.update()\n+        history = viewlet.revisionHistory()\n+        self.assertEqual(len(history), 2)\n         self.assertEqual(history[0][\'comments\'], \'Initial Revision\')\n \n         repo_tool.save(context, comment=\'Second Revision\')\n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertTrue(\n-            \'http://nohost/plone/Members/test_user_1_/d1/@@history?one=1&two=0\' in history[\n-                0][\'diff_previous_url\']\n+            \'http://nohost/plone/Members/test_user_1_/d1/@@history?one=2&two=1\'\n+            in history[0][\'diff_previous_url\']\n         )\n \n         # check diff link does not appear if content is not diffable\n@@ -116,7 +121,8 @@ def test_revertAbility(self):\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n         context = getattr(self.folder, \'d1\')\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        login(self.portal, TEST_USER_NAME)\n         repo_tool.save(context, comment=\'Initial Revision\')\n         repo_tool.save(context, comment=\'Second Revision\')\n \ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex 9b7bc9e..2b37715 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -2,6 +2,10 @@\n from plone.app.layout.viewlets.social import SocialTagsViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import logout\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISocialMediaSchema\n from zope.annotation.interfaces import IAnnotations\n@@ -12,8 +16,10 @@ class TestSocialViewlet(ViewletsTestCase):\n     """Test the content views viewlet.\n     """\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+    def setUp(self):\n+        super(TestSocialViewlet, self).setUp()\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.folder.invokeFactory(\'News Item\', \'news-item\',\n                                   title=\'News Item\')\n         self.news = self.folder[\'news-item\']\n@@ -85,7 +91,7 @@ def testDisabled(self):\n         self.assertEquals(len(viewlet.tags), 0)\n \n     def testDisabledForLoggedUser(self):\n-        self.loginAsPortalOwner()\n+        login(self.portal, TEST_USER_NAME)\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEquals(len(viewlet.tags), 0)\ndiff --git a/setup.py b/setup.py\nindex 460d633..6818aab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,11 +15,14 @@\n           "Environment :: Web Environment",\n           "Framework :: Plone",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "Framework :: Zope2",\n           "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n       ],\n       keywords=\'plone layout viewlet\',\n       author=\'Plone Foundation\',\n'

