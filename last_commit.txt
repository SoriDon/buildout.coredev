Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-04T13:35:50+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/0b60d4b35fbd19d96a467b893caf55b1c4fe0d78

Call browserDefault.getLayout() with parameter check_exists=True to fallback to default view in case layout selected for Folder does not exist

Files changed:
A news/2645.bugfix
M Products/CMFPlone/PloneTool.py

b'diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex bbe7db721..3d1fdb6b9 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -688,7 +688,7 @@ def browserDefault(self, obj):\n         else:\n             browserDefault = queryAdapter(obj, IBrowserDefault)\n         if browserDefault is not None:\n-            layout = browserDefault.getLayout()\n+            layout = browserDefault.getLayout(check_exists=True)\n             if layout is None:\n                 raise AttributeError(\n                     "%s has no assigned layout, perhaps it needs an FTI" % obj)\ndiff --git a/news/2645.bugfix b/news/2645.bugfix\nnew file mode 100644\nindex 000000000..415054689\n--- /dev/null\n+++ b/news/2645.bugfix\n@@ -0,0 +1 @@\n+Fixed fallback to default view when selected layout does not exist for Folder. [gbastien]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-04T13:57:13+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/341577b2f360c3f242ffb565cfc01fc17e4164f0

check_exists only if default_view_fallback is True on the FTI

Files changed:
M Products/CMFPlone/PloneTool.py

b'diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 3d1fdb6b9..f9503125d 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -688,7 +688,10 @@ def browserDefault(self, obj):\n         else:\n             browserDefault = queryAdapter(obj, IBrowserDefault)\n         if browserDefault is not None:\n-            layout = browserDefault.getLayout(check_exists=True)\n+            default_view_fallback = False\n+            if base_hasattr(obj, \'getTypeInfo\'):\n+                default_view_fallback = obj.getTypeInfo().default_view_fallback\n+            layout = browserDefault.getLayout(check_exists=default_view_fallback)\n             if layout is None:\n                 raise AttributeError(\n                     "%s has no assigned layout, perhaps it needs an FTI" % obj)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-06T10:03:34+01:00
Author: Gauthier Bastien (gbastien) <gauthier@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/f3f4774dde5b48c352d840b613a54cf7d4f9cee9

Merge branch 'master' into fix_fallback_to_defaultview

Files changed:
A news/2464.fixed
A news/2649.feature
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/interfaces/resources.py
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/tests/testCatalogTool.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 20d8fb7f2..cafc4b433 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -437,10 +437,20 @@ def searchResults(self, query=None, **kw):\n         if not show_inactive and not self.allow_inactive(kw):\n             kw[\'effectiveRange\'] = DateTime()\n \n-        sort_on = kw.get(\'sort_on\')\n-        if sort_on and sort_on not in self.indexes():\n-            # I get crazy sort_ons like \'194\' or \'null\'.\n-            kw.pop(\'sort_on\')\n+        # filter out invalid sort_on indexes\n+        sort_on = kw.get(\'sort_on\') or []\n+        if isinstance(sort_on, six.string_types):\n+            sort_on = [sort_on]\n+        valid_indexes = self.indexes()\n+        try:\n+            sort_on = [idx for idx in sort_on if idx in valid_indexes]\n+        except TypeError:\n+            # sort_on is not iterable\n+            sort_on = []\n+        if not sort_on:\n+            kw.pop(\'sort_on\', None)\n+        else:\n+            kw[\'sort_on\'] = sort_on\n \n         return ZCatalog.searchResults(self, query, **kw)\n \ndiff --git a/Products/CMFPlone/interfaces/resources.py b/Products/CMFPlone/interfaces/resources.py\nindex 7ffe2db42..2e1c6a0b4 100644\n--- a/Products/CMFPlone/interfaces/resources.py\n+++ b/Products/CMFPlone/interfaces/resources.py\n@@ -130,3 +130,15 @@ class IBundleRegistry(zope.interface.Interface):\n              SimpleTerm(\'logged-in\', \'logged-in\', \'logged-in\')]),\n         default=u"",\n         required=False)\n+\n+    load_async = schema.Bool(\n+        title=_(u"Load asynchronously"),\n+        description=_("Load the JavaScript files asynchronously by adding an ``async`` attribute to the script tag."),\n+        default=False,\n+        required=False)\n+\n+    load_defer = schema.Bool(\n+        title=_(u"Load deffered"),\n+        description=_("Load the JavaScript files deffered after the document has been parsed but before ``DOMContentLoaded`` by adding a ``defer`` attribute to the script tag."),\n+        default=False,\n+        required=False)\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 46b0128c0..7cdcbe937 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -1171,7 +1171,9 @@\n     <value key="enabled">True</value>\n     <value key="jscompilation">++plone++static/plone-compiled.min.js</value>\n     <value key="csscompilation">++plone++static/plone-compiled.css</value>\n-    <value key="last_compilation">2018-09-26 16:00:00</value>\n+    <value key="last_compilation">2018-10-04 12:00:00</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>jquery</element>\n     </value>\n@@ -1189,6 +1191,8 @@\n     <value key="csscompilation">++plone++static/plone-logged-in-compiled.css</value>\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n     <value key="depends">plone</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>backbone</element>\n       <element>bootstrap-dropdown</element>\n@@ -1231,6 +1235,8 @@\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n     <value key="compile">False</value>\n     <value key="enabled">True</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n   </records>\n \n   <records prefix="plone.bundles/resourceregistry"\n@@ -1242,6 +1248,8 @@\n     <value key="jscompilation">++plone++static/resourceregistry-compiled.min.js</value>\n     <value key="csscompilation">++plone++static/resourceregistry-compiled.css</value>\n     <value key="last_compilation">2018-09-26 16:00:00</value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n     <value key="stub_js_modules">\n       <element>jquery</element>\n     </value>\ndiff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt\nindex e9f7e6c0f..3549e18f1 100644\n--- a/Products/CMFPlone/resources/browser/scripts.pt\n+++ b/Products/CMFPlone/resources/browser/scripts.pt\n@@ -10,7 +10,12 @@\n </tal:if><tal:if condition="condcomment">\n     <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />\n </tal:if>\n-  <script tal:attributes="src script/src; data-bundle script/bundle"></script>\n+  <script type="text/javascript"\n+      tal:attributes="\n+        src script/src;\n+        data-bundle script/bundle;\n+        async script/async|nothing;\n+        defer script/defer|nothing"/>\n <tal:if condition="condcomment">\n   <tal:closecc tal:condition="condcomment" tal:replace="structure string:&lt;![endif]--&gt;" />\n </tal:if><tal:if condition="resetrjs">\ndiff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py\nindex 45589ce96..8cbf18107 100644\n--- a/Products/CMFPlone/resources/browser/scripts.py\n+++ b/Products/CMFPlone/resources/browser/scripts.py\n@@ -82,10 +82,16 @@ def get_data(self, bundle, result):\n                     bundle.jscompilation,\n                     parse.quote(str(bundle.last_compilation))\n                 )\n+\n+            load_async = \'async\' if getattr(bundle, \'load_async\', None) else None  # noqa\n+            load_defer = \'defer\' if getattr(bundle, \'load_defer\', None) else None  # noqa\n+\n             result.append({\n                 \'bundle\': bundle.name,\n                 \'conditionalcomment\': bundle.conditionalcomment,\n-                \'src\': js_location\n+                \'src\': js_location,\n+                \'async\': load_async,\n+                \'defer\': load_defer,\n             })\n \n     def default_resources(self):\n@@ -148,22 +154,36 @@ def scripts(self):\n             result = self.default_resources()\n             result.extend(self.ordered_bundles_result())\n         else:\n+            # Acquire load_async and load_defer bundle options from the plone\n+            # bundle and use it for the ``default`` meta bundle.\n+            bundles = self.get_bundles()\n+            load_async = getattr(bundles.get(\'plone\'), \'load_async\', False)\n+            load_defer = getattr(bundles.get(\'plone\'), \'load_defer\', False)\n             result = [{\n                 \'src\': \'{0}/++plone++{1}\'.format(\n                     self.site_url,\n                     self.production_path + \'/default.js\'\n                 ),\n                 \'conditionalcomment\': None,\n-                \'bundle\': \'production\'\n+                \'bundle\': \'production\',\n+                \'async\': \'async\' if load_async else None,\n+                \'defer\': \'defer\' if load_defer else None\n             }, ]\n             if not self.anonymous:\n+                # Acquire load_async and load_defer bundle options from the\n+                # plone-logged-in bundle and use it for the ``logged-in`` meta\n+                # bundle.\n+                load_async = getattr(bundles.get(\'plone-logged-in\'), \'load_async\', False)  # noqa\n+                load_defer = getattr(bundles.get(\'plone-logged-in\'), \'load_defer\', False)  # noqa\n                 result.append({\n                     \'src\': \'{0}/++plone++{1}\'.format(\n                         self.site_url,\n                         self.production_path + \'/logged-in.js\'\n                     ),\n                     \'conditionalcomment\': None,\n-                    \'bundle\': \'production\'\n+                    \'bundle\': \'production\',\n+                    \'async\': \'async\' if load_async else None,\n+                    \'defer\': \'defer\' if load_defer else None\n                 })\n             result.extend(self.ordered_bundles_result(production=True))\n \ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex 5f491ef7e..f3fa4adc1 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -2,6 +2,7 @@\n # -*- encoding: utf-8 -*-\n from Acquisition import aq_base\n from DateTime import DateTime\n+from functools import partial\n from OFS.ObjectManager import REPLACEABLE\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -11,21 +12,23 @@\n from plone.indexer.wrapper import IndexableObjectWrapper\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n-from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFCore.indexing import processQueue\n+from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFPlone.CatalogTool import CatalogTool\n from Products.CMFPlone.CatalogTool import is_folderish\n from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from Products.CMFPlone.tests.utils import folder_position\n+from z3c.form.interfaces import IFormLayer\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectCreatedEvent\n-from z3c.form.interfaces import IFormLayer\n+\n import transaction\n import unittest\n import zope.interface\n \n+\n user2 = \'u2\'\n group2 = \'g2\'\n \n@@ -552,6 +555,36 @@ def afterSetUp(self):\n         self.folder.doc5.reindexObject()\n         self.folder.doc6.reindexObject()\n \n+    def testSortMultipleColumns(self):\n+        path = \'/\'.join(self.folder.getPhysicalPath())\n+        query = partial(self.catalog, path=path)\n+        brains = query(sort_on=[\'portal_type\', \'sortable_title\'])\n+        self.assertListEqual(\n+            [brain.getPath() for brain in brains],\n+            [\n+                \'/plone/Members/test_user_1_/doc2\',\n+                \'/plone/Members/test_user_1_/doc3\',\n+                \'/plone/Members/test_user_1_/doc\',\n+                \'/plone/Members/test_user_1_/doc5\',\n+                \'/plone/Members/test_user_1_/doc6\',\n+                \'/plone/Members/test_user_1_/doc4\',\n+                \'/plone/Members/test_user_1_\'\n+            ],\n+        )\n+        brains = query(sort_on=[\'portal_type\', \'getId\'])\n+        self.assertListEqual(\n+            [brain.getPath() for brain in brains],\n+            [\n+                \'/plone/Members/test_user_1_/doc\',\n+                \'/plone/Members/test_user_1_/doc2\',\n+                \'/plone/Members/test_user_1_/doc3\',\n+                \'/plone/Members/test_user_1_/doc4\',\n+                \'/plone/Members/test_user_1_/doc5\',\n+                \'/plone/Members/test_user_1_/doc6\',\n+                \'/plone/Members/test_user_1_\',\n+            ]\n+        )\n+\n     def testUnknownSortOnIsIgnored(self):\n         # You should not get a CatalogError when an invalid sort_on is passed.\n         # I get crazy sort_ons like \'194\' or \'null\'.\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 582b97f44..aef54fb37 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -18,12 +18,14 @@\n from Products.CMFPlone.resources.bundle import Bundle\n from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa\n from Products.CMFPlone.tests import PloneTestCase\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.GenericSetup.context import SetupEnviron\n from xml.dom.minidom import parseString\n from zope.component import getUtility\n \n import json\n import mock\n+import os\n \n \n class TestResourceRegistries(PloneTestCase.PloneTestCase):\n@@ -206,6 +208,91 @@ def test_error(self):\n         )\n         self.assertIn(b\'error cooking\', resp.getBody())\n \n+    def test_bundle_defer_async(self):\n+        registry = getUtility(IRegistry)\n+\n+        bundles = registry.collectionOfInterface(\n+            IBundleRegistry,\n+            prefix="plone.bundles"\n+        )\n+        bundle = bundles.add(\'foobar\')\n+        bundle.name = \'foobar\'\n+        bundle.jscompilation = \'foobar.js\'\n+        bundle.csscompilation = \'foobar.css\'\n+        bundle.resources = [\'foobar\']\n+\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+        view.get_cooked_bundles = lambda: [(\'foobar\', bundle)]\n+\n+        import Products.CMFPlone.resources.browser\n+        path = os.path.dirname(Products.CMFPlone.resources.browser.__file__)\n+        view.index = ViewPageTemplateFile(\'scripts.pt\', path)\n+        view.update()\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundle.load_async = True\n+        bundle.load_defer = False\n+        self.assertTrue(\'async="async"\' in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundle.load_async = False\n+        bundle.load_defer = True\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' in view.index(view))\n+\n+        bundle.load_async = True\n+        bundle.load_defer = True\n+\n+        self.assertTrue(\'async="async"\' in view.index(view))\n+        self.assertTrue(\'defer="defer"\' in view.index(view))\n+\n+        bundle.load_async = False\n+        bundle.load_defer = False\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+    def test_bundle_defer_async_production(self):\n+        registry = getUtility(IRegistry)\n+\n+        bundles = registry.collectionOfInterface(\n+            IBundleRegistry,\n+            prefix="plone.bundles"\n+        )\n+        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].load_defer = False\n+        bundles[\'plone-logged-in\'].load_async = False\n+        bundles[\'plone-logged-in\'].load_defer = False\n+\n+        view = ScriptsView(self.app, self.app.REQUEST, None, None)\n+\n+        import Products.CMFPlone.resources.browser\n+        path = os.path.dirname(Products.CMFPlone.resources.browser.__file__)\n+        view.index = ViewPageTemplateFile(\'scripts.pt\', path)\n+        view.update()\n+\n+        self.assertTrue(\'async="async"\' not in view.index(view))\n+        self.assertTrue(\'defer="defer"\' not in view.index(view))\n+\n+        bundles[\'plone\'].load_async = True\n+        bundles[\'plone\'].load_defer = False\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 0)\n+\n+        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 1)\n+\n+        bundles[\'plone\'].load_async = True\n+        bundles[\'plone\'].load_defer = True\n+        bundles[\'plone-logged-in\'].load_async = True\n+        bundles[\'plone-logged-in\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 2)\n+        self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n+\n \n class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n     """Test features of registry node importer"""\n@@ -530,14 +617,26 @@ def test_add_bundle_on_request_with_subrequest(self):\n         self.assertTrue(scripts.development)\n \n         scripts.update()\n-        results = scripts.scripts()\n+        result = scripts.scripts()[-1]\n         self.assertEqual(\n-            results[-1],\n-            {\n-                \'src\': \'http://nohost/plone/++resource++foo.js?version=123\',\n-                \'conditionalcomment\': None,\n-                \'bundle\': \'foo\'\n-            }\n+            result[\'src\'],\n+            \'http://nohost/plone/++resource++foo.js?version=123\'\n+        )\n+        self.assertEqual(\n+             result[\'conditionalcomment\'],\n+             None\n+        )\n+        self.assertEqual(\n+            result[\'bundle\'],\n+            \'foo\',\n+        )\n+        self.assertEqual(\n+            result[\'async\'],\n+            None\n+        )\n+        self.assertEqual(\n+            result[\'defer\'],\n+            None\n         )\n \n     @mock.patch.object(\ndiff --git a/news/2464.fixed b/news/2464.fixed\nnew file mode 100644\nindex 000000000..208e85080\n--- /dev/null\n+++ b/news/2464.fixed\n@@ -0,0 +1 @@\n+Restore the possibility to sort catalog query results with multiple indexes\ndiff --git a/news/2649.feature b/news/2649.feature\nnew file mode 100644\nindex 000000000..e3ac68ed8\n--- /dev/null\n+++ b/news/2649.feature\n@@ -0,0 +1,4 @@\n+- Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.\n+  When set, ``<script>`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.\n+  In production mode, the setting from the ``plone`` resp. ``plone-logged-in`` bundles are used for the ``default`` resp. ``logged-in`` meta bundles (``merge_with`` setting). \n+  [thet]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-31T01:04:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/e67d33cb3508acc199cb36d2d3de47b27b190898

Merge branch 'master' into fix_fallback_to_defaultview

Files changed:
A news/2489.feature
A news/2669.bugfix
M Products/CMFPlone/profiles/default/metadata.xml
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/static/plone.js
M Products/CMFPlone/tests/robot/test_edit_user_schema.robot
M Products/CMFPlone/tests/robot/test_querystring.robot
M Products/CMFPlone/tests/testResourceRegistries.py
M news/2649.feature

b'diff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml\nindex dc652aa14..86eb26619 100644\n--- a/Products/CMFPlone/profiles/default/metadata.xml\n+++ b/Products/CMFPlone/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>5200</version>\n+  <version>5201</version>\n </metadata>\ndiff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py\nindex 8cbf18107..38ecacbba 100644\n--- a/Products/CMFPlone/resources/browser/scripts.py\n+++ b/Products/CMFPlone/resources/browser/scripts.py\n@@ -154,11 +154,6 @@ def scripts(self):\n             result = self.default_resources()\n             result.extend(self.ordered_bundles_result())\n         else:\n-            # Acquire load_async and load_defer bundle options from the plone\n-            # bundle and use it for the ``default`` meta bundle.\n-            bundles = self.get_bundles()\n-            load_async = getattr(bundles.get(\'plone\'), \'load_async\', False)\n-            load_defer = getattr(bundles.get(\'plone\'), \'load_defer\', False)\n             result = [{\n                 \'src\': \'{0}/++plone++{1}\'.format(\n                     self.site_url,\n@@ -166,15 +161,10 @@ def scripts(self):\n                 ),\n                 \'conditionalcomment\': None,\n                 \'bundle\': \'production\',\n-                \'async\': \'async\' if load_async else None,\n-                \'defer\': \'defer\' if load_defer else None\n-            }, ]\n+                \'async\': None,  # Do not load ``async`` or\n+                \'defer\': None   # ``defer`` for production bundles.\n+            }]\n             if not self.anonymous:\n-                # Acquire load_async and load_defer bundle options from the\n-                # plone-logged-in bundle and use it for the ``logged-in`` meta\n-                # bundle.\n-                load_async = getattr(bundles.get(\'plone-logged-in\'), \'load_async\', False)  # noqa\n-                load_defer = getattr(bundles.get(\'plone-logged-in\'), \'load_defer\', False)  # noqa\n                 result.append({\n                     \'src\': \'{0}/++plone++{1}\'.format(\n                         self.site_url,\n@@ -182,8 +172,8 @@ def scripts(self):\n                     ),\n                     \'conditionalcomment\': None,\n                     \'bundle\': \'production\',\n-                    \'async\': \'async\' if load_async else None,\n-                    \'defer\': \'defer\' if load_defer else None\n+                    \'async\': None,  # Do not load ``async`` or\n+                    \'defer\': None   # ``defer`` for production bundles.\n                 })\n             result.extend(self.ordered_bundles_result(production=True))\n \ndiff --git a/Products/CMFPlone/static/plone.js b/Products/CMFPlone/static/plone.js\nindex f89a02a65..f79f1fe81 100644\n--- a/Products/CMFPlone/static/plone.js\n+++ b/Products/CMFPlone/static/plone.js\n@@ -94,6 +94,6 @@ require([\n         var select = $(\'#form-widgets-highpixeldensity_scales\');\n         select.change(autohide_quality_fields);\n     }\n-});\n+  });\n \n });\ndiff --git a/Products/CMFPlone/tests/robot/test_edit_user_schema.robot b/Products/CMFPlone/tests/robot/test_edit_user_schema.robot\nindex 7cde18701..8b2f83210 100644\n--- a/Products/CMFPlone/tests/robot/test_edit_user_schema.robot\n+++ b/Products/CMFPlone/tests/robot/test_edit_user_schema.robot\n@@ -93,9 +93,9 @@ I add a new text field to the member fields\n   Wait until page contains element  css=#add-field\n   Click Button  Add new field\xe2\x80\xa6\n   Wait Until Element Is visible  css=#add-field-form #form-widgets-title\n-  Input Text  css=#add-field-form #form-widgets-title  test_field\n-  Input Text  css=#add-field-form #form-widgets-__name__  test_field\n-  Select From List  css=#form-widgets-factory  Text line (String)\n+  Input Text  css=#add-field-form #form-widgets-title  Test Field\n+  Press Key  css=#add-field-form #form-widgets-title  \\\\09\n+  Select From List By Label  css=#form-widgets-factory  Text line (String)\n   Click button  css=.pattern-modal-buttons input#form-buttons-add\n   # XXX: This is really really bad! We need a UI notification like:\n   # Wait until page contains  Field created.\n@@ -106,9 +106,9 @@ I add a new required text field to the member fields\n   Wait until page contains element  css=#add-field\n   Click Button  Add new field\xe2\x80\xa6\n   Wait Until Element Is visible  css=#add-field-form #form-widgets-title\n-  Input Text  css=#add-field-form #form-widgets-title  test_field\n-  Input Text  css=#add-field-form #form-widgets-__name__  test_field\n-  Select From List  css=#form-widgets-factory  Text line (String)\n+  Input Text  css=#add-field-form #form-widgets-title  Test Field\n+  Press Key  css=#add-field-form #form-widgets-title  \\\\09\n+  Select From List By Label  css=#form-widgets-factory  Text line (String)\n   Select Checkbox  form.widgets.required:list\n   Click button  css=.pattern-modal-buttons input#form-buttons-add\n   # XXX: This is really really bad! We need a UI notification like:\ndiff --git a/Products/CMFPlone/tests/robot/test_querystring.robot b/Products/CMFPlone/tests/robot/test_querystring.robot\nindex f0e18a6a6..f06598d1f 100644\n--- a/Products/CMFPlone/tests/robot/test_querystring.robot\n+++ b/Products/CMFPlone/tests/robot/test_querystring.robot\n@@ -12,55 +12,288 @@ Test Teardown  Run keywords  Plone Test Teardown\n \n *** Test Cases **************************************************************\n \n-Scenario: Location query\n-    [Tags]  unstable\n-    [Documentation]  This sometimes fails with: Element locator \'jquery=:focus\' did not match any elements.\n-    ...              This sometimes fails with: Element locator \'jquery=.pattern-relateditems-tree-select\' did not match any elements.\n+Scenario: Location query Current\n     Given a logged-in site administrator\n     and a bunch of folders\n     and the querystring pattern\n-    When I open the Current operator in the Location criteria\n+    When I activate the operator Current in the criteria Location\n     Then we expect 1 hits\n-    When I open the Parent operator in the Location criteria\n-    Then we expect 3 hits\n-    When I open the Custom operator in the Location criteria\n-    and I search in A subfolder in the related items widget\n+\n+Scenario: Location query Parent\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I activate the operator Parent in the criteria Location\n     Then we expect 3 hits\n-    When I open the Advanced operator in the Location criteria\n+\n+Scenario: Location query Custom\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I activate the operator Custom in the criteria Location\n+    and I search in B subfolder in the related items widget\n+    Then we expect 5 hits\n+\n+Scenario: Location query Advanced\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I activate the operator Advanced in the criteria Location\n     Then I expect to be in Advanced mode\n-    When I open the Simple operator in the Location criteria\n+\n+Scenario: Location query Simple\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I activate the operator Simple in the criteria Location\n     Then I expect to be in Simple mode\n \n+Scenario: Title query\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I open the criteria Title\n+    and I search for A\n+    Then we expect 1 hits\n+\n+Scenario: Description query\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I open the criteria Description\n+    and I search for a\n+    Then we expect 1 hits\n+\n+Scenario: Searchable text query\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I open the criteria Searchable text\n+    and I search for a\n+    and Click Element  css=div.querystring-preview\n+    Then we expect 2 hits\n+    When I open the criteria Searchable text\n+    and I search for d\n+    Then we expect 1 hits\n+\n+Scenario: Tag query one\n+    # tests the "Matches any of" option\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I activate the default operator in the criteria Tag\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-o\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-o\n+    Then we expect 4 hits\n+    When I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-n\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-n\n+    Then we expect 4 hits\n+    When I delete my selection\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-p\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-p\n+    Then we expect 1 hits\n+    When I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-e\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-e\n+    Then we expect 2 hits\n+\n+Scenario Tag query two\n+    # tests the "Matches all of" option\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I expect an empty result after open the operator Matches all of in the criteria Tag\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-o\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-o\n+    Then we expect 4 hits\n+    When and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-n\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-n\n+    Then we expect 3 hits\n+    When I delete my selection\n+    and and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-p\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-p\n+    Then we expect 1 hits\n+    When and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-e\n+    and Click Element  css=li.select2-results-dept-0.select2-result.select2-result-selectable.select2-option-e\n+    Then we expect 1 hits\n+\n+\n+Scenario Event end date query\n+    Given a logged-in manager\n+    and a bunch of events\n+    and the querystring pattern\n+    # Before date\n+    When I activate the default operator in the criteria Event end date\n+    and Execute Javascript  $(\'.querystring-criteria-value .pattern-pickadate-date-wrapper > input[type="text"]\').pickadate(\'picker\').set(\'select\', new Date(2018, 7, 1))\n+    Then we do not expect any hits\n+\n+    # When Execute Javascript  $(\'.querystring-criteria-value .pattern-pickadate-date-wrapper > input[type="text"]\').pickadate(\'picker\').set(\'select\', new Date(2018, 7, 6))\n+\n+    # !!! BUG in plone.app.robotframework?\n+    # File "~/.buildout/shared-eggs/plone.app.event-3.2.1-py3.6.egg/plone/app/event/recurrence.py", line 77, in occurrences\n+    #     duration = event_end - event_start\n+    # TypeError: can\'t subtract offset-naive and offset-aware datetimes\n+\n+    # for some reason the timezone is not applied correctly here. this is\n+    # probably a problem with plone.app.robotframework.content creation mechanism.\n+    # actually we got 3 hits, but right would be:\n+    # Then we expect 2 hits\n+    # Between dates\n+    # When I activate the operator Between dates in the criteria Event end date\n+    # and Execute Javascript  $($(\'.querystring-criteria-value .pattern-pickadate-date-wrapper > input[type="text"]\')[0]).pickadate(\'picker\').set(\'select\', new Date(2018, 7, 1))\n+    # and Execute Javascript  $($(\'.querystring-criteria-value .pattern-pickadate-date-wrapper > input[type="text"]\')[1]).pickadate(\'picker\').set(\'select\', new Date(2018, 7, 7))\n+    # Then we expect 3 hits\n+    # When Execute Javascript  $($(\'.querystring-criteria-value .pattern-pickadate-date-wrapper > input[type="text"]\')[0]).pickadate(\'picker\').set(\'select\', new Date(2018, 7, 6))\n+    # and Execute Javascript  $($(\'.querystring-criteria-value .pattern-pickadate-date-wrapper > input[type="text"]\')[1]).pickadate(\'picker\').set(\'select\', new Date(2018, 7, 8))\n+    # Then we expect 2 hits\n+\n+Scenario Short name (id) query\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I open the criteria Short name (id)\n+    And I search for a\n+    Then Page Should Contain  A\n+\n+Scenario Review state query\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I open the criteria Review State\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-private\n+    and Click Element  css=li.select2-option-private\n+    Then we expect 7 hits\n+\n+Scenario Type query\n+    Given a logged-in site administrator\n+    and a bunch of events\n+    and the querystring pattern\n+    When I open the criteria Type\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-event\n+    and Click Element  css=li.select2-option-event\n+    Then we expect 4 hits\n+    When I delete one selection\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-file\n+    and Click Element  css=li.select2-option-file\n+    Then we do not expect any hits\n+    When I delete one selection\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-folder\n+    and Click Element  css=li.select2-option-folder\n+    Then we expect 5 hits\n+    When I delete one selection\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-link\n+    and Click Element  css=li.select2-option-link\n+    Then we expect 1 hits\n+    When I delete one selection\n+    and I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-document\n+    and Click Element  css=li.select2-option-document\n+    Then we expect 2 hits\n+    When I open the Selection Widget\n+    and Wait Until Element Is Visible  css=li.select2-option-link\n+    and Click Element  css=li.select2-option-link\n+    Then we expect 3 hits\n+\n+Scenario Creator query\n+    Given a logged-in site administrator\n+    and a bunch of folders\n+    and the querystring pattern\n+    When I activate the default operator in the criteria Creator\n+    Then we expect 6 hits\n+\n+\n *** Keywords ****************************************************************\n \n+save\n+    Click Link  css=input#form-buttons-save\n+\n the querystring pattern\n     #We go the /a to give more useful query results\n     Go to  ${PLONE_URL}/a/++add++Collection\n     Wait until page contains element  css=.pat-querystring\n     Given querystring pattern loaded\n+    # for some unknown reason unload protection pops up, but only in robot tests\n+    Execute Javascript  $(window).unbind(\'beforeunload\')\n \n querystring pattern loaded\n     Wait For Condition  return window.jQuery(\'.querystring-criteria-remove\').size() > 0\n \n a bunch of folders\n     #We create enough items to give meaningful test results\n-    ${F1}=  Create content  type=Folder  title=A\n-    ${F2}=  Create content  type=Folder  title=B  container=${F1}\n-    ${F3}=  Create content  type=Folder  title=C  container=${F2}\n-    Create content  type=Document  title=D  container=${F3}\n+    ${F1}=  Create content  type=Folder  title=A  description=a  subject=onep\n+    ${F2}=  Create content  type=Folder  title=B  description=b  subject=one  container=${F1}\n+    ${F3}=  Create content  type=Folder  title=C  description=and  subject=on  container=${F2}\n+    Create content  type=Document  title=D  subject=o  container=${F3}\n+    Create content  type=Document  title=E  container=${F3}\n+    Create content  type=Link  title=Link  remoteUrl=/front-page  container=${F3}\n+    [Return]  ${F1}\n \n-I open the ${OPERATOR} operator in the ${CRITERIA} criteria\n+a bunch of events\n+    ${F1}=  a bunch of folders\n+    Create content  type=Event  title=Event1  start=2018-08-01 15:00  end=2018-08-01 17:00  container=${F1}\n+    Create content  type=Event  title=Event2  start=2018-08-05 16:00  end=2018-08-07 11:00  container=${F1}\n+    Create content  type=Event  title=Event3  start=2018-08-05 16:30  open_end-empty-marker=1  container=${F1}\n+    Create content  type=Event  title=Event4  start=2018-08-06  end=2018-08-06  whole_day-empty-marker=1  container=${F1}\n+\n+I activate the default operator in the criteria ${CRITERIA}\n+    open the select box titled index\n+    select index type ${CRITERIA}\n+\n+I activate the operator ${OPERATOR} in the criteria ${CRITERIA}\n     open the select box titled index\n     select index type ${CRITERIA}\n+    mark results\n     open the select box titled operator\n     select index type ${OPERATOR}\n \n+I expect an empty result after open the operator ${OPERATOR} in the criteria ${CRITERIA}\n+    open the select box titled index\n+    select index type ${CRITERIA}\n+    sleep  0.75\n+    Wait for condition  return $("dl.searchResults").length == 0\n+    open the select box titled operator\n+    select index type ${OPERATOR}\n+\n+I open the criteria ${CRITERIA}\n+    open the select box titled index\n+    select index type ${CRITERIA}\n+\n+I search for ${KEYWORD}\n+    Wait Until Element Is Visible  css=input.querystring-criteria-value-StringWidget\n+    Click Element  css=input.querystring-criteria-value-StringWidget\n+    Input Text  css=input.querystring-criteria-value-StringWidget  ${KEYWORD}\n+    Click Element  css=div#content-core\n+\n+I open the Selection Widget\n+    wait until element is visible  css=div.select2-container-multi.querystring-criteria-value-MultipleSelectionWidget\n+    click element  css=div.select2-container-multi.querystring-criteria-value-MultipleSelectionWidget\n+\n+I delete one selection\n+    #deletes one element\n+    Click Element  css=a.select2-search-choice-close\n+\n+I delete my selection\n+    #deletes two elements\n+    Click Element  css=a.select2-search-choice-close\n+    Click Element  css=a.select2-search-choice-close\n+\n I search in ${NAME} subfolder in the related items widget\n-    Click Element  jquery=.pattern-relateditems-tree-select\n-    Wait Until Element Is Visible  jquery=.pat-tree li.jqtree_common:contains("${NAME}") .pattern-relateditems-result-browse\n-    Click Element  jquery=.pat-tree li.jqtree_common:contains("${NAME}") .pattern-relateditems-result-browse\n-    Wait Until Element Is Visible  css=.pattern-relateditems-result-select\n-    Click Element  css=.pattern-relateditems-result-select\n+    mark results\n+    Click Element  css=ul.select2-choices\n+    Wait Until Page Contains  ${NAME}\n+    Click Element  //a[contains(concat(\' \', normalize-space(@class), \' \'), \' pattern-relateditems-result-select \')]//span[contains(text(),\'${NAME}\')]\n \n I expect to be in Advanced mode\n     open the select box titled operator\n@@ -68,8 +301,8 @@ I expect to be in Advanced mode\n     Element Should Contain  jquery=.select2-drop-active[style*="display: block;"]   Absolute Path\n     Element Should Contain  jquery=.select2-drop-active[style*="display: block;"]   Relative Path\n     Element Should Contain  jquery=.select2-drop-active[style*="display: block;"]   Simple Mode\n-    Click Element  css=body\n-    Sleep  1\n+    Click Element  css=div#select2-drop-mask\n+    Wait Until Element Is Not Visible  css=div#select2-drop-mask\n \n I expect to be in Simple mode\n     open the select box titled operator\n@@ -77,7 +310,8 @@ I expect to be in Simple mode\n     Element Should Contain  jquery=.select2-drop-active[style*="display: block;"]   Parent (../)\n     Element Should Contain  jquery=.select2-drop-active[style*="display: block;"]   Current (./)\n     Element Should Contain  jquery=.select2-drop-active[style*="display: block;"]   Advanced Mode\n-    Click Element  css=body\n+    Click Element  css=div#select2-drop-mask\n+    Wait Until Element Is Not Visible  css=div#select2-drop-mask\n \n open the select box titled ${NAME}\n     Click Element  css=body\n@@ -90,6 +324,21 @@ select index type ${INDEX}\n we expect ${NUM} hits\n     #This assumes we have the 2 "Test document" and "Test folder" items from the\n     #robot setup, as well as the 4 additional items from the "a bunch of folders" macro\n-    Sleep   1\n-    ${hits}=    Execute Javascript  return window.jQuery(\'.searchResults > dd\').size().toString();\n-    Should Be Equal     ${hits}     ${NUM}\n+    #works only for ${NUM} > 0\n+    Wait until result is no longer marked\n+    ${hits}=  Execute Javascript  return $(\'.searchResults > dd\').length\n+    Should Be Equal As Integers  ${hits}  ${NUM}\n+    mark results\n+\n+we do not expect any hits\n+    Wait Until Element Contains  css=div#search-results  No results were found.\n+\n+a logged-in manager\n+    Enable autologin as  Manager  Site Administrator  Contributor  Reviewer\n+\n+mark results\n+    Wait for condition  return $("dl.searchResults").length > 0\n+    Execute Javascript  $("dl.searchResults").attr("marker", "marked")\n+\n+wait until result is no longer marked\n+    Wait for condition  return $("dl.searchResults").length > 0 && $("dl.searchResults").attr("marker") != "marked"\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex aef54fb37..393d24b60 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -255,6 +255,10 @@ def test_bundle_defer_async(self):\n         self.assertTrue(\'defer="defer"\' not in view.index(view))\n \n     def test_bundle_defer_async_production(self):\n+        """The default and logged-in production bundles should never be loaded\n+        async or defered.\n+        For bundles to be loaded async or defered, you need to empty merge_with\n+        """\n         registry = getUtility(IRegistry)\n \n         bundles = registry.collectionOfInterface(\n@@ -277,17 +281,20 @@ def test_bundle_defer_async_production(self):\n         self.assertTrue(\'defer="defer"\' not in view.index(view))\n \n         bundles[\'plone\'].load_async = True\n-        bundles[\'plone\'].load_defer = False\n-        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n+        bundles[\'plone\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 0)\n \n-        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].merge_with = \'\'\n+        bundles[\'plone\'].load_async = True\n         bundles[\'plone\'].load_defer = True\n-        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 1)\n \n+        bundles[\'plone\'].merge_with = \'\'\n         bundles[\'plone\'].load_async = True\n         bundles[\'plone\'].load_defer = True\n+        bundles[\'plone-logged-in\'].merge_with = \'\'\n         bundles[\'plone-logged-in\'].load_async = True\n         bundles[\'plone-logged-in\'].load_defer = True\n         self.assertEqual(view.index(view).count(\'async="async"\'), 2)\ndiff --git a/news/2489.feature b/news/2489.feature\nnew file mode 100644\nindex 000000000..465dc5c9c\n--- /dev/null\n+++ b/news/2489.feature\n@@ -0,0 +1,3 @@\n+- New robot tests for querystring in Collection type.\n+  Now almost all querystring types are robot tested.\n+  [llisa123]\n\\ No newline at end of file\ndiff --git a/news/2649.feature b/news/2649.feature\nindex e3ac68ed8..fd1e5d455 100644\n--- a/news/2649.feature\n+++ b/news/2649.feature\n@@ -1,4 +1,6 @@\n - Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.\n   When set, ``<script>`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.\n-  In production mode, the setting from the ``plone`` resp. ``plone-logged-in`` bundles are used for the ``default`` resp. ``logged-in`` meta bundles (``merge_with`` setting). \n+  You also need to empty the ``merge_with`` property of your bundle, because production bundles (``default.js`` and ``logged-in.js``) are never loaded with async or defer.\n+  The default.js includes jQuery and requirejs and those are needed at many places and therefore cannot be loaded asynchronously.\n+  Refs: #2649, #2657.\n   [thet]\ndiff --git a/news/2669.bugfix b/news/2669.bugfix\nnew file mode 100644\nindex 000000000..5e40df9ce\n--- /dev/null\n+++ b/news/2669.bugfix\n@@ -0,0 +1,3 @@\n+Fix robot test test_edit_user_schema:\n+Fieldname was set duplicate (first by JS, then by robot).\n+[jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-12-31T01:56:36+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/dd8e50dcb5db56186f338a9ff36e9b2368d0a049

Merge pull request #2646 from plone/fix_fallback_to_defaultview

Fix Folder layout fallback to default view if not existing

Files changed:
A news/2645.bugfix
M Products/CMFPlone/PloneTool.py

b'diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex bbe7db721..f9503125d 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -688,7 +688,10 @@ def browserDefault(self, obj):\n         else:\n             browserDefault = queryAdapter(obj, IBrowserDefault)\n         if browserDefault is not None:\n-            layout = browserDefault.getLayout()\n+            default_view_fallback = False\n+            if base_hasattr(obj, \'getTypeInfo\'):\n+                default_view_fallback = obj.getTypeInfo().default_view_fallback\n+            layout = browserDefault.getLayout(check_exists=default_view_fallback)\n             if layout is None:\n                 raise AttributeError(\n                     "%s has no assigned layout, perhaps it needs an FTI" % obj)\ndiff --git a/news/2645.bugfix b/news/2645.bugfix\nnew file mode 100644\nindex 000000000..415054689\n--- /dev/null\n+++ b/news/2645.bugfix\n@@ -0,0 +1 @@\n+Fixed fallback to default view when selected layout does not exist for Folder. [gbastien]\n'

