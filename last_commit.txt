Repository: plone.subrequest


Branch: refs/heads/master
Date: 2022-04-04T18:50:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/517d8b8782a8ce568f9f9fc6bfa92b1794214ab2

pyupgrade

Files changed:
M plone/__init__.py
M plone/subrequest/__init__.py
M plone/subrequest/interfaces.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.cfg
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex 6071348..edfd563 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -7,10 +6,10 @@\n from plone.subrequest.interfaces import ISubRequest\n from plone.subrequest.subresponse import SubResponse\n from posixpath import normpath\n-from six.moves import cStringIO as StringIO\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n+from io import StringIO\n+from urllib.parse import unquote\n+from urllib.parse import urljoin\n+from urllib.parse import urlsplit\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.component.hooks import setSite\n@@ -19,28 +18,12 @@\n from zope.interface import alsoProvides\n from ZPublisher.BaseRequest import RequestContainer\n from ZPublisher.mapply import mapply\n+from ZPublisher.WSGIPublisher import dont_publish_class\n+from ZPublisher.WSGIPublisher import missing_name\n+from plone.protect.auto import SAFE_WRITE_KEY\n+from plone.protect.interfaces import IDisableCSRFProtection\n \n import re\n-import six\n-\n-\n-try:\n-    from ZPublisher.WSGIPublisher import dont_publish_class\n-    from ZPublisher.WSGIPublisher import missing_name\n-except ImportError:\n-    from ZPublisher.Publish import dont_publish_class\n-    from ZPublisher.Publish import missing_name\n-\n-try:\n-    from plone.protect.auto import SAFE_WRITE_KEY\n-    from plone.protect.interfaces import IDisableCSRFProtection\n-except ImportError:\n-    SAFE_WRITE_KEY = \'plone.protect.safe_oids\'\n-    from zope.interface import Interface\n-\n-    class IDisableCSRFProtection(Interface):\n-        pass\n-\n \n __all__ = [\'subrequest\', \'SubResponse\']\n \n@@ -54,7 +37,7 @@ class IDisableCSRFProtection(Interface):\n     \'HTTP_RANGE\',  # Not strictly a conditional header, but scrub it anyway\n ]\n \n-OTHER_IGNORE = set([\n+OTHER_IGNORE = {\n     \'ACTUAL_URL\',\n     \'LANGUAGE_TOOL\',\n     \'PARENTS\',\n@@ -69,7 +52,7 @@ class IDisableCSRFProtection(Interface):\n     \'VirtualRootPhysicalPath\',\n     \'method\',\n     \'traverse_subpath\',\n-])\n+}\n \n OTHER_IGNORE_RE = re.compile(r\'^(?:BASE|URL)\\d+$\')\n \n@@ -78,8 +61,6 @@ class IDisableCSRFProtection(Interface):\n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n     assert url is not None, \'You must pass a url\'\n-    if six.PY2 and isinstance(url, six.text_type):\n-        url = url.encode(\'utf-8\')\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n     assert parent_request is not None, \\\n@@ -99,17 +80,17 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n             if root is None:\n                 path = root_path + path\n             else:\n-                path = \'{0}/{1}{2}\'.format(\n+                path = \'{}/{}{}\'.format(\n                     root_path,\n                     root.virtual_url_path(),\n                     path\n                 )\n         elif root is not None:\n-            path = \'/{0}{1}\'.format(root.virtual_url_path(), path)\n+            path = f\'/{root.virtual_url_path()}{path}\'\n     else:\n         try:\n             parent_url = parent_request[\'URL\']\n-            if isinstance(parent_url, six.binary_type):\n+            if isinstance(parent_url, bytes):\n                 parent_url = parent_url.encode(\'utf-8\')\n             # extra is the hidden part of the url, e.g. a default view\n             extra = unquote(\n@@ -167,11 +148,11 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n             for key, value in request.response.cookies.items():\n                 parent_request.response.cookies[key] = value\n         except Exception as e:\n-            logger.exception(u\'Error handling subrequest to {0}\'.format(url))\n+            logger.exception(f\'Error handling subrequest to {url}\')\n             if exception_handler is not None:\n                 exception_handler(response, e)\n             else:\n-                view = queryMultiAdapter((e, request), name=u\'index.html\')\n+                view = queryMultiAdapter((e, request), name=\'index.html\')\n                 if view is not None:\n                     v = view()\n                     response.setBody(v)\ndiff --git a/plone/subrequest/interfaces.py b/plone/subrequest/interfaces.py\nindex 7eccbfb..4bd8f0c 100644\n--- a/plone/subrequest/interfaces.py\n+++ b/plone/subrequest/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n \ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex 220f6e4..9924fb7 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from ZPublisher.HTTPResponse import HTTPResponse\n from ZPublisher.Iterators import IStreamIterator\n \n@@ -43,10 +42,10 @@ def outputBody(self):\n         if not self._wrote:\n             body = self.body\n             if isinstance(self.stdout, io.BufferedIOBase)\\\n-                    and isinstance(body, six.text_type):\n+                    and isinstance(body, str):\n                 body = body.encode(\'utf-8\')\n             elif isinstance(self.stdout, io.TextIOBase)\\\n-                    and isinstance(body, six.binary_type):\n+                    and isinstance(body, bytes):\n                 body = body.decode(\'utf-8\')\n             self.stdout.write(body)\n             self._wrote = 1\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex e954ef8..e3b2e1f 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.localsitemanager import make_site\n from plone.subrequest import subrequest\n from plone.testing import Layer\n@@ -18,7 +17,7 @@ class CustomException(Exception):\n class CustomExceptionHandler(BrowserView):\n     def __call__(self):\n         self.request.response.setStatus(500)\n-        return "Custom exception occurred: {0}".format(self.context)\n+        return f"Custom exception occurred: {self.context}"\n \n \n class CookieView(BrowserView):\n@@ -31,7 +30,7 @@ def __call__(self):\n class ParameterView(BrowserView):\n \n     def __init__(self, context, request):\n-        super(ParameterView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.keys = self.request.keys()\n \n     def __call__(self):\n@@ -68,7 +67,7 @@ def __call__(self):\n class RootView(BrowserView):\n \n     def __call__(self):\n-        return \'Root: {0}\'.format(self.context.absolute_url())\n+        return f\'Root: {self.context.absolute_url()}\'\n \n \n class SubrequestView(BrowserView):\n@@ -169,13 +168,13 @@ def tearDown(self):\n class PloneSubrequestLifecycle(z2.IntegrationTesting):\n \n     def testSetUp(self):\n-        super(PloneSubrequestLifecycle, self).testSetUp()\n+        super().testSetUp()\n         request = self[\'request\']\n         request[\'PARENTS\'] = [self[\'app\']]\n         setRequest(request)\n \n     def testTearDown(self):\n-        super(PloneSubrequestLifecycle, self).testTearDown()\n+        super().testTearDown()\n         setRequest(None)\n \n \ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 4e1d6fa..224b8ef 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.subrequest import subrequest\n from plone.subrequest.testing import FUNCTIONAL_TESTING\n from plone.subrequest.testing import INTEGRATION_TESTING\n@@ -61,7 +60,7 @@ def test_virtual_hosting(self):\n         parts = (\'folder1\', \'folder1A/@@url\')\n         expect = \'folder1A\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = f\'http://nohost/fizz/buzz/fizzbuzz/{expect}\'\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -69,7 +68,7 @@ def test_virtual_hosting_relative(self):\n         parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n         expect = \'folder1A/folder1Ai\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = f\'http://nohost/fizz/buzz/fizzbuzz/{expect}\'\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -77,7 +76,7 @@ def test_virtual_hosting_absolute(self):\n         parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n         expect = \'folder1B\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = f\'http://nohost/fizz/buzz/fizzbuzz/{expect}\'\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -167,7 +166,7 @@ def test_virtual_host_space(self):\n         parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n         url = (\n             \'/VirtualHostBase/http/nohost:80/\'\n-            \'{0}/VirtualHostRoot/{1}\'.format(*parts)\n+            \'{}/VirtualHostRoot/{}\'.format(*parts)\n         )\n         traverse(url)\n         app = self.layer[\'app\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 159397e..b7e8378 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,10 +1,9 @@\n [isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-not_skip=__init__.py\n-\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n \n [bdist_wheel]\ndiff --git a/setup.py b/setup.py\nindex 74ed4a5..decd7b0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2022-04-04T18:51:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/2ce0d065601f2ce1b048cb98826ad024eebdae88

black/isort

Files changed:
M plone/__init__.py
M plone/subrequest/__init__.py
M plone/subrequest/interfaces.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex edfd563..567da8b 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -2,11 +2,13 @@\n from AccessControl import Unauthorized\n from AccessControl.SecurityManagement import setSecurityManager\n from Acquisition import aq_base\n+from io import StringIO\n from logging import getLogger\n+from plone.protect.auto import SAFE_WRITE_KEY\n+from plone.protect.interfaces import IDisableCSRFProtection\n from plone.subrequest.interfaces import ISubRequest\n from plone.subrequest.subresponse import SubResponse\n from posixpath import normpath\n-from io import StringIO\n from urllib.parse import unquote\n from urllib.parse import urljoin\n from urllib.parse import urlsplit\n@@ -20,103 +22,95 @@\n from ZPublisher.mapply import mapply\n from ZPublisher.WSGIPublisher import dont_publish_class\n from ZPublisher.WSGIPublisher import missing_name\n-from plone.protect.auto import SAFE_WRITE_KEY\n-from plone.protect.interfaces import IDisableCSRFProtection\n \n import re\n \n-__all__ = [\'subrequest\', \'SubResponse\']\n+\n+__all__ = ["subrequest", "SubResponse"]\n \n # http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n CONDITIONAL_HEADERS = [\n-    \'HTTP_IF_MODIFIED_SINCE\',\n-    \'HTTP_IF_UNMODIFIED_SINCE\',\n-    \'HTTP_IF_MATCH\',\n-    \'HTTP_IF_NONE_MATCH\',\n-    \'HTTP_IF_RANGE\',\n-    \'HTTP_RANGE\',  # Not strictly a conditional header, but scrub it anyway\n+    "HTTP_IF_MODIFIED_SINCE",\n+    "HTTP_IF_UNMODIFIED_SINCE",\n+    "HTTP_IF_MATCH",\n+    "HTTP_IF_NONE_MATCH",\n+    "HTTP_IF_RANGE",\n+    "HTTP_RANGE",  # Not strictly a conditional header, but scrub it anyway\n ]\n \n OTHER_IGNORE = {\n-    \'ACTUAL_URL\',\n-    \'LANGUAGE_TOOL\',\n-    \'PARENTS\',\n-    \'PARENT_REQUEST\',\n-    \'PUBLISHED\',\n-    \'RESPONSE\',\n-    \'SERVER_URL\',\n-    \'TraversalRequestNameStack\',\n-    \'URL\',\n-    \'VIRTUAL_URL\',\n-    \'VIRTUAL_URL_PARTS\',\n-    \'VirtualRootPhysicalPath\',\n-    \'method\',\n-    \'traverse_subpath\',\n+    "ACTUAL_URL",\n+    "LANGUAGE_TOOL",\n+    "PARENTS",\n+    "PARENT_REQUEST",\n+    "PUBLISHED",\n+    "RESPONSE",\n+    "SERVER_URL",\n+    "TraversalRequestNameStack",\n+    "URL",\n+    "VIRTUAL_URL",\n+    "VIRTUAL_URL_PARTS",\n+    "VirtualRootPhysicalPath",\n+    "method",\n+    "traverse_subpath",\n }\n \n-OTHER_IGNORE_RE = re.compile(r\'^(?:BASE|URL)\\d+$\')\n+OTHER_IGNORE_RE = re.compile(r"^(?:BASE|URL)\\d+$")\n \n-logger = getLogger(\'plone.subrequest\')\n+logger = getLogger("plone.subrequest")\n \n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n-    assert url is not None, \'You must pass a url\'\n+    assert url is not None, "You must pass a url"\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n-    assert parent_request is not None, \\\n-        \'Unable to get request, perhaps zope.globalrequest is not configured.\'\n+    assert (\n+        parent_request is not None\n+    ), "Unable to get request, perhaps zope.globalrequest is not configured."\n     parent_site = getSite()\n     security_manager = getSecurityManager()\n     parent_app = parent_request.PARENTS[-1]\n-    if path.startswith(\'/\'):\n+    if path.startswith("/"):\n         path = normpath(path)\n-        vurl_parts = parent_request.get(\'VIRTUAL_URL_PARTS\')\n+        vurl_parts = parent_request.get("VIRTUAL_URL_PARTS")\n         if vurl_parts is not None:\n             # Use the virtual host root\n             path_past_root = unquote(vurl_parts[-1])\n-            root_path = normpath(\n-                parent_request[\'PATH_INFO\']\n-            ).rstrip(\'/\')[:-len(path_past_root) or None]\n+            root_path = normpath(parent_request["PATH_INFO"]).rstrip("/")[\n+                : -len(path_past_root) or None\n+            ]\n             if root is None:\n                 path = root_path + path\n             else:\n-                path = \'{}/{}{}\'.format(\n-                    root_path,\n-                    root.virtual_url_path(),\n-                    path\n-                )\n+                path = "{}/{}{}".format(root_path, root.virtual_url_path(), path)\n         elif root is not None:\n-            path = f\'/{root.virtual_url_path()}{path}\'\n+            path = f"/{root.virtual_url_path()}{path}"\n     else:\n         try:\n-            parent_url = parent_request[\'URL\']\n+            parent_url = parent_request["URL"]\n             if isinstance(parent_url, bytes):\n-                parent_url = parent_url.encode(\'utf-8\')\n+                parent_url = parent_url.encode("utf-8")\n             # extra is the hidden part of the url, e.g. a default view\n-            extra = unquote(\n-                parent_url[len(parent_request[\'ACTUAL_URL\']):]\n-            )\n+            extra = unquote(parent_url[len(parent_request["ACTUAL_URL"]) :])\n         except KeyError:\n-            extra = \'\'\n-        here = parent_request[\'PATH_INFO\'] + extra\n+            extra = ""\n+        here = parent_request["PATH_INFO"] + extra\n         path = urljoin(here, path)\n         path = normpath(path)\n     request = parent_request.clone()\n     for name, parent_value in parent_request.other.items():\n-        if name in OTHER_IGNORE \\\n-           or OTHER_IGNORE_RE.match(name) \\\n-           or name.startswith(\'_\'):\n+        if name in OTHER_IGNORE or OTHER_IGNORE_RE.match(name) or name.startswith("_"):\n             continue\n         request.other[name] = parent_value\n     for key, value in parent_request.response.cookies.items():\n-        request.cookies[key] = value[\'value\']\n-    request[\'PARENT_REQUEST\'] = parent_request\n+        request.cookies[key] = value["value"]\n+    request["PARENT_REQUEST"] = parent_request\n     alsoProvides(request, ISubRequest)\n     try:\n         setRequest(request)\n         request_container = RequestContainer(REQUEST=request)\n         app = aq_base(parent_app).__of__(request_container)\n-        request[\'PARENTS\'] = [app]\n+        request["PARENTS"] = [app]\n         response = request.response\n         response.__class__ = SubResponse\n         response.stderr = None  # only used on retry it seems\n@@ -124,8 +118,8 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n             stdout = StringIO()  # It might be possible to optimize this\n         response.stdout = stdout\n         environ = request.environ\n-        environ[\'PATH_INFO\'] = path\n-        environ[\'QUERY_STRING\'] = query\n+        environ["PATH_INFO"] = path\n+        environ["QUERY_STRING"] = query\n         # Clean up the request.\n         for header in CONDITIONAL_HEADERS:\n             environ.pop(header, None)\n@@ -141,18 +135,18 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n                 missing_name=missing_name,\n                 handle_class=dont_publish_class,\n                 context=request,\n-                bind=1\n+                bind=1,\n             )\n             if result is not response:\n                 response.setBody(result)\n             for key, value in request.response.cookies.items():\n                 parent_request.response.cookies[key] = value\n         except Exception as e:\n-            logger.exception(f\'Error handling subrequest to {url}\')\n+            logger.exception(f"Error handling subrequest to {url}")\n             if exception_handler is not None:\n                 exception_handler(response, e)\n             else:\n-                view = queryMultiAdapter((e, request), name=\'index.html\')\n+                view = queryMultiAdapter((e, request), name="index.html")\n                 if view is not None:\n                     v = view()\n                     response.setBody(v)\n@@ -164,9 +158,8 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n             # append this list of safe oids to parent request\n             if SAFE_WRITE_KEY not in parent_request.environ:\n                 parent_request.environ[SAFE_WRITE_KEY] = []\n-            new_keys = (\n-                set(request.environ[SAFE_WRITE_KEY]) -\n-                set(parent_request.environ[SAFE_WRITE_KEY])\n+            new_keys = set(request.environ[SAFE_WRITE_KEY]) - set(\n+                parent_request.environ[SAFE_WRITE_KEY]\n             )\n             parent_request.environ[SAFE_WRITE_KEY].extend(new_keys)\n         if IDisableCSRFProtection.providedBy(request):\ndiff --git a/plone/subrequest/interfaces.py b/plone/subrequest/interfaces.py\nindex 4bd8f0c..72fb8b6 100644\n--- a/plone/subrequest/interfaces.py\n+++ b/plone/subrequest/interfaces.py\n@@ -2,5 +2,4 @@\n \n \n class ISubRequest(IBrowserRequest):\n-    """Marker for sub-requests.\n-    """\n+    """Marker for sub-requests."""\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex 9924fb7..b6bd01b 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -8,22 +8,20 @@\n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n except ImportError:\n+\n     class BlobStreamIterator:\n         pass\n \n \n class SubResponse(HTTPResponse):\n-\n-    def setBody(self, body, title=\'\', is_error=0, **kw):\n+    def setBody(self, body, title="", is_error=0, **kw):\n         """Accept either a stream iterator or a string as the body."""\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n         if isinstance(body, BlobStreamIterator):\n             body = body.blob  # A BlobFile\n-        if hasattr(body, \'seek\') \\\n-           and hasattr(body, \'read\') and \\\n-           hasattr(body, \'close\'):\n+        if hasattr(body, "seek") and hasattr(body, "read") and hasattr(body, "close"):\n             self.stdout = body\n             self._wrote = 1\n             return\n@@ -41,12 +39,10 @@ def outputBody(self):\n         """Output the response body."""\n         if not self._wrote:\n             body = self.body\n-            if isinstance(self.stdout, io.BufferedIOBase)\\\n-                    and isinstance(body, str):\n-                body = body.encode(\'utf-8\')\n-            elif isinstance(self.stdout, io.TextIOBase)\\\n-                    and isinstance(body, bytes):\n-                body = body.decode(\'utf-8\')\n+            if isinstance(self.stdout, io.BufferedIOBase) and isinstance(body, str):\n+                body = body.encode("utf-8")\n+            elif isinstance(self.stdout, io.TextIOBase) and isinstance(body, bytes):\n+                body = body.decode("utf-8")\n             self.stdout.write(body)\n             self._wrote = 1\n \n@@ -56,7 +52,7 @@ def getBody(self):\n             return self.body\n         stdout = self.stdout\n         try:\n-            if hasattr(stdout, \'getvalue\'):\n+            if hasattr(stdout, "getvalue"):\n                 return stdout.getvalue()\n             else:\n                 stdout.seek(0, 0)\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex e3b2e1f..8f75c51 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -21,14 +21,12 @@ def __call__(self):\n \n \n class CookieView(BrowserView):\n-\n     def __call__(self):\n         response = self.request.response\n-        response.setCookie(\'cookie_name\', \'cookie_value\')\n+        response.setCookie("cookie_name", "cookie_value")\n \n \n class ParameterView(BrowserView):\n-\n     def __init__(self, context, request):\n         super().__init__(context, request)\n         self.keys = self.request.keys()\n@@ -38,74 +36,68 @@ def __call__(self):\n \n \n class URLView(BrowserView):\n-\n     def __call__(self):\n         url = self.context.absolute_url()\n         return url\n \n \n class ResponseWriteView(BrowserView):\n-\n     def __call__(self):\n         response = self.request.response\n-        response.write(\'Some data.\\n\')\n-        response.write(\'Some more data.\\n\')\n+        response.write("Some data.\\n")\n+        response.write("Some more data.\\n")\n \n \n class ErrorView(BrowserView):\n-\n     def __call__(self):\n-        raise Exception(\'An error\')\n+        raise Exception("An error")\n \n \n class CustomErrorView(BrowserView):\n-\n     def __call__(self):\n-        raise CustomException(\'A custom error\')\n+        raise CustomException("A custom error")\n \n \n class RootView(BrowserView):\n-\n     def __call__(self):\n-        return f\'Root: {self.context.absolute_url()}\'\n+        return f"Root: {self.context.absolute_url()}"\n \n \n class SubrequestView(BrowserView):\n-\n     def __call__(self):\n-        url = self.request.form.get(\'url\')\n+        url = self.request.form.get("url")\n         if url is None:\n-            return \'Expected a url\'\n+            return "Expected a url"\n         response = subrequest(url)\n         return response.body\n \n \n class StreamIteratorView(BrowserView):\n-\n     def __call__(self):\n         from ZServer.tests.test_responses import test_streamiterator\n+\n         response = self.request.response\n-        response.setHeader(\'content-length\', 5)\n+        response.setHeader("content-length", 5)\n         return test_streamiterator()\n \n \n class FileStreamIteratorView(BrowserView):\n-\n     def __call__(self):\n-        from ZPublisher.Iterators import filestream_iterator\n         from pkg_resources import resource_filename\n-        filename = resource_filename(\'plone.subrequest\', \'testfile.txt\')\n+        from ZPublisher.Iterators import filestream_iterator\n+\n+        filename = resource_filename("plone.subrequest", "testfile.txt")\n         return filestream_iterator(filename)\n \n \n class BlobStreamIteratorView(BrowserView):\n-\n     def __call__(self):\n-        from ZODB.blob import Blob\n         from plone.app.blob.iterators import BlobStreamIterator\n+        from ZODB.blob import Blob\n+\n         myblob = Blob()\n-        with myblob.open(\'w\') as fd:\n-            fd.write(\'Hi, Blob!\')\n+        with myblob.open("w") as fd:\n+            fd.write("Hi, Blob!")\n         return BlobStreamIterator(myblob)\n \n \n@@ -119,58 +111,58 @@ class PLONE_SUBREQEST_FIXTURE(Layer):\n \n     def setUp(self):\n         # Stack a new DemoStorage on top of the one from z2.STARTUP.\n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'PloneSubRequestFixture\'\n+        self["zodbDB"] = zodb.stackDemoStorage(\n+            self.get("zodbDB"), name="PloneSubRequestFixture"\n         )\n \n         # Create a new global registry\n         zca.pushGlobalRegistry()\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n \n         # Load out ZCML\n         from zope.configuration import xmlconfig\n+\n         import plone.subrequest\n-        xmlconfig.file(\'testing.zcml\', plone.subrequest, context=context)\n+\n+        xmlconfig.file("testing.zcml", plone.subrequest, context=context)\n \n         with z2.zopeApp() as app:\n             # Enable virtual hosting\n-            z2.installProduct(app, \'Products.SiteAccess\')\n-            from Products.SiteAccess.VirtualHostMonster import \\\n-                VirtualHostMonster\n+            z2.installProduct(app, "Products.SiteAccess")\n+            from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n+\n             vhm = VirtualHostMonster()\n             app._setObject(vhm.getId(), vhm, suppress_events=True)\n             # With suppress_events=False, this is called twice...\n             vhm.manage_afterAdd(vhm, app)\n             # Setup default content\n-            app.manage_addFolder(\'folder1\')\n+            app.manage_addFolder("folder1")\n             make_site(app.folder1)\n-            app.folder1.manage_addFolder(\'folder1A\')\n-            app.folder1.folder1A.manage_addFolder(\'folder1Ai\')\n-            app.folder1.manage_addFolder(\'folder1B\')\n-            app.manage_addFolder(\'folder2\')\n+            app.folder1.manage_addFolder("folder1A")\n+            app.folder1.folder1A.manage_addFolder("folder1Ai")\n+            app.folder1.manage_addFolder("folder1B")\n+            app.manage_addFolder("folder2")\n             make_site(app.folder2)\n-            app.folder2.manage_addFolder(\'folder2A\')\n-            app.folder2.folder2A.manage_addFolder(\'folder2Ai space\')\n+            app.folder2.manage_addFolder("folder2A")\n+            app.folder2.folder2A.manage_addFolder("folder2Ai space")\n \n     def tearDown(self):\n         # Zap the stacked configuration context\n         zca.popGlobalRegistry()\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n         # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n \n class PloneSubrequestLifecycle(z2.IntegrationTesting):\n-\n     def testSetUp(self):\n         super().testSetUp()\n-        request = self[\'request\']\n-        request[\'PARENTS\'] = [self[\'app\']]\n+        request = self["request"]\n+        request["PARENTS"] = [self["app"]]\n         setRequest(request)\n \n     def testTearDown(self):\n@@ -179,10 +171,8 @@ def testTearDown(self):\n \n \n INTEGRATION_TESTING = PloneSubrequestLifecycle(\n-    bases=(PLONE_SUBREQEST_FIXTURE,),\n-    name=\'PloneSubrequest:Integration\'\n+    bases=(PLONE_SUBREQEST_FIXTURE,), name="PloneSubrequest:Integration"\n )\n FUNCTIONAL_TESTING = z2.FunctionalTesting(\n-    bases=(PLONE_SUBREQEST_FIXTURE,),\n-    name=\'PloneSubrequest:Functional\'\n+    bases=(PLONE_SUBREQEST_FIXTURE,), name="PloneSubrequest:Functional"\n )\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 224b8ef..1a40783 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -2,14 +2,13 @@\n from plone.subrequest.testing import FUNCTIONAL_TESTING\n from plone.subrequest.testing import INTEGRATION_TESTING\n from plone.testing import z2\n-from zope.globalrequest import getRequest\n from zope.component.hooks import getSite\n+from zope.globalrequest import getRequest\n \n+import doctest\n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n-\n-import doctest\n import re\n import six\n import unittest\n@@ -35,48 +34,48 @@ def traverse(url):\n     request = getRequest()\n     request.traverse(url)\n     request.processInputs()\n-    request[\'PATH_INFO\'] = url\n+    request["PATH_INFO"] = url\n     return request\n \n \n VH_TPL = (\n-    \'/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot\'\n-    \'/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}\'\n+    "/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot"\n+    "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}"\n )\n-NOHOST_VH_TPL = \'http://nohost\' + VH_TPL\n+NOHOST_VH_TPL = "http://nohost" + VH_TPL\n \n \n class FunctionalTests(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.browser = z2.Browser(self.layer[\'app\'])\n+        self.browser = z2.Browser(self.layer["app"])\n \n     def test_absolute(self):\n-        self.browser.open(\'http://nohost/folder1/@@url\')\n-        self.assertEqual(self.browser.contents, \'http://nohost/folder1\')\n+        self.browser.open("http://nohost/folder1/@@url")\n+        self.assertEqual(self.browser.contents, "http://nohost/folder1")\n \n     def test_virtual_hosting(self):\n-        parts = (\'folder1\', \'folder1A/@@url\')\n-        expect = \'folder1A\'\n+        parts = ("folder1", "folder1A/@@url")\n+        expect = "folder1A"\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = f\'http://nohost/fizz/buzz/fizzbuzz/{expect}\'\n+        expect_url = f"http://nohost/fizz/buzz/fizzbuzz/{expect}"\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n     def test_virtual_hosting_relative(self):\n-        parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n-        expect = \'folder1A/folder1Ai\'\n+        parts = ("folder1", "folder1A?url=folder1Ai/@@url")\n+        expect = "folder1A/folder1Ai"\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = f\'http://nohost/fizz/buzz/fizzbuzz/{expect}\'\n+        expect_url = f"http://nohost/fizz/buzz/fizzbuzz/{expect}"\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n     def test_virtual_hosting_absolute(self):\n-        parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n-        expect = \'folder1B\'\n+        parts = ("folder1", "folder1A?url=/folder1B/@@url")\n+        expect = "folder1B"\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = f\'http://nohost/fizz/buzz/fizzbuzz/{expect}\'\n+        expect_url = f"http://nohost/fizz/buzz/fizzbuzz/{expect}"\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -85,199 +84,158 @@ class IntegrationTests(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def test_absolute(self):\n-        response = subrequest(\'/folder1/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder1\'\n-        )\n+        response = subrequest("/folder1/@@url")\n+        self.assertEqual(response.body, b"http://nohost/folder1")\n \n     def test_absolute_query(self):\n-        response = subrequest(\'/folder1/folder1A?url=/folder2/folder2A/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder2/folder2A\'\n-        )\n+        response = subrequest("/folder1/folder1A?url=/folder2/folder2A/@@url")\n+        self.assertEqual(response.body, b"http://nohost/folder2/folder2A")\n \n     def test_relative(self):\n-        response = subrequest(\'/folder1?url=folder1B/@@url\')\n+        response = subrequest("/folder1?url=folder1B/@@url")\n         # /folder1 resolves to /folder1/@@test\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder1/folder1B\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/folder1/folder1B")\n \n     def test_root(self):\n-        response = subrequest(\'/\')\n-        self.assertEqual(\n-            response.body,\n-            b\'Root: http://nohost\'\n-        )\n+        response = subrequest("/")\n+        self.assertEqual(response.body, b"Root: http://nohost")\n \n     def test_virtual_hosting(self):\n-        url = VH_TPL.format(\'folder1\', \'folder1A/@@url\')\n+        url = VH_TPL.format("folder1", "folder1A/@@url")\n         response = subrequest(url)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1A")\n \n     def test_virtual_hosting_unicode(self):\n-        url = VH_TPL.format(\'folder1\', \'folder1A/@@url\')\n+        url = VH_TPL.format("folder1", "folder1A/@@url")\n         response = subrequest(url)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1A")\n \n     def test_virtual_hosting_relative(self):\n-        url = VH_TPL.format(\'folder1\', \'folder1A?url=folder1B/@@url\')\n+        url = VH_TPL.format("folder1", "folder1A?url=folder1B/@@url")\n         response = subrequest(url)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_not_found(self):\n-        response = subrequest(\'/notfound\')\n+        response = subrequest("/notfound")\n         self.assertEqual(response.status, 404)\n \n     def test_virtual_host_root(self):\n-        parts = (\'folder1\', \'folder1A/@@url\')\n+        parts = ("folder1", "folder1A/@@url")\n         url = VH_TPL.format(*parts)\n         traverse(url)\n-        response = subrequest(\'/folder1B/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        response = subrequest("/folder1B/@@url")\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_virtual_host_root_with_root(self):\n-        parts = (\'folder1\', \'folder1A/@@url\')\n+        parts = ("folder1", "folder1A/@@url")\n         url = VH_TPL.format(*parts)\n         traverse(url)\n-        app = self.layer[\'app\']\n-        response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n+        app = self.layer["app"]\n+        response = subrequest("/folder1Ai/@@url", root=app.folder1.folder1A)\n         self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai"\n         )\n \n     def test_virtual_host_space(self):\n-        parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n-        url = (\n-            \'/VirtualHostBase/http/nohost:80/\'\n-            \'{}/VirtualHostRoot/{}\'.format(*parts)\n-        )\n+        parts = ("folder2", "folder2A/folder2Ai space/@@url")\n+        url = "/VirtualHostBase/http/nohost:80/" "{}/VirtualHostRoot/{}".format(*parts)\n         traverse(url)\n-        app = self.layer[\'app\']\n-        response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder2A\'\n-        )\n+        app = self.layer["app"]\n+        response = subrequest("/folder2A/@@url", root=app.folder2)\n+        self.assertEqual(response.body, b"http://nohost/folder2A")\n \n     def test_virtual_host_root_at_root(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n-            \'_vh_fizz/_vh_buzz/_vh_fizzbuzz\'\n+            "/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/"\n+            "_vh_fizz/_vh_buzz/_vh_fizzbuzz"\n         )\n         traverse(url)\n-        response = subrequest(\'/folder1B/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        response = subrequest("/folder1B/@@url")\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_virtual_host_root_at_root_trailing(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n-            \'_vh_fizz/_vh_buzz/_vh_fizzbuzz/\'\n+            "/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/"\n+            "_vh_fizz/_vh_buzz/_vh_fizzbuzz/"\n         )\n         traverse(url)\n-        response = subrequest(\'/folder1B/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        response = subrequest("/folder1B/@@url")\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_virtual_host_with_root_double_slash(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/VirtualHostRoot/\'\n-            \'_vh_fizz/folder1/folder2//folder2A\'\n+            "/VirtualHostBase/http/nohost:80/VirtualHostRoot/"\n+            "_vh_fizz/folder1/folder2//folder2A"\n         )\n         traverse(url)\n-        root = self.layer[\'app\'].folder1\n-        response = subrequest(\'/folder1B/@@url\', root=root)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/folder1/folder1B\'\n-        )\n+        root = self.layer["app"].folder1\n+        response = subrequest("/folder1B/@@url", root=root)\n+        self.assertEqual(response.body, b"http://nohost/fizz/folder1/folder1B")\n \n     def test_subrequest_root(self):\n-        app = self.layer[\'app\']\n-        response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder1/folder1A/folder1Ai\'\n-        )\n+        app = self.layer["app"]\n+        response = subrequest("/folder1Ai/@@url", root=app.folder1.folder1A)\n+        self.assertEqual(response.body, b"http://nohost/folder1/folder1A/folder1Ai")\n \n     def test_site(self):\n-        traverse(\'/folder1\')\n+        traverse("/folder1")\n         site_url1 = getSite().absolute_url()\n-        response = subrequest(\'/folder2/@@url\')\n+        response = subrequest("/folder2/@@url")\n         self.assertEqual(response.status, 200)\n         site_url2 = getSite().absolute_url()\n         self.assertEqual(site_url1, site_url2)\n \n     def test_parameter(self):\n-        response = subrequest(\'/folder1/@@parameter?foo=bar\')\n-        self.assertTrue(b\'foo\' in response.body)\n+        response = subrequest("/folder1/@@parameter?foo=bar")\n+        self.assertTrue(b"foo" in response.body)\n \n     def test_cookies(self):\n         request = getRequest()\n-        request.response.setCookie(\'cookie_name\', \'cookie_value\')\n-        response = subrequest(\'/folder1/@@parameter\')\n+        request.response.setCookie("cookie_name", "cookie_value")\n+        response = subrequest("/folder1/@@parameter")\n         self.assertTrue(b"\'cookie_name\'" in response.body)\n \n     def test_subrequest_cookies(self):\n-        response = subrequest(\'/folder1/@@test?url=/folder1/cookie\')\n-        self.assertTrue(\'cookie_name\' in response.cookies)\n+        response = subrequest("/folder1/@@test?url=/folder1/cookie")\n+        self.assertTrue("cookie_name" in response.cookies)\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n+    @unittest.skipUnless(HAS_ZSERVER, "needs ZServer")\n     def test_stream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest(\'/@@stream\')\n-        self.assertEqual(response.getBody(), \'hello\')\n+        response = subrequest("/@@stream")\n+        self.assertEqual(response.getBody(), "hello")\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n+    @unittest.skipUnless(HAS_ZSERVER, "needs ZServer")\n     def test_filestream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest(\'/@@filestream\')\n+        response = subrequest("/@@filestream")\n         from ZPublisher.Iterators import filestream_iterator\n+\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n-        self.assertEqual(response.getBody(), \'Test\')\n+        self.assertEqual(response.getBody(), "Test")\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n-    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n+    @unittest.skipUnless(HAS_ZSERVER, "needs ZServer")\n+    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, "requires Archetypes")\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest(\'/@@blobstream\')\n+        response = subrequest("/@@blobstream")\n         from ZODB.blob import BlobFile\n+\n         self.assertTrue(isinstance(response.stdout, BlobFile))\n-        self.assertEqual(response.getBody(), \'Hi, Blob!\')\n+        self.assertEqual(response.getBody(), "Hi, Blob!")\n \n     def test_other_variables(self):\n         request = getRequest()\n-        request[\'foo\'] = \'bar\'\n-        request[\'VIRTUAL_URL\'] = \'parent\'\n-        request[\'URL9\'] = \'parent\'\n-        response = subrequest(\'/folder1/@@parameter\')\n+        request["foo"] = "bar"\n+        request["VIRTUAL_URL"] = "parent"\n+        request["URL9"] = "parent"\n+        response = subrequest("/folder1/@@parameter")\n         self.assertTrue(b"\'foo\'" in response.body)\n         self.assertFalse(b"\'URL9\'" in response.body)\n         self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n@@ -295,13 +253,11 @@ def test_suite():\n     m = manuel.doctest.Manuel(checker=Py23DocChecker())\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n-        m,\n-        \'usage.rst\',\n-        globs=dict(subrequest=subrequest, traverse=traverse)\n-     )\n+        m, "usage.rst", globs=dict(subrequest=subrequest, traverse=traverse)\n+    )\n     # Set the layer on the manuel doctests for now\n     for test in doctests:\n         test.layer = INTEGRATION_TESTING\n-        test.globs[\'layer\'] = INTEGRATION_TESTING\n+        test.globs["layer"] = INTEGRATION_TESTING\n     suite.addTest(doctests)\n     return suite\ndiff --git a/setup.py b/setup.py\nindex decd7b0..93db9c9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,17 +4,19 @@\n import os.path\n \n \n-version = \'1.9.4.dev0\'\n+version = "1.9.4.dev0"\n \n setup(\n-    name=\'plone.subrequest\',\n+    name="plone.subrequest",\n     version=version,\n-    description=\'Subrequests for Zope2\',\n+    description="Subrequests for Zope2",\n     long_description=(\n-        open("README.rst").read() + "\\n\\n" +\n-        open(os.path.join(\'plone\', \'subrequest\', \'usage.rst\')).read() +\n-        "\\n\\n" +\n-        open("CHANGES.rst").read()),\n+        open("README.rst").read()\n+        + "\\n\\n"\n+        + open(os.path.join("plone", "subrequest", "usage.rst")).read()\n+        + "\\n\\n"\n+        + open("CHANGES.rst").read()\n+    ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -32,32 +34,32 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.subrequest/\',\n-    license=\'GPL version 2\',\n+    keywords="plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.subrequest/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n-    platforms=\'Any\',\n+    platforms="Any",\n     zip_safe=False,\n     install_requires=[\n         # \'Acquisition\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.globalrequest\',\n-        ],\n+        "setuptools",\n+        "six",\n+        "zope.globalrequest",\n+    ],\n     extras_require={\n-        \'test\': [\n-            \'five.localsitemanager\',\n-            \'manuel\',\n-            \'plone.testing [z2]\',\n+        "test": [\n+            "five.localsitemanager",\n+            "manuel",\n+            "plone.testing [z2]",\n         ],\n-        \'archetypes\': [\n-            \'plone.app.blob\',\n+        "archetypes": [\n+            "plone.app.blob",\n             # see https://github.com/plone/plone.app.blob/issues/19\n-            \'Products.MimetypesRegistry\',\n+            "Products.MimetypesRegistry",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2022-08-25T18:08:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/870747d80ef5c1acdbcd9da1e9ca1718e55709c8

manual upgrade edits

Files changed:
A news/25.breaking
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.py

b'diff --git a/news/25.breaking b/news/25.breaking\nnew file mode 100644\nindex 0000000..f913908\n--- /dev/null\n+++ b/news/25.breaking\n@@ -0,0 +1,2 @@\n+Drop Python 2 support and update code style.\n+[jensens]\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex b6bd01b..d445f0b 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -2,15 +2,6 @@\n from ZPublisher.Iterators import IStreamIterator\n \n import io\n-import six\n-\n-\n-try:\n-    from plone.app.blob.iterators import BlobStreamIterator\n-except ImportError:\n-\n-    class BlobStreamIterator:\n-        pass\n \n \n class SubResponse(HTTPResponse):\n@@ -19,8 +10,6 @@ def setBody(self, body, title="", is_error=0, **kw):\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n-        if isinstance(body, BlobStreamIterator):\n-            body = body.blob  # A BlobFile\n         if hasattr(body, "seek") and hasattr(body, "read") and hasattr(body, "close"):\n             self.stdout = body\n             self._wrote = 1\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex 8f75c51..9dc4380 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -1,14 +1,12 @@\n from five.localsitemanager import make_site\n from plone.subrequest import subrequest\n from plone.testing import Layer\n-from plone.testing import z2\n from plone.testing import zca\n from plone.testing import zodb\n+from plone.testing import zope\n from Products.Five.browser import BrowserView\n from zope.globalrequest import setRequest\n \n-import six\n-\n \n class CustomException(Exception):\n     """Custom exception"""\n@@ -90,27 +88,16 @@ def __call__(self):\n         return filestream_iterator(filename)\n \n \n-class BlobStreamIteratorView(BrowserView):\n-    def __call__(self):\n-        from plone.app.blob.iterators import BlobStreamIterator\n-        from ZODB.blob import Blob\n-\n-        myblob = Blob()\n-        with myblob.open("w") as fd:\n-            fd.write("Hi, Blob!")\n-        return BlobStreamIterator(myblob)\n-\n-\n def singleton(cls):\n     return cls()\n \n \n @singleton\n class PLONE_SUBREQEST_FIXTURE(Layer):\n-    defaultBases = (z2.STARTUP,)\n+    defaultBases = (zope.STARTUP,)\n \n     def setUp(self):\n-        # Stack a new DemoStorage on top of the one from z2.STARTUP.\n+        # Stack a new DemoStorage on top of the one from zope.STARTUP.\n         self["zodbDB"] = zodb.stackDemoStorage(\n             self.get("zodbDB"), name="PloneSubRequestFixture"\n         )\n@@ -128,9 +115,9 @@ def setUp(self):\n \n         xmlconfig.file("testing.zcml", plone.subrequest, context=context)\n \n-        with z2.zopeApp() as app:\n+        with zope.zopeApp() as app:\n             # Enable virtual hosting\n-            z2.installProduct(app, "Products.SiteAccess")\n+            zope.installProduct(app, "Products.SiteAccess")\n             from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n \n             vhm = VirtualHostMonster()\n@@ -158,7 +145,7 @@ def tearDown(self):\n         del self["zodbDB"]\n \n \n-class PloneSubrequestLifecycle(z2.IntegrationTesting):\n+class PloneSubrequestLifecycle(zope.IntegrationTesting):\n     def testSetUp(self):\n         super().testSetUp()\n         request = self["request"]\n@@ -173,6 +160,6 @@ def testTearDown(self):\n INTEGRATION_TESTING = PloneSubrequestLifecycle(\n     bases=(PLONE_SUBREQEST_FIXTURE,), name="PloneSubrequest:Integration"\n )\n-FUNCTIONAL_TESTING = z2.FunctionalTesting(\n+FUNCTIONAL_TESTING = zope.FunctionalTesting(\n     bases=(PLONE_SUBREQEST_FIXTURE,), name="PloneSubrequest:Functional"\n )\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 1a40783..a607a26 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -1,16 +1,13 @@\n from plone.subrequest import subrequest\n from plone.subrequest.testing import FUNCTIONAL_TESTING\n from plone.subrequest.testing import INTEGRATION_TESTING\n-from plone.testing import z2\n+from plone.testing import zope\n from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n \n-import doctest\n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n-import re\n-import six\n import unittest\n \n \n@@ -22,14 +19,6 @@\n     HAS_ZSERVER = True\n \n \n-try:\n-    from plone.app.blob.iterators import BlobStreamIterator\n-except ImportError:\n-    HAS_BLOBSTREAM_ITERATOR = False\n-else:\n-    HAS_BLOBSTREAM_ITERATOR = True\n-\n-\n def traverse(url):\n     request = getRequest()\n     request.traverse(url)\n@@ -49,7 +38,7 @@ class FunctionalTests(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.browser = z2.Browser(self.layer["app"])\n+        self.browser = zope.Browser(self.layer["app"])\n \n     def test_absolute(self):\n         self.browser.open("http://nohost/folder1/@@url")\n@@ -218,18 +207,6 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), "Test")\n \n-    @unittest.skipUnless(HAS_ZSERVER, "needs ZServer")\n-    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, "requires Archetypes")\n-    def test_blobstream_iterator(self):\n-        # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        request = getRequest()\n-        request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest("/@@blobstream")\n-        from ZODB.blob import BlobFile\n-\n-        self.assertTrue(isinstance(response.stdout, BlobFile))\n-        self.assertEqual(response.getBody(), "Hi, Blob!")\n-\n     def test_other_variables(self):\n         request = getRequest()\n         request["foo"] = "bar"\n@@ -241,16 +218,9 @@ def test_other_variables(self):\n         self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)\n-    m = manuel.doctest.Manuel(checker=Py23DocChecker())\n+    m = manuel.doctest.Manuel()\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n         m, "usage.rst", globs=dict(subrequest=subrequest, traverse=traverse)\ndiff --git a/setup.py b/setup.py\nindex 93db9c9..09554ad 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,7 +4,7 @@\n import os.path\n \n \n-version = "1.9.4.dev0"\n+version = "2.0.0.dev0"\n \n setup(\n     name="plone.subrequest",\n@@ -22,22 +22,22 @@\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "Intended Audience :: Developers",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n     keywords="plone",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n-    url="https://pypi.org/project/plone.subrequest/",\n+    url="https://github.com/plone/plone.subrequest",\n     license="GPL version 2",\n     packages=find_packages(),\n     namespace_packages=["plone"],\n@@ -45,21 +45,14 @@\n     platforms="Any",\n     zip_safe=False,\n     install_requires=[\n-        # \'Acquisition\',\n         "setuptools",\n-        "six",\n         "zope.globalrequest",\n     ],\n     extras_require={\n         "test": [\n             "five.localsitemanager",\n             "manuel",\n-            "plone.testing [z2]",\n-        ],\n-        "archetypes": [\n-            "plone.app.blob",\n-            # see https://github.com/plone/plone.app.blob/issues/19\n-            "Products.MimetypesRegistry",\n+            "plone.testing[zope]",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2022-08-25T19:50:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/cccd15dbe22940015ece377b1290af377f579938

Merge pull request #25 from plone/py3

Py3: upgrade

Files changed:
A news/25.breaking
M plone/__init__.py
M plone/subrequest/__init__.py
M plone/subrequest/interfaces.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.cfg
M setup.py

b'diff --git a/news/25.breaking b/news/25.breaking\nnew file mode 100644\nindex 0000000..f913908\n--- /dev/null\n+++ b/news/25.breaking\n@@ -0,0 +1,2 @@\n+Drop Python 2 support and update code style.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex 6071348..567da8b 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -1,16 +1,17 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from AccessControl.SecurityManagement import setSecurityManager\n from Acquisition import aq_base\n+from io import StringIO\n from logging import getLogger\n+from plone.protect.auto import SAFE_WRITE_KEY\n+from plone.protect.interfaces import IDisableCSRFProtection\n from plone.subrequest.interfaces import ISubRequest\n from plone.subrequest.subresponse import SubResponse\n from posixpath import normpath\n-from six.moves import cStringIO as StringIO\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n+from urllib.parse import unquote\n+from urllib.parse import urljoin\n+from urllib.parse import urlsplit\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.component.hooks import setSite\n@@ -19,123 +20,97 @@\n from zope.interface import alsoProvides\n from ZPublisher.BaseRequest import RequestContainer\n from ZPublisher.mapply import mapply\n+from ZPublisher.WSGIPublisher import dont_publish_class\n+from ZPublisher.WSGIPublisher import missing_name\n \n import re\n-import six\n \n \n-try:\n-    from ZPublisher.WSGIPublisher import dont_publish_class\n-    from ZPublisher.WSGIPublisher import missing_name\n-except ImportError:\n-    from ZPublisher.Publish import dont_publish_class\n-    from ZPublisher.Publish import missing_name\n-\n-try:\n-    from plone.protect.auto import SAFE_WRITE_KEY\n-    from plone.protect.interfaces import IDisableCSRFProtection\n-except ImportError:\n-    SAFE_WRITE_KEY = \'plone.protect.safe_oids\'\n-    from zope.interface import Interface\n-\n-    class IDisableCSRFProtection(Interface):\n-        pass\n-\n-\n-__all__ = [\'subrequest\', \'SubResponse\']\n+__all__ = ["subrequest", "SubResponse"]\n \n # http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n CONDITIONAL_HEADERS = [\n-    \'HTTP_IF_MODIFIED_SINCE\',\n-    \'HTTP_IF_UNMODIFIED_SINCE\',\n-    \'HTTP_IF_MATCH\',\n-    \'HTTP_IF_NONE_MATCH\',\n-    \'HTTP_IF_RANGE\',\n-    \'HTTP_RANGE\',  # Not strictly a conditional header, but scrub it anyway\n+    "HTTP_IF_MODIFIED_SINCE",\n+    "HTTP_IF_UNMODIFIED_SINCE",\n+    "HTTP_IF_MATCH",\n+    "HTTP_IF_NONE_MATCH",\n+    "HTTP_IF_RANGE",\n+    "HTTP_RANGE",  # Not strictly a conditional header, but scrub it anyway\n ]\n \n-OTHER_IGNORE = set([\n-    \'ACTUAL_URL\',\n-    \'LANGUAGE_TOOL\',\n-    \'PARENTS\',\n-    \'PARENT_REQUEST\',\n-    \'PUBLISHED\',\n-    \'RESPONSE\',\n-    \'SERVER_URL\',\n-    \'TraversalRequestNameStack\',\n-    \'URL\',\n-    \'VIRTUAL_URL\',\n-    \'VIRTUAL_URL_PARTS\',\n-    \'VirtualRootPhysicalPath\',\n-    \'method\',\n-    \'traverse_subpath\',\n-])\n+OTHER_IGNORE = {\n+    "ACTUAL_URL",\n+    "LANGUAGE_TOOL",\n+    "PARENTS",\n+    "PARENT_REQUEST",\n+    "PUBLISHED",\n+    "RESPONSE",\n+    "SERVER_URL",\n+    "TraversalRequestNameStack",\n+    "URL",\n+    "VIRTUAL_URL",\n+    "VIRTUAL_URL_PARTS",\n+    "VirtualRootPhysicalPath",\n+    "method",\n+    "traverse_subpath",\n+}\n \n-OTHER_IGNORE_RE = re.compile(r\'^(?:BASE|URL)\\d+$\')\n+OTHER_IGNORE_RE = re.compile(r"^(?:BASE|URL)\\d+$")\n \n-logger = getLogger(\'plone.subrequest\')\n+logger = getLogger("plone.subrequest")\n \n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n-    assert url is not None, \'You must pass a url\'\n-    if six.PY2 and isinstance(url, six.text_type):\n-        url = url.encode(\'utf-8\')\n+    assert url is not None, "You must pass a url"\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n-    assert parent_request is not None, \\\n-        \'Unable to get request, perhaps zope.globalrequest is not configured.\'\n+    assert (\n+        parent_request is not None\n+    ), "Unable to get request, perhaps zope.globalrequest is not configured."\n     parent_site = getSite()\n     security_manager = getSecurityManager()\n     parent_app = parent_request.PARENTS[-1]\n-    if path.startswith(\'/\'):\n+    if path.startswith("/"):\n         path = normpath(path)\n-        vurl_parts = parent_request.get(\'VIRTUAL_URL_PARTS\')\n+        vurl_parts = parent_request.get("VIRTUAL_URL_PARTS")\n         if vurl_parts is not None:\n             # Use the virtual host root\n             path_past_root = unquote(vurl_parts[-1])\n-            root_path = normpath(\n-                parent_request[\'PATH_INFO\']\n-            ).rstrip(\'/\')[:-len(path_past_root) or None]\n+            root_path = normpath(parent_request["PATH_INFO"]).rstrip("/")[\n+                : -len(path_past_root) or None\n+            ]\n             if root is None:\n                 path = root_path + path\n             else:\n-                path = \'{0}/{1}{2}\'.format(\n-                    root_path,\n-                    root.virtual_url_path(),\n-                    path\n-                )\n+                path = "{}/{}{}".format(root_path, root.virtual_url_path(), path)\n         elif root is not None:\n-            path = \'/{0}{1}\'.format(root.virtual_url_path(), path)\n+            path = f"/{root.virtual_url_path()}{path}"\n     else:\n         try:\n-            parent_url = parent_request[\'URL\']\n-            if isinstance(parent_url, six.binary_type):\n-                parent_url = parent_url.encode(\'utf-8\')\n+            parent_url = parent_request["URL"]\n+            if isinstance(parent_url, bytes):\n+                parent_url = parent_url.encode("utf-8")\n             # extra is the hidden part of the url, e.g. a default view\n-            extra = unquote(\n-                parent_url[len(parent_request[\'ACTUAL_URL\']):]\n-            )\n+            extra = unquote(parent_url[len(parent_request["ACTUAL_URL"]) :])\n         except KeyError:\n-            extra = \'\'\n-        here = parent_request[\'PATH_INFO\'] + extra\n+            extra = ""\n+        here = parent_request["PATH_INFO"] + extra\n         path = urljoin(here, path)\n         path = normpath(path)\n     request = parent_request.clone()\n     for name, parent_value in parent_request.other.items():\n-        if name in OTHER_IGNORE \\\n-           or OTHER_IGNORE_RE.match(name) \\\n-           or name.startswith(\'_\'):\n+        if name in OTHER_IGNORE or OTHER_IGNORE_RE.match(name) or name.startswith("_"):\n             continue\n         request.other[name] = parent_value\n     for key, value in parent_request.response.cookies.items():\n-        request.cookies[key] = value[\'value\']\n-    request[\'PARENT_REQUEST\'] = parent_request\n+        request.cookies[key] = value["value"]\n+    request["PARENT_REQUEST"] = parent_request\n     alsoProvides(request, ISubRequest)\n     try:\n         setRequest(request)\n         request_container = RequestContainer(REQUEST=request)\n         app = aq_base(parent_app).__of__(request_container)\n-        request[\'PARENTS\'] = [app]\n+        request["PARENTS"] = [app]\n         response = request.response\n         response.__class__ = SubResponse\n         response.stderr = None  # only used on retry it seems\n@@ -143,8 +118,8 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n             stdout = StringIO()  # It might be possible to optimize this\n         response.stdout = stdout\n         environ = request.environ\n-        environ[\'PATH_INFO\'] = path\n-        environ[\'QUERY_STRING\'] = query\n+        environ["PATH_INFO"] = path\n+        environ["QUERY_STRING"] = query\n         # Clean up the request.\n         for header in CONDITIONAL_HEADERS:\n             environ.pop(header, None)\n@@ -160,18 +135,18 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n                 missing_name=missing_name,\n                 handle_class=dont_publish_class,\n                 context=request,\n-                bind=1\n+                bind=1,\n             )\n             if result is not response:\n                 response.setBody(result)\n             for key, value in request.response.cookies.items():\n                 parent_request.response.cookies[key] = value\n         except Exception as e:\n-            logger.exception(u\'Error handling subrequest to {0}\'.format(url))\n+            logger.exception(f"Error handling subrequest to {url}")\n             if exception_handler is not None:\n                 exception_handler(response, e)\n             else:\n-                view = queryMultiAdapter((e, request), name=u\'index.html\')\n+                view = queryMultiAdapter((e, request), name="index.html")\n                 if view is not None:\n                     v = view()\n                     response.setBody(v)\n@@ -183,9 +158,8 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n             # append this list of safe oids to parent request\n             if SAFE_WRITE_KEY not in parent_request.environ:\n                 parent_request.environ[SAFE_WRITE_KEY] = []\n-            new_keys = (\n-                set(request.environ[SAFE_WRITE_KEY]) -\n-                set(parent_request.environ[SAFE_WRITE_KEY])\n+            new_keys = set(request.environ[SAFE_WRITE_KEY]) - set(\n+                parent_request.environ[SAFE_WRITE_KEY]\n             )\n             parent_request.environ[SAFE_WRITE_KEY].extend(new_keys)\n         if IDisableCSRFProtection.providedBy(request):\ndiff --git a/plone/subrequest/interfaces.py b/plone/subrequest/interfaces.py\nindex 7eccbfb..72fb8b6 100644\n--- a/plone/subrequest/interfaces.py\n+++ b/plone/subrequest/interfaces.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n \n class ISubRequest(IBrowserRequest):\n-    """Marker for sub-requests.\n-    """\n+    """Marker for sub-requests."""\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex 220f6e4..d445f0b 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -1,30 +1,16 @@\n-# -*- coding: utf-8 -*-\n from ZPublisher.HTTPResponse import HTTPResponse\n from ZPublisher.Iterators import IStreamIterator\n \n import io\n-import six\n-\n-\n-try:\n-    from plone.app.blob.iterators import BlobStreamIterator\n-except ImportError:\n-    class BlobStreamIterator:\n-        pass\n \n \n class SubResponse(HTTPResponse):\n-\n-    def setBody(self, body, title=\'\', is_error=0, **kw):\n+    def setBody(self, body, title="", is_error=0, **kw):\n         """Accept either a stream iterator or a string as the body."""\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n-        if isinstance(body, BlobStreamIterator):\n-            body = body.blob  # A BlobFile\n-        if hasattr(body, \'seek\') \\\n-           and hasattr(body, \'read\') and \\\n-           hasattr(body, \'close\'):\n+        if hasattr(body, "seek") and hasattr(body, "read") and hasattr(body, "close"):\n             self.stdout = body\n             self._wrote = 1\n             return\n@@ -42,12 +28,10 @@ def outputBody(self):\n         """Output the response body."""\n         if not self._wrote:\n             body = self.body\n-            if isinstance(self.stdout, io.BufferedIOBase)\\\n-                    and isinstance(body, six.text_type):\n-                body = body.encode(\'utf-8\')\n-            elif isinstance(self.stdout, io.TextIOBase)\\\n-                    and isinstance(body, six.binary_type):\n-                body = body.decode(\'utf-8\')\n+            if isinstance(self.stdout, io.BufferedIOBase) and isinstance(body, str):\n+                body = body.encode("utf-8")\n+            elif isinstance(self.stdout, io.TextIOBase) and isinstance(body, bytes):\n+                body = body.decode("utf-8")\n             self.stdout.write(body)\n             self._wrote = 1\n \n@@ -57,7 +41,7 @@ def getBody(self):\n             return self.body\n         stdout = self.stdout\n         try:\n-            if hasattr(stdout, \'getvalue\'):\n+            if hasattr(stdout, "getvalue"):\n                 return stdout.getvalue()\n             else:\n                 stdout.seek(0, 0)\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex e954ef8..9dc4380 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -1,15 +1,12 @@\n-# -*- coding: utf-8 -*-\n from five.localsitemanager import make_site\n from plone.subrequest import subrequest\n from plone.testing import Layer\n-from plone.testing import z2\n from plone.testing import zca\n from plone.testing import zodb\n+from plone.testing import zope\n from Products.Five.browser import BrowserView\n from zope.globalrequest import setRequest\n \n-import six\n-\n \n class CustomException(Exception):\n     """Custom exception"""\n@@ -18,20 +15,18 @@ class CustomException(Exception):\n class CustomExceptionHandler(BrowserView):\n     def __call__(self):\n         self.request.response.setStatus(500)\n-        return "Custom exception occurred: {0}".format(self.context)\n+        return f"Custom exception occurred: {self.context}"\n \n \n class CookieView(BrowserView):\n-\n     def __call__(self):\n         response = self.request.response\n-        response.setCookie(\'cookie_name\', \'cookie_value\')\n+        response.setCookie("cookie_name", "cookie_value")\n \n \n class ParameterView(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(ParameterView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.keys = self.request.keys()\n \n     def __call__(self):\n@@ -39,75 +34,58 @@ def __call__(self):\n \n \n class URLView(BrowserView):\n-\n     def __call__(self):\n         url = self.context.absolute_url()\n         return url\n \n \n class ResponseWriteView(BrowserView):\n-\n     def __call__(self):\n         response = self.request.response\n-        response.write(\'Some data.\\n\')\n-        response.write(\'Some more data.\\n\')\n+        response.write("Some data.\\n")\n+        response.write("Some more data.\\n")\n \n \n class ErrorView(BrowserView):\n-\n     def __call__(self):\n-        raise Exception(\'An error\')\n+        raise Exception("An error")\n \n \n class CustomErrorView(BrowserView):\n-\n     def __call__(self):\n-        raise CustomException(\'A custom error\')\n+        raise CustomException("A custom error")\n \n \n class RootView(BrowserView):\n-\n     def __call__(self):\n-        return \'Root: {0}\'.format(self.context.absolute_url())\n+        return f"Root: {self.context.absolute_url()}"\n \n \n class SubrequestView(BrowserView):\n-\n     def __call__(self):\n-        url = self.request.form.get(\'url\')\n+        url = self.request.form.get("url")\n         if url is None:\n-            return \'Expected a url\'\n+            return "Expected a url"\n         response = subrequest(url)\n         return response.body\n \n \n class StreamIteratorView(BrowserView):\n-\n     def __call__(self):\n         from ZServer.tests.test_responses import test_streamiterator\n+\n         response = self.request.response\n-        response.setHeader(\'content-length\', 5)\n+        response.setHeader("content-length", 5)\n         return test_streamiterator()\n \n \n class FileStreamIteratorView(BrowserView):\n-\n     def __call__(self):\n-        from ZPublisher.Iterators import filestream_iterator\n         from pkg_resources import resource_filename\n-        filename = resource_filename(\'plone.subrequest\', \'testfile.txt\')\n-        return filestream_iterator(filename)\n-\n-\n-class BlobStreamIteratorView(BrowserView):\n+        from ZPublisher.Iterators import filestream_iterator\n \n-    def __call__(self):\n-        from ZODB.blob import Blob\n-        from plone.app.blob.iterators import BlobStreamIterator\n-        myblob = Blob()\n-        with myblob.open(\'w\') as fd:\n-            fd.write(\'Hi, Blob!\')\n-        return BlobStreamIterator(myblob)\n+        filename = resource_filename("plone.subrequest", "testfile.txt")\n+        return filestream_iterator(filename)\n \n \n def singleton(cls):\n@@ -116,74 +94,72 @@ def singleton(cls):\n \n @singleton\n class PLONE_SUBREQEST_FIXTURE(Layer):\n-    defaultBases = (z2.STARTUP,)\n+    defaultBases = (zope.STARTUP,)\n \n     def setUp(self):\n-        # Stack a new DemoStorage on top of the one from z2.STARTUP.\n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'PloneSubRequestFixture\'\n+        # Stack a new DemoStorage on top of the one from zope.STARTUP.\n+        self["zodbDB"] = zodb.stackDemoStorage(\n+            self.get("zodbDB"), name="PloneSubRequestFixture"\n         )\n \n         # Create a new global registry\n         zca.pushGlobalRegistry()\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n \n         # Load out ZCML\n         from zope.configuration import xmlconfig\n+\n         import plone.subrequest\n-        xmlconfig.file(\'testing.zcml\', plone.subrequest, context=context)\n \n-        with z2.zopeApp() as app:\n+        xmlconfig.file("testing.zcml", plone.subrequest, context=context)\n+\n+        with zope.zopeApp() as app:\n             # Enable virtual hosting\n-            z2.installProduct(app, \'Products.SiteAccess\')\n-            from Products.SiteAccess.VirtualHostMonster import \\\n-                VirtualHostMonster\n+            zope.installProduct(app, "Products.SiteAccess")\n+            from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n+\n             vhm = VirtualHostMonster()\n             app._setObject(vhm.getId(), vhm, suppress_events=True)\n             # With suppress_events=False, this is called twice...\n             vhm.manage_afterAdd(vhm, app)\n             # Setup default content\n-            app.manage_addFolder(\'folder1\')\n+            app.manage_addFolder("folder1")\n             make_site(app.folder1)\n-            app.folder1.manage_addFolder(\'folder1A\')\n-            app.folder1.folder1A.manage_addFolder(\'folder1Ai\')\n-            app.folder1.manage_addFolder(\'folder1B\')\n-            app.manage_addFolder(\'folder2\')\n+            app.folder1.manage_addFolder("folder1A")\n+            app.folder1.folder1A.manage_addFolder("folder1Ai")\n+            app.folder1.manage_addFolder("folder1B")\n+            app.manage_addFolder("folder2")\n             make_site(app.folder2)\n-            app.folder2.manage_addFolder(\'folder2A\')\n-            app.folder2.folder2A.manage_addFolder(\'folder2Ai space\')\n+            app.folder2.manage_addFolder("folder2A")\n+            app.folder2.folder2A.manage_addFolder("folder2Ai space")\n \n     def tearDown(self):\n         # Zap the stacked configuration context\n         zca.popGlobalRegistry()\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n         # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n-\n+        self["zodbDB"].close()\n+        del self["zodbDB"]\n \n-class PloneSubrequestLifecycle(z2.IntegrationTesting):\n \n+class PloneSubrequestLifecycle(zope.IntegrationTesting):\n     def testSetUp(self):\n-        super(PloneSubrequestLifecycle, self).testSetUp()\n-        request = self[\'request\']\n-        request[\'PARENTS\'] = [self[\'app\']]\n+        super().testSetUp()\n+        request = self["request"]\n+        request["PARENTS"] = [self["app"]]\n         setRequest(request)\n \n     def testTearDown(self):\n-        super(PloneSubrequestLifecycle, self).testTearDown()\n+        super().testTearDown()\n         setRequest(None)\n \n \n INTEGRATION_TESTING = PloneSubrequestLifecycle(\n-    bases=(PLONE_SUBREQEST_FIXTURE,),\n-    name=\'PloneSubrequest:Integration\'\n+    bases=(PLONE_SUBREQEST_FIXTURE,), name="PloneSubrequest:Integration"\n )\n-FUNCTIONAL_TESTING = z2.FunctionalTesting(\n-    bases=(PLONE_SUBREQEST_FIXTURE,),\n-    name=\'PloneSubrequest:Functional\'\n+FUNCTIONAL_TESTING = zope.FunctionalTesting(\n+    bases=(PLONE_SUBREQEST_FIXTURE,), name="PloneSubrequest:Functional"\n )\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 4e1d6fa..a607a26 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -1,18 +1,13 @@\n-# -*- coding: utf-8 -*-\n from plone.subrequest import subrequest\n from plone.subrequest.testing import FUNCTIONAL_TESTING\n from plone.subrequest.testing import INTEGRATION_TESTING\n-from plone.testing import z2\n-from zope.globalrequest import getRequest\n+from plone.testing import zope\n from zope.component.hooks import getSite\n+from zope.globalrequest import getRequest\n \n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n-\n-import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -24,60 +19,52 @@\n     HAS_ZSERVER = True\n \n \n-try:\n-    from plone.app.blob.iterators import BlobStreamIterator\n-except ImportError:\n-    HAS_BLOBSTREAM_ITERATOR = False\n-else:\n-    HAS_BLOBSTREAM_ITERATOR = True\n-\n-\n def traverse(url):\n     request = getRequest()\n     request.traverse(url)\n     request.processInputs()\n-    request[\'PATH_INFO\'] = url\n+    request["PATH_INFO"] = url\n     return request\n \n \n VH_TPL = (\n-    \'/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot\'\n-    \'/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}\'\n+    "/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot"\n+    "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}"\n )\n-NOHOST_VH_TPL = \'http://nohost\' + VH_TPL\n+NOHOST_VH_TPL = "http://nohost" + VH_TPL\n \n \n class FunctionalTests(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.browser = z2.Browser(self.layer[\'app\'])\n+        self.browser = zope.Browser(self.layer["app"])\n \n     def test_absolute(self):\n-        self.browser.open(\'http://nohost/folder1/@@url\')\n-        self.assertEqual(self.browser.contents, \'http://nohost/folder1\')\n+        self.browser.open("http://nohost/folder1/@@url")\n+        self.assertEqual(self.browser.contents, "http://nohost/folder1")\n \n     def test_virtual_hosting(self):\n-        parts = (\'folder1\', \'folder1A/@@url\')\n-        expect = \'folder1A\'\n+        parts = ("folder1", "folder1A/@@url")\n+        expect = "folder1A"\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = f"http://nohost/fizz/buzz/fizzbuzz/{expect}"\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n     def test_virtual_hosting_relative(self):\n-        parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n-        expect = \'folder1A/folder1Ai\'\n+        parts = ("folder1", "folder1A?url=folder1Ai/@@url")\n+        expect = "folder1A/folder1Ai"\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = f"http://nohost/fizz/buzz/fizzbuzz/{expect}"\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n     def test_virtual_hosting_absolute(self):\n-        parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n-        expect = \'folder1B\'\n+        parts = ("folder1", "folder1A?url=/folder1B/@@url")\n+        expect = "folder1B"\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = f"http://nohost/fizz/buzz/fizzbuzz/{expect}"\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -86,223 +73,161 @@ class IntegrationTests(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def test_absolute(self):\n-        response = subrequest(\'/folder1/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder1\'\n-        )\n+        response = subrequest("/folder1/@@url")\n+        self.assertEqual(response.body, b"http://nohost/folder1")\n \n     def test_absolute_query(self):\n-        response = subrequest(\'/folder1/folder1A?url=/folder2/folder2A/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder2/folder2A\'\n-        )\n+        response = subrequest("/folder1/folder1A?url=/folder2/folder2A/@@url")\n+        self.assertEqual(response.body, b"http://nohost/folder2/folder2A")\n \n     def test_relative(self):\n-        response = subrequest(\'/folder1?url=folder1B/@@url\')\n+        response = subrequest("/folder1?url=folder1B/@@url")\n         # /folder1 resolves to /folder1/@@test\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder1/folder1B\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/folder1/folder1B")\n \n     def test_root(self):\n-        response = subrequest(\'/\')\n-        self.assertEqual(\n-            response.body,\n-            b\'Root: http://nohost\'\n-        )\n+        response = subrequest("/")\n+        self.assertEqual(response.body, b"Root: http://nohost")\n \n     def test_virtual_hosting(self):\n-        url = VH_TPL.format(\'folder1\', \'folder1A/@@url\')\n+        url = VH_TPL.format("folder1", "folder1A/@@url")\n         response = subrequest(url)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1A")\n \n     def test_virtual_hosting_unicode(self):\n-        url = VH_TPL.format(\'folder1\', \'folder1A/@@url\')\n+        url = VH_TPL.format("folder1", "folder1A/@@url")\n         response = subrequest(url)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1A")\n \n     def test_virtual_hosting_relative(self):\n-        url = VH_TPL.format(\'folder1\', \'folder1A?url=folder1B/@@url\')\n+        url = VH_TPL.format("folder1", "folder1A?url=folder1B/@@url")\n         response = subrequest(url)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_not_found(self):\n-        response = subrequest(\'/notfound\')\n+        response = subrequest("/notfound")\n         self.assertEqual(response.status, 404)\n \n     def test_virtual_host_root(self):\n-        parts = (\'folder1\', \'folder1A/@@url\')\n+        parts = ("folder1", "folder1A/@@url")\n         url = VH_TPL.format(*parts)\n         traverse(url)\n-        response = subrequest(\'/folder1B/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        response = subrequest("/folder1B/@@url")\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_virtual_host_root_with_root(self):\n-        parts = (\'folder1\', \'folder1A/@@url\')\n+        parts = ("folder1", "folder1A/@@url")\n         url = VH_TPL.format(*parts)\n         traverse(url)\n-        app = self.layer[\'app\']\n-        response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n+        app = self.layer["app"]\n+        response = subrequest("/folder1Ai/@@url", root=app.folder1.folder1A)\n         self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai"\n         )\n \n     def test_virtual_host_space(self):\n-        parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n-        url = (\n-            \'/VirtualHostBase/http/nohost:80/\'\n-            \'{0}/VirtualHostRoot/{1}\'.format(*parts)\n-        )\n+        parts = ("folder2", "folder2A/folder2Ai space/@@url")\n+        url = "/VirtualHostBase/http/nohost:80/" "{}/VirtualHostRoot/{}".format(*parts)\n         traverse(url)\n-        app = self.layer[\'app\']\n-        response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder2A\'\n-        )\n+        app = self.layer["app"]\n+        response = subrequest("/folder2A/@@url", root=app.folder2)\n+        self.assertEqual(response.body, b"http://nohost/folder2A")\n \n     def test_virtual_host_root_at_root(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n-            \'_vh_fizz/_vh_buzz/_vh_fizzbuzz\'\n+            "/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/"\n+            "_vh_fizz/_vh_buzz/_vh_fizzbuzz"\n         )\n         traverse(url)\n-        response = subrequest(\'/folder1B/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        response = subrequest("/folder1B/@@url")\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_virtual_host_root_at_root_trailing(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n-            \'_vh_fizz/_vh_buzz/_vh_fizzbuzz/\'\n+            "/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/"\n+            "_vh_fizz/_vh_buzz/_vh_fizzbuzz/"\n         )\n         traverse(url)\n-        response = subrequest(\'/folder1B/@@url\')\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n-        )\n+        response = subrequest("/folder1B/@@url")\n+        self.assertEqual(response.body, b"http://nohost/fizz/buzz/fizzbuzz/folder1B")\n \n     def test_virtual_host_with_root_double_slash(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/VirtualHostRoot/\'\n-            \'_vh_fizz/folder1/folder2//folder2A\'\n+            "/VirtualHostBase/http/nohost:80/VirtualHostRoot/"\n+            "_vh_fizz/folder1/folder2//folder2A"\n         )\n         traverse(url)\n-        root = self.layer[\'app\'].folder1\n-        response = subrequest(\'/folder1B/@@url\', root=root)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/fizz/folder1/folder1B\'\n-        )\n+        root = self.layer["app"].folder1\n+        response = subrequest("/folder1B/@@url", root=root)\n+        self.assertEqual(response.body, b"http://nohost/fizz/folder1/folder1B")\n \n     def test_subrequest_root(self):\n-        app = self.layer[\'app\']\n-        response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n-        self.assertEqual(\n-            response.body,\n-            b\'http://nohost/folder1/folder1A/folder1Ai\'\n-        )\n+        app = self.layer["app"]\n+        response = subrequest("/folder1Ai/@@url", root=app.folder1.folder1A)\n+        self.assertEqual(response.body, b"http://nohost/folder1/folder1A/folder1Ai")\n \n     def test_site(self):\n-        traverse(\'/folder1\')\n+        traverse("/folder1")\n         site_url1 = getSite().absolute_url()\n-        response = subrequest(\'/folder2/@@url\')\n+        response = subrequest("/folder2/@@url")\n         self.assertEqual(response.status, 200)\n         site_url2 = getSite().absolute_url()\n         self.assertEqual(site_url1, site_url2)\n \n     def test_parameter(self):\n-        response = subrequest(\'/folder1/@@parameter?foo=bar\')\n-        self.assertTrue(b\'foo\' in response.body)\n+        response = subrequest("/folder1/@@parameter?foo=bar")\n+        self.assertTrue(b"foo" in response.body)\n \n     def test_cookies(self):\n         request = getRequest()\n-        request.response.setCookie(\'cookie_name\', \'cookie_value\')\n-        response = subrequest(\'/folder1/@@parameter\')\n+        request.response.setCookie("cookie_name", "cookie_value")\n+        response = subrequest("/folder1/@@parameter")\n         self.assertTrue(b"\'cookie_name\'" in response.body)\n \n     def test_subrequest_cookies(self):\n-        response = subrequest(\'/folder1/@@test?url=/folder1/cookie\')\n-        self.assertTrue(\'cookie_name\' in response.cookies)\n+        response = subrequest("/folder1/@@test?url=/folder1/cookie")\n+        self.assertTrue("cookie_name" in response.cookies)\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n+    @unittest.skipUnless(HAS_ZSERVER, "needs ZServer")\n     def test_stream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest(\'/@@stream\')\n-        self.assertEqual(response.getBody(), \'hello\')\n+        response = subrequest("/@@stream")\n+        self.assertEqual(response.getBody(), "hello")\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n+    @unittest.skipUnless(HAS_ZSERVER, "needs ZServer")\n     def test_filestream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest(\'/@@filestream\')\n+        response = subrequest("/@@filestream")\n         from ZPublisher.Iterators import filestream_iterator\n-        self.assertTrue(isinstance(response.stdout, filestream_iterator))\n-        self.assertEqual(response.getBody(), \'Test\')\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n-    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n-    def test_blobstream_iterator(self):\n-        # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        request = getRequest()\n-        request.response.__class__ = ZServerHTTPResponse\n-        response = subrequest(\'/@@blobstream\')\n-        from ZODB.blob import BlobFile\n-        self.assertTrue(isinstance(response.stdout, BlobFile))\n-        self.assertEqual(response.getBody(), \'Hi, Blob!\')\n+        self.assertTrue(isinstance(response.stdout, filestream_iterator))\n+        self.assertEqual(response.getBody(), "Test")\n \n     def test_other_variables(self):\n         request = getRequest()\n-        request[\'foo\'] = \'bar\'\n-        request[\'VIRTUAL_URL\'] = \'parent\'\n-        request[\'URL9\'] = \'parent\'\n-        response = subrequest(\'/folder1/@@parameter\')\n+        request["foo"] = "bar"\n+        request["VIRTUAL_URL"] = "parent"\n+        request["URL9"] = "parent"\n+        response = subrequest("/folder1/@@parameter")\n         self.assertTrue(b"\'foo\'" in response.body)\n         self.assertFalse(b"\'URL9\'" in response.body)\n         self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)\n-    m = manuel.doctest.Manuel(checker=Py23DocChecker())\n+    m = manuel.doctest.Manuel()\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n-        m,\n-        \'usage.rst\',\n-        globs=dict(subrequest=subrequest, traverse=traverse)\n-     )\n+        m, "usage.rst", globs=dict(subrequest=subrequest, traverse=traverse)\n+    )\n     # Set the layer on the manuel doctests for now\n     for test in doctests:\n         test.layer = INTEGRATION_TESTING\n-        test.globs[\'layer\'] = INTEGRATION_TESTING\n+        test.globs["layer"] = INTEGRATION_TESTING\n     suite.addTest(doctests)\n     return suite\ndiff --git a/setup.cfg b/setup.cfg\nindex 159397e..b7e8378 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,10 +1,9 @@\n [isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-not_skip=__init__.py\n-\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n \n [bdist_wheel]\ndiff --git a/setup.py b/setup.py\nindex 74ed4a5..09554ad 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,64 +1,58 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os.path\n \n \n-version = \'1.9.4.dev0\'\n+version = "2.0.0.dev0"\n \n setup(\n-    name=\'plone.subrequest\',\n+    name="plone.subrequest",\n     version=version,\n-    description=\'Subrequests for Zope2\',\n+    description="Subrequests for Zope2",\n     long_description=(\n-        open("README.rst").read() + "\\n\\n" +\n-        open(os.path.join(\'plone\', \'subrequest\', \'usage.rst\')).read() +\n-        "\\n\\n" +\n-        open("CHANGES.rst").read()),\n+        open("README.rst").read()\n+        + "\\n\\n"\n+        + open(os.path.join("plone", "subrequest", "usage.rst")).read()\n+        + "\\n\\n"\n+        + open("CHANGES.rst").read()\n+    ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "Intended Audience :: Developers",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.subrequest/\',\n-    license=\'GPL version 2\',\n+    keywords="plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.subrequest",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n-    platforms=\'Any\',\n+    platforms="Any",\n     zip_safe=False,\n     install_requires=[\n-        # \'Acquisition\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.globalrequest\',\n-        ],\n+        "setuptools",\n+        "zope.globalrequest",\n+    ],\n     extras_require={\n-        \'test\': [\n-            \'five.localsitemanager\',\n-            \'manuel\',\n-            \'plone.testing [z2]\',\n-        ],\n-        \'archetypes\': [\n-            \'plone.app.blob\',\n-            # see https://github.com/plone/plone.app.blob/issues/19\n-            \'Products.MimetypesRegistry\',\n+        "test": [\n+            "five.localsitemanager",\n+            "manuel",\n+            "plone.testing[zope]",\n         ],\n     },\n     entry_points="""\n'

