Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2017-06-08T12:01:42+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/aea91f19a2b97b60b7a3285061067dcffd2f4c19

add custom widget for URL of link content type

Files changed:
A plone/app/contenttypes/browser/templates/link_input.pt
A plone/app/contenttypes/browser/widgets.py
M CHANGES.rst
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/schema/link.xml
M plone/app/contenttypes/tests/test_link.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e19f0381..3551e0f4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- New widget for `remoteURL` of Link content type.
+  [tomgross]
 
 Bug fixes:
 
diff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml
index 2b5e5e9a..81cdc744 100644
--- a/plone/app/contenttypes/browser/configure.zcml
+++ b/plone/app/contenttypes/browser/configure.zcml
@@ -1,11 +1,12 @@
 <configure
   xmlns="http://namespaces.zope.org/zope"
   xmlns:browser="http://namespaces.zope.org/browser"
-  xmlns:plone="http://namespaces.plone.org/plone"
+  xmlns:z3c="http://namespaces.zope.org/z3c"
   xmlns:zcml="http://namespaces.zope.org/zcml"
   i18n_domain="plone">
 
   <include package="plone.app.contentmenu" />
+  <adapter factory=".widgets.LinkDataConverter" />
 
   <!-- VIEWS FOR PLONE SITE ROOT -->
   <browser:pages
@@ -206,7 +207,6 @@
       permission="zope2.View"
       />
 
-
   <configure zcml:condition="installed Products.Archetypes">
     <browser:viewlet
       name="archetypes_warning_viewlet"
@@ -219,7 +219,6 @@
       />
   </configure>
 
-
   <!-- BBB OlD VIEW NAME REGISTRATIONS -->
   <browser:pages
       for="plone.dexterity.interfaces.IDexterityContainer"
@@ -260,4 +259,11 @@
     <browser:page name="thumbnail_view" template="templates/listing_album.pt"/>
   </browser:pages>
 
+  <z3c:widgetTemplate
+      mode="input"
+      widget=".widgets.ILinkWidget"
+      layer="z3c.form.interfaces.IFormLayer"
+      template="templates/link_input.pt"
+      />
+
 </configure>
diff --git a/plone/app/contenttypes/browser/templates/link_input.pt b/plone/app/contenttypes/browser/templates/link_input.pt
new file mode 100644
index 00000000..8da51dac
--- /dev/null
+++ b/plone/app/contenttypes/browser/templates/link_input.pt
@@ -0,0 +1,51 @@
+<div>
+  <div class="linkModal">
+
+    <div class="linkTypes pat-autotoc autotabs"
+         data-pat-autotoc="section:fieldset;levels:legend;IDPrefix:link-autotoc-;classSectionName:linkType">
+
+      <fieldset class="linkType internal" data-linkType="internal">
+        <legend id="tinylink-internal">Internal</legend>
+        <div>
+          <div class="form-group main">
+            <!-- this gives the name to the "linkType" -->
+            <input type="text" name="internal" class="pat-relateditems"
+                    tal:attributes="data-pat-relateditems view/pattern_data;
+                                    value view/value/internal | nothing;
+                                    name string:${view/name}.internal" />
+          </div>
+        </div>
+      </fieldset>
+
+      <fieldset class="linkType external" data-linkType="external">
+        <legend id="tinylink-external" i18n:translate="label_external_url">External</legend>
+        <div class="form-group main">
+          <label for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>
+          <input type="text" name="external"
+                 tal:attributes="name string:${view/name}.external;
+                                 value view/value/external | nothing" />
+        </div>
+      </fieldset>
+
+      <fieldset class="linkType email" data-linkType="email">
+        <legend id="tinylink-email" i18n:translate="label_email_url">Email</legend>
+        <div class="form-inline">
+          <div class="form-group main">
+            <label i18n:translate="help_email_url">Email Address</label>
+            <input type="text" name="email"
+                   tal:attributes="name string:${view/name}.email;
+                                   value view/value/email | nothing" />
+          </div>
+          <div class="form-group">
+            <label i18n:translate="help_email_url_subject">Email Subject (optional)</label>
+            <input type="text" name="subject"
+                   tal:attributes="name string:${view/name}.subject;
+                                   value view/value/email_subject | nothing" />
+          </div>
+        </div>
+      </fieldset>
+
+    </div><!-- / tabs -->
+
+  </div>
+</div>
diff --git a/plone/app/contenttypes/browser/widgets.py b/plone/app/contenttypes/browser/widgets.py
new file mode 100644
index 00000000..61f2e3cf
--- /dev/null
+++ b/plone/app/contenttypes/browser/widgets.py
@@ -0,0 +1,106 @@
+# -*- coding: utf-8 -*-
+from plone.app.contenttypes.utils import replace_link_variables_by_paths
+from plone.uuid.interfaces import IUUID
+from Products.CMFPlone.utils import safe_unicode
+
+
+from z3c.form.browser.text import TextWidget
+from z3c.form.converter import BaseDataConverter
+from z3c.form.interfaces import ITextWidget
+from z3c.form.interfaces import IFormLayer
+from z3c.form.interfaces import IFieldWidget
+from z3c.form.interfaces import NO_VALUE
+from z3c.form.widget import FieldWidget
+
+from zope.component import adapter
+from zope.component import adapts
+from zope.component.hooks import getSite
+from zope.interface import implementsOnly
+from zope.interface import implementer
+from zope.schema.interfaces import IField
+
+
+class ILinkWidget(ITextWidget):
+    """ Interface for enhanced link widget
+
+        The widget supports internal, external and email links
+
+    """
+
+
+class LinkDataConverter(BaseDataConverter):
+
+    adapts(IField, ILinkWidget)
+
+    def toWidgetValue(self, value):
+        value = super(LinkDataConverter, self).toWidgetValue(value)
+        result = {'internal': u'',
+                  'external': u'',
+                  'email': u'',
+                  'email_subject': u''}
+        uuid = None
+        if value.startswith('mailto:'):
+            value = value[7:]   # strip mailto from beginning
+            if '?subject=' in value:
+                email, email_subject = value.split('?subject=')
+                result['email'] = email
+                result['email_subject'] = email_subject
+            else:
+                result['email'] = value
+        else:
+            if '/resolveuid/' in value:
+                result['internal'] = value.rsplit('/', 1)[-1]
+            else:
+                portal = getSite()
+                path = replace_link_variables_by_paths(portal, value)
+                path = path[len(portal.absolute_url())+1:].encode('ascii', 'ignore')
+                obj = portal.unrestrictedTraverse(path=path, default=None)
+                if obj is not None:
+                    uuid = IUUID(obj, None)
+            if uuid is not None:
+                result['internal'] = uuid
+            else:
+                result['external'] = value
+        return result
+
+
+class LinkWidget(TextWidget):
+    """ Implementation of enhanced link widget
+
+    """
+
+    implementsOnly(ILinkWidget)
+
+    def portal_url(self, relative=0):
+        return getSite().absolute_url(relative)
+
+    def pattern_data(self):
+        return '{"vocabularyUrl": "%s/@@getVocabulary?name=plone.app.vocabularies.Catalog"}' \
+               % self.portal_url()
+
+    def extract(self, default=NO_VALUE):
+        form = self.request.form
+        internal = form.get(self.name + '.internal')
+        external = form.get(self.name + '.external')
+        email = form.get(self.name + '.email')
+        if internal:
+            url = '${portal_url}/resolveuid/' + internal
+        elif email:
+            subject = form.get(self.name + '.subject')
+            if not subject:
+                url = 'mailto:' + email
+            else:
+                url = 'mailto:{}?subject={}'.format(email, subject)
+        else:
+            url = external   # the default is `http://` so we land here
+        if url:
+            self.request[self.name] = safe_unicode(url)
+        return super(LinkWidget, self).extract(default=default)
+
+
+@adapter(ITextWidget, IFormLayer)
+@implementer(IFieldWidget)
+def LinkFieldWidget(field, request):
+    """ IFieldWidget factory for KeywordWidget
+    """
+    return FieldWidget(field, LinkWidget(request))
diff --git a/plone/app/contenttypes/schema/link.xml b/plone/app/contenttypes/schema/link.xml
index 8af72726..179a5948 100644
--- a/plone/app/contenttypes/schema/link.xml
+++ b/plone/app/contenttypes/schema/link.xml
@@ -1,6 +1,7 @@
-<model xmlns="http://namespaces.plone.org/supermodel/schema">
+<model xmlns="http://namespaces.plone.org/supermodel/schema"
+       xmlns:form="http://namespaces.plone.org/supermodel/form">
     <schema>
-      <field name="remoteUrl" type="zope.schema.TextLine">
+      <field name="remoteUrl" type="zope.schema.TextLine" form:widget="plone.app.contenttypes.browser.widgets.LinkFieldWidget">
         <default>http://</default>
         <description>The link is used almost verbatim, relative links become absolute and the strings "${navigation_root_url}" and "${portal_url}" get replaced with the real navigation_root_url or portal_url. If in doubt which one to use, please use navigation_root_url.
         </description>
diff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py
index 3d69f41d..b7af872b 100644
--- a/plone/app/contenttypes/tests/test_link.py
+++ b/plone/app/contenttypes/tests/test_link.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
 from datetime import datetime
+from plone.app.contenttypes.browser.widgets import LinkDataConverter
+from plone.app.contenttypes.browser.widgets import LinkWidget
 from plone.app.contenttypes.interfaces import ILink
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa
@@ -11,12 +13,14 @@
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.testing.z2 import Browser
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from zope.component import createObject
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
 from zope.event import notify
 from zope.interface import alsoProvides
+from zope.schema import TextLine
 from zope.traversing.interfaces import BeforeTraverseEvent
 
 import unittest
@@ -270,3 +274,75 @@ def test_add_link(self):
         self.assertTrue(self.browser.url.endswith('my-special-link/view'))
         self.assertTrue('My link' in self.browser.contents)
         self.assertTrue('This is my link' in self.browser.contents)
+
+
+class LinkWidgetIntegrationTest(unittest.TestCase):
+
+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+
+    default_result = {'internal': u'',
+              'external': u'',
+              'email': u'',
+              'email_subject': u''}
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        self.request['ACTUAL_URL'] = self.portal.absolute_url()
+        self.response = self.request.response
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        lid = self.portal.invokeFactory('Link', 'link',
+                                        title='My Link',
+                                        description="This is my link.")
+        self.link = self.portal[lid]
+        self.link_field = TextLine()
+        self.widget = LinkWidget(self.request)
+
+    def test_dc_towidget_external(self):
+        url = 'http://www.example.org'
+        self.link.remoteUrl = url
+
+        converter = LinkDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['external'] = url
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_towidget_internal(self):
+        self.portal.invokeFactory('Document', 'doc1',
+                                  title='A document',
+                                  description="This is a document.")
+        doc1 = self.portal['doc1']
+        url = doc1.absolute_url()
+        converter = LinkDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['internal'] = IUUID(doc1)
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_towidget_mail(self):
+        url = u'mailto:foo@.example.org'
+        converter = LinkDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['email'] = url[7:]   # mailto is cut
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_towidget_mail_subject(self):
+        url = 'mailto:foo@.example.org?subject=A subject'
+        converter = LinkDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['email'] = u'foo@.example.org'
+        expected['email_subject'] = u'A subject'
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_illegal(self):
+        url = 'foo'
+        converter = LinkDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['external'] = url
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_var(self):
+        url = '${portal_url}/foo'
+        converter = LinkDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['external'] = url
+        self.assertEqual(converter.toWidgetValue(url), expected)


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2017-06-08T12:03:26+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/6de6e926d804c35faa4144ba864ac3d61e3e15f1

use other selectors for autotoc pattern

Files changed:
M plone/app/contenttypes/browser/templates/link_input.pt

diff --git a/plone/app/contenttypes/browser/templates/link_input.pt b/plone/app/contenttypes/browser/templates/link_input.pt
index 8da51dac..3f194134 100644
--- a/plone/app/contenttypes/browser/templates/link_input.pt
+++ b/plone/app/contenttypes/browser/templates/link_input.pt
@@ -2,10 +2,10 @@
   <div class="linkModal">
 
     <div class="linkTypes pat-autotoc autotabs"
-         data-pat-autotoc="section:fieldset;levels:legend;IDPrefix:link-autotoc-;classSectionName:linkType">
+         data-pat-autotoc="section:span.linkType;levels:span.linkLabel;">
 
-      <fieldset class="linkType internal" data-linkType="internal">
-        <legend id="tinylink-internal">Internal</legend>
+      <span class="linkType internal" data-linkType="internal">
+        <span class="linkLabel" i18n:translate="label_internal_url">Internal</span>
         <div>
           <div class="form-group main">
             <!-- this gives the name to the "linkType" -->
@@ -15,20 +15,20 @@
                                     name string:${view/name}.internal" />
           </div>
         </div>
-      </fieldset>
+      </span>
 
-      <fieldset class="linkType external" data-linkType="external">
-        <legend id="tinylink-external" i18n:translate="label_external_url">External</legend>
+      <span class="linkType external" data-linkType="external">
+        <span class="linkLabel" i18n:translate="label_external_url">External</span>
         <div class="form-group main">
           <label for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>
           <input type="text" name="external"
                  tal:attributes="name string:${view/name}.external;
                                  value view/value/external | nothing" />
         </div>
-      </fieldset>
+      </span>
 
-      <fieldset class="linkType email" data-linkType="email">
-        <legend id="tinylink-email" i18n:translate="label_email_url">Email</legend>
+      <span class="linkType email" data-linkType="email">
+        <span class="linkLabel" i18n:translate="label_email_url">Email</span>
         <div class="form-inline">
           <div class="form-group main">
             <label i18n:translate="help_email_url">Email Address</label>
@@ -43,7 +43,7 @@
                                    value view/value/email_subject | nothing" />
           </div>
         </div>
-      </fieldset>
+      </span>
 
     </div><!-- / tabs -->
 


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2017-06-08T12:25:47+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/3d0c82e13cf89f5e41e4c1658e38e9223d3a9e65

reduce linkwidget internal maximum selection size to 1

Files changed:
M plone/app/contenttypes/browser/widgets.py

diff --git a/plone/app/contenttypes/browser/widgets.py b/plone/app/contenttypes/browser/widgets.py
index 61f2e3cf..cc4035b8 100644
--- a/plone/app/contenttypes/browser/widgets.py
+++ b/plone/app/contenttypes/browser/widgets.py
@@ -2,23 +2,22 @@
 from plone.app.contenttypes.utils import replace_link_variables_by_paths
 from plone.uuid.interfaces import IUUID
 from Products.CMFPlone.utils import safe_unicode
-
-
 from z3c.form.browser.text import TextWidget
 from z3c.form.converter import BaseDataConverter
-from z3c.form.interfaces import ITextWidget
-from z3c.form.interfaces import IFormLayer
 from z3c.form.interfaces import IFieldWidget
+from z3c.form.interfaces import IFormLayer
+from z3c.form.interfaces import ITextWidget
 from z3c.form.interfaces import NO_VALUE
 from z3c.form.widget import FieldWidget
-
 from zope.component import adapter
 from zope.component import adapts
 from zope.component.hooks import getSite
-from zope.interface import implementsOnly
 from zope.interface import implementer
+from zope.interface import implementsOnly
 from zope.schema.interfaces import IField
 
+import json
+
 
 class ILinkWidget(ITextWidget):
     """ Interface for enhanced link widget
@@ -53,7 +52,7 @@ def toWidgetValue(self, value):
             else:
                 portal = getSite()
                 path = replace_link_variables_by_paths(portal, value)
-                path = path[len(portal.absolute_url())+1:].encode('ascii', 'ignore')
+                path = path[len(portal.absolute_url())+1:].encode('ascii', 'ignore')  # noqa
                 obj = portal.unrestrictedTraverse(path=path, default=None)
                 if obj is not None:
                     uuid = IUUID(obj, None)
@@ -75,8 +74,11 @@ def portal_url(self, relative=0):
         return getSite().absolute_url(relative)
 
     def pattern_data(self):
-        return '{"vocabularyUrl": "%s/@@getVocabulary?name=plone.app.vocabularies.Catalog"}' \
-               % self.portal_url()
+        pattern_data = {
+            'vocabularyUrl': '{0}/@@getVocabulary?name=plone.app.vocabularies.Catalog'.format(self.portal_url()),  # noqa
+            'maximumSelectionSize': 1
+        }
+        return json.dumps(pattern_data)
 
     def extract(self, default=NO_VALUE):
         form = self.request.form


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2017-06-08T12:59:11+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/8e2d8d4c25f6980fc8a770c7b810d250a78699b0

replace url variables also in link text

Files changed:
M plone/app/contenttypes/browser/link_redirect_view.py
M plone/app/contenttypes/browser/templates/link.pt
M plone/app/contenttypes/tests/test_link.py

diff --git a/plone/app/contenttypes/browser/link_redirect_view.py b/plone/app/contenttypes/browser/link_redirect_view.py
index ff9a5658..20abc2f1 100644
--- a/plone/app/contenttypes/browser/link_redirect_view.py
+++ b/plone/app/contenttypes/browser/link_redirect_view.py
@@ -58,9 +58,18 @@ def __call__(self):
         else:
             return self.index()
 
+    def url(self):
+        """Returns the url with link variables replaced.
+        """
+        url = replace_link_variables_by_paths(
+            self.context,
+            self.context.remoteUrl
+        )
+        return url
+
     def absolute_target_url(self):
         """Compute the absolute target URL."""
-        url = self.context.remoteUrl
+        url = self.url()
 
         if self._url_uses_scheme(NON_RESOLVABLE_URL_SCHEMES):
             # For non http/https url schemes, there is no path to resolve.
@@ -78,7 +87,6 @@ def absolute_target_url(self):
                 url
             ])
         else:
-            url = replace_link_variables_by_paths(self.context, url)
             if not (url.startswith('http://') or url.startswith('https://')):
                 url = self.request.physicalPathToURL(url)
 
diff --git a/plone/app/contenttypes/browser/templates/link.pt b/plone/app/contenttypes/browser/templates/link.pt
index 93fe09d4..10079cb5 100644
--- a/plone/app/contenttypes/browser/templates/link.pt
+++ b/plone/app/contenttypes/browser/templates/link.pt
@@ -19,11 +19,9 @@
       Others will be immediately redirected to the link's target URL.
     </span>
   </div>
-  <p tal:define="portal_url portal_state/portal_url;
-                 navigation_root_url portal_state/navigation_root_url;
-                 url view/absolute_target_url">
+  <p>
     <span i18n:translate="link_address">The link address is:</span>
-    <a tal:attributes="href url" tal:content="context/remoteUrl">remote url</a>
+    <a tal:attributes="href view/absolute_target_url" tal:content="view/url">remote url</a>
   </p>
 </metal:block>
 </metal:content-core>
diff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py
index b7af872b..037039bf 100644
--- a/plone/app/contenttypes/tests/test_link.py
+++ b/plone/app/contenttypes/tests/test_link.py
@@ -346,3 +346,17 @@ def test_dc_var(self):
         expected = self.default_result.copy()
         expected['external'] = url
         self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_var_replacement_in_view(self):
+        view = getMultiAdapter(
+            (self.link, self.request),
+            name='link_redirect_view'
+        )
+
+        self.link.remoteUrl = '${portal_url}'
+        self.assertEqual(view.url(), '/plone')
+        self.assertEqual(view.absolute_target_url(), 'http://nohost/plone')
+
+        self.link.remoteUrl = '${navigation_root_url}'
+        self.assertEqual(view.url(), '/plone')
+        self.assertEqual(view.absolute_target_url(), 'http://nohost/plone')


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2017-06-08T15:22:35+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/6daea2d5a370e5e86fbb88c029ce5e90ab1383e1

Move the link widget to plone.app.z3cform and integrate it for the link type.

Files changed:
M CHANGES.rst
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/schema/link.xml
M plone/app/contenttypes/tests/test_link.py
D plone/app/contenttypes/browser/templates/link_input.pt
D plone/app/contenttypes/browser/widgets.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3551e0f4..0b3994ce 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- New widget for `remoteURL` of Link content type.
+- Integrate new link widget from plone.app.z3cform.
   [tomgross]
 
 Bug fixes:
diff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml
index 81cdc744..bcde0135 100644
--- a/plone/app/contenttypes/browser/configure.zcml
+++ b/plone/app/contenttypes/browser/configure.zcml
@@ -6,7 +6,6 @@
   i18n_domain="plone">
 
   <include package="plone.app.contentmenu" />
-  <adapter factory=".widgets.LinkDataConverter" />
 
   <!-- VIEWS FOR PLONE SITE ROOT -->
   <browser:pages
@@ -259,11 +258,4 @@
     <browser:page name="thumbnail_view" template="templates/listing_album.pt"/>
   </browser:pages>
 
-  <z3c:widgetTemplate
-      mode="input"
-      widget=".widgets.ILinkWidget"
-      layer="z3c.form.interfaces.IFormLayer"
-      template="templates/link_input.pt"
-      />
-
 </configure>
diff --git a/plone/app/contenttypes/browser/templates/link_input.pt b/plone/app/contenttypes/browser/templates/link_input.pt
deleted file mode 100644
index 3f194134..00000000
--- a/plone/app/contenttypes/browser/templates/link_input.pt
+++ /dev/null
@@ -1,51 +0,0 @@
-<div>
-  <div class="linkModal">
-
-    <div class="linkTypes pat-autotoc autotabs"
-         data-pat-autotoc="section:span.linkType;levels:span.linkLabel;">
-
-      <span class="linkType internal" data-linkType="internal">
-        <span class="linkLabel" i18n:translate="label_internal_url">Internal</span>
-        <div>
-          <div class="form-group main">
-            <!-- this gives the name to the "linkType" -->
-            <input type="text" name="internal" class="pat-relateditems"
-                    tal:attributes="data-pat-relateditems view/pattern_data;
-                                    value view/value/internal | nothing;
-                                    name string:${view/name}.internal" />
-          </div>
-        </div>
-      </span>
-
-      <span class="linkType external" data-linkType="external">
-        <span class="linkLabel" i18n:translate="label_external_url">External</span>
-        <div class="form-group main">
-          <label for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>
-          <input type="text" name="external"
-                 tal:attributes="name string:${view/name}.external;
-                                 value view/value/external | nothing" />
-        </div>
-      </span>
-
-      <span class="linkType email" data-linkType="email">
-        <span class="linkLabel" i18n:translate="label_email_url">Email</span>
-        <div class="form-inline">
-          <div class="form-group main">
-            <label i18n:translate="help_email_url">Email Address</label>
-            <input type="text" name="email"
-                   tal:attributes="name string:${view/name}.email;
-                                   value view/value/email | nothing" />
-          </div>
-          <div class="form-group">
-            <label i18n:translate="help_email_url_subject">Email Subject (optional)</label>
-            <input type="text" name="subject"
-                   tal:attributes="name string:${view/name}.subject;
-                                   value view/value/email_subject | nothing" />
-          </div>
-        </div>
-      </span>
-
-    </div><!-- / tabs -->
-
-  </div>
-</div>
diff --git a/plone/app/contenttypes/browser/widgets.py b/plone/app/contenttypes/browser/widgets.py
deleted file mode 100644
index cc4035b8..00000000
--- a/plone/app/contenttypes/browser/widgets.py
+++ /dev/null
@@ -1,108 +0,0 @@
-# -*- coding: utf-8 -*-
-from plone.app.contenttypes.utils import replace_link_variables_by_paths
-from plone.uuid.interfaces import IUUID
-from Products.CMFPlone.utils import safe_unicode
-from z3c.form.browser.text import TextWidget
-from z3c.form.converter import BaseDataConverter
-from z3c.form.interfaces import IFieldWidget
-from z3c.form.interfaces import IFormLayer
-from z3c.form.interfaces import ITextWidget
-from z3c.form.interfaces import NO_VALUE
-from z3c.form.widget import FieldWidget
-from zope.component import adapter
-from zope.component import adapts
-from zope.component.hooks import getSite
-from zope.interface import implementer
-from zope.interface import implementsOnly
-from zope.schema.interfaces import IField
-
-import json
-
-
-class ILinkWidget(ITextWidget):
-    """ Interface for enhanced link widget
-
-        The widget supports internal, external and email links
-
-    """
-
-
-class LinkDataConverter(BaseDataConverter):
-
-    adapts(IField, ILinkWidget)
-
-    def toWidgetValue(self, value):
-        value = super(LinkDataConverter, self).toWidgetValue(value)
-        result = {'internal': u'',
-                  'external': u'',
-                  'email': u'',
-                  'email_subject': u''}
-        uuid = None
-        if value.startswith('mailto:'):
-            value = value[7:]   # strip mailto from beginning
-            if '?subject=' in value:
-                email, email_subject = value.split('?subject=')
-                result['email'] = email
-                result['email_subject'] = email_subject
-            else:
-                result['email'] = value
-        else:
-            if '/resolveuid/' in value:
-                result['internal'] = value.rsplit('/', 1)[-1]
-            else:
-                portal = getSite()
-                path = replace_link_variables_by_paths(portal, value)
-                path = path[len(portal.absolute_url())+1:].encode('ascii', 'ignore')  # noqa
-                obj = portal.unrestrictedTraverse(path=path, default=None)
-                if obj is not None:
-                    uuid = IUUID(obj, None)
-            if uuid is not None:
-                result['internal'] = uuid
-            else:
-                result['external'] = value
-        return result
-
-
-class LinkWidget(TextWidget):
-    """ Implementation of enhanced link widget
-
-    """
-
-    implementsOnly(ILinkWidget)
-
-    def portal_url(self, relative=0):
-        return getSite().absolute_url(relative)
-
-    def pattern_data(self):
-        pattern_data = {
-            'vocabularyUrl': '{0}/@@getVocabulary?name=plone.app.vocabularies.Catalog'.format(self.portal_url()),  # noqa
-            'maximumSelectionSize': 1
-        }
-        return json.dumps(pattern_data)
-
-    def extract(self, default=NO_VALUE):
-        form = self.request.form
-        internal = form.get(self.name + '.internal')
-        external = form.get(self.name + '.external')
-        email = form.get(self.name + '.email')
-        if internal:
-            url = '${portal_url}/resolveuid/' + internal
-        elif email:
-            subject = form.get(self.name + '.subject')
-            if not subject:
-                url = 'mailto:' + email
-            else:
-                url = 'mailto:{}?subject={}'.format(email, subject)
-        else:
-            url = external   # the default is `http://` so we land here
-        if url:
-            self.request[self.name] = safe_unicode(url)
-        return super(LinkWidget, self).extract(default=default)
-
-
-@adapter(ITextWidget, IFormLayer)
-@implementer(IFieldWidget)
-def LinkFieldWidget(field, request):
-    """ IFieldWidget factory for KeywordWidget
-    """
-    return FieldWidget(field, LinkWidget(request))
diff --git a/plone/app/contenttypes/schema/link.xml b/plone/app/contenttypes/schema/link.xml
index 179a5948..75df3d80 100644
--- a/plone/app/contenttypes/schema/link.xml
+++ b/plone/app/contenttypes/schema/link.xml
@@ -1,7 +1,7 @@
 <model xmlns="http://namespaces.plone.org/supermodel/schema"
        xmlns:form="http://namespaces.plone.org/supermodel/form">
     <schema>
-      <field name="remoteUrl" type="zope.schema.TextLine" form:widget="plone.app.contenttypes.browser.widgets.LinkFieldWidget">
+      <field name="remoteUrl" type="zope.schema.TextLine" form:widget="plone.app.z3cform.widget.LinkFieldWidget">
         <default>http://</default>
         <description>The link is used almost verbatim, relative links become absolute and the strings "${navigation_root_url}" and "${portal_url}" get replaced with the real navigation_root_url or portal_url. If in doubt which one to use, please use navigation_root_url.
         </description>
diff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py
index 037039bf..3412556c 100644
--- a/plone/app/contenttypes/tests/test_link.py
+++ b/plone/app/contenttypes/tests/test_link.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from datetime import datetime
-from plone.app.contenttypes.browser.widgets import LinkDataConverter
-from plone.app.contenttypes.browser.widgets import LinkWidget
+from plone.app.z3cform.converters import LinkWidgetDataConverter
+from plone.app.z3cform.widget import LinkWidget
 from plone.app.contenttypes.interfaces import ILink
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa
@@ -302,7 +302,7 @@ def test_dc_towidget_external(self):
         url = 'http://www.example.org'
         self.link.remoteUrl = url
 
-        converter = LinkDataConverter(self.link_field, self.widget)
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
         expected = self.default_result.copy()
         expected['external'] = url
         self.assertEqual(converter.toWidgetValue(url), expected)
@@ -313,21 +313,21 @@ def test_dc_towidget_internal(self):
                                   description="This is a document.")
         doc1 = self.portal['doc1']
         url = doc1.absolute_url()
-        converter = LinkDataConverter(self.link_field, self.widget)
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
         expected = self.default_result.copy()
         expected['internal'] = IUUID(doc1)
         self.assertEqual(converter.toWidgetValue(url), expected)
 
     def test_dc_towidget_mail(self):
         url = u'mailto:foo@.example.org'
-        converter = LinkDataConverter(self.link_field, self.widget)
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
         expected = self.default_result.copy()
         expected['email'] = url[7:]   # mailto is cut
         self.assertEqual(converter.toWidgetValue(url), expected)
 
     def test_dc_towidget_mail_subject(self):
         url = 'mailto:foo@.example.org?subject=A subject'
-        converter = LinkDataConverter(self.link_field, self.widget)
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
         expected = self.default_result.copy()
         expected['email'] = u'foo@.example.org'
         expected['email_subject'] = u'A subject'
@@ -335,14 +335,14 @@ def test_dc_towidget_mail_subject(self):
 
     def test_dc_illegal(self):
         url = 'foo'
-        converter = LinkDataConverter(self.link_field, self.widget)
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
         expected = self.default_result.copy()
         expected['external'] = url
         self.assertEqual(converter.toWidgetValue(url), expected)
 
     def test_dc_var(self):
         url = '${portal_url}/foo'
-        converter = LinkDataConverter(self.link_field, self.widget)
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
         expected = self.default_result.copy()
         expected['external'] = url
         self.assertEqual(converter.toWidgetValue(url), expected)


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2017-06-08T17:20:20+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/12ca186542278aa00d7f2c7c71c68ac9c8f927c3

Merge pull request #367 from plone/tomgross-betterlinkwidget

A better link widget

Files changed:
M CHANGES.rst
M plone/app/contenttypes/browser/configure.zcml
M plone/app/contenttypes/browser/link_redirect_view.py
M plone/app/contenttypes/browser/templates/link.pt
M plone/app/contenttypes/schema/link.xml
M plone/app/contenttypes/tests/test_link.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e19f0381..0b3994ce 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Integrate new link widget from plone.app.z3cform.
+  [tomgross]
 
 Bug fixes:
 
diff --git a/plone/app/contenttypes/browser/configure.zcml b/plone/app/contenttypes/browser/configure.zcml
index 2b5e5e9a..bcde0135 100644
--- a/plone/app/contenttypes/browser/configure.zcml
+++ b/plone/app/contenttypes/browser/configure.zcml
@@ -1,7 +1,7 @@
 <configure
   xmlns="http://namespaces.zope.org/zope"
   xmlns:browser="http://namespaces.zope.org/browser"
-  xmlns:plone="http://namespaces.plone.org/plone"
+  xmlns:z3c="http://namespaces.zope.org/z3c"
   xmlns:zcml="http://namespaces.zope.org/zcml"
   i18n_domain="plone">
 
@@ -206,7 +206,6 @@
       permission="zope2.View"
       />
 
-
   <configure zcml:condition="installed Products.Archetypes">
     <browser:viewlet
       name="archetypes_warning_viewlet"
@@ -219,7 +218,6 @@
       />
   </configure>
 
-
   <!-- BBB OlD VIEW NAME REGISTRATIONS -->
   <browser:pages
       for="plone.dexterity.interfaces.IDexterityContainer"
diff --git a/plone/app/contenttypes/browser/link_redirect_view.py b/plone/app/contenttypes/browser/link_redirect_view.py
index ff9a5658..20abc2f1 100644
--- a/plone/app/contenttypes/browser/link_redirect_view.py
+++ b/plone/app/contenttypes/browser/link_redirect_view.py
@@ -58,9 +58,18 @@ def __call__(self):
         else:
             return self.index()
 
+    def url(self):
+        """Returns the url with link variables replaced.
+        """
+        url = replace_link_variables_by_paths(
+            self.context,
+            self.context.remoteUrl
+        )
+        return url
+
     def absolute_target_url(self):
         """Compute the absolute target URL."""
-        url = self.context.remoteUrl
+        url = self.url()
 
         if self._url_uses_scheme(NON_RESOLVABLE_URL_SCHEMES):
             # For non http/https url schemes, there is no path to resolve.
@@ -78,7 +87,6 @@ def absolute_target_url(self):
                 url
             ])
         else:
-            url = replace_link_variables_by_paths(self.context, url)
             if not (url.startswith('http://') or url.startswith('https://')):
                 url = self.request.physicalPathToURL(url)
 
diff --git a/plone/app/contenttypes/browser/templates/link.pt b/plone/app/contenttypes/browser/templates/link.pt
index 93fe09d4..10079cb5 100644
--- a/plone/app/contenttypes/browser/templates/link.pt
+++ b/plone/app/contenttypes/browser/templates/link.pt
@@ -19,11 +19,9 @@
       Others will be immediately redirected to the link's target URL.
     </span>
   </div>
-  <p tal:define="portal_url portal_state/portal_url;
-                 navigation_root_url portal_state/navigation_root_url;
-                 url view/absolute_target_url">
+  <p>
     <span i18n:translate="link_address">The link address is:</span>
-    <a tal:attributes="href url" tal:content="context/remoteUrl">remote url</a>
+    <a tal:attributes="href view/absolute_target_url" tal:content="view/url">remote url</a>
   </p>
 </metal:block>
 </metal:content-core>
diff --git a/plone/app/contenttypes/schema/link.xml b/plone/app/contenttypes/schema/link.xml
index 8af72726..75df3d80 100644
--- a/plone/app/contenttypes/schema/link.xml
+++ b/plone/app/contenttypes/schema/link.xml
@@ -1,6 +1,7 @@
-<model xmlns="http://namespaces.plone.org/supermodel/schema">
+<model xmlns="http://namespaces.plone.org/supermodel/schema"
+       xmlns:form="http://namespaces.plone.org/supermodel/form">
     <schema>
-      <field name="remoteUrl" type="zope.schema.TextLine">
+      <field name="remoteUrl" type="zope.schema.TextLine" form:widget="plone.app.z3cform.widget.LinkFieldWidget">
         <default>http://</default>
         <description>The link is used almost verbatim, relative links become absolute and the strings "${navigation_root_url}" and "${portal_url}" get replaced with the real navigation_root_url or portal_url. If in doubt which one to use, please use navigation_root_url.
         </description>
diff --git a/plone/app/contenttypes/tests/test_link.py b/plone/app/contenttypes/tests/test_link.py
index 3d69f41d..3412556c 100644
--- a/plone/app/contenttypes/tests/test_link.py
+++ b/plone/app/contenttypes/tests/test_link.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
 from datetime import datetime
+from plone.app.z3cform.converters import LinkWidgetDataConverter
+from plone.app.z3cform.widget import LinkWidget
 from plone.app.contenttypes.interfaces import ILink
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa
@@ -11,12 +13,14 @@
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.testing.z2 import Browser
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from zope.component import createObject
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
 from zope.event import notify
 from zope.interface import alsoProvides
+from zope.schema import TextLine
 from zope.traversing.interfaces import BeforeTraverseEvent
 
 import unittest
@@ -270,3 +274,89 @@ def test_add_link(self):
         self.assertTrue(self.browser.url.endswith('my-special-link/view'))
         self.assertTrue('My link' in self.browser.contents)
         self.assertTrue('This is my link' in self.browser.contents)
+
+
+class LinkWidgetIntegrationTest(unittest.TestCase):
+
+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+
+    default_result = {'internal': u'',
+              'external': u'',
+              'email': u'',
+              'email_subject': u''}
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        self.request['ACTUAL_URL'] = self.portal.absolute_url()
+        self.response = self.request.response
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        lid = self.portal.invokeFactory('Link', 'link',
+                                        title='My Link',
+                                        description="This is my link.")
+        self.link = self.portal[lid]
+        self.link_field = TextLine()
+        self.widget = LinkWidget(self.request)
+
+    def test_dc_towidget_external(self):
+        url = 'http://www.example.org'
+        self.link.remoteUrl = url
+
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['external'] = url
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_towidget_internal(self):
+        self.portal.invokeFactory('Document', 'doc1',
+                                  title='A document',
+                                  description="This is a document.")
+        doc1 = self.portal['doc1']
+        url = doc1.absolute_url()
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['internal'] = IUUID(doc1)
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_towidget_mail(self):
+        url = u'mailto:foo@.example.org'
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['email'] = url[7:]   # mailto is cut
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_towidget_mail_subject(self):
+        url = 'mailto:foo@.example.org?subject=A subject'
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['email'] = u'foo@.example.org'
+        expected['email_subject'] = u'A subject'
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_illegal(self):
+        url = 'foo'
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['external'] = url
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_dc_var(self):
+        url = '${portal_url}/foo'
+        converter = LinkWidgetDataConverter(self.link_field, self.widget)
+        expected = self.default_result.copy()
+        expected['external'] = url
+        self.assertEqual(converter.toWidgetValue(url), expected)
+
+    def test_var_replacement_in_view(self):
+        view = getMultiAdapter(
+            (self.link, self.request),
+            name='link_redirect_view'
+        )
+
+        self.link.remoteUrl = '${portal_url}'
+        self.assertEqual(view.url(), '/plone')
+        self.assertEqual(view.absolute_target_url(), 'http://nohost/plone')
+
+        self.link.remoteUrl = '${navigation_root_url}'
+        self.assertEqual(view.url(), '/plone')
+        self.assertEqual(view.absolute_target_url(), 'http://nohost/plone')


