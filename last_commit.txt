Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:17:32+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/504f1a3ce5454be3e8e6996276032ccbba78ccdc

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/359b1152.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99669d2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "359b1152"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..a3085c9\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.1\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.1"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/359b1152.internal b/news/359b1152.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/359b1152.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0f96c85 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,24 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 83bf7c8..e70eb25 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,16 +1,24 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.sh\n-    bootstrap.py\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..33d5752\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.10\n+    pipdeptree==2.3.3\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the tests of the distribution\n+deps =\n+    plone.cachepurging[test]\n+    pytest\n+    gocept.pytestlayer\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    pip install -e .[test]\n+    pytest\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:20:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/2184f209361392b430f7ba234bbfc6a9025fe5eb

chore: pyupgrade

Files changed:
M plone/cachepurging/browser.py
M plone/cachepurging/purger.py
M plone/cachepurging/tests/test_purger.py

b'diff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex a5bcc7e..ca066c0 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -58,7 +58,7 @@ def __call__(self):\n         for path in getPathsToPurge(self.context, self.request):\n             self.write(f"- process path: {path}\\n")\n             for url in getURLsToPurge(path, caching_proxies):\n-                self.write(f"  - send to purge {url}\\n".encode("utf-8"))\n+                self.write(f"  - send to purge {url}\\n".encode())\n                 status, xcache, xerror = purger.purgeSync(url)\n                 self.write(\n                     "    response with status: {status}, X-Cache: {xcache}\\n".format(\ndiff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 2d30980..682df87 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -13,8 +13,8 @@\n \n from App.config import getConfiguration\n from plone.cachepurging.interfaces import IPurger\n-from six.moves import queue\n-from six.moves.urllib.parse import urlparse\n+import queue\n+from urllib.parse import urlparse\n from traceback import format_exception\n from zope.interface import implementer\n from zope.testing.cleanup import addCleanUp\ndiff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py\nindex 8f52ef2..9e6a065 100644\n--- a/plone/cachepurging/tests/test_purger.py\n+++ b/plone/cachepurging/tests/test_purger.py\n@@ -3,9 +3,9 @@\n """\n \n from plone.cachepurging.purger import DefaultPurger\n-from six.moves import queue\n-from six.moves.BaseHTTPServer import BaseHTTPRequestHandler\n-from six.moves.BaseHTTPServer import HTTPServer\n+import queue\n+from http.server import BaseHTTPRequestHandler\n+from http.server import HTTPServer\n \n import os\n import threading\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:20:20+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/1074f88c371f34c62cc34426b1c45259d612d466

chore: isort

Files changed:
M plone/cachepurging/purger.py
M plone/cachepurging/tests/test_purger.py

b'diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 682df87..1932482 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -13,14 +13,14 @@\n \n from App.config import getConfiguration\n from plone.cachepurging.interfaces import IPurger\n-import queue\n-from urllib.parse import urlparse\n from traceback import format_exception\n+from urllib.parse import urlparse\n from zope.interface import implementer\n from zope.testing.cleanup import addCleanUp\n \n import atexit\n import logging\n+import queue\n import requests\n import six\n import sys\ndiff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py\nindex 9e6a065..c993967 100644\n--- a/plone/cachepurging/tests/test_purger.py\n+++ b/plone/cachepurging/tests/test_purger.py\n@@ -2,12 +2,12 @@\n licensed.\n """\n \n-from plone.cachepurging.purger import DefaultPurger\n-import queue\n from http.server import BaseHTTPRequestHandler\n from http.server import HTTPServer\n+from plone.cachepurging.purger import DefaultPurger\n \n import os\n+import queue\n import threading\n import time\n import unittest\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:20:58+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/d16a2d1032254a094255ab4b1efa7bc7534f2b04

chore: black

Files changed:
M plone/cachepurging/interfaces.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_views.py

b'diff --git a/plone/cachepurging/interfaces.py b/plone/cachepurging/interfaces.py\nindex e2e93d4..2762fb1 100644\n--- a/plone/cachepurging/interfaces.py\n+++ b/plone/cachepurging/interfaces.py\n@@ -21,8 +21,7 @@ class ICachePurgingSettings(Interface):\n     cachingProxies = schema.Tuple(\n         title=_("Caching proxies"),\n         description=_(\n-            "Provide the URLs of each proxy to which PURGE "\n-            "requests should be sent."\n+            "Provide the URLs of each proxy to which PURGE requests should be sent."\n         ),\n         value_type=schema.URI(),\n     )\ndiff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py\nindex 637aa8a..838d0f8 100644\n--- a/plone/cachepurging/tests/test_traversable_paths.py\n+++ b/plone/cachepurging/tests/test_traversable_paths.py\n@@ -13,7 +13,6 @@ def virtual_url_path(self):\n \n class TestTraversablePaths(unittest.TestCase):\n     def test_traversable_paths(self):\n-\n         context = FauxTraversable()\n         paths = TraversablePurgePaths(context)\n \ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 6523760..1588cce 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -33,7 +33,6 @@ def setHeader(self, key, value):\n \n \n class FauxRequest(dict):\n-\n     form = dict()\n \n     def __init__(self, *args, **kw):\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:21:21+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/f409549086b8c7acaaae854fb1c60d56fa2120dc

chore: zpretty

Files changed:
M plone/cachepurging/configure.zcml

b'diff --git a/plone/cachepurging/configure.zcml b/plone/cachepurging/configure.zcml\nindex a692fd0..a60851a 100644\n--- a/plone/cachepurging/configure.zcml\n+++ b/plone/cachepurging/configure.zcml\n@@ -1,45 +1,49 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n-\n-    <include package="zope.annotation" />\n-    <include package="plone.registry" />\n-\n-    <!-- Default rewriter and purge urls -->\n-    <adapter factory=".rewrite.DefaultRewriter" />\n-    <adapter factory=".paths.TraversablePurgePaths" name="default" />\n-\n-    <!-- Publisher event hooks -->\n-    <subscriber handler=".hooks.queuePurge" />\n-    <subscriber handler=".hooks.purge" />\n-\n-    <!-- Purge queue -->\n-    <utility component=".purger.DEFAULT_PURGER" />\n-\n-    <!-- Make sure we can annotate the request -->\n-    <class class="ZPublisher.BaseRequest.BaseRequest">\n-        <implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />\n-    </class>\n-\n-    <!-- Views to explicitly purge the context -->\n-    <permission\n-        id="plone.cachepurging.InitiatePurge"\n-        title="plone.cachepurging: Manually purge objects"\n-        />\n-\n-    <browser:view\n-        for="*"\n-        name="plone.cachepurging.purge"\n-        class=".browser.PurgeImmediately"\n-        permission="plone.cachepurging.InitiatePurge"\n-        />\n-\n-    <browser:view\n-        for="*"\n-        name="plone.cachepurging.queue"\n-        class=".browser.QueuePurge"\n-        permission="plone.cachepurging.InitiatePurge"\n-        />\n+    i18n_domain="plone"\n+    >\n+\n+  <include package="zope.annotation" />\n+  <include package="plone.registry" />\n+\n+  <!-- Default rewriter and purge urls -->\n+  <adapter factory=".rewrite.DefaultRewriter" />\n+  <adapter\n+      factory=".paths.TraversablePurgePaths"\n+      name="default"\n+      />\n+\n+  <!-- Publisher event hooks -->\n+  <subscriber handler=".hooks.queuePurge" />\n+  <subscriber handler=".hooks.purge" />\n+\n+  <!-- Purge queue -->\n+  <utility component=".purger.DEFAULT_PURGER" />\n+\n+  <!-- Make sure we can annotate the request -->\n+  <class class="ZPublisher.BaseRequest.BaseRequest">\n+    <implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />\n+  </class>\n+\n+  <!-- Views to explicitly purge the context -->\n+  <permission\n+      id="plone.cachepurging.InitiatePurge"\n+      title="plone.cachepurging: Manually purge objects"\n+      />\n+\n+  <browser:view\n+      name="plone.cachepurging.purge"\n+      for="*"\n+      class=".browser.PurgeImmediately"\n+      permission="plone.cachepurging.InitiatePurge"\n+      />\n+\n+  <browser:view\n+      name="plone.cachepurging.queue"\n+      for="*"\n+      class=".browser.QueuePurge"\n+      permission="plone.cachepurging.InitiatePurge"\n+      />\n \n </configure>\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:24:16+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/248e7bc6c9cc0b136d74bb4ae5f2a010e0119762

chore: flake8

Files changed:
M plone/cachepurging/purger.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_views.py

b'diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 1932482..7a528f8 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -22,7 +22,6 @@\n import logging\n import queue\n import requests\n-import six\n import sys\n import threading\n \ndiff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py\nindex 7c36d07..60ed7e7 100644\n--- a/plone/cachepurging/tests/test_hooks.py\n+++ b/plone/cachepurging/tests/test_hooks.py\n@@ -69,7 +69,7 @@ def getAbsolutePaths(self):\n \n         try:\n             notify(Purge(context))\n-        except:\n+        except Exception:\n             self.fail()\n \n     def test_request_not_annotatable(self):\n@@ -102,7 +102,7 @@ def getAbsolutePaths(self):\n \n         try:\n             notify(Purge(context))\n-        except:\n+        except Exception:\n             self.fail()\n \n     def test_no_registry(self):\n@@ -378,7 +378,7 @@ def test_no_purger(self):\n \n         try:\n             notify(PubSuccess(request))\n-        except:\n+        except Exception:\n             self.fail()\n \n     def test_purge(self):\ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 1588cce..c06e681 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -125,7 +125,7 @@ def test_disabled(self):\n \n     def test_purge(self):\n         request = FauxRequest()\n-        view = PurgeImmediately(FauxContext(), request)()\n+        PurgeImmediately(FauxContext(), request)()\n         self.assertEqual(\n             [\n                 b"Cache purging initiated...\\n\\n",\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:25:53+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/3f68954035955a33ae71303bb58010917bee7ca8

chore: codespell

Files changed:
M README.rst
M plone/cachepurging/purger.py
M plone/cachepurging/utils.py

b'diff --git a/README.rst b/README.rst\nindex 3d52d7f..7e30534 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -335,7 +335,7 @@ The name is not significant, but should be unique unless it is intended to\n override an existing adapter. By convention, you should prefix the name with\n your package\'s dotted name unless you have a reason not to.\n \n-The default adapter thats simply returns ``absolute_url_path()`` is called\n+The default adapter that simply returns ``absolute_url_path()`` is called\n ``default``.\n \n \ndiff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 7a528f8..7c7100e 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -191,7 +191,7 @@ def run(self):\n                                 logger.debug(f"Purge URL not found: {url}")\n                                 break  # all done with this item!\n                         except Exception:\n-                            # All other exceptions are evil - we just disard\n+                            # All other exceptions are evil - we just discard\n                             # the item.  This prevents other logic failures etc\n                             # being retried.\n                             logger.exception(f"Failed to purge {url}")\ndiff --git a/plone/cachepurging/utils.py b/plone/cachepurging/utils.py\nindex 4f53eb0..1d5d15f 100644\n--- a/plone/cachepurging/utils.py\n+++ b/plone/cachepurging/utils.py\n@@ -37,7 +37,7 @@ def getPathsToPurge(context, request):\n                     rewrittenPaths = rewriter(relativePath) or []  # None -> []\n                     yield from rewrittenPaths\n \n-        # add absoute paths, which are not\n+        # add absolute paths, which are not\n         absolutePaths = pathProvider.getAbsolutePaths()\n         if absolutePaths:\n             yield from absolutePaths\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:26:53+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/81473dbe36e69cb86c3af6fd0edeb6543249665d

chore: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex ee97ab6..9f03883 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,6 +21,7 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n+    python_requires=">=3.8",\n     keywords="plone cache purge",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:31:07+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/74ef700e55e42de36578cd84da8b7dee17243209

feat: remove last traces of six

Files changed:
M README.rst
M plone/cachepurging/rewrite.py

b'diff --git a/README.rst b/README.rst\nindex 7e30534..68fa9cf 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -102,7 +102,7 @@ take place:\n If you need more control, you can perform the purging directly. Here is a\n snippet adapted from the ``plone.cachepurging.purge`` view::\n \n-        from six import StringIO\n+        from io import StringIO\n \n         from zope.component import getUtility\n \ndiff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py\nindex 72d6d04..ac0dddb 100644\n--- a/plone/cachepurging/rewrite.py\n+++ b/plone/cachepurging/rewrite.py\n@@ -1,7 +1,7 @@\n from plone.cachepurging.interfaces import ICachePurgingSettings\n from plone.cachepurging.interfaces import IPurgePathRewriter\n from plone.registry.interfaces import IRegistry\n-from six.moves import urllib\n+from urllib.parse import urlparse\n from zope.component import adapter\n from zope.component import queryUtility\n from zope.interface import implementer\n@@ -71,7 +71,7 @@ def __call__(self, path):\n \n         paths = []\n         for domain in domains:\n-            scheme, host = urllib.parse.urlparse(domain)[:2]\n+            scheme, host = urlparse(domain)[:2]\n             paths.append(\n                 "/VirtualHostBase/%(scheme)s/%(host)s%(root)s/"\n                 "VirtualHostRoot%(prefix)s%(path)s"\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-27T00:45:57+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/3c059962f2c86ca137611c72e67f6e8b9ffab199

feat: declare dependencies

Files changed:
M .meta.toml
M pyproject.toml
M setup.py

b'diff --git a/.meta.toml b/.meta.toml\nindex 99669d2..b8cf014 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,8 @@\n [meta]\n template = "default"\n commit-id = "359b1152"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'App\', \'OFS\', \'ZPublisher\']",\n+    ]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0f96c85..291df63 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -41,3 +41,6 @@ profile = "plone"\n \n [tool.black]\n target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\'App\', \'OFS\', \'ZPublisher\']\ndiff --git a/setup.py b/setup.py\nindex 9f03883..618e1bd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,6 +37,14 @@\n         "requests",\n         "z3c.caching",\n         "Zope",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.event",\n+        "zope.globalrequest",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.schema",\n+        "zope.testing",\n     ],\n-    extras_require={"test": ["plone.app.testing"]},\n+    extras_require={"test": []},\n )\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2023-02-28T16:21:00+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/6e7e6468af936021dec7904cb1d42b1bb64a2688

Merge pull request #28 from plone/config-with-default-template-7a1a765a

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/359b1152.internal
A tox.ini
M README.rst
M plone/cachepurging/browser.py
M plone/cachepurging/configure.zcml
M plone/cachepurging/interfaces.py
M plone/cachepurging/purger.py
M plone/cachepurging/rewrite.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_views.py
M plone/cachepurging/utils.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..b8cf014\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,10 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "359b1152"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'App\', \'OFS\', \'ZPublisher\']",\n+    ]\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..a3085c9\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.1\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.1"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/README.rst b/README.rst\nindex 3d52d7f..68fa9cf 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -102,7 +102,7 @@ take place:\n If you need more control, you can perform the purging directly. Here is a\n snippet adapted from the ``plone.cachepurging.purge`` view::\n \n-        from six import StringIO\n+        from io import StringIO\n \n         from zope.component import getUtility\n \n@@ -335,7 +335,7 @@ The name is not significant, but should be unique unless it is intended to\n override an existing adapter. By convention, you should prefix the name with\n your package\'s dotted name unless you have a reason not to.\n \n-The default adapter thats simply returns ``absolute_url_path()`` is called\n+The default adapter that simply returns ``absolute_url_path()`` is called\n ``default``.\n \n \ndiff --git a/news/359b1152.internal b/news/359b1152.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/359b1152.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex a5bcc7e..ca066c0 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -58,7 +58,7 @@ def __call__(self):\n         for path in getPathsToPurge(self.context, self.request):\n             self.write(f"- process path: {path}\\n")\n             for url in getURLsToPurge(path, caching_proxies):\n-                self.write(f"  - send to purge {url}\\n".encode("utf-8"))\n+                self.write(f"  - send to purge {url}\\n".encode())\n                 status, xcache, xerror = purger.purgeSync(url)\n                 self.write(\n                     "    response with status: {status}, X-Cache: {xcache}\\n".format(\ndiff --git a/plone/cachepurging/configure.zcml b/plone/cachepurging/configure.zcml\nindex a692fd0..a60851a 100644\n--- a/plone/cachepurging/configure.zcml\n+++ b/plone/cachepurging/configure.zcml\n@@ -1,45 +1,49 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n-\n-    <include package="zope.annotation" />\n-    <include package="plone.registry" />\n-\n-    <!-- Default rewriter and purge urls -->\n-    <adapter factory=".rewrite.DefaultRewriter" />\n-    <adapter factory=".paths.TraversablePurgePaths" name="default" />\n-\n-    <!-- Publisher event hooks -->\n-    <subscriber handler=".hooks.queuePurge" />\n-    <subscriber handler=".hooks.purge" />\n-\n-    <!-- Purge queue -->\n-    <utility component=".purger.DEFAULT_PURGER" />\n-\n-    <!-- Make sure we can annotate the request -->\n-    <class class="ZPublisher.BaseRequest.BaseRequest">\n-        <implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />\n-    </class>\n-\n-    <!-- Views to explicitly purge the context -->\n-    <permission\n-        id="plone.cachepurging.InitiatePurge"\n-        title="plone.cachepurging: Manually purge objects"\n-        />\n-\n-    <browser:view\n-        for="*"\n-        name="plone.cachepurging.purge"\n-        class=".browser.PurgeImmediately"\n-        permission="plone.cachepurging.InitiatePurge"\n-        />\n-\n-    <browser:view\n-        for="*"\n-        name="plone.cachepurging.queue"\n-        class=".browser.QueuePurge"\n-        permission="plone.cachepurging.InitiatePurge"\n-        />\n+    i18n_domain="plone"\n+    >\n+\n+  <include package="zope.annotation" />\n+  <include package="plone.registry" />\n+\n+  <!-- Default rewriter and purge urls -->\n+  <adapter factory=".rewrite.DefaultRewriter" />\n+  <adapter\n+      factory=".paths.TraversablePurgePaths"\n+      name="default"\n+      />\n+\n+  <!-- Publisher event hooks -->\n+  <subscriber handler=".hooks.queuePurge" />\n+  <subscriber handler=".hooks.purge" />\n+\n+  <!-- Purge queue -->\n+  <utility component=".purger.DEFAULT_PURGER" />\n+\n+  <!-- Make sure we can annotate the request -->\n+  <class class="ZPublisher.BaseRequest.BaseRequest">\n+    <implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />\n+  </class>\n+\n+  <!-- Views to explicitly purge the context -->\n+  <permission\n+      id="plone.cachepurging.InitiatePurge"\n+      title="plone.cachepurging: Manually purge objects"\n+      />\n+\n+  <browser:view\n+      name="plone.cachepurging.purge"\n+      for="*"\n+      class=".browser.PurgeImmediately"\n+      permission="plone.cachepurging.InitiatePurge"\n+      />\n+\n+  <browser:view\n+      name="plone.cachepurging.queue"\n+      for="*"\n+      class=".browser.QueuePurge"\n+      permission="plone.cachepurging.InitiatePurge"\n+      />\n \n </configure>\ndiff --git a/plone/cachepurging/interfaces.py b/plone/cachepurging/interfaces.py\nindex e2e93d4..2762fb1 100644\n--- a/plone/cachepurging/interfaces.py\n+++ b/plone/cachepurging/interfaces.py\n@@ -21,8 +21,7 @@ class ICachePurgingSettings(Interface):\n     cachingProxies = schema.Tuple(\n         title=_("Caching proxies"),\n         description=_(\n-            "Provide the URLs of each proxy to which PURGE "\n-            "requests should be sent."\n+            "Provide the URLs of each proxy to which PURGE requests should be sent."\n         ),\n         value_type=schema.URI(),\n     )\ndiff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 2d30980..7c7100e 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -13,16 +13,15 @@\n \n from App.config import getConfiguration\n from plone.cachepurging.interfaces import IPurger\n-from six.moves import queue\n-from six.moves.urllib.parse import urlparse\n from traceback import format_exception\n+from urllib.parse import urlparse\n from zope.interface import implementer\n from zope.testing.cleanup import addCleanUp\n \n import atexit\n import logging\n+import queue\n import requests\n-import six\n import sys\n import threading\n \n@@ -192,7 +191,7 @@ def run(self):\n                                 logger.debug(f"Purge URL not found: {url}")\n                                 break  # all done with this item!\n                         except Exception:\n-                            # All other exceptions are evil - we just disard\n+                            # All other exceptions are evil - we just discard\n                             # the item.  This prevents other logic failures etc\n                             # being retried.\n                             logger.exception(f"Failed to purge {url}")\ndiff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py\nindex 72d6d04..ac0dddb 100644\n--- a/plone/cachepurging/rewrite.py\n+++ b/plone/cachepurging/rewrite.py\n@@ -1,7 +1,7 @@\n from plone.cachepurging.interfaces import ICachePurgingSettings\n from plone.cachepurging.interfaces import IPurgePathRewriter\n from plone.registry.interfaces import IRegistry\n-from six.moves import urllib\n+from urllib.parse import urlparse\n from zope.component import adapter\n from zope.component import queryUtility\n from zope.interface import implementer\n@@ -71,7 +71,7 @@ def __call__(self, path):\n \n         paths = []\n         for domain in domains:\n-            scheme, host = urllib.parse.urlparse(domain)[:2]\n+            scheme, host = urlparse(domain)[:2]\n             paths.append(\n                 "/VirtualHostBase/%(scheme)s/%(host)s%(root)s/"\n                 "VirtualHostRoot%(prefix)s%(path)s"\ndiff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py\nindex 7c36d07..60ed7e7 100644\n--- a/plone/cachepurging/tests/test_hooks.py\n+++ b/plone/cachepurging/tests/test_hooks.py\n@@ -69,7 +69,7 @@ def getAbsolutePaths(self):\n \n         try:\n             notify(Purge(context))\n-        except:\n+        except Exception:\n             self.fail()\n \n     def test_request_not_annotatable(self):\n@@ -102,7 +102,7 @@ def getAbsolutePaths(self):\n \n         try:\n             notify(Purge(context))\n-        except:\n+        except Exception:\n             self.fail()\n \n     def test_no_registry(self):\n@@ -378,7 +378,7 @@ def test_no_purger(self):\n \n         try:\n             notify(PubSuccess(request))\n-        except:\n+        except Exception:\n             self.fail()\n \n     def test_purge(self):\ndiff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py\nindex 8f52ef2..c993967 100644\n--- a/plone/cachepurging/tests/test_purger.py\n+++ b/plone/cachepurging/tests/test_purger.py\n@@ -2,12 +2,12 @@\n licensed.\n """\n \n+from http.server import BaseHTTPRequestHandler\n+from http.server import HTTPServer\n from plone.cachepurging.purger import DefaultPurger\n-from six.moves import queue\n-from six.moves.BaseHTTPServer import BaseHTTPRequestHandler\n-from six.moves.BaseHTTPServer import HTTPServer\n \n import os\n+import queue\n import threading\n import time\n import unittest\ndiff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py\nindex 637aa8a..838d0f8 100644\n--- a/plone/cachepurging/tests/test_traversable_paths.py\n+++ b/plone/cachepurging/tests/test_traversable_paths.py\n@@ -13,7 +13,6 @@ def virtual_url_path(self):\n \n class TestTraversablePaths(unittest.TestCase):\n     def test_traversable_paths(self):\n-\n         context = FauxTraversable()\n         paths = TraversablePurgePaths(context)\n \ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 6523760..c06e681 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -33,7 +33,6 @@ def setHeader(self, key, value):\n \n \n class FauxRequest(dict):\n-\n     form = dict()\n \n     def __init__(self, *args, **kw):\n@@ -126,7 +125,7 @@ def test_disabled(self):\n \n     def test_purge(self):\n         request = FauxRequest()\n-        view = PurgeImmediately(FauxContext(), request)()\n+        PurgeImmediately(FauxContext(), request)()\n         self.assertEqual(\n             [\n                 b"Cache purging initiated...\\n\\n",\ndiff --git a/plone/cachepurging/utils.py b/plone/cachepurging/utils.py\nindex 4f53eb0..1d5d15f 100644\n--- a/plone/cachepurging/utils.py\n+++ b/plone/cachepurging/utils.py\n@@ -37,7 +37,7 @@ def getPathsToPurge(context, request):\n                     rewrittenPaths = rewriter(relativePath) or []  # None -> []\n                     yield from rewrittenPaths\n \n-        # add absoute paths, which are not\n+        # add absolute paths, which are not\n         absolutePaths = pathProvider.getAbsolutePaths()\n         if absolutePaths:\n             yield from absolutePaths\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..291df63 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,27 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\'App\', \'OFS\', \'ZPublisher\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 83bf7c8..e70eb25 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,16 +1,24 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.sh\n-    bootstrap.py\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/setup.py b/setup.py\nindex ee97ab6..618e1bd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,6 +21,7 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n+    python_requires=">=3.8",\n     keywords="plone cache purge",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n@@ -36,6 +37,14 @@\n         "requests",\n         "z3c.caching",\n         "Zope",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.event",\n+        "zope.globalrequest",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.schema",\n+        "zope.testing",\n     ],\n-    extras_require={"test": ["plone.app.testing"]},\n+    extras_require={"test": []},\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..33d5752\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.10\n+    pipdeptree==2.3.3\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the tests of the distribution\n+deps =\n+    plone.cachepurging[test]\n+    pytest\n+    gocept.pytestlayer\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    pip install -e .[test]\n+    pytest\n'

