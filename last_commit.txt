Repository: plone.app.testing


Branch: refs/heads/master
Date: 2018-09-24T09:35:27+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.testing/commit/10403ac11e961b7efebd7a8c1970e0f97c20884f

add new bbb layer for Archetypes

Files changed:
A plone/app/testing/bbb_at.py
M plone/app/testing/bbb.py

b'diff --git a/plone/app/testing/bbb.py b/plone/app/testing/bbb.py\nindex 8d29412..17fc721 100644\n--- a/plone/app/testing/bbb.py\n+++ b/plone/app/testing/bbb.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-"""Backwards-compatibility test class for PloneTestCase."""\n+"""Backwards-compatibility test class for PloneTestCase for Dexterity."""\n \n from AccessControl import getSecurityManager\n from plone.app import testing\ndiff --git a/plone/app/testing/bbb_at.py b/plone/app/testing/bbb_at.py\nnew file mode 100644\nindex 0000000..d91e37f\n--- /dev/null\n+++ b/plone/app/testing/bbb_at.py\n@@ -0,0 +1,124 @@\n+# -*- coding: utf-8 -*-\n+"""Backwards-compatibility test class for PloneTestCase for Archetypes."""\n+\n+from AccessControl import getSecurityManager\n+from plone.app import testing\n+from plone.testing import z2\n+from Products.CMFPlone.utils import _createObjectByType\n+from Testing.ZopeTestCase.functional import Functional\n+\n+import transaction\n+import unittest\n+\n+\n+def _createMemberarea(portal, user_id):\n+    mtool = portal.portal_membership\n+    members = mtool.getMembersFolder()\n+    if members is None:\n+        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+    if not mtool.getMemberareaCreationFlag():\n+        mtool.setMemberareaCreationFlag()\n+    mtool.createMemberArea(user_id)\n+    if mtool.getMemberareaCreationFlag():\n+        mtool.setMemberareaCreationFlag()\n+\n+\n+class PloneTestCaseFixture(testing.PloneSandboxLayer):\n+\n+    defaultBases = (testing.PLONE_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        import Products.ATContentTypes\n+        self.loadZCML(package=Products.ATContentTypes)\n+\n+        z2.installProduct(app, \'Products.Archetypes\')\n+        z2.installProduct(app, \'Products.ATContentTypes\')\n+        z2.installProduct(app, \'plone.app.blob\')\n+        z2.installProduct(app, \'plone.app.collection\')\n+\n+    def setUpPloneSite(self, portal):\n+        # restore default workflow\n+        testing.applyProfile(portal, \'Products.CMFPlone:testfixture\')\n+\n+        # add default content\n+        testing.applyProfile(portal, \'Products.ATContentTypes:content\')\n+\n+        # add home folder for default test user\n+        _createMemberarea(portal, testing.TEST_USER_ID)\n+\n+    def tearDownZope(self, app):\n+        z2.uninstallProduct(app, \'plone.app.collection\')\n+        z2.uninstallProduct(app, \'plone.app.blob\')\n+        z2.uninstallProduct(app, \'Products.ATContentTypes\')\n+        z2.uninstallProduct(app, \'Products.Archetypes\')\n+\n+PTC_FIXTURE = PloneTestCaseFixture()\n+PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n+    bases=(PTC_FIXTURE,), name=\'PloneTestCase:Functional\')\n+\n+\n+class PloneTestCase(Functional, unittest.TestCase):\n+\n+    layer = PTC_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        """Set up before each test."""\n+        self.beforeSetUp()\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.folder = self.portal.portal_membership.getHomeFolder(\n+            testing.TEST_USER_ID)\n+        transaction.commit()\n+        self.afterSetUp()\n+\n+    def beforeSetUp(self):\n+        """Hook to do setup before the portal is created."""\n+        pass\n+\n+    def afterSetUp(self):\n+        """Hook to do setup after the portal is created."""\n+\n+    def tearDown(self):\n+        """Tear down after each test."""\n+        self.beforeTearDown()\n+        transaction.abort()\n+        super(PloneTestCase, self).tearDown()\n+        self.afterTearDown()\n+\n+    def beforeTearDown(self):\n+        """Hook to do teardown before the portal is removed."""\n+\n+    def afterTearDown(self):\n+        """Hook to do teardown after the portal is removed."""\n+\n+    def setRoles(self, roles, name=testing.TEST_USER_ID):\n+        """Set the effective roles of a user."""\n+        testing.setRoles(self.portal, name, roles)\n+\n+    def setGroups(self, groups, name=testing.TEST_USER_ID):\n+        \'\'\'Changes the user\'s groups.\'\'\'\n+        uf = self.portal[\'acl_users\']\n+        uf.userSetGroups(name, list(groups))\n+        user = getSecurityManager().getUser()\n+        if name == user.getId():\n+            self.login(user.getUserName())\n+\n+    def setPermissions(self, permissions, role=\'Member\'):\n+        """Changes the permissions assigned to role."""\n+        self.portal.manage_role(role, list(permissions))\n+\n+    def login(self, userName=testing.TEST_USER_NAME):\n+        """Log in to the portal as the given user."""\n+        testing.login(self.portal, userName)\n+\n+    def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n+        """Log in to the portal as the user who created it."""\n+        z2.login(self.app[\'acl_users\'], userName)\n+\n+    def logout(self):\n+        """Log out, i.e. become anonymous."""\n+        testing.logout()\n+\n+    def createMemberarea(self, name):\n+        """Create a minimal memberarea."""\n+        _createMemberarea(self.portal, name)\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2018-09-24T09:49:45+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.testing/commit/4ee0b79abcf4bf664a835b85b7b03c5bea3e7656

add changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2057fee..f659823 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,9 @@ New features:\n - Load negotiator from plone.i18n (PTS removed).\n   [jensens, ksuess]\n \n+- Add copy of bbb.PloneTestCase. For Plone 5.2 the bbb.PloneTestCase will uses Dexterity instead of Archetypes. Adding bbb_at.PloneTestCase for them to use allows to keep the AT tests working. See https://github.com/plone/plone.app.testing/pull/51\n+  [pbauer]\n+\n Bug fixes:\n \n - *add item here*\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2018-09-27T10:14:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.testing/commit/340a19cb3e23227281969a2e95272a381c58ebc9

Merge pull request #51 from plone/add_copy_of_at_layer

add new bbb layer for Archetypes

Files changed:
A plone/app/testing/bbb_at.py
M CHANGES.rst
M plone/app/testing/bbb.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2057fee..f659823 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,9 @@ New features:\n - Load negotiator from plone.i18n (PTS removed).\n   [jensens, ksuess]\n \n+- Add copy of bbb.PloneTestCase. For Plone 5.2 the bbb.PloneTestCase will uses Dexterity instead of Archetypes. Adding bbb_at.PloneTestCase for them to use allows to keep the AT tests working. See https://github.com/plone/plone.app.testing/pull/51\n+  [pbauer]\n+\n Bug fixes:\n \n - *add item here*\ndiff --git a/plone/app/testing/bbb.py b/plone/app/testing/bbb.py\nindex 8d29412..17fc721 100644\n--- a/plone/app/testing/bbb.py\n+++ b/plone/app/testing/bbb.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-"""Backwards-compatibility test class for PloneTestCase."""\n+"""Backwards-compatibility test class for PloneTestCase for Dexterity."""\n \n from AccessControl import getSecurityManager\n from plone.app import testing\ndiff --git a/plone/app/testing/bbb_at.py b/plone/app/testing/bbb_at.py\nnew file mode 100644\nindex 0000000..d91e37f\n--- /dev/null\n+++ b/plone/app/testing/bbb_at.py\n@@ -0,0 +1,124 @@\n+# -*- coding: utf-8 -*-\n+"""Backwards-compatibility test class for PloneTestCase for Archetypes."""\n+\n+from AccessControl import getSecurityManager\n+from plone.app import testing\n+from plone.testing import z2\n+from Products.CMFPlone.utils import _createObjectByType\n+from Testing.ZopeTestCase.functional import Functional\n+\n+import transaction\n+import unittest\n+\n+\n+def _createMemberarea(portal, user_id):\n+    mtool = portal.portal_membership\n+    members = mtool.getMembersFolder()\n+    if members is None:\n+        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+    if not mtool.getMemberareaCreationFlag():\n+        mtool.setMemberareaCreationFlag()\n+    mtool.createMemberArea(user_id)\n+    if mtool.getMemberareaCreationFlag():\n+        mtool.setMemberareaCreationFlag()\n+\n+\n+class PloneTestCaseFixture(testing.PloneSandboxLayer):\n+\n+    defaultBases = (testing.PLONE_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        import Products.ATContentTypes\n+        self.loadZCML(package=Products.ATContentTypes)\n+\n+        z2.installProduct(app, \'Products.Archetypes\')\n+        z2.installProduct(app, \'Products.ATContentTypes\')\n+        z2.installProduct(app, \'plone.app.blob\')\n+        z2.installProduct(app, \'plone.app.collection\')\n+\n+    def setUpPloneSite(self, portal):\n+        # restore default workflow\n+        testing.applyProfile(portal, \'Products.CMFPlone:testfixture\')\n+\n+        # add default content\n+        testing.applyProfile(portal, \'Products.ATContentTypes:content\')\n+\n+        # add home folder for default test user\n+        _createMemberarea(portal, testing.TEST_USER_ID)\n+\n+    def tearDownZope(self, app):\n+        z2.uninstallProduct(app, \'plone.app.collection\')\n+        z2.uninstallProduct(app, \'plone.app.blob\')\n+        z2.uninstallProduct(app, \'Products.ATContentTypes\')\n+        z2.uninstallProduct(app, \'Products.Archetypes\')\n+\n+PTC_FIXTURE = PloneTestCaseFixture()\n+PTC_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n+    bases=(PTC_FIXTURE,), name=\'PloneTestCase:Functional\')\n+\n+\n+class PloneTestCase(Functional, unittest.TestCase):\n+\n+    layer = PTC_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        """Set up before each test."""\n+        self.beforeSetUp()\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.folder = self.portal.portal_membership.getHomeFolder(\n+            testing.TEST_USER_ID)\n+        transaction.commit()\n+        self.afterSetUp()\n+\n+    def beforeSetUp(self):\n+        """Hook to do setup before the portal is created."""\n+        pass\n+\n+    def afterSetUp(self):\n+        """Hook to do setup after the portal is created."""\n+\n+    def tearDown(self):\n+        """Tear down after each test."""\n+        self.beforeTearDown()\n+        transaction.abort()\n+        super(PloneTestCase, self).tearDown()\n+        self.afterTearDown()\n+\n+    def beforeTearDown(self):\n+        """Hook to do teardown before the portal is removed."""\n+\n+    def afterTearDown(self):\n+        """Hook to do teardown after the portal is removed."""\n+\n+    def setRoles(self, roles, name=testing.TEST_USER_ID):\n+        """Set the effective roles of a user."""\n+        testing.setRoles(self.portal, name, roles)\n+\n+    def setGroups(self, groups, name=testing.TEST_USER_ID):\n+        \'\'\'Changes the user\'s groups.\'\'\'\n+        uf = self.portal[\'acl_users\']\n+        uf.userSetGroups(name, list(groups))\n+        user = getSecurityManager().getUser()\n+        if name == user.getId():\n+            self.login(user.getUserName())\n+\n+    def setPermissions(self, permissions, role=\'Member\'):\n+        """Changes the permissions assigned to role."""\n+        self.portal.manage_role(role, list(permissions))\n+\n+    def login(self, userName=testing.TEST_USER_NAME):\n+        """Log in to the portal as the given user."""\n+        testing.login(self.portal, userName)\n+\n+    def loginAsPortalOwner(self, userName=testing.SITE_OWNER_NAME):\n+        """Log in to the portal as the user who created it."""\n+        z2.login(self.app[\'acl_users\'], userName)\n+\n+    def logout(self):\n+        """Log out, i.e. become anonymous."""\n+        testing.logout()\n+\n+    def createMemberarea(self, name):\n+        """Create a minimal memberarea."""\n+        _createMemberarea(self.portal, name)\n'

