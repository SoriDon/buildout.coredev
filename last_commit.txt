Repository: plone.app.caching


Branch: refs/heads/master
Date: 2021-05-07T11:15:19+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.caching/commit/079f4a4c566884063a9fb6284ed25ed54ec8ea46

Fix ram-caching of binary files.

Files changed:
A news/79.bugfix
M plone/app/caching/operations/ramcache.py

b'diff --git a/news/79.bugfix b/news/79.bugfix\nnew file mode 100644\nindex 0000000..cf55f48\n--- /dev/null\n+++ b/news/79.bugfix\n@@ -0,0 +1,2 @@\n+Fix ram-caching of binary files.\n+[agitator]\n\\ No newline at end of file\ndiff --git a/plone/app/caching/operations/ramcache.py b/plone/app/caching/operations/ramcache.py\nindex 204a251..8c4657e 100644\n--- a/plone/app/caching/operations/ramcache.py\n+++ b/plone/app/caching/operations/ramcache.py\n@@ -41,8 +41,8 @@ def transformIterable(self, result, encoding):\n         if self.responseIsSuccess() and IRAMCached.providedBy(self.request):\n             result = b"".join(result)\n             storeResponseInRAMCache(self.request, self.request.response, result)\n-            # as we have iterated the iterable, we must return a new one\n-            return iter([result])\n+            # ITransform contract allows to return an "encoded string" aka bytes\n+            return result\n         return None\n \n     def responseIsSuccess(self):\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2021-05-07T14:48:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/4fc35ca6c8b673b198ab69a055f7825d81477a37

Merge pull request #79 from plone/fix-binary-ram-caching

Fix ram-caching of binary files.

Files changed:
A news/79.bugfix
M plone/app/caching/operations/ramcache.py

b'diff --git a/news/79.bugfix b/news/79.bugfix\nnew file mode 100644\nindex 0000000..cf55f48\n--- /dev/null\n+++ b/news/79.bugfix\n@@ -0,0 +1,2 @@\n+Fix ram-caching of binary files.\n+[agitator]\n\\ No newline at end of file\ndiff --git a/plone/app/caching/operations/ramcache.py b/plone/app/caching/operations/ramcache.py\nindex 204a251..8c4657e 100644\n--- a/plone/app/caching/operations/ramcache.py\n+++ b/plone/app/caching/operations/ramcache.py\n@@ -41,8 +41,8 @@ def transformIterable(self, result, encoding):\n         if self.responseIsSuccess() and IRAMCached.providedBy(self.request):\n             result = b"".join(result)\n             storeResponseInRAMCache(self.request, self.request.response, result)\n-            # as we have iterated the iterable, we must return a new one\n-            return iter([result])\n+            # ITransform contract allows to return an "encoded string" aka bytes\n+            return result\n         return None\n \n     def responseIsSuccess(self):\n'

