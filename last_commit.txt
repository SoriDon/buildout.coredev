Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-08-31T14:55:17-05:00
Author: T. Kim Nguyen (tkimnguyen) <tkn@alumni.uwaterloo.ca>
Commit: https://github.com/plone/plone.namedfile/commit/4d4a2e89afbd13d960b13dbcf73cbdf393be54e6

remove mention of retina as per https://github.com/plone/Products.CMFPlone/issues/2123

Files changed:
M CHANGES.rst
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/utils/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b03af7c..5578d54 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- remove mention of "retina" (https://github.com/plone/Products.CMFPlone/issues/2123)
+  [tkimnguyen]
 
 
 4.2.2 (2017-07-03)
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 53891ec..84085bf 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -6,7 +6,7 @@
 from plone.namedfile.file import FILECHUNK_CLASSES
 from plone.namedfile.interfaces import IAvailableSizes
 from plone.namedfile.interfaces import IStableImageScale
-from plone.namedfile.utils import getRetinaScales
+from plone.namedfile.utils import getHighPixelDensityScales
 from plone.namedfile.utils import set_headers
 from plone.namedfile.utils import stream_data
 from plone.protect.interfaces import IDisableCSRFProtection
@@ -381,8 +381,12 @@ def getImageSize(self, fieldname=None):
     def guarded_orig_image(self, fieldname):
         return guarded_getattr(self.context, fieldname, None)
 
+    @deprecate('use getHighPixelDensityScales instead')
     def getRetinaScales(self):
-        return getRetinaScales()
+        return getHighPixelDensityScales()
+
+    def getHighPixelDensityScales(self):
+        return getHighPixelDensityScales()
 
     def modified(self):
         """Provide a callable to return the modification time of content
@@ -458,21 +462,21 @@ def calculate_srcset(
         if storage is None:
             return srcset
         (orig_width, orig_height) = self.getImageSize(fieldname)
-        for retinaScale in self.getRetinaScales():
-            # Don't create retina scales larger than the source image.
-            if orig_height and orig_height < height * retinaScale['scale']:
+        for highPixelDensityScale in self.getHighPixelDensityScales():
+            # Don't create high pixel density scales larger than the source image.
+            if orig_height and orig_height < height * highPixelDensityScale['scale']:
                 continue
-            if orig_width and orig_width < width * retinaScale['scale']:
+            if orig_width and orig_width < width * highPixelDensityScale['scale']:
                 continue
-            parameters['quality'] = retinaScale['quality']
+            parameters['quality'] = highPixelDensityScale['quality']
             scale_src = storage.scale(
                 fieldname=fieldname,
-                height=height * retinaScale['scale'],
-                width=width * retinaScale['scale'],
+                height=height * highPixelDensityScale['scale'],
+                width=width * highPixelDensityScale['scale'],
                 direction=direction,
                 **parameters
             )
-            scale_src['scale'] = retinaScale['scale']
+            scale_src['scale'] = highPixelDensityScale['scale']
             if scale_src is not None:
                 srcset.append(scale_src)
         return srcset
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index 6044afc..2b846eb 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -81,8 +81,8 @@ def testCreateScale(self):
         self.assertEqual(foo.height, 80)
         assertImage(self, foo.data.data, 'PNG', (80, 80))
 
-    def testCreateRetinaScale(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testCreateHighPixelDensityScale(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=100, height=80)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -96,10 +96,10 @@ def testCreateScaleWithoutData(self):
         foo = scaling.scale('image', width=100, height=80)
         self.assertEqual(foo, None)
 
-    def testCreateRetinaScaleWithoutData(self):
+    def testCreateHighPixelDensityScaleWithoutData(self):
         item = DummyContent()
         scaling = ImageScaling(item, None)
-        scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = scaling.scale('image', width=100, height=80)
         self.assertFalse(hasattr(foo, 'srcset'))
 
@@ -129,8 +129,8 @@ def testGetScaleByName(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
-    def testGetRetinaScaleByName(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testGetHighPixelDensityScaleByName(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         self.scaling.available_sizes = {'foo': (60, 60)}
         foo = self.scaling.scale('image', scale='foo')
         self.assertTrue(foo.srcset)
@@ -266,10 +266,10 @@ def testScaledJpegImageQuality(self):
         # first one should be bigger
         self.assertTrue(size_foo > size_bar)
 
-    def testOversizedRetinaScale(self):
+    def testOversizedHighPixelDensityScale(self):
         orig_size = max(self.scaling.getImageSize('image'))
         scale_size = orig_size / 2
-        self.scaling.getRetinaScales = lambda: [
+        self.scaling.getHighPixelDensityScales = lambda: [
             {'scale': 2, 'quality': 66},
             {'scale': 3, 'quality': 66}]
         foo = self.scaling.scale('image', width=scale_size, height=scale_size)
diff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py
index 44fa146..f2ad81f 100644
--- a/plone/namedfile/utils/__init__.py
+++ b/plone/namedfile/utils/__init__.py
@@ -8,6 +8,7 @@
 from plone.registry.interfaces import IRegistry
 from StringIO import StringIO
 from zope.component import queryUtility
+from zope.deprecation import deprecate
 
 import mimetypes
 import os.path
@@ -23,7 +24,7 @@
     from Products.CMFPlone.interfaces.controlpanel import IImagingSchema
 except ImportError:
     IImagingSchema = None
-    log.info('IImagingSchema for Retina Scales not available.')
+    log.info('IImagingSchema for high pixel density scales not available.')
 
 
 try:
@@ -272,17 +273,20 @@ def rotate_image(image_data, method=None, REQUEST=None):
     width, height = img.size
     return output_image_data.getvalue(), width, height, exif_data
 
-
+@deprecate('use getHighPixelDensityScales instead')
 def getRetinaScales():
+    return getHighPixelDensityScales()
+
+def getHighPixelDensityScales():
     registry = queryUtility(IRegistry)
     if IImagingSchema and registry:
         settings = registry.forInterface(
             IImagingSchema, prefix='plone', check=False)
-        if settings.retina_scales == '2x':
+        if settings.highpixeldensity_scales == '2x':
             return [
                 {'scale': 2, 'quality': settings.quality_2x},
             ]
-        elif settings.retina_scales == '3x':
+        elif settings.highpixeldensity_scales == '3x':
             return [
                 {'scale': 2, 'quality': settings.quality_2x},
                 {'scale': 3, 'quality': settings.quality_3x},


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-09-21T14:09:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/c503d214d2914e48c9edc9156da6456b5cebadbe

Merge branch 'master' into tkimnguyen-no-retina

Files changed:
M CHANGES.rst
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5578d54..012ef3b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,7 +1,7 @@
 Changelog
 =========
 
-4.2.3 (unreleased)
+4.2.4 (unreleased)
 ------------------
 
 Breaking changes:
@@ -18,6 +18,16 @@ Bug fixes:
   [tkimnguyen]
 
 
+4.2.3 (2017-09-08)
+------------------
+
+Bug fixes:
+
+- Fix bug #56 where ``srcset`` generation failed on no given width or height if there was no sclae given.
+  https://github.com/plone/plone.namedfile/pull/56
+  [jensens]
+
+
 4.2.2 (2017-07-03)
 ------------------
 
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 84085bf..8191701 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -250,7 +250,7 @@ def __call__(
                 logger.exception(
                     'Could not scale "{0!r}" of {1!r}'.format(
                         orig_value,
-                        self.context.absolute_url
+                        self.context.absolute_url,
                     ),
                 )
                 return
@@ -258,7 +258,7 @@ def __call__(
             logger.exception(
                 'Could not scale "{0!r}" of {1!r}'.format(
                     orig_value,
-                    self.context.absolute_url
+                    self.context.absolute_url,
                 ),
             )
             return
@@ -270,7 +270,7 @@ def __call__(
         value = orig_value.__class__(
             data,
             contentType=mimetype,
-            filename=orig_value.filename
+            filename=orig_value.filename,
         )
         value.fieldname = fieldname
         return value, format_, dimensions
@@ -313,7 +313,7 @@ def publishTraverse(self, request, name):
                 self.context,
                 self.request,
                 data=value,
-                fieldname=name
+                fieldname=name,
             )
             return scale_view
         raise NotFound(self, name, self.request)
@@ -327,7 +327,7 @@ def traverse(self, name, furtherPath):
                 self.context,
                 self.request,
                 data=value,
-                fieldname=name
+                fieldname=name,
             )
         else:
             return ImmutableTraverser(self.scale(name, furtherPath[-1]))
@@ -343,7 +343,7 @@ def getAvailableSizes(self, fieldname=None):
         if fieldname:
             logger.warn(
                 'fieldname was passed to deprecated getAvailableSizes, but '
-                'will be ignored.'
+                'will be ignored.',
             )
         return self.available_sizes
 
@@ -415,7 +415,7 @@ def scale(
                 logger.warn(
                     'A scale name and width/heigth are given. Those are'
                     'mutually exclusive: solved by ignoring width/heigth and '
-                    'taking name'
+                    'taking name',
                 )
             available = self.available_sizes
             if scale not in available:
@@ -462,21 +462,29 @@ def calculate_srcset(
         if storage is None:
             return srcset
         (orig_width, orig_height) = self.getImageSize(fieldname)
-        for highPixelDensityScale in self.getHighPixelDensityScales():
-            # Don't create high pixel density scales larger than the source image.
-            if orig_height and orig_height < height * highPixelDensityScale['scale']:
-                continue
-            if orig_width and orig_width < width * highPixelDensityScale['scale']:
+        for hdScale in self.getHighPixelDensityScales():
+            # Don't create retina scales larger than the source image.
+            if (
+                (
+                    height and
+                    orig_height and
+                    orig_height < height * hdScale['scale']
+                ) or (
+                    width and
+                    orig_width and
+                    orig_width < width * hdScale['scale']
+                )
+            ):
                 continue
-            parameters['quality'] = highPixelDensityScale['quality']
+            parameters['quality'] = hdScale['quality']
             scale_src = storage.scale(
                 fieldname=fieldname,
-                height=height * highPixelDensityScale['scale'],
-                width=width * highPixelDensityScale['scale'],
+                height=height * hdScale['scale'] if height else height,
+                width=width * hdScale['scale'] if width else width,
                 direction=direction,
                 **parameters
             )
-            scale_src['scale'] = highPixelDensityScale['scale']
+            scale_src['scale'] = hdScale['scale']
             if scale_src is not None:
                 srcset.append(scale_src)
         return srcset
@@ -496,7 +504,13 @@ def tag(
 
 class NavigationRootScaling(ImageScaling):
     def _scale_cachekey(method, self, brain, fieldname, **kwargs):
-        return (self.context.absolute_url(), brain.UID, brain.modified, fieldname, kwargs)
+        return (
+            self.context.absolute_url(),
+            brain.UID,
+            brain.modified,
+            fieldname,
+            kwargs,
+        )
 
     @ram.cache(_scale_cachekey)
     def tag(self,
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index 2b846eb..a99ff97 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -124,7 +124,7 @@ def testGetScaleByName(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
@@ -152,6 +152,72 @@ def testGetHighPixelDensityScaleByName(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
+    def testGetRetinaScaleByWidthAndHeight(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', width=60, height=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
+    def testGetRetinaScaleByWidthOnly(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', width=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
+    def testGetRetinaScaleByHeightOnly(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', height=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
     def testGetUnknownScale(self):
         foo = self.scaling.scale('image', scale='foo?')
         self.assertEqual(foo, None)
@@ -217,7 +283,7 @@ def testGetOriginalScaleTag(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -228,7 +294,7 @@ def testScaleOnItemWithNonASCIITitle(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -239,7 +305,7 @@ def testScaleOnItemWithUnicodeTitle(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -304,7 +370,7 @@ def traverse(self, path=''):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
diff --git a/setup.py b/setup.py
index 4a5bfb9..63e8126 100644
--- a/setup.py
+++ b/setup.py
@@ -4,7 +4,7 @@
 import os
 
 
-version = '4.2.3.dev0'
+version = '4.2.4.dev0'
 description = 'File types and fields for images, files and blob files with ' \
               'filenames'
 long_description = ('\n\n'.join([


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-10-08T13:11:22+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/e06ee67d8fac826622f104fdb4829887fc8e3d76

fix tests

Files changed:
M plone/namedfile/tests/test_scaling.py

diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index a99ff97..7d690df 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -153,7 +153,7 @@ def testGetHighPixelDensityScaleByName(self):
         self.assertTrue(groups, tag)
 
     def testGetRetinaScaleByWidthAndHeight(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=60, height=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -175,7 +175,7 @@ def testGetRetinaScaleByWidthAndHeight(self):
         self.assertTrue(groups, tag)
 
     def testGetRetinaScaleByWidthOnly(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -197,7 +197,7 @@ def testGetRetinaScaleByWidthOnly(self):
         self.assertTrue(groups, tag)
 
     def testGetRetinaScaleByHeightOnly(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', height=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-10-10T15:09:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/6a1ee06c40955d65afb446827a9a600ccec54d23

Merge pull request #55 from plone/tkimnguyen-no-retina

Remove mention of retina

Files changed:
M CHANGES.rst
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/utils/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 81588ea..012ef3b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- remove mention of "retina" (https://github.com/plone/Products.CMFPlone/issues/2123)
+  [tkimnguyen]
 
 
 4.2.3 (2017-09-08)
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index f2016c8..8191701 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -6,7 +6,7 @@
 from plone.namedfile.file import FILECHUNK_CLASSES
 from plone.namedfile.interfaces import IAvailableSizes
 from plone.namedfile.interfaces import IStableImageScale
-from plone.namedfile.utils import getRetinaScales
+from plone.namedfile.utils import getHighPixelDensityScales
 from plone.namedfile.utils import set_headers
 from plone.namedfile.utils import stream_data
 from plone.protect.interfaces import IDisableCSRFProtection
@@ -381,8 +381,12 @@ def getImageSize(self, fieldname=None):
     def guarded_orig_image(self, fieldname):
         return guarded_getattr(self.context, fieldname, None)
 
+    @deprecate('use getHighPixelDensityScales instead')
     def getRetinaScales(self):
-        return getRetinaScales()
+        return getHighPixelDensityScales()
+
+    def getHighPixelDensityScales(self):
+        return getHighPixelDensityScales()
 
     def modified(self):
         """Provide a callable to return the modification time of content
@@ -458,29 +462,29 @@ def calculate_srcset(
         if storage is None:
             return srcset
         (orig_width, orig_height) = self.getImageSize(fieldname)
-        for retinaScale in self.getRetinaScales():
+        for hdScale in self.getHighPixelDensityScales():
             # Don't create retina scales larger than the source image.
             if (
                 (
                     height and
                     orig_height and
-                    orig_height < height * retinaScale['scale']
+                    orig_height < height * hdScale['scale']
                 ) or (
                     width and
                     orig_width and
-                    orig_width < width * retinaScale['scale']
+                    orig_width < width * hdScale['scale']
                 )
             ):
                 continue
-            parameters['quality'] = retinaScale['quality']
+            parameters['quality'] = hdScale['quality']
             scale_src = storage.scale(
                 fieldname=fieldname,
-                height=height * retinaScale['scale'] if height else height,
-                width=width * retinaScale['scale'] if width else width,
+                height=height * hdScale['scale'] if height else height,
+                width=width * hdScale['scale'] if width else width,
                 direction=direction,
                 **parameters
             )
-            scale_src['scale'] = retinaScale['scale']
+            scale_src['scale'] = hdScale['scale']
             if scale_src is not None:
                 srcset.append(scale_src)
         return srcset
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index b99d225..7d690df 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -81,8 +81,8 @@ def testCreateScale(self):
         self.assertEqual(foo.height, 80)
         assertImage(self, foo.data.data, 'PNG', (80, 80))
 
-    def testCreateRetinaScale(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testCreateHighPixelDensityScale(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=100, height=80)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -96,10 +96,10 @@ def testCreateScaleWithoutData(self):
         foo = scaling.scale('image', width=100, height=80)
         self.assertEqual(foo, None)
 
-    def testCreateRetinaScaleWithoutData(self):
+    def testCreateHighPixelDensityScaleWithoutData(self):
         item = DummyContent()
         scaling = ImageScaling(item, None)
-        scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = scaling.scale('image', width=100, height=80)
         self.assertFalse(hasattr(foo, 'srcset'))
 
@@ -129,8 +129,8 @@ def testGetScaleByName(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
-    def testGetRetinaScaleByName(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testGetHighPixelDensityScaleByName(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         self.scaling.available_sizes = {'foo': (60, 60)}
         foo = self.scaling.scale('image', scale='foo')
         self.assertTrue(foo.srcset)
@@ -153,7 +153,7 @@ def testGetRetinaScaleByName(self):
         self.assertTrue(groups, tag)
 
     def testGetRetinaScaleByWidthAndHeight(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=60, height=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -175,7 +175,7 @@ def testGetRetinaScaleByWidthAndHeight(self):
         self.assertTrue(groups, tag)
 
     def testGetRetinaScaleByWidthOnly(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -197,7 +197,7 @@ def testGetRetinaScaleByWidthOnly(self):
         self.assertTrue(groups, tag)
 
     def testGetRetinaScaleByHeightOnly(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', height=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -332,10 +332,10 @@ def testScaledJpegImageQuality(self):
         # first one should be bigger
         self.assertTrue(size_foo > size_bar)
 
-    def testOversizedRetinaScale(self):
+    def testOversizedHighPixelDensityScale(self):
         orig_size = max(self.scaling.getImageSize('image'))
         scale_size = orig_size / 2
-        self.scaling.getRetinaScales = lambda: [
+        self.scaling.getHighPixelDensityScales = lambda: [
             {'scale': 2, 'quality': 66},
             {'scale': 3, 'quality': 66}]
         foo = self.scaling.scale('image', width=scale_size, height=scale_size)
diff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py
index 44fa146..f2ad81f 100644
--- a/plone/namedfile/utils/__init__.py
+++ b/plone/namedfile/utils/__init__.py
@@ -8,6 +8,7 @@
 from plone.registry.interfaces import IRegistry
 from StringIO import StringIO
 from zope.component import queryUtility
+from zope.deprecation import deprecate
 
 import mimetypes
 import os.path
@@ -23,7 +24,7 @@
     from Products.CMFPlone.interfaces.controlpanel import IImagingSchema
 except ImportError:
     IImagingSchema = None
-    log.info('IImagingSchema for Retina Scales not available.')
+    log.info('IImagingSchema for high pixel density scales not available.')
 
 
 try:
@@ -272,17 +273,20 @@ def rotate_image(image_data, method=None, REQUEST=None):
     width, height = img.size
     return output_image_data.getvalue(), width, height, exif_data
 
-
+@deprecate('use getHighPixelDensityScales instead')
 def getRetinaScales():
+    return getHighPixelDensityScales()
+
+def getHighPixelDensityScales():
     registry = queryUtility(IRegistry)
     if IImagingSchema and registry:
         settings = registry.forInterface(
             IImagingSchema, prefix='plone', check=False)
-        if settings.retina_scales == '2x':
+        if settings.highpixeldensity_scales == '2x':
             return [
                 {'scale': 2, 'quality': settings.quality_2x},
             ]
-        elif settings.retina_scales == '3x':
+        elif settings.highpixeldensity_scales == '3x':
             return [
                 {'scale': 2, 'quality': settings.quality_2x},
                 {'scale': 3, 'quality': settings.quality_3x},


