Repository: plone.volto


Branch: refs/heads/main
Date: 2022-02-03T22:23:08+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/b85ab5897c677cb8fbecd02aa8ca41dcd3f22a96

Fix black

Files changed:
M src/plone/volto/behaviors/navtitle.py
M src/plone/volto/behaviors/preview.py
M src/plone/volto/browser/navigation.py
M src/plone/volto/coresandbox/example.py
M src/plone/volto/interfaces.py
M src/plone/volto/tests/test_scripts.py
M src/plone/volto/tests/test_upgrades.py

b'diff --git a/src/plone/volto/behaviors/navtitle.py b/src/plone/volto/behaviors/navtitle.py\nindex 871ff10..c4f9346 100644\n--- a/src/plone/volto/behaviors/navtitle.py\n+++ b/src/plone/volto/behaviors/navtitle.py\n@@ -9,4 +9,4 @@\n @provider(IFormFieldProvider)\n class INavTitle(model.Schema):\n \n-    nav_title = TextLine(title=_(u"Navigation title"), required=False)\n+    nav_title = TextLine(title=_("Navigation title"), required=False)\ndiff --git a/src/plone/volto/behaviors/preview.py b/src/plone/volto/behaviors/preview.py\nindex fa530ac..3f002be 100644\n--- a/src/plone/volto/behaviors/preview.py\n+++ b/src/plone/volto/behaviors/preview.py\n@@ -11,14 +11,14 @@\n class IPreview(model.Schema):\n \n     preview_image = namedfile.NamedBlobImage(\n-        title=_(u"label_previewimage", default=u"Preview image"),\n+        title=_("label_previewimage", default="Preview image"),\n         description=_(\n-            u"help_previewimage",\n-            default=u"Insert an image that will be used in listing and teaser blocks.",\n+            "help_previewimage",\n+            default="Insert an image that will be used in listing and teaser blocks.",\n         ),\n         required=False,\n     )\n \n     preview_caption = TextLine(\n-        title=_(u"Preview image caption"), description=u"", required=False\n+        title=_("Preview image caption"), description="", required=False\n     )\ndiff --git a/src/plone/volto/browser/navigation.py b/src/plone/volto/browser/navigation.py\nindex 1980fa8..f2b01d6 100644\n--- a/src/plone/volto/browser/navigation.py\n+++ b/src/plone/volto/browser/navigation.py\n@@ -62,7 +62,7 @@ def topLevelTabs(self, actions=None, category="portal_tabs"):\n \n         if actions is None:\n             context_state = getMultiAdapter(\n-                (context, self.request), name=u"plone_context_state"\n+                (context, self.request), name="plone_context_state"\n             )\n             actions = context_state.actions(category)\n \ndiff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nindex 33a0d9e..51b5e6d 100644\n--- a/src/plone/volto/coresandbox/example.py\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -40,13 +40,13 @@ class IExample(model.Schema):\n \n     fieldset(\n         "numberfields",\n-        label=u"Number fields",\n+        label="Number fields",\n         fields=("int_field", "float_field"),\n     )\n \n     fieldset(\n         "datetimefields",\n-        label=u"Date and time fields",\n+        label="Date and time fields",\n         fields=(\n             "datetime_field",\n             "date_field",\n@@ -57,7 +57,7 @@ class IExample(model.Schema):\n \n     fieldset(\n         "choicefields",\n-        label=u"Choice and Multiple Choice fields",\n+        label="Choice and Multiple Choice fields",\n         fields=(\n             "choice_field",\n             "choice_field_radio",\n@@ -77,7 +77,7 @@ class IExample(model.Schema):\n \n     fieldset(\n         "relationfields",\n-        label=u"Relation fields",\n+        label="Relation fields",\n         fields=(\n             "relationchoice_field",\n             "relationlist_field",\n@@ -95,7 +95,7 @@ class IExample(model.Schema):\n \n     fieldset(\n         "uuidrelationfields",\n-        label=u"Relation widgets with uuids",\n+        label="Relation widgets with uuids",\n         fields=(\n             "uuid_choice_field",\n             "uuid_list_field",\n@@ -113,13 +113,13 @@ class IExample(model.Schema):\n \n     fieldset(\n         "filefields",\n-        label=u"File fields",\n+        label="File fields",\n         fields=("file_field", "image_field"),\n     )\n \n     fieldset(\n         "otherfields",\n-        label=u"Other fields",\n+        label="Other fields",\n         fields=(\n             "available_languages",\n             "uri_field",\n@@ -138,68 +138,68 @@ class IExample(model.Schema):\n \n     primary("title")\n     title = schema.TextLine(\n-        title=u"Primary Field (Textline)",\n-        description=u"zope.schema.TextLine",\n+        title="Primary Field (Textline)",\n+        description="zope.schema.TextLine",\n         required=True,\n     )\n \n     description = schema.TextLine(\n-        title=u"Description (Textline)",\n-        description=u"zope.schema.TextLine",\n+        title="Description (Textline)",\n+        description="zope.schema.TextLine",\n         required=False,\n     )\n \n     text_field = schema.Text(\n-        title=u"Text Field", description=u"zope.schema.Text", required=False\n+        title="Text Field", description="zope.schema.Text", required=False\n     )\n \n     textline_field = schema.TextLine(\n-        title=u"Textline field",\n-        description=u"A simple input field (schema.TextLine)",\n+        title="Textline field",\n+        description="A simple input field (schema.TextLine)",\n         required=False,\n     )\n \n     bool_field = schema.Bool(\n-        title=u"Boolean field",\n-        description=u"zope.schema.Bool",\n+        title="Boolean field",\n+        description="zope.schema.Bool",\n         required=False,\n     )\n \n     choice_field = schema.Choice(\n-        title=u"Choice field",\n-        description=u"zope.schema.Choice",\n-        values=[u"One", u"Two", u"Three"],\n+        title="Choice field",\n+        description="zope.schema.Choice",\n+        values=["One", "Two", "Three"],\n         required=False,\n     )\n \n     directives.widget(choice_field_radio=RadioFieldWidget)\n     choice_field_radio = schema.Choice(\n-        title=u"Choice field with radio boxes",\n-        description=u"zope.schema.Choice",\n-        values=[u"One", u"Two", u"Three"],\n+        title="Choice field with radio boxes",\n+        description="zope.schema.Choice",\n+        values=["One", "Two", "Three"],\n         required=False,\n     )\n \n     choice_field_voc = schema.Choice(\n-        title=u"Choicefield with values from named vocabulary",\n-        description=u"zope.schema.Choice",\n+        title="Choicefield with values from named vocabulary",\n+        description="zope.schema.Choice",\n         vocabulary="plone.app.vocabularies.PortalTypes",\n         required=False,\n     )\n \n     directives.widget(choice_field_select=SelectFieldWidget)\n     choice_field_select = schema.Choice(\n-        title=u"Choicefield with select2 widget",\n-        description=u"zope.schema.Choice",\n+        title="Choicefield with select2 widget",\n+        description="zope.schema.Choice",\n         vocabulary="plone.app.vocabularies.PortalTypes",\n         required=False,\n     )\n \n     list_field = schema.List(\n-        title=u"List field",\n-        description=u"zope.schema.List",\n+        title="List field",\n+        description="zope.schema.List",\n         value_type=schema.Choice(\n-            values=[u"Beginner", u"Advanced", u"Professional"],\n+            values=["Beginner", "Advanced", "Professional"],\n         ),\n         required=False,\n         missing_value=[],\n@@ -208,10 +208,10 @@ class IExample(model.Schema):\n \n     directives.widget(list_field_checkbox=CheckBoxFieldWidget)\n     list_field_checkbox = schema.List(\n-        title=u"List field with checkboxes",\n-        description=u"zope.schema.List",\n+        title="List field with checkboxes",\n+        description="zope.schema.List",\n         value_type=schema.Choice(\n-            values=[u"Beginner", u"Advanced", u"Professional"],\n+            values=["Beginner", "Advanced", "Professional"],\n         ),\n         required=False,\n         missing_value=[],\n@@ -220,10 +220,10 @@ class IExample(model.Schema):\n \n     directives.widget(list_field_select=SelectFieldWidget)\n     list_field_select = schema.List(\n-        title=u"List field with select widget",\n-        description=u"zope.schema.List",\n+        title="List field with select widget",\n+        description="zope.schema.List",\n         value_type=schema.Choice(\n-            values=[u"Beginner", u"Advanced", u"Professional"],\n+            values=["Beginner", "Advanced", "Professional"],\n         ),\n         required=False,\n         missing_value=[],\n@@ -231,8 +231,8 @@ class IExample(model.Schema):\n     )\n \n     list_field_voc_unconstrained = schema.List(\n-        title=u"List field with values from vocabulary but not constrained to them.",\n-        description=u"zope.schema.List",\n+        title="List field with values from vocabulary but not constrained to them.",\n+        description="zope.schema.List",\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=[],\n@@ -248,8 +248,8 @@ class IExample(model.Schema):\n     )\n \n     list_field_voc_huge = schema.List(\n-        title=u"List field with values from a huge vocabulary",\n-        description=u"zope.schema.List",\n+        title="List field with values from a huge vocabulary",\n+        description="zope.schema.List",\n         value_type=schema.Choice(\n             vocabulary="plone.volto.coresandbox.vocabularies.huge",\n         ),\n@@ -263,8 +263,8 @@ class IExample(model.Schema):\n     )\n \n     list_field_voc_huge_unconstrained = schema.List(\n-        title=u"List field with values from a huge vocabulary but unconstrained",\n-        description=u"zope.schema.List",\n+        title="List field with values from a huge vocabulary but unconstrained",\n+        description="zope.schema.List",\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=[],\n@@ -277,10 +277,10 @@ class IExample(model.Schema):\n     )\n \n     tuple_field = schema.Tuple(\n-        title=u"Tuple field",\n-        description=u"zope.schema.Tuple",\n+        title="Tuple field",\n+        description="zope.schema.Tuple",\n         value_type=schema.Choice(\n-            values=[u"Beginner", u"Advanced", u"Professional"],\n+            values=["Beginner", "Advanced", "Professional"],\n         ),\n         required=False,\n         missing_value=(),\n@@ -288,10 +288,10 @@ class IExample(model.Schema):\n     )\n \n     set_field = schema.Set(\n-        title=u"Set field",\n-        description=u"zope.schema.Set",\n+        title="Set field",\n+        description="zope.schema.Set",\n         value_type=schema.Choice(\n-            values=[u"Beginner", u"Advanced", u"Professional"],\n+            values=["Beginner", "Advanced", "Professional"],\n         ),\n         required=False,\n         missing_value={},\n@@ -300,10 +300,10 @@ class IExample(model.Schema):\n \n     directives.widget(set_field_checkbox=CheckBoxFieldWidget)\n     set_field_checkbox = schema.Set(\n-        title=u"Set field with checkboxes",\n-        description=u"zope.schema.Set",\n+        title="Set field with checkboxes",\n+        description="zope.schema.Set",\n         value_type=schema.Choice(\n-            values=[u"Beginner", u"Advanced", u"Professional"],\n+            values=["Beginner", "Advanced", "Professional"],\n         ),\n         required=False,\n         missing_value={},\n@@ -312,27 +312,27 @@ class IExample(model.Schema):\n \n     # File fields\n     image_field = NamedBlobImage(\n-        title=u"Image field",\n-        description=u"A upload field for images (plone.namedfile.field.NamedBlobImage)",\n+        title="Image field",\n+        description="A upload field for images (plone.namedfile.field.NamedBlobImage)",\n         required=False,\n     )\n \n     file_field = NamedBlobFile(\n-        title=u"File field",\n-        description=u"A upload field for files (plone.namedfile.field.NamedBlobFile)",\n+        title="File field",\n+        description="A upload field for files (plone.namedfile.field.NamedBlobFile)",\n         required=False,\n     )\n \n     # Date and Time fields\n     datetime_field = schema.Datetime(\n-        title=u"Datetime field",\n-        description=u"Uses a date and time picker (zope.schema.Datetime)",\n+        title="Datetime field",\n+        description="Uses a date and time picker (zope.schema.Datetime)",\n         required=False,\n     )\n \n     date_field = schema.Date(\n-        title=u"Date field",\n-        description=u"Uses a date picker (zope.schema.Date)",\n+        title="Date field",\n+        description="Uses a date picker (zope.schema.Date)",\n         required=False,\n     )\n \n@@ -352,15 +352,15 @@ class IExample(model.Schema):\n \n     # # Relation Fields\n     relationchoice_field = RelationChoice(\n-        title=u"Relationchoice field",\n-        description=u"z3c.relationfield.schema.RelationChoice",\n+        title="Relationchoice field",\n+        description="z3c.relationfield.schema.RelationChoice",\n         vocabulary="plone.app.vocabularies.Catalog",\n         required=False,\n     )\n \n     relationlist_field = RelationList(\n-        title=u"Relationlist Field",\n-        description=u"z3c.relationfield.schema.RelationList",\n+        title="Relationlist Field",\n+        description="z3c.relationfield.schema.RelationList",\n         default=[],\n         value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n         required=False,\n@@ -368,8 +368,8 @@ class IExample(model.Schema):\n     )\n \n     relationchoice_field_constrained = RelationChoice(\n-        title=u"Relationchoice field (only allows Documents)",\n-        description=u"z3c.relationfield.schema.RelationChoice",\n+        title="Relationchoice field (only allows Documents)",\n+        description="z3c.relationfield.schema.RelationChoice",\n         vocabulary="plone.app.vocabularies.Catalog",\n         required=False,\n     )\n@@ -380,8 +380,8 @@ class IExample(model.Schema):\n     )\n \n     relationlist_field_constrained = RelationList(\n-        title=u"Relationlist Field (only allows Documents and Events)",\n-        description=u"z3c.relationfield.schema.RelationList",\n+        title="Relationlist Field (only allows Documents and Events)",\n+        description="z3c.relationfield.schema.RelationList",\n         default=[],\n         value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n         required=False,\n@@ -394,8 +394,8 @@ class IExample(model.Schema):\n     )\n \n     relationlist_field_search_mode = RelationList(\n-        title=u"Relationlist Field in Search Mode (constrained to published Documents and Events)",\n-        description=u"z3c.relationfield.schema.RelationList",\n+        title="Relationlist Field in Search Mode (constrained to published Documents and Events)",\n+        description="z3c.relationfield.schema.RelationList",\n         default=[],\n         value_type=RelationChoice(\n             source=CatalogSource(\n@@ -430,7 +430,7 @@ class IExample(model.Schema):\n     # This one also works in Volto!\n     # All other options use the default ObjectWidget in Volto so far.\n     relationchoice_field_select = RelationChoice(\n-        title=u"RelationChoice with Select Widget",\n+        title="RelationChoice with Select Widget",\n         vocabulary=StaticCatalogVocabulary(\n             {\n                 "portal_type": ["Document", "Event"],\n@@ -445,7 +445,7 @@ class IExample(model.Schema):\n     )\n \n     relationchoice_field_radio = RelationChoice(\n-        title=u"RelationChoice with Radio Widget (and customized title-template)",\n+        title="RelationChoice with Radio Widget (and customized title-template)",\n         vocabulary=StaticCatalogVocabulary(\n             {\n                 "portal_type": ["Document", "Event"],\n@@ -461,7 +461,7 @@ class IExample(model.Schema):\n     )\n \n     relationlist_field_select = RelationList(\n-        title=u"RelationList with select widget with items from a named vocabulary",\n+        title="RelationList with select widget with items from a named vocabulary",\n         value_type=RelationChoice(\n             vocabulary="plone.volto.coresandbox.vocabularies.documents",\n         ),\n@@ -476,7 +476,7 @@ class IExample(model.Schema):\n     )\n \n     relationlist_field_checkbox = RelationList(\n-        title=u"RelationList with Checkboxes",\n+        title="RelationList with Checkboxes",\n         value_type=RelationChoice(\n             vocabulary="plone.volto.coresandbox.vocabularies.documents",\n         ),\n@@ -545,16 +545,16 @@ class IExample(model.Schema):\n     # as a string in a the field instead of a RelationValue.\n     # A good way to use these is in combination with a index that allows you to query these connenctions.\n     uuid_choice_field = schema.Choice(\n-        title=u"Choice field with RelatedItems widget storing uuids",\n-        description=u"schema.Choice",\n+        title="Choice field with RelatedItems widget storing uuids",\n+        description="schema.Choice",\n         vocabulary="plone.app.vocabularies.Catalog",\n         required=False,\n     )\n     directives.widget("uuid_choice_field", RelatedItemsFieldWidget)\n \n     uuid_list_field = schema.List(\n-        title=u"List Field with RelatedItems widget storing uuids",\n-        description=u"schema.List",\n+        title="List Field with RelatedItems widget storing uuids",\n+        description="schema.List",\n         default=[],\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.Catalog"),\n         required=False,\n@@ -563,8 +563,8 @@ class IExample(model.Schema):\n     directives.widget("uuid_list_field", RelatedItemsFieldWidget)\n \n     uuid_choice_field_constrained = schema.Choice(\n-        title=u"Choice field with RelatedItems widget storing uuids (only allows Documents)",\n-        description=u"schema.Choice",\n+        title="Choice field with RelatedItems widget storing uuids (only allows Documents)",\n+        description="schema.Choice",\n         vocabulary="plone.app.vocabularies.Catalog",\n         required=False,\n     )\n@@ -575,8 +575,8 @@ class IExample(model.Schema):\n     )\n \n     uuid_list_field_constrained = schema.List(\n-        title=u"List Field with RelatedItems widget storing uuids (only allows Documents and Events)",\n-        description=u"schema.List",\n+        title="List Field with RelatedItems widget storing uuids (only allows Documents and Events)",\n+        description="schema.List",\n         default=[],\n         value_type=schema.Choice(vocabulary="plone.app.vocabularies.Catalog"),\n         required=False,\n@@ -589,8 +589,8 @@ class IExample(model.Schema):\n     )\n \n     uuid_list_field_search_mode = schema.List(\n-        title=u"List Field with RelatedItems widget in Search Mode storing uuids",\n-        description=u"schema.List",\n+        title="List Field with RelatedItems widget in Search Mode storing uuids",\n+        description="schema.List",\n         default=[],\n         value_type=schema.Choice(\n             source=CatalogSource(\n@@ -613,7 +613,7 @@ class IExample(model.Schema):\n     # From here on we use other widgets than the default RelatedItemsFieldWidget\n \n     uuid_choice_field_select = schema.Choice(\n-        title=u"UUID Choice with select widget storing uuids",\n+        title="UUID Choice with select widget storing uuids",\n         vocabulary=StaticCatalogVocabulary(\n             {\n                 "portal_type": ["Document", "Event"],\n@@ -628,7 +628,7 @@ class IExample(model.Schema):\n     )\n \n     uuid_choice_field_radio = schema.Choice(\n-        title=u"RelationChoice with Radio widget storing uuids",\n+        title="RelationChoice with Radio widget storing uuids",\n         vocabulary=StaticCatalogVocabulary(\n             {\n                 "portal_type": ["Document", "Event"],\n@@ -644,7 +644,7 @@ class IExample(model.Schema):\n     )\n \n     uuid_list_field_select = schema.List(\n-        title=u"RelationList with select widget with items from a named vocabulary storing uuids",\n+        title="RelationList with select widget with items from a named vocabulary storing uuids",\n         value_type=schema.Choice(\n             vocabulary="plone.volto.coresandbox.vocabularies.documents",\n         ),\n@@ -659,7 +659,7 @@ class IExample(model.Schema):\n     )\n \n     uuid_list_field_checkbox = schema.List(\n-        title=u"RelationList with Checkboxes storing uuids",\n+        title="RelationList with Checkboxes storing uuids",\n         value_type=schema.Choice(\n             vocabulary="plone.volto.coresandbox.vocabularies.documents",\n         ),\n@@ -727,93 +727,93 @@ class IExample(model.Schema):\n \n     # Number fields\n     int_field = schema.Int(\n-        title=u"Integer Field (e.g. 12)",\n-        description=u"zope.schema.Int",\n+        title="Integer Field (e.g. 12)",\n+        description="zope.schema.Int",\n         required=False,\n     )\n \n     float_field = schema.Float(\n-        title=u"Float field, e.g. 12.7",\n-        description=u"zope.schema.Float",\n+        title="Float field, e.g. 12.7",\n+        description="zope.schema.Float",\n         required=False,\n     )\n \n     # Text fields\n     email_field = Email(\n-        title=u"Email field",\n-        description=u"A simple input field for a email (plone.schema.email.Email)",\n+        title="Email field",\n+        description="A simple input field for a email (plone.schema.email.Email)",\n         required=False,\n     )\n \n     uri_field = schema.URI(\n-        title=u"URI field",\n-        description=u"A simple input field for a URLs (zope.schema.URI)",\n+        title="URI field",\n+        description="A simple input field for a URLs (zope.schema.URI)",\n         required=False,\n     )\n \n     richtext_field = RichText(\n-        title=u"RichText field",\n-        description=u"This uses a richtext editor. (plone.app.textfield.RichText)",\n+        title="RichText field",\n+        description="This uses a richtext editor. (plone.app.textfield.RichText)",\n         max_length=2000,\n         required=False,\n     )\n \n     sourcetext_field = schema.SourceText(\n-        title=u"SourceText field",\n-        description=u"zope.schema.SourceText",\n+        title="SourceText field",\n+        description="zope.schema.SourceText",\n         required=False,\n     )\n \n     ascii_field = schema.ASCII(\n-        title=u"ASCII field",\n-        description=u"zope.schema.ASCII",\n+        title="ASCII field",\n+        description="zope.schema.ASCII",\n         required=False,\n     )\n \n     bytesline_field = schema.BytesLine(\n-        title=u"BytesLine field",\n-        description=u"zope.schema.BytesLine",\n+        title="BytesLine field",\n+        description="zope.schema.BytesLine",\n         required=False,\n     )\n \n     asciiline_field = schema.ASCIILine(\n-        title=u"ASCIILine field",\n-        description=u"zope.schema.ASCIILine",\n+        title="ASCIILine field",\n+        description="zope.schema.ASCIILine",\n         required=False,\n     )\n \n     pythonidentifier_field = schema.PythonIdentifier(\n-        title=u"PythonIdentifier field",\n-        description=u"zope.schema.PythonIdentifier",\n+        title="PythonIdentifier field",\n+        description="zope.schema.PythonIdentifier",\n         required=False,\n     )\n \n     dottedname_field = schema.DottedName(\n-        title=u"DottedName field",\n-        description=u"zope.schema.DottedName",\n+        title="DottedName field",\n+        description="zope.schema.DottedName",\n         required=False,\n     )\n \n     dict_field = schema.Dict(\n-        title=u"Dict field",\n-        description=u"zope.schema.Dict",\n+        title="Dict field",\n+        description="zope.schema.Dict",\n         required=False,\n         key_type=schema.TextLine(\n-            title=u"Key",\n+            title="Key",\n             required=False,\n         ),\n         value_type=schema.TextLine(\n-            title=u"Value",\n+            title="Value",\n             required=False,\n         ),\n     )\n \n     # Special (control panel) fields\n     available_languages = schema.List(\n-        title=_(u"heading_available_languages", default=u"Available languages"),\n+        title=_("heading_available_languages", default="Available languages"),\n         description=_(\n-            u"description_available_languages",\n-            default=u"The languages in which the site should be " u"translatable.",\n+            "description_available_languages",\n+            default="The languages in which the site should be " "translatable.",\n         ),\n         required=True,\n         default=["en"],\n@@ -863,18 +863,18 @@ class IExample(model.Schema):\n     # )\n \n     dict_field_with_choice = schema.Dict(\n-        title=u"Dict field with key and value as choice",\n-        description=u"zope.schema.Dict",\n+        title="Dict field with key and value as choice",\n+        description="zope.schema.Dict",\n         required=False,\n         key_type=schema.Choice(\n-            title=u"Key",\n-            values=[u"One", u"Two", u"Three"],\n+            title="Key",\n+            values=["One", "Two", "Three"],\n             required=False,\n         ),\n         value_type=schema.Set(\n-            title=u"Value",\n+            title="Value",\n             value_type=schema.Choice(\n-                values=[u"Beginner", u"Advanced", u"Professional"],\n+                values=["Beginner", "Advanced", "Professional"],\n             ),\n             required=False,\n             missing_value={},\ndiff --git a/src/plone/volto/interfaces.py b/src/plone/volto/interfaces.py\nindex 9938251..8d7b883 100644\n--- a/src/plone/volto/interfaces.py\n+++ b/src/plone/volto/interfaces.py\n@@ -17,8 +17,8 @@ class IVoltoSettings(Interface):\n     """Volto settings necessary to store in the backend"""\n \n     frontend_domain = schema.URI(\n-        title=u"Frontend domain",\n-        description=u"Used for rewriting URL\'s sent in the password reset e-mail by Plone.",\n+        title="Frontend domain",\n+        description="Used for rewriting URL\'s sent in the password reset e-mail by Plone.",\n         default="http://localhost:3000",\n     )\n \ndiff --git a/src/plone/volto/tests/test_scripts.py b/src/plone/volto/tests/test_scripts.py\nindex d64bd63..a38c3e6 100644\n--- a/src/plone/volto/tests/test_scripts.py\n+++ b/src/plone/volto/tests/test_scripts.py\n@@ -23,7 +23,7 @@ def setUp(self):\n         behavior_list.append("volto.blocks")\n         fti.behaviors = tuple(behavior_list)\n \n-        self.portal.invokeFactory("Document", id=u"doc1")\n+        self.portal.invokeFactory("Document", id="doc1")\n         self.doc1 = self.portal["doc1"]\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image1", title="Target image")\ndiff --git a/src/plone/volto/tests/test_upgrades.py b/src/plone/volto/tests/test_upgrades.py\nindex 22eac64..75dfb24 100644\n--- a/src/plone/volto/tests/test_upgrades.py\n+++ b/src/plone/volto/tests/test_upgrades.py\n@@ -28,7 +28,7 @@ def setUp(self):\n         behavior_list.append("volto.blocks")\n         fti.behaviors = tuple(behavior_list)\n \n-        self.portal.invokeFactory("Document", id=u"doc1")\n+        self.portal.invokeFactory("Document", id="doc1")\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n         ]\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2022-02-03T22:23:19+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/749ba6d266c8ab3031adaa9e8797bee841dcaa95

Add pypi badge

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 2a6f4b8..d043082 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,6 +2,8 @@\n    If you want to learn more about writing documentation, please check out: http://docs.plone.org/about/documentation_styleguide.html\n    This text does not appear on pypi or github. It is a comment.\n \n+.. image:: https://img.shields.io/pypi/v/plone.volto.svg\n+  :target: https://pypi.python.org/pypi/plone.volto\n \n .. image:: https://github.com/plone/plone.volto/actions/workflows/tests.yml/badge.svg\n     :target: https://github.com/plone/plone.volto/actions/workflows/tests.yml\n'

