Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:29:38+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/217771ae7909de34f4d4c80403e0d8762ff2e827

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5cc689e5.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..1b2346d\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 3e97765..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[check-manifest]\n-ignore =\n-    bootstrap.py\n-    *.cfg\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c5e3f4f\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.folder {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.folder {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:31:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/3260c06331f8135ca96cf6aef60b6b4023ef3e0e

chore: pyupgrade

Files changed:
M src/plone/__init__.py
M src/plone/folder/__init__.py
M src/plone/folder/default.py
M src/plone/folder/interfaces.py
M src/plone/folder/nogopip.py
M src/plone/folder/ordered.py
M src/plone/folder/partial.py
M src/plone/folder/testing.py
M src/plone/folder/tests/benchmarks.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_ordersupport.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py
M src/plone/folder/tests/utils.py
M src/plone/folder/unordered.py

b'diff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/folder/__init__.py b/src/plone/folder/__init__.py\nindex 40a96af..e69de29 100644\n--- a/src/plone/folder/__init__.py\n+++ b/src/plone/folder/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/plone/folder/default.py b/src/plone/folder/default.py\nindex 84d4c8d..7294f66 100644\n--- a/src/plone/folder/default.py\n+++ b/src/plone/folder/default.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OIBTree import OIBTree\n from persistent.list import PersistentList\n from plone.folder.interfaces import IExplicitOrdering\n@@ -13,7 +12,7 @@\n \n @implementer(IExplicitOrdering)\n @adapter(IOrderableFolder)\n-class DefaultOrdering(object):\n+class DefaultOrdering:\n     """ This implementation uses annotations to store the order on the\n         object, and supports explicit ordering. """\n \n@@ -55,7 +54,7 @@ def moveObjectsByDelta(\n         order = self._order()\n         pos = self._pos()\n         min_position = 0\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         if subset_ids is None:\n             subset_ids = self.idsInOrder()\n@@ -95,7 +94,7 @@ def moveObjectsByDelta(\n                     idx += 1\n                 except KeyError:\n                     raise ValueError(\n-                        \'No object with id "{0:s}" exists.\'.format(obj_id)\n+                        f\'No object with id "{obj_id:s}" exists.\'\n                     )\n         if not suppress_events:\n             notifyContainerModified(self.context)\n@@ -155,7 +154,7 @@ def getObjectPosition(self, obj_id):\n         pos = self._pos()\n         if obj_id in pos:\n             return pos[obj_id]\n-        raise ValueError(\'No object with id "{0:s}" exists in "{1:s}".\'.format(\n+        raise ValueError(\'No object with id "{:s}" exists in "{:s}".\'.format(\n             obj_id, \'/\'.join(self.context.getPhysicalPath())))\n \n     def idsInOrder(self):\ndiff --git a/src/plone/folder/interfaces.py b/src/plone/folder/interfaces.py\nindex 4f5fef4..2a73a21 100644\n--- a/src/plone/folder/interfaces.py\n+++ b/src/plone/folder/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n@@ -16,7 +15,7 @@ class IOrderableFolder(IFolder):\n     def getOrdering():\n         """ return the currently active ordering adapter for this folder """\n \n-    def setOrdering(ordering=u\'\'):\n+    def setOrdering(ordering=\'\'):\n         """ (re)set ordering adapter to be used for this folder """\n \n \ndiff --git a/src/plone/folder/nogopip.py b/src/plone/folder/nogopip.py\nindex 24d6d2d..e89eec2 100644\n--- a/src/plone/folder/nogopip.py\n+++ b/src/plone/folder/nogopip.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from App.special_dtml import DTMLFile\n from inspect import currentframe\n@@ -72,7 +71,7 @@ class GopipIndex(StubIndex):\n     keyForDocument = 42\n \n     def __init__(self, id, extra=None, caller=None):\n-        super(GopipIndex, self).__init__(id)\n+        super().__init__(id)\n         self.catalog = aq_base(caller._catalog)\n \n     def __len__(self):\ndiff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex fac2cd6..c7a7882 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.Permissions import access_contents_information\n from AccessControl.Permissions import manage_properties\n@@ -33,7 +32,7 @@ class OrderedBTreeFolderBase(BTreeFolder2Base):\n         is done by a named adapter (to IOrdering), which makes the policy\n         changeable. """\n \n-    _ordering = u\'\'         # name of adapter defining ordering policy\n+    _ordering = \'\'         # name of adapter defining ordering policy\n \n     security = ClassSecurityInfo()\n \n@@ -50,7 +49,7 @@ def getOrdering(self):\n         return adapter\n \n     @security.protected(manage_properties)\n-    def setOrdering(self, ordering=u\'\'):\n+    def setOrdering(self, ordering=\'\'):\n         """ (re)set ordering adapter to be used for this folder """\n         if ordering:\n             # make sure the adapter exists...\n@@ -62,28 +61,28 @@ def setOrdering(self, ordering=u\'\'):\n     def _getOb(self, id, default=_marker):\n         """ Return the named object from the folder. """\n         try:\n-            return super(OrderedBTreeFolderBase, self)._getOb(id, default)\n+            return super()._getOb(id, default)\n         except KeyError as e:\n             raise AttributeError(e)\n \n     def _setOb(self, id, object):\n         """ Store the named object in the folder. """\n-        super(OrderedBTreeFolderBase, self)._setOb(id, object)\n+        super()._setOb(id, object)\n         self.getOrdering().notifyAdded(id)     # notify the ordering adapter\n \n     def _delOb(self, id):\n         """ Remove the named object from the folder. """\n-        super(OrderedBTreeFolderBase, self)._delOb(id)\n+        super()._delOb(id)\n         self.getOrdering().notifyRemoved(id)   # notify the ordering adapter\n \n     def objectIds(self, spec=None, ordered=True):\n         if not ordered:\n-            return super(OrderedBTreeFolderBase, self).objectIds(spec)\n+            return super().objectIds(spec)\n         ordering = self.getOrdering()\n         if spec is None:\n             return ordering.idsInOrder()\n         else:\n-            ids = super(OrderedBTreeFolderBase, self).objectIds(spec)\n+            ids = super().objectIds(spec)\n             idxs = []\n             for id in ids:\n                 idxs.append((ordering.getObjectPosition(id), id))\n@@ -196,7 +195,7 @@ def iterkeys(self):\n     def manage_renameObject(self, id, new_id, REQUEST=None):\n         """ Rename a particular sub-object without changing its position. """\n         old_position = self.getObjectPosition(id)\n-        result = super(OrderedBTreeFolderBase, self).manage_renameObject(\n+        result = super().manage_renameObject(\n             id,\n             new_id,\n             REQUEST\ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex 5ef625d..d4a59ff 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -14,7 +14,7 @@\n \n \n @implementer(IExplicitOrdering)\n-class PartialOrdering(object):\n+class PartialOrdering:\n     """ this implementation uses a list to store order information on a\n         regular attribute of the folderish object;  explicit ordering\n         is supported """\n@@ -70,7 +70,7 @@ def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n             suppress_events=False):\n         """ see interfaces.py """\n         min_position = 0\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         if subset_ids is None:\n             subset_ids = self.idsInOrder(onlyOrderables=True)\ndiff --git a/src/plone/folder/testing.py b/src/plone/folder/testing.py\nindex b14476f..4afd1ac 100644\n--- a/src/plone/folder/testing.py\n+++ b/src/plone/folder/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\ndiff --git a/src/plone/folder/tests/benchmarks.py b/src/plone/folder/tests/benchmarks.py\nindex ab36afd..9ae703d 100644\n--- a/src/plone/folder/tests/benchmarks.py\n+++ b/src/plone/folder/tests/benchmarks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # simple benchmarking tests related to plip191\n # to run individual tests using:\n # $ bin/instance test -s plone.folder --tests-pattern=benchmarks -t <testName>\n@@ -8,7 +7,6 @@\n from plone.folder.tests.layer import PloneFolderLayer\n from plone.folder.tests.utils import DummyObject\n from profilehooks import timecall\n-from six.moves import range\n from unittest import defaultTestLoader\n from unittest import TestCase\n \ndiff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py\nindex 5917e88..d71a7a7 100644\n--- a/src/plone/folder/tests/test_dict_interface.py\n+++ b/src/plone/folder/tests/test_dict_interface.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n@@ -37,19 +36,19 @@ def test_delitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n         folder._setOb(\'foo\', DummyObject(\'foo\'))\n         folder._setOb(\'bar\', DummyObject(\'bar\'))\n-        self.assertEquals(len(folder.objectIds()), 2)\n+        self.assertEqual(len(folder.objectIds()), 2)\n         del folder[\'foo\']\n         del folder[\'bar\']\n-        self.assertEquals(len(folder.objectIds()), 0)\n+        self.assertEqual(len(folder.objectIds()), 0)\n \n     def test_len_empty_folder(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        self.assertEquals(len(folder), 0)\n+        self.assertEqual(len(folder), 0)\n \n     def test_len_one_child(self):\n         folder = OrderedBTreeFolderBase("f1")\n         folder[\'child\'] = DummyObject(\'child\')\n-        self.assertEquals(len(folder), 1)\n+        self.assertEqual(len(folder), 1)\n \n     def test_to_verify_ticket_9120(self):\n         folder = OrderedBTreeFolderBase("f1")\n@@ -59,9 +58,9 @@ def test_to_verify_ticket_9120(self):\n         folder[\'ob4\'] = ob4 = DummyObject(\'ob4\')\n         del folder[\'ob2\']\n         del folder[\'ob3\']\n-        self.assertEquals(folder.keys(), [\'ob1\', \'ob4\'])\n-        self.assertEquals(list(map(aq_base, folder.values())), [ob1, ob4])\n-        self.assertEquals([key in folder for key in folder], [True, True])\n+        self.assertEqual(folder.keys(), [\'ob1\', \'ob4\'])\n+        self.assertEqual(list(map(aq_base, folder.values())), [ob1, ob4])\n+        self.assertEqual([key in folder for key in folder], [True, True])\n \n \n class RelatedToDictInterfaceTests(unittest.TestCase):\n@@ -79,9 +78,9 @@ def create(self):\n \n     def testObjectIdsWithSpec(self):\n         folder = self.create()\n-        self.assertEquals([\'o1\', \'o3\'], folder.objectIds(spec=\'mt1\'))\n-        self.assertEquals([\'o2\', \'o4\'], folder.objectIds(spec=\'mt2\'))\n+        self.assertEqual([\'o1\', \'o3\'], folder.objectIds(spec=\'mt1\'))\n+        self.assertEqual([\'o2\', \'o4\'], folder.objectIds(spec=\'mt2\'))\n         folder.moveObjectsToTop([\'o3\'])\n         folder.moveObjectsDown([\'o2\'])\n-        self.assertEquals([\'o3\', \'o1\'], folder.objectIds(spec=\'mt1\'))\n-        self.assertEquals([\'o4\', \'o2\'], folder.objectIds(spec=\'mt2\'))\n+        self.assertEqual([\'o3\', \'o1\'], folder.objectIds(spec=\'mt1\'))\n+        self.assertEqual([\'o4\', \'o2\'], folder.objectIds(spec=\'mt2\'))\ndiff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py\nindex 959c627..6bc4414 100644\n--- a/src/plone/folder/tests/test_integration.py\n+++ b/src/plone/folder/tests/test_integration.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import Implicit\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n-from six import BytesIO\n+from io import BytesIO\n from transaction import savepoint\n from zope.interface import implementer\n \ndiff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py\nindex 3efe323..c12d7f7 100644\n--- a/src/plone/folder/tests/test_ordering_adapters.py\n+++ b/src/plone/folder/tests/test_ordering_adapters.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.folder.default import DefaultOrdering\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\ndiff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py\nindex 0808e1b..8a7208f 100644\n--- a/src/plone/folder/tests/test_ordersupport.py\n+++ b/src/plone/folder/tests/test_ordersupport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.Traversable import Traversable\n from plone.folder.interfaces import IOrdering\n from plone.folder.ordered import OrderedBTreeFolderBase\n@@ -33,59 +32,59 @@ def create(self):\n \n     def test_objectIdsOrdered(self):\n         folder = self.create()\n-        self.assertEquals(["o1", "o2", "o3", "o4"], folder.objectIds())\n+        self.assertEqual(["o1", "o2", "o3", "o4"], folder.objectIds())\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(["o2", "o1", "o3", "o4"], folder.objectIds())\n+        self.assertEqual(["o2", "o1", "o3", "o4"], folder.objectIds())\n \n     def test_objectValuesOrdered(self):\n         folder = self.create()\n-        self.assertEquals(\n+        self.assertEqual(\n             ["o1", "o2", "o3", "o4"],\n             [x.id for x in folder.objectValues()]\n         )\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(\n+        self.assertEqual(\n             ["o2", "o1", "o3", "o4"],\n             [x.id for x in folder.objectValues()]\n         )\n \n     def test_objectItemsOrdered(self):\n         folder = self.create()\n-        self.assertEquals(\n+        self.assertEqual(\n             ["o1", "o2", "o3", "o4"],\n             [x for x, y in folder.objectItems()]\n         )\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(\n+        self.assertEqual(\n             ["o2", "o1", "o3", "o4"],\n             [x for x, y in folder.objectItems()]\n         )\n \n     def test_iterkeys(self):\n         folder = self.create()\n-        self.assertEquals(\n+        self.assertEqual(\n             ["o1", "o2", "o3", "o4"],\n-            [x for x in six.iterkeys(folder)]\n+            [x for x in folder.keys()]\n         )\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(\n+        self.assertEqual(\n             ["o2", "o1", "o3", "o4"],\n-            [x for x in six.iterkeys(folder)]\n+            [x for x in folder.keys()]\n         )\n \n     def test_iter(self):\n         folder = self.create()\n-        self.assertEquals(["o1", "o2", "o3", "o4"], [x for x in folder])\n+        self.assertEqual(["o1", "o2", "o3", "o4"], [x for x in folder])\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(["o2", "o1", "o3", "o4"], [x for x in folder])\n+        self.assertEqual(["o2", "o1", "o3", "o4"], [x for x in folder])\n \n     def test_getitem(self):\n         ordering = IOrdering(self.create())\n-        self.assertEquals(ordering[1], \'o2\')\n-        self.assertEquals(ordering[-1], \'o4\')\n-        self.assertEquals(ordering[1:2], [\'o2\'])\n-        self.assertEquals(ordering[1:-1], [\'o2\', \'o3\'])\n-        self.assertEquals(ordering[1:], [\'o2\', \'o3\', \'o4\'])\n+        self.assertEqual(ordering[1], \'o2\')\n+        self.assertEqual(ordering[-1], \'o4\')\n+        self.assertEqual(ordering[1:2], [\'o2\'])\n+        self.assertEqual(ordering[1:-1], [\'o2\', \'o3\'])\n+        self.assertEqual(ordering[1:], [\'o2\', \'o3\', \'o4\'])\n \n     # Tests borrowed from OFS.tests.testsOrderSupport\n \ndiff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py\nindex 8468c63..fe0dba7 100644\n--- a/src/plone/folder/tests/test_partialordering.py\n+++ b/src/plone/folder/tests/test_partialordering.py\n@@ -18,7 +18,7 @@ class PartialOrderingTests(unittest.TestCase):\n \n     def create(self):\n         container = OrderedBTreeFolderBase()\n-        container.setOrdering(u\'partial\')\n+        container.setOrdering(\'partial\')\n         container[\'o1\'] = Orderable(\'o1\', \'mt1\')\n         container[\'o2\'] = Orderable(\'o2\', \'mt2\')\n         container[\'c1\'] = Chaoticle(\'c1\', \'mt3\')\n@@ -47,7 +47,7 @@ def testNotifyAdded(self):\n         )\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\', \'o5\', \'c1\', \'c2\', \'c3\'])\n+            {\'o1\', \'o2\', \'o3\', \'o4\', \'o5\', \'c1\', \'c2\', \'c3\'}\n         )\n \n     def testNotifyRemoved(self):\n@@ -63,7 +63,7 @@ def testNotifyRemoved(self):\n         )\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o4\', \'c1\', \'c2\', \'c3\'])\n+            {\'o1\', \'o2\', \'o4\', \'c1\', \'c2\', \'c3\'}\n         )\n         container._delOb(\'o1\')\n         self.assertEqual(\n@@ -72,7 +72,7 @@ def testNotifyRemoved(self):\n         )\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o2\', \'o4\', \'c1\', \'c2\', \'c3\'])\n+            {\'o2\', \'o4\', \'c1\', \'c2\', \'c3\'}\n         )\n \n     def runTableTests(self, action, tests):\n@@ -194,7 +194,7 @@ class DummyFolder(OrderedBTreeFolderBase, Implicit):\n     """ we need to mix in acquisition """\n \n     meta_type = \'DummyFolder\'\n-    _ordering = u\'partial\'\n+    _ordering = \'partial\'\n \n     def dummy_method(self):\n         return self.id\ndiff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py\nindex bfeb54e..9165b6f 100644\n--- a/src/plone/folder/tests/test_unorderedordering.py\n+++ b/src/plone/folder/tests/test_unorderedordering.py\n@@ -13,7 +13,7 @@ class UnorderedOrderingTests(unittest.TestCase):\n \n     def create(self):\n         container = OrderedBTreeFolderBase()\n-        container._ordering = u\'unordered\'\n+        container._ordering = \'unordered\'\n         container._setOb(\'o1\', DummyObject(\'o1\', \'mt1\'))\n         container._setOb(\'o2\', DummyObject(\'o2\', \'mt2\'))\n         container._setOb(\'o3\', DummyObject(\'o3\', \'mt1\'))\n@@ -29,24 +29,24 @@ def testNotifyAdded(self):\n         container = self.create()\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\'])\n+            {\'o1\', \'o2\', \'o3\', \'o4\'}\n         )\n         container._setOb(\'o5\', DummyObject(\'o5\', \'mt1\'))\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\', \'o5\'])\n+            {\'o1\', \'o2\', \'o3\', \'o4\', \'o5\'}\n         )\n \n     def testNotifyRemoved(self):\n         container = self.create()\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\'])\n+            {\'o1\', \'o2\', \'o3\', \'o4\'}\n         )\n         container._delOb(\'o3\')\n         self.assertEqual(\n             set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o4\'])\n+            {\'o1\', \'o2\', \'o4\'}\n         )\n \n     def testGetObjectPosition(self):\ndiff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py\nindex 05b8da0..7f2cb18 100644\n--- a/src/plone/folder/tests/test_webdav.py\n+++ b/src/plone/folder/tests/test_webdav.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import Explicit\n from plone.folder.ordered import CMFOrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n@@ -36,7 +35,7 @@ def test_getitem_not_dav_request(self):\n         foo = DummyObject(\'foo\')\n         folder[\'foo\'] = foo\n \n-        self.assertEquals(folder[\'foo\'], foo)\n+        self.assertEqual(folder[\'foo\'], foo)\n         try:\n             folder[\'bar\']\n             self.fail()\n@@ -54,5 +53,5 @@ def test_getitem_dav_request(self):\n         foo = DummyObject(\'foo\')\n         folder[\'foo\'] = foo\n \n-        self.assertEquals(folder[\'foo\'], foo)\n+        self.assertEqual(folder[\'foo\'], foo)\n         self.assertTrue(isinstance(folder[\'bar\'], NullResource))\ndiff --git a/src/plone/folder/tests/utils.py b/src/plone/folder/tests/utils.py\nindex 5c2015b..d81e2e9 100644\n--- a/src/plone/folder/tests/utils.py\n+++ b/src/plone/folder/tests/utils.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.folder.interfaces import IOrderable\n from zope.interface import implementer\n \n \n-class DummyObject(object):\n+class DummyObject:\n \n     def __init__(self, id, meta_type=None):\n         self.id = id\ndiff --git a/src/plone/folder/unordered.py b/src/plone/folder/unordered.py\nindex 14d9ae8..ea82a74 100644\n--- a/src/plone/folder/unordered.py\n+++ b/src/plone/folder/unordered.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.folder.interfaces import IOrderableFolder\n from plone.folder.interfaces import IOrdering\n@@ -8,7 +7,7 @@\n \n @implementer(IOrdering)\n @adapter(IOrderableFolder)\n-class UnorderedOrdering(object):\n+class UnorderedOrdering:\n     """ This implementation provides no ordering. """\n \n     def __init__(self, context):\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:31:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/4aaab78b30affe5697faac86d99484f142b58420

chore: isort

Files changed:
M setup.py
M src/plone/folder/nogopip.py
M src/plone/folder/ordered.py
M src/plone/folder/partial.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py

b"diff --git a/setup.py b/setup.py\nindex b925890..32b90b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = '3.1.1.dev0'\n \ndiff --git a/src/plone/folder/nogopip.py b/src/plone/folder/nogopip.py\nindex e89eec2..c800657 100644\n--- a/src/plone/folder/nogopip.py\n+++ b/src/plone/folder/nogopip.py\n@@ -9,6 +9,7 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n+\n logger = getLogger(__name__)\n \n \ndiff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex c7a7882..65db8c8 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -13,6 +13,8 @@\n from zope.component import getAdapter\n from zope.component import queryAdapter\n from zope.interface import implementer\n+\n+\n try:\n     from ZTUtils.Lazy import LazyMap\n except ImportError:\ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex d4a59ff..17cae95 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -1,11 +1,10 @@\n from Acquisition import aq_base\n-from zope.interface import implementer\n-from zope.component import adapts\n-from zope.container.contained import notifyContainerModified\n-\n+from plone.folder.interfaces import IExplicitOrdering\n from plone.folder.interfaces import IOrderable\n from plone.folder.interfaces import IOrderableFolder\n-from plone.folder.interfaces import IExplicitOrdering\n+from zope.component import adapts\n+from zope.container.contained import notifyContainerModified\n+from zope.interface import implementer\n \n import six\n \ndiff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py\nindex 6bc4414..70ed18a 100644\n--- a/src/plone/folder/tests/test_integration.py\n+++ b/src/plone/folder/tests/test_integration.py\n@@ -1,8 +1,8 @@\n from Acquisition import Implicit\n+from io import BytesIO\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n-from io import BytesIO\n from transaction import savepoint\n from zope.interface import implementer\n \ndiff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py\nindex fe0dba7..d3a28e0 100644\n--- a/src/plone/folder/tests/test_partialordering.py\n+++ b/src/plone/folder/tests/test_partialordering.py\n@@ -1,12 +1,13 @@\n-from transaction import savepoint\n from Acquisition import Implicit\n-from zope.interface import implementer\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.partial import PartialOrdering\n-from plone.folder.tests.utils import Orderable, Chaoticle\n-from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n+from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n+from plone.folder.tests.utils import Chaoticle\n+from plone.folder.tests.utils import Orderable\n+from transaction import savepoint\n+from zope.interface import implementer\n \n import unittest\n \ndiff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py\nindex 9165b6f..be922b2 100644\n--- a/src/plone/folder/tests/test_unorderedordering.py\n+++ b/src/plone/folder/tests/test_unorderedordering.py\n@@ -1,7 +1,7 @@\n from plone.folder.ordered import OrderedBTreeFolderBase\n-from plone.folder.unordered import UnorderedOrdering\n-from plone.folder.tests.utils import DummyObject\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n+from plone.folder.tests.utils import DummyObject\n+from plone.folder.unordered import UnorderedOrdering\n \n import unittest\n \n"

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:32:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/1431f6969c98f198cd91c17005afd0346cf0934d

chore: black

Files changed:
M setup.py
M src/plone/__init__.py
M src/plone/folder/default.py
M src/plone/folder/interfaces.py
M src/plone/folder/nogopip.py
M src/plone/folder/ordered.py
M src/plone/folder/partial.py
M src/plone/folder/testing.py
M src/plone/folder/tests/benchmarks.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_ordersupport.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py
M src/plone/folder/tests/utils.py
M src/plone/folder/unordered.py

b'diff --git a/setup.py b/setup.py\nindex 32b90b4..dfeee90 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'3.1.1.dev0\'\n+version = "3.1.1.dev0"\n \n setup(\n-    name=\'plone.folder\',\n+    name="plone.folder",\n     version=version,\n-    description=\'BTree-based folder implementation with order support\',\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    description="BTree-based folder implementation with order support",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -29,33 +28,33 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'folder btree order\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.folder\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    keywords="folder btree order",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.folder",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n-    platforms=\'Any\',\n+    platforms="Any",\n     zip_safe=False,\n     install_requires=[\n-        \'plone.memoize\',\n-        \'Products.BTreeFolder2\',\n-        \'Products.CMFCore\',\n-        \'Products.ZCatalog\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.interface\',\n-        \'Zope2\',\n+        "plone.memoize",\n+        "Products.BTreeFolder2",\n+        "Products.CMFCore",\n+        "Products.ZCatalog",\n+        "setuptools",\n+        "six",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.container",\n+        "zope.interface",\n+        "Zope2",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'profilehooks\',\n+        "test": [\n+            "profilehooks",\n         ]\n     },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/folder/default.py b/src/plone/folder/default.py\nindex 7294f66..57c4d90 100644\n--- a/src/plone/folder/default.py\n+++ b/src/plone/folder/default.py\n@@ -13,8 +13,8 @@\n @implementer(IExplicitOrdering)\n @adapter(IOrderableFolder)\n class DefaultOrdering:\n-    """ This implementation uses annotations to store the order on the\n-        object, and supports explicit ordering. """\n+    """This implementation uses annotations to store the order on the\n+    object, and supports explicit ordering."""\n \n     ORDER_KEY = "plone.folder.ordered.order"\n     POS_KEY = "plone.folder.ordered.pos"\n@@ -23,14 +23,14 @@ def __init__(self, context):\n         self.context = context\n \n     def notifyAdded(self, obj_id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         order = self._order(True)\n         pos = self._pos(True)\n         order.append(obj_id)\n         pos[obj_id] = len(order) - 1\n \n     def notifyRemoved(self, obj_id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         order = self._order()\n         pos = self._pos()\n         try:\n@@ -43,14 +43,8 @@ def notifyRemoved(self, obj_id):\n         for count, obj_id in enumerate(order):\n             pos[obj_id] = count\n \n-    def moveObjectsByDelta(\n-        self,\n-        ids,\n-        delta,\n-        subset_ids=None,\n-        suppress_events=False\n-    ):\n-        """ see interfaces.py """\n+    def moveObjectsByDelta(self, ids, delta, subset_ids=None, suppress_events=False):\n+        """see interfaces.py"""\n         order = self._order()\n         pos = self._pos()\n         min_position = 0\n@@ -60,7 +54,7 @@ def moveObjectsByDelta(\n             subset_ids = self.idsInOrder()\n         elif not isinstance(subset_ids, list):\n             subset_ids = list(subset_ids)\n-        if delta > 0:                   # unify moving direction\n+        if delta > 0:  # unify moving direction\n             ids = reversed(ids)\n             subset_ids.reverse()\n         counter = 0\n@@ -93,41 +87,37 @@ def moveObjectsByDelta(\n                     pos[obj_id] = i\n                     idx += 1\n                 except KeyError:\n-                    raise ValueError(\n-                        f\'No object with id "{obj_id:s}" exists.\'\n-                    )\n+                    raise ValueError(f\'No object with id "{obj_id:s}" exists.\')\n         if not suppress_events:\n             notifyContainerModified(self.context)\n         return counter\n \n     def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -delta, subset_ids)\n \n     def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, delta, subset_ids)\n \n     def moveObjectsToTop(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -len(self._order()), subset_ids)\n \n     def moveObjectsToBottom(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, len(self._order()), subset_ids)\n \n     def moveObjectToPosition(self, obj_id, position, suppress_events=False):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         delta = position - self.getObjectPosition(obj_id)\n         if delta:\n             return self.moveObjectsByDelta(\n-                obj_id,\n-                delta,\n-                suppress_events=suppress_events\n+                obj_id, delta, suppress_events=suppress_events\n             )\n \n     def orderObjects(self, key=None, reverse=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         if key is None and not reverse:\n             return -1\n         order = self._order()\n@@ -137,11 +127,13 @@ def orderObjects(self, key=None, reverse=None):\n             # Simply reverse the current ordering.\n             order.reverse()\n         else:\n+\n             def keyfn(obj_id):\n                 attr = getattr(self.context._getOb(obj_id), key)\n                 if callable(attr):\n                     return attr()\n                 return attr\n+\n             # order.sort(cmd=None, key=keyfn, reverse=bool(reverse))\n             order = sorted(order, key=keyfn, reverse=bool(reverse))\n             self._set_order(order)\n@@ -150,15 +142,18 @@ def keyfn(obj_id):\n         return -1\n \n     def getObjectPosition(self, obj_id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         pos = self._pos()\n         if obj_id in pos:\n             return pos[obj_id]\n-        raise ValueError(\'No object with id "{:s}" exists in "{:s}".\'.format(\n-            obj_id, \'/\'.join(self.context.getPhysicalPath())))\n+        raise ValueError(\n+            \'No object with id "{:s}" exists in "{:s}".\'.format(\n+                obj_id, "/".join(self.context.getPhysicalPath())\n+            )\n+        )\n \n     def idsInOrder(self):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return list(self._order())\n \n     def __getitem__(self, index):\ndiff --git a/src/plone/folder/interfaces.py b/src/plone/folder/interfaces.py\nindex 2a73a21..d3aab8d 100644\n--- a/src/plone/folder/interfaces.py\n+++ b/src/plone/folder/interfaces.py\n@@ -2,73 +2,73 @@\n \n \n class IOrderable(Interface):\n-    """ Marker interface for orderable portal content """\n+    """Marker interface for orderable portal content"""\n \n \n class IFolder(Interface):\n-    """ Marker interface for Plone-like folders """\n+    """Marker interface for Plone-like folders"""\n \n \n class IOrderableFolder(IFolder):\n-    """ A Plone-like folder with ordering support """\n+    """A Plone-like folder with ordering support"""\n \n     def getOrdering():\n-        """ return the currently active ordering adapter for this folder """\n+        """return the currently active ordering adapter for this folder"""\n \n-    def setOrdering(ordering=\'\'):\n-        """ (re)set ordering adapter to be used for this folder """\n+    def setOrdering(ordering=""):\n+        """(re)set ordering adapter to be used for this folder"""\n \n \n class IOrdering(Interface):\n-    """ An adapter providing ordering operations on its context folder.\n+    """An adapter providing ordering operations on its context folder.\n \n-        The OrderedBTreeFolderBase mix-in class will adapt self (the\n-        folder) to this interface when trying to get object position or\n-        find the order of items. There is a default implementation, but\n-        you can provide a different policy.\n+    The OrderedBTreeFolderBase mix-in class will adapt self (the\n+    folder) to this interface when trying to get object position or\n+    find the order of items. There is a default implementation, but\n+    you can provide a different policy.\n \n-        Your adapter (which should still adapt to IOrdered) can\n-        optionally provide IExplicitOrdering, defined below. This is\n-        used to support explicit ordering, e.g. through a UI. """\n+    Your adapter (which should still adapt to IOrdered) can\n+    optionally provide IExplicitOrdering, defined below. This is\n+    used to support explicit ordering, e.g. through a UI."""\n \n     def notifyAdded(obj_id):\n-        """ Inform the ordering implementation that an item was added """\n+        """Inform the ordering implementation that an item was added"""\n \n     def notifyRemoved(obj_id):\n-        """ Inform the ordering implementation that an item was removed """\n+        """Inform the ordering implementation that an item was removed"""\n \n     def getObjectPosition(obj_id):\n-        """ Get the position of the given object id """\n+        """Get the position of the given object id"""\n \n     def idsInOrder():\n-        """ Return all object ids, in the correct order """\n+        """Return all object ids, in the correct order"""\n \n \n class IExplicitOrdering(IOrdering):\n-    """ An adapter allowing explicit ordering """\n+    """An adapter allowing explicit ordering"""\n \n     def moveObjectsByDelta(ids, delta, subset_ids=None, suppress_events=False):\n-        """ Move the specified ids (a sequence, or a single string id)\n-            by the given delta (a positive or negative number). By\n-            default, this moves the objects within the whole set of\n-            sub-items in the context container, but if subset_ids is\n-            specified, it gives a subset of ids to consider.\n-            Should return the number of objects that changed position. """\n+        """Move the specified ids (a sequence, or a single string id)\n+        by the given delta (a positive or negative number). By\n+        default, this moves the objects within the whole set of\n+        sub-items in the context container, but if subset_ids is\n+        specified, it gives a subset of ids to consider.\n+        Should return the number of objects that changed position."""\n \n     def moveObjectsUp(ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects up by delta in container. """\n+        """Move specified sub-objects up by delta in container."""\n \n     def moveObjectsDown(ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects down by delta in container. """\n+        """Move specified sub-objects down by delta in container."""\n \n     def moveObjectsToTop(ids, subset_ids=None):\n-        """ Move specified sub-objects to top of container. """\n+        """Move specified sub-objects to top of container."""\n \n     def moveObjectsToBottom(ids, subset_ids=None):\n-        """ Move specified sub-objects to bottom of container. """\n+        """Move specified sub-objects to bottom of container."""\n \n     def moveObjectToPosition(obj_id, position, suppress_events=False):\n-        """ Move specified object to absolute position. """\n+        """Move specified object to absolute position."""\n \n     def orderObjects(key, reverse=None):\n-        """ Order sub-objects by key and direction. """\n+        """Order sub-objects by key and direction."""\ndiff --git a/src/plone/folder/nogopip.py b/src/plone/folder/nogopip.py\nindex c800657..d8b25f4 100644\n--- a/src/plone/folder/nogopip.py\n+++ b/src/plone/folder/nogopip.py\n@@ -20,7 +20,7 @@ def traverse(base, path):\n     returns: content at the end or None\n     """\n     current = base\n-    for cid in path.split(\'/\'):\n+    for cid in path.split("/"):\n         if not cid:\n             continue\n         try:\n@@ -32,7 +32,7 @@ def traverse(base, path):\n \n @implementer(IPluggableIndex)\n class StubIndex(SimpleItem):\n-    """ stub catalog index doing nothing """\n+    """stub catalog index doing nothing"""\n \n     def __init__(self, id, *args, **kw):\n         self.id = id\n@@ -64,10 +64,10 @@ def clear(self):\n \n @implementer(ISortIndex)\n class GopipIndex(StubIndex):\n-    """ fake index for sorting against `getObjPositionInParent` """\n+    """fake index for sorting against `getObjPositionInParent`"""\n \n-    meta_type = \'GopipIndex\'\n-    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n+    meta_type = "GopipIndex"\n+    manage_options = (dict(label="Settings", action="manage_main"),)\n \n     keyForDocument = 42\n \n@@ -87,7 +87,7 @@ def documentToKeyMap(self):\n         # results themselves.  luckily this is only ever called from\n         # `sortResults`, so we can get it form there.  oh, and lurker\n         # says this won\'t work in jython, though! :)\n-        rs = currentframe().f_back.f_locals[\'rs\']\n+        rs = currentframe().f_back.f_locals["rs"]\n         rids = {}\n         items = []\n         containers = {}\n@@ -95,17 +95,17 @@ def documentToKeyMap(self):\n         root = getUtility(ISiteRoot).getPhysicalRoot()\n         for rid in rs:\n             path = getpath(rid)\n-            parent, id = path.rsplit(\'/\', 1)\n+            parent, id = path.rsplit("/", 1)\n             container = containers.get(parent)\n             if container is None:\n                 containers[parent] = container = traverse(root, parent)\n-            rids[id] = rid              # remember in case of single folder\n+            rids[id] = rid  # remember in case of single folder\n             items.append((rid, container, id))  # or else for deferred lookup\n         pos = {}\n         if len(containers) == 1:\n             # the usual "all from one folder" case can be optimized\n             folder = list(containers.values())[0]\n-            if getattr(aq_base(folder), \'getOrdering\', None):\n+            if getattr(aq_base(folder), "getOrdering", None):\n                 ids = folder.getOrdering().idsInOrder()\n             else:\n                 # site root or old folders\n@@ -117,7 +117,7 @@ def documentToKeyMap(self):\n             return pos\n         # otherwise the entire map needs to be constructed...\n         for rid, container, id in items:\n-            if getattr(aq_base(container), \'getObjectPosition\', None):\n+            if getattr(aq_base(container), "getObjectPosition", None):\n                 pos[rid] = container.getObjectPosition(id)\n             else:\n                 # fallback for unordered folders\n@@ -125,21 +125,11 @@ def documentToKeyMap(self):\n         return pos\n \n \n-manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n+manage_addGopipForm = DTMLFile("dtml/addGopipIndex", globals())\n \n \n-def manage_addGopipIndex(\n-    self,\n-    identifier,\n-    REQUEST=None,\n-    RESPONSE=None,\n-    URL3=None\n-):\n-    """ add a fake gopip index """\n+def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None, URL3=None):\n+    """add a fake gopip index"""\n     return self.manage_addIndex(\n-        identifier,\n-        \'GopipIndex\',\n-        REQUEST=REQUEST,\n-        RESPONSE=RESPONSE,\n-        URL1=URL3\n+        identifier, "GopipIndex", REQUEST=REQUEST, RESPONSE=RESPONSE, URL1=URL3\n     )\ndiff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex 65db8c8..72edf91 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -30,29 +30,29 @@\n \n @implementer(IOrderedContainer, IOrderableFolder, IAttributeAnnotatable)\n class OrderedBTreeFolderBase(BTreeFolder2Base):\n-    """ BTree folder base class with ordering support. The ordering\n-        is done by a named adapter (to IOrdering), which makes the policy\n-        changeable. """\n+    """BTree folder base class with ordering support. The ordering\n+    is done by a named adapter (to IOrdering), which makes the policy\n+    changeable."""\n \n-    _ordering = \'\'         # name of adapter defining ordering policy\n+    _ordering = ""  # name of adapter defining ordering policy\n \n     security = ClassSecurityInfo()\n \n     def __bool__(self):\n-        """ a folder is something, even if it\'s empty """\n+        """a folder is something, even if it\'s empty"""\n         return True\n \n     @security.protected(access_contents_information)\n     def getOrdering(self):\n-        """ return the currently active ordering adapter for this folder """\n+        """return the currently active ordering adapter for this folder"""\n         adapter = queryAdapter(self, IOrdering, name=self._ordering)\n         if adapter is None:\n             adapter = getAdapter(self, IOrdering)\n         return adapter\n \n     @security.protected(manage_properties)\n-    def setOrdering(self, ordering=\'\'):\n-        """ (re)set ordering adapter to be used for this folder """\n+    def setOrdering(self, ordering=""):\n+        """(re)set ordering adapter to be used for this folder"""\n         if ordering:\n             # make sure the adapter exists...\n             getAdapter(self, IOrdering, name=ordering)\n@@ -61,21 +61,21 @@ def setOrdering(self, ordering=\'\'):\n     # IObjectManager\n \n     def _getOb(self, id, default=_marker):\n-        """ Return the named object from the folder. """\n+        """Return the named object from the folder."""\n         try:\n             return super()._getOb(id, default)\n         except KeyError as e:\n             raise AttributeError(e)\n \n     def _setOb(self, id, object):\n-        """ Store the named object in the folder. """\n+        """Store the named object in the folder."""\n         super()._setOb(id, object)\n-        self.getOrdering().notifyAdded(id)     # notify the ordering adapter\n+        self.getOrdering().notifyAdded(id)  # notify the ordering adapter\n \n     def _delOb(self, id):\n-        """ Remove the named object from the folder. """\n+        """Remove the named object from the folder."""\n         super()._delOb(id)\n-        self.getOrdering().notifyRemoved(id)   # notify the ordering adapter\n+        self.getOrdering().notifyRemoved(id)  # notify the ordering adapter\n \n     def objectIds(self, spec=None, ordered=True):\n         if not ordered:\n@@ -100,19 +100,20 @@ def objectItems(self, spec=None):\n         # Returns a list of (id, subobject) tuples of the current object.\n         # If \'spec\' is specified, returns only objects whose meta_type match\n         # \'spec\'\n-        return LazyMap(lambda id, _getOb=self._getOb: (id, _getOb(id)),\n-                       self.objectIds(spec))\n+        return LazyMap(\n+            lambda id, _getOb=self._getOb: (id, _getOb(id)), self.objectIds(spec)\n+        )\n \n     # IOrderSupport - mostly deprecated, use the adapter directly instead\n \n     @security.protected(access_contents_information)\n     def getObjectPosition(self, id):\n-        """ Get the position of an object by its id. """\n+        """Get the position of an object by its id."""\n         return self.getOrdering().getObjectPosition(id)\n \n     @security.protected(manage_properties)\n     def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects up by delta in container. """\n+        """Move specified sub-objects up by delta in container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsUp(ids, delta, subset_ids)\n@@ -121,7 +122,7 @@ def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n \n     @security.protected(manage_properties)\n     def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects down by delta in container. """\n+        """Move specified sub-objects down by delta in container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsDown(ids, delta, subset_ids)\n@@ -130,7 +131,7 @@ def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n \n     @security.protected(manage_properties)\n     def moveObjectsToTop(self, ids, subset_ids=None):\n-        """ Move specified sub-objects to top of container. """\n+        """Move specified sub-objects to top of container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsToTop(ids, subset_ids)\n@@ -139,7 +140,7 @@ def moveObjectsToTop(self, ids, subset_ids=None):\n \n     @security.protected(manage_properties)\n     def moveObjectsToBottom(self, ids, subset_ids=None):\n-        """ Move specified sub-objects to bottom of container. """\n+        """Move specified sub-objects to bottom of container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsToBottom(ids, subset_ids)\n@@ -148,7 +149,7 @@ def moveObjectsToBottom(self, ids, subset_ids=None):\n \n     @security.protected(ModifyPortalContent)\n     def moveObject(self, id, position):\n-        """ Move specified object to absolute position. """\n+        """Move specified object to absolute position."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectToPosition(id, position)\n@@ -157,7 +158,7 @@ def moveObject(self, id, position):\n \n     @security.protected(manage_properties)\n     def moveObjectToPosition(self, id, position, suppress_events=False):\n-        """ Move specified object to absolute position. """\n+        """Move specified object to absolute position."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectToPosition(id, position, suppress_events)\n@@ -165,24 +166,17 @@ def moveObjectToPosition(self, id, position, suppress_events=False):\n             return 0\n \n     @security.protected(manage_properties)\n-    def moveObjectsByDelta(\n-        self, ids, delta, subset_ids=None, suppress_events=False\n-    ):\n-        """ Move specified sub-objects by delta. """\n+    def moveObjectsByDelta(self, ids, delta, subset_ids=None, suppress_events=False):\n+        """Move specified sub-objects by delta."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n-            return ordering.moveObjectsByDelta(\n-                ids,\n-                delta,\n-                subset_ids,\n-                suppress_events\n-            )\n+            return ordering.moveObjectsByDelta(ids, delta, subset_ids, suppress_events)\n         else:\n             return 0\n \n     @security.protected(manage_properties)\n     def orderObjects(self, key=None, reverse=None):\n-        """ Order sub-objects by key and direction. """\n+        """Order sub-objects by key and direction."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.orderObjects(key, reverse)\n@@ -195,19 +189,15 @@ def iterkeys(self):\n         return iter(self.objectIds())\n \n     def manage_renameObject(self, id, new_id, REQUEST=None):\n-        """ Rename a particular sub-object without changing its position. """\n+        """Rename a particular sub-object without changing its position."""\n         old_position = self.getObjectPosition(id)\n-        result = super().manage_renameObject(\n-            id,\n-            new_id,\n-            REQUEST\n-        )\n+        result = super().manage_renameObject(id, new_id, REQUEST)\n         if old_position is None:\n             return result\n         self.moveObjectToPosition(new_id, old_position, suppress_events=True)\n-        reindex = getattr(self._getOb(new_id), \'reindexObject\', None)\n+        reindex = getattr(self._getOb(new_id), "reindexObject", None)\n         if reindex is not None:\n-            reindex(idxs=[\'getObjPositionInParent\'])\n+            reindex(idxs=["getObjPositionInParent"])\n         return result\n \n     # Dict interface\n@@ -227,11 +217,14 @@ def __getitem__(self, key):\n             return value\n \n         # WebDAV PUT support\n-        if hasattr(self, \'REQUEST\'):\n+        if hasattr(self, "REQUEST"):\n             request = self.REQUEST\n-            method = request.get(\'REQUEST_METHOD\', \'GET\')\n-            if (HAS_WEBDAV and getattr(request, \'maybe_webdav_client\', False)\n-               and method not in (\'GET\', \'POST\')):\n+            method = request.get("REQUEST_METHOD", "GET")\n+            if (\n+                HAS_WEBDAV\n+                and getattr(request, "maybe_webdav_client", False)\n+                and method not in ("GET", "POST")\n+            ):\n                 return NullResource(self, key, request).__of__(self)\n         raise KeyError(key)\n \n@@ -242,11 +235,11 @@ def __getitem__(self, key):\n \n \n class CMFOrderedBTreeFolderBase(OrderedBTreeFolderBase, PortalFolderBase):\n-    """ BTree folder for CMF sites, with ordering support. The ordering\n-        is done by adapter (to IOrdering), which makes the policy\n-        changeable. """\n+    """BTree folder for CMF sites, with ordering support. The ordering\n+    is done by adapter (to IOrdering), which makes the policy\n+    changeable."""\n \n-    def __init__(self, id, title=\'\'):\n+    def __init__(self, id, title=""):\n         PortalFolderBase.__init__(self, id, title)\n         BTreeFolder2Base.__init__(self, id)\n \ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex 17cae95..0ae54c2 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -9,14 +9,15 @@\n import six\n \n \n-ORDER_ATTR = \'_objectordering\'\n+ORDER_ATTR = "_objectordering"\n \n \n @implementer(IExplicitOrdering)\n class PartialOrdering:\n-    """ this implementation uses a list to store order information on a\n-        regular attribute of the folderish object;  explicit ordering\n-        is supported """\n+    """this implementation uses a list to store order information on a\n+    regular attribute of the folderish object;  explicit ordering\n+    is supported"""\n+\n     adapts(IOrderableFolder)\n \n     def __init__(self, context):\n@@ -38,24 +39,24 @@ def order(self, value):\n         setattr(context, ORDER_ATTR, value)\n \n     def notifyAdded(self, id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         assert not id in self.order\n         context = aq_base(self.context)\n         obj = context._getOb(id)\n         if IOrderable.providedBy(obj):\n             self.order.append(id)\n-            self.context._p_changed = True      # the order was changed\n+            self.context._p_changed = True  # the order was changed\n \n     def notifyRemoved(self, id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         try:\n             self.order.remove(id)\n-            self.context._p_changed = True      # the order was changed\n-        except ValueError:          # removing non-orderable items is okay\n+            self.context._p_changed = True  # the order was changed\n+        except ValueError:  # removing non-orderable items is okay\n             pass\n \n     def idsInOrder(self, onlyOrderables=False):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         ordered = list(self.order)\n         ordered_set = set(ordered)\n         if not onlyOrderables:\n@@ -65,9 +66,8 @@ def idsInOrder(self, onlyOrderables=False):\n                     ordered.append(id)\n         return ordered\n \n-    def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n-            suppress_events=False):\n-        """ see interfaces.py """\n+    def moveObjectsByDelta(self, ids, delta, subset_ids=None, suppress_events=False):\n+        """see interfaces.py"""\n         min_position = 0\n         if isinstance(ids, str):\n             ids = [ids]\n@@ -75,7 +75,7 @@ def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n             subset_ids = self.idsInOrder(onlyOrderables=True)\n         elif not isinstance(subset_ids, list):\n             subset_ids = list(subset_ids)\n-        if delta > 0:                   # unify moving direction\n+        if delta > 0:  # unify moving direction\n             ids = reversed(ids)\n             subset_ids.reverse()\n         counter = 0\n@@ -106,38 +106,39 @@ def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n                     except KeyError:\n                         raise ValueError(\'No object with id "%s" exists.\' % id)\n             if idx > 0:\n-                self.context._p_changed = True      # the order was changed\n+                self.context._p_changed = True  # the order was changed\n         if not suppress_events:\n             notifyContainerModified(self.context)\n         return counter\n \n     def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -delta, subset_ids)\n \n     def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, delta, subset_ids)\n \n     def moveObjectsToTop(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -len(self.order), subset_ids)\n \n     def moveObjectsToBottom(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, len(self.order), subset_ids)\n \n     def moveObjectToPosition(self, id, position, suppress_events=False):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         old_position = self.getObjectPosition(id)\n         if old_position is not None:\n             delta = position - old_position\n             if delta:\n-                return self.moveObjectsByDelta(id, delta,\n-                    suppress_events=suppress_events)\n+                return self.moveObjectsByDelta(\n+                    id, delta, suppress_events=suppress_events\n+                )\n \n     def orderObjects(self, key=None, reverse=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         if key is None:\n             if not reverse:\n                 return -1\n@@ -145,17 +146,19 @@ def orderObjects(self, key=None, reverse=None):\n                 # Simply reverse the current ordering.\n                 self.order.reverse()\n         else:\n+\n             def keyfn(id):\n                 attr = getattr(self.context._getOb(id), key)\n                 if callable(attr):\n                     return attr()\n                 return attr\n+\n             self.order = sorted(self.order, key=keyfn, reverse=bool(reverse))\n-        self.context._p_changed = True      # the order was changed\n+        self.context._p_changed = True  # the order was changed\n         return -1\n \n     def getObjectPosition(self, id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         try:\n             # using `index` here might not be that efficient for very large\n             # lists, but the idea behind this adapter is to use it when the\ndiff --git a/src/plone/folder/testing.py b/src/plone/folder/testing.py\nindex 4afd1ac..9927242 100644\n--- a/src/plone/folder/testing.py\n+++ b/src/plone/folder/testing.py\n@@ -7,7 +7,6 @@\n \n \n class PloneFolderLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -17,11 +16,9 @@ def setUpZope(self, app, configurationContext):\n PLONEFOLDER_FIXTURE = PloneFolderLayer()\n \n PLONEFOLDER_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONEFOLDER_FIXTURE,),\n-    name=\'PloneFolderLayer:IntegrationTesting\'\n+    bases=(PLONEFOLDER_FIXTURE,), name="PloneFolderLayer:IntegrationTesting"\n )\n \n PLONEFOLDER_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONEFOLDER_FIXTURE,),\n-    name=\'PloneFolderLayer:FunctionalTesting\'\n+    bases=(PLONEFOLDER_FIXTURE,), name="PloneFolderLayer:FunctionalTesting"\n )\ndiff --git a/src/plone/folder/tests/benchmarks.py b/src/plone/folder/tests/benchmarks.py\nindex 9ae703d..a788f58 100644\n--- a/src/plone/folder/tests/benchmarks.py\n+++ b/src/plone/folder/tests/benchmarks.py\n@@ -12,20 +12,20 @@\n \n \n class BenchmarkTests(TestCase):\n-\n     layer = PloneFolderLayer\n \n     def testDeleteSpeed(self):\n         folder = OrderedBTreeFolderBase("f1")\n         for idx in range(100000):\n-            id = \'foo-%s\' % idx\n-            folder[id] = DummyObject(id, \'bar\')\n+            id = "foo-%s" % idx\n+            folder[id] = DummyObject(id, "bar")\n         last = reversed(folder.keys()[-100:])\n \n         @timecall\n         def delete():\n             for id in last:\n                 del folder[id]\n+\n         delete()\n \n \ndiff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py\nindex d71a7a7..489604e 100644\n--- a/src/plone/folder/tests/test_dict_interface.py\n+++ b/src/plone/folder/tests/test_dict_interface.py\n@@ -7,38 +7,38 @@\n \n \n class DictInterfaceTests(unittest.TestCase):\n-    """ tests for dict style interface """\n+    """tests for dict style interface"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def test_getitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        foo = DummyObject(\'foo\')\n-        folder._setOb(\'foo\', foo)\n-        self.assertEqual(folder[\'foo\'], foo)\n-        self.assertEqual(folder.__getitem__(\'foo\'), foo)\n-        self.assertRaises(KeyError, folder.__getitem__, \'bar\')\n+        foo = DummyObject("foo")\n+        folder._setOb("foo", foo)\n+        self.assertEqual(folder["foo"], foo)\n+        self.assertEqual(folder.__getitem__("foo"), foo)\n+        self.assertRaises(KeyError, folder.__getitem__, "bar")\n \n     def test_setitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        foo = DummyObject(\'foo\')\n-        folder[\'foo\'] = foo\n-        self.assertEqual(folder._getOb(\'foo\'), foo)\n+        foo = DummyObject("foo")\n+        folder["foo"] = foo\n+        self.assertEqual(folder._getOb("foo"), foo)\n \n     def test_contains(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder._setOb(\'foo\', DummyObject(\'foo\'))\n-        folder._setOb(\'bar\', DummyObject(\'bar\'))\n-        self.assertTrue(\'foo\' in folder)\n-        self.assertTrue(\'bar\' in folder)\n+        folder._setOb("foo", DummyObject("foo"))\n+        folder._setOb("bar", DummyObject("bar"))\n+        self.assertTrue("foo" in folder)\n+        self.assertTrue("bar" in folder)\n \n     def test_delitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder._setOb(\'foo\', DummyObject(\'foo\'))\n-        folder._setOb(\'bar\', DummyObject(\'bar\'))\n+        folder._setOb("foo", DummyObject("foo"))\n+        folder._setOb("bar", DummyObject("bar"))\n         self.assertEqual(len(folder.objectIds()), 2)\n-        del folder[\'foo\']\n-        del folder[\'bar\']\n+        del folder["foo"]\n+        del folder["bar"]\n         self.assertEqual(len(folder.objectIds()), 0)\n \n     def test_len_empty_folder(self):\n@@ -47,40 +47,40 @@ def test_len_empty_folder(self):\n \n     def test_len_one_child(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder[\'child\'] = DummyObject(\'child\')\n+        folder["child"] = DummyObject("child")\n         self.assertEqual(len(folder), 1)\n \n     def test_to_verify_ticket_9120(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder[\'ob1\'] = ob1 = DummyObject(\'ob1\')\n-        folder[\'ob2\'] = DummyObject(\'ob2\')\n-        folder[\'ob3\'] = DummyObject(\'ob3\')\n-        folder[\'ob4\'] = ob4 = DummyObject(\'ob4\')\n-        del folder[\'ob2\']\n-        del folder[\'ob3\']\n-        self.assertEqual(folder.keys(), [\'ob1\', \'ob4\'])\n+        folder["ob1"] = ob1 = DummyObject("ob1")\n+        folder["ob2"] = DummyObject("ob2")\n+        folder["ob3"] = DummyObject("ob3")\n+        folder["ob4"] = ob4 = DummyObject("ob4")\n+        del folder["ob2"]\n+        del folder["ob3"]\n+        self.assertEqual(folder.keys(), ["ob1", "ob4"])\n         self.assertEqual(list(map(aq_base, folder.values())), [ob1, ob4])\n         self.assertEqual([key in folder for key in folder], [True, True])\n \n \n class RelatedToDictInterfaceTests(unittest.TestCase):\n-    """ various tests which are related to the dict-like interface """\n+    """various tests which are related to the dict-like interface"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder._setOb(\'o1\', DummyObject(\'o1\', \'mt1\'))\n-        folder._setOb(\'o2\', DummyObject(\'o2\', \'mt2\'))\n-        folder._setOb(\'o3\', DummyObject(\'o3\', \'mt1\'))\n-        folder._setOb(\'o4\', DummyObject(\'o4\', \'mt2\'))\n+        folder._setOb("o1", DummyObject("o1", "mt1"))\n+        folder._setOb("o2", DummyObject("o2", "mt2"))\n+        folder._setOb("o3", DummyObject("o3", "mt1"))\n+        folder._setOb("o4", DummyObject("o4", "mt2"))\n         return folder\n \n     def testObjectIdsWithSpec(self):\n         folder = self.create()\n-        self.assertEqual([\'o1\', \'o3\'], folder.objectIds(spec=\'mt1\'))\n-        self.assertEqual([\'o2\', \'o4\'], folder.objectIds(spec=\'mt2\'))\n-        folder.moveObjectsToTop([\'o3\'])\n-        folder.moveObjectsDown([\'o2\'])\n-        self.assertEqual([\'o3\', \'o1\'], folder.objectIds(spec=\'mt1\'))\n-        self.assertEqual([\'o4\', \'o2\'], folder.objectIds(spec=\'mt2\'))\n+        self.assertEqual(["o1", "o3"], folder.objectIds(spec="mt1"))\n+        self.assertEqual(["o2", "o4"], folder.objectIds(spec="mt2"))\n+        folder.moveObjectsToTop(["o3"])\n+        folder.moveObjectsDown(["o2"])\n+        self.assertEqual(["o3", "o1"], folder.objectIds(spec="mt1"))\n+        self.assertEqual(["o4", "o2"], folder.objectIds(spec="mt2"))\ndiff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py\nindex 70ed18a..d4b3371 100644\n--- a/src/plone/folder/tests/test_integration.py\n+++ b/src/plone/folder/tests/test_integration.py\n@@ -11,23 +11,22 @@\n \n @implementer(IOrderable)\n class DummyFolder(OrderedBTreeFolderBase, Implicit):\n-    """ we need to mix in acquisition """\n+    """we need to mix in acquisition"""\n \n-    meta_type = \'DummyFolder\'\n+    meta_type = "DummyFolder"\n \n \n class IntegrationTests(unittest.TestCase):\n-\n     layer = PLONEFOLDER_FUNCTIONAL_TESTING\n \n     def testExportDoesntIncludeParent(self):\n-        self.app = self.layer[\'app\']\n-        self.app._setOb(\'foo\', DummyFolder(\'foo\'))\n+        self.app = self.layer["app"]\n+        self.app._setOb("foo", DummyFolder("foo"))\n         foo = self.app.foo\n-        foo[\'bar\'] = DummyFolder(\'bar\')\n-        savepoint(optimistic=True)      # savepoint assigns oids\n+        foo["bar"] = DummyFolder("bar")\n+        savepoint(optimistic=True)  # savepoint assigns oids\n         # now let\'s export to a buffer and check the objects...\n         exp = BytesIO()\n         self.app._p_jar.exportFile(foo.bar._p_oid, exp)\n-        self.assertTrue(b\'bar\' in exp.getvalue())\n-        self.assertFalse(b\'foo\' in exp.getvalue())\n+        self.assertTrue(b"bar" in exp.getvalue())\n+        self.assertFalse(b"foo" in exp.getvalue())\ndiff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py\nindex c12d7f7..6a4b174 100644\n--- a/src/plone/folder/tests/test_ordering_adapters.py\n+++ b/src/plone/folder/tests/test_ordering_adapters.py\n@@ -8,7 +8,7 @@\n \n \n class OrderingAdapterTests(unittest.TestCase):\n-    """ tests regarding available ordering adapters """\n+    """tests regarding available ordering adapters"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n@@ -18,21 +18,21 @@ def testDefaultAdapter(self):\n \n     def testUnorderedOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        folder._ordering = \'unordered\'\n+        folder._ordering = "unordered"\n         self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))\n \n     def testUnknownOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        folder._ordering = \'foo\'\n+        folder._ordering = "foo"\n         self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))\n \n     def testSetOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        folder.setOrdering(\'unordered\')\n+        folder.setOrdering("unordered")\n         self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))\n         folder.setOrdering()\n         self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))\n \n     def testSetUnknownOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        self.assertRaises(ComponentLookupError, folder.setOrdering, \'foo\')\n+        self.assertRaises(ComponentLookupError, folder.setOrdering, "foo")\ndiff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py\nindex 8a7208f..05f7ff5 100644\n--- a/src/plone/folder/tests/test_ordersupport.py\n+++ b/src/plone/folder/tests/test_ordersupport.py\n@@ -16,16 +16,16 @@ def getId(self):\n \n \n class OFSOrderSupportTests(unittest.TestCase):\n-    """ tests borrowed from OFS.tests.testOrderSupport """\n+    """tests borrowed from OFS.tests.testOrderSupport"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n-        folder = TestFolder(\'f1\')\n-        folder[\'o1\'] = DummyObject(\'o1\', \'mt1\')\n-        folder[\'o2\'] = DummyObject(\'o2\', \'mt2\')\n-        folder[\'o3\'] = DummyObject(\'o3\', \'mt1\')\n-        folder[\'o4\'] = DummyObject(\'o4\', \'mt2\')\n+        folder = TestFolder("f1")\n+        folder["o1"] = DummyObject("o1", "mt1")\n+        folder["o2"] = DummyObject("o2", "mt2")\n+        folder["o3"] = DummyObject("o3", "mt1")\n+        folder["o4"] = DummyObject("o4", "mt2")\n         return folder\n \n     # Test for ordering of basic methods\n@@ -39,38 +39,24 @@ def test_objectIdsOrdered(self):\n     def test_objectValuesOrdered(self):\n         folder = self.create()\n         self.assertEqual(\n-            ["o1", "o2", "o3", "o4"],\n-            [x.id for x in folder.objectValues()]\n+            ["o1", "o2", "o3", "o4"], [x.id for x in folder.objectValues()]\n         )\n         folder.moveObjectsUp(("o2",), 1)\n         self.assertEqual(\n-            ["o2", "o1", "o3", "o4"],\n-            [x.id for x in folder.objectValues()]\n+            ["o2", "o1", "o3", "o4"], [x.id for x in folder.objectValues()]\n         )\n \n     def test_objectItemsOrdered(self):\n         folder = self.create()\n-        self.assertEqual(\n-            ["o1", "o2", "o3", "o4"],\n-            [x for x, y in folder.objectItems()]\n-        )\n+        self.assertEqual(["o1", "o2", "o3", "o4"], [x for x, y in folder.objectItems()])\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEqual(\n-            ["o2", "o1", "o3", "o4"],\n-            [x for x, y in folder.objectItems()]\n-        )\n+        self.assertEqual(["o2", "o1", "o3", "o4"], [x for x, y in folder.objectItems()])\n \n     def test_iterkeys(self):\n         folder = self.create()\n-        self.assertEqual(\n-            ["o1", "o2", "o3", "o4"],\n-            [x for x in folder.keys()]\n-        )\n+        self.assertEqual(["o1", "o2", "o3", "o4"], [x for x in folder.keys()])\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEqual(\n-            ["o2", "o1", "o3", "o4"],\n-            [x for x in folder.keys()]\n-        )\n+        self.assertEqual(["o2", "o1", "o3", "o4"], [x for x in folder.keys()])\n \n     def test_iter(self):\n         folder = self.create()\n@@ -80,11 +66,11 @@ def test_iter(self):\n \n     def test_getitem(self):\n         ordering = IOrdering(self.create())\n-        self.assertEqual(ordering[1], \'o2\')\n-        self.assertEqual(ordering[-1], \'o4\')\n-        self.assertEqual(ordering[1:2], [\'o2\'])\n-        self.assertEqual(ordering[1:-1], [\'o2\', \'o3\'])\n-        self.assertEqual(ordering[1:], [\'o2\', \'o3\', \'o4\'])\n+        self.assertEqual(ordering[1], "o2")\n+        self.assertEqual(ordering[-1], "o4")\n+        self.assertEqual(ordering[1:2], ["o2"])\n+        self.assertEqual(ordering[1:-1], ["o2", "o3"])\n+        self.assertEqual(ordering[1:], ["o2", "o3", "o4"])\n \n     # Tests borrowed from OFS.tests.testsOrderSupport\n \n@@ -92,271 +78,279 @@ def runTableTests(self, methodname, table):\n         for args, order, rval in table:\n             f = self.create()\n             method = getattr(f, methodname)\n-            if rval == \'ValueError\':\n+            if rval == "ValueError":\n                 self.assertRaises(ValueError, method, *args)\n             else:\n                 self.assertEqual(method(*args), rval)\n             self.assertEqual(f.objectIds(), order)\n \n     def test_moveObjectsUp(self):\n-        self.runTableTests(\'moveObjectsUp\',\n-              ( ( ( \'o4\', 1 ),         [\'o1\', \'o2\', \'o4\', \'o3\'], 1 )\n-              , ( ( \'o4\', 2 ),         [\'o1\', \'o4\', \'o2\', \'o3\'], 1 )\n-              , ( ( (\'o1\', \'o3\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o1\', \'o3\'), 9 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), 1 ), [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                       [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o2\', \'o3\', \'o4\') ),\n-                                       [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1)\n-              , ( ( (\'o3\', \'o1\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsUp",\n+            (\n+                (("o4", 1), ["o1", "o2", "o4", "o3"], 1),\n+                (("o4", 2), ["o1", "o4", "o2", "o3"], 1),\n+                ((("o1", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o1", "o3"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o2", "o3", "o1", "o4"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o2", "o3", "o1", "o4"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o3", "o1"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def test_moveObjectsDown(self):\n-        self.runTableTests(\'moveObjectsDown\',\n-              ( ( ( \'o1\', 1 ),         [\'o2\', \'o1\', \'o3\', \'o4\'], 1 )\n-              , ( ( \'o1\', 2 ),         [\'o2\', \'o3\', \'o1\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o4\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o4\'), 9 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), 1 ), [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                       [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\') ),\n-                                       [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), 1 ), [\'o1\', \'o2\', \'o4\', \'o3\'], 1)\n-              , ( ( (\'o4\', \'o2\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsDown",\n+            (\n+                (("o1", 1), ["o2", "o1", "o3", "o4"], 1),\n+                (("o1", 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("o2", "o4"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o4"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o1", "o4", "o2", "o3"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o1", "o4", "o2", "o3"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"), 1), ["o1", "o2", "o4", "o3"], 1),\n+                ((("o4", "o2"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def test_moveObjectsToTop(self):\n-        self.runTableTests(\'moveObjectsToTop\',\n-              ( ( ( \'o4\', ),         [\'o4\', \'o1\', \'o2\', \'o3\'], 1 )\n-              , ( ( (\'o1\', \'o3\'), ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), ), [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                     [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o2\', \'o3\', \'o4\') ),\n-                                     [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), ), [\'o3\', \'o1\', \'o2\', \'o4\'], 1)\n-              , ( ( (\'o3\', \'o1\'), ), [\'o3\', \'o1\', \'o2\', \'o4\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsToTop",\n+            (\n+                (("o4",), ["o4", "o1", "o2", "o3"], 1),\n+                ((("o1", "o3"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"),), ["o3", "o1", "o2", "o4"], 1),\n+                ((("o3", "o1"),), ["o3", "o1", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def test_moveObjectsToBottom(self):\n-        self.runTableTests(\'moveObjectsToBottom\',\n-              ( ( ( \'o1\', ),         [\'o2\', \'o3\', \'o4\', \'o1\'], 1 )\n-              , ( ( (\'o2\', \'o4\'), ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), ), [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                     [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\') ),\n-                                     [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), ), [\'o1\', \'o2\', \'o4\', \'o3\'], 1)\n-              , ( ( (\'o4\', \'o2\'), ), [\'o1\', \'o3\', \'o4\', \'o2\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsToBottom",\n+            (\n+                (("o1",), ["o2", "o3", "o4", "o1"], 1),\n+                ((("o2", "o4"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"),), ["o1", "o2", "o4", "o3"], 1),\n+                ((("o4", "o2"),), ["o1", "o3", "o4", "o2"], 1),\n+            ),\n+        )\n \n     def test_orderObjects(self):\n-        self.runTableTests(\'orderObjects\',\n-              ( ( ( \'id\', \'id\' ),       [\'o4\', \'o3\', \'o2\', \'o1\'], -1)\n-              , ( ( \'meta_type\', \'\' ),  [\'o1\', \'o3\', \'o2\', \'o4\'], -1)\n-              # for the next line the sort order is different from the\n-              # original test in OFS, since the current implementation\n-              # keeps the original order as much as possible, i.e. minimize\n-              # exchange operations within the list;  this is correct as\n-              # far as the test goes, since it didn\'t specify a secondary\n-              # sort key...\n-              , ( ( \'meta_type\', \'n\' ), [\'o2\', \'o4\', \'o1\', \'o3\'], -1)\n-              )\n-            )\n+        self.runTableTests(\n+            "orderObjects",\n+            (\n+                (("id", "id"), ["o4", "o3", "o2", "o1"], -1),\n+                (("meta_type", ""), ["o1", "o3", "o2", "o4"], -1)\n+                # for the next line the sort order is different from the\n+                # original test in OFS, since the current implementation\n+                # keeps the original order as much as possible, i.e. minimize\n+                # exchange operations within the list;  this is correct as\n+                # far as the test goes, since it didn\'t specify a secondary\n+                # sort key...\n+                ,\n+                (("meta_type", "n"), ["o2", "o4", "o1", "o3"], -1),\n+            ),\n+        )\n \n     def test_getObjectPosition(self):\n-        self.runTableTests(\'getObjectPosition\',\n-              ( ( ( \'o2\', ), [\'o1\', \'o2\', \'o3\', \'o4\'], 1)\n-              , ( ( \'o4\', ), [\'o1\', \'o2\', \'o3\', \'o4\'], 3)\n-              , ( ( \'n2\', ), [\'o1\', \'o2\', \'o3\', \'o4\'], \'ValueError\')\n-              )\n-            )\n+        self.runTableTests(\n+            "getObjectPosition",\n+            (\n+                (("o2",), ["o1", "o2", "o3", "o4"], 1),\n+                (("o4",), ["o1", "o2", "o3", "o4"], 3),\n+                (("n2",), ["o1", "o2", "o3", "o4"], "ValueError"),\n+            ),\n+        )\n \n     def test_moveObjectToPosition(self):\n-        self.runTableTests(\'moveObjectToPosition\',\n-              ( ( ( \'o2\', 2 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1)\n-              , ( ( \'o4\', 2 ), [\'o1\', \'o2\', \'o4\', \'o3\'], 1)\n-              , ( ( \'n2\', 2 ), [\'o1\', \'o2\', \'o3\', \'o4\'], \'ValueError\')\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectToPosition",\n+            (\n+                (("o2", 2), ["o1", "o3", "o2", "o4"], 1),\n+                (("o4", 2), ["o1", "o2", "o4", "o3"], 1),\n+                (("n2", 2), ["o1", "o2", "o3", "o4"], "ValueError"),\n+            ),\n+        )\n \n     def test_getObjectPosition_error_message(self):\n         folder = self.create()\n         try:\n-            folder.getObjectPosition(\'n4\')\n+            folder.getObjectPosition("n4")\n             self.assertFail()\n         except ValueError as err:\n-            self.assertEqual(\n-                str(err), \'No object with id "n4" exists in "f1".\')\n+            self.assertEqual(str(err), \'No object with id "n4" exists in "f1".\')\n \n \n class PloneOrderSupportTests(unittest.TestCase):\n-    """ tests borrowed from Products.CMFPlone.tests.testOrderSupport """\n+    """tests borrowed from Products.CMFPlone.tests.testOrderSupport"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def setUp(self):\n         self.folder = OrderedBTreeFolderBase("f1")\n-        self.folder[\'foo\'] = DummyObject(\'foo\', \'mt1\')\n-        self.folder[\'bar\'] = DummyObject(\'bar\', \'mt1\')\n-        self.folder[\'baz\'] = DummyObject(\'baz\', \'mt1\')\n+        self.folder["foo"] = DummyObject("foo", "mt1")\n+        self.folder["bar"] = DummyObject("bar", "mt1")\n+        self.folder["baz"] = DummyObject("baz", "mt1")\n \n     def testGetObjectPosition(self):\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObject(self):\n-        self.folder.moveObjectToPosition(\'foo\', 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("foo", 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectToSamePos(self):\n-        self.folder.moveObjectToPosition(\'bar\', 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("bar", 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectToFirstPos(self):\n-        self.folder.moveObjectToPosition(\'bar\', 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("bar", 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectToLastPos(self):\n-        self.folder.moveObjectToPosition(\'bar\', 2)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectToPosition("bar", 2)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveObjectOutLowerBounds(self):\n         # Pos will be normalized to 0\n-        self.folder.moveObjectToPosition(\'bar\', -1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("bar", -1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectOutUpperBounds(self):\n         # Pos will be normalized to 2\n-        self.folder.moveObjectToPosition(\'bar\', 3)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectToPosition("bar", 3)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveObjectsUp(self):\n-        self.folder.moveObjectsUp([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectsUp(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectsDown(self):\n-        self.folder.moveObjectsDown([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsDown(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveObjectsToTop(self):\n-        self.folder.moveObjectsToTop([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectsToTop(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectsToBottom(self):\n-        self.folder.moveObjectsToBottom([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsToBottom(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveTwoObjectsUp(self):\n-        self.folder.moveObjectsUp([\'bar\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.moveObjectsUp(["bar", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testMoveTwoObjectsDown(self):\n-        self.folder.moveObjectsDown([\'foo\', \'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsDown(["foo", "bar"])\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveTwoObjectsToTop(self):\n-        self.folder.moveObjectsToTop([\'bar\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.moveObjectsToTop(["bar", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testMoveTwoObjectsToBottom(self):\n-        self.folder.moveObjectsToBottom([\'foo\', \'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsToBottom(["foo", "bar"])\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testOrderObjects(self):\n-        self.folder.orderObjects(\'id\')\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.orderObjects("id")\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testOrderObjectsReverse(self):\n-        self.folder.orderObjects(\'id\', reverse=True)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.orderObjects("id", reverse=True)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testOrderObjectsByMethod(self):\n-        self.folder.orderObjects(\'dummy_method\')\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.orderObjects("dummy_method")\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testOrderObjectsOnlyReverse(self):\n         self.folder.orderObjects(reverse=True)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testSubsetIds(self):\n-        self.folder.moveObjectsByDelta([\'baz\'], -1, [\'foo\', \'bar\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsByDelta(["baz"], -1, ["foo", "bar", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testSkipObjectsNotInSubsetIds(self):\n-        self.folder.moveObjectsByDelta([\'baz\'], -1, [\'foo\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)  # no move\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.moveObjectsByDelta(["baz"], -1, ["foo", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)  # no move\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testIgnoreNonObjects(self):\n         # Fix for (http://dev.plone.org/plone/ticket/3959) non\n         # contentish objects cause errors, we should just ignore them\n-        self.folder.moveObjectsByDelta([\'bar\', \'blah\'], -1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectsByDelta(["bar", "blah"], -1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testNotifyRemoved(self):\n         ordering = self.folder.getOrdering()\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'foo\', \'bar\', \'baz\']\n-        )\n+        self.assertEqual(ordering.idsInOrder(), ["foo", "bar", "baz"])\n \n         # make sure notifyRemoved with non-existent id does not throw error\n-        ordering.notifyRemoved(\'foobar\')\n+        ordering.notifyRemoved("foobar")\n \n         # normal\n-        ordering.notifyRemoved(\'foo\')\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'bar\', \'baz\']\n-        )\n+        ordering.notifyRemoved("foo")\n+        self.assertEqual(ordering.idsInOrder(), ["bar", "baz"])\ndiff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py\nindex d3a28e0..eca9544 100644\n--- a/src/plone/folder/tests/test_partialordering.py\n+++ b/src/plone/folder/tests/test_partialordering.py\n@@ -13,21 +13,21 @@\n \n \n class PartialOrderingTests(unittest.TestCase):\n-    """ tests regarding order-support for only items marked orderable """\n+    """tests regarding order-support for only items marked orderable"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n         container = OrderedBTreeFolderBase()\n-        container.setOrdering(\'partial\')\n-        container[\'o1\'] = Orderable(\'o1\', \'mt1\')\n-        container[\'o2\'] = Orderable(\'o2\', \'mt2\')\n-        container[\'c1\'] = Chaoticle(\'c1\', \'mt3\')\n-        container[\'o3\'] = Orderable(\'o3\', \'mt1\')\n-        container[\'c2\'] = Chaoticle(\'c2\', \'mt2\')\n-        container[\'c3\'] = Chaoticle(\'c3\', \'mt1\')\n-        container[\'o4\'] = Orderable(\'o4\', \'mt2\')\n-        self.unordered = [\'c1\', \'c2\', \'c3\']\n+        container.setOrdering("partial")\n+        container["o1"] = Orderable("o1", "mt1")\n+        container["o2"] = Orderable("o2", "mt2")\n+        container["c1"] = Chaoticle("c1", "mt3")\n+        container["o3"] = Orderable("o3", "mt1")\n+        container["c2"] = Chaoticle("c2", "mt2")\n+        container["c3"] = Chaoticle("c3", "mt1")\n+        container["o4"] = Orderable("o4", "mt2")\n+        self.unordered = ["c1", "c2", "c3"]\n         ordering = container.getOrdering()\n         return container, ordering\n \n@@ -38,43 +38,29 @@ def testAdapter(self):\n     def testNotifyAdded(self):\n         container, ordering = self.create()\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o3\', \'o4\'] + self.unordered\n+            ordering.idsInOrder(), ["o1", "o2", "o3", "o4"] + self.unordered\n         )\n-        container[\'o5\'] = Orderable(\'o5\')\n+        container["o5"] = Orderable("o5")\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o3\', \'o4\', \'o5\'] + self.unordered\n+            ordering.idsInOrder(), ["o1", "o2", "o3", "o4", "o5"] + self.unordered\n         )\n         self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o1\', \'o2\', \'o3\', \'o4\', \'o5\', \'c1\', \'c2\', \'c3\'}\n+            set(container.objectIds()), {"o1", "o2", "o3", "o4", "o5", "c1", "c2", "c3"}\n         )\n \n     def testNotifyRemoved(self):\n         container, ordering = self.create()\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o3\', \'o4\'] + self.unordered\n+            ordering.idsInOrder(), ["o1", "o2", "o3", "o4"] + self.unordered\n         )\n-        container._delOb(\'o3\')\n+        container._delOb("o3")\n+        self.assertEqual(ordering.idsInOrder(), ["o1", "o2", "o4"] + self.unordered)\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o4\'] + self.unordered\n-        )\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o1\', \'o2\', \'o4\', \'c1\', \'c2\', \'c3\'}\n-        )\n-        container._delOb(\'o1\')\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o2\', \'o4\'] + self.unordered\n-        )\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o2\', \'o4\', \'c1\', \'c2\', \'c3\'}\n+            set(container.objectIds()), {"o1", "o2", "o4", "c1", "c2", "c3"}\n         )\n+        container._delOb("o1")\n+        self.assertEqual(ordering.idsInOrder(), ["o2", "o4"] + self.unordered)\n+        self.assertEqual(set(container.objectIds()), {"o2", "o4", "c1", "c2", "c3"})\n \n     def runTableTests(self, action, tests):\n         for args, order, rval in tests:\n@@ -86,132 +72,175 @@ def runTableTests(self, action, tests):\n             else:\n                 self.assertEqual(method(*args), rval)\n             self.assertEqual(ordering.idsInOrder(), order + self.unordered)\n-            self.assertEqual(set(container.objectIds()), ids)   # all here?\n+            self.assertEqual(set(container.objectIds()), ids)  # all here?\n \n     def testMoveObjectsByDelta(self):\n-        self.runTableTests(\'moveObjectsByDelta\', (\n-            ((\'o1\', 1),                                   [\'o2\', \'o1\', \'o3\', \'o4\'], 1),\n-            ((\'o1\', 2),                                   [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'), 9),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'), 1),                           [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o1\'), 2),                           [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'c1\', \'o3\'), 1),                           [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            (((\'n2\', \'o2\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o4\', \'o2\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsByDelta",\n+            (\n+                (("o1", 1), ["o2", "o1", "o3", "o4"], 1),\n+                (("o1", 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("o2", "o4"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o4"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o1", "o4", "o2", "o3"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o1", "o4", "o2", "o3"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o1"), 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("c1", "o3"), 1), ["o1", "o2", "o4", "o3"], 1),\n+                ((("n2", "o2"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o4", "o2"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsDown(self):\n-        self.runTableTests(\'moveObjectsDown\', (\n-            ((\'o1\',),                                     [\'o2\', \'o1\', \'o3\', \'o4\'], 1),\n-            ((\'o1\', 2),                                   [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'), 9),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'),),                             [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o1\'), 2),                           [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'c1\', \'o3\'),),                             [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            (((\'n2\', \'o2\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o4\', \'o2\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsDown",\n+            (\n+                (("o1",), ["o2", "o1", "o3", "o4"], 1),\n+                (("o1", 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("o2", "o4"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o4"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o1", "o4", "o2", "o3"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o1", "o4", "o2", "o3"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o1"), 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("c1", "o3"),), ["o1", "o2", "o4", "o3"], 1),\n+                ((("n2", "o2"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o4", "o2"),), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsUp(self):\n-        self.runTableTests(\'moveObjectsUp\', (\n-            ((\'o4\',),                                     [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            ((\'o4\', 1),                                   [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            ((\'o4\', 2),                                   [\'o1\', \'o4\', \'o2\', \'o3\'], 1),\n-            (((\'o1\', \'o3\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o1\', \'o3\'), 9),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'), 1),                           [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o2\', \'o3\', \'o4\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o4\'), 2),                           [\'o1\', \'o4\', \'o2\', \'o3\'], 1),\n-            (((\'c1\', \'o3\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'n2\', \'o3\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o3\', \'o1\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsUp",\n+            (\n+                (("o4",), ["o1", "o2", "o4", "o3"], 1),\n+                (("o4", 1), ["o1", "o2", "o4", "o3"], 1),\n+                (("o4", 2), ["o1", "o4", "o2", "o3"], 1),\n+                ((("o1", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o1", "o3"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o2", "o3", "o1", "o4"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o2", "o3", "o1", "o4"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o4"), 2), ["o1", "o4", "o2", "o3"], 1),\n+                ((("c1", "o3"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("n2", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o3", "o1"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsToTop(self):\n-        self.runTableTests(\'moveObjectsToTop\', (\n-            ((\'o4\',),                                  [\'o4\', \'o1\', \'o2\', \'o3\'], 1),\n-            (((\'o1\', \'o3\'),),                          [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'),),                          [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), (\'o2\', \'o3\', \'o4\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o4\'),),                          [\'o4\', \'o1\', \'o2\', \'o3\'], 1),\n-            (((\'c1\', \'o3\'),),                          [\'o3\', \'o1\', \'o2\', \'o4\'], 1),\n-            (((\'n2\', \'o3\'),),                          [\'o3\', \'o1\', \'o2\', \'o4\'], 1),\n-            (((\'o3\', \'o1\'),),                          [\'o3\', \'o1\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsToTop",\n+            (\n+                (("o4",), ["o4", "o1", "o2", "o3"], 1),\n+                ((("o1", "o3"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o4"),), ["o4", "o1", "o2", "o3"], 1),\n+                ((("c1", "o3"),), ["o3", "o1", "o2", "o4"], 1),\n+                ((("n2", "o3"),), ["o3", "o1", "o2", "o4"], 1),\n+                ((("o3", "o1"),), ["o3", "o1", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsToBottom(self):\n-        self.runTableTests(\'moveObjectsToBottom\', (\n-            ((\'o1\',),                                  [\'o2\', \'o3\', \'o4\', \'o1\'], 1),\n-            (((\'o2\', \'o4\'),),                          [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'),),                          [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o1\'),),                          [\'o2\', \'o3\', \'o4\', \'o1\'], 1),\n-            (((\'c1\', \'o2\'),),                          [\'o1\', \'o3\', \'o4\', \'o2\'], 1),\n-            (((\'n2\', \'o3\'),),                          [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            (((\'o4\', \'o2\'),),                          [\'o1\', \'o3\', \'o4\', \'o2\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsToBottom",\n+            (\n+                (("o1",), ["o2", "o3", "o4", "o1"], 1),\n+                ((("o2", "o4"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o1"),), ["o2", "o3", "o4", "o1"], 1),\n+                ((("c1", "o2"),), ["o1", "o3", "o4", "o2"], 1),\n+                ((("n2", "o3"),), ["o1", "o2", "o4", "o3"], 1),\n+                ((("o4", "o2"),), ["o1", "o3", "o4", "o2"], 1),\n+            ),\n+        )\n \n     def testMoveObjectToPosition(self):\n-        self.runTableTests(\'moveObjectToPosition\', (\n-            ((\'o2\', 2), [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            ((\'o4\', 2), [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            ((\'c1\', 2), [\'o1\', \'o2\', \'o3\', \'o4\'], None),  # existent, but non-orderable\n-            ((\'n2\', 2), [\'o1\', \'o2\', \'o3\', \'o4\'], ValueError),\n-        ))\n+        self.runTableTests(\n+            "moveObjectToPosition",\n+            (\n+                (("o2", 2), ["o1", "o3", "o2", "o4"], 1),\n+                (("o4", 2), ["o1", "o2", "o4", "o3"], 1),\n+                (\n+                    ("c1", 2),\n+                    ["o1", "o2", "o3", "o4"],\n+                    None,\n+                ),  # existent, but non-orderable\n+                (("n2", 2), ["o1", "o2", "o3", "o4"], ValueError),\n+            ),\n+        )\n \n     def testOrderObjects(self):\n-        self.runTableTests(\'orderObjects\', (\n-            ((\'id\', \'id\'),       [\'o4\', \'o3\', \'o2\', \'o1\'], -1),\n-            ((\'meta_type\', \'\'),  [\'o1\', \'o3\', \'o2\', \'o4\'], -1),\n-            # for the next line the sort order is different from the\n-            # original test in OFS, since the current implementation\n-            # keeps the original order as much as possible, i.e. minimize\n-            # exchange operations within the list;  this is correct as\n-            # far as the test goes, since it didn\'t specify a secondary\n-            # sort key...\n-            ((\'meta_type\', \'n\'), [\'o2\', \'o4\', \'o1\', \'o3\'], -1),\n-        ))\n+        self.runTableTests(\n+            "orderObjects",\n+            (\n+                (("id", "id"), ["o4", "o3", "o2", "o1"], -1),\n+                (("meta_type", ""), ["o1", "o3", "o2", "o4"], -1),\n+                # for the next line the sort order is different from the\n+                # original test in OFS, since the current implementation\n+                # keeps the original order as much as possible, i.e. minimize\n+                # exchange operations within the list;  this is correct as\n+                # far as the test goes, since it didn\'t specify a secondary\n+                # sort key...\n+                (("meta_type", "n"), ["o2", "o4", "o1", "o3"], -1),\n+            ),\n+        )\n \n     def testGetObjectPosition(self):\n-        self.runTableTests(\'getObjectPosition\', (\n-            ((\'o2\',), [\'o1\', \'o2\', \'o3\', \'o4\'], 1),\n-            ((\'o4\',), [\'o1\', \'o2\', \'o3\', \'o4\'], 3),\n-            ((\'n2\',), [\'o1\', \'o2\', \'o3\', \'o4\'], ValueError),\n-            ((\'c2\',), [\'o1\', \'o2\', \'o3\', \'o4\'], None),  # existent, but non-orderable\n-        ))\n+        self.runTableTests(\n+            "getObjectPosition",\n+            (\n+                (("o2",), ["o1", "o2", "o3", "o4"], 1),\n+                (("o4",), ["o1", "o2", "o3", "o4"], 3),\n+                (("n2",), ["o1", "o2", "o3", "o4"], ValueError),\n+                (\n+                    ("c2",),\n+                    ["o1", "o2", "o3", "o4"],\n+                    None,\n+                ),  # existent, but non-orderable\n+            ),\n+        )\n \n \n @implementer(IOrderable)\n class DummyFolder(OrderedBTreeFolderBase, Implicit):\n-    """ we need to mix in acquisition """\n+    """we need to mix in acquisition"""\n \n-    meta_type = \'DummyFolder\'\n-    _ordering = \'partial\'\n+    meta_type = "DummyFolder"\n+    _ordering = "partial"\n \n     def dummy_method(self):\n         return self.id\n \n \n class PartialOrderingIntegrationTests(unittest.TestCase):\n-\n     layer = PLONEFOLDER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n+        self.app = self.layer["app"]\n         context = self.app\n-        context._setOb(\'foo\', DummyFolder(\'foo\'))   # not pythonic in 2.10 :(\n-        context.foo[\'bar1\'] = DummyFolder(\'bar1\')\n-        context.foo[\'bar2\'] = DummyFolder(\'bar2\')\n-        context.foo[\'bar3\'] = DummyFolder(\'bar3\')\n+        context._setOb("foo", DummyFolder("foo"))  # not pythonic in 2.10 :(\n+        context.foo["bar1"] = DummyFolder("bar1")\n+        context.foo["bar2"] = DummyFolder("bar2")\n+        context.foo["bar3"] = DummyFolder("bar3")\n         savepoint(optimistic=True)\n         self.assertEqual(self.registered, [])\n \n@@ -221,36 +250,38 @@ def registered(self):\n \n     def testAddObjectChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo[\'bar23\'] = DummyFolder(\'bar23\')\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar2\', \'bar3\', \'bar23\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo["bar23"] = DummyFolder("bar23")\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar2", "bar3", "bar23"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n \n     def testRemoveObjectChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo._delOb(\'bar2\',)\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar3\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo._delOb(\n+            "bar2",\n+        )\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar3"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n \n     def testMoveObjectChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo.moveObjectsUp((\'bar2\',))\n-        self.assertEqual(foo.objectIds(), [\'bar2\', \'bar1\', \'bar3\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo.moveObjectsUp(("bar2",))\n+        self.assertEqual(foo.objectIds(), ["bar2", "bar1", "bar3"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n \n     def testOrderObjectsChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo.orderObjects(\'id\', reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar3\', \'bar2\', \'bar1\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo.orderObjects("id", reverse=True)\n+        self.assertEqual(foo.objectIds(), ["bar3", "bar2", "bar1"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n         # Reverse the current ordering.\n         foo.orderObjects(reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar2\', \'bar3\'])\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar2", "bar3"])\n \n     def testOrderObjectsByMethodChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo.orderObjects(\'dummy_method\', reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar3\', \'bar2\', \'bar1\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo.orderObjects("dummy_method", reverse=True)\n+        self.assertEqual(foo.objectIds(), ["bar3", "bar2", "bar1"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n         # Reverse the current ordering.\n         foo.orderObjects(reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar2\', \'bar3\'])\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar2", "bar3"])\ndiff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py\nindex be922b2..f780870 100644\n--- a/src/plone/folder/tests/test_unorderedordering.py\n+++ b/src/plone/folder/tests/test_unorderedordering.py\n@@ -7,17 +7,17 @@\n \n \n class UnorderedOrderingTests(unittest.TestCase):\n-    """ tests regarding order-support for folders with unordered ordering """\n+    """tests regarding order-support for folders with unordered ordering"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n         container = OrderedBTreeFolderBase()\n-        container._ordering = \'unordered\'\n-        container._setOb(\'o1\', DummyObject(\'o1\', \'mt1\'))\n-        container._setOb(\'o2\', DummyObject(\'o2\', \'mt2\'))\n-        container._setOb(\'o3\', DummyObject(\'o3\', \'mt1\'))\n-        container._setOb(\'o4\', DummyObject(\'o4\', \'mt2\'))\n+        container._ordering = "unordered"\n+        container._setOb("o1", DummyObject("o1", "mt1"))\n+        container._setOb("o2", DummyObject("o2", "mt2"))\n+        container._setOb("o3", DummyObject("o3", "mt1"))\n+        container._setOb("o4", DummyObject("o4", "mt2"))\n         return container\n \n     def testAdapter(self):\n@@ -27,28 +27,16 @@ def testAdapter(self):\n \n     def testNotifyAdded(self):\n         container = self.create()\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o1\', \'o2\', \'o3\', \'o4\'}\n-        )\n-        container._setOb(\'o5\', DummyObject(\'o5\', \'mt1\'))\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o1\', \'o2\', \'o3\', \'o4\', \'o5\'}\n-        )\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o3", "o4"})\n+        container._setOb("o5", DummyObject("o5", "mt1"))\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o3", "o4", "o5"})\n \n     def testNotifyRemoved(self):\n         container = self.create()\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o1\', \'o2\', \'o3\', \'o4\'}\n-        )\n-        container._delOb(\'o3\')\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            {\'o1\', \'o2\', \'o4\'}\n-        )\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o3", "o4"})\n+        container._delOb("o3")\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o4"})\n \n     def testGetObjectPosition(self):\n         container = self.create()\n-        self.assertEqual(container.getObjectPosition(\'o2\'), None)\n+        self.assertEqual(container.getObjectPosition("o2"), None)\ndiff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py\nindex 7f2cb18..338b628 100644\n--- a/src/plone/folder/tests/test_webdav.py\n+++ b/src/plone/folder/tests/test_webdav.py\n@@ -16,12 +16,11 @@\n \n \n class TestRequestContainer(Explicit):\n-\n     REQUEST = TestRequest()\n \n \n class WebDAVTests(unittest.TestCase):\n-    """ tests regarding support for WebDAV NullResources """\n+    """tests regarding support for WebDAV NullResources"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n@@ -30,28 +29,28 @@ def test_getitem_not_dav_request(self):\n         folder = CMFOrderedBTreeFolderBase("f1").__of__(root)\n \n         root.REQUEST.maybe_webdav_client = False\n-        root.REQUEST._environ[\'REQUEST_METHOD\'] = \'GET\'\n+        root.REQUEST._environ["REQUEST_METHOD"] = "GET"\n \n-        foo = DummyObject(\'foo\')\n-        folder[\'foo\'] = foo\n+        foo = DummyObject("foo")\n+        folder["foo"] = foo\n \n-        self.assertEqual(folder[\'foo\'], foo)\n+        self.assertEqual(folder["foo"], foo)\n         try:\n-            folder[\'bar\']\n+            folder["bar"]\n             self.fail()\n         except KeyError:\n             pass\n \n-    @unittest.skipUnless(HAS_WEBDAV, \'ZServer is optional\')\n+    @unittest.skipUnless(HAS_WEBDAV, "ZServer is optional")\n     def test_getitem_dav_request(self):\n         root = TestRequestContainer()\n         folder = CMFOrderedBTreeFolderBase("f1").__of__(root)\n \n         root.REQUEST.maybe_webdav_client = True\n-        root.REQUEST._environ[\'REQUEST_METHOD\'] = \'PUT\'\n+        root.REQUEST._environ["REQUEST_METHOD"] = "PUT"\n \n-        foo = DummyObject(\'foo\')\n-        folder[\'foo\'] = foo\n+        foo = DummyObject("foo")\n+        folder["foo"] = foo\n \n-        self.assertEqual(folder[\'foo\'], foo)\n-        self.assertTrue(isinstance(folder[\'bar\'], NullResource))\n+        self.assertEqual(folder["foo"], foo)\n+        self.assertTrue(isinstance(folder["bar"], NullResource))\ndiff --git a/src/plone/folder/tests/utils.py b/src/plone/folder/tests/utils.py\nindex d81e2e9..aa1e79f 100644\n--- a/src/plone/folder/tests/utils.py\n+++ b/src/plone/folder/tests/utils.py\n@@ -3,7 +3,6 @@\n \n \n class DummyObject:\n-\n     def __init__(self, id, meta_type=None):\n         self.id = id\n         self.meta_type = meta_type\n@@ -20,8 +19,8 @@ def dummy_method(self):\n \n @implementer(IOrderable)\n class Orderable(DummyObject):\n-    """ orderable mock object """\n+    """orderable mock object"""\n \n \n class Chaoticle(DummyObject):\n-    """ non-orderable mock object;  this does not implement `IOrderable` """\n+    """non-orderable mock object;  this does not implement `IOrderable`"""\ndiff --git a/src/plone/folder/unordered.py b/src/plone/folder/unordered.py\nindex ea82a74..751443b 100644\n--- a/src/plone/folder/unordered.py\n+++ b/src/plone/folder/unordered.py\n@@ -8,7 +8,7 @@\n @implementer(IOrdering)\n @adapter(IOrderableFolder)\n class UnorderedOrdering:\n-    """ This implementation provides no ordering. """\n+    """This implementation provides no ordering."""\n \n     def __init__(self, context):\n         self.context = context\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:32:29+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/6d9d88b2dda1854e2754e816f4adb82b2177a23d

chore: zpretty

Files changed:
M src/plone/folder/configure.zcml

b'diff --git a/src/plone/folder/configure.zcml b/src/plone/folder/configure.zcml\nindex 490a8f4..ce40737 100644\n--- a/src/plone/folder/configure.zcml\n+++ b/src/plone/folder/configure.zcml\n@@ -1,11 +1,16 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.folder">\n+    i18n_domain="plone.folder"\n+    >\n \n-    <adapter factory=".default.DefaultOrdering" />\n-    <adapter factory=".unordered.UnorderedOrdering"\n-             name="unordered" />\n-    <adapter factory=".partial.PartialOrdering"\n-             name="partial" />\n+  <adapter factory=".default.DefaultOrdering" />\n+  <adapter\n+      factory=".unordered.UnorderedOrdering"\n+      name="unordered"\n+      />\n+  <adapter\n+      factory=".partial.PartialOrdering"\n+      name="partial"\n+      />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:34:44+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/2571b9c23d7f0498c18cc92a12666edaf86265d1

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex dfeee90..c686573 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,7 +13,7 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n@@ -23,10 +23,10 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="folder btree order",\n     author="Plone Foundation",\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:34:54+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/4ab86311378d1697bd7338feaa840d97db973090

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex c686573..cd7a893 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,6 +39,7 @@\n     include_package_data=True,\n     platforms="Any",\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "plone.memoize",\n         "Products.BTreeFolder2",\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:35:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/0757ce34e6ad31623a9393bfc09f2a2c99b63c25

feat: codespell

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2dfa069..f6c08ff 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -293,7 +293,7 @@ Fixes:\n   dict-like API.\n   [optilude]\n \n-- Fix issue with removing non-orderable content for partial ordering suppport.\n+- Fix issue with removing non-orderable content for partial ordering support.\n   [witsch]\n \n - Fix ``getObjectPosition`` to return a value representing "no position" for\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:36:29+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/982386460b2fe90bbe67038afde6aa5eedf60831

feat: drop six usage

Files changed:
M setup.py
M src/plone/folder/default.py
M src/plone/folder/partial.py
M src/plone/folder/tests/test_ordersupport.py

b'diff --git a/setup.py b/setup.py\nindex cd7a893..7eef4f5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -46,7 +46,6 @@\n         "Products.CMFCore",\n         "Products.ZCatalog",\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.component",\n         "zope.container",\ndiff --git a/src/plone/folder/default.py b/src/plone/folder/default.py\nindex 57c4d90..de3f086 100644\n--- a/src/plone/folder/default.py\n+++ b/src/plone/folder/default.py\n@@ -7,8 +7,6 @@\n from zope.container.contained import notifyContainerModified\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IExplicitOrdering)\n @adapter(IOrderableFolder)\ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex 0ae54c2..a78394d 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -6,8 +6,6 @@\n from zope.container.contained import notifyContainerModified\n from zope.interface import implementer\n \n-import six\n-\n \n ORDER_ATTR = "_objectordering"\n \ndiff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py\nindex 05f7ff5..c05001d 100644\n--- a/src/plone/folder/tests/test_ordersupport.py\n+++ b/src/plone/folder/tests/test_ordersupport.py\n@@ -4,7 +4,6 @@\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n from plone.folder.tests.utils import DummyObject\n \n-import six\n import unittest\n \n \n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:37:36+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/808d296c9bd724d20790c613c2d4a736d1a4a0f9

feat: flake8

Files changed:
M src/plone/folder/partial.py
M src/plone/folder/tests/test_webdav.py

b'diff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex a78394d..d1ab5d0 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -38,7 +38,7 @@ def order(self, value):\n \n     def notifyAdded(self, id):\n         """see interfaces.py"""\n-        assert not id in self.order\n+        assert id not in self.order\n         context = aq_base(self.context)\n         obj = context._getOb(id)\n         if IOrderable.providedBy(obj):\ndiff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py\nindex 338b628..d4a9637 100644\n--- a/src/plone/folder/tests/test_webdav.py\n+++ b/src/plone/folder/tests/test_webdav.py\n@@ -4,7 +4,6 @@\n from plone.folder.tests.utils import DummyObject\n from zope.publisher.browser import TestRequest\n \n-import pkg_resources\n import unittest\n \n \n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:45:57+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/7807a50a8a1cb005a84de76fe1f7596ce1d1c165

fix: code is inside src folder

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex c5e3f4f..21289b5 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -49,7 +49,7 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --all --test-path={toxinidir} -s plone.folder {posargs}\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.folder {posargs}\n extras =\n     test\n \n@@ -62,7 +62,7 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.folder {posargs}\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir}/src -s plone.folder {posargs}\n     coverage report -m --format markdown\n extras =\n     test\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T14:46:15+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/ba99db564bbc0200f7009c9c16e59f6894f7277a

feat: declare dependencies

Files changed:
M pyproject.toml
M setup.py

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 92c3af9..9054002 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -81,3 +81,4 @@ Zope = [\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n python-dateutil = [\'dateutil\']\n+\'Products.ZCatalog\' = [\'Products.PluginIndexes\']\ndiff --git a/setup.py b/setup.py\nindex 7eef4f5..07c1bd2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -41,19 +41,13 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        "plone.memoize",\n-        "Products.BTreeFolder2",\n         "Products.CMFCore",\n         "Products.ZCatalog",\n         "setuptools",\n-        "zope.annotation",\n-        "zope.component",\n-        "zope.container",\n-        "zope.interface",\n-        "Zope2",\n     ],\n     extras_require={\n         "test": [\n+            "plone.app.testing",\n             "profilehooks",\n         ]\n     },\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-15T15:36:25+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/445178f54700342af5ba48bb639f08fae5c22361

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2023-04-17T18:13:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/cc9eeed92f75a5bd0ffe9f1ae59e6fb32ed1dc76

Merge pull request #18 from plone/config-with-default-template-dc2e2aa0

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.breaking
A news/5cc689e5.internal
A tox.ini
M CHANGES.rst
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/folder/__init__.py
M src/plone/folder/configure.zcml
M src/plone/folder/default.py
M src/plone/folder/interfaces.py
M src/plone/folder/nogopip.py
M src/plone/folder/ordered.py
M src/plone/folder/partial.py
M src/plone/folder/testing.py
M src/plone/folder/tests/benchmarks.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_ordersupport.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py
M src/plone/folder/tests/utils.py
M src/plone/folder/unordered.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..1b2346d\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 2dfa069..f6c08ff 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -293,7 +293,7 @@ Fixes:\n   dict-like API.\n   [optilude]\n \n-- Fix issue with removing non-orderable content for partial ordering suppport.\n+- Fix issue with removing non-orderable content for partial ordering support.\n   [witsch]\n \n - Fix ``getObjectPosition`` to return a value representing "no position" for\ndiff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9054002 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+\'Products.ZCatalog\' = [\'Products.PluginIndexes\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 3e97765..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[check-manifest]\n-ignore =\n-    bootstrap.py\n-    *.cfg\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex b925890..07c1bd2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,18 +1,19 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.1.1.dev0\'\n+\n+version = "3.1.1.dev0"\n \n setup(\n-    name=\'plone.folder\',\n+    name="plone.folder",\n     version=version,\n-    description=\'BTree-based folder implementation with order support\',\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    description="BTree-based folder implementation with order support",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n@@ -22,38 +23,32 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'folder btree order\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.folder\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    keywords="folder btree order",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.folder",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n-    platforms=\'Any\',\n+    platforms="Any",\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'plone.memoize\',\n-        \'Products.BTreeFolder2\',\n-        \'Products.CMFCore\',\n-        \'Products.ZCatalog\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.interface\',\n-        \'Zope2\',\n+        "Products.CMFCore",\n+        "Products.ZCatalog",\n+        "setuptools",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'profilehooks\',\n+        "test": [\n+            "plone.app.testing",\n+            "profilehooks",\n         ]\n     },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/folder/__init__.py b/src/plone/folder/__init__.py\nindex 40a96af..e69de29 100644\n--- a/src/plone/folder/__init__.py\n+++ b/src/plone/folder/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/plone/folder/configure.zcml b/src/plone/folder/configure.zcml\nindex 490a8f4..ce40737 100644\n--- a/src/plone/folder/configure.zcml\n+++ b/src/plone/folder/configure.zcml\n@@ -1,11 +1,16 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.folder">\n+    i18n_domain="plone.folder"\n+    >\n \n-    <adapter factory=".default.DefaultOrdering" />\n-    <adapter factory=".unordered.UnorderedOrdering"\n-             name="unordered" />\n-    <adapter factory=".partial.PartialOrdering"\n-             name="partial" />\n+  <adapter factory=".default.DefaultOrdering" />\n+  <adapter\n+      factory=".unordered.UnorderedOrdering"\n+      name="unordered"\n+      />\n+  <adapter\n+      factory=".partial.PartialOrdering"\n+      name="partial"\n+      />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/src/plone/folder/default.py b/src/plone/folder/default.py\nindex 84d4c8d..de3f086 100644\n--- a/src/plone/folder/default.py\n+++ b/src/plone/folder/default.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OIBTree import OIBTree\n from persistent.list import PersistentList\n from plone.folder.interfaces import IExplicitOrdering\n@@ -8,14 +7,12 @@\n from zope.container.contained import notifyContainerModified\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IExplicitOrdering)\n @adapter(IOrderableFolder)\n-class DefaultOrdering(object):\n-    """ This implementation uses annotations to store the order on the\n-        object, and supports explicit ordering. """\n+class DefaultOrdering:\n+    """This implementation uses annotations to store the order on the\n+    object, and supports explicit ordering."""\n \n     ORDER_KEY = "plone.folder.ordered.order"\n     POS_KEY = "plone.folder.ordered.pos"\n@@ -24,14 +21,14 @@ def __init__(self, context):\n         self.context = context\n \n     def notifyAdded(self, obj_id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         order = self._order(True)\n         pos = self._pos(True)\n         order.append(obj_id)\n         pos[obj_id] = len(order) - 1\n \n     def notifyRemoved(self, obj_id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         order = self._order()\n         pos = self._pos()\n         try:\n@@ -44,24 +41,18 @@ def notifyRemoved(self, obj_id):\n         for count, obj_id in enumerate(order):\n             pos[obj_id] = count\n \n-    def moveObjectsByDelta(\n-        self,\n-        ids,\n-        delta,\n-        subset_ids=None,\n-        suppress_events=False\n-    ):\n-        """ see interfaces.py """\n+    def moveObjectsByDelta(self, ids, delta, subset_ids=None, suppress_events=False):\n+        """see interfaces.py"""\n         order = self._order()\n         pos = self._pos()\n         min_position = 0\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         if subset_ids is None:\n             subset_ids = self.idsInOrder()\n         elif not isinstance(subset_ids, list):\n             subset_ids = list(subset_ids)\n-        if delta > 0:                   # unify moving direction\n+        if delta > 0:  # unify moving direction\n             ids = reversed(ids)\n             subset_ids.reverse()\n         counter = 0\n@@ -94,41 +85,37 @@ def moveObjectsByDelta(\n                     pos[obj_id] = i\n                     idx += 1\n                 except KeyError:\n-                    raise ValueError(\n-                        \'No object with id "{0:s}" exists.\'.format(obj_id)\n-                    )\n+                    raise ValueError(f\'No object with id "{obj_id:s}" exists.\')\n         if not suppress_events:\n             notifyContainerModified(self.context)\n         return counter\n \n     def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -delta, subset_ids)\n \n     def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, delta, subset_ids)\n \n     def moveObjectsToTop(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -len(self._order()), subset_ids)\n \n     def moveObjectsToBottom(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, len(self._order()), subset_ids)\n \n     def moveObjectToPosition(self, obj_id, position, suppress_events=False):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         delta = position - self.getObjectPosition(obj_id)\n         if delta:\n             return self.moveObjectsByDelta(\n-                obj_id,\n-                delta,\n-                suppress_events=suppress_events\n+                obj_id, delta, suppress_events=suppress_events\n             )\n \n     def orderObjects(self, key=None, reverse=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         if key is None and not reverse:\n             return -1\n         order = self._order()\n@@ -138,11 +125,13 @@ def orderObjects(self, key=None, reverse=None):\n             # Simply reverse the current ordering.\n             order.reverse()\n         else:\n+\n             def keyfn(obj_id):\n                 attr = getattr(self.context._getOb(obj_id), key)\n                 if callable(attr):\n                     return attr()\n                 return attr\n+\n             # order.sort(cmd=None, key=keyfn, reverse=bool(reverse))\n             order = sorted(order, key=keyfn, reverse=bool(reverse))\n             self._set_order(order)\n@@ -151,15 +140,18 @@ def keyfn(obj_id):\n         return -1\n \n     def getObjectPosition(self, obj_id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         pos = self._pos()\n         if obj_id in pos:\n             return pos[obj_id]\n-        raise ValueError(\'No object with id "{0:s}" exists in "{1:s}".\'.format(\n-            obj_id, \'/\'.join(self.context.getPhysicalPath())))\n+        raise ValueError(\n+            \'No object with id "{:s}" exists in "{:s}".\'.format(\n+                obj_id, "/".join(self.context.getPhysicalPath())\n+            )\n+        )\n \n     def idsInOrder(self):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return list(self._order())\n \n     def __getitem__(self, index):\ndiff --git a/src/plone/folder/interfaces.py b/src/plone/folder/interfaces.py\nindex 4f5fef4..d3aab8d 100644\n--- a/src/plone/folder/interfaces.py\n+++ b/src/plone/folder/interfaces.py\n@@ -1,75 +1,74 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IOrderable(Interface):\n-    """ Marker interface for orderable portal content """\n+    """Marker interface for orderable portal content"""\n \n \n class IFolder(Interface):\n-    """ Marker interface for Plone-like folders """\n+    """Marker interface for Plone-like folders"""\n \n \n class IOrderableFolder(IFolder):\n-    """ A Plone-like folder with ordering support """\n+    """A Plone-like folder with ordering support"""\n \n     def getOrdering():\n-        """ return the currently active ordering adapter for this folder """\n+        """return the currently active ordering adapter for this folder"""\n \n-    def setOrdering(ordering=u\'\'):\n-        """ (re)set ordering adapter to be used for this folder """\n+    def setOrdering(ordering=""):\n+        """(re)set ordering adapter to be used for this folder"""\n \n \n class IOrdering(Interface):\n-    """ An adapter providing ordering operations on its context folder.\n+    """An adapter providing ordering operations on its context folder.\n \n-        The OrderedBTreeFolderBase mix-in class will adapt self (the\n-        folder) to this interface when trying to get object position or\n-        find the order of items. There is a default implementation, but\n-        you can provide a different policy.\n+    The OrderedBTreeFolderBase mix-in class will adapt self (the\n+    folder) to this interface when trying to get object position or\n+    find the order of items. There is a default implementation, but\n+    you can provide a different policy.\n \n-        Your adapter (which should still adapt to IOrdered) can\n-        optionally provide IExplicitOrdering, defined below. This is\n-        used to support explicit ordering, e.g. through a UI. """\n+    Your adapter (which should still adapt to IOrdered) can\n+    optionally provide IExplicitOrdering, defined below. This is\n+    used to support explicit ordering, e.g. through a UI."""\n \n     def notifyAdded(obj_id):\n-        """ Inform the ordering implementation that an item was added """\n+        """Inform the ordering implementation that an item was added"""\n \n     def notifyRemoved(obj_id):\n-        """ Inform the ordering implementation that an item was removed """\n+        """Inform the ordering implementation that an item was removed"""\n \n     def getObjectPosition(obj_id):\n-        """ Get the position of the given object id """\n+        """Get the position of the given object id"""\n \n     def idsInOrder():\n-        """ Return all object ids, in the correct order """\n+        """Return all object ids, in the correct order"""\n \n \n class IExplicitOrdering(IOrdering):\n-    """ An adapter allowing explicit ordering """\n+    """An adapter allowing explicit ordering"""\n \n     def moveObjectsByDelta(ids, delta, subset_ids=None, suppress_events=False):\n-        """ Move the specified ids (a sequence, or a single string id)\n-            by the given delta (a positive or negative number). By\n-            default, this moves the objects within the whole set of\n-            sub-items in the context container, but if subset_ids is\n-            specified, it gives a subset of ids to consider.\n-            Should return the number of objects that changed position. """\n+        """Move the specified ids (a sequence, or a single string id)\n+        by the given delta (a positive or negative number). By\n+        default, this moves the objects within the whole set of\n+        sub-items in the context container, but if subset_ids is\n+        specified, it gives a subset of ids to consider.\n+        Should return the number of objects that changed position."""\n \n     def moveObjectsUp(ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects up by delta in container. """\n+        """Move specified sub-objects up by delta in container."""\n \n     def moveObjectsDown(ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects down by delta in container. """\n+        """Move specified sub-objects down by delta in container."""\n \n     def moveObjectsToTop(ids, subset_ids=None):\n-        """ Move specified sub-objects to top of container. """\n+        """Move specified sub-objects to top of container."""\n \n     def moveObjectsToBottom(ids, subset_ids=None):\n-        """ Move specified sub-objects to bottom of container. """\n+        """Move specified sub-objects to bottom of container."""\n \n     def moveObjectToPosition(obj_id, position, suppress_events=False):\n-        """ Move specified object to absolute position. """\n+        """Move specified object to absolute position."""\n \n     def orderObjects(key, reverse=None):\n-        """ Order sub-objects by key and direction. """\n+        """Order sub-objects by key and direction."""\ndiff --git a/src/plone/folder/nogopip.py b/src/plone/folder/nogopip.py\nindex 24d6d2d..d8b25f4 100644\n--- a/src/plone/folder/nogopip.py\n+++ b/src/plone/folder/nogopip.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from App.special_dtml import DTMLFile\n from inspect import currentframe\n@@ -10,6 +9,7 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n+\n logger = getLogger(__name__)\n \n \n@@ -20,7 +20,7 @@ def traverse(base, path):\n     returns: content at the end or None\n     """\n     current = base\n-    for cid in path.split(\'/\'):\n+    for cid in path.split("/"):\n         if not cid:\n             continue\n         try:\n@@ -32,7 +32,7 @@ def traverse(base, path):\n \n @implementer(IPluggableIndex)\n class StubIndex(SimpleItem):\n-    """ stub catalog index doing nothing """\n+    """stub catalog index doing nothing"""\n \n     def __init__(self, id, *args, **kw):\n         self.id = id\n@@ -64,15 +64,15 @@ def clear(self):\n \n @implementer(ISortIndex)\n class GopipIndex(StubIndex):\n-    """ fake index for sorting against `getObjPositionInParent` """\n+    """fake index for sorting against `getObjPositionInParent`"""\n \n-    meta_type = \'GopipIndex\'\n-    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n+    meta_type = "GopipIndex"\n+    manage_options = (dict(label="Settings", action="manage_main"),)\n \n     keyForDocument = 42\n \n     def __init__(self, id, extra=None, caller=None):\n-        super(GopipIndex, self).__init__(id)\n+        super().__init__(id)\n         self.catalog = aq_base(caller._catalog)\n \n     def __len__(self):\n@@ -87,7 +87,7 @@ def documentToKeyMap(self):\n         # results themselves.  luckily this is only ever called from\n         # `sortResults`, so we can get it form there.  oh, and lurker\n         # says this won\'t work in jython, though! :)\n-        rs = currentframe().f_back.f_locals[\'rs\']\n+        rs = currentframe().f_back.f_locals["rs"]\n         rids = {}\n         items = []\n         containers = {}\n@@ -95,17 +95,17 @@ def documentToKeyMap(self):\n         root = getUtility(ISiteRoot).getPhysicalRoot()\n         for rid in rs:\n             path = getpath(rid)\n-            parent, id = path.rsplit(\'/\', 1)\n+            parent, id = path.rsplit("/", 1)\n             container = containers.get(parent)\n             if container is None:\n                 containers[parent] = container = traverse(root, parent)\n-            rids[id] = rid              # remember in case of single folder\n+            rids[id] = rid  # remember in case of single folder\n             items.append((rid, container, id))  # or else for deferred lookup\n         pos = {}\n         if len(containers) == 1:\n             # the usual "all from one folder" case can be optimized\n             folder = list(containers.values())[0]\n-            if getattr(aq_base(folder), \'getOrdering\', None):\n+            if getattr(aq_base(folder), "getOrdering", None):\n                 ids = folder.getOrdering().idsInOrder()\n             else:\n                 # site root or old folders\n@@ -117,7 +117,7 @@ def documentToKeyMap(self):\n             return pos\n         # otherwise the entire map needs to be constructed...\n         for rid, container, id in items:\n-            if getattr(aq_base(container), \'getObjectPosition\', None):\n+            if getattr(aq_base(container), "getObjectPosition", None):\n                 pos[rid] = container.getObjectPosition(id)\n             else:\n                 # fallback for unordered folders\n@@ -125,21 +125,11 @@ def documentToKeyMap(self):\n         return pos\n \n \n-manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n+manage_addGopipForm = DTMLFile("dtml/addGopipIndex", globals())\n \n \n-def manage_addGopipIndex(\n-    self,\n-    identifier,\n-    REQUEST=None,\n-    RESPONSE=None,\n-    URL3=None\n-):\n-    """ add a fake gopip index """\n+def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None, URL3=None):\n+    """add a fake gopip index"""\n     return self.manage_addIndex(\n-        identifier,\n-        \'GopipIndex\',\n-        REQUEST=REQUEST,\n-        RESPONSE=RESPONSE,\n-        URL1=URL3\n+        identifier, "GopipIndex", REQUEST=REQUEST, RESPONSE=RESPONSE, URL1=URL3\n     )\ndiff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex fac2cd6..72edf91 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.Permissions import access_contents_information\n from AccessControl.Permissions import manage_properties\n@@ -14,6 +13,8 @@\n from zope.component import getAdapter\n from zope.component import queryAdapter\n from zope.interface import implementer\n+\n+\n try:\n     from ZTUtils.Lazy import LazyMap\n except ImportError:\n@@ -29,29 +30,29 @@\n \n @implementer(IOrderedContainer, IOrderableFolder, IAttributeAnnotatable)\n class OrderedBTreeFolderBase(BTreeFolder2Base):\n-    """ BTree folder base class with ordering support. The ordering\n-        is done by a named adapter (to IOrdering), which makes the policy\n-        changeable. """\n+    """BTree folder base class with ordering support. The ordering\n+    is done by a named adapter (to IOrdering), which makes the policy\n+    changeable."""\n \n-    _ordering = u\'\'         # name of adapter defining ordering policy\n+    _ordering = ""  # name of adapter defining ordering policy\n \n     security = ClassSecurityInfo()\n \n     def __bool__(self):\n-        """ a folder is something, even if it\'s empty """\n+        """a folder is something, even if it\'s empty"""\n         return True\n \n     @security.protected(access_contents_information)\n     def getOrdering(self):\n-        """ return the currently active ordering adapter for this folder """\n+        """return the currently active ordering adapter for this folder"""\n         adapter = queryAdapter(self, IOrdering, name=self._ordering)\n         if adapter is None:\n             adapter = getAdapter(self, IOrdering)\n         return adapter\n \n     @security.protected(manage_properties)\n-    def setOrdering(self, ordering=u\'\'):\n-        """ (re)set ordering adapter to be used for this folder """\n+    def setOrdering(self, ordering=""):\n+        """(re)set ordering adapter to be used for this folder"""\n         if ordering:\n             # make sure the adapter exists...\n             getAdapter(self, IOrdering, name=ordering)\n@@ -60,30 +61,30 @@ def setOrdering(self, ordering=u\'\'):\n     # IObjectManager\n \n     def _getOb(self, id, default=_marker):\n-        """ Return the named object from the folder. """\n+        """Return the named object from the folder."""\n         try:\n-            return super(OrderedBTreeFolderBase, self)._getOb(id, default)\n+            return super()._getOb(id, default)\n         except KeyError as e:\n             raise AttributeError(e)\n \n     def _setOb(self, id, object):\n-        """ Store the named object in the folder. """\n-        super(OrderedBTreeFolderBase, self)._setOb(id, object)\n-        self.getOrdering().notifyAdded(id)     # notify the ordering adapter\n+        """Store the named object in the folder."""\n+        super()._setOb(id, object)\n+        self.getOrdering().notifyAdded(id)  # notify the ordering adapter\n \n     def _delOb(self, id):\n-        """ Remove the named object from the folder. """\n-        super(OrderedBTreeFolderBase, self)._delOb(id)\n-        self.getOrdering().notifyRemoved(id)   # notify the ordering adapter\n+        """Remove the named object from the folder."""\n+        super()._delOb(id)\n+        self.getOrdering().notifyRemoved(id)  # notify the ordering adapter\n \n     def objectIds(self, spec=None, ordered=True):\n         if not ordered:\n-            return super(OrderedBTreeFolderBase, self).objectIds(spec)\n+            return super().objectIds(spec)\n         ordering = self.getOrdering()\n         if spec is None:\n             return ordering.idsInOrder()\n         else:\n-            ids = super(OrderedBTreeFolderBase, self).objectIds(spec)\n+            ids = super().objectIds(spec)\n             idxs = []\n             for id in ids:\n                 idxs.append((ordering.getObjectPosition(id), id))\n@@ -99,19 +100,20 @@ def objectItems(self, spec=None):\n         # Returns a list of (id, subobject) tuples of the current object.\n         # If \'spec\' is specified, returns only objects whose meta_type match\n         # \'spec\'\n-        return LazyMap(lambda id, _getOb=self._getOb: (id, _getOb(id)),\n-                       self.objectIds(spec))\n+        return LazyMap(\n+            lambda id, _getOb=self._getOb: (id, _getOb(id)), self.objectIds(spec)\n+        )\n \n     # IOrderSupport - mostly deprecated, use the adapter directly instead\n \n     @security.protected(access_contents_information)\n     def getObjectPosition(self, id):\n-        """ Get the position of an object by its id. """\n+        """Get the position of an object by its id."""\n         return self.getOrdering().getObjectPosition(id)\n \n     @security.protected(manage_properties)\n     def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects up by delta in container. """\n+        """Move specified sub-objects up by delta in container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsUp(ids, delta, subset_ids)\n@@ -120,7 +122,7 @@ def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n \n     @security.protected(manage_properties)\n     def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n-        """ Move specified sub-objects down by delta in container. """\n+        """Move specified sub-objects down by delta in container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsDown(ids, delta, subset_ids)\n@@ -129,7 +131,7 @@ def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n \n     @security.protected(manage_properties)\n     def moveObjectsToTop(self, ids, subset_ids=None):\n-        """ Move specified sub-objects to top of container. """\n+        """Move specified sub-objects to top of container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsToTop(ids, subset_ids)\n@@ -138,7 +140,7 @@ def moveObjectsToTop(self, ids, subset_ids=None):\n \n     @security.protected(manage_properties)\n     def moveObjectsToBottom(self, ids, subset_ids=None):\n-        """ Move specified sub-objects to bottom of container. """\n+        """Move specified sub-objects to bottom of container."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectsToBottom(ids, subset_ids)\n@@ -147,7 +149,7 @@ def moveObjectsToBottom(self, ids, subset_ids=None):\n \n     @security.protected(ModifyPortalContent)\n     def moveObject(self, id, position):\n-        """ Move specified object to absolute position. """\n+        """Move specified object to absolute position."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectToPosition(id, position)\n@@ -156,7 +158,7 @@ def moveObject(self, id, position):\n \n     @security.protected(manage_properties)\n     def moveObjectToPosition(self, id, position, suppress_events=False):\n-        """ Move specified object to absolute position. """\n+        """Move specified object to absolute position."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.moveObjectToPosition(id, position, suppress_events)\n@@ -164,24 +166,17 @@ def moveObjectToPosition(self, id, position, suppress_events=False):\n             return 0\n \n     @security.protected(manage_properties)\n-    def moveObjectsByDelta(\n-        self, ids, delta, subset_ids=None, suppress_events=False\n-    ):\n-        """ Move specified sub-objects by delta. """\n+    def moveObjectsByDelta(self, ids, delta, subset_ids=None, suppress_events=False):\n+        """Move specified sub-objects by delta."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n-            return ordering.moveObjectsByDelta(\n-                ids,\n-                delta,\n-                subset_ids,\n-                suppress_events\n-            )\n+            return ordering.moveObjectsByDelta(ids, delta, subset_ids, suppress_events)\n         else:\n             return 0\n \n     @security.protected(manage_properties)\n     def orderObjects(self, key=None, reverse=None):\n-        """ Order sub-objects by key and direction. """\n+        """Order sub-objects by key and direction."""\n         ordering = self.getOrdering()\n         if IExplicitOrdering.providedBy(ordering):\n             return ordering.orderObjects(key, reverse)\n@@ -194,19 +189,15 @@ def iterkeys(self):\n         return iter(self.objectIds())\n \n     def manage_renameObject(self, id, new_id, REQUEST=None):\n-        """ Rename a particular sub-object without changing its position. """\n+        """Rename a particular sub-object without changing its position."""\n         old_position = self.getObjectPosition(id)\n-        result = super(OrderedBTreeFolderBase, self).manage_renameObject(\n-            id,\n-            new_id,\n-            REQUEST\n-        )\n+        result = super().manage_renameObject(id, new_id, REQUEST)\n         if old_position is None:\n             return result\n         self.moveObjectToPosition(new_id, old_position, suppress_events=True)\n-        reindex = getattr(self._getOb(new_id), \'reindexObject\', None)\n+        reindex = getattr(self._getOb(new_id), "reindexObject", None)\n         if reindex is not None:\n-            reindex(idxs=[\'getObjPositionInParent\'])\n+            reindex(idxs=["getObjPositionInParent"])\n         return result\n \n     # Dict interface\n@@ -226,11 +217,14 @@ def __getitem__(self, key):\n             return value\n \n         # WebDAV PUT support\n-        if hasattr(self, \'REQUEST\'):\n+        if hasattr(self, "REQUEST"):\n             request = self.REQUEST\n-            method = request.get(\'REQUEST_METHOD\', \'GET\')\n-            if (HAS_WEBDAV and getattr(request, \'maybe_webdav_client\', False)\n-               and method not in (\'GET\', \'POST\')):\n+            method = request.get("REQUEST_METHOD", "GET")\n+            if (\n+                HAS_WEBDAV\n+                and getattr(request, "maybe_webdav_client", False)\n+                and method not in ("GET", "POST")\n+            ):\n                 return NullResource(self, key, request).__of__(self)\n         raise KeyError(key)\n \n@@ -241,11 +235,11 @@ def __getitem__(self, key):\n \n \n class CMFOrderedBTreeFolderBase(OrderedBTreeFolderBase, PortalFolderBase):\n-    """ BTree folder for CMF sites, with ordering support. The ordering\n-        is done by adapter (to IOrdering), which makes the policy\n-        changeable. """\n+    """BTree folder for CMF sites, with ordering support. The ordering\n+    is done by adapter (to IOrdering), which makes the policy\n+    changeable."""\n \n-    def __init__(self, id, title=\'\'):\n+    def __init__(self, id, title=""):\n         PortalFolderBase.__init__(self, id, title)\n         BTreeFolder2Base.__init__(self, id)\n \ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex 5ef625d..d1ab5d0 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -1,23 +1,21 @@\n from Acquisition import aq_base\n-from zope.interface import implementer\n-from zope.component import adapts\n-from zope.container.contained import notifyContainerModified\n-\n+from plone.folder.interfaces import IExplicitOrdering\n from plone.folder.interfaces import IOrderable\n from plone.folder.interfaces import IOrderableFolder\n-from plone.folder.interfaces import IExplicitOrdering\n-\n-import six\n+from zope.component import adapts\n+from zope.container.contained import notifyContainerModified\n+from zope.interface import implementer\n \n \n-ORDER_ATTR = \'_objectordering\'\n+ORDER_ATTR = "_objectordering"\n \n \n @implementer(IExplicitOrdering)\n-class PartialOrdering(object):\n-    """ this implementation uses a list to store order information on a\n-        regular attribute of the folderish object;  explicit ordering\n-        is supported """\n+class PartialOrdering:\n+    """this implementation uses a list to store order information on a\n+    regular attribute of the folderish object;  explicit ordering\n+    is supported"""\n+\n     adapts(IOrderableFolder)\n \n     def __init__(self, context):\n@@ -39,24 +37,24 @@ def order(self, value):\n         setattr(context, ORDER_ATTR, value)\n \n     def notifyAdded(self, id):\n-        """ see interfaces.py """\n-        assert not id in self.order\n+        """see interfaces.py"""\n+        assert id not in self.order\n         context = aq_base(self.context)\n         obj = context._getOb(id)\n         if IOrderable.providedBy(obj):\n             self.order.append(id)\n-            self.context._p_changed = True      # the order was changed\n+            self.context._p_changed = True  # the order was changed\n \n     def notifyRemoved(self, id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         try:\n             self.order.remove(id)\n-            self.context._p_changed = True      # the order was changed\n-        except ValueError:          # removing non-orderable items is okay\n+            self.context._p_changed = True  # the order was changed\n+        except ValueError:  # removing non-orderable items is okay\n             pass\n \n     def idsInOrder(self, onlyOrderables=False):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         ordered = list(self.order)\n         ordered_set = set(ordered)\n         if not onlyOrderables:\n@@ -66,17 +64,16 @@ def idsInOrder(self, onlyOrderables=False):\n                     ordered.append(id)\n         return ordered\n \n-    def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n-            suppress_events=False):\n-        """ see interfaces.py """\n+    def moveObjectsByDelta(self, ids, delta, subset_ids=None, suppress_events=False):\n+        """see interfaces.py"""\n         min_position = 0\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         if subset_ids is None:\n             subset_ids = self.idsInOrder(onlyOrderables=True)\n         elif not isinstance(subset_ids, list):\n             subset_ids = list(subset_ids)\n-        if delta > 0:                   # unify moving direction\n+        if delta > 0:  # unify moving direction\n             ids = reversed(ids)\n             subset_ids.reverse()\n         counter = 0\n@@ -107,38 +104,39 @@ def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n                     except KeyError:\n                         raise ValueError(\'No object with id "%s" exists.\' % id)\n             if idx > 0:\n-                self.context._p_changed = True      # the order was changed\n+                self.context._p_changed = True  # the order was changed\n         if not suppress_events:\n             notifyContainerModified(self.context)\n         return counter\n \n     def moveObjectsUp(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -delta, subset_ids)\n \n     def moveObjectsDown(self, ids, delta=1, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, delta, subset_ids)\n \n     def moveObjectsToTop(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, -len(self.order), subset_ids)\n \n     def moveObjectsToBottom(self, ids, subset_ids=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         return self.moveObjectsByDelta(ids, len(self.order), subset_ids)\n \n     def moveObjectToPosition(self, id, position, suppress_events=False):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         old_position = self.getObjectPosition(id)\n         if old_position is not None:\n             delta = position - old_position\n             if delta:\n-                return self.moveObjectsByDelta(id, delta,\n-                    suppress_events=suppress_events)\n+                return self.moveObjectsByDelta(\n+                    id, delta, suppress_events=suppress_events\n+                )\n \n     def orderObjects(self, key=None, reverse=None):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         if key is None:\n             if not reverse:\n                 return -1\n@@ -146,17 +144,19 @@ def orderObjects(self, key=None, reverse=None):\n                 # Simply reverse the current ordering.\n                 self.order.reverse()\n         else:\n+\n             def keyfn(id):\n                 attr = getattr(self.context._getOb(id), key)\n                 if callable(attr):\n                     return attr()\n                 return attr\n+\n             self.order = sorted(self.order, key=keyfn, reverse=bool(reverse))\n-        self.context._p_changed = True      # the order was changed\n+        self.context._p_changed = True  # the order was changed\n         return -1\n \n     def getObjectPosition(self, id):\n-        """ see interfaces.py """\n+        """see interfaces.py"""\n         try:\n             # using `index` here might not be that efficient for very large\n             # lists, but the idea behind this adapter is to use it when the\ndiff --git a/src/plone/folder/testing.py b/src/plone/folder/testing.py\nindex b14476f..9927242 100644\n--- a/src/plone/folder/testing.py\n+++ b/src/plone/folder/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n@@ -8,7 +7,6 @@\n \n \n class PloneFolderLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -18,11 +16,9 @@ def setUpZope(self, app, configurationContext):\n PLONEFOLDER_FIXTURE = PloneFolderLayer()\n \n PLONEFOLDER_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONEFOLDER_FIXTURE,),\n-    name=\'PloneFolderLayer:IntegrationTesting\'\n+    bases=(PLONEFOLDER_FIXTURE,), name="PloneFolderLayer:IntegrationTesting"\n )\n \n PLONEFOLDER_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONEFOLDER_FIXTURE,),\n-    name=\'PloneFolderLayer:FunctionalTesting\'\n+    bases=(PLONEFOLDER_FIXTURE,), name="PloneFolderLayer:FunctionalTesting"\n )\ndiff --git a/src/plone/folder/tests/benchmarks.py b/src/plone/folder/tests/benchmarks.py\nindex ab36afd..a788f58 100644\n--- a/src/plone/folder/tests/benchmarks.py\n+++ b/src/plone/folder/tests/benchmarks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # simple benchmarking tests related to plip191\n # to run individual tests using:\n # $ bin/instance test -s plone.folder --tests-pattern=benchmarks -t <testName>\n@@ -8,26 +7,25 @@\n from plone.folder.tests.layer import PloneFolderLayer\n from plone.folder.tests.utils import DummyObject\n from profilehooks import timecall\n-from six.moves import range\n from unittest import defaultTestLoader\n from unittest import TestCase\n \n \n class BenchmarkTests(TestCase):\n-\n     layer = PloneFolderLayer\n \n     def testDeleteSpeed(self):\n         folder = OrderedBTreeFolderBase("f1")\n         for idx in range(100000):\n-            id = \'foo-%s\' % idx\n-            folder[id] = DummyObject(id, \'bar\')\n+            id = "foo-%s" % idx\n+            folder[id] = DummyObject(id, "bar")\n         last = reversed(folder.keys()[-100:])\n \n         @timecall\n         def delete():\n             for id in last:\n                 del folder[id]\n+\n         delete()\n \n \ndiff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py\nindex 5917e88..489604e 100644\n--- a/src/plone/folder/tests/test_dict_interface.py\n+++ b/src/plone/folder/tests/test_dict_interface.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n@@ -8,80 +7,80 @@\n \n \n class DictInterfaceTests(unittest.TestCase):\n-    """ tests for dict style interface """\n+    """tests for dict style interface"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def test_getitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        foo = DummyObject(\'foo\')\n-        folder._setOb(\'foo\', foo)\n-        self.assertEqual(folder[\'foo\'], foo)\n-        self.assertEqual(folder.__getitem__(\'foo\'), foo)\n-        self.assertRaises(KeyError, folder.__getitem__, \'bar\')\n+        foo = DummyObject("foo")\n+        folder._setOb("foo", foo)\n+        self.assertEqual(folder["foo"], foo)\n+        self.assertEqual(folder.__getitem__("foo"), foo)\n+        self.assertRaises(KeyError, folder.__getitem__, "bar")\n \n     def test_setitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        foo = DummyObject(\'foo\')\n-        folder[\'foo\'] = foo\n-        self.assertEqual(folder._getOb(\'foo\'), foo)\n+        foo = DummyObject("foo")\n+        folder["foo"] = foo\n+        self.assertEqual(folder._getOb("foo"), foo)\n \n     def test_contains(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder._setOb(\'foo\', DummyObject(\'foo\'))\n-        folder._setOb(\'bar\', DummyObject(\'bar\'))\n-        self.assertTrue(\'foo\' in folder)\n-        self.assertTrue(\'bar\' in folder)\n+        folder._setOb("foo", DummyObject("foo"))\n+        folder._setOb("bar", DummyObject("bar"))\n+        self.assertTrue("foo" in folder)\n+        self.assertTrue("bar" in folder)\n \n     def test_delitem(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder._setOb(\'foo\', DummyObject(\'foo\'))\n-        folder._setOb(\'bar\', DummyObject(\'bar\'))\n-        self.assertEquals(len(folder.objectIds()), 2)\n-        del folder[\'foo\']\n-        del folder[\'bar\']\n-        self.assertEquals(len(folder.objectIds()), 0)\n+        folder._setOb("foo", DummyObject("foo"))\n+        folder._setOb("bar", DummyObject("bar"))\n+        self.assertEqual(len(folder.objectIds()), 2)\n+        del folder["foo"]\n+        del folder["bar"]\n+        self.assertEqual(len(folder.objectIds()), 0)\n \n     def test_len_empty_folder(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        self.assertEquals(len(folder), 0)\n+        self.assertEqual(len(folder), 0)\n \n     def test_len_one_child(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder[\'child\'] = DummyObject(\'child\')\n-        self.assertEquals(len(folder), 1)\n+        folder["child"] = DummyObject("child")\n+        self.assertEqual(len(folder), 1)\n \n     def test_to_verify_ticket_9120(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder[\'ob1\'] = ob1 = DummyObject(\'ob1\')\n-        folder[\'ob2\'] = DummyObject(\'ob2\')\n-        folder[\'ob3\'] = DummyObject(\'ob3\')\n-        folder[\'ob4\'] = ob4 = DummyObject(\'ob4\')\n-        del folder[\'ob2\']\n-        del folder[\'ob3\']\n-        self.assertEquals(folder.keys(), [\'ob1\', \'ob4\'])\n-        self.assertEquals(list(map(aq_base, folder.values())), [ob1, ob4])\n-        self.assertEquals([key in folder for key in folder], [True, True])\n+        folder["ob1"] = ob1 = DummyObject("ob1")\n+        folder["ob2"] = DummyObject("ob2")\n+        folder["ob3"] = DummyObject("ob3")\n+        folder["ob4"] = ob4 = DummyObject("ob4")\n+        del folder["ob2"]\n+        del folder["ob3"]\n+        self.assertEqual(folder.keys(), ["ob1", "ob4"])\n+        self.assertEqual(list(map(aq_base, folder.values())), [ob1, ob4])\n+        self.assertEqual([key in folder for key in folder], [True, True])\n \n \n class RelatedToDictInterfaceTests(unittest.TestCase):\n-    """ various tests which are related to the dict-like interface """\n+    """various tests which are related to the dict-like interface"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n         folder = OrderedBTreeFolderBase("f1")\n-        folder._setOb(\'o1\', DummyObject(\'o1\', \'mt1\'))\n-        folder._setOb(\'o2\', DummyObject(\'o2\', \'mt2\'))\n-        folder._setOb(\'o3\', DummyObject(\'o3\', \'mt1\'))\n-        folder._setOb(\'o4\', DummyObject(\'o4\', \'mt2\'))\n+        folder._setOb("o1", DummyObject("o1", "mt1"))\n+        folder._setOb("o2", DummyObject("o2", "mt2"))\n+        folder._setOb("o3", DummyObject("o3", "mt1"))\n+        folder._setOb("o4", DummyObject("o4", "mt2"))\n         return folder\n \n     def testObjectIdsWithSpec(self):\n         folder = self.create()\n-        self.assertEquals([\'o1\', \'o3\'], folder.objectIds(spec=\'mt1\'))\n-        self.assertEquals([\'o2\', \'o4\'], folder.objectIds(spec=\'mt2\'))\n-        folder.moveObjectsToTop([\'o3\'])\n-        folder.moveObjectsDown([\'o2\'])\n-        self.assertEquals([\'o3\', \'o1\'], folder.objectIds(spec=\'mt1\'))\n-        self.assertEquals([\'o4\', \'o2\'], folder.objectIds(spec=\'mt2\'))\n+        self.assertEqual(["o1", "o3"], folder.objectIds(spec="mt1"))\n+        self.assertEqual(["o2", "o4"], folder.objectIds(spec="mt2"))\n+        folder.moveObjectsToTop(["o3"])\n+        folder.moveObjectsDown(["o2"])\n+        self.assertEqual(["o3", "o1"], folder.objectIds(spec="mt1"))\n+        self.assertEqual(["o4", "o2"], folder.objectIds(spec="mt2"))\ndiff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py\nindex 959c627..d4b3371 100644\n--- a/src/plone/folder/tests/test_integration.py\n+++ b/src/plone/folder/tests/test_integration.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import Implicit\n+from io import BytesIO\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n-from six import BytesIO\n from transaction import savepoint\n from zope.interface import implementer\n \n@@ -12,23 +11,22 @@\n \n @implementer(IOrderable)\n class DummyFolder(OrderedBTreeFolderBase, Implicit):\n-    """ we need to mix in acquisition """\n+    """we need to mix in acquisition"""\n \n-    meta_type = \'DummyFolder\'\n+    meta_type = "DummyFolder"\n \n \n class IntegrationTests(unittest.TestCase):\n-\n     layer = PLONEFOLDER_FUNCTIONAL_TESTING\n \n     def testExportDoesntIncludeParent(self):\n-        self.app = self.layer[\'app\']\n-        self.app._setOb(\'foo\', DummyFolder(\'foo\'))\n+        self.app = self.layer["app"]\n+        self.app._setOb("foo", DummyFolder("foo"))\n         foo = self.app.foo\n-        foo[\'bar\'] = DummyFolder(\'bar\')\n-        savepoint(optimistic=True)      # savepoint assigns oids\n+        foo["bar"] = DummyFolder("bar")\n+        savepoint(optimistic=True)  # savepoint assigns oids\n         # now let\'s export to a buffer and check the objects...\n         exp = BytesIO()\n         self.app._p_jar.exportFile(foo.bar._p_oid, exp)\n-        self.assertTrue(b\'bar\' in exp.getvalue())\n-        self.assertFalse(b\'foo\' in exp.getvalue())\n+        self.assertTrue(b"bar" in exp.getvalue())\n+        self.assertFalse(b"foo" in exp.getvalue())\ndiff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py\nindex 3efe323..6a4b174 100644\n--- a/src/plone/folder/tests/test_ordering_adapters.py\n+++ b/src/plone/folder/tests/test_ordering_adapters.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.folder.default import DefaultOrdering\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n@@ -9,7 +8,7 @@\n \n \n class OrderingAdapterTests(unittest.TestCase):\n-    """ tests regarding available ordering adapters """\n+    """tests regarding available ordering adapters"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n@@ -19,21 +18,21 @@ def testDefaultAdapter(self):\n \n     def testUnorderedOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        folder._ordering = \'unordered\'\n+        folder._ordering = "unordered"\n         self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))\n \n     def testUnknownOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        folder._ordering = \'foo\'\n+        folder._ordering = "foo"\n         self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))\n \n     def testSetOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        folder.setOrdering(\'unordered\')\n+        folder.setOrdering("unordered")\n         self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))\n         folder.setOrdering()\n         self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))\n \n     def testSetUnknownOrdering(self):\n         folder = OrderedBTreeFolderBase()\n-        self.assertRaises(ComponentLookupError, folder.setOrdering, \'foo\')\n+        self.assertRaises(ComponentLookupError, folder.setOrdering, "foo")\ndiff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py\nindex 0808e1b..c05001d 100644\n--- a/src/plone/folder/tests/test_ordersupport.py\n+++ b/src/plone/folder/tests/test_ordersupport.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from OFS.Traversable import Traversable\n from plone.folder.interfaces import IOrdering\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n from plone.folder.tests.utils import DummyObject\n \n-import six\n import unittest\n \n \n@@ -17,75 +15,61 @@ def getId(self):\n \n \n class OFSOrderSupportTests(unittest.TestCase):\n-    """ tests borrowed from OFS.tests.testOrderSupport """\n+    """tests borrowed from OFS.tests.testOrderSupport"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n-        folder = TestFolder(\'f1\')\n-        folder[\'o1\'] = DummyObject(\'o1\', \'mt1\')\n-        folder[\'o2\'] = DummyObject(\'o2\', \'mt2\')\n-        folder[\'o3\'] = DummyObject(\'o3\', \'mt1\')\n-        folder[\'o4\'] = DummyObject(\'o4\', \'mt2\')\n+        folder = TestFolder("f1")\n+        folder["o1"] = DummyObject("o1", "mt1")\n+        folder["o2"] = DummyObject("o2", "mt2")\n+        folder["o3"] = DummyObject("o3", "mt1")\n+        folder["o4"] = DummyObject("o4", "mt2")\n         return folder\n \n     # Test for ordering of basic methods\n \n     def test_objectIdsOrdered(self):\n         folder = self.create()\n-        self.assertEquals(["o1", "o2", "o3", "o4"], folder.objectIds())\n+        self.assertEqual(["o1", "o2", "o3", "o4"], folder.objectIds())\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(["o2", "o1", "o3", "o4"], folder.objectIds())\n+        self.assertEqual(["o2", "o1", "o3", "o4"], folder.objectIds())\n \n     def test_objectValuesOrdered(self):\n         folder = self.create()\n-        self.assertEquals(\n-            ["o1", "o2", "o3", "o4"],\n-            [x.id for x in folder.objectValues()]\n+        self.assertEqual(\n+            ["o1", "o2", "o3", "o4"], [x.id for x in folder.objectValues()]\n         )\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(\n-            ["o2", "o1", "o3", "o4"],\n-            [x.id for x in folder.objectValues()]\n+        self.assertEqual(\n+            ["o2", "o1", "o3", "o4"], [x.id for x in folder.objectValues()]\n         )\n \n     def test_objectItemsOrdered(self):\n         folder = self.create()\n-        self.assertEquals(\n-            ["o1", "o2", "o3", "o4"],\n-            [x for x, y in folder.objectItems()]\n-        )\n+        self.assertEqual(["o1", "o2", "o3", "o4"], [x for x, y in folder.objectItems()])\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(\n-            ["o2", "o1", "o3", "o4"],\n-            [x for x, y in folder.objectItems()]\n-        )\n+        self.assertEqual(["o2", "o1", "o3", "o4"], [x for x, y in folder.objectItems()])\n \n     def test_iterkeys(self):\n         folder = self.create()\n-        self.assertEquals(\n-            ["o1", "o2", "o3", "o4"],\n-            [x for x in six.iterkeys(folder)]\n-        )\n+        self.assertEqual(["o1", "o2", "o3", "o4"], [x for x in folder.keys()])\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(\n-            ["o2", "o1", "o3", "o4"],\n-            [x for x in six.iterkeys(folder)]\n-        )\n+        self.assertEqual(["o2", "o1", "o3", "o4"], [x for x in folder.keys()])\n \n     def test_iter(self):\n         folder = self.create()\n-        self.assertEquals(["o1", "o2", "o3", "o4"], [x for x in folder])\n+        self.assertEqual(["o1", "o2", "o3", "o4"], [x for x in folder])\n         folder.moveObjectsUp(("o2",), 1)\n-        self.assertEquals(["o2", "o1", "o3", "o4"], [x for x in folder])\n+        self.assertEqual(["o2", "o1", "o3", "o4"], [x for x in folder])\n \n     def test_getitem(self):\n         ordering = IOrdering(self.create())\n-        self.assertEquals(ordering[1], \'o2\')\n-        self.assertEquals(ordering[-1], \'o4\')\n-        self.assertEquals(ordering[1:2], [\'o2\'])\n-        self.assertEquals(ordering[1:-1], [\'o2\', \'o3\'])\n-        self.assertEquals(ordering[1:], [\'o2\', \'o3\', \'o4\'])\n+        self.assertEqual(ordering[1], "o2")\n+        self.assertEqual(ordering[-1], "o4")\n+        self.assertEqual(ordering[1:2], ["o2"])\n+        self.assertEqual(ordering[1:-1], ["o2", "o3"])\n+        self.assertEqual(ordering[1:], ["o2", "o3", "o4"])\n \n     # Tests borrowed from OFS.tests.testsOrderSupport\n \n@@ -93,271 +77,279 @@ def runTableTests(self, methodname, table):\n         for args, order, rval in table:\n             f = self.create()\n             method = getattr(f, methodname)\n-            if rval == \'ValueError\':\n+            if rval == "ValueError":\n                 self.assertRaises(ValueError, method, *args)\n             else:\n                 self.assertEqual(method(*args), rval)\n             self.assertEqual(f.objectIds(), order)\n \n     def test_moveObjectsUp(self):\n-        self.runTableTests(\'moveObjectsUp\',\n-              ( ( ( \'o4\', 1 ),         [\'o1\', \'o2\', \'o4\', \'o3\'], 1 )\n-              , ( ( \'o4\', 2 ),         [\'o1\', \'o4\', \'o2\', \'o3\'], 1 )\n-              , ( ( (\'o1\', \'o3\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o1\', \'o3\'), 9 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), 1 ), [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                       [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o2\', \'o3\', \'o4\') ),\n-                                       [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1)\n-              , ( ( (\'o3\', \'o1\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsUp",\n+            (\n+                (("o4", 1), ["o1", "o2", "o4", "o3"], 1),\n+                (("o4", 2), ["o1", "o4", "o2", "o3"], 1),\n+                ((("o1", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o1", "o3"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o2", "o3", "o1", "o4"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o2", "o3", "o1", "o4"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o3", "o1"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def test_moveObjectsDown(self):\n-        self.runTableTests(\'moveObjectsDown\',\n-              ( ( ( \'o1\', 1 ),         [\'o2\', \'o1\', \'o3\', \'o4\'], 1 )\n-              , ( ( \'o1\', 2 ),         [\'o2\', \'o3\', \'o1\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o4\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o4\'), 9 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), 1 ), [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                       [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\') ),\n-                                       [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), 1 ), [\'o1\', \'o2\', \'o4\', \'o3\'], 1)\n-              , ( ( (\'o4\', \'o2\'), 1 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsDown",\n+            (\n+                (("o1", 1), ["o2", "o1", "o3", "o4"], 1),\n+                (("o1", 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("o2", "o4"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o4"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o1", "o4", "o2", "o3"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o1", "o4", "o2", "o3"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"), 1), ["o1", "o2", "o4", "o3"], 1),\n+                ((("o4", "o2"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def test_moveObjectsToTop(self):\n-        self.runTableTests(\'moveObjectsToTop\',\n-              ( ( ( \'o4\', ),         [\'o4\', \'o1\', \'o2\', \'o3\'], 1 )\n-              , ( ( (\'o1\', \'o3\'), ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), ), [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                     [\'o2\', \'o3\', \'o1\', \'o4\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o2\', \'o3\', \'o4\') ),\n-                                     [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), ), [\'o3\', \'o1\', \'o2\', \'o4\'], 1)\n-              , ( ( (\'o3\', \'o1\'), ), [\'o3\', \'o1\', \'o2\', \'o4\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsToTop",\n+            (\n+                (("o4",), ["o4", "o1", "o2", "o3"], 1),\n+                ((("o1", "o3"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"),), ["o3", "o1", "o2", "o4"], 1),\n+                ((("o3", "o1"),), ["o3", "o1", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def test_moveObjectsToBottom(self):\n-        self.runTableTests(\'moveObjectsToBottom\',\n-              ( ( ( \'o1\', ),         [\'o2\', \'o3\', \'o4\', \'o1\'], 1 )\n-              , ( ( (\'o2\', \'o4\'), ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1 )\n-              , ( ( (\'o2\', \'o3\'), ), [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\') ),\n-                                     [\'o1\', \'o4\', \'o2\', \'o3\'], 2 )\n-              , ( ( (\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\') ),\n-                                     [\'o1\', \'o2\', \'o3\', \'o4\'], 0 )\n-              , ( ( (\'n2\', \'o3\'), ), [\'o1\', \'o2\', \'o4\', \'o3\'], 1)\n-              , ( ( (\'o4\', \'o2\'), ), [\'o1\', \'o3\', \'o4\', \'o2\'], 1 )\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectsToBottom",\n+            (\n+                (("o1",), ["o2", "o3", "o4", "o1"], 1),\n+                ((("o2", "o4"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("n2", "o3"),), ["o1", "o2", "o4", "o3"], 1),\n+                ((("o4", "o2"),), ["o1", "o3", "o4", "o2"], 1),\n+            ),\n+        )\n \n     def test_orderObjects(self):\n-        self.runTableTests(\'orderObjects\',\n-              ( ( ( \'id\', \'id\' ),       [\'o4\', \'o3\', \'o2\', \'o1\'], -1)\n-              , ( ( \'meta_type\', \'\' ),  [\'o1\', \'o3\', \'o2\', \'o4\'], -1)\n-              # for the next line the sort order is different from the\n-              # original test in OFS, since the current implementation\n-              # keeps the original order as much as possible, i.e. minimize\n-              # exchange operations within the list;  this is correct as\n-              # far as the test goes, since it didn\'t specify a secondary\n-              # sort key...\n-              , ( ( \'meta_type\', \'n\' ), [\'o2\', \'o4\', \'o1\', \'o3\'], -1)\n-              )\n-            )\n+        self.runTableTests(\n+            "orderObjects",\n+            (\n+                (("id", "id"), ["o4", "o3", "o2", "o1"], -1),\n+                (("meta_type", ""), ["o1", "o3", "o2", "o4"], -1)\n+                # for the next line the sort order is different from the\n+                # original test in OFS, since the current implementation\n+                # keeps the original order as much as possible, i.e. minimize\n+                # exchange operations within the list;  this is correct as\n+                # far as the test goes, since it didn\'t specify a secondary\n+                # sort key...\n+                ,\n+                (("meta_type", "n"), ["o2", "o4", "o1", "o3"], -1),\n+            ),\n+        )\n \n     def test_getObjectPosition(self):\n-        self.runTableTests(\'getObjectPosition\',\n-              ( ( ( \'o2\', ), [\'o1\', \'o2\', \'o3\', \'o4\'], 1)\n-              , ( ( \'o4\', ), [\'o1\', \'o2\', \'o3\', \'o4\'], 3)\n-              , ( ( \'n2\', ), [\'o1\', \'o2\', \'o3\', \'o4\'], \'ValueError\')\n-              )\n-            )\n+        self.runTableTests(\n+            "getObjectPosition",\n+            (\n+                (("o2",), ["o1", "o2", "o3", "o4"], 1),\n+                (("o4",), ["o1", "o2", "o3", "o4"], 3),\n+                (("n2",), ["o1", "o2", "o3", "o4"], "ValueError"),\n+            ),\n+        )\n \n     def test_moveObjectToPosition(self):\n-        self.runTableTests(\'moveObjectToPosition\',\n-              ( ( ( \'o2\', 2 ), [\'o1\', \'o3\', \'o2\', \'o4\'], 1)\n-              , ( ( \'o4\', 2 ), [\'o1\', \'o2\', \'o4\', \'o3\'], 1)\n-              , ( ( \'n2\', 2 ), [\'o1\', \'o2\', \'o3\', \'o4\'], \'ValueError\')\n-              )\n-            )\n+        self.runTableTests(\n+            "moveObjectToPosition",\n+            (\n+                (("o2", 2), ["o1", "o3", "o2", "o4"], 1),\n+                (("o4", 2), ["o1", "o2", "o4", "o3"], 1),\n+                (("n2", 2), ["o1", "o2", "o3", "o4"], "ValueError"),\n+            ),\n+        )\n \n     def test_getObjectPosition_error_message(self):\n         folder = self.create()\n         try:\n-            folder.getObjectPosition(\'n4\')\n+            folder.getObjectPosition("n4")\n             self.assertFail()\n         except ValueError as err:\n-            self.assertEqual(\n-                str(err), \'No object with id "n4" exists in "f1".\')\n+            self.assertEqual(str(err), \'No object with id "n4" exists in "f1".\')\n \n \n class PloneOrderSupportTests(unittest.TestCase):\n-    """ tests borrowed from Products.CMFPlone.tests.testOrderSupport """\n+    """tests borrowed from Products.CMFPlone.tests.testOrderSupport"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def setUp(self):\n         self.folder = OrderedBTreeFolderBase("f1")\n-        self.folder[\'foo\'] = DummyObject(\'foo\', \'mt1\')\n-        self.folder[\'bar\'] = DummyObject(\'bar\', \'mt1\')\n-        self.folder[\'baz\'] = DummyObject(\'baz\', \'mt1\')\n+        self.folder["foo"] = DummyObject("foo", "mt1")\n+        self.folder["bar"] = DummyObject("bar", "mt1")\n+        self.folder["baz"] = DummyObject("baz", "mt1")\n \n     def testGetObjectPosition(self):\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObject(self):\n-        self.folder.moveObjectToPosition(\'foo\', 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("foo", 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectToSamePos(self):\n-        self.folder.moveObjectToPosition(\'bar\', 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("bar", 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectToFirstPos(self):\n-        self.folder.moveObjectToPosition(\'bar\', 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("bar", 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectToLastPos(self):\n-        self.folder.moveObjectToPosition(\'bar\', 2)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectToPosition("bar", 2)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveObjectOutLowerBounds(self):\n         # Pos will be normalized to 0\n-        self.folder.moveObjectToPosition(\'bar\', -1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectToPosition("bar", -1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectOutUpperBounds(self):\n         # Pos will be normalized to 2\n-        self.folder.moveObjectToPosition(\'bar\', 3)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectToPosition("bar", 3)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveObjectsUp(self):\n-        self.folder.moveObjectsUp([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectsUp(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectsDown(self):\n-        self.folder.moveObjectsDown([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsDown(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveObjectsToTop(self):\n-        self.folder.moveObjectsToTop([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectsToTop(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testMoveObjectsToBottom(self):\n-        self.folder.moveObjectsToBottom([\'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsToBottom(["bar"])\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveTwoObjectsUp(self):\n-        self.folder.moveObjectsUp([\'bar\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.moveObjectsUp(["bar", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testMoveTwoObjectsDown(self):\n-        self.folder.moveObjectsDown([\'foo\', \'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsDown(["foo", "bar"])\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testMoveTwoObjectsToTop(self):\n-        self.folder.moveObjectsToTop([\'bar\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.moveObjectsToTop(["bar", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testMoveTwoObjectsToBottom(self):\n-        self.folder.moveObjectsToBottom([\'foo\', \'bar\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsToBottom(["foo", "bar"])\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testOrderObjects(self):\n-        self.folder.orderObjects(\'id\')\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.orderObjects("id")\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testOrderObjectsReverse(self):\n-        self.folder.orderObjects(\'id\', reverse=True)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.orderObjects("id", reverse=True)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testOrderObjectsByMethod(self):\n-        self.folder.orderObjects(\'dummy_method\')\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.orderObjects("dummy_method")\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testOrderObjectsOnlyReverse(self):\n         self.folder.orderObjects(reverse=True)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testSubsetIds(self):\n-        self.folder.moveObjectsByDelta([\'baz\'], -1, [\'foo\', \'bar\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 2)\n+        self.folder.moveObjectsByDelta(["baz"], -1, ["foo", "bar", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 2)\n \n     def testSkipObjectsNotInSubsetIds(self):\n-        self.folder.moveObjectsByDelta([\'baz\'], -1, [\'foo\', \'baz\'])\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 1)  # no move\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 2)\n+        self.folder.moveObjectsByDelta(["baz"], -1, ["foo", "baz"])\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 1)  # no move\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 2)\n \n     def testIgnoreNonObjects(self):\n         # Fix for (http://dev.plone.org/plone/ticket/3959) non\n         # contentish objects cause errors, we should just ignore them\n-        self.folder.moveObjectsByDelta([\'bar\', \'blah\'], -1)\n-        self.assertEqual(self.folder.getObjectPosition(\'bar\'), 0)\n-        self.assertEqual(self.folder.getObjectPosition(\'foo\'), 1)\n-        self.assertEqual(self.folder.getObjectPosition(\'baz\'), 2)\n+        self.folder.moveObjectsByDelta(["bar", "blah"], -1)\n+        self.assertEqual(self.folder.getObjectPosition("bar"), 0)\n+        self.assertEqual(self.folder.getObjectPosition("foo"), 1)\n+        self.assertEqual(self.folder.getObjectPosition("baz"), 2)\n \n     def testNotifyRemoved(self):\n         ordering = self.folder.getOrdering()\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'foo\', \'bar\', \'baz\']\n-        )\n+        self.assertEqual(ordering.idsInOrder(), ["foo", "bar", "baz"])\n \n         # make sure notifyRemoved with non-existent id does not throw error\n-        ordering.notifyRemoved(\'foobar\')\n+        ordering.notifyRemoved("foobar")\n \n         # normal\n-        ordering.notifyRemoved(\'foo\')\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'bar\', \'baz\']\n-        )\n+        ordering.notifyRemoved("foo")\n+        self.assertEqual(ordering.idsInOrder(), ["bar", "baz"])\ndiff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py\nindex 8468c63..eca9544 100644\n--- a/src/plone/folder/tests/test_partialordering.py\n+++ b/src/plone/folder/tests/test_partialordering.py\n@@ -1,32 +1,33 @@\n-from transaction import savepoint\n from Acquisition import Implicit\n-from zope.interface import implementer\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.partial import PartialOrdering\n-from plone.folder.tests.utils import Orderable, Chaoticle\n-from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n+from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n+from plone.folder.tests.utils import Chaoticle\n+from plone.folder.tests.utils import Orderable\n+from transaction import savepoint\n+from zope.interface import implementer\n \n import unittest\n \n \n class PartialOrderingTests(unittest.TestCase):\n-    """ tests regarding order-support for only items marked orderable """\n+    """tests regarding order-support for only items marked orderable"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n         container = OrderedBTreeFolderBase()\n-        container.setOrdering(u\'partial\')\n-        container[\'o1\'] = Orderable(\'o1\', \'mt1\')\n-        container[\'o2\'] = Orderable(\'o2\', \'mt2\')\n-        container[\'c1\'] = Chaoticle(\'c1\', \'mt3\')\n-        container[\'o3\'] = Orderable(\'o3\', \'mt1\')\n-        container[\'c2\'] = Chaoticle(\'c2\', \'mt2\')\n-        container[\'c3\'] = Chaoticle(\'c3\', \'mt1\')\n-        container[\'o4\'] = Orderable(\'o4\', \'mt2\')\n-        self.unordered = [\'c1\', \'c2\', \'c3\']\n+        container.setOrdering("partial")\n+        container["o1"] = Orderable("o1", "mt1")\n+        container["o2"] = Orderable("o2", "mt2")\n+        container["c1"] = Chaoticle("c1", "mt3")\n+        container["o3"] = Orderable("o3", "mt1")\n+        container["c2"] = Chaoticle("c2", "mt2")\n+        container["c3"] = Chaoticle("c3", "mt1")\n+        container["o4"] = Orderable("o4", "mt2")\n+        self.unordered = ["c1", "c2", "c3"]\n         ordering = container.getOrdering()\n         return container, ordering\n \n@@ -37,43 +38,29 @@ def testAdapter(self):\n     def testNotifyAdded(self):\n         container, ordering = self.create()\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o3\', \'o4\'] + self.unordered\n+            ordering.idsInOrder(), ["o1", "o2", "o3", "o4"] + self.unordered\n         )\n-        container[\'o5\'] = Orderable(\'o5\')\n+        container["o5"] = Orderable("o5")\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o3\', \'o4\', \'o5\'] + self.unordered\n+            ordering.idsInOrder(), ["o1", "o2", "o3", "o4", "o5"] + self.unordered\n         )\n         self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\', \'o5\', \'c1\', \'c2\', \'c3\'])\n+            set(container.objectIds()), {"o1", "o2", "o3", "o4", "o5", "c1", "c2", "c3"}\n         )\n \n     def testNotifyRemoved(self):\n         container, ordering = self.create()\n         self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o3\', \'o4\'] + self.unordered\n-        )\n-        container._delOb(\'o3\')\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o1\', \'o2\', \'o4\'] + self.unordered\n-        )\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o4\', \'c1\', \'c2\', \'c3\'])\n-        )\n-        container._delOb(\'o1\')\n-        self.assertEqual(\n-            ordering.idsInOrder(),\n-            [\'o2\', \'o4\'] + self.unordered\n+            ordering.idsInOrder(), ["o1", "o2", "o3", "o4"] + self.unordered\n         )\n+        container._delOb("o3")\n+        self.assertEqual(ordering.idsInOrder(), ["o1", "o2", "o4"] + self.unordered)\n         self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o2\', \'o4\', \'c1\', \'c2\', \'c3\'])\n+            set(container.objectIds()), {"o1", "o2", "o4", "c1", "c2", "c3"}\n         )\n+        container._delOb("o1")\n+        self.assertEqual(ordering.idsInOrder(), ["o2", "o4"] + self.unordered)\n+        self.assertEqual(set(container.objectIds()), {"o2", "o4", "c1", "c2", "c3"})\n \n     def runTableTests(self, action, tests):\n         for args, order, rval in tests:\n@@ -85,132 +72,175 @@ def runTableTests(self, action, tests):\n             else:\n                 self.assertEqual(method(*args), rval)\n             self.assertEqual(ordering.idsInOrder(), order + self.unordered)\n-            self.assertEqual(set(container.objectIds()), ids)   # all here?\n+            self.assertEqual(set(container.objectIds()), ids)  # all here?\n \n     def testMoveObjectsByDelta(self):\n-        self.runTableTests(\'moveObjectsByDelta\', (\n-            ((\'o1\', 1),                                   [\'o2\', \'o1\', \'o3\', \'o4\'], 1),\n-            ((\'o1\', 2),                                   [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'), 9),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'), 1),                           [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o1\'), 2),                           [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'c1\', \'o3\'), 1),                           [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            (((\'n2\', \'o2\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o4\', \'o2\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsByDelta",\n+            (\n+                (("o1", 1), ["o2", "o1", "o3", "o4"], 1),\n+                (("o1", 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("o2", "o4"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o4"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o1", "o4", "o2", "o3"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o1", "o4", "o2", "o3"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o1"), 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("c1", "o3"), 1), ["o1", "o2", "o4", "o3"], 1),\n+                ((("n2", "o2"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o4", "o2"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsDown(self):\n-        self.runTableTests(\'moveObjectsDown\', (\n-            ((\'o1\',),                                     [\'o2\', \'o1\', \'o3\', \'o4\'], 1),\n-            ((\'o1\', 2),                                   [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o4\'), 9),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'),),                             [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o1\'), 2),                           [\'o2\', \'o3\', \'o1\', \'o4\'], 1),\n-            (((\'c1\', \'o3\'),),                             [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            (((\'n2\', \'o2\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o4\', \'o2\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsDown",\n+            (\n+                (("o1",), ["o2", "o1", "o3", "o4"], 1),\n+                (("o1", 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("o2", "o4"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o4"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o1", "o4", "o2", "o3"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o1", "o4", "o2", "o3"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o1"), 2), ["o2", "o3", "o1", "o4"], 1),\n+                ((("c1", "o3"),), ["o1", "o2", "o4", "o3"], 1),\n+                ((("n2", "o2"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o4", "o2"),), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsUp(self):\n-        self.runTableTests(\'moveObjectsUp\', (\n-            ((\'o4\',),                                     [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            ((\'o4\', 1),                                   [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            ((\'o4\', 2),                                   [\'o1\', \'o4\', \'o2\', \'o3\'], 1),\n-            (((\'o1\', \'o3\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o1\', \'o3\'), 9),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'), 1),                           [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), 1, (\'o2\', \'o3\', \'o4\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o4\'), 2),                           [\'o1\', \'o4\', \'o2\', \'o3\'], 1),\n-            (((\'c1\', \'o3\'),),                             [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'n2\', \'o3\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o3\', \'o1\'), 1),                           [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsUp",\n+            (\n+                (("o4",), ["o1", "o2", "o4", "o3"], 1),\n+                (("o4", 1), ["o1", "o2", "o4", "o3"], 1),\n+                (("o4", 2), ["o1", "o4", "o2", "o3"], 1),\n+                ((("o1", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o1", "o3"), 9), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"), 1), ["o2", "o3", "o1", "o4"], 2),\n+                (\n+                    (("o2", "o3"), 1, ("o1", "o2", "o3", "o4")),\n+                    ["o2", "o3", "o1", "o4"],\n+                    2,\n+                ),\n+                ((("o2", "o3"), 1, ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o4"), 2), ["o1", "o4", "o2", "o3"], 1),\n+                ((("c1", "o3"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("n2", "o3"), 1), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o3", "o1"), 1), ["o1", "o3", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsToTop(self):\n-        self.runTableTests(\'moveObjectsToTop\', (\n-            ((\'o4\',),                                  [\'o4\', \'o1\', \'o2\', \'o3\'], 1),\n-            (((\'o1\', \'o3\'),),                          [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'),),                          [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o2\', \'o3\', \'o1\', \'o4\'], 2),\n-            (((\'o2\', \'o3\'), (\'o2\', \'o3\', \'o4\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o4\'),),                          [\'o4\', \'o1\', \'o2\', \'o3\'], 1),\n-            (((\'c1\', \'o3\'),),                          [\'o3\', \'o1\', \'o2\', \'o4\'], 1),\n-            (((\'n2\', \'o3\'),),                          [\'o3\', \'o1\', \'o2\', \'o4\'], 1),\n-            (((\'o3\', \'o1\'),),                          [\'o3\', \'o1\', \'o2\', \'o4\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsToTop",\n+            (\n+                (("o4",), ["o4", "o1", "o2", "o3"], 1),\n+                ((("o1", "o3"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o2", "o3", "o1", "o4"], 2),\n+                ((("o2", "o3"), ("o2", "o3", "o4")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o4"),), ["o4", "o1", "o2", "o3"], 1),\n+                ((("c1", "o3"),), ["o3", "o1", "o2", "o4"], 1),\n+                ((("n2", "o3"),), ["o3", "o1", "o2", "o4"], 1),\n+                ((("o3", "o1"),), ["o3", "o1", "o2", "o4"], 1),\n+            ),\n+        )\n \n     def testMoveObjectsToBottom(self):\n-        self.runTableTests(\'moveObjectsToBottom\', (\n-            ((\'o1\',),                                  [\'o2\', \'o3\', \'o4\', \'o1\'], 1),\n-            (((\'o2\', \'o4\'),),                          [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            (((\'o2\', \'o3\'),),                          [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\', \'o4\')), [\'o1\', \'o4\', \'o2\', \'o3\'], 2),\n-            (((\'o2\', \'o3\'), (\'o1\', \'o2\', \'o3\')),       [\'o1\', \'o2\', \'o3\', \'o4\'], 0),\n-            (((\'c1\', \'o1\'),),                          [\'o2\', \'o3\', \'o4\', \'o1\'], 1),\n-            (((\'c1\', \'o2\'),),                          [\'o1\', \'o3\', \'o4\', \'o2\'], 1),\n-            (((\'n2\', \'o3\'),),                          [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            (((\'o4\', \'o2\'),),                          [\'o1\', \'o3\', \'o4\', \'o2\'], 1),\n-        ))\n+        self.runTableTests(\n+            "moveObjectsToBottom",\n+            (\n+                (("o1",), ["o2", "o3", "o4", "o1"], 1),\n+                ((("o2", "o4"),), ["o1", "o3", "o2", "o4"], 1),\n+                ((("o2", "o3"),), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3", "o4")), ["o1", "o4", "o2", "o3"], 2),\n+                ((("o2", "o3"), ("o1", "o2", "o3")), ["o1", "o2", "o3", "o4"], 0),\n+                ((("c1", "o1"),), ["o2", "o3", "o4", "o1"], 1),\n+                ((("c1", "o2"),), ["o1", "o3", "o4", "o2"], 1),\n+                ((("n2", "o3"),), ["o1", "o2", "o4", "o3"], 1),\n+                ((("o4", "o2"),), ["o1", "o3", "o4", "o2"], 1),\n+            ),\n+        )\n \n     def testMoveObjectToPosition(self):\n-        self.runTableTests(\'moveObjectToPosition\', (\n-            ((\'o2\', 2), [\'o1\', \'o3\', \'o2\', \'o4\'], 1),\n-            ((\'o4\', 2), [\'o1\', \'o2\', \'o4\', \'o3\'], 1),\n-            ((\'c1\', 2), [\'o1\', \'o2\', \'o3\', \'o4\'], None),  # existent, but non-orderable\n-            ((\'n2\', 2), [\'o1\', \'o2\', \'o3\', \'o4\'], ValueError),\n-        ))\n+        self.runTableTests(\n+            "moveObjectToPosition",\n+            (\n+                (("o2", 2), ["o1", "o3", "o2", "o4"], 1),\n+                (("o4", 2), ["o1", "o2", "o4", "o3"], 1),\n+                (\n+                    ("c1", 2),\n+                    ["o1", "o2", "o3", "o4"],\n+                    None,\n+                ),  # existent, but non-orderable\n+                (("n2", 2), ["o1", "o2", "o3", "o4"], ValueError),\n+            ),\n+        )\n \n     def testOrderObjects(self):\n-        self.runTableTests(\'orderObjects\', (\n-            ((\'id\', \'id\'),       [\'o4\', \'o3\', \'o2\', \'o1\'], -1),\n-            ((\'meta_type\', \'\'),  [\'o1\', \'o3\', \'o2\', \'o4\'], -1),\n-            # for the next line the sort order is different from the\n-            # original test in OFS, since the current implementation\n-            # keeps the original order as much as possible, i.e. minimize\n-            # exchange operations within the list;  this is correct as\n-            # far as the test goes, since it didn\'t specify a secondary\n-            # sort key...\n-            ((\'meta_type\', \'n\'), [\'o2\', \'o4\', \'o1\', \'o3\'], -1),\n-        ))\n+        self.runTableTests(\n+            "orderObjects",\n+            (\n+                (("id", "id"), ["o4", "o3", "o2", "o1"], -1),\n+                (("meta_type", ""), ["o1", "o3", "o2", "o4"], -1),\n+                # for the next line the sort order is different from the\n+                # original test in OFS, since the current implementation\n+                # keeps the original order as much as possible, i.e. minimize\n+                # exchange operations within the list;  this is correct as\n+                # far as the test goes, since it didn\'t specify a secondary\n+                # sort key...\n+                (("meta_type", "n"), ["o2", "o4", "o1", "o3"], -1),\n+            ),\n+        )\n \n     def testGetObjectPosition(self):\n-        self.runTableTests(\'getObjectPosition\', (\n-            ((\'o2\',), [\'o1\', \'o2\', \'o3\', \'o4\'], 1),\n-            ((\'o4\',), [\'o1\', \'o2\', \'o3\', \'o4\'], 3),\n-            ((\'n2\',), [\'o1\', \'o2\', \'o3\', \'o4\'], ValueError),\n-            ((\'c2\',), [\'o1\', \'o2\', \'o3\', \'o4\'], None),  # existent, but non-orderable\n-        ))\n+        self.runTableTests(\n+            "getObjectPosition",\n+            (\n+                (("o2",), ["o1", "o2", "o3", "o4"], 1),\n+                (("o4",), ["o1", "o2", "o3", "o4"], 3),\n+                (("n2",), ["o1", "o2", "o3", "o4"], ValueError),\n+                (\n+                    ("c2",),\n+                    ["o1", "o2", "o3", "o4"],\n+                    None,\n+                ),  # existent, but non-orderable\n+            ),\n+        )\n \n \n @implementer(IOrderable)\n class DummyFolder(OrderedBTreeFolderBase, Implicit):\n-    """ we need to mix in acquisition """\n+    """we need to mix in acquisition"""\n \n-    meta_type = \'DummyFolder\'\n-    _ordering = u\'partial\'\n+    meta_type = "DummyFolder"\n+    _ordering = "partial"\n \n     def dummy_method(self):\n         return self.id\n \n \n class PartialOrderingIntegrationTests(unittest.TestCase):\n-\n     layer = PLONEFOLDER_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n+        self.app = self.layer["app"]\n         context = self.app\n-        context._setOb(\'foo\', DummyFolder(\'foo\'))   # not pythonic in 2.10 :(\n-        context.foo[\'bar1\'] = DummyFolder(\'bar1\')\n-        context.foo[\'bar2\'] = DummyFolder(\'bar2\')\n-        context.foo[\'bar3\'] = DummyFolder(\'bar3\')\n+        context._setOb("foo", DummyFolder("foo"))  # not pythonic in 2.10 :(\n+        context.foo["bar1"] = DummyFolder("bar1")\n+        context.foo["bar2"] = DummyFolder("bar2")\n+        context.foo["bar3"] = DummyFolder("bar3")\n         savepoint(optimistic=True)\n         self.assertEqual(self.registered, [])\n \n@@ -220,36 +250,38 @@ def registered(self):\n \n     def testAddObjectChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo[\'bar23\'] = DummyFolder(\'bar23\')\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar2\', \'bar3\', \'bar23\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo["bar23"] = DummyFolder("bar23")\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar2", "bar3", "bar23"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n \n     def testRemoveObjectChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo._delOb(\'bar2\',)\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar3\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo._delOb(\n+            "bar2",\n+        )\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar3"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n \n     def testMoveObjectChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo.moveObjectsUp((\'bar2\',))\n-        self.assertEqual(foo.objectIds(), [\'bar2\', \'bar1\', \'bar3\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo.moveObjectsUp(("bar2",))\n+        self.assertEqual(foo.objectIds(), ["bar2", "bar1", "bar3"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n \n     def testOrderObjectsChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo.orderObjects(\'id\', reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar3\', \'bar2\', \'bar1\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo.orderObjects("id", reverse=True)\n+        self.assertEqual(foo.objectIds(), ["bar3", "bar2", "bar1"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n         # Reverse the current ordering.\n         foo.orderObjects(reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar2\', \'bar3\'])\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar2", "bar3"])\n \n     def testOrderObjectsByMethodChangesOrderInfo(self):\n         foo = self.app.foo\n-        foo.orderObjects(\'dummy_method\', reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar3\', \'bar2\', \'bar1\'])\n-        self.assertTrue(foo in self.registered, \'not registered?\')\n+        foo.orderObjects("dummy_method", reverse=True)\n+        self.assertEqual(foo.objectIds(), ["bar3", "bar2", "bar1"])\n+        self.assertTrue(foo in self.registered, "not registered?")\n         # Reverse the current ordering.\n         foo.orderObjects(reverse=True)\n-        self.assertEqual(foo.objectIds(), [\'bar1\', \'bar2\', \'bar3\'])\n+        self.assertEqual(foo.objectIds(), ["bar1", "bar2", "bar3"])\ndiff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py\nindex bfeb54e..f780870 100644\n--- a/src/plone/folder/tests/test_unorderedordering.py\n+++ b/src/plone/folder/tests/test_unorderedordering.py\n@@ -1,23 +1,23 @@\n from plone.folder.ordered import OrderedBTreeFolderBase\n-from plone.folder.unordered import UnorderedOrdering\n-from plone.folder.tests.utils import DummyObject\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n+from plone.folder.tests.utils import DummyObject\n+from plone.folder.unordered import UnorderedOrdering\n \n import unittest\n \n \n class UnorderedOrderingTests(unittest.TestCase):\n-    """ tests regarding order-support for folders with unordered ordering """\n+    """tests regarding order-support for folders with unordered ordering"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n     def create(self):\n         container = OrderedBTreeFolderBase()\n-        container._ordering = u\'unordered\'\n-        container._setOb(\'o1\', DummyObject(\'o1\', \'mt1\'))\n-        container._setOb(\'o2\', DummyObject(\'o2\', \'mt2\'))\n-        container._setOb(\'o3\', DummyObject(\'o3\', \'mt1\'))\n-        container._setOb(\'o4\', DummyObject(\'o4\', \'mt2\'))\n+        container._ordering = "unordered"\n+        container._setOb("o1", DummyObject("o1", "mt1"))\n+        container._setOb("o2", DummyObject("o2", "mt2"))\n+        container._setOb("o3", DummyObject("o3", "mt1"))\n+        container._setOb("o4", DummyObject("o4", "mt2"))\n         return container\n \n     def testAdapter(self):\n@@ -27,28 +27,16 @@ def testAdapter(self):\n \n     def testNotifyAdded(self):\n         container = self.create()\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\'])\n-        )\n-        container._setOb(\'o5\', DummyObject(\'o5\', \'mt1\'))\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\', \'o5\'])\n-        )\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o3", "o4"})\n+        container._setOb("o5", DummyObject("o5", "mt1"))\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o3", "o4", "o5"})\n \n     def testNotifyRemoved(self):\n         container = self.create()\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o3\', \'o4\'])\n-        )\n-        container._delOb(\'o3\')\n-        self.assertEqual(\n-            set(container.objectIds()),\n-            set([\'o1\', \'o2\', \'o4\'])\n-        )\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o3", "o4"})\n+        container._delOb("o3")\n+        self.assertEqual(set(container.objectIds()), {"o1", "o2", "o4"})\n \n     def testGetObjectPosition(self):\n         container = self.create()\n-        self.assertEqual(container.getObjectPosition(\'o2\'), None)\n+        self.assertEqual(container.getObjectPosition("o2"), None)\ndiff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py\nindex 05b8da0..d4a9637 100644\n--- a/src/plone/folder/tests/test_webdav.py\n+++ b/src/plone/folder/tests/test_webdav.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import Explicit\n from plone.folder.ordered import CMFOrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING\n from plone.folder.tests.utils import DummyObject\n from zope.publisher.browser import TestRequest\n \n-import pkg_resources\n import unittest\n \n \n@@ -17,12 +15,11 @@\n \n \n class TestRequestContainer(Explicit):\n-\n     REQUEST = TestRequest()\n \n \n class WebDAVTests(unittest.TestCase):\n-    """ tests regarding support for WebDAV NullResources """\n+    """tests regarding support for WebDAV NullResources"""\n \n     layer = PLONEFOLDER_INTEGRATION_TESTING\n \n@@ -31,28 +28,28 @@ def test_getitem_not_dav_request(self):\n         folder = CMFOrderedBTreeFolderBase("f1").__of__(root)\n \n         root.REQUEST.maybe_webdav_client = False\n-        root.REQUEST._environ[\'REQUEST_METHOD\'] = \'GET\'\n+        root.REQUEST._environ["REQUEST_METHOD"] = "GET"\n \n-        foo = DummyObject(\'foo\')\n-        folder[\'foo\'] = foo\n+        foo = DummyObject("foo")\n+        folder["foo"] = foo\n \n-        self.assertEquals(folder[\'foo\'], foo)\n+        self.assertEqual(folder["foo"], foo)\n         try:\n-            folder[\'bar\']\n+            folder["bar"]\n             self.fail()\n         except KeyError:\n             pass\n \n-    @unittest.skipUnless(HAS_WEBDAV, \'ZServer is optional\')\n+    @unittest.skipUnless(HAS_WEBDAV, "ZServer is optional")\n     def test_getitem_dav_request(self):\n         root = TestRequestContainer()\n         folder = CMFOrderedBTreeFolderBase("f1").__of__(root)\n \n         root.REQUEST.maybe_webdav_client = True\n-        root.REQUEST._environ[\'REQUEST_METHOD\'] = \'PUT\'\n+        root.REQUEST._environ["REQUEST_METHOD"] = "PUT"\n \n-        foo = DummyObject(\'foo\')\n-        folder[\'foo\'] = foo\n+        foo = DummyObject("foo")\n+        folder["foo"] = foo\n \n-        self.assertEquals(folder[\'foo\'], foo)\n-        self.assertTrue(isinstance(folder[\'bar\'], NullResource))\n+        self.assertEqual(folder["foo"], foo)\n+        self.assertTrue(isinstance(folder["bar"], NullResource))\ndiff --git a/src/plone/folder/tests/utils.py b/src/plone/folder/tests/utils.py\nindex 5c2015b..aa1e79f 100644\n--- a/src/plone/folder/tests/utils.py\n+++ b/src/plone/folder/tests/utils.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.folder.interfaces import IOrderable\n from zope.interface import implementer\n \n \n-class DummyObject(object):\n-\n+class DummyObject:\n     def __init__(self, id, meta_type=None):\n         self.id = id\n         self.meta_type = meta_type\n@@ -21,8 +19,8 @@ def dummy_method(self):\n \n @implementer(IOrderable)\n class Orderable(DummyObject):\n-    """ orderable mock object """\n+    """orderable mock object"""\n \n \n class Chaoticle(DummyObject):\n-    """ non-orderable mock object;  this does not implement `IOrderable` """\n+    """non-orderable mock object;  this does not implement `IOrderable`"""\ndiff --git a/src/plone/folder/unordered.py b/src/plone/folder/unordered.py\nindex 14d9ae8..751443b 100644\n--- a/src/plone/folder/unordered.py\n+++ b/src/plone/folder/unordered.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.folder.interfaces import IOrderableFolder\n from plone.folder.interfaces import IOrdering\n@@ -8,8 +7,8 @@\n \n @implementer(IOrdering)\n @adapter(IOrderableFolder)\n-class UnorderedOrdering(object):\n-    """ This implementation provides no ordering. """\n+class UnorderedOrdering:\n+    """This implementation provides no ordering."""\n \n     def __init__(self, context):\n         self.context = context\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..21289b5\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.folder {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir}/src -s plone.folder {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

