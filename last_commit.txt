Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-19T11:15:19+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/3a2c094c4049f325ff160f93efcd768a50ec06a8

Increase length of passwords used in tests (#1492)

use longer password in tests

Files changed:
A news/1492.bugfix
M src/plone/restapi/tests/test_auth.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/news/1492.bugfix b/news/1492.bugfix\nnew file mode 100644\nindex 000000000..f251257b8\n--- /dev/null\n+++ b/news/1492.bugfix\n@@ -0,0 +1 @@\n+- Increase the length of passwords used in tests. [davisagli]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex e619e0ab7..ece162b21 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -1,5 +1,6 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.restapi.permissions import UseRESTAPI\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from unittest import TestCase\n@@ -78,10 +79,12 @@ def test_login_without_api_permission(self):\n \n     def test_login_with_zope_user_fails_without_pas_plugin(self):\n         uf = self.layer["app"].acl_users\n-        uf.plugins.users.addUser("zopeuser", "zopeuser", "secret")\n+        uf.plugins.users.addUser("zopeuser", "zopeuser", TEST_USER_PASSWORD)\n         if "jwt_auth" in uf:\n             uf["jwt_auth"].manage_activateInterfaces([])\n-        self.request["BODY"] = \'{"login": "zopeuser", "password": "secret"}\'\n+        self.request["BODY"] = (\n+            \'{"login": "zopeuser", "password": "\' + TEST_USER_PASSWORD + \'"}\'\n+        )\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn("error", res)\n@@ -92,9 +95,11 @@ def test_login_with_zope_user_fails_without_pas_plugin(self):\n \n     def test_login_with_zope_user(self):\n         self.layer["app"].acl_users.plugins.users.addUser(\n-            "zopeuser", "zopeuser", "secret"\n+            "zopeuser", "zopeuser", TEST_USER_PASSWORD\n+        )\n+        self.request["BODY"] = (\n+            \'{"login": "zopeuser", "password": "\' + TEST_USER_PASSWORD + \'"}\'\n         )\n-        self.request["BODY"] = \'{"login": "zopeuser", "password": "secret"}\'\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex 21c9fbef7..9d459b74c 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -332,7 +332,7 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n         api.user.create(\n             username="peter",\n             email="peter@example.org",\n-            password="secret",\n+            password=TEST_USER_PASSWORD,\n             roles=("Member",),\n         )\n \ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 7958821c8..66b331569 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -253,7 +253,7 @@ def test_post_with_uid_with_manage_portal_permission(self):\n \n     def test_post_with_uid_without_manage_portal_permission(self):\n         user = "test-user-2"\n-        password = "secret"\n+        password = TEST_USER_PASSWORD\n         self.portal.acl_users.userFolderAddUser(user, password, ["Contributor"], [])\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 0748c8be2..3be71590d 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -79,7 +80,9 @@ def setUp(self):\n         ]\n \n         api.user.create(\n-            email="memberuser@example.com", username="memberuser", password="secret"\n+            email="memberuser@example.com",\n+            username="memberuser",\n+            password=TEST_USER_PASSWORD,\n         )\n \n         self.api_session = RelativeSession(self.portal_url, test=self)\n@@ -145,7 +148,7 @@ def test_copy_multiple_objects(self):\n         self.assertIn("copy_of_doc2", self.portal.objectIds())\n \n     def test_copy_single_object_no_permissions_raises_403(self):\n-        self.api_session.auth = ("memberuser", "secret")\n+        self.api_session.auth = ("memberuser", TEST_USER_PASSWORD)\n         response = self.api_session.post(\n             "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n@@ -153,7 +156,7 @@ def test_copy_single_object_no_permissions_raises_403(self):\n         self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n-        self.api_session.auth = ("nonexistent", "secret")\n+        self.api_session.auth = ("nonexistent", TEST_USER_PASSWORD)\n         response = self.api_session.post(\n             "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n@@ -161,7 +164,7 @@ def test_copy_single_object_no_auth_raises_401(self):\n         self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n-        self.api_session.auth = ("memberuser", "secret")\n+        self.api_session.auth = ("memberuser", TEST_USER_PASSWORD)\n         response = self.api_session.post(\n             "/@move", json={"source": self.doc1.absolute_url()}\n         )\n@@ -169,7 +172,7 @@ def test_move_single_object_no_permissions_raises_403(self):\n         self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n-        self.api_session.auth = ("nonexistent", "secret")\n+        self.api_session.auth = ("nonexistent", TEST_USER_PASSWORD)\n         response = self.api_session.post(\n             "/@move", json={"source": self.doc1.absolute_url()}\n         )\n@@ -181,7 +184,7 @@ def test_move_single_object_no_permission_delete_source_raises_403(self):\n         api.content.transition(obj=self.doc1, transition="publish")\n         transaction.commit()\n \n-        self.api_session.auth = ("memberuser", "secret")\n+        self.api_session.auth = ("memberuser", TEST_USER_PASSWORD)\n         response = self.api_session.post(\n             "/folder1/@move", json={"source": self.doc1.absolute_url()}\n         )\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 6ba477e63..4e34a3439 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -13,6 +13,7 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import createContentInContainer\n from plone.locking.interfaces import ITTWLockable\n@@ -878,14 +879,14 @@ def test_documentation_users_unauthorized_get(self):\n         api.user.create(\n             email="noam.chomsky@example.com",\n             username="noam",\n-            password="secret",\n+            password=TEST_USER_PASSWORD,\n             properties=properties,\n         )\n \n         api.user.create(\n             email="noam.chomsky@example.com",\n             username="noam-fake",\n-            password="secret",\n+            password=TEST_USER_PASSWORD,\n             properties=properties,\n         )\n \n@@ -893,7 +894,7 @@ def test_documentation_users_unauthorized_get(self):\n \n         logged_out_api_session = RelativeSession(self.portal_url, test=self)\n         logged_out_api_session.headers.update({"Accept": "application/json"})\n-        logged_out_api_session.auth = ("noam-fake", "secret")\n+        logged_out_api_session.auth = ("noam-fake", TEST_USER_PASSWORD)\n \n         response = logged_out_api_session.get("@users/noam")\n         save_request_and_response_for_docs("users_unauthorized_get", response)\n@@ -911,14 +912,14 @@ def test_documentation_users_authorized_get(self):\n         api.user.create(\n             email="noam.chomsky@example.com",\n             username="noam",\n-            password="secret",\n+            password=TEST_USER_PASSWORD,\n             properties=properties,\n         )\n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url, test=self)\n         logged_out_api_session.headers.update({"Accept": "application/json"})\n-        logged_out_api_session.auth = ("noam", "secret")\n+        logged_out_api_session.auth = ("noam", TEST_USER_PASSWORD)\n         response = logged_out_api_session.get("@users/noam")\n         save_request_and_response_for_docs("users_authorized_get", response)\n         logged_out_api_session.close()\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 528330212..4a78d22f7 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -7,6 +7,7 @@\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n@@ -46,12 +47,12 @@ def setUp(self):\n         api.user.create(\n             email="editor@example.com",\n             username="editoruser",\n-            password="secret",\n+            password=TEST_USER_PASSWORD,\n         )\n         api.user.create(\n             email="editor@example.com",\n             username="localeditor",\n-            password="secret",\n+            password=TEST_USER_PASSWORD,\n         )\n \n         # /plone/folder\n@@ -639,7 +640,7 @@ def test_respect_access_inactive_permission(self):\n         self.assertEqual(response["items_total"], 1)\n \n         # not admin users can\'t see expired items\n-        self.api_session.auth = ("editoruser", "secret")\n+        self.api_session.auth = ("editoruser", TEST_USER_PASSWORD)\n \n         response = self.api_session.get("/@search", params={}).json()\n         if HAS_PLONE_6:\n@@ -673,7 +674,7 @@ def test_respect_access_inactive_permission(self):\n         self.assertEqual(response["items_total"], 1)\n \n         # local-enabled Editor can only access expired contents inside folder\n-        self.api_session.auth = ("localeditor", "secret")\n+        self.api_session.auth = ("localeditor", TEST_USER_PASSWORD)\n         response = self.api_session.get("/@search", params={}).json()\n         if HAS_PLONE_6:\n             # Since Plone 6 the Plone site is indexed ...\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex e7eac9171..fdb8fc660 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -2,6 +2,7 @@\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.registry.interfaces import IRegistry\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -38,7 +39,9 @@ def setUp(self):\n         )\n         api.content.transition(self.doc, "publish")\n \n-        api.user.create(username="jos", password="josjos", email="jos@plone.org")\n+        api.user.create(\n+            username="jos", password=TEST_USER_PASSWORD, email="jos@plone.org"\n+        )\n \n         # Admin session\n         self.api_session = RelativeSession(self.portal_url, test=self)\n@@ -48,7 +51,7 @@ def setUp(self):\n         # User session\n         self.user_session = RelativeSession(self.portal_url, test=self)\n         self.user_session.headers.update({"Accept": "application/json"})\n-        self.user_session.auth = ("jos", "jos")\n+        self.user_session.auth = ("jos", TEST_USER_PASSWORD)\n \n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 09ba831d1..1341da6da 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -4,6 +4,7 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n@@ -502,7 +503,9 @@ def test_event_type(self):\n \n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n-            email="noam.chomsky@example.com", username="noam", password="12345"\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password=TEST_USER_PASSWORD,\n         )\n \n         folder = api.content.create(\n@@ -522,7 +525,7 @@ def test_addable_types_for_non_manager_user(self):\n \n         transaction.commit()\n \n-        self.api_session.auth = ("noam", "12345")\n+        self.api_session.auth = ("noam", TEST_USER_PASSWORD)\n         # In the folder, the user should be able to add types since we granted\n         # Contributor role on it\n         response = self.api_session.get("/folder/@types")\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex cb818bdfc..ccc8161dd 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -3,6 +3,7 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n from Products.CMFCore.permissions import SetOwnPassword\n@@ -163,7 +164,7 @@ def test_add_user_email_is_required_if_email_login_is_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            "/@users", json={"username": "noam", "password": "secret"}\n+            "/@users", json={"username": "noam", "password": TEST_USER_PASSWORD}\n         )\n \n         self.assertEqual(400, response.status_code)\n@@ -175,7 +176,8 @@ def test_add_user_email_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n         )\n         transaction.commit()\n \n@@ -192,7 +194,7 @@ def test_username_is_not_allowed_with_email_login_enabled(self):\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "secret",\n+                "password": TEST_USER_PASSWORD,\n             },\n         )\n         transaction.commit()\n@@ -206,7 +208,8 @@ def test_add_user_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n         )\n         transaction.commit()\n \n@@ -239,7 +242,7 @@ def test_add_user_send_properties(self):\n             "/@users",\n             json={\n                 "username": "howard",\n-                "password": "secret",\n+                "password": TEST_USER_PASSWORD,\n                 "email": "howard.zinn@example.com",\n                 "fullname": "Howard Zinn",\n             },\n@@ -299,7 +302,8 @@ def test_add_user_with_uuid_as_userid_enabled(self):\n         security_settings.use_uuid_as_userid = True\n         transaction.commit()\n         response = self.api_session.post(\n-            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n         )\n         transaction.commit()\n \n@@ -479,7 +483,7 @@ def test_update_roles(self):\n \n     def test_update_user_password(self):\n         old_password_hashes = dict(self.portal.acl_users.source_users._user_passwords)\n-        payload = {"password": "secret"}\n+        payload = {"password": TEST_USER_PASSWORD}\n         response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n@@ -723,7 +727,8 @@ def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n         )\n         transaction.commit()\n \n@@ -752,7 +757,8 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n         )\n         transaction.commit()\n \n@@ -780,7 +786,8 @@ def test_reset_and_login_email_using_mail(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n         )\n         transaction.commit()\n \n@@ -865,7 +872,7 @@ def test_anonymous_can_set_password_with_enable_user_pwd_choice(self):\n             json={\n                 "username": "new_user",\n                 "email": "avram.chomsky@example.com",\n-                "password": "secret",\n+                "password": TEST_USER_PASSWORD,\n             },\n         )\n         transaction.commit()\n@@ -881,7 +888,7 @@ def test_anonymous_can_set_password_with_enable_user_pwd_choice(self):\n             json={\n                 "username": "new_user",\n                 "email": "avram.chomsky@example.com",\n-                "password": "secret",\n+                "password": TEST_USER_PASSWORD,\n             },\n         )\n         transaction.commit()\n@@ -899,7 +906,7 @@ def test_anonymous_with_enable_user_pwd_choice_doent_send_email(self):\n             json={\n                 "username": "new_user",\n                 "email": "avram.chomsky@example.com",\n-                "password": "secret",\n+                "password": TEST_USER_PASSWORD,\n             },\n         )\n         transaction.commit()\n@@ -918,7 +925,7 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n             json={\n                 "username": "new_user",\n                 "email": "avram.chomsky@example.com",\n-                "password": "secret",\n+                "password": TEST_USER_PASSWORD,\n             },\n         )\n \n'

