Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-26T19:49:52+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/b1fbce7b17ec6094cdc6c31105ba996c72813276

handle subblocks in IPloneSiteRoot in Plone 5.2

Files changed:
A news/1449.bugfix
M src/plone/restapi/serializer/site.py

b'diff --git a/news/1449.bugfix b/news/1449.bugfix\nnew file mode 100644\nindex 000000000..3dea3b483\n--- /dev/null\n+++ b/news/1449.bugfix\n@@ -0,0 +1,2 @@\n+Handle subblocks in site root serializer for Plone 5.x\n+[erral]\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 7ba280e4d..883768120 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -135,6 +135,7 @@ def serialize_blocks(self):\n         if not blocks:\n             return blocks\n         for id, block_value in blocks.items():\n+            self.handle_subblocks(block_value)\n             block_type = block_value.get("@type", "")\n             handlers = []\n             for h in subscribers(\n@@ -149,3 +150,34 @@ def serialize_blocks(self):\n \n             blocks[id] = block_value\n         return blocks\n+\n+    def handle_subblocks(self, block_value):\n+        if "data" in block_value:\n+            if isinstance(block_value["data"], dict):\n+                if "blocks" in block_value["data"]:\n+                    block_value["data"]["blocks"] = self._transform(\n+                        block_value["data"]["blocks"]\n+                    )\n+\n+        if "blocks" in block_value:\n+            block_value["blocks"] = self._transform(block_value["blocks"])\n+\n+    def _transform(self, blocks):\n+        for id, block_value in blocks.items():\n+            self.handle_subblocks(block_value)\n+            block_type = block_value.get("@type", "")\n+            handlers = []\n+            for h in subscribers(\n+                (self.context, self.request),\n+                IBlockFieldSerializationTransformer,\n+            ):\n+                if h.block_type == block_type or h.block_type is None:\n+                    h.blockid = id\n+                    handlers.append(h)\n+\n+            for handler in sorted(handlers, key=lambda h: h.order):\n+                block_value = handler(block_value)\n+\n+            blocks[id] = block_value\n+\n+        return blocks\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-26T19:49:52+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/d4fba6aca13e9f6f2d9a92f69c2d674e288f7441

set blockid

Files changed:
M src/plone/restapi/serializer/site.py

b'diff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 883768120..6b8437889 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -142,6 +142,7 @@ def serialize_blocks(self):\n                 (self.context, self.request), IBlockFieldSerializationTransformer\n             ):\n                 if h.block_type == block_type or h.block_type is None:\n+                    h.blockid = id\n                     handlers.append(h)\n \n             for handler in sorted(handlers, key=lambda h: h.order):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-26T19:50:48+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/4f1b7618959c619b60b3b0278cfe08c4ae44abdb

refactor block handling methods to functions and use them from site serializer (for Plone 5)

Files changed:
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/utils.py

b'diff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex c85750d46..24931bf87 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -11,6 +11,7 @@\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import subscribers\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n@@ -19,59 +20,66 @@\n import os\n \n \n+def _transform(blocks, context):\n+    for id, block_value in blocks.items():\n+        handle_subblocks(block_value, context)\n+        block_type = block_value.get("@type", "")\n+        handlers = []\n+        for h in subscribers(\n+            (context, getRequest()),\n+            IBlockFieldSerializationTransformer,\n+        ):\n+            if h.block_type == block_type or h.block_type is None:\n+                h.blockid = id\n+                handlers.append(h)\n+\n+        for handler in sorted(handlers, key=lambda h: h.order):\n+            block_value = handler(block_value)\n+\n+        blocks[id] = block_value\n+\n+    return blocks\n+\n+\n+def handle_subblocks(block_value, context):\n+    if "data" in block_value:\n+        if isinstance(block_value["data"], dict):\n+            if "blocks" in block_value["data"]:\n+                block_value["data"]["blocks"] = _transform(\n+                    block_value["data"]["blocks"], context\n+                )\n+\n+    if "blocks" in block_value:\n+        block_value["blocks"] = _transform(block_value["blocks"], context)\n+\n+    return block_value\n+\n+\n+def handle_block_value(block_value, context):\n+    block_value = handle_subblocks(block_value, context)\n+    block_type = block_value.get("@type", "")\n+    handlers = []\n+    for h in subscribers((context, getRequest()), IBlockFieldSerializationTransformer):\n+        if h.block_type == block_type or h.block_type is None:\n+            h.blockid = id\n+            handlers.append(h)\n+\n+    for handler in sorted(handlers, key=lambda h: h.order):\n+        if not getattr(handler, "disabled", False):\n+            block_value = handler(block_value)\n+\n+    return block_value\n+\n+\n @adapter(IJSONField, IBlocks, Interface)\n @implementer(IFieldSerializer)\n class BlocksJSONFieldSerializer(DefaultFieldSerializer):\n-    def _transform(self, blocks):\n-        for id, block_value in blocks.items():\n-            self.handle_subblocks(block_value)\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request), IBlockFieldSerializationTransformer\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    h.blockid = id\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n-\n-        return blocks\n-\n-    def handle_subblocks(self, block_value):\n-        if "data" in block_value:\n-            if isinstance(block_value["data"], dict):\n-                if "blocks" in block_value["data"]:\n-                    block_value["data"]["blocks"] = self._transform(\n-                        block_value["data"]["blocks"]\n-                    )\n-\n-        if "blocks" in block_value:\n-            block_value["blocks"] = self._transform(block_value["blocks"])\n-\n     def __call__(self):\n         value = copy.deepcopy(self.get_value())\n \n         if self.field.getName() == "blocks":\n             for id, block_value in value.items():\n-                self.handle_subblocks(block_value)\n-                block_type = block_value.get("@type", "")\n-                handlers = []\n-                for h in subscribers(\n-                    (self.context, self.request), IBlockFieldSerializationTransformer\n-                ):\n-                    if h.block_type == block_type or h.block_type is None:\n-                        h.blockid = id\n-                        handlers.append(h)\n-\n-                for handler in sorted(handlers, key=lambda h: h.order):\n-                    if not getattr(handler, "disabled", False):\n-                        block_value = handler(block_value)\n-\n-                value[id] = block_value\n+                value[id] = handle_block_value(block_value, self.context)\n \n         return json_compatible(value)\n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 6b8437889..111f58eb1 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -3,10 +3,10 @@\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.utils import iterSchemata\n from plone.restapi.batching import HypermediaBatch\n-from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.blocks import handle_block_value\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.services.locking import lock_info\n@@ -17,7 +17,6 @@\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n-from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema import getFields\n@@ -135,50 +134,5 @@ def serialize_blocks(self):\n         if not blocks:\n             return blocks\n         for id, block_value in blocks.items():\n-            self.handle_subblocks(block_value)\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request), IBlockFieldSerializationTransformer\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    h.blockid = id\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                if not getattr(handler, "disabled", False):\n-                    block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n-        return blocks\n-\n-    def handle_subblocks(self, block_value):\n-        if "data" in block_value:\n-            if isinstance(block_value["data"], dict):\n-                if "blocks" in block_value["data"]:\n-                    block_value["data"]["blocks"] = self._transform(\n-                        block_value["data"]["blocks"]\n-                    )\n-\n-        if "blocks" in block_value:\n-            block_value["blocks"] = self._transform(block_value["blocks"])\n-\n-    def _transform(self, blocks):\n-        for id, block_value in blocks.items():\n-            self.handle_subblocks(block_value)\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request),\n-                IBlockFieldSerializationTransformer,\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    h.blockid = id\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n-\n+            blocks[id] = handle_block_value(block_value, self.context)\n         return blocks\ndiff --git a/src/plone/restapi/serializer/utils.py b/src/plone/restapi/serializer/utils.py\nindex 15b37a41a..f9506c9ce 100644\n--- a/src/plone/restapi/serializer/utils.py\n+++ b/src/plone/restapi/serializer/utils.py\n@@ -26,7 +26,8 @@ def uid_to_url(path):\n         target_object = uuidToObject(uid)\n         if target_object:\n             adapter = queryMultiAdapter(\n-                (target_object, target_object.REQUEST), IObjectPrimaryFieldTarget\n+                (target_object, target_object.REQUEST),\n+                IObjectPrimaryFieldTarget,\n             )\n             if adapter and adapter():\n                 href = adapter()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-26T19:50:48+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/57d57c728a69088a26a28f517690b20273d2bae3

rename function

Files changed:
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/site.py

b'diff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex 24931bf87..8add46fda 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -55,7 +55,7 @@ def handle_subblocks(block_value, context):\n     return block_value\n \n \n-def handle_block_value(block_value, context):\n+def apply_block_serialization_transforms(block_value, context):\n     block_value = handle_subblocks(block_value, context)\n     block_type = block_value.get("@type", "")\n     handlers = []\n@@ -79,7 +79,9 @@ def __call__(self):\n \n         if self.field.getName() == "blocks":\n             for id, block_value in value.items():\n-                value[id] = handle_block_value(block_value, self.context)\n+                value[id] = apply_block_serialization_transforms(\n+                    block_value, self.context\n+                )\n \n         return json_compatible(value)\n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 111f58eb1..a0239bab5 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -6,7 +6,7 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.serializer.blocks import handle_block_value\n+from plone.restapi.serializer.blocks import apply_block_serialization_transforms\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.services.locking import lock_info\n@@ -134,5 +134,5 @@ def serialize_blocks(self):\n         if not blocks:\n             return blocks\n         for id, block_value in blocks.items():\n-            blocks[id] = handle_block_value(block_value, self.context)\n+            blocks[id] = apply_block_serialization_transforms(block_value, self.context)\n         return blocks\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-27T10:55:57-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/9f205c1b9514d09e45c855899a820b3c703d49f3

Merge pull request #1450 from plone/erral-root-serializer

handle subblocks in IPloneSiteRoot in Plone 5.2

Files changed:
A news/1449.bugfix
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/utils.py

b'diff --git a/news/1449.bugfix b/news/1449.bugfix\nnew file mode 100644\nindex 000000000..3dea3b483\n--- /dev/null\n+++ b/news/1449.bugfix\n@@ -0,0 +1,2 @@\n+Handle subblocks in site root serializer for Plone 5.x\n+[erral]\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex c85750d46..8add46fda 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -11,6 +11,7 @@\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import subscribers\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n@@ -19,59 +20,68 @@\n import os\n \n \n+def _transform(blocks, context):\n+    for id, block_value in blocks.items():\n+        handle_subblocks(block_value, context)\n+        block_type = block_value.get("@type", "")\n+        handlers = []\n+        for h in subscribers(\n+            (context, getRequest()),\n+            IBlockFieldSerializationTransformer,\n+        ):\n+            if h.block_type == block_type or h.block_type is None:\n+                h.blockid = id\n+                handlers.append(h)\n+\n+        for handler in sorted(handlers, key=lambda h: h.order):\n+            block_value = handler(block_value)\n+\n+        blocks[id] = block_value\n+\n+    return blocks\n+\n+\n+def handle_subblocks(block_value, context):\n+    if "data" in block_value:\n+        if isinstance(block_value["data"], dict):\n+            if "blocks" in block_value["data"]:\n+                block_value["data"]["blocks"] = _transform(\n+                    block_value["data"]["blocks"], context\n+                )\n+\n+    if "blocks" in block_value:\n+        block_value["blocks"] = _transform(block_value["blocks"], context)\n+\n+    return block_value\n+\n+\n+def apply_block_serialization_transforms(block_value, context):\n+    block_value = handle_subblocks(block_value, context)\n+    block_type = block_value.get("@type", "")\n+    handlers = []\n+    for h in subscribers((context, getRequest()), IBlockFieldSerializationTransformer):\n+        if h.block_type == block_type or h.block_type is None:\n+            h.blockid = id\n+            handlers.append(h)\n+\n+    for handler in sorted(handlers, key=lambda h: h.order):\n+        if not getattr(handler, "disabled", False):\n+            block_value = handler(block_value)\n+\n+    return block_value\n+\n+\n @adapter(IJSONField, IBlocks, Interface)\n @implementer(IFieldSerializer)\n class BlocksJSONFieldSerializer(DefaultFieldSerializer):\n-    def _transform(self, blocks):\n-        for id, block_value in blocks.items():\n-            self.handle_subblocks(block_value)\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request), IBlockFieldSerializationTransformer\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    h.blockid = id\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n-\n-        return blocks\n-\n-    def handle_subblocks(self, block_value):\n-        if "data" in block_value:\n-            if isinstance(block_value["data"], dict):\n-                if "blocks" in block_value["data"]:\n-                    block_value["data"]["blocks"] = self._transform(\n-                        block_value["data"]["blocks"]\n-                    )\n-\n-        if "blocks" in block_value:\n-            block_value["blocks"] = self._transform(block_value["blocks"])\n-\n     def __call__(self):\n         value = copy.deepcopy(self.get_value())\n \n         if self.field.getName() == "blocks":\n             for id, block_value in value.items():\n-                self.handle_subblocks(block_value)\n-                block_type = block_value.get("@type", "")\n-                handlers = []\n-                for h in subscribers(\n-                    (self.context, self.request), IBlockFieldSerializationTransformer\n-                ):\n-                    if h.block_type == block_type or h.block_type is None:\n-                        h.blockid = id\n-                        handlers.append(h)\n-\n-                for handler in sorted(handlers, key=lambda h: h.order):\n-                    if not getattr(handler, "disabled", False):\n-                        block_value = handler(block_value)\n-\n-                value[id] = block_value\n+                value[id] = apply_block_serialization_transforms(\n+                    block_value, self.context\n+                )\n \n         return json_compatible(value)\n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 7ba280e4d..a0239bab5 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -3,10 +3,10 @@\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.utils import iterSchemata\n from plone.restapi.batching import HypermediaBatch\n-from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.blocks import apply_block_serialization_transforms\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.services.locking import lock_info\n@@ -17,7 +17,6 @@\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n-from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema import getFields\n@@ -135,17 +134,5 @@ def serialize_blocks(self):\n         if not blocks:\n             return blocks\n         for id, block_value in blocks.items():\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request), IBlockFieldSerializationTransformer\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                if not getattr(handler, "disabled", False):\n-                    block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n+            blocks[id] = apply_block_serialization_transforms(block_value, self.context)\n         return blocks\ndiff --git a/src/plone/restapi/serializer/utils.py b/src/plone/restapi/serializer/utils.py\nindex 15b37a41a..f9506c9ce 100644\n--- a/src/plone/restapi/serializer/utils.py\n+++ b/src/plone/restapi/serializer/utils.py\n@@ -26,7 +26,8 @@ def uid_to_url(path):\n         target_object = uuidToObject(uid)\n         if target_object:\n             adapter = queryMultiAdapter(\n-                (target_object, target_object.REQUEST), IObjectPrimaryFieldTarget\n+                (target_object, target_object.REQUEST),\n+                IObjectPrimaryFieldTarget,\n             )\n             if adapter and adapter():\n                 href = adapter()\n'

