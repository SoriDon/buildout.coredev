Repository: plone.scale


Branch: refs/heads/master
Date: 2022-10-20T17:09:17+02:00
Author: Balázs Reé (reebalazs) <ree@greenfinity.hu>
Commit: https://github.com/plone/plone.scale/commit/df79501b0d4d4158d51ef2c1c7d669a6beaa73e4

Add support for animated GIFs

Files changed:
A news/69.feature
A plone/scale/tests/data/animated.gif
A plone/scale/tests/data/animated2.gif
M plone/scale/scale.py
M plone/scale/tests/test_scale.py

b'diff --git a/news/69.feature b/news/69.feature\nnew file mode 100644\nindex 0000000..66b342b\n--- /dev/null\n+++ b/news/69.feature\n@@ -0,0 +1 @@\n+Add support for animated GIFs @reebalazs\n\\ No newline at end of file\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex bb8b42d..891092a 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -2,6 +2,7 @@\n \n import math\n import PIL.Image\n+import PIL.ImageSequence\n import PIL.ImageFile\n import sys\n import warnings\n@@ -72,42 +73,59 @@ def scaleImage(\n     """\n     if isinstance(image, (bytes, str)):\n         image = StringIO(image)\n-    image = PIL.Image.open(image)\n-    # When we create a new image during scaling we loose the format\n-    # information, so remember it here.\n-    format_ = image.format\n-    if format_ not in ("PNG", "GIF"):\n-        # Always generate JPEG, except if format is PNG or GIF.\n-        format_ = "JPEG"\n-    elif format_ == "GIF":\n-        # GIF scaled looks better if we have 8-bit alpha and no palette\n-        format_ = "PNG"\n-\n-    icc_profile = image.info.get("icc_profile")\n-    image = scalePILImage(image, width, height, mode, direction=direction)\n \n-    # convert to simpler mode if possible\n-    colors = image.getcolors(maxcolors=256)\n-    if image.mode not in ("P", "L") and colors:\n-        if format_ == "JPEG":\n-            # check if it\'s all grey\n-            if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):\n-                image = image.convert("L")\n-        elif format_ == "PNG":\n-            image = image.convert("P")\n+    animated_kwargs = {}\n+    with PIL.Image.open(image) as img:\n+        icc_profile = img.info.get("icc_profile")\n+        # When we create a new image during scaling we loose the format\n+        # information, so remember it here.\n+        format_ = img.format\n+        if format_ == "GIF":\n+            # Attempt to process multiple frames, to support animated GIFs\n+            append_images = []\n+            for frame in PIL.ImageSequence.Iterator(img):\n+                # We ignore the returned format_ as it won\'t get optimized\n+                # in case of a GIF. This ensures that the format remains\n+                # constant across all frames.\n+                scaled_frame, _dummy_format_ = scaleSingleFrame(\n+                    frame,\n+                    width=width,\n+                    height=height,\n+                    mode=mode,\n+                    format_=format_,\n+                    quality=quality,\n+                    direction=direction,\n+                )\n+                append_images.append(scaled_frame)\n+\n+            # The first image is the basis for save\n+            # All other images than the first will be added as a save parameter\n+            image = append_images.pop(0)\n+            if len(append_images) > 0:\n+                # Saving as a multi page image\n+                animated_kwargs[\'save_all\'] = True\n+                animated_kwargs[\'append_images\'] = append_images\n+            else:\n+                # GIF scaled looks better if we have 8-bit alpha and no palette,\n+                # but it only works for single frame, so don\'t do this for animated GIFs.\n+                format_ = "PNG"\n \n-    if image.mode == "RGBA" and format_ == "JPEG":\n-        extrema = dict(zip(image.getbands(), image.getextrema()))\n-        if extrema.get("A") == (255, 255):\n-            # no alpha used, just change the mode, which causes the alpha band\n-            # to be dropped on save\n-            image.mode = "RGB"\n         else:\n-            # switch to PNG, which supports alpha\n-            format_ = "PNG"\n+            # All other formats only process a single frame\n+            if format_ not in ("PNG", "GIF"):\n+                # Always generate JPEG, except if format is PNG or GIF.\n+                format_ = "JPEG"\n+            image, format_ = scaleSingleFrame(\n+                img,\n+                width=width,\n+                height=height,\n+                mode=mode,\n+                format_=format_,\n+                quality=quality,\n+                direction=direction,\n+            )\n \n     new_result = False\n-\n     if result is None:\n         result = StringIO()\n         new_result = True\n@@ -119,6 +137,7 @@ def scaleImage(\n         optimize=True,\n         progressive=True,\n         icc_profile=icc_profile,\n+        **animated_kwargs,\n     )\n \n     if new_result:\n@@ -129,6 +148,40 @@ def scaleImage(\n     return result, format_, image.size\n \n \n+def scaleSingleFrame(\n+    image,\n+    width,\n+    height,\n+    mode,\n+    format_,\n+    quality,\n+    direction,\n+):\n+    image = scalePILImage(image, width, height, mode, direction=direction)\n+\n+    # convert to simpler mode if possible\n+    colors = image.getcolors(maxcolors=256)\n+    if image.mode not in ("P", "L") and colors:\n+        if format_ == "JPEG":\n+            # check if it\'s all grey\n+            if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):\n+                image = image.convert("L")\n+        elif format_ in ("PNG", "GIF"):\n+            image = image.convert("P")\n+\n+    if image.mode == "RGBA" and format_ == "JPEG":\n+        extrema = dict(zip(image.getbands(), image.getextrema()))\n+        if extrema.get("A") == (255, 255):\n+            # no alpha used, just change the mode, which causes the alpha band\n+            # to be dropped on save\n+            image.mode = "RGB"\n+        else:\n+            # switch to PNG, which supports alpha\n+            format_ = "PNG"\n+\n+    return image, format_\n+\n+\n def _scale_thumbnail(image, width=None, height=None):\n     """Scale with method "thumbnail".\n \ndiff --git a/plone/scale/tests/data/animated.gif b/plone/scale/tests/data/animated.gif\nnew file mode 100644\nindex 0000000..cef4bd7\nBinary files /dev/null and b/plone/scale/tests/data/animated.gif differ\ndiff --git a/plone/scale/tests/data/animated2.gif b/plone/scale/tests/data/animated2.gif\nnew file mode 100644\nindex 0000000..3609359\nBinary files /dev/null and b/plone/scale/tests/data/animated2.gif differ\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 4ffaf42..8ad8913 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -22,6 +22,10 @@\n     CMYK = fio.read()\n with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), "rb") as fio:\n     PROFILE = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "animated.gif"), "rb") as fio:\n+    ANIGIF = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "animated2.gif"), "rb") as fio:\n+    ANIGIF2 = fio.read()\n \n \n class ScalingTests(TestCase):\n@@ -40,6 +44,12 @@ def testScaledImageKeepGIFto(self):\n     def testScaledImageIsJpeg(self):\n         self.assertEqual(scaleImage(TIFF, 84, 103, "contain")[1], "JPEG")\n \n+    def testScaledAnigifKeepGIF(self):\n+        self.assertEqual(scaleImage(ANIGIF, 84, 103, "contain")[1], "GIF")\n+\n+    def testScaledAnigifKeepGIF2(self):\n+        self.assertEqual(scaleImage(ANIGIF2, 84, 103, "contain")[1], "GIF")\n+\n     def testAlphaForcesPNG(self):\n         # first image without alpha\n         src = PIL.Image.new("RGBA", (256, 256), (255, 255, 255, 255))\n@@ -338,6 +348,20 @@ def testDeprecations(self):\n             self.assertIs(w[0].category, DeprecationWarning)\n             self.assertIn("The \'direction\' option is deprecated", str(w[0].message))\n \n+    def testDeprecationsAni(self):\n+        import plone.scale.scale\n+\n+        # clear warnings registry, so the test actually sees the warning\n+        plone.scale.scale.__warningregistry__.clear()\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter("always")\n+            print(\'NEXT...\')\n+            scaleImage(ANIGIF, 16, 16, direction="keep")\n+            self.assertEqual(len(w), 6)\n+            for item in w:\n+                self.assertIs(item.category, DeprecationWarning)\n+                self.assertIn("The \'direction\' option is deprecated", str(item.message))\n+\n     def test_calculate_scaled_dimensions_contain(self):\n         """Test the calculate_scaled_dimensions function with mode "contain".\n \n@@ -396,6 +420,24 @@ def test_calculate_scaled_dimensions_scale(self):\n         self.assertEqual(calc(600, 300, 400, 65536), (400, 200))\n         self.assertEqual(calc(600, 1200, 400, 65536), (400, 800))\n \n+    def testAnimatedGifContainsAllFrames(self):\n+        image = scaleImage(ANIGIF, 84, 103, "contain")[0]\n+        with PIL.Image.open(StringIO(image)) as img:\n+            frames = [frame for frame in PIL.ImageSequence.Iterator(img)]\n+            self.assertEqual(len(frames), 6)\n+            for frame in frames:\n+                self.assertEqual(frame.width, 84)\n+                self.assertEqual(frame.height, 103)\n+\n+    def testAnimatedGifContainsAllFrames2(self):\n+        image = scaleImage(ANIGIF2, 84, 103, "contain")[0]\n+        with PIL.Image.open(StringIO(image)) as img:\n+            frames = [frame for frame in PIL.ImageSequence.Iterator(img)]\n+            self.assertEqual(len(frames), 35)\n+            for frame in frames:\n+                self.assertEqual(frame.width, 84)\n+                self.assertEqual(frame.height, 103)\n+\n \n def test_suite():\n     from unittest import defaultTestLoader\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-10-20T09:25:40-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.scale/commit/2caf522107b86f22d4c4d7e1b32eb921e414f2b6

Update plone/scale/tests/test_scale.py

Files changed:
M plone/scale/tests/test_scale.py

b'diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 8ad8913..1f75d48 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -355,7 +355,6 @@ def testDeprecationsAni(self):\n         plone.scale.scale.__warningregistry__.clear()\n         with warnings.catch_warnings(record=True) as w:\n             warnings.simplefilter("always")\n-            print(\'NEXT...\')\n             scaleImage(ANIGIF, 16, 16, direction="keep")\n             self.assertEqual(len(w), 6)\n             for item in w:\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-10-20T09:26:01-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.scale/commit/a393e8bf8c8609b963d93ff941e15d302e9d7d5f

Merge pull request #70 from plone/ree-animated-gif

Add support for animated GIFs

Files changed:
A news/69.feature
A plone/scale/tests/data/animated.gif
A plone/scale/tests/data/animated2.gif
M plone/scale/scale.py
M plone/scale/tests/test_scale.py

b'diff --git a/news/69.feature b/news/69.feature\nnew file mode 100644\nindex 0000000..66b342b\n--- /dev/null\n+++ b/news/69.feature\n@@ -0,0 +1 @@\n+Add support for animated GIFs @reebalazs\n\\ No newline at end of file\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex bb8b42d..891092a 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -2,6 +2,7 @@\n \n import math\n import PIL.Image\n+import PIL.ImageSequence\n import PIL.ImageFile\n import sys\n import warnings\n@@ -72,42 +73,59 @@ def scaleImage(\n     """\n     if isinstance(image, (bytes, str)):\n         image = StringIO(image)\n-    image = PIL.Image.open(image)\n-    # When we create a new image during scaling we loose the format\n-    # information, so remember it here.\n-    format_ = image.format\n-    if format_ not in ("PNG", "GIF"):\n-        # Always generate JPEG, except if format is PNG or GIF.\n-        format_ = "JPEG"\n-    elif format_ == "GIF":\n-        # GIF scaled looks better if we have 8-bit alpha and no palette\n-        format_ = "PNG"\n-\n-    icc_profile = image.info.get("icc_profile")\n-    image = scalePILImage(image, width, height, mode, direction=direction)\n \n-    # convert to simpler mode if possible\n-    colors = image.getcolors(maxcolors=256)\n-    if image.mode not in ("P", "L") and colors:\n-        if format_ == "JPEG":\n-            # check if it\'s all grey\n-            if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):\n-                image = image.convert("L")\n-        elif format_ == "PNG":\n-            image = image.convert("P")\n+    animated_kwargs = {}\n+    with PIL.Image.open(image) as img:\n+        icc_profile = img.info.get("icc_profile")\n+        # When we create a new image during scaling we loose the format\n+        # information, so remember it here.\n+        format_ = img.format\n+        if format_ == "GIF":\n+            # Attempt to process multiple frames, to support animated GIFs\n+            append_images = []\n+            for frame in PIL.ImageSequence.Iterator(img):\n+                # We ignore the returned format_ as it won\'t get optimized\n+                # in case of a GIF. This ensures that the format remains\n+                # constant across all frames.\n+                scaled_frame, _dummy_format_ = scaleSingleFrame(\n+                    frame,\n+                    width=width,\n+                    height=height,\n+                    mode=mode,\n+                    format_=format_,\n+                    quality=quality,\n+                    direction=direction,\n+                )\n+                append_images.append(scaled_frame)\n+\n+            # The first image is the basis for save\n+            # All other images than the first will be added as a save parameter\n+            image = append_images.pop(0)\n+            if len(append_images) > 0:\n+                # Saving as a multi page image\n+                animated_kwargs[\'save_all\'] = True\n+                animated_kwargs[\'append_images\'] = append_images\n+            else:\n+                # GIF scaled looks better if we have 8-bit alpha and no palette,\n+                # but it only works for single frame, so don\'t do this for animated GIFs.\n+                format_ = "PNG"\n \n-    if image.mode == "RGBA" and format_ == "JPEG":\n-        extrema = dict(zip(image.getbands(), image.getextrema()))\n-        if extrema.get("A") == (255, 255):\n-            # no alpha used, just change the mode, which causes the alpha band\n-            # to be dropped on save\n-            image.mode = "RGB"\n         else:\n-            # switch to PNG, which supports alpha\n-            format_ = "PNG"\n+            # All other formats only process a single frame\n+            if format_ not in ("PNG", "GIF"):\n+                # Always generate JPEG, except if format is PNG or GIF.\n+                format_ = "JPEG"\n+            image, format_ = scaleSingleFrame(\n+                img,\n+                width=width,\n+                height=height,\n+                mode=mode,\n+                format_=format_,\n+                quality=quality,\n+                direction=direction,\n+            )\n \n     new_result = False\n-\n     if result is None:\n         result = StringIO()\n         new_result = True\n@@ -119,6 +137,7 @@ def scaleImage(\n         optimize=True,\n         progressive=True,\n         icc_profile=icc_profile,\n+        **animated_kwargs,\n     )\n \n     if new_result:\n@@ -129,6 +148,40 @@ def scaleImage(\n     return result, format_, image.size\n \n \n+def scaleSingleFrame(\n+    image,\n+    width,\n+    height,\n+    mode,\n+    format_,\n+    quality,\n+    direction,\n+):\n+    image = scalePILImage(image, width, height, mode, direction=direction)\n+\n+    # convert to simpler mode if possible\n+    colors = image.getcolors(maxcolors=256)\n+    if image.mode not in ("P", "L") and colors:\n+        if format_ == "JPEG":\n+            # check if it\'s all grey\n+            if all(rgb[0] == rgb[1] == rgb[2] for c, rgb in colors):\n+                image = image.convert("L")\n+        elif format_ in ("PNG", "GIF"):\n+            image = image.convert("P")\n+\n+    if image.mode == "RGBA" and format_ == "JPEG":\n+        extrema = dict(zip(image.getbands(), image.getextrema()))\n+        if extrema.get("A") == (255, 255):\n+            # no alpha used, just change the mode, which causes the alpha band\n+            # to be dropped on save\n+            image.mode = "RGB"\n+        else:\n+            # switch to PNG, which supports alpha\n+            format_ = "PNG"\n+\n+    return image, format_\n+\n+\n def _scale_thumbnail(image, width=None, height=None):\n     """Scale with method "thumbnail".\n \ndiff --git a/plone/scale/tests/data/animated.gif b/plone/scale/tests/data/animated.gif\nnew file mode 100644\nindex 0000000..cef4bd7\nBinary files /dev/null and b/plone/scale/tests/data/animated.gif differ\ndiff --git a/plone/scale/tests/data/animated2.gif b/plone/scale/tests/data/animated2.gif\nnew file mode 100644\nindex 0000000..3609359\nBinary files /dev/null and b/plone/scale/tests/data/animated2.gif differ\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 4ffaf42..1f75d48 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -22,6 +22,10 @@\n     CMYK = fio.read()\n with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), "rb") as fio:\n     PROFILE = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "animated.gif"), "rb") as fio:\n+    ANIGIF = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "animated2.gif"), "rb") as fio:\n+    ANIGIF2 = fio.read()\n \n \n class ScalingTests(TestCase):\n@@ -40,6 +44,12 @@ def testScaledImageKeepGIFto(self):\n     def testScaledImageIsJpeg(self):\n         self.assertEqual(scaleImage(TIFF, 84, 103, "contain")[1], "JPEG")\n \n+    def testScaledAnigifKeepGIF(self):\n+        self.assertEqual(scaleImage(ANIGIF, 84, 103, "contain")[1], "GIF")\n+\n+    def testScaledAnigifKeepGIF2(self):\n+        self.assertEqual(scaleImage(ANIGIF2, 84, 103, "contain")[1], "GIF")\n+\n     def testAlphaForcesPNG(self):\n         # first image without alpha\n         src = PIL.Image.new("RGBA", (256, 256), (255, 255, 255, 255))\n@@ -338,6 +348,19 @@ def testDeprecations(self):\n             self.assertIs(w[0].category, DeprecationWarning)\n             self.assertIn("The \'direction\' option is deprecated", str(w[0].message))\n \n+    def testDeprecationsAni(self):\n+        import plone.scale.scale\n+\n+        # clear warnings registry, so the test actually sees the warning\n+        plone.scale.scale.__warningregistry__.clear()\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter("always")\n+            scaleImage(ANIGIF, 16, 16, direction="keep")\n+            self.assertEqual(len(w), 6)\n+            for item in w:\n+                self.assertIs(item.category, DeprecationWarning)\n+                self.assertIn("The \'direction\' option is deprecated", str(item.message))\n+\n     def test_calculate_scaled_dimensions_contain(self):\n         """Test the calculate_scaled_dimensions function with mode "contain".\n \n@@ -396,6 +419,24 @@ def test_calculate_scaled_dimensions_scale(self):\n         self.assertEqual(calc(600, 300, 400, 65536), (400, 200))\n         self.assertEqual(calc(600, 1200, 400, 65536), (400, 800))\n \n+    def testAnimatedGifContainsAllFrames(self):\n+        image = scaleImage(ANIGIF, 84, 103, "contain")[0]\n+        with PIL.Image.open(StringIO(image)) as img:\n+            frames = [frame for frame in PIL.ImageSequence.Iterator(img)]\n+            self.assertEqual(len(frames), 6)\n+            for frame in frames:\n+                self.assertEqual(frame.width, 84)\n+                self.assertEqual(frame.height, 103)\n+\n+    def testAnimatedGifContainsAllFrames2(self):\n+        image = scaleImage(ANIGIF2, 84, 103, "contain")[0]\n+        with PIL.Image.open(StringIO(image)) as img:\n+            frames = [frame for frame in PIL.ImageSequence.Iterator(img)]\n+            self.assertEqual(len(frames), 35)\n+            for frame in frames:\n+                self.assertEqual(frame.width, 84)\n+                self.assertEqual(frame.height, 103)\n+\n \n def test_suite():\n     from unittest import defaultTestLoader\n'

