Repository: mockup


Branch: refs/heads/master
Date: 2015-12-28T11:34:16-06:00
Author: Sam Schwartz (obct537) <obct537@gmail.com>
Commit: https://github.com/plone/mockup/commit/c5c43b436c7859731b95042b4018cc25c6cedbed

changed how the querystring pattern displays path-based criteria to use
related items widget and some pre-baked often-used queries

Files changed:
M CHANGES.rst
M mockup/patterns/querystring/pattern.js
M mockup/patterns/querystring/pattern.querystring.less

diff --git a/CHANGES.rst b/CHANGES.rst
index 3dd3360..77fc915 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -23,6 +23,9 @@ New:
   be taken care of with plone-modal-open class being applied to the body.
   This should fix issues with scrolling when this isn't properly cleared
   [vangheem]
+- Changed how the querystring pattern displays options for path-based queries,
+  to improve usability for less tech-savvy users.
+  [obct537]
 
 Fixes:
 
@@ -53,6 +56,8 @@ Fixes:
 ------------------
 
 New:
+- Fixed issue causing the querystring pattern to query multiple times per change
+  [obct537]
 
 - Added the ``momentFormat`` option to the ``structure`` pattern.
   [Gagaro]
diff --git a/mockup/patterns/querystring/pattern.js b/mockup/patterns/querystring/pattern.js
index 3a72988..240d7d6 100644
--- a/mockup/patterns/querystring/pattern.js
+++ b/mockup/patterns/querystring/pattern.js
@@ -44,10 +44,11 @@ define([
   'pat-base',
   'mockup-patterns-select2',
   'mockup-patterns-pickadate',
+  'mockup-patterns-relateditems',
   'select2',
   'translate',
   'underscore'
-], function($, Base, Select2, PickADate, undefined, _t, _) {
+], function($, Base, Select2, PickADate, relatedItems, undefined, _t, _) {
   'use strict';
 
   var Criteria = function() { this.init.apply(this, arguments); };
@@ -62,15 +63,18 @@ define([
       classValueName: 'querystring-criteria-value',
       classRemoveName: 'querystring-criteria-remove',
       classResultsName: 'querystring-criteria-results',
-      classClearName: 'querystring-criteria-clear'
+      classClearName: 'querystring-criteria-clear',
+      classDepthName: 'querystring-criteria-depth'
     },
-    init: function($el, options, indexes, index, operator, value) {
+    init: function($el, options, indexes, index, operator, value, baseUrl) {
       var self = this;
 
       self.options = $.extend(true, {}, self.defaults, options);
       self.indexes = indexes;
       self.indexGroups = {};
-
+      self.baseUrl = baseUrl;
+      self.advanced = false;
+      self.initial = value;
       // create wrapper criteria and append it to DOM
       self.$wrapper = $('<div/>')
               .addClass(self.options.classWrapperName)
@@ -132,10 +136,9 @@ define([
 
       self.trigger('create-criteria');
     },
-    createOperator: function(index, operator, value) {
+    appendOperators: function(index) {
       var self = this;
 
-      self.removeOperator();
       self.$operator = $('<select/>');
 
       if (self.indexes[index]) {
@@ -163,6 +166,83 @@ define([
           self.createClear();
           self.trigger('operator-changed');
         });
+    },
+    convertPathOperators: function(oval) {
+      var self = this;
+
+      if( self.advanced ) {
+        return oval;
+      }
+      //This allows us to use the same query operation for multiple dropdown options.
+      oval = oval
+        .replace('advanced', 'relativePath')
+        .replace('path', 'relativePath');
+      return oval;
+    },
+    createPathOperators: function() {
+      var self = this;
+
+      if( self.advanced ) {
+        self.resetPathOperators();
+        return;
+      }
+      var newOperator = "plone.app.querystring.operation.string.advanced";
+
+      if( self.indexes.path.operators[newOperator] === undefined ) {
+        self.indexes.path.operations.push(newOperator);
+        self.indexes.path.operators[newOperator] = {
+          title: 'Advanced',
+          widget: 'AdvancedPathWidget',
+          description: 'Enter a custom path string',
+          operation: 'plone.app.querystring.queryparser._relativePath'
+        };
+      }
+
+      $.each(self.indexes.path.operators, function(key, value) {
+        var options = value;
+        if( key.indexOf('absolute') > 0 ) {
+          options.title = "Custom";
+        }
+        else if( key.indexOf('relative') > 0 ) {
+          options.title = "Parent (../)";
+        }
+        else if( key.indexOf('advanced') > 0 ) {
+          options.title = "Advanced Mode";
+        }
+        else {
+          options.title = "Current (./)";
+          options.widget = "RelativePathWidget";
+        }
+      });
+    },
+    resetPathOperators: function() {
+      var self = this;
+      $.each(self.indexes.path.operators, function(key, value) {
+        var options = value;
+        if( key.indexOf('absolute') > 0 ) {
+          options.title = "Absolute Path";
+        }
+        else if( key.indexOf('relative') > 0 ) {
+          options.title = "Relative Path";
+        }
+        else if( key.indexOf('advanced') > 0 ) {
+          options.title = "Simple Mode";
+        }
+        else {
+          options.title = "Navigation Path";
+          options.widget = "ReferenceWidget";
+        }
+      });
+
+      return;
+    },
+    createOperator: function(index, operator, value) {
+      var self = this;
+
+      self.removeOperator();
+      self.createPathOperators();
+
+      self.appendOperators(index);
 
       if (operator === undefined) {
         operator = self.$operator.select2('val');
@@ -182,6 +262,28 @@ define([
 
       self.removeValue();
 
+      var createDepthSelect = function(selected) {
+        var select =
+          "<div class='depth-select-box'>" +
+            "<label for='depth-select'>Depth</label>" +
+            "<select name='depth-select' class='"+self.options.classDepthName+"'>" +
+              "<option value='-1' selected='selected'>Unlimited</option>";
+
+              for(var i = 0; i <= 10; i+=1) {
+                select += "<option value="+i+" ";
+                if( ""+i === selected ) {
+                  select += "selected='selected' ";
+                }
+                select += ">" + i + "</option>";
+              }
+            select += "</select>" +
+          "</div>";
+
+          return $(select).change(function() {
+            self.trigger('depth-changed');
+          });
+      };
+
       if (widget === 'StringWidget') {
         self.$value = $('<input type="text"/>')
                 .addClass(self.options.classValueName + '-' + widget)
@@ -250,24 +352,69 @@ define([
                   self.trigger('value-changed');
                 });
 
-      } else if (widget === 'ReferenceWidget') {
-        self.$value = $('<input type="text"/>')
-                .addClass(self.options.classValueName + '-' + widget)
-                .val(value)
-                .appendTo($wrapper)
-                .change(function() {
-                  self.trigger('value-changed');
-                });
-
+      } else if (widget === 'AdvancedPathWidget') {
+        if( self.advanced ) {
+          self.advanced = false;
+        }
+        else {
+          self.advanced = true;
+        }
+        self.createPathOperators();
+        self.removeOperator();
+        self.appendOperators(index);
+        self.createValue(index);
       } else if (widget === 'RelativePathWidget') {
-        self.$value = $('<input type="text"/>')
-                .addClass(self.options.classValueName + '-' + widget)
-                .appendTo($wrapper)
-                .val(value)
-                .change(function() {
-                  self.trigger('value-changed');
-                });
 
+        if( self.advanced ) {
+          self.$value = $('<input type="text"/>')
+            .addClass(self.options.classValueName + '-' + widget)
+            .appendTo($wrapper)
+            .val(value)
+            .change(function() {
+              self.trigger('value-changed');
+            });
+        }else{
+          //These 2 hard-coded values correspond to the "Current (./)" and "Parent (../)" options
+          //under the location index.
+          var val = ".::1";
+          if ( self.$operator.val().indexOf('relativePath') > 0 ) {
+            val = "..::1";
+          }
+          self.$value = $('<input type="hidden"/>')
+          .addClass(self.options.classValueName + '-' + widget)
+          .appendTo($wrapper)
+          .val(val);
+        }
+      } else if (widget === 'ReferenceWidget') {
+        if( self.advanced ) {
+          self.$value = $('<input type="text"/>')
+            .addClass(self.options.classValueName + '-' + widget)
+            .val(value)
+            .appendTo($wrapper)
+            .change(function() {
+              self.trigger('value-changed');
+            });
+        }else{
+          var pathAndDepth = ['', -1];
+          if( value !== undefined ) {
+              pathAndDepth = value.split('::');
+          }
+          self.$value = $('<input type="text"/>')
+          .addClass(self.options.classValueName + '-' + widget)
+          .appendTo($wrapper)
+          .val(pathAndDepth[0])
+          .patternRelateditems({
+            "vocabularyUrl": self.baseUrl + "@@getVocabulary?name=plone.app.vocabularies.Catalog&field=relatedItems",
+            "folderTypes": ["Folder"],
+            "maximumSelectionSize": 1,
+            "width": "400px"
+          })
+          .change(function() {
+            self.trigger('value-changed');
+          });
+          self.$value.parent().after(createDepthSelect(pathAndDepth[1]));
+          self.$value.parents('.' + self.options.classValueName).addClass('break-line');
+        }
       } else if (widget === 'MultipleSelectionWidget') {
         self.$value = $('<select/>').prop('multiple', true)
                 .addClass(self.options.classValueName + '-' + widget)
@@ -293,7 +440,11 @@ define([
           });
         }
         else {
-          self.$value.select2('val', value);
+          var trimmedValue = value;
+          if( typeof value === "string" ) {
+            trimmedValue = value.replace(/::[0-9]+/, '');
+          }
+          self.$value.select2('val', trimmedValue);
         }
       }
 
@@ -359,8 +510,16 @@ define([
       if (typeof self.$operator === 'undefined') { // no operator, no query
         return '';
       }
-      var oval = self.$operator.val(),
-          ostr = 'query.o:records=' + oval;
+      var oval = self.$operator.val();
+
+      if( ival === "path" ) {
+        if( oval.indexOf('advanced') > 0 ) {
+          return '';
+        }
+        oval = self.convertPathOperators(oval);
+      }
+
+      var ostr = 'query.o:records=' + oval;
 
       // value(s)
       var vstrbase = 'query.v:records=',
@@ -380,7 +539,17 @@ define([
         });
       }
       else {
-        vstr.push(vstrbase + self.$value.val());
+        var str = vstrbase + self.$value.val();
+        if( ival === "path" && self.$value.val() !== '') {
+          str += self.getDepthString();
+        }
+        else if( self.initial !== undefined ) {
+          str = vstrbase + self.initial;
+          //Sometimes the RelatedItemsWidget won't be loaded by this point.
+          //This only should happen on the initial page load.
+          delete self.initial;
+        }
+        vstr.push(str);
       }
 
       return istr + '&' + ostr + '&' + vstr.join('&');
@@ -400,6 +569,14 @@ define([
       }
       var oval = self.$operator.val();
 
+      if( ival === "path" ) {
+        if( oval.indexOf('advanced') > 0 ) {
+          //The advanced function is just a placeholder,
+          //We don't want to send an actual query
+          return '';
+        }
+        oval = self.convertPathOperators(oval);
+      }
       // value(s)
       var varr = [];
       if ($.isArray(self.$value)) { // handles only datepickers from the 'between' operator right now
@@ -408,7 +585,9 @@ define([
         });
       }
       else if (typeof self.$value !== 'undefined') {
-        varr.push(self.$value.val());
+        var value = self.$value.val();
+        value += self.getDepthString();
+        varr.push(value);
       }
       var vval;
       if (varr.length > 1) {
@@ -421,8 +600,22 @@ define([
         vval = '""';
       }
 
+      if( self.indexes[ival].operators[oval] === undefined ) {
+        return;
+      }
+
       return '{"i":"' + ival + '", "o":"' + oval + '", "v":' + vval + '}';
     },
+    getDepthString: function() {
+      var self = this,
+          out = "",
+          depth = $('.'+self.options.classDepthName).val();
+
+      if( depth !== "" && depth !== undefined ) {
+        out += '::' + depth;
+      }
+      return out;
+    },
     trigger: function(name) {
       this.$wrapper.trigger(name + '-criteria.querystring.patterns', [ this ]);
     },
@@ -536,8 +729,9 @@ define([
     },
     createCriteria: function(index, operator, value) {
       var self = this,
+          baseUrl = self.options.indexOptionsUrl.replace(/(@@.*)/g, ''),
           criteria = new Criteria(self.$criteriaWrapper, self.options.criteria,
-            self.options.indexes, index, operator, value);
+            self.options.indexes, index, operator, value, baseUrl);
 
       criteria.on('remove', function(e) {
         if (self.criterias[self.criterias.length - 1] === criteria) {
@@ -551,10 +745,16 @@ define([
         }
       });
 
-      var doupdates = function() {
+      //This prevents multiple requests from going off after making a single change
+      var _doupdates = function(){
         self.refreshPreviewEvent();
         self.updateValue();
       };
+      var _updateTimeout = -1;
+      var doupdates = function() {
+        clearTimeout(_updateTimeout);
+        _updateTimeout = setTimeout(_doupdates, 100);
+      };
 
       criteria.on('remove', function(e, criteria) {
         if (self.criterias.indexOf(criteria) !== -1) {
@@ -571,6 +771,7 @@ define([
       criteria.on('create-operator', doupdates);
       criteria.on('create-value', doupdates);
       criteria.on('value-changed', doupdates);
+      criteria.on('depth-changed', doupdates);
 
       self.criterias.push(criteria);
     },
@@ -639,7 +840,7 @@ define([
         $(existingSortOrder).hide();
       }
     },
-    refreshPreviewEvent: function() {
+    refreshPreviewEvent: function(value) {
       var self = this;
 
       if (!self.options.showPreviews) {
@@ -665,9 +866,9 @@ define([
 
       var query = [], querypart;
       $.each(self.criterias, function(i, criteria) {
-        querypart = criteria.buildQueryPart();
+        var querypart = criteria.buildQueryPart();
         if (querypart !== '') {
-          query.push(criteria.buildQueryPart());
+          query.push(querypart);
         }
       });
 
diff --git a/mockup/patterns/querystring/pattern.querystring.less b/mockup/patterns/querystring/pattern.querystring.less
index 006f10e..fe95cb4 100644
--- a/mockup/patterns/querystring/pattern.querystring.less
+++ b/mockup/patterns/querystring/pattern.querystring.less
@@ -17,17 +17,17 @@
   .querystring-criteria-remove {
     float: left;
     display: block;
-    
+
     height: 13px;
     right: 3px;
     top: 4px;
-    
+
     line-height: 13px;
     font-style: italic;
     outline: 0;
     margin: 8px 4px;
     cursor: pointer;
-    
+
     .glyphicon();
     .glyphicon-remove();
   }
@@ -57,8 +57,8 @@
       line-height: 1.5em;
       margin-right: 0.3em !important;
     }
-
   }
+
   .querystring-criteria-clear {
     clear: both;
   }
@@ -106,7 +106,22 @@
 
 }
 
+.break-line {
+  width: 80%;
+  padding-left: 22px;
 
+  div.depth-select-box {
+    width: 30%;
+    display: inline;
+    padding-left: 15px;
+  }
+
+  select {
+    margin-left: 15px;
+    width: 100px;
+    display: inline
+  }
+}
 .querystring-sort-wrapper {
 
   margin: 10px 0;


Repository: mockup


Branch: refs/heads/master
Date: 2015-12-28T11:35:18-06:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/c6feb9858174222f395778eb00a39ccd2713f4b3

Merge pull request #615 from plone/path_criteria

Path criteria

Files changed:
M CHANGES.rst
M mockup/patterns/querystring/pattern.js
M mockup/patterns/querystring/pattern.querystring.less

diff --git a/CHANGES.rst b/CHANGES.rst
index 3dd3360..77fc915 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -23,6 +23,9 @@ New:
   be taken care of with plone-modal-open class being applied to the body.
   This should fix issues with scrolling when this isn't properly cleared
   [vangheem]
+- Changed how the querystring pattern displays options for path-based queries,
+  to improve usability for less tech-savvy users.
+  [obct537]
 
 Fixes:
 
@@ -53,6 +56,8 @@ Fixes:
 ------------------
 
 New:
+- Fixed issue causing the querystring pattern to query multiple times per change
+  [obct537]
 
 - Added the ``momentFormat`` option to the ``structure`` pattern.
   [Gagaro]
diff --git a/mockup/patterns/querystring/pattern.js b/mockup/patterns/querystring/pattern.js
index 3a72988..240d7d6 100644
--- a/mockup/patterns/querystring/pattern.js
+++ b/mockup/patterns/querystring/pattern.js
@@ -44,10 +44,11 @@ define([
   'pat-base',
   'mockup-patterns-select2',
   'mockup-patterns-pickadate',
+  'mockup-patterns-relateditems',
   'select2',
   'translate',
   'underscore'
-], function($, Base, Select2, PickADate, undefined, _t, _) {
+], function($, Base, Select2, PickADate, relatedItems, undefined, _t, _) {
   'use strict';
 
   var Criteria = function() { this.init.apply(this, arguments); };
@@ -62,15 +63,18 @@ define([
       classValueName: 'querystring-criteria-value',
       classRemoveName: 'querystring-criteria-remove',
       classResultsName: 'querystring-criteria-results',
-      classClearName: 'querystring-criteria-clear'
+      classClearName: 'querystring-criteria-clear',
+      classDepthName: 'querystring-criteria-depth'
     },
-    init: function($el, options, indexes, index, operator, value) {
+    init: function($el, options, indexes, index, operator, value, baseUrl) {
       var self = this;
 
       self.options = $.extend(true, {}, self.defaults, options);
       self.indexes = indexes;
       self.indexGroups = {};
-
+      self.baseUrl = baseUrl;
+      self.advanced = false;
+      self.initial = value;
       // create wrapper criteria and append it to DOM
       self.$wrapper = $('<div/>')
               .addClass(self.options.classWrapperName)
@@ -132,10 +136,9 @@ define([
 
       self.trigger('create-criteria');
     },
-    createOperator: function(index, operator, value) {
+    appendOperators: function(index) {
       var self = this;
 
-      self.removeOperator();
       self.$operator = $('<select/>');
 
       if (self.indexes[index]) {
@@ -163,6 +166,83 @@ define([
           self.createClear();
           self.trigger('operator-changed');
         });
+    },
+    convertPathOperators: function(oval) {
+      var self = this;
+
+      if( self.advanced ) {
+        return oval;
+      }
+      //This allows us to use the same query operation for multiple dropdown options.
+      oval = oval
+        .replace('advanced', 'relativePath')
+        .replace('path', 'relativePath');
+      return oval;
+    },
+    createPathOperators: function() {
+      var self = this;
+
+      if( self.advanced ) {
+        self.resetPathOperators();
+        return;
+      }
+      var newOperator = "plone.app.querystring.operation.string.advanced";
+
+      if( self.indexes.path.operators[newOperator] === undefined ) {
+        self.indexes.path.operations.push(newOperator);
+        self.indexes.path.operators[newOperator] = {
+          title: 'Advanced',
+          widget: 'AdvancedPathWidget',
+          description: 'Enter a custom path string',
+          operation: 'plone.app.querystring.queryparser._relativePath'
+        };
+      }
+
+      $.each(self.indexes.path.operators, function(key, value) {
+        var options = value;
+        if( key.indexOf('absolute') > 0 ) {
+          options.title = "Custom";
+        }
+        else if( key.indexOf('relative') > 0 ) {
+          options.title = "Parent (../)";
+        }
+        else if( key.indexOf('advanced') > 0 ) {
+          options.title = "Advanced Mode";
+        }
+        else {
+          options.title = "Current (./)";
+          options.widget = "RelativePathWidget";
+        }
+      });
+    },
+    resetPathOperators: function() {
+      var self = this;
+      $.each(self.indexes.path.operators, function(key, value) {
+        var options = value;
+        if( key.indexOf('absolute') > 0 ) {
+          options.title = "Absolute Path";
+        }
+        else if( key.indexOf('relative') > 0 ) {
+          options.title = "Relative Path";
+        }
+        else if( key.indexOf('advanced') > 0 ) {
+          options.title = "Simple Mode";
+        }
+        else {
+          options.title = "Navigation Path";
+          options.widget = "ReferenceWidget";
+        }
+      });
+
+      return;
+    },
+    createOperator: function(index, operator, value) {
+      var self = this;
+
+      self.removeOperator();
+      self.createPathOperators();
+
+      self.appendOperators(index);
 
       if (operator === undefined) {
         operator = self.$operator.select2('val');
@@ -182,6 +262,28 @@ define([
 
       self.removeValue();
 
+      var createDepthSelect = function(selected) {
+        var select =
+          "<div class='depth-select-box'>" +
+            "<label for='depth-select'>Depth</label>" +
+            "<select name='depth-select' class='"+self.options.classDepthName+"'>" +
+              "<option value='-1' selected='selected'>Unlimited</option>";
+
+              for(var i = 0; i <= 10; i+=1) {
+                select += "<option value="+i+" ";
+                if( ""+i === selected ) {
+                  select += "selected='selected' ";
+                }
+                select += ">" + i + "</option>";
+              }
+            select += "</select>" +
+          "</div>";
+
+          return $(select).change(function() {
+            self.trigger('depth-changed');
+          });
+      };
+
       if (widget === 'StringWidget') {
         self.$value = $('<input type="text"/>')
                 .addClass(self.options.classValueName + '-' + widget)
@@ -250,24 +352,69 @@ define([
                   self.trigger('value-changed');
                 });
 
-      } else if (widget === 'ReferenceWidget') {
-        self.$value = $('<input type="text"/>')
-                .addClass(self.options.classValueName + '-' + widget)
-                .val(value)
-                .appendTo($wrapper)
-                .change(function() {
-                  self.trigger('value-changed');
-                });
-
+      } else if (widget === 'AdvancedPathWidget') {
+        if( self.advanced ) {
+          self.advanced = false;
+        }
+        else {
+          self.advanced = true;
+        }
+        self.createPathOperators();
+        self.removeOperator();
+        self.appendOperators(index);
+        self.createValue(index);
       } else if (widget === 'RelativePathWidget') {
-        self.$value = $('<input type="text"/>')
-                .addClass(self.options.classValueName + '-' + widget)
-                .appendTo($wrapper)
-                .val(value)
-                .change(function() {
-                  self.trigger('value-changed');
-                });
 
+        if( self.advanced ) {
+          self.$value = $('<input type="text"/>')
+            .addClass(self.options.classValueName + '-' + widget)
+            .appendTo($wrapper)
+            .val(value)
+            .change(function() {
+              self.trigger('value-changed');
+            });
+        }else{
+          //These 2 hard-coded values correspond to the "Current (./)" and "Parent (../)" options
+          //under the location index.
+          var val = ".::1";
+          if ( self.$operator.val().indexOf('relativePath') > 0 ) {
+            val = "..::1";
+          }
+          self.$value = $('<input type="hidden"/>')
+          .addClass(self.options.classValueName + '-' + widget)
+          .appendTo($wrapper)
+          .val(val);
+        }
+      } else if (widget === 'ReferenceWidget') {
+        if( self.advanced ) {
+          self.$value = $('<input type="text"/>')
+            .addClass(self.options.classValueName + '-' + widget)
+            .val(value)
+            .appendTo($wrapper)
+            .change(function() {
+              self.trigger('value-changed');
+            });
+        }else{
+          var pathAndDepth = ['', -1];
+          if( value !== undefined ) {
+              pathAndDepth = value.split('::');
+          }
+          self.$value = $('<input type="text"/>')
+          .addClass(self.options.classValueName + '-' + widget)
+          .appendTo($wrapper)
+          .val(pathAndDepth[0])
+          .patternRelateditems({
+            "vocabularyUrl": self.baseUrl + "@@getVocabulary?name=plone.app.vocabularies.Catalog&field=relatedItems",
+            "folderTypes": ["Folder"],
+            "maximumSelectionSize": 1,
+            "width": "400px"
+          })
+          .change(function() {
+            self.trigger('value-changed');
+          });
+          self.$value.parent().after(createDepthSelect(pathAndDepth[1]));
+          self.$value.parents('.' + self.options.classValueName).addClass('break-line');
+        }
       } else if (widget === 'MultipleSelectionWidget') {
         self.$value = $('<select/>').prop('multiple', true)
                 .addClass(self.options.classValueName + '-' + widget)
@@ -293,7 +440,11 @@ define([
           });
         }
         else {
-          self.$value.select2('val', value);
+          var trimmedValue = value;
+          if( typeof value === "string" ) {
+            trimmedValue = value.replace(/::[0-9]+/, '');
+          }
+          self.$value.select2('val', trimmedValue);
         }
       }
 
@@ -359,8 +510,16 @@ define([
       if (typeof self.$operator === 'undefined') { // no operator, no query
         return '';
       }
-      var oval = self.$operator.val(),
-          ostr = 'query.o:records=' + oval;
+      var oval = self.$operator.val();
+
+      if( ival === "path" ) {
+        if( oval.indexOf('advanced') > 0 ) {
+          return '';
+        }
+        oval = self.convertPathOperators(oval);
+      }
+
+      var ostr = 'query.o:records=' + oval;
 
       // value(s)
       var vstrbase = 'query.v:records=',
@@ -380,7 +539,17 @@ define([
         });
       }
       else {
-        vstr.push(vstrbase + self.$value.val());
+        var str = vstrbase + self.$value.val();
+        if( ival === "path" && self.$value.val() !== '') {
+          str += self.getDepthString();
+        }
+        else if( self.initial !== undefined ) {
+          str = vstrbase + self.initial;
+          //Sometimes the RelatedItemsWidget won't be loaded by this point.
+          //This only should happen on the initial page load.
+          delete self.initial;
+        }
+        vstr.push(str);
       }
 
       return istr + '&' + ostr + '&' + vstr.join('&');
@@ -400,6 +569,14 @@ define([
       }
       var oval = self.$operator.val();
 
+      if( ival === "path" ) {
+        if( oval.indexOf('advanced') > 0 ) {
+          //The advanced function is just a placeholder,
+          //We don't want to send an actual query
+          return '';
+        }
+        oval = self.convertPathOperators(oval);
+      }
       // value(s)
       var varr = [];
       if ($.isArray(self.$value)) { // handles only datepickers from the 'between' operator right now
@@ -408,7 +585,9 @@ define([
         });
       }
       else if (typeof self.$value !== 'undefined') {
-        varr.push(self.$value.val());
+        var value = self.$value.val();
+        value += self.getDepthString();
+        varr.push(value);
       }
       var vval;
       if (varr.length > 1) {
@@ -421,8 +600,22 @@ define([
         vval = '""';
       }
 
+      if( self.indexes[ival].operators[oval] === undefined ) {
+        return;
+      }
+
       return '{"i":"' + ival + '", "o":"' + oval + '", "v":' + vval + '}';
     },
+    getDepthString: function() {
+      var self = this,
+          out = "",
+          depth = $('.'+self.options.classDepthName).val();
+
+      if( depth !== "" && depth !== undefined ) {
+        out += '::' + depth;
+      }
+      return out;
+    },
     trigger: function(name) {
       this.$wrapper.trigger(name + '-criteria.querystring.patterns', [ this ]);
     },
@@ -536,8 +729,9 @@ define([
     },
     createCriteria: function(index, operator, value) {
       var self = this,
+          baseUrl = self.options.indexOptionsUrl.replace(/(@@.*)/g, ''),
           criteria = new Criteria(self.$criteriaWrapper, self.options.criteria,
-            self.options.indexes, index, operator, value);
+            self.options.indexes, index, operator, value, baseUrl);
 
       criteria.on('remove', function(e) {
         if (self.criterias[self.criterias.length - 1] === criteria) {
@@ -551,10 +745,16 @@ define([
         }
       });
 
-      var doupdates = function() {
+      //This prevents multiple requests from going off after making a single change
+      var _doupdates = function(){
         self.refreshPreviewEvent();
         self.updateValue();
       };
+      var _updateTimeout = -1;
+      var doupdates = function() {
+        clearTimeout(_updateTimeout);
+        _updateTimeout = setTimeout(_doupdates, 100);
+      };
 
       criteria.on('remove', function(e, criteria) {
         if (self.criterias.indexOf(criteria) !== -1) {
@@ -571,6 +771,7 @@ define([
       criteria.on('create-operator', doupdates);
       criteria.on('create-value', doupdates);
       criteria.on('value-changed', doupdates);
+      criteria.on('depth-changed', doupdates);
 
       self.criterias.push(criteria);
     },
@@ -639,7 +840,7 @@ define([
         $(existingSortOrder).hide();
       }
     },
-    refreshPreviewEvent: function() {
+    refreshPreviewEvent: function(value) {
       var self = this;
 
       if (!self.options.showPreviews) {
@@ -665,9 +866,9 @@ define([
 
       var query = [], querypart;
       $.each(self.criterias, function(i, criteria) {
-        querypart = criteria.buildQueryPart();
+        var querypart = criteria.buildQueryPart();
         if (querypart !== '') {
-          query.push(criteria.buildQueryPart());
+          query.push(querypart);
         }
       });
 
diff --git a/mockup/patterns/querystring/pattern.querystring.less b/mockup/patterns/querystring/pattern.querystring.less
index 006f10e..fe95cb4 100644
--- a/mockup/patterns/querystring/pattern.querystring.less
+++ b/mockup/patterns/querystring/pattern.querystring.less
@@ -17,17 +17,17 @@
   .querystring-criteria-remove {
     float: left;
     display: block;
-    
+
     height: 13px;
     right: 3px;
     top: 4px;
-    
+
     line-height: 13px;
     font-style: italic;
     outline: 0;
     margin: 8px 4px;
     cursor: pointer;
-    
+
     .glyphicon();
     .glyphicon-remove();
   }
@@ -57,8 +57,8 @@
       line-height: 1.5em;
       margin-right: 0.3em !important;
     }
-
   }
+
   .querystring-criteria-clear {
     clear: both;
   }
@@ -106,7 +106,22 @@
 
 }
 
+.break-line {
+  width: 80%;
+  padding-left: 22px;
 
+  div.depth-select-box {
+    width: 30%;
+    display: inline;
+    padding-left: 15px;
+  }
+
+  select {
+    margin-left: 15px;
+    width: 100px;
+    display: inline
+  }
+}
 .querystring-sort-wrapper {
 
   margin: 10px 0;


