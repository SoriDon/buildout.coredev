Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-02-15T23:57:32+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/a2aca94fec5080b23c858c5f11c0775533f3e22c

Removed extra methods and tests for CMFQuickInstallerTool.

Moved those to the Products.CMFQuickInstallerTool package.

Files changed:
M CHANGES.rst
M Products/CMFPlone/QuickInstallerTool.py
M Products/CMFPlone/tests/test_zmi.py
D Products/CMFPlone/tests/testQuickInstallerTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6fb39e15b..b65d52eca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -38,6 +38,10 @@ New Features:
 
 Bug Fixes:
 
+- Removed extra methods and tests for CMFQuickInstallerTool.
+  Moved those to the Products.CMFQuickInstallerTool package.
+  [maurits]
+
 - Added tests for add-ons control panel.
   Add a link to the Site Setup.
   Let ``get_product_version`` work when you call it with ``CMFPlacefulWorkflow`` too.
diff --git a/Products/CMFPlone/QuickInstallerTool.py b/Products/CMFPlone/QuickInstallerTool.py
index fcf69b12c..aee3a8039 100644
--- a/Products/CMFPlone/QuickInstallerTool.py
+++ b/Products/CMFPlone/QuickInstallerTool.py
@@ -1,114 +1,28 @@
 # -*- coding: utf-8 -*-
-from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
-from Products.CMFCore.permissions import ManagePortal
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.utils import registerToolInterface
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-from Products.CMFQuickInstallerTool.QuickInstallerTool \
-    import QuickInstallerTool as BaseTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
 import pkg_resources
 
 
-class QuickInstallerTool(PloneBaseTool, BaseTool):
-    """ A tool to ease installing/uninstalling all sorts of products """
+# *IF* the base tool is still there, it seems nice to inherit from it.
+try:
+    pkg_resources.get_distribution('Products.CMFQuickInstallerTool')
+except pkg_resources.DistributionNotFound:
+    class QuickInstallerTool(PloneBaseTool):
+        """ A tool to ease installing/uninstalling all sorts of products
 
-    meta_type = 'Plone QuickInstaller Tool'
-    security = ClassSecurityInfo()
-    toolicon = 'skins/plone_images/product_icon.png'
+        In Plone 5.2 the extra methods were moved to
+        Products.CMFQuickInstallerTool.
 
-    security.declareProtected(ManagePortal, 'upgradeInfo')
+        This tool is no longer used in Plone 6, but we will
+        keep the class so we can cleanly uninstall and remove this.
 
-    def upgradeInfo(self, pid):
-        # Returns a dict with two booleans values, stating if an upgrade
-        # required and available.
-        available = self.isProductAvailable(pid)
-        if not available:
-            return False
-        # Product version as per version.txt or fallback on metadata file
-        product_version = str(self.getProductVersion(pid))
-        installed_product_version = self._getOb(pid).getInstalledVersion()
-        profile = self.getInstallProfile(pid)
-        if profile is None:
-            # No GS profile, simple case as before, we can always upgrade
-            return dict(
-                required=product_version != installed_product_version,
-                available=True,
-                hasProfile=False,
-                installedVersion=installed_product_version,
-                newVersion=product_version,
-            )
-        profile_id = profile['id']
-        setup = getToolByName(self, 'portal_setup')
-        profile_version = str(setup.getVersionForProfile(profile_id))
-        if profile_version == 'latest':
-            profile_version = self.getLatestUpgradeStep(profile_id)
-        if profile_version == 'unknown':
-            # If a profile doesn't have a metadata.xml use product version
-            profile_version = product_version
-        installed_profile_version = setup.getLastVersionForProfile(profile_id)
-        # getLastVersionForProfile returns the version as a tuple or unknown.
-        if installed_profile_version != 'unknown':
-            installed_profile_version = str(
-                '.'.join(installed_profile_version))
-        return dict(
-            required=profile_version != installed_profile_version,
-            available=len(setup.listUpgrades(profile_id)) > 0,
-            hasProfile=True,
-            installedVersion=installed_profile_version,
-            newVersion=profile_version,
-        )
+        Remove this file in Plone 7.
+        """
+        pass
+else:
+    from Products.CMFQuickInstallerTool.QuickInstallerTool \
+        import QuickInstallerTool as BaseTool
 
-    security.declareProtected(ManagePortal, 'getLatestUpgradeStep')
-
-    def getLatestUpgradeStep(self, profile_id):
-        '''
-        Get the highest ordered upgrade step available to
-        a specific profile.
-
-        If anything errors out then go back to "old way"
-        by returning 'unknown'
-        '''
-        setup = getToolByName(self, 'portal_setup')
-        profile_version = 'unknown'
-        try:
-            available = setup.listUpgrades(profile_id, True)
-            if available:  # could return empty sequence
-                latest = available[-1]
-                profile_version = max(latest['dest'],
-                                      key=pkg_resources.parse_version)
-        except Exception:
-            pass
-
-        return profile_version
-
-    security.declareProtected(ManagePortal, 'upgradeProduct')
-
-    def upgradeProduct(self, pid):
-        profile = self.getInstallProfile(pid)
-        if profile is None:
-            # No upgrade profiles
-            return self.reinstallProducts(products=[pid])
-        profile_id = profile['id']
-        setup = getToolByName(self, 'portal_setup')
-        upgrades = setup.listUpgrades(profile_id)
-        for upgrade in upgrades:
-            # An upgrade may be a single step (for a bare upgradeStep)
-            # or a list of steps (for upgradeSteps containing upgradeStep
-            # directives).
-            if not type(upgrade) is list:
-                upgrade = [upgrade]
-            for upgradestep in upgrade:
-                step = upgradestep['step']
-                step.doStep(setup)
-        version = str(profile['version'])
-        if version == 'latest':
-            version = self.getLatestUpgradeStep(profile_id)
-        setup.setLastVersionForProfile(profile_id, version)
-
-
-QuickInstallerTool.__doc__ = BaseTool.__doc__
-
-InitializeClass(QuickInstallerTool)
-registerToolInterface('portal_quickinstaller', IQuickInstallerTool)
+    class QuickInstallerTool(PloneBaseTool, BaseTool):
+        pass
+    QuickInstallerTool.__doc__ = BaseTool.__doc__
diff --git a/Products/CMFPlone/tests/testQuickInstallerTool.py b/Products/CMFPlone/tests/testQuickInstallerTool.py
deleted file mode 100644
index 31bf71b34..000000000
--- a/Products/CMFPlone/tests/testQuickInstallerTool.py
+++ /dev/null
@@ -1,60 +0,0 @@
-# -*- coding: utf-8 -*-
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone import tests
-from zope.configuration import xmlconfig
-
-
-class TestQuickInstallerTool(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-
-    def _installed(self):
-        return [p['id'] for p in self.qi.listInstalledProducts()]
-
-    def _available(self):
-        return [p['id'] for p in self.qi.listInstallableProducts()]
-
-    def testInstallUninstallProduct(self):
-        try:
-            import Products.CMFPlacefulWorkflow
-            Products.CMFPlacefulWorkflow  # pyflakes
-        except ImportError:
-            return
-        # CMFPlacefulWorkflow should be uninstalled, we install it and
-        # it should not show up as installable
-        self.setRoles(('Manager',))
-        self.qi.installProducts(['CMFPlacefulWorkflow', ])
-        self.assertTrue('CMFPlacefulWorkflow' in self._installed())
-        self.assertFalse('CMFPlacefulWorkflow' in self._available())
-        self.qi.uninstallProducts(['CMFPlacefulWorkflow', ])
-        self.assertTrue('CMFPlacefulWorkflow' in self._available())
-        self.assertFalse('CMFPlacefulWorkflow' in self._installed())
-
-    def testUpgradeProfilesNotShown(self):
-        self.assertFalse('plone.app.upgrade.v30' in self._available())
-
-    def testLatestUpgradeProfiles(self):
-        xmlconfig.file(
-            'test_upgrades1.zcml',
-            package=tests,
-            context=self.layer['configurationContext']
-        )
-        latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
-        self.assertTrue(latest == '3')
-
-    def testLatestUpgradeProfiles2(self):
-        # make sure strings don't break things
-        # note that pkg_resources interprets 1 as
-        # ''00000001', which is > 'banana'
-        xmlconfig.file(
-            'test_upgrades2.zcml',
-            package=tests,
-            context=self.layer['configurationContext']
-        )
-        latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
-        self.assertTrue(latest == '3')
-
-
-def dummy_handler():
-    pass
diff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py
index a80ab01b3..b754ad725 100644
--- a/Products/CMFPlone/tests/test_zmi.py
+++ b/Products/CMFPlone/tests/test_zmi.py
@@ -146,11 +146,6 @@ def test_portal_purgepolicy(self):
         view = self.portal.restrictedTraverse(url)
         self.assertTrue(view(), msg='{0} is broken'.format(url))
 
-    def test_portal_quickinstaller(self):
-        url = 'portal_quickinstaller/manage_installProductsForm'
-        view = self.portal.restrictedTraverse(url)
-        self.assertTrue(view(), msg='{0} is broken'.format(url))
-
     def test_portal_referencefactories(self):
         url = 'portal_referencefactories/manage_main'
         view = self.portal.restrictedTraverse(url)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-02-21T11:03:41+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/01945eeedd6a0923444660c1eb2db73e17ed60b6

Merge pull request #2304 from plone/remove-qi-additions-and-tests-master

Removed extra methods and tests for CMFQuickInstallerTool.

Files changed:
M CHANGES.rst
M Products/CMFPlone/QuickInstallerTool.py
M Products/CMFPlone/tests/test_zmi.py
D Products/CMFPlone/tests/testQuickInstallerTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6fb39e15b..b65d52eca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -38,6 +38,10 @@ New Features:
 
 Bug Fixes:
 
+- Removed extra methods and tests for CMFQuickInstallerTool.
+  Moved those to the Products.CMFQuickInstallerTool package.
+  [maurits]
+
 - Added tests for add-ons control panel.
   Add a link to the Site Setup.
   Let ``get_product_version`` work when you call it with ``CMFPlacefulWorkflow`` too.
diff --git a/Products/CMFPlone/QuickInstallerTool.py b/Products/CMFPlone/QuickInstallerTool.py
index fcf69b12c..aee3a8039 100644
--- a/Products/CMFPlone/QuickInstallerTool.py
+++ b/Products/CMFPlone/QuickInstallerTool.py
@@ -1,114 +1,28 @@
 # -*- coding: utf-8 -*-
-from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
-from Products.CMFCore.permissions import ManagePortal
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.utils import registerToolInterface
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-from Products.CMFQuickInstallerTool.QuickInstallerTool \
-    import QuickInstallerTool as BaseTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
 import pkg_resources
 
 
-class QuickInstallerTool(PloneBaseTool, BaseTool):
-    """ A tool to ease installing/uninstalling all sorts of products """
+# *IF* the base tool is still there, it seems nice to inherit from it.
+try:
+    pkg_resources.get_distribution('Products.CMFQuickInstallerTool')
+except pkg_resources.DistributionNotFound:
+    class QuickInstallerTool(PloneBaseTool):
+        """ A tool to ease installing/uninstalling all sorts of products
 
-    meta_type = 'Plone QuickInstaller Tool'
-    security = ClassSecurityInfo()
-    toolicon = 'skins/plone_images/product_icon.png'
+        In Plone 5.2 the extra methods were moved to
+        Products.CMFQuickInstallerTool.
 
-    security.declareProtected(ManagePortal, 'upgradeInfo')
+        This tool is no longer used in Plone 6, but we will
+        keep the class so we can cleanly uninstall and remove this.
 
-    def upgradeInfo(self, pid):
-        # Returns a dict with two booleans values, stating if an upgrade
-        # required and available.
-        available = self.isProductAvailable(pid)
-        if not available:
-            return False
-        # Product version as per version.txt or fallback on metadata file
-        product_version = str(self.getProductVersion(pid))
-        installed_product_version = self._getOb(pid).getInstalledVersion()
-        profile = self.getInstallProfile(pid)
-        if profile is None:
-            # No GS profile, simple case as before, we can always upgrade
-            return dict(
-                required=product_version != installed_product_version,
-                available=True,
-                hasProfile=False,
-                installedVersion=installed_product_version,
-                newVersion=product_version,
-            )
-        profile_id = profile['id']
-        setup = getToolByName(self, 'portal_setup')
-        profile_version = str(setup.getVersionForProfile(profile_id))
-        if profile_version == 'latest':
-            profile_version = self.getLatestUpgradeStep(profile_id)
-        if profile_version == 'unknown':
-            # If a profile doesn't have a metadata.xml use product version
-            profile_version = product_version
-        installed_profile_version = setup.getLastVersionForProfile(profile_id)
-        # getLastVersionForProfile returns the version as a tuple or unknown.
-        if installed_profile_version != 'unknown':
-            installed_profile_version = str(
-                '.'.join(installed_profile_version))
-        return dict(
-            required=profile_version != installed_profile_version,
-            available=len(setup.listUpgrades(profile_id)) > 0,
-            hasProfile=True,
-            installedVersion=installed_profile_version,
-            newVersion=profile_version,
-        )
+        Remove this file in Plone 7.
+        """
+        pass
+else:
+    from Products.CMFQuickInstallerTool.QuickInstallerTool \
+        import QuickInstallerTool as BaseTool
 
-    security.declareProtected(ManagePortal, 'getLatestUpgradeStep')
-
-    def getLatestUpgradeStep(self, profile_id):
-        '''
-        Get the highest ordered upgrade step available to
-        a specific profile.
-
-        If anything errors out then go back to "old way"
-        by returning 'unknown'
-        '''
-        setup = getToolByName(self, 'portal_setup')
-        profile_version = 'unknown'
-        try:
-            available = setup.listUpgrades(profile_id, True)
-            if available:  # could return empty sequence
-                latest = available[-1]
-                profile_version = max(latest['dest'],
-                                      key=pkg_resources.parse_version)
-        except Exception:
-            pass
-
-        return profile_version
-
-    security.declareProtected(ManagePortal, 'upgradeProduct')
-
-    def upgradeProduct(self, pid):
-        profile = self.getInstallProfile(pid)
-        if profile is None:
-            # No upgrade profiles
-            return self.reinstallProducts(products=[pid])
-        profile_id = profile['id']
-        setup = getToolByName(self, 'portal_setup')
-        upgrades = setup.listUpgrades(profile_id)
-        for upgrade in upgrades:
-            # An upgrade may be a single step (for a bare upgradeStep)
-            # or a list of steps (for upgradeSteps containing upgradeStep
-            # directives).
-            if not type(upgrade) is list:
-                upgrade = [upgrade]
-            for upgradestep in upgrade:
-                step = upgradestep['step']
-                step.doStep(setup)
-        version = str(profile['version'])
-        if version == 'latest':
-            version = self.getLatestUpgradeStep(profile_id)
-        setup.setLastVersionForProfile(profile_id, version)
-
-
-QuickInstallerTool.__doc__ = BaseTool.__doc__
-
-InitializeClass(QuickInstallerTool)
-registerToolInterface('portal_quickinstaller', IQuickInstallerTool)
+    class QuickInstallerTool(PloneBaseTool, BaseTool):
+        pass
+    QuickInstallerTool.__doc__ = BaseTool.__doc__
diff --git a/Products/CMFPlone/tests/testQuickInstallerTool.py b/Products/CMFPlone/tests/testQuickInstallerTool.py
deleted file mode 100644
index 31bf71b34..000000000
--- a/Products/CMFPlone/tests/testQuickInstallerTool.py
+++ /dev/null
@@ -1,60 +0,0 @@
-# -*- coding: utf-8 -*-
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone import tests
-from zope.configuration import xmlconfig
-
-
-class TestQuickInstallerTool(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-
-    def _installed(self):
-        return [p['id'] for p in self.qi.listInstalledProducts()]
-
-    def _available(self):
-        return [p['id'] for p in self.qi.listInstallableProducts()]
-
-    def testInstallUninstallProduct(self):
-        try:
-            import Products.CMFPlacefulWorkflow
-            Products.CMFPlacefulWorkflow  # pyflakes
-        except ImportError:
-            return
-        # CMFPlacefulWorkflow should be uninstalled, we install it and
-        # it should not show up as installable
-        self.setRoles(('Manager',))
-        self.qi.installProducts(['CMFPlacefulWorkflow', ])
-        self.assertTrue('CMFPlacefulWorkflow' in self._installed())
-        self.assertFalse('CMFPlacefulWorkflow' in self._available())
-        self.qi.uninstallProducts(['CMFPlacefulWorkflow', ])
-        self.assertTrue('CMFPlacefulWorkflow' in self._available())
-        self.assertFalse('CMFPlacefulWorkflow' in self._installed())
-
-    def testUpgradeProfilesNotShown(self):
-        self.assertFalse('plone.app.upgrade.v30' in self._available())
-
-    def testLatestUpgradeProfiles(self):
-        xmlconfig.file(
-            'test_upgrades1.zcml',
-            package=tests,
-            context=self.layer['configurationContext']
-        )
-        latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
-        self.assertTrue(latest == '3')
-
-    def testLatestUpgradeProfiles2(self):
-        # make sure strings don't break things
-        # note that pkg_resources interprets 1 as
-        # ''00000001', which is > 'banana'
-        xmlconfig.file(
-            'test_upgrades2.zcml',
-            package=tests,
-            context=self.layer['configurationContext']
-        )
-        latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
-        self.assertTrue(latest == '3')
-
-
-def dummy_handler():
-    pass
diff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py
index a80ab01b3..b754ad725 100644
--- a/Products/CMFPlone/tests/test_zmi.py
+++ b/Products/CMFPlone/tests/test_zmi.py
@@ -146,11 +146,6 @@ def test_portal_purgepolicy(self):
         view = self.portal.restrictedTraverse(url)
         self.assertTrue(view(), msg='{0} is broken'.format(url))
 
-    def test_portal_quickinstaller(self):
-        url = 'portal_quickinstaller/manage_installProductsForm'
-        view = self.portal.restrictedTraverse(url)
-        self.assertTrue(view(), msg='{0} is broken'.format(url))
-
     def test_portal_referencefactories(self):
         url = 'portal_referencefactories/manage_main'
         view = self.portal.restrictedTraverse(url)


