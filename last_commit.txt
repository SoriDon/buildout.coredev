Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2021-01-30T13:58:23-08:00
Author: Alec Mitchell (alecpm) <alecpm@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/aac89c6642739a72b4919c8dfa2a68e99a4197e0

Register converters to allow Select widgets to be used for RelationChoice and RelationList.

Files changed:
M plone/app/z3cform/configure.zcml

b'diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 7e2d547..ed6cbdc 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -174,7 +174,11 @@\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\n   <adapter factory=".converters.QueryStringDataConverter" />\n   <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n+  <adapter factory=".converters.RelatedItemsDataConverter"\n+           for="z3c.relationfield.interfaces.IRelationList .interfaces.ISelectWidget"/>\n   <adapter factory=".converters.RelatedItemsDataConverter" />\n+  <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter"\n+           for="z3c.relationfield.interfaces.IRelationChoice .interfaces.ISelectWidget"/>\n   <adapter factory=".converters.LinkWidgetDataConverter" />\n \n   <!-- widget registration stuff -->\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2021-01-30T17:58:38-08:00
Author: Alec Mitchell (alecpm) <alecpm@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/73f28f9b84fd794493f765d9956b70b83eba2d6e

Register additional Relation data converters for use with Select, AJAXSelect, and CheckBox widgets, among others. Add support for non-named vocabularies to AJAXSelectWidget.

Files changed:
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex ed6cbdc..f101325 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -174,11 +174,13 @@\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\n   <adapter factory=".converters.QueryStringDataConverter" />\n   <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n-  <adapter factory=".converters.RelatedItemsDataConverter"\n-           for="z3c.relationfield.interfaces.IRelationList .interfaces.ISelectWidget"/>\n-  <adapter factory=".converters.RelatedItemsDataConverter" />\n   <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter"\n-           for="z3c.relationfield.interfaces.IRelationChoice .interfaces.ISelectWidget"/>\n+           for="z3c.relationfield.interfaces.IRelationChoice .interfaces.ITextWidget" />\n+  <adapter factory=".converters.RelationChoiceSelectWidgetConverter" />\n+  <adapter factory=".converters.RelatedItemsDataConverter" />\n+  <adapter factory=".converters.RelatedItemsDataConverter"\n+           for="z3c.relationfield.interfaces.IRelationList .interfaces.ITextWidget" />\n+  <adapter factory=".converters.RelationListSelectWidgetDataConverter" />\n   <adapter factory=".converters.LinkWidgetDataConverter" />\n \n   <!-- widget registration stuff -->\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex c74a93e..10f7765 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -17,7 +17,8 @@\n from z3c.form.converter import BaseDataConverter\n from z3c.form.converter import CollectionSequenceDataConverter\n from z3c.form.converter import SequenceDataConverter\n-from z3c.relationfield.interfaces import IRelationChoice\n+from z3c.form.interfaces import ISequenceWidget\n+from z3c.relationfield.interfaces import IRelation\n from z3c.relationfield.interfaces import IRelationList\n from zope.component import adapter\n from zope.component.hooks import getSite\n@@ -224,7 +225,7 @@ def toFieldValue(self, value):\n         return collectionType(untokenized_value)\n \n \n-@adapter(IRelationChoice, IRelatedItemsWidget)\n+@adapter(IRelation, IRelatedItemsWidget)\n class RelationChoiceRelatedItemsWidgetConverter(BaseDataConverter):\n     """Data converter for RelationChoice fields using the RelatedItemsWidget.\n     """\n@@ -249,6 +250,19 @@ def toFieldValue(self, value):\n             return self.field.missing_value\n \n \n+@adapter(IRelation, ISequenceWidget)\n+class RelationChoiceSelectWidgetConverter(RelationChoiceRelatedItemsWidgetConverter):\n+    """Data converter for RelationChoice fields using with SequenceWidgets,\n+    which expect sequence values.\n+    """\n+\n+    def toWidgetValue(self, value):\n+        if not value:\n+            missing = self.field.missing_value\n+            return [] if missing is None else missing\n+        return [IUUID(value)]\n+\n+\n @adapter(ICollection, IRelatedItemsWidget)\n class RelatedItemsDataConverter(BaseDataConverter):\n     """Data converter for ICollection fields using the RelatedItemsWidget."""\n@@ -287,7 +301,9 @@ def toFieldValue(self, value):\n             collectionType = collectionType[-1]\n \n         separator = getattr(self.widget, \'separator\', \';\')\n-        value = value.split(separator)\n+        # Some widgets (like checkbox) return lists\n+        if isinstance(value, six.string_types):\n+            value = value.split(separator)\n \n         if IRelationList.providedBy(self.field):\n             try:\n@@ -311,6 +327,30 @@ def toFieldValue(self, value):\n             return collectionType(valueType(v) for v in value)\n \n \n+@adapter(IRelationList, ISequenceWidget)\n+class RelationListSelectWidgetDataConverter(RelatedItemsDataConverter):\n+    """Data converter for RelationChoice fields using with SequenceWidgets,\n+    which expect sequence values.\n+    """\n+\n+    def toWidgetValue(self, value):\n+        """Converts from field value to widget.\n+\n+        :param value: List of catalog brains.\n+        :type value: list\n+\n+        :returns: List of of UID.\n+        :rtype: list\n+        """\n+        if not value:\n+            missing = self.field.missing_value\n+            return [] if missing is None else missing\n+        if IRelationList.providedBy(self.field):\n+            return [IUUID(o) for o in value if o]\n+        else:\n+            return [v for v in value if v]\n+\n+\n @adapter(IList, IQueryStringWidget)\n class QueryStringDataConverter(BaseDataConverter):\n     """Data converter for IList."""\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 18d1bdd..97b7efe 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -391,13 +391,14 @@ def _view_context(self):\n         return view_context\n \n     def get_vocabulary(self):\n-        if self.vocabulary:\n+        if self.vocabulary and isinstance(self.vocabulary, six.text_type):\n             factory = queryUtility(\n                 IVocabularyFactory,\n                 self.vocabulary,\n             )\n             if factory:\n                 return factory(self._view_context())\n+        return self.vocabulary\n \n     def display_items(self):\n         if self.value:\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2021-02-28T20:05:19-08:00
Author: Alec Mitchell (alecpm) <alecpm@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/055daf9680fc3652249db2d41022bb0aad2d51aa

Add changelog entry.

Files changed:
A news/125.feature

b'diff --git a/news/125.feature b/news/125.feature\nnew file mode 100644\nindex 0000000..3e6515c\n--- /dev/null\n+++ b/news/125.feature\n@@ -0,0 +1 @@\n+Add support for more widget options when working with relation fields.\n\\ No newline at end of file\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2021-08-12T07:53:42+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.z3cform/commit/62080da5439cc391797ce79d31e72731a501c152

Merge pull request #125 from plone/vocabulary-relations

Add support for more widgets when working with relationfieds

Files changed:
A news/125.feature
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/widget.py

b'diff --git a/news/125.feature b/news/125.feature\nnew file mode 100644\nindex 0000000..3e6515c\n--- /dev/null\n+++ b/news/125.feature\n@@ -0,0 +1 @@\n+Add support for more widget options when working with relation fields.\n\\ No newline at end of file\ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex cdd0914..cb089e5 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -84,7 +84,13 @@\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\n   <adapter factory=".converters.QueryStringDataConverter" />\n   <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n+  <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter"\n+           for="z3c.relationfield.interfaces.IRelationChoice .interfaces.ITextWidget" />\n+  <adapter factory=".converters.RelationChoiceSelectWidgetConverter" />\n   <adapter factory=".converters.RelatedItemsDataConverter" />\n+  <adapter factory=".converters.RelatedItemsDataConverter"\n+           for="z3c.relationfield.interfaces.IRelationList .interfaces.ITextWidget" />\n+  <adapter factory=".converters.RelationListSelectWidgetDataConverter" />\n   <adapter factory=".converters.LinkWidgetDataConverter" />\n \n   <!-- widgets -->\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 6c52101..fae8cb7 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -17,7 +17,8 @@\n from z3c.form.converter import BaseDataConverter\n from z3c.form.converter import CollectionSequenceDataConverter\n from z3c.form.converter import SequenceDataConverter\n-from z3c.relationfield.interfaces import IRelationChoice\n+from z3c.form.interfaces import ISequenceWidget\n+from z3c.relationfield.interfaces import IRelation\n from z3c.relationfield.interfaces import IRelationList\n from zope.component import adapter\n from zope.component.hooks import getSite\n@@ -224,7 +225,7 @@ def toFieldValue(self, value):\n         return collectionType(untokenized_value)\n \n \n-@adapter(IRelationChoice, IRelatedItemsWidget)\n+@adapter(IRelation, IRelatedItemsWidget)\n class RelationChoiceRelatedItemsWidgetConverter(BaseDataConverter):\n     """Data converter for RelationChoice fields using the RelatedItemsWidget.\n     """\n@@ -249,6 +250,19 @@ def toFieldValue(self, value):\n             return self.field.missing_value\n \n \n+@adapter(IRelation, ISequenceWidget)\n+class RelationChoiceSelectWidgetConverter(RelationChoiceRelatedItemsWidgetConverter):\n+    """Data converter for RelationChoice fields using with SequenceWidgets,\n+    which expect sequence values.\n+    """\n+\n+    def toWidgetValue(self, value):\n+        if not value:\n+            missing = self.field.missing_value\n+            return [] if missing is None else missing\n+        return [IUUID(value)]\n+\n+\n @adapter(ICollection, IRelatedItemsWidget)\n class RelatedItemsDataConverter(BaseDataConverter):\n     """Data converter for ICollection fields using the RelatedItemsWidget."""\n@@ -287,7 +301,9 @@ def toFieldValue(self, value):\n             collectionType = collectionType[-1]\n \n         separator = getattr(self.widget, \'separator\', \';\')\n-        value = value.split(separator)\n+        # Some widgets (like checkbox) return lists\n+        if isinstance(value, six.string_types):\n+            value = value.split(separator)\n \n         if IRelationList.providedBy(self.field):\n             try:\n@@ -311,6 +327,30 @@ def toFieldValue(self, value):\n             return collectionType(valueType(v) for v in value)\n \n \n+@adapter(IRelationList, ISequenceWidget)\n+class RelationListSelectWidgetDataConverter(RelatedItemsDataConverter):\n+    """Data converter for RelationChoice fields using with SequenceWidgets,\n+    which expect sequence values.\n+    """\n+\n+    def toWidgetValue(self, value):\n+        """Converts from field value to widget.\n+\n+        :param value: List of catalog brains.\n+        :type value: list\n+\n+        :returns: List of of UID.\n+        :rtype: list\n+        """\n+        if not value:\n+            missing = self.field.missing_value\n+            return [] if missing is None else missing\n+        if IRelationList.providedBy(self.field):\n+            return [IUUID(o) for o in value if o]\n+        else:\n+            return [v for v in value if v]\n+\n+\n @adapter(IList, IQueryStringWidget)\n class QueryStringDataConverter(BaseDataConverter):\n     """Data converter for IList."""\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex b15fd2e..26384c7 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -391,13 +391,14 @@ def _view_context(self):\n         return view_context\n \n     def get_vocabulary(self):\n-        if self.vocabulary:\n+        if self.vocabulary and isinstance(self.vocabulary, six.text_type):\n             factory = queryUtility(\n                 IVocabularyFactory,\n                 self.vocabulary,\n             )\n             if factory:\n                 return factory(self._view_context())\n+        return self.vocabulary\n \n     def display_items(self):\n         if self.value:\n'

