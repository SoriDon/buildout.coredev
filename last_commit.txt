Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2022-07-11T08:07:33+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.querystring/commit/c8bc778942104cf42aba6c57ac997c09f8167683

Revert "Fixes #111 for master and make it Plone 6 only"

Files changed:
M plone/app/querystring/querybuilder.py
M plone/app/querystring/tests/testQueryBuilder.py
M setup.py
D news/111.bugfix

b'diff --git a/news/111.bugfix b/news/111.bugfix\ndeleted file mode 100644\nindex a1a3949..0000000\n--- a/news/111.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Use function from Products.CMFPlone to handle cleaning of search terms. Fixes #111\n-[erral]\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 60e0309..8cd3c39 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -12,15 +12,24 @@\n from zope.i18n import translate\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n-from Products.CMFPlone.browser.search import munge_search_term\n \n import json\n import logging\n \n \n-logger = logging.getLogger("plone.app.querystring")\n-_ = MessageFactory("plone")\n+logger = logging.getLogger(\'plone.app.querystring\')\n+_ = MessageFactory(\'plone\')\n \n+BAD_CHARS = (\'?\', \'-\', \'+\', \'*\')\n+\n+\n+def quote_chars(s):\n+    # We need to quote parentheses when searching text indices\n+    if \'(\' in s:\n+        s = s.replace(\'(\', \'"("\')\n+    if \')\' in s:\n+        s = s.replace(\')\', \'")"\')\n+    return s\n \n class ContentListingView(BrowserView):\n     """BrowserView for displaying query results"""\n@@ -30,25 +39,16 @@ def __call__(self, **kw):\n \n \n class QueryBuilder(BrowserView):\n-    """This view is used by the javascripts,\n-    fetching configuration or results"""\n+    """ This view is used by the javascripts,\n+        fetching configuration or results"""\n \n     def __init__(self, context, request):\n         super(QueryBuilder, self).__init__(context, request)\n         self._results = None\n \n-    def __call__(\n-        self,\n-        query,\n-        batch=False,\n-        b_start=0,\n-        b_size=30,\n-        sort_on=None,\n-        sort_order=None,\n-        limit=0,\n-        brains=False,\n-        custom_query=None,\n-    ):\n+    def __call__(self, query, batch=False, b_start=0, b_size=30,\n+                 sort_on=None, sort_order=None, limit=0, brains=False,\n+                 custom_query=None):\n         """Create a zope catalog query and return results.\n \n         :param query: The querystring to be parsed into a zope catalog query.\n@@ -95,45 +95,32 @@ def __call__(\n                 sort_order=sort_order,\n                 limit=limit,\n                 brains=brains,\n-                custom_query=custom_query,\n-            )\n+                custom_query=custom_query)\n         return self._results\n \n     def html_results(self, query):\n         """html results, used for in the edit screen of a collection,\n-        used in the live update results"""\n+           used in the live update results"""\n         options = dict(original_context=self.context)\n-        results = self(\n-            query,\n-            sort_on=self.request.get("sort_on", None),\n-            sort_order=self.request.get("sort_order", None),\n-            limit=10,\n-        )\n+        results = self(query, sort_on=self.request.get(\'sort_on\', None),\n+                       sort_order=self.request.get(\'sort_order\', None),\n+                       limit=10)\n \n         return getMultiAdapter(\n-            (results, self.request), name="display_query_results"\n+            (results, self.request),\n+            name=\'display_query_results\'\n         )(**options)\n \n-    def _makequery(\n-        self,\n-        query=None,\n-        batch=False,\n-        b_start=0,\n-        b_size=30,\n-        sort_on=None,\n-        sort_order=None,\n-        limit=0,\n-        brains=False,\n-        custom_query=None,\n-    ):\n+    def _makequery(self, query=None, batch=False, b_start=0, b_size=30,\n+                   sort_on=None, sort_order=None, limit=0, brains=False,\n+                   custom_query=None):\n         """Parse the (form)query and return using multi-adapter"""\n         query_modifiers = getUtilitiesFor(IQueryModifier)\n         for name, modifier in sorted(query_modifiers, key=itemgetter(0)):\n             query = modifier(query)\n \n         parsedquery = queryparser.parseFormquery(\n-            self.context, query, sort_on, sort_order\n-        )\n+            self.context, query, sort_on, sort_order)\n \n         index_modifiers = getUtilitiesFor(IParsedQueryIndexModifier)\n         for name, modifier in index_modifiers:\n@@ -147,37 +134,36 @@ def _makequery(\n                     parsedquery[new_name] = query\n \n         # Check for valid indexes\n-        catalog = getToolByName(self.context, "portal_catalog")\n-        valid_indexes = [\n-            index for index in parsedquery if index in catalog.indexes()\n-        ]\n+        catalog = getToolByName(self.context, \'portal_catalog\')\n+        valid_indexes = [index for index in parsedquery\n+                         if index in catalog.indexes()]\n \n         # We\'ll ignore any invalid index, but will return an empty set if none\n         # of the indexes are valid.\n         if not valid_indexes:\n             logger.warning(\n-                "Using empty query because there are no valid indexes used."\n-            )\n+                "Using empty query because there are no valid indexes used.")\n             parsedquery = {}\n \n         empty_query = not parsedquery  # store emptiness\n \n         if batch:\n-            parsedquery["b_start"] = b_start\n-            parsedquery["b_size"] = b_size\n+            parsedquery[\'b_start\'] = b_start\n+            parsedquery[\'b_size\'] = b_size\n         elif limit:\n-            parsedquery["sort_limit"] = limit\n+            parsedquery[\'sort_limit\'] = limit\n \n-        if "path" not in parsedquery:\n-            parsedquery["path"] = {"query": ""}\n+        if \'path\' not in parsedquery:\n+            parsedquery[\'path\'] = {\'query\': \'\'}\n \n         if isinstance(custom_query, dict) and custom_query:\n             # Update the parsed query with an extra query dictionary. This may\n             # override the parsed query. The custom_query is a dictonary of\n             # index names and their associated query values.\n             for key in custom_query:\n-                if isinstance(parsedquery.get(key), dict) and isinstance(\n-                    custom_query.get(key), dict\n+                if (\n+                    isinstance(parsedquery.get(key), dict)\n+                    and isinstance(custom_query.get(key), dict)\n                 ):\n                     parsedquery[key].update(custom_query[key])\n                     continue\n@@ -189,11 +175,8 @@ def _makequery(\n         results = []\n         if not empty_query:\n             results = catalog(**parsedquery)\n-            if (\n-                getattr(results, "actual_result_count", False)\n-                and limit\n-                and results.actual_result_count > limit\n-            ):\n+            if getattr(results, \'actual_result_count\', False) and limit\\\n+                    and results.actual_result_count > limit:\n                 results.actual_result_count = limit\n \n         if not brains:\n@@ -206,28 +189,33 @@ def number_of_results(self, query):\n         """Get the number of results"""\n         results = self(query, sort_on=None, sort_order=None, limit=1)\n         return translate(\n-            _(\n-                u"batch_x_items_matching_your_criteria",\n-                default=u"${number} items matching your search terms.",\n-                mapping={"number": results.actual_result_count},\n-            ),\n-            context=self.request,\n+            _(u"batch_x_items_matching_your_criteria",\n+              default=u"${number} items matching your search terms.",\n+              mapping={\'number\': results.actual_result_count}),\n+            context=self.request\n         )\n \n     def filter_query(self, query):\n-        text = query.get("SearchableText", None)\n+        text = query.get(\'SearchableText\', None)\n         if isinstance(text, dict):\n-            text = text.get("query", "")\n+            text = text.get(\'query\', \'\')\n         if text:\n-            query["SearchableText"] = munge_search_term(text)\n+            query[\'SearchableText\'] = self.munge_search_term(text)\n         return query\n \n+    def munge_search_term(self, q):\n+        for char in BAD_CHARS:\n+            q = q.replace(char, \' \')\n+        r = q.split()\n+        r = " AND ".join(r)\n+        r = quote_chars(r) + \'*\'\n+        return r\n+\n \n class RegistryConfiguration(BrowserView):\n     def __call__(self):\n         registry = getUtility(IRegistry)\n         reader = getMultiAdapter(\n-            (registry, self.request), IQuerystringRegistryReader\n-        )\n+            (registry, self.request), IQuerystringRegistryReader)\n         data = reader()\n         return json.dumps(data)\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex e0003f9..a112304 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -1,8 +1,7 @@\n # -*- coding: utf-8 -*-\n \n-from plone.app.querystring.testing import (\n-    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n-)\n+from plone.app.querystring.testing import \\\n+    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n from zope.component import getMultiAdapter\n from zope.publisher.browser import TestRequest\n@@ -15,26 +14,27 @@ class TestQuerybuilder(unittest.TestCase):\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer["portal"]\n+        self.portal = self.layer[\'portal\']\n \n-        self.portal.invokeFactory(\n-            "Document", "collectionstestpage", title="Collectionstestpage"\n-        )\n-        testpage = self.portal["collectionstestpage"]\n+        self.portal.invokeFactory("Document",\n+                                  "collectionstestpage",\n+                                  title="Collectionstestpage")\n+        testpage = self.portal[\'collectionstestpage\']\n         self.testpage = testpage\n-        self.portal.portal_workflow.doActionFor(testpage, "publish")\n+        self.portal.portal_workflow.doActionFor(testpage, \'publish\')\n         self.request = TestRequest()\n         self.querybuilder = getMultiAdapter(\n-            (self.portal, self.request), name="querybuilderresults"\n+            (self.portal, self.request),\n+            name=\'querybuilderresults\'\n         )\n-        self.query = [\n-            {\n-                "i": "Title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "Collectionstestpage",\n-            }\n-        ]\n-        self.portal.invokeFactory("Folder", "testfolder", title="Test Folder")\n+        self.query = [{\n+            \'i\': \'Title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'Collectionstestpage\',\n+        }]\n+        self.portal.invokeFactory("Folder",\n+                                  "testfolder",\n+                                  title="Test Folder")\n         self.folder = self.portal.testfolder\n \n     def testQueryBuilderQuery(self):\n@@ -43,308 +43,250 @@ def testQueryBuilderQuery(self):\n \n     def testQueryBuilderHTML(self):\n         results = self.querybuilder.html_results(self.query)\n-        self.assertTrue("Collectionstestpage" in results)\n+        self.assertTrue(\'Collectionstestpage\' in results)\n \n     def testGettingConfiguration(self):\n-        res = self.folder.restrictedTraverse("@@querybuildernumberofresults")\n+        res = self.folder.restrictedTraverse(\'@@querybuildernumberofresults\')\n         res(self.query)\n \n     def testQueryBuilderNumberOfResults(self):\n         results = self.querybuilder.number_of_results(self.query)\n-        numeric = int(results.split(" ")[0])\n+        numeric = int(results.split(\' \')[0])\n         self.assertEqual(numeric, 1)\n \n     def testQueryBuilderNumberOfResultsView(self):\n-        res = self.folder.restrictedTraverse("@@querybuildernumberofresults")\n+        res = self.folder.restrictedTraverse(\'@@querybuildernumberofresults\')\n         length_of_results = res.browserDefault(None)[0](self.query)\n         # apparently brower travelsal is different from the traversal we get\n         # from restrictedTraverse. This did hurt a bit.\n-        numeric = int(length_of_results.split(" ")[0])\n+        numeric = int(length_of_results.split(\' \')[0])\n         self.assertEqual(numeric, 1)\n \n     def testMakeQuery(self):\n         results = self.querybuilder._makequery(query=self.query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n \n     def testQueryStringIs(self):\n-        query = [\n-            {\n-                "i": "sortable_title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "collectionstestpage",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'sortable_title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'collectionstestpage\',\n+        }]\n \n         # Test normal, without custom_query.\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n \n     def testQueryStringIsNot(self):\n-        query = [\n-            {\n-                "i": "portal_type",\n-                "o": "plone.app.querystring.operation.selection.none",\n-                "v": "Plone Site",\n-            },\n-            {\n-                "i": "sortable_title",\n-                "o": "plone.app.querystring.operation.string.isNot",\n-                "v": "collectionstestpage",\n-            },\n-        ]\n+        query = [{\n+            \'i\': \'portal_type\',\n+            \'o\': \'plone.app.querystring.operation.selection.none\',\n+            \'v\': \'Plone Site\',\n+        }, {\n+            \'i\': \'sortable_title\',\n+            \'o\': \'plone.app.querystring.operation.string.isNot\',\n+            \'v\': \'collectionstestpage\',\n+        }]\n \n         # Test normal, without custom_query.\n         results = self.querybuilder._makequery(query=query)\n         print([it.Title() for it in results])\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Test Folder")\n+        self.assertEqual(results[0].Title(), \'Test Folder\')\n \n     def testMakeQueryWithSubject(self):\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": "Lorem",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': \'Lorem\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n \n     def testMakeQueryWithSubjectNot(self):\n-        self.folder.setSubject(["Ipsum"])\n+        self.folder.setSubject([\'Ipsum\'])\n         self.folder.reindexObject()\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.none",\n-                "v": "Lorem",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.none\',\n+            \'v\': \'Lorem\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].getURL(), "http://nohost/plone/testfolder")\n+        self.assertEqual(\n+            results[0].getURL(),\n+            \'http://nohost/plone/testfolder\')\n \n     def testMakeQueryWithMultipleSubject(self):\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": ["Lorem", "Ipsum"],\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': [\'Lorem\', \'Ipsum\'],\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n \n     def testMakeQueryWithMultipleSubjectNot(self):\n-        self.folder.setSubject(["Ipsum"])\n+        self.folder.setSubject([\'Ipsum\'])\n         self.folder.reindexObject()\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.none",\n-                "v": ["Lorem", "Dolor"],\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.none\',\n+            \'v\': [\'Lorem\', \'Dolor\'],\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].getURL(), "http://nohost/plone/testfolder")\n+        self.assertEqual(\n+            results[0].getURL(),\n+            \'http://nohost/plone/testfolder\')\n \n     def testMakeQueryWithSubjectWithSpecialCharacters(self):\n-        self.testpage.setSubject(["\xc3\x84\xc3\xbc\xc3\xb6"])\n+        self.testpage.setSubject([\'\xc3\x84\xc3\xbc\xc3\xb6\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": "\xc3\x84\xc3\xbc\xc3\xb6",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': \'\xc3\x84\xc3\xbc\xc3\xb6\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-        self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n+        self.assertEqual(\n+            results[0].getObject().Subject(),\n+            (\'\xc3\x84\xc3\xbc\xc3\xb6\',))\n \n     def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n-        self.testpage.setSubject(["\xc3\x84\xc3\xbc\xc3\xb6"])\n+        self.testpage.setSubject([\'\xc3\x84\xc3\xbc\xc3\xb6\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": u"\xc3\x84\xc3\xbc\xc3\xb6",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': u\'\xc3\x84\xc3\xbc\xc3\xb6\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-        self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n-\n-    def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n-        self.testpage.setSubject(["\xc3\x84\xc3\xbc\xc3\xb6"])\n-        self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": [u"\xc3\x84\xc3\xbc\xc3\xb6", u"\xc3\x9c\xc3\xb6\xc3\x9f"],\n-            }\n-        ]\n-        results = self.querybuilder._makequery(query=query)\n-        self.assertEqual(len(results), 1)\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-        self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n-\n-    def testMakeQueryWithSearchableText(self):\n-        query = [\n-            {\n-                "i": "SearchableText",\n-                "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"Test",\n-            }\n-        ]\n-        results = self.querybuilder._makequery(query=query)\n-        self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].getURL(), "http://nohost/plone/testfolder")\n+            results[0].getObject().Subject(),\n+            (\'\xc3\x84\xc3\xbc\xc3\xb6\',))\n \n-    def testMakeQueryWithSearchableTextSpecialWordsAnd(self):\n-        self.testpage.description = "This and that is the description"\n+    def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n+        self.testpage.setSubject([\'\xc3\x84\xc3\xbc\xc3\xb6\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "SearchableText",\n-                "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This and that",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': [u\'\xc3\x84\xc3\xbc\xc3\xb6\', u\'\xc3\x9c\xc3\xb6\xc3\x9f\'],\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-\n-    def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n-        self.testpage.description = "This or that is the description"\n-        self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "SearchableText",\n-                "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This or that",\n-            }\n-        ]\n-        results = self.querybuilder._makequery(query=query)\n-        self.assertEqual(len(results), 1)\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getObject().Subject(),\n+            (\'\xc3\x84\xc3\xbc\xc3\xb6\',))\n \n     def testQueryBuilderCustomQuery(self):\n-        """Test, if custom queries are respected when getting the results."""\n+        """Test, if custom queries are respected when getting the results.\n+        """\n \n         # It would be slightly nicer to compare directly against the changed\n         # query. But instead we have to test for changed results, as _makequery\n         # returns the results but not the query.\n \n-        query = [\n-            {\n-                "i": "Title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "Collectionstestpage",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'Collectionstestpage\',\n+        }]\n \n         # Test normal, without custom_query.\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n \n         # Test with changed ``Title`` query, overwriting original query.\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"Title": {"query": "Test Folder"}}\n-        )\n+            query=query,\n+            custom_query={\'Title\': {\'query\': \'Test Folder\'}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Test Folder")\n+        self.assertEqual(results[0].Title(), \'Test Folder\')\n \n         # Test with changed ``portal_type``, but other ``Title`` query.\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"portal_type": {"query": "Folder"}}\n-        )\n+            query=query,\n+            custom_query={\'portal_type\': {\'query\': \'Folder\'}})\n         self.assertEqual(len(results), 0)\n \n         # Test with changed ``portal_type`` and changed ``Title``.\n         results = self.querybuilder._makequery(\n             query=query,\n-            custom_query={\n-                "Title": {"query": "Test Folder"},\n-                "portal_type": {"query": "Folder"},\n-            },\n-        )\n+            custom_query={\'Title\': {\'query\': \'Test Folder\'},\n+                          \'portal_type\': {\'query\': \'Folder\'}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Test Folder")\n+        self.assertEqual(results[0].Title(), \'Test Folder\')\n \n     def testQueryBuilderCustomQueryDoNotOverrideValues(self):\n-        """Test if custom queries do not override values if they are dicts"""\n-        self.portal.invokeFactory(\n-            "Document", "collectionstestpage-2", title="Collectionstestpage 2"\n-        )\n-        testpage2 = self.portal["collectionstestpage-2"]\n-        query = [\n-            {\n-                "i": "UID",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": [self.testpage.UID(), testpage2.UID()],\n-            }\n-        ]\n+        """Test if custom queries do not override values if they are dicts\n+        """\n+        self.portal.invokeFactory("Document",\n+                                  "collectionstestpage-2",\n+                                  title="Collectionstestpage 2")\n+        testpage2 = self.portal[\'collectionstestpage-2\']\n+        query = [{\n+            \'i\': \'UID\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': [self.testpage.UID(), testpage2.UID()],\n+        }]\n \n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 2)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n-        self.assertEqual(results[1].Title(), "Collectionstestpage 2")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n+        self.assertEqual(results[1].Title(), \'Collectionstestpage 2\')\n \n         # if we add new values to the query, they should not be overwritten\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"UID": {"not": testpage2.UID()}}\n-        )\n+            query=query,\n+            custom_query={\'UID\': {\'not\': testpage2.UID()}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n \n         # if we add the same values to the query, they should be overwritten\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"UID": {"query": testpage2.UID()}}\n-        )\n+            query=query,\n+            custom_query={\'UID\': {\'query\': testpage2.UID()}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage 2")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage 2\')\n \n         # add simple custom query\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"UID": testpage2.UID()}\n-        )\n+            query=query,\n+            custom_query={\'UID\': testpage2.UID()})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage 2")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage 2\')\n \n \n class TestQuerybuilderResultTypes(unittest.TestCase):\n@@ -352,23 +294,22 @@ class TestQuerybuilderResultTypes(unittest.TestCase):\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer["portal"]\n+        self.portal = self.layer[\'portal\']\n         self.request = TestRequest()\n         self.querybuilder = getMultiAdapter(\n-            (self.portal, self.request), name="querybuilderresults"\n+            (self.portal, self.request),\n+            name=\'querybuilderresults\'\n         )\n-        self.query = [\n-            {\n-                "i": "Title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "Non-existent",\n-            }\n-        ]\n+        self.query = [{\n+            \'i\': \'Title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'Non-existent\',\n+        }]\n \n     def testQueryBuilderEmptyQueryContentListing(self):\n         results = self.querybuilder(query={})\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "ContentListing")\n+        self.assertEqual(type(results).__name__, \'ContentListing\')\n \n     def testQueryBuilderEmptyQueryBrains(self):\n         results = self.querybuilder(query={}, brains=True)\n@@ -378,29 +319,30 @@ def testQueryBuilderEmptyQueryBrains(self):\n     def testQueryBuilderEmptyQueryBatch(self):\n         results = self.querybuilder(query={}, batch=True)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "BaseBatch")\n+        self.assertEqual(type(results).__name__, \'BaseBatch\')\n \n     def testQueryBuilderNonEmptyQueryContentListing(self):\n         results = self.querybuilder(query=self.query)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "ContentListing")\n+        self.assertEqual(type(results).__name__, \'ContentListing\')\n \n     def testQueryBuilderNonEmptyQueryBrains(self):\n         results = self.querybuilder(query=self.query, brains=True)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "LazyCat")\n+        self.assertEqual(type(results).__name__, \'LazyCat\')\n \n     def testQueryBuilderNonEmptyQueryBatch(self):\n         results = self.querybuilder(query=self.query, batch=True)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "BaseBatch")\n+        self.assertEqual(type(results).__name__, \'BaseBatch\')\n \n     def testQueryBuilderNonEmptyContentListingCustomQuery(self):\n         results = self.querybuilder(\n-            query={}, custom_query={"portal_type": "NonExistent"}\n+            query={},\n+            custom_query={\'portal_type\': \'NonExistent\'}\n         )\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "ContentListing")\n+        self.assertEqual(type(results).__name__, \'ContentListing\')\n \n \n class TestConfigurationFetcher(unittest.TestCase):\n@@ -408,9 +350,11 @@ class TestConfigurationFetcher(unittest.TestCase):\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer["portal"]\n-        self.portal.invokeFactory("Folder", "testfolder", title="Test Folder")\n+        self.portal = self.layer[\'portal\']\n+        self.portal.invokeFactory("Folder",\n+                                  "testfolder",\n+                                  title="Test Folder")\n         self.folder = self.portal.testfolder\n \n     def testGettingJSONConfiguration(self):\n-        self.folder.restrictedTraverse("@@querybuilderjsonconfig")()\n+        self.folder.restrictedTraverse(\'@@querybuilderjsonconfig\')()\ndiff --git a/setup.py b/setup.py\nindex ad8ea3f..c1609cd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n-version = \'2.0.dev0\'\n+version = \'1.6.1.dev0\'\n \n long_description = open("README.rst").read() + "\\n"\n long_description += open("CHANGES.rst").read()\n@@ -17,10 +17,12 @@\n     classifiers=[\n         \'Development Status :: 5 - Production/Stable\',\n         "Framework :: Plone",\n+        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2022-07-11T08:08:12+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.querystring/commit/47c5c8ffd83059d6ccd396f2b4c40f517697079e

Merge pull request #114 from plone/revert-113-erral-issue-111-master

Revert "Fixes #111 for master and make it Plone 6 only"

Files changed:
M plone/app/querystring/querybuilder.py
M plone/app/querystring/tests/testQueryBuilder.py
M setup.py
D news/111.bugfix

b'diff --git a/news/111.bugfix b/news/111.bugfix\ndeleted file mode 100644\nindex a1a3949..0000000\n--- a/news/111.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Use function from Products.CMFPlone to handle cleaning of search terms. Fixes #111\n-[erral]\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 60e0309..8cd3c39 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -12,15 +12,24 @@\n from zope.i18n import translate\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n-from Products.CMFPlone.browser.search import munge_search_term\n \n import json\n import logging\n \n \n-logger = logging.getLogger("plone.app.querystring")\n-_ = MessageFactory("plone")\n+logger = logging.getLogger(\'plone.app.querystring\')\n+_ = MessageFactory(\'plone\')\n \n+BAD_CHARS = (\'?\', \'-\', \'+\', \'*\')\n+\n+\n+def quote_chars(s):\n+    # We need to quote parentheses when searching text indices\n+    if \'(\' in s:\n+        s = s.replace(\'(\', \'"("\')\n+    if \')\' in s:\n+        s = s.replace(\')\', \'")"\')\n+    return s\n \n class ContentListingView(BrowserView):\n     """BrowserView for displaying query results"""\n@@ -30,25 +39,16 @@ def __call__(self, **kw):\n \n \n class QueryBuilder(BrowserView):\n-    """This view is used by the javascripts,\n-    fetching configuration or results"""\n+    """ This view is used by the javascripts,\n+        fetching configuration or results"""\n \n     def __init__(self, context, request):\n         super(QueryBuilder, self).__init__(context, request)\n         self._results = None\n \n-    def __call__(\n-        self,\n-        query,\n-        batch=False,\n-        b_start=0,\n-        b_size=30,\n-        sort_on=None,\n-        sort_order=None,\n-        limit=0,\n-        brains=False,\n-        custom_query=None,\n-    ):\n+    def __call__(self, query, batch=False, b_start=0, b_size=30,\n+                 sort_on=None, sort_order=None, limit=0, brains=False,\n+                 custom_query=None):\n         """Create a zope catalog query and return results.\n \n         :param query: The querystring to be parsed into a zope catalog query.\n@@ -95,45 +95,32 @@ def __call__(\n                 sort_order=sort_order,\n                 limit=limit,\n                 brains=brains,\n-                custom_query=custom_query,\n-            )\n+                custom_query=custom_query)\n         return self._results\n \n     def html_results(self, query):\n         """html results, used for in the edit screen of a collection,\n-        used in the live update results"""\n+           used in the live update results"""\n         options = dict(original_context=self.context)\n-        results = self(\n-            query,\n-            sort_on=self.request.get("sort_on", None),\n-            sort_order=self.request.get("sort_order", None),\n-            limit=10,\n-        )\n+        results = self(query, sort_on=self.request.get(\'sort_on\', None),\n+                       sort_order=self.request.get(\'sort_order\', None),\n+                       limit=10)\n \n         return getMultiAdapter(\n-            (results, self.request), name="display_query_results"\n+            (results, self.request),\n+            name=\'display_query_results\'\n         )(**options)\n \n-    def _makequery(\n-        self,\n-        query=None,\n-        batch=False,\n-        b_start=0,\n-        b_size=30,\n-        sort_on=None,\n-        sort_order=None,\n-        limit=0,\n-        brains=False,\n-        custom_query=None,\n-    ):\n+    def _makequery(self, query=None, batch=False, b_start=0, b_size=30,\n+                   sort_on=None, sort_order=None, limit=0, brains=False,\n+                   custom_query=None):\n         """Parse the (form)query and return using multi-adapter"""\n         query_modifiers = getUtilitiesFor(IQueryModifier)\n         for name, modifier in sorted(query_modifiers, key=itemgetter(0)):\n             query = modifier(query)\n \n         parsedquery = queryparser.parseFormquery(\n-            self.context, query, sort_on, sort_order\n-        )\n+            self.context, query, sort_on, sort_order)\n \n         index_modifiers = getUtilitiesFor(IParsedQueryIndexModifier)\n         for name, modifier in index_modifiers:\n@@ -147,37 +134,36 @@ def _makequery(\n                     parsedquery[new_name] = query\n \n         # Check for valid indexes\n-        catalog = getToolByName(self.context, "portal_catalog")\n-        valid_indexes = [\n-            index for index in parsedquery if index in catalog.indexes()\n-        ]\n+        catalog = getToolByName(self.context, \'portal_catalog\')\n+        valid_indexes = [index for index in parsedquery\n+                         if index in catalog.indexes()]\n \n         # We\'ll ignore any invalid index, but will return an empty set if none\n         # of the indexes are valid.\n         if not valid_indexes:\n             logger.warning(\n-                "Using empty query because there are no valid indexes used."\n-            )\n+                "Using empty query because there are no valid indexes used.")\n             parsedquery = {}\n \n         empty_query = not parsedquery  # store emptiness\n \n         if batch:\n-            parsedquery["b_start"] = b_start\n-            parsedquery["b_size"] = b_size\n+            parsedquery[\'b_start\'] = b_start\n+            parsedquery[\'b_size\'] = b_size\n         elif limit:\n-            parsedquery["sort_limit"] = limit\n+            parsedquery[\'sort_limit\'] = limit\n \n-        if "path" not in parsedquery:\n-            parsedquery["path"] = {"query": ""}\n+        if \'path\' not in parsedquery:\n+            parsedquery[\'path\'] = {\'query\': \'\'}\n \n         if isinstance(custom_query, dict) and custom_query:\n             # Update the parsed query with an extra query dictionary. This may\n             # override the parsed query. The custom_query is a dictonary of\n             # index names and their associated query values.\n             for key in custom_query:\n-                if isinstance(parsedquery.get(key), dict) and isinstance(\n-                    custom_query.get(key), dict\n+                if (\n+                    isinstance(parsedquery.get(key), dict)\n+                    and isinstance(custom_query.get(key), dict)\n                 ):\n                     parsedquery[key].update(custom_query[key])\n                     continue\n@@ -189,11 +175,8 @@ def _makequery(\n         results = []\n         if not empty_query:\n             results = catalog(**parsedquery)\n-            if (\n-                getattr(results, "actual_result_count", False)\n-                and limit\n-                and results.actual_result_count > limit\n-            ):\n+            if getattr(results, \'actual_result_count\', False) and limit\\\n+                    and results.actual_result_count > limit:\n                 results.actual_result_count = limit\n \n         if not brains:\n@@ -206,28 +189,33 @@ def number_of_results(self, query):\n         """Get the number of results"""\n         results = self(query, sort_on=None, sort_order=None, limit=1)\n         return translate(\n-            _(\n-                u"batch_x_items_matching_your_criteria",\n-                default=u"${number} items matching your search terms.",\n-                mapping={"number": results.actual_result_count},\n-            ),\n-            context=self.request,\n+            _(u"batch_x_items_matching_your_criteria",\n+              default=u"${number} items matching your search terms.",\n+              mapping={\'number\': results.actual_result_count}),\n+            context=self.request\n         )\n \n     def filter_query(self, query):\n-        text = query.get("SearchableText", None)\n+        text = query.get(\'SearchableText\', None)\n         if isinstance(text, dict):\n-            text = text.get("query", "")\n+            text = text.get(\'query\', \'\')\n         if text:\n-            query["SearchableText"] = munge_search_term(text)\n+            query[\'SearchableText\'] = self.munge_search_term(text)\n         return query\n \n+    def munge_search_term(self, q):\n+        for char in BAD_CHARS:\n+            q = q.replace(char, \' \')\n+        r = q.split()\n+        r = " AND ".join(r)\n+        r = quote_chars(r) + \'*\'\n+        return r\n+\n \n class RegistryConfiguration(BrowserView):\n     def __call__(self):\n         registry = getUtility(IRegistry)\n         reader = getMultiAdapter(\n-            (registry, self.request), IQuerystringRegistryReader\n-        )\n+            (registry, self.request), IQuerystringRegistryReader)\n         data = reader()\n         return json.dumps(data)\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex e0003f9..a112304 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -1,8 +1,7 @@\n # -*- coding: utf-8 -*-\n \n-from plone.app.querystring.testing import (\n-    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n-)\n+from plone.app.querystring.testing import \\\n+    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n from zope.component import getMultiAdapter\n from zope.publisher.browser import TestRequest\n@@ -15,26 +14,27 @@ class TestQuerybuilder(unittest.TestCase):\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer["portal"]\n+        self.portal = self.layer[\'portal\']\n \n-        self.portal.invokeFactory(\n-            "Document", "collectionstestpage", title="Collectionstestpage"\n-        )\n-        testpage = self.portal["collectionstestpage"]\n+        self.portal.invokeFactory("Document",\n+                                  "collectionstestpage",\n+                                  title="Collectionstestpage")\n+        testpage = self.portal[\'collectionstestpage\']\n         self.testpage = testpage\n-        self.portal.portal_workflow.doActionFor(testpage, "publish")\n+        self.portal.portal_workflow.doActionFor(testpage, \'publish\')\n         self.request = TestRequest()\n         self.querybuilder = getMultiAdapter(\n-            (self.portal, self.request), name="querybuilderresults"\n+            (self.portal, self.request),\n+            name=\'querybuilderresults\'\n         )\n-        self.query = [\n-            {\n-                "i": "Title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "Collectionstestpage",\n-            }\n-        ]\n-        self.portal.invokeFactory("Folder", "testfolder", title="Test Folder")\n+        self.query = [{\n+            \'i\': \'Title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'Collectionstestpage\',\n+        }]\n+        self.portal.invokeFactory("Folder",\n+                                  "testfolder",\n+                                  title="Test Folder")\n         self.folder = self.portal.testfolder\n \n     def testQueryBuilderQuery(self):\n@@ -43,308 +43,250 @@ def testQueryBuilderQuery(self):\n \n     def testQueryBuilderHTML(self):\n         results = self.querybuilder.html_results(self.query)\n-        self.assertTrue("Collectionstestpage" in results)\n+        self.assertTrue(\'Collectionstestpage\' in results)\n \n     def testGettingConfiguration(self):\n-        res = self.folder.restrictedTraverse("@@querybuildernumberofresults")\n+        res = self.folder.restrictedTraverse(\'@@querybuildernumberofresults\')\n         res(self.query)\n \n     def testQueryBuilderNumberOfResults(self):\n         results = self.querybuilder.number_of_results(self.query)\n-        numeric = int(results.split(" ")[0])\n+        numeric = int(results.split(\' \')[0])\n         self.assertEqual(numeric, 1)\n \n     def testQueryBuilderNumberOfResultsView(self):\n-        res = self.folder.restrictedTraverse("@@querybuildernumberofresults")\n+        res = self.folder.restrictedTraverse(\'@@querybuildernumberofresults\')\n         length_of_results = res.browserDefault(None)[0](self.query)\n         # apparently brower travelsal is different from the traversal we get\n         # from restrictedTraverse. This did hurt a bit.\n-        numeric = int(length_of_results.split(" ")[0])\n+        numeric = int(length_of_results.split(\' \')[0])\n         self.assertEqual(numeric, 1)\n \n     def testMakeQuery(self):\n         results = self.querybuilder._makequery(query=self.query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n \n     def testQueryStringIs(self):\n-        query = [\n-            {\n-                "i": "sortable_title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "collectionstestpage",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'sortable_title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'collectionstestpage\',\n+        }]\n \n         # Test normal, without custom_query.\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n \n     def testQueryStringIsNot(self):\n-        query = [\n-            {\n-                "i": "portal_type",\n-                "o": "plone.app.querystring.operation.selection.none",\n-                "v": "Plone Site",\n-            },\n-            {\n-                "i": "sortable_title",\n-                "o": "plone.app.querystring.operation.string.isNot",\n-                "v": "collectionstestpage",\n-            },\n-        ]\n+        query = [{\n+            \'i\': \'portal_type\',\n+            \'o\': \'plone.app.querystring.operation.selection.none\',\n+            \'v\': \'Plone Site\',\n+        }, {\n+            \'i\': \'sortable_title\',\n+            \'o\': \'plone.app.querystring.operation.string.isNot\',\n+            \'v\': \'collectionstestpage\',\n+        }]\n \n         # Test normal, without custom_query.\n         results = self.querybuilder._makequery(query=query)\n         print([it.Title() for it in results])\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Test Folder")\n+        self.assertEqual(results[0].Title(), \'Test Folder\')\n \n     def testMakeQueryWithSubject(self):\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": "Lorem",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': \'Lorem\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n \n     def testMakeQueryWithSubjectNot(self):\n-        self.folder.setSubject(["Ipsum"])\n+        self.folder.setSubject([\'Ipsum\'])\n         self.folder.reindexObject()\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.none",\n-                "v": "Lorem",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.none\',\n+            \'v\': \'Lorem\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].getURL(), "http://nohost/plone/testfolder")\n+        self.assertEqual(\n+            results[0].getURL(),\n+            \'http://nohost/plone/testfolder\')\n \n     def testMakeQueryWithMultipleSubject(self):\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": ["Lorem", "Ipsum"],\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': [\'Lorem\', \'Ipsum\'],\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n \n     def testMakeQueryWithMultipleSubjectNot(self):\n-        self.folder.setSubject(["Ipsum"])\n+        self.folder.setSubject([\'Ipsum\'])\n         self.folder.reindexObject()\n-        self.testpage.setSubject(["Lorem"])\n+        self.testpage.setSubject([\'Lorem\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.none",\n-                "v": ["Lorem", "Dolor"],\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.none\',\n+            \'v\': [\'Lorem\', \'Dolor\'],\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].getURL(), "http://nohost/plone/testfolder")\n+        self.assertEqual(\n+            results[0].getURL(),\n+            \'http://nohost/plone/testfolder\')\n \n     def testMakeQueryWithSubjectWithSpecialCharacters(self):\n-        self.testpage.setSubject(["\xc3\x84\xc3\xbc\xc3\xb6"])\n+        self.testpage.setSubject([\'\xc3\x84\xc3\xbc\xc3\xb6\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": "\xc3\x84\xc3\xbc\xc3\xb6",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': \'\xc3\x84\xc3\xbc\xc3\xb6\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-        self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n+        self.assertEqual(\n+            results[0].getObject().Subject(),\n+            (\'\xc3\x84\xc3\xbc\xc3\xb6\',))\n \n     def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n-        self.testpage.setSubject(["\xc3\x84\xc3\xbc\xc3\xb6"])\n+        self.testpage.setSubject([\'\xc3\x84\xc3\xbc\xc3\xb6\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": u"\xc3\x84\xc3\xbc\xc3\xb6",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': u\'\xc3\x84\xc3\xbc\xc3\xb6\',\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-        self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n-\n-    def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n-        self.testpage.setSubject(["\xc3\x84\xc3\xbc\xc3\xb6"])\n-        self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "Subject",\n-                "o": "plone.app.querystring.operation.selection.any",\n-                "v": [u"\xc3\x84\xc3\xbc\xc3\xb6", u"\xc3\x9c\xc3\xb6\xc3\x9f"],\n-            }\n-        ]\n-        results = self.querybuilder._makequery(query=query)\n-        self.assertEqual(len(results), 1)\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-        self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n-\n-    def testMakeQueryWithSearchableText(self):\n-        query = [\n-            {\n-                "i": "SearchableText",\n-                "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"Test",\n-            }\n-        ]\n-        results = self.querybuilder._makequery(query=query)\n-        self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].getURL(), "http://nohost/plone/testfolder")\n+            results[0].getObject().Subject(),\n+            (\'\xc3\x84\xc3\xbc\xc3\xb6\',))\n \n-    def testMakeQueryWithSearchableTextSpecialWordsAnd(self):\n-        self.testpage.description = "This and that is the description"\n+    def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n+        self.testpage.setSubject([\'\xc3\x84\xc3\xbc\xc3\xb6\'])\n         self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "SearchableText",\n-                "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This and that",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Subject\',\n+            \'o\': \'plone.app.querystring.operation.selection.any\',\n+            \'v\': [u\'\xc3\x84\xc3\xbc\xc3\xb6\', u\'\xc3\x9c\xc3\xb6\xc3\x9f\'],\n+        }]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n-\n-    def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n-        self.testpage.description = "This or that is the description"\n-        self.testpage.reindexObject()\n-        query = [\n-            {\n-                "i": "SearchableText",\n-                "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This or that",\n-            }\n-        ]\n-        results = self.querybuilder._makequery(query=query)\n-        self.assertEqual(len(results), 1)\n+            results[0].getURL(),\n+            \'http://nohost/plone/collectionstestpage\')\n         self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+            results[0].getObject().Subject(),\n+            (\'\xc3\x84\xc3\xbc\xc3\xb6\',))\n \n     def testQueryBuilderCustomQuery(self):\n-        """Test, if custom queries are respected when getting the results."""\n+        """Test, if custom queries are respected when getting the results.\n+        """\n \n         # It would be slightly nicer to compare directly against the changed\n         # query. But instead we have to test for changed results, as _makequery\n         # returns the results but not the query.\n \n-        query = [\n-            {\n-                "i": "Title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "Collectionstestpage",\n-            }\n-        ]\n+        query = [{\n+            \'i\': \'Title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'Collectionstestpage\',\n+        }]\n \n         # Test normal, without custom_query.\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n \n         # Test with changed ``Title`` query, overwriting original query.\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"Title": {"query": "Test Folder"}}\n-        )\n+            query=query,\n+            custom_query={\'Title\': {\'query\': \'Test Folder\'}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Test Folder")\n+        self.assertEqual(results[0].Title(), \'Test Folder\')\n \n         # Test with changed ``portal_type``, but other ``Title`` query.\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"portal_type": {"query": "Folder"}}\n-        )\n+            query=query,\n+            custom_query={\'portal_type\': {\'query\': \'Folder\'}})\n         self.assertEqual(len(results), 0)\n \n         # Test with changed ``portal_type`` and changed ``Title``.\n         results = self.querybuilder._makequery(\n             query=query,\n-            custom_query={\n-                "Title": {"query": "Test Folder"},\n-                "portal_type": {"query": "Folder"},\n-            },\n-        )\n+            custom_query={\'Title\': {\'query\': \'Test Folder\'},\n+                          \'portal_type\': {\'query\': \'Folder\'}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Test Folder")\n+        self.assertEqual(results[0].Title(), \'Test Folder\')\n \n     def testQueryBuilderCustomQueryDoNotOverrideValues(self):\n-        """Test if custom queries do not override values if they are dicts"""\n-        self.portal.invokeFactory(\n-            "Document", "collectionstestpage-2", title="Collectionstestpage 2"\n-        )\n-        testpage2 = self.portal["collectionstestpage-2"]\n-        query = [\n-            {\n-                "i": "UID",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": [self.testpage.UID(), testpage2.UID()],\n-            }\n-        ]\n+        """Test if custom queries do not override values if they are dicts\n+        """\n+        self.portal.invokeFactory("Document",\n+                                  "collectionstestpage-2",\n+                                  title="Collectionstestpage 2")\n+        testpage2 = self.portal[\'collectionstestpage-2\']\n+        query = [{\n+            \'i\': \'UID\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': [self.testpage.UID(), testpage2.UID()],\n+        }]\n \n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 2)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n-        self.assertEqual(results[1].Title(), "Collectionstestpage 2")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n+        self.assertEqual(results[1].Title(), \'Collectionstestpage 2\')\n \n         # if we add new values to the query, they should not be overwritten\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"UID": {"not": testpage2.UID()}}\n-        )\n+            query=query,\n+            custom_query={\'UID\': {\'not\': testpage2.UID()}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n \n         # if we add the same values to the query, they should be overwritten\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"UID": {"query": testpage2.UID()}}\n-        )\n+            query=query,\n+            custom_query={\'UID\': {\'query\': testpage2.UID()}})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage 2")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage 2\')\n \n         # add simple custom query\n         results = self.querybuilder._makequery(\n-            query=query, custom_query={"UID": testpage2.UID()}\n-        )\n+            query=query,\n+            custom_query={\'UID\': testpage2.UID()})\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].Title(), "Collectionstestpage 2")\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage 2\')\n \n \n class TestQuerybuilderResultTypes(unittest.TestCase):\n@@ -352,23 +294,22 @@ class TestQuerybuilderResultTypes(unittest.TestCase):\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer["portal"]\n+        self.portal = self.layer[\'portal\']\n         self.request = TestRequest()\n         self.querybuilder = getMultiAdapter(\n-            (self.portal, self.request), name="querybuilderresults"\n+            (self.portal, self.request),\n+            name=\'querybuilderresults\'\n         )\n-        self.query = [\n-            {\n-                "i": "Title",\n-                "o": "plone.app.querystring.operation.string.is",\n-                "v": "Non-existent",\n-            }\n-        ]\n+        self.query = [{\n+            \'i\': \'Title\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': \'Non-existent\',\n+        }]\n \n     def testQueryBuilderEmptyQueryContentListing(self):\n         results = self.querybuilder(query={})\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "ContentListing")\n+        self.assertEqual(type(results).__name__, \'ContentListing\')\n \n     def testQueryBuilderEmptyQueryBrains(self):\n         results = self.querybuilder(query={}, brains=True)\n@@ -378,29 +319,30 @@ def testQueryBuilderEmptyQueryBrains(self):\n     def testQueryBuilderEmptyQueryBatch(self):\n         results = self.querybuilder(query={}, batch=True)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "BaseBatch")\n+        self.assertEqual(type(results).__name__, \'BaseBatch\')\n \n     def testQueryBuilderNonEmptyQueryContentListing(self):\n         results = self.querybuilder(query=self.query)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "ContentListing")\n+        self.assertEqual(type(results).__name__, \'ContentListing\')\n \n     def testQueryBuilderNonEmptyQueryBrains(self):\n         results = self.querybuilder(query=self.query, brains=True)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "LazyCat")\n+        self.assertEqual(type(results).__name__, \'LazyCat\')\n \n     def testQueryBuilderNonEmptyQueryBatch(self):\n         results = self.querybuilder(query=self.query, batch=True)\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "BaseBatch")\n+        self.assertEqual(type(results).__name__, \'BaseBatch\')\n \n     def testQueryBuilderNonEmptyContentListingCustomQuery(self):\n         results = self.querybuilder(\n-            query={}, custom_query={"portal_type": "NonExistent"}\n+            query={},\n+            custom_query={\'portal_type\': \'NonExistent\'}\n         )\n         self.assertEqual(len(results), 0)\n-        self.assertEqual(type(results).__name__, "ContentListing")\n+        self.assertEqual(type(results).__name__, \'ContentListing\')\n \n \n class TestConfigurationFetcher(unittest.TestCase):\n@@ -408,9 +350,11 @@ class TestConfigurationFetcher(unittest.TestCase):\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer["portal"]\n-        self.portal.invokeFactory("Folder", "testfolder", title="Test Folder")\n+        self.portal = self.layer[\'portal\']\n+        self.portal.invokeFactory("Folder",\n+                                  "testfolder",\n+                                  title="Test Folder")\n         self.folder = self.portal.testfolder\n \n     def testGettingJSONConfiguration(self):\n-        self.folder.restrictedTraverse("@@querybuilderjsonconfig")()\n+        self.folder.restrictedTraverse(\'@@querybuilderjsonconfig\')()\ndiff --git a/setup.py b/setup.py\nindex ad8ea3f..c1609cd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n-version = \'2.0.dev0\'\n+version = \'1.6.1.dev0\'\n \n long_description = open("README.rst").read() + "\\n"\n long_description += open("CHANGES.rst").read()\n@@ -17,10 +17,12 @@\n     classifiers=[\n         \'Development Status :: 5 - Production/Stable\',\n         "Framework :: Plone",\n+        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n'

