Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-12-21T15:43:37+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/6a9310f2d01f749bde304877127854a08919a0aa

Enhance the vocabularies serializer to accept a list of tokens (#1295)

* Enhance the vocabularies serializer to accept a list of tokens

* Add documentation

* Refactor querystring list encoding, like the expand one

* Amend docs

* Refactor to use repeated query parameters for the tokens

Files changed:
A news/1294.feature
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req
A src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp
M docs/source/vocabularies.rst
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_vocabularies.py

b'diff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\nindex d826caf60..ee15d768b 100644\n--- a/docs/source/vocabularies.rst\n+++ b/docs/source/vocabularies.rst\n@@ -90,10 +90,11 @@ Filter Vocabularies\n \n .. http:get:: (context)/@vocabularies/(vocab_name)?title=(filter_query)\n .. http:get:: (context)/@vocabularies/(vocab_name)?token=(filter_query)\n+.. http:get:: (context)/@vocabularies/(vocab_name)?tokens=(filter_term1)&tokens=(filter_term2)&...\n \n-Vocabulary terms can be filtered using the ``title`` or ``token`` parameter.\n+Vocabulary terms can be filtered using the ``title``, ``token`` or ``tokens`` (array) parameter.\n \n-Use the ``title`` paramenter to filter vocabulary terms by title.\n+Use the ``title`` parameter to filter vocabulary terms by title.\n E.g. search for all terms that contain the string ``doc`` in the title:\n \n ..  http:example:: curl httpie python-requests\n@@ -102,7 +103,7 @@ E.g. search for all terms that contain the string ``doc`` in the title:\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n    :language: http\n \n-Use the ``token`` paramenter to filter vocabulary terms by token.\n+Use the ``token`` parameter to filter vocabulary terms by token.\n This is useful in case that you have the token and you need to retrieve the ``title``.\n E.g. search the term ``doc`` in the token:\n \n@@ -116,6 +117,13 @@ E.g. search the term ``doc`` in the token:\n     You must not filter by title and token at the same time.\n     The API returns a 400 response code if you do so.\n \n+Use the ``tokens`` parameter to filter vocabulary terms by a list of tokens.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\n+   :language: http\n \n Get a source\n ------------\ndiff --git a/news/1294.feature b/news/1294.feature\nnew file mode 100644\nindex 000000000..755a977f6\n--- /dev/null\n+++ b/news/1294.feature\n@@ -0,0 +1,2 @@\n+Enhance the vocabularies serializer to accept a list of tokens\n+[sneridagh]\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 9c2555a8d..068b117c6 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -27,6 +27,7 @@ def __call__(self, vocabulary_id):\n         vocabulary = self.context\n         title = safe_unicode(self.request.form.get("title", ""))\n         token = self.request.form.get("token", "")\n+        tokens = self.request.form.get("tokens", [])\n         b_size = self.request.form.get("b_size", "")\n \n         terms = []\n@@ -44,6 +45,11 @@ def __call__(self, vocabulary_id):\n                 if token.lower() != term.token.lower():\n                     continue\n                 terms.append(term)\n+            elif tokens:\n+                for item in tokens:\n+                    if item.lower() != term.token.lower():\n+                        continue\n+                    terms.append(term)\n             else:\n                 term_title = safe_unicode(getattr(term, "title", None) or "")\n                 if (\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\nnew file mode 100644\nindex 000000000..e4561809d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?tokens=Document&tokens=Event HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\nnew file mode 100644\nindex 000000000..f4e865130\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?tokens=Document&tokens=Event",\n+    "items": [\n+        {\n+            "title": "Event",\n+            "token": "Event"\n+        },\n+        {\n+            "title": "Page",\n+            "token": "Document"\n+        }\n+    ],\n+    "items_total": 2\n+}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 2dcde89b9..f98578ff8 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -2019,3 +2019,11 @@ def test_documentation_workingcopy_delete(self):\n         )\n \n         save_request_and_response_for_docs("workingcopy_delete", response)\n+\n+    def test_documentation_vocabularies_get_filtered_by_token_list(self):\n+        response = self.api_session.get(\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?tokens=Document&tokens=Event",\n+        )\n+        save_request_and_response_for_docs(\n+            "vocabularies_get_filtered_by_token_list", response\n+        )\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 004215279..b007ebe33 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -306,6 +306,26 @@ def test_get_corner_case_vocabulary_filtered_by_token(self):\n             },\n         )\n \n+    def test_get_vocabulary_filtered_by_token_list(self):\n+        response = self.api_session.get(\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?tokens=token1&tokens=token2"\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        response = response.json()\n+        self.assertEqual(\n+            response,\n+            {\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?tokens=token1&tokens=token2",  # noqa\n+                "items": [\n+                    {"title": "Title 1", "token": "token1"},\n+                    {"title": "Title 2", "token": "token2"},\n+                ],\n+                "items_total": 2,\n+            },\n+        )\n+\n     def test_get_unknown_vocabulary(self):\n         response = self.api_session.get("/@vocabularies/unknown.vocabulary")\n \n'

