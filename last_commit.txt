Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-09T16:11:46+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/bcc4fb5f738ed142be0cf40a5ee657228e9c00ba

Improve the new navigation and add test coverage

Refs. https://github.com/plone/Products.CMFPlone/issues/2516

Files changed:
A news/181.fixed
A plone/app/layout/navigation/tests/test_navtree_provider.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/testing.py

b"diff --git a/news/181.fixed b/news/181.fixed\nnew file mode 100644\nindex 00000000..1e23b7fa\n--- /dev/null\n+++ b/news/181.fixed\n@@ -0,0 +1 @@\n+Improve the new navigation and add test coverage [ale-rt]\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex b665683e..bda9279a 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -3,10 +3,11 @@\n # from catalog queries.\n \n from Acquisition import aq_inner\n+from collections import defaultdict\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.root import getNavigationRoot\n-from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.view import memoize\n+from plone.memoize.view import memoize_contextless\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n@@ -18,7 +19,6 @@\n from zope.contentprovider.provider import ContentProviderBase\n from zope.interface import implementer\n \n-\n import six\n \n \n@@ -386,7 +386,7 @@ class NavTreeProvider(ContentProviderBase):\n     )\n \n     @property\n-    @memoize\n+    @memoize_contextless\n     def settings(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(INavigationSchema, prefix='plone')\n@@ -407,67 +407,89 @@ def navtree_depth(self):\n         return self.settings.navigation_depth\n \n     @property\n-    @memoize\n-    def navtree(self):\n-        generate_tabs = self.settings.generate_tabs\n-        lang_current = self.request.get('LANGUAGE', None) or \\\n-            (self.context and aq_inner(self.context).Language()) \\\n+    def current_language(self):\n+        return (\n+            self.request.get('LANGUAGE', None)\n+            or (self.context and aq_inner(self.context).Language())\n             or self.language_settings.default_language\n+        )\n \n-        ret = {}\n+    @property\n+    @memoize\n+    def navtree(self):\n+        ret = defaultdict(list)\n+        portal_tabs_view = getMultiAdapter((self.context, self.request),\n+                                           name='portal_tabs_view')\n+        tabs = portal_tabs_view.topLevelTabs()\n+        navtree_path = self.navtree_path\n+        for tab in tabs:\n+            entry = tab.copy()\n+            entry.update({\n+                'path': '/'.join((navtree_path, tab['id'])),\n+                'uid': None,\n+                'review_state': None,\n+            })\n+            if 'title' not in entry:\n+                entry['title'] = tab.get('description') or tab['id']\n+            entry['title'] = safe_unicode(entry['title'])\n+            ret[navtree_path].append(entry)\n \n-        if generate_tabs:\n-            query = {\n-                'path': {'query': self.navtree_path,\n-                         'depth': self.navtree_depth},\n-                'portal_type': {'query': self.settings.displayed_types},\n-                'exclude_from_nav': False,\n-                'Language': lang_current,\n-                'sort_on': 'getObjPositionInParent',\n-            }\n-            portal_catalog = getToolByName(self.context, 'portal_catalog')\n-\n-            registry = getUtility(IRegistry)\n-            types_using_view = registry.get(\n-                'plone.types_use_view_action_in_listings', [])\n-            res = portal_catalog.searchResults(**query)\n-\n-            for it in res:\n-                pathkey = '/'.join(it.getPath().split('/')[:-1])\n-                url = it.getURL()\n-                if it.portal_type in types_using_view:\n-                    url += '/view'\n-                entry = {\n-                    'id': it.id,\n-                    'uid': it.UID,\n-                    'url': url,\n-                    'title': safe_unicode(it.Title),\n-                    'review_state': it.review_state,\n-                }\n-                ret.setdefault(pathkey, []).append(entry)\n+        if not self.settings.generate_tabs:\n             return ret\n \n-        portal_tabs_view = getMultiAdapter((self.context, self.request),\n-                                           name='portal_tabs_view')\n-        res = portal_tabs_view.topLevelTabs()\n+        query = {\n+            'path': {\n+                'query': self.navtree_path,\n+                'depth': self.navtree_depth,\n+            },\n+            'portal_type': {'query': self.settings.displayed_types},\n+            'Language': self.current_language,\n+            'sort_on': self.settings.sort_tabs_on,\n+            'is_default_page': False,\n+        }\n+        if self.settings.sort_tabs_reversed:\n+            query['sort_order'] = 'reverse'\n+\n+        if not self.settings.nonfolderish_tabs:\n+            query['is_folderish'] = True\n+\n+        if self.settings.filter_on_workflow:\n+            query['review_state'] = list(\n+                self.settings.workflow_states_to_show or ()\n+            )\n+\n+        if not self.settings.show_excluded_items:\n+            query['exclude_from_nav'] = False\n+\n+        portal_catalog = getToolByName(self.context, 'portal_catalog')\n+        brains = portal_catalog.searchResults(**query)\n \n-        for it in res:\n-            pathkey = self.navtree_path\n+        registry = getUtility(IRegistry)\n+        types_using_view = registry.get(\n+            'plone.types_use_view_action_in_listings', [])\n+\n+        for brain in brains:\n+            brain_path = '/'.join(brain.getPath().split('/'))\n+            brain_parent_path = brain_path.rpartition('/')[0]\n+            if brain_parent_path == navtree_path:\n+                # This should be already provided by the portal_tabs_view\n+                continue\n+            url = brain.getURL()\n+            if brain.portal_type in types_using_view:\n+                url += '/view'\n             entry = {\n-                'id': it['id'],\n-                'uid': None,\n-                'url': it['url'],\n-                'title': it['title'],\n-                'review_state': None,\n+                'id': brain.getId,\n+                'path': brain_path,\n+                'uid': brain.UID,\n+                'url': url,\n+                'title': safe_unicode(brain.Title),\n+                'review_state': brain.review_state,\n             }\n-            ret.setdefault(pathkey, []).append(entry)\n-\n+            ret[brain_parent_path].append(entry)\n         return ret\n \n     def render_item(self, item, path):\n-        normalizer = getUtility(IIDNormalizer)\n-        item['normalizedid'] = normalizer.normalize(item['id'])\n-        sub = self.build_tree(path + '/' + item['id'], first_run=False)\n+        sub = self.build_tree(item['path'], first_run=False)\n         if sub:\n             item.update({\n                 'sub': sub,\ndiff --git a/plone/app/layout/navigation/tests/test_navtree_provider.py b/plone/app/layout/navigation/tests/test_navtree_provider.py\nnew file mode 100644\nindex 00000000..e8e431e1\n--- /dev/null\n+++ b/plone/app/layout/navigation/tests/test_navtree_provider.py\n@@ -0,0 +1,242 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.layout.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from plone.app.testing import setRoles\n+\n+import unittest\n+\n+\n+class TestNavTreeContentProvider(unittest.TestCase):\n+\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer['portal']\n+        self.request = self.layer['request']\n+        self.registry = getUtility(IRegistry)\n+        self.folder = self.portal['Members'][TEST_USER_ID]\n+        self.portal.Members.reindexObject()\n+        self.folder.reindexObject()\n+        setRoles(self.portal, TEST_USER_ID, ['Manager'])\n+\n+    def _get_navtree(self):\n+        adapter = getMultiAdapter(\n+            (\n+                self.portal, self.request.clone(),\n+                self.portal.restrictedTraverse('@@view')\n+            ),\n+            name='plone.navtree',\n+        )\n+        return adapter.navtree\n+\n+    def test_default_settings(self):\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+\n+    def test_do_not_generate_tabs(self):\n+        self.registry['plone.generate_tabs'] = False\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html'],\n+        )\n+\n+    def test_generate_tabs_non_folderish(self):\n+        self.registry['plone.nonfolderish_tabs'] = False\n+        self.portal.invokeFactory(\n+            'Document',\n+            'test-doc',\n+            title=u'A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)',\n+        )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+\n+    def test_generate_tabs_sorted(self):\n+        self.portal.invokeFactory(\n+            'Document',\n+            'test-doc-2',\n+            title=u'Document 2',\n+        )\n+        self.portal.invokeFactory(\n+            'Document',\n+            'test-doc-1',\n+            title=u'Document 1',\n+        )\n+        navtree = self._get_navtree()\n+        # default sorting by position in parent\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/Members',\n+                '/plone/test-doc-2',\n+                '/plone/test-doc-1',\n+            ],\n+        )\n+\n+        # check we can sort by title\n+        self.registry['plone.sort_tabs_on'] = u'sortable_title'\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/Members',\n+                '/plone/test-doc-1',\n+                '/plone/test-doc-2',\n+            ],\n+        )\n+\n+        # check we can reverse sorting\n+        self.registry['plone.sort_tabs_reversed'] = True\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/test-doc-2',\n+                '/plone/test-doc-1',\n+                '/plone/Members',\n+            ],\n+        )\n+\n+    def test_generate_tabs_displayed_types(self):\n+        self.registry['plone.displayed_types'] = (\n+            u'Image',\n+            u'File',\n+            u'Link',\n+            u'News Item',\n+            u'Document',\n+            u'Event',\n+        )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+            ],\n+        )\n+\n+    def test_generate_tabs_filter_on_state(self):\n+        self.registry['plone.filter_on_workflow'] = True\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+            ],\n+        )\n+        self.registry['plone.workflow_states_to_show'] = (u'private', )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+\n+        # Let's check this works also with deep navigation\n+        self.registry['plone.navigation_depth'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone', '/plone/Members'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone/Members']],\n+            ['/plone/Members/test_user_1_'],\n+        )\n+\n+    def test_generate_tabs_exclude_from_nav(self):\n+        self.portal.invokeFactory(\n+            'Folder',\n+            'test-folder',\n+            title=u'Test folder',\n+        )\n+        self.portal.invokeFactory(\n+            'Folder',\n+            'excluded-folder',\n+            title=u'Excluded folder',\n+            exclude_from_nav=True,\n+        )\n+        self.portal['excluded-folder'].invokeFactory(\n+            'Folder',\n+            'sub-folder',\n+            title=u'Sub folder',\n+        )\n+\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/Members',\n+                '/plone/test-folder',\n+                '/plone/excluded-folder',\n+            ],\n+        )\n+\n+        # Check also that we we have proper nesting\n+        self.registry['plone.navigation_depth'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            ['/plone', '/plone/Members', '/plone/excluded-folder'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone/excluded-folder']],\n+            ['/plone/excluded-folder/sub-folder'],\n+        )\n+\n+        self.registry['plone.navigation_depth'] = 1\n+        self.registry['plone.show_excluded_items'] = False\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members', '/plone/test-folder'],\n+        )\n+\n+        # If we increase the navigation depth to 2 the sub folder in the\n+        # exclude folder it is there but unlinked\n+        self.registry['plone.navigation_depth'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            ['/plone', '/plone/Members', '/plone/excluded-folder'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members', '/plone/test-folder'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone/excluded-folder']],\n+            ['/plone/excluded-folder/sub-folder'],\n+        )\n+\n+        self.portal['excluded-folder']['sub-folder'].exclude_from_nav = True\n+        self.portal['excluded-folder']['sub-folder'].reindexObject()\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            ['/plone', '/plone/Members'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members', '/plone/test-folder'],\n+        )\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex dc684d65..e59429e9 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -4,8 +4,6 @@\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.utils import _createObjectByType\n \n \n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-18T18:28:28+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/544b37bb8a85f9ebad581ae8e6326ef3373c0410

Merge remote-tracking branch 'origin/master' into 2516-fixup

Files changed:
M CHANGES.rst
M setup.py
D news/176.bugfix
D news/180.bugfix
D news/2516.feature

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex adf0aa11..5d8f3f68 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,24 @@ Changelog\n \n .. towncrier release notes start\n \n+3.1.0 (2019-02-13)\n+------------------\n+\n+New features:\n+\n+\n+- Added multilevel dropdown navigation [agitator] (#2516)\n+\n+\n+Bug fixes:\n+\n+\n+- fix python3 compatibility [petschki] (#176)\n+- Fix some issues with the new navigation. (Fixes\n+  https://github.com/plone/Products.CMFPlone/issues/2731 and\n+  https://github.com/plone/Products.CMFPlone/issues/2730) [pbauer] (#180)\n+\n+\n 3.0.0 (2018-10-30)\n ------------------\n \ndiff --git a/news/176.bugfix b/news/176.bugfix\ndeleted file mode 100644\nindex 44a01ae5..00000000\n--- a/news/176.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-fix python3 compatibility\n-[petschki]\ndiff --git a/news/180.bugfix b/news/180.bugfix\ndeleted file mode 100644\nindex c98972eb..00000000\n--- a/news/180.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Fix some issues with the new navigation. (Fixes https://github.com/plone/Products.CMFPlone/issues/2731 and https://github.com/plone/Products.CMFPlone/issues/2730)\n-[pbauer]\n-\ndiff --git a/news/2516.feature b/news/2516.feature\ndeleted file mode 100644\nindex dd5aeb5f..00000000\n--- a/news/2516.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Added multilevel dropdown navigation\n-[agitator]\ndiff --git a/setup.py b/setup.py\nindex bd7bf360..d575507e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = \'3.0.1.dev0\'\n+version = \'3.1.1.dev0\'\n \n long_description = \\\n     open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-18T18:52:12+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/ea2caccc85f3bf3f8c41c6e77435f6b7b9bcd7e6

Old tab could also have a name

Files changed:
M plone/app/layout/navigation/navtree.py

b"diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex bda9279a..bdce29b0 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -430,7 +430,11 @@ def navtree(self):\n                 'review_state': None,\n             })\n             if 'title' not in entry:\n-                entry['title'] = tab.get('description') or tab['id']\n+                entry['title'] = (\n+                    tab.get('name')\n+                    or tab.get('description')\n+                    or tab['id']\n+                )\n             entry['title'] = safe_unicode(entry['title'])\n             ret[navtree_path].append(entry)\n \n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-18T23:53:10+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/c95e85e3bebd49f9761ba11fb3e61a24058624b5

Update and expand tests

Files changed:
M plone/app/layout/viewlets/tests/test_common.py

b"diff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 08402feb..b7f2b888 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -290,10 +290,27 @@ def test_globalnav_navigation_depth(self):\n         nav_tree_provider = getMultiAdapter(\n             (self.portal, request, None), IContentProvider, 'plone.navtree')\n         navtree = nav_tree_provider.navtree\n-        self.assertEqual(len(navtree), 3)\n-        self.assertEqual(len(navtree['/plone']), 3)\n-        self.assertEqual(len(navtree['/plone/folder']), 2)\n-        self.assertEqual(len(navtree['/plone/folder/subfolder']), 1)\n+        self.assertListEqual(\n+            sorted(navtree),\n+            [\n+                '/plone',\n+                '/plone/Members',\n+                '/plone/folder',\n+                '/plone/folder/subfolder'\n+            ],\n+        )\n+        self.assertListEqual(\n+            [x['title'] for x in navtree['/plone']],\n+            [u'Home', u'Members', u'F\xc3\xb6lder', u'Folder 2', u'Folder 3'],\n+        )\n+        self.assertListEqual(\n+            [x['title'] for x in navtree['/plone/folder']],\n+            [u'Subfolder', u'S\xc3\xbcbfolder 2'],\n+        )\n+        self.assertListEqual(\n+            [x['title'] for x in navtree['/plone/folder/subfolder']],\n+            [u'Sub2folder'],\n+        )\n \n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n         gsv.update()\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-19T09:32:10+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/a1993c9b06b2bfe742dfe98ff1f0197566ac3ada

Merge pull request #182 from plone/2516-fixup

Improve the new navigation and add test coverage

Files changed:
A news/181.fixed
A plone/app/layout/navigation/tests/test_navtree_provider.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/tests/test_common.py

b"diff --git a/news/181.fixed b/news/181.fixed\nnew file mode 100644\nindex 00000000..1e23b7fa\n--- /dev/null\n+++ b/news/181.fixed\n@@ -0,0 +1 @@\n+Improve the new navigation and add test coverage [ale-rt]\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex b665683e..bdce29b0 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -3,10 +3,11 @@\n # from catalog queries.\n \n from Acquisition import aq_inner\n+from collections import defaultdict\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.root import getNavigationRoot\n-from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.view import memoize\n+from plone.memoize.view import memoize_contextless\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n@@ -18,7 +19,6 @@\n from zope.contentprovider.provider import ContentProviderBase\n from zope.interface import implementer\n \n-\n import six\n \n \n@@ -386,7 +386,7 @@ class NavTreeProvider(ContentProviderBase):\n     )\n \n     @property\n-    @memoize\n+    @memoize_contextless\n     def settings(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(INavigationSchema, prefix='plone')\n@@ -407,67 +407,93 @@ def navtree_depth(self):\n         return self.settings.navigation_depth\n \n     @property\n-    @memoize\n-    def navtree(self):\n-        generate_tabs = self.settings.generate_tabs\n-        lang_current = self.request.get('LANGUAGE', None) or \\\n-            (self.context and aq_inner(self.context).Language()) \\\n+    def current_language(self):\n+        return (\n+            self.request.get('LANGUAGE', None)\n+            or (self.context and aq_inner(self.context).Language())\n             or self.language_settings.default_language\n+        )\n \n-        ret = {}\n-\n-        if generate_tabs:\n-            query = {\n-                'path': {'query': self.navtree_path,\n-                         'depth': self.navtree_depth},\n-                'portal_type': {'query': self.settings.displayed_types},\n-                'exclude_from_nav': False,\n-                'Language': lang_current,\n-                'sort_on': 'getObjPositionInParent',\n-            }\n-            portal_catalog = getToolByName(self.context, 'portal_catalog')\n-\n-            registry = getUtility(IRegistry)\n-            types_using_view = registry.get(\n-                'plone.types_use_view_action_in_listings', [])\n-            res = portal_catalog.searchResults(**query)\n-\n-            for it in res:\n-                pathkey = '/'.join(it.getPath().split('/')[:-1])\n-                url = it.getURL()\n-                if it.portal_type in types_using_view:\n-                    url += '/view'\n-                entry = {\n-                    'id': it.id,\n-                    'uid': it.UID,\n-                    'url': url,\n-                    'title': safe_unicode(it.Title),\n-                    'review_state': it.review_state,\n-                }\n-                ret.setdefault(pathkey, []).append(entry)\n-            return ret\n-\n+    @property\n+    @memoize\n+    def navtree(self):\n+        ret = defaultdict(list)\n         portal_tabs_view = getMultiAdapter((self.context, self.request),\n                                            name='portal_tabs_view')\n-        res = portal_tabs_view.topLevelTabs()\n-\n-        for it in res:\n-            pathkey = self.navtree_path\n-            entry = {\n-                'id': it['id'],\n+        tabs = portal_tabs_view.topLevelTabs()\n+        navtree_path = self.navtree_path\n+        for tab in tabs:\n+            entry = tab.copy()\n+            entry.update({\n+                'path': '/'.join((navtree_path, tab['id'])),\n                 'uid': None,\n-                'url': it['url'],\n-                'title': it['title'],\n                 'review_state': None,\n-            }\n-            ret.setdefault(pathkey, []).append(entry)\n+            })\n+            if 'title' not in entry:\n+                entry['title'] = (\n+                    tab.get('name')\n+                    or tab.get('description')\n+                    or tab['id']\n+                )\n+            entry['title'] = safe_unicode(entry['title'])\n+            ret[navtree_path].append(entry)\n+\n+        if not self.settings.generate_tabs:\n+            return ret\n+\n+        query = {\n+            'path': {\n+                'query': self.navtree_path,\n+                'depth': self.navtree_depth,\n+            },\n+            'portal_type': {'query': self.settings.displayed_types},\n+            'Language': self.current_language,\n+            'sort_on': self.settings.sort_tabs_on,\n+            'is_default_page': False,\n+        }\n+        if self.settings.sort_tabs_reversed:\n+            query['sort_order'] = 'reverse'\n+\n+        if not self.settings.nonfolderish_tabs:\n+            query['is_folderish'] = True\n+\n+        if self.settings.filter_on_workflow:\n+            query['review_state'] = list(\n+                self.settings.workflow_states_to_show or ()\n+            )\n+\n+        if not self.settings.show_excluded_items:\n+            query['exclude_from_nav'] = False\n+\n+        portal_catalog = getToolByName(self.context, 'portal_catalog')\n+        brains = portal_catalog.searchResults(**query)\n \n+        registry = getUtility(IRegistry)\n+        types_using_view = registry.get(\n+            'plone.types_use_view_action_in_listings', [])\n+\n+        for brain in brains:\n+            brain_path = '/'.join(brain.getPath().split('/'))\n+            brain_parent_path = brain_path.rpartition('/')[0]\n+            if brain_parent_path == navtree_path:\n+                # This should be already provided by the portal_tabs_view\n+                continue\n+            url = brain.getURL()\n+            if brain.portal_type in types_using_view:\n+                url += '/view'\n+            entry = {\n+                'id': brain.getId,\n+                'path': brain_path,\n+                'uid': brain.UID,\n+                'url': url,\n+                'title': safe_unicode(brain.Title),\n+                'review_state': brain.review_state,\n+            }\n+            ret[brain_parent_path].append(entry)\n         return ret\n \n     def render_item(self, item, path):\n-        normalizer = getUtility(IIDNormalizer)\n-        item['normalizedid'] = normalizer.normalize(item['id'])\n-        sub = self.build_tree(path + '/' + item['id'], first_run=False)\n+        sub = self.build_tree(item['path'], first_run=False)\n         if sub:\n             item.update({\n                 'sub': sub,\ndiff --git a/plone/app/layout/navigation/tests/test_navtree_provider.py b/plone/app/layout/navigation/tests/test_navtree_provider.py\nnew file mode 100644\nindex 00000000..e8e431e1\n--- /dev/null\n+++ b/plone/app/layout/navigation/tests/test_navtree_provider.py\n@@ -0,0 +1,242 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.layout.testing import INTEGRATION_TESTING\n+from plone.app.layout.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from plone.app.testing import setRoles\n+\n+import unittest\n+\n+\n+class TestNavTreeContentProvider(unittest.TestCase):\n+\n+    layer = INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer['portal']\n+        self.request = self.layer['request']\n+        self.registry = getUtility(IRegistry)\n+        self.folder = self.portal['Members'][TEST_USER_ID]\n+        self.portal.Members.reindexObject()\n+        self.folder.reindexObject()\n+        setRoles(self.portal, TEST_USER_ID, ['Manager'])\n+\n+    def _get_navtree(self):\n+        adapter = getMultiAdapter(\n+            (\n+                self.portal, self.request.clone(),\n+                self.portal.restrictedTraverse('@@view')\n+            ),\n+            name='plone.navtree',\n+        )\n+        return adapter.navtree\n+\n+    def test_default_settings(self):\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+\n+    def test_do_not_generate_tabs(self):\n+        self.registry['plone.generate_tabs'] = False\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html'],\n+        )\n+\n+    def test_generate_tabs_non_folderish(self):\n+        self.registry['plone.nonfolderish_tabs'] = False\n+        self.portal.invokeFactory(\n+            'Document',\n+            'test-doc',\n+            title=u'A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)',\n+        )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+\n+    def test_generate_tabs_sorted(self):\n+        self.portal.invokeFactory(\n+            'Document',\n+            'test-doc-2',\n+            title=u'Document 2',\n+        )\n+        self.portal.invokeFactory(\n+            'Document',\n+            'test-doc-1',\n+            title=u'Document 1',\n+        )\n+        navtree = self._get_navtree()\n+        # default sorting by position in parent\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/Members',\n+                '/plone/test-doc-2',\n+                '/plone/test-doc-1',\n+            ],\n+        )\n+\n+        # check we can sort by title\n+        self.registry['plone.sort_tabs_on'] = u'sortable_title'\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/Members',\n+                '/plone/test-doc-1',\n+                '/plone/test-doc-2',\n+            ],\n+        )\n+\n+        # check we can reverse sorting\n+        self.registry['plone.sort_tabs_reversed'] = True\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/test-doc-2',\n+                '/plone/test-doc-1',\n+                '/plone/Members',\n+            ],\n+        )\n+\n+    def test_generate_tabs_displayed_types(self):\n+        self.registry['plone.displayed_types'] = (\n+            u'Image',\n+            u'File',\n+            u'Link',\n+            u'News Item',\n+            u'Document',\n+            u'Event',\n+        )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+            ],\n+        )\n+\n+    def test_generate_tabs_filter_on_state(self):\n+        self.registry['plone.filter_on_workflow'] = True\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+            ],\n+        )\n+        self.registry['plone.workflow_states_to_show'] = (u'private', )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+\n+        # Let's check this works also with deep navigation\n+        self.registry['plone.navigation_depth'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone', '/plone/Members'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone/Members']],\n+            ['/plone/Members/test_user_1_'],\n+        )\n+\n+    def test_generate_tabs_exclude_from_nav(self):\n+        self.portal.invokeFactory(\n+            'Folder',\n+            'test-folder',\n+            title=u'Test folder',\n+        )\n+        self.portal.invokeFactory(\n+            'Folder',\n+            'excluded-folder',\n+            title=u'Excluded folder',\n+            exclude_from_nav=True,\n+        )\n+        self.portal['excluded-folder'].invokeFactory(\n+            'Folder',\n+            'sub-folder',\n+            title=u'Sub folder',\n+        )\n+\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            [\n+                '/plone/index_html',\n+                '/plone/Members',\n+                '/plone/test-folder',\n+                '/plone/excluded-folder',\n+            ],\n+        )\n+\n+        # Check also that we we have proper nesting\n+        self.registry['plone.navigation_depth'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            ['/plone', '/plone/Members', '/plone/excluded-folder'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone/excluded-folder']],\n+            ['/plone/excluded-folder/sub-folder'],\n+        )\n+\n+        self.registry['plone.navigation_depth'] = 1\n+        self.registry['plone.show_excluded_items'] = False\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), ['/plone'])\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members', '/plone/test-folder'],\n+        )\n+\n+        # If we increase the navigation depth to 2 the sub folder in the\n+        # exclude folder it is there but unlinked\n+        self.registry['plone.navigation_depth'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            ['/plone', '/plone/Members', '/plone/excluded-folder'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members', '/plone/test-folder'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone/excluded-folder']],\n+            ['/plone/excluded-folder/sub-folder'],\n+        )\n+\n+        self.portal['excluded-folder']['sub-folder'].exclude_from_nav = True\n+        self.portal['excluded-folder']['sub-folder'].reindexObject()\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            ['/plone', '/plone/Members'],\n+        )\n+        self.assertListEqual(\n+            [item['path'] for item in navtree['/plone']],\n+            ['/plone/index_html', '/plone/Members', '/plone/test-folder'],\n+        )\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex dc684d65..e59429e9 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -4,8 +4,6 @@\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.utils import _createObjectByType\n \n \ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 08402feb..b7f2b888 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -290,10 +290,27 @@ def test_globalnav_navigation_depth(self):\n         nav_tree_provider = getMultiAdapter(\n             (self.portal, request, None), IContentProvider, 'plone.navtree')\n         navtree = nav_tree_provider.navtree\n-        self.assertEqual(len(navtree), 3)\n-        self.assertEqual(len(navtree['/plone']), 3)\n-        self.assertEqual(len(navtree['/plone/folder']), 2)\n-        self.assertEqual(len(navtree['/plone/folder/subfolder']), 1)\n+        self.assertListEqual(\n+            sorted(navtree),\n+            [\n+                '/plone',\n+                '/plone/Members',\n+                '/plone/folder',\n+                '/plone/folder/subfolder'\n+            ],\n+        )\n+        self.assertListEqual(\n+            [x['title'] for x in navtree['/plone']],\n+            [u'Home', u'Members', u'F\xc3\xb6lder', u'Folder 2', u'Folder 3'],\n+        )\n+        self.assertListEqual(\n+            [x['title'] for x in navtree['/plone/folder']],\n+            [u'Subfolder', u'S\xc3\xbcbfolder 2'],\n+        )\n+        self.assertListEqual(\n+            [x['title'] for x in navtree['/plone/folder/subfolder']],\n+            [u'Sub2folder'],\n+        )\n \n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n         gsv.update()\n"

