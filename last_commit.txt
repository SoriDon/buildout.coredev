Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-11-04T22:06:42+09:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/5747e9550cdd9e023dfc50f6b36ec60d8df93d07

Rename safe_unicode to safe_text and safe_encode to safe_bytes. Keep old names as aliases.

Files changed:
M CHANGES.rst
M Products/CMFPlone/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex dc0d87091..754f13efa 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -74,6 +74,11 @@ New features:\n   in the generated package.json in compile_resources.py.\n   [sunew]\n \n+- Add utility-method safe_nativestring.\n+  [pbauer]\n+\n+- Rename safe_unicode to safe_text and safe_encode to safe_bytes. Keep old aliases.\n+  [pbauer]\n \n Bug fixes:\n \ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 0d932b6c5..26561dde0 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -461,8 +461,8 @@ def safe_callable(obj):\n         return callable(obj)\n \n \n-def safe_unicode(value, encoding=\'utf-8\'):\n-    """Converts a value to unicode, even it is already a unicode string.\n+def safe_text(value, encoding=\'utf-8\'):\n+    """Converts a value to text, even it is already a text string.\n \n         >>> from Products.CMFPlone.utils import safe_unicode\n         >>> test_bytes = u\'\\u01b5\'.encode(\'utf-8\')\n@@ -505,21 +505,27 @@ def safe_unicode(value, encoding=\'utf-8\'):\n     return value\n \n \n-def safe_encode(value, encoding=\'utf-8\'):\n-    """Convert unicode to the specified encoding.\n+safe_unicode = safe_text\n+\n+\n+def safe_bytes(value, encoding=\'utf-8\'):\n+    """Convert text to bytes of the specified encoding.\n     """\n     if isinstance(value, six.text_type):\n         value = value.encode(encoding)\n     return value\n \n \n+safe_encode = safe_bytes\n+\n+\n def safe_nativestring(value, encoding=\'utf-8\'):\n     """Convert a value to str in py2 and to text in py3\n     """\n     if six.PY2 and isinstance(value, six.text_type):\n-        value = safe_encode(value, encoding)\n+        value = safe_bytes(value, encoding)\n     if not six.PY2 and isinstance(value, six.binary_type):\n-        value = safe_unicode(value, encoding)\n+        value = safe_text(value, encoding)\n     return value\n \n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-11-05T08:25:23+09:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/53747763753108489a43751605b548e16f0c7034

Merge pull request #2614 from plone/safe_text

Rename safe_unicode to safe_text and safe_encode to safe_bytes

Files changed:
M CHANGES.rst
M Products/CMFPlone/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex dc0d87091..754f13efa 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -74,6 +74,11 @@ New features:\n   in the generated package.json in compile_resources.py.\n   [sunew]\n \n+- Add utility-method safe_nativestring.\n+  [pbauer]\n+\n+- Rename safe_unicode to safe_text and safe_encode to safe_bytes. Keep old aliases.\n+  [pbauer]\n \n Bug fixes:\n \ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 0d932b6c5..26561dde0 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -461,8 +461,8 @@ def safe_callable(obj):\n         return callable(obj)\n \n \n-def safe_unicode(value, encoding=\'utf-8\'):\n-    """Converts a value to unicode, even it is already a unicode string.\n+def safe_text(value, encoding=\'utf-8\'):\n+    """Converts a value to text, even it is already a text string.\n \n         >>> from Products.CMFPlone.utils import safe_unicode\n         >>> test_bytes = u\'\\u01b5\'.encode(\'utf-8\')\n@@ -505,21 +505,27 @@ def safe_unicode(value, encoding=\'utf-8\'):\n     return value\n \n \n-def safe_encode(value, encoding=\'utf-8\'):\n-    """Convert unicode to the specified encoding.\n+safe_unicode = safe_text\n+\n+\n+def safe_bytes(value, encoding=\'utf-8\'):\n+    """Convert text to bytes of the specified encoding.\n     """\n     if isinstance(value, six.text_type):\n         value = value.encode(encoding)\n     return value\n \n \n+safe_encode = safe_bytes\n+\n+\n def safe_nativestring(value, encoding=\'utf-8\'):\n     """Convert a value to str in py2 and to text in py3\n     """\n     if six.PY2 and isinstance(value, six.text_type):\n-        value = safe_encode(value, encoding)\n+        value = safe_bytes(value, encoding)\n     if not six.PY2 and isinstance(value, six.binary_type):\n-        value = safe_unicode(value, encoding)\n+        value = safe_text(value, encoding)\n     return value\n \n \n'

