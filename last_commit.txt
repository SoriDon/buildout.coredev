Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-11T19:20:16+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/9c17e13fd15dacd0dc88de9c01653f165a10d532

find . -name "*.py" -exec pyupgrade --py38-plus {} +

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/textfield/__init__.py
M plone/app/textfield/browser.py
M plone/app/textfield/editor.py
M plone/app/textfield/handler.py
M plone/app/textfield/interfaces.py
M plone/app/textfield/marshaler.py
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/utils.py
M plone/app/textfield/value.py
M plone/app/textfield/widget.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py\nindex 24fe89a..d4179b1 100644\n--- a/plone/app/textfield/__init__.py\n+++ b/plone/app/textfield/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.value import RichTextValue\n@@ -42,11 +41,11 @@ def __init__(\n \n         if "default" in kw:\n             default = kw["default"]\n-            if isinstance(default, six.text_type):\n+            if isinstance(default, str):\n                 kw["default"] = self.fromUnicode(default)\n                 kw["default"].readonly = True\n \n-        super(RichText, self).__init__(schema=schema, **kw)\n+        super().__init__(schema=schema, **kw)\n \n     def fromUnicode(self, str_val):\n         return RichTextValue(\n@@ -64,7 +63,7 @@ def _validate(self, value):\n             raise Invalid(\n                 _(\n                     "msg_text_too_long",\n-                    default=u"Text is too long. (Maximum ${max} characters.)",\n+                    default="Text is too long. (Maximum ${max} characters.)",\n                     mapping={"max": self.max_length},\n                 )\n             )\ndiff --git a/plone/app/textfield/browser.py b/plone/app/textfield/browser.py\nindex c68dd53..26dd943 100644\n--- a/plone/app/textfield/browser.py\n+++ b/plone/app/textfield/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.textfield.interfaces import ITransformer\n from Products.Five.browser import BrowserView\n@@ -43,7 +42,7 @@ def __call__(self, value=None, fieldName=None, mimeType=None):\n             if not self.major or not self.minor:\n                 mimeType = value.outputMimeType\n             else:\n-                mimeType = "%s/%s" % (self.major, self.minor,)\n+                mimeType = "{}/{}".format(self.major, self.minor)\n \n         transformer = ITransformer(context)\n         return transformer(value, mimeType)\ndiff --git a/plone/app/textfield/editor.py b/plone/app/textfield/editor.py\nindex b9c11b0..434a10a 100644\n--- a/plone/app/textfield/editor.py\n+++ b/plone/app/textfield/editor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield import _\n from plone.app.textfield import interfaces\n from plone.app.textfield import RichText\n@@ -20,7 +19,7 @@ class IRichText(interfaces.IRichText, schema_ifaces.IFromUnicode):\n \n     if HAS_VOCABS:\n         default_mime_type = schema.Choice(\n-            title=_(u"Input format"),\n+            title=_("Input format"),\n             vocabulary="plone.app.vocabularies.AllowedContentTypes",\n             default="text/html",\n         )\n@@ -33,4 +32,4 @@ class IRichText(interfaces.IRichText, schema_ifaces.IFromUnicode):\n     allowed_mime_types = Attribute("")\n \n \n-RichTextFactory = FieldFactory(RichText, _(u"Rich Text"))\n+RichTextFactory = FieldFactory(RichText, _("Rich Text"))\ndiff --git a/plone/app/textfield/handler.py b/plone/app/textfield/handler.py\nindex 7087dc2..11d47e3 100644\n--- a/plone/app/textfield/handler.py\n+++ b/plone/app/textfield/handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield import RichText\n from plone.app.textfield.interfaces import IRichText\n from plone.supermodel.exportimport import BaseHandler\n@@ -17,12 +16,12 @@ class RichTextHandler_(BaseHandler):\n     filteredAttributes.update({"schema": "rw"})\n \n     def __init__(self, klass):\n-        super(RichTextHandler_, self).__init__(klass)\n+        super().__init__(klass)\n \n \n @implementer(IToUnicode)\n @adapter(IRichText)\n-class RichTextToUnicode(object):\n+class RichTextToUnicode:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/textfield/interfaces.py b/plone/app/textfield/interfaces.py\nindex ea139c9..0bb543e 100644\n--- a/plone/app/textfield/interfaces.py\n+++ b/plone/app/textfield/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.i18nmessageid.message import MessageFactory\n from zope.interface import Interface\n@@ -13,24 +12,24 @@ class IRichText(IObject):\n     """\n \n     default_mime_type = schema.ASCIILine(\n-        title=_(u"Default MIME type"), default="text/html",\n+        title=_("Default MIME type"), default="text/html",\n     )\n \n     output_mime_type = schema.ASCIILine(\n-        title=_(u"Default output MIME type"), default="text/x-html-safe"\n+        title=_("Default output MIME type"), default="text/x-html-safe"\n     )\n \n     allowed_mime_types = schema.Tuple(\n-        title=_(u"Allowed MIME types"),\n-        description=_(u"Set to None to disable checking"),\n+        title=_("Allowed MIME types"),\n+        description=_("Set to None to disable checking"),\n         default=None,\n         required=False,\n-        value_type=schema.ASCIILine(title=u"MIME type"),\n+        value_type=schema.ASCIILine(title="MIME type"),\n     )\n \n     max_length = schema.Int(\n-        title=_(u"Maximum length"),\n-        description=_(u"in characters"),\n+        title=_("Maximum length"),\n+        description=_("in characters"),\n         required=False,\n         min=0,\n         default=None,\n@@ -48,29 +47,29 @@ class IRichTextValue(Interface):\n     The object is immutable.\n     """\n \n-    raw = schema.Text(title=_(u"Raw value in the original MIME type"), readonly=True,)\n+    raw = schema.Text(title=_("Raw value in the original MIME type"), readonly=True,)\n \n-    mimeType = schema.ASCIILine(title=_(u"MIME type"), readonly=True,)\n+    mimeType = schema.ASCIILine(title=_("MIME type"), readonly=True,)\n \n     outputMimeType = schema.ASCIILine(\n-        title=_(u"Default output MIME type"), readonly=True,\n+        title=_("Default output MIME type"), readonly=True,\n     )\n \n     encoding = schema.ASCIILine(\n-        title=_(u"Default encoding for the value"),\n-        description=_(u"Mainly used internally"),\n+        title=_("Default encoding for the value"),\n+        description=_("Mainly used internally"),\n         readonly=True,\n     )\n \n     raw_encoded = schema.ASCII(\n-        title=_(u"Get the raw value as an encoded string"),\n-        description=_(u"Mainly used internally"),\n+        title=_("Get the raw value as an encoded string"),\n+        description=_("Mainly used internally"),\n         readonly=True,\n     )\n \n     output = schema.Text(\n-        title=_(u"Transformed value in the target MIME type"),\n-        description=_(u"May be None if the transform cannot be completed"),\n+        title=_("Transformed value in the target MIME type"),\n+        description=_("May be None if the transform cannot be completed"),\n         readonly=True,\n         required=False,\n         missing_value=None,\ndiff --git a/plone/app/textfield/marshaler.py b/plone/app/textfield/marshaler.py\nindex 42d0f24..4fbab90 100644\n--- a/plone/app/textfield/marshaler.py\n+++ b/plone/app/textfield/marshaler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.value import RichTextValue\n from plone.rfc822.defaultfields import BaseFieldMarshaler\n@@ -24,7 +23,7 @@ def decode(\n         self, value, message=None, charset="utf-8", contentType=None, primary=False\n     ):\n \n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             value = value.decode(charset)\n         return RichTextValue(\n             raw=value,\ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex ea88521..16ab714 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app import testing\n from plone.testing import layered\n \n@@ -37,24 +36,21 @@ def testTransformPlain(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/plain",\n                 output_mime_type="text/html",\n             )\n \n-        value = IWithText["text"].fromUnicode(u"Some **text**")\n-        self.assertEquals(u"<p>Some **text**</p>", value.output)\n+        value = IWithText["text"].fromUnicode("Some **text**")\n+        self.assertEqual("<p>Some **text**</p>", value.output)\n \n     def testTransformNone(self):\n         from plone.app.textfield.value import RichTextValue\n \n         value = RichTextValue()\n         # Mostly, these calls simply should not give an error.\n-        self.assertEquals(None, value.raw)\n-        if six.PY2:\n-            self.assertEquals(u"", value.output)\n-        else:\n-            self.assertEquals(None, value.output)\n+        self.assertEqual(None, value.raw)\n+        self.assertEqual(None, value.output)\n \n     def testTransformStructured(self):\n         from zope.interface import Interface\n@@ -63,13 +59,13 @@ def testTransformStructured(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n \n-        value = IWithText["text"].fromUnicode(u"Some **text**")\n-        self.assertEquals(u"<p>Some <strong>text</strong></p>\\n", value.output)\n+        value = IWithText["text"].fromUnicode("Some **text**")\n+        self.assertEqual("<p>Some <strong>text</strong></p>\\n", value.output)\n \n     def testTransformView(self):\n         from zope.interface import Interface, implementer\n@@ -79,7 +75,7 @@ def testTransformView(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n@@ -91,29 +87,29 @@ class Context(PortalContent):\n             text = None\n \n         context = Context()\n-        context.text = IWithText["text"].fromUnicode(u"Some **text**")\n+        context.text = IWithText["text"].fromUnicode("Some **text**")\n \n         self.portal._setObject("context", context)\n         context = self.portal["context"]\n \n         output = context.restrictedTraverse("@@text-transform/text")()\n-        self.assertEquals(u"<p>Some <strong>text</strong></p>", output.strip())\n+        self.assertEqual("<p>Some <strong>text</strong></p>", output.strip())\n \n         output = context.restrictedTraverse("@@text-transform/text/text/plain")()\n-        self.assertEquals(u"Some text", output.strip())\n+        self.assertEqual("Some text", output.strip())\n \n         # test transform shortcircuit when input and output type is the\n         # same. this used to cause infinite recursion\n         class IWithText(Interface):\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/html",\n                 output_mime_type="text/html",\n             )\n \n-        context.text = IWithText["text"].fromUnicode(u"<span>Some html</span>")\n+        context.text = IWithText["text"].fromUnicode("<span>Some html</span>")\n         output = context.restrictedTraverse("@@text-transform/text")()\n-        self.assertEquals(u"<span>Some html</span>", output.strip())\n+        self.assertEqual("<span>Some html</span>", output.strip())\n \n     def testTransformNoneView(self):\n         from zope.interface import Interface, implementer\n@@ -124,7 +120,7 @@ def testTransformNoneView(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n@@ -143,10 +139,10 @@ class Context(PortalContent):\n         context = self.portal["context"]\n \n         output = context.restrictedTraverse("@@text-transform/text")()\n-        self.assertEquals(u"", output.strip())\n+        self.assertEqual("", output.strip())\n \n         output = context.restrictedTraverse("@@text-transform/text/text/plain")()\n-        self.assertEquals(u"", output.strip())\n+        self.assertEqual("", output.strip())\n \n     def testWidgetExtract(self):\n         from zope.interface import Interface, implementer\n@@ -160,7 +156,7 @@ def testWidgetExtract(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n@@ -176,13 +172,13 @@ class Context(PortalContent):\n         widget.update()\n \n         value = widget.extract()\n-        self.assertEquals(NOVALUE, value)\n+        self.assertEqual(NOVALUE, value)\n \n-        request.form["%s" % widget.name] = u"Sample **text**"\n+        request.form["%s" % widget.name] = "Sample **text**"\n         request.form["%s.mimeType" % widget.name] = "text/structured"\n \n         value = widget.extract()\n-        self.assertEquals(u"<p>Sample <strong>text</strong></p>", value.output.strip())\n+        self.assertEqual("<p>Sample <strong>text</strong></p>", value.output.strip())\n \n     def testRichTextWidgetConverter(self):\n         from zope.interface import Interface\n@@ -198,7 +194,7 @@ def testRichTextWidgetConverter(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n                 missing_value=_marker,\n@@ -222,17 +218,17 @@ class IWithText(Interface):\n         self.assertRaises(ValueError, converter.toWidgetValue, b"Foo")\n \n         # Test with unicode input.\n-        self.assertTrue(converter.toFieldValue(u"") is _marker)\n-        self.assertEqual(converter.toFieldValue(u"Foo").raw, u"Foo")\n-        self.assertTrue(isinstance(converter.toFieldValue(u"Foo"), RichTextValue))\n-        self.assertEqual(converter.toWidgetValue(u"").raw, u"")\n-        self.assertEqual(converter.toWidgetValue(u"Foo").raw, u"Foo")\n+        self.assertTrue(converter.toFieldValue("") is _marker)\n+        self.assertEqual(converter.toFieldValue("Foo").raw, "Foo")\n+        self.assertTrue(isinstance(converter.toFieldValue("Foo"), RichTextValue))\n+        self.assertEqual(converter.toWidgetValue("").raw, "")\n+        self.assertEqual(converter.toWidgetValue("Foo").raw, "Foo")\n \n         # Test with RichTextValue input.\n-        self.assertTrue(converter.toFieldValue(RichTextValue(u"")) is _marker)\n-        rich_text = RichTextValue(u"Foo")\n+        self.assertTrue(converter.toFieldValue(RichTextValue("")) is _marker)\n+        rich_text = RichTextValue("Foo")\n         self.assertEqual(converter.toFieldValue(rich_text), rich_text)\n-        self.assertEqual(converter.toFieldValue(rich_text).raw, u"Foo")\n+        self.assertEqual(converter.toFieldValue(rich_text).raw, "Foo")\n         self.assertEqual(converter.toWidgetValue(rich_text), rich_text)\n \n     def testRichTextAreaWidgetConverter(self):\n@@ -249,7 +245,7 @@ def testRichTextAreaWidgetConverter(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n                 missing_value=_marker,\n@@ -273,18 +269,18 @@ class IWithText(Interface):\n         self.assertRaises(ValueError, converter.toWidgetValue, b"Foo")\n \n         # Test with unicode input.\n-        self.assertTrue(converter.toFieldValue(u"") is _marker)\n-        self.assertEqual(converter.toFieldValue(u"Foo").raw, u"Foo")\n-        self.assertTrue(isinstance(converter.toFieldValue(u"Foo"), RichTextValue))\n-        self.assertEqual(converter.toWidgetValue(u""), u"")\n-        self.assertEqual(converter.toWidgetValue(u"Foo"), u"Foo")\n+        self.assertTrue(converter.toFieldValue("") is _marker)\n+        self.assertEqual(converter.toFieldValue("Foo").raw, "Foo")\n+        self.assertTrue(isinstance(converter.toFieldValue("Foo"), RichTextValue))\n+        self.assertEqual(converter.toWidgetValue(""), "")\n+        self.assertEqual(converter.toWidgetValue("Foo"), "Foo")\n \n         # Test with RichTextValue input.\n-        self.assertTrue(converter.toFieldValue(RichTextValue(u"")) is _marker)\n-        rich_text = RichTextValue(u"Foo")\n+        self.assertTrue(converter.toFieldValue(RichTextValue("")) is _marker)\n+        rich_text = RichTextValue("Foo")\n         self.assertEqual(converter.toFieldValue(rich_text), rich_text)\n-        self.assertEqual(converter.toFieldValue(rich_text).raw, u"Foo")\n-        self.assertEqual(converter.toWidgetValue(rich_text), u"Foo")\n+        self.assertEqual(converter.toFieldValue(rich_text).raw, "Foo")\n+        self.assertEqual(converter.toWidgetValue(rich_text), "Foo")\n \n     def testWidgetAllowedTypesDefault(self):\n         from zope.interface import Interface, implementer\n@@ -297,7 +293,7 @@ def testWidgetAllowedTypesDefault(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n@@ -317,8 +313,8 @@ class Context(PortalContent):\n         )\n \n         allowed = widget.allowedMimeTypes()\n-        self.failUnless("text/html" in allowed)\n-        self.failIf("text/structured" in allowed)\n+        self.assertTrue("text/html" in allowed)\n+        self.assertFalse("text/structured" in allowed)\n \n     def testWidgetAllowedTypesField(self):\n         from zope.interface import Interface, implementer\n@@ -331,7 +327,7 @@ def testWidgetAllowedTypesField(self):\n         class IWithText(Interface):\n \n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n                 allowed_mime_types=("text/structured", "text/html"),\n@@ -352,32 +348,20 @@ class Context(PortalContent):\n         )\n \n         allowed = widget.allowedMimeTypes()\n-        self.failUnless("text/html" in allowed)\n-        self.failUnless("text/structured" in allowed)\n+        self.assertTrue("text/html" in allowed)\n+        self.assertTrue("text/structured" in allowed)\n \n     def test_getSize(self):\n         from plone.app.textfield.value import RichTextValue\n \n-        value = RichTextValue(u"\\u2603")\n+        value = RichTextValue("\\u2603")\n         self.assertEqual(3, value.getSize())\n \n \n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub(\n-                "zope.schema._bootstrapinterfaces.WrongType", "WrongType", want\n-            )\n-            want = re.sub("zope.interface.exceptions.Invalid", "Invalid", want)\n-            want = re.sub(\n-                "zope.schema._bootstrapinterfaces.ConstraintNotSatisfied",\n-                "ConstraintNotSatisfied",\n-                want,\n-            )\n-        else:\n-            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n+        want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n \n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n@@ -385,21 +369,21 @@ def check_output(self, want, got, optionflags):\n class TestTextfield(unittest.TestCase):\n     def test_getWysiwygEditor(self):\n         from plone.app.textfield.utils import getWysiwygEditor\n-        editor = getWysiwygEditor(None, [], u"TinyMCE")\n-        self.assertEquals(editor, u"tinymce")\n-        editor = getWysiwygEditor(u"None", [], u"TinyMCE")\n-        self.assertEquals(editor, u"plaintexteditor")\n-        editor = getWysiwygEditor(u"TinyMCE", [u"TinyMCE", u"None"], u"TinyMCE")\n-        self.assertEquals(editor, u"tinymce")\n-        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"None"], u"TinyMCE")\n-        self.assertEquals(editor, u"tinymce")\n-        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"CKeditor", u"None"], u"TinyMCE")\n-        self.assertEquals(editor, u"ckeditor")\n+        editor = getWysiwygEditor(None, [], "TinyMCE")\n+        self.assertEqual(editor, "tinymce")\n+        editor = getWysiwygEditor("None", [], "TinyMCE")\n+        self.assertEqual(editor, "plaintexteditor")\n+        editor = getWysiwygEditor("TinyMCE", ["TinyMCE", "None"], "TinyMCE")\n+        self.assertEqual(editor, "tinymce")\n+        editor = getWysiwygEditor("CKeditor", ["TinyMCE", "None"], "TinyMCE")\n+        self.assertEqual(editor, "tinymce")\n+        editor = getWysiwygEditor("CKeditor", ["TinyMCE", "CKeditor", "None"], "TinyMCE")\n+        self.assertEqual(editor, "ckeditor")\n \n \n def test_suite():\n \n-    suite = unittest.makeSuite(TestIntegration)\n+    suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestIntegration)\n     for doctestfile in ["field.rst", "handler.rst", "marshaler.rst"]:\n         suite.addTest(\n             layered(\ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex b878254..9e2b037 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield.interfaces import ITransformer\n from plone.app.textfield.interfaces import TransformError\n from Products.CMFCore.utils import getToolByName\n@@ -17,7 +16,7 @@\n \n \n @implementer(ITransformer)\n-class PortalTransformsTransformer(object):\n+class PortalTransformsTransformer:\n \n     """Invoke portal_transforms to perform a conversion\n     """\n@@ -31,7 +30,7 @@ def __init__(self, context):\n     def __call__(self, value, mimeType):\n         # shortcut it we have no data\n         if value.raw is None:\n-            return u""\n+            return ""\n \n         # shortcut if we already have the right value\n         if mimeType is value.mimeType:\n@@ -43,12 +42,8 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n-        if six.PY2:\n-            # in Python 2 transforms expect str\n-            source_value = value.raw_encoded\n-        else:\n-            # in Python 3 we pass text\n-            source_value = value.raw\n+        # in Python 3 we pass text\n+        source_value = value.raw\n \n         # check for modified referenced images\n         self.check_referenced_images(source_value, mimeType, value._raw_holder)\n@@ -65,7 +60,7 @@ def __call__(self, value, mimeType):\n             )\n             if data is None:\n                 # TODO: i18n\n-                msg = u\'No transform path found from "%s" to "%s".\' % (\n+                msg = \'No transform path found from "{}" to "{}".\'.format(\n                     value.mimeType,\n                     mimeType,\n                 )\n@@ -77,7 +72,7 @@ def __call__(self, value, mimeType):\n                 # other page.\n                 # The following might work better, but how to get the request?\n                 # IStatusMessage(request).add(msg, type=\'error\')\n-                return u""\n+                return ""\n \n             else:\n                 output = data.getData()\ndiff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex 03988e8..3218b27 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n@@ -83,8 +82,8 @@ def getAvailableWysiwygEditors():\n def getWysiwygEditor(member_editor, available_editors, default_editor):\n     if member_editor is None:\n         return default_editor.lower()\n-    elif member_editor == u\'None\':\n-        return u\'plaintexteditor\'\n+    elif member_editor == \'None\':\n+        return \'plaintexteditor\'\n     elif member_editor in available_editors:\n         return member_editor.lower()\n     else:\ndiff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py\nindex 268af97..e743fcd 100644\n--- a/plone/app/textfield/value.py\n+++ b/plone/app/textfield/value.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.interfaces import ITransformer\n@@ -22,7 +21,7 @@ def __init__(self, value):\n         self.value = value\n \n     def __repr__(self):\n-        return u"<RawValueHolder: %s>" % self.value\n+        return "<RawValueHolder: %s>" % self.value\n \n     def __eq__(self, other):\n         if not isinstance(other, RawValueHolder):\n@@ -37,7 +36,7 @@ def __ne__(self, other):\n \n \n @implementer(IRichTextValue)\n-class RichTextValue(object):\n+class RichTextValue:\n     """The actual value.\n \n     Note that this is not a persistent object, to avoid a separate ZODB object\n@@ -107,10 +106,7 @@ def output_relative_to(self, context):\n         transformer with the site as a context is used instead.\n         """\n         if self.mimeType == self.outputMimeType:\n-            if six.PY2:\n-                return self.raw_encoded\n-            else:\n-                return self.raw\n+            return self.raw\n \n         transformer = ITransformer(context, None)\n         if transformer is None:\n@@ -123,8 +119,8 @@ def output_relative_to(self, context):\n \n     def __repr__(self):\n         return (\n-            u"RichTextValue object. (Did you mean <attribute>.raw or "\n-            u"<attribute>.output?)"\n+            "RichTextValue object. (Did you mean <attribute>.raw or "\n+            "<attribute>.output?)"\n         )\n \n     def __eq__(self, other):\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex 39b80b9..ed5f602 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import ImplicitAcquisitionWrapper\n from Products.CMFCore.utils import getToolByName\n from plone.app.textfield.interfaces import IRichText\n@@ -39,11 +38,11 @@ def allowedMimeTypes():\n @implementer_only(IRichTextWidget)\n class RichTextWidget(TextAreaWidget):\n \n-    klass = u"richTextWidget"\n+    klass = "richTextWidget"\n     value = None\n \n     def update(self):\n-        super(RichTextWidget, self).update()\n+        super().update()\n         addFieldClass(self)\n \n     def wrapped_context(self):\n@@ -66,7 +65,7 @@ def extract(self, default=NOVALUE):\n             return default\n \n         mime_type = self.request.get(\n-            "{0:s}.mimeType".format(self.name), self.field.default_mime_type\n+            f"{self.name:s}.mimeType", self.field.default_mime_type\n         )\n         return RichTextValue(\n             raw=raw,\n@@ -104,25 +103,25 @@ class RichTextConverter(BaseDataConverter):\n     def toWidgetValue(self, value):\n         if IRichTextValue.providedBy(value):\n             return value\n-        elif isinstance(value, six.text_type):\n+        elif isinstance(value, str):\n             return self.field.fromUnicode(value)\n         elif value is None:\n             return None\n         raise ValueError(\n-            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n+            f"Can not convert {repr(value):s} to an IRichTextValue"\n         )\n \n     def toFieldValue(self, value):\n         if IRichTextValue.providedBy(value):\n-            if value.raw == u"":\n+            if value.raw == "":\n                 return self.field.missing_value\n             return value\n-        elif isinstance(value, six.text_type):\n-            if value == u"":\n+        elif isinstance(value, str):\n+            if value == "":\n                 return self.field.missing_value\n             return self.field.fromUnicode(value)\n         raise ValueError(\n-            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n+            f"Can not convert {repr(value):s} to an IRichTextValue"\n         )\n \n \n@@ -140,16 +139,16 @@ def toWidgetValue(self, value):\n                 return value.raw\n             elif self.widget.mode == "display":\n                 return value.output_relative_to(self.field.context)\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             return value\n         elif value is None:\n             return None\n-        raise ValueError("Can not convert {0:s} to six.text_type".format(repr(value)))\n+        raise ValueError(f"Can not convert {repr(value):s} to six.text_type")\n \n     def toFieldValue(self, value):\n-        if value == u"":\n+        if value == "":\n             return self.field.missing_value\n-        elif isinstance(value, six.text_type):\n+        elif isinstance(value, str):\n             return RichTextValue(\n                 raw=value,\n                 mimeType=self.field.default_mime_type,\n@@ -157,9 +156,9 @@ def toFieldValue(self, value):\n                 encoding="utf-8",\n             )\n         elif IRichTextValue.providedBy(value):\n-            if value.raw == u"":\n+            if value.raw == "":\n                 return self.field.missing_value\n             return value\n         raise ValueError(\n-            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n+            f"Can not convert {repr(value):s} to an IRichTextValue"\n         )\ndiff --git a/setup.py b/setup.py\nindex d597b5e..98b96da 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-11T19:23:12+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/be0c11dc89d7d02e4c539bad8aee3d780ddf3213

black/isort

Files changed:
M plone/app/textfield/__init__.py
M plone/app/textfield/editor.py
M plone/app/textfield/interfaces.py
M plone/app/textfield/marshaler.py
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/utils.py
M plone/app/textfield/widget.py
M setup.cfg
M setup.py

b'diff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py\nindex d4179b1..9073db3 100644\n--- a/plone/app/textfield/__init__.py\n+++ b/plone/app/textfield/__init__.py\n@@ -17,8 +17,7 @@\n \n @implementer(IRichText, IFromUnicode)\n class RichText(Object):\n-    """Text field that also stores MIME type\n-    """\n+    """Text field that also stores MIME type"""\n \n     default_mime_type = "text/html"\n     output_mime_type = "text/x-html-safe"\ndiff --git a/plone/app/textfield/editor.py b/plone/app/textfield/editor.py\nindex 434a10a..eed88bd 100644\n--- a/plone/app/textfield/editor.py\n+++ b/plone/app/textfield/editor.py\n@@ -16,7 +16,6 @@\n \n \n class IRichText(interfaces.IRichText, schema_ifaces.IFromUnicode):\n-\n     if HAS_VOCABS:\n         default_mime_type = schema.Choice(\n             title=_("Input format"),\ndiff --git a/plone/app/textfield/interfaces.py b/plone/app/textfield/interfaces.py\nindex 0bb543e..3252b1b 100644\n--- a/plone/app/textfield/interfaces.py\n+++ b/plone/app/textfield/interfaces.py\n@@ -8,11 +8,11 @@\n \n \n class IRichText(IObject):\n-    """A text field that stores MIME type\n-    """\n+    """A text field that stores MIME type"""\n \n     default_mime_type = schema.ASCIILine(\n-        title=_("Default MIME type"), default="text/html",\n+        title=_("Default MIME type"),\n+        default="text/html",\n     )\n \n     output_mime_type = schema.ASCIILine(\n@@ -47,12 +47,19 @@ class IRichTextValue(Interface):\n     The object is immutable.\n     """\n \n-    raw = schema.Text(title=_("Raw value in the original MIME type"), readonly=True,)\n+    raw = schema.Text(\n+        title=_("Raw value in the original MIME type"),\n+        readonly=True,\n+    )\n \n-    mimeType = schema.ASCIILine(title=_("MIME type"), readonly=True,)\n+    mimeType = schema.ASCIILine(\n+        title=_("MIME type"),\n+        readonly=True,\n+    )\n \n     outputMimeType = schema.ASCIILine(\n-        title=_("Default output MIME type"), readonly=True,\n+        title=_("Default output MIME type"),\n+        readonly=True,\n     )\n \n     encoding = schema.ASCIILine(\ndiff --git a/plone/app/textfield/marshaler.py b/plone/app/textfield/marshaler.py\nindex 4fbab90..a7e4286 100644\n--- a/plone/app/textfield/marshaler.py\n+++ b/plone/app/textfield/marshaler.py\n@@ -9,8 +9,7 @@\n \n @adapter(Interface, IRichText)\n class RichTextFieldMarshaler(BaseFieldMarshaler):\n-    """Field marshaler for plone.app.textfield values.\n-    """\n+    """Field marshaler for plone.app.textfield values."""\n \n     ascii = False\n \n@@ -22,7 +21,6 @@ def encode(self, value, charset="utf-8", primary=False):\n     def decode(\n         self, value, message=None, charset="utf-8", contentType=None, primary=False\n     ):\n-\n         if isinstance(value, bytes):\n             value = value.decode(charset)\n         return RichTextValue(\ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex 16ab714..39cb28b 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -9,7 +9,6 @@\n \n \n class IntegrationFixture(testing.PloneSandboxLayer):\n-\n     defaultBases = (testing.PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -23,18 +22,16 @@ def setUpZope(self, app, configurationContext):\n \n \n class TestIntegration(unittest.TestCase):\n-\n     layer = IntegrationLayer\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n \n     def testTransformPlain(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/plain",\n@@ -53,11 +50,10 @@ def testTransformNone(self):\n         self.assertEqual(None, value.output)\n \n     def testTransformStructured(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -68,12 +64,12 @@ class IWithText(Interface):\n         self.assertEqual("<p>Some <strong>text</strong></p>\\n", value.output)\n \n     def testTransformView(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n         from Products.CMFCore.PortalContent import PortalContent\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -82,7 +78,6 @@ class IWithText(Interface):\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             id = "context"\n             text = None\n \n@@ -112,13 +107,13 @@ class IWithText(Interface):\n         self.assertEqual("<span>Some html</span>", output.strip())\n \n     def testTransformNoneView(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n         from plone.app.textfield.value import RichTextValue\n         from Products.CMFCore.PortalContent import PortalContent\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -127,7 +122,6 @@ class IWithText(Interface):\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             id = "context"\n             text = None\n \n@@ -145,16 +139,16 @@ class Context(PortalContent):\n         self.assertEqual("", output.strip())\n \n     def testWidgetExtract(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n-        from Products.CMFCore.PortalContent import PortalContent\n         from plone.app.textfield.widget import RichTextWidget\n-        from z3c.form.widget import FieldWidget\n+        from Products.CMFCore.PortalContent import PortalContent\n         from z3c.form.interfaces import NOVALUE\n+        from z3c.form.widget import FieldWidget\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -163,7 +157,6 @@ class IWithText(Interface):\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             text = None\n \n         request = TestRequest()\n@@ -181,18 +174,17 @@ class Context(PortalContent):\n         self.assertEqual("<p>Sample <strong>text</strong></p>", value.output.strip())\n \n     def testRichTextWidgetConverter(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n         from plone.app.textfield.value import RichTextValue\n-        from plone.app.textfield.widget import RichTextWidget\n         from plone.app.textfield.widget import RichTextConverter\n+        from plone.app.textfield.widget import RichTextWidget\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         _marker = object()\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -232,18 +224,17 @@ class IWithText(Interface):\n         self.assertEqual(converter.toWidgetValue(rich_text), rich_text)\n \n     def testRichTextAreaWidgetConverter(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n         from plone.app.textfield.value import RichTextValue\n-        from plone.app.textfield.widget import RichTextWidget\n         from plone.app.textfield.widget import RichTextAreaConverter\n+        from plone.app.textfield.widget import RichTextWidget\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         _marker = object()\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -283,15 +274,15 @@ class IWithText(Interface):\n         self.assertEqual(converter.toWidgetValue(rich_text), "Foo")\n \n     def testWidgetAllowedTypesDefault(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n-        from Products.CMFCore.PortalContent import PortalContent\n         from plone.app.textfield.widget import RichTextWidget\n+        from Products.CMFCore.PortalContent import PortalContent\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -300,7 +291,6 @@ class IWithText(Interface):\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             text = None\n \n         request = TestRequest()\n@@ -317,15 +307,15 @@ class Context(PortalContent):\n         self.assertFalse("text/structured" in allowed)\n \n     def testWidgetAllowedTypesField(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n-        from Products.CMFCore.PortalContent import PortalContent\n         from plone.app.textfield.widget import RichTextWidget\n+        from Products.CMFCore.PortalContent import PortalContent\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         class IWithText(Interface):\n-\n             text = RichText(\n                 title="Text",\n                 default_mime_type="text/structured",\n@@ -335,7 +325,6 @@ class IWithText(Interface):\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             text = None\n \n         request = TestRequest()\n@@ -369,6 +358,7 @@ def check_output(self, want, got, optionflags):\n class TestTextfield(unittest.TestCase):\n     def test_getWysiwygEditor(self):\n         from plone.app.textfield.utils import getWysiwygEditor\n+\n         editor = getWysiwygEditor(None, [], "TinyMCE")\n         self.assertEqual(editor, "tinymce")\n         editor = getWysiwygEditor("None", [], "TinyMCE")\n@@ -377,27 +367,34 @@ def test_getWysiwygEditor(self):\n         self.assertEqual(editor, "tinymce")\n         editor = getWysiwygEditor("CKeditor", ["TinyMCE", "None"], "TinyMCE")\n         self.assertEqual(editor, "tinymce")\n-        editor = getWysiwygEditor("CKeditor", ["TinyMCE", "CKeditor", "None"], "TinyMCE")\n+        editor = getWysiwygEditor(\n+            "CKeditor", ["TinyMCE", "CKeditor", "None"], "TinyMCE"\n+        )\n         self.assertEqual(editor, "ckeditor")\n \n \n def test_suite():\n-\n     suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestIntegration)\n     for doctestfile in ["field.rst", "handler.rst", "marshaler.rst"]:\n         suite.addTest(\n             layered(\n                 doctest.DocFileSuite(\n-                    doctestfile, optionflags=doctest.ELLIPSIS, checker=Py23DocChecker(),\n+                    doctestfile,\n+                    optionflags=doctest.ELLIPSIS,\n+                    checker=Py23DocChecker(),\n                 ),\n                 layer=testing.PLONE_FIXTURE,\n             )\n         )\n-    flags = \\\n-        doctest.NORMALIZE_WHITESPACE | \\\n-        doctest.ELLIPSIS | \\\n-        doctest.IGNORE_EXCEPTION_DETAIL\n-    suite.addTest(layered(\n-        doctest.DocFileSuite("richtext_widget.rst", optionflags=flags),\n-        layer=testing.PLONE_INTEGRATION_TESTING))\n+    flags = (\n+        doctest.NORMALIZE_WHITESPACE\n+        | doctest.ELLIPSIS\n+        | doctest.IGNORE_EXCEPTION_DETAIL\n+    )\n+    suite.addTest(\n+        layered(\n+            doctest.DocFileSuite("richtext_widget.rst", optionflags=flags),\n+            layer=testing.PLONE_INTEGRATION_TESTING,\n+        )\n+    )\n     return suite\ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 9e2b037..3fa15c4 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -18,8 +18,7 @@\n @implementer(ITransformer)\n class PortalTransformsTransformer:\n \n-    """Invoke portal_transforms to perform a conversion\n-    """\n+    """Invoke portal_transforms to perform a conversion"""\n \n     _ccounter_id = "_v_catalog_counter"\n \ndiff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex 3218b27..b407038 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -18,7 +18,10 @@ def markupRegistrySettings(context):\n     try:\n         # get the new registry\n         registry = getUtility(IRegistry, context=context)\n-        settings = registry.forInterface(IMarkupSchema, prefix="plone",)\n+        settings = registry.forInterface(\n+            IMarkupSchema,\n+            prefix="plone",\n+        )\n     except (KeyError, ComponentLookupError):\n         settings = None\n     return settings\n@@ -60,33 +63,31 @@ def getAllowedContentTypes():\n def getDefaultWysiwygEditor():\n     registry = getUtility(IRegistry)\n     try:\n-        records = registry.forInterface(IEditingSchema, check=False,\n-                                        prefix=\'plone\')\n+        records = registry.forInterface(IEditingSchema, check=False, prefix="plone")\n         default_editor = records.default_editor.lower()\n     except AttributeError:\n-        default_editor = \'tinymce\'\n+        default_editor = "tinymce"\n     return default_editor\n \n \n def getAvailableWysiwygEditors():\n     registry = getUtility(IRegistry)\n     try:\n-        records = registry.forInterface(IEditingSchema, check=False,\n-                                        prefix=\'plone\')\n+        records = registry.forInterface(IEditingSchema, check=False, prefix="plone")\n         available = records.available_editors\n     except AttributeError:\n-        available = [\'TinyMCE\']\n+        available = ["TinyMCE"]\n     return available\n \n \n def getWysiwygEditor(member_editor, available_editors, default_editor):\n     if member_editor is None:\n         return default_editor.lower()\n-    elif member_editor == \'None\':\n-        return \'plaintexteditor\'\n+    elif member_editor == "None":\n+        return "plaintexteditor"\n     elif member_editor in available_editors:\n         return member_editor.lower()\n     else:\n         # Member\'s wysiwyg_editor property holds\n         # wysiwyg_editor that has been uninstalled\n-        return default_editor.lower()\n\\ No newline at end of file\n+        return default_editor.lower()\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex ed5f602..4b7d0e8 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -1,13 +1,13 @@\n from Acquisition import ImplicitAcquisitionWrapper\n-from Products.CMFCore.utils import getToolByName\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.utils import getAllowedContentTypes\n-from plone.app.textfield.utils import getDefaultWysiwygEditor\n from plone.app.textfield.utils import getAvailableWysiwygEditors\n+from plone.app.textfield.utils import getDefaultWysiwygEditor\n from plone.app.textfield.utils import getWysiwygEditor\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.utils import closest_content\n+from Products.CMFCore.utils import getToolByName\n from z3c.form.browser.textarea import TextAreaWidget\n from z3c.form.browser.widget import addFieldClass\n from z3c.form.converter import BaseDataConverter\n@@ -31,13 +31,11 @@\n \n class IRichTextWidget(ITextAreaWidget):\n     def allowedMimeTypes():\n-        """Get allowed MIME types\n-        """\n+        """Get allowed MIME types"""\n \n \n @implementer_only(IRichTextWidget)\n class RichTextWidget(TextAreaWidget):\n-\n     klass = "richTextWidget"\n     value = None\n \n@@ -81,9 +79,9 @@ def allowedMimeTypes(self):\n         return list(allowed)\n \n     def getWysiwygEditor(self):\n-        tool = getToolByName(self.wrapped_context(), \'portal_membership\')\n+        tool = getToolByName(self.wrapped_context(), "portal_membership")\n         member = tool.getAuthenticatedMember()\n-        member_editor = member.getProperty(\'wysiwyg_editor\')\n+        member_editor = member.getProperty("wysiwyg_editor")\n         available_editors = getAvailableWysiwygEditors()\n         default_editor = getDefaultWysiwygEditor()\n         return getWysiwygEditor(member_editor, available_editors, default_editor)\n@@ -97,8 +95,7 @@ def RichTextFieldWidget(field, request):\n \n \n class RichTextConverter(BaseDataConverter):\n-    """Data converter for the RichTextWidget\n-    """\n+    """Data converter for the RichTextWidget"""\n \n     def toWidgetValue(self, value):\n         if IRichTextValue.providedBy(value):\n@@ -107,9 +104,7 @@ def toWidgetValue(self, value):\n             return self.field.fromUnicode(value)\n         elif value is None:\n             return None\n-        raise ValueError(\n-            f"Can not convert {repr(value):s} to an IRichTextValue"\n-        )\n+        raise ValueError(f"Can not convert {repr(value):s} to an IRichTextValue")\n \n     def toFieldValue(self, value):\n         if IRichTextValue.providedBy(value):\n@@ -120,9 +115,7 @@ def toFieldValue(self, value):\n             if value == "":\n                 return self.field.missing_value\n             return self.field.fromUnicode(value)\n-        raise ValueError(\n-            f"Can not convert {repr(value):s} to an IRichTextValue"\n-        )\n+        raise ValueError(f"Can not convert {repr(value):s} to an IRichTextValue")\n \n \n class RichTextAreaConverter(BaseDataConverter):\n@@ -159,6 +152,4 @@ def toFieldValue(self, value):\n             if value.raw == "":\n                 return self.field.missing_value\n             return value\n-        raise ValueError(\n-            f"Can not convert {repr(value):s} to an IRichTextValue"\n-        )\n+        raise ValueError(f"Can not convert {repr(value):s} to an IRichTextValue")\ndiff --git a/setup.cfg b/setup.cfg\nindex aecfa92..000ba69 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,7 +3,13 @@ ignore =\n     *.cfg\n     bootstrap.py\n \n+[bdist_wheel]\n+universal = 0\n \n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n-[bdist_wheel]\n-universal = 1\ndiff --git a/setup.py b/setup.py\nindex 98b96da..b2e56a7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -50,7 +50,10 @@\n         "widget": ["z3c.form"],\n         "marshaler": ["plone.rfc822"],\n         "editor": ["plone.schemaeditor"],\n-        "tests": ["plone.app.testing", "plone.supermodel [test]",],\n+        "tests": [\n+            "plone.app.testing",\n+            "plone.supermodel [test]",\n+        ],\n     },\n     entry_points="""\n       """,\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-11T19:32:27+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/55825e1548af7a7b362834b1cb8f9d8670cdfb49

fix leftovers from Python 2 support

Files changed:
M plone/app/textfield/__init__.py
M plone/app/textfield/handler.rst
M plone/app/textfield/marshaler.py
M plone/app/textfield/marshaler.rst
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/value.py
M plone/app/textfield/widget.py
M setup.py

b'diff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py\nindex 9073db3..e8e39e0 100644\n--- a/plone/app/textfield/__init__.py\n+++ b/plone/app/textfield/__init__.py\n@@ -9,8 +9,6 @@\n from zope.schema.interfaces import IFromUnicode\n from zope.schema.interfaces import WrongType\n \n-import six\n-\n \n _ = MessageFactory("plone")\n \ndiff --git a/plone/app/textfield/handler.rst b/plone/app/textfield/handler.rst\nindex 9725d5f..ca8c17f 100644\n--- a/plone/app/textfield/handler.rst\n+++ b/plone/app/textfield/handler.rst\n@@ -23,8 +23,7 @@ First, let\'s wire up the package.\n     ... </configure>\n     ... """\n \n-    >>> import six\n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \ndiff --git a/plone/app/textfield/marshaler.py b/plone/app/textfield/marshaler.py\nindex a7e4286..79a6163 100644\n--- a/plone/app/textfield/marshaler.py\n+++ b/plone/app/textfield/marshaler.py\n@@ -4,8 +4,6 @@\n from zope.component import adapter\n from zope.interface import Interface\n \n-import six\n-\n \n @adapter(Interface, IRichText)\n class RichTextFieldMarshaler(BaseFieldMarshaler):\ndiff --git a/plone/app/textfield/marshaler.rst b/plone/app/textfield/marshaler.rst\nindex d048636..4b6d694 100644\n--- a/plone/app/textfield/marshaler.rst\n+++ b/plone/app/textfield/marshaler.rst\n@@ -18,7 +18,7 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex 39cb28b..5fca07c 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -4,7 +4,6 @@\n import doctest\n import plone.app.textfield\n import re\n-import six\n import unittest\n \n \ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 3fa15c4..cb9a493 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -8,7 +8,6 @@\n \n import logging\n import re\n-import six\n \n \n LOG = logging.getLogger("plone.app.textfield")\n@@ -73,11 +72,7 @@ def __call__(self, value, mimeType):\n                 # IStatusMessage(request).add(msg, type=\'error\')\n                 return ""\n \n-            else:\n-                output = data.getData()\n-                if six.PY2 and isinstance(output, str):\n-                    return output.decode(value.encoding)\n-                return output\n+            return data.getData()\n         except ConflictError:\n             raise\n         except Exception as e:\ndiff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py\nindex e743fcd..95776f8 100644\n--- a/plone/app/textfield/value.py\n+++ b/plone/app/textfield/value.py\n@@ -6,7 +6,6 @@\n from zope.interface import implementer\n \n import logging\n-import six\n \n \n LOG = logging.getLogger("plone.app.textfield")\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex 4b7d0e8..87f43a9 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -1,4 +1,5 @@\n from Acquisition import ImplicitAcquisitionWrapper\n+from collections import UserDict\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.utils import getAllowedContentTypes\n@@ -20,14 +21,6 @@\n from zope.interface import implementer\n from zope.interface import implementer_only\n \n-import six\n-\n-\n-try:\n-    from collections import UserDict\n-except ImportError:\n-    from UserDict import UserDict\n-\n \n class IRichTextWidget(ITextAreaWidget):\n     def allowedMimeTypes():\n@@ -136,7 +129,7 @@ def toWidgetValue(self, value):\n             return value\n         elif value is None:\n             return None\n-        raise ValueError(f"Can not convert {repr(value):s} to six.text_type")\n+        raise ValueError(f"Can not convert {repr(value):s} to string")\n \n     def toFieldValue(self, value):\n         if value == "":\ndiff --git a/setup.py b/setup.py\nindex b2e56a7..4f22d50 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,13 +13,10 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n@@ -35,10 +32,9 @@\n     namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n-        "six",\n         "zope.schema",\n         "zope.interface",\n         "zope.component",\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-11T19:35:14+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/cff3c7d9c7b23194bc9dd4e9fe3098dd17ffe5a5

use plone.base

Files changed:
M plone/app/textfield/utils.py
M plone/app/textfield/value.py
M setup.py

b'diff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex b407038..02931dd 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -1,3 +1,5 @@\n+from plone.base.interfaces import IEditingSchema\n+from plone.base.interfaces import IMarkupSchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n@@ -5,13 +7,6 @@\n from zope.interface.interfaces import ComponentLookupError\n \n \n-try:\n-    from Products.CMFPlone.interfaces import IEditingSchema\n-    from Products.CMFPlone.interfaces import IMarkupSchema\n-except ImportError:\n-    IMarkupSchema = None\n-\n-\n def markupRegistrySettings(context):\n     if not IMarkupSchema:\n         return None\ndiff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py\nindex 95776f8..16f1702 100644\n--- a/plone/app/textfield/value.py\n+++ b/plone/app/textfield/value.py\n@@ -1,7 +1,7 @@\n from persistent import Persistent\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.interfaces import ITransformer\n-from Products.CMFPlone.utils import safe_unicode\n+from plone.base.utils import safe_text\n from zope.component.hooks import getSite\n from zope.interface import implementer\n \n@@ -71,7 +71,7 @@ def encoding(self):\n     def raw_encoded(self):\n         if self._raw_holder.value is None:\n             return ""\n-        happy_value = safe_unicode(self._raw_holder.value, encoding=self.encoding)\n+        happy_value = safe_text(self._raw_holder.value, encoding=self.encoding)\n         return happy_value.encode(self.encoding, "ignore")\n \n     # the current mime type\n@@ -134,4 +134,4 @@ def __ne__(self, other):\n         return not equal\n \n     def getSize(self):\n-        return len(safe_unicode(self.raw).encode("utf-8"))\n+        return len(safe_text(self.raw).encode("utf-8"))\ndiff --git a/setup.py b/setup.py\nindex 4f22d50..eca0d29 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,10 +35,7 @@\n     python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n-        "zope.schema",\n-        "zope.interface",\n-        "zope.component",\n-        "ZODB",\n+        "plone.base",\n     ],\n     extras_require={\n         "portaltransforms": ["Products.PortalTransforms"],\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-11T19:44:51+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/c196e835b9f8f7324d2c39cf053d0617e1cedebf

bump major version and document changes

Files changed:
A news/48.breaking
A news/48.bugfix
M setup.py

b'diff --git a/news/48.breaking b/news/48.breaking\nnew file mode 100644\nindex 0000000..2fa8d35\n--- /dev/null\n+++ b/news/48.breaking\n@@ -0,0 +1 @@\n+Drop Python 2 support. [jensens]\ndiff --git a/news/48.bugfix b/news/48.bugfix\nnew file mode 100644\nindex 0000000..7deed9a\n--- /dev/null\n+++ b/news/48.bugfix\n@@ -0,0 +1,2 @@\n+Depend on plone.base and remove implicit circular dependency on Products.CMFPlone.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex eca0d29..646f88d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "1.3.8.dev0"\n+version = "2.0.0.dev0"\n \n setup(\n     name="plone.app.textfield",\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-12T04:19:36+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/a9e1b88df6ec8efa9ccfa0e2c4c57c4b52f73723

f string

Files changed:
M plone/app/textfield/browser.py

b'diff --git a/plone/app/textfield/browser.py b/plone/app/textfield/browser.py\nindex 26dd943..76b9f3c 100644\n--- a/plone/app/textfield/browser.py\n+++ b/plone/app/textfield/browser.py\n@@ -42,7 +42,7 @@ def __call__(self, value=None, fieldName=None, mimeType=None):\n             if not self.major or not self.minor:\n                 mimeType = value.outputMimeType\n             else:\n-                mimeType = "{}/{}".format(self.major, self.minor)\n+                mimeType = f"{self.major}/{self.minor}"\n \n         transformer = ITransformer(context)\n         return transformer(value, mimeType)\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2023-03-12T04:20:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/ac42cf74588e56736bc8d69544ea8d039eebc5a7

Merge pull request #48 from plone/housekeeping

Housekeeping

Files changed:
A news/48.breaking
A news/48.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/textfield/__init__.py
M plone/app/textfield/browser.py
M plone/app/textfield/editor.py
M plone/app/textfield/handler.py
M plone/app/textfield/handler.rst
M plone/app/textfield/interfaces.py
M plone/app/textfield/marshaler.py
M plone/app/textfield/marshaler.rst
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/utils.py
M plone/app/textfield/value.py
M plone/app/textfield/widget.py
M setup.cfg
M setup.py

b'diff --git a/news/48.breaking b/news/48.breaking\nnew file mode 100644\nindex 0000000..2fa8d35\n--- /dev/null\n+++ b/news/48.breaking\n@@ -0,0 +1 @@\n+Drop Python 2 support. [jensens]\ndiff --git a/news/48.bugfix b/news/48.bugfix\nnew file mode 100644\nindex 0000000..7deed9a\n--- /dev/null\n+++ b/news/48.bugfix\n@@ -0,0 +1,2 @@\n+Depend on plone.base and remove implicit circular dependency on Products.CMFPlone.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py\nindex 24fe89a..e8e39e0 100644\n--- a/plone/app/textfield/__init__.py\n+++ b/plone/app/textfield/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.value import RichTextValue\n@@ -10,16 +9,13 @@\n from zope.schema.interfaces import IFromUnicode\n from zope.schema.interfaces import WrongType\n \n-import six\n-\n \n _ = MessageFactory("plone")\n \n \n @implementer(IRichText, IFromUnicode)\n class RichText(Object):\n-    """Text field that also stores MIME type\n-    """\n+    """Text field that also stores MIME type"""\n \n     default_mime_type = "text/html"\n     output_mime_type = "text/x-html-safe"\n@@ -42,11 +38,11 @@ def __init__(\n \n         if "default" in kw:\n             default = kw["default"]\n-            if isinstance(default, six.text_type):\n+            if isinstance(default, str):\n                 kw["default"] = self.fromUnicode(default)\n                 kw["default"].readonly = True\n \n-        super(RichText, self).__init__(schema=schema, **kw)\n+        super().__init__(schema=schema, **kw)\n \n     def fromUnicode(self, str_val):\n         return RichTextValue(\n@@ -64,7 +60,7 @@ def _validate(self, value):\n             raise Invalid(\n                 _(\n                     "msg_text_too_long",\n-                    default=u"Text is too long. (Maximum ${max} characters.)",\n+                    default="Text is too long. (Maximum ${max} characters.)",\n                     mapping={"max": self.max_length},\n                 )\n             )\ndiff --git a/plone/app/textfield/browser.py b/plone/app/textfield/browser.py\nindex c68dd53..76b9f3c 100644\n--- a/plone/app/textfield/browser.py\n+++ b/plone/app/textfield/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.textfield.interfaces import ITransformer\n from Products.Five.browser import BrowserView\n@@ -43,7 +42,7 @@ def __call__(self, value=None, fieldName=None, mimeType=None):\n             if not self.major or not self.minor:\n                 mimeType = value.outputMimeType\n             else:\n-                mimeType = "%s/%s" % (self.major, self.minor,)\n+                mimeType = f"{self.major}/{self.minor}"\n \n         transformer = ITransformer(context)\n         return transformer(value, mimeType)\ndiff --git a/plone/app/textfield/editor.py b/plone/app/textfield/editor.py\nindex b9c11b0..eed88bd 100644\n--- a/plone/app/textfield/editor.py\n+++ b/plone/app/textfield/editor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield import _\n from plone.app.textfield import interfaces\n from plone.app.textfield import RichText\n@@ -17,10 +16,9 @@\n \n \n class IRichText(interfaces.IRichText, schema_ifaces.IFromUnicode):\n-\n     if HAS_VOCABS:\n         default_mime_type = schema.Choice(\n-            title=_(u"Input format"),\n+            title=_("Input format"),\n             vocabulary="plone.app.vocabularies.AllowedContentTypes",\n             default="text/html",\n         )\n@@ -33,4 +31,4 @@ class IRichText(interfaces.IRichText, schema_ifaces.IFromUnicode):\n     allowed_mime_types = Attribute("")\n \n \n-RichTextFactory = FieldFactory(RichText, _(u"Rich Text"))\n+RichTextFactory = FieldFactory(RichText, _("Rich Text"))\ndiff --git a/plone/app/textfield/handler.py b/plone/app/textfield/handler.py\nindex 7087dc2..11d47e3 100644\n--- a/plone/app/textfield/handler.py\n+++ b/plone/app/textfield/handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield import RichText\n from plone.app.textfield.interfaces import IRichText\n from plone.supermodel.exportimport import BaseHandler\n@@ -17,12 +16,12 @@ class RichTextHandler_(BaseHandler):\n     filteredAttributes.update({"schema": "rw"})\n \n     def __init__(self, klass):\n-        super(RichTextHandler_, self).__init__(klass)\n+        super().__init__(klass)\n \n \n @implementer(IToUnicode)\n @adapter(IRichText)\n-class RichTextToUnicode(object):\n+class RichTextToUnicode:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/textfield/handler.rst b/plone/app/textfield/handler.rst\nindex 9725d5f..ca8c17f 100644\n--- a/plone/app/textfield/handler.rst\n+++ b/plone/app/textfield/handler.rst\n@@ -23,8 +23,7 @@ First, let\'s wire up the package.\n     ... </configure>\n     ... """\n \n-    >>> import six\n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \ndiff --git a/plone/app/textfield/interfaces.py b/plone/app/textfield/interfaces.py\nindex ea139c9..3252b1b 100644\n--- a/plone/app/textfield/interfaces.py\n+++ b/plone/app/textfield/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.i18nmessageid.message import MessageFactory\n from zope.interface import Interface\n@@ -9,28 +8,28 @@\n \n \n class IRichText(IObject):\n-    """A text field that stores MIME type\n-    """\n+    """A text field that stores MIME type"""\n \n     default_mime_type = schema.ASCIILine(\n-        title=_(u"Default MIME type"), default="text/html",\n+        title=_("Default MIME type"),\n+        default="text/html",\n     )\n \n     output_mime_type = schema.ASCIILine(\n-        title=_(u"Default output MIME type"), default="text/x-html-safe"\n+        title=_("Default output MIME type"), default="text/x-html-safe"\n     )\n \n     allowed_mime_types = schema.Tuple(\n-        title=_(u"Allowed MIME types"),\n-        description=_(u"Set to None to disable checking"),\n+        title=_("Allowed MIME types"),\n+        description=_("Set to None to disable checking"),\n         default=None,\n         required=False,\n-        value_type=schema.ASCIILine(title=u"MIME type"),\n+        value_type=schema.ASCIILine(title="MIME type"),\n     )\n \n     max_length = schema.Int(\n-        title=_(u"Maximum length"),\n-        description=_(u"in characters"),\n+        title=_("Maximum length"),\n+        description=_("in characters"),\n         required=False,\n         min=0,\n         default=None,\n@@ -48,29 +47,36 @@ class IRichTextValue(Interface):\n     The object is immutable.\n     """\n \n-    raw = schema.Text(title=_(u"Raw value in the original MIME type"), readonly=True,)\n+    raw = schema.Text(\n+        title=_("Raw value in the original MIME type"),\n+        readonly=True,\n+    )\n \n-    mimeType = schema.ASCIILine(title=_(u"MIME type"), readonly=True,)\n+    mimeType = schema.ASCIILine(\n+        title=_("MIME type"),\n+        readonly=True,\n+    )\n \n     outputMimeType = schema.ASCIILine(\n-        title=_(u"Default output MIME type"), readonly=True,\n+        title=_("Default output MIME type"),\n+        readonly=True,\n     )\n \n     encoding = schema.ASCIILine(\n-        title=_(u"Default encoding for the value"),\n-        description=_(u"Mainly used internally"),\n+        title=_("Default encoding for the value"),\n+        description=_("Mainly used internally"),\n         readonly=True,\n     )\n \n     raw_encoded = schema.ASCII(\n-        title=_(u"Get the raw value as an encoded string"),\n-        description=_(u"Mainly used internally"),\n+        title=_("Get the raw value as an encoded string"),\n+        description=_("Mainly used internally"),\n         readonly=True,\n     )\n \n     output = schema.Text(\n-        title=_(u"Transformed value in the target MIME type"),\n-        description=_(u"May be None if the transform cannot be completed"),\n+        title=_("Transformed value in the target MIME type"),\n+        description=_("May be None if the transform cannot be completed"),\n         readonly=True,\n         required=False,\n         missing_value=None,\ndiff --git a/plone/app/textfield/marshaler.py b/plone/app/textfield/marshaler.py\nindex 42d0f24..79a6163 100644\n--- a/plone/app/textfield/marshaler.py\n+++ b/plone/app/textfield/marshaler.py\n@@ -1,17 +1,13 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.value import RichTextValue\n from plone.rfc822.defaultfields import BaseFieldMarshaler\n from zope.component import adapter\n from zope.interface import Interface\n \n-import six\n-\n \n @adapter(Interface, IRichText)\n class RichTextFieldMarshaler(BaseFieldMarshaler):\n-    """Field marshaler for plone.app.textfield values.\n-    """\n+    """Field marshaler for plone.app.textfield values."""\n \n     ascii = False\n \n@@ -23,8 +19,7 @@ def encode(self, value, charset="utf-8", primary=False):\n     def decode(\n         self, value, message=None, charset="utf-8", contentType=None, primary=False\n     ):\n-\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             value = value.decode(charset)\n         return RichTextValue(\n             raw=value,\ndiff --git a/plone/app/textfield/marshaler.rst b/plone/app/textfield/marshaler.rst\nindex d048636..4b6d694 100644\n--- a/plone/app/textfield/marshaler.rst\n+++ b/plone/app/textfield/marshaler.rst\n@@ -18,7 +18,7 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex ea88521..5fca07c 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -1,16 +1,13 @@\n-# -*- coding: utf-8 -*-\n from plone.app import testing\n from plone.testing import layered\n \n import doctest\n import plone.app.textfield\n import re\n-import six\n import unittest\n \n \n class IntegrationFixture(testing.PloneSandboxLayer):\n-\n     defaultBases = (testing.PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -24,114 +21,106 @@ def setUpZope(self, app, configurationContext):\n \n \n class TestIntegration(unittest.TestCase):\n-\n     layer = IntegrationLayer\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n \n     def testTransformPlain(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/plain",\n                 output_mime_type="text/html",\n             )\n \n-        value = IWithText["text"].fromUnicode(u"Some **text**")\n-        self.assertEquals(u"<p>Some **text**</p>", value.output)\n+        value = IWithText["text"].fromUnicode("Some **text**")\n+        self.assertEqual("<p>Some **text**</p>", value.output)\n \n     def testTransformNone(self):\n         from plone.app.textfield.value import RichTextValue\n \n         value = RichTextValue()\n         # Mostly, these calls simply should not give an error.\n-        self.assertEquals(None, value.raw)\n-        if six.PY2:\n-            self.assertEquals(u"", value.output)\n-        else:\n-            self.assertEquals(None, value.output)\n+        self.assertEqual(None, value.raw)\n+        self.assertEqual(None, value.output)\n \n     def testTransformStructured(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n \n-        value = IWithText["text"].fromUnicode(u"Some **text**")\n-        self.assertEquals(u"<p>Some <strong>text</strong></p>\\n", value.output)\n+        value = IWithText["text"].fromUnicode("Some **text**")\n+        self.assertEqual("<p>Some <strong>text</strong></p>\\n", value.output)\n \n     def testTransformView(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n         from Products.CMFCore.PortalContent import PortalContent\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             id = "context"\n             text = None\n \n         context = Context()\n-        context.text = IWithText["text"].fromUnicode(u"Some **text**")\n+        context.text = IWithText["text"].fromUnicode("Some **text**")\n \n         self.portal._setObject("context", context)\n         context = self.portal["context"]\n \n         output = context.restrictedTraverse("@@text-transform/text")()\n-        self.assertEquals(u"<p>Some <strong>text</strong></p>", output.strip())\n+        self.assertEqual("<p>Some <strong>text</strong></p>", output.strip())\n \n         output = context.restrictedTraverse("@@text-transform/text/text/plain")()\n-        self.assertEquals(u"Some text", output.strip())\n+        self.assertEqual("Some text", output.strip())\n \n         # test transform shortcircuit when input and output type is the\n         # same. this used to cause infinite recursion\n         class IWithText(Interface):\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/html",\n                 output_mime_type="text/html",\n             )\n \n-        context.text = IWithText["text"].fromUnicode(u"<span>Some html</span>")\n+        context.text = IWithText["text"].fromUnicode("<span>Some html</span>")\n         output = context.restrictedTraverse("@@text-transform/text")()\n-        self.assertEquals(u"<span>Some html</span>", output.strip())\n+        self.assertEqual("<span>Some html</span>", output.strip())\n \n     def testTransformNoneView(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n         from plone.app.textfield.value import RichTextValue\n         from Products.CMFCore.PortalContent import PortalContent\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             id = "context"\n             text = None\n \n@@ -143,31 +132,30 @@ class Context(PortalContent):\n         context = self.portal["context"]\n \n         output = context.restrictedTraverse("@@text-transform/text")()\n-        self.assertEquals(u"", output.strip())\n+        self.assertEqual("", output.strip())\n \n         output = context.restrictedTraverse("@@text-transform/text/text/plain")()\n-        self.assertEquals(u"", output.strip())\n+        self.assertEqual("", output.strip())\n \n     def testWidgetExtract(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n-        from Products.CMFCore.PortalContent import PortalContent\n         from plone.app.textfield.widget import RichTextWidget\n-        from z3c.form.widget import FieldWidget\n+        from Products.CMFCore.PortalContent import PortalContent\n         from z3c.form.interfaces import NOVALUE\n+        from z3c.form.widget import FieldWidget\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             text = None\n \n         request = TestRequest()\n@@ -176,29 +164,28 @@ class Context(PortalContent):\n         widget.update()\n \n         value = widget.extract()\n-        self.assertEquals(NOVALUE, value)\n+        self.assertEqual(NOVALUE, value)\n \n-        request.form["%s" % widget.name] = u"Sample **text**"\n+        request.form["%s" % widget.name] = "Sample **text**"\n         request.form["%s.mimeType" % widget.name] = "text/structured"\n \n         value = widget.extract()\n-        self.assertEquals(u"<p>Sample <strong>text</strong></p>", value.output.strip())\n+        self.assertEqual("<p>Sample <strong>text</strong></p>", value.output.strip())\n \n     def testRichTextWidgetConverter(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n         from plone.app.textfield.value import RichTextValue\n-        from plone.app.textfield.widget import RichTextWidget\n         from plone.app.textfield.widget import RichTextConverter\n+        from plone.app.textfield.widget import RichTextWidget\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         _marker = object()\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n                 missing_value=_marker,\n@@ -222,34 +209,33 @@ class IWithText(Interface):\n         self.assertRaises(ValueError, converter.toWidgetValue, b"Foo")\n \n         # Test with unicode input.\n-        self.assertTrue(converter.toFieldValue(u"") is _marker)\n-        self.assertEqual(converter.toFieldValue(u"Foo").raw, u"Foo")\n-        self.assertTrue(isinstance(converter.toFieldValue(u"Foo"), RichTextValue))\n-        self.assertEqual(converter.toWidgetValue(u"").raw, u"")\n-        self.assertEqual(converter.toWidgetValue(u"Foo").raw, u"Foo")\n+        self.assertTrue(converter.toFieldValue("") is _marker)\n+        self.assertEqual(converter.toFieldValue("Foo").raw, "Foo")\n+        self.assertTrue(isinstance(converter.toFieldValue("Foo"), RichTextValue))\n+        self.assertEqual(converter.toWidgetValue("").raw, "")\n+        self.assertEqual(converter.toWidgetValue("Foo").raw, "Foo")\n \n         # Test with RichTextValue input.\n-        self.assertTrue(converter.toFieldValue(RichTextValue(u"")) is _marker)\n-        rich_text = RichTextValue(u"Foo")\n+        self.assertTrue(converter.toFieldValue(RichTextValue("")) is _marker)\n+        rich_text = RichTextValue("Foo")\n         self.assertEqual(converter.toFieldValue(rich_text), rich_text)\n-        self.assertEqual(converter.toFieldValue(rich_text).raw, u"Foo")\n+        self.assertEqual(converter.toFieldValue(rich_text).raw, "Foo")\n         self.assertEqual(converter.toWidgetValue(rich_text), rich_text)\n \n     def testRichTextAreaWidgetConverter(self):\n-        from zope.interface import Interface\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n         from plone.app.textfield.value import RichTextValue\n-        from plone.app.textfield.widget import RichTextWidget\n         from plone.app.textfield.widget import RichTextAreaConverter\n+        from plone.app.textfield.widget import RichTextWidget\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         _marker = object()\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n                 missing_value=_marker,\n@@ -273,38 +259,37 @@ class IWithText(Interface):\n         self.assertRaises(ValueError, converter.toWidgetValue, b"Foo")\n \n         # Test with unicode input.\n-        self.assertTrue(converter.toFieldValue(u"") is _marker)\n-        self.assertEqual(converter.toFieldValue(u"Foo").raw, u"Foo")\n-        self.assertTrue(isinstance(converter.toFieldValue(u"Foo"), RichTextValue))\n-        self.assertEqual(converter.toWidgetValue(u""), u"")\n-        self.assertEqual(converter.toWidgetValue(u"Foo"), u"Foo")\n+        self.assertTrue(converter.toFieldValue("") is _marker)\n+        self.assertEqual(converter.toFieldValue("Foo").raw, "Foo")\n+        self.assertTrue(isinstance(converter.toFieldValue("Foo"), RichTextValue))\n+        self.assertEqual(converter.toWidgetValue(""), "")\n+        self.assertEqual(converter.toWidgetValue("Foo"), "Foo")\n \n         # Test with RichTextValue input.\n-        self.assertTrue(converter.toFieldValue(RichTextValue(u"")) is _marker)\n-        rich_text = RichTextValue(u"Foo")\n+        self.assertTrue(converter.toFieldValue(RichTextValue("")) is _marker)\n+        rich_text = RichTextValue("Foo")\n         self.assertEqual(converter.toFieldValue(rich_text), rich_text)\n-        self.assertEqual(converter.toFieldValue(rich_text).raw, u"Foo")\n-        self.assertEqual(converter.toWidgetValue(rich_text), u"Foo")\n+        self.assertEqual(converter.toFieldValue(rich_text).raw, "Foo")\n+        self.assertEqual(converter.toWidgetValue(rich_text), "Foo")\n \n     def testWidgetAllowedTypesDefault(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n-        from Products.CMFCore.PortalContent import PortalContent\n         from plone.app.textfield.widget import RichTextWidget\n+        from Products.CMFCore.PortalContent import PortalContent\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n             )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             text = None\n \n         request = TestRequest()\n@@ -317,21 +302,21 @@ class Context(PortalContent):\n         )\n \n         allowed = widget.allowedMimeTypes()\n-        self.failUnless("text/html" in allowed)\n-        self.failIf("text/structured" in allowed)\n+        self.assertTrue("text/html" in allowed)\n+        self.assertFalse("text/structured" in allowed)\n \n     def testWidgetAllowedTypesField(self):\n-        from zope.interface import Interface, implementer\n         from plone.app.textfield import RichText\n-        from zope.publisher.browser import TestRequest\n-        from Products.CMFCore.PortalContent import PortalContent\n         from plone.app.textfield.widget import RichTextWidget\n+        from Products.CMFCore.PortalContent import PortalContent\n         from z3c.form.widget import FieldWidget\n+        from zope.interface import implementer\n+        from zope.interface import Interface\n+        from zope.publisher.browser import TestRequest\n \n         class IWithText(Interface):\n-\n             text = RichText(\n-                title=u"Text",\n+                title="Text",\n                 default_mime_type="text/structured",\n                 output_mime_type="text/html",\n                 allowed_mime_types=("text/structured", "text/html"),\n@@ -339,7 +324,6 @@ class IWithText(Interface):\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n-\n             text = None\n \n         request = TestRequest()\n@@ -352,32 +336,20 @@ class Context(PortalContent):\n         )\n \n         allowed = widget.allowedMimeTypes()\n-        self.failUnless("text/html" in allowed)\n-        self.failUnless("text/structured" in allowed)\n+        self.assertTrue("text/html" in allowed)\n+        self.assertTrue("text/structured" in allowed)\n \n     def test_getSize(self):\n         from plone.app.textfield.value import RichTextValue\n \n-        value = RichTextValue(u"\\u2603")\n+        value = RichTextValue("\\u2603")\n         self.assertEqual(3, value.getSize())\n \n \n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub(\n-                "zope.schema._bootstrapinterfaces.WrongType", "WrongType", want\n-            )\n-            want = re.sub("zope.interface.exceptions.Invalid", "Invalid", want)\n-            want = re.sub(\n-                "zope.schema._bootstrapinterfaces.ConstraintNotSatisfied",\n-                "ConstraintNotSatisfied",\n-                want,\n-            )\n-        else:\n-            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n+        want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n \n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n@@ -385,35 +357,43 @@ def check_output(self, want, got, optionflags):\n class TestTextfield(unittest.TestCase):\n     def test_getWysiwygEditor(self):\n         from plone.app.textfield.utils import getWysiwygEditor\n-        editor = getWysiwygEditor(None, [], u"TinyMCE")\n-        self.assertEquals(editor, u"tinymce")\n-        editor = getWysiwygEditor(u"None", [], u"TinyMCE")\n-        self.assertEquals(editor, u"plaintexteditor")\n-        editor = getWysiwygEditor(u"TinyMCE", [u"TinyMCE", u"None"], u"TinyMCE")\n-        self.assertEquals(editor, u"tinymce")\n-        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"None"], u"TinyMCE")\n-        self.assertEquals(editor, u"tinymce")\n-        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"CKeditor", u"None"], u"TinyMCE")\n-        self.assertEquals(editor, u"ckeditor")\n \n+        editor = getWysiwygEditor(None, [], "TinyMCE")\n+        self.assertEqual(editor, "tinymce")\n+        editor = getWysiwygEditor("None", [], "TinyMCE")\n+        self.assertEqual(editor, "plaintexteditor")\n+        editor = getWysiwygEditor("TinyMCE", ["TinyMCE", "None"], "TinyMCE")\n+        self.assertEqual(editor, "tinymce")\n+        editor = getWysiwygEditor("CKeditor", ["TinyMCE", "None"], "TinyMCE")\n+        self.assertEqual(editor, "tinymce")\n+        editor = getWysiwygEditor(\n+            "CKeditor", ["TinyMCE", "CKeditor", "None"], "TinyMCE"\n+        )\n+        self.assertEqual(editor, "ckeditor")\n \n-def test_suite():\n \n-    suite = unittest.makeSuite(TestIntegration)\n+def test_suite():\n+    suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestIntegration)\n     for doctestfile in ["field.rst", "handler.rst", "marshaler.rst"]:\n         suite.addTest(\n             layered(\n                 doctest.DocFileSuite(\n-                    doctestfile, optionflags=doctest.ELLIPSIS, checker=Py23DocChecker(),\n+                    doctestfile,\n+                    optionflags=doctest.ELLIPSIS,\n+                    checker=Py23DocChecker(),\n                 ),\n                 layer=testing.PLONE_FIXTURE,\n             )\n         )\n-    flags = \\\n-        doctest.NORMALIZE_WHITESPACE | \\\n-        doctest.ELLIPSIS | \\\n-        doctest.IGNORE_EXCEPTION_DETAIL\n-    suite.addTest(layered(\n-        doctest.DocFileSuite("richtext_widget.rst", optionflags=flags),\n-        layer=testing.PLONE_INTEGRATION_TESTING))\n+    flags = (\n+        doctest.NORMALIZE_WHITESPACE\n+        | doctest.ELLIPSIS\n+        | doctest.IGNORE_EXCEPTION_DETAIL\n+    )\n+    suite.addTest(\n+        layered(\n+            doctest.DocFileSuite("richtext_widget.rst", optionflags=flags),\n+            layer=testing.PLONE_INTEGRATION_TESTING,\n+        )\n+    )\n     return suite\ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex b878254..cb9a493 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield.interfaces import ITransformer\n from plone.app.textfield.interfaces import TransformError\n from Products.CMFCore.utils import getToolByName\n@@ -9,7 +8,6 @@\n \n import logging\n import re\n-import six\n \n \n LOG = logging.getLogger("plone.app.textfield")\n@@ -17,10 +15,9 @@\n \n \n @implementer(ITransformer)\n-class PortalTransformsTransformer(object):\n+class PortalTransformsTransformer:\n \n-    """Invoke portal_transforms to perform a conversion\n-    """\n+    """Invoke portal_transforms to perform a conversion"""\n \n     _ccounter_id = "_v_catalog_counter"\n \n@@ -31,7 +28,7 @@ def __init__(self, context):\n     def __call__(self, value, mimeType):\n         # shortcut it we have no data\n         if value.raw is None:\n-            return u""\n+            return ""\n \n         # shortcut if we already have the right value\n         if mimeType is value.mimeType:\n@@ -43,12 +40,8 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n-        if six.PY2:\n-            # in Python 2 transforms expect str\n-            source_value = value.raw_encoded\n-        else:\n-            # in Python 3 we pass text\n-            source_value = value.raw\n+        # in Python 3 we pass text\n+        source_value = value.raw\n \n         # check for modified referenced images\n         self.check_referenced_images(source_value, mimeType, value._raw_holder)\n@@ -65,7 +58,7 @@ def __call__(self, value, mimeType):\n             )\n             if data is None:\n                 # TODO: i18n\n-                msg = u\'No transform path found from "%s" to "%s".\' % (\n+                msg = \'No transform path found from "{}" to "{}".\'.format(\n                     value.mimeType,\n                     mimeType,\n                 )\n@@ -77,13 +70,9 @@ def __call__(self, value, mimeType):\n                 # other page.\n                 # The following might work better, but how to get the request?\n                 # IStatusMessage(request).add(msg, type=\'error\')\n-                return u""\n+                return ""\n \n-            else:\n-                output = data.getData()\n-                if six.PY2 and isinstance(output, str):\n-                    return output.decode(value.encoding)\n-                return output\n+            return data.getData()\n         except ConflictError:\n             raise\n         except Exception as e:\ndiff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex 03988e8..02931dd 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -1,4 +1,5 @@\n-# -*- coding: utf-8 -*-\n+from plone.base.interfaces import IEditingSchema\n+from plone.base.interfaces import IMarkupSchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n@@ -6,20 +7,16 @@\n from zope.interface.interfaces import ComponentLookupError\n \n \n-try:\n-    from Products.CMFPlone.interfaces import IEditingSchema\n-    from Products.CMFPlone.interfaces import IMarkupSchema\n-except ImportError:\n-    IMarkupSchema = None\n-\n-\n def markupRegistrySettings(context):\n     if not IMarkupSchema:\n         return None\n     try:\n         # get the new registry\n         registry = getUtility(IRegistry, context=context)\n-        settings = registry.forInterface(IMarkupSchema, prefix="plone",)\n+        settings = registry.forInterface(\n+            IMarkupSchema,\n+            prefix="plone",\n+        )\n     except (KeyError, ComponentLookupError):\n         settings = None\n     return settings\n@@ -61,33 +58,31 @@ def getAllowedContentTypes():\n def getDefaultWysiwygEditor():\n     registry = getUtility(IRegistry)\n     try:\n-        records = registry.forInterface(IEditingSchema, check=False,\n-                                        prefix=\'plone\')\n+        records = registry.forInterface(IEditingSchema, check=False, prefix="plone")\n         default_editor = records.default_editor.lower()\n     except AttributeError:\n-        default_editor = \'tinymce\'\n+        default_editor = "tinymce"\n     return default_editor\n \n \n def getAvailableWysiwygEditors():\n     registry = getUtility(IRegistry)\n     try:\n-        records = registry.forInterface(IEditingSchema, check=False,\n-                                        prefix=\'plone\')\n+        records = registry.forInterface(IEditingSchema, check=False, prefix="plone")\n         available = records.available_editors\n     except AttributeError:\n-        available = [\'TinyMCE\']\n+        available = ["TinyMCE"]\n     return available\n \n \n def getWysiwygEditor(member_editor, available_editors, default_editor):\n     if member_editor is None:\n         return default_editor.lower()\n-    elif member_editor == u\'None\':\n-        return u\'plaintexteditor\'\n+    elif member_editor == "None":\n+        return "plaintexteditor"\n     elif member_editor in available_editors:\n         return member_editor.lower()\n     else:\n         # Member\'s wysiwyg_editor property holds\n         # wysiwyg_editor that has been uninstalled\n-        return default_editor.lower()\n\\ No newline at end of file\n+        return default_editor.lower()\ndiff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py\nindex 268af97..16f1702 100644\n--- a/plone/app/textfield/value.py\n+++ b/plone/app/textfield/value.py\n@@ -1,13 +1,11 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.interfaces import ITransformer\n-from Products.CMFPlone.utils import safe_unicode\n+from plone.base.utils import safe_text\n from zope.component.hooks import getSite\n from zope.interface import implementer\n \n import logging\n-import six\n \n \n LOG = logging.getLogger("plone.app.textfield")\n@@ -22,7 +20,7 @@ def __init__(self, value):\n         self.value = value\n \n     def __repr__(self):\n-        return u"<RawValueHolder: %s>" % self.value\n+        return "<RawValueHolder: %s>" % self.value\n \n     def __eq__(self, other):\n         if not isinstance(other, RawValueHolder):\n@@ -37,7 +35,7 @@ def __ne__(self, other):\n \n \n @implementer(IRichTextValue)\n-class RichTextValue(object):\n+class RichTextValue:\n     """The actual value.\n \n     Note that this is not a persistent object, to avoid a separate ZODB object\n@@ -73,7 +71,7 @@ def encoding(self):\n     def raw_encoded(self):\n         if self._raw_holder.value is None:\n             return ""\n-        happy_value = safe_unicode(self._raw_holder.value, encoding=self.encoding)\n+        happy_value = safe_text(self._raw_holder.value, encoding=self.encoding)\n         return happy_value.encode(self.encoding, "ignore")\n \n     # the current mime type\n@@ -107,10 +105,7 @@ def output_relative_to(self, context):\n         transformer with the site as a context is used instead.\n         """\n         if self.mimeType == self.outputMimeType:\n-            if six.PY2:\n-                return self.raw_encoded\n-            else:\n-                return self.raw\n+            return self.raw\n \n         transformer = ITransformer(context, None)\n         if transformer is None:\n@@ -123,8 +118,8 @@ def output_relative_to(self, context):\n \n     def __repr__(self):\n         return (\n-            u"RichTextValue object. (Did you mean <attribute>.raw or "\n-            u"<attribute>.output?)"\n+            "RichTextValue object. (Did you mean <attribute>.raw or "\n+            "<attribute>.output?)"\n         )\n \n     def __eq__(self, other):\n@@ -139,4 +134,4 @@ def __ne__(self, other):\n         return not equal\n \n     def getSize(self):\n-        return len(safe_unicode(self.raw).encode("utf-8"))\n+        return len(safe_text(self.raw).encode("utf-8"))\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex 39b80b9..87f43a9 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -1,14 +1,14 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import ImplicitAcquisitionWrapper\n-from Products.CMFCore.utils import getToolByName\n+from collections import UserDict\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.utils import getAllowedContentTypes\n-from plone.app.textfield.utils import getDefaultWysiwygEditor\n from plone.app.textfield.utils import getAvailableWysiwygEditors\n+from plone.app.textfield.utils import getDefaultWysiwygEditor\n from plone.app.textfield.utils import getWysiwygEditor\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.utils import closest_content\n+from Products.CMFCore.utils import getToolByName\n from z3c.form.browser.textarea import TextAreaWidget\n from z3c.form.browser.widget import addFieldClass\n from z3c.form.converter import BaseDataConverter\n@@ -21,29 +21,19 @@\n from zope.interface import implementer\n from zope.interface import implementer_only\n \n-import six\n-\n-\n-try:\n-    from collections import UserDict\n-except ImportError:\n-    from UserDict import UserDict\n-\n \n class IRichTextWidget(ITextAreaWidget):\n     def allowedMimeTypes():\n-        """Get allowed MIME types\n-        """\n+        """Get allowed MIME types"""\n \n \n @implementer_only(IRichTextWidget)\n class RichTextWidget(TextAreaWidget):\n-\n-    klass = u"richTextWidget"\n+    klass = "richTextWidget"\n     value = None\n \n     def update(self):\n-        super(RichTextWidget, self).update()\n+        super().update()\n         addFieldClass(self)\n \n     def wrapped_context(self):\n@@ -66,7 +56,7 @@ def extract(self, default=NOVALUE):\n             return default\n \n         mime_type = self.request.get(\n-            "{0:s}.mimeType".format(self.name), self.field.default_mime_type\n+            f"{self.name:s}.mimeType", self.field.default_mime_type\n         )\n         return RichTextValue(\n             raw=raw,\n@@ -82,9 +72,9 @@ def allowedMimeTypes(self):\n         return list(allowed)\n \n     def getWysiwygEditor(self):\n-        tool = getToolByName(self.wrapped_context(), \'portal_membership\')\n+        tool = getToolByName(self.wrapped_context(), "portal_membership")\n         member = tool.getAuthenticatedMember()\n-        member_editor = member.getProperty(\'wysiwyg_editor\')\n+        member_editor = member.getProperty("wysiwyg_editor")\n         available_editors = getAvailableWysiwygEditors()\n         default_editor = getDefaultWysiwygEditor()\n         return getWysiwygEditor(member_editor, available_editors, default_editor)\n@@ -98,32 +88,27 @@ def RichTextFieldWidget(field, request):\n \n \n class RichTextConverter(BaseDataConverter):\n-    """Data converter for the RichTextWidget\n-    """\n+    """Data converter for the RichTextWidget"""\n \n     def toWidgetValue(self, value):\n         if IRichTextValue.providedBy(value):\n             return value\n-        elif isinstance(value, six.text_type):\n+        elif isinstance(value, str):\n             return self.field.fromUnicode(value)\n         elif value is None:\n             return None\n-        raise ValueError(\n-            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n-        )\n+        raise ValueError(f"Can not convert {repr(value):s} to an IRichTextValue")\n \n     def toFieldValue(self, value):\n         if IRichTextValue.providedBy(value):\n-            if value.raw == u"":\n+            if value.raw == "":\n                 return self.field.missing_value\n             return value\n-        elif isinstance(value, six.text_type):\n-            if value == u"":\n+        elif isinstance(value, str):\n+            if value == "":\n                 return self.field.missing_value\n             return self.field.fromUnicode(value)\n-        raise ValueError(\n-            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n-        )\n+        raise ValueError(f"Can not convert {repr(value):s} to an IRichTextValue")\n \n \n class RichTextAreaConverter(BaseDataConverter):\n@@ -140,16 +125,16 @@ def toWidgetValue(self, value):\n                 return value.raw\n             elif self.widget.mode == "display":\n                 return value.output_relative_to(self.field.context)\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             return value\n         elif value is None:\n             return None\n-        raise ValueError("Can not convert {0:s} to six.text_type".format(repr(value)))\n+        raise ValueError(f"Can not convert {repr(value):s} to string")\n \n     def toFieldValue(self, value):\n-        if value == u"":\n+        if value == "":\n             return self.field.missing_value\n-        elif isinstance(value, six.text_type):\n+        elif isinstance(value, str):\n             return RichTextValue(\n                 raw=value,\n                 mimeType=self.field.default_mime_type,\n@@ -157,9 +142,7 @@ def toFieldValue(self, value):\n                 encoding="utf-8",\n             )\n         elif IRichTextValue.providedBy(value):\n-            if value.raw == u"":\n+            if value.raw == "":\n                 return self.field.missing_value\n             return value\n-        raise ValueError(\n-            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n-        )\n+        raise ValueError(f"Can not convert {repr(value):s} to an IRichTextValue")\ndiff --git a/setup.cfg b/setup.cfg\nindex aecfa92..000ba69 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,7 +3,13 @@ ignore =\n     *.cfg\n     bootstrap.py\n \n+[bdist_wheel]\n+universal = 0\n \n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n-[bdist_wheel]\n-universal = 1\ndiff --git a/setup.py b/setup.py\nindex d597b5e..646f88d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = "1.3.8.dev0"\n+version = "2.0.0.dev0"\n \n setup(\n     name="plone.app.textfield",\n@@ -14,13 +13,10 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n@@ -36,14 +32,10 @@\n     namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n-        "six",\n-        "zope.schema",\n-        "zope.interface",\n-        "zope.component",\n-        "ZODB",\n+        "plone.base",\n     ],\n     extras_require={\n         "portaltransforms": ["Products.PortalTransforms"],\n@@ -51,7 +43,10 @@\n         "widget": ["z3c.form"],\n         "marshaler": ["plone.rfc822"],\n         "editor": ["plone.schemaeditor"],\n-        "tests": ["plone.app.testing", "plone.supermodel [test]",],\n+        "tests": [\n+            "plone.app.testing",\n+            "plone.supermodel [test]",\n+        ],\n     },\n     entry_points="""\n       """,\n'

