Repository: plone.testing


Branch: refs/heads/master
Date: 2018-04-06T13:33:41+02:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/plone.testing/commit/b102a2e7938c652876bd92758f434f5e5cd55423

Cleanup (#47)

* Fix most of the code smells Jenkins complains about.

Files changed:
A .isort.cfg
M .gitignore
M CHANGES.rst
M src/plone/testing/_z2_testbrowser.py
M src/plone/testing/layer.py
M src/plone/testing/publisher.py
M src/plone/testing/z2.py
M src/plone/testing/zca.py

diff --git a/.gitignore b/.gitignore
index 945a282..fcfa901 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,7 @@
 *.egg-info
 *.pyc
 *.tox
+.Python
 .coverage
 .installed.cfg
 bin
@@ -8,3 +9,7 @@ coverage.xml
 develop-eggs
 eggs
 htmlcov/
+include/
+lib/
+parts/
+pip-selfcheck.json
diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..dd9f25d
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,6 @@
+[settings]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index 5e1afef..2da271b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix most of the code smells Jenkins complains about.
 
 
 6.0.0 (2018-02-05)
diff --git a/src/plone/testing/_z2_testbrowser.py b/src/plone/testing/_z2_testbrowser.py
index eab8d45..31aa093 100644
--- a/src/plone/testing/_z2_testbrowser.py
+++ b/src/plone/testing/_z2_testbrowser.py
@@ -1,6 +1,8 @@
+# -*- coding: utf-8 -*-
 from zope.testbrowser import browser
 from ZPublisher.httpexceptions import HTTPExceptionHandler
 from ZPublisher.WSGIPublisher import publish_module
+
 import base64
 import re
 
@@ -16,8 +18,8 @@ def authHeader(header):
             u = ''
         if p is None:
             p = ''
-        auth = base64.encodestring('%s:%s' % (u, p))
-        return 'Basic %s' % auth[:-1]
+        auth = base64.encodestring('{0}:{1}'.format(u, p))
+        return 'Basic {0}'.format(auth[:-1])
     return header
 
 
@@ -80,5 +82,4 @@ def __init__(self, app, url=None):
 
 
 # Add `nohost` to testbrowser's set of allowed hosts
-from zope.testbrowser.browser import _allowed
-_allowed.add('nohost')
+browser._allowed.add('nohost')
diff --git a/src/plone/testing/layer.py b/src/plone/testing/layer.py
index de7b820..8ac9600 100644
--- a/src/plone/testing/layer.py
+++ b/src/plone/testing/layer.py
@@ -125,8 +125,7 @@ def _resourceResolutionOrder(self, instance):
         return self._mergeResourceManagers(
             [[instance]] +
             list(map(self._resourceResolutionOrder, instance.__bases__)) +
-            [list(instance.__bases__)]
-        )
+            [list(instance.__bases__)])
 
 
 class Layer(ResourceManager):
@@ -218,8 +217,11 @@ def layered(suite, layer, addLayerToDoctestGlobs=True):
 
     if addLayerToDoctestGlobs:
         for test in suite:
-            if hasattr(test, '_dt_test'):
+            try:
                 globs = test._dt_test.globs
+            except AttributeError:
+                pass
+            else:
                 if 'layer' not in globs:
                     globs['layer'] = layer
 
diff --git a/src/plone/testing/publisher.py b/src/plone/testing/publisher.py
index 5d191be..f3d03c1 100644
--- a/src/plone/testing/publisher.py
+++ b/src/plone/testing/publisher.py
@@ -25,17 +25,23 @@ def setUp(self):
         self['configurationContext'] = context = zca.stackConfigurationContext(
             self.get('configurationContext'))
 
+        # D001 requests to use self.loadZCML instead of xmlconfig.file but
+        # loadZCML is defined in `plone.app.testing` and cannot be used here.
         import zope.security
-        xmlconfig.file('meta.zcml', zope.security, context=context)
-
+        xmlconfig.file(  # noqa: D001
+            'meta.zcml', zope.security, context=context)
         import zope.browsermenu
-        xmlconfig.file('meta.zcml', zope.browsermenu, context=context)
+        xmlconfig.file(  # noqa: D001
+            'meta.zcml', zope.browsermenu, context=context)
         import zope.browserpage
-        xmlconfig.file('meta.zcml', zope.browserpage, context=context)
+        xmlconfig.file(  # noqa: D001
+            'meta.zcml', zope.browserpage, context=context)
         import zope.browserresource
-        xmlconfig.file('meta.zcml', zope.browserresource, context=context)
+        xmlconfig.file(  # noqa: D001
+            'meta.zcml', zope.browserresource, context=context)
         import zope.publisher
-        xmlconfig.file('meta.zcml', zope.publisher, context=context)
+        xmlconfig.file(  # noqa: D001
+            'meta.zcml', zope.publisher, context=context)
 
     def tearDown(self):
         # Zap the stacked configuration context
diff --git a/src/plone/testing/z2.py b/src/plone/testing/z2.py
index b97c2ee..0df6166 100644
--- a/src/plone/testing/z2.py
+++ b/src/plone/testing/z2.py
@@ -91,8 +91,7 @@ def installProduct(app, productName, quiet=False, multiinit=False):
 
     if not found and not quiet:
         sys.stderr.write(
-            'Could not install product {0}\n'.format(productName)
-        )
+            'Could not install product {0}\n'.format(productName))
         sys.stderr.flush()
 
 
@@ -171,8 +170,7 @@ def uninstallProduct(app, productName, quiet=False):
 
     if not found and not quiet:
         sys.stderr.write(
-            'Could not install product {0}\n'.format(productName)
-        )
+            'Could not install product {0}\n'.format(productName))
         sys.stderr.flush()
 
 
@@ -185,7 +183,7 @@ def login(userFolder, userName):
     user = userFolder.getUser(userName)
     if user is None:
         raise ValueError('User could not be found')
-    if not hasattr(user, 'aq_base'):
+    if getattr(user, 'aq_base', None) is None:
         user = user.__of__(userFolder)
     newSecurityManager(None, user)
 
@@ -461,11 +459,14 @@ def null_register_help(
                 pass
             App.ProductContext.ProductContext.registerHelp = null_register_help
 
-        # in Zope 2.13, prevent ZCML from loading during App startup
-        if hasattr(Zope2.App.startup, 'load_zcml'):
+        try:
+            self._Zope2_App_startup_load_zcml = Zope2.App.startup.load_zcml
+        except AttributeError:
+            pass
+        else:
+            # in Zope 2.13, prevent ZCML from loading during App startup
             def null_load_zcml():
                 pass
-            self._Zope2_App_startup_load_zcml = Zope2.App.startup.load_zcml
             Zope2.App.startup.load_zcml = null_load_zcml
 
     def tearDownPatches(self):
@@ -615,8 +616,11 @@ def setUpApp(self):
 
         import App.config
         config = App.config.getConfiguration()
-        if hasattr(config, 'testinghome'):
+        try:
             self._testingHome = config.testinghome
+        except AttributeError:
+            pass
+        else:
             del config.testinghome
             App.config.setConfiguration(config)
 
@@ -646,7 +650,11 @@ def tearDownApp(self):
         Zope2.__bobo_before__ = None
 
         import App.config
-        if hasattr(self, '_testingHome'):
+        try:
+            self._testingHome
+        except AttributeError:
+            pass
+        else:
             config = App.config.getConfiguration()
             config.testinghome = self._testingHome
             App.config.setConfiguration(config)
diff --git a/src/plone/testing/zca.py b/src/plone/testing/zca.py
index 66cddb1..f0ff0c4 100644
--- a/src/plone/testing/zca.py
+++ b/src/plone/testing/zca.py
@@ -203,8 +203,10 @@ def stackConfigurationContext(context=None, name='not named'):
     clone._seen_files = deepcopy(context._seen_files)
     clone._features = deepcopy(context._features)
 
-    if hasattr(context, 'permission_mapping'):
+    try:
         clone.permission_mapping = deepcopy(context.permission_mapping)
+    except AttributeError:
+        pass
 
     # Note: We don't copy ``stack`` or ``actions`` since these are used during
     # ZCML file processing only
@@ -302,7 +304,10 @@ def setUp(self):
 
         self['configurationContext'] = context = stackConfigurationContext(
             self.get('configurationContext'))
-        xmlconfig.file('meta.zcml', zope.component, context=context)
+        # D001 requests to use self.loadZCML instead of xmlconfig.file but
+        # loadZCML is defined in `plone.app.testing` and cannot be used here.
+        xmlconfig.file(  # noqa: D001
+            'meta.zcml', zope.component, context=context)
 
     def tearDown(self):
         del self['configurationContext']
@@ -341,7 +346,7 @@ def setUpZCMLFiles(self):
 
     def loadZCMLFile(self, filename, package):
         from zope.configuration import xmlconfig
-        xmlconfig.file(filename, package, context=self['configurationContext'])
+        xmlconfig.file(filename, package, context=self['configurationContext'])  # noqa: D001,E501
 
     def tearDown(self):
         popGlobalRegistry()


