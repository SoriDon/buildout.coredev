Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-11-07T18:09:06+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/024924d7c77e811f23ac47b38628e91e3c84f869

Fix 'KeyError: file' in browser tests on Python 3.11.

Files changed:
A Products/CMFPlone/tests/test_redirection.py
A news/3663.bugfix
D Products/CMFPlone/tests/redirection.txt

b'diff --git a/Products/CMFPlone/tests/redirection.txt b/Products/CMFPlone/tests/redirection.txt\ndeleted file mode 100644\nindex 1b181ba3f1..0000000000\n--- a/Products/CMFPlone/tests/redirection.txt\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-Redirecting and resource directories\n-====================================\n-\n-When you try to visit a page that does not exist, Plone helpfully\n-shows a link to the parent directory.  Normally this is fine.  But\n-Plone expects this parent directory to be a normal folder or something\n-similar.  It makes some assumptions there that are not valid when the\n-parent is a resource directory.  This gives problems while rendering\n-the default error page.  In particular it results in a TypeError:\n-getTypeInfo.\n-\n-We test this by starting up a test browser:\n-\n-    >>> from plone.testing.zope import Browser\n-    >>> app = layer[\'app\']\n-    >>> browser = Browser(app)\n-\n-Let\'s check what happens when we get a file from a resourceDirectory.\n-This flag exists:\n-\n-  >>> flag_directory = \'http://nohost/plone/++resource++language-flags/\'\n-  >>> browser.open(flag_directory + \'eu.gif\')\n-\n-And this flag does not, so it should raise a 404:\n-\n-  >>> browser.open(flag_directory + \'nonexisting.gif\')\n-  Traceback (most recent call last):\n-  ...\n-  HTTPError: HTTP Error 404: Not Found\n-\n-But it should not give an error while rendering the default error page:\n-\n-  >>> b"the following error occurred while attempting to render the standard error message" in browser.contents\n-  False\n-\n-As it is an image, it should return a JSON message\n-  >>> b\'{"error_type": "NotFound"}\' in browser.contents\n-  True\n-\n-A non-existing page would return a human readable error page\n-  >>> browser.addHeader(\'Accept\', \'text/html\')\n-  >>> browser.open(\'http://nohost/plone/non-existing-page\')\n-  Traceback (most recent call last):\n-  ...\n-  HTTPError: HTTP Error 404: Not Found\n-  >>> "This page does not seem to exist" in browser.contents\n-  True\ndiff --git a/Products/CMFPlone/tests/test_redirection.py b/Products/CMFPlone/tests/test_redirection.py\nnew file mode 100644\nindex 0000000000..550ad97bd9\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_redirection.py\n@@ -0,0 +1,75 @@\n+from plone.testing.zope import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zExceptions import NotFound\n+\n+import unittest\n+\n+\n+class TestRedirection(unittest.TestCase):\n+    """Test redirecting and resource directories\n+\n+    These tests were formerly found in redirection.txt.\n+\n+    When you try to visit a page that does not exist, Plone helpfully\n+    shows a link to the parent directory.  Normally this is fine.  But\n+    Plone expects this parent directory to be a normal folder or something\n+    similar.  It makes some assumptions there that are not valid when the\n+    parent is a resource directory.  This gives problems while rendering\n+    the default error page.  In particular it results in a TypeError:\n+    getTypeInfo.\n+    """\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.browser = Browser(self.layer["app"])\n+        # In most cases it is more informative to get the Python traceback, so we tell\n+        # the browser not to handle errors, but in some tests we will override this.\n+        self.browser.handleErrors = False\n+        self.browser.raiseHttpErrors = True\n+        self.portal = self.layer["portal"]\n+        self.flag_directory = (\n+            f"{self.portal.absolute_url()}/++resource++language-flags/"\n+        )\n+        # Open the portal site root first.  This may be needed to avoid strange error\n+        # messages in case something is wrong:\n+        # ZODB.POSException.ConnectionStateError:\n+        # Shouldn\'t load state for persistent.list.PersistentList\n+        # 0x218f5264c344128e when the connection is closed.\n+        self.browser.open(self.portal.absolute_url())\n+\n+    def test_get_existing_resource_file(self):\n+        # Let\'s check what happens when we get a file from a resourceDirectory.\n+        # This flag exists:\n+        self.browser.open(self.flag_directory + "eu.gif")\n+\n+    def test_get_non_existing_resource_file(self):\n+        # This flag does not exist, so it should raise a 404:\n+        with self.assertRaises(NotFound):\n+            self.browser.open(self.flag_directory + "nonexisting.gif")\n+\n+    def test_error_for_non_existing_resource_file(self):\n+        # The 404 page should not itself give errors.\n+        self.browser.handleErrors = True\n+        # On Python 3.11 we must disable raiseHttpErrors, otherwise you trigger a core\n+        # Python bug.  This seems a test-only problem.  See this issue:\n+        # https://github.com/plone/Products.CMFPlone/issues/3663\n+        self.browser.raiseHttpErrors = False\n+        self.browser.open(self.flag_directory + "nonexisting.gif")\n+        self.assertEqual(self.browser.headers["Status"], "404 Not Found")\n+        # It should not give an error while rendering the default error page:\n+        self.assertNotIn(\n+            b"the following error occurred while attempting to render the standard "\n+            b"error message",\n+            self.browser.contents.lower(),\n+        )\n+        # As it is an image, it should return a JSON message\n+        self.assertIn(b\'{"error_type": "NotFound"}\', self.browser.contents)\n+\n+    def test_non_existing_page(self):\n+        # A non-existing page would return a human readable error page\n+        self.browser.addHeader("Accept", "text/html")\n+        self.browser.handleErrors = True\n+        self.browser.raiseHttpErrors = False\n+        self.browser.open("http://nohost/plone/non-existing-page")\n+        self.assertIn("This page does not seem to exist", self.browser.contents)\ndiff --git a/news/3663.bugfix b/news/3663.bugfix\nnew file mode 100644\nindex 0000000000..c32b9f0a9f\n--- /dev/null\n+++ b/news/3663.bugfix\n@@ -0,0 +1,2 @@\n+Fix \'KeyError: file\' in browser tests on Python 3.11.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-11-08T16:54:37+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/5d38dcac7058628953d80a78155b5a91ddbf24e5

Merge pull request #3673 from plone/maurits-python311-traceback-error-in-tests

Fix 'KeyError: file' in browser tests on Python 3.11.

Files changed:
A Products/CMFPlone/tests/test_redirection.py
A news/3663.bugfix
D Products/CMFPlone/tests/redirection.txt

b'diff --git a/Products/CMFPlone/tests/redirection.txt b/Products/CMFPlone/tests/redirection.txt\ndeleted file mode 100644\nindex 1b181ba3f1..0000000000\n--- a/Products/CMFPlone/tests/redirection.txt\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-Redirecting and resource directories\n-====================================\n-\n-When you try to visit a page that does not exist, Plone helpfully\n-shows a link to the parent directory.  Normally this is fine.  But\n-Plone expects this parent directory to be a normal folder or something\n-similar.  It makes some assumptions there that are not valid when the\n-parent is a resource directory.  This gives problems while rendering\n-the default error page.  In particular it results in a TypeError:\n-getTypeInfo.\n-\n-We test this by starting up a test browser:\n-\n-    >>> from plone.testing.zope import Browser\n-    >>> app = layer[\'app\']\n-    >>> browser = Browser(app)\n-\n-Let\'s check what happens when we get a file from a resourceDirectory.\n-This flag exists:\n-\n-  >>> flag_directory = \'http://nohost/plone/++resource++language-flags/\'\n-  >>> browser.open(flag_directory + \'eu.gif\')\n-\n-And this flag does not, so it should raise a 404:\n-\n-  >>> browser.open(flag_directory + \'nonexisting.gif\')\n-  Traceback (most recent call last):\n-  ...\n-  HTTPError: HTTP Error 404: Not Found\n-\n-But it should not give an error while rendering the default error page:\n-\n-  >>> b"the following error occurred while attempting to render the standard error message" in browser.contents\n-  False\n-\n-As it is an image, it should return a JSON message\n-  >>> b\'{"error_type": "NotFound"}\' in browser.contents\n-  True\n-\n-A non-existing page would return a human readable error page\n-  >>> browser.addHeader(\'Accept\', \'text/html\')\n-  >>> browser.open(\'http://nohost/plone/non-existing-page\')\n-  Traceback (most recent call last):\n-  ...\n-  HTTPError: HTTP Error 404: Not Found\n-  >>> "This page does not seem to exist" in browser.contents\n-  True\ndiff --git a/Products/CMFPlone/tests/test_redirection.py b/Products/CMFPlone/tests/test_redirection.py\nnew file mode 100644\nindex 0000000000..550ad97bd9\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_redirection.py\n@@ -0,0 +1,75 @@\n+from plone.testing.zope import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zExceptions import NotFound\n+\n+import unittest\n+\n+\n+class TestRedirection(unittest.TestCase):\n+    """Test redirecting and resource directories\n+\n+    These tests were formerly found in redirection.txt.\n+\n+    When you try to visit a page that does not exist, Plone helpfully\n+    shows a link to the parent directory.  Normally this is fine.  But\n+    Plone expects this parent directory to be a normal folder or something\n+    similar.  It makes some assumptions there that are not valid when the\n+    parent is a resource directory.  This gives problems while rendering\n+    the default error page.  In particular it results in a TypeError:\n+    getTypeInfo.\n+    """\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.browser = Browser(self.layer["app"])\n+        # In most cases it is more informative to get the Python traceback, so we tell\n+        # the browser not to handle errors, but in some tests we will override this.\n+        self.browser.handleErrors = False\n+        self.browser.raiseHttpErrors = True\n+        self.portal = self.layer["portal"]\n+        self.flag_directory = (\n+            f"{self.portal.absolute_url()}/++resource++language-flags/"\n+        )\n+        # Open the portal site root first.  This may be needed to avoid strange error\n+        # messages in case something is wrong:\n+        # ZODB.POSException.ConnectionStateError:\n+        # Shouldn\'t load state for persistent.list.PersistentList\n+        # 0x218f5264c344128e when the connection is closed.\n+        self.browser.open(self.portal.absolute_url())\n+\n+    def test_get_existing_resource_file(self):\n+        # Let\'s check what happens when we get a file from a resourceDirectory.\n+        # This flag exists:\n+        self.browser.open(self.flag_directory + "eu.gif")\n+\n+    def test_get_non_existing_resource_file(self):\n+        # This flag does not exist, so it should raise a 404:\n+        with self.assertRaises(NotFound):\n+            self.browser.open(self.flag_directory + "nonexisting.gif")\n+\n+    def test_error_for_non_existing_resource_file(self):\n+        # The 404 page should not itself give errors.\n+        self.browser.handleErrors = True\n+        # On Python 3.11 we must disable raiseHttpErrors, otherwise you trigger a core\n+        # Python bug.  This seems a test-only problem.  See this issue:\n+        # https://github.com/plone/Products.CMFPlone/issues/3663\n+        self.browser.raiseHttpErrors = False\n+        self.browser.open(self.flag_directory + "nonexisting.gif")\n+        self.assertEqual(self.browser.headers["Status"], "404 Not Found")\n+        # It should not give an error while rendering the default error page:\n+        self.assertNotIn(\n+            b"the following error occurred while attempting to render the standard "\n+            b"error message",\n+            self.browser.contents.lower(),\n+        )\n+        # As it is an image, it should return a JSON message\n+        self.assertIn(b\'{"error_type": "NotFound"}\', self.browser.contents)\n+\n+    def test_non_existing_page(self):\n+        # A non-existing page would return a human readable error page\n+        self.browser.addHeader("Accept", "text/html")\n+        self.browser.handleErrors = True\n+        self.browser.raiseHttpErrors = False\n+        self.browser.open("http://nohost/plone/non-existing-page")\n+        self.assertIn("This page does not seem to exist", self.browser.contents)\ndiff --git a/news/3663.bugfix b/news/3663.bugfix\nnew file mode 100644\nindex 0000000000..c32b9f0a9f\n--- /dev/null\n+++ b/news/3663.bugfix\n@@ -0,0 +1,2 @@\n+Fix \'KeyError: file\' in browser tests on Python 3.11.\n+[maurits]\n'

