Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-23T17:47:11+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ac61626553becaae6f666a36f7a18c673a866603

Add missing Use UUID as user ID support to POST @users endpoint on user creation.

Files changed:
M CHANGES.rst
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex be840e8c..f62be103 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,12 @@ Changelog\n 3.4.2 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Bugfixes:\n+\n+- Add missing "Use UUID as user ID" support to POST @users endpoint on user creation.\n+  Also improve the userid/username chooser by using the same process as Plone does.\n+  This fixes: https://github.com/plone/plone.restapi/issues/586\n+  [sneridagh]\n \n \n 3.4.1 (2018-07-22)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 9241a724..03e12a63 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -9,6 +9,7 @@\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n from zope.component import getAdapter\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n@@ -150,13 +151,22 @@ def reply(self):\n         send_password_reset = data.pop(\'sendPasswordReset\', None)\n         properties = data\n \n-        # set username based on the login settings (username or email)\n-        if security.use_email_as_login:\n-            username = email\n-            properties[\'username\'] = email\n-        else:\n-            properties[\'username\'] = username\n+        user_id_login_name_data = {\n+            \'username\': username,\n+            \'email\': email,\n+            \'fullname\': data.get(\'fullname\', \'\')\n+        }\n+\n+        register_view = getMultiAdapter(\n+            (self.context, self.request), name=\'register\')\n+\n+        register_view.generate_user_id(user_id_login_name_data)\n+        register_view.generate_login_name(user_id_login_name_data)\n \n+        user_id = user_id_login_name_data.get(\'user_id\', data.get(\'username\'))\n+        login_name = user_id_login_name_data.get(\'login_name\', data.get(\'username\'))  # noqa\n+\n+        properties[\'username\'] = user_id\n         properties[\'email\'] = email\n \n         if not self.can_manage_users and not security.enable_user_pwd_choice:\n@@ -167,7 +177,7 @@ def reply(self):\n         try:\n             registration = getToolByName(portal, \'portal_registration\')\n             user = registration.addMember(\n-                username,\n+                user_id,\n                 password,\n                 roles,\n                 properties=properties\n@@ -178,11 +188,17 @@ def reply(self):\n                 type=\'MissingParameterError\',\n                 message=str(e.message)))\n \n+        if user_id != login_name:\n+            # The user id differs from the login name.  Set the login\n+            # name correctly.\n+            pas = getToolByName(self.context, \'acl_users\')\n+            pas.updateLoginName(user_id, login_name)\n+\n         if send_password_reset:\n-            registration.registeredNotify(username)\n+            registration.registeredNotify(user_id)\n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n-            \'Location\', portal.absolute_url() + \'/@users/\' + username\n+            \'Location\', portal.absolute_url() + \'/@users/\' + user_id\n         )\n         serializer = queryMultiAdapter(\n             (user, self.request),\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 228ddae6..4ed516e2 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -292,6 +292,28 @@ def test_add_anon_no_roles(self):\n         fields = [x[\'field\'] for x in errors]\n         self.assertEqual([\'roles\'], fields)\n \n+    def test_add_user_with_uuid_as_userid_enabled(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n+        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+\n     def test_get_user(self):\n         response = self.api_session.get(\'/@users/noam\')\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-24T10:37:08+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/abb5cfc4a65bab1dc47777bb5e75f8c55d8f2ca8

Fix for Plone 4

Files changed:
M src/plone/restapi/services/users/add.py

b'diff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 03e12a63..130fb1c0 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -5,6 +5,7 @@\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n+from Products.CMFPlone.utils import getFSVersionTuple\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n@@ -32,6 +33,8 @@\n     from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n \n+PLONE5 = getFSVersionTuple()[0] >= 5\n+\n \n class UsersPost(Service):\n     """Creates a new user.\n@@ -151,22 +154,36 @@ def reply(self):\n         send_password_reset = data.pop(\'sendPasswordReset\', None)\n         properties = data\n \n-        user_id_login_name_data = {\n-            \'username\': username,\n-            \'email\': email,\n-            \'fullname\': data.get(\'fullname\', \'\')\n-        }\n+        if PLONE5:\n+            # We are improving the way the userid/login_name is generated using\n+            # Plone\'s plone.app.users utilities directly. Plone 4 lacks of the\n+            # login_name one, so we leave it as it is, improving the Plone 5\n+            # story\n+            user_id_login_name_data = {\n+                \'username\': username,\n+                \'email\': email,\n+                \'fullname\': data.get(\'fullname\', \'\')\n+            }\n+\n+            register_view = getMultiAdapter(\n+                (self.context, self.request), name=\'register\')\n \n-        register_view = getMultiAdapter(\n-            (self.context, self.request), name=\'register\')\n+            register_view.generate_user_id(user_id_login_name_data)\n+            register_view.generate_login_name(user_id_login_name_data)\n \n-        register_view.generate_user_id(user_id_login_name_data)\n-        register_view.generate_login_name(user_id_login_name_data)\n+            user_id = user_id_login_name_data.get(\'user_id\', data.get(\'username\')) # noqa\n+            login_name = user_id_login_name_data.get(\'login_name\', data.get(\'username\'))  # noqa\n \n-        user_id = user_id_login_name_data.get(\'user_id\', data.get(\'username\'))\n-        login_name = user_id_login_name_data.get(\'login_name\', data.get(\'username\'))  # noqa\n+            username = user_id\n+            properties[\'username\'] = user_id\n+        else:\n+            # set username based on the login settings (username or email)\n+            if security.use_email_as_login:\n+                username = email\n+                properties[\'username\'] = email\n+            else:\n+                properties[\'username\'] = username\n \n-        properties[\'username\'] = user_id\n         properties[\'email\'] = email\n \n         if not self.can_manage_users and not security.enable_user_pwd_choice:\n@@ -177,7 +194,7 @@ def reply(self):\n         try:\n             registration = getToolByName(portal, \'portal_registration\')\n             user = registration.addMember(\n-                user_id,\n+                username,\n                 password,\n                 roles,\n                 properties=properties\n@@ -188,17 +205,21 @@ def reply(self):\n                 type=\'MissingParameterError\',\n                 message=str(e.message)))\n \n-        if user_id != login_name:\n-            # The user id differs from the login name.  Set the login\n-            # name correctly.\n-            pas = getToolByName(self.context, \'acl_users\')\n-            pas.updateLoginName(user_id, login_name)\n+        if PLONE5:\n+            # After user creation, we have to fix the login_name if it differs.\n+            # That happens when the email login is enabled and we are using\n+            # UUID as user ID security settings.\n+            if user_id != login_name:\n+                # The user id differs from the login name.  Set the login\n+                # name correctly.\n+                pas = getToolByName(self.context, \'acl_users\')\n+                pas.updateLoginName(user_id, login_name)\n \n         if send_password_reset:\n-            registration.registeredNotify(user_id)\n+            registration.registeredNotify(username)\n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n-            \'Location\', portal.absolute_url() + \'/@users/\' + user_id\n+            \'Location\', portal.absolute_url() + \'/@users/\' + username\n         )\n         serializer = queryMultiAdapter(\n             (user, self.request),\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-27T10:22:15+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/db3babfc776ea73117b1249a6b1613600c7a7ab8

Merge pull request #587 from plone/add-missing-use-uuid-as-user-id-support

Add missing Use UUID as user ID support to POST @users endpoint on us…

Files changed:
M CHANGES.rst
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex be840e8c..f62be103 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,12 @@ Changelog\n 3.4.2 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Bugfixes:\n+\n+- Add missing "Use UUID as user ID" support to POST @users endpoint on user creation.\n+  Also improve the userid/username chooser by using the same process as Plone does.\n+  This fixes: https://github.com/plone/plone.restapi/issues/586\n+  [sneridagh]\n \n \n 3.4.1 (2018-07-22)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 9241a724..130fb1c0 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -5,10 +5,12 @@\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n+from Products.CMFPlone.utils import getFSVersionTuple\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n from zope.component import getAdapter\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n@@ -31,6 +33,8 @@\n     from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n \n+PLONE5 = getFSVersionTuple()[0] >= 5\n+\n \n class UsersPost(Service):\n     """Creates a new user.\n@@ -150,12 +154,35 @@ def reply(self):\n         send_password_reset = data.pop(\'sendPasswordReset\', None)\n         properties = data\n \n-        # set username based on the login settings (username or email)\n-        if security.use_email_as_login:\n-            username = email\n-            properties[\'username\'] = email\n+        if PLONE5:\n+            # We are improving the way the userid/login_name is generated using\n+            # Plone\'s plone.app.users utilities directly. Plone 4 lacks of the\n+            # login_name one, so we leave it as it is, improving the Plone 5\n+            # story\n+            user_id_login_name_data = {\n+                \'username\': username,\n+                \'email\': email,\n+                \'fullname\': data.get(\'fullname\', \'\')\n+            }\n+\n+            register_view = getMultiAdapter(\n+                (self.context, self.request), name=\'register\')\n+\n+            register_view.generate_user_id(user_id_login_name_data)\n+            register_view.generate_login_name(user_id_login_name_data)\n+\n+            user_id = user_id_login_name_data.get(\'user_id\', data.get(\'username\')) # noqa\n+            login_name = user_id_login_name_data.get(\'login_name\', data.get(\'username\'))  # noqa\n+\n+            username = user_id\n+            properties[\'username\'] = user_id\n         else:\n-            properties[\'username\'] = username\n+            # set username based on the login settings (username or email)\n+            if security.use_email_as_login:\n+                username = email\n+                properties[\'username\'] = email\n+            else:\n+                properties[\'username\'] = username\n \n         properties[\'email\'] = email\n \n@@ -178,6 +205,16 @@ def reply(self):\n                 type=\'MissingParameterError\',\n                 message=str(e.message)))\n \n+        if PLONE5:\n+            # After user creation, we have to fix the login_name if it differs.\n+            # That happens when the email login is enabled and we are using\n+            # UUID as user ID security settings.\n+            if user_id != login_name:\n+                # The user id differs from the login name.  Set the login\n+                # name correctly.\n+                pas = getToolByName(self.context, \'acl_users\')\n+                pas.updateLoginName(user_id, login_name)\n+\n         if send_password_reset:\n             registration.registeredNotify(username)\n         self.request.response.setStatus(201)\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 228ddae6..4ed516e2 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -292,6 +292,28 @@ def test_add_anon_no_roles(self):\n         fields = [x[\'field\'] for x in errors]\n         self.assertEqual([\'roles\'], fields)\n \n+    def test_add_user_with_uuid_as_userid_enabled(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n+        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+\n     def test_get_user(self):\n         response = self.api_session.get(\'/@users/noam\')\n \n'

