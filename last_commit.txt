Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-04-06T16:44:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/8481c882daebc4585edf3bee5ce2b6cf86a1eaab

fix deprecation warn, rm six, isort, black metadata.py

Files changed:
M plone/app/dexterity/behaviors/metadata.py
M setup.cfg

b'diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py\nindex b4961de..3f08312 100644\n--- a/plone/app/dexterity/behaviors/metadata.py\n+++ b/plone/app/dexterity/behaviors/metadata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from datetime import datetime\n from DateTime import DateTime\n@@ -8,12 +7,11 @@\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces.siteroot import IPloneSiteRoot\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import safe_unicode\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n-from six.moves import map\n from z3c.form.interfaces import IAddForm\n from z3c.form.interfaces import IEditForm\n from z3c.form.widget import ComputedWidgetAttribute\n@@ -24,10 +22,6 @@\n from zope.interface import invariant\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n-from zope.schema.interfaces import ISequence\n-from zope.schema.interfaces import IText\n-\n-import six\n \n \n # Behavior interfaces to display Dublin Core metadata fields on Dexterity\n@@ -58,7 +52,7 @@ def default_language(context):\n     if not language:\n         # Finally, if we still don\'t have a language, then just use site\'s\n         # default\n-        pl = getToolByName(getSite(), \'portal_languages\')\n+        pl = getToolByName(getSite(), "portal_languages")\n         language = pl.getDefaultLanguage()\n \n     return language\n@@ -68,27 +62,23 @@ def default_language(context):\n class IBasic(model.Schema):\n \n     # default fieldset\n-    title = schema.TextLine(\n-        title=_(u\'label_title\', default=u\'Title\'),\n-        required=True\n-    )\n+    title = schema.TextLine(title=_(u"label_title", default=u"Title"), required=True)\n \n     description = schema.Text(\n-        title=_(u\'label_description\', default=u\'Summary\'),\n+        title=_(u"label_description", default=u"Summary"),\n         description=_(\n-            u\'help_description\',\n-            default=u\'Used in item listings and search results.\'\n+            u"help_description", default=u"Used in item listings and search results."\n         ),\n         required=False,\n-        missing_value=u\'\',\n+        missing_value=u"",\n     )\n \n-    directives.order_before(description=\'*\')\n-    directives.order_before(title=\'*\')\n+    directives.order_before(description="*")\n+    directives.order_before(title="*")\n \n-    directives.omitted(\'title\', \'description\')\n-    directives.no_omit(IEditForm, \'title\', \'description\')\n-    directives.no_omit(IAddForm, \'title\', \'description\')\n+    directives.omitted("title", "description")\n+    directives.no_omit(IEditForm, "title", "description")\n+    directives.no_omit(IAddForm, "title", "description")\n \n \n @provider(IFormFieldProvider)\n@@ -96,87 +86,89 @@ class ICategorization(model.Schema):\n \n     # categorization fieldset\n     model.fieldset(\n-        \'categorization\',\n-        label=_(u\'label_schema_categorization\', default=u\'Categorization\'),\n-        fields=[\'subjects\', \'language\'],\n+        "categorization",\n+        label=_(u"label_schema_categorization", default=u"Categorization"),\n+        fields=["subjects", "language"],\n     )\n \n     subjects = schema.Tuple(\n-        title=_(u\'label_tags\', default=u\'Tags\'),\n+        title=_(u"label_tags", default=u"Tags"),\n         description=_(\n-            u\'help_tags\',\n-            default=u\'Tags are commonly used for ad-hoc organization of \' +\n-                    u\'content.\'\n+            u"help_tags",\n+            default=u"Tags are commonly used for ad-hoc organization of " + u"content.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=(),\n     )\n     directives.widget(\n-        \'subjects\',\n-        AjaxSelectFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Keywords\'\n+        "subjects", AjaxSelectFieldWidget, vocabulary="plone.app.vocabularies.Keywords"\n     )\n \n     language = schema.Choice(\n-        title=_(u\'label_language\', default=u\'Language\'),\n-        vocabulary=\'plone.app.vocabularies.SupportedContentLanguages\',\n+        title=_(u"label_language", default=u"Language"),\n+        vocabulary="plone.app.vocabularies.SupportedContentLanguages",\n         required=False,\n-        missing_value=\'\',\n+        missing_value="",\n         defaultFactory=default_language,\n     )\n-    directives.widget(\'language\', SelectFieldWidget)\n+    directives.widget("language", SelectFieldWidget)\n \n-    directives.omitted(\'subjects\', \'language\')\n-    directives.no_omit(IEditForm, \'subjects\', \'language\')\n-    directives.no_omit(IAddForm, \'subjects\', \'language\')\n+    directives.omitted("subjects", "language")\n+    directives.no_omit(IEditForm, "subjects", "language")\n+    directives.no_omit(IAddForm, "subjects", "language")\n \n \n class EffectiveAfterExpires(Invalid):\n-    __doc__ = _(\'error_invalid_publication\',\n-                default=u\'Invalid effective or expires date\')\n+    __doc__ = _(\n+        "error_invalid_publication", default=u"Invalid effective or expires date"\n+    )\n \n \n @provider(IFormFieldProvider)\n class IPublication(model.Schema):\n     # dates fieldset\n     model.fieldset(\n-        \'dates\',\n-        label=_(u\'label_schema_dates\', default=u\'Dates\'),\n-        fields=[\'effective\', \'expires\'],\n+        "dates",\n+        label=_(u"label_schema_dates", default=u"Dates"),\n+        fields=["effective", "expires"],\n     )\n \n     effective = schema.Datetime(\n-        title=_(u\'label_effective_date\', u\'Publishing Date\'),\n+        title=_(u"label_effective_date", u"Publishing Date"),\n         description=_(\n-            u\'help_effective_date\',\n-            default=u\'If this date is in the future, the content will \'\n-                    u\'not show up in listings and searches until this date.\'),\n-        required=False\n+            u"help_effective_date",\n+            default=u"If this date is in the future, the content will "\n+            u"not show up in listings and searches until this date.",\n+        ),\n+        required=False,\n     )\n-    directives.widget(\'effective\', DatetimeFieldWidget)\n+    directives.widget("effective", DatetimeFieldWidget)\n \n     expires = schema.Datetime(\n-        title=_(u\'label_expiration_date\', u\'Expiration Date\'),\n+        title=_(u"label_expiration_date", u"Expiration Date"),\n         description=_(\n-            u\'help_expiration_date\',\n-            default=u\'When this date is reached, the content will no \'\n-                    u\'longer be visible in listings and searches.\'),\n-        required=False\n+            u"help_expiration_date",\n+            default=u"When this date is reached, the content will no "\n+            u"longer be visible in listings and searches.",\n+        ),\n+        required=False,\n     )\n-    directives.widget(\'expires\', DatetimeFieldWidget)\n+    directives.widget("expires", DatetimeFieldWidget)\n \n     @invariant\n     def validate_start_end(data):\n         if data.effective and data.expires and data.effective > data.expires:\n             raise EffectiveAfterExpires(\n-                _(\'error_expiration_must_be_after_effective_date\',\n-                  default=u\'Expiration date must be after publishing date.\')\n+                _(\n+                    "error_expiration_must_be_after_effective_date",\n+                    default=u"Expiration date must be after publishing date.",\n+                )\n             )\n \n-    directives.omitted(\'effective\', \'expires\')\n-    directives.no_omit(IEditForm, \'effective\', \'expires\')\n-    directives.no_omit(IAddForm, \'effective\', \'expires\')\n+    directives.omitted("effective", "expires")\n+    directives.no_omit(IEditForm, "effective", "expires")\n+    directives.no_omit(IAddForm, "effective", "expires")\n \n \n @provider(IFormFieldProvider)\n@@ -184,62 +176,56 @@ class IOwnership(model.Schema):\n \n     # ownership fieldset\n     model.fieldset(\n-        \'ownership\',\n-        label=_(\n-            \'label_schema_ownership\',\n-            default=u\'Ownership\'\n-        ),\n-        fields=[\'creators\', \'contributors\', \'rights\'],\n+        "ownership",\n+        label=_("label_schema_ownership", default=u"Ownership"),\n+        fields=["creators", "contributors", "rights"],\n     )\n \n     creators = schema.Tuple(\n-        title=_(u\'label_creators\', u\'Creators\'),\n+        title=_(u"label_creators", u"Creators"),\n         description=_(\n-            u\'help_creators\',\n-            default=u\'Persons responsible for creating the content of \'\n-                    u\'this item. Please enter a list of user names, one \'\n-                    u\'per line. The principal creator should come first.\'\n+            u"help_creators",\n+            default=u"Persons responsible for creating the content of "\n+            u"this item. Please enter a list of user names, one "\n+            u"per line. The principal creator should come first.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=(),\n     )\n     directives.widget(\n-        \'creators\',\n-        AjaxSelectFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Users\'\n+        "creators", AjaxSelectFieldWidget, vocabulary="plone.app.vocabularies.Users"\n     )\n \n     contributors = schema.Tuple(\n-        title=_(u\'contributors\', u\'Contributors\'),\n+        title=_(u"contributors", u"Contributors"),\n         description=_(\n-            u\'help_contributors\',\n-            default=u\'The names of people that have contributed \'\n-                    u\'to this item. Each contributor should \'\n-                    u\'be on a separate line.\'),\n+            u"help_contributors",\n+            default=u"The names of people that have contributed "\n+            u"to this item. Each contributor should "\n+            u"be on a separate line.",\n+        ),\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=(),\n     )\n     directives.widget(\n-        \'contributors\',\n-        AjaxSelectFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Users\'\n+        "contributors", AjaxSelectFieldWidget, vocabulary="plone.app.vocabularies.Users"\n     )\n \n     rights = schema.Text(\n-        title=_(u\'label_copyrights\', default=u\'Rights\'),\n+        title=_(u"label_copyrights", default=u"Rights"),\n         description=_(\n-            u\'help_copyrights\',\n-            default=u\'Copyright statement or other rights information on this \'\n-                    u\'item.\'\n+            u"help_copyrights",\n+            default=u"Copyright statement or other rights information on this "\n+            u"item.",\n         ),\n         required=False,\n     )\n \n-    directives.omitted(\'creators\', \'contributors\', \'rights\')\n-    directives.no_omit(IEditForm, \'creators\', \'contributors\', \'rights\')\n-    directives.no_omit(IAddForm, \'creators\', \'contributors\', \'rights\')\n+    directives.omitted("creators", "contributors", "rights")\n+    directives.no_omit(IEditForm, "creators", "contributors", "rights")\n+    directives.no_omit(IAddForm, "creators", "contributors", "rights")\n \n \n # make sure the add form shows the default creator\n@@ -248,24 +234,24 @@ def creatorsDefault(data):\n     # NB: CMF users are UTF-8 encoded bytes, decode them before inserting\n     return user and (safe_unicode(user.getId()),)\n \n+\n CreatorsDefaultValue = ComputedWidgetAttribute(\n-    creatorsDefault,\n-    field=IOwnership[\'creators\']\n+    creatorsDefault, field=IOwnership["creators"]\n )\n \n \n @provider(IFormFieldProvider)\n class IDublinCore(IOwnership, IPublication, ICategorization, IBasic):\n-    """ Metadata behavior providing all the DC fields\n-    """\n+    """Metadata behavior providing all the DC fields"""\n+\n     pass\n \n \n @adapter(IDexterityContent)\n class MetadataBase(object):\n-    """ This adapter uses DCFieldProperty to store metadata directly on an\n-        object using the standard CMF DefaultDublinCoreImpl getters and\n-        setters.\n+    """This adapter uses DCFieldProperty to store metadata directly on an\n+    object using the standard CMF DefaultDublinCoreImpl getters and\n+    setters.\n     """\n \n     def __init__(self, context):\n@@ -294,7 +280,7 @@ def __get__(self, inst, klass):\n         attribute = getattr(inst.context, self._get_name, _marker)\n         if attribute is _marker:\n             field = self._field.bind(inst)\n-            attribute = getattr(field, \'default\', _marker)\n+            attribute = getattr(field, "default", _marker)\n             if attribute is _marker:\n                 raise AttributeError(self._field.__name__)\n         elif callable(attribute):\n@@ -308,40 +294,19 @@ def __get__(self, inst, klass):\n         if attribute is None:\n             return\n \n-        if IText.providedBy(self._field):\n-            if six.PY2:\n-                return attribute.decode(\'utf-8\')\n-\n-        if ISequence.providedBy(self._field):\n-            if IText.providedBy(self._field.value_type):\n-                if six.PY2:\n-                    return type(attribute)(\n-                        item.decode(\'utf-8\') for item in attribute\n-                    )\n-\n         return attribute\n \n     def __set__(self, inst, value):\n         field = self._field.bind(inst)\n         field.validate(value)\n         if field.readonly:\n-            raise ValueError(self._field.__name__, \'field is readonly\')\n+            raise ValueError(self._field.__name__, "field is readonly")\n         if isinstance(value, datetime):\n             # The ensures that the converted DateTime value is in the\n             # server\'s local timezone rather than GMT.\n-            value = DateTime(value.year, value.month, value.day,\n-                             value.hour, value.minute)\n-        elif value is not None:\n-            if IText.providedBy(self._field):\n-                if six.PY2:\n-                    value = value.encode(\'utf-8\')\n-\n-            elif ISequence.providedBy(self._field):\n-                if IText.providedBy(self._field.value_type):\n-                    if six.PY2:\n-                        value = type(value)(\n-                            item.encode(\'utf-8\') for item in value\n-                        )\n+            value = DateTime(\n+                value.year, value.month, value.day, value.hour, value.minute\n+            )\n \n         if self._set_name:\n             getattr(inst.context, self._set_name)(value)\n@@ -355,22 +320,22 @@ def __getattr__(self, name):\n \n \n class Basic(MetadataBase):\n-\n     def _get_title(self):\n         return self.context.title\n \n     def _set_title(self, value):\n-        if not isinstance(value, six.text_type):\n-            raise ValueError(\'Title must be text.\')\n+        if not isinstance(value, str):\n+            raise ValueError("Title must be text.")\n         self.context.title = value\n+\n     title = property(_get_title, _set_title)\n \n     def _get_description(self):\n         return self.context.description\n \n     def _set_description(self, value):\n-        if not isinstance(value, six.text_type):\n-            raise ValueError(\'Description must be text.\')\n+        if not isinstance(value, str):\n+            raise ValueError("Description must be text.")\n \n         self.context.description = value\n \n@@ -378,47 +343,33 @@ def _set_description(self, value):\n \n \n class Categorization(MetadataBase):\n-\n     def _get_subjects(self):\n         return self.context.subject\n \n     def _set_subjects(self, value):\n         self.context.subject = value\n+\n     subjects = property(_get_subjects, _set_subjects)\n \n     language = DCFieldProperty(\n-        ICategorization[\'language\'],\n-        get_name=\'Language\',\n-        set_name=\'setLanguage\'\n+        ICategorization["language"], get_name="Language", set_name="setLanguage"\n     )\n \n \n class Publication(MetadataBase):\n-    effective = DCFieldProperty(\n-        IPublication[\'effective\'],\n-        get_name=\'effective_date\'\n-    )\n-    expires = DCFieldProperty(\n-        IPublication[\'expires\'],\n-        get_name=\'expiration_date\'\n-    )\n+    effective = DCFieldProperty(IPublication["effective"], get_name="effective_date")\n+    expires = DCFieldProperty(IPublication["expires"], get_name="expiration_date")\n \n \n class Ownership(MetadataBase):\n     creators = DCFieldProperty(\n-        IOwnership[\'creators\'],\n-        get_name=\'listCreators\',\n-        set_name=\'setCreators\'\n+        IOwnership["creators"], get_name="listCreators", set_name="setCreators"\n     )\n     contributors = DCFieldProperty(\n-        IOwnership[\'contributors\'],\n-        get_name=\'Contributors\',\n-        set_name=\'setContributors\'\n+        IOwnership["contributors"], get_name="Contributors", set_name="setContributors"\n     )\n     rights = DCFieldProperty(\n-        IOwnership[\'rights\'],\n-        get_name=\'Rights\',\n-        set_name=\'setRights\'\n+        IOwnership["rights"], get_name="Rights", set_name="setRights"\n     )\n \n     def __init__(self, *args, **kwargs):\ndiff --git a/setup.cfg b/setup.cfg\nindex ed50d96..b39c284 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -9,3 +9,10 @@ ignore =\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-04-06T16:50:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/b9d96d090b665f4386616566ce42f2a7286383e8

fix deprecation warn, rm six, isort, black folder_listing.py

Files changed:
M plone/app/dexterity/browser/folder_listing.py

b'diff --git a/plone/app/dexterity/browser/folder_listing.py b/plone/app/dexterity/browser/folder_listing.py\nindex 26aa98d..1f1cb4a 100644\n--- a/plone/app/dexterity/browser/folder_listing.py\n+++ b/plone/app/dexterity/browser/folder_listing.py\n@@ -1,31 +1,28 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.dexterity import _\n+from plone.base.batch import Batch\n+from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n \n class FolderView(BrowserView):\n-\n     def __init__(self, context, request):\n         super(FolderView, self).__init__(context, request)\n \n-        self.plone_view = getMultiAdapter(\n-            (context, request), name=u\'plone\')\n+        self.plone_view = getMultiAdapter((context, request), name=u"plone")\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=u\'plone_portal_state\')\n-        self.pas_member = getMultiAdapter(\n-            (context, request), name=u\'pas_member\')\n+            (context, request), name=u"plone_portal_state"\n+        )\n+        self.pas_member = getMultiAdapter((context, request), name=u"pas_member")\n \n-        limit_display = getattr(self.request, \'limit_display\', None)\n+        limit_display = getattr(self.request, "limit_display", None)\n         limit_display = int(limit_display) if limit_display is not None else 20\n-        b_size = getattr(self.request, \'b_size\', None)\n+        b_size = getattr(self.request, "b_size", None)\n         self.b_size = int(b_size) if b_size is not None else limit_display\n-        b_start = getattr(self.request, \'b_start\', None)\n+        b_start = getattr(self.request, "b_start", None)\n         self.b_start = int(b_start) if b_start is not None else 0\n \n     def results(self, **kwargs):\n@@ -41,27 +38,21 @@ def results(self, **kwargs):\n                 sequence.\n         """\n         # Extra filter\n-        kwargs.update(self.request.get(\'contentFilter\', {}))\n-        if \'object_provides\' not in kwargs:  # object_provides is more specific\n-            kwargs.setdefault(\'portal_type\', self.friendly_types)\n-        kwargs.setdefault(\'batch\', True)\n-        kwargs.setdefault(\'b_size\', self.b_size)\n-        kwargs.setdefault(\'b_start\', self.b_start)\n-\n-        listing = aq_inner(self.context).restrictedTraverse(\n-            \'@@folderListing\', None)\n+        kwargs.update(self.request.get("contentFilter", {}))\n+        if "object_provides" not in kwargs:  # object_provides is more specific\n+            kwargs.setdefault("portal_type", self.friendly_types)\n+        kwargs.setdefault("batch", True)\n+        kwargs.setdefault("b_size", self.b_size)\n+        kwargs.setdefault("b_start", self.b_start)\n+\n+        listing = aq_inner(self.context).restrictedTraverse("@@folderListing", None)\n         if listing is None:\n             return []\n         results = listing(**kwargs)\n         return results\n \n     def batch(self):\n-        batch = Batch(\n-            self.results(),\n-            size=self.b_size,\n-            start=self.b_start,\n-            orphan=1\n-        )\n+        batch = Batch(self.results(), size=self.b_size, start=self.b_start, orphan=1)\n         return batch\n \n     def normalizeString(self, text):\n@@ -85,18 +76,18 @@ def navigation_root_url(self):\n     @property\n     def use_view_action(self):\n         registry = getUtility(IRegistry)\n-        return registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        return registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     def show_about(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n-        show_about = getattr(settings, \'allow_anon_views_about\', False)\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        show_about = getattr(settings, "allow_anon_views_about", False)\n         return show_about or not self.isAnon\n \n     @property\n     def no_items_message(self):\n         return _(\n-            \'description_no_items_in_folder\',\n-            default=u\'There are currently no items in this folder.\'\n+            "description_no_items_in_folder",\n+            default=u"There are currently no items in this folder.",\n         )\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-04-06T16:58:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/b22bec587fecf66d15a5331c2eab0e0122de4ebe

fix deprecation warn, rm six, isort: folder_listing.py

Files changed:
M plone/app/dexterity/browser/modeleditor.py

b'diff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex 5f8ae9a..ea3fcfb 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -1,17 +1,16 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from lxml import etree\n from plone.app.dexterity import _\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n+from plone.supermodel import loadString\n from plone.supermodel import serializeModel\n from plone.supermodel.parser import SupermodelParseError\n-from Products.CMFPlone.utils import safe_bytes\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import queryMultiAdapter\n \n import html\n-import plone.supermodel\n \n \n NAMESPACE = "{http://namespaces.plone.org/supermodel/schema}"\n@@ -62,7 +61,7 @@ def __call__(self):\n                 root = etree.fromstring(source, parser=parser)\n             except etree.XMLSyntaxError as e:\n                 IStatusMessage(self.request).addStatusMessage(\n-                    "XMLSyntaxError: {0}".format(html.escape(safe_unicode(e.args[0]))),\n+                    "XMLSyntaxError: {0}".format(html.escape(safe_text(e.args[0]))),\n                     "error",\n                 )\n                 return super().__call__()\n@@ -86,7 +85,7 @@ def __call__(self):\n             # can supermodel parse it?\n             # This is mainly good for catching bad dotted names.\n             try:\n-                plone.supermodel.loadString(source, policy=u"dexterity")\n+                loadString(source, policy=u"dexterity")\n             except SupermodelParseError as e:\n                 message = e.args[0].replace(\'\\n  File "<unknown>"\', "")\n                 IStatusMessage(self.request).addStatusMessage(\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-04-06T17:06:19+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/64133150c70fdee5c570fdbbd5fd939b146ef0a3

newsfile

Files changed:
A news/345.bugfix

b'diff --git a/news/345.bugfix b/news/345.bugfix\nnew file mode 100644\nindex 0000000..97ef9e8\n--- /dev/null\n+++ b/news/345.bugfix\n@@ -0,0 +1,2 @@\n+Remove deprecation warnings after PLIP 3395, some black & isort, some six removal.\n+[jensens]\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-04-06T18:03:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/f9cdd4ce36aec746f81338185c1661b519bb0652

Merge pull request #345 from plone/cleanup

Cleanup

Files changed:
A news/345.bugfix
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/browser/folder_listing.py
M plone/app/dexterity/browser/modeleditor.py
M setup.cfg

b'diff --git a/news/345.bugfix b/news/345.bugfix\nnew file mode 100644\nindex 0000000..97ef9e8\n--- /dev/null\n+++ b/news/345.bugfix\n@@ -0,0 +1,2 @@\n+Remove deprecation warnings after PLIP 3395, some black & isort, some six removal.\n+[jensens]\ndiff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py\nindex b4961de..3f08312 100644\n--- a/plone/app/dexterity/behaviors/metadata.py\n+++ b/plone/app/dexterity/behaviors/metadata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from datetime import datetime\n from DateTime import DateTime\n@@ -8,12 +7,11 @@\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform import directives\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces.siteroot import IPloneSiteRoot\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import safe_unicode\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n-from six.moves import map\n from z3c.form.interfaces import IAddForm\n from z3c.form.interfaces import IEditForm\n from z3c.form.widget import ComputedWidgetAttribute\n@@ -24,10 +22,6 @@\n from zope.interface import invariant\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n-from zope.schema.interfaces import ISequence\n-from zope.schema.interfaces import IText\n-\n-import six\n \n \n # Behavior interfaces to display Dublin Core metadata fields on Dexterity\n@@ -58,7 +52,7 @@ def default_language(context):\n     if not language:\n         # Finally, if we still don\'t have a language, then just use site\'s\n         # default\n-        pl = getToolByName(getSite(), \'portal_languages\')\n+        pl = getToolByName(getSite(), "portal_languages")\n         language = pl.getDefaultLanguage()\n \n     return language\n@@ -68,27 +62,23 @@ def default_language(context):\n class IBasic(model.Schema):\n \n     # default fieldset\n-    title = schema.TextLine(\n-        title=_(u\'label_title\', default=u\'Title\'),\n-        required=True\n-    )\n+    title = schema.TextLine(title=_(u"label_title", default=u"Title"), required=True)\n \n     description = schema.Text(\n-        title=_(u\'label_description\', default=u\'Summary\'),\n+        title=_(u"label_description", default=u"Summary"),\n         description=_(\n-            u\'help_description\',\n-            default=u\'Used in item listings and search results.\'\n+            u"help_description", default=u"Used in item listings and search results."\n         ),\n         required=False,\n-        missing_value=u\'\',\n+        missing_value=u"",\n     )\n \n-    directives.order_before(description=\'*\')\n-    directives.order_before(title=\'*\')\n+    directives.order_before(description="*")\n+    directives.order_before(title="*")\n \n-    directives.omitted(\'title\', \'description\')\n-    directives.no_omit(IEditForm, \'title\', \'description\')\n-    directives.no_omit(IAddForm, \'title\', \'description\')\n+    directives.omitted("title", "description")\n+    directives.no_omit(IEditForm, "title", "description")\n+    directives.no_omit(IAddForm, "title", "description")\n \n \n @provider(IFormFieldProvider)\n@@ -96,87 +86,89 @@ class ICategorization(model.Schema):\n \n     # categorization fieldset\n     model.fieldset(\n-        \'categorization\',\n-        label=_(u\'label_schema_categorization\', default=u\'Categorization\'),\n-        fields=[\'subjects\', \'language\'],\n+        "categorization",\n+        label=_(u"label_schema_categorization", default=u"Categorization"),\n+        fields=["subjects", "language"],\n     )\n \n     subjects = schema.Tuple(\n-        title=_(u\'label_tags\', default=u\'Tags\'),\n+        title=_(u"label_tags", default=u"Tags"),\n         description=_(\n-            u\'help_tags\',\n-            default=u\'Tags are commonly used for ad-hoc organization of \' +\n-                    u\'content.\'\n+            u"help_tags",\n+            default=u"Tags are commonly used for ad-hoc organization of " + u"content.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=(),\n     )\n     directives.widget(\n-        \'subjects\',\n-        AjaxSelectFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Keywords\'\n+        "subjects", AjaxSelectFieldWidget, vocabulary="plone.app.vocabularies.Keywords"\n     )\n \n     language = schema.Choice(\n-        title=_(u\'label_language\', default=u\'Language\'),\n-        vocabulary=\'plone.app.vocabularies.SupportedContentLanguages\',\n+        title=_(u"label_language", default=u"Language"),\n+        vocabulary="plone.app.vocabularies.SupportedContentLanguages",\n         required=False,\n-        missing_value=\'\',\n+        missing_value="",\n         defaultFactory=default_language,\n     )\n-    directives.widget(\'language\', SelectFieldWidget)\n+    directives.widget("language", SelectFieldWidget)\n \n-    directives.omitted(\'subjects\', \'language\')\n-    directives.no_omit(IEditForm, \'subjects\', \'language\')\n-    directives.no_omit(IAddForm, \'subjects\', \'language\')\n+    directives.omitted("subjects", "language")\n+    directives.no_omit(IEditForm, "subjects", "language")\n+    directives.no_omit(IAddForm, "subjects", "language")\n \n \n class EffectiveAfterExpires(Invalid):\n-    __doc__ = _(\'error_invalid_publication\',\n-                default=u\'Invalid effective or expires date\')\n+    __doc__ = _(\n+        "error_invalid_publication", default=u"Invalid effective or expires date"\n+    )\n \n \n @provider(IFormFieldProvider)\n class IPublication(model.Schema):\n     # dates fieldset\n     model.fieldset(\n-        \'dates\',\n-        label=_(u\'label_schema_dates\', default=u\'Dates\'),\n-        fields=[\'effective\', \'expires\'],\n+        "dates",\n+        label=_(u"label_schema_dates", default=u"Dates"),\n+        fields=["effective", "expires"],\n     )\n \n     effective = schema.Datetime(\n-        title=_(u\'label_effective_date\', u\'Publishing Date\'),\n+        title=_(u"label_effective_date", u"Publishing Date"),\n         description=_(\n-            u\'help_effective_date\',\n-            default=u\'If this date is in the future, the content will \'\n-                    u\'not show up in listings and searches until this date.\'),\n-        required=False\n+            u"help_effective_date",\n+            default=u"If this date is in the future, the content will "\n+            u"not show up in listings and searches until this date.",\n+        ),\n+        required=False,\n     )\n-    directives.widget(\'effective\', DatetimeFieldWidget)\n+    directives.widget("effective", DatetimeFieldWidget)\n \n     expires = schema.Datetime(\n-        title=_(u\'label_expiration_date\', u\'Expiration Date\'),\n+        title=_(u"label_expiration_date", u"Expiration Date"),\n         description=_(\n-            u\'help_expiration_date\',\n-            default=u\'When this date is reached, the content will no \'\n-                    u\'longer be visible in listings and searches.\'),\n-        required=False\n+            u"help_expiration_date",\n+            default=u"When this date is reached, the content will no "\n+            u"longer be visible in listings and searches.",\n+        ),\n+        required=False,\n     )\n-    directives.widget(\'expires\', DatetimeFieldWidget)\n+    directives.widget("expires", DatetimeFieldWidget)\n \n     @invariant\n     def validate_start_end(data):\n         if data.effective and data.expires and data.effective > data.expires:\n             raise EffectiveAfterExpires(\n-                _(\'error_expiration_must_be_after_effective_date\',\n-                  default=u\'Expiration date must be after publishing date.\')\n+                _(\n+                    "error_expiration_must_be_after_effective_date",\n+                    default=u"Expiration date must be after publishing date.",\n+                )\n             )\n \n-    directives.omitted(\'effective\', \'expires\')\n-    directives.no_omit(IEditForm, \'effective\', \'expires\')\n-    directives.no_omit(IAddForm, \'effective\', \'expires\')\n+    directives.omitted("effective", "expires")\n+    directives.no_omit(IEditForm, "effective", "expires")\n+    directives.no_omit(IAddForm, "effective", "expires")\n \n \n @provider(IFormFieldProvider)\n@@ -184,62 +176,56 @@ class IOwnership(model.Schema):\n \n     # ownership fieldset\n     model.fieldset(\n-        \'ownership\',\n-        label=_(\n-            \'label_schema_ownership\',\n-            default=u\'Ownership\'\n-        ),\n-        fields=[\'creators\', \'contributors\', \'rights\'],\n+        "ownership",\n+        label=_("label_schema_ownership", default=u"Ownership"),\n+        fields=["creators", "contributors", "rights"],\n     )\n \n     creators = schema.Tuple(\n-        title=_(u\'label_creators\', u\'Creators\'),\n+        title=_(u"label_creators", u"Creators"),\n         description=_(\n-            u\'help_creators\',\n-            default=u\'Persons responsible for creating the content of \'\n-                    u\'this item. Please enter a list of user names, one \'\n-                    u\'per line. The principal creator should come first.\'\n+            u"help_creators",\n+            default=u"Persons responsible for creating the content of "\n+            u"this item. Please enter a list of user names, one "\n+            u"per line. The principal creator should come first.",\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=(),\n     )\n     directives.widget(\n-        \'creators\',\n-        AjaxSelectFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Users\'\n+        "creators", AjaxSelectFieldWidget, vocabulary="plone.app.vocabularies.Users"\n     )\n \n     contributors = schema.Tuple(\n-        title=_(u\'contributors\', u\'Contributors\'),\n+        title=_(u"contributors", u"Contributors"),\n         description=_(\n-            u\'help_contributors\',\n-            default=u\'The names of people that have contributed \'\n-                    u\'to this item. Each contributor should \'\n-                    u\'be on a separate line.\'),\n+            u"help_contributors",\n+            default=u"The names of people that have contributed "\n+            u"to this item. Each contributor should "\n+            u"be on a separate line.",\n+        ),\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=(),\n     )\n     directives.widget(\n-        \'contributors\',\n-        AjaxSelectFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Users\'\n+        "contributors", AjaxSelectFieldWidget, vocabulary="plone.app.vocabularies.Users"\n     )\n \n     rights = schema.Text(\n-        title=_(u\'label_copyrights\', default=u\'Rights\'),\n+        title=_(u"label_copyrights", default=u"Rights"),\n         description=_(\n-            u\'help_copyrights\',\n-            default=u\'Copyright statement or other rights information on this \'\n-                    u\'item.\'\n+            u"help_copyrights",\n+            default=u"Copyright statement or other rights information on this "\n+            u"item.",\n         ),\n         required=False,\n     )\n \n-    directives.omitted(\'creators\', \'contributors\', \'rights\')\n-    directives.no_omit(IEditForm, \'creators\', \'contributors\', \'rights\')\n-    directives.no_omit(IAddForm, \'creators\', \'contributors\', \'rights\')\n+    directives.omitted("creators", "contributors", "rights")\n+    directives.no_omit(IEditForm, "creators", "contributors", "rights")\n+    directives.no_omit(IAddForm, "creators", "contributors", "rights")\n \n \n # make sure the add form shows the default creator\n@@ -248,24 +234,24 @@ def creatorsDefault(data):\n     # NB: CMF users are UTF-8 encoded bytes, decode them before inserting\n     return user and (safe_unicode(user.getId()),)\n \n+\n CreatorsDefaultValue = ComputedWidgetAttribute(\n-    creatorsDefault,\n-    field=IOwnership[\'creators\']\n+    creatorsDefault, field=IOwnership["creators"]\n )\n \n \n @provider(IFormFieldProvider)\n class IDublinCore(IOwnership, IPublication, ICategorization, IBasic):\n-    """ Metadata behavior providing all the DC fields\n-    """\n+    """Metadata behavior providing all the DC fields"""\n+\n     pass\n \n \n @adapter(IDexterityContent)\n class MetadataBase(object):\n-    """ This adapter uses DCFieldProperty to store metadata directly on an\n-        object using the standard CMF DefaultDublinCoreImpl getters and\n-        setters.\n+    """This adapter uses DCFieldProperty to store metadata directly on an\n+    object using the standard CMF DefaultDublinCoreImpl getters and\n+    setters.\n     """\n \n     def __init__(self, context):\n@@ -294,7 +280,7 @@ def __get__(self, inst, klass):\n         attribute = getattr(inst.context, self._get_name, _marker)\n         if attribute is _marker:\n             field = self._field.bind(inst)\n-            attribute = getattr(field, \'default\', _marker)\n+            attribute = getattr(field, "default", _marker)\n             if attribute is _marker:\n                 raise AttributeError(self._field.__name__)\n         elif callable(attribute):\n@@ -308,40 +294,19 @@ def __get__(self, inst, klass):\n         if attribute is None:\n             return\n \n-        if IText.providedBy(self._field):\n-            if six.PY2:\n-                return attribute.decode(\'utf-8\')\n-\n-        if ISequence.providedBy(self._field):\n-            if IText.providedBy(self._field.value_type):\n-                if six.PY2:\n-                    return type(attribute)(\n-                        item.decode(\'utf-8\') for item in attribute\n-                    )\n-\n         return attribute\n \n     def __set__(self, inst, value):\n         field = self._field.bind(inst)\n         field.validate(value)\n         if field.readonly:\n-            raise ValueError(self._field.__name__, \'field is readonly\')\n+            raise ValueError(self._field.__name__, "field is readonly")\n         if isinstance(value, datetime):\n             # The ensures that the converted DateTime value is in the\n             # server\'s local timezone rather than GMT.\n-            value = DateTime(value.year, value.month, value.day,\n-                             value.hour, value.minute)\n-        elif value is not None:\n-            if IText.providedBy(self._field):\n-                if six.PY2:\n-                    value = value.encode(\'utf-8\')\n-\n-            elif ISequence.providedBy(self._field):\n-                if IText.providedBy(self._field.value_type):\n-                    if six.PY2:\n-                        value = type(value)(\n-                            item.encode(\'utf-8\') for item in value\n-                        )\n+            value = DateTime(\n+                value.year, value.month, value.day, value.hour, value.minute\n+            )\n \n         if self._set_name:\n             getattr(inst.context, self._set_name)(value)\n@@ -355,22 +320,22 @@ def __getattr__(self, name):\n \n \n class Basic(MetadataBase):\n-\n     def _get_title(self):\n         return self.context.title\n \n     def _set_title(self, value):\n-        if not isinstance(value, six.text_type):\n-            raise ValueError(\'Title must be text.\')\n+        if not isinstance(value, str):\n+            raise ValueError("Title must be text.")\n         self.context.title = value\n+\n     title = property(_get_title, _set_title)\n \n     def _get_description(self):\n         return self.context.description\n \n     def _set_description(self, value):\n-        if not isinstance(value, six.text_type):\n-            raise ValueError(\'Description must be text.\')\n+        if not isinstance(value, str):\n+            raise ValueError("Description must be text.")\n \n         self.context.description = value\n \n@@ -378,47 +343,33 @@ def _set_description(self, value):\n \n \n class Categorization(MetadataBase):\n-\n     def _get_subjects(self):\n         return self.context.subject\n \n     def _set_subjects(self, value):\n         self.context.subject = value\n+\n     subjects = property(_get_subjects, _set_subjects)\n \n     language = DCFieldProperty(\n-        ICategorization[\'language\'],\n-        get_name=\'Language\',\n-        set_name=\'setLanguage\'\n+        ICategorization["language"], get_name="Language", set_name="setLanguage"\n     )\n \n \n class Publication(MetadataBase):\n-    effective = DCFieldProperty(\n-        IPublication[\'effective\'],\n-        get_name=\'effective_date\'\n-    )\n-    expires = DCFieldProperty(\n-        IPublication[\'expires\'],\n-        get_name=\'expiration_date\'\n-    )\n+    effective = DCFieldProperty(IPublication["effective"], get_name="effective_date")\n+    expires = DCFieldProperty(IPublication["expires"], get_name="expiration_date")\n \n \n class Ownership(MetadataBase):\n     creators = DCFieldProperty(\n-        IOwnership[\'creators\'],\n-        get_name=\'listCreators\',\n-        set_name=\'setCreators\'\n+        IOwnership["creators"], get_name="listCreators", set_name="setCreators"\n     )\n     contributors = DCFieldProperty(\n-        IOwnership[\'contributors\'],\n-        get_name=\'Contributors\',\n-        set_name=\'setContributors\'\n+        IOwnership["contributors"], get_name="Contributors", set_name="setContributors"\n     )\n     rights = DCFieldProperty(\n-        IOwnership[\'rights\'],\n-        get_name=\'Rights\',\n-        set_name=\'setRights\'\n+        IOwnership["rights"], get_name="Rights", set_name="setRights"\n     )\n \n     def __init__(self, *args, **kwargs):\ndiff --git a/plone/app/dexterity/browser/folder_listing.py b/plone/app/dexterity/browser/folder_listing.py\nindex 26aa98d..1f1cb4a 100644\n--- a/plone/app/dexterity/browser/folder_listing.py\n+++ b/plone/app/dexterity/browser/folder_listing.py\n@@ -1,31 +1,28 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.dexterity import _\n+from plone.base.batch import Batch\n+from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n \n class FolderView(BrowserView):\n-\n     def __init__(self, context, request):\n         super(FolderView, self).__init__(context, request)\n \n-        self.plone_view = getMultiAdapter(\n-            (context, request), name=u\'plone\')\n+        self.plone_view = getMultiAdapter((context, request), name=u"plone")\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=u\'plone_portal_state\')\n-        self.pas_member = getMultiAdapter(\n-            (context, request), name=u\'pas_member\')\n+            (context, request), name=u"plone_portal_state"\n+        )\n+        self.pas_member = getMultiAdapter((context, request), name=u"pas_member")\n \n-        limit_display = getattr(self.request, \'limit_display\', None)\n+        limit_display = getattr(self.request, "limit_display", None)\n         limit_display = int(limit_display) if limit_display is not None else 20\n-        b_size = getattr(self.request, \'b_size\', None)\n+        b_size = getattr(self.request, "b_size", None)\n         self.b_size = int(b_size) if b_size is not None else limit_display\n-        b_start = getattr(self.request, \'b_start\', None)\n+        b_start = getattr(self.request, "b_start", None)\n         self.b_start = int(b_start) if b_start is not None else 0\n \n     def results(self, **kwargs):\n@@ -41,27 +38,21 @@ def results(self, **kwargs):\n                 sequence.\n         """\n         # Extra filter\n-        kwargs.update(self.request.get(\'contentFilter\', {}))\n-        if \'object_provides\' not in kwargs:  # object_provides is more specific\n-            kwargs.setdefault(\'portal_type\', self.friendly_types)\n-        kwargs.setdefault(\'batch\', True)\n-        kwargs.setdefault(\'b_size\', self.b_size)\n-        kwargs.setdefault(\'b_start\', self.b_start)\n-\n-        listing = aq_inner(self.context).restrictedTraverse(\n-            \'@@folderListing\', None)\n+        kwargs.update(self.request.get("contentFilter", {}))\n+        if "object_provides" not in kwargs:  # object_provides is more specific\n+            kwargs.setdefault("portal_type", self.friendly_types)\n+        kwargs.setdefault("batch", True)\n+        kwargs.setdefault("b_size", self.b_size)\n+        kwargs.setdefault("b_start", self.b_start)\n+\n+        listing = aq_inner(self.context).restrictedTraverse("@@folderListing", None)\n         if listing is None:\n             return []\n         results = listing(**kwargs)\n         return results\n \n     def batch(self):\n-        batch = Batch(\n-            self.results(),\n-            size=self.b_size,\n-            start=self.b_start,\n-            orphan=1\n-        )\n+        batch = Batch(self.results(), size=self.b_size, start=self.b_start, orphan=1)\n         return batch\n \n     def normalizeString(self, text):\n@@ -85,18 +76,18 @@ def navigation_root_url(self):\n     @property\n     def use_view_action(self):\n         registry = getUtility(IRegistry)\n-        return registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        return registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     def show_about(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n-        show_about = getattr(settings, \'allow_anon_views_about\', False)\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        show_about = getattr(settings, "allow_anon_views_about", False)\n         return show_about or not self.isAnon\n \n     @property\n     def no_items_message(self):\n         return _(\n-            \'description_no_items_in_folder\',\n-            default=u\'There are currently no items in this folder.\'\n+            "description_no_items_in_folder",\n+            default=u"There are currently no items in this folder.",\n         )\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex 5f8ae9a..ea3fcfb 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -1,17 +1,16 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from lxml import etree\n from plone.app.dexterity import _\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n+from plone.supermodel import loadString\n from plone.supermodel import serializeModel\n from plone.supermodel.parser import SupermodelParseError\n-from Products.CMFPlone.utils import safe_bytes\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import queryMultiAdapter\n \n import html\n-import plone.supermodel\n \n \n NAMESPACE = "{http://namespaces.plone.org/supermodel/schema}"\n@@ -62,7 +61,7 @@ def __call__(self):\n                 root = etree.fromstring(source, parser=parser)\n             except etree.XMLSyntaxError as e:\n                 IStatusMessage(self.request).addStatusMessage(\n-                    "XMLSyntaxError: {0}".format(html.escape(safe_unicode(e.args[0]))),\n+                    "XMLSyntaxError: {0}".format(html.escape(safe_text(e.args[0]))),\n                     "error",\n                 )\n                 return super().__call__()\n@@ -86,7 +85,7 @@ def __call__(self):\n             # can supermodel parse it?\n             # This is mainly good for catching bad dotted names.\n             try:\n-                plone.supermodel.loadString(source, policy=u"dexterity")\n+                loadString(source, policy=u"dexterity")\n             except SupermodelParseError as e:\n                 message = e.args[0].replace(\'\\n  File "<unknown>"\', "")\n                 IStatusMessage(self.request).addStatusMessage(\ndiff --git a/setup.cfg b/setup.cfg\nindex ed50d96..b39c284 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -9,3 +9,10 @@ ignore =\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

