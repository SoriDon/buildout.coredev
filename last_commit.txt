Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T13:52:38+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/40e8072f8ef289c4b3e8b16f793b4c6a7756b5de

isort

Files changed:
M setup.cfg
M setup.py
M src/Products/PlonePAS/__init__.py
M src/Products/PlonePAS/browser/info.py
M src/Products/PlonePAS/interfaces/propertysheets.py
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/pas.py
M src/Products/PlonePAS/patch.py
M src/Products/PlonePAS/permissions.py
M src/Products/PlonePAS/plugins/autogroup.py
M src/Products/PlonePAS/plugins/cookie_handler.py
M src/Products/PlonePAS/plugins/crumbler.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/upgrades.py

b'diff --git a/setup.cfg b/setup.cfg\nindex cdfdbc2c..b9ebb3bb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -12,3 +12,10 @@ max-line-length = 88\n extend-ignore = E203\n aggressive = 3\n experimental = true\n+\n+\n+[isort]\n+profile = black\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\ndiff --git a/setup.py b/setup.py\nindex db8f4e96..3a093604 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n-from setuptools import setup\n from setuptools import find_packages\n+from setuptools import setup\n+\n import sys\n \n+\n version = \'7.0.0a4.dev0\'\n \n \ndiff --git a/src/Products/PlonePAS/__init__.py b/src/Products/PlonePAS/__init__.py\nindex 46ebe11a..ba6c2c54 100644\n--- a/src/Products/PlonePAS/__init__.py\n+++ b/src/Products/PlonePAS/__init__.py\n@@ -18,6 +18,7 @@\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PluggableAuthService import registerMultiPlugin\n \n+\n ####################################\n # monkey patch pas, the evil happens\n patch_pas()\ndiff --git a/src/Products/PlonePAS/browser/info.py b/src/Products/PlonePAS/browser/info.py\nindex 7bcd8cd6..34cb9fcb 100644\n--- a/src/Products/PlonePAS/browser/info.py\n+++ b/src/Products/PlonePAS/browser/info.py\n@@ -5,7 +5,9 @@\n from Products.Five import BrowserView\n from Products.PlonePAS.interfaces.browser import IPASInfoView\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n-from Products.PluggableAuthService.interfaces.plugins import ILoginPasswordExtractionPlugin  # noqa: E501\n+from Products.PluggableAuthService.interfaces.plugins import (  # noqa: E501\n+    ILoginPasswordExtractionPlugin,\n+)\n from zope.interface import implementer\n \n \ndiff --git a/src/Products/PlonePAS/interfaces/propertysheets.py b/src/Products/PlonePAS/interfaces/propertysheets.py\nindex 8ff7ab3e..6370d6ba 100644\n--- a/src/Products/PlonePAS/interfaces/propertysheets.py\n+++ b/src/Products/PlonePAS/interfaces/propertysheets.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n-from Products.PluggableAuthService.interfaces.propertysheets \\\n-    import IPropertySheet\n+from Products.PluggableAuthService.interfaces.propertysheets import IPropertySheet\n \n \n class IMutablePropertySheet(IPropertySheet):\ndiff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex c5511b3f..ff34e4ca 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -3,6 +3,7 @@\n from Products.PlonePAS.patch import wrap_method\n from Products.PlonePAS.plugins.group import PloneGroup\n \n+\n GROUP_PROPERTY_MAP = {\n     # target property: (possible key, ...)\n     \'title\': (\'name\',\ndiff --git a/src/Products/PlonePAS/pas.py b/src/Products/PlonePAS/pas.py\nindex 1c34a9c9..c1a38754 100644\n--- a/src/Products/PlonePAS/pas.py\n+++ b/src/Products/PlonePAS/pas.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n # pas alterations and monkies\n-from AccessControl import Unauthorized\n from AccessControl import getSecurityManager\n+from AccessControl import Unauthorized\n from AccessControl.PermissionRole import PermissionRole\n from AccessControl.Permissions import change_permissions\n from AccessControl.Permissions import manage_properties\n@@ -17,24 +17,21 @@\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n from Products.PlonePAS.patch import ORIG_NAME\n from Products.PlonePAS.patch import wrap_method\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    PluggableAuthService\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n from Products.PluggableAuthService.events import PrincipalDeleted\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IAuthenticationPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IGroupEnumerationPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IRoleAssignerPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IUserEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IGroupEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IRoleAssignerPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n+from Products.PluggableAuthService.PluggableAuthService import PluggableAuthService\n from zope.event import notify\n+\n import logging\n \n+\n logger = logging.getLogger(\'PlonePAS\')\n \n registerToolInterface(\'acl_users\', IPluggableAuthService)\ndiff --git a/src/Products/PlonePAS/patch.py b/src/Products/PlonePAS/patch.py\nindex 3eaea2fe..51f367e6 100644\n--- a/src/Products/PlonePAS/patch.py\n+++ b/src/Products/PlonePAS/patch.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from zope.deprecation import deprecation\n+\n import logging\n \n+\n logger = logging.getLogger(\'PlonePAS\')\n \n PATTERN = \'__PlonePAS_%s__\'\ndiff --git a/src/Products/PlonePAS/permissions.py b/src/Products/PlonePAS/permissions.py\nindex 0ab494d1..74668b26 100644\n--- a/src/Products/PlonePAS/permissions.py\n+++ b/src/Products/PlonePAS/permissions.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.Permission import addPermission\n \n+\n AddGroups = \'Add Groups\'\n addPermission(AddGroups, default_roles=(\'Manager\',))\n \ndiff --git a/src/Products/PlonePAS/plugins/autogroup.py b/src/Products/PlonePAS/plugins/autogroup.py\nindex 5783ef63..66a0bf41 100644\n--- a/src/Products/PlonePAS/plugins/autogroup.py\n+++ b/src/Products/PlonePAS/plugins/autogroup.py\n@@ -2,14 +2,14 @@\n from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n-from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IGroupEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IGroupEnumerationPlugin\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n+from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n from zope.interface import implementer\n \n+\n manage_addAutoGroupForm = PageTemplateFile("../zmi/AutoGroupForm", globals())\n \n \ndiff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex ab85046e..06c6c8dc 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -6,29 +6,27 @@\n provide similar functionality as CookieCrumbler does... by giving\n the portal the ability to provide a setAuthCookie method.\n """\n+from AccessControl.class_init import InitializeClass\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n from plone.registry.interfaces import IRegistry\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IChallengePlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ICredentialsResetPlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ICredentialsUpdatePlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ILoginPasswordHostExtractionPlugin\n-from Products.PluggableAuthService.plugins.CookieAuthHelper \\\n-    import CookieAuthHelper as BasePlugin\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n+from Products.PluggableAuthService.interfaces.plugins import ICredentialsResetPlugin\n+from Products.PluggableAuthService.interfaces.plugins import ICredentialsUpdatePlugin\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    ILoginPasswordHostExtractionPlugin,\n+)\n+from Products.PluggableAuthService.plugins.CookieAuthHelper import (\n+    CookieAuthHelper as BasePlugin,\n+)\n from six.moves.urllib.parse import quote\n-from zope.interface import implementer\n from zope.component import getUtility\n+from zope.interface import implementer\n \n \n def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\ndiff --git a/src/Products/PlonePAS/plugins/crumbler.py b/src/Products/PlonePAS/plugins/crumbler.py\nindex 1c940fc9..98163e7c 100644\n--- a/src/Products/PlonePAS/plugins/crumbler.py\n+++ b/src/Products/PlonePAS/plugins/crumbler.py\n@@ -5,17 +5,19 @@\n This allows form logins to fall through to parent user folders.\n \n """\n+from AccessControl.class_init import InitializeClass\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from OFS.Folder import Folder\n from Products.CMFCore.CookieCrumbler import manage_addCC\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from zope.interface import implementer\n+\n import logging\n \n+\n logger = logging.getLogger(\'PlonePAS\')\n \n CC_ID = \'cookie_auth\'\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex dd8ad77b..fb7cc4b9 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -4,6 +4,7 @@\n management (ie. rw) capabilities.\n \n """\n+from .ufactory import PloneUser\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n@@ -13,19 +14,18 @@\n from Products.PlonePAS.interfaces.capabilities import IGroupCapability\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n from Products.PlonePAS.interfaces.group import IGroupManagement\n-from Products.PluggableAuthService.PluggableAuthService \\\n-    import _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IGroupEnumerationPlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IPropertiesPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IGroupEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n from Products.PluggableAuthService.interfaces.plugins import IRolesPlugin\n-from Products.PluggableAuthService.plugins.ZODBGroupManager \\\n-    import ZODBGroupManager\n-from .ufactory import PloneUser\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n+from Products.PluggableAuthService.plugins.ZODBGroupManager import ZODBGroupManager\n from zope.interface import implementer\n+\n import logging\n \n+\n manage_addGroupManagerForm = DTMLFile("../zmi/GroupManagerForm", globals())\n logger = logging.getLogger(\'PlonePAS\')\n \ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex 5397b30d..eed5d703 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -7,13 +7,12 @@\n \n """\n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n-from Products.PluggableAuthService.plugins.LocalRolePlugin \\\n-    import LocalRolePlugin\n+from Products.PluggableAuthService.plugins.LocalRolePlugin import LocalRolePlugin\n from zope.interface import implementer\n \n \ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex f0e36f89..0db65593 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -11,6 +11,7 @@\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n \n+\n _ = MessageFactory(\'plone\')\n \n manage_addPasswordPolicyForm = PageTemplateFile(\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex 430a9dfa..f25c624b 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -11,11 +11,10 @@\n from Products.PlonePAS.sheet import MutablePropertySheet\n from Products.PlonePAS.sheet import validateValue\n from Products.PlonePAS.utils import safe_unicode\n-from Products.PluggableAuthService.UserPropertySheet import _guessSchema\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IUserEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n+from Products.PluggableAuthService.UserPropertySheet import _guessSchema\n from ZODB.PersistentMapping import PersistentMapping\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n@@ -23,6 +22,7 @@\n import copy\n import six\n \n+\n _ = MessageFactory(\'plone\')\n \n \ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 9c836ae0..67e305ef 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -6,17 +6,16 @@\n \n """\n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.capabilities import IAssignRoleCapability\n from Products.PlonePAS.utils import getGroupsForPrincipal\n from Products.PluggableAuthService.permissions import ManageUsers\n-from Products.PluggableAuthService.plugins.ZODBRoleManager \\\n-    import ZODBRoleManager\n+from Products.PluggableAuthService.plugins.ZODBRoleManager import ZODBRoleManager\n from zope.interface import implementer\n \n \ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 9be8b467..41d6b313 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -1,21 +1,21 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl.PermissionRole import _what_not_even_god_should_do\n from AccessControl.class_init import InitializeClass\n+from AccessControl.PermissionRole import _what_not_even_god_should_do\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n-from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n-from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n from Products.PluggableAuthService.interfaces.plugins import IUserFactoryPlugin\n-from Products.PluggableAuthService.interfaces.propertysheets \\\n-    import IPropertySheet\n+from Products.PluggableAuthService.interfaces.propertysheets import IPropertySheet\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n+from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n from zope.interface import implementer\n \n import six\n \n+\n try:\n     from collections import OrderedDict\n except ImportError:\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex c07cd37c..50df74ab 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -3,8 +3,8 @@\n ZODB based user manager with introspection and management interfaces.\n """\n from AccessControl import ClassSecurityInfo\n-from AccessControl.Permissions import manage_users as ManageUsers\n from AccessControl.class_init import InitializeClass\n+from AccessControl.Permissions import manage_users as ManageUsers\n from App.special_dtml import DTMLFile\n from AuthEncoding import AuthEncoding\n from Products.PlonePAS.interfaces.capabilities import IDeleteCapability\n@@ -12,12 +12,14 @@\n from Products.PlonePAS.interfaces.plugins import IUserIntrospection\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n from Products.PluggableAuthService.events import CredentialsUpdated\n-from Products.PluggableAuthService.plugins.ZODBUserManager \\\n-    import ZODBUserManager as BasePlugin\n+from Products.PluggableAuthService.plugins.ZODBUserManager import (\n+    ZODBUserManager as BasePlugin,\n+)\n from Products.PluggableAuthService.utils import createViewName\n from zope.event import notify\n from zope.interface import implementer\n \n+\n manage_addUserManagerForm = DTMLFile(\'../zmi/UserManagerForm\', globals())\n \n \ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 94586119..8ab8442a 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -5,27 +5,28 @@\n \n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from plone.session.plugins.session import manage_addSessionPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import interfaces as plone_ifaces\n from Products.PlonePAS import config\n-from Products.PlonePAS.plugins import cookie_handler\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.plugins import IUserIntrospection\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n+from Products.PlonePAS.plugins import cookie_handler\n from Products.PluggableAuthService.Extensions.upgrade import replace_acl_users\n-from Products.PluggableAuthService.interfaces.authservice \\\n-    import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ICredentialsResetPlugin\n+from Products.PluggableAuthService.interfaces.plugins import ICredentialsResetPlugin\n from Products.PluggableAuthService.plugins import CookieAuthHelper\n-from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin \\\n-    import addRecursiveGroupsPlugin\n-from plone.session.plugins.session import manage_addSessionPlugin\n+from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (\n+    addRecursiveGroupsPlugin,\n+)\n from zope import component\n+\n import logging\n \n+\n logger = logging.getLogger(\'PlonePAS setup\')\n \n \n@@ -341,8 +342,7 @@ def migrate_root_uf(self):\n \n \n def pas_fixup(self):\n-    from Products.PluggableAuthService.PluggableAuthService \\\n-        import _PLUGIN_TYPE_INFO\n+    from Products.PluggableAuthService.PluggableAuthService import _PLUGIN_TYPE_INFO\n \n     pas = getToolByName(self, \'acl_users\')\n     if not IPluggableAuthService.providedBy(pas):\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex ffba794b..5672dc3e 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import TEST_USER_ID\n from plone.testing import zope as zope_testing\n \n import Products.PlonePAS\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 3dfede87..130a079c 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -3,6 +3,7 @@\n from six import BytesIO\n from ZPublisher.HTTPRequest import FileUpload\n \n+\n TEXT = b\'file data\'\n \n \ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex 220d8960..5b1b6f1c 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -5,7 +5,9 @@\n from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n from Products.PluggableAuthService.interfaces.events import IPrincipalDeletedEvent\n from Products.PluggableAuthService.interfaces.plugins import IRolesPlugin\n-from Products.PluggableAuthService.PluggableAuthService import  _SWALLOWABLE_PLUGIN_EXCEPTIONS\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n@@ -129,8 +131,9 @@ def test_setpw(self):\n         uf.userSetPassword(\'created_user\', new_secret)\n \n         # possible to authenticate with new password?\n-        from Products.PluggableAuthService.interfaces.plugins \\\n-            import IAuthenticationPlugin\n+        from Products.PluggableAuthService.interfaces.plugins import (\n+            IAuthenticationPlugin,\n+        )\n         authenticators = uf.plugins.listPlugins(IAuthenticationPlugin)\n         credentials = {\'login\': \'created_user\', \'password\': new_secret}\n         result = None\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 73647bfd..52e16109 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n from plone.testing import layered\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \n import doctest\n import re\ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex d69da2d9..da6dad26 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -2,9 +2,9 @@\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_parent\n+from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import logout\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n import unittest\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex da81fd0a..c12b8294 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -3,9 +3,8 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n-from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.group import PloneGroup\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 6189d267..b6948d5d 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -2,19 +2,17 @@\n from DateTime import DateTime\n from OFS.Image import Image\n from plone.app.testing import TEST_USER_ID as default_user\n-from Products.PlonePAS.tests import dummy\n+from Products.CMFCore.interfaces import IMember\n+from Products.CMFCore.interfaces import IMemberData\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+from Products.PlonePAS.tests import dummy\n+from Products.PluggableAuthService.interfaces.events import IPropertiesUpdatedEvent\n from zope.component import getGlobalSiteManager\n from zope.component import getMultiAdapter\n-from Products.CMFCore.interfaces import IMember\n-from Products.CMFCore.interfaces import IMemberData\n-from Products.PluggableAuthService.interfaces.events import \\\n-        IPropertiesUpdatedEvent\n \n import unittest\n \n \n-\n class TestMemberDataTool(unittest.TestCase):\n \n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex 70ccd05e..c9c17eab 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -6,14 +6,14 @@\n from Acquisition import aq_parent\n from DateTime import DateTime\n from OFS.Image import Image\n+from plone.app.testing import login\n+from plone.app.testing import logout\n from plone.app.testing import PLONE_SITE_ID\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import logout\n-from plone.app.testing import setRoles\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.browser.member import PASMemberView\n from Products.PlonePAS.interfaces.membership import IMembershipTool\n@@ -23,14 +23,11 @@\n from Products.PlonePAS.tools.memberdata import MemberData\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PlonePAS.utils import getGroupsForPrincipal\n-from Products.PluggableAuthService.interfaces.events import \\\n-    ICredentialsUpdatedEvent\n+from Products.PluggableAuthService.interfaces.events import ICredentialsUpdatedEvent\n from six import BytesIO\n+from zExceptions import BadRequest\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n-from zExceptions import BadRequest\n-from plone.app.testing import TEST_USER_ID\n-\n \n import os\n import six\n@@ -69,7 +66,9 @@ def test_get_member(self):\n \n     def test_get_member_by_id(self):\n         from Products.PluggableAuthService.PluggableAuthService import (\n-            PluggableAuthService)\n+            PluggableAuthService,\n+        )\n+\n         # Use tool way of getting member by id. This returns a\n         # MemberData object wrapped by PAS (used to be wrapped by member).\n         member = self.mt.getMemberById(self.member_id)\n@@ -78,7 +77,8 @@ def test_get_member_by_id(self):\n         self.assertTrue(isinstance(aq_parent(member), PluggableAuthService))\n \n     def test_id_clean(self):\n-        from Products.PlonePAS.utils import cleanId, decleanId\n+        from Products.PlonePAS.utils import cleanId\n+        from Products.PlonePAS.utils import decleanId\n         a = [\n             "asdfasdf",\n             "asdf-asdf",\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex f6d5763c..8ec6fc43 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -1,12 +1,11 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import login\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.property import ZODBMutablePropertyProvider\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IUserEnumerationPlugin\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin\n \n import unittest\n \ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex 67710330..fbdc6319 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -2,17 +2,15 @@\n # $Id$\n """Tests for Products.PlonePAS.plugins.role.GroupAwareRoleManager"""\n \n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _PLUGIN_TYPE_INFO\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n+from Products.PluggableAuthService.PluggableAuthService import _PLUGIN_TYPE_INFO\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from Products.PluggableAuthService.plugins.tests.helpers import DummyUser\n from Products.PluggableAuthService.plugins.tests.helpers import FauxPAS\n-from Products.PluggableAuthService.plugins.tests.helpers import \\\n-    makeRequestAndResponse\n+from Products.PluggableAuthService.plugins.tests.helpers import makeRequestAndResponse\n from Products.PluginRegistry.PluginRegistry import PluginRegistry\n from zope.interface import implementer\n-from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n import unittest\n \ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex ae851272..d43a2865 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -5,11 +5,11 @@\n \n from plone.app import testing as pa_testing\n from plone.testing import zope\n-from zope.component import hooks\n from Products.PlonePAS import testing\n from Products.PluggableAuthService.interfaces import plugins as plugins_ifaces\n from Products.PluggableAuthService.plugins import CookieAuthHelper\n from Products.PluggableAuthService.plugins import HTTPBasicAuthHelper\n+from zope.component import hooks\n \n import transaction\n import unittest\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex b808d85e..856ba725 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -1,19 +1,19 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n+from AccessControl import getSecurityManager\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n-from AccessControl import getSecurityManager\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from BTrees.OOBTree import OOBTree\n from OFS.PropertyManager import PropertyManager\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.utils import registerToolInterface\n+from Products.CMFCore.utils import UniqueObject\n from Products.PlonePAS.interfaces.capabilities import IDeleteCapability\n from Products.PlonePAS.interfaces.capabilities import IManageCapabilities\n from Products.PlonePAS.interfaces.group import IGroupData\n@@ -22,16 +22,17 @@\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PlonePAS.tools.memberdata import MemberData\n from Products.PlonePAS.utils import CleanupTemp\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from ZPublisher.Converters import type_converters\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n from zope.interface import implementer\n+from ZPublisher.Converters import type_converters\n \n import logging\n import six\n \n+\n logger = logging.getLogger(\'PlonePAS\')\n _marker = object()\n \ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 70875d1e..67b05e62 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -1,15 +1,15 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl.users import nobody\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n+from AccessControl.users import nobody\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.utils import registerToolInterface\n+from Products.CMFCore.utils import UniqueObject\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.permissions import AddGroups\n from Products.PlonePAS.permissions import DeleteGroups\n@@ -18,15 +18,17 @@\n from Products.PlonePAS.permissions import ViewGroups\n from Products.PlonePAS.utils import getGroupsForPrincipal\n from Products.PluggableAuthService.events import GroupDeleted\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IRoleAssignerPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IRoleAssignerPlugin\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n from ZODB.POSException import ConflictError\n-from zope.interface import implementer\n from zope.event import notify\n+from zope.interface import implementer\n+\n import logging\n \n+\n logger = logging.getLogger(\'PluggableAuthService\')\n \n \ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 361844e7..cc07e14d 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from AccessControl.interfaces import IUser\n from AccessControl.requestmethod import postonly\n-from AccessControl.class_init import InitializeClass\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from Products.CMFCore.interfaces import IMember\n from Products.CMFCore.MemberDataTool import _marker\n@@ -20,11 +20,9 @@\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PluggableAuthService.events import PropertiesUpdated\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IRoleAssignerPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IRoleAssignerPlugin\n from zope.component import adapter\n from zope.event import notify\n from zope.interface import implementer\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 29c103a3..a5a66c9d 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -1,18 +1,19 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl import Unauthorized\n from AccessControl import getSecurityManager\n-from AccessControl.SecurityManagement import noSecurityManager\n+from AccessControl import Unauthorized\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n+from AccessControl.SecurityManagement import noSecurityManager\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n from OFS.Image import Image\n-from Products.CMFCore.MembershipTool import MembershipTool as BaseTool\n+from plone.protect.interfaces import IDisableCSRFProtection\n from Products.CMFCore.interfaces import IPropertiesTool\n+from Products.CMFCore.MembershipTool import MembershipTool as BaseTool\n from Products.CMFCore.permissions import ListPortalMembers\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.permissions import ManageUsers\n@@ -29,19 +30,19 @@\n from Products.PlonePAS.utils import cleanId\n from Products.PlonePAS.utils import safe_unicode\n from Products.PlonePAS.utils import scale_image\n-from ZODB.POSException import ConflictError\n-from plone.protect.interfaces import IDisableCSRFProtection\n-import six\n from six import BytesIO\n from zExceptions import BadRequest\n+from ZODB.POSException import ConflictError\n from zope import event\n from zope.component import getUtility\n from zope.interface import alsoProvides\n from zope.interface import implementer\n \n import logging\n+import six\n import transaction\n \n+\n default_portrait = \'defaultUser.png\'\n logger = logging.getLogger(\'PlonePAS\')\n \ndiff --git a/src/Products/PlonePAS/upgrades.py b/src/Products/PlonePAS/upgrades.py\nindex d9353256..45c8fd9b 100644\n--- a/src/Products/PlonePAS/upgrades.py\n+++ b/src/Products/PlonePAS/upgrades.py\n@@ -7,6 +7,7 @@\n \n import logging\n \n+\n logger = logging.getLogger(__name__)\n \n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T13:52:49+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/75f2a8ce1ee5307b17d127db0ee4d3608b4e967e

black

Files changed:
M setup.py
M src/Products/PlonePAS/__init__.py
M src/Products/PlonePAS/browser/info.py
M src/Products/PlonePAS/browser/member.py
M src/Products/PlonePAS/browser/search.py
M src/Products/PlonePAS/config.py
M src/Products/PlonePAS/interfaces/browser.py
M src/Products/PlonePAS/interfaces/events.py
M src/Products/PlonePAS/interfaces/group.py
M src/Products/PlonePAS/interfaces/memberdata.py
M src/Products/PlonePAS/interfaces/membership.py
M src/Products/PlonePAS/interfaces/plugins.py
M src/Products/PlonePAS/interfaces/propertysheets.py
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/pas.py
M src/Products/PlonePAS/patch.py
M src/Products/PlonePAS/permissions.py
M src/Products/PlonePAS/plugins/autogroup.py
M src/Products/PlonePAS/plugins/cookie_handler.py
M src/Products/PlonePAS/plugins/crumbler.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/upgrades.py
M src/Products/PlonePAS/utils.py
M src/Products/__init__.py

b'diff --git a/setup.py b/setup.py\nindex 3a093604..57e641a0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,32 +5,32 @@\n import sys\n \n \n-version = \'7.0.0a4.dev0\'\n+version = "7.0.0a4.dev0"\n \n \n longdescription = open("README.rst").read()\n-longdescription += \'\\n\'\n+longdescription += "\\n"\n longdescription += open("CHANGES.rst").read()\n \n install_requires = [\n-        \'DateTime\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.protect>=2.0.3\',\n-        \'plone.registry\',\n-        \'plone.session\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.PluggableAuthService>=2.0b2.dev0\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.deprecation\',\n-        \'Zope\',\n-    ]\n+    "DateTime",\n+    "plone.i18n",\n+    "plone.memoize",\n+    "plone.protect>=2.0.3",\n+    "plone.registry",\n+    "plone.session",\n+    "Products.CMFCore",\n+    "Products.GenericSetup",\n+    "Products.PluggableAuthService>=2.0b2.dev0",\n+    "setuptools",\n+    "six",\n+    "zope.component",\n+    "zope.deprecation",\n+    "Zope",\n+]\n \n setup(\n-    name=\'Products.PlonePAS\',\n+    name="Products.PlonePAS",\n     version=version,\n     description="PlonePAS modifies the PluggableAuthService for use by Plone.",\n     long_description=longdescription,\n@@ -47,22 +47,22 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'Zope CMF Plone PAS authentication\',\n-    author=\'Kapil Thangavelu, Wichert Akkerman\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/Products.PlonePAS\',\n-    license=\'ZPL\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'Products\'],\n+    keywords="Zope CMF Plone PAS authentication",\n+    author="Kapil Thangavelu, Wichert Akkerman",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/Products.PlonePAS",\n+    license="ZPL",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=install_requires,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.testing\',\n-            \'plone.app.robotframework\',\n+            "plone.app.testing",\n+            "plone.testing",\n+            "plone.app.robotframework",\n         ],\n     ),\n )\ndiff --git a/src/Products/PlonePAS/__init__.py b/src/Products/PlonePAS/__init__.py\nindex ba6c2c54..5318033b 100644\n--- a/src/Products/PlonePAS/__init__.py\n+++ b/src/Products/PlonePAS/__init__.py\n@@ -49,9 +49,9 @@ def initialize(context):\n     tools = (GroupsTool, GroupDataTool, MembershipTool, MemberDataTool)\n \n     ToolInit(\n-        \'PlonePAS Tool\',\n+        "PlonePAS Tool",\n         tools=tools,\n-        icon=\'tool.gif\',\n+        icon="tool.gif",\n     ).initialize(context)\n \n     context.registerClass(\n@@ -59,27 +59,23 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             role.manage_addGroupAwareRoleManagerForm,\n-            role.manage_addGroupAwareRoleManager),\n-        visibility=None\n+            role.manage_addGroupAwareRoleManager,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n         user.UserManager,\n         permission=add_user_folders,\n-        constructors=(\n-            user.manage_addUserManagerForm,\n-            user.manage_addUserManager),\n-        visibility=None\n+        constructors=(user.manage_addUserManagerForm, user.manage_addUserManager),\n+        visibility=None,\n     )\n \n     context.registerClass(\n         group.GroupManager,\n         permission=add_user_folders,\n-        constructors=(\n-            group.manage_addGroupManagerForm,\n-            group.manage_addGroupManager\n-        ),\n-        visibility=None\n+        constructors=(group.manage_addGroupManagerForm, group.manage_addGroupManager),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -87,8 +83,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             ufactory.manage_addPloneUserFactoryForm,\n-            ufactory.manage_addPloneUserFactory),\n-        visibility=None\n+            ufactory.manage_addPloneUserFactory,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -96,8 +93,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             local_role.manage_addLocalRolesManagerForm,\n-            local_role.manage_addLocalRolesManager),\n-        visibility=None\n+            local_role.manage_addLocalRolesManager,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -105,8 +103,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             property.manage_addZODBMutablePropertyProviderForm,\n-            property.manage_addZODBMutablePropertyProvider),\n-        visibility=None\n+            property.manage_addZODBMutablePropertyProvider,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -114,8 +113,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             crumbler.manage_addCookieCrumblingPluginForm,\n-            crumbler.manage_addCookieCrumblingPlugin),\n-        visibility=None\n+            crumbler.manage_addCookieCrumblingPlugin,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -123,17 +123,16 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             cookie_handler.manage_addExtendedCookieAuthHelperForm,\n-            cookie_handler.manage_addExtendedCookieAuthHelper),\n-        visibility=None\n+            cookie_handler.manage_addExtendedCookieAuthHelper,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n         autogroup.AutoGroup,\n         permission=add_user_folders,\n-        constructors=(\n-            autogroup.manage_addAutoGroupForm,\n-            autogroup.manage_addAutoGroup),\n-        visibility=None\n+        constructors=(autogroup.manage_addAutoGroupForm, autogroup.manage_addAutoGroup),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -141,7 +140,7 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             passwordpolicy.manage_addPasswordPolicyForm,\n-            passwordpolicy.manage_addPasswordPolicyPlugin\n+            passwordpolicy.manage_addPasswordPolicyPlugin,\n         ),\n-        visibility=None\n+        visibility=None,\n     )\ndiff --git a/src/Products/PlonePAS/browser/info.py b/src/Products/PlonePAS/browser/info.py\nindex 34cb9fcb..0eed6d2e 100644\n--- a/src/Products/PlonePAS/browser/info.py\n+++ b/src/Products/PlonePAS/browser/info.py\n@@ -13,7 +13,6 @@\n \n @implementer(IPASInfoView)\n class PASInfoView(BrowserView):\n-\n     def checkExtractorForInterface(self, interface):\n         acl = getToolByName(aq_inner(self.context), "acl_users")\n         plugins = acl.plugins.listPlugins(IExtractionPlugin)\ndiff --git a/src/Products/PlonePAS/browser/member.py b/src/Products/PlonePAS/browser/member.py\nindex 311f14d7..c1d86d13 100644\n--- a/src/Products/PlonePAS/browser/member.py\n+++ b/src/Products/PlonePAS/browser/member.py\n@@ -8,22 +8,22 @@\n \n @implementer(IPASMemberView)\n class PASMemberView(BrowserView):\n-\n     @memoize\n     def info(self, userid=None):\n-        pm = getToolByName(self.context, \'portal_membership\')\n+        pm = getToolByName(self.context, "portal_membership")\n         result = pm.getMemberInfo(memberId=userid)\n         if result is None:\n             # No such member: removed?  We return something useful anyway.\n             return {\n-                \'username\': userid,\n-                \'description\': \'\',\n-                \'language\': \'\',\n-                \'home_page\': \'\',\n-                \'name_or_id\': userid,\n-                \'location\': \'\',\n-                \'fullname\': \'\'\n+                "username": userid,\n+                "description": "",\n+                "language": "",\n+                "home_page": "",\n+                "name_or_id": userid,\n+                "location": "",\n+                "fullname": "",\n             }\n-        result[\'name_or_id\'] = result.get(\'fullname\') or \\\n-            result.get(\'username\') or userid\n+        result["name_or_id"] = (\n+            result.get("fullname") or result.get("username") or userid\n+        )\n         return result\ndiff --git a/src/Products/PlonePAS/browser/search.py b/src/Products/PlonePAS/browser/search.py\nindex 25d67d92..13395670 100644\n--- a/src/Products/PlonePAS/browser/search.py\n+++ b/src/Products/PlonePAS/browser/search.py\n@@ -9,12 +9,11 @@\n \n @implementer(IPASSearchView)\n class PASSearchView(BrowserView):\n-\n     @staticmethod\n     def extractCriteriaFromRequest(request):\n         criteria = request.form.copy()\n \n-        for key in ["form.submitted", "submit", \'b_start\', \'b_size\']:\n+        for key in ["form.submitted", "submit", "b_start", "b_size"]:\n             if key in criteria:\n                 del criteria[key]\n \n@@ -43,6 +42,7 @@ def sort(self, results, sort_key):\n \n         def key_func(a):\n             return idnormalizer.normalize(a.get(sort_key, a))\n+\n         return sorted(results, key=key_func)\n \n     def searchUsers(self, sort_by=None, **criteria):\ndiff --git a/src/Products/PlonePAS/config.py b/src/Products/PlonePAS/config.py\nindex 99ae0bc9..a1fc4a4e 100644\n--- a/src/Products/PlonePAS/config.py\n+++ b/src/Products/PlonePAS/config.py\n@@ -1,18 +1,19 @@\n # -*- coding: utf-8 -*-\n-PROJECTNAME = \'PlonePAS\'\n+PROJECTNAME = "PlonePAS"\n GLOBALS = globals()\n \n-DEFAULT_CHALLENGE_PROTOCOL = [\'http\']\n+DEFAULT_CHALLENGE_PROTOCOL = ["http"]\n DEFAULT_PROTO_MAPPING = {\n-    \'WebDAV\': DEFAULT_CHALLENGE_PROTOCOL,\n-    \'FTP\': DEFAULT_CHALLENGE_PROTOCOL,\n-    \'XML-RPC\': DEFAULT_CHALLENGE_PROTOCOL\n+    "WebDAV": DEFAULT_CHALLENGE_PROTOCOL,\n+    "FTP": DEFAULT_CHALLENGE_PROTOCOL,\n+    "XML-RPC": DEFAULT_CHALLENGE_PROTOCOL,\n }\n \n # Settings for member image resize quality\n HAS_PIL = True\n try:\n     from PIL import Image\n+\n     PIL_SCALING_ALGO = Image.ANTIALIAS\n except ImportError:\n     PIL_SCALING_ALGO = None\n@@ -21,8 +22,8 @@\n PIL_QUALITY = 88\n MEMBER_IMAGE_SCALE = (75, 100)\n IMAGE_SCALE_PARAMS = {\n-    \'scale\': MEMBER_IMAGE_SCALE,\n-    \'quality\': PIL_QUALITY,\n-    \'algorithm\': PIL_SCALING_ALGO,\n-    \'default_format\': \'PNG\'\n+    "scale": MEMBER_IMAGE_SCALE,\n+    "quality": PIL_QUALITY,\n+    "algorithm": PIL_SCALING_ALGO,\n+    "default_format": "PNG",\n }\ndiff --git a/src/Products/PlonePAS/interfaces/browser.py b/src/Products/PlonePAS/interfaces/browser.py\nindex 6f2b5cbb..bfc77e3a 100644\n--- a/src/Products/PlonePAS/interfaces/browser.py\n+++ b/src/Products/PlonePAS/interfaces/browser.py\n@@ -3,7 +3,6 @@\n \n \n class IPASInfoView(Interface):\n-\n     def hasLoginPasswordExtractor():\n         """Check if a login & password extraction plugin is active.\n \n@@ -13,8 +12,7 @@ def hasLoginPasswordExtractor():\n         """\n \n     def hasOpenIDExtractor():\n-        """Check if an OpenID extraction plugin is active.\n-        """\n+        """Check if an OpenID extraction plugin is active."""\n \n     def hasOpenIDdExtractor():\n         """Check if an OpenID extraction plugin is active.\n@@ -24,7 +22,6 @@ def hasOpenIDdExtractor():\n \n \n class IPASMemberView(Interface):\n-\n     def info(userid=None):\n         """Return \'harmless\' member info of any user, such as full name,\n         location, etc.\n@@ -32,7 +29,6 @@ def info(userid=None):\n \n \n class IPASSearchView(Interface):\n-\n     def searchUsers(sort_by=None, any_field=None, **criteria):\n         """Search for users matching a set of criteria.\n \ndiff --git a/src/Products/PlonePAS/interfaces/events.py b/src/Products/PlonePAS/interfaces/events.py\nindex 500ca8de..e6d54e92 100644\n--- a/src/Products/PlonePAS/interfaces/events.py\n+++ b/src/Products/PlonePAS/interfaces/events.py\n@@ -3,5 +3,4 @@\n \n \n class IUserInitialLoginInEvent(IUserLoggedInEvent):\n-    """A user logs in for the first time in the portal.\n-    """\n+    """A user logs in for the first time in the portal."""\ndiff --git a/src/Products/PlonePAS/interfaces/group.py b/src/Products/PlonePAS/interfaces/group.py\nindex 53ea92c7..dbe2cbc5 100644\n--- a/src/Products/PlonePAS/interfaces/group.py\n+++ b/src/Products/PlonePAS/interfaces/group.py\n@@ -4,7 +4,6 @@\n \n \n class IGroupManagement(Interface):\n-\n     def addGroup(id, **kw):\n         """\n         Create a group with the supplied id, roles, and groups.\n@@ -43,7 +42,6 @@ def removePrincipalFromGroup(principal_id, group_id):\n \n \n class IGroupIntrospection(Interface):\n-\n     def getGroupById(group_id):\n         """\n         Returns the portal_groupdata-ish object for a group\n@@ -71,16 +69,13 @@ def getGroupMembers(group_id):\n \n \n class IGroupDataTool(Interface):\n-\n     def wrapGroup(group):\n         """\n         decorate a group with property management capabilities if needed\n         """\n \n \n-class IGroupTool(IGroupIntrospection,\n-                 IGroupManagement,\n-                 plugins.IGroupsPlugin):\n+class IGroupTool(IGroupIntrospection, IGroupManagement, plugins.IGroupsPlugin):\n \n     """\n     Defines an interface for managing and introspecting and\n@@ -89,7 +84,7 @@ class IGroupTool(IGroupIntrospection,\n \n \n class IGroupData(Interface):\n-    """ An abstract interface for accessing properties on a group object"""\n+    """An abstract interface for accessing properties on a group object"""\n \n     def setProperties(properties=None, **kw):\n         """Allows setting of group properties en masse.\n@@ -97,44 +92,43 @@ def setProperties(properties=None, **kw):\n         list"""\n \n     def getProperty(id):\n-        """ Return the value of the property specified by \'id\' """\n+        """Return the value of the property specified by \'id\'"""\n \n     def getProperties():\n-        """ Return the properties of this group. Properties are as usual in\n+        """Return the properties of this group. Properties are as usual in\n         Zope."""\n \n     def getGroupId():\n-        """ Return the string id of this group, WITHOUT group prefix."""\n+        """Return the string id of this group, WITHOUT group prefix."""\n \n     def getMemberId():\n-        """This exists only for a basic user/group API compatibility\n-        """\n+        """This exists only for a basic user/group API compatibility"""\n \n     def getGroupName():\n-        """ Return the name of the group."""\n+        """Return the name of the group."""\n \n     def getGroupMembers():\n-        """ Return a list of the portal_memberdata-ish members of the group."""\n+        """Return a list of the portal_memberdata-ish members of the group."""\n \n     def getAllGroupMembers():\n-        """ Return a list of the portal_memberdata-ish members of the group\n+        """Return a list of the portal_memberdata-ish members of the group\n         including transitive ones (ie. users or groups of a group in that\n         group)."""\n \n     def getGroupMemberIds():\n-        """ Return a list of the user ids of the group."""\n+        """Return a list of the user ids of the group."""\n \n     def getAllGroupMemberIds():\n-        """ Return a list of the user ids of the group.\n+        """Return a list of the user ids of the group.\n         including transitive ones (ie. users or groups of a group in that\n         group)."""\n \n     def addMember(id):\n-        """ Add the existing member with the given id to the group"""\n+        """Add the existing member with the given id to the group"""\n \n     def removeMember(id):\n-        """ Remove the member with the provided id from the group """\n+        """Remove the member with the provided id from the group"""\n \n     def getGroup():\n-        """ Returns the actual group implementation. Varies by group\n+        """Returns the actual group implementation. Varies by group\n         implementation (GRUF/Nux/et al)."""\ndiff --git a/src/Products/PlonePAS/interfaces/memberdata.py b/src/Products/PlonePAS/interfaces/memberdata.py\nindex 2eca85fc..18b2e0e1 100644\n--- a/src/Products/PlonePAS/interfaces/memberdata.py\n+++ b/src/Products/PlonePAS/interfaces/memberdata.py\n@@ -3,8 +3,7 @@\n \n \n class IMemberDataTool(interfaces.IMemberDataTool):\n-    """More specific PlonePAS MemberDataTool interface.\n-    """\n+    """More specific PlonePAS MemberDataTool interface."""\n \n \n-__all__ = ("IMemberDataTool", )\n+__all__ = ("IMemberDataTool",)\ndiff --git a/src/Products/PlonePAS/interfaces/membership.py b/src/Products/PlonePAS/interfaces/membership.py\nindex e36e5265..a67de5aa 100644\n--- a/src/Products/PlonePAS/interfaces/membership.py\n+++ b/src/Products/PlonePAS/interfaces/membership.py\n@@ -3,10 +3,10 @@\n \n \n class IMembershipTool(interfaces.IMembershipTool):\n-\n     def getMemberInfo(memberId=None):\n         """Return \'harmless\' Memberinfo of any member, such as full name,\n         location, etc\n         """\n \n-__all__ = ("IMembershipTool", )\n+\n+__all__ = ("IMembershipTool",)\ndiff --git a/src/Products/PlonePAS/interfaces/plugins.py b/src/Products/PlonePAS/interfaces/plugins.py\nindex a1f78a31..785448b2 100644\n--- a/src/Products/PlonePAS/interfaces/plugins.py\n+++ b/src/Products/PlonePAS/interfaces/plugins.py\n@@ -120,7 +120,6 @@ def deleteUser(user_id):\n \n \n class ISchemaMutablePropertiesPlugin(Interface):\n-\n     def addProperty(property_type, property_name, default=None):\n         """\n         Add a new property to a property provider.\ndiff --git a/src/Products/PlonePAS/interfaces/propertysheets.py b/src/Products/PlonePAS/interfaces/propertysheets.py\nindex 6370d6ba..723ac6e0 100644\n--- a/src/Products/PlonePAS/interfaces/propertysheets.py\n+++ b/src/Products/PlonePAS/interfaces/propertysheets.py\n@@ -3,18 +3,14 @@\n \n \n class IMutablePropertySheet(IPropertySheet):\n-\n     def canWriteProperty(object, id):\n-        """ Check if a property can be modified.\n-        """\n+        """Check if a property can be modified."""\n \n     def setProperty(object, id, value):\n-        """\n-        """\n+        """ """\n \n     def setProperties(object, mapping):\n-        """\n-        """\n+        """ """\n \n \n class ISchemaMutablePropertySheet(IMutablePropertySheet):\ndiff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex ff34e4ca..13761999 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -6,11 +6,13 @@\n \n GROUP_PROPERTY_MAP = {\n     # target property: (possible key, ...)\n-    \'title\': (\'name\',\n-              \'displayName\',\n-              \'cn\',),\n-    \'description\': (\'description\', ),\n-    \'email\': (\'mail\', ),\n+    "title": (\n+        "name",\n+        "displayName",\n+        "cn",\n+    ),\n+    "description": ("description",),\n+    "email": ("mail",),\n }\n \n KNOWN_ATTRS = []\n@@ -21,12 +23,11 @@\n \n \n def getPropertiesForUser(self, user, request=None):\n-    """Fullfill PropertiesPlugin requirements\n-    """\n+    """Fullfill PropertiesPlugin requirements"""\n \n     if not isinstance(user, PloneGroup):\n         # It\'s not a PloneGroup, continue as usual\n-        return call(self, \'getPropertiesForUser\', user=user, request=request)\n+        return call(self, "getPropertiesForUser", user=user, request=request)\n \n     # We\'ve got a PloneGroup.\n     # Search for groups instead of users\n@@ -46,28 +47,21 @@ def getPropertiesForUser(self, user, request=None):\n \n \n def getGroupsForPrincipal(self, user, request=None, attr=None):\n-    """ Fulfill GroupsPlugin requirements, but don\'t return any groups for\n-    groups """\n+    """Fulfill GroupsPlugin requirements, but don\'t return any groups for\n+    groups"""\n \n     if not isinstance(user, PloneGroup):\n         # It\'s not a PloneGroup, continue as usual\n-        return call(self, \'getGroupsForPrincipal\', user,\n-                    request=request, attr=attr)\n+        return call(self, "getGroupsForPrincipal", user, request=request, attr=attr)\n \n     return ()\n \n \n def patch_ldapmp():\n     from Products.LDAPMultiPlugins.LDAPPluginBase import LDAPPluginBase\n-    wrap_method(\n-        LDAPPluginBase,\n-        \'getPropertiesForUser\',\n-        getPropertiesForUser\n-    )\n+\n+    wrap_method(LDAPPluginBase, "getPropertiesForUser", getPropertiesForUser)\n \n     from Products.LDAPMultiPlugins.LDAPMultiPlugin import LDAPMultiPlugin\n-    wrap_method(\n-        LDAPMultiPlugin,\n-        \'getGroupsForPrincipal\',\n-        getGroupsForPrincipal\n-    )\n+\n+    wrap_method(LDAPMultiPlugin, "getGroupsForPrincipal", getGroupsForPrincipal)\ndiff --git a/src/Products/PlonePAS/pas.py b/src/Products/PlonePAS/pas.py\nindex c1a38754..d2ebc79a 100644\n--- a/src/Products/PlonePAS/pas.py\n+++ b/src/Products/PlonePAS/pas.py\n@@ -32,14 +32,15 @@\n import logging\n \n \n-logger = logging.getLogger(\'PlonePAS\')\n+logger = logging.getLogger("PlonePAS")\n \n-registerToolInterface(\'acl_users\', IPluggableAuthService)\n+registerToolInterface("acl_users", IPluggableAuthService)\n \n \n #################################\n # helper functions\n \n+\n def _userSetGroups(pas, user_id, groupnames):\n     """method was used at GRUF level, but is used inside this monkies at several\n     places too.\n@@ -68,10 +69,7 @@ def _userSetGroups(pas, user_id, groupnames):\n     try:\n         groupmanagers = plugins.listPlugins(IGroupManagement)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\n-            \'PluggableAuthService: Plugin listing error\',\n-            exc_info=1\n-        )\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         groupmanagers = ()\n \n     for group in groupnames:\n@@ -81,11 +79,10 @@ def _userSetGroups(pas, user_id, groupnames):\n                     break\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                 logger.info(\n-                    \'PluggableAuthService: GroupManagement %s error\',\n-                    gm_id,\n-                    exc_info=1\n+                    "PluggableAuthService: GroupManagement %s error", gm_id, exc_info=1\n                 )\n \n+\n #################################\n # pas folder monkies - standard zope user folder api or GRUF\n \n@@ -112,13 +109,11 @@ def _doDelUser(self, id):\n     """\n     Given a user id, hand off to a deleter plugin if available.\n     """\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     userdeleters = plugins.listPlugins(IUserManagement)\n \n     if not userdeleters:\n-        raise NotImplementedError(\n-            "There is no plugin that can delete users."\n-        )\n+        raise NotImplementedError("There is no plugin that can delete users.")\n \n     for userdeleter_id, userdeleter in userdeleters:\n         try:\n@@ -129,8 +124,9 @@ def _doDelUser(self, id):\n             notify(PrincipalDeleted(id))\n \n \n-def _doChangeUser(self, principal_id, password, roles, domains=(), groups=None,\n-                  REQUEST=None, **kw):\n+def _doChangeUser(\n+    self, principal_id, password, roles, domains=(), groups=None, REQUEST=None, **kw\n+):\n     """\n     Given a principal id, change its password, roles, domains, if\n     respective plugins for such exist.\n@@ -142,7 +138,7 @@ def _doChangeUser(self, principal_id, password, roles, domains=(), groups=None,\n     if password is not None:\n         self.userSetPassword(principal_id, password)\n \n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     rmanagers = plugins.listPlugins(IRoleAssignerPlugin)\n \n     if not (rmanagers):\n@@ -157,21 +153,22 @@ def _doChangeUser(self, principal_id, password, roles, domains=(), groups=None,\n     return True\n \n \n-def userFolderAddUser(self, login, password, roles, domains,\n-                      groups=None, REQUEST=None, **kw):\n+def userFolderAddUser(\n+    self, login, password, roles, domains, groups=None, REQUEST=None, **kw\n+):\n     self._doAddUser(login, password, roles, domains, **kw)\n     if groups is not None:\n         _userSetGroups(self, login, groups)\n \n \n def _doAddGroup(self, id, roles, groups=None, **kw):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.addGroup(id, roles, groups, **kw)\n \n \n # for prefs_group_manage compatibility. really should be using tool.\n def _doDelGroups(self, names, REQUEST=None):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     for group_id in names:\n         gtool.removeGroup(group_id)\n \n@@ -183,7 +180,7 @@ def _doChangeGroup(self, principal_id, roles, groups=None, REQUEST=None, **kw):\n \n     See also _doChangeUser\n     """\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     gtool.editGroup(principal_id, roles, groups, **kw)\n     return True\n \n@@ -200,28 +197,27 @@ def _updateGroup(self, principal_id, roles=None, groups=None, **kw):\n \n \n def getGroups(self):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.listGroups()\n \n \n def getGroupNames(self):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.getGroupIds()\n \n \n def getGroupIds(self):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.getGroupIds()\n \n \n def getGroup(self, group_id):\n-    """Like getGroupById in groups tool, but doesn\'t wrap.\n-    """\n+    """Like getGroupById in groups tool, but doesn\'t wrap."""\n     group = None\n     introspectors = self.plugins.listPlugins(IGroupIntrospection)\n \n     if not introspectors:\n-        raise ValueError(\'No plugins allow for group management\')\n+        raise ValueError("No plugins allow for group management")\n     for iid, introspector in introspectors:\n         group = introspector.getGroupById(group_id)\n         if group is not None:\n@@ -269,9 +265,9 @@ def _getLocalRolesForDisplay(self, object):\n     for one_user in local_roles:\n         username = userid = one_user[0]\n         roles = one_user[1]\n-        userType = \'user\'\n+        userType = "user"\n         if self.getGroup(userid):\n-            userType = \'group\'\n+            userType = "group"\n         else:\n             user = self.getUserById(userid) or self.getUser(username)\n             if user:\n@@ -302,7 +298,7 @@ def getUsers(self):\n \n \n def canListAllUsers(self):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     # Do we have multiple user plugins?\n     num_enumeration_plugins = plugins.listPlugins(IUserEnumerationPlugin)\n     num_introspection_plugins = plugins.listPlugins(IUserEnumerationPlugin)\n@@ -310,7 +306,7 @@ def canListAllUsers(self):\n \n \n def canListAllGroups(self):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     # Do we have multiple group plugins?\n     num_enumeration_plugins = plugins.listPlugins(IGroupEnumerationPlugin)\n     num_introspection_plugins = plugins.listPlugins(IGroupEnumerationPlugin)\n@@ -320,7 +316,7 @@ def canListAllGroups(self):\n def userSetPassword(self, userid, password):\n     """Emulate GRUF 3 call for password set, for use with PwRT."""\n     # used by _doChangeUser\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     managers = plugins.listPlugins(IUserManagement)\n \n     if not managers:\n@@ -337,8 +333,9 @@ def userSetPassword(self, userid, password):\n             modified = True\n \n     if not modified:\n-        raise RuntimeError("No user management plugins were able "\n-                           "to successfully modify the user")\n+        raise RuntimeError(\n+            "No user management plugins were able " "to successfully modify the user"\n+        )\n \n \n def credentialsChanged(self, user, name, new_password):\n@@ -366,16 +363,16 @@ def _delOb(self, id):\n     #\n     # XXX imo this is a evil one\n     #\n-    plugins = self._getOb(\'plugins\', None)\n+    plugins = self._getOb("plugins", None)\n \n-    if getattr(plugins, \'removePluginById\', None) is not None:\n+    if getattr(plugins, "removePluginById", None) is not None:\n         plugins.removePluginById(id)\n \n     Folder._delOb(self, id)\n \n \n def addRole(self, role):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     roles = plugins.listPlugins(IRoleAssignerPlugin)\n \n     for plugin_id, plugin in roles:\n@@ -394,7 +391,7 @@ def getAllLocalRoles(self, context):\n \n \n def _getAllLocalRoles(self, context):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     lrmanagers = plugins.listPlugins(ILocalRolesPlugin)\n \n     roles = {}\n@@ -423,11 +420,10 @@ def authenticate(self, name, password, request):\n     try:\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\'PluggableAuthService: Plugin listing error\', exc_info=1)\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         authenticators = ()\n \n-    credentials = {\'login\': name,\n-                   \'password\': password}\n+    credentials = {"login": name, "password": password}\n \n     user_id = None\n \n@@ -439,9 +435,9 @@ def authenticate(self, name, password, request):\n                 break\n         except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n             logger.info(\n-                \'PluggableAuthService: AuthenticationPlugin %s error\',\n+                "PluggableAuthService: AuthenticationPlugin %s error",\n                 authenticator_id,\n-                exc_info=1\n+                exc_info=1,\n             )\n             continue\n \n@@ -460,7 +456,7 @@ def getUserIds(self):\n     try:\n         introspectors = plugins.listPlugins(IUserIntrospection)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\'PluggableAuthService: Plugin listing error\', exc_info=1)\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         introspectors = ()\n \n     results = []\n@@ -469,9 +465,9 @@ def getUserIds(self):\n             results.extend(introspector.getUserIds())\n         except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n             logger.info(\n-                \'PluggableAuthService: UserIntrospection %s error\',\n+                "PluggableAuthService: UserIntrospection %s error",\n                 introspector_id,\n-                exc_info=1\n+                exc_info=1,\n             )\n \n     return results\n@@ -486,7 +482,7 @@ def getUserNames(self):\n     try:\n         introspectors = plugins.listPlugins(IUserIntrospection)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\'PluggableAuthService: Plugin listing error\', exc_info=1)\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         introspectors = ()\n \n     results = []\n@@ -495,242 +491,206 @@ def getUserNames(self):\n             results.extend(introspector.getUserNames())\n         except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n             logger.info(\n-                \'PluggableAuthService: UserIntroSpection plugin %s error\',\n-                introspector_id, exc_info=1)\n+                "PluggableAuthService: UserIntroSpection plugin %s error",\n+                introspector_id,\n+                exc_info=1,\n+            )\n \n     return results\n \n \n def patch_pas():\n     # sort alphabetically by patched/added method name\n+    wrap_method(PluggableAuthService, "_delOb", _delOb)\n     wrap_method(\n         PluggableAuthService,\n-        \'_delOb\',\n-        _delOb\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_getAllLocalRoles\',\n+        "_getAllLocalRoles",\n         _getAllLocalRoles,\n         add=True,\n     )\n+    wrap_method(PluggableAuthService, "_doAddGroup", _doAddGroup, add=True)\n+    wrap_method(PluggableAuthService, "_doAddUser", _doAddUser)\n+    wrap_method(PluggableAuthService, "_doChangeGroup", _doChangeGroup, add=True)\n+    wrap_method(PluggableAuthService, "_doChangeUser", _doChangeUser, add=True)\n+    wrap_method(PluggableAuthService, "_doDelGroups", _doDelGroups, add=True)\n+    wrap_method(PluggableAuthService, "_doDelUser", _doDelUser, add=True)\n     wrap_method(\n         PluggableAuthService,\n-        \'_doAddGroup\',\n-        _doAddGroup,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doAddUser\',\n-        _doAddUser\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doChangeGroup\',\n-        _doChangeGroup,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doChangeUser\',\n-        _doChangeUser,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doDelGroups\',\n-        _doDelGroups,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doDelUser\',\n-        _doDelUser,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doDelUsers\',\n+        "_doDelUsers",\n         _doDelUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'_getLocalRolesForDisplay\',\n+        "_getLocalRolesForDisplay",\n         _getLocalRolesForDisplay,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_updateGroup\',\n-        _updateGroup,\n-        add=True\n+        add=True,\n     )\n+    wrap_method(PluggableAuthService, "_updateGroup", _updateGroup, add=True)\n     wrap_method(\n         PluggableAuthService,\n-        \'addRole\',\n+        "addRole",\n         addRole,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'authenticate\',\n+        "authenticate",\n         authenticate,\n         add=True,\n         roles=(),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'canListAllGroups\',\n+        "canListAllGroups",\n         canListAllGroups,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'canListAllUsers\',\n+        "canListAllUsers",\n         canListAllUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'credentialsChanged\',\n+        "credentialsChanged",\n         credentialsChanged,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getAllLocalRoles\',\n+        "getAllLocalRoles",\n         getAllLocalRoles,\n         add=True,\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroup\',\n+        "getGroup",\n         getGroup,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupById\',\n+        "getGroupById",\n         getGroupById,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupByName\',\n+        "getGroupByName",\n         getGroupByName,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupIds\',\n+        "getGroupIds",\n         getGroupIds,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupNames\',\n+        "getGroupNames",\n         getGroupNames,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroups\',\n+        "getGroups",\n         getGroups,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getLocalRolesForDisplay\',\n+        "getLocalRolesForDisplay",\n         getLocalRolesForDisplay,\n         add=True,\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getUserIds\',\n+        "getUserIds",\n         getUserIds,\n         add=True,\n-        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead."\n+        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead.",\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getUserNames\',\n+        "getUserNames",\n         getUserNames,\n         add=True,\n-        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead."\n+        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead.",\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getUsers\',\n+        "getUsers",\n         getUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getPureUsers\',\n+        "getPureUsers",\n         getUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderAddUser\',\n+        "userFolderAddUser",\n         postonly(userFolderAddUser),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderDelUsers\',\n+        "userFolderDelUsers",\n         postonly(_doDelUsers),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderEditGroup\',\n+        "userFolderEditGroup",\n         postonly(_doChangeGroup),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderEditUser\',\n+        "userFolderEditUser",\n         postonly(_doChangeUser),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderDelGroups\',\n+        "userFolderDelGroups",\n         postonly(_doDelGroups),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userSetGroups\',\n+        "userSetGroups",\n         _userSetGroups,\n         add=True,\n-        deprecated="Method from GRUF was removed."\n+        deprecated="Method from GRUF was removed.",\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userSetPassword\',\n+        "userSetPassword",\n         userSetPassword,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\ndiff --git a/src/Products/PlonePAS/patch.py b/src/Products/PlonePAS/patch.py\nindex 51f367e6..c9423a92 100644\n--- a/src/Products/PlonePAS/patch.py\n+++ b/src/Products/PlonePAS/patch.py\n@@ -4,18 +4,18 @@\n import logging\n \n \n-logger = logging.getLogger(\'PlonePAS\')\n+logger = logging.getLogger("PlonePAS")\n \n-PATTERN = \'__PlonePAS_%s__\'\n+PATTERN = "__PlonePAS_%s__"\n \n \n def call(self, __name__, *args, **kw):\n     return getattr(self, PATTERN % __name__)(*args, **kw)\n \n \n-WRAPPER = \'__PlonePAS_is_wrapper_method__\'\n-ADDED = \'__PlonePAS_is_added_method__\'\n-ORIG_NAME = \'__PlonePAS_original_method_name__\'\n+WRAPPER = "__PlonePAS_is_wrapper_method__"\n+ADDED = "__PlonePAS_is_added_method__"\n+ORIG_NAME = "__PlonePAS_original_method_name__"\n \n _marker = dict()  # type: ignore\n \n@@ -24,31 +24,27 @@ def isWrapperMethod(meth):\n     return getattr(meth, WRAPPER, False)\n \n \n-def wrap_method(klass, name, method,\n-                pattern=PATTERN, add=False, roles=None, deprecated=False):\n-    """takes a method and set it to a class. Annotates with hints what happened.\n-    """\n+def wrap_method(\n+    klass, name, method, pattern=PATTERN, add=False, roles=None, deprecated=False\n+):\n+    """takes a method and set it to a class. Annotates with hints what happened."""\n     new_name = pattern % name\n     if not add:\n         old_method = getattr(klass, name)\n         if isWrapperMethod(old_method):\n             logger.warn(\n-                \'PlonePAS: *NOT* wrapping already wrapped method at \'\n-                \'{0}.{1}\'.format(\n-                    klass.__name__, name)\n+                "PlonePAS: *NOT* wrapping already wrapped method at "\n+                "{0}.{1}".format(klass.__name__, name)\n             )\n \n             return\n-        logger.debug(\n-            \'PlonePAS: Wrapping method at %s.%s\',\n-            klass.__name__, name\n-        )\n+        logger.debug("PlonePAS: Wrapping method at %s.%s", klass.__name__, name)\n         setattr(klass, new_name, old_method)\n         setattr(method, ORIG_NAME, new_name)\n         setattr(method, WRAPPER, True)\n         setattr(method, ADDED, False)\n     else:\n-        logger.debug(\'PlonePAS: Adding method at %s.%s\', klass.__name__, name)\n+        logger.debug("PlonePAS: Adding method at %s.%s", klass.__name__, name)\n         setattr(method, WRAPPER, False)\n         setattr(method, ADDED, True)\n \n@@ -58,9 +54,9 @@ def wrap_method(klass, name, method,\n         setattr(klass, name, method)\n \n     if roles is not None:\n-        roles_attr = \'{0}__roles__\'.format(name)\n+        roles_attr = "{0}__roles__".format(name)\n         logger.debug(\n-            \'PlonePAS: Setting new permission roles at {0}.{1}\'.format(\n+            "PlonePAS: Setting new permission roles at {0}.{1}".format(\n                 klass.__name__, name\n             )\n         )\n@@ -71,8 +67,9 @@ def unwrap_method(klass, name):\n     # seems to be dead code, nowwhere used nor tested\n     old_method = getattr(klass, name)\n     if not isWrapperMethod(old_method):\n-        raise ValueError(\'Trying to unwrap non-wrapped \'\n-                         \'method at %s.%s\' % (klass.__name__, name))\n+        raise ValueError(\n+            "Trying to unwrap non-wrapped " "method at %s.%s" % (klass.__name__, name)\n+        )\n     orig_name = getattr(old_method, ORIG_NAME)\n     new_method = getattr(klass, orig_name)\n     delattr(klass, orig_name)\ndiff --git a/src/Products/PlonePAS/permissions.py b/src/Products/PlonePAS/permissions.py\nindex 74668b26..1515db2d 100644\n--- a/src/Products/PlonePAS/permissions.py\n+++ b/src/Products/PlonePAS/permissions.py\n@@ -2,17 +2,17 @@\n from AccessControl.Permission import addPermission\n \n \n-AddGroups = \'Add Groups\'\n-addPermission(AddGroups, default_roles=(\'Manager\',))\n+AddGroups = "Add Groups"\n+addPermission(AddGroups, default_roles=("Manager",))\n \n-ManageGroups = \'Manage Groups\'\n-addPermission(ManageGroups, default_roles=(\'Manager\',))\n+ManageGroups = "Manage Groups"\n+addPermission(ManageGroups, default_roles=("Manager",))\n \n-ViewGroups = \'View Groups\'\n-addPermission(ViewGroups, default_roles=(\'Manager\', \'Owner\', \'Member\'))\n+ViewGroups = "View Groups"\n+addPermission(ViewGroups, default_roles=("Manager", "Owner", "Member"))\n \n-DeleteGroups = \'Delete Groups\'\n-addPermission(DeleteGroups, default_roles=(\'Manager\', ))\n+DeleteGroups = "Delete Groups"\n+addPermission(DeleteGroups, default_roles=("Manager",))\n \n-SetGroupOwnership = \'Set Group Ownership\'\n-addPermission(SetGroupOwnership, default_roles=(\'Manager\', \'Owner\'))\n+SetGroupOwnership = "Set Group Ownership"\n+addPermission(SetGroupOwnership, default_roles=("Manager", "Owner"))\ndiff --git a/src/Products/PlonePAS/plugins/autogroup.py b/src/Products/PlonePAS/plugins/autogroup.py\nindex 66a0bf41..bce066a6 100644\n--- a/src/Products/PlonePAS/plugins/autogroup.py\n+++ b/src/Products/PlonePAS/plugins/autogroup.py\n@@ -13,8 +13,7 @@\n manage_addAutoGroupForm = PageTemplateFile("../zmi/AutoGroupForm", globals())\n \n \n-def manage_addAutoGroup(self, id, title=\'\', group=\'\', description=\'\',\n-                        RESPONSE=None):\n+def manage_addAutoGroup(self, id, title="", group="", description="", RESPONSE=None):\n     """Add an Auto Group plugin."""\n \n     plugin = AutoGroup(id, title, group, description)\n@@ -23,11 +22,12 @@ def manage_addAutoGroup(self, id, title=\'\', group=\'\', description=\'\',\n     if RESPONSE is not None:\n         return RESPONSE.redirect(\n             "%s/manage_workspace?manage_tabs_message=AutoGroup+plugin+added"\n-            % self.absolute_url())\n+            % self.absolute_url()\n+        )\n \n \n class VirtualGroup(PropertiedUser):\n-    def __init__(self, id, title=\'\', description=\'\'):\n+    def __init__(self, id, title="", description=""):\n         super(VirtualGroup, self).__init__(id)\n         self.id = id\n         self.title = title\n@@ -62,38 +62,27 @@ def isGroup(self):\n \n \n @implementer(\n-    IGroupEnumerationPlugin,\n-    IGroupsPlugin,\n-    IGroupIntrospection,\n-    IPropertiesPlugin\n+    IGroupEnumerationPlugin, IGroupsPlugin, IGroupIntrospection, IPropertiesPlugin\n )\n class AutoGroup(BasePlugin):\n     meta_type = "Automatic Group Plugin"\n \n     _properties = (\n-        {\'id\': \'title\',\n-         \'label\': \'Title\',\n-         \'type\': \'string\',\n-         \'mode\': \'w\'},\n-        {\'id\': \'group\',\n-         \'label\': \'Group\',\n-         \'type\': \'string\',\n-         \'mode\': \'w\'},\n-        {\'id\': \'description\',\n-         \'label\': \'Description\',\n-         \'type\': \'string\',\n-         \'mode\': \'w\'},\n+        {"id": "title", "label": "Title", "type": "string", "mode": "w"},\n+        {"id": "group", "label": "Group", "type": "string", "mode": "w"},\n+        {"id": "description", "label": "Description", "type": "string", "mode": "w"},\n     )\n \n-    def __init__(self, id, title=\'\', group=None, description=\'\'):\n+    def __init__(self, id, title="", group=None, description=""):\n         self._setId(id)\n         self.title = title\n         self.group = group\n         self.description = description\n \n     # IGroupEnumerationPlugin implementation\n-    def enumerateGroups(self, id=None, exact_match=False, sort_by=None,\n-                        max_results=None, **kw):\n+    def enumerateGroups(\n+        self, id=None, exact_match=False, sort_by=None, max_results=None, **kw\n+    ):\n         if kw:\n             return []\n \n@@ -107,10 +96,14 @@ def enumerateGroups(self, id=None, exact_match=False, sort_by=None,\n             if not exact_match and id not in mygroup:\n                 return []\n \n-        return [{\'id\': self.group,\n-                 \'groupid\': self.group,\n-                 \'title\': self.title,\n-                 \'pluginid\': self.getId()}]\n+        return [\n+            {\n+                "id": self.group,\n+                "groupid": self.group,\n+                "title": self.title,\n+                "pluginid": self.getId(),\n+            }\n+        ]\n \n     # IGroupsPlugin implementation\n     def getGroupsForPrincipal(self, principal, request=None):\n@@ -124,8 +117,7 @@ def getGroupById(self, group_id):\n         if group_id != self.group:\n             return None\n \n-        return VirtualGroup(self.group, title=self.title,\n-                            description=self.description)\n+        return VirtualGroup(self.group, title=self.title, description=self.description)\n \n     def getGroups(self):\n         return [self.getGroupById(id) for id in self.getGroupIds()]\n@@ -139,8 +131,7 @@ def getGroupMembers(self, group_id):\n     # IPropertiesPlugin:\n     def getPropertiesForUser(self, user, request=None):\n         if user == self.group:\n-            return {\'title\': self.title,\n-                    \'description\': self.description}\n+            return {"title": self.title, "description": self.description}\n         else:\n             return {}\n \ndiff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex 06c6c8dc..4d7df83e 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -29,10 +29,8 @@\n from zope.interface import implementer\n \n \n-def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\n-                                       RESPONSE=None, **kw):\n-    """Create an instance of a extended cookie auth helper.\n-    """\n+def manage_addExtendedCookieAuthHelper(self, id, title="", RESPONSE=None, **kw):\n+    """Create an instance of a extended cookie auth helper."""\n \n     self = self.this()\n \n@@ -41,11 +39,11 @@ def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\n     o = getattr(aq_base(self), id)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n+\n \n manage_addExtendedCookieAuthHelperForm = DTMLFile(\n-    "../zmi/ExtendedCookieAuthHelperForm",\n-    globals()\n+    "../zmi/ExtendedCookieAuthHelperForm", globals()\n )\n \n \n@@ -53,32 +51,30 @@ def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\n     ILoginPasswordHostExtractionPlugin,\n     IChallengePlugin,\n     ICredentialsUpdatePlugin,\n-    ICredentialsResetPlugin\n+    ICredentialsResetPlugin,\n )\n class ExtendedCookieAuthHelper(BasePlugin):\n     """Multi-plugin which adds ability to override the updating of cookie via\n     a setAuthCookie method/script.\n     """\n \n-    meta_type = \'Extended Cookie Auth Helper\'\n+    meta_type = "Extended Cookie Auth Helper"\n     security = ClassSecurityInfo()\n \n     @security.private\n     def updateCredentials(self, request, response, login, new_password):\n-        """Override standard updateCredentials method\n-        """\n+        """Override standard updateCredentials method"""\n         cookie_val = self.get_cookie_value(login, new_password)\n         kw = {}\n         registry = getUtility(IRegistry)\n-        length = registry.get(\'plone.auth_cookie_length\', \'0\')\n+        length = registry.get("plone.auth_cookie_length", "0")\n         try:\n             length = int(length)\n         except ValueError:\n             length = 0\n         if length:\n-            kw.update(expires=(DateTime() + length).toZone(\'GMT\').rfc822())\n-        response.setCookie(\n-            self.cookie_name, quote(cookie_val), path=\'/\', **kw)\n+            kw.update(expires=(DateTime() + length).toZone("GMT").rfc822())\n+        response.setCookie(self.cookie_name, quote(cookie_val), path="/", **kw)\n \n     @security.public\n     def login(self):\n@@ -91,9 +87,9 @@ def login(self):\n         login_next.cpy script.\n         """\n         request = self.REQUEST\n-        response = request[\'RESPONSE\']\n+        response = request["RESPONSE"]\n \n-        password = request.get(\'__ac_password\', \'\')\n+        password = request.get("__ac_password", "")\n \n         user = getSecurityManager().getUser()\n         login = user.getUserName()\n@@ -109,8 +105,7 @@ def login(self):\n             # Folder!\n             pas_instance = self._getPAS()\n             if pas_instance is not None:\n-                pas_instance.updateCredentials(request, response, login,\n-                                               password)\n+                pas_instance.updateCredentials(request, response, login, password)\n \n \n InitializeClass(ExtendedCookieAuthHelper)\ndiff --git a/src/Products/PlonePAS/plugins/crumbler.py b/src/Products/PlonePAS/plugins/crumbler.py\nindex 98163e7c..710e602b 100644\n--- a/src/Products/PlonePAS/plugins/crumbler.py\n+++ b/src/Products/PlonePAS/plugins/crumbler.py\n@@ -18,13 +18,12 @@\n import logging\n \n \n-logger = logging.getLogger(\'PlonePAS\')\n+logger = logging.getLogger("PlonePAS")\n \n-CC_ID = \'cookie_auth\'\n+CC_ID = "cookie_auth"\n \n \n-def manage_addCookieCrumblingPlugin(self, id, title=\'\',\n-                                    RESPONSE=None, **kw):\n+def manage_addCookieCrumblingPlugin(self, id, title="", RESPONSE=None, **kw):\n     """\n     Create an instance of a cookie crumbling plugin.\n     """\n@@ -37,10 +36,12 @@ def manage_addCookieCrumblingPlugin(self, id, title=\'\',\n     manage_addCC(o, CC_ID)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n \n-manage_addCookieCrumblingPluginForm = \\\n-    DTMLFile("../zmi/CookieCrumblingPluginForm", globals())\n+\n+manage_addCookieCrumblingPluginForm = DTMLFile(\n+    "../zmi/CookieCrumblingPluginForm", globals()\n+)\n \n \n @implementer(IExtractionPlugin)\n@@ -48,7 +49,8 @@ class CookieCrumblingPlugin(Folder, BasePlugin):\n     """Multi-plugin for injecting HTTP Basic Authentication\n     credentials from form credentials.\n     """\n-    meta_type = \'Cookie Crumbling Plugin\'\n+\n+    meta_type = "Cookie Crumbling Plugin"\n \n     security = ClassSecurityInfo()\n \n@@ -61,8 +63,7 @@ def _getCC(self):\n \n     @security.private\n     def extractCredentials(self, request):\n-        """ Extract basic auth credentials from \'request\'.\n-        """\n+        """Extract basic auth credentials from \'request\'."""\n \n         try:\n             self._getCC().modifyRequest(request, request.RESPONSE)\n@@ -72,4 +73,5 @@ def extractCredentials(self, request):\n \n         return {}\n \n+\n InitializeClass(CookieCrumblingPlugin)\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex fb7cc4b9..79b6aaca 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -27,10 +27,10 @@\n \n \n manage_addGroupManagerForm = DTMLFile("../zmi/GroupManagerForm", globals())\n-logger = logging.getLogger(\'PlonePAS\')\n+logger = logging.getLogger("PlonePAS")\n \n \n-def manage_addGroupManager(self, id, title=\'\', RESPONSE=None):\n+def manage_addGroupManager(self, id, title="", RESPONSE=None):\n     """\n     Add a zodb group manager with management and introspection\n     capabilities to pas.\n@@ -40,15 +40,10 @@ def manage_addGroupManager(self, id, title=\'\', RESPONSE=None):\n     self._setObject(grum.getId(), grum)\n \n     if RESPONSE is not None:\n-        return RESPONSE.redirect(\'manage_workspace\')\n+        return RESPONSE.redirect("manage_workspace")\n \n \n-@implementer(\n-    IGroupManagement,\n-    IGroupIntrospection,\n-    IGroupCapability,\n-    IDeleteCapability\n-)\n+@implementer(IGroupManagement, IGroupIntrospection, IGroupCapability, IDeleteCapability)\n class GroupManager(ZODBGroupManager):\n \n     meta_type = "Group Manager"\n@@ -78,8 +73,9 @@ def addPrincipalToGroup(self, principal_id, group_id):\n         return True\n \n     def removePrincipalFromGroup(self, principal_id, group_id):\n-        already = ZODBGroupManager.removePrincipalFromGroup(self, principal_id,\n-                                                            group_id)\n+        already = ZODBGroupManager.removePrincipalFromGroup(\n+            self, principal_id, group_id\n+        )\n         if already:\n             self._group_principal_map[group_id].remove(principal_id)\n         return True\n@@ -88,15 +84,16 @@ def removePrincipalFromGroup(self, principal_id, group_id):\n     # overrides for api matching/massage\n \n     def updateGroup(self, group_id, title=None, description=None):\n-        ZODBGroupManager.updateGroup(self, group_id, title=title,\n-                                     description=description)\n+        ZODBGroupManager.updateGroup(\n+            self, group_id, title=title, description=description\n+        )\n         return True\n \n     #################################\n     # introspection interface\n \n     def getGroupById(self, group_id, default=None):\n-        plugins = self._getPAS()._getOb(\'plugins\')\n+        plugins = self._getPAS()._getOb("plugins")\n         title = None\n         if group_id not in self.getGroupIds():\n             return default\n@@ -158,7 +155,7 @@ def allowGroupRemove(self, user_id, group_id):\n \n     @security.private\n     def _createGroup(self, plugins, group_id, name):\n-        """ Create group object. For users, this can be done with a\n+        """Create group object. For users, this can be done with a\n         plugin, but I don\'t care to define one for that now. Just uses\n         PloneGroup.  But, the code\'s still here, just commented out.\n         This method based on PluggableAuthervice._createUser\n@@ -167,7 +164,7 @@ def _createGroup(self, plugins, group_id, name):\n \n     @security.private\n     def _findGroup(self, plugins, group_id, title=None, request=None):\n-        """ group_id -> decorated_group\n+        """group_id -> decorated_group\n         This method based on PluggableAuthService._findGroup\n         """\n         group = self._createGroup(plugins, group_id, title)\n@@ -179,8 +176,7 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n             if data:\n                 group.addPropertysheet(propfinder_id, data)\n \n-        groups = self._getPAS()._getGroupsForPrincipal(group, request,\n-                                                       plugins=plugins)\n+        groups = self._getPAS()._getGroupsForPrincipal(group, request, plugins=plugins)\n         group._addGroups(groups)\n \n         rolemakers = plugins.listPlugins(IRolesPlugin)\n@@ -190,24 +186,24 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n             if roles:\n                 group._addRoles(roles)\n \n-        group._addRoles([\'Authenticated\'])\n+        group._addRoles(["Authenticated"])\n \n         return group.__of__(self)\n \n     @security.private\n     def _verifyGroup(self, plugins, group_id=None, title=None):\n \n-        """ group_id -> boolean\n+        """group_id -> boolean\n         This method based on PluggableAuthService._verifyUser\n         """\n         criteria = {}\n \n         if group_id is not None:\n-            criteria[\'id\'] = group_id\n-            criteria[\'exact_match\'] = True\n+            criteria["id"] = group_id\n+            criteria["exact_match"] = True\n \n         if title is not None:\n-            criteria[\'title\'] = title\n+            criteria["title"] = title\n \n         if criteria:\n             enumerators = plugins.listPlugins(IGroupEnumerationPlugin)\n@@ -217,14 +213,13 @@ def _verifyGroup(self, plugins, group_id=None, title=None):\n                     info = enumerator.enumerateGroups(**criteria)\n \n                     if info:\n-                        return info[0][\'id\']\n+                        return info[0]["id"]\n \n                 except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                     logger.info(\n-                        \'PluggableAuthService: GroupEnumerationPlugin %s \'\n-                        \'error\',\n+                        "PluggableAuthService: GroupEnumerationPlugin %s " "error",\n                         enumerator_id,\n-                        exc_info=1\n+                        exc_info=1,\n                     )\n \n         return 0\n@@ -242,7 +237,7 @@ class PloneGroup(PloneUser):\n     _isGroup = True\n \n     def getId(self, unprefixed=None):\n-        """ -> user ID\n+        """-> user ID\n         Modified to accept silly GRUF param.\n         """\n         return self._id\n@@ -258,37 +253,33 @@ def getMemberIds(self, transitive=1):\n         members = []\n         for iid, introspector in introspectors:\n             try:\n-                members.extend(\n-                    list(introspector.getGroupMembers(self.getId())))\n+                members.extend(list(introspector.getGroupMembers(self.getId())))\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                 logger.info(\n-                    \'PluggableAuthService: getGroupMembers %s error\',\n-                    iid, exc_info=1)\n+                    "PluggableAuthService: getGroupMembers %s error", iid, exc_info=1\n+                )\n \n         return members\n \n     @security.public\n     def addMember(self, id):\n-        """Add the existing member with the given id to the group\n-        """\n+        """Add the existing member with the given id to the group"""\n         self.addPrincipalToGroup(id, self.getId())\n \n     @security.public\n     def removeMember(self, id):\n-        """Remove the member with the provided id from the group.\n-        """\n+        """Remove the member with the provided id from the group."""\n         self.removePrincipalFromGroup(id, self.getId())\n \n     @security.public\n     def getRolesInContext(self, object):\n-        """Since groups can\'t actually log in, do nothing.\n-        """\n+        """Since groups can\'t actually log in, do nothing."""\n         return []\n \n     @security.public\n     def allowed(self, object, object_roles=None):\n-        """Since groups can\'t actually log in, do nothing.\n-        """\n+        """Since groups can\'t actually log in, do nothing."""\n         return 0\n \n+\n InitializeClass(PloneGroup)\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex eed5d703..758532d6 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -24,10 +24,10 @@ def manage_addLocalRolesManager(dispatcher, id, title=None, RESPONSE=None):\n     dispatcher._setObject(lrm.getId(), lrm)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n \n-manage_addLocalRolesManagerForm = \\\n-    DTMLFile(\'../zmi/LocalRolesManagerForm\', globals())\n+\n+manage_addLocalRolesManagerForm = DTMLFile("../zmi/LocalRolesManagerForm", globals())\n \n \n @implementer(ILocalRolesPlugin)\n@@ -55,7 +55,7 @@ def getRolesInContext(self, user, object):\n         object = aq_inner(object)\n \n         while 1:\n-            local_roles = getattr(object, \'__ac_local_roles__\', None)\n+            local_roles = getattr(object, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n@@ -70,14 +70,14 @@ def getRolesInContext(self, user, object):\n             inner = aq_inner(object)\n             parent = aq_parent(inner)\n \n-            if getattr(object, \'__ac_local_roles_block__\', None):\n+            if getattr(object, "__ac_local_roles_block__", None):\n                 break\n \n             if parent is not None:\n                 object = parent\n                 continue\n \n-            new = getattr(object, \'__self__\', None)\n+            new = getattr(object, "__self__", None)\n \n             if new is not None:\n                 object = aq_inner(new)\n@@ -101,7 +101,7 @@ def checkLocalRolesAllowed(self, user, object, object_roles):\n \n         while 1:\n \n-            local_roles = getattr(inner_obj, \'__ac_local_roles__\', None)\n+            local_roles = getattr(inner_obj, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n@@ -126,14 +126,14 @@ def checkLocalRolesAllowed(self, user, object, object_roles):\n             inner = aq_inner(inner_obj)\n             parent = aq_parent(inner)\n \n-            if getattr(inner_obj, \'__ac_local_roles_block__\', None):\n+            if getattr(inner_obj, "__ac_local_roles_block__", None):\n                 break\n \n             if parent is not None:\n                 inner_obj = parent\n                 continue\n \n-            new = getattr(inner_obj, \'__self__\', None)\n+            new = getattr(inner_obj, "__self__", None)\n \n             if new is not None:\n                 inner_obj = aq_inner(new)\n@@ -149,7 +149,7 @@ def getAllLocalRolesInContext(self, context):\n \n         while True:\n \n-            local_roles = getattr(object, \'__ac_local_roles__\', None)\n+            local_roles = getattr(object, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n@@ -167,14 +167,14 @@ def getAllLocalRolesInContext(self, context):\n             inner = aq_inner(object)\n             parent = aq_parent(inner)\n \n-            if getattr(object, \'__ac_local_roles_block__\', None):\n+            if getattr(object, "__ac_local_roles_block__", None):\n                 break\n \n             if parent is not None:\n                 object = parent\n                 continue\n \n-            new = getattr(object, \'__self__\', None)\n+            new = getattr(object, "__self__", None)\n \n             if new is not None:\n                 object = aq_inner(new)\n@@ -184,4 +184,5 @@ def getAllLocalRolesInContext(self, context):\n \n         return roles\n \n+\n InitializeClass(LocalRolesManager)\ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex 0db65593..cecd695a 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -12,16 +12,14 @@\n from zope.interface import implementer\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n-manage_addPasswordPolicyForm = PageTemplateFile(\n-    "../zmi/PasswordPolicyForm",\n-    globals()\n-)\n+manage_addPasswordPolicyForm = PageTemplateFile("../zmi/PasswordPolicyForm", globals())\n \n \n-def manage_addPasswordPolicyPlugin(self, id, title=\'\',\n-                                   RESPONSE=None, schema=None, **kw):\n+def manage_addPasswordPolicyPlugin(\n+    self, id, title="", RESPONSE=None, schema=None, **kw\n+):\n     """\n     Create an instance of a password validation plugin.\n     """\n@@ -31,48 +29,44 @@ def manage_addPasswordPolicyPlugin(self, id, title=\'\',\n     if RESPONSE is not None:\n         return RESPONSE.redirect(\n             "%s/manage_workspace?"\n-            "manage_tabs_message=DefaultPasswordPlugin+plugin+added" %\n-            self.absolute_url()\n+            "manage_tabs_message=DefaultPasswordPlugin+plugin+added"\n+            % self.absolute_url()\n         )\n \n \n @implementer(IValidationPlugin)\n class PasswordPolicyPlugin(BasePlugin):\n-    """Simple Password Policy to ensure password is 5 chars long.\n-    """\n+    """Simple Password Policy to ensure password is 5 chars long."""\n \n-    meta_type = \'Default Plone Password Policy\'\n+    meta_type = "Default Plone Password Policy"\n \n     security = ClassSecurityInfo()\n \n-    def __init__(self, id, title=\'\'):\n-        """Create a default plone password policy to ensure 5 char passwords\n-        """\n+    def __init__(self, id, title=""):\n+        """Create a default plone password policy to ensure 5 char passwords"""\n         self.id = id\n         self.title = title\n \n     @security.private\n     def validateUserInfo(self, user, set_id, set_info):\n-        """ See IValidationPlugin. Used to validate password property\n-        """\n+        """See IValidationPlugin. Used to validate password property"""\n \n         if not set_info:\n             return []\n-        password = set_info.get(\'password\', None)\n+        password = set_info.get("password", None)\n         if password is None:\n             return []\n-        elif password == \'\':\n-            return [{\'id\': \'password\', \'error\': _(u\'Minimum 5 characters.\')}]\n+        elif password == "":\n+            return [{"id": "password", "error": _("Minimum 5 characters.")}]\n         elif len(password) < 5:\n             return [\n                 {\n-                    \'id\': \'password\',\n-                    \'error\': _(\n-                        u\'Your password must contain at least 5 characters.\'\n-                    )\n+                    "id": "password",\n+                    "error": _("Your password must contain at least 5 characters."),\n                 }\n             ]\n         else:\n             return []\n \n+\n InitializeClass(PasswordPolicyPlugin)\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex f25c624b..cab9d4c9 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -23,11 +23,12 @@\n import six\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n-def manage_addZODBMutablePropertyProvider(self, id, title=\'\',\n-                                          RESPONSE=None, schema=None, **kw):\n+def manage_addZODBMutablePropertyProvider(\n+    self, id, title="", RESPONSE=None, schema=None, **kw\n+):\n     """\n     Create an instance of a mutable property manager.\n     """\n@@ -35,32 +36,30 @@ def manage_addZODBMutablePropertyProvider(self, id, title=\'\',\n     self._setObject(o.getId(), o)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n+\n \n manage_addZODBMutablePropertyProviderForm = DTMLFile(\n-    "../zmi/MutablePropertyProviderForm", globals())\n+    "../zmi/MutablePropertyProviderForm", globals()\n+)\n \n \n def isStringType(data):\n     return isinstance(data, str) or isinstance(data, six.text_type)\n \n \n-@implementer(\n-    IPropertiesPlugin,\n-    IUserEnumerationPlugin,\n-    IMutablePropertiesPlugin\n-)\n+@implementer(IPropertiesPlugin, IUserEnumerationPlugin, IMutablePropertiesPlugin)\n class ZODBMutablePropertyProvider(BasePlugin):\n     """Storage for mutable properties in the ZODB for users/groups.\n \n     API sounds like it\'s only for users, but groups work as well.\n     """\n \n-    meta_type = \'ZODB Mutable Property Provider\'\n+    meta_type = "ZODB Mutable Property Provider"\n \n     security = ClassSecurityInfo()\n \n-    def __init__(self, id, title=\'\', schema=None, **kw):\n+    def __init__(self, id, title="", schema=None, **kw):\n         """Create in-ZODB mutable property provider.\n \n         Provide a schema either as a list of (name,type,value) tuples\n@@ -106,7 +105,7 @@ def _getSchema(self, isgroup=None):\n             # Don\'t fail badly if tool is not available.\n             if mdtool is not None:\n                 mdschema = mdtool.propertyMap()\n-                schema = [(elt[\'id\'], elt[\'type\']) for elt in mdschema]\n+                schema = [(elt["id"], elt["type"]) for elt in mdschema]\n         return schema\n \n     def _getDefaultValues(self, isgroup=None):\n@@ -154,7 +153,7 @@ def getPropertiesForUser(self, user, request=None):\n         NOTE: Must always return something, or else the property sheet\n         won\'t get created and this will screw up portal_memberdata.\n         """\n-        isGroup = getattr(user, \'isGroup\', lambda: None)()\n+        isGroup = getattr(user, "isGroup", lambda: None)()\n \n         data = self._storage.get(user.getId())\n         defaults = self._getDefaultValues(isGroup)\n@@ -166,37 +165,34 @@ def getPropertiesForUser(self, user, request=None):\n             if key not in data:\n                 data[key] = val\n \n-        return MutablePropertySheet(self.id,\n-                                    schema=self._getSchema(isGroup), **data)\n+        return MutablePropertySheet(self.id, schema=self._getSchema(isGroup), **data)\n \n     @security.private\n     def setPropertiesForUser(self, user, propertysheet):\n         """Set the properties of a user or group based on the contents of a\n         property sheet.\n         """\n-        isGroup = getattr(user, \'isGroup\', lambda: None)()\n+        isGroup = getattr(user, "isGroup", lambda: None)()\n \n         properties = dict(propertysheet.propertyItems())\n \n         for name, property_type in self._getSchema(isGroup) or ():\n-            if (\n-                name in properties and not\n-                validateValue(property_type, properties[name])\n+            if name in properties and not validateValue(\n+                property_type, properties[name]\n             ):\n                 raise ValueError(\n-                    \'Invalid value: %s does not conform to %s\' %\n-                    (name, property_type)\n+                    "Invalid value: %s does not conform to %s" % (name, property_type)\n                 )\n \n         allowed_prop_keys = [pn for pn, pt in self._getSchema(isGroup) or ()]\n         if allowed_prop_keys:\n             prop_names = set(properties.keys()) - set(allowed_prop_keys)\n             if prop_names:\n-                raise ValueError(\'Unknown Properties: %r\' % prop_names)\n+                raise ValueError("Unknown Properties: %r" % prop_names)\n \n         userid = user.getId()\n         userprops = self._storage.get(userid)\n-        properties.update({\'isGroup\': isGroup})\n+        properties.update({"isGroup": isGroup})\n         if userprops is not None:\n             userprops.update(properties)\n             # notify persistence machinery of change\n@@ -206,8 +202,7 @@ def setPropertiesForUser(self, user, propertysheet):\n \n     @security.private\n     def deleteUser(self, user_id):\n-        """Delete all user properties\n-        """\n+        """Delete all user properties"""\n         # Do nothing if an unknown user_id is given\n         try:\n             del self._storage[user_id]\n@@ -216,8 +211,7 @@ def deleteUser(self, user_id):\n \n     @security.private\n     def testMemberData(self, memberdata, criteria, exact_match=False):\n-        """Test if a memberdata matches the search criteria.\n-        """\n+        """Test if a memberdata matches the search criteria."""\n         for (key, value) in criteria.items():\n             testvalue = memberdata.get(key, None)\n             if testvalue is None:\n@@ -244,10 +238,8 @@ def testMemberData(self, memberdata, criteria, exact_match=False):\n         return True\n \n     @security.private\n-    def enumerateUsers(self, id=None, login=None,\n-                       exact_match=False, **kw):\n-        """ See IUserEnumerationPlugin.\n-        """\n+    def enumerateUsers(self, id=None, login=None, exact_match=False, **kw):\n+        """See IUserEnumerationPlugin."""\n         plugin_id = self.getId()\n \n         # This plugin can\'t search for a user by id or login, because there is\n@@ -258,21 +250,29 @@ def enumerateUsers(self, id=None, login=None,\n \n         criteria = copy.copy(kw)\n \n-        users = [(user, data) for (user, data) in self._storage.items()\n-                 if self.testMemberData(data, criteria, exact_match)\n-                 and not data.get(\'isGroup\', False)]\n-\n-        user_info = [{\'id\': self.prefix + user_id,\n-                      \'login\': user_id,\n-                      \'title\': data.get(\'fullname\', user_id),\n-                      \'description\': data.get(\'fullname\', user_id),\n-                      \'email\': data.get(\'email\', \'\'),\n-                      \'pluginid\': plugin_id} for (user_id, data) in users]\n+        users = [\n+            (user, data)\n+            for (user, data) in self._storage.items()\n+            if self.testMemberData(data, criteria, exact_match)\n+            and not data.get("isGroup", False)\n+        ]\n+\n+        user_info = [\n+            {\n+                "id": self.prefix + user_id,\n+                "login": user_id,\n+                "title": data.get("fullname", user_id),\n+                "description": data.get("fullname", user_id),\n+                "email": data.get("email", ""),\n+                "pluginid": plugin_id,\n+            }\n+            for (user_id, data) in users\n+        ]\n \n         return tuple(user_info)\n \n     def updateUser(self, user_id, login_name):\n-        """ Update the login name of the user with id user_id.\n+        """Update the login name of the user with id user_id.\n \n         This is a new part of the IUserEnumerationPlugin interface, but\n         not interesting for us.\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 67e305ef..5f485951 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -19,7 +19,7 @@\n from zope.interface import implementer\n \n \n-def manage_addGroupAwareRoleManager(self, id, title=\'\', RESPONSE=None):\n+def manage_addGroupAwareRoleManager(self, id, title="", RESPONSE=None):\n     """\n     this is a doc string\n     """\n@@ -27,10 +27,12 @@ def manage_addGroupAwareRoleManager(self, id, title=\'\', RESPONSE=None):\n     self._setObject(garm.getId(), garm)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n+\n \n manage_addGroupAwareRoleManagerForm = DTMLFile(\n-    \'../zmi/GroupAwareRoleManagerForm\', globals())\n+    "../zmi/GroupAwareRoleManagerForm", globals()\n+)\n \n \n @implementer(IAssignRoleCapability)\n@@ -41,9 +43,8 @@ class GroupAwareRoleManager(ZODBRoleManager):\n \n     def updateRolesList(self):\n         role_holder = aq_parent(aq_inner(self._getPAS()))\n-        for role in getattr(role_holder, \'__ac_roles__\', ()):\n-            if role not in (\'Anonymous\', \'Authenticated\') and \\\n-                    role not in self._roles:\n+        for role in getattr(role_holder, "__ac_roles__", ()):\n+            if role not in ("Anonymous", "Authenticated") and role not in self._roles:\n                 try:\n                     self.addRole(role)\n                 except KeyError:\n@@ -52,7 +53,7 @@ def updateRolesList(self):\n     # don\'t blow up if manager already exists; mostly for ZopeVersionControl\n     def manage_afterAdd(self, item, container):\n         try:\n-            self.addRole(\'Manager\')\n+            self.addRole("Manager")\n         except KeyError:\n             pass\n \n@@ -62,23 +63,15 @@ def manage_afterAdd(self, item, container):\n     @security.protected(ManageUsers)\n     def assignRoleToPrincipal(self, role_id, principal_id, REQUEST=None):\n         try:\n-            return ZODBRoleManager.assignRoleToPrincipal(\n-                self,\n-                role_id,\n-                principal_id\n-            )\n+            return ZODBRoleManager.assignRoleToPrincipal(self, role_id, principal_id)\n         except KeyError:\n             # Lazily update our roles list and try again\n             self.updateRolesList()\n-            return ZODBRoleManager.assignRoleToPrincipal(\n-                self,\n-                role_id,\n-                principal_id\n-            )\n+            return ZODBRoleManager.assignRoleToPrincipal(self, role_id, principal_id)\n \n     @security.protected(ManageUsers)\n     def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n-        """ Assign a specific set of roles, and only those roles, to a\n+        """Assign a specific set of roles, and only those roles, to a\n         principal.\n \n         o no return value\n@@ -86,7 +79,7 @@ def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n         o Raise KeyError if a role_id is unknown.\n         """\n         for role_id in roles:\n-            if role_id not in (\'Authenticated\', \'Anonymous\', \'Owner\'):\n+            if role_id not in ("Authenticated", "Anonymous", "Owner"):\n                 try:\n                     # raise KeyError if unknown!\n                     self._roles[role_id]\n@@ -104,28 +97,23 @@ def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n \n     @security.private\n     def getRolesForPrincipal(self, principal, request=None):\n-        """ See IRolesPlugin.\n-        """\n+        """See IRolesPlugin."""\n         roles = set([])\n         principal_ids = set([])\n         # Some services need to determine the roles obtained from groups\n         # while excluding the directly assigned roles.  In this case\n         # \'__ignore_direct_roles__\' = True should be pushed in the request.\n-        request = aq_get(self, \'REQUEST\', None)\n-        if request is None \\\n-           or not request.get(\'__ignore_direct_roles__\', False):\n+        request = aq_get(self, "REQUEST", None)\n+        if request is None or not request.get("__ignore_direct_roles__", False):\n             principal_ids.add(principal.getId())\n \n         # Some services may need the real roles of an user but **not**\n         # the ones he got through his groups. In this case, the\n         # \'__ignore_group_roles__\'= True should be previously pushed\n         # in the request.\n-        plugins = self._getPAS()[\'plugins\']\n-        if request is None \\\n-           or not request.get(\'__ignore_group_roles__\', False):\n-            principal_ids.update(\n-                getGroupsForPrincipal(principal, plugins, request)\n-            )\n+        plugins = self._getPAS()["plugins"]\n+        if request is None or not request.get("__ignore_group_roles__", False):\n+            principal_ids.update(getGroupsForPrincipal(principal, plugins, request))\n         for pid in principal_ids:\n             roles.update(self._principal_roles.get(pid, ()))\n         return tuple(roles)\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 41d6b313..fe9d3cea 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -21,13 +21,12 @@\n except ImportError:\n     from ordereddict import OrderedDict\n \n-manage_addPloneUserFactoryForm = DTMLFile(\'../zmi/PloneUserFactoryForm\',\n-                                          globals())\n+manage_addPloneUserFactoryForm = DTMLFile("../zmi/PloneUserFactoryForm", globals())\n \n _marker = object()\n \n \n-def manage_addPloneUserFactory(self, id, title=\'\', RESPONSE=None):\n+def manage_addPloneUserFactory(self, id, title="", RESPONSE=None):\n     """\n     Add a plone user factory\n     """\n@@ -36,16 +35,16 @@ def manage_addPloneUserFactory(self, id, title=\'\', RESPONSE=None):\n     self._setObject(puf.getId(), puf)\n \n     if RESPONSE is not None:\n-        return RESPONSE.redirect(\'manage_workspace\')\n+        return RESPONSE.redirect("manage_workspace")\n \n \n @implementer(IUserFactoryPlugin)\n class PloneUserFactory(BasePlugin):\n \n     security = ClassSecurityInfo()\n-    meta_type = \'Plone User Factory\'\n+    meta_type = "Plone User Factory"\n \n-    def __init__(self, id, title=\'\'):\n+    def __init__(self, id, title=""):\n         self.id = id\n         self.title = title or self.meta_type\n \n@@ -101,7 +100,7 @@ def getGroupNames(self):\n         """Return ids of this user\'s groups. GRUF compat."""\n         return self.getGroups()\n \n-    security.declarePublic(\'getGroupIds\')\n+    security.declarePublic("getGroupIds")\n     getGroupIds = getGroupNames\n \n     #################################\n@@ -109,8 +108,7 @@ def getGroupNames(self):\n \n     @security.public\n     def getPropertysheet(self, id):\n-        """ -> propertysheet (wrapped if supported)\n-        """\n+        """-> propertysheet (wrapped if supported)"""\n         sheet = self._propertysheets[id]\n         try:\n             return sheet.__of__(self)\n@@ -119,7 +117,7 @@ def getPropertysheet(self, id):\n \n     @security.private\n     def addPropertysheet(self, id, data):\n-        """ -> add a prop sheet, given data which is either\n+        """-> add a prop sheet, given data which is either\n         a property sheet or a raw mapping.\n         """\n         if IPropertySheet.providedBy(data):\n@@ -128,7 +126,7 @@ def addPropertysheet(self, id, data):\n             sheet = UserPropertySheet(id, **data)\n \n         if self._propertysheets.get(id) is not None:\n-            raise KeyError(\'Duplicate property sheet: %s\' % id)\n+            raise KeyError("Duplicate property sheet: %s" % id)\n \n         self._propertysheets[id] = sheet\n \n@@ -158,21 +156,20 @@ def allowed(self, object, object_roles=None):\n             return 0\n \n         # Short-circuit the common case of anonymous access.\n-        if object_roles is None or \'Anonymous\' in object_roles:\n+        if object_roles is None or "Anonymous" in object_roles:\n             return 1\n \n         # Provide short-cut access if object is protected by \'Authenticated\'\n         # role and user is not nobody\n-        if \'Authenticated\' in object_roles \\\n-           and self.getUserName() != \'Anonymous User\':\n+        if "Authenticated" in object_roles and self.getUserName() != "Anonymous User":\n             return 1\n \n         # Check for ancient role data up front, convert if found.\n         # This should almost never happen, and should probably be\n         # deprecated at some point.\n-        if \'Shared\' in object_roles:\n+        if "Shared" in object_roles:\n             object_roles = self._shared_roles(object)\n-            if object_roles is None or \'Anonymous\' in object_roles:\n+            if object_roles is None or "Anonymous" in object_roles:\n                 return 1\n \n         # Check for a role match with the normal roles given to\n@@ -201,7 +198,7 @@ def allowed(self, object, object_roles=None):\n         return None\n \n     def setProperties(self, properties=None, **kw):\n-        """ Set properties on a given user.\n+        """Set properties on a given user.\n \n         Accepts either keyword arguments or a mapping for the ``properties``\n         argument. The ``properties`` argument will take precedence over\n@@ -233,9 +230,10 @@ def getProperty(self, id, default=_marker):\n                     # unicode. This is sub-optimal and should be\n                     # dealed with at the property sheets level by\n                     # using Zope\'s converters.\n-                    return value.encode(\'utf-8\')\n+                    return value.encode("utf-8")\n                 return value\n \n         return default\n \n+\n InitializeClass(PloneUser)\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex 50df74ab..950d7763 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -20,34 +20,30 @@\n from zope.interface import implementer\n \n \n-manage_addUserManagerForm = DTMLFile(\'../zmi/UserManagerForm\', globals())\n+manage_addUserManagerForm = DTMLFile("../zmi/UserManagerForm", globals())\n \n \n def manage_addUserManager(dispatcher, id, title=None, REQUEST=None):\n-    """ Add a UserManager to a Pluggable Auth Service. """\n+    """Add a UserManager to a Pluggable Auth Service."""\n \n     pum = UserManager(id, title)\n     dispatcher._setObject(pum.getId(), pum)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(\n-            \'%s/manage_workspace\'\n-            \'?manage_tabs_message=\'\n-            \'UserManager+added.\'\n-            % dispatcher.absolute_url())\n+        REQUEST["RESPONSE"].redirect(\n+            "%s/manage_workspace"\n+            "?manage_tabs_message="\n+            "UserManager+added." % dispatcher.absolute_url()\n+        )\n \n \n @implementer(\n-    IUserManagement,\n-    IUserIntrospection,\n-    IDeleteCapability,\n-    IPasswordSetCapability\n+    IUserManagement, IUserIntrospection, IDeleteCapability, IPasswordSetCapability\n )\n class UserManager(BasePlugin):\n-    """PAS plugin for managing users. (adds write API)\n-    """\n+    """PAS plugin for managing users. (adds write API)"""\n \n-    meta_type = \'User Manager\'\n+    meta_type = "User Manager"\n     security = ClassSecurityInfo()\n \n     @security.protected(ManageUsers)\n@@ -59,10 +55,10 @@ def addUser(self, user_id, login_name, password):\n         Should go into PAS.\n         """\n         if self._user_passwords.get(user_id) is not None:\n-            raise KeyError(\'Duplicate user ID: %s\' % user_id)\n+            raise KeyError("Duplicate user ID: %s" % user_id)\n \n         if self._login_to_userid.get(login_name) is not None:\n-            raise KeyError(\'Duplicate login name: %s\' % login_name)\n+            raise KeyError("Duplicate login name: %s" % login_name)\n \n         if not AuthEncoding.is_encrypted(password):\n             password = AuthEncoding.pw_encrypt(password)\n@@ -71,21 +67,19 @@ def addUser(self, user_id, login_name, password):\n         self._userid_to_login[user_id] = login_name\n \n         # enumerateUsers return value has changed\n-        view_name = createViewName(\'enumerateUsers\')\n+        view_name = createViewName("enumerateUsers")\n         self.ZCacheable_invalidate(view_name=view_name)\n \n     # User Management interface\n \n     @security.private\n     def doDeleteUser(self, userid):\n-        """Given a user id, delete that user\n-        """\n+        """Given a user id, delete that user"""\n         return self.removeUser(userid)\n \n     @security.private\n     def doChangeUser(self, principal_id, password):\n-        """Change a user\'s password\n-        """\n+        """Change a user\'s password"""\n         if self._user_passwords.get(principal_id) is None:\n             raise RuntimeError("User does not exist: %s" % principal_id)\n         self._user_passwords[principal_id] = AuthEncoding.pw_encrypt(password)\n@@ -123,7 +117,7 @@ def getUserNames(self):\n         """\n         Return a list of usernames\n         """\n-        return [x[\'login_name\'] for x in self.listUserInfo()]\n+        return [x["login_name"] for x in self.listUserInfo()]\n \n     @security.protected(ManageUsers)\n     def getUsers(self):\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 8ab8442a..c20a7c99 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -27,7 +27,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'PlonePAS setup\')\n+logger = logging.getLogger("PlonePAS setup")\n \n \n def activatePluginInterfaces(portal, plugin, disable=None):\n@@ -39,23 +39,23 @@ def activatePluginInterfaces(portal, plugin, disable=None):\n     activatable = []\n \n     for info in plugin_obj.plugins.listPluginTypeInfo():\n-        interface = info[\'interface\']\n-        interface_name = info[\'id\']\n+        interface = info["interface"]\n+        interface_name = info["id"]\n         if plugin_obj.testImplements(interface):\n             if interface_name in disable:\n                 disable.append(interface_name)\n-                logger.debug("Disabling: " + info[\'title\'])\n+                logger.debug("Disabling: " + info["title"])\n             else:\n                 activatable.append(interface_name)\n-                logger.debug("Activating: " + info[\'title\'])\n+                logger.debug("Activating: " + info["title"])\n     plugin_obj.manage_activateInterfaces(activatable)\n     logger.debug(plugin + " activated.")\n \n \n def setupRoles(portal):\n     rmanager = portal.acl_users.role_manager\n-    rmanager.addRole(\'Member\', title="Portal Member")\n-    rmanager.addRole(\'Reviewer\', title="Content Reviewer")\n+    rmanager.addRole("Member", title="Portal Member")\n+    rmanager.addRole("Reviewer", title="Content Reviewer")\n \n \n def registerPluginType(pas, plugin_type, plugin_info):\n@@ -78,45 +78,52 @@ def registerPluginType(pas, plugin_type, plugin_info):\n def registerPluginTypes(pas):\n \n     PluginInfo = {\n-        \'id\': \'IUserManagement\',\n-        \'title\': \'user_management\',\n-        \'description\': ("The User Management plugins allow the "\n-                        "Pluggable Auth Service to add/delete/modify users")\n+        "id": "IUserManagement",\n+        "title": "user_management",\n+        "description": (\n+            "The User Management plugins allow the "\n+            "Pluggable Auth Service to add/delete/modify users"\n+        ),\n     }\n \n     registerPluginType(pas, IUserManagement, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'IUserIntrospection\',\n-        \'title\': \'user_introspection\',\n-        \'description\': ("The User Introspection plugins allow the "\n-                        "Pluggable Auth Service to provide lists of users")\n+        "id": "IUserIntrospection",\n+        "title": "user_introspection",\n+        "description": (\n+            "The User Introspection plugins allow the "\n+            "Pluggable Auth Service to provide lists of users"\n+        ),\n     }\n \n     registerPluginType(pas, IUserIntrospection, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'IGroupManagement\',\n-        \'title\': \'group_management\',\n-        \'description\': ("Group Management provides add/write/deletion "\n-                        "of groups and member management")\n+        "id": "IGroupManagement",\n+        "title": "group_management",\n+        "description": (\n+            "Group Management provides add/write/deletion "\n+            "of groups and member management"\n+        ),\n     }\n \n     registerPluginType(pas, igroup.IGroupManagement, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'IGroupIntrospection\',\n-        \'title\': \'group_introspection\',\n-        \'description\': ("Group Introspection provides listings "\n-                        "of groups and membership")\n+        "id": "IGroupIntrospection",\n+        "title": "group_introspection",\n+        "description": (\n+            "Group Introspection provides listings " "of groups and membership"\n+        ),\n     }\n \n     registerPluginType(pas, igroup.IGroupIntrospection, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'ILocalRolesPlugin\',\n-        \'title\': \'local_roles\',\n-        \'description\': "Defines Policy for getting Local Roles"\n+        "id": "ILocalRolesPlugin",\n+        "title": "local_roles",\n+        "description": "Defines Policy for getting Local Roles",\n     }\n \n     registerPluginType(pas, ILocalRolesPlugin, PluginInfo)\n@@ -126,81 +133,89 @@ def setupPlugins(portal):\n     uf = portal.acl_users\n     logger.debug("\\nPlugin setup")\n \n-    pas = uf.manage_addProduct[\'PluggableAuthService\']\n-    plone_pas = uf.manage_addProduct[\'PlonePAS\']\n+    pas = uf.manage_addProduct["PluggableAuthService"]\n+    plone_pas = uf.manage_addProduct["PlonePAS"]\n \n     setupAuthPlugins(portal, pas, plone_pas)\n \n-    found = uf.objectIds([\'User Manager\'])\n+    found = uf.objectIds(["User Manager"])\n     if not found:\n-        plone_pas.manage_addUserManager(\'source_users\')\n+        plone_pas.manage_addUserManager("source_users")\n         logger.debug("Added User Manager.")\n-    activatePluginInterfaces(portal, \'source_users\')\n+    activatePluginInterfaces(portal, "source_users")\n \n-    found = uf.objectIds([\'Group Aware Role Manager\'])\n+    found = uf.objectIds(["Group Aware Role Manager"])\n     if not found:\n-        plone_pas.manage_addGroupAwareRoleManager(\'portal_role_manager\')\n+        plone_pas.manage_addGroupAwareRoleManager("portal_role_manager")\n         logger.debug("Added Group Aware Role Manager.")\n-        activatePluginInterfaces(portal, \'portal_role_manager\')\n+        activatePluginInterfaces(portal, "portal_role_manager")\n \n-    found = uf.objectIds([\'Local Roles Manager\'])\n+    found = uf.objectIds(["Local Roles Manager"])\n     if not found:\n-        plone_pas.manage_addLocalRolesManager(\'local_roles\')\n+        plone_pas.manage_addLocalRolesManager("local_roles")\n         logger.debug("Added Group Aware Role Manager.")\n-        activatePluginInterfaces(portal, \'local_roles\')\n+        activatePluginInterfaces(portal, "local_roles")\n \n-    found = uf.objectIds([\'Group Manager\'])\n+    found = uf.objectIds(["Group Manager"])\n     if not found:\n-        plone_pas.manage_addGroupManager(\'source_groups\')\n+        plone_pas.manage_addGroupManager("source_groups")\n         logger.debug("Added ZODB Group Manager.")\n-        activatePluginInterfaces(portal, \'source_groups\')\n+        activatePluginInterfaces(portal, "source_groups")\n \n-    found = uf.objectIds([\'Plone User Factory\'])\n+    found = uf.objectIds(["Plone User Factory"])\n     if not found:\n-        plone_pas.manage_addPloneUserFactory(\'user_factory\')\n+        plone_pas.manage_addPloneUserFactory("user_factory")\n         logger.debug("Added Plone User Factory.")\n         activatePluginInterfaces(portal, "user_factory")\n \n-    found = uf.objectIds([\'ZODB Mutable Property Provider\'])\n+    found = uf.objectIds(["ZODB Mutable Property Provider"])\n     if not found:\n-        plone_pas.manage_addZODBMutablePropertyProvider(\'mutable_properties\')\n+        plone_pas.manage_addZODBMutablePropertyProvider("mutable_properties")\n         logger.debug("Added Mutable Property Manager.")\n         activatePluginInterfaces(portal, "mutable_properties")\n \n-    found = uf.objectIds([\'Automatic Group Plugin\'])\n+    found = uf.objectIds(["Automatic Group Plugin"])\n     if not found:\n         plone_pas.manage_addAutoGroup(\n-            "auto_group", "Authenticated Users (Virtual Group)",\n-            "AuthenticatedUsers", "Automatic Group Provider")\n+            "auto_group",\n+            "Authenticated Users (Virtual Group)",\n+            "AuthenticatedUsers",\n+            "Automatic Group Provider",\n+        )\n         logger.debug("Added Automatic Group.")\n         activatePluginInterfaces(portal, "auto_group")\n \n-    found = uf.objectIds([\'Plone Session Plugin\'])\n+    found = uf.objectIds(["Plone Session Plugin"])\n     if not found:\n-        manage_addSessionPlugin(plone_pas, \'session\')\n+        manage_addSessionPlugin(plone_pas, "session")\n         logger.debug("Added Plone Session Plugin.")\n         activatePluginInterfaces(portal, "session")\n \n-    found = uf.objectIds([\'Recursive Groups Plugin\'])\n+    found = uf.objectIds(["Recursive Groups Plugin"])\n     if not found:\n-        addRecursiveGroupsPlugin(plone_pas, \'recursive_groups\',\n-                                 "Recursive Groups Plugin")\n-        activatePluginInterfaces(portal, \'recursive_groups\')\n+        addRecursiveGroupsPlugin(\n+            plone_pas, "recursive_groups", "Recursive Groups Plugin"\n+        )\n+        activatePluginInterfaces(portal, "recursive_groups")\n         logger.debug("Added Recursive Groups plugin.")\n \n     setupPasswordPolicyPlugin(portal)\n \n \n-def setupAuthPlugins(portal, pas, plone_pas,\n-                     deactivate_basic_reset=True,\n-                     deactivate_cookie_challenge=False):\n+def setupAuthPlugins(\n+    portal,\n+    pas,\n+    plone_pas,\n+    deactivate_basic_reset=True,\n+    deactivate_cookie_challenge=False,\n+):\n     uf = portal.acl_users\n     logger.debug("Cookie plugin setup")\n \n-    login_path = \'login_form\'\n-    cookie_name = \'__ac\'\n+    login_path = "login_form"\n+    cookie_name = "__ac"\n \n-    crumbler = getToolByName(portal, \'cookie_authentication\', None)\n+    crumbler = getToolByName(portal, "cookie_authentication", None)\n     if crumbler is not None:\n         login_path = crumbler.auto_login_page\n         cookie_name = crumbler.auth_cookie\n@@ -225,55 +240,41 @@ def setupAuthPlugins(portal, pas, plone_pas,\n             "/".join(uf.credentials_cookie_auth.getPhysicalPath()),\n         )\n     if deactivate_basic_reset:\n-        disable = [\'ICredentialsResetPlugin\', \'ICredentialsUpdatePlugin\']\n+        disable = ["ICredentialsResetPlugin", "ICredentialsUpdatePlugin"]\n     else:\n         disable = []\n-    activatePluginInterfaces(\n-        portal,\n-        \'credentials_cookie_auth\',\n-        disable=disable\n-    )\n+    activatePluginInterfaces(portal, "credentials_cookie_auth", disable=disable)\n \n-    credentials_cookie_auth = uf._getOb(\'credentials_cookie_auth\')\n-    if is_plone_site and \'login_form\' in credentials_cookie_auth:\n-        credentials_cookie_auth.manage_delObjects(ids=[\'login_form\'])\n-        logger.debug("Removed default login_form from credentials cookie "\n-                     "auth.")\n+    credentials_cookie_auth = uf._getOb("credentials_cookie_auth")\n+    if is_plone_site and "login_form" in credentials_cookie_auth:\n+        credentials_cookie_auth.manage_delObjects(ids=["login_form"])\n+        logger.debug("Removed default login_form from credentials cookie " "auth.")\n     credentials_cookie_auth.cookie_name = cookie_name\n     credentials_cookie_auth.login_path = login_path\n \n     # remove cookie crumbler(s)\n-    if \'cookie_authentication\' in portal:\n-        portal.manage_delObjects([\'cookie_authentication\'])\n+    if "cookie_authentication" in portal:\n+        portal.manage_delObjects(["cookie_authentication"])\n     logger.debug("Removed old Cookie Crumbler")\n \n-    found = uf.objectIds([\'HTTP Basic Auth Helper\'])\n+    found = uf.objectIds(["HTTP Basic Auth Helper"])\n     if not found:\n-        pas.addHTTPBasicAuthHelper(\n-            \'credentials_basic_auth\',\n-            title="HTTP Basic Auth"\n-        )\n+        pas.addHTTPBasicAuthHelper("credentials_basic_auth", title="HTTP Basic Auth")\n     logger.debug("Added Basic Auth Helper.")\n-    activatePluginInterfaces(portal, \'credentials_basic_auth\')\n+    activatePluginInterfaces(portal, "credentials_basic_auth")\n \n     if deactivate_basic_reset:\n-        uf.plugins.deactivatePlugin(\n-            ICredentialsResetPlugin,\n-            \'credentials_basic_auth\'\n-        )\n+        uf.plugins.deactivatePlugin(ICredentialsResetPlugin, "credentials_basic_auth")\n     if deactivate_cookie_challenge:\n-        uf.plugins.deactivatePlugin(\n-            IChallengePlugin,\n-            \'credentials_cookie_auth\'\n-        )\n+        uf.plugins.deactivatePlugin(IChallengePlugin, "credentials_cookie_auth")\n \n \n def updateProperties(tool, properties):\n-    dependency_keys = (\'selection\', \'multiple selection\')\n-    propsWithNoDeps = [prop for prop in properties\n-                       if prop[\'type\'] not in dependency_keys]\n-    propsWithDeps = [prop for prop in properties\n-                     if prop[\'type\'] in dependency_keys]\n+    dependency_keys = ("selection", "multiple selection")\n+    propsWithNoDeps = [\n+        prop for prop in properties if prop["type"] not in dependency_keys\n+    ]\n+    propsWithDeps = [prop for prop in properties if prop["type"] in dependency_keys]\n     for prop in propsWithNoDeps:\n         updateProp(tool, prop)\n     for prop in propsWithDeps:\n@@ -286,28 +287,28 @@ def updateProp(prop_manager, prop_dict):\n \n     Doesn\'t deal with existing properties changing type.\n     """\n-    id = prop_dict[\'id\']\n-    value = prop_dict[\'value\']\n-    type = prop_dict[\'type\']\n-    if type in (\'selection\', \'multiple selection\'):\n-        value = prop_dict[\'select_variable\']\n+    id = prop_dict["id"]\n+    value = prop_dict["value"]\n+    type = prop_dict["type"]\n+    if type in ("selection", "multiple selection"):\n+        value = prop_dict["select_variable"]\n     if prop_manager.hasProperty(id):\n         prop_manager._updateProperty(id, value)\n     else:\n         prop_manager._setProperty(id, value, type)\n-    if type in (\'selection\', \'multiple selection\'):\n-        prop_manager._updateProperty(id, prop_dict[\'value\'])\n+    if type in ("selection", "multiple selection"):\n+        prop_manager._updateProperty(id, prop_dict["value"])\n \n \n def addPAS(portal):\n     logger.debug("Adding PAS user folder")\n-    portal.manage_addProduct[\'PluggableAuthService\'].addPluggableAuthService()\n+    portal.manage_addProduct["PluggableAuthService"].addPluggableAuthService()\n \n \n def migrate_root_uf(self):\n     # Acquire parent user folder.\n     parent = self.getPhysicalRoot()\n-    uf = getToolByName(parent, \'acl_users\')\n+    uf = getToolByName(parent, "acl_users")\n     if IPluggableAuthService.providedBy(uf):\n         # It\'s a PAS already, fixup if needed.\n         pas_fixup(parent)\n@@ -316,7 +317,7 @@ def migrate_root_uf(self):\n         challenge_chooser_setup(parent)\n         return\n \n-    if not uf.meta_type == \'User Folder\':\n+    if not uf.meta_type == "User Folder":\n         # It\'s not a standard User Folder at the root. Nothing we can do.\n         return\n \n@@ -324,18 +325,22 @@ def migrate_root_uf(self):\n     replace_acl_users(parent)\n \n     # Get the new uf\n-    uf = getToolByName(parent, \'acl_users\')\n+    uf = getToolByName(parent, "acl_users")\n \n-    pas = uf.manage_addProduct[\'PluggableAuthService\']\n-    plone_pas = uf.manage_addProduct[\'PlonePAS\']\n+    pas = uf.manage_addProduct["PluggableAuthService"]\n+    plone_pas = uf.manage_addProduct["PlonePAS"]\n     # Setup authentication plugins\n-    setupAuthPlugins(parent, pas, plone_pas,\n-                     deactivate_basic_reset=False,\n-                     deactivate_cookie_challenge=True)\n+    setupAuthPlugins(\n+        parent,\n+        pas,\n+        plone_pas,\n+        deactivate_basic_reset=False,\n+        deactivate_cookie_challenge=True,\n+    )\n \n     # Activate *all* interfaces for user manager. IUserAdder is not\n     # activated for some reason by default.\n-    activatePluginInterfaces(parent, \'users\')\n+    activatePluginInterfaces(parent, "users")\n \n     # Configure Challenge Chooser plugin if available\n     challenge_chooser_setup(parent)\n@@ -344,12 +349,12 @@ def migrate_root_uf(self):\n def pas_fixup(self):\n     from Products.PluggableAuthService.PluggableAuthService import _PLUGIN_TYPE_INFO\n \n-    pas = getToolByName(self, \'acl_users\')\n+    pas = getToolByName(self, "acl_users")\n     if not IPluggableAuthService.providedBy(pas):\n-        logger.debug(\'PAS UF not found, skipping PAS fixup.\')\n+        logger.debug("PAS UF not found, skipping PAS fixup.")\n         return\n \n-    plugins = pas[\'plugins\']\n+    plugins = pas["plugins"]\n \n     plugin_types = list(set(plugins._plugin_types))\n     for key, id, title, description in _PLUGIN_TYPE_INFO:\n@@ -359,9 +364,9 @@ def pas_fixup(self):\n         logger.debug("Plugin type \'%s\' was not registered." % id)\n         plugin_types.append(key)\n         plugins._plugin_type_info[key] = {\n-            \'id\': id,\n-            \'title\': title,\n-            \'description\': description,\n+            "id": id,\n+            "title": title,\n+            "description": description,\n         }\n     # Make it ordered\n     plugin_types.sort()\n@@ -371,74 +376,71 @@ def pas_fixup(self):\n \n \n def challenge_chooser_setup(self):\n-    uf = getToolByName(self, \'acl_users\')\n-    pas = uf.manage_addProduct[\'PluggableAuthService\']\n+    uf = getToolByName(self, "acl_users")\n+    pas = uf.manage_addProduct["PluggableAuthService"]\n \n     # Only install plugins if available\n-    req = (\'addChallengeProtocolChooserPlugin\',\n-           \'addRequestTypeSnifferPlugin\')\n+    req = ("addChallengeProtocolChooserPlugin", "addRequestTypeSnifferPlugin")\n     for m in req:\n         if getattr(pas, m, None) is None:\n-            logger.debug(\'Needed plugins have not been found, ignoring\')\n+            logger.debug("Needed plugins have not been found, ignoring")\n             return\n \n-    found = uf.objectIds([\'Challenge Protocol Chooser Plugin\'])\n+    found = uf.objectIds(["Challenge Protocol Chooser Plugin"])\n     if not found:\n-        logger.debug(\'Adding Challenge Protocol Chooser Plugin.\')\n+        logger.debug("Adding Challenge Protocol Chooser Plugin.")\n         pas.addChallengeProtocolChooserPlugin(\n-            \'chooser\',\n-            mapping=config.DEFAULT_PROTO_MAPPING)\n-        activatePluginInterfaces(self, \'chooser\')\n+            "chooser", mapping=config.DEFAULT_PROTO_MAPPING\n+        )\n+        activatePluginInterfaces(self, "chooser")\n     else:\n-        assert len(found) == 1, \'Found extra plugins %s\' % found\n-        logger.debug(\'Found existing Challenge Protocol Chooser Plugin.\')\n+        assert len(found) == 1, "Found extra plugins %s" % found\n+        logger.debug("Found existing Challenge Protocol Chooser Plugin.")\n         plugin = uf[found[0]]\n-        plugin.manage_updateProtocolMapping(\n-            mapping=config.DEFAULT_PROTO_MAPPING)\n+        plugin.manage_updateProtocolMapping(mapping=config.DEFAULT_PROTO_MAPPING)\n         activatePluginInterfaces(self, found[0])\n \n-    found = uf.objectIds([\'Request Type Sniffer Plugin\'])\n+    found = uf.objectIds(["Request Type Sniffer Plugin"])\n     if not found:\n-        logger.debug(\'Adding Request Type Sniffer Plugin.\')\n-        pas.addRequestTypeSnifferPlugin(\'sniffer\')\n-        activatePluginInterfaces(self, \'sniffer\')\n+        logger.debug("Adding Request Type Sniffer Plugin.")\n+        pas.addRequestTypeSnifferPlugin("sniffer")\n+        activatePluginInterfaces(self, "sniffer")\n     else:\n-        assert len(found) == 1, \'Found extra plugins %s\' % found\n-        logger.debug(\'Found existing Request Type Sniffer Plugin.\')\n+        assert len(found) == 1, "Found extra plugins %s" % found\n+        logger.debug("Found existing Request Type Sniffer Plugin.")\n         activatePluginInterfaces(self, found[0])\n \n \n def setupPasswordPolicyPlugin(portal):\n     uf = portal.acl_users\n-    plone_pas = uf.manage_addProduct[\'PlonePAS\']\n+    plone_pas = uf.manage_addProduct["PlonePAS"]\n \n-    found = uf.objectIds([\'Default Plone Password Policy\'])\n+    found = uf.objectIds(["Default Plone Password Policy"])\n     logger.debug("\\nDefault Password Ploicy Plugin setup")\n     if not found:\n         plone_pas.manage_addPasswordPolicyPlugin(\n-            \'password_policy\',\n-            title="Default Plone Password Policy"\n+            "password_policy", title="Default Plone Password Policy"\n         )\n         logger.debug("Added Default Plone Password Policy.")\n-        activatePluginInterfaces(portal, \'password_policy\')\n+        activatePluginInterfaces(portal, "password_policy")\n \n \n def setLoginFormInCookieAuth(context):\n     """Makes sure the cookie auth redirects to \'require_login\' instead\n-       of \'login_form\'."""\n-    uf = getattr(context, \'acl_users\', None)\n-    if uf is None or getattr(aq_base(uf), \'_getOb\', None) is None:\n+    of \'login_form\'."""\n+    uf = getattr(context, "acl_users", None)\n+    if uf is None or getattr(aq_base(uf), "_getOb", None) is None:\n         # we have no user folder or it\'s not a PAS folder, do nothing\n         return\n-    cookie_auth = uf._getOb(\'credentials_cookie_auth\', None)\n+    cookie_auth = uf._getOb("credentials_cookie_auth", None)\n     if cookie_auth is None:\n         # there\'s no cookie auth object, do nothing\n         return\n-    current_login_form = cookie_auth.getProperty(\'login_path\')\n-    if current_login_form != \'login_form\':\n+    current_login_form = cookie_auth.getProperty("login_path")\n+    if current_login_form != "login_form":\n         # it\'s customized already, do nothing\n         return\n-    cookie_auth.manage_changeProperties(login_path=\'require_login\')\n+    cookie_auth.manage_changeProperties(login_path="require_login")\n \n \n def addRolesToPlugIn(p):\n@@ -449,9 +451,9 @@ def addRolesToPlugIn(p):\n     Have to manually register the roles from the \'rolemap\' step\n     with the roles plug-in.\n     """\n-    uf = getToolByName(p, \'acl_users\')\n+    uf = getToolByName(p, "acl_users")\n     rmanager = uf.portal_role_manager\n-    roles = (\'Reviewer\', \'Member\')\n+    roles = ("Reviewer", "Member")\n     existing = rmanager.listRoleIds()\n     for role in roles:\n         if role not in existing:\n@@ -462,29 +464,25 @@ def setupGroups(site):\n     """\n     Create Plone\'s default set of groups.\n     """\n-    uf = getToolByName(site, \'acl_users\')\n-    gtool = getToolByName(site, \'portal_groups\')\n-    if not uf.searchGroups(id=\'Administrators\'):\n-        gtool.addGroup(\n-            \'Administrators\',\n-            title=\'Administrators\',\n-            roles=[\'Manager\']\n-        )\n+    uf = getToolByName(site, "acl_users")\n+    gtool = getToolByName(site, "portal_groups")\n+    if not uf.searchGroups(id="Administrators"):\n+        gtool.addGroup("Administrators", title="Administrators", roles=["Manager"])\n \n-    if not uf.searchGroups(id=\'Site Administrators\'):\n+    if not uf.searchGroups(id="Site Administrators"):\n         gtool.addGroup(\n-            \'Site Administrators\',\n-            title=\'Site Administrators\',\n-            roles=[\'Site Administrator\']\n+            "Site Administrators",\n+            title="Site Administrators",\n+            roles=["Site Administrator"],\n         )\n \n-    if not uf.searchGroups(id=\'Reviewers\'):\n-        gtool.addGroup(\'Reviewers\', title=\'Reviewers\', roles=[\'Reviewer\'])\n+    if not uf.searchGroups(id="Reviewers"):\n+        gtool.addGroup("Reviewers", title="Reviewers", roles=["Reviewer"])\n \n \n def installPAS(portal):\n     # Add user folder\n-    portal.manage_addProduct[\'PluggableAuthService\'].addPluggableAuthService()\n+    portal.manage_addProduct["PluggableAuthService"].addPluggableAuthService()\n \n     # Configure Challenge Chooser plugin if available\n     challenge_chooser_setup(portal)\n@@ -509,10 +507,10 @@ def setupPlonePAS(context):\n     Setup PlonePAS step.\n     """\n     # Only run step if a flag file is present (e.g. not an extension profile)\n-    if context.readDataFile(\'plone-pas.txt\') is None:\n+    if context.readDataFile("plone-pas.txt") is None:\n         return\n     site = context.getSite()\n-    if \'acl_users\' not in site:\n+    if "acl_users" not in site:\n         installPAS(site)\n         addRolesToPlugIn(site)\n         setupGroups(site)\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 281dca1b..999c5381 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -19,7 +19,6 @@ class PropertyValueError(ValueError):\n \n \n class PropertySchemaTypeMap(object):\n-\n     def __init__(self):\n         self.tmap = {}\n         self.tmap_order = []\n@@ -36,7 +35,7 @@ def getTypeFor(self, value):\n         for ptype, inspector in ptypes:\n             if inspector(value):\n                 return ptype\n-        raise TypeError(\'Invalid property type: %s\' % type(value))\n+        raise TypeError("Invalid property type: %s" % type(value))\n \n     def validate(self, property_type, value):\n         inspector = self.tmap[property_type]\n@@ -44,61 +43,34 @@ def validate(self, property_type, value):\n \n \n PropertySchema = PropertySchemaTypeMap()\n+PropertySchema.addType("string", lambda x: x is None or isinstance(x, six.string_types))\n+PropertySchema.addType("text", lambda x: x is None or isinstance(x, six.string_types))\n+PropertySchema.addType("boolean", lambda x: 1)  # anything can be boolean\n+PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n+PropertySchema.addType("long", lambda x: x is None or isinstance(x, long))\n+PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n+PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n PropertySchema.addType(\n-    \'string\',\n-    lambda x: x is None or isinstance(x, six.string_types)\n-)\n-PropertySchema.addType(\n-    \'text\',\n-    lambda x: x is None or isinstance(x, six.string_types)\n-)\n-PropertySchema.addType(\n-    \'boolean\',\n-    lambda x: 1  # anything can be boolean\n-)\n-PropertySchema.addType(\n-    \'int\',\n-    lambda x: x is None or isinstance(x, int)\n-)\n-PropertySchema.addType(\n-    \'long\',\n-    lambda x: x is None or isinstance(x, long)\n+    "selection", lambda x: x is None or isinstance(x, six.string_types)\n )\n PropertySchema.addType(\n-    \'float\',\n-    lambda x: x is None or isinstance(x, float)\n-)\n-PropertySchema.addType(\n-    \'lines\',\n-    lambda x: x is None or isinstance(x, (tuple, list))\n-)\n-PropertySchema.addType(\n-    \'selection\',\n-    lambda x: x is None or isinstance(x, six.string_types)\n-)\n-PropertySchema.addType(\n-    \'multiple selection\',\n-    lambda x: x is None or isinstance(x, (tuple, list))\n-)\n-PropertySchema.addType(\n-    \'date\',\n-    lambda x: 1\n+    "multiple selection", lambda x: x is None or isinstance(x, (tuple, list))\n )\n+PropertySchema.addType("date", lambda x: 1)\n validateValue = PropertySchema.validate\n \n \n @implementer(IMutablePropertySheet)\n class MutablePropertySheet(UserPropertySheet):\n-\n     def validateProperty(self, id, value):\n         if id not in self._properties:\n-            raise PropertyValueError(\'No such property found on this schema\')\n+            raise PropertyValueError("No such property found on this schema")\n \n         proptype = self.getPropertyType(id)\n         if not validateValue(proptype, value):\n             raise PropertyValueError(\n-                "Invalid value (%s) for property \'%s\' of type %s" %\n-                (value, id, proptype)\n+                "Invalid value (%s) for property \'%s\' of type %s"\n+                % (value, id, proptype)\n             )\n \n     def setProperty(self, user, id, value):\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex 5672dc3e..c9825763 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -19,13 +19,14 @@ def setUpZope(self, app, configurationContext):\n         # The z3c.autoinclude feature is disabled in the Plone fixture base\n         # layer.\n         self.loadZCML(package=Products.PlonePAS)\n-        zope_testing.installProduct(app, \'Products.PlonePAS\')\n+        zope_testing.installProduct(app, "Products.PlonePAS")\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'Products.PlonePAS:PlonePAS\')\n+        applyProfile(portal, "Products.PlonePAS:PlonePAS")\n         # setRoles(portal, TEST_USER_ID, [\'Manager\'])\n         from Products.CMFPlone.utils import _createObjectByType\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+\n+        _createObjectByType("Folder", portal, id="Members")\n         mtool = portal.portal_membership\n         if not mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n@@ -33,7 +34,7 @@ def setUpPloneSite(self, portal):\n         if mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n \n-        _createObjectByType(\'Folder\', portal, id=\'folder\')\n+        _createObjectByType("Folder", portal, id="folder")\n \n \n PRODUCTS_PLONEPAS_FIXTURE = ProductsPlonepasLayer()\n@@ -41,11 +42,11 @@ def setUpPloneSite(self, portal):\n \n PRODUCTS_PLONEPAS_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n-    name=\'ProductsPlonepasLayer:IntegrationTesting\',\n+    name="ProductsPlonepasLayer:IntegrationTesting",\n )\n \n \n PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n-    name=\'ProductsPlonepasLayer:FunctionalTesting\',\n+    name="ProductsPlonepasLayer:FunctionalTesting",\n )\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 130a079c..bca993ce 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -4,11 +4,11 @@\n from ZPublisher.HTTPRequest import FileUpload\n \n \n-TEXT = b\'file data\'\n+TEXT = b"file data"\n \n \n class FieldStorage(object):\n-    def __init__(self, file, filename=\'testfile\', headers=None):\n+    def __init__(self, file, filename="testfile", headers=None):\n         self.file = file\n         if headers is None:\n             headers = {}\n@@ -18,12 +18,12 @@ def __init__(self, file, filename=\'testfile\', headers=None):\n \n \n class File(FileUpload):\n-    \'\'\'Dummy upload object\n-       Used to fake uploaded files.\n-    \'\'\'\n+    """Dummy upload object\n+    Used to fake uploaded files.\n+    """\n \n     __allow_access_to_unprotected_subobjects__ = 1\n-    filename = \'dummy.txt\'\n+    filename = "dummy.txt"\n     data = TEXT\n     headers = {}\n \n@@ -47,11 +47,11 @@ def read(self, *args):\n \n \n class Error(Exception):\n-    \'\'\'Dummy exception\'\'\'\n+    """Dummy exception"""\n \n \n class Raiser(SimpleItem):\n-    \'\'\'Raises the stored exception when called\'\'\'\n+    """Raises the stored exception when called"""\n \n     exception = Error\n \ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex 5b1b6f1c..9243a05e 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -19,8 +19,8 @@ class BasicOpsTestCase(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.acl_users = self.portal.acl_users\n \n     def compareRoles(self, target, user, roles):\n@@ -33,7 +33,7 @@ def compareRoles(self, target, user, roles):\n         u = self.acl_users.getUser(user)\n         if not u:\n             raise RuntimeError("compareRoles: Invalid user: \'%s\'" % user)\n-        non_roles = (\'Authenticated\', \'Anonymous\', \'\')\n+        non_roles = ("Authenticated", "Anonymous", "")\n         if target is None:\n             user_roles = list(u.getRoles())\n         else:\n@@ -42,13 +42,21 @@ def compareRoles(self, target, user, roles):\n         wished_roles = list(roles)\n         if sorted(actual_roles) == sorted(wished_roles):\n             return 1\n-        raise RuntimeError("User %s: Whished roles: %s BUT current "\n-                           "roles: %s" % (user, wished_roles, actual_roles))\n+        raise RuntimeError(\n+            "User %s: Whished roles: %s BUT current "\n+            "roles: %s" % (user, wished_roles, actual_roles)\n+        )\n \n-    def createUser(self, login="created_user", password="secret",\n-                   roles=[], groups=[], domains=()):\n+    def createUser(\n+        self, login="created_user", password="secret", roles=[], groups=[], domains=()\n+    ):\n         self.acl_users.userFolderAddUser(\n-            login, password, roles=roles, groups=groups, domains=domains,)\n+            login,\n+            password,\n+            roles=roles,\n+            groups=groups,\n+            domains=domains,\n+        )\n \n     def test_installed(self):\n         self.assertTrue(IPluggableAuthService.providedBy(self.acl_users))\n@@ -67,14 +75,15 @@ def test_edit(self):\n             "secret2",  # password\n             roles=["Member"],\n             groups=["g1"],\n-            domains=(),)\n-        self.compareRoles(None, "created_user", [\'Member\'])\n+            domains=(),\n+        )\n+        self.compareRoles(None, "created_user", ["Member"])\n \n     def test_edit_userDefinedRole(self):\n         roleplugins = self.acl_users.plugins.listPlugins(IRolesPlugin)\n         for id, plugin in roleplugins:\n             try:\n-                plugin.addRole(\'r1\')\n+                plugin.addRole("r1")\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                 pass\n             else:\n@@ -87,13 +96,14 @@ def test_edit_userDefinedRole(self):\n             "secret2",  # password\n             roles=["r1"],\n             groups=["g1"],\n-            domains=(),)\n-        self.compareRoles(None, "created_user", [\'r1\'])\n+            domains=(),\n+        )\n+        self.compareRoles(None, "created_user", ["r1"])\n \n     def test_del(self):\n         self.createUser()\n         self.assertTrue(self.acl_users.getUser("created_user"))\n-        self.acl_users.userFolderDelUsers([\'created_user\'])\n+        self.acl_users.userFolderDelUsers(["created_user"])\n         self.assertFalse(self.acl_users.getUser("created_user"))\n \n     def test_principal_del_event(self):\n@@ -106,9 +116,9 @@ def gotDeletion(event):\n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(gotDeletion)\n         self.createUser()\n-        self.acl_users.userFolderDelUsers([\'created_user\'])\n+        self.acl_users.userFolderDelUsers(["created_user"])\n         self.assertEqual(len(eventsFired), 1)\n-        self.assertEqual(eventsFired[0].principal, \'created_user\')\n+        self.assertEqual(eventsFired[0].principal, "created_user")\n         gsm.unregisterHandler(gotDeletion)\n \n     def test_search(self):\n@@ -118,8 +128,9 @@ def test_search(self):\n         retlist = mt.searchForMembers(REQUEST=None, login="created_user1")\n         usernames = [user.getUserName() for user in retlist]\n         self.assertEqual(len(usernames), 1)\n-        self.assertTrue("created_user1" in usernames,\n-                        "\'created_user1\' not in %s" % usernames)\n+        self.assertTrue(\n+            "created_user1" in usernames, "\'created_user1\' not in %s" % usernames\n+        )\n \n     def test_setpw(self):\n         # there is more than one place where one can set the password.\n@@ -127,15 +138,16 @@ def test_setpw(self):\n         # here its checked in the general setup using ZODBUserManager.\n         self.createUser()\n         uf = self.acl_users\n-        new_secret = \'new_secret\'\n-        uf.userSetPassword(\'created_user\', new_secret)\n+        new_secret = "new_secret"\n+        uf.userSetPassword("created_user", new_secret)\n \n         # possible to authenticate with new password?\n         from Products.PluggableAuthService.interfaces.plugins import (\n             IAuthenticationPlugin,\n         )\n+\n         authenticators = uf.plugins.listPlugins(IAuthenticationPlugin)\n-        credentials = {\'login\': \'created_user\', \'password\': new_secret}\n+        credentials = {"login": "created_user", "password": new_secret}\n         result = None\n         for aid, authenticator in authenticators:\n             result = authenticator.authenticateCredentials(credentials)\n@@ -145,13 +157,13 @@ def test_setpw(self):\n \n     def test_setProperties(self):\n         self.createUser()\n-        user = self.acl_users.getUser(\'created_user\')\n-        user.setProperties(fullname=\'Test User\', email=\'test@example.org\')\n-        self.assertEqual(user.getProperty(\'fullname\'), \'Test User\')\n-        self.assertEqual(user.getProperty(\'email\'), \'test@example.org\')\n+        user = self.acl_users.getUser("created_user")\n+        user.setProperties(fullname="Test User", email="test@example.org")\n+        self.assertEqual(user.getProperty("fullname"), "Test User")\n+        self.assertEqual(user.getProperty("email"), "test@example.org")\n \n         user.setProperties(\n-            properties={\'fullname\': \'Test User2\', \'email\': \'test2@example.org\'}\n+            properties={"fullname": "Test User2", "email": "test2@example.org"}\n         )\n-        self.assertEqual(user.getProperty(\'fullname\'), \'Test User2\')\n-        self.assertEqual(user.getProperty(\'email\'), \'test2@example.org\')\n+        self.assertEqual(user.getProperty("fullname"), "Test User2")\n+        self.assertEqual(user.getProperty("email"), "test2@example.org")\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 52e16109..1aaba234 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -20,17 +20,17 @@ def test_suite():\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'cookie_auth.rst\',\n-                package=\'Products.PlonePAS.tests\',\n+                "cookie_auth.rst",\n+                package="Products.PlonePAS.tests",\n                 optionflags=doctest.ELLIPSIS,\n                 checker=Py23DocChecker(),\n             ),\n-            layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n+            layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING,\n         )\n     )\n     suite.addTest(\n         doctest.DocTestSuite(\n-            \'Products.PlonePAS.utils\',\n+            "Products.PlonePAS.utils",\n             optionflags=doctest.ELLIPSIS,\n             checker=Py23DocChecker(),\n         )\ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex da6dad26..bc8663f9 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -21,24 +21,23 @@ class TestGroupDataTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n         self.groupdata = self.portal.portal_groupdata\n-        self.groups.addGroup(\'foo\')\n+        self.groups.addGroup("foo")\n         # MUST reset _v_ attributes!\n         self.groupdata._v_temps = None\n-        if \'auto_group\' in self.acl_users:\n-            self.acl_users.manage_delObjects([\'auto_group\'])\n+        if "auto_group" in self.acl_users:\n+            self.acl_users.manage_delObjects(["auto_group"])\n \n     def testWrapGroup(self):\n-        g = self.acl_users.getGroup(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'PloneGroup\')\n+        g = self.acl_users.getGroup("foo")\n+        self.assertEqual(g.__class__.__name__, "PloneGroup")\n         g = self.groupdata.wrapGroup(g)\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(g).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(g).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__, "GroupManager")\n \n \n class TestGroupData(unittest.TestCase):\n@@ -46,113 +45,112 @@ class TestGroupData(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.memberdata = self.portal.portal_memberdata\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n         self.groupdata = self.portal.portal_groupdata\n-        self.groups.addGroup(\'foo\')\n-        if \'auto_group\' in self.acl_users:\n-            self.acl_users.manage_delObjects([\'auto_group\'])\n+        self.groups.addGroup("foo")\n+        if "auto_group" in self.acl_users:\n+            self.acl_users.manage_delObjects(["auto_group"])\n         # MUST reset _v_ attributes!\n         self.memberdata._v_temps = None\n         self.groupdata._v_temps = None\n \n     def testGetGroup(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n         g = g.getGroup()\n-        self.assertEqual(g.__class__.__name__, \'PloneGroup\')\n+        self.assertEqual(g.__class__.__name__, "PloneGroup")\n \n     def testGetTool(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.getTool().getId(), \'portal_groupdata\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.getTool().getId(), "portal_groupdata")\n \n     def testGetGroupMembers(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        g = self.groups.getGroupById("foo")\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         self.assertEqual(g.getGroupMembers()[0].getId(), TEST_USER_ID)\n \n     def testGroupMembersAreWrapped(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        g = self.groups.getGroupById("foo")\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         ms = g.getGroupMembers()\n-        self.assertEqual(ms[0].__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(ms[0]).__class__.__name__, \'PluggableAuthService\')\n+        self.assertEqual(ms[0].__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(ms[0]).__class__.__name__, "PluggableAuthService")\n \n     def testAddMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n-        g = self.groups.getGroupById(\'foo\')\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n+        g = self.groups.getGroupById("foo")\n         g.addMember(TEST_USER_ID)\n         self.assertEqual(g.getGroupMembers()[0].getId(), TEST_USER_ID)\n \n     def testRemoveMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n-        g = self.groups.getGroupById(\'foo\')\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n+        g = self.groups.getGroupById("foo")\n         g.addMember(TEST_USER_ID)\n         g.removeMember(TEST_USER_ID)\n         self.assertEqual(len(g.getGroupMembers()), 0)\n \n     def testSetGroupProperties(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        g.setGroupProperties({\'email\': \'foo@bar.com\'})\n-        gd = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(gd.getProperty(\'email\'), \'foo@bar.com\')\n+        g = self.groups.getGroupById("foo")\n+        g.setGroupProperties({"email": "foo@bar.com"})\n+        gd = self.groups.getGroupById("foo")\n+        self.assertEqual(gd.getProperty("email"), "foo@bar.com")\n \n     def testSetMemberProperties(self):\n         # For reference\n         m = self.membership.getMemberById(TEST_USER_ID)\n-        m.setMemberProperties({\'email\': \'foo@bar.com\'})\n+        m.setMemberProperties({"email": "foo@bar.com"})\n         md = self.membership.getMemberById(TEST_USER_ID)\n-        self.assertEqual(md.getProperty(\'email\'), \'foo@bar.com\')\n+        self.assertEqual(md.getProperty("email"), "foo@bar.com")\n \n     def testGetProperty(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        g.setGroupProperties({\'email\': \'foo@bar.com\'})\n-        self.assertEqual(g.getProperty(\'email\'), \'foo@bar.com\')\n-        self.assertEqual(g.getProperty(\'id\'), \'foo\')\n+        g = self.groups.getGroupById("foo")\n+        g.setGroupProperties({"email": "foo@bar.com"})\n+        self.assertEqual(g.getProperty("email"), "foo@bar.com")\n+        self.assertEqual(g.getProperty("id"), "foo")\n \n     def testGetGroupName(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.getGroupName(), \'foo\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.getGroupName(), "foo")\n \n     def testGetGroupId(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.getGroupId(), \'foo\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.getGroupId(), "foo")\n \n     def testGetRoles(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(tuple(g.getRoles()), (\'Authenticated\',))\n-        self.groups.editGroup(g.getId(), roles=[\'Member\'])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(sortTuple(tuple(g.getRoles())),\n-                         (\'Authenticated\', \'Member\'))\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(tuple(g.getRoles()), ("Authenticated",))\n+        self.groups.editGroup(g.getId(), roles=["Member"])\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(sortTuple(tuple(g.getRoles())), ("Authenticated", "Member"))\n \n     def testGetRolesInContext(self):\n-        self.folder = self.portal[\'folder\']\n-        g = self.groups.getGroupById(\'foo\')\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        self.folder = self.portal["folder"]\n+        g = self.groups.getGroupById("foo")\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         user = self.acl_users.getUser(TEST_USER_NAME)\n         self.assertEqual(\n             user.getRolesInContext(self.folder).sort(),\n-            [\'Member\', \'Authenticated\', \'Owner\'].sort()\n+            ["Member", "Authenticated", "Owner"].sort(),\n         )\n-        self.folder.manage_setLocalRoles(g.getId(), [\'NewRole\'])\n+        self.folder.manage_setLocalRoles(g.getId(), ["NewRole"])\n         self.assertEqual(\n             user.getRolesInContext(self.folder).sort(),\n-            [\'Member\', \'Authenticated\', \'Owner\', \'NewRole\'].sort()\n+            ["Member", "Authenticated", "Owner", "NewRole"].sort(),\n         )\n \n     def testGetDomains(self):\n-        g = self.groups.getGroupById(\'foo\')\n+        g = self.groups.getGroupById("foo")\n         self.assertEqual(g.getDomains(), ())\n \n     def testHasRole(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.groups.editGroup(g.getId(), roles=[\'Member\'])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertTrue(g.has_role(\'Member\'))\n+        g = self.groups.getGroupById("foo")\n+        self.groups.editGroup(g.getId(), roles=["Member"])\n+        g = self.groups.getGroupById("foo")\n+        self.assertTrue(g.has_role("Member"))\n \n \n class TestMethodProtection(unittest.TestCase):\n@@ -160,10 +158,10 @@ class TestMethodProtection(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.groups = self.portal.portal_groups\n-        self.groups.addGroup(\'foo\')\n-        self.groupdata = self.groups.getGroupById(\'foo\')\n+        self.groups.addGroup("foo")\n+        self.groupdata = self.groups.getGroupById("foo")\n \n     def testAnonAddMember(self):\n         logout()\n@@ -171,21 +169,19 @@ def testAnonAddMember(self):\n \n     def testAnonRemoveMember(self):\n         logout()\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testMemberAddMember(self):\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testMemberRemoveMember(self):\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex c12b8294..3fdaf172 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -28,18 +28,18 @@ class TestGroupsTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.gt = getToolByName(self.portal, \'portal_groups\')\n-        self.gd = getToolByName(self.portal, \'portal_groupdata\')\n+        self.portal = self.layer["portal"]\n+        self.gt = getToolByName(self.portal, "portal_groups")\n+        self.gd = getToolByName(self.portal, "portal_groupdata")\n \n-        self.group_id = \'group1\'\n+        self.group_id = "group1"\n         # Create a new Group\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.gt.addGroup(\n             self.group_id,\n-            [\'Reviewer\'],\n+            ["Reviewer"],\n             [],\n-            {\'email\': \'group1@host.com\', \'title\': \'Group #1\'}\n+            {"email": "group1@host.com", "title": "Group #1"},\n         )\n \n     def test_get_group(self):\n@@ -65,34 +65,23 @@ def test_get_group_by_id(self):\n \n     def test_edit_group(self):\n         # Use the tool way to edit a group.\n-        properties = {\n-            \'email\': \'group1@host2.com\',\n-            \'title\': \'Group #1 new title\'\n-        }\n-        self.gt.editGroup(\n-            self.group_id,\n-            roles=[\'Manager\'],\n-            **properties\n-        )\n+        properties = {"email": "group1@host2.com", "title": "Group #1 new title"}\n+        self.gt.editGroup(self.group_id, roles=["Manager"], **properties)\n \n         # test edition of roles and properties\n         group = self.gt.getGroupById(self.group_id)\n-        self.assertTrue(group.has_role(\'Manager\'))\n-        self.assertEqual(group.getProperty(\'email\'), properties[\'email\'])\n-        self.assertEqual(group.getProperty(\'title\'), properties[\'title\'])\n+        self.assertTrue(group.has_role("Manager"))\n+        self.assertEqual(group.getProperty("email"), properties["email"])\n+        self.assertEqual(group.getProperty("title"), properties["title"])\n \n         # test for empty list of roles\n         self.gt.editGroup(self.group_id, roles=[])\n-        self.assertTrue(group.has_role(\'Authenticated\'))\n+        self.assertTrue(group.has_role("Authenticated"))\n \n         # test edition of group groups\n-        self.gt.editGroup(\n-            self.group_id,\n-            groups=[\'Reviewers\'],\n-            **properties\n-        )\n+        self.gt.editGroup(self.group_id, groups=["Reviewers"], **properties)\n         group = self.gt.getGroupById(self.group_id)\n-        self.assertTrue(\'Reviewers\' in group.getGroups())\n+        self.assertTrue("Reviewers" in group.getGroups())\n \n \n class TestMethodProtection(unittest.TestCase):\n@@ -101,10 +90,10 @@ class TestMethodProtection(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.groups = self.portal.portal_groups\n-        self.groups.addGroup(\'foo\')\n-        self.groupdata = self.groups.getGroupById(\'foo\')\n+        self.groups.addGroup("foo")\n+        self.groupdata = self.groups.getGroupById("foo")\n \n     def testAnonAddMember(self):\n         logout()\n@@ -112,22 +101,20 @@ def testAnonAddMember(self):\n \n     def testAnonRemoveMember(self):\n         logout()\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testMemberAddMember(self):\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testMemberRemoveMember(self):\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\n \n@@ -137,59 +124,59 @@ class TestGroupsTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n-        self.folder = self.portal[\'folder\']\n+        self.folder = self.portal["folder"]\n \n-        if \'auto_group\' in self.acl_users:\n-            self.acl_users.manage_delObjects([\'auto_group\'])\n+        if "auto_group" in self.acl_users:\n+            self.acl_users.manage_delObjects(["auto_group"])\n \n         # Nuke Administators and Reviewers groups added in 2.1a2 migrations\n         # (and any other migrated-in groups) to avoid test confusion\n         self.groups.removeGroups(self.groups.listGroupIds())\n \n     def testAddGroup(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.assertEqual(self.groups.listGroupIds(), [\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.assertEqual(self.groups.listGroupIds(), ["foo"])\n \n     def testGetGroupById(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        g = self.groups.getGroupById(\'foo\')\n+        self.groups.addGroup("foo", [], [])\n+        g = self.groups.getGroupById("foo")\n         self.assertNotEqual(g, None)\n \n     def testGetBadGroupById(self):\n-        g = self.groups.getGroupById(\'foo\')\n+        g = self.groups.getGroupById("foo")\n         self.assertEqual(g, None)\n \n     def testGroupByIdIsWrapped(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(g).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,\n-                         \'GroupManager\')\n+        self.groups.addGroup("foo", [], [])\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(g).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__, "GroupManager")\n \n     def testEditGroup(self):\n-        self.groups.addGroup(\'foo\', )\n-        self.groups.editGroup(\'foo\', roles=[\'Reviewer\'])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(sortTuple(g.getRoles()),\n-                         (\'Authenticated\', \'Reviewer\'))\n+        self.groups.addGroup(\n+            "foo",\n+        )\n+        self.groups.editGroup("foo", roles=["Reviewer"])\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(sortTuple(g.getRoles()), ("Authenticated", "Reviewer"))\n \n     def testEditBadGroup(self):\n         # Error type depends on the user folder...\n         try:\n-            self.groups.editGroup(\'foo\', [], [])\n+            self.groups.editGroup("foo", [], [])\n         except (KeyError, ValueError):\n-            pass        # Ok, this is the wanted behaviour\n+            pass  # Ok, this is the wanted behaviour\n         else:\n             self.fail("Should have raised KeyError or ValueError")\n \n     def testRemoveGroups(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.removeGroups([\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.removeGroups(["foo"])\n         self.assertEqual(len(self.groups.listGroupIds()), 0)\n \n     def testRemoveGroupDelEvent(self):\n@@ -201,85 +188,80 @@ def gotDeletion(event):\n \n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(gotDeletion)\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.removeGroups([\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.removeGroups(["foo"])\n         self.assertEqual(len(eventsFired), 1)\n-        self.assertEqual(eventsFired[0].principal, \'foo\')\n+        self.assertEqual(eventsFired[0].principal, "foo")\n         gsm.unregisterHandler(gotDeletion)\n \n     def testListGroupIds(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.addGroup(\'bar\', [], [])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.addGroup("bar", [], [])\n         grps = self.groups.listGroupIds()\n         grps.sort()\n-        self.assertEqual(grps, [\'bar\', \'foo\'])\n+        self.assertEqual(grps, ["bar", "foo"])\n \n     def testGetGroupsByUserId(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         gs = self.groups.getGroupsByUserId(TEST_USER_ID)\n-        self.assertEqual(gs[0].getId(), \'foo\')\n+        self.assertEqual(gs[0].getId(), "foo")\n \n     def testGroupsByUserIdAreWrapped(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         gs = self.groups.getGroupsByUserId(TEST_USER_ID)\n-        self.assertEqual(gs[0].__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(gs[0]).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(gs[0].__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(gs[0]).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__, "GroupManager")\n \n     def testListGroups(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.addGroup(\'bar\', [], [])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.addGroup("bar", [], [])\n         gs = self.groups.listGroups()\n-        self.assertEqual(gs[0].getId(), \'bar\')\n-        self.assertEqual(gs[1].getId(), \'foo\')\n+        self.assertEqual(gs[0].getId(), "bar")\n+        self.assertEqual(gs[1].getId(), "foo")\n \n     def testListedGroupsAreWrapped(self):\n-        self.groups.addGroup(\'foo\', [], [])\n+        self.groups.addGroup("foo", [], [])\n         gs = self.groups.listGroups()\n-        self.assertEqual(gs[0].__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(gs[0]).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(gs[0].__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(gs[0]).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__, "GroupManager")\n \n     def testSetGroupOwnership(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.folder.invokeFactory(\'Document\', \'doc\')\n+        self.groups.addGroup("foo", [], [])\n+        self.folder.invokeFactory("Document", "doc")\n         doc = self.folder.doc\n-        g = self.groups.getGroupById(\'foo\')\n+        g = self.groups.getGroupById("foo")\n         self.groups.setGroupOwnership(g, doc)\n-        self.assertEqual(doc.getOwnerTuple()[1], \'foo\')\n-        self.assertEqual(doc.get_local_roles_for_userid(\'foo\'), (\'Owner\',))\n-        self.assertEqual(doc.get_local_roles_for_userid(TEST_USER_ID),\n-                         (\'Owner\',))\n+        self.assertEqual(doc.getOwnerTuple()[1], "foo")\n+        self.assertEqual(doc.get_local_roles_for_userid("foo"), ("Owner",))\n+        self.assertEqual(doc.get_local_roles_for_userid(TEST_USER_ID), ("Owner",))\n \n     def testWrapGroup(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        g = self.acl_users.getGroup(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'PloneGroup\')\n+        self.groups.addGroup("foo", [], [])\n+        g = self.acl_users.getGroup("foo")\n+        self.assertEqual(g.__class__.__name__, "PloneGroup")\n         g = self.groups.wrapGroup(g)\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(g).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(g).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__, "GroupManager")\n \n     def testGetGroupInfo(self):\n-        self.groups.addGroup(\'foo\', title=\'Foo\', description=\'Bar\',\n-                             email=\'foo@foo.com\')\n-        info = self.groups.getGroupInfo(\'foo\')\n-        self.assertEqual(info.get(\'title\'), \'Foo\')\n-        self.assertEqual(info.get(\'description\'), \'Bar\')\n-        self.assertEqual(info.get(\'email\'), None)  # No email!\n+        self.groups.addGroup("foo", title="Foo", description="Bar", email="foo@foo.com")\n+        info = self.groups.getGroupInfo("foo")\n+        self.assertEqual(info.get("title"), "Foo")\n+        self.assertEqual(info.get("description"), "Bar")\n+        self.assertEqual(info.get("email"), None)  # No email!\n \n     def testGetGroupInfoAsAnonymous(self):\n-        self.groups.addGroup(\'foo\', title=\'Foo\', description=\'Bar\')\n+        self.groups.addGroup("foo", title="Foo", description="Bar")\n         logout()\n-        info = self.groups.restrictedTraverse(\'getGroupInfo\')(\'foo\')\n-        self.assertEqual(info.get(\'title\'), \'Foo\')\n-        self.assertEqual(info.get(\'description\'), \'Bar\')\n+        info = self.groups.restrictedTraverse("getGroupInfo")("foo")\n+        self.assertEqual(info.get("title"), "Foo")\n+        self.assertEqual(info.get("description"), "Bar")\n \n     def testGetBadGroupInfo(self):\n-        info = self.groups.getGroupInfo(\'foo\')\n+        info = self.groups.getGroupInfo("foo")\n         self.assertEqual(info, None)\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex b6948d5d..7bf978b9 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -18,73 +18,84 @@ class TestMemberDataTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         self.membership.memberareaCreationFlag = 0\n         # Don\'t let default_user disturb results\n         self.portal.acl_users._doDelUsers([default_user])\n         # Add some members\n-        self.addMember(\'fred\', \'Fred Flintstone\', \'fred@bedrock.com\',\n-                       [\'Member\', \'Reviewer\'], \'2002-01-01\')\n-        self.addMember(\'barney\', \'Barney Rubble\', \'barney@bedrock.com\',\n-                       [\'Member\'], \'2002-01-01\')\n-        self.addMember(\'brubble\', \'Bambam Rubble\', \'bambam@bambam.net\',\n-                       [\'Member\'], \'2003-12-31\')\n+        self.addMember(\n+            "fred",\n+            "Fred Flintstone",\n+            "fred@bedrock.com",\n+            ["Member", "Reviewer"],\n+            "2002-01-01",\n+        )\n+        self.addMember(\n+            "barney", "Barney Rubble", "barney@bedrock.com", ["Member"], "2002-01-01"\n+        )\n+        self.addMember(\n+            "brubble", "Bambam Rubble", "bambam@bambam.net", ["Member"], "2003-12-31"\n+        )\n         # MUST reset this\n         self.memberdata._v_temps = None\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        member.setMemberProperties(\n+            {\n+                "fullname": fullname,\n+                "email": email,\n+                "last_login_time": DateTime(last_login_time),\n+            }\n+        )\n \n     def testSetPortrait(self):\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            default_user)\n-        self.assertEqual(self.memberdata._getPortrait(default_user).getId(),\n-                         default_user)\n-        self.assertEqual(self.memberdata._getPortrait(default_user).meta_type,\n-                         \'Image\')\n+            Image(id=default_user, file=dummy.File(), title=""), default_user\n+        )\n+        self.assertEqual(\n+            self.memberdata._getPortrait(default_user).getId(), default_user\n+        )\n+        self.assertEqual(self.memberdata._getPortrait(default_user).meta_type, "Image")\n \n     def testDeletePortrait(self):\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            default_user)\n+            Image(id=default_user, file=dummy.File(), title=""), default_user\n+        )\n         self.memberdata._deletePortrait(default_user)\n         self.assertEqual(self.memberdata._getPortrait(default_user), None)\n \n     def testPruneMemberDataContents(self):\n         # Only test what is not already tested elswhere\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            default_user)\n+            Image(id=default_user, file=dummy.File(), title=""), default_user\n+        )\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            \'dummy\')\n+            Image(id=default_user, file=dummy.File(), title=""), "dummy"\n+        )\n         self.memberdata.pruneMemberDataContents()\n         self.assertEqual(len(self.memberdata.portraits), 1)\n \n     def testFulltextMemberSearch(self):\n         # Search for a user by id, name, email, ...\n         search = self.memberdata.searchFulltextForMembers\n-        self.assertEqual(len(search(\'\')), 3)\n-        self.assertEqual(len(search(\'rubble\')), 2)\n-        self.assertEqual(len(search(\'stone\')), 1)\n-        self.assertEqual(len(search(\'bambam.net\')), 1)\n-        self.assertEqual(len(search(\'bedrock.com\')), 2)\n-        self.assertEqual(len(search(\'brubble\')), 1)\n+        self.assertEqual(len(search("")), 3)\n+        self.assertEqual(len(search("rubble")), 2)\n+        self.assertEqual(len(search("stone")), 1)\n+        self.assertEqual(len(search("bambam.net")), 1)\n+        self.assertEqual(len(search("bedrock.com")), 2)\n+        self.assertEqual(len(search("brubble")), 1)\n \n     def testMemberDataAdapter(self):\n         """Test, if the PlonePAS MemberData adapter is used instead of the\n         default one from Products.CMFCore.MemberDataTool\n         """\n         from Products.PlonePAS.tools.memberdata import MemberData\n-        member = self.membership.getMemberById(\'fred\')\n+\n+        member = self.membership.getMemberById("fred")\n \n         adapter = getMultiAdapter((member, self.memberdata), IMember)\n         self.assertEqual(adapter.__class__, MemberData)\n@@ -93,29 +104,25 @@ def testMemberDataAdapter(self):\n         self.assertEqual(wrapped_user.__class__, MemberData)\n \n     def testPropertiesUpdatedEvent(self):\n-\n         def event_handler(context, event):\n             self._properties_updated_handler_called = True\n \n         gsm = getGlobalSiteManager()\n-        gsm.registerHandler(event_handler,\n-                            (IMemberData, IPropertiesUpdatedEvent))\n+        gsm.registerHandler(event_handler, (IMemberData, IPropertiesUpdatedEvent))\n \n         self._properties_updated_handler_called = False\n \n-        username = \'ez\'\n-        roles = [\'Member\']\n-        fullname = \'Ez Zy\'\n-        email = \'ez@ezmail.net\'\n+        username = "ez"\n+        roles = ["Member"]\n+        fullname = "Ez Zy"\n+        email = "ez@ezmail.net"\n \n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n \n         self.assertFalse(self._properties_updated_handler_called)\n \n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email})\n+        member.setMemberProperties({"fullname": fullname, "email": email})\n \n         self.assertTrue(self._properties_updated_handler_called)\n \n@@ -124,19 +131,21 @@ def event_handler(context, event):\n \n         # Imitate a login as the plone.app.testing login method doesn\'t seem to\n         # set these member properties.\n-        member.setMemberProperties({\n-            \'login_time\': DateTime(\'2018-02-15\'),\n-            \'last_login_time\': DateTime(\'2018-02-15\')})\n+        member.setMemberProperties(\n+            {\n+                "login_time": DateTime("2018-02-15"),\n+                "last_login_time": DateTime("2018-02-15"),\n+            }\n+        )\n \n         self.assertFalse(self._properties_updated_handler_called)\n \n         # Test notify(PropertiesUpdated) isn\'t called when login_time is\n         # present as we\'re assuming this should only be changed on login.\n         self._properties_updated_handler_called = False\n-        member.setMemberProperties({\n-            \'login_time\': DateTime(\'2018-02-15\'),\n-            \'fullname\': \'Bed Rock\'})\n+        member.setMemberProperties(\n+            {"login_time": DateTime("2018-02-15"), "fullname": "Bed Rock"}\n+        )\n \n         self.assertFalse(self._properties_updated_handler_called)\n-        gsm.unregisterHandler(event_handler,\n-                              (IMemberData, IPropertiesUpdatedEvent))\n+        gsm.unregisterHandler(event_handler, (IMemberData, IPropertiesUpdatedEvent))\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex c9c17eab..bd249b23 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -39,18 +39,18 @@ class MembershipToolTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.mt = getToolByName(self.portal, \'portal_membership\')\n-        self.md = getToolByName(self.portal, \'portal_memberdata\')\n+        self.portal = self.layer["portal"]\n+        self.mt = getToolByName(self.portal, "portal_membership")\n+        self.md = getToolByName(self.portal, "portal_memberdata")\n \n-        self.member_id = \'member1\'\n+        self.member_id = "member1"\n         # Create a new Member\n         self.mt.addMember(\n             self.member_id,\n-            \'pw\',\n-            [\'Member\'],\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'member1@host.com\', \'title\': \'Member #1\'}\n+            {"email": "member1@host.com", "title": "Member #1"},\n         )\n \n     def test_get_member(self):\n@@ -79,6 +79,7 @@ def test_get_member_by_id(self):\n     def test_id_clean(self):\n         from Products.PlonePAS.utils import cleanId\n         from Products.PlonePAS.utils import decleanId\n+\n         a = [\n             "asdfasdf",\n             "asdf-asdf",\n@@ -130,8 +131,8 @@ def test_id_clean(self):\n         ac = zip(a, c)\n         for aa, cc in ac:\n             self.assertTrue(aa == cc)\n-        cleaned = cleanId(u\'abc\')\n-        self.assertEqual(cleaned, \'abc\')\n+        cleaned = cleanId("abc")\n+        self.assertEqual(cleaned, "abc")\n         self.assertTrue(isinstance(cleaned, str))\n         if six.PY2:\n             self.assertFalse(isinstance(cleaned, six.text_type))\n@@ -142,19 +143,19 @@ class MemberAreaTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.mt = getToolByName(self.portal, \'portal_membership\')\n-        self.md = getToolByName(self.portal, \'portal_memberdata\')\n+        self.portal = self.layer["portal"]\n+        self.mt = getToolByName(self.portal, "portal_membership")\n+        self.md = getToolByName(self.portal, "portal_memberdata")\n         # Enable member-area creation\n         self.mt.memberareaCreationFlag = 1\n         # Those are all valid chars in Zope.\n         self.mid = "Member #1 - Houston, TX. ($100)"\n         self.pas = self.portal.acl_users\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_funky_member_ids_1(self):\n         mid = self.mid\n-        minfo = (mid, \'pw\', [\'Member\'], [])\n+        minfo = (mid, "pw", ["Member"], [])\n \n         # Create a new User\n         self.pas._doAddUser(*minfo)\n@@ -162,26 +163,26 @@ def test_funky_member_ids_1(self):\n \n     def test_funky_member_ids_2(self):\n         # Forward-slash is not allowed\n-        mid = self.mid + \'/\'\n-        minfo = (mid, \'pw\', [\'Member\'], [])\n+        mid = self.mid + "/"\n+        minfo = (mid, "pw", ["Member"], [])\n \n         # Create a new User\n         self.pas._doAddUser(*minfo)\n         self.mt.createMemberArea(mid)\n \n     def test_memberareaCreationFlag_respected(self):\n-        self.pas._doAddUser(\'foo\', \'pw\', [\'Member\'], [])\n-        self.pas._doAddUser(\'bar\', \'pw\', [\'Member\'], [])\n+        self.pas._doAddUser("foo", "pw", ["Member"], [])\n+        self.pas._doAddUser("bar", "pw", ["Member"], [])\n \n-        self.assertFalse(\'foo\' in self.portal.Members)\n-        self.assertFalse(\'bar\' in self.portal.Members)\n+        self.assertFalse("foo" in self.portal.Members)\n+        self.assertFalse("bar" in self.portal.Members)\n \n-        self.mt.createMemberarea(\'foo\')\n-        self.assertTrue(\'foo\' in self.portal.Members)\n+        self.mt.createMemberarea("foo")\n+        self.assertTrue("foo" in self.portal.Members)\n \n         self.mt.memberareaCreationFlag = 0\n-        self.mt.createMemberArea(\'bar\')\n-        self.assertFalse(\'bar\' in self.portal.Members)\n+        self.mt.createMemberArea("bar")\n+        self.assertFalse("bar" in self.portal.Members)\n \n \n class TestMembershipTool(unittest.TestCase):\n@@ -189,27 +190,33 @@ class TestMembershipTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.groups = self.portal.portal_groups\n-        self.folder = self.portal[\'folder\']\n+        self.folder = self.portal["folder"]\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n+\n         verifyClass(IMembershipTool, MembershipTool)\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname, \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        member.setMemberProperties(\n+            {\n+                "fullname": fullname,\n+                "email": email,\n+                "last_login_time": DateTime(last_login_time),\n+            }\n+        )\n \n     def makeRealImage(self):\n         import Products.PlonePAS as ppas\n+\n         pas_path = os.path.dirname(ppas.__file__)\n-        path = os.path.join(pas_path, \'tool.gif\')\n-        image = open(path, \'rb\')\n+        path = os.path.join(pas_path, "tool.gif")\n+        image = open(path, "rb")\n         image_upload = dummy.FileUpload(dummy.FieldStorage(image))\n         return image_upload\n \n@@ -228,8 +235,8 @@ def testGetPersonalFolderIfNoHome(self):\n     def testGetPersonalPortrait(self):\n         # Should return the default portrait\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), "defaultUser.png"\n+        )\n \n     def testChangeOwnMemberPortrait(self):\n         # Should change the portrait image\n@@ -237,20 +244,20 @@ def testChangeOwnMemberPortrait(self):\n         image = self.makeRealImage()\n         self.membership.changeMemberPortrait(image, TEST_USER_ID)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            TEST_USER_ID)\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), TEST_USER_ID\n+        )\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).meta_type,\n-            \'Image\')\n+            self.membership.getPersonalPortrait(TEST_USER_ID).meta_type, "Image"\n+        )\n \n     def testChangeOwnMemberPortraitWithEmailUsers(self):\n-        member_id = \'member2@host.com\'\n+        member_id = "member2@host.com"\n         self.membership.addMember(\n             member_id,\n-            \'pw\',\n-            [\'Member\'],\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'member2@host.com\', \'title\': \'Member #2\'}\n+            {"email": "member2@host.com", "title": "Member #2"},\n         )\n \n         login(self.portal, member_id)\n@@ -259,129 +266,118 @@ def testChangeOwnMemberPortraitWithEmailUsers(self):\n \n         self.membership.changeMemberPortrait(image, member_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(member_id).getId(),\n-            safe_member_id)\n+            self.membership.getPersonalPortrait(member_id).getId(), safe_member_id\n+        )\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(member_id).meta_type,\n-            \'Image\')\n+            self.membership.getPersonalPortrait(member_id).meta_type, "Image"\n+        )\n \n     def testCannotChangeOtherMemberPortrait(self):\n         # A normal member should not be able to change the portrait of\n         # another member.\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.assertRaises(Unauthorized, self.membership.changeMemberPortrait,\n-                          image, \'joe\')\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.assertRaises(\n+            Unauthorized, self.membership.changeMemberPortrait, image, "joe"\n+        )\n \n     def testChangeMemberPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # This should not raise Unauthorized:\n-        self.membership.changeMemberPortrait(image, \'joe\')\n-        self.assertEqual(self.membership.getPersonalPortrait(\'joe\').getId(),\n-                         \'joe\')\n-        self.assertEqual(self.membership.getPersonalPortrait(\'joe\').meta_type,\n-                         \'Image\')\n+        self.membership.changeMemberPortrait(image, "joe")\n+        self.assertEqual(self.membership.getPersonalPortrait("joe").getId(), "joe")\n+        self.assertEqual(self.membership.getPersonalPortrait("joe").meta_type, "Image")\n \n     def testDeleteOwnPersonalPortrait(self):\n         # Should delete the portrait image\n         image = self.makeRealImage()\n         self.membership.changeMemberPortrait(image, TEST_USER_ID)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            TEST_USER_ID)\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), TEST_USER_ID\n+        )\n         self.membership.deletePersonalPortrait(TEST_USER_ID)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), "defaultUser.png"\n+        )\n \n     def testCannotDeleteOtherPersonalPortrait(self):\n         # A normal member should not be able to delete the portrait of\n         # another member.\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.membership.changeMemberPortrait(image, \'joe\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertRaises(Unauthorized, self.membership.deletePersonalPortrait,\n-                          \'joe\')\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.membership.changeMemberPortrait(image, "joe")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertRaises(Unauthorized, self.membership.deletePersonalPortrait, "joe")\n \n     def testDeleteOtherPersonalPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.membership.changeMemberPortrait(image, \'joe\')\n-        self.membership.deletePersonalPortrait(\'joe\')\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.membership.changeMemberPortrait(image, "joe")\n+        self.membership.deletePersonalPortrait("joe")\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(\'joe\').getId(),\n-            \'defaultUser.png\'\n+            self.membership.getPersonalPortrait("joe").getId(), "defaultUser.png"\n         )\n \n     def testGetPersonalPortraitWithoutPassingId(self):\n         # Should return the logged in users portrait if no id is given\n         image = self.makeRealImage()\n         self.membership.changeMemberPortrait(image, TEST_USER_ID)\n-        self.assertEqual(self.membership.getPersonalPortrait().getId(),\n-                         TEST_USER_ID)\n-        self.assertEqual(self.membership.getPersonalPortrait().meta_type,\n-                         \'Image\')\n+        self.assertEqual(self.membership.getPersonalPortrait().getId(), TEST_USER_ID)\n+        self.assertEqual(self.membership.getPersonalPortrait().meta_type, "Image")\n \n     def testPortraitForNonStandardUserId(self):\n         # Some characters in a user id can give problems for getting\n         # or saving a portrait, especially \'-\', \'+\', \'@\'.\n         image = self.makeRealImage()\n-        user_id = \'bob-jones+test@example.org\'\n+        user_id = "bob-jones+test@example.org"\n         safe_id = self.membership._getSafeMemberId(user_id)\n-        self.assertEqual(safe_id, \'bob--jones-2Btest-40example.org\')\n-        self.membership.addMember(user_id, \'secret\', [\'Member\'], [])\n+        self.assertEqual(safe_id, "bob--jones-2Btest-40example.org")\n+        self.membership.addMember(user_id, "secret", ["Member"], [])\n         login(self.portal, user_id)\n \n         # Should return the default portrait\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(user_id).getId(), "defaultUser.png"\n+        )\n \n         # Change your own portrait.\n         self.membership.changeMemberPortrait(image, user_id)\n-        self.assertEqual(self.membership.getPersonalPortrait().getId(),\n-                         safe_id)\n-        self.assertEqual(self.membership.getPersonalPortrait().meta_type,\n-                         \'Image\')\n+        self.assertEqual(self.membership.getPersonalPortrait().getId(), safe_id)\n+        self.assertEqual(self.membership.getPersonalPortrait().meta_type, "Image")\n \n         # Other users should be able to see your portrait.\n         login(self.portal, TEST_USER_NAME)\n+        self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(), safe_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            safe_id)\n-        self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).meta_type,\n-            \'Image\')\n+            self.membership.getPersonalPortrait(user_id).meta_type, "Image"\n+        )\n \n         # You can delete your own portrait.\n         login(self.portal, user_id)\n         self.membership.deletePersonalPortrait(user_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(user_id).getId(), "defaultUser.png"\n+        )\n \n         # Managers should be able to change the portrait of another\n         # member and delete it.\n         manager_image = self.makeRealImage()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(manager_image, user_id)\n-        self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(),\n-                         safe_id)\n+        self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(), safe_id)\n         self.membership.deletePersonalPortrait(user_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            \'defaultUser.png\'\n+            self.membership.getPersonalPortrait(user_id).getId(), "defaultUser.png"\n         )\n \n     def testListMembers(self):\n@@ -393,8 +389,8 @@ def testListMembers(self):\n     def testListMembersSkipsGroups(self):\n         # Should only return real members, not groups\n         uf = self.portal.acl_users\n-        self.groups.addGroup(\'Foo\')\n-        self.groups.addGroup(\'Bar\')\n+        self.groups.addGroup("Foo")\n+        self.groups.addGroup("Bar")\n         self.assertEqual(len(uf.getUserNames()), 1)\n         members = self.membership.listMembers()\n         self.assertEqual(len(members), 1)\n@@ -409,8 +405,8 @@ def testListMemberIds(self):\n     def testListMemberIdsSkipsGroups(self):\n         # Should only return real members, not groups\n         uf = self.portal.acl_users\n-        self.groups.addGroup(\'Foo\')\n-        self.groups.addGroup(\'Bar\')\n+        self.groups.addGroup("Foo")\n+        self.groups.addGroup("Bar")\n         self.assertEqual(len(uf.getUserNames()), 1)\n         memberids = self.membership.listMemberIds()\n         self.assertEqual(len(memberids), 1)\n@@ -418,57 +414,54 @@ def testListMemberIdsSkipsGroups(self):\n \n     def testCurrentPassword(self):\n         # Password checking should work\n-        self.assertTrue(self.membership.testCurrentPassword(\'secret\'))\n-        self.assertFalse(self.membership.testCurrentPassword(\'geheim\'))\n+        self.assertTrue(self.membership.testCurrentPassword("secret"))\n+        self.assertFalse(self.membership.testCurrentPassword("geheim"))\n \n     def testSetPassword(self):\n         # Password should be changed\n-        self.membership.setPassword(\'geheim\')\n-        self.assertTrue(self.membership.testCurrentPassword(\'geheim\'))\n+        self.membership.setPassword("geheim")\n+        self.assertTrue(self.membership.testCurrentPassword("geheim"))\n \n     def testSetPasswordIfAnonymous(self):\n         # Anonymous should not be able to change password\n         logout()\n         try:\n-            self.membership.setPassword(\'geheim\')\n+            self.membership.setPassword("geheim")\n         except BadRequest:\n             import sys\n+\n             e, v, tb = sys.exc_info()\n             del tb\n-            if str(v) == \'Not logged in.\':\n+            if str(v) == "Not logged in.":\n                 pass\n             else:\n                 raise\n \n     def testSetPasswordAndKeepGroups(self):\n         # Password should be changed and user must not change group membership\n-        group2 = \'g2\'\n+        group2 = "g2"\n         groups = self.groups\n         groups.addGroup(group2, None, [], [])\n         group = groups.getGroupById(group2)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n         ugroups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n-        self.membership.setPassword(\'geheim\')\n+        self.membership.setPassword("geheim")\n         t_groups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n         self.assertTrue(t_groups == ugroups)\n \n     def testGetMemberById(self):\n         # This should work for portal users,\n         self.assertNotEqual(self.membership.getMemberById(TEST_USER_ID), None)\n-        self.assertEqual(self.membership.getMemberById(\'foo\'), None)\n-        self.assertNotEqual(\n-            self.membership.getMemberById(SITE_OWNER_NAME),\n-            None\n-        )\n+        self.assertEqual(self.membership.getMemberById("foo"), None)\n+        self.assertNotEqual(self.membership.getMemberById(SITE_OWNER_NAME), None)\n \n     def testGetMemberByIdIsWrapped(self):\n         member = self.membership.getMemberById(TEST_USER_ID)\n         self.assertNotEqual(member, None)\n-        self.assertEqual(member.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(member).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(member.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(member).__class__.__name__, "PluggableAuthService")\n \n     def testGetAuthenticatedMember(self):\n         member = self.membership.getAuthenticatedMember()\n@@ -477,21 +470,20 @@ def testGetAuthenticatedMember(self):\n     def testGetAuthenticatedMemberIsWrapped(self):\n         member = self.membership.getAuthenticatedMember()\n         self.assertEqual(member.getUserName(), TEST_USER_NAME)\n-        self.assertEqual(member.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(member).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(member.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(member).__class__.__name__, "PluggableAuthService")\n \n     def testGetAuthenticatedMemberIfAnonymous(self):\n         logout()\n         member = self.membership.getAuthenticatedMember()\n-        self.assertEqual(member.getUserName(), \'Anonymous User\')\n+        self.assertEqual(member.getUserName(), "Anonymous User")\n \n     def testAnonymousMemberIsNotWrapped(self):\n         # Also see http://dev.plone.org/plone/ticket/1851\n         logout()\n         member = self.membership.getAuthenticatedMember()\n-        self.assertNotEqual(member.__class__.__name__, \'MemberData\')\n-        self.assertEqual(member.__class__.__name__, \'SpecialUser\')\n+        self.assertNotEqual(member.__class__.__name__, "MemberData")\n+        self.assertEqual(member.__class__.__name__, "SpecialUser")\n \n     def testIsAnonymousUser(self):\n         self.assertFalse(self.membership.isAnonymousUser())\n@@ -500,168 +492,162 @@ def testIsAnonymousUser(self):\n \n     def testWrapUserWrapsBareUser(self):\n         user = self.portal.acl_users.getUserById(TEST_USER_ID)\n-        self.assertTrue(hasattr(user, \'aq_base\'))\n+        self.assertTrue(hasattr(user, "aq_base"))\n         user = aq_base(user)\n         user = self.membership.wrapUser(user)\n-        self.assertEqual(user.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(user).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(user.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(user).__class__.__name__, "PluggableAuthService")\n \n     def testWrapUserWrapsWrappedUser(self):\n         user = self.portal.acl_users.getUserById(TEST_USER_ID)\n-        self.assertTrue(hasattr(user, \'aq_base\'))\n+        self.assertTrue(hasattr(user, "aq_base"))\n         user = self.membership.wrapUser(user)\n-        self.assertEqual(user.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(user).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(user.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(user).__class__.__name__, "PluggableAuthService")\n \n     def testWrapUserDoesntWrapMemberData(self):\n         user = self.portal.acl_users.getUserById(TEST_USER_ID)\n         user.getMemberId = lambda x: 1\n         user = self.membership.wrapUser(user)\n-        self.assertEqual(user.__class__.__name__, \'PloneUser\')\n+        self.assertEqual(user.__class__.__name__, "PloneUser")\n \n     def testWrapUserDoesntWrapAnonymous(self):\n         user = self.membership.wrapUser(nobody)\n-        self.assertEqual(user.__class__.__name__, \'SpecialUser\')\n+        self.assertEqual(user.__class__.__name__, "SpecialUser")\n \n     def testWrapUserWrapsAnonymous(self):\n-        self.assertFalse(hasattr(nobody, \'aq_base\'))\n+        self.assertFalse(hasattr(nobody, "aq_base"))\n         user = self.membership.wrapUser(nobody, wrap_anon=1)\n-        self.assertEqual(user.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(user).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(user.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(user).__class__.__name__, "PluggableAuthService")\n \n     def testGetCandidateLocalRoles(self):\n-        self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n-                         (\'Owner\',))\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n-        self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n-                         (\'Owner\', \'Reviewer\'))\n+        self.assertEqual(\n+            self.membership.getCandidateLocalRoles(self.folder), ("Owner",)\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Reviewer"])\n+        self.assertEqual(\n+            self.membership.getCandidateLocalRoles(self.folder), ("Owner", "Reviewer")\n+        )\n \n     def testSetLocalRoles(self):\n-        self.assertTrue(\n-            \'Owner\' in self.folder.get_local_roles_for_userid(TEST_USER_ID))\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n-        self.membership.setLocalRoles(self.folder, [TEST_USER_ID, \'user2\'],\n-                                      \'Reviewer\')\n-        self.assertEqual(self.folder.get_local_roles_for_userid(TEST_USER_ID),\n-                         (\'Owner\', \'Reviewer\'))\n-        self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'),\n-                         (\'Reviewer\',))\n+        self.assertTrue("Owner" in self.folder.get_local_roles_for_userid(TEST_USER_ID))\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Reviewer"])\n+        self.membership.setLocalRoles(self.folder, [TEST_USER_ID, "user2"], "Reviewer")\n+        self.assertEqual(\n+            self.folder.get_local_roles_for_userid(TEST_USER_ID), ("Owner", "Reviewer")\n+        )\n+        self.assertEqual(self.folder.get_local_roles_for_userid("user2"), ("Reviewer",))\n \n     def testDeleteLocalRoles(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n-        self.membership.setLocalRoles(self.folder, [\'user2\'], \'Reviewer\')\n-        self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'),\n-                         (\'Reviewer\',))\n-        self.membership.deleteLocalRoles(self.folder, [\'user2\'])\n-        self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'), ())\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Reviewer"])\n+        self.membership.setLocalRoles(self.folder, ["user2"], "Reviewer")\n+        self.assertEqual(self.folder.get_local_roles_for_userid("user2"), ("Reviewer",))\n+        self.membership.deleteLocalRoles(self.folder, ["user2"])\n+        self.assertEqual(self.folder.get_local_roles_for_userid("user2"), ())\n \n     def testGetHomeFolder(self):\n         self.assertNotEqual(self.membership.getHomeFolder(), None)\n-        self.assertEqual(self.membership.getHomeFolder(\'user2\'), None)\n+        self.assertEqual(self.membership.getHomeFolder("user2"), None)\n \n     def testGetHomeUrl(self):\n         self.assertNotEqual(self.membership.getHomeUrl(), None)\n-        self.assertEqual(self.membership.getHomeUrl(\'user2\'), None)\n+        self.assertEqual(self.membership.getHomeUrl("user2"), None)\n \n     def testGetAuthenticatedMemberInfo(self):\n         member = self.membership.getAuthenticatedMember()\n-        member.setMemberProperties({\'fullname\': \'Test user\'})\n+        member.setMemberProperties({"fullname": "Test user"})\n         info = self.membership.getMemberInfo()\n-        self.assertEqual(info[\'fullname\'], \'Test user\')\n+        self.assertEqual(info["fullname"], "Test user")\n \n     def testGetMemberInfo(self):\n-        self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [],\n-                                  properties={\'fullname\': \'Second user\'})\n-        info = self.membership.getMemberInfo(\'user2\')\n-        self.assertEqual(info[\'fullname\'], \'Second user\')\n+        self.membership.addMember(\n+            "user2", "secret", ["Member"], [], properties={"fullname": "Second user"}\n+        )\n+        info = self.membership.getMemberInfo("user2")\n+        self.assertEqual(info["fullname"], "Second user")\n \n     def testGetMemberInfoWithMissingProperties(self):\n-        self.membership.addMember(\'user3\', \'secret\', [\'Member\'], [],\n-                                  properties={\'fullname\': \'Second user\'})\n-        self.membership.portal_memberdata._delProperty(\'location\')\n-        self.membership.portal_memberdata._delProperty(\'home_page\')\n-        info = self.membership.getMemberInfo(\'user3\')\n-        self.assertEqual(info[\'fullname\'], \'Second user\')\n+        self.membership.addMember(\n+            "user3", "secret", ["Member"], [], properties={"fullname": "Second user"}\n+        )\n+        self.membership.portal_memberdata._delProperty("location")\n+        self.membership.portal_memberdata._delProperty("home_page")\n+        info = self.membership.getMemberInfo("user3")\n+        self.assertEqual(info["fullname"], "Second user")\n \n     def testGetMemberInfoHomePage(self):\n-        self.membership.addMember(\n-            \'user4\', \'secret\', [\'Member\'], [],\n-            properties={})\n+        self.membership.addMember("user4", "secret", ["Member"], [], properties={})\n         # empty home_page\n-        member = self.membership.getMemberById(\'user4\')\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'\')\n+        member = self.membership.getMemberById("user4")\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "")\n \n         # regular external home_page\n-        member.setMemberProperties({\'home_page\': \'http://maurits.vanrees.org\'})\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'http://maurits.vanrees.org\')\n+        member.setMemberProperties({"home_page": "http://maurits.vanrees.org"})\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "http://maurits.vanrees.org")\n \n         # internal home_page\n-        member.setMemberProperties({\'home_page\': \'internal_page\'})\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'internal_page\')\n+        member.setMemberProperties({"home_page": "internal_page"})\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "internal_page")\n \n         # bad home_page\n-        member.setMemberProperties({\'home_page\': \'javascript:alert("hello")\'})\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'\')\n+        member.setMemberProperties({"home_page": \'javascript:alert("hello")\'})\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "")\n \n     def testGetCandidateLocalRolesIncludesLocalRolesOnObjectForManager(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID,\n-                                         (\'Manager\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("Manager", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'my_test_role\' in roles,\n-                        \'my_test_role not in: %s\' % str(roles))\n+        self.assertTrue("my_test_role" in roles, "my_test_role not in: %s" % str(roles))\n \n     def testGetCandidateLocalRolesIncludesLocalRolesOnObjectForAssignees(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID,\n-                                         (\'my_test_role\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("my_test_role", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Owner\' in roles)\n-        self.assertTrue(\'my_test_role\' in roles)\n+        self.assertTrue("Owner" in roles)\n+        self.assertTrue("my_test_role" in roles)\n         self.assertEqual(len(roles), 2)\n \n     def testGetCandidateLocalRolesForManager(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID, (\'Manager\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("Manager", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Manager\' in roles)\n-        self.assertTrue(\'Owner\' in roles)\n-        self.assertTrue(\'Reviewer\' in roles)\n+        self.assertTrue("Manager" in roles)\n+        self.assertTrue("Owner" in roles)\n+        self.assertTrue("Reviewer" in roles)\n \n     def testGetCandidateLocalRolesForOwner(self):\n-        self.folder._addRole(\'my_test_role\')\n+        self.folder._addRole("my_test_role")\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Owner\' in roles)\n+        self.assertTrue("Owner" in roles)\n         self.assertEqual(len(roles), 1)\n \n     def testGetCandidateLocalRolesForAssigned(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID, (\'Reviewer\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("Reviewer", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Owner\' in roles)\n-        self.assertTrue(\'Reviewer\' in roles)\n+        self.assertTrue("Owner" in roles)\n+        self.assertTrue("Reviewer" in roles)\n         self.assertEqual(len(roles), 2)\n \n     def test_bug4333_delete_user_remove_memberdata(self):\n         # delete user should delete portal_memberdata\n         memberdata = self.portal.portal_memberdata\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.addMember(\'barney\', \'Barney Rubble\', \'barney@bedrock.com\',\n-                       [\'Member\'], \'2002-01-01\')\n-        barney = self.membership.getMemberById(\'barney\')\n-        self.assertEqual(barney.getProperty(\'email\'), \'barney@bedrock.com\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.addMember(\n+            "barney", "Barney Rubble", "barney@bedrock.com", ["Member"], "2002-01-01"\n+        )\n+        barney = self.membership.getMemberById("barney")\n+        self.assertEqual(barney.getProperty("email"), "barney@bedrock.com")\n         del barney\n \n-        self.membership.deleteMembers([\'barney\'])\n+        self.membership.deleteMembers(["barney"])\n         md = memberdata._members\n-        self.assertFalse(\'barney\' in md)\n+        self.assertFalse("barney" in md)\n \n         # There is an _v_ variable that is killed at the end of each request\n         # which stores a temporary version of the member object, this is\n@@ -670,17 +656,19 @@ def test_bug4333_delete_user_remove_memberdata(self):\n         # using the tool.\n         memberdata._v_temps = None\n \n-        self.membership.addMember(\'barney\', \'secret\', [\'Member\'], [])\n-        barney = self.membership.getMemberById(\'barney\')\n-        self.assertNotEqual(barney.getProperty(\'fullname\'), \'Barney Rubble\')\n-        self.assertNotEqual(barney.getProperty(\'email\'), \'barney@bedrock.com\')\n+        self.membership.addMember("barney", "secret", ["Member"], [])\n+        barney = self.membership.getMemberById("barney")\n+        self.assertNotEqual(barney.getProperty("fullname"), "Barney Rubble")\n+        self.assertNotEqual(barney.getProperty("email"), "barney@bedrock.com")\n \n     def testBogusMemberPortrait(self):\n         # Should change the portrait image\n-        bad_file = dummy.File(data=b\'<div>This is a lie!!!</div>\',\n-                              headers={\'content_type\': \'image/jpeg\'})\n-        self.assertRaises(IOError, self.membership.changeMemberPortrait,\n-                          bad_file, TEST_USER_ID)\n+        bad_file = dummy.File(\n+            data=b"<div>This is a lie!!!</div>", headers={"content_type": "image/jpeg"}\n+        )\n+        self.assertRaises(\n+            IOError, self.membership.changeMemberPortrait, bad_file, TEST_USER_ID\n+        )\n \n     def testGetBadMembers(self):\n         # Should list members with bad images\n@@ -688,20 +676,17 @@ def testGetBadMembers(self):\n         self.assertEqual(self.membership.getBadMembers(), [])\n         # Let\'s add one\n         bad_file = Image(\n-            id=TEST_USER_ID,\n-            title=\'\',\n-            file=BytesIO(b\'<div>This is a lie!!!</div>\')\n+            id=TEST_USER_ID, title="", file=BytesIO(b"<div>This is a lie!!!</div>")\n         )\n         # Manually set a bad image using private methods\n         self.portal.portal_memberdata._setPortrait(bad_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [TEST_USER_ID])\n         # Try an empty image\n-        empty_file = Image(id=TEST_USER_ID, title=\'\', file=BytesIO(b\'\'))\n+        empty_file = Image(id=TEST_USER_ID, title="", file=BytesIO(b""))\n         self.portal.portal_memberdata._setPortrait(empty_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [])\n         # And a good image\n-        self.membership.changeMemberPortrait(self.makeRealImage(),\n-                                             TEST_USER_ID)\n+        self.membership.changeMemberPortrait(self.makeRealImage(), TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [])\n \n     def test_credentials_updated_event(self):\n@@ -714,13 +699,13 @@ def got_credentials_updated_event(event):\n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(got_credentials_updated_event)\n \n-        self.assertTrue(self.membership.testCurrentPassword(\'secret\'))\n-        self.assertFalse(self.membership.testCurrentPassword(\'whoknows\'))\n+        self.assertTrue(self.membership.testCurrentPassword("secret"))\n+        self.assertFalse(self.membership.testCurrentPassword("whoknows"))\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n-        self.membership.setPassword(\'guessagain\')\n+        self.membership.setPassword("guessagain")\n         self.assertEqual(len(events_fired), 1)\n         self.assertEqual(events_fired[0].principal.getId(), TEST_USER_ID)\n-        self.assertEqual(events_fired[0].password, \'guessagain\')\n+        self.assertEqual(events_fired[0].password, "guessagain")\n \n \n class TestCreateMemberarea(unittest.TestCase):\n@@ -728,83 +713,81 @@ class TestCreateMemberarea(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n+        self.membership.addMember("user2", "secret", ["Member"], [])\n \n     def testCreateMemberarea(self):\n         # Should create a memberarea for user2\n         if self.membership.memberareaCreationFlag is True:\n-            self.membership.createMemberarea(\'user2\')\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n-            self.assertTrue(memberfolder,\n-                            \'createMemberarea failed to create memberarea\')\n+            self.membership.createMemberarea("user2")\n+            memberfolder = self.membership.getHomeFolder("user2")\n+            self.assertTrue(\n+                memberfolder, "createMemberarea failed to create memberarea"\n+            )\n             # member area creation should be on by default\n             self.assertTrue(self.membership.getMemberareaCreationFlag())\n \n     def testCreatMemberareaUsesCurrentUser(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Should create a memberarea for user2\n-            login(self.portal, \'user2\')\n+            login(self.portal, "user2")\n             self.membership.createMemberarea()\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n+            memberfolder = self.membership.getHomeFolder("user2")\n             self.assertTrue(\n                 memberfolder,\n-                \'createMemberarea failed to create memberarea for current \'\n-                \'user\'\n+                "createMemberarea failed to create memberarea for current " "user",\n             )\n         else:\n             pass\n \n     def testNoMemberareaIfNoMembersFolder(self):\n         # Should not create a memberarea if the Members folder is missing\n-        self.portal._delObject(\'Members\')\n-        self.membership.createMemberarea(\'user2\')\n-        memberfolder = self.membership.getHomeFolder(\'user2\')\n+        self.portal._delObject("Members")\n+        self.membership.createMemberarea("user2")\n+        memberfolder = self.membership.getHomeFolder("user2")\n         self.assertFalse(\n-            memberfolder,\n-            \'createMemberarea unexpectedly created a memberarea\'\n+            memberfolder, "createMemberarea unexpectedly created a memberarea"\n         )\n \n     def testNoMemberareaIfMemberareaExists(self):\n         # Should not attempt to create a memberarea if a memberarea already\n         # exists\n-        self.membership.createMemberarea(\'user2\')\n+        self.membership.createMemberarea("user2")\n         # The second call should do nothing (not cause an error)\n-        self.membership.createMemberarea(\'user2\')\n+        self.membership.createMemberarea("user2")\n \n     def testNotifyScriptIsCalled(self):\n         # The notify script should be called\n         if self.membership.memberareaCreationFlag is True:\n             self.portal.notifyMemberAreaCreated = dummy.Raiser(dummy.Error)\n-            self.assertRaises(dummy.Error, self.membership.createMemberarea,\n-                              \'user2\')\n+            self.assertRaises(dummy.Error, self.membership.createMemberarea, "user2")\n \n     def testCreateMemberareaAlternateName(self):\n         # Alternate method name \'createMemberaArea\' should work\n         if self.membership.memberareaCreationFlag is True:\n-            self.membership.createMemberArea(\'user2\')\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n-            self.assertTrue(memberfolder,\n-                            \'createMemberArea failed to create memberarea\')\n+            self.membership.createMemberArea("user2")\n+            memberfolder = self.membership.getHomeFolder("user2")\n+            self.assertTrue(\n+                memberfolder, "createMemberArea failed to create memberarea"\n+            )\n \n     def testCreateMemberareaAlternateType(self):\n         # Should be able to create another type instead of a normal Folder\n         if self.membership.memberareaCreationFlag is True:\n-            self.membership.setMemberAreaType(\'Document\')\n-            self.membership.createMemberarea(\'user2\')\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n-            self.assertEqual(memberfolder.getPortalTypeName(), \'Document\')\n+            self.membership.setMemberAreaType("Document")\n+            self.membership.createMemberarea("user2")\n+            memberfolder = self.membership.getHomeFolder("user2")\n+            self.assertEqual(memberfolder.getPortalTypeName(), "Document")\n \n     def testCreateMemberareaWhenDisabled(self):\n         # Should not create a member area\n         self.membership.setMemberareaCreationFlag = False\n         self.assertFalse(self.membership.getMemberareaCreationFlag())\n-        self.membership.createMemberarea(\'user2\')\n-        memberfolder = self.membership.getHomeFolder(\'user2\')\n+        self.membership.createMemberarea("user2")\n+        memberfolder = self.membership.getHomeFolder("user2")\n         self.assertFalse(\n-            memberfolder,\n-            \'createMemberarea created memberarea despite flag\'\n+            memberfolder, "createMemberarea created memberarea despite flag"\n         )\n \n \n@@ -813,17 +796,17 @@ class TestMemberareaSetup(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n-        self.membership.createMemberarea(\'user2\')\n-        self.home = self.membership.getHomeFolder(\'user2\')\n+        self.membership.addMember("user2", "secret", ["Member"], [])\n+        self.membership.createMemberarea("user2")\n+        self.home = self.membership.getHomeFolder("user2")\n \n     def testMemberareaIsFolder(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Memberarea should be a folder\n-            self.assertEqual(self.home.meta_type, \'ATFolder\')\n-            self.assertEqual(self.home.portal_type, \'Folder\')\n+            self.assertEqual(self.home.meta_type, "ATFolder")\n+            self.assertEqual(self.home.portal_type, "Folder")\n \n     def testMemberareaIsOwnedByMember(self):\n         if self.membership.memberareaCreationFlag is True:\n@@ -832,24 +815,24 @@ def testMemberareaIsOwnedByMember(self):\n                 owner_info = self.home.getOwnerTuple()\n             except AttributeError:\n                 owner_info = self.home.getOwner(info=1)\n-            self.assertEqual(owner_info[0], [PLONE_SITE_ID, \'acl_users\'])\n-            self.assertEqual(owner_info[1], \'user2\')\n+            self.assertEqual(owner_info[0], [PLONE_SITE_ID, "acl_users"])\n+            self.assertEqual(owner_info[1], "user2")\n             self.assertEqual(len(self.home.get_local_roles()), 1)\n-            self.assertEqual(self.home.get_local_roles_for_userid(\'user2\'),\n-                             (\'Owner\',))\n+            self.assertEqual(self.home.get_local_roles_for_userid("user2"), ("Owner",))\n \n     def testMemberareaIsCataloged(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Memberarea should be cataloged\n             catalog = self.portal.portal_catalog\n-            self.assertTrue(catalog(id=\'user2\', Type=\'Folder\', Title="user2"),\n-                            "Could not find user2\'s home folder in the "\n-                            "catalog")\n+            self.assertTrue(\n+                catalog(id="user2", Type="Folder", Title="user2"),\n+                "Could not find user2\'s home folder in the " "catalog",\n+            )\n \n     def testHomePageNotExists(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Should not have an index_html document anymore\n-            self.assertFalse(\'index_html\' in self.home)\n+            self.assertFalse("index_html" in self.home)\n \n \n class TestSearchForMembers(unittest.TestCase):\n@@ -857,81 +840,90 @@ class TestSearchForMembers(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         # Don\'t let default_user disturb results\n         self.portal.acl_users._doDelUsers([TEST_USER_ID])\n         # Add some members\n-        self.addMember(\'fred\', \'Fred Flintstone\',\n-                       \'fred@bedrock.com\', [\'Member\', \'Reviewer\'],\n-                       \'2002-01-01\')\n-        self.addMember(\'barney\', \'Barney Rubble\',\n-                       \'barney@bedrock.com\', [\'Member\'],\n-                       \'2002-01-01\')\n-        self.addMember(\'brubble\', \'Bambam Rubble\',\n-                       \'bambam@bambam.net\', [\'Member\'],\n-                       \'2003-12-31\')\n+        self.addMember(\n+            "fred",\n+            "Fred Flintstone",\n+            "fred@bedrock.com",\n+            ["Member", "Reviewer"],\n+            "2002-01-01",\n+        )\n+        self.addMember(\n+            "barney", "Barney Rubble", "barney@bedrock.com", ["Member"], "2002-01-01"\n+        )\n+        self.addMember(\n+            "brubble", "Bambam Rubble", "bambam@bambam.net", ["Member"], "2003-12-31"\n+        )\n         # MUST reset this\n         self.memberdata._v_temps = None\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        member.setMemberProperties(\n+            {\n+                "fullname": fullname,\n+                "email": email,\n+                "last_login_time": DateTime(last_login_time),\n+            }\n+        )\n \n     def testSearchById(self):\n         # Should search id and fullname\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'brubble\')), 0)\n-        self.assertEqual(len(search(name=\'barney\')), 1)\n-        self.assertEqual(len(search(name=\'rubble\')), 2)\n+        self.assertEqual(len(search(name="brubble")), 0)\n+        self.assertEqual(len(search(name="barney")), 1)\n+        self.assertEqual(len(search(name="rubble")), 2)\n \n     def testSearchByName(self):\n         # Should search id and fullname\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'rubble\')), 2)\n-        self.assertEqual(len(search(name=\'stone\')), 1)\n+        self.assertEqual(len(search(name="rubble")), 2)\n+        self.assertEqual(len(search(name="stone")), 1)\n \n     def testSearchByEmail(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(email=\'bedrock\')), 2)\n-        self.assertEqual(len(search(email=\'bambam\')), 1)\n+        self.assertEqual(len(search(email="bedrock")), 2)\n+        self.assertEqual(len(search(email="bambam")), 1)\n \n     def testSearchByRoles(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(roles=[\'Member\'])), 3)\n-        self.assertEqual(len(search(roles=[\'Reviewer\'])), 1)\n+        self.assertEqual(len(search(roles=["Member"])), 3)\n+        self.assertEqual(len(search(roles=["Reviewer"])), 1)\n \n     def testSearchByNameAndEmail(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'rubble\', email=\'bedrock\')), 1)\n-        self.assertEqual(len(search(name=\'bambam\', email=\'bedrock\')), 0)\n+        self.assertEqual(len(search(name="rubble", email="bedrock")), 1)\n+        self.assertEqual(len(search(name="bambam", email="bedrock")), 0)\n \n     def testSearchByNameAndRoles(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'fred\', roles=[\'Reviewer\'])), 1)\n-        self.assertEqual(len(search(name=\'fred\', roles=[\'Manager\'])), 0)\n+        self.assertEqual(len(search(name="fred", roles=["Reviewer"])), 1)\n+        self.assertEqual(len(search(name="fred", roles=["Manager"])), 0)\n \n     def testSearchByEmailAndRoles(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(email=\'fred\', roles=[\'Reviewer\'])), 1)\n-        self.assertEqual(len(search(email=\'fred\', roles=[\'Manager\'])), 0)\n+        self.assertEqual(len(search(email="fred", roles=["Reviewer"])), 1)\n+        self.assertEqual(len(search(email="fred", roles=["Manager"])), 0)\n \n     def testSearchByRequestObj(self):\n         search = self.membership.searchForMembers\n-        self.addMember(u\'j\xc3\xbcrgen\', u\'J\xc3\xbcrgen Internationalist\',\n-                       \'juergen@example.com\', [\'Member\'],\n-                       \'2014-02-03\')\n+        self.addMember(\n+            "j\xc3\xbcrgen",\n+            "J\xc3\xbcrgen Internationalist",\n+            "juergen@example.com",\n+            ["Member"],\n+            "2014-02-03",\n+        )\n \n-        self.assertEqual(\n-            len(search(REQUEST=dict(name=u\'j\xc3\xbcrgen\'))), 1)\n+        self.assertEqual(len(search(REQUEST=dict(name="j\xc3\xbcrgen"))), 1)\n \n-        self.assertEqual(\n-            len(search(REQUEST=dict(name=\'j\xc3\xbcrgen\'))), 1)\n+        self.assertEqual(len(search(REQUEST=dict(name="j\xc3\xbcrgen"))), 1)\n \n \n class TestDefaultUserAndPasswordNotChanged(unittest.TestCase):\n@@ -940,16 +932,14 @@ class TestDefaultUserAndPasswordNotChanged(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n \n     def testDefaultUserAndPasswordUnchanged(self):\n         member = self.membership.getAuthenticatedMember()\n         self.assertEqual(member.getUserName(), TEST_USER_NAME)\n-        self.assertTrue(\n-            self.membership.testCurrentPassword(TEST_USER_PASSWORD)\n-        )\n-        self.assertFalse(self.membership.testCurrentPassword(\'geheim\'))\n+        self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n+        self.assertFalse(self.membership.testCurrentPassword("geheim"))\n \n \n class TestMethodProtection(unittest.TestCase):\n@@ -959,14 +949,14 @@ class TestMethodProtection(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     _unprotected = (\n-        \'changeMemberPortrait\',\n-        \'deletePersonalPortrait\',\n-        \'testCurrentPassword\',\n-        \'searchForMembers\',\n+        "changeMemberPortrait",\n+        "deletePersonalPortrait",\n+        "testCurrentPassword",\n+        "searchForMembers",\n     )\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n \n     def assertUnprotected(self, object, method):\n@@ -978,12 +968,15 @@ def assertProtected(self, object, method):\n         self.assertRaises(Unauthorized, object.restrictedTraverse, method)\n \n     for method in _unprotected:\n-        exec ("def testUnprotected_%s(self):" \\\n-             "    self.assertProtected(self.membership, \'%s\')" \\\n-             % (method, method))\n+        exec(\n+            "def testUnprotected_%s(self):"\n+            "    self.assertProtected(self.membership, \'%s\')" % (method, method)\n+        )\n \n-        exec ("def testMemberAccessible_%s(self):" \\\n-             "    self.membership.restrictedTraverse(\'%s\')" % (method, method))\n+        exec(\n+            "def testMemberAccessible_%s(self):"\n+            "    self.membership.restrictedTraverse(\'%s\')" % (method, method)\n+        )\n \n \n class TestMemberInfoView(unittest.TestCase):\n@@ -991,76 +984,82 @@ class TestMemberInfoView(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.view = PASMemberView(self.portal, self.portal.REQUEST)\n \n     def testMemberInfoViewForAuthenticated(self):\n         member = self.membership.getAuthenticatedMember()\n-        member.setMemberProperties({\'fullname\': \'Test user\'})\n+        member.setMemberProperties({"fullname": "Test user"})\n         info = self.view.info()\n-        self.assertEqual(info[\'username\'], \'test-user\')\n-        self.assertEqual(info[\'fullname\'], \'Test user\')\n-        self.assertEqual(info[\'name_or_id\'], \'Test user\')\n+        self.assertEqual(info["username"], "test-user")\n+        self.assertEqual(info["fullname"], "Test user")\n+        self.assertEqual(info["name_or_id"], "Test user")\n \n     def testGetMemberInfoViewForMember(self):\n         self.membership.addMember(\n-            \'user2\', \'secret\', [\'Member\'], [],\n-            properties={\'fullname\': \'Second user\',\n-                        \'home_page\': \'http://maurits.vanrees.org\'})\n-        info = self.view.info(\'user2\')\n-        self.assertEqual(info[\'username\'], \'user2\')\n-        self.assertEqual(info[\'fullname\'], \'Second user\')\n-        self.assertEqual(info[\'name_or_id\'], \'Second user\')\n-        self.assertEqual(info[\'home_page\'], \'http://maurits.vanrees.org\')\n+            "user2",\n+            "secret",\n+            ["Member"],\n+            [],\n+            properties={\n+                "fullname": "Second user",\n+                "home_page": "http://maurits.vanrees.org",\n+            },\n+        )\n+        info = self.view.info("user2")\n+        self.assertEqual(info["username"], "user2")\n+        self.assertEqual(info["fullname"], "Second user")\n+        self.assertEqual(info["name_or_id"], "Second user")\n+        self.assertEqual(info["home_page"], "http://maurits.vanrees.org")\n \n     def testGetMemberInfoViewForNonMember(self):\n         # When content is owned by a user who has meanwhile been\n         # removed, we do not want to throw an exception when asking\n         # for his member info.\n-        self.assertFalse(self.membership.getMemberById(\'charon\'))\n-        info = self.view.info(\'charon\')\n-        self.assertEqual(info[\'username\'], \'charon\')\n-        self.assertEqual(info[\'fullname\'], \'\')\n-        self.assertEqual(info[\'name_or_id\'], \'charon\')\n+        self.assertFalse(self.membership.getMemberById("charon"))\n+        info = self.view.info("charon")\n+        self.assertEqual(info["username"], "charon")\n+        self.assertEqual(info["fullname"], "")\n+        self.assertEqual(info["name_or_id"], "charon")\n \n     def testGetMemberInfoViewForAnonymous(self):\n         logout()\n         self.assertTrue(self.membership.isAnonymousUser())\n         info = self.view.info()\n-        self.assertEqual(info[\'username\'], \'Anonymous User\')\n-        self.assertEqual(info[\'fullname\'], \'\')\n-        self.assertEqual(info[\'name_or_id\'], \'Anonymous User\')\n+        self.assertEqual(info["username"], "Anonymous User")\n+        self.assertEqual(info["fullname"], "")\n+        self.assertEqual(info["name_or_id"], "Anonymous User")\n \n     def testGetMemberInfoViewHomePageInternal(self):\n         self.membership.addMember(\n-            \'user4\', \'secret\', [\'Member\'], [],\n-            properties={\'home_page\': \'internal_page\'})\n-        info = self.view.info(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'internal_page\')\n+            "user4", "secret", ["Member"], [], properties={"home_page": "internal_page"}\n+        )\n+        info = self.view.info("user4")\n+        self.assertEqual(info.get("home_page"), "internal_page")\n \n     def testGetMemberInfoViewHomePageBad(self):\n         self.membership.addMember(\n-            \'user4\', \'secret\', [\'Member\'], [],\n-            properties={\'home_page\': \'javascript:alert("hello")\'})\n-        info = self.view.info(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'\')\n+            "user4",\n+            "secret",\n+            ["Member"],\n+            [],\n+            properties={"home_page": \'javascript:alert("hello")\'},\n+        )\n+        info = self.view.info("user4")\n+        self.assertEqual(info.get("home_page"), "")\n \n     def testSetGroupsWithUserNameIdDifference(self):\n-        pas = self.portal[\'acl_users\']\n-        self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n+        pas = self.portal["acl_users"]\n+        self.portal.portal_groups.addGroup("Editors", [], [])\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=["Editors"])\n         login(self.portal, TEST_USER_NAME)\n         user = getSecurityManager().getUser()\n-        self.assertTrue(\n-            \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\n-        )\n+        self.assertTrue("Editors" in getGroupsForPrincipal(user, pas["plugins"]))\n \n     def testSetGroupsWithSameUserNameAndId(self):\n-        pas = self.portal[\'acl_users\']\n-        self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n+        pas = self.portal["acl_users"]\n+        self.portal.portal_groups.addGroup("Editors", [], [])\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=["Editors"])\n         user = getSecurityManager().getUser()\n-        self.assertTrue(\n-            \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\n-        )\n+        self.assertTrue("Editors" in getGroupsForPrincipal(user, pas["plugins"]))\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex 8ec6fc43..9ba8d06d 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -15,183 +15,193 @@ class PropertiesTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_user_properties(self):\n-        mt = getToolByName(self.portal, \'portal_membership\')\n-        md = getToolByName(self.portal, \'portal_memberdata\')\n+        mt = getToolByName(self.portal, "portal_membership")\n+        md = getToolByName(self.portal, "portal_memberdata")\n \n         # Create a new Member\n-        mt.addMember(\'user1\', \'u1\', [\'Member\'], [],\n-                     {\'email\': \'user1@host.com\',\n-                      \'fullname\': \'User #1\'})\n-        member = mt.getMemberById(\'user1\')\n+        mt.addMember(\n+            "user1",\n+            "u1",\n+            ["Member"],\n+            [],\n+            {"email": "user1@host.com", "fullname": "User #1"},\n+        )\n+        member = mt.getMemberById("user1")\n         self.assertFalse(member is None)\n \n         # Assert user doesn\'t have the property yet\n-        self.assertFalse(member.hasProperty(\'age\'))\n+        self.assertFalse(member.hasProperty("age"))\n \n         # Add new property\n-        md.manage_addProperty(\'age\', 20, \'int\')\n+        md.manage_addProperty("age", 20, "int")\n \n         # Assert user has the property now\n-        self.assertTrue(member.hasProperty(\'age\'))\n+        self.assertTrue(member.hasProperty("age"))\n \n         # Get the property, should have the default value\n-        got = member.getProperty(\'age\', None)\n+        got = member.getProperty("age", None)\n         expected = 20\n         self.assertEqual(got, expected)\n \n         # get a handle on the member\n-        member = mt.getMemberById(\'user1\')\n+        member = mt.getMemberById("user1")\n \n         # Set some member properties. Needs to be logged in as the user.\n-        login(self.portal, \'user1\')\n-        member.setMemberProperties({\'age\': 30, \'fullname\': \'User #1 Is Cool\',\n-                                    \'email\': \'user1@anotherhost.qa\'})\n+        login(self.portal, "user1")\n+        member.setMemberProperties(\n+            {"age": 30, "fullname": "User #1 Is Cool", "email": "user1@anotherhost.qa"}\n+        )\n \n         # Check the properties have been set\n-        got = member.getProperty(\'age\', None)\n+        got = member.getProperty("age", None)\n         expected = 30\n         self.assertEqual(got, expected)\n \n-        got = member.getProperty(\'fullname\', None)\n-        expected = \'User #1 Is Cool\'\n+        got = member.getProperty("fullname", None)\n+        expected = "User #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = member.getProperty(\'email\', None)\n-        expected = \'user1@anotherhost.qa\'\n+        got = member.getProperty("email", None)\n+        expected = "user1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n         # Delete the property\n-        md.manage_delProperties(ids=(\'age\',))\n+        md.manage_delProperties(ids=("age",))\n \n         # re-get the member to reflect the new memberdata schema\n-        member = mt.getMemberById(\'user1\')\n+        member = mt.getMemberById("user1")\n \n         # Assert property is gone\n-        self.assertFalse(member.hasProperty(\'age\'))\n+        self.assertFalse(member.hasProperty("age"))\n \n         # Get the property, should return default (None)\n-        got = member.getProperty(\'age\', None)\n+        got = member.getProperty("age", None)\n         expected = None\n         self.assertEqual(got, expected)\n \n         # Other properties should still be there.\n-        got = member.getProperty(\'fullname\', None)\n-        expected = \'User #1 Is Cool\'\n+        got = member.getProperty("fullname", None)\n+        expected = "User #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = member.getProperty(\'email\', None)\n-        expected = \'user1@anotherhost.qa\'\n+        got = member.getProperty("email", None)\n+        expected = "user1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n     def test_group_properties(self):\n-        gt = getToolByName(self.portal, \'portal_groups\')\n-        gd = getToolByName(self.portal, \'portal_groupdata\')\n+        gt = getToolByName(self.portal, "portal_groups")\n+        gd = getToolByName(self.portal, "portal_groupdata")\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # Create a new Group\n         gt.addGroup(\n-            \'group1\',\n-            [\'Reviewer\'],\n+            "group1",\n+            ["Reviewer"],\n             [],\n-            {\'email\': \'group1@host.com\', \'title\': \'Group #1\'}\n+            {"email": "group1@host.com", "title": "Group #1"},\n         )\n-        group = gt.getGroupById(\'group1\')\n+        group = gt.getGroupById("group1")\n         self.assertFalse(group is None)\n \n         # Assert group doesn\'t have the property yet\n-        self.assertFalse(group.hasProperty(\'karma\'))\n+        self.assertFalse(group.hasProperty("karma"))\n \n         # Add new property\n-        gd.manage_addProperty(\'karma\', 20, \'int\')\n+        gd.manage_addProperty("karma", 20, "int")\n \n         # get group again to re-create with new groupdata schema\n-        group = gt.getGroupById(\'group1\')\n+        group = gt.getGroupById("group1")\n \n         # Assert group has the property now\n-        self.assertTrue(group.hasProperty(\'karma\'))\n+        self.assertTrue(group.hasProperty("karma"))\n \n         # Get the property, should have the default value\n-        got = group.getProperty(\'karma\', None)\n+        got = group.getProperty("karma", None)\n         expected = 20\n \n         self.assertEqual(got, expected)\n \n         # Set some group properties\n-        group.setGroupProperties({\'karma\': 30, \'title\': \'Group #1 Is Cool\',\n-                                  \'email\': \'group1@anotherhost.qa\'})\n+        group.setGroupProperties(\n+            {"karma": 30, "title": "Group #1 Is Cool", "email": "group1@anotherhost.qa"}\n+        )\n \n         # Check the properties have been set\n-        got = group.getProperty(\'karma\', None)\n+        got = group.getProperty("karma", None)\n         expected = 30\n         self.assertEqual(got, expected)\n \n-        got = group.getProperty(\'title\', None)\n-        expected = \'Group #1 Is Cool\'\n+        got = group.getProperty("title", None)\n+        expected = "Group #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = group.getProperty(\'email\', None)\n-        expected = \'group1@anotherhost.qa\'\n+        got = group.getProperty("email", None)\n+        expected = "group1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n         # Delete the property\n-        gd.manage_delProperties(ids=(\'karma\',))\n+        gd.manage_delProperties(ids=("karma",))\n \n         # get group again to re-create with new groupdata schema\n-        group = gt.getGroupById(\'group1\')\n+        group = gt.getGroupById("group1")\n \n         # Assert property is gone\n-        self.assertFalse(group.hasProperty(\'karma\'))\n+        self.assertFalse(group.hasProperty("karma"))\n \n         # Get the property, should return default (None)\n-        got = group.getProperty(\'karma\', None)\n+        got = group.getProperty("karma", None)\n         expected = None\n         self.assertEqual(got, expected)\n \n         # Other properties should still be there.\n-        got = group.getProperty(\'title\', None)\n-        expected = \'Group #1 Is Cool\'\n+        got = group.getProperty("title", None)\n+        expected = "Group #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = group.getProperty(\'email\', None)\n-        expected = \'group1@anotherhost.qa\'\n+        got = group.getProperty("email", None)\n+        expected = "group1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n     def test_schema_for_mutable_property_provider(self):\n-        """Add a schema to a ZODBMutablePropertyProvider.\n-        """\n+        """Add a schema to a ZODBMutablePropertyProvider."""\n \n         # Schema is list of tuples with name, type (string), value.\n         # From the types it seems only \'lines\' is handled differently.\n         address_schema = [\n-            (\'addresses\', \'lines\', [\'Here\', \'There\']),\n-            (\'city\', \'str\', \'Somewhere\'),\n-            (\'telephone\', \'int\', 1234567),\n+            ("addresses", "lines", ["Here", "There"]),\n+            ("city", "str", "Somewhere"),\n+            ("telephone", "int", 1234567),\n         ]\n \n         # This used to give a ValueError, so we just check that it\n         # does not.\n         provider = ZODBMutablePropertyProvider(\n-            \'address_plugin\', "Address Plugin", schema=address_schema)\n+            "address_plugin", "Address Plugin", schema=address_schema\n+        )\n \n         # When this test passes, we are happy already, but let\'s add a\n         # few more basic tests.\n \n         # Create a new Member\n-        mt = getToolByName(self.portal, \'portal_membership\')\n-        mt.addMember(\'user1\', \'u1\', [\'Member\'], [],\n-                     {\'email\': \'user1@host.com\',\n-                      \'fullname\': \'User #1\'})\n-        member = mt.getMemberById(\'user1\')\n+        mt = getToolByName(self.portal, "portal_membership")\n+        mt.addMember(\n+            "user1",\n+            "u1",\n+            ["Member"],\n+            [],\n+            {"email": "user1@host.com", "fullname": "User #1"},\n+        )\n+        member = mt.getMemberById("user1")\n         sheet = provider.getPropertiesForUser(member)\n+        self.assertEqual(sheet.propertyIds(), ["addresses", "city", "telephone"])\n         self.assertEqual(\n-            sheet.propertyIds(), [\'addresses\', \'city\', \'telephone\'])\n-        self.assertEqual(sheet.propertyInfo(\'city\'),\n-                         {\'type\': \'str\', \'id\': \'city\', \'mode\': \'\'})\n-        self.assertEqual(sheet.getProperty(\'addresses\'), (\'Here\', \'There\'))\n+            sheet.propertyInfo("city"), {"type": "str", "id": "city", "mode": ""}\n+        )\n+        self.assertEqual(sheet.getProperty("addresses"), ("Here", "There"))\n \n \n class PropertySearchTest(unittest.TestCase):\n@@ -199,48 +209,47 @@ class PropertySearchTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.mt = getToolByName(self.portal, \'portal_membership\')\n-        self.md = getToolByName(self.portal, \'portal_memberdata\')\n-        self.gt = getToolByName(self.portal, \'portal_groups\')\n+        self.portal = self.layer["portal"]\n+        self.mt = getToolByName(self.portal, "portal_membership")\n+        self.md = getToolByName(self.portal, "portal_memberdata")\n+        self.gt = getToolByName(self.portal, "portal_groups")\n \n         # Create a new Member\n         self.mt.addMember(\n-            \'member1\',\n-            \'pw\',\n-            [\'Member\'],\n+            "member1",\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'member1@host.com\', \'title\': \'Member #1\'}\n+            {"email": "member1@host.com", "title": "Member #1"},\n         )\n-        member = self.mt.getMemberById(\'member1\')\n+        member = self.mt.getMemberById("member1")\n         self.assertFalse(member is None)\n \n         self.mt.addMember(\n-            \'member2\',\n-            \'pw\',\n-            [\'Member\'],\n+            "member2",\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'user2@otherhost.com\', \'fullname\': \'User #2\'}\n+            {"email": "user2@otherhost.com", "fullname": "User #2"},\n         )\n-        member = self.mt.getMemberById(\'member2\')\n+        member = self.mt.getMemberById("member2")\n         self.assertFalse(member is None)\n \n         # Add a Group to make sure searchUsers isn\'t returning them in results.\n-        self.gt.addGroup(\'group1\', title="Group 1")\n-        group = self.gt.getGroupById(\'group1\')\n+        self.gt.addGroup("group1", title="Group 1")\n+        group = self.gt.getGroupById("group1")\n         self.assertFalse(group is None)\n \n         self.pas = getToolByName(self.portal, "acl_users")\n-        for plugin in self.pas.plugins \\\n-                          .getAllPlugins(\'IUserEnumerationPlugin\')[\'active\']:\n-            if plugin != \'mutable_properties\':\n-                self.pas.plugins.deactivatePlugin(IUserEnumerationPlugin,\n-                                                  plugin)\n+        for plugin in self.pas.plugins.getAllPlugins("IUserEnumerationPlugin")[\n+            "active"\n+        ]:\n+            if plugin != "mutable_properties":\n+                self.pas.plugins.deactivatePlugin(IUserEnumerationPlugin, plugin)\n \n     def testPluginActivated(self):\n-        plugins = self.pas.plugins \\\n-                      .getAllPlugins(\'IUserEnumerationPlugin\')[\'active\']\n-        self.assertEqual(plugins, (\'mutable_properties\',))\n+        plugins = self.pas.plugins.getAllPlugins("IUserEnumerationPlugin")["active"]\n+        self.assertEqual(plugins, ("mutable_properties",))\n \n     def testEmptySearch(self):\n         results = self.pas.searchUsers()\n@@ -250,52 +259,47 @@ def testInexactStringSearch(self):\n         results = self.pas.searchUsers(email="something@somewhere.tld")\n         self.assertEqual(results, ())\n \n-        results = self.pas.searchUsers(email="member1@host.com",\n-                                       exact_match=False)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\'])\n+        results = self.pas.searchUsers(email="member1@host.com", exact_match=False)\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1"])\n \n         results = self.pas.searchUsers(email="@host.com", exact_match=False)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\'])\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1"])\n \n-        results = self.pas.searchUsers(email="member1@host.com",\n-                                       exact_match=True)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\'])\n+        results = self.pas.searchUsers(email="member1@host.com", exact_match=True)\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1"])\n \n         results = self.pas.searchUsers(email="@host.com", exact_match=True)\n-        results = [info[\'userid\'] for info in results]\n+        results = [info["userid"] for info in results]\n         self.assertEqual(results, [])\n \n     def testBooleanSearch(self):\n         results = self.pas.searchUsers(visible_ids=True)\n-        results = [info[\'userid\'] for info in results]\n+        results = [info["userid"] for info in results]\n         self.assertEqual(results, [])\n \n         results = self.pas.searchUsers(visible_ids=False)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\', \'member2\'])\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1", "member2"])\n \n     def testGroupsNotReturnedByEnumerateUsers(self):\n         """Check to make sure that groups aren\'t returned by a enumerateUsers\n-           call.\n-           See http://dev.plone.org/plone/ticket/9435"""\n+        call.\n+        See http://dev.plone.org/plone/ticket/9435"""\n         results = self.pas.searchUsers()\n-        resultIds = [a[\'id\'] for a in results]\n-        self.assertFalse(\'group1\' in resultIds)\n+        resultIds = [a["id"] for a in results]\n+        self.assertFalse("group1" in resultIds)\n \n     def testSearchEmptyId(self):\n-        self.assertEqual(self.pas.mutable_properties.enumerateUsers(id=\'\'), ())\n-        self.assertEqual(\n-            self.pas.mutable_properties.enumerateUsers(login=\'\'),\n-            ()\n-        )\n+        self.assertEqual(self.pas.mutable_properties.enumerateUsers(id=""), ())\n+        self.assertEqual(self.pas.mutable_properties.enumerateUsers(login=""), ())\n \n     def testCantSearchByIdOrLogin(self):\n         # we can\'t search by id\n-        results = self.pas.searchUsers(id=\'member1\')\n+        results = self.pas.searchUsers(id="member1")\n         self.assertEqual(results, ())\n         # or login\n-        results = self.pas.searchUsers(login=\'member1\')\n+        results = self.pas.searchUsers(login="member1")\n         self.assertEqual(results, ())\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex fbdc6319..db3dd292 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -17,7 +17,6 @@\n \n @implementer(IGroupsPlugin)\n class FauxGroupsPlugin(BasePlugin):\n-\n     def getGroupsForPrincipal(self, principal, request=None):\n         return principal._groups\n \n@@ -30,14 +29,15 @@ class GroupAwareRoleManagerTests(unittest.TestCase):\n     def _getTargetClass(self):\n \n         from Products.PlonePAS.plugins.role import GroupAwareRoleManager\n+\n         return GroupAwareRoleManager\n \n-    def _makeOne(self, id=\'test\', *args, **kw):\n+    def _makeOne(self, id="test", *args, **kw):\n \n         plugin = self._getTargetClass()(id=id, *args, **kw)\n         # We need to bind a fake request to this plugin\n         request, dummy_response = makeRequestAndResponse()\n-        setattr(plugin, \'REQUEST\', request)\n+        setattr(plugin, "REQUEST", request)\n         return plugin\n \n     def test_roles_for_control_panel(self):\n@@ -52,37 +52,37 @@ def test_roles_for_control_panel(self):\n \n         # Add a minimal PluginRegistry with a mock IGroupsPlugin, because the\n         # roles plugin depends on it:\n-        root._setObject(\'plugins\', PluginRegistry(_PLUGIN_TYPE_INFO))\n-        root._setObject(\'groups\', FauxGroupsPlugin())\n-        root[\'plugins\'].activatePlugin(IGroupsPlugin, \'groups\')\n+        root._setObject("plugins", PluginRegistry(_PLUGIN_TYPE_INFO))\n+        root._setObject("groups", FauxGroupsPlugin())\n+        root["plugins"].activatePlugin(IGroupsPlugin, "groups")\n \n-        garm = self._makeOne(\'garm\').__of__(root)\n+        garm = self._makeOne("garm").__of__(root)\n \n         # 2 roles\n-        garm.addRole(\'foo_role\')\n-        garm.addRole(\'bar_role\')\n+        garm.addRole("foo_role")\n+        garm.addRole("bar_role")\n \n         # Group \'somegroup\' has \'bar_role\'\n-        garm.assignRoleToPrincipal(\'bar_role\', \'somegroup\')\n+        garm.assignRoleToPrincipal("bar_role", "somegroup")\n \n         # \'johndoe\' has \'foo_role\'\n-        johndoe = DummyUser(\'johndoe\', (\'somegroup\',))\n-        garm.assignRoleToPrincipal(\'foo_role\', \'johndoe\')\n+        johndoe = DummyUser("johndoe", ("somegroup",))\n+        garm.assignRoleToPrincipal("foo_role", "johndoe")\n \n         # \'johndoe\' should have \'foo_role\' and \'bar_roles\'\n         got = garm.getRolesForPrincipal(johndoe)\n-        expected = [\'foo_role\', \'bar_role\']\n+        expected = ["foo_role", "bar_role"]\n         self.assertEqual(set(got), set(expected))\n \n         # For the users control panel, johndoe has only the \'foo_role\'\n-        garm.REQUEST.set(\'__ignore_group_roles__\', True)\n+        garm.REQUEST.set("__ignore_group_roles__", True)\n         got = garm.getRolesForPrincipal(johndoe)\n-        self.assertEqual(got, (\'foo_role\',))\n+        self.assertEqual(got, ("foo_role",))\n \n         # Confirm we can get only the inherited roles\n-        garm.REQUEST.set(\'__ignore_group_roles__\', False)\n-        garm.REQUEST.set(\'__ignore_direct_roles__\', True)\n+        garm.REQUEST.set("__ignore_group_roles__", False)\n+        garm.REQUEST.set("__ignore_direct_roles__", True)\n         got = garm.getRolesForPrincipal(johndoe)\n-        self.assertEqual(got, (\'bar_role\',))\n+        self.assertEqual(got, ("bar_role",))\n \n         return\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex d43a2865..c83bf26f 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -72,7 +72,7 @@ def test_zope_root_cookie_login(self):\n         The Zope root `/acl_users` cookie login works.\n         """\n         # Install the GenericSetup profile that performs the actual switch\n-        pa_testing.applyProfile(self.portal, \'Products.PlonePAS:root-cookie\')\n+        pa_testing.applyProfile(self.portal, "Products.PlonePAS:root-cookie")\n         transaction.commit()\n \n         # Make the cookie plugin the default auth challenge\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex e4c62ca2..8f4f4648 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -9,16 +9,29 @@ class TestPASSearchView(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def test_sort(self):\n-        self.portal = self.layer[\'portal\']\n-        pas_search = self.portal.restrictedTraverse(\'@@pas_search\')\n-        values = [{\'title\': u\'Sociologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n-                  {\'title\': u\'anthropologie\'}]\n-        sorted_values = pas_search.sort(values, \'title\')\n+        self.portal = self.layer["portal"]\n+        pas_search = self.portal.restrictedTraverse("@@pas_search")\n+        values = [\n+            {"title": "Sociologie"},\n+            {"title": "\xc3\x89conomie"},\n+            {"title": "anthropologie"},\n+        ]\n+        sorted_values = pas_search.sort(values, "title")\n         # do not modify original\n-        self.assertEqual(values,\n-                         [{\'title\': u\'Sociologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n-                          {\'title\': u\'anthropologie\'}])\n+        self.assertEqual(\n+            values,\n+            [\n+                {"title": "Sociologie"},\n+                {"title": "\xc3\x89conomie"},\n+                {"title": "anthropologie"},\n+            ],\n+        )\n         # sorted here\n-        self.assertEqual(sorted_values,\n-                         [{\'title\': u\'anthropologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n-                          {\'title\': u\'Sociologie\'}])\n+        self.assertEqual(\n+            sorted_values,\n+            [\n+                {"title": "anthropologie"},\n+                {"title": "\xc3\x89conomie"},\n+                {"title": "Sociologie"},\n+            ],\n+        )\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 856ba725..aa670736 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -33,7 +33,7 @@\n import six\n \n \n-logger = logging.getLogger(\'PlonePAS\')\n+logger = logging.getLogger("PlonePAS")\n _marker = object()\n \n \n@@ -47,19 +47,19 @@ class GroupDataTool(UniqueObject, SimpleItem, PropertyManager):\n     properties.\n     """\n \n-    id = \'portal_groupdata\'\n+    id = "portal_groupdata"\n     meta_type = "PlonePAS GroupData Tool"\n-    toolicon = \'tool.gif\'\n+    toolicon = "tool.gif"\n \n     _v_temps = None\n-    _properties = ({\'id\': \'title\', \'type\': \'string\', \'mode\': \'wd\'},)\n+    _properties = ({"id": "title", "type": "string", "mode": "wd"},)\n     security = ClassSecurityInfo()\n \n     def __init__(self):\n         self._members = OOBTree()\n         # Create the default properties.\n-        self._setProperty(\'description\', \'\', \'text\')\n-        self._setProperty(\'email\', \'\', \'string\')\n+        self._setProperty("description", "", "text")\n+        self._setProperty("email", "", "string")\n \n     def wrapGroup(self, g):\n         """Returns an object implementing the GroupData interface."""\n@@ -77,7 +77,7 @@ def wrapGroup(self, g):\n                 portal_group = GroupData(base, gid)\n                 if temps is None:\n                     self._v_temps = {gid: portal_group}\n-                    if hasattr(self, \'REQUEST\'):\n+                    if hasattr(self, "REQUEST"):\n                         self.REQUEST._hold(CleanupTemp(self))\n                 else:\n                     temps[gid] = portal_group\n@@ -89,17 +89,17 @@ def wrapGroup(self, g):\n \n     @security.private\n     def registerGroupData(self, g, id):\n-        \'\'\'\n+        """\n         Adds the given member data to the _members dict.\n         This is done as late as possible to avoid side effect\n         transactions and to reduce the necessary number of\n         entries.\n-        \'\'\'\n+        """\n         self._members[id] = aq_base(g)\n \n \n InitializeClass(GroupDataTool)\n-registerToolInterface(\'portal_groupdata\', IGroupDataTool)\n+registerToolInterface("portal_groupdata", IGroupDataTool)\n \n \n @implementer(IGroupData, IManageCapabilities)\n@@ -116,20 +116,22 @@ def __init__(self, tool, id):\n         # The reference will be removed by notifyModified().\n         self._tool = tool\n \n-    def _getGRUF(self,):\n+    def _getGRUF(\n+        self,\n+    ):\n         return self.acl_users\n \n     @security.private\n     def notifyModified(self):\n         # Links self to parent for full persistence.\n-        tool = getattr(self, \'_tool\', None)\n+        tool = getattr(self, "_tool", None)\n         if tool is not None:\n             del self._tool\n             tool.registerGroupData(self, self.getId())\n \n     @security.public\n     def getGroup(self):\n-        """ Returns the actual group implementation. Varies by group\n+        """Returns the actual group implementation. Varies by group\n         implementation (GRUF/Nux/et al). In GRUF this is a user object."""\n         # The user object is our context, but it\'s possible for\n         # restricted code to strip context while retaining\n@@ -137,7 +139,7 @@ def getGroup(self):\n         parent = aq_parent(self)\n         bcontext = aq_base(parent)\n         bcontainer = aq_base(aq_parent(aq_inner(self)))\n-        if bcontext is bcontainer or not hasattr(bcontext, \'getUserName\'):\n+        if bcontext is bcontainer or not hasattr(bcontext, "getUserName"):\n             raise GroupDataError("Can\'t find group data")\n         # Return the user object, which is our context.\n         return parent\n@@ -222,14 +224,14 @@ def canAdministrateGroup(self):\n         """\n         user = getSecurityManager().getUser()\n         tool = self.getTool()\n-        portal = getToolByName(tool, \'portal_url\').getPortalObject()\n+        portal = getToolByName(tool, "portal_url").getPortalObject()\n \n         # Has manager users pemission?\n         if user.has_permission(Permissions.manage_users, portal):\n             return True\n \n         # Is explicitly mentioned as a group administrator?\n-        managers = self.getProperty(\'delegated_group_member_managers\', ())\n+        managers = self.getProperty("delegated_group_member_managers", ())\n         if user.getId() in managers:\n             return True\n \n@@ -250,7 +252,7 @@ def canAdministrateGroup(self):\n     @security.public\n     @postonly\n     def addMember(self, id, REQUEST=None):\n-        """ Add the existing member with the given id to the group"""\n+        """Add the existing member with the given id to the group"""\n         if not self.canAdministrateGroup():\n             raise Unauthorized("You cannot add a member to the group.")\n \n@@ -266,8 +268,7 @@ def addMember(self, id, REQUEST=None):\n     @security.public\n     @postonly\n     def removeMember(self, id, REQUEST=None):\n-        """Remove the member with the provided id from the group.\n-        """\n+        """Remove the member with the provided id from the group."""\n         if not self.canAdministrateGroup():\n             raise Unauthorized("You cannot remove a member from the group.")\n \n@@ -292,8 +293,7 @@ def setProperties(self, properties=None, **kw):\n \n     @security.protected(Permissions.manage_users)\n     def setGroupProperties(self, mapping):\n-        """PAS-specific method to set the properties of a group.\n-        """\n+        """PAS-specific method to set the properties of a group."""\n         sheets = None\n \n         if not IPluggableAuthService.providedBy(self.acl_users):\n@@ -303,7 +303,7 @@ def setGroupProperties(self, mapping):\n         else:\n             # It\'s a PAS! Whee!\n             group = self.getGroup()\n-            sheets = getattr(group, \'getOrderedPropertySheets\', lambda: [])()\n+            sheets = getattr(group, "getOrderedPropertySheets", lambda: [])()\n \n             # We won\'t always have PlonePAS groups, due to acquisition,\n             # nor are guaranteed property sheets\n@@ -324,14 +324,14 @@ def setGroupProperties(self, mapping):\n                     sheet.setProperty(group, k, v)\n                     modified = True\n                 else:\n-                    raise RuntimeError("Mutable property provider "\n-                                       "shadowed by read only provider")\n+                    raise RuntimeError(\n+                        "Mutable property provider " "shadowed by read only provider"\n+                    )\n         if modified:\n             self.notifyModified()\n \n     def _gruf_setGroupProperties(self, mapping):\n-        \'\'\'Sets the properties of the member.\n-        \'\'\'\n+        """Sets the properties of the member."""\n         # Sets the properties given in the MemberDataTool.\n         tool = self.getTool()\n         for id in tool.propertyIds():\n@@ -339,7 +339,7 @@ def _gruf_setGroupProperties(self, mapping):\n                 if id not in self.__class__.__dict__:\n                     value = mapping[id]\n                     if isinstance(value, str):\n-                        proptype = tool.getPropertyType(id) or \'string\'\n+                        proptype = tool.getPropertyType(id) or "string"\n                         if proptype in type_converters:\n                             value = type_converters[proptype](value)\n                     setattr(self, id, value)\n@@ -349,8 +349,8 @@ def _gruf_setGroupProperties(self, mapping):\n \n     @security.public\n     def getProperties(self):\n-        """ Return the properties of this group. Properties are as usual\n-            in Zope.\n+        """Return the properties of this group. Properties are as usual\n+        in Zope.\n         """\n         tool = self.getTool()\n         ret = {}\n@@ -368,7 +368,7 @@ def getProperty(self, id, default=None):\n         through the ordered property sheets.\n         """\n         group = self.getGroup()\n-        sheets = getattr(group, \'getOrderedPropertySheets\', lambda: [])()\n+        sheets = getattr(group, "getOrderedPropertySheets", lambda: [])()\n \n         # If we made this far, we found a PAS and some property sheets.\n         for sheet in sheets:\n@@ -425,14 +425,13 @@ def getGroupId(self):\n \n     def getGroupTitleOrName(self):\n         """Get the Title property of the group. If there is none\n-        then return the name """\n-        title = self.getProperty(\'title\', None)\n+        then return the name"""\n+        title = self.getProperty("title", None)\n         return title or self.getGroupName()\n \n     @security.public\n     def getMemberId(self):\n-        """This exists only for a basic user/group API compatibility\n-        """\n+        """This exists only for a basic user/group API compatibility"""\n         return self.getGroupId()\n \n     @security.public\n@@ -460,25 +459,25 @@ def has_role(self, roles, object=None):\n \n     def getUserName(self):\n         return self.getName()\n+\n     getUserNameWithoutGroupPrefix = getUserName\n \n     # IManageCapabilities methods\n     def canDelete(self):\n-        """True iff user can be removed from the Plone UI.\n-        """\n+        """True iff user can be removed from the Plone UI."""\n         # IGroupManagement provides removeGroup\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IGroupManagement)\n         if managers:\n             for mid, manager in managers:\n-                if (IDeleteCapability.providedBy(manager) and\n-                        manager.allowDeletePrincipal(self.getId())):\n+                if IDeleteCapability.providedBy(\n+                    manager\n+                ) and manager.allowDeletePrincipal(self.getId()):\n                     return True\n         return False\n \n     def canPasswordSet(self):\n-        """Always false for groups, which have no password.\n-        """\n+        """Always false for groups, which have no password."""\n         return False\n \n     def passwordInClear(self):\n@@ -490,7 +489,7 @@ def passwordInClear(self):\n         return False\n \n     def _groupdataHasProperty(self, prop_name):\n-        gdata = getToolByName(self, \'portal_groupdata\', None)\n+        gdata = getToolByName(self, "portal_groupdata", None)\n         if gdata:\n             return gdata.hasProperty(prop_name)\n         return 0\n@@ -506,7 +505,7 @@ def canWriteProperty(self, prop_name):\n         else:\n             # it\'s PAS\n             group = self.getGroup()\n-            sheets = getattr(group, \'getOrderedPropertySheets\', lambda: [])()\n+            sheets = getattr(group, "getOrderedPropertySheets", lambda: [])()\n             for sheet in sheets:\n                 if not sheet.hasProperty(prop_name):\n                     continue\n@@ -532,4 +531,5 @@ def canWriteProperty(self, prop_name):\n     def _getPlugins(self):\n         return self.acl_users.plugins\n \n+\n InitializeClass(GroupData)\ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 67b05e62..9448a3b8 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -29,7 +29,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'PluggableAuthService\')\n+logger = logging.getLogger("PluggableAuthService")\n \n \n class NotSupported(Exception):\n@@ -38,16 +38,16 @@ class NotSupported(Exception):\n \n @implementer(igroup.IGroupTool)\n class GroupsTool(UniqueObject, SimpleItem):\n-    """ This tool accesses group data through a acl_users object.\n+    """This tool accesses group data through a acl_users object.\n \n     It can be replaced with something that groups member data in a\n     different way.\n     """\n \n-    id = \'portal_groups\'\n-    meta_type = \'PlonePAS Groups Tool\'\n+    id = "portal_groups"\n+    meta_type = "PlonePAS Groups Tool"\n     security = ClassSecurityInfo()\n-    toolicon = \'tool.gif\'\n+    toolicon = "tool.gif"\n \n     ##\n     # basic group mgmt\n@@ -55,8 +55,9 @@ class GroupsTool(UniqueObject, SimpleItem):\n \n     @security.protected(AddGroups)\n     @postonly\n-    def addGroup(self, id, roles=[], groups=[], properties=None,\n-                 REQUEST=None, *args, **kw):\n+    def addGroup(\n+        self, id, roles=[], groups=[], properties=None, REQUEST=None, *args, **kw\n+    ):\n         """Create a group, with the supplied id, roles, and domains.\n \n         Underlying user folder must support adding users via the usual\n@@ -76,10 +77,11 @@ def addGroup(self, id, roles=[], groups=[], properties=None,\n             return 0\n \n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n         for mid, manager in managers:\n-            success = manager.addGroup(id, title=kw.get(\'title\', id),\n-                                       description=kw.get(\'description\', \'\'))\n+            success = manager.addGroup(\n+                id, title=kw.get("title", id), description=kw.get("description", "")\n+            )\n             if success:\n                 self.setRolesForGroup(id, roles)\n                 for g in groups:\n@@ -94,8 +96,7 @@ def addGroup(self, id, roles=[], groups=[], properties=None,\n \n     @security.protected(ManageGroups)\n     @postonly\n-    def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n-                  *args, **kw):\n+    def editGroup(self, id, roles=None, groups=None, REQUEST=None, *args, **kw):\n         """Edit the given group with the supplied roles.\n \n         Passwords for groups seem to be irrelevant.\n@@ -105,20 +106,19 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n         """\n         g = self.getGroupById(id)\n         if not g:\n-            raise KeyError(\'Trying to edit a non-existing group: %s\' % id)\n+            raise KeyError("Trying to edit a non-existing group: %s" % id)\n \n         # Update title/description properties of original group\n         gTools = self._getGroupTools()\n         if not gTools:\n-            raise NotSupported(\'No plugins allow for both group management \'\n-                               \'and introspection\')\n+            raise NotSupported(\n+                "No plugins allow for both group management " "and introspection"\n+            )\n \n         for tid, tool in gTools:\n             if id in tool.getGroupIds():\n                 tool.updateGroup(\n-                    id,\n-                    title=kw.get(\'title\'),\n-                    description=kw.get(\'description\')\n+                    id, title=kw.get("title"), description=kw.get("description")\n                 )\n                 break\n \n@@ -132,7 +132,7 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n             p_groups = set(self.getGroupsForPrincipal(g))\n             rmgroups = p_groups - groupset\n             for gid in rmgroups:\n-                if gid != \'AuthenticatedUsers\':\n+                if gid != "AuthenticatedUsers":\n                     self.removePrincipalFromGroup(g, gid)\n \n             # add groups\n@@ -141,7 +141,7 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n                     igroup.IGroupManagement\n                 )\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-                logger.exception(\'Plugin listing error\')\n+                logger.exception("Plugin listing error")\n                 groupmanagers = ()\n \n             for group in groups:\n@@ -150,19 +150,16 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n                         if gm.addPrincipalToGroup(id, group):\n                             break\n                     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-                        logger.exception(\n-                            \'AuthenticationPlugin {0} error\'.format(gm_id)\n-                        )\n+                        logger.exception("AuthenticationPlugin {0} error".format(gm_id))\n \n     @security.protected(DeleteGroups)\n     @postonly\n     def removeGroup(self, group_id, REQUEST=None):\n-        """Remove a single group.\n-        """\n+        """Remove a single group."""\n         retval = False\n         managers = self._getGroupManagers()\n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n \n         for mid, manager in managers:\n             if manager.removeGroup(group_id):\n@@ -174,8 +171,7 @@ def removeGroup(self, group_id, REQUEST=None):\n     @security.protected(DeleteGroups)\n     @postonly\n     def removeGroups(self, ids, REQUEST=None):\n-        """Remove the group in the provided list (if possible).\n-        """\n+        """Remove the group in the provided list (if possible)."""\n         for gid in ids:\n             self.removeGroup(gid)\n \n@@ -185,7 +181,7 @@ def setRolesForGroup(self, group_id, roles=(), REQUEST=None):\n         rmanagers = self._getPlugins().listPlugins(IRoleAssignerPlugin)\n         if not (rmanagers):\n             raise NotImplementedError(\n-                \'There is no plugin that can assign roles to groups\'\n+                "There is no plugin that can assign roles to groups"\n             )\n         for rid, rmanager in rmanagers:\n             rmanager.assignRolesToPrincipal(roles, group_id)\n@@ -199,7 +195,7 @@ def setRolesForGroup(self, group_id, roles=(), REQUEST=None):\n     def addPrincipalToGroup(self, principal_id, group_id, REQUEST=None):\n         managers = self._getGroupManagers()\n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n         for mid, manager in managers:\n             if manager.addPrincipalToGroup(principal_id, group_id):\n                 return True\n@@ -210,7 +206,7 @@ def addPrincipalToGroup(self, principal_id, group_id, REQUEST=None):\n     def removePrincipalFromGroup(self, principal_id, group_id, REQUEST=None):\n         managers = self._getGroupManagers()\n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n         for mid, manager in managers:\n             if manager.removePrincipalFromGroup(principal_id, group_id):\n                 return True\n@@ -254,8 +250,8 @@ def searchForGroups(self, REQUEST={}, **kw):\n         else:\n             dict = kw\n \n-        name = dict.get(\'name\', None)\n-        title_or_name = dict.get(\'title_or_name\', None)\n+        name = dict.get("name", None)\n+        title_or_name = dict.get("title_or_name", None)\n         if name:\n             name = name.strip().lower()\n         if name is not None:\n@@ -284,9 +280,9 @@ def searchForGroups(self, REQUEST={}, **kw):\n             for groupid in md_groups:\n                 groups.append(getGroupById(groupid))\n             for group in uf_groups:\n-                groupid = group[\'groupid\']\n+                groupid = group["groupid"]\n                 if groupid in md_groups:\n-                    continue             # Kill dupes\n+                    continue  # Kill dupes\n                 groups.append(getGroupById(groupid))\n \n         return groups\n@@ -333,23 +329,20 @@ def _getPlugins(self):\n \n     @security.private\n     def _getGroupManagers(self):\n-        return self._getPlugins().listPlugins(\n-            igroup.IGroupManagement\n-        )\n+        return self._getPlugins().listPlugins(igroup.IGroupManagement)\n \n     @security.private\n     def _getGroupIntrospectors(self):\n-        return self._getPlugins().listPlugins(\n-            igroup.IGroupIntrospection\n-        )\n+        return self._getPlugins().listPlugins(igroup.IGroupIntrospection)\n \n     @security.private\n     def _getGroupTools(self):\n-        managers = self._getPlugins().listPlugins(\n-            igroup.IGroupManagement\n-        )\n-        return [(id, manager) for (id, manager) in managers\n-                if igroup.IGroupIntrospection.providedBy(manager)]\n+        managers = self._getPlugins().listPlugins(igroup.IGroupManagement)\n+        return [\n+            (id, manager)\n+            for (id, manager) in managers\n+            if igroup.IGroupIntrospection.providedBy(manager)\n+        ]\n \n     ##\n     # BBB\n@@ -365,8 +358,10 @@ def getGroupInfo(self, groupId):\n         if group is None:\n             return None\n \n-        groupinfo = {\'title\': group.getProperty(\'title\'),\n-                     \'description\': group.getProperty(\'description\')}\n+        groupinfo = {\n+            "title": group.getProperty("title"),\n+            "description": group.getProperty("description"),\n+        }\n \n         return groupinfo\n \n@@ -406,43 +401,43 @@ def setGroupOwnership(self, group, object, REQUEST=None):\n         For GRUF this is easy. Others may have to re-implement."""\n         user = group.getGroup()\n         if user is None:\n-            raise ValueError("Invalid group: \'%s\'." % (group, ))\n+            raise ValueError("Invalid group: \'%s\'." % (group,))\n         object.changeOwnership(user)\n-        object.manage_setLocalRoles(user.getId(), [\'Owner\'])\n+        object.manage_setLocalRoles(user.getId(), ["Owner"])\n \n     @security.private\n     def wrapGroup(self, g, wrap_anon=0):\n-        \'\'\' Sets up the correct acquisition wrappers for a group\n+        """Sets up the correct acquisition wrappers for a group\n         object and provides an opportunity for a portal_memberdata\n         tool to retrieve and store member data independently of\n         the user object.\n-        \'\'\'\n-        b = getattr(g, \'aq_base\', None)\n+        """\n+        b = getattr(g, "aq_base", None)\n         if b is None:\n             # u isn\'t wrapped at all.  Wrap it in self.acl_users.\n             b = g\n             g = g.__of__(self.acl_users)\n-        if (b is nobody and not wrap_anon) or hasattr(b, \'getMemberId\'):\n+        if (b is nobody and not wrap_anon) or hasattr(b, "getMemberId"):\n             # This user is either not recognized by acl_users or it is\n             # already registered with something that implements the\n             # member data tool at least partially.\n             return g\n \n         parent = aq_parent(aq_inner(self))\n-        base = getattr(parent, \'aq_base\', None)\n-        if hasattr(base, \'portal_groupdata\'):\n+        base = getattr(parent, "aq_base", None)\n+        if hasattr(base, "portal_groupdata"):\n             # Get portal_groupdata to do the wrapping.\n-            gd = getToolByName(parent, \'portal_groupdata\')\n+            gd = getToolByName(parent, "portal_groupdata")\n             try:\n                 portal_group = gd.wrapGroup(g)\n                 return portal_group\n             except ConflictError:\n                 raise\n             except:\n-                logger.exception(\'Error during wrapGroup\')\n+                logger.exception("Error during wrapGroup")\n         # Failed.\n         return g\n \n \n InitializeClass(GroupsTool)\n-registerToolInterface(\'portal_groups\', igroup.IGroupTool)\n+registerToolInterface("portal_groups", igroup.IGroupTool)\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex cc07e14d..9d1fe0dc 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -32,41 +32,40 @@\n \n @implementer(IMemberDataTool)\n class MemberDataTool(BaseTool):\n-    """PAS-specific implementation of memberdata tool.\n-    """\n+    """PAS-specific implementation of memberdata tool."""\n \n     meta_type = "PlonePAS MemberData Tool"\n     security = ClassSecurityInfo()\n-    toolicon = \'tool.gif\'\n+    toolicon = "tool.gif"\n \n     def __init__(self):\n         BaseTool.__init__(self)\n-        self.portraits = BTreeFolder2(id=\'portraits\')\n+        self.portraits = BTreeFolder2(id="portraits")\n \n     def _getPortrait(self, member_id):\n-        "return member_id\'s portrait if you can "\n+        "return member_id\'s portrait if you can"\n         return self.portraits.get(member_id, None)\n \n     def _setPortrait(self, portrait, member_id):\n-        " store portrait which must be a raw image in _portrais "\n+        "store portrait which must be a raw image in _portrais"\n         if member_id in self.portraits:\n             self.portraits._delObject(member_id)\n         self.portraits._setObject(id=member_id, object=portrait)\n \n     def _deletePortrait(self, member_id):\n-        " remove member_id\'s portrait "\n+        "remove member_id\'s portrait"\n         if member_id in self.portraits:\n             self.portraits._delObject(member_id)\n \n     @security.private\n     def pruneMemberDataContents(self):\n-        \'\'\'\n+        """\n         Compare the user IDs stored in the member data\n         tool with the list in the actual underlying acl_users\n         and delete anything not in acl_users\n-        \'\'\'\n+        """\n         BaseTool.pruneMemberDataContents(self)\n-        membertool = getToolByName(self, \'portal_membership\')\n+        membertool = getToolByName(self, "portal_membership")\n         portraits = self.portraits\n         user_list = membertool.listMemberIds()\n \n@@ -77,10 +76,10 @@ def pruneMemberDataContents(self):\n \n     @security.protected(ManagePortal)\n     def purgeMemberDataContents(self):\n-        \'\'\'\n+        """\n         Delete ALL MemberData information. This is required for us as we change\n         the MemberData class.\n-        \'\'\'\n+        """\n         members = self._members\n \n         for tuple in members.items():\n@@ -90,9 +89,10 @@ def purgeMemberDataContents(self):\n         return "Done."\n \n     @security.private\n-    def updateMemberDataContents(self,):\n-        """Update former MemberData objects to new MemberData objects\n-        """\n+    def updateMemberDataContents(\n+        self,\n+    ):\n+        """Update former MemberData objects to new MemberData objects"""\n         count = 0\n         members = self._members\n         properties = self.propertyIds()\n@@ -101,7 +101,7 @@ def updateMemberDataContents(self,):\n         for member_name, member_obj in members.items():\n             values = {}\n             if getattr(member_obj, "_is_new_kind", None):\n-                continue        # Do not have to upgrade that object\n+                continue  # Do not have to upgrade that object\n \n             # Have to upgrade. Create the values mapping.\n             for pty_name in properties:\n@@ -112,7 +112,7 @@ def updateMemberDataContents(self,):\n             # Wrap a new user object of the RIGHT class\n             u = self.acl_users.getUserById(member_name, None)\n             if not u:\n-                continue                # User is not in main acl_users anymore\n+                continue  # User is not in main acl_users anymore\n             self.wrapUser(u)\n \n             # Set its properties\n@@ -136,10 +136,10 @@ def searchMemberDataContents(self, search_param, search_term):\n \n         search_term = search_term.strip().lower()\n \n-        if search_param == \'username\':\n-            search_param = \'id\'\n+        if search_param == "username":\n+            search_param = "id"\n \n-        mtool = getToolByName(self, \'portal_membership\')\n+        mtool = getToolByName(self, "portal_membership")\n \n         for member_id in self._members.keys():\n             user_wrapper = mtool.getMemberById(member_id)\n@@ -151,8 +151,12 @@ def searchMemberDataContents(self, search_param, search_term):\n                 if searched is not None:\n                     if searched.strip().lower().find(search_term) != -1:\n \n-                        res.append({\'username\': memberProperty(\'id\'),\n-                                    \'email\': memberProperty(\'email\', \'\')})\n+                        res.append(\n+                            {\n+                                "username": memberProperty("id"),\n+                                "email": memberProperty("email", ""),\n+                            }\n+                        )\n         return res\n \n     @security.public\n@@ -164,14 +168,16 @@ def searchFulltextForMembers(self, s):\n         # Search for members which do have string \'s\' in name, email or full\n         # name (if defined).  This is mainly used for the localrole form.\n         s = s.strip().lower()\n-        mu = getToolByName(self, \'portal_membership\')\n+        mu = getToolByName(self, "portal_membership")\n \n         res = []\n         for member in mu.listMembers():\n             u = member.getUser()\n-            if u.getUserName().lower().find(s) != -1 \\\n-               or member.getProperty(\'fullname\').lower().find(s) != -1 \\\n-               or member.getProperty(\'email\').lower().find(s) != -1:\n+            if (\n+                u.getUserName().lower().find(s) != -1\n+                or member.getProperty("fullname").lower().find(s) != -1\n+                or member.getProperty("email").lower().find(s) != -1\n+            ):\n                 res.append(member)\n         return res\n \n@@ -179,10 +185,12 @@ def searchFulltextForMembers(self, s):\n     # so we do not write on read\n     def canAddMemberData(self):\n         try:\n-            if self.REQUEST.REQUEST_METHOD != \'POST\':\n+            if self.REQUEST.REQUEST_METHOD != "POST":\n                 return False\n-            if getattr(self, \'_p_jar\', None) and \\\n-                    len(self._p_jar._registered_objects) > 0:\n+            if (\n+                getattr(self, "_p_jar", None)\n+                and len(self._p_jar._registered_objects) > 0\n+            ):\n                 # XXX do not write on read\n                 return True\n         except AttributeError:\n@@ -191,8 +199,7 @@ def canAddMemberData(self):\n \n     @postonly\n     def deleteMemberData(self, member_id, REQUEST=None):\n-        """ Delete member data of specified member.\n-        """\n+        """Delete member data of specified member."""\n         if IPluggableAuthService.providedBy(self.acl_users):\n             # It\'s a PAS! Whee!\n             # XXX: can we safely assume that user name == member_id\n@@ -248,7 +255,7 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):\n         else:\n             # It\'s a PAS! Whee!\n             user = self.getUser()\n-            sheets = getattr(user, \'getOrderedPropertySheets\', lambda: None)()\n+            sheets = getattr(user, "getOrderedPropertySheets", lambda: None)()\n \n             # We won\'t always have PlonePAS users, due to acquisition,\n             # nor are guaranteed property sheets\n@@ -277,7 +284,7 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):\n \n         # Trigger PropertiesUpdated event when member properties are updated,\n         # excluding user login events\n-        if not set(mapping.keys()) & set((\'login_time\', \'last_login_time\')):\n+        if not set(mapping.keys()) & set(("login_time", "last_login_time")):\n             notify(PropertiesUpdated(self, mapping))\n \n     def getProperty(self, id, default=_marker):\n@@ -290,7 +297,7 @@ def getProperty(self, id, default=_marker):\n         else:\n             # It\'s a PAS! Whee!\n             user = self.getUser()\n-            sheets = getattr(user, \'getOrderedPropertySheets\', lambda: None)()\n+            sheets = getattr(user, "getOrderedPropertySheets", lambda: None)()\n \n             # we won\'t always have PlonePAS users, due to acquisition,\n             # nor are guaranteed property sheets\n@@ -301,7 +308,7 @@ def getProperty(self, id, default=_marker):\n                     # Zope users don\'t have PropertySheets,\n                     # return an empty string for them if the property\n                     # doesn\'t exists.\n-                    return \'\'\n+                    return ""\n \n         # If we made this far, we found a PAS and some property sheets.\n         for sheet in sheets:\n@@ -314,7 +321,7 @@ def getProperty(self, id, default=_marker):\n                     # unicode. This is sub-optimal and should be\n                     # dealed with at the property sheets level by\n                     # using Zope\'s converters.\n-                    return value.encode(\'utf-8\')\n+                    return value.encode("utf-8")\n                 return value\n \n         # Couldn\'t find the property in the property sheets. Try to\n@@ -323,8 +330,7 @@ def getProperty(self, id, default=_marker):\n \n     @security.public\n     def hasProperty(self, propname):\n-        """Does the member have the given property?\n-        """\n+        """Does the member have the given property?"""\n         # Unfortunately, checking for a marker value does not work well:\n         # You get a ValueError when the property does not exist.\n         try:\n@@ -344,8 +350,9 @@ def canDelete(self):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IUserManagement)\n         for mid, manager in managers:\n-            if (IDeleteCapability.providedBy(manager) and\n-                    manager.allowDeletePrincipal(self.getId())):\n+            if IDeleteCapability.providedBy(manager) and manager.allowDeletePrincipal(\n+                self.getId()\n+            ):\n                 return True\n         return False\n \n@@ -355,8 +362,9 @@ def canPasswordSet(self):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IUserManagement)\n         for mid, manager in managers:\n-            if (IPasswordSetCapability.providedBy(manager) and\n-                    manager.allowPasswordSet(self.getId())):\n+            if IPasswordSetCapability.providedBy(manager) and manager.allowPasswordSet(\n+                self.getId()\n+            ):\n                 return True\n         return False\n \n@@ -369,7 +377,7 @@ def passwordInClear(self):\n         return 0\n \n     def _memberdataHasProperty(self, prop_name):\n-        mdata = getToolByName(self, \'portal_memberdata\', None)\n+        mdata = getToolByName(self, "portal_memberdata", None)\n         if mdata:\n             return mdata.hasProperty(prop_name)\n         return 0\n@@ -384,7 +392,7 @@ def canWriteProperty(self, prop_name):\n         else:\n             # it\'s PAS\n             user = self.getUser()\n-            sheets = getattr(user, \'getOrderedPropertySheets\', lambda: None)()\n+            sheets = getattr(user, "getOrderedPropertySheets", lambda: None)()\n             if not sheets:\n                 return self._memberdataHasProperty(prop_name)\n \n@@ -394,7 +402,7 @@ def canWriteProperty(self, prop_name):\n                 if IMutablePropertySheet.providedBy(sheet):\n                     # BBB for plugins implementing an older version of\n                     # IMutablePropertySheet\n-                    if hasattr(sheet, \'canWriteProperty\'):\n+                    if hasattr(sheet, "canWriteProperty"):\n                         return sheet.canWriteProperty(user, prop_name)\n                     return True\n                 else:\n@@ -407,8 +415,9 @@ def canAddToGroup(self, group_id):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IGroupManagement)\n         for mid, manager in managers:\n-            if (IGroupCapability.providedBy(manager) and\n-                    manager.allowGroupAdd(self.getId(), group_id)):\n+            if IGroupCapability.providedBy(manager) and manager.allowGroupAdd(\n+                self.getId(), group_id\n+            ):\n                 return True\n         return False\n \n@@ -418,8 +427,9 @@ def canRemoveFromGroup(self, group_id):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IGroupManagement)\n         for mid, manager in managers:\n-            if (IGroupCapability.providedBy(manager) and\n-                    manager.allowGroupRemove(self.getId(), group_id)):\n+            if IGroupCapability.providedBy(manager) and manager.allowGroupRemove(\n+                self.getId(), group_id\n+            ):\n                 return True\n         return False\n \n@@ -429,8 +439,9 @@ def canAssignRole(self, role_id):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IRoleAssignerPlugin)\n         for mid, manager in managers:\n-            if (IAssignRoleCapability.providedBy(manager) and\n-                    manager.allowRoleAssign(self.getId(), role_id)):\n+            if IAssignRoleCapability.providedBy(manager) and manager.allowRoleAssign(\n+                self.getId(), role_id\n+            ):\n                 return True\n         return False\n \n@@ -442,8 +453,8 @@ def setSecurityProfile(self, password=None, roles=None, domains=None):\n         # The Zope User API is stupid, it should check for None.\n         if roles is None:\n             roles = list(u.getRoles())\n-            if \'Authenticated\' in roles:\n-                roles.remove(\'Authenticated\')\n+            if "Authenticated" in roles:\n+                roles.remove("Authenticated")\n         if domains is None:\n             domains = u.getDomains()\n \ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex a5a66c9d..ae11d285 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -43,18 +43,17 @@\n import transaction\n \n \n-default_portrait = \'defaultUser.png\'\n-logger = logging.getLogger(\'PlonePAS\')\n+default_portrait = "defaultUser.png"\n+logger = logging.getLogger("PlonePAS")\n \n _marker = dict()  # type: ignore\n \n \n def _unicodify_structure(value, charset=_marker):\n-    """ Convert value to unicode.\n-    """\n+    """Convert value to unicode."""\n     if charset is _marker:\n         ptool = getUtility(IPropertiesTool)\n-        charset = ptool.getProperty(\'default_charset\', None)\n+        charset = ptool.getProperty("default_charset", None)\n \n     if isinstance(value, str):\n         return charset and safe_unicode(value, charset) or safe_unicode(value)\n@@ -71,84 +70,84 @@ def _unicodify_structure(value, charset=_marker):\n \n @implementer(membership.IMembershipTool)\n class MembershipTool(BaseTool):\n-    """PAS-based customization of MembershipTool.\n-    """\n+    """PAS-based customization of MembershipTool."""\n \n     meta_type = "PlonePAS Membership Tool"\n-    toolicon = \'tool.gif\'\n-    personal_id = \'.personal\'\n-    portrait_id = \'MyPortrait\'\n-    default_portrait = \'defaultUser.gif\'\n-    memberarea_type = \'Folder\'\n-    membersfolder_id = \'Members\'\n+    toolicon = "tool.gif"\n+    personal_id = ".personal"\n+    portrait_id = "MyPortrait"\n+    default_portrait = "defaultUser.gif"\n+    memberarea_type = "Folder"\n+    membersfolder_id = "Members"\n     memberareaCreationFlag = False\n     security = ClassSecurityInfo()\n \n-    user_search_keywords = (\'login\', \'fullname\', \'email\', \'exact_match\',\n-                            \'sort_by\', \'max_results\')\n-\n-    _properties = (getattr(BaseTool, \'_properties\', ()) +\n-                   ({\'id\': \'user_search_keywords\',\n-                     \'type\': \'lines\',\n-                     \'mode\': \'rw\',\n-                     },))\n-\n-    manage_options = (BaseTool.manage_options +\n-                      ({\'label\': \'Portraits\',\n-                        \'action\': \'manage_portrait_fix\'},))\n+    user_search_keywords = (\n+        "login",\n+        "fullname",\n+        "email",\n+        "exact_match",\n+        "sort_by",\n+        "max_results",\n+    )\n+\n+    _properties = getattr(BaseTool, "_properties", ()) + (\n+        {\n+            "id": "user_search_keywords",\n+            "type": "lines",\n+            "mode": "rw",\n+        },\n+    )\n+\n+    manage_options = BaseTool.manage_options + (\n+        {"label": "Portraits", "action": "manage_portrait_fix"},\n+    )\n \n     # TODO I\'m not quite sure why getPortalRoles is declared \'Managed\'\n     #    in CMFCore.MembershipTool - but in Plone we are not so anal ;-)\n-    security.declareProtected(View, \'getPortalRoles\')\n+    security.declareProtected(View, "getPortalRoles")\n \n-    security.declareProtected(ManagePortal, \'manage_mapRoles\')\n-    manage_mapRoles = DTMLFile(\'../zmi/membershipRolemapping\', globals())\n+    security.declareProtected(ManagePortal, "manage_mapRoles")\n+    manage_mapRoles = DTMLFile("../zmi/membershipRolemapping", globals())\n \n-    security.declareProtected(ManagePortal, \'manage_portrait_fix\')\n-    manage_portrait_fix = DTMLFile(\'../zmi/portrait_fix\', globals())\n+    security.declareProtected(ManagePortal, "manage_portrait_fix")\n+    manage_portrait_fix = DTMLFile("../zmi/portrait_fix", globals())\n \n     @security.protected(ManagePortal)\n     def manage_setMemberAreaType(self, type_name, REQUEST=None):\n-        """ ZMI method to set the home folder type by its type name.\n-        """\n+        """ZMI method to set the home folder type by its type name."""\n         self.setMemberAreaType(type_name)\n         if REQUEST is not None:\n-            REQUEST[\'RESPONSE\'].redirect(\n-                self.absolute_url() +\n-                \'/manage_mapRoles\'\n-                \'?manage_tabs_message=Member+area+type+changed.\'\n+            REQUEST["RESPONSE"].redirect(\n+                self.absolute_url() + "/manage_mapRoles"\n+                "?manage_tabs_message=Member+area+type+changed."\n             )\n \n     @security.protected(ManagePortal)\n     def manage_setMembersFolderById(self, id, REQUEST=None):\n-        """ ZMI method to set the members folder object by its id.\n-        """\n+        """ZMI method to set the members folder object by its id."""\n         self.setMembersFolderById(id)\n         if REQUEST is not None:\n-            REQUEST[\'RESPONSE\'].redirect(\n-                self.absolute_url() +\n-                \'/manage_mapRoles\'\n-                \'?manage_tabs_message=Members+folder+id+changed.\'\n+            REQUEST["RESPONSE"].redirect(\n+                self.absolute_url() + "/manage_mapRoles"\n+                "?manage_tabs_message=Members+folder+id+changed."\n             )\n \n     @security.protected(ManagePortal)\n     def setMemberAreaType(self, type_name):\n-        """ Sets the portal type to use for new home folders.\n-        """\n+        """Sets the portal type to use for new home folders."""\n         # No check for folderish since someone somewhere may actually want\n         # members to have objects instead of folders as home "directory".\n         self.memberarea_type = str(type_name).strip()\n \n     @security.protected(ManagePortal)\n-    def setMembersFolderById(self, id=\'\'):\n-        """ Set the members folder object by its id.\n-        """\n+    def setMembersFolderById(self, id=""):\n+        """Set the members folder object by its id."""\n         self.membersfolder_id = id.strip()\n \n     @security.public\n     def getMembersFolder(self):\n-        """ Get the members folder object.\n-        """\n+        """Get the members folder object."""\n         parent = aq_parent(aq_inner(self))\n         members = getattr(parent, self.membersfolder_id, None)\n         return members\n@@ -185,7 +184,7 @@ def searchForMembers(self, REQUEST=None, **kw):\n \n         Simple name searches are "fast".\n         """\n-        logger.debug(\'searchForMembers: started.\')\n+        logger.debug("searchForMembers: started.")\n \n         acl_users = getToolByName(self, "acl_users")\n \n@@ -200,21 +199,20 @@ def searchForMembers(self, REQUEST=None, **kw):\n         # While the parameter is called name it is actually used to search a\n         # users name, which is stored in the fullname property. We need to fix\n         # that here so the right name is used when calling into PAS plugins.\n-        if \'name\' in searchmap:\n-            searchmap[\'fullname\'] = searchmap[\'name\']\n-            del searchmap[\'name\']\n+        if "name" in searchmap:\n+            searchmap["fullname"] = searchmap["name"]\n+            del searchmap["name"]\n \n         user_search = dict(\n-            [x for x in searchmap.items()\n-             if x[0] in self.user_search_keywords and x[1]]\n+            [x for x in searchmap.items() if x[0] in self.user_search_keywords and x[1]]\n         )\n \n-        fullname = searchmap.get(\'fullname\', None)\n-        email = searchmap.get(\'email\', None)\n-        roles = searchmap.get(\'roles\', None)\n-        last_login_time = searchmap.get(\'last_login_time\', None)\n-        before_specified_time = searchmap.get(\'before_specified_time\', None)\n-        groupname = searchmap.get(\'groupname\', \'\').strip()\n+        fullname = searchmap.get("fullname", None)\n+        email = searchmap.get("email", None)\n+        roles = searchmap.get("roles", None)\n+        last_login_time = searchmap.get("last_login_time", None)\n+        before_specified_time = searchmap.get("before_specified_time", None)\n+        groupname = searchmap.get("groupname", "").strip()\n \n         if fullname:\n             fullname = fullname.strip().lower()\n@@ -228,10 +226,10 @@ def searchForMembers(self, REQUEST=None, **kw):\n         uf_users = []\n \n         logger.debug(\n-            \'searchForMembers: searching PAS \'\n-            \'with arguments %r.\' % user_search)\n+            "searchForMembers: searching PAS " "with arguments %r." % user_search\n+        )\n         for user in acl_users.searchUsers(**user_search):\n-            uf_users.append(user[\'userid\'])\n+            uf_users.append(user["userid"])\n \n         if not uf_users:\n             return []\n@@ -251,8 +249,9 @@ def dedupe(seq):\n \n         if not (email or fullname or roles or groupname or last_login_time):\n             logger.debug(\n-                \'searchForMembers: searching users \'\n-                \'with no extra filter, immediate return.\')\n+                "searchForMembers: searching users "\n+                "with no extra filter, immediate return."\n+            )\n             return members\n \n         # Now perform individual checks on each user\n@@ -273,11 +272,11 @@ def dedupe(seq):\n                     continue\n \n             if last_login_time:\n-                last_login = member.getProperty(\'last_login_time\', \'\')\n+                last_login = member.getProperty("last_login_time", "")\n \n                 if isinstance(last_login, six.string_types):\n                     # value is a string when member hasn\'t yet logged in\n-                    last_login = DateTime(last_login or \'2000/01/01\')\n+                    last_login = DateTime(last_login or "2000/01/01")\n \n                 if before_specified_time:\n                     if last_login >= last_login_time:\n@@ -287,7 +286,7 @@ def dedupe(seq):\n \n             res.append(member)\n \n-        logger.debug(\'searchForMembers: finished.\')\n+        logger.debug("searchForMembers: finished.")\n         return res\n \n     ############\n@@ -301,7 +300,7 @@ def createMemberarea(self, member_id=None, minimal=None):\n         """\n         if not self.getMemberareaCreationFlag():\n             return None\n-        membership = getToolByName(self, \'portal_membership\')\n+        membership = getToolByName(self, "portal_membership")\n         members = self.getMembersFolder()\n \n         if not member_id:\n@@ -310,20 +309,21 @@ def createMemberarea(self, member_id=None, minimal=None):\n             member = membership.getAuthenticatedMember()\n             member_id = member.getId()\n \n-        if hasattr(members, \'aq_explicit\'):\n+        if hasattr(members, "aq_explicit"):\n             members = members.aq_explicit\n \n         if members is None:\n             # no members area\n-            logger.debug(\'createMemberarea: members area does not exist.\')\n+            logger.debug("createMemberarea: members area does not exist.")\n             return\n \n         safe_member_id = cleanId(member_id)\n         if hasattr(members, safe_member_id):\n             # has already this member\n             logger.debug(\n-                \'createMemberarea: member area \'\n-                \'for %r already exists.\' % safe_member_id)\n+                "createMemberarea: member area "\n+                "for %r already exists." % safe_member_id\n+            )\n             return\n \n         if not safe_member_id:\n@@ -331,14 +331,13 @@ def createMemberarea(self, member_id=None, minimal=None):\n             # - A Emergency User\n             # - cleanId made a empty string out of member_id\n             logger.debug(\n-                \'createMemberarea: empty member id \'\n-                \'(%r, %r), skipping member area creation.\' %\n-                (member_id, safe_member_id)\n+                "createMemberarea: empty member id "\n+                "(%r, %r), skipping member area creation." % (member_id, safe_member_id)\n             )\n             return\n \n         # Create member area without security checks\n-        typesTool = getToolByName(members, \'portal_types\')\n+        typesTool = getToolByName(members, "portal_types")\n         fti = typesTool.getTypeInfo(self.memberarea_type)\n         member_folder = fti._constructInstance(members, safe_member_id)\n \n@@ -351,9 +350,7 @@ def createMemberarea(self, member_id=None, minimal=None):\n             user = getSecurityManager().getUser()\n             # check that we do not do something wrong\n             if user.getId() != member_id:\n-                raise NotImplementedError(\n-                    \'cannot get user for member area creation\'\n-                )\n+                raise NotImplementedError("cannot get user for member area creation")\n \n         member_object = self.getMemberById(member_id)\n \n@@ -362,19 +359,19 @@ def createMemberarea(self, member_id=None, minimal=None):\n         # Grant Ownership and Owner role to Member\n         member_folder.changeOwnership(user)\n         member_folder.__ac_local_roles__ = None\n-        member_folder.manage_setLocalRoles(member_id, [\'Owner\'])\n+        member_folder.manage_setLocalRoles(member_id, ["Owner"])\n         # We use ATCT now use the mutators\n-        fullname = member_object.getProperty(\'fullname\')\n+        fullname = member_object.getProperty("fullname")\n         member_folder.setTitle(fullname or member_id)\n         member_folder.reindexObject()\n \n         # Hook to allow doing other things after memberarea creation.\n-        notify_script = getattr(member_folder, \'notifyMemberAreaCreated\', None)\n+        notify_script = getattr(member_folder, "notifyMemberAreaCreated", None)\n         if notify_script is not None:\n             notify_script()\n \n     # deal with ridiculous API change in CMF\n-    security.declarePublic(\'createMemberArea\')\n+    security.declarePublic("createMemberArea")\n     createMemberArea = createMemberarea\n \n     @security.public\n@@ -390,28 +387,31 @@ def getMemberInfo(self, memberId=None):\n             return None\n \n         # Special handling to avoid bad home_pages, like javascript.\n-        home_page = member.getProperty(\'home_page\', \'\')\n+        home_page = member.getProperty("home_page", "")\n         if isinstance(home_page, six.string_types):\n-            if (not home_page.startswith(\'https://\') and\n-                    not home_page.startswith(\'http://\')):\n+            if not home_page.startswith("https://") and not home_page.startswith(\n+                "http://"\n+            ):\n                 # Suspicious.  But if it is internal, it is fine.\n-                urltool = getToolByName(self, \'portal_url\')\n+                urltool = getToolByName(self, "portal_url")\n                 if not urltool.isURLInPortal(home_page):\n                     # We do not trust this url, so empty it.\n                     # It may for example be javascript.\n                     logger.warn(\n-                        \'Member %s has suspicious home_page property: %s\',\n-                        memberId, home_page)\n-                    home_page = \'\'\n+                        "Member %s has suspicious home_page property: %s",\n+                        memberId,\n+                        home_page,\n+                    )\n+                    home_page = ""\n \n         memberinfo = {\n-            \'fullname\': member.getProperty(\'fullname\', \'\'),\n-            \'description\': member.getProperty(\'description\', \'\'),\n-            \'location\': member.getProperty(\'location\', \'\'),\n-            \'language\': member.getProperty(\'language\', \'\'),\n-            \'home_page\': home_page,\n-            \'username\': member.getUserName(),\n-            \'has_email\': bool(member.getProperty(\'email\')),\n+            "fullname": member.getProperty("fullname", ""),\n+            "description": member.getProperty("description", ""),\n+            "location": member.getProperty("location", ""),\n+            "language": member.getProperty("language", ""),\n+            "home_page": home_page,\n+            "username": member.getUserName(),\n+            "has_email": bool(member.getProperty("email")),\n         }\n \n         return memberinfo\n@@ -424,7 +424,7 @@ def _getSafeMemberId(self, id=None):\n \n         if id is None:\n             member = self.getAuthenticatedMember()\n-            if not hasattr(member, \'getMemberId\'):\n+            if not hasattr(member, "getMemberId"):\n                 return None\n             id = member.getMemberId()\n \n@@ -432,7 +432,7 @@ def _getSafeMemberId(self, id=None):\n \n     @security.public\n     def getHomeFolder(self, id=None, verifyPermission=0):\n-        """ Return a member\'s home folder object, or None.\n+        """Return a member\'s home folder object, or None.\n \n         Specially instrumented for URL-quoted-member-id folder\n         names.\n@@ -440,7 +440,7 @@ def getHomeFolder(self, id=None, verifyPermission=0):\n         safe_id = self._getSafeMemberId(id)\n         if safe_id is None:\n             member = self.getAuthenticatedMember()\n-            if not hasattr(member, \'getMemberId\'):\n+            if not hasattr(member, "getMemberId"):\n                 return None\n             safe_id = member.getMemberId()\n         members = self.getMembersFolder()\n@@ -457,8 +457,7 @@ def getHomeFolder(self, id=None, verifyPermission=0):\n         return None\n \n     def getHomeUrl(self, id=None, verifyPermission=0):\n-        """ Return the URL to a member\'s home folder, or None.\n-        """\n+        """Return the URL to a member\'s home folder, or None."""\n         home = self.getHomeFolder(id, verifyPermission)\n         if home is not None:\n             return home.absolute_url()\n@@ -486,33 +485,31 @@ def getPersonalPortrait(self, id=None, verifyPermission=0):\n         if not id:\n             id = self.getAuthenticatedMember().getId()\n         safe_id = self._getSafeMemberId(id)\n-        membertool = getToolByName(self, \'portal_memberdata\')\n+        membertool = getToolByName(self, "portal_memberdata")\n         portrait = membertool._getPortrait(safe_id)\n         if isinstance(portrait, str):\n             portrait = None\n         if portrait is not None:\n-            if verifyPermission and not _checkPermission(\'View\', portrait):\n+            if verifyPermission and not _checkPermission("View", portrait):\n                 # Don\'t return the portrait if the user can\'t get to it\n                 portrait = None\n         if portrait is None:\n-            portal = getToolByName(self, \'portal_url\').getPortalObject()\n+            portal = getToolByName(self, "portal_url").getPortalObject()\n             portrait = getattr(portal, default_portrait, None)\n \n         return portrait\n \n     @security.protected(SetOwnProperties)\n     def deletePersonalPortrait(self, id=None):\n-        """deletes the Portait of a member.\n-        """\n+        """deletes the Portait of a member."""\n         authenticated_id = self.getAuthenticatedMember().getId()\n         if not id:\n             id = authenticated_id\n         safe_id = self._getSafeMemberId(id)\n-        if id != authenticated_id and not _checkPermission(\n-                ManageUsers, self):\n+        if id != authenticated_id and not _checkPermission(ManageUsers, self):\n             raise Unauthorized\n \n-        membertool = getToolByName(self, \'portal_memberdata\')\n+        membertool = getToolByName(self, "portal_memberdata")\n         return membertool._deletePortrait(safe_id)\n \n     @security.protected(SetOwnProperties)\n@@ -538,33 +535,33 @@ def changeMemberPortrait(self, portrait, id=None):\n                 raise Unauthorized\n         if portrait and portrait.filename:\n             scaled, mimetype = scale_image(portrait)\n-            portrait = Image(id=safe_id, file=scaled, title=\'\')\n-            membertool = getToolByName(self, \'portal_memberdata\')\n+            portrait = Image(id=safe_id, file=scaled, title="")\n+            membertool = getToolByName(self, "portal_memberdata")\n             membertool._setPortrait(portrait, safe_id)\n \n     @security.protected(ManageUsers)\n     def listMembers(self):\n-        \'\'\'Gets the list of all members.\n+        """Gets the list of all members.\n         THIS METHOD MIGHT BE VERY EXPENSIVE ON LARGE USER FOLDERS AND MUST\n         BE USED WITH CARE! We plan to restrict its use in the future (ie.\n         force large requests to use searchForMembers instead of listMembers,\n         so that it will not be possible anymore to have a method returning\n         several hundred of users :)\n-        \'\'\'\n+        """\n         return BaseTool.listMembers(self)\n \n     @security.protected(ManageUsers)\n     def listMemberIds(self):\n-        \'\'\'Lists the ids of all members.  This may eventually be\n+        """Lists the ids of all members.  This may eventually be\n         replaced with a set of methods for querying pieces of the\n         list rather than the entire list at once.\n-        \'\'\'\n+        """\n         return self.acl_users.getUserIds()\n \n     @security.protected(SetOwnPassword)\n     def testCurrentPassword(self, password):\n-        """ test to see if password is current """\n-        REQUEST = getattr(self, \'REQUEST\', {})\n+        """test to see if password is current"""\n+        REQUEST = getattr(self, "REQUEST", {})\n         member = self.getAuthenticatedMember()\n         acl_users = self._findUsersAclHome(member.getUserId())\n         if not acl_users:\n@@ -572,14 +569,14 @@ def testCurrentPassword(self, password):\n         return acl_users.authenticate(member.getUserName(), password, REQUEST)\n \n     def _findUsersAclHome(self, userid):\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         acl_users = portal.acl_users\n         parent = acl_users\n         while parent:\n             if acl_users.aq_explicit.getUserById(userid, None) is not None:\n                 break\n             parent = aq_parent(aq_parent(aq_inner(parent)))\n-            acl_users = getattr(parent, \'acl_users\')\n+            acl_users = getattr(parent, "acl_users")\n         if parent:\n             return acl_users\n         else:\n@@ -587,16 +584,14 @@ def _findUsersAclHome(self, userid):\n \n     @security.protected(SetOwnPassword)\n     def setPassword(self, password, domains=None, REQUEST=None):\n-        \'\'\'Allows the authenticated member to set his/her own password.\n-        \'\'\'\n-        registration = getToolByName(self, \'portal_registration\', None)\n+        """Allows the authenticated member to set his/her own password."""\n+        registration = getToolByName(self, "portal_registration", None)\n         if not self.isAnonymousUser():\n             member = self.getAuthenticatedMember()\n             acl_users = self._findUsersAclHome(member.getUserId())\n             if not acl_users:\n                 # should not possibly ever happen\n-                raise BadRequest(\'did not find current user in any \'\n-                                 \'user folder\')\n+                raise BadRequest("did not find current user in any " "user folder")\n             if registration:\n                 failMessage = registration.testPasswordValidity(password)\n                 if failMessage is not None:\n@@ -607,39 +602,47 @@ def setPassword(self, password, domains=None, REQUEST=None):\n             user = acl_users.getUserById(member.getUserId(), None)\n             # we must change the users password trough grufs changepassword\n             # to keep her  group settings\n-            if hasattr(user, \'changePassword\'):\n+            if hasattr(user, "changePassword"):\n                 user.changePassword(password)\n             else:\n-                acl_users._doChangeUser(member.getUserId(), password,\n-                                        member.getRoles(), domains)\n+                acl_users._doChangeUser(\n+                    member.getUserId(), password, member.getRoles(), domains\n+                )\n             if REQUEST is None:\n-                REQUEST = aq_get(self, \'REQUEST\', None)\n+                REQUEST = aq_get(self, "REQUEST", None)\n             self.credentialsChanged(password, REQUEST=REQUEST)\n         else:\n-            raise BadRequest(\'Not logged in.\')\n+            raise BadRequest("Not logged in.")\n+\n     setPassword = postonly(setPassword)\n \n     @security.protected(View)\n     def getCandidateLocalRoles(self, obj):\n-        """ What local roles can I assign?\n-            Override the CMFCore version so that we can see the local roles on\n-            an object, and so that local managers can assign all roles locally.\n+        """What local roles can I assign?\n+        Override the CMFCore version so that we can see the local roles on\n+        an object, and so that local managers can assign all roles locally.\n         """\n         member = self.getAuthenticatedMember()\n         # Use getRolesInContext as someone may be a local manager\n-        if \'Manager\' in member.getRolesInContext(obj):\n+        if "Manager" in member.getRolesInContext(obj):\n             # Use valid_roles as we may want roles defined only on a subobject\n-            local_roles = [r for r in obj.valid_roles() if r not in\n-                           (\'Anonymous\', \'Authenticated\', \'Shared\')]\n+            local_roles = [\n+                r\n+                for r in obj.valid_roles()\n+                if r not in ("Anonymous", "Authenticated", "Shared")\n+            ]\n         else:\n-            local_roles = [role for role in member.getRolesInContext(obj)\n-                           if role not in (\'Member\', \'Authenticated\')]\n+            local_roles = [\n+                role\n+                for role in member.getRolesInContext(obj)\n+                if role not in ("Member", "Authenticated")\n+            ]\n         local_roles.sort()\n         return tuple(local_roles)\n \n     @security.protected(View)\n     def loginUser(self, REQUEST=None):\n-        """ Handle a login for the current user.\n+        """Handle a login for the current user.\n \n         This method takes care of all the standard work that needs to be\n         done when a user logs in:\n@@ -659,18 +662,18 @@ def loginUser(self, REQUEST=None):\n             event.notify(UserLoggedInEvent(user))\n \n         if REQUEST is None:\n-            REQUEST = getattr(self, \'REQUEST\', None)\n+            REQUEST = getattr(self, "REQUEST", None)\n         if REQUEST is None:\n             return\n \n         # Expire the clipboard\n-        if REQUEST.get(\'__cp\', None) is not None:\n-            REQUEST.RESPONSE.expireCookie(\'__cp\', path=\'/\')\n+        if REQUEST.get("__cp", None) is not None:\n+            REQUEST.RESPONSE.expireCookie("__cp", path="/")\n \n         self.createMemberArea()\n \n         try:\n-            pas = getToolByName(self, \'acl_users\')\n+            pas = getToolByName(self, "acl_users")\n             pas.credentials_cookie_auth.login()\n         except AttributeError:\n             # The cookie plugin may not be present\n@@ -686,7 +689,7 @@ def logoutUser(self, REQUEST=None):\n         - invalidate a Zope session if there is one\n         """\n         # Invalidate existing sessions, but only if they exist.\n-        sdm = getToolByName(self, \'session_data_manager\', None)\n+        sdm = getToolByName(self, "session_data_manager", None)\n         if sdm is not None:\n             try:\n                 # XXX This causes write on read to happen which\n@@ -701,20 +704,20 @@ def logoutUser(self, REQUEST=None):\n                 session.invalidate()\n \n         if REQUEST is None:\n-            REQUEST = getattr(self, \'REQUEST\', None)\n+            REQUEST = getattr(self, "REQUEST", None)\n         if REQUEST is not None:\n-            pas = getToolByName(self, \'acl_users\')\n+            pas = getToolByName(self, "acl_users")\n             try:\n                 pas.logout(REQUEST)\n             except Exception as e:\n-                logger.error(\'Error in PAS logout()\', exc_info=True)\n+                logger.error("Error in PAS logout()", exc_info=True)\n \n             # Expire the skin cookie if it is not configured to persist\n             st = getToolByName(self, "portal_skins")\n             skinvar = st.getRequestVarname()\n             if skinvar in REQUEST and not st.getCookiePersistence():\n-                portal = getToolByName(self, "portal_url") .getPortalObject()\n-                path = \'/\' + portal.absolute_url(1)\n+                portal = getToolByName(self, "portal_url").getPortalObject()\n+                path = "/" + portal.absolute_url(1)\n                 # XXX check if this path is sane\n                 REQUEST.RESPONSE.expireCookie(skinvar, path=path)\n \n@@ -724,36 +727,35 @@ def logoutUser(self, REQUEST=None):\n \n     @security.protected(View)\n     def immediateLogout(self):\n-        """ Log the current user out immediately.  Used by logout.py so that\n-            we do not have to do a redirect to show the logged out status. """\n+        """Log the current user out immediately.  Used by logout.py so that\n+        we do not have to do a redirect to show the logged out status."""\n         noSecurityManager()\n \n     @security.public\n     def setLoginTimes(self):\n-        """ Called by logged_in to set the login time properties\n-            even if members lack the "Set own properties" permission.\n+        """Called by logged_in to set the login time properties\n+        even if members lack the "Set own properties" permission.\n \n-            The return value indicates if this is the first logged\n-            login time.\n+        The return value indicates if this is the first logged\n+        login time.\n         """\n         res = False\n         if not self.isAnonymousUser():\n             member = self.getAuthenticatedMember()\n-            default = DateTime(\'2000/01/01\')\n-            login_time = member.getProperty(\'login_time\', default)\n+            default = DateTime("2000/01/01")\n+            login_time = member.getProperty("login_time", default)\n             if login_time == default:\n                 res = True\n                 login_time = DateTime()\n-            member.setProperties(login_time=self.ZopeTime(),\n-                                 last_login_time=login_time)\n+            member.setProperties(login_time=self.ZopeTime(), last_login_time=login_time)\n         return res\n \n     @security.protected(ManagePortal)\n     def getBadMembers(self):\n         """Will search for members with bad images in the portal_memberdata\n         delete their portraits and return their member ids"""\n-        memberdata = getToolByName(self, \'portal_memberdata\')\n-        portraits = getattr(memberdata, \'portraits\', None)\n+        memberdata = getToolByName(self, "portal_memberdata")\n+        portraits = getattr(memberdata, "portraits", None)\n         if portraits is None:\n             return []\n         bad_member_ids = []\n@@ -768,11 +770,12 @@ def getBadMembers(self):\n                 continue\n             if not HAS_PIL:\n                 raise RuntimeError(\n-                    \'No Python Imaging Libraries (PIL) found. \'\n-                    \'Unable to validate profile image. \'\n+                    "No Python Imaging Libraries (PIL) found. "\n+                    "Unable to validate profile image. "\n                 )\n             try:\n                 import PIL\n+\n                 PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\ndiff --git a/src/Products/PlonePAS/upgrades.py b/src/Products/PlonePAS/upgrades.py\nindex 45c8fd9b..db362323 100644\n--- a/src/Products/PlonePAS/upgrades.py\n+++ b/src/Products/PlonePAS/upgrades.py\n@@ -16,7 +16,7 @@ def from4to5_fix_zope_root(context):\n     Fix broken Zope root `/acl_users/` plugins.\n     """\n     root = context.getPhysicalRoot()\n-    pas = root.acl_users.manage_addProduct[\'PluggableAuthService\']\n+    pas = root.acl_users.manage_addProduct["PluggableAuthService"]\n     # Identify which interfaces should be considered PAS plugin interfaces\n     plugin_ifaces = [\n         plugin_type_info["interface"]\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 4f287dda..58cba34f 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -25,17 +25,17 @@ def cleanId(id):\n     if id:\n         # note: we provide the \'safe\' param to get \'/\' encoded\n         if isinstance(id, six.text_type):\n-            id = id.encode(\'utf-8\')\n-        return urllib.parse.quote(id, \'\').replace(\'-\', \'--\').replace(\'%\', \'-\')\n-    return \'\'\n+            id = id.encode("utf-8")\n+        return urllib.parse.quote(id, "").replace("-", "--").replace("%", "-")\n+    return ""\n \n \n def decleanId(id):\n     """Reverse cleanId."""\n     if id:\n-        id = id.replace(\'--\', \'\\x00\').replace(\'-\', \'%\').replace(\'\\x00\', \'-\')\n+        id = id.replace("--", "\\x00").replace("-", "%").replace("\\x00", "-")\n         return urllib.parse.unquote(id)\n-    return \'\'\n+    return ""\n \n \n def scale_image(image_file, max_size=None, default_format=None):\n@@ -135,9 +135,9 @@ def scale_image(image_file, max_size=None, default_format=None):\n     from PIL import Image\n \n     if max_size is None:\n-        max_size = IMAGE_SCALE_PARAMS[\'scale\']\n+        max_size = IMAGE_SCALE_PARAMS["scale"]\n     if default_format is None:\n-        default_format = IMAGE_SCALE_PARAMS[\'default_format\']\n+        default_format = IMAGE_SCALE_PARAMS["default_format"]\n     # Make sure we have ints\n     size = (int(max_size[0]), int(max_size[1]))\n     # Load up the image, don\'t try to catch errors, we want to fail miserably\n@@ -145,7 +145,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n     image = Image.open(image_file)\n     # When might image.format not be true?\n     format = image.format\n-    mimetype = \'image/%s\' % format.lower()\n+    mimetype = "image/%s" % format.lower()\n \n     # from Archetypes ImageField\n     # consider image mode when scaling\n@@ -155,19 +155,19 @@ def scale_image(image_file, max_size=None, default_format=None):\n     # for palletted-only image formats, e.g. GIF\n     # PNG compression is OK for RGBA thumbnails\n     original_mode = image.mode\n-    if original_mode == \'1\':\n-        image = image.convert(\'L\')\n-    elif original_mode == \'P\':\n-        image = image.convert(\'RGBA\')\n+    if original_mode == "1":\n+        image = image.convert("L")\n+    elif original_mode == "P":\n+        image = image.convert("RGBA")\n     # Rescale in place with an method that will not alter the aspect ratio\n     # and will only shrink the image not enlarge it.\n-    image.thumbnail(size, resample=IMAGE_SCALE_PARAMS[\'algorithm\'])\n+    image.thumbnail(size, resample=IMAGE_SCALE_PARAMS["algorithm"])\n     # preserve palletted mode for GIF and PNG\n-    if original_mode == \'P\' and format in (\'GIF\', \'PNG\'):\n-        image = image.convert(\'P\')\n+    if original_mode == "P" and format in ("GIF", "PNG"):\n+        image = image.convert("P")\n     # Save\n     new_file = BytesIO()\n-    image.save(new_file, format, quality=IMAGE_SCALE_PARAMS[\'quality\'])\n+    image.save(new_file, format, quality=IMAGE_SCALE_PARAMS["quality"])\n     new_file.seek(0)\n     # Return the file data and the new mimetype\n     return new_file, mimetype\n@@ -180,16 +180,15 @@ def getGroupsForPrincipal(principal, plugins, request=None):\n     return list(groups)\n \n \n-def safe_unicode(value, encoding=\'utf-8\'):\n-    """Converts a value to unicode, even it is already a unicode string.\n-    """\n+def safe_unicode(value, encoding="utf-8"):\n+    """Converts a value to unicode, even it is already a unicode string."""\n     if isinstance(value, six.text_type):\n         return value\n     elif isinstance(value, six.string_types):\n         try:\n             value = six.text_type(value, encoding)\n         except UnicodeDecodeError:\n-            value = value.decode(\'utf-8\', \'replace\')\n+            value = value.decode("utf-8", "replace")\n     return value\n \n \ndiff --git a/src/Products/__init__.py b/src/Products/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/src/Products/__init__.py\n+++ b/src/Products/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T13:54:06+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/c0419dea0eb5a80ae8de023fd4ef8c66145af5cc

find . -name "*.py" -exec pyupgrade --py37-plus {} +

Files changed:
M setup.py
M src/Products/PlonePAS/__init__.py
M src/Products/PlonePAS/browser/__init__.py
M src/Products/PlonePAS/browser/info.py
M src/Products/PlonePAS/browser/member.py
M src/Products/PlonePAS/browser/search.py
M src/Products/PlonePAS/config.py
M src/Products/PlonePAS/events.py
M src/Products/PlonePAS/interfaces/__init__.py
M src/Products/PlonePAS/interfaces/browser.py
M src/Products/PlonePAS/interfaces/capabilities.py
M src/Products/PlonePAS/interfaces/events.py
M src/Products/PlonePAS/interfaces/group.py
M src/Products/PlonePAS/interfaces/memberdata.py
M src/Products/PlonePAS/interfaces/membership.py
M src/Products/PlonePAS/interfaces/plugins.py
M src/Products/PlonePAS/interfaces/propertysheets.py
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/pas.py
M src/Products/PlonePAS/patch.py
M src/Products/PlonePAS/permissions.py
M src/Products/PlonePAS/plugins/__init__.py
M src/Products/PlonePAS/plugins/autogroup.py
M src/Products/PlonePAS/plugins/cookie_handler.py
M src/Products/PlonePAS/plugins/crumbler.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/tests/__init__.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/__init__.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/utils.py
M src/Products/__init__.py

b'diff --git a/setup.py b/setup.py\nindex 57e641a0..e891b3b1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \ndiff --git a/src/Products/PlonePAS/__init__.py b/src/Products/PlonePAS/__init__.py\nindex 5318033b..b517a9e1 100644\n--- a/src/Products/PlonePAS/__init__.py\n+++ b/src/Products/PlonePAS/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import add_user_folders\n from Products.CMFCore.utils import ToolInit\n from Products.PlonePAS.pas import patch_pas\ndiff --git a/src/Products/PlonePAS/browser/__init__.py b/src/Products/PlonePAS/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/browser/__init__.py\n+++ b/src/Products/PlonePAS/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/browser/info.py b/src/Products/PlonePAS/browser/info.py\nindex 0eed6d2e..04e2fc84 100644\n--- a/src/Products/PlonePAS/browser/info.py\n+++ b/src/Products/PlonePAS/browser/info.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.memoize.instance import memoize\n from Products.CMFCore.utils import getToolByName\ndiff --git a/src/Products/PlonePAS/browser/member.py b/src/Products/PlonePAS/browser/member.py\nindex c1d86d13..8559cb5a 100644\n--- a/src/Products/PlonePAS/browser/member.py\n+++ b/src/Products/PlonePAS/browser/member.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.memoize.instance import memoize\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.interfaces.browser import IPASMemberView\ndiff --git a/src/Products/PlonePAS/browser/search.py b/src/Products/PlonePAS/browser/search.py\nindex 13395670..2f529e39 100644\n--- a/src/Products/PlonePAS/browser/search.py\n+++ b/src/Products/PlonePAS/browser/search.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\ndiff --git a/src/Products/PlonePAS/config.py b/src/Products/PlonePAS/config.py\nindex a1fc4a4e..6f3c1115 100644\n--- a/src/Products/PlonePAS/config.py\n+++ b/src/Products/PlonePAS/config.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n PROJECTNAME = "PlonePAS"\n GLOBALS = globals()\n \ndiff --git a/src/Products/PlonePAS/events.py b/src/Products/PlonePAS/events.py\nindex 79c24331..d614a0ee 100644\n--- a/src/Products/PlonePAS/events.py\n+++ b/src/Products/PlonePAS/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PlonePAS.interfaces.events import IUserInitialLoginInEvent\n from Products.PluggableAuthService.events import PASEvent\n from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent\ndiff --git a/src/Products/PlonePAS/interfaces/__init__.py b/src/Products/PlonePAS/interfaces/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/interfaces/__init__.py\n+++ b/src/Products/PlonePAS/interfaces/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/interfaces/browser.py b/src/Products/PlonePAS/interfaces/browser.py\nindex bfc77e3a..b01c8bc7 100644\n--- a/src/Products/PlonePAS/interfaces/browser.py\n+++ b/src/Products/PlonePAS/interfaces/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/src/Products/PlonePAS/interfaces/capabilities.py b/src/Products/PlonePAS/interfaces/capabilities.py\nindex 92b12860..49a86fcf 100644\n--- a/src/Products/PlonePAS/interfaces/capabilities.py\n+++ b/src/Products/PlonePAS/interfaces/capabilities.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Define certain interfaces that a plugin must meet if it is to allow\n # certain operations to be done by the Plone UI.\n from Products.PluggableAuthService.interfaces.plugins import Interface\ndiff --git a/src/Products/PlonePAS/interfaces/events.py b/src/Products/PlonePAS/interfaces/events.py\nindex e6d54e92..b1598542 100644\n--- a/src/Products/PlonePAS/interfaces/events.py\n+++ b/src/Products/PlonePAS/interfaces/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent\n \n \ndiff --git a/src/Products/PlonePAS/interfaces/group.py b/src/Products/PlonePAS/interfaces/group.py\nindex dbe2cbc5..739f453f 100644\n--- a/src/Products/PlonePAS/interfaces/group.py\n+++ b/src/Products/PlonePAS/interfaces/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces import plugins\n from zope.interface import Interface\n \ndiff --git a/src/Products/PlonePAS/interfaces/memberdata.py b/src/Products/PlonePAS/interfaces/memberdata.py\nindex 18b2e0e1..f26287a9 100644\n--- a/src/Products/PlonePAS/interfaces/memberdata.py\n+++ b/src/Products/PlonePAS/interfaces/memberdata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore import interfaces\n \n \ndiff --git a/src/Products/PlonePAS/interfaces/membership.py b/src/Products/PlonePAS/interfaces/membership.py\nindex a67de5aa..ea57ab81 100644\n--- a/src/Products/PlonePAS/interfaces/membership.py\n+++ b/src/Products/PlonePAS/interfaces/membership.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore import interfaces\n \n \ndiff --git a/src/Products/PlonePAS/interfaces/plugins.py b/src/Products/PlonePAS/interfaces/plugins.py\nindex 785448b2..cdecb9b1 100644\n--- a/src/Products/PlonePAS/interfaces/plugins.py\n+++ b/src/Products/PlonePAS/interfaces/plugins.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces import plugins\n from Products.PluggableAuthService.interfaces.plugins import Interface\n \ndiff --git a/src/Products/PlonePAS/interfaces/propertysheets.py b/src/Products/PlonePAS/interfaces/propertysheets.py\nindex 723ac6e0..878641e7 100644\n--- a/src/Products/PlonePAS/interfaces/propertysheets.py\n+++ b/src/Products/PlonePAS/interfaces/propertysheets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces.propertysheets import IPropertySheet\n \n \ndiff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex 13761999..885ba372 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PlonePAS.patch import call\n from Products.PlonePAS.patch import wrap_method\n from Products.PlonePAS.plugins.group import PloneGroup\ndiff --git a/src/Products/PlonePAS/pas.py b/src/Products/PlonePAS/pas.py\nindex d2ebc79a..83bc6ba2 100644\n--- a/src/Products/PlonePAS/pas.py\n+++ b/src/Products/PlonePAS/pas.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # pas alterations and monkies\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\ndiff --git a/src/Products/PlonePAS/patch.py b/src/Products/PlonePAS/patch.py\nindex c9423a92..5d737255 100644\n--- a/src/Products/PlonePAS/patch.py\n+++ b/src/Products/PlonePAS/patch.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.deprecation import deprecation\n \n import logging\n@@ -34,7 +33,7 @@ def wrap_method(\n         if isWrapperMethod(old_method):\n             logger.warn(\n                 "PlonePAS: *NOT* wrapping already wrapped method at "\n-                "{0}.{1}".format(klass.__name__, name)\n+                "{}.{}".format(klass.__name__, name)\n             )\n \n             return\n@@ -54,9 +53,9 @@ def wrap_method(\n         setattr(klass, name, method)\n \n     if roles is not None:\n-        roles_attr = "{0}__roles__".format(name)\n+        roles_attr = f"{name}__roles__"\n         logger.debug(\n-            "PlonePAS: Setting new permission roles at {0}.{1}".format(\n+            "PlonePAS: Setting new permission roles at {}.{}".format(\n                 klass.__name__, name\n             )\n         )\ndiff --git a/src/Products/PlonePAS/permissions.py b/src/Products/PlonePAS/permissions.py\nindex 1515db2d..97d5e7a7 100644\n--- a/src/Products/PlonePAS/permissions.py\n+++ b/src/Products/PlonePAS/permissions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permission import addPermission\n \n \ndiff --git a/src/Products/PlonePAS/plugins/__init__.py b/src/Products/PlonePAS/plugins/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/plugins/__init__.py\n+++ b/src/Products/PlonePAS/plugins/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/plugins/autogroup.py b/src/Products/PlonePAS/plugins/autogroup.py\nindex bce066a6..df40eba6 100644\n--- a/src/Products/PlonePAS/plugins/autogroup.py\n+++ b/src/Products/PlonePAS/plugins/autogroup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n@@ -28,7 +27,7 @@ def manage_addAutoGroup(self, id, title="", group="", description="", RESPONSE=N\n \n class VirtualGroup(PropertiedUser):\n     def __init__(self, id, title="", description=""):\n-        super(VirtualGroup, self).__init__(id)\n+        super().__init__(id)\n         self.id = id\n         self.title = title\n         self.description = description\ndiff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex 4d7df83e..9a195279 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Class: ExtendedCookieAuthHelper\n \n Simply extends the standard CookieAuthHelper provided via regular\n@@ -24,7 +23,7 @@\n from Products.PluggableAuthService.plugins.CookieAuthHelper import (\n     CookieAuthHelper as BasePlugin,\n )\n-from six.moves.urllib.parse import quote\n+from urllib.parse import quote\n from zope.component import getUtility\n from zope.interface import implementer\n \ndiff --git a/src/Products/PlonePAS/plugins/crumbler.py b/src/Products/PlonePAS/plugins/crumbler.py\nindex 710e602b..296cf656 100644\n--- a/src/Products/PlonePAS/plugins/crumbler.py\n+++ b/src/Products/PlonePAS/plugins/crumbler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Class: CookieCrumblingPlugin\n \n Acts as auth plugin, but injects cookie form credentials as HTTPBasicAuth.\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex 79b6aaca..fcdc0f65 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n ZODB Group Implementation with basic introspection and\n management (ie. rw) capabilities.\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex 758532d6..b28c1abd 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n A Local Roles Plugin Implementation that respects Black Listing markers.\n \ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex cecd695a..2a50f29a 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Password Validation plugin (IValidationPlugin)\n Mutable Property Provider\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex cab9d4c9..1f7bdc8e 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Mutable Property Provider\n """\n@@ -45,7 +44,7 @@ def manage_addZODBMutablePropertyProvider(\n \n \n def isStringType(data):\n-    return isinstance(data, str) or isinstance(data, six.text_type)\n+    return isinstance(data, str) or isinstance(data, str)\n \n \n @implementer(IPropertiesPlugin, IUserEnumerationPlugin, IMutablePropertiesPlugin)\n@@ -181,7 +180,7 @@ def setPropertiesForUser(self, user, propertysheet):\n                 property_type, properties[name]\n             ):\n                 raise ValueError(\n-                    "Invalid value: %s does not conform to %s" % (name, property_type)\n+                    "Invalid value: {} does not conform to {}".format(name, property_type)\n                 )\n \n         allowed_prop_keys = [pn for pn, pt in self._getSchema(isGroup) or ()]\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 5f485951..61247d47 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n group aware role manager, returns roles assigned to group a principal\n is a member of, in addition to the explicit roles assigned directly\n@@ -98,8 +97,8 @@ def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n     @security.private\n     def getRolesForPrincipal(self, principal, request=None):\n         """See IRolesPlugin."""\n-        roles = set([])\n-        principal_ids = set([])\n+        roles = set()\n+        principal_ids = set()\n         # Some services need to determine the roles obtained from groups\n         # while excluding the directly assigned roles.  In this case\n         # \'__ignore_direct_roles__\' = True should be pushed in the request.\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex fe9d3cea..9c331fe1 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from AccessControl.PermissionRole import _what_not_even_god_should_do\n@@ -65,7 +64,7 @@ class PloneUser(PropertiedUser):\n     _isGroup = False\n \n     def __init__(self, id, login=None):\n-        super(PloneUser, self).__init__(id, login)\n+        super().__init__(id, login)\n         self._propertysheets = OrderedDict()\n \n     def _getPAS(self):\n@@ -145,7 +144,7 @@ def _getLocalRolesPlugins(self):\n \n     def getRolesInContext(self, object):\n         lrmanagers = self._getLocalRolesPlugins()\n-        roles = set([])\n+        roles = set()\n         for lrid, lrmanager in lrmanagers:\n             roles.update(lrmanager.getRolesInContext(self, object))\n         roles.update(self.getRoles())\n@@ -224,7 +223,7 @@ def getProperty(self, id, default=_marker):\n         for sheet in self.getOrderedPropertySheets():\n             if sheet.hasProperty(id):\n                 value = sheet.getProperty(id)\n-                if six.PY2 and isinstance(value, six.text_type):\n+                if six.PY2 and isinstance(value, str):\n                     # XXX Temporarily work around the fact that\n                     # property sheets blindly store and return\n                     # unicode. This is sub-optimal and should be\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex 950d7763..f24bae78 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n ZODB based user manager with introspection and management interfaces.\n """\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex c20a7c99..f9d72040 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Custom GenericSetup import steps for PAS in Plone.\n """\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 999c5381..4c9ed90d 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Add Mutable Property Sheets and Schema Mutable Property Sheets to PAS\n \n@@ -18,7 +17,7 @@ class PropertyValueError(ValueError):\n     pass\n \n \n-class PropertySchemaTypeMap(object):\n+class PropertySchemaTypeMap:\n     def __init__(self):\n         self.tmap = {}\n         self.tmap_order = []\n@@ -43,15 +42,15 @@ def validate(self, property_type, value):\n \n \n PropertySchema = PropertySchemaTypeMap()\n-PropertySchema.addType("string", lambda x: x is None or isinstance(x, six.string_types))\n-PropertySchema.addType("text", lambda x: x is None or isinstance(x, six.string_types))\n+PropertySchema.addType("string", lambda x: x is None or isinstance(x, str))\n+PropertySchema.addType("text", lambda x: x is None or isinstance(x, str))\n PropertySchema.addType("boolean", lambda x: 1)  # anything can be boolean\n PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n PropertySchema.addType("long", lambda x: x is None or isinstance(x, long))\n PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n PropertySchema.addType(\n-    "selection", lambda x: x is None or isinstance(x, six.string_types)\n+    "selection", lambda x: x is None or isinstance(x, str)\n )\n PropertySchema.addType(\n     "multiple selection", lambda x: x is None or isinstance(x, (tuple, list))\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex c9825763..f25f9d23 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\ndiff --git a/src/Products/PlonePAS/tests/__init__.py b/src/Products/PlonePAS/tests/__init__.py\nindex 4c48b5ac..e69de29b 100644\n--- a/src/Products/PlonePAS/tests/__init__.py\n+++ b/src/Products/PlonePAS/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\r\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex bca993ce..dc6fc165 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n-from six import BytesIO\n+from io import BytesIO\n from ZPublisher.HTTPRequest import FileUpload\n \n \n TEXT = b"file data"\n \n \n-class FieldStorage(object):\n+class FieldStorage:\n     def __init__(self, file, filename="testfile", headers=None):\n         self.file = file\n         if headers is None:\ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex 9243a05e..d6c42e38 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 1aaba234..f87c0226 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import layered\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex bc8663f9..e78240f4 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_parent\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex 3fdaf172..78be7841 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_base\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 7bf978b9..68cb4c01 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from OFS.Image import Image\n from plone.app.testing import TEST_USER_ID as default_user\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex bd249b23..c0814ef2 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from AccessControl.User import nobody\n@@ -24,7 +23,7 @@\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PlonePAS.utils import getGroupsForPrincipal\n from Products.PluggableAuthService.interfaces.events import ICredentialsUpdatedEvent\n-from six import BytesIO\n+from io import BytesIO\n from zExceptions import BadRequest\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n@@ -135,7 +134,7 @@ def test_id_clean(self):\n         self.assertEqual(cleaned, "abc")\n         self.assertTrue(isinstance(cleaned, str))\n         if six.PY2:\n-            self.assertFalse(isinstance(cleaned, six.text_type))\n+            self.assertFalse(isinstance(cleaned, str))\n \n \n class MemberAreaTest(unittest.TestCase):\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex 9ba8d06d..63d3de38 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex db3dd292..caf432b7 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # $Id$\n """Tests for Products.PlonePAS.plugins.role.GroupAwareRoleManager"""\n \ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex c83bf26f..b4bd24a7 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Test set up specific to Plone through thea GenericSetup profile installation.\n """\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex 8f4f4648..e1daa8da 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -1,4 +1,3 @@\n-# -*- encoding: utf-8 -*-\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n import unittest\ndiff --git a/src/Products/PlonePAS/tools/__init__.py b/src/Products/PlonePAS/tools/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/tools/__init__.py\n+++ b/src/Products/PlonePAS/tools/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex aa670736..5456a5b5 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from AccessControl import Permissions\n@@ -181,7 +180,7 @@ def getGroupMembers(self):\n                 # The returned object is already wrapped\n                 if not usr:\n                     logger.debug(\n-                        "Group has a non-existing principal {0}".format(u_name)\n+                        f"Group has a non-existing principal {u_name}"\n                     )\n                     continue\n                 ret.append(usr)\n@@ -203,7 +202,7 @@ def getAllGroupMembers(self):\n                 usr = self._getGRUF().getGroupById(u_name)\n                 if not usr:\n                     logger.debug(\n-                        "Group has a non-existing principal {0}".format(u_name)\n+                        f"Group has a non-existing principal {u_name}"\n                     )\n                     continue\n                 ret.append(usr)\n@@ -515,15 +514,9 @@ def canWriteProperty(self, prop_name):\n                     break  # shadowed by read-only\n         return 0\n \n-    if six.PY3:\n-        canAddToGroup = MemberData.canAddToGroup\n-        canRemoveFromGroup = MemberData.canRemoveFromGroup\n-        canAssignRole = MemberData.canAssignRole\n-    else:\n-        # in PY2 this is a unbound method\n-        canAddToGroup = MemberData.canAddToGroup.__func__\n-        canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n-        canAssignRole = MemberData.canAssignRole.__func__\n+    canAddToGroup = MemberData.canAddToGroup\n+    canRemoveFromGroup = MemberData.canRemoveFromGroup\n+    canAssignRole = MemberData.canAssignRole\n \n     # plugin getters\n \ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 9448a3b8..97f2a970 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n@@ -150,7 +149,7 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None, *args, **kw):\n                         if gm.addPrincipalToGroup(id, group):\n                             break\n                     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-                        logger.exception("AuthenticationPlugin {0} error".format(gm_id))\n+                        logger.exception(f"AuthenticationPlugin {gm_id} error")\n \n     @security.protected(DeleteGroups)\n     @postonly\n@@ -401,7 +400,7 @@ def setGroupOwnership(self, group, object, REQUEST=None):\n         For GRUF this is easy. Others may have to re-implement."""\n         user = group.getGroup()\n         if user is None:\n-            raise ValueError("Invalid group: \'%s\'." % (group,))\n+            raise ValueError("Invalid group: \'{}\'.".format(group))\n         object.changeOwnership(user)\n         object.manage_setLocalRoles(user.getId(), ["Owner"])\n \ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 9d1fe0dc..01ed4542 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from AccessControl.interfaces import IUser\n@@ -119,7 +118,7 @@ def updateMemberDataContents(\n             mbr = self._members.get(member_name, None)\n             if not mbr:\n                 raise RuntimeError(\n-                    "Error while upgrading user \'{0}\'.".format(member_name)\n+                    f"Error while upgrading user \'{member_name}\'."\n                 )\n             mbr.setProperties(values, force_local=1)\n             count += 1\n@@ -284,7 +283,7 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):\n \n         # Trigger PropertiesUpdated event when member properties are updated,\n         # excluding user login events\n-        if not set(mapping.keys()) & set(("login_time", "last_login_time")):\n+        if not set(mapping.keys()) & {"login_time", "last_login_time"}:\n             notify(PropertiesUpdated(self, mapping))\n \n     def getProperty(self, id, default=_marker):\n@@ -315,7 +314,7 @@ def getProperty(self, id, default=_marker):\n             if sheet.hasProperty(id):\n                 # Return the first one that has the property.\n                 value = sheet.getProperty(id)\n-                if six.PY2 and isinstance(value, six.text_type):\n+                if six.PY2 and isinstance(value, str):\n                     # XXX Temporarily work around the fact that\n                     # property sheets blindly store and return\n                     # unicode. This is sub-optimal and should be\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex ae11d285..3d5b396c 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n@@ -30,7 +29,7 @@\n from Products.PlonePAS.utils import cleanId\n from Products.PlonePAS.utils import safe_unicode\n from Products.PlonePAS.utils import scale_image\n-from six import BytesIO\n+from io import BytesIO\n from zExceptions import BadRequest\n from ZODB.POSException import ConflictError\n from zope import event\n@@ -60,7 +59,7 @@ def _unicodify_structure(value, charset=_marker):\n     if isinstance(value, list):\n         return [_unicodify_structure(val, charset) for val in value]\n     if isinstance(value, tuple):\n-        return tuple([_unicodify_structure(entry, charset) for entry in value])\n+        return tuple(_unicodify_structure(entry, charset) for entry in value)\n     if isinstance(value, dict):\n         for key, val in value.items():\n             value[key] = _unicodify_structure(val, charset)\n@@ -274,7 +273,7 @@ def dedupe(seq):\n             if last_login_time:\n                 last_login = member.getProperty("last_login_time", "")\n \n-                if isinstance(last_login, six.string_types):\n+                if isinstance(last_login, str):\n                     # value is a string when member hasn\'t yet logged in\n                     last_login = DateTime(last_login or "2000/01/01")\n \n@@ -388,7 +387,7 @@ def getMemberInfo(self, memberId=None):\n \n         # Special handling to avoid bad home_pages, like javascript.\n         home_page = member.getProperty("home_page", "")\n-        if isinstance(home_page, six.string_types):\n+        if isinstance(home_page, str):\n             if not home_page.startswith("https://") and not home_page.startswith(\n                 "http://"\n             ):\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 58cba34f..a0173c3b 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from Products.PlonePAS.config import IMAGE_SCALE_PARAMS\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n-from six import BytesIO\n+from io import BytesIO\n from six.moves import urllib\n \n import six\n@@ -24,7 +23,7 @@ def cleanId(id):\n     __traceback_info__ = (id,)\n     if id:\n         # note: we provide the \'safe\' param to get \'/\' encoded\n-        if isinstance(id, six.text_type):\n+        if isinstance(id, str):\n             id = id.encode("utf-8")\n         return urllib.parse.quote(id, "").replace("-", "--").replace("%", "-")\n     return ""\n@@ -182,11 +181,11 @@ def getGroupsForPrincipal(principal, plugins, request=None):\n \n def safe_unicode(value, encoding="utf-8"):\n     """Converts a value to unicode, even it is already a unicode string."""\n-    if isinstance(value, six.text_type):\n+    if isinstance(value, str):\n         return value\n-    elif isinstance(value, six.string_types):\n+    elif isinstance(value, str):\n         try:\n-            value = six.text_type(value, encoding)\n+            value = str(value, encoding)\n         except UnicodeDecodeError:\n             value = value.decode("utf-8", "replace")\n     return value\ndiff --git a/src/Products/__init__.py b/src/Products/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/src/Products/__init__.py\n+++ b/src/Products/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T14:09:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/50cb1db512c0391afa91501f1adeffbef31f0e1b

manual remove six

Files changed:
M setup.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/utils.py

b'diff --git a/setup.py b/setup.py\nindex e891b3b1..e9ab4506 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -12,20 +12,14 @@\n longdescription += open("CHANGES.rst").read()\n \n install_requires = [\n-    "DateTime",\n+    "plone.base",\n     "plone.i18n",\n     "plone.memoize",\n     "plone.protect>=2.0.3",\n-    "plone.registry",\n     "plone.session",\n-    "Products.CMFCore",\n     "Products.GenericSetup",\n     "Products.PluggableAuthService>=2.0b2.dev0",\n     "setuptools",\n-    "six",\n-    "zope.component",\n-    "zope.deprecation",\n-    "Zope",\n ]\n \n setup(\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex 1f7bdc8e..f40f4114 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -19,7 +19,6 @@\n from zope.interface import implementer\n \n import copy\n-import six\n \n \n _ = MessageFactory("plone")\n@@ -180,7 +179,9 @@ def setPropertiesForUser(self, user, propertysheet):\n                 property_type, properties[name]\n             ):\n                 raise ValueError(\n-                    "Invalid value: {} does not conform to {}".format(name, property_type)\n+                    "Invalid value: {} does not conform to {}".format(\n+                        name, property_type\n+                    )\n                 )\n \n         allowed_prop_keys = [pn for pn, pt in self._getSchema(isGroup) or ()]\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 9c331fe1..06b8fe78 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -2,6 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from AccessControl.PermissionRole import _what_not_even_god_should_do\n from App.special_dtml import DTMLFile\n+from collections import OrderedDict\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n@@ -12,13 +13,6 @@\n from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n from zope.interface import implementer\n \n-import six\n-\n-\n-try:\n-    from collections import OrderedDict\n-except ImportError:\n-    from ordereddict import OrderedDict\n \n manage_addPloneUserFactoryForm = DTMLFile("../zmi/PloneUserFactoryForm", globals())\n \n@@ -222,16 +216,7 @@ def setProperties(self, properties=None, **kw):\n     def getProperty(self, id, default=_marker):\n         for sheet in self.getOrderedPropertySheets():\n             if sheet.hasProperty(id):\n-                value = sheet.getProperty(id)\n-                if six.PY2 and isinstance(value, str):\n-                    # XXX Temporarily work around the fact that\n-                    # property sheets blindly store and return\n-                    # unicode. This is sub-optimal and should be\n-                    # dealed with at the property sheets level by\n-                    # using Zope\'s converters.\n-                    return value.encode("utf-8")\n-                return value\n-\n+                return sheet.getProperty(id)\n         return default\n \n \ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 4c9ed90d..dfe0ea74 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -10,8 +10,6 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n-import six\n-\n \n class PropertyValueError(ValueError):\n     pass\n@@ -49,9 +47,7 @@ def validate(self, property_type, value):\n PropertySchema.addType("long", lambda x: x is None or isinstance(x, long))\n PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n-PropertySchema.addType(\n-    "selection", lambda x: x is None or isinstance(x, str)\n-)\n+PropertySchema.addType("selection", lambda x: x is None or isinstance(x, str))\n PropertySchema.addType(\n     "multiple selection", lambda x: x is None or isinstance(x, (tuple, list))\n )\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex dc6fc165..5c50f36f 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -1,5 +1,5 @@\n-from OFS.SimpleItem import SimpleItem\n from io import BytesIO\n+from OFS.SimpleItem import SimpleItem\n from ZPublisher.HTTPRequest import FileUpload\n \n \ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex f87c0226..0583c7ea 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -3,17 +3,9 @@\n \n import doctest\n import re\n-import six\n import unittest\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("IOError", "OSError", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(\n@@ -22,7 +14,6 @@ def test_suite():\n                 "cookie_auth.rst",\n                 package="Products.PlonePAS.tests",\n                 optionflags=doctest.ELLIPSIS,\n-                checker=Py23DocChecker(),\n             ),\n             layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING,\n         )\n@@ -31,7 +22,6 @@ def test_suite():\n         doctest.DocTestSuite(\n             "Products.PlonePAS.utils",\n             optionflags=doctest.ELLIPSIS,\n-            checker=Py23DocChecker(),\n         )\n     )\n     return suite\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex c0814ef2..ca8593a6 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.Image import Image\n from plone.app.testing import login\n from plone.app.testing import logout\n@@ -23,13 +24,11 @@\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PlonePAS.utils import getGroupsForPrincipal\n from Products.PluggableAuthService.interfaces.events import ICredentialsUpdatedEvent\n-from io import BytesIO\n from zExceptions import BadRequest\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n import os\n-import six\n import unittest\n \n \n@@ -133,8 +132,6 @@ def test_id_clean(self):\n         cleaned = cleanId("abc")\n         self.assertEqual(cleaned, "abc")\n         self.assertTrue(isinstance(cleaned, str))\n-        if six.PY2:\n-            self.assertFalse(isinstance(cleaned, str))\n \n \n class MemberAreaTest(unittest.TestCase):\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 5456a5b5..b9074a31 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -29,7 +29,6 @@\n from ZPublisher.Converters import type_converters\n \n import logging\n-import six\n \n \n logger = logging.getLogger("PlonePAS")\n@@ -179,9 +178,7 @@ def getGroupMembers(self):\n                 # getGroupById from Products.PlonePAS.pas\n                 # The returned object is already wrapped\n                 if not usr:\n-                    logger.debug(\n-                        f"Group has a non-existing principal {u_name}"\n-                    )\n+                    logger.debug(f"Group has a non-existing principal {u_name}")\n                     continue\n                 ret.append(usr)\n             else:\n@@ -201,9 +198,7 @@ def getAllGroupMembers(self):\n             if not usr:\n                 usr = self._getGRUF().getGroupById(u_name)\n                 if not usr:\n-                    logger.debug(\n-                        f"Group has a non-existing principal {u_name}"\n-                    )\n+                    logger.debug(f"Group has a non-existing principal {u_name}")\n                     continue\n                 ret.append(usr)\n             else:\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 01ed4542..c270307e 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -26,8 +26,6 @@\n from zope.event import notify\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IMemberDataTool)\n class MemberDataTool(BaseTool):\n@@ -117,9 +115,7 @@ def updateMemberDataContents(\n             # Set its properties\n             mbr = self._members.get(member_name, None)\n             if not mbr:\n-                raise RuntimeError(\n-                    f"Error while upgrading user \'{member_name}\'."\n-                )\n+                raise RuntimeError(f"Error while upgrading user \'{member_name}\'.")\n             mbr.setProperties(values, force_local=1)\n             count += 1\n \n@@ -313,15 +309,7 @@ def getProperty(self, id, default=_marker):\n         for sheet in sheets:\n             if sheet.hasProperty(id):\n                 # Return the first one that has the property.\n-                value = sheet.getProperty(id)\n-                if six.PY2 and isinstance(value, str):\n-                    # XXX Temporarily work around the fact that\n-                    # property sheets blindly store and return\n-                    # unicode. This is sub-optimal and should be\n-                    # dealed with at the property sheets level by\n-                    # using Zope\'s converters.\n-                    return value.encode("utf-8")\n-                return value\n+                return sheet.getProperty(id)\n \n         # Couldn\'t find the property in the property sheets. Try to\n         # delegate back to the base implementation.\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 3d5b396c..936b67d6 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -9,6 +9,7 @@\n from Acquisition import aq_parent\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.Image import Image\n from plone.protect.interfaces import IDisableCSRFProtection\n from Products.CMFCore.interfaces import IPropertiesTool\n@@ -29,7 +30,6 @@\n from Products.PlonePAS.utils import cleanId\n from Products.PlonePAS.utils import safe_unicode\n from Products.PlonePAS.utils import scale_image\n-from io import BytesIO\n from zExceptions import BadRequest\n from ZODB.POSException import ConflictError\n from zope import event\n@@ -38,7 +38,6 @@\n from zope.interface import implementer\n \n import logging\n-import six\n import transaction\n \n \n@@ -763,8 +762,6 @@ def getBadMembers(self):\n         for member_id in tuple(portraits.keys()):\n             portrait = portraits[member_id]\n             portrait_data = portrait.data\n-            if six.PY2:\n-                portrait_data = str(portrait.data)\n             if not portrait_data:\n                 continue\n             if not HAS_PIL:\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex a0173c3b..1b62824e 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -1,9 +1,8 @@\n+from io import BytesIO\n from Products.PlonePAS.config import IMAGE_SCALE_PARAMS\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n-from io import BytesIO\n-from six.moves import urllib\n \n-import six\n+import urrlib\n \n \n def unique(iterable):\n@@ -43,7 +42,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n \n         >>> from Products.PlonePAS import config\n         >>> import os\n-        >>> from six import BytesIO\n+        >>> from io import BytesIO\n         >>> from Products.PlonePAS.utils import scale_image\n         >>> from PIL import Image\n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T14:10:26+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/829126f77e727f9abb19ecb5174510847c5a3d9c

fix PIL deprecation and cleanup PIL code

see https://pillow.readthedocs.io/en/stable/deprecations.html

Files changed:
M src/Products/PlonePAS/config.py
M src/Products/PlonePAS/tools/membership.py

b'diff --git a/src/Products/PlonePAS/config.py b/src/Products/PlonePAS/config.py\nindex 6f3c1115..25be9115 100644\n--- a/src/Products/PlonePAS/config.py\n+++ b/src/Products/PlonePAS/config.py\n@@ -1,3 +1,6 @@\n+from PIL import Image\n+\n+\n PROJECTNAME = "PlonePAS"\n GLOBALS = globals()\n \n@@ -9,15 +12,8 @@\n }\n \n # Settings for member image resize quality\n-HAS_PIL = True\n-try:\n-    from PIL import Image\n-\n-    PIL_SCALING_ALGO = Image.ANTIALIAS\n-except ImportError:\n-    PIL_SCALING_ALGO = None\n-    HAS_PIL = False\n-\n+HAS_PIL = True  # remove in Version 8\n+PIL_SCALING_ALGO = Image.Resampling.LANCZOS\n PIL_QUALITY = 88\n MEMBER_IMAGE_SCALE = (75, 100)\n IMAGE_SCALE_PARAMS = {\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 936b67d6..5a60059c 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -22,7 +22,6 @@\n from Products.CMFCore.permissions import View\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n-from Products.PlonePAS.config import HAS_PIL\n from Products.PlonePAS.events import UserInitialLoginInEvent\n from Products.PlonePAS.events import UserLoggedInEvent\n from Products.PlonePAS.events import UserLoggedOutEvent\n@@ -38,6 +37,7 @@\n from zope.interface import implementer\n \n import logging\n+import PIL\n import transaction\n \n \n@@ -764,14 +764,7 @@ def getBadMembers(self):\n             portrait_data = portrait.data\n             if not portrait_data:\n                 continue\n-            if not HAS_PIL:\n-                raise RuntimeError(\n-                    "No Python Imaging Libraries (PIL) found. "\n-                    "Unable to validate profile image. "\n-                )\n             try:\n-                import PIL\n-\n                 PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T14:18:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/dea10924f423ef3025d4430e763d0920a8edbce7

make mypy happy

Files changed:
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/utils.py

b'diff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex 885ba372..5e84d05a 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -14,11 +14,10 @@\n     "email": ("mail",),\n }\n \n-KNOWN_ATTRS = []\n+KNOWN_ATTRS = set()\n for attrs in GROUP_PROPERTY_MAP.values():\n     for attr in attrs:\n-        KNOWN_ATTRS.append(attr)\n-KNOWN_ATTRS = set(KNOWN_ATTRS)\n+        KNOWN_ATTRS.add(attr)\n \n \n def getPropertiesForUser(self, user, request=None):\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex dfe0ea74..221ef494 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -44,7 +44,7 @@ def validate(self, property_type, value):\n PropertySchema.addType("text", lambda x: x is None or isinstance(x, str))\n PropertySchema.addType("boolean", lambda x: 1)  # anything can be boolean\n PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n-PropertySchema.addType("long", lambda x: x is None or isinstance(x, long))\n+PropertySchema.addType("long", lambda x: x is None or isinstance(x, int))  # theres is no long in Python 3\n PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n PropertySchema.addType("selection", lambda x: x is None or isinstance(x, str))\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 5c50f36f..77338bbb 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -2,6 +2,7 @@\n from OFS.SimpleItem import SimpleItem\n from ZPublisher.HTTPRequest import FileUpload\n \n+import typing\n \n TEXT = b"file data"\n \n@@ -24,7 +25,7 @@ class File(FileUpload):\n     __allow_access_to_unprotected_subobjects__ = 1\n     filename = "dummy.txt"\n     data = TEXT\n-    headers = {}\n+    headers: typing.Dict = {}\n \n     def __init__(self, filename=None, data=None, headers=None):\n         if filename is not None:\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex 78be7841..77c53aa5 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -118,7 +118,7 @@ def testManagerRemoveMember(self):\n         self.groupdata.removeMember(TEST_USER_ID)\n \n \n-class TestGroupsTool(unittest.TestCase):\n+class TestGroupsToolIntegration(unittest.TestCase):\n \n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 1b62824e..5ac710d5 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -2,7 +2,7 @@\n from Products.PlonePAS.config import IMAGE_SCALE_PARAMS\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n \n-import urrlib\n+import urllib\n \n \n def unique(iterable):\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T14:21:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/e1c8eade39baa30c9e7b31d3cec76ed1b0599d99

add changelog

Files changed:
A news/68.bugfix

b'diff --git a/news/68.bugfix b/news/68.bugfix\nnew file mode 100644\nindex 00000000..2e8dd36c\n--- /dev/null\n+++ b/news/68.bugfix\n@@ -0,0 +1,4 @@\n+Apply `isort`, `black`, `pyupgrade` and manual removal of six leftovers.\n+Fix `PIL` deprecation warning, assume `PIL` is always there.\n+Make `mypy` happy again.\n+[jensens]\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-08-19T15:35:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/3c72579dfdab9bc1fa67731b65ddf362154c5af1

Merge pull request #68 from plone/jensens-cleanup

Code cleanup and fix deprecation

Files changed:
A news/68.bugfix
M setup.cfg
M setup.py
M src/Products/PlonePAS/__init__.py
M src/Products/PlonePAS/browser/__init__.py
M src/Products/PlonePAS/browser/info.py
M src/Products/PlonePAS/browser/member.py
M src/Products/PlonePAS/browser/search.py
M src/Products/PlonePAS/config.py
M src/Products/PlonePAS/events.py
M src/Products/PlonePAS/interfaces/__init__.py
M src/Products/PlonePAS/interfaces/browser.py
M src/Products/PlonePAS/interfaces/capabilities.py
M src/Products/PlonePAS/interfaces/events.py
M src/Products/PlonePAS/interfaces/group.py
M src/Products/PlonePAS/interfaces/memberdata.py
M src/Products/PlonePAS/interfaces/membership.py
M src/Products/PlonePAS/interfaces/plugins.py
M src/Products/PlonePAS/interfaces/propertysheets.py
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/pas.py
M src/Products/PlonePAS/patch.py
M src/Products/PlonePAS/permissions.py
M src/Products/PlonePAS/plugins/__init__.py
M src/Products/PlonePAS/plugins/autogroup.py
M src/Products/PlonePAS/plugins/cookie_handler.py
M src/Products/PlonePAS/plugins/crumbler.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/tests/__init__.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_setup.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/__init__.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/upgrades.py
M src/Products/PlonePAS/utils.py
M src/Products/__init__.py

b'diff --git a/news/68.bugfix b/news/68.bugfix\nnew file mode 100644\nindex 00000000..2e8dd36c\n--- /dev/null\n+++ b/news/68.bugfix\n@@ -0,0 +1,4 @@\n+Apply `isort`, `black`, `pyupgrade` and manual removal of six leftovers.\n+Fix `PIL` deprecation warning, assume `PIL` is always there.\n+Make `mypy` happy again.\n+[jensens]\ndiff --git a/setup.cfg b/setup.cfg\nindex cdfdbc2c..b9ebb3bb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -12,3 +12,10 @@ max-line-length = 88\n extend-ignore = E203\n aggressive = 3\n experimental = true\n+\n+\n+[isort]\n+profile = black\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\ndiff --git a/setup.py b/setup.py\nindex db8f4e96..e9ab4506 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,34 +1,29 @@\n-# -*- coding: utf-8 -*-\n-from setuptools import setup\n from setuptools import find_packages\n+from setuptools import setup\n+\n import sys\n \n-version = \'7.0.0a4.dev0\'\n+\n+version = "7.0.0a4.dev0"\n \n \n longdescription = open("README.rst").read()\n-longdescription += \'\\n\'\n+longdescription += "\\n"\n longdescription += open("CHANGES.rst").read()\n \n install_requires = [\n-        \'DateTime\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.protect>=2.0.3\',\n-        \'plone.registry\',\n-        \'plone.session\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.PluggableAuthService>=2.0b2.dev0\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.deprecation\',\n-        \'Zope\',\n-    ]\n+    "plone.base",\n+    "plone.i18n",\n+    "plone.memoize",\n+    "plone.protect>=2.0.3",\n+    "plone.session",\n+    "Products.GenericSetup",\n+    "Products.PluggableAuthService>=2.0b2.dev0",\n+    "setuptools",\n+]\n \n setup(\n-    name=\'Products.PlonePAS\',\n+    name="Products.PlonePAS",\n     version=version,\n     description="PlonePAS modifies the PluggableAuthService for use by Plone.",\n     long_description=longdescription,\n@@ -45,22 +40,22 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'Zope CMF Plone PAS authentication\',\n-    author=\'Kapil Thangavelu, Wichert Akkerman\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/Products.PlonePAS\',\n-    license=\'ZPL\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'Products\'],\n+    keywords="Zope CMF Plone PAS authentication",\n+    author="Kapil Thangavelu, Wichert Akkerman",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/Products.PlonePAS",\n+    license="ZPL",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=install_requires,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.testing\',\n-            \'plone.app.robotframework\',\n+            "plone.app.testing",\n+            "plone.testing",\n+            "plone.app.robotframework",\n         ],\n     ),\n )\ndiff --git a/src/Products/PlonePAS/__init__.py b/src/Products/PlonePAS/__init__.py\nindex 46ebe11a..b517a9e1 100644\n--- a/src/Products/PlonePAS/__init__.py\n+++ b/src/Products/PlonePAS/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import add_user_folders\n from Products.CMFCore.utils import ToolInit\n from Products.PlonePAS.pas import patch_pas\n@@ -18,6 +17,7 @@\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PluggableAuthService import registerMultiPlugin\n \n+\n ####################################\n # monkey patch pas, the evil happens\n patch_pas()\n@@ -48,9 +48,9 @@ def initialize(context):\n     tools = (GroupsTool, GroupDataTool, MembershipTool, MemberDataTool)\n \n     ToolInit(\n-        \'PlonePAS Tool\',\n+        "PlonePAS Tool",\n         tools=tools,\n-        icon=\'tool.gif\',\n+        icon="tool.gif",\n     ).initialize(context)\n \n     context.registerClass(\n@@ -58,27 +58,23 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             role.manage_addGroupAwareRoleManagerForm,\n-            role.manage_addGroupAwareRoleManager),\n-        visibility=None\n+            role.manage_addGroupAwareRoleManager,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n         user.UserManager,\n         permission=add_user_folders,\n-        constructors=(\n-            user.manage_addUserManagerForm,\n-            user.manage_addUserManager),\n-        visibility=None\n+        constructors=(user.manage_addUserManagerForm, user.manage_addUserManager),\n+        visibility=None,\n     )\n \n     context.registerClass(\n         group.GroupManager,\n         permission=add_user_folders,\n-        constructors=(\n-            group.manage_addGroupManagerForm,\n-            group.manage_addGroupManager\n-        ),\n-        visibility=None\n+        constructors=(group.manage_addGroupManagerForm, group.manage_addGroupManager),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -86,8 +82,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             ufactory.manage_addPloneUserFactoryForm,\n-            ufactory.manage_addPloneUserFactory),\n-        visibility=None\n+            ufactory.manage_addPloneUserFactory,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -95,8 +92,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             local_role.manage_addLocalRolesManagerForm,\n-            local_role.manage_addLocalRolesManager),\n-        visibility=None\n+            local_role.manage_addLocalRolesManager,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -104,8 +102,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             property.manage_addZODBMutablePropertyProviderForm,\n-            property.manage_addZODBMutablePropertyProvider),\n-        visibility=None\n+            property.manage_addZODBMutablePropertyProvider,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -113,8 +112,9 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             crumbler.manage_addCookieCrumblingPluginForm,\n-            crumbler.manage_addCookieCrumblingPlugin),\n-        visibility=None\n+            crumbler.manage_addCookieCrumblingPlugin,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -122,17 +122,16 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             cookie_handler.manage_addExtendedCookieAuthHelperForm,\n-            cookie_handler.manage_addExtendedCookieAuthHelper),\n-        visibility=None\n+            cookie_handler.manage_addExtendedCookieAuthHelper,\n+        ),\n+        visibility=None,\n     )\n \n     context.registerClass(\n         autogroup.AutoGroup,\n         permission=add_user_folders,\n-        constructors=(\n-            autogroup.manage_addAutoGroupForm,\n-            autogroup.manage_addAutoGroup),\n-        visibility=None\n+        constructors=(autogroup.manage_addAutoGroupForm, autogroup.manage_addAutoGroup),\n+        visibility=None,\n     )\n \n     context.registerClass(\n@@ -140,7 +139,7 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             passwordpolicy.manage_addPasswordPolicyForm,\n-            passwordpolicy.manage_addPasswordPolicyPlugin\n+            passwordpolicy.manage_addPasswordPolicyPlugin,\n         ),\n-        visibility=None\n+        visibility=None,\n     )\ndiff --git a/src/Products/PlonePAS/browser/__init__.py b/src/Products/PlonePAS/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/browser/__init__.py\n+++ b/src/Products/PlonePAS/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/browser/info.py b/src/Products/PlonePAS/browser/info.py\nindex 7bcd8cd6..04e2fc84 100644\n--- a/src/Products/PlonePAS/browser/info.py\n+++ b/src/Products/PlonePAS/browser/info.py\n@@ -1,17 +1,17 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.memoize.instance import memoize\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n from Products.PlonePAS.interfaces.browser import IPASInfoView\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n-from Products.PluggableAuthService.interfaces.plugins import ILoginPasswordExtractionPlugin  # noqa: E501\n+from Products.PluggableAuthService.interfaces.plugins import (  # noqa: E501\n+    ILoginPasswordExtractionPlugin,\n+)\n from zope.interface import implementer\n \n \n @implementer(IPASInfoView)\n class PASInfoView(BrowserView):\n-\n     def checkExtractorForInterface(self, interface):\n         acl = getToolByName(aq_inner(self.context), "acl_users")\n         plugins = acl.plugins.listPlugins(IExtractionPlugin)\ndiff --git a/src/Products/PlonePAS/browser/member.py b/src/Products/PlonePAS/browser/member.py\nindex 311f14d7..8559cb5a 100644\n--- a/src/Products/PlonePAS/browser/member.py\n+++ b/src/Products/PlonePAS/browser/member.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.memoize.instance import memoize\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.interfaces.browser import IPASMemberView\n@@ -8,22 +7,22 @@\n \n @implementer(IPASMemberView)\n class PASMemberView(BrowserView):\n-\n     @memoize\n     def info(self, userid=None):\n-        pm = getToolByName(self.context, \'portal_membership\')\n+        pm = getToolByName(self.context, "portal_membership")\n         result = pm.getMemberInfo(memberId=userid)\n         if result is None:\n             # No such member: removed?  We return something useful anyway.\n             return {\n-                \'username\': userid,\n-                \'description\': \'\',\n-                \'language\': \'\',\n-                \'home_page\': \'\',\n-                \'name_or_id\': userid,\n-                \'location\': \'\',\n-                \'fullname\': \'\'\n+                "username": userid,\n+                "description": "",\n+                "language": "",\n+                "home_page": "",\n+                "name_or_id": userid,\n+                "location": "",\n+                "fullname": "",\n             }\n-        result[\'name_or_id\'] = result.get(\'fullname\') or \\\n-            result.get(\'username\') or userid\n+        result["name_or_id"] = (\n+            result.get("fullname") or result.get("username") or userid\n+        )\n         return result\ndiff --git a/src/Products/PlonePAS/browser/search.py b/src/Products/PlonePAS/browser/search.py\nindex 25d67d92..2f529e39 100644\n--- a/src/Products/PlonePAS/browser/search.py\n+++ b/src/Products/PlonePAS/browser/search.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n@@ -9,12 +8,11 @@\n \n @implementer(IPASSearchView)\n class PASSearchView(BrowserView):\n-\n     @staticmethod\n     def extractCriteriaFromRequest(request):\n         criteria = request.form.copy()\n \n-        for key in ["form.submitted", "submit", \'b_start\', \'b_size\']:\n+        for key in ["form.submitted", "submit", "b_start", "b_size"]:\n             if key in criteria:\n                 del criteria[key]\n \n@@ -43,6 +41,7 @@ def sort(self, results, sort_key):\n \n         def key_func(a):\n             return idnormalizer.normalize(a.get(sort_key, a))\n+\n         return sorted(results, key=key_func)\n \n     def searchUsers(self, sort_by=None, **criteria):\ndiff --git a/src/Products/PlonePAS/config.py b/src/Products/PlonePAS/config.py\nindex 99ae0bc9..25be9115 100644\n--- a/src/Products/PlonePAS/config.py\n+++ b/src/Products/PlonePAS/config.py\n@@ -1,28 +1,24 @@\n-# -*- coding: utf-8 -*-\n-PROJECTNAME = \'PlonePAS\'\n+from PIL import Image\n+\n+\n+PROJECTNAME = "PlonePAS"\n GLOBALS = globals()\n \n-DEFAULT_CHALLENGE_PROTOCOL = [\'http\']\n+DEFAULT_CHALLENGE_PROTOCOL = ["http"]\n DEFAULT_PROTO_MAPPING = {\n-    \'WebDAV\': DEFAULT_CHALLENGE_PROTOCOL,\n-    \'FTP\': DEFAULT_CHALLENGE_PROTOCOL,\n-    \'XML-RPC\': DEFAULT_CHALLENGE_PROTOCOL\n+    "WebDAV": DEFAULT_CHALLENGE_PROTOCOL,\n+    "FTP": DEFAULT_CHALLENGE_PROTOCOL,\n+    "XML-RPC": DEFAULT_CHALLENGE_PROTOCOL,\n }\n \n # Settings for member image resize quality\n-HAS_PIL = True\n-try:\n-    from PIL import Image\n-    PIL_SCALING_ALGO = Image.ANTIALIAS\n-except ImportError:\n-    PIL_SCALING_ALGO = None\n-    HAS_PIL = False\n-\n+HAS_PIL = True  # remove in Version 8\n+PIL_SCALING_ALGO = Image.Resampling.LANCZOS\n PIL_QUALITY = 88\n MEMBER_IMAGE_SCALE = (75, 100)\n IMAGE_SCALE_PARAMS = {\n-    \'scale\': MEMBER_IMAGE_SCALE,\n-    \'quality\': PIL_QUALITY,\n-    \'algorithm\': PIL_SCALING_ALGO,\n-    \'default_format\': \'PNG\'\n+    "scale": MEMBER_IMAGE_SCALE,\n+    "quality": PIL_QUALITY,\n+    "algorithm": PIL_SCALING_ALGO,\n+    "default_format": "PNG",\n }\ndiff --git a/src/Products/PlonePAS/events.py b/src/Products/PlonePAS/events.py\nindex 79c24331..d614a0ee 100644\n--- a/src/Products/PlonePAS/events.py\n+++ b/src/Products/PlonePAS/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PlonePAS.interfaces.events import IUserInitialLoginInEvent\n from Products.PluggableAuthService.events import PASEvent\n from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent\ndiff --git a/src/Products/PlonePAS/interfaces/__init__.py b/src/Products/PlonePAS/interfaces/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/interfaces/__init__.py\n+++ b/src/Products/PlonePAS/interfaces/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/interfaces/browser.py b/src/Products/PlonePAS/interfaces/browser.py\nindex 6f2b5cbb..b01c8bc7 100644\n--- a/src/Products/PlonePAS/interfaces/browser.py\n+++ b/src/Products/PlonePAS/interfaces/browser.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IPASInfoView(Interface):\n-\n     def hasLoginPasswordExtractor():\n         """Check if a login & password extraction plugin is active.\n \n@@ -13,8 +11,7 @@ def hasLoginPasswordExtractor():\n         """\n \n     def hasOpenIDExtractor():\n-        """Check if an OpenID extraction plugin is active.\n-        """\n+        """Check if an OpenID extraction plugin is active."""\n \n     def hasOpenIDdExtractor():\n         """Check if an OpenID extraction plugin is active.\n@@ -24,7 +21,6 @@ def hasOpenIDdExtractor():\n \n \n class IPASMemberView(Interface):\n-\n     def info(userid=None):\n         """Return \'harmless\' member info of any user, such as full name,\n         location, etc.\n@@ -32,7 +28,6 @@ def info(userid=None):\n \n \n class IPASSearchView(Interface):\n-\n     def searchUsers(sort_by=None, any_field=None, **criteria):\n         """Search for users matching a set of criteria.\n \ndiff --git a/src/Products/PlonePAS/interfaces/capabilities.py b/src/Products/PlonePAS/interfaces/capabilities.py\nindex 92b12860..49a86fcf 100644\n--- a/src/Products/PlonePAS/interfaces/capabilities.py\n+++ b/src/Products/PlonePAS/interfaces/capabilities.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Define certain interfaces that a plugin must meet if it is to allow\n # certain operations to be done by the Plone UI.\n from Products.PluggableAuthService.interfaces.plugins import Interface\ndiff --git a/src/Products/PlonePAS/interfaces/events.py b/src/Products/PlonePAS/interfaces/events.py\nindex 500ca8de..b1598542 100644\n--- a/src/Products/PlonePAS/interfaces/events.py\n+++ b/src/Products/PlonePAS/interfaces/events.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent\n \n \n class IUserInitialLoginInEvent(IUserLoggedInEvent):\n-    """A user logs in for the first time in the portal.\n-    """\n+    """A user logs in for the first time in the portal."""\ndiff --git a/src/Products/PlonePAS/interfaces/group.py b/src/Products/PlonePAS/interfaces/group.py\nindex 53ea92c7..739f453f 100644\n--- a/src/Products/PlonePAS/interfaces/group.py\n+++ b/src/Products/PlonePAS/interfaces/group.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces import plugins\n from zope.interface import Interface\n \n \n class IGroupManagement(Interface):\n-\n     def addGroup(id, **kw):\n         """\n         Create a group with the supplied id, roles, and groups.\n@@ -43,7 +41,6 @@ def removePrincipalFromGroup(principal_id, group_id):\n \n \n class IGroupIntrospection(Interface):\n-\n     def getGroupById(group_id):\n         """\n         Returns the portal_groupdata-ish object for a group\n@@ -71,16 +68,13 @@ def getGroupMembers(group_id):\n \n \n class IGroupDataTool(Interface):\n-\n     def wrapGroup(group):\n         """\n         decorate a group with property management capabilities if needed\n         """\n \n \n-class IGroupTool(IGroupIntrospection,\n-                 IGroupManagement,\n-                 plugins.IGroupsPlugin):\n+class IGroupTool(IGroupIntrospection, IGroupManagement, plugins.IGroupsPlugin):\n \n     """\n     Defines an interface for managing and introspecting and\n@@ -89,7 +83,7 @@ class IGroupTool(IGroupIntrospection,\n \n \n class IGroupData(Interface):\n-    """ An abstract interface for accessing properties on a group object"""\n+    """An abstract interface for accessing properties on a group object"""\n \n     def setProperties(properties=None, **kw):\n         """Allows setting of group properties en masse.\n@@ -97,44 +91,43 @@ def setProperties(properties=None, **kw):\n         list"""\n \n     def getProperty(id):\n-        """ Return the value of the property specified by \'id\' """\n+        """Return the value of the property specified by \'id\'"""\n \n     def getProperties():\n-        """ Return the properties of this group. Properties are as usual in\n+        """Return the properties of this group. Properties are as usual in\n         Zope."""\n \n     def getGroupId():\n-        """ Return the string id of this group, WITHOUT group prefix."""\n+        """Return the string id of this group, WITHOUT group prefix."""\n \n     def getMemberId():\n-        """This exists only for a basic user/group API compatibility\n-        """\n+        """This exists only for a basic user/group API compatibility"""\n \n     def getGroupName():\n-        """ Return the name of the group."""\n+        """Return the name of the group."""\n \n     def getGroupMembers():\n-        """ Return a list of the portal_memberdata-ish members of the group."""\n+        """Return a list of the portal_memberdata-ish members of the group."""\n \n     def getAllGroupMembers():\n-        """ Return a list of the portal_memberdata-ish members of the group\n+        """Return a list of the portal_memberdata-ish members of the group\n         including transitive ones (ie. users or groups of a group in that\n         group)."""\n \n     def getGroupMemberIds():\n-        """ Return a list of the user ids of the group."""\n+        """Return a list of the user ids of the group."""\n \n     def getAllGroupMemberIds():\n-        """ Return a list of the user ids of the group.\n+        """Return a list of the user ids of the group.\n         including transitive ones (ie. users or groups of a group in that\n         group)."""\n \n     def addMember(id):\n-        """ Add the existing member with the given id to the group"""\n+        """Add the existing member with the given id to the group"""\n \n     def removeMember(id):\n-        """ Remove the member with the provided id from the group """\n+        """Remove the member with the provided id from the group"""\n \n     def getGroup():\n-        """ Returns the actual group implementation. Varies by group\n+        """Returns the actual group implementation. Varies by group\n         implementation (GRUF/Nux/et al)."""\ndiff --git a/src/Products/PlonePAS/interfaces/memberdata.py b/src/Products/PlonePAS/interfaces/memberdata.py\nindex 2eca85fc..f26287a9 100644\n--- a/src/Products/PlonePAS/interfaces/memberdata.py\n+++ b/src/Products/PlonePAS/interfaces/memberdata.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore import interfaces\n \n \n class IMemberDataTool(interfaces.IMemberDataTool):\n-    """More specific PlonePAS MemberDataTool interface.\n-    """\n+    """More specific PlonePAS MemberDataTool interface."""\n \n \n-__all__ = ("IMemberDataTool", )\n+__all__ = ("IMemberDataTool",)\ndiff --git a/src/Products/PlonePAS/interfaces/membership.py b/src/Products/PlonePAS/interfaces/membership.py\nindex e36e5265..ea57ab81 100644\n--- a/src/Products/PlonePAS/interfaces/membership.py\n+++ b/src/Products/PlonePAS/interfaces/membership.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore import interfaces\n \n \n class IMembershipTool(interfaces.IMembershipTool):\n-\n     def getMemberInfo(memberId=None):\n         """Return \'harmless\' Memberinfo of any member, such as full name,\n         location, etc\n         """\n \n-__all__ = ("IMembershipTool", )\n+\n+__all__ = ("IMembershipTool",)\ndiff --git a/src/Products/PlonePAS/interfaces/plugins.py b/src/Products/PlonePAS/interfaces/plugins.py\nindex a1f78a31..cdecb9b1 100644\n--- a/src/Products/PlonePAS/interfaces/plugins.py\n+++ b/src/Products/PlonePAS/interfaces/plugins.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.PluggableAuthService.interfaces import plugins\n from Products.PluggableAuthService.interfaces.plugins import Interface\n \n@@ -120,7 +119,6 @@ def deleteUser(user_id):\n \n \n class ISchemaMutablePropertiesPlugin(Interface):\n-\n     def addProperty(property_type, property_name, default=None):\n         """\n         Add a new property to a property provider.\ndiff --git a/src/Products/PlonePAS/interfaces/propertysheets.py b/src/Products/PlonePAS/interfaces/propertysheets.py\nindex 8ff7ab3e..878641e7 100644\n--- a/src/Products/PlonePAS/interfaces/propertysheets.py\n+++ b/src/Products/PlonePAS/interfaces/propertysheets.py\n@@ -1,21 +1,15 @@\n-# -*- coding: utf-8 -*-\n-from Products.PluggableAuthService.interfaces.propertysheets \\\n-    import IPropertySheet\n+from Products.PluggableAuthService.interfaces.propertysheets import IPropertySheet\n \n \n class IMutablePropertySheet(IPropertySheet):\n-\n     def canWriteProperty(object, id):\n-        """ Check if a property can be modified.\n-        """\n+        """Check if a property can be modified."""\n \n     def setProperty(object, id, value):\n-        """\n-        """\n+        """ """\n \n     def setProperties(object, mapping):\n-        """\n-        """\n+        """ """\n \n \n class ISchemaMutablePropertySheet(IMutablePropertySheet):\ndiff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex c5511b3f..5e84d05a 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -1,31 +1,31 @@\n-# -*- coding: utf-8 -*-\n from Products.PlonePAS.patch import call\n from Products.PlonePAS.patch import wrap_method\n from Products.PlonePAS.plugins.group import PloneGroup\n \n+\n GROUP_PROPERTY_MAP = {\n     # target property: (possible key, ...)\n-    \'title\': (\'name\',\n-              \'displayName\',\n-              \'cn\',),\n-    \'description\': (\'description\', ),\n-    \'email\': (\'mail\', ),\n+    "title": (\n+        "name",\n+        "displayName",\n+        "cn",\n+    ),\n+    "description": ("description",),\n+    "email": ("mail",),\n }\n \n-KNOWN_ATTRS = []\n+KNOWN_ATTRS = set()\n for attrs in GROUP_PROPERTY_MAP.values():\n     for attr in attrs:\n-        KNOWN_ATTRS.append(attr)\n-KNOWN_ATTRS = set(KNOWN_ATTRS)\n+        KNOWN_ATTRS.add(attr)\n \n \n def getPropertiesForUser(self, user, request=None):\n-    """Fullfill PropertiesPlugin requirements\n-    """\n+    """Fullfill PropertiesPlugin requirements"""\n \n     if not isinstance(user, PloneGroup):\n         # It\'s not a PloneGroup, continue as usual\n-        return call(self, \'getPropertiesForUser\', user=user, request=request)\n+        return call(self, "getPropertiesForUser", user=user, request=request)\n \n     # We\'ve got a PloneGroup.\n     # Search for groups instead of users\n@@ -45,28 +45,21 @@ def getPropertiesForUser(self, user, request=None):\n \n \n def getGroupsForPrincipal(self, user, request=None, attr=None):\n-    """ Fulfill GroupsPlugin requirements, but don\'t return any groups for\n-    groups """\n+    """Fulfill GroupsPlugin requirements, but don\'t return any groups for\n+    groups"""\n \n     if not isinstance(user, PloneGroup):\n         # It\'s not a PloneGroup, continue as usual\n-        return call(self, \'getGroupsForPrincipal\', user,\n-                    request=request, attr=attr)\n+        return call(self, "getGroupsForPrincipal", user, request=request, attr=attr)\n \n     return ()\n \n \n def patch_ldapmp():\n     from Products.LDAPMultiPlugins.LDAPPluginBase import LDAPPluginBase\n-    wrap_method(\n-        LDAPPluginBase,\n-        \'getPropertiesForUser\',\n-        getPropertiesForUser\n-    )\n+\n+    wrap_method(LDAPPluginBase, "getPropertiesForUser", getPropertiesForUser)\n \n     from Products.LDAPMultiPlugins.LDAPMultiPlugin import LDAPMultiPlugin\n-    wrap_method(\n-        LDAPMultiPlugin,\n-        \'getGroupsForPrincipal\',\n-        getGroupsForPrincipal\n-    )\n+\n+    wrap_method(LDAPMultiPlugin, "getGroupsForPrincipal", getGroupsForPrincipal)\ndiff --git a/src/Products/PlonePAS/pas.py b/src/Products/PlonePAS/pas.py\nindex 1c34a9c9..83bc6ba2 100644\n--- a/src/Products/PlonePAS/pas.py\n+++ b/src/Products/PlonePAS/pas.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n # pas alterations and monkies\n-from AccessControl import Unauthorized\n from AccessControl import getSecurityManager\n+from AccessControl import Unauthorized\n from AccessControl.PermissionRole import PermissionRole\n from AccessControl.Permissions import change_permissions\n from AccessControl.Permissions import manage_properties\n@@ -17,32 +16,30 @@\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n from Products.PlonePAS.patch import ORIG_NAME\n from Products.PlonePAS.patch import wrap_method\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    PluggableAuthService\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n from Products.PluggableAuthService.events import PrincipalDeleted\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IAuthenticationPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IGroupEnumerationPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IRoleAssignerPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IUserEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IGroupEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IRoleAssignerPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n+from Products.PluggableAuthService.PluggableAuthService import PluggableAuthService\n from zope.event import notify\n+\n import logging\n \n-logger = logging.getLogger(\'PlonePAS\')\n \n-registerToolInterface(\'acl_users\', IPluggableAuthService)\n+logger = logging.getLogger("PlonePAS")\n+\n+registerToolInterface("acl_users", IPluggableAuthService)\n \n \n #################################\n # helper functions\n \n+\n def _userSetGroups(pas, user_id, groupnames):\n     """method was used at GRUF level, but is used inside this monkies at several\n     places too.\n@@ -71,10 +68,7 @@ def _userSetGroups(pas, user_id, groupnames):\n     try:\n         groupmanagers = plugins.listPlugins(IGroupManagement)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\n-            \'PluggableAuthService: Plugin listing error\',\n-            exc_info=1\n-        )\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         groupmanagers = ()\n \n     for group in groupnames:\n@@ -84,11 +78,10 @@ def _userSetGroups(pas, user_id, groupnames):\n                     break\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                 logger.info(\n-                    \'PluggableAuthService: GroupManagement %s error\',\n-                    gm_id,\n-                    exc_info=1\n+                    "PluggableAuthService: GroupManagement %s error", gm_id, exc_info=1\n                 )\n \n+\n #################################\n # pas folder monkies - standard zope user folder api or GRUF\n \n@@ -115,13 +108,11 @@ def _doDelUser(self, id):\n     """\n     Given a user id, hand off to a deleter plugin if available.\n     """\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     userdeleters = plugins.listPlugins(IUserManagement)\n \n     if not userdeleters:\n-        raise NotImplementedError(\n-            "There is no plugin that can delete users."\n-        )\n+        raise NotImplementedError("There is no plugin that can delete users.")\n \n     for userdeleter_id, userdeleter in userdeleters:\n         try:\n@@ -132,8 +123,9 @@ def _doDelUser(self, id):\n             notify(PrincipalDeleted(id))\n \n \n-def _doChangeUser(self, principal_id, password, roles, domains=(), groups=None,\n-                  REQUEST=None, **kw):\n+def _doChangeUser(\n+    self, principal_id, password, roles, domains=(), groups=None, REQUEST=None, **kw\n+):\n     """\n     Given a principal id, change its password, roles, domains, if\n     respective plugins for such exist.\n@@ -145,7 +137,7 @@ def _doChangeUser(self, principal_id, password, roles, domains=(), groups=None,\n     if password is not None:\n         self.userSetPassword(principal_id, password)\n \n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     rmanagers = plugins.listPlugins(IRoleAssignerPlugin)\n \n     if not (rmanagers):\n@@ -160,21 +152,22 @@ def _doChangeUser(self, principal_id, password, roles, domains=(), groups=None,\n     return True\n \n \n-def userFolderAddUser(self, login, password, roles, domains,\n-                      groups=None, REQUEST=None, **kw):\n+def userFolderAddUser(\n+    self, login, password, roles, domains, groups=None, REQUEST=None, **kw\n+):\n     self._doAddUser(login, password, roles, domains, **kw)\n     if groups is not None:\n         _userSetGroups(self, login, groups)\n \n \n def _doAddGroup(self, id, roles, groups=None, **kw):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.addGroup(id, roles, groups, **kw)\n \n \n # for prefs_group_manage compatibility. really should be using tool.\n def _doDelGroups(self, names, REQUEST=None):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     for group_id in names:\n         gtool.removeGroup(group_id)\n \n@@ -186,7 +179,7 @@ def _doChangeGroup(self, principal_id, roles, groups=None, REQUEST=None, **kw):\n \n     See also _doChangeUser\n     """\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     gtool.editGroup(principal_id, roles, groups, **kw)\n     return True\n \n@@ -203,28 +196,27 @@ def _updateGroup(self, principal_id, roles=None, groups=None, **kw):\n \n \n def getGroups(self):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.listGroups()\n \n \n def getGroupNames(self):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.getGroupIds()\n \n \n def getGroupIds(self):\n-    gtool = getToolByName(self, \'portal_groups\')\n+    gtool = getToolByName(self, "portal_groups")\n     return gtool.getGroupIds()\n \n \n def getGroup(self, group_id):\n-    """Like getGroupById in groups tool, but doesn\'t wrap.\n-    """\n+    """Like getGroupById in groups tool, but doesn\'t wrap."""\n     group = None\n     introspectors = self.plugins.listPlugins(IGroupIntrospection)\n \n     if not introspectors:\n-        raise ValueError(\'No plugins allow for group management\')\n+        raise ValueError("No plugins allow for group management")\n     for iid, introspector in introspectors:\n         group = introspector.getGroupById(group_id)\n         if group is not None:\n@@ -272,9 +264,9 @@ def _getLocalRolesForDisplay(self, object):\n     for one_user in local_roles:\n         username = userid = one_user[0]\n         roles = one_user[1]\n-        userType = \'user\'\n+        userType = "user"\n         if self.getGroup(userid):\n-            userType = \'group\'\n+            userType = "group"\n         else:\n             user = self.getUserById(userid) or self.getUser(username)\n             if user:\n@@ -305,7 +297,7 @@ def getUsers(self):\n \n \n def canListAllUsers(self):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     # Do we have multiple user plugins?\n     num_enumeration_plugins = plugins.listPlugins(IUserEnumerationPlugin)\n     num_introspection_plugins = plugins.listPlugins(IUserEnumerationPlugin)\n@@ -313,7 +305,7 @@ def canListAllUsers(self):\n \n \n def canListAllGroups(self):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     # Do we have multiple group plugins?\n     num_enumeration_plugins = plugins.listPlugins(IGroupEnumerationPlugin)\n     num_introspection_plugins = plugins.listPlugins(IGroupEnumerationPlugin)\n@@ -323,7 +315,7 @@ def canListAllGroups(self):\n def userSetPassword(self, userid, password):\n     """Emulate GRUF 3 call for password set, for use with PwRT."""\n     # used by _doChangeUser\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     managers = plugins.listPlugins(IUserManagement)\n \n     if not managers:\n@@ -340,8 +332,9 @@ def userSetPassword(self, userid, password):\n             modified = True\n \n     if not modified:\n-        raise RuntimeError("No user management plugins were able "\n-                           "to successfully modify the user")\n+        raise RuntimeError(\n+            "No user management plugins were able " "to successfully modify the user"\n+        )\n \n \n def credentialsChanged(self, user, name, new_password):\n@@ -369,16 +362,16 @@ def _delOb(self, id):\n     #\n     # XXX imo this is a evil one\n     #\n-    plugins = self._getOb(\'plugins\', None)\n+    plugins = self._getOb("plugins", None)\n \n-    if getattr(plugins, \'removePluginById\', None) is not None:\n+    if getattr(plugins, "removePluginById", None) is not None:\n         plugins.removePluginById(id)\n \n     Folder._delOb(self, id)\n \n \n def addRole(self, role):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     roles = plugins.listPlugins(IRoleAssignerPlugin)\n \n     for plugin_id, plugin in roles:\n@@ -397,7 +390,7 @@ def getAllLocalRoles(self, context):\n \n \n def _getAllLocalRoles(self, context):\n-    plugins = self._getOb(\'plugins\')\n+    plugins = self._getOb("plugins")\n     lrmanagers = plugins.listPlugins(ILocalRolesPlugin)\n \n     roles = {}\n@@ -426,11 +419,10 @@ def authenticate(self, name, password, request):\n     try:\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\'PluggableAuthService: Plugin listing error\', exc_info=1)\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         authenticators = ()\n \n-    credentials = {\'login\': name,\n-                   \'password\': password}\n+    credentials = {"login": name, "password": password}\n \n     user_id = None\n \n@@ -442,9 +434,9 @@ def authenticate(self, name, password, request):\n                 break\n         except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n             logger.info(\n-                \'PluggableAuthService: AuthenticationPlugin %s error\',\n+                "PluggableAuthService: AuthenticationPlugin %s error",\n                 authenticator_id,\n-                exc_info=1\n+                exc_info=1,\n             )\n             continue\n \n@@ -463,7 +455,7 @@ def getUserIds(self):\n     try:\n         introspectors = plugins.listPlugins(IUserIntrospection)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\'PluggableAuthService: Plugin listing error\', exc_info=1)\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         introspectors = ()\n \n     results = []\n@@ -472,9 +464,9 @@ def getUserIds(self):\n             results.extend(introspector.getUserIds())\n         except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n             logger.info(\n-                \'PluggableAuthService: UserIntrospection %s error\',\n+                "PluggableAuthService: UserIntrospection %s error",\n                 introspector_id,\n-                exc_info=1\n+                exc_info=1,\n             )\n \n     return results\n@@ -489,7 +481,7 @@ def getUserNames(self):\n     try:\n         introspectors = plugins.listPlugins(IUserIntrospection)\n     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-        logger.info(\'PluggableAuthService: Plugin listing error\', exc_info=1)\n+        logger.info("PluggableAuthService: Plugin listing error", exc_info=1)\n         introspectors = ()\n \n     results = []\n@@ -498,242 +490,206 @@ def getUserNames(self):\n             results.extend(introspector.getUserNames())\n         except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n             logger.info(\n-                \'PluggableAuthService: UserIntroSpection plugin %s error\',\n-                introspector_id, exc_info=1)\n+                "PluggableAuthService: UserIntroSpection plugin %s error",\n+                introspector_id,\n+                exc_info=1,\n+            )\n \n     return results\n \n \n def patch_pas():\n     # sort alphabetically by patched/added method name\n+    wrap_method(PluggableAuthService, "_delOb", _delOb)\n     wrap_method(\n         PluggableAuthService,\n-        \'_delOb\',\n-        _delOb\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_getAllLocalRoles\',\n+        "_getAllLocalRoles",\n         _getAllLocalRoles,\n         add=True,\n     )\n+    wrap_method(PluggableAuthService, "_doAddGroup", _doAddGroup, add=True)\n+    wrap_method(PluggableAuthService, "_doAddUser", _doAddUser)\n+    wrap_method(PluggableAuthService, "_doChangeGroup", _doChangeGroup, add=True)\n+    wrap_method(PluggableAuthService, "_doChangeUser", _doChangeUser, add=True)\n+    wrap_method(PluggableAuthService, "_doDelGroups", _doDelGroups, add=True)\n+    wrap_method(PluggableAuthService, "_doDelUser", _doDelUser, add=True)\n     wrap_method(\n         PluggableAuthService,\n-        \'_doAddGroup\',\n-        _doAddGroup,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doAddUser\',\n-        _doAddUser\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doChangeGroup\',\n-        _doChangeGroup,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doChangeUser\',\n-        _doChangeUser,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doDelGroups\',\n-        _doDelGroups,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doDelUser\',\n-        _doDelUser,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_doDelUsers\',\n+        "_doDelUsers",\n         _doDelUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'_getLocalRolesForDisplay\',\n+        "_getLocalRolesForDisplay",\n         _getLocalRolesForDisplay,\n-        add=True\n-    )\n-    wrap_method(\n-        PluggableAuthService,\n-        \'_updateGroup\',\n-        _updateGroup,\n-        add=True\n+        add=True,\n     )\n+    wrap_method(PluggableAuthService, "_updateGroup", _updateGroup, add=True)\n     wrap_method(\n         PluggableAuthService,\n-        \'addRole\',\n+        "addRole",\n         addRole,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'authenticate\',\n+        "authenticate",\n         authenticate,\n         add=True,\n         roles=(),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'canListAllGroups\',\n+        "canListAllGroups",\n         canListAllGroups,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'canListAllUsers\',\n+        "canListAllUsers",\n         canListAllUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'credentialsChanged\',\n+        "credentialsChanged",\n         credentialsChanged,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getAllLocalRoles\',\n+        "getAllLocalRoles",\n         getAllLocalRoles,\n         add=True,\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroup\',\n+        "getGroup",\n         getGroup,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupById\',\n+        "getGroupById",\n         getGroupById,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupByName\',\n+        "getGroupByName",\n         getGroupByName,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupIds\',\n+        "getGroupIds",\n         getGroupIds,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroupNames\',\n+        "getGroupNames",\n         getGroupNames,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getGroups\',\n+        "getGroups",\n         getGroups,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getLocalRolesForDisplay\',\n+        "getLocalRolesForDisplay",\n         getLocalRolesForDisplay,\n         add=True,\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getUserIds\',\n+        "getUserIds",\n         getUserIds,\n         add=True,\n-        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead."\n+        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead.",\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getUserNames\',\n+        "getUserNames",\n         getUserNames,\n         add=True,\n-        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead."\n+        deprecated="Inefficient GRUF wrapper, use IUserIntrospection instead.",\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getUsers\',\n+        "getUsers",\n         getUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'getPureUsers\',\n+        "getPureUsers",\n         getUsers,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderAddUser\',\n+        "userFolderAddUser",\n         postonly(userFolderAddUser),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderDelUsers\',\n+        "userFolderDelUsers",\n         postonly(_doDelUsers),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderEditGroup\',\n+        "userFolderEditGroup",\n         postonly(_doChangeGroup),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderEditUser\',\n+        "userFolderEditUser",\n         postonly(_doChangeUser),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userFolderDelGroups\',\n+        "userFolderDelGroups",\n         postonly(_doDelGroups),\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userSetGroups\',\n+        "userSetGroups",\n         _userSetGroups,\n         add=True,\n-        deprecated="Method from GRUF was removed."\n+        deprecated="Method from GRUF was removed.",\n     )\n     wrap_method(\n         PluggableAuthService,\n-        \'userSetPassword\',\n+        "userSetPassword",\n         userSetPassword,\n         add=True,\n-        roles=PermissionRole(ManageUsers, (\'Manager\',))\n+        roles=PermissionRole(ManageUsers, ("Manager",)),\n     )\ndiff --git a/src/Products/PlonePAS/patch.py b/src/Products/PlonePAS/patch.py\nindex 3eaea2fe..5d737255 100644\n--- a/src/Products/PlonePAS/patch.py\n+++ b/src/Products/PlonePAS/patch.py\n@@ -1,19 +1,20 @@\n-# -*- coding: utf-8 -*-\n from zope.deprecation import deprecation\n+\n import logging\n \n-logger = logging.getLogger(\'PlonePAS\')\n \n-PATTERN = \'__PlonePAS_%s__\'\n+logger = logging.getLogger("PlonePAS")\n+\n+PATTERN = "__PlonePAS_%s__"\n \n \n def call(self, __name__, *args, **kw):\n     return getattr(self, PATTERN % __name__)(*args, **kw)\n \n \n-WRAPPER = \'__PlonePAS_is_wrapper_method__\'\n-ADDED = \'__PlonePAS_is_added_method__\'\n-ORIG_NAME = \'__PlonePAS_original_method_name__\'\n+WRAPPER = "__PlonePAS_is_wrapper_method__"\n+ADDED = "__PlonePAS_is_added_method__"\n+ORIG_NAME = "__PlonePAS_original_method_name__"\n \n _marker = dict()  # type: ignore\n \n@@ -22,31 +23,27 @@ def isWrapperMethod(meth):\n     return getattr(meth, WRAPPER, False)\n \n \n-def wrap_method(klass, name, method,\n-                pattern=PATTERN, add=False, roles=None, deprecated=False):\n-    """takes a method and set it to a class. Annotates with hints what happened.\n-    """\n+def wrap_method(\n+    klass, name, method, pattern=PATTERN, add=False, roles=None, deprecated=False\n+):\n+    """takes a method and set it to a class. Annotates with hints what happened."""\n     new_name = pattern % name\n     if not add:\n         old_method = getattr(klass, name)\n         if isWrapperMethod(old_method):\n             logger.warn(\n-                \'PlonePAS: *NOT* wrapping already wrapped method at \'\n-                \'{0}.{1}\'.format(\n-                    klass.__name__, name)\n+                "PlonePAS: *NOT* wrapping already wrapped method at "\n+                "{}.{}".format(klass.__name__, name)\n             )\n \n             return\n-        logger.debug(\n-            \'PlonePAS: Wrapping method at %s.%s\',\n-            klass.__name__, name\n-        )\n+        logger.debug("PlonePAS: Wrapping method at %s.%s", klass.__name__, name)\n         setattr(klass, new_name, old_method)\n         setattr(method, ORIG_NAME, new_name)\n         setattr(method, WRAPPER, True)\n         setattr(method, ADDED, False)\n     else:\n-        logger.debug(\'PlonePAS: Adding method at %s.%s\', klass.__name__, name)\n+        logger.debug("PlonePAS: Adding method at %s.%s", klass.__name__, name)\n         setattr(method, WRAPPER, False)\n         setattr(method, ADDED, True)\n \n@@ -56,9 +53,9 @@ def wrap_method(klass, name, method,\n         setattr(klass, name, method)\n \n     if roles is not None:\n-        roles_attr = \'{0}__roles__\'.format(name)\n+        roles_attr = f"{name}__roles__"\n         logger.debug(\n-            \'PlonePAS: Setting new permission roles at {0}.{1}\'.format(\n+            "PlonePAS: Setting new permission roles at {}.{}".format(\n                 klass.__name__, name\n             )\n         )\n@@ -69,8 +66,9 @@ def unwrap_method(klass, name):\n     # seems to be dead code, nowwhere used nor tested\n     old_method = getattr(klass, name)\n     if not isWrapperMethod(old_method):\n-        raise ValueError(\'Trying to unwrap non-wrapped \'\n-                         \'method at %s.%s\' % (klass.__name__, name))\n+        raise ValueError(\n+            "Trying to unwrap non-wrapped " "method at %s.%s" % (klass.__name__, name)\n+        )\n     orig_name = getattr(old_method, ORIG_NAME)\n     new_method = getattr(klass, orig_name)\n     delattr(klass, orig_name)\ndiff --git a/src/Products/PlonePAS/permissions.py b/src/Products/PlonePAS/permissions.py\nindex 0ab494d1..97d5e7a7 100644\n--- a/src/Products/PlonePAS/permissions.py\n+++ b/src/Products/PlonePAS/permissions.py\n@@ -1,17 +1,17 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permission import addPermission\n \n-AddGroups = \'Add Groups\'\n-addPermission(AddGroups, default_roles=(\'Manager\',))\n \n-ManageGroups = \'Manage Groups\'\n-addPermission(ManageGroups, default_roles=(\'Manager\',))\n+AddGroups = "Add Groups"\n+addPermission(AddGroups, default_roles=("Manager",))\n \n-ViewGroups = \'View Groups\'\n-addPermission(ViewGroups, default_roles=(\'Manager\', \'Owner\', \'Member\'))\n+ManageGroups = "Manage Groups"\n+addPermission(ManageGroups, default_roles=("Manager",))\n \n-DeleteGroups = \'Delete Groups\'\n-addPermission(DeleteGroups, default_roles=(\'Manager\', ))\n+ViewGroups = "View Groups"\n+addPermission(ViewGroups, default_roles=("Manager", "Owner", "Member"))\n \n-SetGroupOwnership = \'Set Group Ownership\'\n-addPermission(SetGroupOwnership, default_roles=(\'Manager\', \'Owner\'))\n+DeleteGroups = "Delete Groups"\n+addPermission(DeleteGroups, default_roles=("Manager",))\n+\n+SetGroupOwnership = "Set Group Ownership"\n+addPermission(SetGroupOwnership, default_roles=("Manager", "Owner"))\ndiff --git a/src/Products/PlonePAS/plugins/__init__.py b/src/Products/PlonePAS/plugins/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/plugins/__init__.py\n+++ b/src/Products/PlonePAS/plugins/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/plugins/autogroup.py b/src/Products/PlonePAS/plugins/autogroup.py\nindex 5783ef63..df40eba6 100644\n--- a/src/Products/PlonePAS/plugins/autogroup.py\n+++ b/src/Products/PlonePAS/plugins/autogroup.py\n@@ -1,20 +1,18 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n-from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IGroupEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IGroupEnumerationPlugin\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n+from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n from zope.interface import implementer\n \n+\n manage_addAutoGroupForm = PageTemplateFile("../zmi/AutoGroupForm", globals())\n \n \n-def manage_addAutoGroup(self, id, title=\'\', group=\'\', description=\'\',\n-                        RESPONSE=None):\n+def manage_addAutoGroup(self, id, title="", group="", description="", RESPONSE=None):\n     """Add an Auto Group plugin."""\n \n     plugin = AutoGroup(id, title, group, description)\n@@ -23,12 +21,13 @@ def manage_addAutoGroup(self, id, title=\'\', group=\'\', description=\'\',\n     if RESPONSE is not None:\n         return RESPONSE.redirect(\n             "%s/manage_workspace?manage_tabs_message=AutoGroup+plugin+added"\n-            % self.absolute_url())\n+            % self.absolute_url()\n+        )\n \n \n class VirtualGroup(PropertiedUser):\n-    def __init__(self, id, title=\'\', description=\'\'):\n-        super(VirtualGroup, self).__init__(id)\n+    def __init__(self, id, title="", description=""):\n+        super().__init__(id)\n         self.id = id\n         self.title = title\n         self.description = description\n@@ -62,38 +61,27 @@ def isGroup(self):\n \n \n @implementer(\n-    IGroupEnumerationPlugin,\n-    IGroupsPlugin,\n-    IGroupIntrospection,\n-    IPropertiesPlugin\n+    IGroupEnumerationPlugin, IGroupsPlugin, IGroupIntrospection, IPropertiesPlugin\n )\n class AutoGroup(BasePlugin):\n     meta_type = "Automatic Group Plugin"\n \n     _properties = (\n-        {\'id\': \'title\',\n-         \'label\': \'Title\',\n-         \'type\': \'string\',\n-         \'mode\': \'w\'},\n-        {\'id\': \'group\',\n-         \'label\': \'Group\',\n-         \'type\': \'string\',\n-         \'mode\': \'w\'},\n-        {\'id\': \'description\',\n-         \'label\': \'Description\',\n-         \'type\': \'string\',\n-         \'mode\': \'w\'},\n+        {"id": "title", "label": "Title", "type": "string", "mode": "w"},\n+        {"id": "group", "label": "Group", "type": "string", "mode": "w"},\n+        {"id": "description", "label": "Description", "type": "string", "mode": "w"},\n     )\n \n-    def __init__(self, id, title=\'\', group=None, description=\'\'):\n+    def __init__(self, id, title="", group=None, description=""):\n         self._setId(id)\n         self.title = title\n         self.group = group\n         self.description = description\n \n     # IGroupEnumerationPlugin implementation\n-    def enumerateGroups(self, id=None, exact_match=False, sort_by=None,\n-                        max_results=None, **kw):\n+    def enumerateGroups(\n+        self, id=None, exact_match=False, sort_by=None, max_results=None, **kw\n+    ):\n         if kw:\n             return []\n \n@@ -107,10 +95,14 @@ def enumerateGroups(self, id=None, exact_match=False, sort_by=None,\n             if not exact_match and id not in mygroup:\n                 return []\n \n-        return [{\'id\': self.group,\n-                 \'groupid\': self.group,\n-                 \'title\': self.title,\n-                 \'pluginid\': self.getId()}]\n+        return [\n+            {\n+                "id": self.group,\n+                "groupid": self.group,\n+                "title": self.title,\n+                "pluginid": self.getId(),\n+            }\n+        ]\n \n     # IGroupsPlugin implementation\n     def getGroupsForPrincipal(self, principal, request=None):\n@@ -124,8 +116,7 @@ def getGroupById(self, group_id):\n         if group_id != self.group:\n             return None\n \n-        return VirtualGroup(self.group, title=self.title,\n-                            description=self.description)\n+        return VirtualGroup(self.group, title=self.title, description=self.description)\n \n     def getGroups(self):\n         return [self.getGroupById(id) for id in self.getGroupIds()]\n@@ -139,8 +130,7 @@ def getGroupMembers(self, group_id):\n     # IPropertiesPlugin:\n     def getPropertiesForUser(self, user, request=None):\n         if user == self.group:\n-            return {\'title\': self.title,\n-                    \'description\': self.description}\n+            return {"title": self.title, "description": self.description}\n         else:\n             return {}\n \ndiff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex ab85046e..9a195279 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Class: ExtendedCookieAuthHelper\n \n Simply extends the standard CookieAuthHelper provided via regular\n@@ -6,35 +5,31 @@\n provide similar functionality as CookieCrumbler does... by giving\n the portal the ability to provide a setAuthCookie method.\n """\n+from AccessControl.class_init import InitializeClass\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n from plone.registry.interfaces import IRegistry\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IChallengePlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ICredentialsResetPlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ICredentialsUpdatePlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ILoginPasswordHostExtractionPlugin\n-from Products.PluggableAuthService.plugins.CookieAuthHelper \\\n-    import CookieAuthHelper as BasePlugin\n-from six.moves.urllib.parse import quote\n-from zope.interface import implementer\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n+from Products.PluggableAuthService.interfaces.plugins import ICredentialsResetPlugin\n+from Products.PluggableAuthService.interfaces.plugins import ICredentialsUpdatePlugin\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    ILoginPasswordHostExtractionPlugin,\n+)\n+from Products.PluggableAuthService.plugins.CookieAuthHelper import (\n+    CookieAuthHelper as BasePlugin,\n+)\n+from urllib.parse import quote\n from zope.component import getUtility\n+from zope.interface import implementer\n \n \n-def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\n-                                       RESPONSE=None, **kw):\n-    """Create an instance of a extended cookie auth helper.\n-    """\n+def manage_addExtendedCookieAuthHelper(self, id, title="", RESPONSE=None, **kw):\n+    """Create an instance of a extended cookie auth helper."""\n \n     self = self.this()\n \n@@ -43,11 +38,11 @@ def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\n     o = getattr(aq_base(self), id)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n+\n \n manage_addExtendedCookieAuthHelperForm = DTMLFile(\n-    "../zmi/ExtendedCookieAuthHelperForm",\n-    globals()\n+    "../zmi/ExtendedCookieAuthHelperForm", globals()\n )\n \n \n@@ -55,32 +50,30 @@ def manage_addExtendedCookieAuthHelper(self, id, title=\'\',\n     ILoginPasswordHostExtractionPlugin,\n     IChallengePlugin,\n     ICredentialsUpdatePlugin,\n-    ICredentialsResetPlugin\n+    ICredentialsResetPlugin,\n )\n class ExtendedCookieAuthHelper(BasePlugin):\n     """Multi-plugin which adds ability to override the updating of cookie via\n     a setAuthCookie method/script.\n     """\n \n-    meta_type = \'Extended Cookie Auth Helper\'\n+    meta_type = "Extended Cookie Auth Helper"\n     security = ClassSecurityInfo()\n \n     @security.private\n     def updateCredentials(self, request, response, login, new_password):\n-        """Override standard updateCredentials method\n-        """\n+        """Override standard updateCredentials method"""\n         cookie_val = self.get_cookie_value(login, new_password)\n         kw = {}\n         registry = getUtility(IRegistry)\n-        length = registry.get(\'plone.auth_cookie_length\', \'0\')\n+        length = registry.get("plone.auth_cookie_length", "0")\n         try:\n             length = int(length)\n         except ValueError:\n             length = 0\n         if length:\n-            kw.update(expires=(DateTime() + length).toZone(\'GMT\').rfc822())\n-        response.setCookie(\n-            self.cookie_name, quote(cookie_val), path=\'/\', **kw)\n+            kw.update(expires=(DateTime() + length).toZone("GMT").rfc822())\n+        response.setCookie(self.cookie_name, quote(cookie_val), path="/", **kw)\n \n     @security.public\n     def login(self):\n@@ -93,9 +86,9 @@ def login(self):\n         login_next.cpy script.\n         """\n         request = self.REQUEST\n-        response = request[\'RESPONSE\']\n+        response = request["RESPONSE"]\n \n-        password = request.get(\'__ac_password\', \'\')\n+        password = request.get("__ac_password", "")\n \n         user = getSecurityManager().getUser()\n         login = user.getUserName()\n@@ -111,8 +104,7 @@ def login(self):\n             # Folder!\n             pas_instance = self._getPAS()\n             if pas_instance is not None:\n-                pas_instance.updateCredentials(request, response, login,\n-                                               password)\n+                pas_instance.updateCredentials(request, response, login, password)\n \n \n InitializeClass(ExtendedCookieAuthHelper)\ndiff --git a/src/Products/PlonePAS/plugins/crumbler.py b/src/Products/PlonePAS/plugins/crumbler.py\nindex 1c940fc9..296cf656 100644\n--- a/src/Products/PlonePAS/plugins/crumbler.py\n+++ b/src/Products/PlonePAS/plugins/crumbler.py\n@@ -1,28 +1,28 @@\n-# -*- coding: utf-8 -*-\n """ Class: CookieCrumblingPlugin\n \n Acts as auth plugin, but injects cookie form credentials as HTTPBasicAuth.\n This allows form logins to fall through to parent user folders.\n \n """\n+from AccessControl.class_init import InitializeClass\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from OFS.Folder import Folder\n from Products.CMFCore.CookieCrumbler import manage_addCC\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from zope.interface import implementer\n+\n import logging\n \n-logger = logging.getLogger(\'PlonePAS\')\n \n-CC_ID = \'cookie_auth\'\n+logger = logging.getLogger("PlonePAS")\n+\n+CC_ID = "cookie_auth"\n \n \n-def manage_addCookieCrumblingPlugin(self, id, title=\'\',\n-                                    RESPONSE=None, **kw):\n+def manage_addCookieCrumblingPlugin(self, id, title="", RESPONSE=None, **kw):\n     """\n     Create an instance of a cookie crumbling plugin.\n     """\n@@ -35,10 +35,12 @@ def manage_addCookieCrumblingPlugin(self, id, title=\'\',\n     manage_addCC(o, CC_ID)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n \n-manage_addCookieCrumblingPluginForm = \\\n-    DTMLFile("../zmi/CookieCrumblingPluginForm", globals())\n+\n+manage_addCookieCrumblingPluginForm = DTMLFile(\n+    "../zmi/CookieCrumblingPluginForm", globals()\n+)\n \n \n @implementer(IExtractionPlugin)\n@@ -46,7 +48,8 @@ class CookieCrumblingPlugin(Folder, BasePlugin):\n     """Multi-plugin for injecting HTTP Basic Authentication\n     credentials from form credentials.\n     """\n-    meta_type = \'Cookie Crumbling Plugin\'\n+\n+    meta_type = "Cookie Crumbling Plugin"\n \n     security = ClassSecurityInfo()\n \n@@ -59,8 +62,7 @@ def _getCC(self):\n \n     @security.private\n     def extractCredentials(self, request):\n-        """ Extract basic auth credentials from \'request\'.\n-        """\n+        """Extract basic auth credentials from \'request\'."""\n \n         try:\n             self._getCC().modifyRequest(request, request.RESPONSE)\n@@ -70,4 +72,5 @@ def extractCredentials(self, request):\n \n         return {}\n \n+\n InitializeClass(CookieCrumblingPlugin)\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex dd8ad77b..fcdc0f65 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n """\n ZODB Group Implementation with basic introspection and\n management (ie. rw) capabilities.\n \n """\n+from .ufactory import PloneUser\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n@@ -13,24 +13,23 @@\n from Products.PlonePAS.interfaces.capabilities import IGroupCapability\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n from Products.PlonePAS.interfaces.group import IGroupManagement\n-from Products.PluggableAuthService.PluggableAuthService \\\n-    import _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IGroupEnumerationPlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IPropertiesPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IGroupEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n from Products.PluggableAuthService.interfaces.plugins import IRolesPlugin\n-from Products.PluggableAuthService.plugins.ZODBGroupManager \\\n-    import ZODBGroupManager\n-from .ufactory import PloneUser\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n+from Products.PluggableAuthService.plugins.ZODBGroupManager import ZODBGroupManager\n from zope.interface import implementer\n+\n import logging\n \n+\n manage_addGroupManagerForm = DTMLFile("../zmi/GroupManagerForm", globals())\n-logger = logging.getLogger(\'PlonePAS\')\n+logger = logging.getLogger("PlonePAS")\n \n \n-def manage_addGroupManager(self, id, title=\'\', RESPONSE=None):\n+def manage_addGroupManager(self, id, title="", RESPONSE=None):\n     """\n     Add a zodb group manager with management and introspection\n     capabilities to pas.\n@@ -40,15 +39,10 @@ def manage_addGroupManager(self, id, title=\'\', RESPONSE=None):\n     self._setObject(grum.getId(), grum)\n \n     if RESPONSE is not None:\n-        return RESPONSE.redirect(\'manage_workspace\')\n+        return RESPONSE.redirect("manage_workspace")\n \n \n-@implementer(\n-    IGroupManagement,\n-    IGroupIntrospection,\n-    IGroupCapability,\n-    IDeleteCapability\n-)\n+@implementer(IGroupManagement, IGroupIntrospection, IGroupCapability, IDeleteCapability)\n class GroupManager(ZODBGroupManager):\n \n     meta_type = "Group Manager"\n@@ -78,8 +72,9 @@ def addPrincipalToGroup(self, principal_id, group_id):\n         return True\n \n     def removePrincipalFromGroup(self, principal_id, group_id):\n-        already = ZODBGroupManager.removePrincipalFromGroup(self, principal_id,\n-                                                            group_id)\n+        already = ZODBGroupManager.removePrincipalFromGroup(\n+            self, principal_id, group_id\n+        )\n         if already:\n             self._group_principal_map[group_id].remove(principal_id)\n         return True\n@@ -88,15 +83,16 @@ def removePrincipalFromGroup(self, principal_id, group_id):\n     # overrides for api matching/massage\n \n     def updateGroup(self, group_id, title=None, description=None):\n-        ZODBGroupManager.updateGroup(self, group_id, title=title,\n-                                     description=description)\n+        ZODBGroupManager.updateGroup(\n+            self, group_id, title=title, description=description\n+        )\n         return True\n \n     #################################\n     # introspection interface\n \n     def getGroupById(self, group_id, default=None):\n-        plugins = self._getPAS()._getOb(\'plugins\')\n+        plugins = self._getPAS()._getOb("plugins")\n         title = None\n         if group_id not in self.getGroupIds():\n             return default\n@@ -158,7 +154,7 @@ def allowGroupRemove(self, user_id, group_id):\n \n     @security.private\n     def _createGroup(self, plugins, group_id, name):\n-        """ Create group object. For users, this can be done with a\n+        """Create group object. For users, this can be done with a\n         plugin, but I don\'t care to define one for that now. Just uses\n         PloneGroup.  But, the code\'s still here, just commented out.\n         This method based on PluggableAuthervice._createUser\n@@ -167,7 +163,7 @@ def _createGroup(self, plugins, group_id, name):\n \n     @security.private\n     def _findGroup(self, plugins, group_id, title=None, request=None):\n-        """ group_id -> decorated_group\n+        """group_id -> decorated_group\n         This method based on PluggableAuthService._findGroup\n         """\n         group = self._createGroup(plugins, group_id, title)\n@@ -179,8 +175,7 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n             if data:\n                 group.addPropertysheet(propfinder_id, data)\n \n-        groups = self._getPAS()._getGroupsForPrincipal(group, request,\n-                                                       plugins=plugins)\n+        groups = self._getPAS()._getGroupsForPrincipal(group, request, plugins=plugins)\n         group._addGroups(groups)\n \n         rolemakers = plugins.listPlugins(IRolesPlugin)\n@@ -190,24 +185,24 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n             if roles:\n                 group._addRoles(roles)\n \n-        group._addRoles([\'Authenticated\'])\n+        group._addRoles(["Authenticated"])\n \n         return group.__of__(self)\n \n     @security.private\n     def _verifyGroup(self, plugins, group_id=None, title=None):\n \n-        """ group_id -> boolean\n+        """group_id -> boolean\n         This method based on PluggableAuthService._verifyUser\n         """\n         criteria = {}\n \n         if group_id is not None:\n-            criteria[\'id\'] = group_id\n-            criteria[\'exact_match\'] = True\n+            criteria["id"] = group_id\n+            criteria["exact_match"] = True\n \n         if title is not None:\n-            criteria[\'title\'] = title\n+            criteria["title"] = title\n \n         if criteria:\n             enumerators = plugins.listPlugins(IGroupEnumerationPlugin)\n@@ -217,14 +212,13 @@ def _verifyGroup(self, plugins, group_id=None, title=None):\n                     info = enumerator.enumerateGroups(**criteria)\n \n                     if info:\n-                        return info[0][\'id\']\n+                        return info[0]["id"]\n \n                 except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                     logger.info(\n-                        \'PluggableAuthService: GroupEnumerationPlugin %s \'\n-                        \'error\',\n+                        "PluggableAuthService: GroupEnumerationPlugin %s " "error",\n                         enumerator_id,\n-                        exc_info=1\n+                        exc_info=1,\n                     )\n \n         return 0\n@@ -242,7 +236,7 @@ class PloneGroup(PloneUser):\n     _isGroup = True\n \n     def getId(self, unprefixed=None):\n-        """ -> user ID\n+        """-> user ID\n         Modified to accept silly GRUF param.\n         """\n         return self._id\n@@ -258,37 +252,33 @@ def getMemberIds(self, transitive=1):\n         members = []\n         for iid, introspector in introspectors:\n             try:\n-                members.extend(\n-                    list(introspector.getGroupMembers(self.getId())))\n+                members.extend(list(introspector.getGroupMembers(self.getId())))\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                 logger.info(\n-                    \'PluggableAuthService: getGroupMembers %s error\',\n-                    iid, exc_info=1)\n+                    "PluggableAuthService: getGroupMembers %s error", iid, exc_info=1\n+                )\n \n         return members\n \n     @security.public\n     def addMember(self, id):\n-        """Add the existing member with the given id to the group\n-        """\n+        """Add the existing member with the given id to the group"""\n         self.addPrincipalToGroup(id, self.getId())\n \n     @security.public\n     def removeMember(self, id):\n-        """Remove the member with the provided id from the group.\n-        """\n+        """Remove the member with the provided id from the group."""\n         self.removePrincipalFromGroup(id, self.getId())\n \n     @security.public\n     def getRolesInContext(self, object):\n-        """Since groups can\'t actually log in, do nothing.\n-        """\n+        """Since groups can\'t actually log in, do nothing."""\n         return []\n \n     @security.public\n     def allowed(self, object, object_roles=None):\n-        """Since groups can\'t actually log in, do nothing.\n-        """\n+        """Since groups can\'t actually log in, do nothing."""\n         return 0\n \n+\n InitializeClass(PloneGroup)\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex 5397b30d..b28c1abd 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n A Local Roles Plugin Implementation that respects Black Listing markers.\n \n@@ -7,13 +6,12 @@\n \n """\n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n-from Products.PluggableAuthService.plugins.LocalRolePlugin \\\n-    import LocalRolePlugin\n+from Products.PluggableAuthService.plugins.LocalRolePlugin import LocalRolePlugin\n from zope.interface import implementer\n \n \n@@ -25,10 +23,10 @@ def manage_addLocalRolesManager(dispatcher, id, title=None, RESPONSE=None):\n     dispatcher._setObject(lrm.getId(), lrm)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n \n-manage_addLocalRolesManagerForm = \\\n-    DTMLFile(\'../zmi/LocalRolesManagerForm\', globals())\n+\n+manage_addLocalRolesManagerForm = DTMLFile("../zmi/LocalRolesManagerForm", globals())\n \n \n @implementer(ILocalRolesPlugin)\n@@ -56,7 +54,7 @@ def getRolesInContext(self, user, object):\n         object = aq_inner(object)\n \n         while 1:\n-            local_roles = getattr(object, \'__ac_local_roles__\', None)\n+            local_roles = getattr(object, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n@@ -71,14 +69,14 @@ def getRolesInContext(self, user, object):\n             inner = aq_inner(object)\n             parent = aq_parent(inner)\n \n-            if getattr(object, \'__ac_local_roles_block__\', None):\n+            if getattr(object, "__ac_local_roles_block__", None):\n                 break\n \n             if parent is not None:\n                 object = parent\n                 continue\n \n-            new = getattr(object, \'__self__\', None)\n+            new = getattr(object, "__self__", None)\n \n             if new is not None:\n                 object = aq_inner(new)\n@@ -102,7 +100,7 @@ def checkLocalRolesAllowed(self, user, object, object_roles):\n \n         while 1:\n \n-            local_roles = getattr(inner_obj, \'__ac_local_roles__\', None)\n+            local_roles = getattr(inner_obj, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n@@ -127,14 +125,14 @@ def checkLocalRolesAllowed(self, user, object, object_roles):\n             inner = aq_inner(inner_obj)\n             parent = aq_parent(inner)\n \n-            if getattr(inner_obj, \'__ac_local_roles_block__\', None):\n+            if getattr(inner_obj, "__ac_local_roles_block__", None):\n                 break\n \n             if parent is not None:\n                 inner_obj = parent\n                 continue\n \n-            new = getattr(inner_obj, \'__self__\', None)\n+            new = getattr(inner_obj, "__self__", None)\n \n             if new is not None:\n                 inner_obj = aq_inner(new)\n@@ -150,7 +148,7 @@ def getAllLocalRolesInContext(self, context):\n \n         while True:\n \n-            local_roles = getattr(object, \'__ac_local_roles__\', None)\n+            local_roles = getattr(object, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n@@ -168,14 +166,14 @@ def getAllLocalRolesInContext(self, context):\n             inner = aq_inner(object)\n             parent = aq_parent(inner)\n \n-            if getattr(object, \'__ac_local_roles_block__\', None):\n+            if getattr(object, "__ac_local_roles_block__", None):\n                 break\n \n             if parent is not None:\n                 object = parent\n                 continue\n \n-            new = getattr(object, \'__self__\', None)\n+            new = getattr(object, "__self__", None)\n \n             if new is not None:\n                 object = aq_inner(new)\n@@ -185,4 +183,5 @@ def getAllLocalRolesInContext(self, context):\n \n         return roles\n \n+\n InitializeClass(LocalRolesManager)\ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex f0e36f89..2a50f29a 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Password Validation plugin (IValidationPlugin)\n Mutable Property Provider\n@@ -11,16 +10,15 @@\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n \n-_ = MessageFactory(\'plone\')\n \n-manage_addPasswordPolicyForm = PageTemplateFile(\n-    "../zmi/PasswordPolicyForm",\n-    globals()\n-)\n+_ = MessageFactory("plone")\n \n+manage_addPasswordPolicyForm = PageTemplateFile("../zmi/PasswordPolicyForm", globals())\n \n-def manage_addPasswordPolicyPlugin(self, id, title=\'\',\n-                                   RESPONSE=None, schema=None, **kw):\n+\n+def manage_addPasswordPolicyPlugin(\n+    self, id, title="", RESPONSE=None, schema=None, **kw\n+):\n     """\n     Create an instance of a password validation plugin.\n     """\n@@ -30,48 +28,44 @@ def manage_addPasswordPolicyPlugin(self, id, title=\'\',\n     if RESPONSE is not None:\n         return RESPONSE.redirect(\n             "%s/manage_workspace?"\n-            "manage_tabs_message=DefaultPasswordPlugin+plugin+added" %\n-            self.absolute_url()\n+            "manage_tabs_message=DefaultPasswordPlugin+plugin+added"\n+            % self.absolute_url()\n         )\n \n \n @implementer(IValidationPlugin)\n class PasswordPolicyPlugin(BasePlugin):\n-    """Simple Password Policy to ensure password is 5 chars long.\n-    """\n+    """Simple Password Policy to ensure password is 5 chars long."""\n \n-    meta_type = \'Default Plone Password Policy\'\n+    meta_type = "Default Plone Password Policy"\n \n     security = ClassSecurityInfo()\n \n-    def __init__(self, id, title=\'\'):\n-        """Create a default plone password policy to ensure 5 char passwords\n-        """\n+    def __init__(self, id, title=""):\n+        """Create a default plone password policy to ensure 5 char passwords"""\n         self.id = id\n         self.title = title\n \n     @security.private\n     def validateUserInfo(self, user, set_id, set_info):\n-        """ See IValidationPlugin. Used to validate password property\n-        """\n+        """See IValidationPlugin. Used to validate password property"""\n \n         if not set_info:\n             return []\n-        password = set_info.get(\'password\', None)\n+        password = set_info.get("password", None)\n         if password is None:\n             return []\n-        elif password == \'\':\n-            return [{\'id\': \'password\', \'error\': _(u\'Minimum 5 characters.\')}]\n+        elif password == "":\n+            return [{"id": "password", "error": _("Minimum 5 characters.")}]\n         elif len(password) < 5:\n             return [\n                 {\n-                    \'id\': \'password\',\n-                    \'error\': _(\n-                        u\'Your password must contain at least 5 characters.\'\n-                    )\n+                    "id": "password",\n+                    "error": _("Your password must contain at least 5 characters."),\n                 }\n             ]\n         else:\n             return []\n \n+\n InitializeClass(PasswordPolicyPlugin)\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex 430a9dfa..f40f4114 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Mutable Property Provider\n """\n@@ -11,23 +10,23 @@\n from Products.PlonePAS.sheet import MutablePropertySheet\n from Products.PlonePAS.sheet import validateValue\n from Products.PlonePAS.utils import safe_unicode\n-from Products.PluggableAuthService.UserPropertySheet import _guessSchema\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import IUserEnumerationPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n+from Products.PluggableAuthService.UserPropertySheet import _guessSchema\n from ZODB.PersistentMapping import PersistentMapping\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n \n import copy\n-import six\n \n-_ = MessageFactory(\'plone\')\n+\n+_ = MessageFactory("plone")\n \n \n-def manage_addZODBMutablePropertyProvider(self, id, title=\'\',\n-                                          RESPONSE=None, schema=None, **kw):\n+def manage_addZODBMutablePropertyProvider(\n+    self, id, title="", RESPONSE=None, schema=None, **kw\n+):\n     """\n     Create an instance of a mutable property manager.\n     """\n@@ -35,32 +34,30 @@ def manage_addZODBMutablePropertyProvider(self, id, title=\'\',\n     self._setObject(o.getId(), o)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n+\n \n manage_addZODBMutablePropertyProviderForm = DTMLFile(\n-    "../zmi/MutablePropertyProviderForm", globals())\n+    "../zmi/MutablePropertyProviderForm", globals()\n+)\n \n \n def isStringType(data):\n-    return isinstance(data, str) or isinstance(data, six.text_type)\n+    return isinstance(data, str) or isinstance(data, str)\n \n \n-@implementer(\n-    IPropertiesPlugin,\n-    IUserEnumerationPlugin,\n-    IMutablePropertiesPlugin\n-)\n+@implementer(IPropertiesPlugin, IUserEnumerationPlugin, IMutablePropertiesPlugin)\n class ZODBMutablePropertyProvider(BasePlugin):\n     """Storage for mutable properties in the ZODB for users/groups.\n \n     API sounds like it\'s only for users, but groups work as well.\n     """\n \n-    meta_type = \'ZODB Mutable Property Provider\'\n+    meta_type = "ZODB Mutable Property Provider"\n \n     security = ClassSecurityInfo()\n \n-    def __init__(self, id, title=\'\', schema=None, **kw):\n+    def __init__(self, id, title="", schema=None, **kw):\n         """Create in-ZODB mutable property provider.\n \n         Provide a schema either as a list of (name,type,value) tuples\n@@ -106,7 +103,7 @@ def _getSchema(self, isgroup=None):\n             # Don\'t fail badly if tool is not available.\n             if mdtool is not None:\n                 mdschema = mdtool.propertyMap()\n-                schema = [(elt[\'id\'], elt[\'type\']) for elt in mdschema]\n+                schema = [(elt["id"], elt["type"]) for elt in mdschema]\n         return schema\n \n     def _getDefaultValues(self, isgroup=None):\n@@ -154,7 +151,7 @@ def getPropertiesForUser(self, user, request=None):\n         NOTE: Must always return something, or else the property sheet\n         won\'t get created and this will screw up portal_memberdata.\n         """\n-        isGroup = getattr(user, \'isGroup\', lambda: None)()\n+        isGroup = getattr(user, "isGroup", lambda: None)()\n \n         data = self._storage.get(user.getId())\n         defaults = self._getDefaultValues(isGroup)\n@@ -166,37 +163,36 @@ def getPropertiesForUser(self, user, request=None):\n             if key not in data:\n                 data[key] = val\n \n-        return MutablePropertySheet(self.id,\n-                                    schema=self._getSchema(isGroup), **data)\n+        return MutablePropertySheet(self.id, schema=self._getSchema(isGroup), **data)\n \n     @security.private\n     def setPropertiesForUser(self, user, propertysheet):\n         """Set the properties of a user or group based on the contents of a\n         property sheet.\n         """\n-        isGroup = getattr(user, \'isGroup\', lambda: None)()\n+        isGroup = getattr(user, "isGroup", lambda: None)()\n \n         properties = dict(propertysheet.propertyItems())\n \n         for name, property_type in self._getSchema(isGroup) or ():\n-            if (\n-                name in properties and not\n-                validateValue(property_type, properties[name])\n+            if name in properties and not validateValue(\n+                property_type, properties[name]\n             ):\n                 raise ValueError(\n-                    \'Invalid value: %s does not conform to %s\' %\n-                    (name, property_type)\n+                    "Invalid value: {} does not conform to {}".format(\n+                        name, property_type\n+                    )\n                 )\n \n         allowed_prop_keys = [pn for pn, pt in self._getSchema(isGroup) or ()]\n         if allowed_prop_keys:\n             prop_names = set(properties.keys()) - set(allowed_prop_keys)\n             if prop_names:\n-                raise ValueError(\'Unknown Properties: %r\' % prop_names)\n+                raise ValueError("Unknown Properties: %r" % prop_names)\n \n         userid = user.getId()\n         userprops = self._storage.get(userid)\n-        properties.update({\'isGroup\': isGroup})\n+        properties.update({"isGroup": isGroup})\n         if userprops is not None:\n             userprops.update(properties)\n             # notify persistence machinery of change\n@@ -206,8 +202,7 @@ def setPropertiesForUser(self, user, propertysheet):\n \n     @security.private\n     def deleteUser(self, user_id):\n-        """Delete all user properties\n-        """\n+        """Delete all user properties"""\n         # Do nothing if an unknown user_id is given\n         try:\n             del self._storage[user_id]\n@@ -216,8 +211,7 @@ def deleteUser(self, user_id):\n \n     @security.private\n     def testMemberData(self, memberdata, criteria, exact_match=False):\n-        """Test if a memberdata matches the search criteria.\n-        """\n+        """Test if a memberdata matches the search criteria."""\n         for (key, value) in criteria.items():\n             testvalue = memberdata.get(key, None)\n             if testvalue is None:\n@@ -244,10 +238,8 @@ def testMemberData(self, memberdata, criteria, exact_match=False):\n         return True\n \n     @security.private\n-    def enumerateUsers(self, id=None, login=None,\n-                       exact_match=False, **kw):\n-        """ See IUserEnumerationPlugin.\n-        """\n+    def enumerateUsers(self, id=None, login=None, exact_match=False, **kw):\n+        """See IUserEnumerationPlugin."""\n         plugin_id = self.getId()\n \n         # This plugin can\'t search for a user by id or login, because there is\n@@ -258,21 +250,29 @@ def enumerateUsers(self, id=None, login=None,\n \n         criteria = copy.copy(kw)\n \n-        users = [(user, data) for (user, data) in self._storage.items()\n-                 if self.testMemberData(data, criteria, exact_match)\n-                 and not data.get(\'isGroup\', False)]\n-\n-        user_info = [{\'id\': self.prefix + user_id,\n-                      \'login\': user_id,\n-                      \'title\': data.get(\'fullname\', user_id),\n-                      \'description\': data.get(\'fullname\', user_id),\n-                      \'email\': data.get(\'email\', \'\'),\n-                      \'pluginid\': plugin_id} for (user_id, data) in users]\n+        users = [\n+            (user, data)\n+            for (user, data) in self._storage.items()\n+            if self.testMemberData(data, criteria, exact_match)\n+            and not data.get("isGroup", False)\n+        ]\n+\n+        user_info = [\n+            {\n+                "id": self.prefix + user_id,\n+                "login": user_id,\n+                "title": data.get("fullname", user_id),\n+                "description": data.get("fullname", user_id),\n+                "email": data.get("email", ""),\n+                "pluginid": plugin_id,\n+            }\n+            for (user_id, data) in users\n+        ]\n \n         return tuple(user_info)\n \n     def updateUser(self, user_id, login_name):\n-        """ Update the login name of the user with id user_id.\n+        """Update the login name of the user with id user_id.\n \n         This is a new part of the IUserEnumerationPlugin interface, but\n         not interesting for us.\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 9c836ae0..61247d47 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n group aware role manager, returns roles assigned to group a principal\n is a member of, in addition to the explicit roles assigned directly\n@@ -6,21 +5,20 @@\n \n """\n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.capabilities import IAssignRoleCapability\n from Products.PlonePAS.utils import getGroupsForPrincipal\n from Products.PluggableAuthService.permissions import ManageUsers\n-from Products.PluggableAuthService.plugins.ZODBRoleManager \\\n-    import ZODBRoleManager\n+from Products.PluggableAuthService.plugins.ZODBRoleManager import ZODBRoleManager\n from zope.interface import implementer\n \n \n-def manage_addGroupAwareRoleManager(self, id, title=\'\', RESPONSE=None):\n+def manage_addGroupAwareRoleManager(self, id, title="", RESPONSE=None):\n     """\n     this is a doc string\n     """\n@@ -28,10 +26,12 @@ def manage_addGroupAwareRoleManager(self, id, title=\'\', RESPONSE=None):\n     self._setObject(garm.getId(), garm)\n \n     if RESPONSE is not None:\n-        RESPONSE.redirect(\'manage_workspace\')\n+        RESPONSE.redirect("manage_workspace")\n+\n \n manage_addGroupAwareRoleManagerForm = DTMLFile(\n-    \'../zmi/GroupAwareRoleManagerForm\', globals())\n+    "../zmi/GroupAwareRoleManagerForm", globals()\n+)\n \n \n @implementer(IAssignRoleCapability)\n@@ -42,9 +42,8 @@ class GroupAwareRoleManager(ZODBRoleManager):\n \n     def updateRolesList(self):\n         role_holder = aq_parent(aq_inner(self._getPAS()))\n-        for role in getattr(role_holder, \'__ac_roles__\', ()):\n-            if role not in (\'Anonymous\', \'Authenticated\') and \\\n-                    role not in self._roles:\n+        for role in getattr(role_holder, "__ac_roles__", ()):\n+            if role not in ("Anonymous", "Authenticated") and role not in self._roles:\n                 try:\n                     self.addRole(role)\n                 except KeyError:\n@@ -53,7 +52,7 @@ def updateRolesList(self):\n     # don\'t blow up if manager already exists; mostly for ZopeVersionControl\n     def manage_afterAdd(self, item, container):\n         try:\n-            self.addRole(\'Manager\')\n+            self.addRole("Manager")\n         except KeyError:\n             pass\n \n@@ -63,23 +62,15 @@ def manage_afterAdd(self, item, container):\n     @security.protected(ManageUsers)\n     def assignRoleToPrincipal(self, role_id, principal_id, REQUEST=None):\n         try:\n-            return ZODBRoleManager.assignRoleToPrincipal(\n-                self,\n-                role_id,\n-                principal_id\n-            )\n+            return ZODBRoleManager.assignRoleToPrincipal(self, role_id, principal_id)\n         except KeyError:\n             # Lazily update our roles list and try again\n             self.updateRolesList()\n-            return ZODBRoleManager.assignRoleToPrincipal(\n-                self,\n-                role_id,\n-                principal_id\n-            )\n+            return ZODBRoleManager.assignRoleToPrincipal(self, role_id, principal_id)\n \n     @security.protected(ManageUsers)\n     def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n-        """ Assign a specific set of roles, and only those roles, to a\n+        """Assign a specific set of roles, and only those roles, to a\n         principal.\n \n         o no return value\n@@ -87,7 +78,7 @@ def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n         o Raise KeyError if a role_id is unknown.\n         """\n         for role_id in roles:\n-            if role_id not in (\'Authenticated\', \'Anonymous\', \'Owner\'):\n+            if role_id not in ("Authenticated", "Anonymous", "Owner"):\n                 try:\n                     # raise KeyError if unknown!\n                     self._roles[role_id]\n@@ -105,28 +96,23 @@ def assignRolesToPrincipal(self, roles, principal_id, REQUEST=None):\n \n     @security.private\n     def getRolesForPrincipal(self, principal, request=None):\n-        """ See IRolesPlugin.\n-        """\n-        roles = set([])\n-        principal_ids = set([])\n+        """See IRolesPlugin."""\n+        roles = set()\n+        principal_ids = set()\n         # Some services need to determine the roles obtained from groups\n         # while excluding the directly assigned roles.  In this case\n         # \'__ignore_direct_roles__\' = True should be pushed in the request.\n-        request = aq_get(self, \'REQUEST\', None)\n-        if request is None \\\n-           or not request.get(\'__ignore_direct_roles__\', False):\n+        request = aq_get(self, "REQUEST", None)\n+        if request is None or not request.get("__ignore_direct_roles__", False):\n             principal_ids.add(principal.getId())\n \n         # Some services may need the real roles of an user but **not**\n         # the ones he got through his groups. In this case, the\n         # \'__ignore_group_roles__\'= True should be previously pushed\n         # in the request.\n-        plugins = self._getPAS()[\'plugins\']\n-        if request is None \\\n-           or not request.get(\'__ignore_group_roles__\', False):\n-            principal_ids.update(\n-                getGroupsForPrincipal(principal, plugins, request)\n-            )\n+        plugins = self._getPAS()["plugins"]\n+        if request is None or not request.get("__ignore_group_roles__", False):\n+            principal_ids.update(getGroupsForPrincipal(principal, plugins, request))\n         for pid in principal_ids:\n             roles.update(self._principal_roles.get(pid, ()))\n         return tuple(roles)\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 9be8b467..06b8fe78 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -1,33 +1,25 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl.PermissionRole import _what_not_even_god_should_do\n from AccessControl.class_init import InitializeClass\n+from AccessControl.PermissionRole import _what_not_even_god_should_do\n from App.special_dtml import DTMLFile\n+from collections import OrderedDict\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n-from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n-from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n from Products.PluggableAuthService.interfaces.plugins import IUserFactoryPlugin\n-from Products.PluggableAuthService.interfaces.propertysheets \\\n-    import IPropertySheet\n+from Products.PluggableAuthService.interfaces.propertysheets import IPropertySheet\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n+from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from Products.PluggableAuthService.UserPropertySheet import UserPropertySheet\n from zope.interface import implementer\n \n-import six\n-\n-try:\n-    from collections import OrderedDict\n-except ImportError:\n-    from ordereddict import OrderedDict\n \n-manage_addPloneUserFactoryForm = DTMLFile(\'../zmi/PloneUserFactoryForm\',\n-                                          globals())\n+manage_addPloneUserFactoryForm = DTMLFile("../zmi/PloneUserFactoryForm", globals())\n \n _marker = object()\n \n \n-def manage_addPloneUserFactory(self, id, title=\'\', RESPONSE=None):\n+def manage_addPloneUserFactory(self, id, title="", RESPONSE=None):\n     """\n     Add a plone user factory\n     """\n@@ -36,16 +28,16 @@ def manage_addPloneUserFactory(self, id, title=\'\', RESPONSE=None):\n     self._setObject(puf.getId(), puf)\n \n     if RESPONSE is not None:\n-        return RESPONSE.redirect(\'manage_workspace\')\n+        return RESPONSE.redirect("manage_workspace")\n \n \n @implementer(IUserFactoryPlugin)\n class PloneUserFactory(BasePlugin):\n \n     security = ClassSecurityInfo()\n-    meta_type = \'Plone User Factory\'\n+    meta_type = "Plone User Factory"\n \n-    def __init__(self, id, title=\'\'):\n+    def __init__(self, id, title=""):\n         self.id = id\n         self.title = title or self.meta_type\n \n@@ -66,7 +58,7 @@ class PloneUser(PropertiedUser):\n     _isGroup = False\n \n     def __init__(self, id, login=None):\n-        super(PloneUser, self).__init__(id, login)\n+        super().__init__(id, login)\n         self._propertysheets = OrderedDict()\n \n     def _getPAS(self):\n@@ -101,7 +93,7 @@ def getGroupNames(self):\n         """Return ids of this user\'s groups. GRUF compat."""\n         return self.getGroups()\n \n-    security.declarePublic(\'getGroupIds\')\n+    security.declarePublic("getGroupIds")\n     getGroupIds = getGroupNames\n \n     #################################\n@@ -109,8 +101,7 @@ def getGroupNames(self):\n \n     @security.public\n     def getPropertysheet(self, id):\n-        """ -> propertysheet (wrapped if supported)\n-        """\n+        """-> propertysheet (wrapped if supported)"""\n         sheet = self._propertysheets[id]\n         try:\n             return sheet.__of__(self)\n@@ -119,7 +110,7 @@ def getPropertysheet(self, id):\n \n     @security.private\n     def addPropertysheet(self, id, data):\n-        """ -> add a prop sheet, given data which is either\n+        """-> add a prop sheet, given data which is either\n         a property sheet or a raw mapping.\n         """\n         if IPropertySheet.providedBy(data):\n@@ -128,7 +119,7 @@ def addPropertysheet(self, id, data):\n             sheet = UserPropertySheet(id, **data)\n \n         if self._propertysheets.get(id) is not None:\n-            raise KeyError(\'Duplicate property sheet: %s\' % id)\n+            raise KeyError("Duplicate property sheet: %s" % id)\n \n         self._propertysheets[id] = sheet\n \n@@ -147,7 +138,7 @@ def _getLocalRolesPlugins(self):\n \n     def getRolesInContext(self, object):\n         lrmanagers = self._getLocalRolesPlugins()\n-        roles = set([])\n+        roles = set()\n         for lrid, lrmanager in lrmanagers:\n             roles.update(lrmanager.getRolesInContext(self, object))\n         roles.update(self.getRoles())\n@@ -158,21 +149,20 @@ def allowed(self, object, object_roles=None):\n             return 0\n \n         # Short-circuit the common case of anonymous access.\n-        if object_roles is None or \'Anonymous\' in object_roles:\n+        if object_roles is None or "Anonymous" in object_roles:\n             return 1\n \n         # Provide short-cut access if object is protected by \'Authenticated\'\n         # role and user is not nobody\n-        if \'Authenticated\' in object_roles \\\n-           and self.getUserName() != \'Anonymous User\':\n+        if "Authenticated" in object_roles and self.getUserName() != "Anonymous User":\n             return 1\n \n         # Check for ancient role data up front, convert if found.\n         # This should almost never happen, and should probably be\n         # deprecated at some point.\n-        if \'Shared\' in object_roles:\n+        if "Shared" in object_roles:\n             object_roles = self._shared_roles(object)\n-            if object_roles is None or \'Anonymous\' in object_roles:\n+            if object_roles is None or "Anonymous" in object_roles:\n                 return 1\n \n         # Check for a role match with the normal roles given to\n@@ -201,7 +191,7 @@ def allowed(self, object, object_roles=None):\n         return None\n \n     def setProperties(self, properties=None, **kw):\n-        """ Set properties on a given user.\n+        """Set properties on a given user.\n \n         Accepts either keyword arguments or a mapping for the ``properties``\n         argument. The ``properties`` argument will take precedence over\n@@ -226,16 +216,8 @@ def setProperties(self, properties=None, **kw):\n     def getProperty(self, id, default=_marker):\n         for sheet in self.getOrderedPropertySheets():\n             if sheet.hasProperty(id):\n-                value = sheet.getProperty(id)\n-                if six.PY2 and isinstance(value, six.text_type):\n-                    # XXX Temporarily work around the fact that\n-                    # property sheets blindly store and return\n-                    # unicode. This is sub-optimal and should be\n-                    # dealed with at the property sheets level by\n-                    # using Zope\'s converters.\n-                    return value.encode(\'utf-8\')\n-                return value\n-\n+                return sheet.getProperty(id)\n         return default\n \n+\n InitializeClass(PloneUser)\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex c07cd37c..f24bae78 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n """\n ZODB based user manager with introspection and management interfaces.\n """\n from AccessControl import ClassSecurityInfo\n-from AccessControl.Permissions import manage_users as ManageUsers\n from AccessControl.class_init import InitializeClass\n+from AccessControl.Permissions import manage_users as ManageUsers\n from App.special_dtml import DTMLFile\n from AuthEncoding import AuthEncoding\n from Products.PlonePAS.interfaces.capabilities import IDeleteCapability\n@@ -12,40 +11,38 @@\n from Products.PlonePAS.interfaces.plugins import IUserIntrospection\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n from Products.PluggableAuthService.events import CredentialsUpdated\n-from Products.PluggableAuthService.plugins.ZODBUserManager \\\n-    import ZODBUserManager as BasePlugin\n+from Products.PluggableAuthService.plugins.ZODBUserManager import (\n+    ZODBUserManager as BasePlugin,\n+)\n from Products.PluggableAuthService.utils import createViewName\n from zope.event import notify\n from zope.interface import implementer\n \n-manage_addUserManagerForm = DTMLFile(\'../zmi/UserManagerForm\', globals())\n+\n+manage_addUserManagerForm = DTMLFile("../zmi/UserManagerForm", globals())\n \n \n def manage_addUserManager(dispatcher, id, title=None, REQUEST=None):\n-    """ Add a UserManager to a Pluggable Auth Service. """\n+    """Add a UserManager to a Pluggable Auth Service."""\n \n     pum = UserManager(id, title)\n     dispatcher._setObject(pum.getId(), pum)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(\n-            \'%s/manage_workspace\'\n-            \'?manage_tabs_message=\'\n-            \'UserManager+added.\'\n-            % dispatcher.absolute_url())\n+        REQUEST["RESPONSE"].redirect(\n+            "%s/manage_workspace"\n+            "?manage_tabs_message="\n+            "UserManager+added." % dispatcher.absolute_url()\n+        )\n \n \n @implementer(\n-    IUserManagement,\n-    IUserIntrospection,\n-    IDeleteCapability,\n-    IPasswordSetCapability\n+    IUserManagement, IUserIntrospection, IDeleteCapability, IPasswordSetCapability\n )\n class UserManager(BasePlugin):\n-    """PAS plugin for managing users. (adds write API)\n-    """\n+    """PAS plugin for managing users. (adds write API)"""\n \n-    meta_type = \'User Manager\'\n+    meta_type = "User Manager"\n     security = ClassSecurityInfo()\n \n     @security.protected(ManageUsers)\n@@ -57,10 +54,10 @@ def addUser(self, user_id, login_name, password):\n         Should go into PAS.\n         """\n         if self._user_passwords.get(user_id) is not None:\n-            raise KeyError(\'Duplicate user ID: %s\' % user_id)\n+            raise KeyError("Duplicate user ID: %s" % user_id)\n \n         if self._login_to_userid.get(login_name) is not None:\n-            raise KeyError(\'Duplicate login name: %s\' % login_name)\n+            raise KeyError("Duplicate login name: %s" % login_name)\n \n         if not AuthEncoding.is_encrypted(password):\n             password = AuthEncoding.pw_encrypt(password)\n@@ -69,21 +66,19 @@ def addUser(self, user_id, login_name, password):\n         self._userid_to_login[user_id] = login_name\n \n         # enumerateUsers return value has changed\n-        view_name = createViewName(\'enumerateUsers\')\n+        view_name = createViewName("enumerateUsers")\n         self.ZCacheable_invalidate(view_name=view_name)\n \n     # User Management interface\n \n     @security.private\n     def doDeleteUser(self, userid):\n-        """Given a user id, delete that user\n-        """\n+        """Given a user id, delete that user"""\n         return self.removeUser(userid)\n \n     @security.private\n     def doChangeUser(self, principal_id, password):\n-        """Change a user\'s password\n-        """\n+        """Change a user\'s password"""\n         if self._user_passwords.get(principal_id) is None:\n             raise RuntimeError("User does not exist: %s" % principal_id)\n         self._user_passwords[principal_id] = AuthEncoding.pw_encrypt(password)\n@@ -121,7 +116,7 @@ def getUserNames(self):\n         """\n         Return a list of usernames\n         """\n-        return [x[\'login_name\'] for x in self.listUserInfo()]\n+        return [x["login_name"] for x in self.listUserInfo()]\n \n     @security.protected(ManageUsers)\n     def getUsers(self):\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 94586119..f9d72040 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -1,32 +1,32 @@\n-# -*- coding: utf-8 -*-\n """\n Custom GenericSetup import steps for PAS in Plone.\n """\n \n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from plone.session.plugins.session import manage_addSessionPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import interfaces as plone_ifaces\n from Products.PlonePAS import config\n-from Products.PlonePAS.plugins import cookie_handler\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.plugins import IUserIntrospection\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n+from Products.PlonePAS.plugins import cookie_handler\n from Products.PluggableAuthService.Extensions.upgrade import replace_acl_users\n-from Products.PluggableAuthService.interfaces.authservice \\\n-    import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n-from Products.PluggableAuthService.interfaces.plugins \\\n-    import ICredentialsResetPlugin\n+from Products.PluggableAuthService.interfaces.plugins import ICredentialsResetPlugin\n from Products.PluggableAuthService.plugins import CookieAuthHelper\n-from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin \\\n-    import addRecursiveGroupsPlugin\n-from plone.session.plugins.session import manage_addSessionPlugin\n+from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (\n+    addRecursiveGroupsPlugin,\n+)\n from zope import component\n+\n import logging\n \n-logger = logging.getLogger(\'PlonePAS setup\')\n+\n+logger = logging.getLogger("PlonePAS setup")\n \n \n def activatePluginInterfaces(portal, plugin, disable=None):\n@@ -38,23 +38,23 @@ def activatePluginInterfaces(portal, plugin, disable=None):\n     activatable = []\n \n     for info in plugin_obj.plugins.listPluginTypeInfo():\n-        interface = info[\'interface\']\n-        interface_name = info[\'id\']\n+        interface = info["interface"]\n+        interface_name = info["id"]\n         if plugin_obj.testImplements(interface):\n             if interface_name in disable:\n                 disable.append(interface_name)\n-                logger.debug("Disabling: " + info[\'title\'])\n+                logger.debug("Disabling: " + info["title"])\n             else:\n                 activatable.append(interface_name)\n-                logger.debug("Activating: " + info[\'title\'])\n+                logger.debug("Activating: " + info["title"])\n     plugin_obj.manage_activateInterfaces(activatable)\n     logger.debug(plugin + " activated.")\n \n \n def setupRoles(portal):\n     rmanager = portal.acl_users.role_manager\n-    rmanager.addRole(\'Member\', title="Portal Member")\n-    rmanager.addRole(\'Reviewer\', title="Content Reviewer")\n+    rmanager.addRole("Member", title="Portal Member")\n+    rmanager.addRole("Reviewer", title="Content Reviewer")\n \n \n def registerPluginType(pas, plugin_type, plugin_info):\n@@ -77,45 +77,52 @@ def registerPluginType(pas, plugin_type, plugin_info):\n def registerPluginTypes(pas):\n \n     PluginInfo = {\n-        \'id\': \'IUserManagement\',\n-        \'title\': \'user_management\',\n-        \'description\': ("The User Management plugins allow the "\n-                        "Pluggable Auth Service to add/delete/modify users")\n+        "id": "IUserManagement",\n+        "title": "user_management",\n+        "description": (\n+            "The User Management plugins allow the "\n+            "Pluggable Auth Service to add/delete/modify users"\n+        ),\n     }\n \n     registerPluginType(pas, IUserManagement, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'IUserIntrospection\',\n-        \'title\': \'user_introspection\',\n-        \'description\': ("The User Introspection plugins allow the "\n-                        "Pluggable Auth Service to provide lists of users")\n+        "id": "IUserIntrospection",\n+        "title": "user_introspection",\n+        "description": (\n+            "The User Introspection plugins allow the "\n+            "Pluggable Auth Service to provide lists of users"\n+        ),\n     }\n \n     registerPluginType(pas, IUserIntrospection, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'IGroupManagement\',\n-        \'title\': \'group_management\',\n-        \'description\': ("Group Management provides add/write/deletion "\n-                        "of groups and member management")\n+        "id": "IGroupManagement",\n+        "title": "group_management",\n+        "description": (\n+            "Group Management provides add/write/deletion "\n+            "of groups and member management"\n+        ),\n     }\n \n     registerPluginType(pas, igroup.IGroupManagement, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'IGroupIntrospection\',\n-        \'title\': \'group_introspection\',\n-        \'description\': ("Group Introspection provides listings "\n-                        "of groups and membership")\n+        "id": "IGroupIntrospection",\n+        "title": "group_introspection",\n+        "description": (\n+            "Group Introspection provides listings " "of groups and membership"\n+        ),\n     }\n \n     registerPluginType(pas, igroup.IGroupIntrospection, PluginInfo)\n \n     PluginInfo = {\n-        \'id\': \'ILocalRolesPlugin\',\n-        \'title\': \'local_roles\',\n-        \'description\': "Defines Policy for getting Local Roles"\n+        "id": "ILocalRolesPlugin",\n+        "title": "local_roles",\n+        "description": "Defines Policy for getting Local Roles",\n     }\n \n     registerPluginType(pas, ILocalRolesPlugin, PluginInfo)\n@@ -125,81 +132,89 @@ def setupPlugins(portal):\n     uf = portal.acl_users\n     logger.debug("\\nPlugin setup")\n \n-    pas = uf.manage_addProduct[\'PluggableAuthService\']\n-    plone_pas = uf.manage_addProduct[\'PlonePAS\']\n+    pas = uf.manage_addProduct["PluggableAuthService"]\n+    plone_pas = uf.manage_addProduct["PlonePAS"]\n \n     setupAuthPlugins(portal, pas, plone_pas)\n \n-    found = uf.objectIds([\'User Manager\'])\n+    found = uf.objectIds(["User Manager"])\n     if not found:\n-        plone_pas.manage_addUserManager(\'source_users\')\n+        plone_pas.manage_addUserManager("source_users")\n         logger.debug("Added User Manager.")\n-    activatePluginInterfaces(portal, \'source_users\')\n+    activatePluginInterfaces(portal, "source_users")\n \n-    found = uf.objectIds([\'Group Aware Role Manager\'])\n+    found = uf.objectIds(["Group Aware Role Manager"])\n     if not found:\n-        plone_pas.manage_addGroupAwareRoleManager(\'portal_role_manager\')\n+        plone_pas.manage_addGroupAwareRoleManager("portal_role_manager")\n         logger.debug("Added Group Aware Role Manager.")\n-        activatePluginInterfaces(portal, \'portal_role_manager\')\n+        activatePluginInterfaces(portal, "portal_role_manager")\n \n-    found = uf.objectIds([\'Local Roles Manager\'])\n+    found = uf.objectIds(["Local Roles Manager"])\n     if not found:\n-        plone_pas.manage_addLocalRolesManager(\'local_roles\')\n+        plone_pas.manage_addLocalRolesManager("local_roles")\n         logger.debug("Added Group Aware Role Manager.")\n-        activatePluginInterfaces(portal, \'local_roles\')\n+        activatePluginInterfaces(portal, "local_roles")\n \n-    found = uf.objectIds([\'Group Manager\'])\n+    found = uf.objectIds(["Group Manager"])\n     if not found:\n-        plone_pas.manage_addGroupManager(\'source_groups\')\n+        plone_pas.manage_addGroupManager("source_groups")\n         logger.debug("Added ZODB Group Manager.")\n-        activatePluginInterfaces(portal, \'source_groups\')\n+        activatePluginInterfaces(portal, "source_groups")\n \n-    found = uf.objectIds([\'Plone User Factory\'])\n+    found = uf.objectIds(["Plone User Factory"])\n     if not found:\n-        plone_pas.manage_addPloneUserFactory(\'user_factory\')\n+        plone_pas.manage_addPloneUserFactory("user_factory")\n         logger.debug("Added Plone User Factory.")\n         activatePluginInterfaces(portal, "user_factory")\n \n-    found = uf.objectIds([\'ZODB Mutable Property Provider\'])\n+    found = uf.objectIds(["ZODB Mutable Property Provider"])\n     if not found:\n-        plone_pas.manage_addZODBMutablePropertyProvider(\'mutable_properties\')\n+        plone_pas.manage_addZODBMutablePropertyProvider("mutable_properties")\n         logger.debug("Added Mutable Property Manager.")\n         activatePluginInterfaces(portal, "mutable_properties")\n \n-    found = uf.objectIds([\'Automatic Group Plugin\'])\n+    found = uf.objectIds(["Automatic Group Plugin"])\n     if not found:\n         plone_pas.manage_addAutoGroup(\n-            "auto_group", "Authenticated Users (Virtual Group)",\n-            "AuthenticatedUsers", "Automatic Group Provider")\n+            "auto_group",\n+            "Authenticated Users (Virtual Group)",\n+            "AuthenticatedUsers",\n+            "Automatic Group Provider",\n+        )\n         logger.debug("Added Automatic Group.")\n         activatePluginInterfaces(portal, "auto_group")\n \n-    found = uf.objectIds([\'Plone Session Plugin\'])\n+    found = uf.objectIds(["Plone Session Plugin"])\n     if not found:\n-        manage_addSessionPlugin(plone_pas, \'session\')\n+        manage_addSessionPlugin(plone_pas, "session")\n         logger.debug("Added Plone Session Plugin.")\n         activatePluginInterfaces(portal, "session")\n \n-    found = uf.objectIds([\'Recursive Groups Plugin\'])\n+    found = uf.objectIds(["Recursive Groups Plugin"])\n     if not found:\n-        addRecursiveGroupsPlugin(plone_pas, \'recursive_groups\',\n-                                 "Recursive Groups Plugin")\n-        activatePluginInterfaces(portal, \'recursive_groups\')\n+        addRecursiveGroupsPlugin(\n+            plone_pas, "recursive_groups", "Recursive Groups Plugin"\n+        )\n+        activatePluginInterfaces(portal, "recursive_groups")\n         logger.debug("Added Recursive Groups plugin.")\n \n     setupPasswordPolicyPlugin(portal)\n \n \n-def setupAuthPlugins(portal, pas, plone_pas,\n-                     deactivate_basic_reset=True,\n-                     deactivate_cookie_challenge=False):\n+def setupAuthPlugins(\n+    portal,\n+    pas,\n+    plone_pas,\n+    deactivate_basic_reset=True,\n+    deactivate_cookie_challenge=False,\n+):\n     uf = portal.acl_users\n     logger.debug("Cookie plugin setup")\n \n-    login_path = \'login_form\'\n-    cookie_name = \'__ac\'\n+    login_path = "login_form"\n+    cookie_name = "__ac"\n \n-    crumbler = getToolByName(portal, \'cookie_authentication\', None)\n+    crumbler = getToolByName(portal, "cookie_authentication", None)\n     if crumbler is not None:\n         login_path = crumbler.auto_login_page\n         cookie_name = crumbler.auth_cookie\n@@ -224,55 +239,41 @@ def setupAuthPlugins(portal, pas, plone_pas,\n             "/".join(uf.credentials_cookie_auth.getPhysicalPath()),\n         )\n     if deactivate_basic_reset:\n-        disable = [\'ICredentialsResetPlugin\', \'ICredentialsUpdatePlugin\']\n+        disable = ["ICredentialsResetPlugin", "ICredentialsUpdatePlugin"]\n     else:\n         disable = []\n-    activatePluginInterfaces(\n-        portal,\n-        \'credentials_cookie_auth\',\n-        disable=disable\n-    )\n+    activatePluginInterfaces(portal, "credentials_cookie_auth", disable=disable)\n \n-    credentials_cookie_auth = uf._getOb(\'credentials_cookie_auth\')\n-    if is_plone_site and \'login_form\' in credentials_cookie_auth:\n-        credentials_cookie_auth.manage_delObjects(ids=[\'login_form\'])\n-        logger.debug("Removed default login_form from credentials cookie "\n-                     "auth.")\n+    credentials_cookie_auth = uf._getOb("credentials_cookie_auth")\n+    if is_plone_site and "login_form" in credentials_cookie_auth:\n+        credentials_cookie_auth.manage_delObjects(ids=["login_form"])\n+        logger.debug("Removed default login_form from credentials cookie " "auth.")\n     credentials_cookie_auth.cookie_name = cookie_name\n     credentials_cookie_auth.login_path = login_path\n \n     # remove cookie crumbler(s)\n-    if \'cookie_authentication\' in portal:\n-        portal.manage_delObjects([\'cookie_authentication\'])\n+    if "cookie_authentication" in portal:\n+        portal.manage_delObjects(["cookie_authentication"])\n     logger.debug("Removed old Cookie Crumbler")\n \n-    found = uf.objectIds([\'HTTP Basic Auth Helper\'])\n+    found = uf.objectIds(["HTTP Basic Auth Helper"])\n     if not found:\n-        pas.addHTTPBasicAuthHelper(\n-            \'credentials_basic_auth\',\n-            title="HTTP Basic Auth"\n-        )\n+        pas.addHTTPBasicAuthHelper("credentials_basic_auth", title="HTTP Basic Auth")\n     logger.debug("Added Basic Auth Helper.")\n-    activatePluginInterfaces(portal, \'credentials_basic_auth\')\n+    activatePluginInterfaces(portal, "credentials_basic_auth")\n \n     if deactivate_basic_reset:\n-        uf.plugins.deactivatePlugin(\n-            ICredentialsResetPlugin,\n-            \'credentials_basic_auth\'\n-        )\n+        uf.plugins.deactivatePlugin(ICredentialsResetPlugin, "credentials_basic_auth")\n     if deactivate_cookie_challenge:\n-        uf.plugins.deactivatePlugin(\n-            IChallengePlugin,\n-            \'credentials_cookie_auth\'\n-        )\n+        uf.plugins.deactivatePlugin(IChallengePlugin, "credentials_cookie_auth")\n \n \n def updateProperties(tool, properties):\n-    dependency_keys = (\'selection\', \'multiple selection\')\n-    propsWithNoDeps = [prop for prop in properties\n-                       if prop[\'type\'] not in dependency_keys]\n-    propsWithDeps = [prop for prop in properties\n-                     if prop[\'type\'] in dependency_keys]\n+    dependency_keys = ("selection", "multiple selection")\n+    propsWithNoDeps = [\n+        prop for prop in properties if prop["type"] not in dependency_keys\n+    ]\n+    propsWithDeps = [prop for prop in properties if prop["type"] in dependency_keys]\n     for prop in propsWithNoDeps:\n         updateProp(tool, prop)\n     for prop in propsWithDeps:\n@@ -285,28 +286,28 @@ def updateProp(prop_manager, prop_dict):\n \n     Doesn\'t deal with existing properties changing type.\n     """\n-    id = prop_dict[\'id\']\n-    value = prop_dict[\'value\']\n-    type = prop_dict[\'type\']\n-    if type in (\'selection\', \'multiple selection\'):\n-        value = prop_dict[\'select_variable\']\n+    id = prop_dict["id"]\n+    value = prop_dict["value"]\n+    type = prop_dict["type"]\n+    if type in ("selection", "multiple selection"):\n+        value = prop_dict["select_variable"]\n     if prop_manager.hasProperty(id):\n         prop_manager._updateProperty(id, value)\n     else:\n         prop_manager._setProperty(id, value, type)\n-    if type in (\'selection\', \'multiple selection\'):\n-        prop_manager._updateProperty(id, prop_dict[\'value\'])\n+    if type in ("selection", "multiple selection"):\n+        prop_manager._updateProperty(id, prop_dict["value"])\n \n \n def addPAS(portal):\n     logger.debug("Adding PAS user folder")\n-    portal.manage_addProduct[\'PluggableAuthService\'].addPluggableAuthService()\n+    portal.manage_addProduct["PluggableAuthService"].addPluggableAuthService()\n \n \n def migrate_root_uf(self):\n     # Acquire parent user folder.\n     parent = self.getPhysicalRoot()\n-    uf = getToolByName(parent, \'acl_users\')\n+    uf = getToolByName(parent, "acl_users")\n     if IPluggableAuthService.providedBy(uf):\n         # It\'s a PAS already, fixup if needed.\n         pas_fixup(parent)\n@@ -315,7 +316,7 @@ def migrate_root_uf(self):\n         challenge_chooser_setup(parent)\n         return\n \n-    if not uf.meta_type == \'User Folder\':\n+    if not uf.meta_type == "User Folder":\n         # It\'s not a standard User Folder at the root. Nothing we can do.\n         return\n \n@@ -323,33 +324,36 @@ def migrate_root_uf(self):\n     replace_acl_users(parent)\n \n     # Get the new uf\n-    uf = getToolByName(parent, \'acl_users\')\n+    uf = getToolByName(parent, "acl_users")\n \n-    pas = uf.manage_addProduct[\'PluggableAuthService\']\n-    plone_pas = uf.manage_addProduct[\'PlonePAS\']\n+    pas = uf.manage_addProduct["PluggableAuthService"]\n+    plone_pas = uf.manage_addProduct["PlonePAS"]\n     # Setup authentication plugins\n-    setupAuthPlugins(parent, pas, plone_pas,\n-                     deactivate_basic_reset=False,\n-                     deactivate_cookie_challenge=True)\n+    setupAuthPlugins(\n+        parent,\n+        pas,\n+        plone_pas,\n+        deactivate_basic_reset=False,\n+        deactivate_cookie_challenge=True,\n+    )\n \n     # Activate *all* interfaces for user manager. IUserAdder is not\n     # activated for some reason by default.\n-    activatePluginInterfaces(parent, \'users\')\n+    activatePluginInterfaces(parent, "users")\n \n     # Configure Challenge Chooser plugin if available\n     challenge_chooser_setup(parent)\n \n \n def pas_fixup(self):\n-    from Products.PluggableAuthService.PluggableAuthService \\\n-        import _PLUGIN_TYPE_INFO\n+    from Products.PluggableAuthService.PluggableAuthService import _PLUGIN_TYPE_INFO\n \n-    pas = getToolByName(self, \'acl_users\')\n+    pas = getToolByName(self, "acl_users")\n     if not IPluggableAuthService.providedBy(pas):\n-        logger.debug(\'PAS UF not found, skipping PAS fixup.\')\n+        logger.debug("PAS UF not found, skipping PAS fixup.")\n         return\n \n-    plugins = pas[\'plugins\']\n+    plugins = pas["plugins"]\n \n     plugin_types = list(set(plugins._plugin_types))\n     for key, id, title, description in _PLUGIN_TYPE_INFO:\n@@ -359,9 +363,9 @@ def pas_fixup(self):\n         logger.debug("Plugin type \'%s\' was not registered." % id)\n         plugin_types.append(key)\n         plugins._plugin_type_info[key] = {\n-            \'id\': id,\n-            \'title\': title,\n-            \'description\': description,\n+            "id": id,\n+            "title": title,\n+            "description": description,\n         }\n     # Make it ordered\n     plugin_types.sort()\n@@ -371,74 +375,71 @@ def pas_fixup(self):\n \n \n def challenge_chooser_setup(self):\n-    uf = getToolByName(self, \'acl_users\')\n-    pas = uf.manage_addProduct[\'PluggableAuthService\']\n+    uf = getToolByName(self, "acl_users")\n+    pas = uf.manage_addProduct["PluggableAuthService"]\n \n     # Only install plugins if available\n-    req = (\'addChallengeProtocolChooserPlugin\',\n-           \'addRequestTypeSnifferPlugin\')\n+    req = ("addChallengeProtocolChooserPlugin", "addRequestTypeSnifferPlugin")\n     for m in req:\n         if getattr(pas, m, None) is None:\n-            logger.debug(\'Needed plugins have not been found, ignoring\')\n+            logger.debug("Needed plugins have not been found, ignoring")\n             return\n \n-    found = uf.objectIds([\'Challenge Protocol Chooser Plugin\'])\n+    found = uf.objectIds(["Challenge Protocol Chooser Plugin"])\n     if not found:\n-        logger.debug(\'Adding Challenge Protocol Chooser Plugin.\')\n+        logger.debug("Adding Challenge Protocol Chooser Plugin.")\n         pas.addChallengeProtocolChooserPlugin(\n-            \'chooser\',\n-            mapping=config.DEFAULT_PROTO_MAPPING)\n-        activatePluginInterfaces(self, \'chooser\')\n+            "chooser", mapping=config.DEFAULT_PROTO_MAPPING\n+        )\n+        activatePluginInterfaces(self, "chooser")\n     else:\n-        assert len(found) == 1, \'Found extra plugins %s\' % found\n-        logger.debug(\'Found existing Challenge Protocol Chooser Plugin.\')\n+        assert len(found) == 1, "Found extra plugins %s" % found\n+        logger.debug("Found existing Challenge Protocol Chooser Plugin.")\n         plugin = uf[found[0]]\n-        plugin.manage_updateProtocolMapping(\n-            mapping=config.DEFAULT_PROTO_MAPPING)\n+        plugin.manage_updateProtocolMapping(mapping=config.DEFAULT_PROTO_MAPPING)\n         activatePluginInterfaces(self, found[0])\n \n-    found = uf.objectIds([\'Request Type Sniffer Plugin\'])\n+    found = uf.objectIds(["Request Type Sniffer Plugin"])\n     if not found:\n-        logger.debug(\'Adding Request Type Sniffer Plugin.\')\n-        pas.addRequestTypeSnifferPlugin(\'sniffer\')\n-        activatePluginInterfaces(self, \'sniffer\')\n+        logger.debug("Adding Request Type Sniffer Plugin.")\n+        pas.addRequestTypeSnifferPlugin("sniffer")\n+        activatePluginInterfaces(self, "sniffer")\n     else:\n-        assert len(found) == 1, \'Found extra plugins %s\' % found\n-        logger.debug(\'Found existing Request Type Sniffer Plugin.\')\n+        assert len(found) == 1, "Found extra plugins %s" % found\n+        logger.debug("Found existing Request Type Sniffer Plugin.")\n         activatePluginInterfaces(self, found[0])\n \n \n def setupPasswordPolicyPlugin(portal):\n     uf = portal.acl_users\n-    plone_pas = uf.manage_addProduct[\'PlonePAS\']\n+    plone_pas = uf.manage_addProduct["PlonePAS"]\n \n-    found = uf.objectIds([\'Default Plone Password Policy\'])\n+    found = uf.objectIds(["Default Plone Password Policy"])\n     logger.debug("\\nDefault Password Ploicy Plugin setup")\n     if not found:\n         plone_pas.manage_addPasswordPolicyPlugin(\n-            \'password_policy\',\n-            title="Default Plone Password Policy"\n+            "password_policy", title="Default Plone Password Policy"\n         )\n         logger.debug("Added Default Plone Password Policy.")\n-        activatePluginInterfaces(portal, \'password_policy\')\n+        activatePluginInterfaces(portal, "password_policy")\n \n \n def setLoginFormInCookieAuth(context):\n     """Makes sure the cookie auth redirects to \'require_login\' instead\n-       of \'login_form\'."""\n-    uf = getattr(context, \'acl_users\', None)\n-    if uf is None or getattr(aq_base(uf), \'_getOb\', None) is None:\n+    of \'login_form\'."""\n+    uf = getattr(context, "acl_users", None)\n+    if uf is None or getattr(aq_base(uf), "_getOb", None) is None:\n         # we have no user folder or it\'s not a PAS folder, do nothing\n         return\n-    cookie_auth = uf._getOb(\'credentials_cookie_auth\', None)\n+    cookie_auth = uf._getOb("credentials_cookie_auth", None)\n     if cookie_auth is None:\n         # there\'s no cookie auth object, do nothing\n         return\n-    current_login_form = cookie_auth.getProperty(\'login_path\')\n-    if current_login_form != \'login_form\':\n+    current_login_form = cookie_auth.getProperty("login_path")\n+    if current_login_form != "login_form":\n         # it\'s customized already, do nothing\n         return\n-    cookie_auth.manage_changeProperties(login_path=\'require_login\')\n+    cookie_auth.manage_changeProperties(login_path="require_login")\n \n \n def addRolesToPlugIn(p):\n@@ -449,9 +450,9 @@ def addRolesToPlugIn(p):\n     Have to manually register the roles from the \'rolemap\' step\n     with the roles plug-in.\n     """\n-    uf = getToolByName(p, \'acl_users\')\n+    uf = getToolByName(p, "acl_users")\n     rmanager = uf.portal_role_manager\n-    roles = (\'Reviewer\', \'Member\')\n+    roles = ("Reviewer", "Member")\n     existing = rmanager.listRoleIds()\n     for role in roles:\n         if role not in existing:\n@@ -462,29 +463,25 @@ def setupGroups(site):\n     """\n     Create Plone\'s default set of groups.\n     """\n-    uf = getToolByName(site, \'acl_users\')\n-    gtool = getToolByName(site, \'portal_groups\')\n-    if not uf.searchGroups(id=\'Administrators\'):\n-        gtool.addGroup(\n-            \'Administrators\',\n-            title=\'Administrators\',\n-            roles=[\'Manager\']\n-        )\n+    uf = getToolByName(site, "acl_users")\n+    gtool = getToolByName(site, "portal_groups")\n+    if not uf.searchGroups(id="Administrators"):\n+        gtool.addGroup("Administrators", title="Administrators", roles=["Manager"])\n \n-    if not uf.searchGroups(id=\'Site Administrators\'):\n+    if not uf.searchGroups(id="Site Administrators"):\n         gtool.addGroup(\n-            \'Site Administrators\',\n-            title=\'Site Administrators\',\n-            roles=[\'Site Administrator\']\n+            "Site Administrators",\n+            title="Site Administrators",\n+            roles=["Site Administrator"],\n         )\n \n-    if not uf.searchGroups(id=\'Reviewers\'):\n-        gtool.addGroup(\'Reviewers\', title=\'Reviewers\', roles=[\'Reviewer\'])\n+    if not uf.searchGroups(id="Reviewers"):\n+        gtool.addGroup("Reviewers", title="Reviewers", roles=["Reviewer"])\n \n \n def installPAS(portal):\n     # Add user folder\n-    portal.manage_addProduct[\'PluggableAuthService\'].addPluggableAuthService()\n+    portal.manage_addProduct["PluggableAuthService"].addPluggableAuthService()\n \n     # Configure Challenge Chooser plugin if available\n     challenge_chooser_setup(portal)\n@@ -509,10 +506,10 @@ def setupPlonePAS(context):\n     Setup PlonePAS step.\n     """\n     # Only run step if a flag file is present (e.g. not an extension profile)\n-    if context.readDataFile(\'plone-pas.txt\') is None:\n+    if context.readDataFile("plone-pas.txt") is None:\n         return\n     site = context.getSite()\n-    if \'acl_users\' not in site:\n+    if "acl_users" not in site:\n         installPAS(site)\n         addRolesToPlugIn(site)\n         setupGroups(site)\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 281dca1b..221ef494 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n Add Mutable Property Sheets and Schema Mutable Property Sheets to PAS\n \n@@ -11,15 +10,12 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n-import six\n-\n \n class PropertyValueError(ValueError):\n     pass\n \n \n-class PropertySchemaTypeMap(object):\n-\n+class PropertySchemaTypeMap:\n     def __init__(self):\n         self.tmap = {}\n         self.tmap_order = []\n@@ -36,7 +32,7 @@ def getTypeFor(self, value):\n         for ptype, inspector in ptypes:\n             if inspector(value):\n                 return ptype\n-        raise TypeError(\'Invalid property type: %s\' % type(value))\n+        raise TypeError("Invalid property type: %s" % type(value))\n \n     def validate(self, property_type, value):\n         inspector = self.tmap[property_type]\n@@ -44,61 +40,32 @@ def validate(self, property_type, value):\n \n \n PropertySchema = PropertySchemaTypeMap()\n+PropertySchema.addType("string", lambda x: x is None or isinstance(x, str))\n+PropertySchema.addType("text", lambda x: x is None or isinstance(x, str))\n+PropertySchema.addType("boolean", lambda x: 1)  # anything can be boolean\n+PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n+PropertySchema.addType("long", lambda x: x is None or isinstance(x, int))  # theres is no long in Python 3\n+PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n+PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n+PropertySchema.addType("selection", lambda x: x is None or isinstance(x, str))\n PropertySchema.addType(\n-    \'string\',\n-    lambda x: x is None or isinstance(x, six.string_types)\n-)\n-PropertySchema.addType(\n-    \'text\',\n-    lambda x: x is None or isinstance(x, six.string_types)\n-)\n-PropertySchema.addType(\n-    \'boolean\',\n-    lambda x: 1  # anything can be boolean\n-)\n-PropertySchema.addType(\n-    \'int\',\n-    lambda x: x is None or isinstance(x, int)\n-)\n-PropertySchema.addType(\n-    \'long\',\n-    lambda x: x is None or isinstance(x, long)\n-)\n-PropertySchema.addType(\n-    \'float\',\n-    lambda x: x is None or isinstance(x, float)\n-)\n-PropertySchema.addType(\n-    \'lines\',\n-    lambda x: x is None or isinstance(x, (tuple, list))\n-)\n-PropertySchema.addType(\n-    \'selection\',\n-    lambda x: x is None or isinstance(x, six.string_types)\n-)\n-PropertySchema.addType(\n-    \'multiple selection\',\n-    lambda x: x is None or isinstance(x, (tuple, list))\n-)\n-PropertySchema.addType(\n-    \'date\',\n-    lambda x: 1\n+    "multiple selection", lambda x: x is None or isinstance(x, (tuple, list))\n )\n+PropertySchema.addType("date", lambda x: 1)\n validateValue = PropertySchema.validate\n \n \n @implementer(IMutablePropertySheet)\n class MutablePropertySheet(UserPropertySheet):\n-\n     def validateProperty(self, id, value):\n         if id not in self._properties:\n-            raise PropertyValueError(\'No such property found on this schema\')\n+            raise PropertyValueError("No such property found on this schema")\n \n         proptype = self.getPropertyType(id)\n         if not validateValue(proptype, value):\n             raise PropertyValueError(\n-                "Invalid value (%s) for property \'%s\' of type %s" %\n-                (value, id, proptype)\n+                "Invalid value (%s) for property \'%s\' of type %s"\n+                % (value, id, proptype)\n             )\n \n     def setProperty(self, user, id, value):\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex ffba794b..f25f9d23 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import TEST_USER_ID\n from plone.testing import zope as zope_testing\n \n import Products.PlonePAS\n@@ -19,13 +18,14 @@ def setUpZope(self, app, configurationContext):\n         # The z3c.autoinclude feature is disabled in the Plone fixture base\n         # layer.\n         self.loadZCML(package=Products.PlonePAS)\n-        zope_testing.installProduct(app, \'Products.PlonePAS\')\n+        zope_testing.installProduct(app, "Products.PlonePAS")\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'Products.PlonePAS:PlonePAS\')\n+        applyProfile(portal, "Products.PlonePAS:PlonePAS")\n         # setRoles(portal, TEST_USER_ID, [\'Manager\'])\n         from Products.CMFPlone.utils import _createObjectByType\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+\n+        _createObjectByType("Folder", portal, id="Members")\n         mtool = portal.portal_membership\n         if not mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n@@ -33,7 +33,7 @@ def setUpPloneSite(self, portal):\n         if mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n \n-        _createObjectByType(\'Folder\', portal, id=\'folder\')\n+        _createObjectByType("Folder", portal, id="folder")\n \n \n PRODUCTS_PLONEPAS_FIXTURE = ProductsPlonepasLayer()\n@@ -41,11 +41,11 @@ def setUpPloneSite(self, portal):\n \n PRODUCTS_PLONEPAS_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n-    name=\'ProductsPlonepasLayer:IntegrationTesting\',\n+    name="ProductsPlonepasLayer:IntegrationTesting",\n )\n \n \n PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n-    name=\'ProductsPlonepasLayer:FunctionalTesting\',\n+    name="ProductsPlonepasLayer:FunctionalTesting",\n )\ndiff --git a/src/Products/PlonePAS/tests/__init__.py b/src/Products/PlonePAS/tests/__init__.py\nindex 4c48b5ac..e69de29b 100644\n--- a/src/Products/PlonePAS/tests/__init__.py\n+++ b/src/Products/PlonePAS/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\r\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 3dfede87..77338bbb 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -1,13 +1,14 @@\n-# -*- coding: utf-8 -*-\n+from io import BytesIO\n from OFS.SimpleItem import SimpleItem\n-from six import BytesIO\n from ZPublisher.HTTPRequest import FileUpload\n \n-TEXT = b\'file data\'\n+import typing\n \n+TEXT = b"file data"\n \n-class FieldStorage(object):\n-    def __init__(self, file, filename=\'testfile\', headers=None):\n+\n+class FieldStorage:\n+    def __init__(self, file, filename="testfile", headers=None):\n         self.file = file\n         if headers is None:\n             headers = {}\n@@ -17,14 +18,14 @@ def __init__(self, file, filename=\'testfile\', headers=None):\n \n \n class File(FileUpload):\n-    \'\'\'Dummy upload object\n-       Used to fake uploaded files.\n-    \'\'\'\n+    """Dummy upload object\n+    Used to fake uploaded files.\n+    """\n \n     __allow_access_to_unprotected_subobjects__ = 1\n-    filename = \'dummy.txt\'\n+    filename = "dummy.txt"\n     data = TEXT\n-    headers = {}\n+    headers: typing.Dict = {}\n \n     def __init__(self, filename=None, data=None, headers=None):\n         if filename is not None:\n@@ -46,11 +47,11 @@ def read(self, *args):\n \n \n class Error(Exception):\n-    \'\'\'Dummy exception\'\'\'\n+    """Dummy exception"""\n \n \n class Raiser(SimpleItem):\n-    \'\'\'Raises the stored exception when called\'\'\'\n+    """Raises the stored exception when called"""\n \n     exception = Error\n \ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex 220d8960..d6c42e38 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -1,11 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n from Products.PluggableAuthService.interfaces.events import IPrincipalDeletedEvent\n from Products.PluggableAuthService.interfaces.plugins import IRolesPlugin\n-from Products.PluggableAuthService.PluggableAuthService import  _SWALLOWABLE_PLUGIN_EXCEPTIONS\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n@@ -17,8 +18,8 @@ class BasicOpsTestCase(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.acl_users = self.portal.acl_users\n \n     def compareRoles(self, target, user, roles):\n@@ -31,7 +32,7 @@ def compareRoles(self, target, user, roles):\n         u = self.acl_users.getUser(user)\n         if not u:\n             raise RuntimeError("compareRoles: Invalid user: \'%s\'" % user)\n-        non_roles = (\'Authenticated\', \'Anonymous\', \'\')\n+        non_roles = ("Authenticated", "Anonymous", "")\n         if target is None:\n             user_roles = list(u.getRoles())\n         else:\n@@ -40,13 +41,21 @@ def compareRoles(self, target, user, roles):\n         wished_roles = list(roles)\n         if sorted(actual_roles) == sorted(wished_roles):\n             return 1\n-        raise RuntimeError("User %s: Whished roles: %s BUT current "\n-                           "roles: %s" % (user, wished_roles, actual_roles))\n+        raise RuntimeError(\n+            "User %s: Whished roles: %s BUT current "\n+            "roles: %s" % (user, wished_roles, actual_roles)\n+        )\n \n-    def createUser(self, login="created_user", password="secret",\n-                   roles=[], groups=[], domains=()):\n+    def createUser(\n+        self, login="created_user", password="secret", roles=[], groups=[], domains=()\n+    ):\n         self.acl_users.userFolderAddUser(\n-            login, password, roles=roles, groups=groups, domains=domains,)\n+            login,\n+            password,\n+            roles=roles,\n+            groups=groups,\n+            domains=domains,\n+        )\n \n     def test_installed(self):\n         self.assertTrue(IPluggableAuthService.providedBy(self.acl_users))\n@@ -65,14 +74,15 @@ def test_edit(self):\n             "secret2",  # password\n             roles=["Member"],\n             groups=["g1"],\n-            domains=(),)\n-        self.compareRoles(None, "created_user", [\'Member\'])\n+            domains=(),\n+        )\n+        self.compareRoles(None, "created_user", ["Member"])\n \n     def test_edit_userDefinedRole(self):\n         roleplugins = self.acl_users.plugins.listPlugins(IRolesPlugin)\n         for id, plugin in roleplugins:\n             try:\n-                plugin.addRole(\'r1\')\n+                plugin.addRole("r1")\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n                 pass\n             else:\n@@ -85,13 +95,14 @@ def test_edit_userDefinedRole(self):\n             "secret2",  # password\n             roles=["r1"],\n             groups=["g1"],\n-            domains=(),)\n-        self.compareRoles(None, "created_user", [\'r1\'])\n+            domains=(),\n+        )\n+        self.compareRoles(None, "created_user", ["r1"])\n \n     def test_del(self):\n         self.createUser()\n         self.assertTrue(self.acl_users.getUser("created_user"))\n-        self.acl_users.userFolderDelUsers([\'created_user\'])\n+        self.acl_users.userFolderDelUsers(["created_user"])\n         self.assertFalse(self.acl_users.getUser("created_user"))\n \n     def test_principal_del_event(self):\n@@ -104,9 +115,9 @@ def gotDeletion(event):\n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(gotDeletion)\n         self.createUser()\n-        self.acl_users.userFolderDelUsers([\'created_user\'])\n+        self.acl_users.userFolderDelUsers(["created_user"])\n         self.assertEqual(len(eventsFired), 1)\n-        self.assertEqual(eventsFired[0].principal, \'created_user\')\n+        self.assertEqual(eventsFired[0].principal, "created_user")\n         gsm.unregisterHandler(gotDeletion)\n \n     def test_search(self):\n@@ -116,8 +127,9 @@ def test_search(self):\n         retlist = mt.searchForMembers(REQUEST=None, login="created_user1")\n         usernames = [user.getUserName() for user in retlist]\n         self.assertEqual(len(usernames), 1)\n-        self.assertTrue("created_user1" in usernames,\n-                        "\'created_user1\' not in %s" % usernames)\n+        self.assertTrue(\n+            "created_user1" in usernames, "\'created_user1\' not in %s" % usernames\n+        )\n \n     def test_setpw(self):\n         # there is more than one place where one can set the password.\n@@ -125,14 +137,16 @@ def test_setpw(self):\n         # here its checked in the general setup using ZODBUserManager.\n         self.createUser()\n         uf = self.acl_users\n-        new_secret = \'new_secret\'\n-        uf.userSetPassword(\'created_user\', new_secret)\n+        new_secret = "new_secret"\n+        uf.userSetPassword("created_user", new_secret)\n \n         # possible to authenticate with new password?\n-        from Products.PluggableAuthService.interfaces.plugins \\\n-            import IAuthenticationPlugin\n+        from Products.PluggableAuthService.interfaces.plugins import (\n+            IAuthenticationPlugin,\n+        )\n+\n         authenticators = uf.plugins.listPlugins(IAuthenticationPlugin)\n-        credentials = {\'login\': \'created_user\', \'password\': new_secret}\n+        credentials = {"login": "created_user", "password": new_secret}\n         result = None\n         for aid, authenticator in authenticators:\n             result = authenticator.authenticateCredentials(credentials)\n@@ -142,13 +156,13 @@ def test_setpw(self):\n \n     def test_setProperties(self):\n         self.createUser()\n-        user = self.acl_users.getUser(\'created_user\')\n-        user.setProperties(fullname=\'Test User\', email=\'test@example.org\')\n-        self.assertEqual(user.getProperty(\'fullname\'), \'Test User\')\n-        self.assertEqual(user.getProperty(\'email\'), \'test@example.org\')\n+        user = self.acl_users.getUser("created_user")\n+        user.setProperties(fullname="Test User", email="test@example.org")\n+        self.assertEqual(user.getProperty("fullname"), "Test User")\n+        self.assertEqual(user.getProperty("email"), "test@example.org")\n \n         user.setProperties(\n-            properties={\'fullname\': \'Test User2\', \'email\': \'test2@example.org\'}\n+            properties={"fullname": "Test User2", "email": "test2@example.org"}\n         )\n-        self.assertEqual(user.getProperty(\'fullname\'), \'Test User2\')\n-        self.assertEqual(user.getProperty(\'email\'), \'test2@example.org\')\n+        self.assertEqual(user.getProperty("fullname"), "Test User2")\n+        self.assertEqual(user.getProperty("email"), "test2@example.org")\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 73647bfd..0583c7ea 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -1,38 +1,27 @@\n-# -*- coding: utf-8 -*-\n-from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n from plone.testing import layered\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \n import doctest\n import re\n-import six\n import unittest\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("IOError", "OSError", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'cookie_auth.rst\',\n-                package=\'Products.PlonePAS.tests\',\n+                "cookie_auth.rst",\n+                package="Products.PlonePAS.tests",\n                 optionflags=doctest.ELLIPSIS,\n-                checker=Py23DocChecker(),\n             ),\n-            layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n+            layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING,\n         )\n     )\n     suite.addTest(\n         doctest.DocTestSuite(\n-            \'Products.PlonePAS.utils\',\n+            "Products.PlonePAS.utils",\n             optionflags=doctest.ELLIPSIS,\n-            checker=Py23DocChecker(),\n         )\n     )\n     return suite\ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex d69da2d9..e78240f4 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_parent\n+from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import logout\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n import unittest\n@@ -21,24 +20,23 @@ class TestGroupDataTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n         self.groupdata = self.portal.portal_groupdata\n-        self.groups.addGroup(\'foo\')\n+        self.groups.addGroup("foo")\n         # MUST reset _v_ attributes!\n         self.groupdata._v_temps = None\n-        if \'auto_group\' in self.acl_users:\n-            self.acl_users.manage_delObjects([\'auto_group\'])\n+        if "auto_group" in self.acl_users:\n+            self.acl_users.manage_delObjects(["auto_group"])\n \n     def testWrapGroup(self):\n-        g = self.acl_users.getGroup(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'PloneGroup\')\n+        g = self.acl_users.getGroup("foo")\n+        self.assertEqual(g.__class__.__name__, "PloneGroup")\n         g = self.groupdata.wrapGroup(g)\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(g).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(g).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__, "GroupManager")\n \n \n class TestGroupData(unittest.TestCase):\n@@ -46,113 +44,112 @@ class TestGroupData(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.memberdata = self.portal.portal_memberdata\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n         self.groupdata = self.portal.portal_groupdata\n-        self.groups.addGroup(\'foo\')\n-        if \'auto_group\' in self.acl_users:\n-            self.acl_users.manage_delObjects([\'auto_group\'])\n+        self.groups.addGroup("foo")\n+        if "auto_group" in self.acl_users:\n+            self.acl_users.manage_delObjects(["auto_group"])\n         # MUST reset _v_ attributes!\n         self.memberdata._v_temps = None\n         self.groupdata._v_temps = None\n \n     def testGetGroup(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n         g = g.getGroup()\n-        self.assertEqual(g.__class__.__name__, \'PloneGroup\')\n+        self.assertEqual(g.__class__.__name__, "PloneGroup")\n \n     def testGetTool(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.getTool().getId(), \'portal_groupdata\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.getTool().getId(), "portal_groupdata")\n \n     def testGetGroupMembers(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        g = self.groups.getGroupById("foo")\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         self.assertEqual(g.getGroupMembers()[0].getId(), TEST_USER_ID)\n \n     def testGroupMembersAreWrapped(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        g = self.groups.getGroupById("foo")\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         ms = g.getGroupMembers()\n-        self.assertEqual(ms[0].__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(ms[0]).__class__.__name__, \'PluggableAuthService\')\n+        self.assertEqual(ms[0].__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(ms[0]).__class__.__name__, "PluggableAuthService")\n \n     def testAddMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n-        g = self.groups.getGroupById(\'foo\')\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n+        g = self.groups.getGroupById("foo")\n         g.addMember(TEST_USER_ID)\n         self.assertEqual(g.getGroupMembers()[0].getId(), TEST_USER_ID)\n \n     def testRemoveMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n-        g = self.groups.getGroupById(\'foo\')\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n+        g = self.groups.getGroupById("foo")\n         g.addMember(TEST_USER_ID)\n         g.removeMember(TEST_USER_ID)\n         self.assertEqual(len(g.getGroupMembers()), 0)\n \n     def testSetGroupProperties(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        g.setGroupProperties({\'email\': \'foo@bar.com\'})\n-        gd = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(gd.getProperty(\'email\'), \'foo@bar.com\')\n+        g = self.groups.getGroupById("foo")\n+        g.setGroupProperties({"email": "foo@bar.com"})\n+        gd = self.groups.getGroupById("foo")\n+        self.assertEqual(gd.getProperty("email"), "foo@bar.com")\n \n     def testSetMemberProperties(self):\n         # For reference\n         m = self.membership.getMemberById(TEST_USER_ID)\n-        m.setMemberProperties({\'email\': \'foo@bar.com\'})\n+        m.setMemberProperties({"email": "foo@bar.com"})\n         md = self.membership.getMemberById(TEST_USER_ID)\n-        self.assertEqual(md.getProperty(\'email\'), \'foo@bar.com\')\n+        self.assertEqual(md.getProperty("email"), "foo@bar.com")\n \n     def testGetProperty(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        g.setGroupProperties({\'email\': \'foo@bar.com\'})\n-        self.assertEqual(g.getProperty(\'email\'), \'foo@bar.com\')\n-        self.assertEqual(g.getProperty(\'id\'), \'foo\')\n+        g = self.groups.getGroupById("foo")\n+        g.setGroupProperties({"email": "foo@bar.com"})\n+        self.assertEqual(g.getProperty("email"), "foo@bar.com")\n+        self.assertEqual(g.getProperty("id"), "foo")\n \n     def testGetGroupName(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.getGroupName(), \'foo\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.getGroupName(), "foo")\n \n     def testGetGroupId(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.getGroupId(), \'foo\')\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.getGroupId(), "foo")\n \n     def testGetRoles(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(tuple(g.getRoles()), (\'Authenticated\',))\n-        self.groups.editGroup(g.getId(), roles=[\'Member\'])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(sortTuple(tuple(g.getRoles())),\n-                         (\'Authenticated\', \'Member\'))\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(tuple(g.getRoles()), ("Authenticated",))\n+        self.groups.editGroup(g.getId(), roles=["Member"])\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(sortTuple(tuple(g.getRoles())), ("Authenticated", "Member"))\n \n     def testGetRolesInContext(self):\n-        self.folder = self.portal[\'folder\']\n-        g = self.groups.getGroupById(\'foo\')\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        self.folder = self.portal["folder"]\n+        g = self.groups.getGroupById("foo")\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         user = self.acl_users.getUser(TEST_USER_NAME)\n         self.assertEqual(\n             user.getRolesInContext(self.folder).sort(),\n-            [\'Member\', \'Authenticated\', \'Owner\'].sort()\n+            ["Member", "Authenticated", "Owner"].sort(),\n         )\n-        self.folder.manage_setLocalRoles(g.getId(), [\'NewRole\'])\n+        self.folder.manage_setLocalRoles(g.getId(), ["NewRole"])\n         self.assertEqual(\n             user.getRolesInContext(self.folder).sort(),\n-            [\'Member\', \'Authenticated\', \'Owner\', \'NewRole\'].sort()\n+            ["Member", "Authenticated", "Owner", "NewRole"].sort(),\n         )\n \n     def testGetDomains(self):\n-        g = self.groups.getGroupById(\'foo\')\n+        g = self.groups.getGroupById("foo")\n         self.assertEqual(g.getDomains(), ())\n \n     def testHasRole(self):\n-        g = self.groups.getGroupById(\'foo\')\n-        self.groups.editGroup(g.getId(), roles=[\'Member\'])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertTrue(g.has_role(\'Member\'))\n+        g = self.groups.getGroupById("foo")\n+        self.groups.editGroup(g.getId(), roles=["Member"])\n+        g = self.groups.getGroupById("foo")\n+        self.assertTrue(g.has_role("Member"))\n \n \n class TestMethodProtection(unittest.TestCase):\n@@ -160,10 +157,10 @@ class TestMethodProtection(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.groups = self.portal.portal_groups\n-        self.groups.addGroup(\'foo\')\n-        self.groupdata = self.groups.getGroupById(\'foo\')\n+        self.groups.addGroup("foo")\n+        self.groupdata = self.groups.getGroupById("foo")\n \n     def testAnonAddMember(self):\n         logout()\n@@ -171,21 +168,19 @@ def testAnonAddMember(self):\n \n     def testAnonRemoveMember(self):\n         logout()\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testMemberAddMember(self):\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testMemberRemoveMember(self):\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex da81fd0a..77c53aa5 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n-from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.group import PloneGroup\n@@ -29,18 +27,18 @@ class TestGroupsTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.gt = getToolByName(self.portal, \'portal_groups\')\n-        self.gd = getToolByName(self.portal, \'portal_groupdata\')\n+        self.portal = self.layer["portal"]\n+        self.gt = getToolByName(self.portal, "portal_groups")\n+        self.gd = getToolByName(self.portal, "portal_groupdata")\n \n-        self.group_id = \'group1\'\n+        self.group_id = "group1"\n         # Create a new Group\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.gt.addGroup(\n             self.group_id,\n-            [\'Reviewer\'],\n+            ["Reviewer"],\n             [],\n-            {\'email\': \'group1@host.com\', \'title\': \'Group #1\'}\n+            {"email": "group1@host.com", "title": "Group #1"},\n         )\n \n     def test_get_group(self):\n@@ -66,34 +64,23 @@ def test_get_group_by_id(self):\n \n     def test_edit_group(self):\n         # Use the tool way to edit a group.\n-        properties = {\n-            \'email\': \'group1@host2.com\',\n-            \'title\': \'Group #1 new title\'\n-        }\n-        self.gt.editGroup(\n-            self.group_id,\n-            roles=[\'Manager\'],\n-            **properties\n-        )\n+        properties = {"email": "group1@host2.com", "title": "Group #1 new title"}\n+        self.gt.editGroup(self.group_id, roles=["Manager"], **properties)\n \n         # test edition of roles and properties\n         group = self.gt.getGroupById(self.group_id)\n-        self.assertTrue(group.has_role(\'Manager\'))\n-        self.assertEqual(group.getProperty(\'email\'), properties[\'email\'])\n-        self.assertEqual(group.getProperty(\'title\'), properties[\'title\'])\n+        self.assertTrue(group.has_role("Manager"))\n+        self.assertEqual(group.getProperty("email"), properties["email"])\n+        self.assertEqual(group.getProperty("title"), properties["title"])\n \n         # test for empty list of roles\n         self.gt.editGroup(self.group_id, roles=[])\n-        self.assertTrue(group.has_role(\'Authenticated\'))\n+        self.assertTrue(group.has_role("Authenticated"))\n \n         # test edition of group groups\n-        self.gt.editGroup(\n-            self.group_id,\n-            groups=[\'Reviewers\'],\n-            **properties\n-        )\n+        self.gt.editGroup(self.group_id, groups=["Reviewers"], **properties)\n         group = self.gt.getGroupById(self.group_id)\n-        self.assertTrue(\'Reviewers\' in group.getGroups())\n+        self.assertTrue("Reviewers" in group.getGroups())\n \n \n class TestMethodProtection(unittest.TestCase):\n@@ -102,10 +89,10 @@ class TestMethodProtection(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.groups = self.portal.portal_groups\n-        self.groups.addGroup(\'foo\')\n-        self.groupdata = self.groups.getGroupById(\'foo\')\n+        self.groups.addGroup("foo")\n+        self.groupdata = self.groups.getGroupById("foo")\n \n     def testAnonAddMember(self):\n         logout()\n@@ -113,84 +100,82 @@ def testAnonAddMember(self):\n \n     def testAnonRemoveMember(self):\n         logout()\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testMemberAddMember(self):\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testMemberRemoveMember(self):\n-        self.assertRaises(Unauthorized, self.groupdata.removeMember,\n-                          TEST_USER_ID)\n+        self.assertRaises(Unauthorized, self.groupdata.removeMember, TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n+        self.portal.manage_role("Member", [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\n \n \n-class TestGroupsTool(unittest.TestCase):\n+class TestGroupsToolIntegration(unittest.TestCase):\n \n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n-        self.folder = self.portal[\'folder\']\n+        self.folder = self.portal["folder"]\n \n-        if \'auto_group\' in self.acl_users:\n-            self.acl_users.manage_delObjects([\'auto_group\'])\n+        if "auto_group" in self.acl_users:\n+            self.acl_users.manage_delObjects(["auto_group"])\n \n         # Nuke Administators and Reviewers groups added in 2.1a2 migrations\n         # (and any other migrated-in groups) to avoid test confusion\n         self.groups.removeGroups(self.groups.listGroupIds())\n \n     def testAddGroup(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.assertEqual(self.groups.listGroupIds(), [\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.assertEqual(self.groups.listGroupIds(), ["foo"])\n \n     def testGetGroupById(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        g = self.groups.getGroupById(\'foo\')\n+        self.groups.addGroup("foo", [], [])\n+        g = self.groups.getGroupById("foo")\n         self.assertNotEqual(g, None)\n \n     def testGetBadGroupById(self):\n-        g = self.groups.getGroupById(\'foo\')\n+        g = self.groups.getGroupById("foo")\n         self.assertEqual(g, None)\n \n     def testGroupByIdIsWrapped(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(g).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,\n-                         \'GroupManager\')\n+        self.groups.addGroup("foo", [], [])\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(g).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__, "GroupManager")\n \n     def testEditGroup(self):\n-        self.groups.addGroup(\'foo\', )\n-        self.groups.editGroup(\'foo\', roles=[\'Reviewer\'])\n-        g = self.groups.getGroupById(\'foo\')\n-        self.assertEqual(sortTuple(g.getRoles()),\n-                         (\'Authenticated\', \'Reviewer\'))\n+        self.groups.addGroup(\n+            "foo",\n+        )\n+        self.groups.editGroup("foo", roles=["Reviewer"])\n+        g = self.groups.getGroupById("foo")\n+        self.assertEqual(sortTuple(g.getRoles()), ("Authenticated", "Reviewer"))\n \n     def testEditBadGroup(self):\n         # Error type depends on the user folder...\n         try:\n-            self.groups.editGroup(\'foo\', [], [])\n+            self.groups.editGroup("foo", [], [])\n         except (KeyError, ValueError):\n-            pass        # Ok, this is the wanted behaviour\n+            pass  # Ok, this is the wanted behaviour\n         else:\n             self.fail("Should have raised KeyError or ValueError")\n \n     def testRemoveGroups(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.removeGroups([\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.removeGroups(["foo"])\n         self.assertEqual(len(self.groups.listGroupIds()), 0)\n \n     def testRemoveGroupDelEvent(self):\n@@ -202,85 +187,80 @@ def gotDeletion(event):\n \n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(gotDeletion)\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.removeGroups([\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.removeGroups(["foo"])\n         self.assertEqual(len(eventsFired), 1)\n-        self.assertEqual(eventsFired[0].principal, \'foo\')\n+        self.assertEqual(eventsFired[0].principal, "foo")\n         gsm.unregisterHandler(gotDeletion)\n \n     def testListGroupIds(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.addGroup(\'bar\', [], [])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.addGroup("bar", [], [])\n         grps = self.groups.listGroupIds()\n         grps.sort()\n-        self.assertEqual(grps, [\'bar\', \'foo\'])\n+        self.assertEqual(grps, ["bar", "foo"])\n \n     def testGetGroupsByUserId(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         gs = self.groups.getGroupsByUserId(TEST_USER_ID)\n-        self.assertEqual(gs[0].getId(), \'foo\')\n+        self.assertEqual(gs[0].getId(), "foo")\n \n     def testGroupsByUserIdAreWrapped(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n+        self.groups.addGroup("foo", [], [])\n+        self.acl_users.userSetGroups(TEST_USER_ID, groupnames=["foo"])\n         gs = self.groups.getGroupsByUserId(TEST_USER_ID)\n-        self.assertEqual(gs[0].__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(gs[0]).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(gs[0].__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(gs[0]).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__, "GroupManager")\n \n     def testListGroups(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.groups.addGroup(\'bar\', [], [])\n+        self.groups.addGroup("foo", [], [])\n+        self.groups.addGroup("bar", [], [])\n         gs = self.groups.listGroups()\n-        self.assertEqual(gs[0].getId(), \'bar\')\n-        self.assertEqual(gs[1].getId(), \'foo\')\n+        self.assertEqual(gs[0].getId(), "bar")\n+        self.assertEqual(gs[1].getId(), "foo")\n \n     def testListedGroupsAreWrapped(self):\n-        self.groups.addGroup(\'foo\', [], [])\n+        self.groups.addGroup("foo", [], [])\n         gs = self.groups.listGroups()\n-        self.assertEqual(gs[0].__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(gs[0]).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(gs[0].__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(gs[0]).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__, "GroupManager")\n \n     def testSetGroupOwnership(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        self.folder.invokeFactory(\'Document\', \'doc\')\n+        self.groups.addGroup("foo", [], [])\n+        self.folder.invokeFactory("Document", "doc")\n         doc = self.folder.doc\n-        g = self.groups.getGroupById(\'foo\')\n+        g = self.groups.getGroupById("foo")\n         self.groups.setGroupOwnership(g, doc)\n-        self.assertEqual(doc.getOwnerTuple()[1], \'foo\')\n-        self.assertEqual(doc.get_local_roles_for_userid(\'foo\'), (\'Owner\',))\n-        self.assertEqual(doc.get_local_roles_for_userid(TEST_USER_ID),\n-                         (\'Owner\',))\n+        self.assertEqual(doc.getOwnerTuple()[1], "foo")\n+        self.assertEqual(doc.get_local_roles_for_userid("foo"), ("Owner",))\n+        self.assertEqual(doc.get_local_roles_for_userid(TEST_USER_ID), ("Owner",))\n \n     def testWrapGroup(self):\n-        self.groups.addGroup(\'foo\', [], [])\n-        g = self.acl_users.getGroup(\'foo\')\n-        self.assertEqual(g.__class__.__name__, \'PloneGroup\')\n+        self.groups.addGroup("foo", [], [])\n+        g = self.acl_users.getGroup("foo")\n+        self.assertEqual(g.__class__.__name__, "PloneGroup")\n         g = self.groups.wrapGroup(g)\n-        self.assertEqual(g.__class__.__name__, \'GroupData\')\n-        self.assertEqual(aq_parent(g).__class__.__name__, \'PloneGroup\')\n-        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,\n-                         \'GroupManager\')\n+        self.assertEqual(g.__class__.__name__, "GroupData")\n+        self.assertEqual(aq_parent(g).__class__.__name__, "PloneGroup")\n+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__, "GroupManager")\n \n     def testGetGroupInfo(self):\n-        self.groups.addGroup(\'foo\', title=\'Foo\', description=\'Bar\',\n-                             email=\'foo@foo.com\')\n-        info = self.groups.getGroupInfo(\'foo\')\n-        self.assertEqual(info.get(\'title\'), \'Foo\')\n-        self.assertEqual(info.get(\'description\'), \'Bar\')\n-        self.assertEqual(info.get(\'email\'), None)  # No email!\n+        self.groups.addGroup("foo", title="Foo", description="Bar", email="foo@foo.com")\n+        info = self.groups.getGroupInfo("foo")\n+        self.assertEqual(info.get("title"), "Foo")\n+        self.assertEqual(info.get("description"), "Bar")\n+        self.assertEqual(info.get("email"), None)  # No email!\n \n     def testGetGroupInfoAsAnonymous(self):\n-        self.groups.addGroup(\'foo\', title=\'Foo\', description=\'Bar\')\n+        self.groups.addGroup("foo", title="Foo", description="Bar")\n         logout()\n-        info = self.groups.restrictedTraverse(\'getGroupInfo\')(\'foo\')\n-        self.assertEqual(info.get(\'title\'), \'Foo\')\n-        self.assertEqual(info.get(\'description\'), \'Bar\')\n+        info = self.groups.restrictedTraverse("getGroupInfo")("foo")\n+        self.assertEqual(info.get("title"), "Foo")\n+        self.assertEqual(info.get("description"), "Bar")\n \n     def testGetBadGroupInfo(self):\n-        info = self.groups.getGroupInfo(\'foo\')\n+        info = self.groups.getGroupInfo("foo")\n         self.assertEqual(info, None)\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 6189d267..68cb4c01 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -1,92 +1,100 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from OFS.Image import Image\n from plone.app.testing import TEST_USER_ID as default_user\n-from Products.PlonePAS.tests import dummy\n+from Products.CMFCore.interfaces import IMember\n+from Products.CMFCore.interfaces import IMemberData\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+from Products.PlonePAS.tests import dummy\n+from Products.PluggableAuthService.interfaces.events import IPropertiesUpdatedEvent\n from zope.component import getGlobalSiteManager\n from zope.component import getMultiAdapter\n-from Products.CMFCore.interfaces import IMember\n-from Products.CMFCore.interfaces import IMemberData\n-from Products.PluggableAuthService.interfaces.events import \\\n-        IPropertiesUpdatedEvent\n \n import unittest\n \n \n-\n class TestMemberDataTool(unittest.TestCase):\n \n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         self.membership.memberareaCreationFlag = 0\n         # Don\'t let default_user disturb results\n         self.portal.acl_users._doDelUsers([default_user])\n         # Add some members\n-        self.addMember(\'fred\', \'Fred Flintstone\', \'fred@bedrock.com\',\n-                       [\'Member\', \'Reviewer\'], \'2002-01-01\')\n-        self.addMember(\'barney\', \'Barney Rubble\', \'barney@bedrock.com\',\n-                       [\'Member\'], \'2002-01-01\')\n-        self.addMember(\'brubble\', \'Bambam Rubble\', \'bambam@bambam.net\',\n-                       [\'Member\'], \'2003-12-31\')\n+        self.addMember(\n+            "fred",\n+            "Fred Flintstone",\n+            "fred@bedrock.com",\n+            ["Member", "Reviewer"],\n+            "2002-01-01",\n+        )\n+        self.addMember(\n+            "barney", "Barney Rubble", "barney@bedrock.com", ["Member"], "2002-01-01"\n+        )\n+        self.addMember(\n+            "brubble", "Bambam Rubble", "bambam@bambam.net", ["Member"], "2003-12-31"\n+        )\n         # MUST reset this\n         self.memberdata._v_temps = None\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        member.setMemberProperties(\n+            {\n+                "fullname": fullname,\n+                "email": email,\n+                "last_login_time": DateTime(last_login_time),\n+            }\n+        )\n \n     def testSetPortrait(self):\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            default_user)\n-        self.assertEqual(self.memberdata._getPortrait(default_user).getId(),\n-                         default_user)\n-        self.assertEqual(self.memberdata._getPortrait(default_user).meta_type,\n-                         \'Image\')\n+            Image(id=default_user, file=dummy.File(), title=""), default_user\n+        )\n+        self.assertEqual(\n+            self.memberdata._getPortrait(default_user).getId(), default_user\n+        )\n+        self.assertEqual(self.memberdata._getPortrait(default_user).meta_type, "Image")\n \n     def testDeletePortrait(self):\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            default_user)\n+            Image(id=default_user, file=dummy.File(), title=""), default_user\n+        )\n         self.memberdata._deletePortrait(default_user)\n         self.assertEqual(self.memberdata._getPortrait(default_user), None)\n \n     def testPruneMemberDataContents(self):\n         # Only test what is not already tested elswhere\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            default_user)\n+            Image(id=default_user, file=dummy.File(), title=""), default_user\n+        )\n         self.memberdata._setPortrait(\n-            Image(id=default_user, file=dummy.File(), title=\'\'),\n-            \'dummy\')\n+            Image(id=default_user, file=dummy.File(), title=""), "dummy"\n+        )\n         self.memberdata.pruneMemberDataContents()\n         self.assertEqual(len(self.memberdata.portraits), 1)\n \n     def testFulltextMemberSearch(self):\n         # Search for a user by id, name, email, ...\n         search = self.memberdata.searchFulltextForMembers\n-        self.assertEqual(len(search(\'\')), 3)\n-        self.assertEqual(len(search(\'rubble\')), 2)\n-        self.assertEqual(len(search(\'stone\')), 1)\n-        self.assertEqual(len(search(\'bambam.net\')), 1)\n-        self.assertEqual(len(search(\'bedrock.com\')), 2)\n-        self.assertEqual(len(search(\'brubble\')), 1)\n+        self.assertEqual(len(search("")), 3)\n+        self.assertEqual(len(search("rubble")), 2)\n+        self.assertEqual(len(search("stone")), 1)\n+        self.assertEqual(len(search("bambam.net")), 1)\n+        self.assertEqual(len(search("bedrock.com")), 2)\n+        self.assertEqual(len(search("brubble")), 1)\n \n     def testMemberDataAdapter(self):\n         """Test, if the PlonePAS MemberData adapter is used instead of the\n         default one from Products.CMFCore.MemberDataTool\n         """\n         from Products.PlonePAS.tools.memberdata import MemberData\n-        member = self.membership.getMemberById(\'fred\')\n+\n+        member = self.membership.getMemberById("fred")\n \n         adapter = getMultiAdapter((member, self.memberdata), IMember)\n         self.assertEqual(adapter.__class__, MemberData)\n@@ -95,29 +103,25 @@ def testMemberDataAdapter(self):\n         self.assertEqual(wrapped_user.__class__, MemberData)\n \n     def testPropertiesUpdatedEvent(self):\n-\n         def event_handler(context, event):\n             self._properties_updated_handler_called = True\n \n         gsm = getGlobalSiteManager()\n-        gsm.registerHandler(event_handler,\n-                            (IMemberData, IPropertiesUpdatedEvent))\n+        gsm.registerHandler(event_handler, (IMemberData, IPropertiesUpdatedEvent))\n \n         self._properties_updated_handler_called = False\n \n-        username = \'ez\'\n-        roles = [\'Member\']\n-        fullname = \'Ez Zy\'\n-        email = \'ez@ezmail.net\'\n+        username = "ez"\n+        roles = ["Member"]\n+        fullname = "Ez Zy"\n+        email = "ez@ezmail.net"\n \n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n \n         self.assertFalse(self._properties_updated_handler_called)\n \n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email})\n+        member.setMemberProperties({"fullname": fullname, "email": email})\n \n         self.assertTrue(self._properties_updated_handler_called)\n \n@@ -126,19 +130,21 @@ def event_handler(context, event):\n \n         # Imitate a login as the plone.app.testing login method doesn\'t seem to\n         # set these member properties.\n-        member.setMemberProperties({\n-            \'login_time\': DateTime(\'2018-02-15\'),\n-            \'last_login_time\': DateTime(\'2018-02-15\')})\n+        member.setMemberProperties(\n+            {\n+                "login_time": DateTime("2018-02-15"),\n+                "last_login_time": DateTime("2018-02-15"),\n+            }\n+        )\n \n         self.assertFalse(self._properties_updated_handler_called)\n \n         # Test notify(PropertiesUpdated) isn\'t called when login_time is\n         # present as we\'re assuming this should only be changed on login.\n         self._properties_updated_handler_called = False\n-        member.setMemberProperties({\n-            \'login_time\': DateTime(\'2018-02-15\'),\n-            \'fullname\': \'Bed Rock\'})\n+        member.setMemberProperties(\n+            {"login_time": DateTime("2018-02-15"), "fullname": "Bed Rock"}\n+        )\n \n         self.assertFalse(self._properties_updated_handler_called)\n-        gsm.unregisterHandler(event_handler,\n-                              (IMemberData, IPropertiesUpdatedEvent))\n+        gsm.unregisterHandler(event_handler, (IMemberData, IPropertiesUpdatedEvent))\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex 70ccd05e..ca8593a6 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -1,19 +1,19 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from AccessControl.User import nobody\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.Image import Image\n+from plone.app.testing import login\n+from plone.app.testing import logout\n from plone.app.testing import PLONE_SITE_ID\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import logout\n-from plone.app.testing import setRoles\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.browser.member import PASMemberView\n from Products.PlonePAS.interfaces.membership import IMembershipTool\n@@ -23,17 +23,12 @@\n from Products.PlonePAS.tools.memberdata import MemberData\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PlonePAS.utils import getGroupsForPrincipal\n-from Products.PluggableAuthService.interfaces.events import \\\n-    ICredentialsUpdatedEvent\n-from six import BytesIO\n+from Products.PluggableAuthService.interfaces.events import ICredentialsUpdatedEvent\n+from zExceptions import BadRequest\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n-from zExceptions import BadRequest\n-from plone.app.testing import TEST_USER_ID\n-\n \n import os\n-import six\n import unittest\n \n \n@@ -42,18 +37,18 @@ class MembershipToolTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.mt = getToolByName(self.portal, \'portal_membership\')\n-        self.md = getToolByName(self.portal, \'portal_memberdata\')\n+        self.portal = self.layer["portal"]\n+        self.mt = getToolByName(self.portal, "portal_membership")\n+        self.md = getToolByName(self.portal, "portal_memberdata")\n \n-        self.member_id = \'member1\'\n+        self.member_id = "member1"\n         # Create a new Member\n         self.mt.addMember(\n             self.member_id,\n-            \'pw\',\n-            [\'Member\'],\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'member1@host.com\', \'title\': \'Member #1\'}\n+            {"email": "member1@host.com", "title": "Member #1"},\n         )\n \n     def test_get_member(self):\n@@ -69,7 +64,9 @@ def test_get_member(self):\n \n     def test_get_member_by_id(self):\n         from Products.PluggableAuthService.PluggableAuthService import (\n-            PluggableAuthService)\n+            PluggableAuthService,\n+        )\n+\n         # Use tool way of getting member by id. This returns a\n         # MemberData object wrapped by PAS (used to be wrapped by member).\n         member = self.mt.getMemberById(self.member_id)\n@@ -78,7 +75,9 @@ def test_get_member_by_id(self):\n         self.assertTrue(isinstance(aq_parent(member), PluggableAuthService))\n \n     def test_id_clean(self):\n-        from Products.PlonePAS.utils import cleanId, decleanId\n+        from Products.PlonePAS.utils import cleanId\n+        from Products.PlonePAS.utils import decleanId\n+\n         a = [\n             "asdfasdf",\n             "asdf-asdf",\n@@ -130,11 +129,9 @@ def test_id_clean(self):\n         ac = zip(a, c)\n         for aa, cc in ac:\n             self.assertTrue(aa == cc)\n-        cleaned = cleanId(u\'abc\')\n-        self.assertEqual(cleaned, \'abc\')\n+        cleaned = cleanId("abc")\n+        self.assertEqual(cleaned, "abc")\n         self.assertTrue(isinstance(cleaned, str))\n-        if six.PY2:\n-            self.assertFalse(isinstance(cleaned, six.text_type))\n \n \n class MemberAreaTest(unittest.TestCase):\n@@ -142,19 +139,19 @@ class MemberAreaTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.mt = getToolByName(self.portal, \'portal_membership\')\n-        self.md = getToolByName(self.portal, \'portal_memberdata\')\n+        self.portal = self.layer["portal"]\n+        self.mt = getToolByName(self.portal, "portal_membership")\n+        self.md = getToolByName(self.portal, "portal_memberdata")\n         # Enable member-area creation\n         self.mt.memberareaCreationFlag = 1\n         # Those are all valid chars in Zope.\n         self.mid = "Member #1 - Houston, TX. ($100)"\n         self.pas = self.portal.acl_users\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_funky_member_ids_1(self):\n         mid = self.mid\n-        minfo = (mid, \'pw\', [\'Member\'], [])\n+        minfo = (mid, "pw", ["Member"], [])\n \n         # Create a new User\n         self.pas._doAddUser(*minfo)\n@@ -162,26 +159,26 @@ def test_funky_member_ids_1(self):\n \n     def test_funky_member_ids_2(self):\n         # Forward-slash is not allowed\n-        mid = self.mid + \'/\'\n-        minfo = (mid, \'pw\', [\'Member\'], [])\n+        mid = self.mid + "/"\n+        minfo = (mid, "pw", ["Member"], [])\n \n         # Create a new User\n         self.pas._doAddUser(*minfo)\n         self.mt.createMemberArea(mid)\n \n     def test_memberareaCreationFlag_respected(self):\n-        self.pas._doAddUser(\'foo\', \'pw\', [\'Member\'], [])\n-        self.pas._doAddUser(\'bar\', \'pw\', [\'Member\'], [])\n+        self.pas._doAddUser("foo", "pw", ["Member"], [])\n+        self.pas._doAddUser("bar", "pw", ["Member"], [])\n \n-        self.assertFalse(\'foo\' in self.portal.Members)\n-        self.assertFalse(\'bar\' in self.portal.Members)\n+        self.assertFalse("foo" in self.portal.Members)\n+        self.assertFalse("bar" in self.portal.Members)\n \n-        self.mt.createMemberarea(\'foo\')\n-        self.assertTrue(\'foo\' in self.portal.Members)\n+        self.mt.createMemberarea("foo")\n+        self.assertTrue("foo" in self.portal.Members)\n \n         self.mt.memberareaCreationFlag = 0\n-        self.mt.createMemberArea(\'bar\')\n-        self.assertFalse(\'bar\' in self.portal.Members)\n+        self.mt.createMemberArea("bar")\n+        self.assertFalse("bar" in self.portal.Members)\n \n \n class TestMembershipTool(unittest.TestCase):\n@@ -189,27 +186,33 @@ class TestMembershipTool(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.groups = self.portal.portal_groups\n-        self.folder = self.portal[\'folder\']\n+        self.folder = self.portal["folder"]\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n+\n         verifyClass(IMembershipTool, MembershipTool)\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname, \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        member.setMemberProperties(\n+            {\n+                "fullname": fullname,\n+                "email": email,\n+                "last_login_time": DateTime(last_login_time),\n+            }\n+        )\n \n     def makeRealImage(self):\n         import Products.PlonePAS as ppas\n+\n         pas_path = os.path.dirname(ppas.__file__)\n-        path = os.path.join(pas_path, \'tool.gif\')\n-        image = open(path, \'rb\')\n+        path = os.path.join(pas_path, "tool.gif")\n+        image = open(path, "rb")\n         image_upload = dummy.FileUpload(dummy.FieldStorage(image))\n         return image_upload\n \n@@ -228,8 +231,8 @@ def testGetPersonalFolderIfNoHome(self):\n     def testGetPersonalPortrait(self):\n         # Should return the default portrait\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), "defaultUser.png"\n+        )\n \n     def testChangeOwnMemberPortrait(self):\n         # Should change the portrait image\n@@ -237,20 +240,20 @@ def testChangeOwnMemberPortrait(self):\n         image = self.makeRealImage()\n         self.membership.changeMemberPortrait(image, TEST_USER_ID)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            TEST_USER_ID)\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), TEST_USER_ID\n+        )\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).meta_type,\n-            \'Image\')\n+            self.membership.getPersonalPortrait(TEST_USER_ID).meta_type, "Image"\n+        )\n \n     def testChangeOwnMemberPortraitWithEmailUsers(self):\n-        member_id = \'member2@host.com\'\n+        member_id = "member2@host.com"\n         self.membership.addMember(\n             member_id,\n-            \'pw\',\n-            [\'Member\'],\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'member2@host.com\', \'title\': \'Member #2\'}\n+            {"email": "member2@host.com", "title": "Member #2"},\n         )\n \n         login(self.portal, member_id)\n@@ -259,129 +262,118 @@ def testChangeOwnMemberPortraitWithEmailUsers(self):\n \n         self.membership.changeMemberPortrait(image, member_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(member_id).getId(),\n-            safe_member_id)\n+            self.membership.getPersonalPortrait(member_id).getId(), safe_member_id\n+        )\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(member_id).meta_type,\n-            \'Image\')\n+            self.membership.getPersonalPortrait(member_id).meta_type, "Image"\n+        )\n \n     def testCannotChangeOtherMemberPortrait(self):\n         # A normal member should not be able to change the portrait of\n         # another member.\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.assertRaises(Unauthorized, self.membership.changeMemberPortrait,\n-                          image, \'joe\')\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.assertRaises(\n+            Unauthorized, self.membership.changeMemberPortrait, image, "joe"\n+        )\n \n     def testChangeMemberPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # This should not raise Unauthorized:\n-        self.membership.changeMemberPortrait(image, \'joe\')\n-        self.assertEqual(self.membership.getPersonalPortrait(\'joe\').getId(),\n-                         \'joe\')\n-        self.assertEqual(self.membership.getPersonalPortrait(\'joe\').meta_type,\n-                         \'Image\')\n+        self.membership.changeMemberPortrait(image, "joe")\n+        self.assertEqual(self.membership.getPersonalPortrait("joe").getId(), "joe")\n+        self.assertEqual(self.membership.getPersonalPortrait("joe").meta_type, "Image")\n \n     def testDeleteOwnPersonalPortrait(self):\n         # Should delete the portrait image\n         image = self.makeRealImage()\n         self.membership.changeMemberPortrait(image, TEST_USER_ID)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            TEST_USER_ID)\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), TEST_USER_ID\n+        )\n         self.membership.deletePersonalPortrait(TEST_USER_ID)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(TEST_USER_ID).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(TEST_USER_ID).getId(), "defaultUser.png"\n+        )\n \n     def testCannotDeleteOtherPersonalPortrait(self):\n         # A normal member should not be able to delete the portrait of\n         # another member.\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.membership.changeMemberPortrait(image, \'joe\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertRaises(Unauthorized, self.membership.deletePersonalPortrait,\n-                          \'joe\')\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.membership.changeMemberPortrait(image, "joe")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertRaises(Unauthorized, self.membership.deletePersonalPortrait, "joe")\n \n     def testDeleteOtherPersonalPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.membership.changeMemberPortrait(image, \'joe\')\n-        self.membership.deletePersonalPortrait(\'joe\')\n+        self.membership.addMember("joe", "secret", ["Member"], [])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.membership.changeMemberPortrait(image, "joe")\n+        self.membership.deletePersonalPortrait("joe")\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(\'joe\').getId(),\n-            \'defaultUser.png\'\n+            self.membership.getPersonalPortrait("joe").getId(), "defaultUser.png"\n         )\n \n     def testGetPersonalPortraitWithoutPassingId(self):\n         # Should return the logged in users portrait if no id is given\n         image = self.makeRealImage()\n         self.membership.changeMemberPortrait(image, TEST_USER_ID)\n-        self.assertEqual(self.membership.getPersonalPortrait().getId(),\n-                         TEST_USER_ID)\n-        self.assertEqual(self.membership.getPersonalPortrait().meta_type,\n-                         \'Image\')\n+        self.assertEqual(self.membership.getPersonalPortrait().getId(), TEST_USER_ID)\n+        self.assertEqual(self.membership.getPersonalPortrait().meta_type, "Image")\n \n     def testPortraitForNonStandardUserId(self):\n         # Some characters in a user id can give problems for getting\n         # or saving a portrait, especially \'-\', \'+\', \'@\'.\n         image = self.makeRealImage()\n-        user_id = \'bob-jones+test@example.org\'\n+        user_id = "bob-jones+test@example.org"\n         safe_id = self.membership._getSafeMemberId(user_id)\n-        self.assertEqual(safe_id, \'bob--jones-2Btest-40example.org\')\n-        self.membership.addMember(user_id, \'secret\', [\'Member\'], [])\n+        self.assertEqual(safe_id, "bob--jones-2Btest-40example.org")\n+        self.membership.addMember(user_id, "secret", ["Member"], [])\n         login(self.portal, user_id)\n \n         # Should return the default portrait\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(user_id).getId(), "defaultUser.png"\n+        )\n \n         # Change your own portrait.\n         self.membership.changeMemberPortrait(image, user_id)\n-        self.assertEqual(self.membership.getPersonalPortrait().getId(),\n-                         safe_id)\n-        self.assertEqual(self.membership.getPersonalPortrait().meta_type,\n-                         \'Image\')\n+        self.assertEqual(self.membership.getPersonalPortrait().getId(), safe_id)\n+        self.assertEqual(self.membership.getPersonalPortrait().meta_type, "Image")\n \n         # Other users should be able to see your portrait.\n         login(self.portal, TEST_USER_NAME)\n+        self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(), safe_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            safe_id)\n-        self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).meta_type,\n-            \'Image\')\n+            self.membership.getPersonalPortrait(user_id).meta_type, "Image"\n+        )\n \n         # You can delete your own portrait.\n         login(self.portal, user_id)\n         self.membership.deletePersonalPortrait(user_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            \'defaultUser.png\')\n+            self.membership.getPersonalPortrait(user_id).getId(), "defaultUser.png"\n+        )\n \n         # Managers should be able to change the portrait of another\n         # member and delete it.\n         manager_image = self.makeRealImage()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(manager_image, user_id)\n-        self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(),\n-                         safe_id)\n+        self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(), safe_id)\n         self.membership.deletePersonalPortrait(user_id)\n         self.assertEqual(\n-            self.membership.getPersonalPortrait(user_id).getId(),\n-            \'defaultUser.png\'\n+            self.membership.getPersonalPortrait(user_id).getId(), "defaultUser.png"\n         )\n \n     def testListMembers(self):\n@@ -393,8 +385,8 @@ def testListMembers(self):\n     def testListMembersSkipsGroups(self):\n         # Should only return real members, not groups\n         uf = self.portal.acl_users\n-        self.groups.addGroup(\'Foo\')\n-        self.groups.addGroup(\'Bar\')\n+        self.groups.addGroup("Foo")\n+        self.groups.addGroup("Bar")\n         self.assertEqual(len(uf.getUserNames()), 1)\n         members = self.membership.listMembers()\n         self.assertEqual(len(members), 1)\n@@ -409,8 +401,8 @@ def testListMemberIds(self):\n     def testListMemberIdsSkipsGroups(self):\n         # Should only return real members, not groups\n         uf = self.portal.acl_users\n-        self.groups.addGroup(\'Foo\')\n-        self.groups.addGroup(\'Bar\')\n+        self.groups.addGroup("Foo")\n+        self.groups.addGroup("Bar")\n         self.assertEqual(len(uf.getUserNames()), 1)\n         memberids = self.membership.listMemberIds()\n         self.assertEqual(len(memberids), 1)\n@@ -418,57 +410,54 @@ def testListMemberIdsSkipsGroups(self):\n \n     def testCurrentPassword(self):\n         # Password checking should work\n-        self.assertTrue(self.membership.testCurrentPassword(\'secret\'))\n-        self.assertFalse(self.membership.testCurrentPassword(\'geheim\'))\n+        self.assertTrue(self.membership.testCurrentPassword("secret"))\n+        self.assertFalse(self.membership.testCurrentPassword("geheim"))\n \n     def testSetPassword(self):\n         # Password should be changed\n-        self.membership.setPassword(\'geheim\')\n-        self.assertTrue(self.membership.testCurrentPassword(\'geheim\'))\n+        self.membership.setPassword("geheim")\n+        self.assertTrue(self.membership.testCurrentPassword("geheim"))\n \n     def testSetPasswordIfAnonymous(self):\n         # Anonymous should not be able to change password\n         logout()\n         try:\n-            self.membership.setPassword(\'geheim\')\n+            self.membership.setPassword("geheim")\n         except BadRequest:\n             import sys\n+\n             e, v, tb = sys.exc_info()\n             del tb\n-            if str(v) == \'Not logged in.\':\n+            if str(v) == "Not logged in.":\n                 pass\n             else:\n                 raise\n \n     def testSetPasswordAndKeepGroups(self):\n         # Password should be changed and user must not change group membership\n-        group2 = \'g2\'\n+        group2 = "g2"\n         groups = self.groups\n         groups.addGroup(group2, None, [], [])\n         group = groups.getGroupById(group2)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n         ugroups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n-        self.membership.setPassword(\'geheim\')\n+        self.membership.setPassword("geheim")\n         t_groups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n         self.assertTrue(t_groups == ugroups)\n \n     def testGetMemberById(self):\n         # This should work for portal users,\n         self.assertNotEqual(self.membership.getMemberById(TEST_USER_ID), None)\n-        self.assertEqual(self.membership.getMemberById(\'foo\'), None)\n-        self.assertNotEqual(\n-            self.membership.getMemberById(SITE_OWNER_NAME),\n-            None\n-        )\n+        self.assertEqual(self.membership.getMemberById("foo"), None)\n+        self.assertNotEqual(self.membership.getMemberById(SITE_OWNER_NAME), None)\n \n     def testGetMemberByIdIsWrapped(self):\n         member = self.membership.getMemberById(TEST_USER_ID)\n         self.assertNotEqual(member, None)\n-        self.assertEqual(member.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(member).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(member.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(member).__class__.__name__, "PluggableAuthService")\n \n     def testGetAuthenticatedMember(self):\n         member = self.membership.getAuthenticatedMember()\n@@ -477,21 +466,20 @@ def testGetAuthenticatedMember(self):\n     def testGetAuthenticatedMemberIsWrapped(self):\n         member = self.membership.getAuthenticatedMember()\n         self.assertEqual(member.getUserName(), TEST_USER_NAME)\n-        self.assertEqual(member.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(member).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(member.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(member).__class__.__name__, "PluggableAuthService")\n \n     def testGetAuthenticatedMemberIfAnonymous(self):\n         logout()\n         member = self.membership.getAuthenticatedMember()\n-        self.assertEqual(member.getUserName(), \'Anonymous User\')\n+        self.assertEqual(member.getUserName(), "Anonymous User")\n \n     def testAnonymousMemberIsNotWrapped(self):\n         # Also see http://dev.plone.org/plone/ticket/1851\n         logout()\n         member = self.membership.getAuthenticatedMember()\n-        self.assertNotEqual(member.__class__.__name__, \'MemberData\')\n-        self.assertEqual(member.__class__.__name__, \'SpecialUser\')\n+        self.assertNotEqual(member.__class__.__name__, "MemberData")\n+        self.assertEqual(member.__class__.__name__, "SpecialUser")\n \n     def testIsAnonymousUser(self):\n         self.assertFalse(self.membership.isAnonymousUser())\n@@ -500,168 +488,162 @@ def testIsAnonymousUser(self):\n \n     def testWrapUserWrapsBareUser(self):\n         user = self.portal.acl_users.getUserById(TEST_USER_ID)\n-        self.assertTrue(hasattr(user, \'aq_base\'))\n+        self.assertTrue(hasattr(user, "aq_base"))\n         user = aq_base(user)\n         user = self.membership.wrapUser(user)\n-        self.assertEqual(user.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(user).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(user.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(user).__class__.__name__, "PluggableAuthService")\n \n     def testWrapUserWrapsWrappedUser(self):\n         user = self.portal.acl_users.getUserById(TEST_USER_ID)\n-        self.assertTrue(hasattr(user, \'aq_base\'))\n+        self.assertTrue(hasattr(user, "aq_base"))\n         user = self.membership.wrapUser(user)\n-        self.assertEqual(user.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(user).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(user.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(user).__class__.__name__, "PluggableAuthService")\n \n     def testWrapUserDoesntWrapMemberData(self):\n         user = self.portal.acl_users.getUserById(TEST_USER_ID)\n         user.getMemberId = lambda x: 1\n         user = self.membership.wrapUser(user)\n-        self.assertEqual(user.__class__.__name__, \'PloneUser\')\n+        self.assertEqual(user.__class__.__name__, "PloneUser")\n \n     def testWrapUserDoesntWrapAnonymous(self):\n         user = self.membership.wrapUser(nobody)\n-        self.assertEqual(user.__class__.__name__, \'SpecialUser\')\n+        self.assertEqual(user.__class__.__name__, "SpecialUser")\n \n     def testWrapUserWrapsAnonymous(self):\n-        self.assertFalse(hasattr(nobody, \'aq_base\'))\n+        self.assertFalse(hasattr(nobody, "aq_base"))\n         user = self.membership.wrapUser(nobody, wrap_anon=1)\n-        self.assertEqual(user.__class__.__name__, \'MemberData\')\n-        self.assertEqual(aq_parent(user).__class__.__name__,\n-                         \'PluggableAuthService\')\n+        self.assertEqual(user.__class__.__name__, "MemberData")\n+        self.assertEqual(aq_parent(user).__class__.__name__, "PluggableAuthService")\n \n     def testGetCandidateLocalRoles(self):\n-        self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n-                         (\'Owner\',))\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n-        self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n-                         (\'Owner\', \'Reviewer\'))\n+        self.assertEqual(\n+            self.membership.getCandidateLocalRoles(self.folder), ("Owner",)\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Reviewer"])\n+        self.assertEqual(\n+            self.membership.getCandidateLocalRoles(self.folder), ("Owner", "Reviewer")\n+        )\n \n     def testSetLocalRoles(self):\n-        self.assertTrue(\n-            \'Owner\' in self.folder.get_local_roles_for_userid(TEST_USER_ID))\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n-        self.membership.setLocalRoles(self.folder, [TEST_USER_ID, \'user2\'],\n-                                      \'Reviewer\')\n-        self.assertEqual(self.folder.get_local_roles_for_userid(TEST_USER_ID),\n-                         (\'Owner\', \'Reviewer\'))\n-        self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'),\n-                         (\'Reviewer\',))\n+        self.assertTrue("Owner" in self.folder.get_local_roles_for_userid(TEST_USER_ID))\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Reviewer"])\n+        self.membership.setLocalRoles(self.folder, [TEST_USER_ID, "user2"], "Reviewer")\n+        self.assertEqual(\n+            self.folder.get_local_roles_for_userid(TEST_USER_ID), ("Owner", "Reviewer")\n+        )\n+        self.assertEqual(self.folder.get_local_roles_for_userid("user2"), ("Reviewer",))\n \n     def testDeleteLocalRoles(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n-        self.membership.setLocalRoles(self.folder, [\'user2\'], \'Reviewer\')\n-        self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'),\n-                         (\'Reviewer\',))\n-        self.membership.deleteLocalRoles(self.folder, [\'user2\'])\n-        self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'), ())\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Reviewer"])\n+        self.membership.setLocalRoles(self.folder, ["user2"], "Reviewer")\n+        self.assertEqual(self.folder.get_local_roles_for_userid("user2"), ("Reviewer",))\n+        self.membership.deleteLocalRoles(self.folder, ["user2"])\n+        self.assertEqual(self.folder.get_local_roles_for_userid("user2"), ())\n \n     def testGetHomeFolder(self):\n         self.assertNotEqual(self.membership.getHomeFolder(), None)\n-        self.assertEqual(self.membership.getHomeFolder(\'user2\'), None)\n+        self.assertEqual(self.membership.getHomeFolder("user2"), None)\n \n     def testGetHomeUrl(self):\n         self.assertNotEqual(self.membership.getHomeUrl(), None)\n-        self.assertEqual(self.membership.getHomeUrl(\'user2\'), None)\n+        self.assertEqual(self.membership.getHomeUrl("user2"), None)\n \n     def testGetAuthenticatedMemberInfo(self):\n         member = self.membership.getAuthenticatedMember()\n-        member.setMemberProperties({\'fullname\': \'Test user\'})\n+        member.setMemberProperties({"fullname": "Test user"})\n         info = self.membership.getMemberInfo()\n-        self.assertEqual(info[\'fullname\'], \'Test user\')\n+        self.assertEqual(info["fullname"], "Test user")\n \n     def testGetMemberInfo(self):\n-        self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [],\n-                                  properties={\'fullname\': \'Second user\'})\n-        info = self.membership.getMemberInfo(\'user2\')\n-        self.assertEqual(info[\'fullname\'], \'Second user\')\n+        self.membership.addMember(\n+            "user2", "secret", ["Member"], [], properties={"fullname": "Second user"}\n+        )\n+        info = self.membership.getMemberInfo("user2")\n+        self.assertEqual(info["fullname"], "Second user")\n \n     def testGetMemberInfoWithMissingProperties(self):\n-        self.membership.addMember(\'user3\', \'secret\', [\'Member\'], [],\n-                                  properties={\'fullname\': \'Second user\'})\n-        self.membership.portal_memberdata._delProperty(\'location\')\n-        self.membership.portal_memberdata._delProperty(\'home_page\')\n-        info = self.membership.getMemberInfo(\'user3\')\n-        self.assertEqual(info[\'fullname\'], \'Second user\')\n+        self.membership.addMember(\n+            "user3", "secret", ["Member"], [], properties={"fullname": "Second user"}\n+        )\n+        self.membership.portal_memberdata._delProperty("location")\n+        self.membership.portal_memberdata._delProperty("home_page")\n+        info = self.membership.getMemberInfo("user3")\n+        self.assertEqual(info["fullname"], "Second user")\n \n     def testGetMemberInfoHomePage(self):\n-        self.membership.addMember(\n-            \'user4\', \'secret\', [\'Member\'], [],\n-            properties={})\n+        self.membership.addMember("user4", "secret", ["Member"], [], properties={})\n         # empty home_page\n-        member = self.membership.getMemberById(\'user4\')\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'\')\n+        member = self.membership.getMemberById("user4")\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "")\n \n         # regular external home_page\n-        member.setMemberProperties({\'home_page\': \'http://maurits.vanrees.org\'})\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'http://maurits.vanrees.org\')\n+        member.setMemberProperties({"home_page": "http://maurits.vanrees.org"})\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "http://maurits.vanrees.org")\n \n         # internal home_page\n-        member.setMemberProperties({\'home_page\': \'internal_page\'})\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'internal_page\')\n+        member.setMemberProperties({"home_page": "internal_page"})\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "internal_page")\n \n         # bad home_page\n-        member.setMemberProperties({\'home_page\': \'javascript:alert("hello")\'})\n-        info = self.membership.getMemberInfo(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'\')\n+        member.setMemberProperties({"home_page": \'javascript:alert("hello")\'})\n+        info = self.membership.getMemberInfo("user4")\n+        self.assertEqual(info.get("home_page"), "")\n \n     def testGetCandidateLocalRolesIncludesLocalRolesOnObjectForManager(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID,\n-                                         (\'Manager\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("Manager", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'my_test_role\' in roles,\n-                        \'my_test_role not in: %s\' % str(roles))\n+        self.assertTrue("my_test_role" in roles, "my_test_role not in: %s" % str(roles))\n \n     def testGetCandidateLocalRolesIncludesLocalRolesOnObjectForAssignees(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID,\n-                                         (\'my_test_role\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("my_test_role", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Owner\' in roles)\n-        self.assertTrue(\'my_test_role\' in roles)\n+        self.assertTrue("Owner" in roles)\n+        self.assertTrue("my_test_role" in roles)\n         self.assertEqual(len(roles), 2)\n \n     def testGetCandidateLocalRolesForManager(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID, (\'Manager\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("Manager", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Manager\' in roles)\n-        self.assertTrue(\'Owner\' in roles)\n-        self.assertTrue(\'Reviewer\' in roles)\n+        self.assertTrue("Manager" in roles)\n+        self.assertTrue("Owner" in roles)\n+        self.assertTrue("Reviewer" in roles)\n \n     def testGetCandidateLocalRolesForOwner(self):\n-        self.folder._addRole(\'my_test_role\')\n+        self.folder._addRole("my_test_role")\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Owner\' in roles)\n+        self.assertTrue("Owner" in roles)\n         self.assertEqual(len(roles), 1)\n \n     def testGetCandidateLocalRolesForAssigned(self):\n-        self.folder._addRole(\'my_test_role\')\n-        self.folder.manage_setLocalRoles(TEST_USER_ID, (\'Reviewer\', \'Owner\'))\n+        self.folder._addRole("my_test_role")\n+        self.folder.manage_setLocalRoles(TEST_USER_ID, ("Reviewer", "Owner"))\n         roles = self.membership.getCandidateLocalRoles(self.folder)\n-        self.assertTrue(\'Owner\' in roles)\n-        self.assertTrue(\'Reviewer\' in roles)\n+        self.assertTrue("Owner" in roles)\n+        self.assertTrue("Reviewer" in roles)\n         self.assertEqual(len(roles), 2)\n \n     def test_bug4333_delete_user_remove_memberdata(self):\n         # delete user should delete portal_memberdata\n         memberdata = self.portal.portal_memberdata\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.addMember(\'barney\', \'Barney Rubble\', \'barney@bedrock.com\',\n-                       [\'Member\'], \'2002-01-01\')\n-        barney = self.membership.getMemberById(\'barney\')\n-        self.assertEqual(barney.getProperty(\'email\'), \'barney@bedrock.com\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.addMember(\n+            "barney", "Barney Rubble", "barney@bedrock.com", ["Member"], "2002-01-01"\n+        )\n+        barney = self.membership.getMemberById("barney")\n+        self.assertEqual(barney.getProperty("email"), "barney@bedrock.com")\n         del barney\n \n-        self.membership.deleteMembers([\'barney\'])\n+        self.membership.deleteMembers(["barney"])\n         md = memberdata._members\n-        self.assertFalse(\'barney\' in md)\n+        self.assertFalse("barney" in md)\n \n         # There is an _v_ variable that is killed at the end of each request\n         # which stores a temporary version of the member object, this is\n@@ -670,17 +652,19 @@ def test_bug4333_delete_user_remove_memberdata(self):\n         # using the tool.\n         memberdata._v_temps = None\n \n-        self.membership.addMember(\'barney\', \'secret\', [\'Member\'], [])\n-        barney = self.membership.getMemberById(\'barney\')\n-        self.assertNotEqual(barney.getProperty(\'fullname\'), \'Barney Rubble\')\n-        self.assertNotEqual(barney.getProperty(\'email\'), \'barney@bedrock.com\')\n+        self.membership.addMember("barney", "secret", ["Member"], [])\n+        barney = self.membership.getMemberById("barney")\n+        self.assertNotEqual(barney.getProperty("fullname"), "Barney Rubble")\n+        self.assertNotEqual(barney.getProperty("email"), "barney@bedrock.com")\n \n     def testBogusMemberPortrait(self):\n         # Should change the portrait image\n-        bad_file = dummy.File(data=b\'<div>This is a lie!!!</div>\',\n-                              headers={\'content_type\': \'image/jpeg\'})\n-        self.assertRaises(IOError, self.membership.changeMemberPortrait,\n-                          bad_file, TEST_USER_ID)\n+        bad_file = dummy.File(\n+            data=b"<div>This is a lie!!!</div>", headers={"content_type": "image/jpeg"}\n+        )\n+        self.assertRaises(\n+            IOError, self.membership.changeMemberPortrait, bad_file, TEST_USER_ID\n+        )\n \n     def testGetBadMembers(self):\n         # Should list members with bad images\n@@ -688,20 +672,17 @@ def testGetBadMembers(self):\n         self.assertEqual(self.membership.getBadMembers(), [])\n         # Let\'s add one\n         bad_file = Image(\n-            id=TEST_USER_ID,\n-            title=\'\',\n-            file=BytesIO(b\'<div>This is a lie!!!</div>\')\n+            id=TEST_USER_ID, title="", file=BytesIO(b"<div>This is a lie!!!</div>")\n         )\n         # Manually set a bad image using private methods\n         self.portal.portal_memberdata._setPortrait(bad_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [TEST_USER_ID])\n         # Try an empty image\n-        empty_file = Image(id=TEST_USER_ID, title=\'\', file=BytesIO(b\'\'))\n+        empty_file = Image(id=TEST_USER_ID, title="", file=BytesIO(b""))\n         self.portal.portal_memberdata._setPortrait(empty_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [])\n         # And a good image\n-        self.membership.changeMemberPortrait(self.makeRealImage(),\n-                                             TEST_USER_ID)\n+        self.membership.changeMemberPortrait(self.makeRealImage(), TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [])\n \n     def test_credentials_updated_event(self):\n@@ -714,13 +695,13 @@ def got_credentials_updated_event(event):\n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(got_credentials_updated_event)\n \n-        self.assertTrue(self.membership.testCurrentPassword(\'secret\'))\n-        self.assertFalse(self.membership.testCurrentPassword(\'whoknows\'))\n+        self.assertTrue(self.membership.testCurrentPassword("secret"))\n+        self.assertFalse(self.membership.testCurrentPassword("whoknows"))\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n-        self.membership.setPassword(\'guessagain\')\n+        self.membership.setPassword("guessagain")\n         self.assertEqual(len(events_fired), 1)\n         self.assertEqual(events_fired[0].principal.getId(), TEST_USER_ID)\n-        self.assertEqual(events_fired[0].password, \'guessagain\')\n+        self.assertEqual(events_fired[0].password, "guessagain")\n \n \n class TestCreateMemberarea(unittest.TestCase):\n@@ -728,83 +709,81 @@ class TestCreateMemberarea(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n+        self.membership.addMember("user2", "secret", ["Member"], [])\n \n     def testCreateMemberarea(self):\n         # Should create a memberarea for user2\n         if self.membership.memberareaCreationFlag is True:\n-            self.membership.createMemberarea(\'user2\')\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n-            self.assertTrue(memberfolder,\n-                            \'createMemberarea failed to create memberarea\')\n+            self.membership.createMemberarea("user2")\n+            memberfolder = self.membership.getHomeFolder("user2")\n+            self.assertTrue(\n+                memberfolder, "createMemberarea failed to create memberarea"\n+            )\n             # member area creation should be on by default\n             self.assertTrue(self.membership.getMemberareaCreationFlag())\n \n     def testCreatMemberareaUsesCurrentUser(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Should create a memberarea for user2\n-            login(self.portal, \'user2\')\n+            login(self.portal, "user2")\n             self.membership.createMemberarea()\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n+            memberfolder = self.membership.getHomeFolder("user2")\n             self.assertTrue(\n                 memberfolder,\n-                \'createMemberarea failed to create memberarea for current \'\n-                \'user\'\n+                "createMemberarea failed to create memberarea for current " "user",\n             )\n         else:\n             pass\n \n     def testNoMemberareaIfNoMembersFolder(self):\n         # Should not create a memberarea if the Members folder is missing\n-        self.portal._delObject(\'Members\')\n-        self.membership.createMemberarea(\'user2\')\n-        memberfolder = self.membership.getHomeFolder(\'user2\')\n+        self.portal._delObject("Members")\n+        self.membership.createMemberarea("user2")\n+        memberfolder = self.membership.getHomeFolder("user2")\n         self.assertFalse(\n-            memberfolder,\n-            \'createMemberarea unexpectedly created a memberarea\'\n+            memberfolder, "createMemberarea unexpectedly created a memberarea"\n         )\n \n     def testNoMemberareaIfMemberareaExists(self):\n         # Should not attempt to create a memberarea if a memberarea already\n         # exists\n-        self.membership.createMemberarea(\'user2\')\n+        self.membership.createMemberarea("user2")\n         # The second call should do nothing (not cause an error)\n-        self.membership.createMemberarea(\'user2\')\n+        self.membership.createMemberarea("user2")\n \n     def testNotifyScriptIsCalled(self):\n         # The notify script should be called\n         if self.membership.memberareaCreationFlag is True:\n             self.portal.notifyMemberAreaCreated = dummy.Raiser(dummy.Error)\n-            self.assertRaises(dummy.Error, self.membership.createMemberarea,\n-                              \'user2\')\n+            self.assertRaises(dummy.Error, self.membership.createMemberarea, "user2")\n \n     def testCreateMemberareaAlternateName(self):\n         # Alternate method name \'createMemberaArea\' should work\n         if self.membership.memberareaCreationFlag is True:\n-            self.membership.createMemberArea(\'user2\')\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n-            self.assertTrue(memberfolder,\n-                            \'createMemberArea failed to create memberarea\')\n+            self.membership.createMemberArea("user2")\n+            memberfolder = self.membership.getHomeFolder("user2")\n+            self.assertTrue(\n+                memberfolder, "createMemberArea failed to create memberarea"\n+            )\n \n     def testCreateMemberareaAlternateType(self):\n         # Should be able to create another type instead of a normal Folder\n         if self.membership.memberareaCreationFlag is True:\n-            self.membership.setMemberAreaType(\'Document\')\n-            self.membership.createMemberarea(\'user2\')\n-            memberfolder = self.membership.getHomeFolder(\'user2\')\n-            self.assertEqual(memberfolder.getPortalTypeName(), \'Document\')\n+            self.membership.setMemberAreaType("Document")\n+            self.membership.createMemberarea("user2")\n+            memberfolder = self.membership.getHomeFolder("user2")\n+            self.assertEqual(memberfolder.getPortalTypeName(), "Document")\n \n     def testCreateMemberareaWhenDisabled(self):\n         # Should not create a member area\n         self.membership.setMemberareaCreationFlag = False\n         self.assertFalse(self.membership.getMemberareaCreationFlag())\n-        self.membership.createMemberarea(\'user2\')\n-        memberfolder = self.membership.getHomeFolder(\'user2\')\n+        self.membership.createMemberarea("user2")\n+        memberfolder = self.membership.getHomeFolder("user2")\n         self.assertFalse(\n-            memberfolder,\n-            \'createMemberarea created memberarea despite flag\'\n+            memberfolder, "createMemberarea created memberarea despite flag"\n         )\n \n \n@@ -813,17 +792,17 @@ class TestMemberareaSetup(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n-        self.membership.createMemberarea(\'user2\')\n-        self.home = self.membership.getHomeFolder(\'user2\')\n+        self.membership.addMember("user2", "secret", ["Member"], [])\n+        self.membership.createMemberarea("user2")\n+        self.home = self.membership.getHomeFolder("user2")\n \n     def testMemberareaIsFolder(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Memberarea should be a folder\n-            self.assertEqual(self.home.meta_type, \'ATFolder\')\n-            self.assertEqual(self.home.portal_type, \'Folder\')\n+            self.assertEqual(self.home.meta_type, "ATFolder")\n+            self.assertEqual(self.home.portal_type, "Folder")\n \n     def testMemberareaIsOwnedByMember(self):\n         if self.membership.memberareaCreationFlag is True:\n@@ -832,24 +811,24 @@ def testMemberareaIsOwnedByMember(self):\n                 owner_info = self.home.getOwnerTuple()\n             except AttributeError:\n                 owner_info = self.home.getOwner(info=1)\n-            self.assertEqual(owner_info[0], [PLONE_SITE_ID, \'acl_users\'])\n-            self.assertEqual(owner_info[1], \'user2\')\n+            self.assertEqual(owner_info[0], [PLONE_SITE_ID, "acl_users"])\n+            self.assertEqual(owner_info[1], "user2")\n             self.assertEqual(len(self.home.get_local_roles()), 1)\n-            self.assertEqual(self.home.get_local_roles_for_userid(\'user2\'),\n-                             (\'Owner\',))\n+            self.assertEqual(self.home.get_local_roles_for_userid("user2"), ("Owner",))\n \n     def testMemberareaIsCataloged(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Memberarea should be cataloged\n             catalog = self.portal.portal_catalog\n-            self.assertTrue(catalog(id=\'user2\', Type=\'Folder\', Title="user2"),\n-                            "Could not find user2\'s home folder in the "\n-                            "catalog")\n+            self.assertTrue(\n+                catalog(id="user2", Type="Folder", Title="user2"),\n+                "Could not find user2\'s home folder in the " "catalog",\n+            )\n \n     def testHomePageNotExists(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Should not have an index_html document anymore\n-            self.assertFalse(\'index_html\' in self.home)\n+            self.assertFalse("index_html" in self.home)\n \n \n class TestSearchForMembers(unittest.TestCase):\n@@ -857,81 +836,90 @@ class TestSearchForMembers(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         # Don\'t let default_user disturb results\n         self.portal.acl_users._doDelUsers([TEST_USER_ID])\n         # Add some members\n-        self.addMember(\'fred\', \'Fred Flintstone\',\n-                       \'fred@bedrock.com\', [\'Member\', \'Reviewer\'],\n-                       \'2002-01-01\')\n-        self.addMember(\'barney\', \'Barney Rubble\',\n-                       \'barney@bedrock.com\', [\'Member\'],\n-                       \'2002-01-01\')\n-        self.addMember(\'brubble\', \'Bambam Rubble\',\n-                       \'bambam@bambam.net\', [\'Member\'],\n-                       \'2003-12-31\')\n+        self.addMember(\n+            "fred",\n+            "Fred Flintstone",\n+            "fred@bedrock.com",\n+            ["Member", "Reviewer"],\n+            "2002-01-01",\n+        )\n+        self.addMember(\n+            "barney", "Barney Rubble", "barney@bedrock.com", ["Member"], "2002-01-01"\n+        )\n+        self.addMember(\n+            "brubble", "Bambam Rubble", "bambam@bambam.net", ["Member"], "2003-12-31"\n+        )\n         # MUST reset this\n         self.memberdata._v_temps = None\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n+        self.membership.addMember(username, "secret", roles, [])\n         member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        member.setMemberProperties(\n+            {\n+                "fullname": fullname,\n+                "email": email,\n+                "last_login_time": DateTime(last_login_time),\n+            }\n+        )\n \n     def testSearchById(self):\n         # Should search id and fullname\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'brubble\')), 0)\n-        self.assertEqual(len(search(name=\'barney\')), 1)\n-        self.assertEqual(len(search(name=\'rubble\')), 2)\n+        self.assertEqual(len(search(name="brubble")), 0)\n+        self.assertEqual(len(search(name="barney")), 1)\n+        self.assertEqual(len(search(name="rubble")), 2)\n \n     def testSearchByName(self):\n         # Should search id and fullname\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'rubble\')), 2)\n-        self.assertEqual(len(search(name=\'stone\')), 1)\n+        self.assertEqual(len(search(name="rubble")), 2)\n+        self.assertEqual(len(search(name="stone")), 1)\n \n     def testSearchByEmail(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(email=\'bedrock\')), 2)\n-        self.assertEqual(len(search(email=\'bambam\')), 1)\n+        self.assertEqual(len(search(email="bedrock")), 2)\n+        self.assertEqual(len(search(email="bambam")), 1)\n \n     def testSearchByRoles(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(roles=[\'Member\'])), 3)\n-        self.assertEqual(len(search(roles=[\'Reviewer\'])), 1)\n+        self.assertEqual(len(search(roles=["Member"])), 3)\n+        self.assertEqual(len(search(roles=["Reviewer"])), 1)\n \n     def testSearchByNameAndEmail(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'rubble\', email=\'bedrock\')), 1)\n-        self.assertEqual(len(search(name=\'bambam\', email=\'bedrock\')), 0)\n+        self.assertEqual(len(search(name="rubble", email="bedrock")), 1)\n+        self.assertEqual(len(search(name="bambam", email="bedrock")), 0)\n \n     def testSearchByNameAndRoles(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(name=\'fred\', roles=[\'Reviewer\'])), 1)\n-        self.assertEqual(len(search(name=\'fred\', roles=[\'Manager\'])), 0)\n+        self.assertEqual(len(search(name="fred", roles=["Reviewer"])), 1)\n+        self.assertEqual(len(search(name="fred", roles=["Manager"])), 0)\n \n     def testSearchByEmailAndRoles(self):\n         search = self.membership.searchForMembers\n-        self.assertEqual(len(search(email=\'fred\', roles=[\'Reviewer\'])), 1)\n-        self.assertEqual(len(search(email=\'fred\', roles=[\'Manager\'])), 0)\n+        self.assertEqual(len(search(email="fred", roles=["Reviewer"])), 1)\n+        self.assertEqual(len(search(email="fred", roles=["Manager"])), 0)\n \n     def testSearchByRequestObj(self):\n         search = self.membership.searchForMembers\n-        self.addMember(u\'j\xc3\xbcrgen\', u\'J\xc3\xbcrgen Internationalist\',\n-                       \'juergen@example.com\', [\'Member\'],\n-                       \'2014-02-03\')\n+        self.addMember(\n+            "j\xc3\xbcrgen",\n+            "J\xc3\xbcrgen Internationalist",\n+            "juergen@example.com",\n+            ["Member"],\n+            "2014-02-03",\n+        )\n \n-        self.assertEqual(\n-            len(search(REQUEST=dict(name=u\'j\xc3\xbcrgen\'))), 1)\n+        self.assertEqual(len(search(REQUEST=dict(name="j\xc3\xbcrgen"))), 1)\n \n-        self.assertEqual(\n-            len(search(REQUEST=dict(name=\'j\xc3\xbcrgen\'))), 1)\n+        self.assertEqual(len(search(REQUEST=dict(name="j\xc3\xbcrgen"))), 1)\n \n \n class TestDefaultUserAndPasswordNotChanged(unittest.TestCase):\n@@ -940,16 +928,14 @@ class TestDefaultUserAndPasswordNotChanged(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n \n     def testDefaultUserAndPasswordUnchanged(self):\n         member = self.membership.getAuthenticatedMember()\n         self.assertEqual(member.getUserName(), TEST_USER_NAME)\n-        self.assertTrue(\n-            self.membership.testCurrentPassword(TEST_USER_PASSWORD)\n-        )\n-        self.assertFalse(self.membership.testCurrentPassword(\'geheim\'))\n+        self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n+        self.assertFalse(self.membership.testCurrentPassword("geheim"))\n \n \n class TestMethodProtection(unittest.TestCase):\n@@ -959,14 +945,14 @@ class TestMethodProtection(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     _unprotected = (\n-        \'changeMemberPortrait\',\n-        \'deletePersonalPortrait\',\n-        \'testCurrentPassword\',\n-        \'searchForMembers\',\n+        "changeMemberPortrait",\n+        "deletePersonalPortrait",\n+        "testCurrentPassword",\n+        "searchForMembers",\n     )\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n \n     def assertUnprotected(self, object, method):\n@@ -978,12 +964,15 @@ def assertProtected(self, object, method):\n         self.assertRaises(Unauthorized, object.restrictedTraverse, method)\n \n     for method in _unprotected:\n-        exec ("def testUnprotected_%s(self):" \\\n-             "    self.assertProtected(self.membership, \'%s\')" \\\n-             % (method, method))\n+        exec(\n+            "def testUnprotected_%s(self):"\n+            "    self.assertProtected(self.membership, \'%s\')" % (method, method)\n+        )\n \n-        exec ("def testMemberAccessible_%s(self):" \\\n-             "    self.membership.restrictedTraverse(\'%s\')" % (method, method))\n+        exec(\n+            "def testMemberAccessible_%s(self):"\n+            "    self.membership.restrictedTraverse(\'%s\')" % (method, method)\n+        )\n \n \n class TestMemberInfoView(unittest.TestCase):\n@@ -991,76 +980,82 @@ class TestMemberInfoView(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.membership = self.portal.portal_membership\n         self.view = PASMemberView(self.portal, self.portal.REQUEST)\n \n     def testMemberInfoViewForAuthenticated(self):\n         member = self.membership.getAuthenticatedMember()\n-        member.setMemberProperties({\'fullname\': \'Test user\'})\n+        member.setMemberProperties({"fullname": "Test user"})\n         info = self.view.info()\n-        self.assertEqual(info[\'username\'], \'test-user\')\n-        self.assertEqual(info[\'fullname\'], \'Test user\')\n-        self.assertEqual(info[\'name_or_id\'], \'Test user\')\n+        self.assertEqual(info["username"], "test-user")\n+        self.assertEqual(info["fullname"], "Test user")\n+        self.assertEqual(info["name_or_id"], "Test user")\n \n     def testGetMemberInfoViewForMember(self):\n         self.membership.addMember(\n-            \'user2\', \'secret\', [\'Member\'], [],\n-            properties={\'fullname\': \'Second user\',\n-                        \'home_page\': \'http://maurits.vanrees.org\'})\n-        info = self.view.info(\'user2\')\n-        self.assertEqual(info[\'username\'], \'user2\')\n-        self.assertEqual(info[\'fullname\'], \'Second user\')\n-        self.assertEqual(info[\'name_or_id\'], \'Second user\')\n-        self.assertEqual(info[\'home_page\'], \'http://maurits.vanrees.org\')\n+            "user2",\n+            "secret",\n+            ["Member"],\n+            [],\n+            properties={\n+                "fullname": "Second user",\n+                "home_page": "http://maurits.vanrees.org",\n+            },\n+        )\n+        info = self.view.info("user2")\n+        self.assertEqual(info["username"], "user2")\n+        self.assertEqual(info["fullname"], "Second user")\n+        self.assertEqual(info["name_or_id"], "Second user")\n+        self.assertEqual(info["home_page"], "http://maurits.vanrees.org")\n \n     def testGetMemberInfoViewForNonMember(self):\n         # When content is owned by a user who has meanwhile been\n         # removed, we do not want to throw an exception when asking\n         # for his member info.\n-        self.assertFalse(self.membership.getMemberById(\'charon\'))\n-        info = self.view.info(\'charon\')\n-        self.assertEqual(info[\'username\'], \'charon\')\n-        self.assertEqual(info[\'fullname\'], \'\')\n-        self.assertEqual(info[\'name_or_id\'], \'charon\')\n+        self.assertFalse(self.membership.getMemberById("charon"))\n+        info = self.view.info("charon")\n+        self.assertEqual(info["username"], "charon")\n+        self.assertEqual(info["fullname"], "")\n+        self.assertEqual(info["name_or_id"], "charon")\n \n     def testGetMemberInfoViewForAnonymous(self):\n         logout()\n         self.assertTrue(self.membership.isAnonymousUser())\n         info = self.view.info()\n-        self.assertEqual(info[\'username\'], \'Anonymous User\')\n-        self.assertEqual(info[\'fullname\'], \'\')\n-        self.assertEqual(info[\'name_or_id\'], \'Anonymous User\')\n+        self.assertEqual(info["username"], "Anonymous User")\n+        self.assertEqual(info["fullname"], "")\n+        self.assertEqual(info["name_or_id"], "Anonymous User")\n \n     def testGetMemberInfoViewHomePageInternal(self):\n         self.membership.addMember(\n-            \'user4\', \'secret\', [\'Member\'], [],\n-            properties={\'home_page\': \'internal_page\'})\n-        info = self.view.info(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'internal_page\')\n+            "user4", "secret", ["Member"], [], properties={"home_page": "internal_page"}\n+        )\n+        info = self.view.info("user4")\n+        self.assertEqual(info.get("home_page"), "internal_page")\n \n     def testGetMemberInfoViewHomePageBad(self):\n         self.membership.addMember(\n-            \'user4\', \'secret\', [\'Member\'], [],\n-            properties={\'home_page\': \'javascript:alert("hello")\'})\n-        info = self.view.info(\'user4\')\n-        self.assertEqual(info.get(\'home_page\'), \'\')\n+            "user4",\n+            "secret",\n+            ["Member"],\n+            [],\n+            properties={"home_page": \'javascript:alert("hello")\'},\n+        )\n+        info = self.view.info("user4")\n+        self.assertEqual(info.get("home_page"), "")\n \n     def testSetGroupsWithUserNameIdDifference(self):\n-        pas = self.portal[\'acl_users\']\n-        self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n+        pas = self.portal["acl_users"]\n+        self.portal.portal_groups.addGroup("Editors", [], [])\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=["Editors"])\n         login(self.portal, TEST_USER_NAME)\n         user = getSecurityManager().getUser()\n-        self.assertTrue(\n-            \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\n-        )\n+        self.assertTrue("Editors" in getGroupsForPrincipal(user, pas["plugins"]))\n \n     def testSetGroupsWithSameUserNameAndId(self):\n-        pas = self.portal[\'acl_users\']\n-        self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n+        pas = self.portal["acl_users"]\n+        self.portal.portal_groups.addGroup("Editors", [], [])\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=["Editors"])\n         user = getSecurityManager().getUser()\n-        self.assertTrue(\n-            \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\n-        )\n+        self.assertTrue("Editors" in getGroupsForPrincipal(user, pas["plugins"]))\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex f6d5763c..63d3de38 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -1,12 +1,10 @@\n-# -*- coding: utf-8 -*-\n+from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import login\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.property import ZODBMutablePropertyProvider\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IUserEnumerationPlugin\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin\n \n import unittest\n \n@@ -16,183 +14,193 @@ class PropertiesTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_user_properties(self):\n-        mt = getToolByName(self.portal, \'portal_membership\')\n-        md = getToolByName(self.portal, \'portal_memberdata\')\n+        mt = getToolByName(self.portal, "portal_membership")\n+        md = getToolByName(self.portal, "portal_memberdata")\n \n         # Create a new Member\n-        mt.addMember(\'user1\', \'u1\', [\'Member\'], [],\n-                     {\'email\': \'user1@host.com\',\n-                      \'fullname\': \'User #1\'})\n-        member = mt.getMemberById(\'user1\')\n+        mt.addMember(\n+            "user1",\n+            "u1",\n+            ["Member"],\n+            [],\n+            {"email": "user1@host.com", "fullname": "User #1"},\n+        )\n+        member = mt.getMemberById("user1")\n         self.assertFalse(member is None)\n \n         # Assert user doesn\'t have the property yet\n-        self.assertFalse(member.hasProperty(\'age\'))\n+        self.assertFalse(member.hasProperty("age"))\n \n         # Add new property\n-        md.manage_addProperty(\'age\', 20, \'int\')\n+        md.manage_addProperty("age", 20, "int")\n \n         # Assert user has the property now\n-        self.assertTrue(member.hasProperty(\'age\'))\n+        self.assertTrue(member.hasProperty("age"))\n \n         # Get the property, should have the default value\n-        got = member.getProperty(\'age\', None)\n+        got = member.getProperty("age", None)\n         expected = 20\n         self.assertEqual(got, expected)\n \n         # get a handle on the member\n-        member = mt.getMemberById(\'user1\')\n+        member = mt.getMemberById("user1")\n \n         # Set some member properties. Needs to be logged in as the user.\n-        login(self.portal, \'user1\')\n-        member.setMemberProperties({\'age\': 30, \'fullname\': \'User #1 Is Cool\',\n-                                    \'email\': \'user1@anotherhost.qa\'})\n+        login(self.portal, "user1")\n+        member.setMemberProperties(\n+            {"age": 30, "fullname": "User #1 Is Cool", "email": "user1@anotherhost.qa"}\n+        )\n \n         # Check the properties have been set\n-        got = member.getProperty(\'age\', None)\n+        got = member.getProperty("age", None)\n         expected = 30\n         self.assertEqual(got, expected)\n \n-        got = member.getProperty(\'fullname\', None)\n-        expected = \'User #1 Is Cool\'\n+        got = member.getProperty("fullname", None)\n+        expected = "User #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = member.getProperty(\'email\', None)\n-        expected = \'user1@anotherhost.qa\'\n+        got = member.getProperty("email", None)\n+        expected = "user1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n         # Delete the property\n-        md.manage_delProperties(ids=(\'age\',))\n+        md.manage_delProperties(ids=("age",))\n \n         # re-get the member to reflect the new memberdata schema\n-        member = mt.getMemberById(\'user1\')\n+        member = mt.getMemberById("user1")\n \n         # Assert property is gone\n-        self.assertFalse(member.hasProperty(\'age\'))\n+        self.assertFalse(member.hasProperty("age"))\n \n         # Get the property, should return default (None)\n-        got = member.getProperty(\'age\', None)\n+        got = member.getProperty("age", None)\n         expected = None\n         self.assertEqual(got, expected)\n \n         # Other properties should still be there.\n-        got = member.getProperty(\'fullname\', None)\n-        expected = \'User #1 Is Cool\'\n+        got = member.getProperty("fullname", None)\n+        expected = "User #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = member.getProperty(\'email\', None)\n-        expected = \'user1@anotherhost.qa\'\n+        got = member.getProperty("email", None)\n+        expected = "user1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n     def test_group_properties(self):\n-        gt = getToolByName(self.portal, \'portal_groups\')\n-        gd = getToolByName(self.portal, \'portal_groupdata\')\n+        gt = getToolByName(self.portal, "portal_groups")\n+        gd = getToolByName(self.portal, "portal_groupdata")\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # Create a new Group\n         gt.addGroup(\n-            \'group1\',\n-            [\'Reviewer\'],\n+            "group1",\n+            ["Reviewer"],\n             [],\n-            {\'email\': \'group1@host.com\', \'title\': \'Group #1\'}\n+            {"email": "group1@host.com", "title": "Group #1"},\n         )\n-        group = gt.getGroupById(\'group1\')\n+        group = gt.getGroupById("group1")\n         self.assertFalse(group is None)\n \n         # Assert group doesn\'t have the property yet\n-        self.assertFalse(group.hasProperty(\'karma\'))\n+        self.assertFalse(group.hasProperty("karma"))\n \n         # Add new property\n-        gd.manage_addProperty(\'karma\', 20, \'int\')\n+        gd.manage_addProperty("karma", 20, "int")\n \n         # get group again to re-create with new groupdata schema\n-        group = gt.getGroupById(\'group1\')\n+        group = gt.getGroupById("group1")\n \n         # Assert group has the property now\n-        self.assertTrue(group.hasProperty(\'karma\'))\n+        self.assertTrue(group.hasProperty("karma"))\n \n         # Get the property, should have the default value\n-        got = group.getProperty(\'karma\', None)\n+        got = group.getProperty("karma", None)\n         expected = 20\n \n         self.assertEqual(got, expected)\n \n         # Set some group properties\n-        group.setGroupProperties({\'karma\': 30, \'title\': \'Group #1 Is Cool\',\n-                                  \'email\': \'group1@anotherhost.qa\'})\n+        group.setGroupProperties(\n+            {"karma": 30, "title": "Group #1 Is Cool", "email": "group1@anotherhost.qa"}\n+        )\n \n         # Check the properties have been set\n-        got = group.getProperty(\'karma\', None)\n+        got = group.getProperty("karma", None)\n         expected = 30\n         self.assertEqual(got, expected)\n \n-        got = group.getProperty(\'title\', None)\n-        expected = \'Group #1 Is Cool\'\n+        got = group.getProperty("title", None)\n+        expected = "Group #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = group.getProperty(\'email\', None)\n-        expected = \'group1@anotherhost.qa\'\n+        got = group.getProperty("email", None)\n+        expected = "group1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n         # Delete the property\n-        gd.manage_delProperties(ids=(\'karma\',))\n+        gd.manage_delProperties(ids=("karma",))\n \n         # get group again to re-create with new groupdata schema\n-        group = gt.getGroupById(\'group1\')\n+        group = gt.getGroupById("group1")\n \n         # Assert property is gone\n-        self.assertFalse(group.hasProperty(\'karma\'))\n+        self.assertFalse(group.hasProperty("karma"))\n \n         # Get the property, should return default (None)\n-        got = group.getProperty(\'karma\', None)\n+        got = group.getProperty("karma", None)\n         expected = None\n         self.assertEqual(got, expected)\n \n         # Other properties should still be there.\n-        got = group.getProperty(\'title\', None)\n-        expected = \'Group #1 Is Cool\'\n+        got = group.getProperty("title", None)\n+        expected = "Group #1 Is Cool"\n         self.assertEqual(got, expected)\n \n-        got = group.getProperty(\'email\', None)\n-        expected = \'group1@anotherhost.qa\'\n+        got = group.getProperty("email", None)\n+        expected = "group1@anotherhost.qa"\n         self.assertEqual(got, expected)\n \n     def test_schema_for_mutable_property_provider(self):\n-        """Add a schema to a ZODBMutablePropertyProvider.\n-        """\n+        """Add a schema to a ZODBMutablePropertyProvider."""\n \n         # Schema is list of tuples with name, type (string), value.\n         # From the types it seems only \'lines\' is handled differently.\n         address_schema = [\n-            (\'addresses\', \'lines\', [\'Here\', \'There\']),\n-            (\'city\', \'str\', \'Somewhere\'),\n-            (\'telephone\', \'int\', 1234567),\n+            ("addresses", "lines", ["Here", "There"]),\n+            ("city", "str", "Somewhere"),\n+            ("telephone", "int", 1234567),\n         ]\n \n         # This used to give a ValueError, so we just check that it\n         # does not.\n         provider = ZODBMutablePropertyProvider(\n-            \'address_plugin\', "Address Plugin", schema=address_schema)\n+            "address_plugin", "Address Plugin", schema=address_schema\n+        )\n \n         # When this test passes, we are happy already, but let\'s add a\n         # few more basic tests.\n \n         # Create a new Member\n-        mt = getToolByName(self.portal, \'portal_membership\')\n-        mt.addMember(\'user1\', \'u1\', [\'Member\'], [],\n-                     {\'email\': \'user1@host.com\',\n-                      \'fullname\': \'User #1\'})\n-        member = mt.getMemberById(\'user1\')\n+        mt = getToolByName(self.portal, "portal_membership")\n+        mt.addMember(\n+            "user1",\n+            "u1",\n+            ["Member"],\n+            [],\n+            {"email": "user1@host.com", "fullname": "User #1"},\n+        )\n+        member = mt.getMemberById("user1")\n         sheet = provider.getPropertiesForUser(member)\n+        self.assertEqual(sheet.propertyIds(), ["addresses", "city", "telephone"])\n         self.assertEqual(\n-            sheet.propertyIds(), [\'addresses\', \'city\', \'telephone\'])\n-        self.assertEqual(sheet.propertyInfo(\'city\'),\n-                         {\'type\': \'str\', \'id\': \'city\', \'mode\': \'\'})\n-        self.assertEqual(sheet.getProperty(\'addresses\'), (\'Here\', \'There\'))\n+            sheet.propertyInfo("city"), {"type": "str", "id": "city", "mode": ""}\n+        )\n+        self.assertEqual(sheet.getProperty("addresses"), ("Here", "There"))\n \n \n class PropertySearchTest(unittest.TestCase):\n@@ -200,48 +208,47 @@ class PropertySearchTest(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.mt = getToolByName(self.portal, \'portal_membership\')\n-        self.md = getToolByName(self.portal, \'portal_memberdata\')\n-        self.gt = getToolByName(self.portal, \'portal_groups\')\n+        self.portal = self.layer["portal"]\n+        self.mt = getToolByName(self.portal, "portal_membership")\n+        self.md = getToolByName(self.portal, "portal_memberdata")\n+        self.gt = getToolByName(self.portal, "portal_groups")\n \n         # Create a new Member\n         self.mt.addMember(\n-            \'member1\',\n-            \'pw\',\n-            [\'Member\'],\n+            "member1",\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'member1@host.com\', \'title\': \'Member #1\'}\n+            {"email": "member1@host.com", "title": "Member #1"},\n         )\n-        member = self.mt.getMemberById(\'member1\')\n+        member = self.mt.getMemberById("member1")\n         self.assertFalse(member is None)\n \n         self.mt.addMember(\n-            \'member2\',\n-            \'pw\',\n-            [\'Member\'],\n+            "member2",\n+            "pw",\n+            ["Member"],\n             [],\n-            {\'email\': \'user2@otherhost.com\', \'fullname\': \'User #2\'}\n+            {"email": "user2@otherhost.com", "fullname": "User #2"},\n         )\n-        member = self.mt.getMemberById(\'member2\')\n+        member = self.mt.getMemberById("member2")\n         self.assertFalse(member is None)\n \n         # Add a Group to make sure searchUsers isn\'t returning them in results.\n-        self.gt.addGroup(\'group1\', title="Group 1")\n-        group = self.gt.getGroupById(\'group1\')\n+        self.gt.addGroup("group1", title="Group 1")\n+        group = self.gt.getGroupById("group1")\n         self.assertFalse(group is None)\n \n         self.pas = getToolByName(self.portal, "acl_users")\n-        for plugin in self.pas.plugins \\\n-                          .getAllPlugins(\'IUserEnumerationPlugin\')[\'active\']:\n-            if plugin != \'mutable_properties\':\n-                self.pas.plugins.deactivatePlugin(IUserEnumerationPlugin,\n-                                                  plugin)\n+        for plugin in self.pas.plugins.getAllPlugins("IUserEnumerationPlugin")[\n+            "active"\n+        ]:\n+            if plugin != "mutable_properties":\n+                self.pas.plugins.deactivatePlugin(IUserEnumerationPlugin, plugin)\n \n     def testPluginActivated(self):\n-        plugins = self.pas.plugins \\\n-                      .getAllPlugins(\'IUserEnumerationPlugin\')[\'active\']\n-        self.assertEqual(plugins, (\'mutable_properties\',))\n+        plugins = self.pas.plugins.getAllPlugins("IUserEnumerationPlugin")["active"]\n+        self.assertEqual(plugins, ("mutable_properties",))\n \n     def testEmptySearch(self):\n         results = self.pas.searchUsers()\n@@ -251,52 +258,47 @@ def testInexactStringSearch(self):\n         results = self.pas.searchUsers(email="something@somewhere.tld")\n         self.assertEqual(results, ())\n \n-        results = self.pas.searchUsers(email="member1@host.com",\n-                                       exact_match=False)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\'])\n+        results = self.pas.searchUsers(email="member1@host.com", exact_match=False)\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1"])\n \n         results = self.pas.searchUsers(email="@host.com", exact_match=False)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\'])\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1"])\n \n-        results = self.pas.searchUsers(email="member1@host.com",\n-                                       exact_match=True)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\'])\n+        results = self.pas.searchUsers(email="member1@host.com", exact_match=True)\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1"])\n \n         results = self.pas.searchUsers(email="@host.com", exact_match=True)\n-        results = [info[\'userid\'] for info in results]\n+        results = [info["userid"] for info in results]\n         self.assertEqual(results, [])\n \n     def testBooleanSearch(self):\n         results = self.pas.searchUsers(visible_ids=True)\n-        results = [info[\'userid\'] for info in results]\n+        results = [info["userid"] for info in results]\n         self.assertEqual(results, [])\n \n         results = self.pas.searchUsers(visible_ids=False)\n-        results = [info[\'userid\'] for info in results]\n-        self.assertEqual(results, [\'member1\', \'member2\'])\n+        results = [info["userid"] for info in results]\n+        self.assertEqual(results, ["member1", "member2"])\n \n     def testGroupsNotReturnedByEnumerateUsers(self):\n         """Check to make sure that groups aren\'t returned by a enumerateUsers\n-           call.\n-           See http://dev.plone.org/plone/ticket/9435"""\n+        call.\n+        See http://dev.plone.org/plone/ticket/9435"""\n         results = self.pas.searchUsers()\n-        resultIds = [a[\'id\'] for a in results]\n-        self.assertFalse(\'group1\' in resultIds)\n+        resultIds = [a["id"] for a in results]\n+        self.assertFalse("group1" in resultIds)\n \n     def testSearchEmptyId(self):\n-        self.assertEqual(self.pas.mutable_properties.enumerateUsers(id=\'\'), ())\n-        self.assertEqual(\n-            self.pas.mutable_properties.enumerateUsers(login=\'\'),\n-            ()\n-        )\n+        self.assertEqual(self.pas.mutable_properties.enumerateUsers(id=""), ())\n+        self.assertEqual(self.pas.mutable_properties.enumerateUsers(login=""), ())\n \n     def testCantSearchByIdOrLogin(self):\n         # we can\'t search by id\n-        results = self.pas.searchUsers(id=\'member1\')\n+        results = self.pas.searchUsers(id="member1")\n         self.assertEqual(results, ())\n         # or login\n-        results = self.pas.searchUsers(login=\'member1\')\n+        results = self.pas.searchUsers(login="member1")\n         self.assertEqual(results, ())\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex 67710330..caf432b7 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -1,25 +1,21 @@\n-# -*- coding: utf-8 -*-\n # $Id$\n """Tests for Products.PlonePAS.plugins.role.GroupAwareRoleManager"""\n \n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _PLUGIN_TYPE_INFO\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n+from Products.PluggableAuthService.PluggableAuthService import _PLUGIN_TYPE_INFO\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from Products.PluggableAuthService.plugins.tests.helpers import DummyUser\n from Products.PluggableAuthService.plugins.tests.helpers import FauxPAS\n-from Products.PluggableAuthService.plugins.tests.helpers import \\\n-    makeRequestAndResponse\n+from Products.PluggableAuthService.plugins.tests.helpers import makeRequestAndResponse\n from Products.PluginRegistry.PluginRegistry import PluginRegistry\n from zope.interface import implementer\n-from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n import unittest\n \n \n @implementer(IGroupsPlugin)\n class FauxGroupsPlugin(BasePlugin):\n-\n     def getGroupsForPrincipal(self, principal, request=None):\n         return principal._groups\n \n@@ -32,14 +28,15 @@ class GroupAwareRoleManagerTests(unittest.TestCase):\n     def _getTargetClass(self):\n \n         from Products.PlonePAS.plugins.role import GroupAwareRoleManager\n+\n         return GroupAwareRoleManager\n \n-    def _makeOne(self, id=\'test\', *args, **kw):\n+    def _makeOne(self, id="test", *args, **kw):\n \n         plugin = self._getTargetClass()(id=id, *args, **kw)\n         # We need to bind a fake request to this plugin\n         request, dummy_response = makeRequestAndResponse()\n-        setattr(plugin, \'REQUEST\', request)\n+        setattr(plugin, "REQUEST", request)\n         return plugin\n \n     def test_roles_for_control_panel(self):\n@@ -54,37 +51,37 @@ def test_roles_for_control_panel(self):\n \n         # Add a minimal PluginRegistry with a mock IGroupsPlugin, because the\n         # roles plugin depends on it:\n-        root._setObject(\'plugins\', PluginRegistry(_PLUGIN_TYPE_INFO))\n-        root._setObject(\'groups\', FauxGroupsPlugin())\n-        root[\'plugins\'].activatePlugin(IGroupsPlugin, \'groups\')\n+        root._setObject("plugins", PluginRegistry(_PLUGIN_TYPE_INFO))\n+        root._setObject("groups", FauxGroupsPlugin())\n+        root["plugins"].activatePlugin(IGroupsPlugin, "groups")\n \n-        garm = self._makeOne(\'garm\').__of__(root)\n+        garm = self._makeOne("garm").__of__(root)\n \n         # 2 roles\n-        garm.addRole(\'foo_role\')\n-        garm.addRole(\'bar_role\')\n+        garm.addRole("foo_role")\n+        garm.addRole("bar_role")\n \n         # Group \'somegroup\' has \'bar_role\'\n-        garm.assignRoleToPrincipal(\'bar_role\', \'somegroup\')\n+        garm.assignRoleToPrincipal("bar_role", "somegroup")\n \n         # \'johndoe\' has \'foo_role\'\n-        johndoe = DummyUser(\'johndoe\', (\'somegroup\',))\n-        garm.assignRoleToPrincipal(\'foo_role\', \'johndoe\')\n+        johndoe = DummyUser("johndoe", ("somegroup",))\n+        garm.assignRoleToPrincipal("foo_role", "johndoe")\n \n         # \'johndoe\' should have \'foo_role\' and \'bar_roles\'\n         got = garm.getRolesForPrincipal(johndoe)\n-        expected = [\'foo_role\', \'bar_role\']\n+        expected = ["foo_role", "bar_role"]\n         self.assertEqual(set(got), set(expected))\n \n         # For the users control panel, johndoe has only the \'foo_role\'\n-        garm.REQUEST.set(\'__ignore_group_roles__\', True)\n+        garm.REQUEST.set("__ignore_group_roles__", True)\n         got = garm.getRolesForPrincipal(johndoe)\n-        self.assertEqual(got, (\'foo_role\',))\n+        self.assertEqual(got, ("foo_role",))\n \n         # Confirm we can get only the inherited roles\n-        garm.REQUEST.set(\'__ignore_group_roles__\', False)\n-        garm.REQUEST.set(\'__ignore_direct_roles__\', True)\n+        garm.REQUEST.set("__ignore_group_roles__", False)\n+        garm.REQUEST.set("__ignore_direct_roles__", True)\n         got = garm.getRolesForPrincipal(johndoe)\n-        self.assertEqual(got, (\'bar_role\',))\n+        self.assertEqual(got, ("bar_role",))\n \n         return\ndiff --git a/src/Products/PlonePAS/tests/test_setup.py b/src/Products/PlonePAS/tests/test_setup.py\nindex ae851272..b4bd24a7 100644\n--- a/src/Products/PlonePAS/tests/test_setup.py\n+++ b/src/Products/PlonePAS/tests/test_setup.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n """\n Test set up specific to Plone through thea GenericSetup profile installation.\n """\n \n from plone.app import testing as pa_testing\n from plone.testing import zope\n-from zope.component import hooks\n from Products.PlonePAS import testing\n from Products.PluggableAuthService.interfaces import plugins as plugins_ifaces\n from Products.PluggableAuthService.plugins import CookieAuthHelper\n from Products.PluggableAuthService.plugins import HTTPBasicAuthHelper\n+from zope.component import hooks\n \n import transaction\n import unittest\n@@ -72,7 +71,7 @@ def test_zope_root_cookie_login(self):\n         The Zope root `/acl_users` cookie login works.\n         """\n         # Install the GenericSetup profile that performs the actual switch\n-        pa_testing.applyProfile(self.portal, \'Products.PlonePAS:root-cookie\')\n+        pa_testing.applyProfile(self.portal, "Products.PlonePAS:root-cookie")\n         transaction.commit()\n \n         # Make the cookie plugin the default auth challenge\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex e4c62ca2..e1daa8da 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -1,4 +1,3 @@\n-# -*- encoding: utf-8 -*-\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n import unittest\n@@ -9,16 +8,29 @@ class TestPASSearchView(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def test_sort(self):\n-        self.portal = self.layer[\'portal\']\n-        pas_search = self.portal.restrictedTraverse(\'@@pas_search\')\n-        values = [{\'title\': u\'Sociologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n-                  {\'title\': u\'anthropologie\'}]\n-        sorted_values = pas_search.sort(values, \'title\')\n+        self.portal = self.layer["portal"]\n+        pas_search = self.portal.restrictedTraverse("@@pas_search")\n+        values = [\n+            {"title": "Sociologie"},\n+            {"title": "\xc3\x89conomie"},\n+            {"title": "anthropologie"},\n+        ]\n+        sorted_values = pas_search.sort(values, "title")\n         # do not modify original\n-        self.assertEqual(values,\n-                         [{\'title\': u\'Sociologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n-                          {\'title\': u\'anthropologie\'}])\n+        self.assertEqual(\n+            values,\n+            [\n+                {"title": "Sociologie"},\n+                {"title": "\xc3\x89conomie"},\n+                {"title": "anthropologie"},\n+            ],\n+        )\n         # sorted here\n-        self.assertEqual(sorted_values,\n-                         [{\'title\': u\'anthropologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n-                          {\'title\': u\'Sociologie\'}])\n+        self.assertEqual(\n+            sorted_values,\n+            [\n+                {"title": "anthropologie"},\n+                {"title": "\xc3\x89conomie"},\n+                {"title": "Sociologie"},\n+            ],\n+        )\ndiff --git a/src/Products/PlonePAS/tools/__init__.py b/src/Products/PlonePAS/tools/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/Products/PlonePAS/tools/__init__.py\n+++ b/src/Products/PlonePAS/tools/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex b808d85e..b9074a31 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -1,19 +1,18 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n+from AccessControl import getSecurityManager\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n-from AccessControl import getSecurityManager\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from BTrees.OOBTree import OOBTree\n from OFS.PropertyManager import PropertyManager\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.utils import registerToolInterface\n+from Products.CMFCore.utils import UniqueObject\n from Products.PlonePAS.interfaces.capabilities import IDeleteCapability\n from Products.PlonePAS.interfaces.capabilities import IManageCapabilities\n from Products.PlonePAS.interfaces.group import IGroupData\n@@ -22,17 +21,17 @@\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PlonePAS.tools.memberdata import MemberData\n from Products.PlonePAS.utils import CleanupTemp\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from ZPublisher.Converters import type_converters\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n from zope.interface import implementer\n+from ZPublisher.Converters import type_converters\n \n import logging\n-import six\n \n-logger = logging.getLogger(\'PlonePAS\')\n+\n+logger = logging.getLogger("PlonePAS")\n _marker = object()\n \n \n@@ -46,19 +45,19 @@ class GroupDataTool(UniqueObject, SimpleItem, PropertyManager):\n     properties.\n     """\n \n-    id = \'portal_groupdata\'\n+    id = "portal_groupdata"\n     meta_type = "PlonePAS GroupData Tool"\n-    toolicon = \'tool.gif\'\n+    toolicon = "tool.gif"\n \n     _v_temps = None\n-    _properties = ({\'id\': \'title\', \'type\': \'string\', \'mode\': \'wd\'},)\n+    _properties = ({"id": "title", "type": "string", "mode": "wd"},)\n     security = ClassSecurityInfo()\n \n     def __init__(self):\n         self._members = OOBTree()\n         # Create the default properties.\n-        self._setProperty(\'description\', \'\', \'text\')\n-        self._setProperty(\'email\', \'\', \'string\')\n+        self._setProperty("description", "", "text")\n+        self._setProperty("email", "", "string")\n \n     def wrapGroup(self, g):\n         """Returns an object implementing the GroupData interface."""\n@@ -76,7 +75,7 @@ def wrapGroup(self, g):\n                 portal_group = GroupData(base, gid)\n                 if temps is None:\n                     self._v_temps = {gid: portal_group}\n-                    if hasattr(self, \'REQUEST\'):\n+                    if hasattr(self, "REQUEST"):\n                         self.REQUEST._hold(CleanupTemp(self))\n                 else:\n                     temps[gid] = portal_group\n@@ -88,17 +87,17 @@ def wrapGroup(self, g):\n \n     @security.private\n     def registerGroupData(self, g, id):\n-        \'\'\'\n+        """\n         Adds the given member data to the _members dict.\n         This is done as late as possible to avoid side effect\n         transactions and to reduce the necessary number of\n         entries.\n-        \'\'\'\n+        """\n         self._members[id] = aq_base(g)\n \n \n InitializeClass(GroupDataTool)\n-registerToolInterface(\'portal_groupdata\', IGroupDataTool)\n+registerToolInterface("portal_groupdata", IGroupDataTool)\n \n \n @implementer(IGroupData, IManageCapabilities)\n@@ -115,20 +114,22 @@ def __init__(self, tool, id):\n         # The reference will be removed by notifyModified().\n         self._tool = tool\n \n-    def _getGRUF(self,):\n+    def _getGRUF(\n+        self,\n+    ):\n         return self.acl_users\n \n     @security.private\n     def notifyModified(self):\n         # Links self to parent for full persistence.\n-        tool = getattr(self, \'_tool\', None)\n+        tool = getattr(self, "_tool", None)\n         if tool is not None:\n             del self._tool\n             tool.registerGroupData(self, self.getId())\n \n     @security.public\n     def getGroup(self):\n-        """ Returns the actual group implementation. Varies by group\n+        """Returns the actual group implementation. Varies by group\n         implementation (GRUF/Nux/et al). In GRUF this is a user object."""\n         # The user object is our context, but it\'s possible for\n         # restricted code to strip context while retaining\n@@ -136,7 +137,7 @@ def getGroup(self):\n         parent = aq_parent(self)\n         bcontext = aq_base(parent)\n         bcontainer = aq_base(aq_parent(aq_inner(self)))\n-        if bcontext is bcontainer or not hasattr(bcontext, \'getUserName\'):\n+        if bcontext is bcontainer or not hasattr(bcontext, "getUserName"):\n             raise GroupDataError("Can\'t find group data")\n         # Return the user object, which is our context.\n         return parent\n@@ -177,9 +178,7 @@ def getGroupMembers(self):\n                 # getGroupById from Products.PlonePAS.pas\n                 # The returned object is already wrapped\n                 if not usr:\n-                    logger.debug(\n-                        "Group has a non-existing principal {0}".format(u_name)\n-                    )\n+                    logger.debug(f"Group has a non-existing principal {u_name}")\n                     continue\n                 ret.append(usr)\n             else:\n@@ -199,9 +198,7 @@ def getAllGroupMembers(self):\n             if not usr:\n                 usr = self._getGRUF().getGroupById(u_name)\n                 if not usr:\n-                    logger.debug(\n-                        "Group has a non-existing principal {0}".format(u_name)\n-                    )\n+                    logger.debug(f"Group has a non-existing principal {u_name}")\n                     continue\n                 ret.append(usr)\n             else:\n@@ -221,14 +218,14 @@ def canAdministrateGroup(self):\n         """\n         user = getSecurityManager().getUser()\n         tool = self.getTool()\n-        portal = getToolByName(tool, \'portal_url\').getPortalObject()\n+        portal = getToolByName(tool, "portal_url").getPortalObject()\n \n         # Has manager users pemission?\n         if user.has_permission(Permissions.manage_users, portal):\n             return True\n \n         # Is explicitly mentioned as a group administrator?\n-        managers = self.getProperty(\'delegated_group_member_managers\', ())\n+        managers = self.getProperty("delegated_group_member_managers", ())\n         if user.getId() in managers:\n             return True\n \n@@ -249,7 +246,7 @@ def canAdministrateGroup(self):\n     @security.public\n     @postonly\n     def addMember(self, id, REQUEST=None):\n-        """ Add the existing member with the given id to the group"""\n+        """Add the existing member with the given id to the group"""\n         if not self.canAdministrateGroup():\n             raise Unauthorized("You cannot add a member to the group.")\n \n@@ -265,8 +262,7 @@ def addMember(self, id, REQUEST=None):\n     @security.public\n     @postonly\n     def removeMember(self, id, REQUEST=None):\n-        """Remove the member with the provided id from the group.\n-        """\n+        """Remove the member with the provided id from the group."""\n         if not self.canAdministrateGroup():\n             raise Unauthorized("You cannot remove a member from the group.")\n \n@@ -291,8 +287,7 @@ def setProperties(self, properties=None, **kw):\n \n     @security.protected(Permissions.manage_users)\n     def setGroupProperties(self, mapping):\n-        """PAS-specific method to set the properties of a group.\n-        """\n+        """PAS-specific method to set the properties of a group."""\n         sheets = None\n \n         if not IPluggableAuthService.providedBy(self.acl_users):\n@@ -302,7 +297,7 @@ def setGroupProperties(self, mapping):\n         else:\n             # It\'s a PAS! Whee!\n             group = self.getGroup()\n-            sheets = getattr(group, \'getOrderedPropertySheets\', lambda: [])()\n+            sheets = getattr(group, "getOrderedPropertySheets", lambda: [])()\n \n             # We won\'t always have PlonePAS groups, due to acquisition,\n             # nor are guaranteed property sheets\n@@ -323,14 +318,14 @@ def setGroupProperties(self, mapping):\n                     sheet.setProperty(group, k, v)\n                     modified = True\n                 else:\n-                    raise RuntimeError("Mutable property provider "\n-                                       "shadowed by read only provider")\n+                    raise RuntimeError(\n+                        "Mutable property provider " "shadowed by read only provider"\n+                    )\n         if modified:\n             self.notifyModified()\n \n     def _gruf_setGroupProperties(self, mapping):\n-        \'\'\'Sets the properties of the member.\n-        \'\'\'\n+        """Sets the properties of the member."""\n         # Sets the properties given in the MemberDataTool.\n         tool = self.getTool()\n         for id in tool.propertyIds():\n@@ -338,7 +333,7 @@ def _gruf_setGroupProperties(self, mapping):\n                 if id not in self.__class__.__dict__:\n                     value = mapping[id]\n                     if isinstance(value, str):\n-                        proptype = tool.getPropertyType(id) or \'string\'\n+                        proptype = tool.getPropertyType(id) or "string"\n                         if proptype in type_converters:\n                             value = type_converters[proptype](value)\n                     setattr(self, id, value)\n@@ -348,8 +343,8 @@ def _gruf_setGroupProperties(self, mapping):\n \n     @security.public\n     def getProperties(self):\n-        """ Return the properties of this group. Properties are as usual\n-            in Zope.\n+        """Return the properties of this group. Properties are as usual\n+        in Zope.\n         """\n         tool = self.getTool()\n         ret = {}\n@@ -367,7 +362,7 @@ def getProperty(self, id, default=None):\n         through the ordered property sheets.\n         """\n         group = self.getGroup()\n-        sheets = getattr(group, \'getOrderedPropertySheets\', lambda: [])()\n+        sheets = getattr(group, "getOrderedPropertySheets", lambda: [])()\n \n         # If we made this far, we found a PAS and some property sheets.\n         for sheet in sheets:\n@@ -424,14 +419,13 @@ def getGroupId(self):\n \n     def getGroupTitleOrName(self):\n         """Get the Title property of the group. If there is none\n-        then return the name """\n-        title = self.getProperty(\'title\', None)\n+        then return the name"""\n+        title = self.getProperty("title", None)\n         return title or self.getGroupName()\n \n     @security.public\n     def getMemberId(self):\n-        """This exists only for a basic user/group API compatibility\n-        """\n+        """This exists only for a basic user/group API compatibility"""\n         return self.getGroupId()\n \n     @security.public\n@@ -459,25 +453,25 @@ def has_role(self, roles, object=None):\n \n     def getUserName(self):\n         return self.getName()\n+\n     getUserNameWithoutGroupPrefix = getUserName\n \n     # IManageCapabilities methods\n     def canDelete(self):\n-        """True iff user can be removed from the Plone UI.\n-        """\n+        """True iff user can be removed from the Plone UI."""\n         # IGroupManagement provides removeGroup\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IGroupManagement)\n         if managers:\n             for mid, manager in managers:\n-                if (IDeleteCapability.providedBy(manager) and\n-                        manager.allowDeletePrincipal(self.getId())):\n+                if IDeleteCapability.providedBy(\n+                    manager\n+                ) and manager.allowDeletePrincipal(self.getId()):\n                     return True\n         return False\n \n     def canPasswordSet(self):\n-        """Always false for groups, which have no password.\n-        """\n+        """Always false for groups, which have no password."""\n         return False\n \n     def passwordInClear(self):\n@@ -489,7 +483,7 @@ def passwordInClear(self):\n         return False\n \n     def _groupdataHasProperty(self, prop_name):\n-        gdata = getToolByName(self, \'portal_groupdata\', None)\n+        gdata = getToolByName(self, "portal_groupdata", None)\n         if gdata:\n             return gdata.hasProperty(prop_name)\n         return 0\n@@ -505,7 +499,7 @@ def canWriteProperty(self, prop_name):\n         else:\n             # it\'s PAS\n             group = self.getGroup()\n-            sheets = getattr(group, \'getOrderedPropertySheets\', lambda: [])()\n+            sheets = getattr(group, "getOrderedPropertySheets", lambda: [])()\n             for sheet in sheets:\n                 if not sheet.hasProperty(prop_name):\n                     continue\n@@ -515,15 +509,9 @@ def canWriteProperty(self, prop_name):\n                     break  # shadowed by read-only\n         return 0\n \n-    if six.PY3:\n-        canAddToGroup = MemberData.canAddToGroup\n-        canRemoveFromGroup = MemberData.canRemoveFromGroup\n-        canAssignRole = MemberData.canAssignRole\n-    else:\n-        # in PY2 this is a unbound method\n-        canAddToGroup = MemberData.canAddToGroup.__func__\n-        canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n-        canAssignRole = MemberData.canAssignRole.__func__\n+    canAddToGroup = MemberData.canAddToGroup\n+    canRemoveFromGroup = MemberData.canRemoveFromGroup\n+    canAssignRole = MemberData.canAssignRole\n \n     # plugin getters\n \n@@ -531,4 +519,5 @@ def canWriteProperty(self, prop_name):\n     def _getPlugins(self):\n         return self.acl_users.plugins\n \n+\n InitializeClass(GroupData)\ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 70875d1e..97f2a970 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl.users import nobody\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n+from AccessControl.users import nobody\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.utils import registerToolInterface\n+from Products.CMFCore.utils import UniqueObject\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.permissions import AddGroups\n from Products.PlonePAS.permissions import DeleteGroups\n@@ -18,16 +17,18 @@\n from Products.PlonePAS.permissions import ViewGroups\n from Products.PlonePAS.utils import getGroupsForPrincipal\n from Products.PluggableAuthService.events import GroupDeleted\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IRoleAssignerPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IRoleAssignerPlugin\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    _SWALLOWABLE_PLUGIN_EXCEPTIONS,\n+)\n from ZODB.POSException import ConflictError\n-from zope.interface import implementer\n from zope.event import notify\n+from zope.interface import implementer\n+\n import logging\n \n-logger = logging.getLogger(\'PluggableAuthService\')\n+\n+logger = logging.getLogger("PluggableAuthService")\n \n \n class NotSupported(Exception):\n@@ -36,16 +37,16 @@ class NotSupported(Exception):\n \n @implementer(igroup.IGroupTool)\n class GroupsTool(UniqueObject, SimpleItem):\n-    """ This tool accesses group data through a acl_users object.\n+    """This tool accesses group data through a acl_users object.\n \n     It can be replaced with something that groups member data in a\n     different way.\n     """\n \n-    id = \'portal_groups\'\n-    meta_type = \'PlonePAS Groups Tool\'\n+    id = "portal_groups"\n+    meta_type = "PlonePAS Groups Tool"\n     security = ClassSecurityInfo()\n-    toolicon = \'tool.gif\'\n+    toolicon = "tool.gif"\n \n     ##\n     # basic group mgmt\n@@ -53,8 +54,9 @@ class GroupsTool(UniqueObject, SimpleItem):\n \n     @security.protected(AddGroups)\n     @postonly\n-    def addGroup(self, id, roles=[], groups=[], properties=None,\n-                 REQUEST=None, *args, **kw):\n+    def addGroup(\n+        self, id, roles=[], groups=[], properties=None, REQUEST=None, *args, **kw\n+    ):\n         """Create a group, with the supplied id, roles, and domains.\n \n         Underlying user folder must support adding users via the usual\n@@ -74,10 +76,11 @@ def addGroup(self, id, roles=[], groups=[], properties=None,\n             return 0\n \n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n         for mid, manager in managers:\n-            success = manager.addGroup(id, title=kw.get(\'title\', id),\n-                                       description=kw.get(\'description\', \'\'))\n+            success = manager.addGroup(\n+                id, title=kw.get("title", id), description=kw.get("description", "")\n+            )\n             if success:\n                 self.setRolesForGroup(id, roles)\n                 for g in groups:\n@@ -92,8 +95,7 @@ def addGroup(self, id, roles=[], groups=[], properties=None,\n \n     @security.protected(ManageGroups)\n     @postonly\n-    def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n-                  *args, **kw):\n+    def editGroup(self, id, roles=None, groups=None, REQUEST=None, *args, **kw):\n         """Edit the given group with the supplied roles.\n \n         Passwords for groups seem to be irrelevant.\n@@ -103,20 +105,19 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n         """\n         g = self.getGroupById(id)\n         if not g:\n-            raise KeyError(\'Trying to edit a non-existing group: %s\' % id)\n+            raise KeyError("Trying to edit a non-existing group: %s" % id)\n \n         # Update title/description properties of original group\n         gTools = self._getGroupTools()\n         if not gTools:\n-            raise NotSupported(\'No plugins allow for both group management \'\n-                               \'and introspection\')\n+            raise NotSupported(\n+                "No plugins allow for both group management " "and introspection"\n+            )\n \n         for tid, tool in gTools:\n             if id in tool.getGroupIds():\n                 tool.updateGroup(\n-                    id,\n-                    title=kw.get(\'title\'),\n-                    description=kw.get(\'description\')\n+                    id, title=kw.get("title"), description=kw.get("description")\n                 )\n                 break\n \n@@ -130,7 +131,7 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n             p_groups = set(self.getGroupsForPrincipal(g))\n             rmgroups = p_groups - groupset\n             for gid in rmgroups:\n-                if gid != \'AuthenticatedUsers\':\n+                if gid != "AuthenticatedUsers":\n                     self.removePrincipalFromGroup(g, gid)\n \n             # add groups\n@@ -139,7 +140,7 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n                     igroup.IGroupManagement\n                 )\n             except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-                logger.exception(\'Plugin listing error\')\n+                logger.exception("Plugin listing error")\n                 groupmanagers = ()\n \n             for group in groups:\n@@ -148,19 +149,16 @@ def editGroup(self, id, roles=None, groups=None, REQUEST=None,\n                         if gm.addPrincipalToGroup(id, group):\n                             break\n                     except _SWALLOWABLE_PLUGIN_EXCEPTIONS:\n-                        logger.exception(\n-                            \'AuthenticationPlugin {0} error\'.format(gm_id)\n-                        )\n+                        logger.exception(f"AuthenticationPlugin {gm_id} error")\n \n     @security.protected(DeleteGroups)\n     @postonly\n     def removeGroup(self, group_id, REQUEST=None):\n-        """Remove a single group.\n-        """\n+        """Remove a single group."""\n         retval = False\n         managers = self._getGroupManagers()\n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n \n         for mid, manager in managers:\n             if manager.removeGroup(group_id):\n@@ -172,8 +170,7 @@ def removeGroup(self, group_id, REQUEST=None):\n     @security.protected(DeleteGroups)\n     @postonly\n     def removeGroups(self, ids, REQUEST=None):\n-        """Remove the group in the provided list (if possible).\n-        """\n+        """Remove the group in the provided list (if possible)."""\n         for gid in ids:\n             self.removeGroup(gid)\n \n@@ -183,7 +180,7 @@ def setRolesForGroup(self, group_id, roles=(), REQUEST=None):\n         rmanagers = self._getPlugins().listPlugins(IRoleAssignerPlugin)\n         if not (rmanagers):\n             raise NotImplementedError(\n-                \'There is no plugin that can assign roles to groups\'\n+                "There is no plugin that can assign roles to groups"\n             )\n         for rid, rmanager in rmanagers:\n             rmanager.assignRolesToPrincipal(roles, group_id)\n@@ -197,7 +194,7 @@ def setRolesForGroup(self, group_id, roles=(), REQUEST=None):\n     def addPrincipalToGroup(self, principal_id, group_id, REQUEST=None):\n         managers = self._getGroupManagers()\n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n         for mid, manager in managers:\n             if manager.addPrincipalToGroup(principal_id, group_id):\n                 return True\n@@ -208,7 +205,7 @@ def addPrincipalToGroup(self, principal_id, group_id, REQUEST=None):\n     def removePrincipalFromGroup(self, principal_id, group_id, REQUEST=None):\n         managers = self._getGroupManagers()\n         if not managers:\n-            raise NotSupported(\'No plugins allow for group management\')\n+            raise NotSupported("No plugins allow for group management")\n         for mid, manager in managers:\n             if manager.removePrincipalFromGroup(principal_id, group_id):\n                 return True\n@@ -252,8 +249,8 @@ def searchForGroups(self, REQUEST={}, **kw):\n         else:\n             dict = kw\n \n-        name = dict.get(\'name\', None)\n-        title_or_name = dict.get(\'title_or_name\', None)\n+        name = dict.get("name", None)\n+        title_or_name = dict.get("title_or_name", None)\n         if name:\n             name = name.strip().lower()\n         if name is not None:\n@@ -282,9 +279,9 @@ def searchForGroups(self, REQUEST={}, **kw):\n             for groupid in md_groups:\n                 groups.append(getGroupById(groupid))\n             for group in uf_groups:\n-                groupid = group[\'groupid\']\n+                groupid = group["groupid"]\n                 if groupid in md_groups:\n-                    continue             # Kill dupes\n+                    continue  # Kill dupes\n                 groups.append(getGroupById(groupid))\n \n         return groups\n@@ -331,23 +328,20 @@ def _getPlugins(self):\n \n     @security.private\n     def _getGroupManagers(self):\n-        return self._getPlugins().listPlugins(\n-            igroup.IGroupManagement\n-        )\n+        return self._getPlugins().listPlugins(igroup.IGroupManagement)\n \n     @security.private\n     def _getGroupIntrospectors(self):\n-        return self._getPlugins().listPlugins(\n-            igroup.IGroupIntrospection\n-        )\n+        return self._getPlugins().listPlugins(igroup.IGroupIntrospection)\n \n     @security.private\n     def _getGroupTools(self):\n-        managers = self._getPlugins().listPlugins(\n-            igroup.IGroupManagement\n-        )\n-        return [(id, manager) for (id, manager) in managers\n-                if igroup.IGroupIntrospection.providedBy(manager)]\n+        managers = self._getPlugins().listPlugins(igroup.IGroupManagement)\n+        return [\n+            (id, manager)\n+            for (id, manager) in managers\n+            if igroup.IGroupIntrospection.providedBy(manager)\n+        ]\n \n     ##\n     # BBB\n@@ -363,8 +357,10 @@ def getGroupInfo(self, groupId):\n         if group is None:\n             return None\n \n-        groupinfo = {\'title\': group.getProperty(\'title\'),\n-                     \'description\': group.getProperty(\'description\')}\n+        groupinfo = {\n+            "title": group.getProperty("title"),\n+            "description": group.getProperty("description"),\n+        }\n \n         return groupinfo\n \n@@ -404,43 +400,43 @@ def setGroupOwnership(self, group, object, REQUEST=None):\n         For GRUF this is easy. Others may have to re-implement."""\n         user = group.getGroup()\n         if user is None:\n-            raise ValueError("Invalid group: \'%s\'." % (group, ))\n+            raise ValueError("Invalid group: \'{}\'.".format(group))\n         object.changeOwnership(user)\n-        object.manage_setLocalRoles(user.getId(), [\'Owner\'])\n+        object.manage_setLocalRoles(user.getId(), ["Owner"])\n \n     @security.private\n     def wrapGroup(self, g, wrap_anon=0):\n-        \'\'\' Sets up the correct acquisition wrappers for a group\n+        """Sets up the correct acquisition wrappers for a group\n         object and provides an opportunity for a portal_memberdata\n         tool to retrieve and store member data independently of\n         the user object.\n-        \'\'\'\n-        b = getattr(g, \'aq_base\', None)\n+        """\n+        b = getattr(g, "aq_base", None)\n         if b is None:\n             # u isn\'t wrapped at all.  Wrap it in self.acl_users.\n             b = g\n             g = g.__of__(self.acl_users)\n-        if (b is nobody and not wrap_anon) or hasattr(b, \'getMemberId\'):\n+        if (b is nobody and not wrap_anon) or hasattr(b, "getMemberId"):\n             # This user is either not recognized by acl_users or it is\n             # already registered with something that implements the\n             # member data tool at least partially.\n             return g\n \n         parent = aq_parent(aq_inner(self))\n-        base = getattr(parent, \'aq_base\', None)\n-        if hasattr(base, \'portal_groupdata\'):\n+        base = getattr(parent, "aq_base", None)\n+        if hasattr(base, "portal_groupdata"):\n             # Get portal_groupdata to do the wrapping.\n-            gd = getToolByName(parent, \'portal_groupdata\')\n+            gd = getToolByName(parent, "portal_groupdata")\n             try:\n                 portal_group = gd.wrapGroup(g)\n                 return portal_group\n             except ConflictError:\n                 raise\n             except:\n-                logger.exception(\'Error during wrapGroup\')\n+                logger.exception("Error during wrapGroup")\n         # Failed.\n         return g\n \n \n InitializeClass(GroupsTool)\n-registerToolInterface(\'portal_groups\', igroup.IGroupTool)\n+registerToolInterface("portal_groups", igroup.IGroupTool)\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 361844e7..c270307e 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from AccessControl.interfaces import IUser\n from AccessControl.requestmethod import postonly\n-from AccessControl.class_init import InitializeClass\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from Products.CMFCore.interfaces import IMember\n from Products.CMFCore.MemberDataTool import _marker\n@@ -20,55 +19,50 @@\n from Products.PlonePAS.interfaces.plugins import IUserManagement\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n from Products.PluggableAuthService.events import PropertiesUpdated\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n from Products.PluggableAuthService.interfaces.plugins import IPropertiesPlugin\n-from Products.PluggableAuthService.interfaces.plugins import \\\n-    IRoleAssignerPlugin\n+from Products.PluggableAuthService.interfaces.plugins import IRoleAssignerPlugin\n from zope.component import adapter\n from zope.event import notify\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IMemberDataTool)\n class MemberDataTool(BaseTool):\n-    """PAS-specific implementation of memberdata tool.\n-    """\n+    """PAS-specific implementation of memberdata tool."""\n \n     meta_type = "PlonePAS MemberData Tool"\n     security = ClassSecurityInfo()\n-    toolicon = \'tool.gif\'\n+    toolicon = "tool.gif"\n \n     def __init__(self):\n         BaseTool.__init__(self)\n-        self.portraits = BTreeFolder2(id=\'portraits\')\n+        self.portraits = BTreeFolder2(id="portraits")\n \n     def _getPortrait(self, member_id):\n-        "return member_id\'s portrait if you can "\n+        "return member_id\'s portrait if you can"\n         return self.portraits.get(member_id, None)\n \n     def _setPortrait(self, portrait, member_id):\n-        " store portrait which must be a raw image in _portrais "\n+        "store portrait which must be a raw image in _portrais"\n         if member_id in self.portraits:\n             self.portraits._delObject(member_id)\n         self.portraits._setObject(id=member_id, object=portrait)\n \n     def _deletePortrait(self, member_id):\n-        " remove member_id\'s portrait "\n+        "remove member_id\'s portrait"\n         if member_id in self.portraits:\n             self.portraits._delObject(member_id)\n \n     @security.private\n     def pruneMemberDataContents(self):\n-        \'\'\'\n+        """\n         Compare the user IDs stored in the member data\n         tool with the list in the actual underlying acl_users\n         and delete anything not in acl_users\n-        \'\'\'\n+        """\n         BaseTool.pruneMemberDataContents(self)\n-        membertool = getToolByName(self, \'portal_membership\')\n+        membertool = getToolByName(self, "portal_membership")\n         portraits = self.portraits\n         user_list = membertool.listMemberIds()\n \n@@ -79,10 +73,10 @@ def pruneMemberDataContents(self):\n \n     @security.protected(ManagePortal)\n     def purgeMemberDataContents(self):\n-        \'\'\'\n+        """\n         Delete ALL MemberData information. This is required for us as we change\n         the MemberData class.\n-        \'\'\'\n+        """\n         members = self._members\n \n         for tuple in members.items():\n@@ -92,9 +86,10 @@ def purgeMemberDataContents(self):\n         return "Done."\n \n     @security.private\n-    def updateMemberDataContents(self,):\n-        """Update former MemberData objects to new MemberData objects\n-        """\n+    def updateMemberDataContents(\n+        self,\n+    ):\n+        """Update former MemberData objects to new MemberData objects"""\n         count = 0\n         members = self._members\n         properties = self.propertyIds()\n@@ -103,7 +98,7 @@ def updateMemberDataContents(self,):\n         for member_name, member_obj in members.items():\n             values = {}\n             if getattr(member_obj, "_is_new_kind", None):\n-                continue        # Do not have to upgrade that object\n+                continue  # Do not have to upgrade that object\n \n             # Have to upgrade. Create the values mapping.\n             for pty_name in properties:\n@@ -114,15 +109,13 @@ def updateMemberDataContents(self,):\n             # Wrap a new user object of the RIGHT class\n             u = self.acl_users.getUserById(member_name, None)\n             if not u:\n-                continue                # User is not in main acl_users anymore\n+                continue  # User is not in main acl_users anymore\n             self.wrapUser(u)\n \n             # Set its properties\n             mbr = self._members.get(member_name, None)\n             if not mbr:\n-                raise RuntimeError(\n-                    "Error while upgrading user \'{0}\'.".format(member_name)\n-                )\n+                raise RuntimeError(f"Error while upgrading user \'{member_name}\'.")\n             mbr.setProperties(values, force_local=1)\n             count += 1\n \n@@ -138,10 +131,10 @@ def searchMemberDataContents(self, search_param, search_term):\n \n         search_term = search_term.strip().lower()\n \n-        if search_param == \'username\':\n-            search_param = \'id\'\n+        if search_param == "username":\n+            search_param = "id"\n \n-        mtool = getToolByName(self, \'portal_membership\')\n+        mtool = getToolByName(self, "portal_membership")\n \n         for member_id in self._members.keys():\n             user_wrapper = mtool.getMemberById(member_id)\n@@ -153,8 +146,12 @@ def searchMemberDataContents(self, search_param, search_term):\n                 if searched is not None:\n                     if searched.strip().lower().find(search_term) != -1:\n \n-                        res.append({\'username\': memberProperty(\'id\'),\n-                                    \'email\': memberProperty(\'email\', \'\')})\n+                        res.append(\n+                            {\n+                                "username": memberProperty("id"),\n+                                "email": memberProperty("email", ""),\n+                            }\n+                        )\n         return res\n \n     @security.public\n@@ -166,14 +163,16 @@ def searchFulltextForMembers(self, s):\n         # Search for members which do have string \'s\' in name, email or full\n         # name (if defined).  This is mainly used for the localrole form.\n         s = s.strip().lower()\n-        mu = getToolByName(self, \'portal_membership\')\n+        mu = getToolByName(self, "portal_membership")\n \n         res = []\n         for member in mu.listMembers():\n             u = member.getUser()\n-            if u.getUserName().lower().find(s) != -1 \\\n-               or member.getProperty(\'fullname\').lower().find(s) != -1 \\\n-               or member.getProperty(\'email\').lower().find(s) != -1:\n+            if (\n+                u.getUserName().lower().find(s) != -1\n+                or member.getProperty("fullname").lower().find(s) != -1\n+                or member.getProperty("email").lower().find(s) != -1\n+            ):\n                 res.append(member)\n         return res\n \n@@ -181,10 +180,12 @@ def searchFulltextForMembers(self, s):\n     # so we do not write on read\n     def canAddMemberData(self):\n         try:\n-            if self.REQUEST.REQUEST_METHOD != \'POST\':\n+            if self.REQUEST.REQUEST_METHOD != "POST":\n                 return False\n-            if getattr(self, \'_p_jar\', None) and \\\n-                    len(self._p_jar._registered_objects) > 0:\n+            if (\n+                getattr(self, "_p_jar", None)\n+                and len(self._p_jar._registered_objects) > 0\n+            ):\n                 # XXX do not write on read\n                 return True\n         except AttributeError:\n@@ -193,8 +194,7 @@ def canAddMemberData(self):\n \n     @postonly\n     def deleteMemberData(self, member_id, REQUEST=None):\n-        """ Delete member data of specified member.\n-        """\n+        """Delete member data of specified member."""\n         if IPluggableAuthService.providedBy(self.acl_users):\n             # It\'s a PAS! Whee!\n             # XXX: can we safely assume that user name == member_id\n@@ -250,7 +250,7 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):\n         else:\n             # It\'s a PAS! Whee!\n             user = self.getUser()\n-            sheets = getattr(user, \'getOrderedPropertySheets\', lambda: None)()\n+            sheets = getattr(user, "getOrderedPropertySheets", lambda: None)()\n \n             # We won\'t always have PlonePAS users, due to acquisition,\n             # nor are guaranteed property sheets\n@@ -279,7 +279,7 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):\n \n         # Trigger PropertiesUpdated event when member properties are updated,\n         # excluding user login events\n-        if not set(mapping.keys()) & set((\'login_time\', \'last_login_time\')):\n+        if not set(mapping.keys()) & {"login_time", "last_login_time"}:\n             notify(PropertiesUpdated(self, mapping))\n \n     def getProperty(self, id, default=_marker):\n@@ -292,7 +292,7 @@ def getProperty(self, id, default=_marker):\n         else:\n             # It\'s a PAS! Whee!\n             user = self.getUser()\n-            sheets = getattr(user, \'getOrderedPropertySheets\', lambda: None)()\n+            sheets = getattr(user, "getOrderedPropertySheets", lambda: None)()\n \n             # we won\'t always have PlonePAS users, due to acquisition,\n             # nor are guaranteed property sheets\n@@ -303,21 +303,13 @@ def getProperty(self, id, default=_marker):\n                     # Zope users don\'t have PropertySheets,\n                     # return an empty string for them if the property\n                     # doesn\'t exists.\n-                    return \'\'\n+                    return ""\n \n         # If we made this far, we found a PAS and some property sheets.\n         for sheet in sheets:\n             if sheet.hasProperty(id):\n                 # Return the first one that has the property.\n-                value = sheet.getProperty(id)\n-                if six.PY2 and isinstance(value, six.text_type):\n-                    # XXX Temporarily work around the fact that\n-                    # property sheets blindly store and return\n-                    # unicode. This is sub-optimal and should be\n-                    # dealed with at the property sheets level by\n-                    # using Zope\'s converters.\n-                    return value.encode(\'utf-8\')\n-                return value\n+                return sheet.getProperty(id)\n \n         # Couldn\'t find the property in the property sheets. Try to\n         # delegate back to the base implementation.\n@@ -325,8 +317,7 @@ def getProperty(self, id, default=_marker):\n \n     @security.public\n     def hasProperty(self, propname):\n-        """Does the member have the given property?\n-        """\n+        """Does the member have the given property?"""\n         # Unfortunately, checking for a marker value does not work well:\n         # You get a ValueError when the property does not exist.\n         try:\n@@ -346,8 +337,9 @@ def canDelete(self):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IUserManagement)\n         for mid, manager in managers:\n-            if (IDeleteCapability.providedBy(manager) and\n-                    manager.allowDeletePrincipal(self.getId())):\n+            if IDeleteCapability.providedBy(manager) and manager.allowDeletePrincipal(\n+                self.getId()\n+            ):\n                 return True\n         return False\n \n@@ -357,8 +349,9 @@ def canPasswordSet(self):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IUserManagement)\n         for mid, manager in managers:\n-            if (IPasswordSetCapability.providedBy(manager) and\n-                    manager.allowPasswordSet(self.getId())):\n+            if IPasswordSetCapability.providedBy(manager) and manager.allowPasswordSet(\n+                self.getId()\n+            ):\n                 return True\n         return False\n \n@@ -371,7 +364,7 @@ def passwordInClear(self):\n         return 0\n \n     def _memberdataHasProperty(self, prop_name):\n-        mdata = getToolByName(self, \'portal_memberdata\', None)\n+        mdata = getToolByName(self, "portal_memberdata", None)\n         if mdata:\n             return mdata.hasProperty(prop_name)\n         return 0\n@@ -386,7 +379,7 @@ def canWriteProperty(self, prop_name):\n         else:\n             # it\'s PAS\n             user = self.getUser()\n-            sheets = getattr(user, \'getOrderedPropertySheets\', lambda: None)()\n+            sheets = getattr(user, "getOrderedPropertySheets", lambda: None)()\n             if not sheets:\n                 return self._memberdataHasProperty(prop_name)\n \n@@ -396,7 +389,7 @@ def canWriteProperty(self, prop_name):\n                 if IMutablePropertySheet.providedBy(sheet):\n                     # BBB for plugins implementing an older version of\n                     # IMutablePropertySheet\n-                    if hasattr(sheet, \'canWriteProperty\'):\n+                    if hasattr(sheet, "canWriteProperty"):\n                         return sheet.canWriteProperty(user, prop_name)\n                     return True\n                 else:\n@@ -409,8 +402,9 @@ def canAddToGroup(self, group_id):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IGroupManagement)\n         for mid, manager in managers:\n-            if (IGroupCapability.providedBy(manager) and\n-                    manager.allowGroupAdd(self.getId(), group_id)):\n+            if IGroupCapability.providedBy(manager) and manager.allowGroupAdd(\n+                self.getId(), group_id\n+            ):\n                 return True\n         return False\n \n@@ -420,8 +414,9 @@ def canRemoveFromGroup(self, group_id):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IGroupManagement)\n         for mid, manager in managers:\n-            if (IGroupCapability.providedBy(manager) and\n-                    manager.allowGroupRemove(self.getId(), group_id)):\n+            if IGroupCapability.providedBy(manager) and manager.allowGroupRemove(\n+                self.getId(), group_id\n+            ):\n                 return True\n         return False\n \n@@ -431,8 +426,9 @@ def canAssignRole(self, role_id):\n         plugins = self._getPlugins()\n         managers = plugins.listPlugins(IRoleAssignerPlugin)\n         for mid, manager in managers:\n-            if (IAssignRoleCapability.providedBy(manager) and\n-                    manager.allowRoleAssign(self.getId(), role_id)):\n+            if IAssignRoleCapability.providedBy(manager) and manager.allowRoleAssign(\n+                self.getId(), role_id\n+            ):\n                 return True\n         return False\n \n@@ -444,8 +440,8 @@ def setSecurityProfile(self, password=None, roles=None, domains=None):\n         # The Zope User API is stupid, it should check for None.\n         if roles is None:\n             roles = list(u.getRoles())\n-            if \'Authenticated\' in roles:\n-                roles.remove(\'Authenticated\')\n+            if "Authenticated" in roles:\n+                roles.remove("Authenticated")\n         if domains is None:\n             domains = u.getDomains()\n \ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 29c103a3..5a60059c 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -1,18 +1,19 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl import Unauthorized\n from AccessControl import getSecurityManager\n-from AccessControl.SecurityManagement import noSecurityManager\n+from AccessControl import Unauthorized\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n+from AccessControl.SecurityManagement import noSecurityManager\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.Image import Image\n-from Products.CMFCore.MembershipTool import MembershipTool as BaseTool\n+from plone.protect.interfaces import IDisableCSRFProtection\n from Products.CMFCore.interfaces import IPropertiesTool\n+from Products.CMFCore.MembershipTool import MembershipTool as BaseTool\n from Products.CMFCore.permissions import ListPortalMembers\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.permissions import ManageUsers\n@@ -21,7 +22,6 @@\n from Products.CMFCore.permissions import View\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n-from Products.PlonePAS.config import HAS_PIL\n from Products.PlonePAS.events import UserInitialLoginInEvent\n from Products.PlonePAS.events import UserLoggedInEvent\n from Products.PlonePAS.events import UserLoggedOutEvent\n@@ -29,38 +29,36 @@\n from Products.PlonePAS.utils import cleanId\n from Products.PlonePAS.utils import safe_unicode\n from Products.PlonePAS.utils import scale_image\n-from ZODB.POSException import ConflictError\n-from plone.protect.interfaces import IDisableCSRFProtection\n-import six\n-from six import BytesIO\n from zExceptions import BadRequest\n+from ZODB.POSException import ConflictError\n from zope import event\n from zope.component import getUtility\n from zope.interface import alsoProvides\n from zope.interface import implementer\n \n import logging\n+import PIL\n import transaction\n \n-default_portrait = \'defaultUser.png\'\n-logger = logging.getLogger(\'PlonePAS\')\n+\n+default_portrait = "defaultUser.png"\n+logger = logging.getLogger("PlonePAS")\n \n _marker = dict()  # type: ignore\n \n \n def _unicodify_structure(value, charset=_marker):\n-    """ Convert value to unicode.\n-    """\n+    """Convert value to unicode."""\n     if charset is _marker:\n         ptool = getUtility(IPropertiesTool)\n-        charset = ptool.getProperty(\'default_charset\', None)\n+        charset = ptool.getProperty("default_charset", None)\n \n     if isinstance(value, str):\n         return charset and safe_unicode(value, charset) or safe_unicode(value)\n     if isinstance(value, list):\n         return [_unicodify_structure(val, charset) for val in value]\n     if isinstance(value, tuple):\n-        return tuple([_unicodify_structure(entry, charset) for entry in value])\n+        return tuple(_unicodify_structure(entry, charset) for entry in value)\n     if isinstance(value, dict):\n         for key, val in value.items():\n             value[key] = _unicodify_structure(val, charset)\n@@ -70,84 +68,84 @@ def _unicodify_structure(value, charset=_marker):\n \n @implementer(membership.IMembershipTool)\n class MembershipTool(BaseTool):\n-    """PAS-based customization of MembershipTool.\n-    """\n+    """PAS-based customization of MembershipTool."""\n \n     meta_type = "PlonePAS Membership Tool"\n-    toolicon = \'tool.gif\'\n-    personal_id = \'.personal\'\n-    portrait_id = \'MyPortrait\'\n-    default_portrait = \'defaultUser.gif\'\n-    memberarea_type = \'Folder\'\n-    membersfolder_id = \'Members\'\n+    toolicon = "tool.gif"\n+    personal_id = ".personal"\n+    portrait_id = "MyPortrait"\n+    default_portrait = "defaultUser.gif"\n+    memberarea_type = "Folder"\n+    membersfolder_id = "Members"\n     memberareaCreationFlag = False\n     security = ClassSecurityInfo()\n \n-    user_search_keywords = (\'login\', \'fullname\', \'email\', \'exact_match\',\n-                            \'sort_by\', \'max_results\')\n-\n-    _properties = (getattr(BaseTool, \'_properties\', ()) +\n-                   ({\'id\': \'user_search_keywords\',\n-                     \'type\': \'lines\',\n-                     \'mode\': \'rw\',\n-                     },))\n-\n-    manage_options = (BaseTool.manage_options +\n-                      ({\'label\': \'Portraits\',\n-                        \'action\': \'manage_portrait_fix\'},))\n+    user_search_keywords = (\n+        "login",\n+        "fullname",\n+        "email",\n+        "exact_match",\n+        "sort_by",\n+        "max_results",\n+    )\n+\n+    _properties = getattr(BaseTool, "_properties", ()) + (\n+        {\n+            "id": "user_search_keywords",\n+            "type": "lines",\n+            "mode": "rw",\n+        },\n+    )\n+\n+    manage_options = BaseTool.manage_options + (\n+        {"label": "Portraits", "action": "manage_portrait_fix"},\n+    )\n \n     # TODO I\'m not quite sure why getPortalRoles is declared \'Managed\'\n     #    in CMFCore.MembershipTool - but in Plone we are not so anal ;-)\n-    security.declareProtected(View, \'getPortalRoles\')\n+    security.declareProtected(View, "getPortalRoles")\n \n-    security.declareProtected(ManagePortal, \'manage_mapRoles\')\n-    manage_mapRoles = DTMLFile(\'../zmi/membershipRolemapping\', globals())\n+    security.declareProtected(ManagePortal, "manage_mapRoles")\n+    manage_mapRoles = DTMLFile("../zmi/membershipRolemapping", globals())\n \n-    security.declareProtected(ManagePortal, \'manage_portrait_fix\')\n-    manage_portrait_fix = DTMLFile(\'../zmi/portrait_fix\', globals())\n+    security.declareProtected(ManagePortal, "manage_portrait_fix")\n+    manage_portrait_fix = DTMLFile("../zmi/portrait_fix", globals())\n \n     @security.protected(ManagePortal)\n     def manage_setMemberAreaType(self, type_name, REQUEST=None):\n-        """ ZMI method to set the home folder type by its type name.\n-        """\n+        """ZMI method to set the home folder type by its type name."""\n         self.setMemberAreaType(type_name)\n         if REQUEST is not None:\n-            REQUEST[\'RESPONSE\'].redirect(\n-                self.absolute_url() +\n-                \'/manage_mapRoles\'\n-                \'?manage_tabs_message=Member+area+type+changed.\'\n+            REQUEST["RESPONSE"].redirect(\n+                self.absolute_url() + "/manage_mapRoles"\n+                "?manage_tabs_message=Member+area+type+changed."\n             )\n \n     @security.protected(ManagePortal)\n     def manage_setMembersFolderById(self, id, REQUEST=None):\n-        """ ZMI method to set the members folder object by its id.\n-        """\n+        """ZMI method to set the members folder object by its id."""\n         self.setMembersFolderById(id)\n         if REQUEST is not None:\n-            REQUEST[\'RESPONSE\'].redirect(\n-                self.absolute_url() +\n-                \'/manage_mapRoles\'\n-                \'?manage_tabs_message=Members+folder+id+changed.\'\n+            REQUEST["RESPONSE"].redirect(\n+                self.absolute_url() + "/manage_mapRoles"\n+                "?manage_tabs_message=Members+folder+id+changed."\n             )\n \n     @security.protected(ManagePortal)\n     def setMemberAreaType(self, type_name):\n-        """ Sets the portal type to use for new home folders.\n-        """\n+        """Sets the portal type to use for new home folders."""\n         # No check for folderish since someone somewhere may actually want\n         # members to have objects instead of folders as home "directory".\n         self.memberarea_type = str(type_name).strip()\n \n     @security.protected(ManagePortal)\n-    def setMembersFolderById(self, id=\'\'):\n-        """ Set the members folder object by its id.\n-        """\n+    def setMembersFolderById(self, id=""):\n+        """Set the members folder object by its id."""\n         self.membersfolder_id = id.strip()\n \n     @security.public\n     def getMembersFolder(self):\n-        """ Get the members folder object.\n-        """\n+        """Get the members folder object."""\n         parent = aq_parent(aq_inner(self))\n         members = getattr(parent, self.membersfolder_id, None)\n         return members\n@@ -184,7 +182,7 @@ def searchForMembers(self, REQUEST=None, **kw):\n \n         Simple name searches are "fast".\n         """\n-        logger.debug(\'searchForMembers: started.\')\n+        logger.debug("searchForMembers: started.")\n \n         acl_users = getToolByName(self, "acl_users")\n \n@@ -199,21 +197,20 @@ def searchForMembers(self, REQUEST=None, **kw):\n         # While the parameter is called name it is actually used to search a\n         # users name, which is stored in the fullname property. We need to fix\n         # that here so the right name is used when calling into PAS plugins.\n-        if \'name\' in searchmap:\n-            searchmap[\'fullname\'] = searchmap[\'name\']\n-            del searchmap[\'name\']\n+        if "name" in searchmap:\n+            searchmap["fullname"] = searchmap["name"]\n+            del searchmap["name"]\n \n         user_search = dict(\n-            [x for x in searchmap.items()\n-             if x[0] in self.user_search_keywords and x[1]]\n+            [x for x in searchmap.items() if x[0] in self.user_search_keywords and x[1]]\n         )\n \n-        fullname = searchmap.get(\'fullname\', None)\n-        email = searchmap.get(\'email\', None)\n-        roles = searchmap.get(\'roles\', None)\n-        last_login_time = searchmap.get(\'last_login_time\', None)\n-        before_specified_time = searchmap.get(\'before_specified_time\', None)\n-        groupname = searchmap.get(\'groupname\', \'\').strip()\n+        fullname = searchmap.get("fullname", None)\n+        email = searchmap.get("email", None)\n+        roles = searchmap.get("roles", None)\n+        last_login_time = searchmap.get("last_login_time", None)\n+        before_specified_time = searchmap.get("before_specified_time", None)\n+        groupname = searchmap.get("groupname", "").strip()\n \n         if fullname:\n             fullname = fullname.strip().lower()\n@@ -227,10 +224,10 @@ def searchForMembers(self, REQUEST=None, **kw):\n         uf_users = []\n \n         logger.debug(\n-            \'searchForMembers: searching PAS \'\n-            \'with arguments %r.\' % user_search)\n+            "searchForMembers: searching PAS " "with arguments %r." % user_search\n+        )\n         for user in acl_users.searchUsers(**user_search):\n-            uf_users.append(user[\'userid\'])\n+            uf_users.append(user["userid"])\n \n         if not uf_users:\n             return []\n@@ -250,8 +247,9 @@ def dedupe(seq):\n \n         if not (email or fullname or roles or groupname or last_login_time):\n             logger.debug(\n-                \'searchForMembers: searching users \'\n-                \'with no extra filter, immediate return.\')\n+                "searchForMembers: searching users "\n+                "with no extra filter, immediate return."\n+            )\n             return members\n \n         # Now perform individual checks on each user\n@@ -272,11 +270,11 @@ def dedupe(seq):\n                     continue\n \n             if last_login_time:\n-                last_login = member.getProperty(\'last_login_time\', \'\')\n+                last_login = member.getProperty("last_login_time", "")\n \n-                if isinstance(last_login, six.string_types):\n+                if isinstance(last_login, str):\n                     # value is a string when member hasn\'t yet logged in\n-                    last_login = DateTime(last_login or \'2000/01/01\')\n+                    last_login = DateTime(last_login or "2000/01/01")\n \n                 if before_specified_time:\n                     if last_login >= last_login_time:\n@@ -286,7 +284,7 @@ def dedupe(seq):\n \n             res.append(member)\n \n-        logger.debug(\'searchForMembers: finished.\')\n+        logger.debug("searchForMembers: finished.")\n         return res\n \n     ############\n@@ -300,7 +298,7 @@ def createMemberarea(self, member_id=None, minimal=None):\n         """\n         if not self.getMemberareaCreationFlag():\n             return None\n-        membership = getToolByName(self, \'portal_membership\')\n+        membership = getToolByName(self, "portal_membership")\n         members = self.getMembersFolder()\n \n         if not member_id:\n@@ -309,20 +307,21 @@ def createMemberarea(self, member_id=None, minimal=None):\n             member = membership.getAuthenticatedMember()\n             member_id = member.getId()\n \n-        if hasattr(members, \'aq_explicit\'):\n+        if hasattr(members, "aq_explicit"):\n             members = members.aq_explicit\n \n         if members is None:\n             # no members area\n-            logger.debug(\'createMemberarea: members area does not exist.\')\n+            logger.debug("createMemberarea: members area does not exist.")\n             return\n \n         safe_member_id = cleanId(member_id)\n         if hasattr(members, safe_member_id):\n             # has already this member\n             logger.debug(\n-                \'createMemberarea: member area \'\n-                \'for %r already exists.\' % safe_member_id)\n+                "createMemberarea: member area "\n+                "for %r already exists." % safe_member_id\n+            )\n             return\n \n         if not safe_member_id:\n@@ -330,14 +329,13 @@ def createMemberarea(self, member_id=None, minimal=None):\n             # - A Emergency User\n             # - cleanId made a empty string out of member_id\n             logger.debug(\n-                \'createMemberarea: empty member id \'\n-                \'(%r, %r), skipping member area creation.\' %\n-                (member_id, safe_member_id)\n+                "createMemberarea: empty member id "\n+                "(%r, %r), skipping member area creation." % (member_id, safe_member_id)\n             )\n             return\n \n         # Create member area without security checks\n-        typesTool = getToolByName(members, \'portal_types\')\n+        typesTool = getToolByName(members, "portal_types")\n         fti = typesTool.getTypeInfo(self.memberarea_type)\n         member_folder = fti._constructInstance(members, safe_member_id)\n \n@@ -350,9 +348,7 @@ def createMemberarea(self, member_id=None, minimal=None):\n             user = getSecurityManager().getUser()\n             # check that we do not do something wrong\n             if user.getId() != member_id:\n-                raise NotImplementedError(\n-                    \'cannot get user for member area creation\'\n-                )\n+                raise NotImplementedError("cannot get user for member area creation")\n \n         member_object = self.getMemberById(member_id)\n \n@@ -361,19 +357,19 @@ def createMemberarea(self, member_id=None, minimal=None):\n         # Grant Ownership and Owner role to Member\n         member_folder.changeOwnership(user)\n         member_folder.__ac_local_roles__ = None\n-        member_folder.manage_setLocalRoles(member_id, [\'Owner\'])\n+        member_folder.manage_setLocalRoles(member_id, ["Owner"])\n         # We use ATCT now use the mutators\n-        fullname = member_object.getProperty(\'fullname\')\n+        fullname = member_object.getProperty("fullname")\n         member_folder.setTitle(fullname or member_id)\n         member_folder.reindexObject()\n \n         # Hook to allow doing other things after memberarea creation.\n-        notify_script = getattr(member_folder, \'notifyMemberAreaCreated\', None)\n+        notify_script = getattr(member_folder, "notifyMemberAreaCreated", None)\n         if notify_script is not None:\n             notify_script()\n \n     # deal with ridiculous API change in CMF\n-    security.declarePublic(\'createMemberArea\')\n+    security.declarePublic("createMemberArea")\n     createMemberArea = createMemberarea\n \n     @security.public\n@@ -389,28 +385,31 @@ def getMemberInfo(self, memberId=None):\n             return None\n \n         # Special handling to avoid bad home_pages, like javascript.\n-        home_page = member.getProperty(\'home_page\', \'\')\n-        if isinstance(home_page, six.string_types):\n-            if (not home_page.startswith(\'https://\') and\n-                    not home_page.startswith(\'http://\')):\n+        home_page = member.getProperty("home_page", "")\n+        if isinstance(home_page, str):\n+            if not home_page.startswith("https://") and not home_page.startswith(\n+                "http://"\n+            ):\n                 # Suspicious.  But if it is internal, it is fine.\n-                urltool = getToolByName(self, \'portal_url\')\n+                urltool = getToolByName(self, "portal_url")\n                 if not urltool.isURLInPortal(home_page):\n                     # We do not trust this url, so empty it.\n                     # It may for example be javascript.\n                     logger.warn(\n-                        \'Member %s has suspicious home_page property: %s\',\n-                        memberId, home_page)\n-                    home_page = \'\'\n+                        "Member %s has suspicious home_page property: %s",\n+                        memberId,\n+                        home_page,\n+                    )\n+                    home_page = ""\n \n         memberinfo = {\n-            \'fullname\': member.getProperty(\'fullname\', \'\'),\n-            \'description\': member.getProperty(\'description\', \'\'),\n-            \'location\': member.getProperty(\'location\', \'\'),\n-            \'language\': member.getProperty(\'language\', \'\'),\n-            \'home_page\': home_page,\n-            \'username\': member.getUserName(),\n-            \'has_email\': bool(member.getProperty(\'email\')),\n+            "fullname": member.getProperty("fullname", ""),\n+            "description": member.getProperty("description", ""),\n+            "location": member.getProperty("location", ""),\n+            "language": member.getProperty("language", ""),\n+            "home_page": home_page,\n+            "username": member.getUserName(),\n+            "has_email": bool(member.getProperty("email")),\n         }\n \n         return memberinfo\n@@ -423,7 +422,7 @@ def _getSafeMemberId(self, id=None):\n \n         if id is None:\n             member = self.getAuthenticatedMember()\n-            if not hasattr(member, \'getMemberId\'):\n+            if not hasattr(member, "getMemberId"):\n                 return None\n             id = member.getMemberId()\n \n@@ -431,7 +430,7 @@ def _getSafeMemberId(self, id=None):\n \n     @security.public\n     def getHomeFolder(self, id=None, verifyPermission=0):\n-        """ Return a member\'s home folder object, or None.\n+        """Return a member\'s home folder object, or None.\n \n         Specially instrumented for URL-quoted-member-id folder\n         names.\n@@ -439,7 +438,7 @@ def getHomeFolder(self, id=None, verifyPermission=0):\n         safe_id = self._getSafeMemberId(id)\n         if safe_id is None:\n             member = self.getAuthenticatedMember()\n-            if not hasattr(member, \'getMemberId\'):\n+            if not hasattr(member, "getMemberId"):\n                 return None\n             safe_id = member.getMemberId()\n         members = self.getMembersFolder()\n@@ -456,8 +455,7 @@ def getHomeFolder(self, id=None, verifyPermission=0):\n         return None\n \n     def getHomeUrl(self, id=None, verifyPermission=0):\n-        """ Return the URL to a member\'s home folder, or None.\n-        """\n+        """Return the URL to a member\'s home folder, or None."""\n         home = self.getHomeFolder(id, verifyPermission)\n         if home is not None:\n             return home.absolute_url()\n@@ -485,33 +483,31 @@ def getPersonalPortrait(self, id=None, verifyPermission=0):\n         if not id:\n             id = self.getAuthenticatedMember().getId()\n         safe_id = self._getSafeMemberId(id)\n-        membertool = getToolByName(self, \'portal_memberdata\')\n+        membertool = getToolByName(self, "portal_memberdata")\n         portrait = membertool._getPortrait(safe_id)\n         if isinstance(portrait, str):\n             portrait = None\n         if portrait is not None:\n-            if verifyPermission and not _checkPermission(\'View\', portrait):\n+            if verifyPermission and not _checkPermission("View", portrait):\n                 # Don\'t return the portrait if the user can\'t get to it\n                 portrait = None\n         if portrait is None:\n-            portal = getToolByName(self, \'portal_url\').getPortalObject()\n+            portal = getToolByName(self, "portal_url").getPortalObject()\n             portrait = getattr(portal, default_portrait, None)\n \n         return portrait\n \n     @security.protected(SetOwnProperties)\n     def deletePersonalPortrait(self, id=None):\n-        """deletes the Portait of a member.\n-        """\n+        """deletes the Portait of a member."""\n         authenticated_id = self.getAuthenticatedMember().getId()\n         if not id:\n             id = authenticated_id\n         safe_id = self._getSafeMemberId(id)\n-        if id != authenticated_id and not _checkPermission(\n-                ManageUsers, self):\n+        if id != authenticated_id and not _checkPermission(ManageUsers, self):\n             raise Unauthorized\n \n-        membertool = getToolByName(self, \'portal_memberdata\')\n+        membertool = getToolByName(self, "portal_memberdata")\n         return membertool._deletePortrait(safe_id)\n \n     @security.protected(SetOwnProperties)\n@@ -537,33 +533,33 @@ def changeMemberPortrait(self, portrait, id=None):\n                 raise Unauthorized\n         if portrait and portrait.filename:\n             scaled, mimetype = scale_image(portrait)\n-            portrait = Image(id=safe_id, file=scaled, title=\'\')\n-            membertool = getToolByName(self, \'portal_memberdata\')\n+            portrait = Image(id=safe_id, file=scaled, title="")\n+            membertool = getToolByName(self, "portal_memberdata")\n             membertool._setPortrait(portrait, safe_id)\n \n     @security.protected(ManageUsers)\n     def listMembers(self):\n-        \'\'\'Gets the list of all members.\n+        """Gets the list of all members.\n         THIS METHOD MIGHT BE VERY EXPENSIVE ON LARGE USER FOLDERS AND MUST\n         BE USED WITH CARE! We plan to restrict its use in the future (ie.\n         force large requests to use searchForMembers instead of listMembers,\n         so that it will not be possible anymore to have a method returning\n         several hundred of users :)\n-        \'\'\'\n+        """\n         return BaseTool.listMembers(self)\n \n     @security.protected(ManageUsers)\n     def listMemberIds(self):\n-        \'\'\'Lists the ids of all members.  This may eventually be\n+        """Lists the ids of all members.  This may eventually be\n         replaced with a set of methods for querying pieces of the\n         list rather than the entire list at once.\n-        \'\'\'\n+        """\n         return self.acl_users.getUserIds()\n \n     @security.protected(SetOwnPassword)\n     def testCurrentPassword(self, password):\n-        """ test to see if password is current """\n-        REQUEST = getattr(self, \'REQUEST\', {})\n+        """test to see if password is current"""\n+        REQUEST = getattr(self, "REQUEST", {})\n         member = self.getAuthenticatedMember()\n         acl_users = self._findUsersAclHome(member.getUserId())\n         if not acl_users:\n@@ -571,14 +567,14 @@ def testCurrentPassword(self, password):\n         return acl_users.authenticate(member.getUserName(), password, REQUEST)\n \n     def _findUsersAclHome(self, userid):\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         acl_users = portal.acl_users\n         parent = acl_users\n         while parent:\n             if acl_users.aq_explicit.getUserById(userid, None) is not None:\n                 break\n             parent = aq_parent(aq_parent(aq_inner(parent)))\n-            acl_users = getattr(parent, \'acl_users\')\n+            acl_users = getattr(parent, "acl_users")\n         if parent:\n             return acl_users\n         else:\n@@ -586,16 +582,14 @@ def _findUsersAclHome(self, userid):\n \n     @security.protected(SetOwnPassword)\n     def setPassword(self, password, domains=None, REQUEST=None):\n-        \'\'\'Allows the authenticated member to set his/her own password.\n-        \'\'\'\n-        registration = getToolByName(self, \'portal_registration\', None)\n+        """Allows the authenticated member to set his/her own password."""\n+        registration = getToolByName(self, "portal_registration", None)\n         if not self.isAnonymousUser():\n             member = self.getAuthenticatedMember()\n             acl_users = self._findUsersAclHome(member.getUserId())\n             if not acl_users:\n                 # should not possibly ever happen\n-                raise BadRequest(\'did not find current user in any \'\n-                                 \'user folder\')\n+                raise BadRequest("did not find current user in any " "user folder")\n             if registration:\n                 failMessage = registration.testPasswordValidity(password)\n                 if failMessage is not None:\n@@ -606,39 +600,47 @@ def setPassword(self, password, domains=None, REQUEST=None):\n             user = acl_users.getUserById(member.getUserId(), None)\n             # we must change the users password trough grufs changepassword\n             # to keep her  group settings\n-            if hasattr(user, \'changePassword\'):\n+            if hasattr(user, "changePassword"):\n                 user.changePassword(password)\n             else:\n-                acl_users._doChangeUser(member.getUserId(), password,\n-                                        member.getRoles(), domains)\n+                acl_users._doChangeUser(\n+                    member.getUserId(), password, member.getRoles(), domains\n+                )\n             if REQUEST is None:\n-                REQUEST = aq_get(self, \'REQUEST\', None)\n+                REQUEST = aq_get(self, "REQUEST", None)\n             self.credentialsChanged(password, REQUEST=REQUEST)\n         else:\n-            raise BadRequest(\'Not logged in.\')\n+            raise BadRequest("Not logged in.")\n+\n     setPassword = postonly(setPassword)\n \n     @security.protected(View)\n     def getCandidateLocalRoles(self, obj):\n-        """ What local roles can I assign?\n-            Override the CMFCore version so that we can see the local roles on\n-            an object, and so that local managers can assign all roles locally.\n+        """What local roles can I assign?\n+        Override the CMFCore version so that we can see the local roles on\n+        an object, and so that local managers can assign all roles locally.\n         """\n         member = self.getAuthenticatedMember()\n         # Use getRolesInContext as someone may be a local manager\n-        if \'Manager\' in member.getRolesInContext(obj):\n+        if "Manager" in member.getRolesInContext(obj):\n             # Use valid_roles as we may want roles defined only on a subobject\n-            local_roles = [r for r in obj.valid_roles() if r not in\n-                           (\'Anonymous\', \'Authenticated\', \'Shared\')]\n+            local_roles = [\n+                r\n+                for r in obj.valid_roles()\n+                if r not in ("Anonymous", "Authenticated", "Shared")\n+            ]\n         else:\n-            local_roles = [role for role in member.getRolesInContext(obj)\n-                           if role not in (\'Member\', \'Authenticated\')]\n+            local_roles = [\n+                role\n+                for role in member.getRolesInContext(obj)\n+                if role not in ("Member", "Authenticated")\n+            ]\n         local_roles.sort()\n         return tuple(local_roles)\n \n     @security.protected(View)\n     def loginUser(self, REQUEST=None):\n-        """ Handle a login for the current user.\n+        """Handle a login for the current user.\n \n         This method takes care of all the standard work that needs to be\n         done when a user logs in:\n@@ -658,18 +660,18 @@ def loginUser(self, REQUEST=None):\n             event.notify(UserLoggedInEvent(user))\n \n         if REQUEST is None:\n-            REQUEST = getattr(self, \'REQUEST\', None)\n+            REQUEST = getattr(self, "REQUEST", None)\n         if REQUEST is None:\n             return\n \n         # Expire the clipboard\n-        if REQUEST.get(\'__cp\', None) is not None:\n-            REQUEST.RESPONSE.expireCookie(\'__cp\', path=\'/\')\n+        if REQUEST.get("__cp", None) is not None:\n+            REQUEST.RESPONSE.expireCookie("__cp", path="/")\n \n         self.createMemberArea()\n \n         try:\n-            pas = getToolByName(self, \'acl_users\')\n+            pas = getToolByName(self, "acl_users")\n             pas.credentials_cookie_auth.login()\n         except AttributeError:\n             # The cookie plugin may not be present\n@@ -685,7 +687,7 @@ def logoutUser(self, REQUEST=None):\n         - invalidate a Zope session if there is one\n         """\n         # Invalidate existing sessions, but only if they exist.\n-        sdm = getToolByName(self, \'session_data_manager\', None)\n+        sdm = getToolByName(self, "session_data_manager", None)\n         if sdm is not None:\n             try:\n                 # XXX This causes write on read to happen which\n@@ -700,20 +702,20 @@ def logoutUser(self, REQUEST=None):\n                 session.invalidate()\n \n         if REQUEST is None:\n-            REQUEST = getattr(self, \'REQUEST\', None)\n+            REQUEST = getattr(self, "REQUEST", None)\n         if REQUEST is not None:\n-            pas = getToolByName(self, \'acl_users\')\n+            pas = getToolByName(self, "acl_users")\n             try:\n                 pas.logout(REQUEST)\n             except Exception as e:\n-                logger.error(\'Error in PAS logout()\', exc_info=True)\n+                logger.error("Error in PAS logout()", exc_info=True)\n \n             # Expire the skin cookie if it is not configured to persist\n             st = getToolByName(self, "portal_skins")\n             skinvar = st.getRequestVarname()\n             if skinvar in REQUEST and not st.getCookiePersistence():\n-                portal = getToolByName(self, "portal_url") .getPortalObject()\n-                path = \'/\' + portal.absolute_url(1)\n+                portal = getToolByName(self, "portal_url").getPortalObject()\n+                path = "/" + portal.absolute_url(1)\n                 # XXX check if this path is sane\n                 REQUEST.RESPONSE.expireCookie(skinvar, path=path)\n \n@@ -723,36 +725,35 @@ def logoutUser(self, REQUEST=None):\n \n     @security.protected(View)\n     def immediateLogout(self):\n-        """ Log the current user out immediately.  Used by logout.py so that\n-            we do not have to do a redirect to show the logged out status. """\n+        """Log the current user out immediately.  Used by logout.py so that\n+        we do not have to do a redirect to show the logged out status."""\n         noSecurityManager()\n \n     @security.public\n     def setLoginTimes(self):\n-        """ Called by logged_in to set the login time properties\n-            even if members lack the "Set own properties" permission.\n+        """Called by logged_in to set the login time properties\n+        even if members lack the "Set own properties" permission.\n \n-            The return value indicates if this is the first logged\n-            login time.\n+        The return value indicates if this is the first logged\n+        login time.\n         """\n         res = False\n         if not self.isAnonymousUser():\n             member = self.getAuthenticatedMember()\n-            default = DateTime(\'2000/01/01\')\n-            login_time = member.getProperty(\'login_time\', default)\n+            default = DateTime("2000/01/01")\n+            login_time = member.getProperty("login_time", default)\n             if login_time == default:\n                 res = True\n                 login_time = DateTime()\n-            member.setProperties(login_time=self.ZopeTime(),\n-                                 last_login_time=login_time)\n+            member.setProperties(login_time=self.ZopeTime(), last_login_time=login_time)\n         return res\n \n     @security.protected(ManagePortal)\n     def getBadMembers(self):\n         """Will search for members with bad images in the portal_memberdata\n         delete their portraits and return their member ids"""\n-        memberdata = getToolByName(self, \'portal_memberdata\')\n-        portraits = getattr(memberdata, \'portraits\', None)\n+        memberdata = getToolByName(self, "portal_memberdata")\n+        portraits = getattr(memberdata, "portraits", None)\n         if portraits is None:\n             return []\n         bad_member_ids = []\n@@ -761,17 +762,9 @@ def getBadMembers(self):\n         for member_id in tuple(portraits.keys()):\n             portrait = portraits[member_id]\n             portrait_data = portrait.data\n-            if six.PY2:\n-                portrait_data = str(portrait.data)\n             if not portrait_data:\n                 continue\n-            if not HAS_PIL:\n-                raise RuntimeError(\n-                    \'No Python Imaging Libraries (PIL) found. \'\n-                    \'Unable to validate profile image. \'\n-                )\n             try:\n-                import PIL\n                 PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\ndiff --git a/src/Products/PlonePAS/upgrades.py b/src/Products/PlonePAS/upgrades.py\nindex d9353256..db362323 100644\n--- a/src/Products/PlonePAS/upgrades.py\n+++ b/src/Products/PlonePAS/upgrades.py\n@@ -7,6 +7,7 @@\n \n import logging\n \n+\n logger = logging.getLogger(__name__)\n \n \n@@ -15,7 +16,7 @@ def from4to5_fix_zope_root(context):\n     Fix broken Zope root `/acl_users/` plugins.\n     """\n     root = context.getPhysicalRoot()\n-    pas = root.acl_users.manage_addProduct[\'PluggableAuthService\']\n+    pas = root.acl_users.manage_addProduct["PluggableAuthService"]\n     # Identify which interfaces should be considered PAS plugin interfaces\n     plugin_ifaces = [\n         plugin_type_info["interface"]\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 4f287dda..5ac710d5 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n+from io import BytesIO\n from Products.PlonePAS.config import IMAGE_SCALE_PARAMS\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n-from six import BytesIO\n-from six.moves import urllib\n \n-import six\n+import urllib\n \n \n def unique(iterable):\n@@ -24,18 +22,18 @@ def cleanId(id):\n     __traceback_info__ = (id,)\n     if id:\n         # note: we provide the \'safe\' param to get \'/\' encoded\n-        if isinstance(id, six.text_type):\n-            id = id.encode(\'utf-8\')\n-        return urllib.parse.quote(id, \'\').replace(\'-\', \'--\').replace(\'%\', \'-\')\n-    return \'\'\n+        if isinstance(id, str):\n+            id = id.encode("utf-8")\n+        return urllib.parse.quote(id, "").replace("-", "--").replace("%", "-")\n+    return ""\n \n \n def decleanId(id):\n     """Reverse cleanId."""\n     if id:\n-        id = id.replace(\'--\', \'\\x00\').replace(\'-\', \'%\').replace(\'\\x00\', \'-\')\n+        id = id.replace("--", "\\x00").replace("-", "%").replace("\\x00", "-")\n         return urllib.parse.unquote(id)\n-    return \'\'\n+    return ""\n \n \n def scale_image(image_file, max_size=None, default_format=None):\n@@ -44,7 +42,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n \n         >>> from Products.PlonePAS import config\n         >>> import os\n-        >>> from six import BytesIO\n+        >>> from io import BytesIO\n         >>> from Products.PlonePAS.utils import scale_image\n         >>> from PIL import Image\n \n@@ -135,9 +133,9 @@ def scale_image(image_file, max_size=None, default_format=None):\n     from PIL import Image\n \n     if max_size is None:\n-        max_size = IMAGE_SCALE_PARAMS[\'scale\']\n+        max_size = IMAGE_SCALE_PARAMS["scale"]\n     if default_format is None:\n-        default_format = IMAGE_SCALE_PARAMS[\'default_format\']\n+        default_format = IMAGE_SCALE_PARAMS["default_format"]\n     # Make sure we have ints\n     size = (int(max_size[0]), int(max_size[1]))\n     # Load up the image, don\'t try to catch errors, we want to fail miserably\n@@ -145,7 +143,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n     image = Image.open(image_file)\n     # When might image.format not be true?\n     format = image.format\n-    mimetype = \'image/%s\' % format.lower()\n+    mimetype = "image/%s" % format.lower()\n \n     # from Archetypes ImageField\n     # consider image mode when scaling\n@@ -155,19 +153,19 @@ def scale_image(image_file, max_size=None, default_format=None):\n     # for palletted-only image formats, e.g. GIF\n     # PNG compression is OK for RGBA thumbnails\n     original_mode = image.mode\n-    if original_mode == \'1\':\n-        image = image.convert(\'L\')\n-    elif original_mode == \'P\':\n-        image = image.convert(\'RGBA\')\n+    if original_mode == "1":\n+        image = image.convert("L")\n+    elif original_mode == "P":\n+        image = image.convert("RGBA")\n     # Rescale in place with an method that will not alter the aspect ratio\n     # and will only shrink the image not enlarge it.\n-    image.thumbnail(size, resample=IMAGE_SCALE_PARAMS[\'algorithm\'])\n+    image.thumbnail(size, resample=IMAGE_SCALE_PARAMS["algorithm"])\n     # preserve palletted mode for GIF and PNG\n-    if original_mode == \'P\' and format in (\'GIF\', \'PNG\'):\n-        image = image.convert(\'P\')\n+    if original_mode == "P" and format in ("GIF", "PNG"):\n+        image = image.convert("P")\n     # Save\n     new_file = BytesIO()\n-    image.save(new_file, format, quality=IMAGE_SCALE_PARAMS[\'quality\'])\n+    image.save(new_file, format, quality=IMAGE_SCALE_PARAMS["quality"])\n     new_file.seek(0)\n     # Return the file data and the new mimetype\n     return new_file, mimetype\n@@ -180,16 +178,15 @@ def getGroupsForPrincipal(principal, plugins, request=None):\n     return list(groups)\n \n \n-def safe_unicode(value, encoding=\'utf-8\'):\n-    """Converts a value to unicode, even it is already a unicode string.\n-    """\n-    if isinstance(value, six.text_type):\n+def safe_unicode(value, encoding="utf-8"):\n+    """Converts a value to unicode, even it is already a unicode string."""\n+    if isinstance(value, str):\n         return value\n-    elif isinstance(value, six.string_types):\n+    elif isinstance(value, str):\n         try:\n-            value = six.text_type(value, encoding)\n+            value = str(value, encoding)\n         except UnicodeDecodeError:\n-            value = value.decode(\'utf-8\', \'replace\')\n+            value = value.decode("utf-8", "replace")\n     return value\n \n \ndiff --git a/src/Products/__init__.py b/src/Products/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/src/Products/__init__.py\n+++ b/src/Products/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\n'

