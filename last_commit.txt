Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2015-11-27T22:56:12-08:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/e4c7d1225f421e8f9466f2db07c3ade124078881

don't break while generating tokens for names with non-ascii characters

(which could come from user input in the creator field,
see https://github.com/plone/plone.app.widgets/issues/120)

Files changed:
M CHANGES.rst
M plone/app/vocabularies/users.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bca34f4..2df03f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- Make user vocabulary handle non-ASCII characters.
+  This fixes https://github.com/plone/plone.app.widgets/issues/120
+  [davisagli]
 
 
 2.2.0 (2015-10-28)
diff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py
index b7d63d7..7b97932 100644
--- a/plone/app/vocabularies/users.py
+++ b/plone/app/vocabularies/users.py
@@ -13,6 +13,17 @@
 from zope.schema.vocabulary import SimpleTerm
 
 
+def _createUserTerm(userid, context=None, acl_users=None):
+    if acl_users is None:
+        acl_users = getToolByName(context, "acl_users")
+    user = acl_users.getUserById(userid, None)
+    fullname = userid
+    if user:
+        fullname = user.getProperty('fullname', None) or userid
+    token = userid.encode('unicode_escape') if isinstance(userid, unicode) else userid
+    return SimpleTerm(userid, token, fullname)
+
+
 @implementer(ISource)
 @provider(IContextSourceBinder)
 class UsersSource(object):
@@ -80,22 +91,13 @@ def lazy(items):
 
     @classmethod
     def createTerm(cls, userid, context):
-        users = getToolByName(context, "acl_users")
-        user = users.getUserById(userid, None)
-        fullname = userid
-        if user:
-            fullname = user.getProperty('fullname', None) or userid
-        return SimpleTerm(userid, userid, fullname)
+        return _createUserTerm(userid, context=context)
 
     def __contains__(self, value):
         return self._users.getUserById(value, None) and True or False
 
     def getTerm(self, userid):
-        fullname = userid
-        user = self._users.getUserById(userid, None)
-        if user:
-            fullname = user.getProperty('fullname', None) or userid
-        return SimpleTerm(userid, userid, fullname)
+        return _createUserTerm(userid, acl_users=self._users)
     getTermByToken = getTerm
 
     def __iter__(self):
@@ -185,12 +187,8 @@ def __init__(self, context, request):
         self.request = request
 
     def getTerm(self, value):
-        user = self.context.get(value)
-        token = value
-        title = value
-        if user is not None:
-            title = user.getProperty('fullname', None) or user.getId()
-        return SimpleTerm(value, token=token, title=title)
+        user_id = value
+        return _createUserTerm(user_id, context=self.context.context)
 
     def getValue(self, token):
         if token not in self.context:


Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2015-12-02T10:04:28+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.vocabularies/commit/2d213237395cd19767642926979f8a07da19318d

Merge pull request #23 from plone/davisagli-fix-user-nonascii

don't break while generating tokens for names with non-ascii characters

Files changed:
M CHANGES.rst
M plone/app/vocabularies/users.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bca34f4..2df03f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- Make user vocabulary handle non-ASCII characters.
+  This fixes https://github.com/plone/plone.app.widgets/issues/120
+  [davisagli]
 
 
 2.2.0 (2015-10-28)
diff --git a/plone/app/vocabularies/users.py b/plone/app/vocabularies/users.py
index b7d63d7..7b97932 100644
--- a/plone/app/vocabularies/users.py
+++ b/plone/app/vocabularies/users.py
@@ -13,6 +13,17 @@
 from zope.schema.vocabulary import SimpleTerm
 
 
+def _createUserTerm(userid, context=None, acl_users=None):
+    if acl_users is None:
+        acl_users = getToolByName(context, "acl_users")
+    user = acl_users.getUserById(userid, None)
+    fullname = userid
+    if user:
+        fullname = user.getProperty('fullname', None) or userid
+    token = userid.encode('unicode_escape') if isinstance(userid, unicode) else userid
+    return SimpleTerm(userid, token, fullname)
+
+
 @implementer(ISource)
 @provider(IContextSourceBinder)
 class UsersSource(object):
@@ -80,22 +91,13 @@ def lazy(items):
 
     @classmethod
     def createTerm(cls, userid, context):
-        users = getToolByName(context, "acl_users")
-        user = users.getUserById(userid, None)
-        fullname = userid
-        if user:
-            fullname = user.getProperty('fullname', None) or userid
-        return SimpleTerm(userid, userid, fullname)
+        return _createUserTerm(userid, context=context)
 
     def __contains__(self, value):
         return self._users.getUserById(value, None) and True or False
 
     def getTerm(self, userid):
-        fullname = userid
-        user = self._users.getUserById(userid, None)
-        if user:
-            fullname = user.getProperty('fullname', None) or userid
-        return SimpleTerm(userid, userid, fullname)
+        return _createUserTerm(userid, acl_users=self._users)
     getTermByToken = getTerm
 
     def __iter__(self):
@@ -185,12 +187,8 @@ def __init__(self, context, request):
         self.request = request
 
     def getTerm(self, value):
-        user = self.context.get(value)
-        token = value
-        title = value
-        if user is not None:
-            title = user.getProperty('fullname', None) or user.getId()
-        return SimpleTerm(value, token=token, title=title)
+        user_id = value
+        return _createUserTerm(user_id, context=self.context.context)
 
     def getValue(self, token):
         if token not in self.context:


