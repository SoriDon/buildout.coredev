Repository: plone.rest


Branch: refs/heads/master
Date: 2022-02-12T16:35:44+01:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/5a29afdffec18a4427a6f2047254c92ada4e65f8

++api++ traverser should be kept on 30x redirections (#130)

* ++api++ traverser should be kept on 30x redirections

* reinsert ++api++ traverser

* black

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;

Files changed:
A news/127.fix
M src/plone/rest/errors.py
M src/plone/rest/tests/test_redirects.py

b'diff --git a/news/127.fix b/news/127.fix\nnew file mode 100644\nindex 0000000..e212318\n--- /dev/null\n+++ b/news/127.fix\n@@ -0,0 +1 @@\n+++api++ traverser should be kept on 30x redirections [mamico]\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 8227ff4..ecfe8a3 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -149,6 +149,7 @@ def find_redirect_if_view_or_service(self, old_path_elements, storage):\n                     # New URL would match originally requested URL.\n                     # Lets not cause a redirect loop.\n                     return None\n+\n                 return new_path + "/" + "/".join(remainder)\n \n             splitpoint -= 1\n@@ -178,7 +179,8 @@ def attempt_redirect(self):\n         if storage is None:\n             return False\n \n-        old_path = "/".join(old_path_elements)\n+        # remove ++api++ traverser\n+        old_path = "/".join(filter("++api++".__ne__, old_path_elements))\n \n         # First lets try with query string in cases or content migration\n \n@@ -211,6 +213,11 @@ def attempt_redirect(self):\n             url_path = quote(url_path)\n             url = urllib.parse.SplitResult(*(url[:2] + (url_path,) + url[3:])).geturl()\n         else:\n+            # reinsert ++api++ traverser\n+            if "++api++" in old_path_elements:\n+                new_path_elements = new_path.split("/")\n+                new_path_elements.insert(old_path_elements.index("++api++"), "++api++")\n+                new_path = "/".join(new_path_elements)\n             url = self.request.physicalPathToURL(new_path)\n \n         # some analytics programs might use this info to track\ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex 2dcafc1..39b159b 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -39,6 +39,26 @@ def test_get_to_moved_item_causes_301_redirect(self):\n         self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n         self.assertEqual(b"", response.raw.read())\n \n+    def test_get_to_moved_item_causes_301_redirect_with_api_traverser(self):\n+        response = requests.get(\n+            self.portal_url + "/++api++/folder-old",\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(\n+            self.portal_url + "/++api++/folder-new", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n+        # follow the new location\n+        response = requests.get(\n+            response.headers["Location"],\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual("application/json", response.headers["Content-type"])\n+        self.assertEqual({"id": "folder-new", "method": "GET"}, response.json())\n+\n     def test_post_to_moved_item_causes_308_redirect(self):\n         response = requests.post(\n             self.portal_url + "/folder-old",\n@@ -50,6 +70,18 @@ def test_post_to_moved_item_causes_308_redirect(self):\n         self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n         self.assertEqual(b"", response.raw.read())\n \n+    def test_post_to_moved_item_causes_308_redirect_with_api_traverser(self):\n+        response = requests.post(\n+            self.portal_url + "/++api++/folder-old",\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(308, response.status_code)\n+        self.assertEqual(\n+            self.portal_url + "/++api++/folder-new", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n+\n     def test_unauthorized_request_to_item_still_redirects_first(self):\n         response = requests.get(\n             self.portal_url + "/folder-old",\n'

