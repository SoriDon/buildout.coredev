Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2017-04-04T14:31:28+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/a02c009c86c320bc85fa7a6292fd792d1143321d

check any reference in delete confirmation dialog
Support for any ``zc.relation`` refercences being checked by ``delete_confirmation_info`` dialog, not only references linked in text.

Files changed:
M CHANGES.rst
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/tests/test_references.py
M plone/app/linkintegrity/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1c8c4fe..fe06784 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Support for any ``zc.relation`` refercences being checked by ``delete_confirmation_info`` dialog,
+  not only references linked in text.
+  [thet]
 
 Bug fixes:
 
diff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py
index 8916041..f678957 100644
--- a/plone/app/linkintegrity/browser/info.py
+++ b/plone/app/linkintegrity/browser/info.py
@@ -146,7 +146,7 @@ def check_object(self, obj, excluded_path=None):
         Breaches originating from excluded_path are ignored.
         """
         breaches = {}
-        direct_links = getIncomingLinks(obj)
+        direct_links = getIncomingLinks(obj, from_attribute=None)
         has_breaches = False
         for direct_link in direct_links:
             source_path = direct_link.from_path
diff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py
index 7299d70..3967dfc 100644
--- a/plone/app/linkintegrity/tests/test_references.py
+++ b/plone/app/linkintegrity/tests/test_references.py
@@ -3,13 +3,18 @@
 from plone.app.linkintegrity.parser import extractLinks
 from plone.app.linkintegrity.tests.base import ATBaseTestCase
 from plone.app.linkintegrity.tests.base import DXBaseTestCase
-from plone.app.linkintegrity.utils import hasIncomingLinks
-from plone.app.linkintegrity.utils import hasOutgoingLinks
 from plone.app.linkintegrity.utils import getIncomingLinks
 from plone.app.linkintegrity.utils import getOutgoingLinks
+from plone.app.linkintegrity.utils import hasIncomingLinks
+from plone.app.linkintegrity.utils import hasOutgoingLinks
 from plone.app.testing import login
 from plone.app.testing import logout
 from plone.app.testing import TEST_USER_NAME
+from z3c.relationfield import RelationValue
+from z3c.relationfield.event import _setRelation
+from zc.relation.interfaces import ICatalog
+from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
 from zope.lifecycleevent import modified
 
 
@@ -164,6 +169,30 @@ def test_reference_orthogonality(self):
         # And again the related item reference remains in place:
         self.assertEqual(self._get_related_items(doc), [img, ])
 
+    def test_delete_confirmation_for_any_reference(self):
+        """Test, if delete confirmation shows also a warning if items are
+        deleted, which are referenced by other items via a reference field.
+        """
+        img1 = self.portal['image1']
+        doc1 = self.portal['doc1']
+
+        intids_tool = getUtility(IIntIds)
+        to_id = intids_tool.getId(img1)
+        rel = RelationValue(to_id)
+        _setRelation(doc1, 'related_image', rel)
+
+        # Test, if relation is present in the relation catalog
+        catalog = getUtility(ICatalog)
+        rels = list(catalog.findRelations({'to_id':  to_id}))
+        self.assertEqual(len(rels), 1)
+
+        # Test, if delete_confirmation_info shows also other relations than
+        # ``isReferencing``.
+        info = img1.restrictedTraverse('@@delete_confirmation_info')
+        breaches = info.get_breaches()
+        self.assertEqual(len(breaches), 1)
+        self.assertEqual(len(info.get_breaches()[0]['sources']), 1)
+
 
 class ReferenceGenerationDXTestCase(DXBaseTestCase, ReferenceGenerationTestCase):
     """Reference generation testcase for dx content types"""
diff --git a/plone/app/linkintegrity/utils.py b/plone/app/linkintegrity/utils.py
index 3456918..0721d29 100644
--- a/plone/app/linkintegrity/utils.py
+++ b/plone/app/linkintegrity/utils.py
@@ -7,15 +7,20 @@
 from zope.intid.interfaces import IIntIds
 
 
-def getIncomingLinks(obj=None, intid=None):
+def getIncomingLinks(
+    obj=None,
+    intid=None,
+    from_attribute=referencedRelationship
+):
     """Return a generator of incoming relations created using
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
     intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
-    return catalog.findRelations({
-        'to_id': intid,
-        'from_attribute': referencedRelationship})
+    query = {'to_id': intid}
+    if from_attribute:
+        query['from_attribute'] = from_attribute
+    return catalog.findRelations(query)
 
 
 def hasIncomingLinks(obj=None, intid=None):
@@ -29,15 +34,20 @@ def hasIncomingLinks(obj=None, intid=None):
     return False
 
 
-def getOutgoingLinks(obj=None, intid=None):
+def getOutgoingLinks(
+    obj=None,
+    intid=None,
+    from_attribute=referencedRelationship
+):
     """Return a generator of outgoing relations created using
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
     intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
-    return catalog.findRelations({
-        'from_id': intid,
-        'from_attribute': referencedRelationship})
+    query = {'from_id': intid}
+    if from_attribute:
+        query['from_attribute'] = from_attribute
+    return catalog.findRelations(query)
 
 
 def hasOutgoingLinks(obj=None, intid=None):


Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2017-04-04T23:25:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/36f777c70af108d730818522b776c084d6b3a797

Merge pull request #52 from plone/thet-anyreference

check any reference in delete confirmation dialog

Files changed:
M CHANGES.rst
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/tests/test_references.py
M plone/app/linkintegrity/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1c8c4fe..fe06784 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Support for any ``zc.relation`` refercences being checked by ``delete_confirmation_info`` dialog,
+  not only references linked in text.
+  [thet]
 
 Bug fixes:
 
diff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py
index 8916041..f678957 100644
--- a/plone/app/linkintegrity/browser/info.py
+++ b/plone/app/linkintegrity/browser/info.py
@@ -146,7 +146,7 @@ def check_object(self, obj, excluded_path=None):
         Breaches originating from excluded_path are ignored.
         """
         breaches = {}
-        direct_links = getIncomingLinks(obj)
+        direct_links = getIncomingLinks(obj, from_attribute=None)
         has_breaches = False
         for direct_link in direct_links:
             source_path = direct_link.from_path
diff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py
index 7299d70..3967dfc 100644
--- a/plone/app/linkintegrity/tests/test_references.py
+++ b/plone/app/linkintegrity/tests/test_references.py
@@ -3,13 +3,18 @@
 from plone.app.linkintegrity.parser import extractLinks
 from plone.app.linkintegrity.tests.base import ATBaseTestCase
 from plone.app.linkintegrity.tests.base import DXBaseTestCase
-from plone.app.linkintegrity.utils import hasIncomingLinks
-from plone.app.linkintegrity.utils import hasOutgoingLinks
 from plone.app.linkintegrity.utils import getIncomingLinks
 from plone.app.linkintegrity.utils import getOutgoingLinks
+from plone.app.linkintegrity.utils import hasIncomingLinks
+from plone.app.linkintegrity.utils import hasOutgoingLinks
 from plone.app.testing import login
 from plone.app.testing import logout
 from plone.app.testing import TEST_USER_NAME
+from z3c.relationfield import RelationValue
+from z3c.relationfield.event import _setRelation
+from zc.relation.interfaces import ICatalog
+from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
 from zope.lifecycleevent import modified
 
 
@@ -164,6 +169,30 @@ def test_reference_orthogonality(self):
         # And again the related item reference remains in place:
         self.assertEqual(self._get_related_items(doc), [img, ])
 
+    def test_delete_confirmation_for_any_reference(self):
+        """Test, if delete confirmation shows also a warning if items are
+        deleted, which are referenced by other items via a reference field.
+        """
+        img1 = self.portal['image1']
+        doc1 = self.portal['doc1']
+
+        intids_tool = getUtility(IIntIds)
+        to_id = intids_tool.getId(img1)
+        rel = RelationValue(to_id)
+        _setRelation(doc1, 'related_image', rel)
+
+        # Test, if relation is present in the relation catalog
+        catalog = getUtility(ICatalog)
+        rels = list(catalog.findRelations({'to_id':  to_id}))
+        self.assertEqual(len(rels), 1)
+
+        # Test, if delete_confirmation_info shows also other relations than
+        # ``isReferencing``.
+        info = img1.restrictedTraverse('@@delete_confirmation_info')
+        breaches = info.get_breaches()
+        self.assertEqual(len(breaches), 1)
+        self.assertEqual(len(info.get_breaches()[0]['sources']), 1)
+
 
 class ReferenceGenerationDXTestCase(DXBaseTestCase, ReferenceGenerationTestCase):
     """Reference generation testcase for dx content types"""
diff --git a/plone/app/linkintegrity/utils.py b/plone/app/linkintegrity/utils.py
index 3456918..0721d29 100644
--- a/plone/app/linkintegrity/utils.py
+++ b/plone/app/linkintegrity/utils.py
@@ -7,15 +7,20 @@
 from zope.intid.interfaces import IIntIds
 
 
-def getIncomingLinks(obj=None, intid=None):
+def getIncomingLinks(
+    obj=None,
+    intid=None,
+    from_attribute=referencedRelationship
+):
     """Return a generator of incoming relations created using
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
     intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
-    return catalog.findRelations({
-        'to_id': intid,
-        'from_attribute': referencedRelationship})
+    query = {'to_id': intid}
+    if from_attribute:
+        query['from_attribute'] = from_attribute
+    return catalog.findRelations(query)
 
 
 def hasIncomingLinks(obj=None, intid=None):
@@ -29,15 +34,20 @@ def hasIncomingLinks(obj=None, intid=None):
     return False
 
 
-def getOutgoingLinks(obj=None, intid=None):
+def getOutgoingLinks(
+    obj=None,
+    intid=None,
+    from_attribute=referencedRelationship
+):
     """Return a generator of outgoing relations created using
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
     intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
-    return catalog.findRelations({
-        'from_id': intid,
-        'from_attribute': referencedRelationship})
+    query = {'from_id': intid}
+    if from_attribute:
+        query['from_attribute'] = from_attribute
+    return catalog.findRelations(query)
 
 
 def hasOutgoingLinks(obj=None, intid=None):


