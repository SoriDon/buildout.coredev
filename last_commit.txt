Repository: plone.app.registry


Branch: refs/heads/master
Date: 2022-05-04T21:46:30+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/83d7ae5db5ed65834798a88428a6496d0c82be8d

isort

Files changed:
M plone/app/registry/browser/controlpanel.py
M plone/app/registry/browser/edit.py
M plone/app/registry/browser/exportxml.py
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py
M setup.cfg
M setup.py

b"diff --git a/plone/app/registry/browser/controlpanel.py b/plone/app/registry/browser/controlpanel.py\nindex 8042f86..3e11b80 100644\n--- a/plone/app/registry/browser/controlpanel.py\n+++ b/plone/app/registry/browser/controlpanel.py\n@@ -1,18 +1,15 @@\n-from zope.component import getUtility\n-\n+from plone.autoform.form import AutoExtensibleForm\n from plone.registry.interfaces import IRegistry\n-\n-from z3c.form import form, button\n-\n from plone.z3cform import layout\n-from plone.autoform.form import AutoExtensibleForm\n-\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-\n+from z3c.form import button\n+from z3c.form import form\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.i18nmessageid import MessageFactory\n \n+\n _ = MessageFactory('plone')\n \n \ndiff --git a/plone/app/registry/browser/edit.py b/plone/app/registry/browser/edit.py\nindex 41a81c1..3250896 100644\n--- a/plone/app/registry/browser/edit.py\n+++ b/plone/app/registry/browser/edit.py\n@@ -2,11 +2,14 @@\n from Acquisition import ImplicitAcquisitionWrapper\n from plone.z3cform import layout\n from Products.statusmessages.interfaces import IStatusMessage\n-from z3c.form import form, field, button\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n+\n _ = MessageFactory('plone')\n \n \ndiff --git a/plone/app/registry/browser/exportxml.py b/plone/app/registry/browser/exportxml.py\nindex 60e9cdd..72fb011 100644\n--- a/plone/app/registry/browser/exportxml.py\n+++ b/plone/app/registry/browser/exportxml.py\n@@ -8,6 +8,7 @@\n import os\n import six\n \n+\n _current_dir = os.path.dirname(__file__)\n \n \ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex b09a40b..f3e1bd9 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from __future__ import print_function\n+\n from lxml import etree\n from OFS.ObjectManager import ObjectManager\n from plone.app.registry import Registry\n@@ -14,10 +15,10 @@\n from plone.registry.interfaces import IRegistry\n from plone.supermodel.utils import prettyXML\n from plone.testing import zca\n+from Products.GenericSetup.tests.common import DummyExportContext\n from Products.GenericSetup.tests.common import (\n     DummyImportContext as BaseDummyImportContext,\n )\n-from Products.GenericSetup.tests.common import DummyExportContext\n from zope.component import provideUtility\n from zope.configuration import xmlconfig\n from zope.interface import alsoProvides\ndiff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py\nindex 6dc0a53..5706662 100644\n--- a/plone/app/registry/tests/test_setup.py\n+++ b/plone/app/registry/tests/test_setup.py\n@@ -3,6 +3,7 @@\n from plone.app.registry.testing import PLONE_APP_REGISTRY_INTEGRATION_TESTING\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n+\n import unittest\n \n \ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..b616d8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 475b449..20d2ba3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,6 +2,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = '2.0.0a9.dev0'\n \n setup(\n"

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2022-05-04T21:46:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/8416e506616453ad36212a7f2b9cc90a69a98ae3

black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/registry/__init__.py
M plone/app/registry/browser/controlpanel.py
M plone/app/registry/browser/delete.py
M plone/app/registry/browser/edit.py
M plone/app/registry/browser/exportxml.py
M plone/app/registry/browser/records.py
M plone/app/registry/exportimport/handler.py
M plone/app/registry/registry.py
M plone/app/registry/testing.py
M plone/app/registry/tests/test_controlpanel.py
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/registry/__init__.py b/plone/app/registry/__init__.py\nindex 8b32ba6..a057128 100644\n--- a/plone/app/registry/__init__.py\n+++ b/plone/app/registry/__init__.py\n@@ -1 +1 @@\n-from plone.app.registry.registry import Registry\n\\ No newline at end of file\n+from plone.app.registry.registry import Registry\ndiff --git a/plone/app/registry/browser/controlpanel.py b/plone/app/registry/browser/controlpanel.py\nindex 3e11b80..74a7617 100644\n--- a/plone/app/registry/browser/controlpanel.py\n+++ b/plone/app/registry/browser/controlpanel.py\n@@ -10,7 +10,7 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class RegistryEditForm(AutoExtensibleForm, form.EditForm):\n@@ -43,42 +43,38 @@ class MyForm(RegistryEditForm):\n \n     def getContent(self):\n         return getUtility(IRegistry).forInterface(\n-            self.schema,\n-            prefix=self.schema_prefix)\n+            self.schema, prefix=self.schema_prefix\n+        )\n \n     def updateActions(self):\n         super(RegistryEditForm, self).updateActions()\n-        self.actions[\'save\'].addClass("btn btn-primary")\n-        self.actions[\'cancel\'].addClass("btn btn-secondary")\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n-    @button.buttonAndHandler(_(u"Save"), name=\'save\')\n+    @button.buttonAndHandler(_(u"Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes saved."),\n-            "info")\n+        IStatusMessage(self.request).addStatusMessage(_(u"Changes saved."), "info")\n         self.request.response.redirect(self.request.getURL())\n \n-    @button.buttonAndHandler(_(u"Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes canceled."),\n-            "info")\n-        self.request.response.redirect(u"{0}/{1}".format(\n-            getSite().absolute_url(),\n-            self.control_panel_view\n-        ))\n+        IStatusMessage(self.request).addStatusMessage(_(u"Changes canceled."), "info")\n+        self.request.response.redirect(\n+            u"{0}/{1}".format(getSite().absolute_url(), self.control_panel_view)\n+        )\n \n \n class ControlPanelFormWrapper(layout.FormWrapper):\n     """Use this form as the plone.z3cform layout wrapper to get the control\n     panel layout.\n     """\n-    index = ViewPageTemplateFile(\'templates/controlpanel_layout.pt\')\n+\n+    index = ViewPageTemplateFile("templates/controlpanel_layout.pt")\n \n     @property\n     def control_panel_url(self):\ndiff --git a/plone/app/registry/browser/delete.py b/plone/app/registry/browser/delete.py\nindex e9cd4f3..507aca5 100644\n--- a/plone/app/registry/browser/delete.py\n+++ b/plone/app/registry/browser/delete.py\n@@ -3,18 +3,17 @@\n \n \n class RecordDeleteView(BrowserView):\n-\n     def __call__(self):\n-        if self.request.REQUEST_METHOD == \'POST\':\n-            name = self.request.form.get(\'name\')\n+        if self.request.REQUEST_METHOD == "POST":\n+            name = self.request.form.get("name")\n             if isinstance(name, list) and len(name) > 0:\n                 name = name[0]\n-            if self.request.form.get(\'form.buttons.delete\'):\n+            if self.request.form.get("form.buttons.delete"):\n                 if name in self.context:\n                     del self.context.records[name]\n                     messages = IStatusMessage(self.request)\n                     messages.add(u"Successfully deleted field %s" % name, type=u"info")\n-            elif self.request.form.get(\'form.buttons.cancel\') and name:\n+            elif self.request.form.get("form.buttons.cancel") and name:\n                 messages = IStatusMessage(self.request)\n                 messages.add(u"Successfully deleted field %s" % name, type=u"info")\n             return self.request.response.redirect(self.context.absolute_url())\ndiff --git a/plone/app/registry/browser/edit.py b/plone/app/registry/browser/edit.py\nindex 3250896..3a56f18 100644\n--- a/plone/app/registry/browser/edit.py\n+++ b/plone/app/registry/browser/edit.py\n@@ -10,12 +10,11 @@\n from zope.publisher.interfaces import IPublishTraverse\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class RecordEditForm(form.EditForm):\n-    """Edit a single record\n-    """\n+    """Edit a single record"""\n \n     record = None\n \n@@ -24,46 +23,36 @@ def action(self):\n         return f"{self.context.absolute_url()}/edit/{self.record.__name__}"\n \n     def getContent(self):\n-        return ImplicitAcquisitionWrapper(\n-            {\'value\': self.record.value},\n-            self.context\n-        )\n+        return ImplicitAcquisitionWrapper({"value": self.record.value}, self.context)\n \n     def update(self):\n-        self.fields = field.Fields(self.record.field, )\n+        self.fields = field.Fields(\n+            self.record.field,\n+        )\n         super(RecordEditForm, self).update()\n \n     def updateActions(self):\n         super(RecordEditForm, self).updateActions()\n-        self.actions[\'save\'].addClass("btn btn-primary")\n-        self.actions[\'cancel\'].addClass("btn btn-secondary")\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n     @property\n     def label(self):\n-        return _(\n-            u"Edit record: ${name}",\n-            mapping={\'name\': self.record.__name__}\n-        )\n+        return _("Edit record: ${name}", mapping={"name": self.record.__name__})\n \n-    @button.buttonAndHandler(_(u"Save"), name=\'save\')\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n-        self.record.value = data[\'value\']\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes saved."),\n-            "info"\n-        )\n+        self.record.value = data["value"]\n+        IStatusMessage(self.request).addStatusMessage(_("Changes saved."), "info")\n         self.request.response.redirect(self.context.absolute_url())\n \n-    @button.buttonAndHandler(_(u"Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Edit cancelled."),\n-            "info"\n-        )\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled."), "info")\n         self.request.response.redirect(self.context.absolute_url())\n \n \n@@ -73,13 +62,13 @@ class RecordEditView(layout.FormWrapper):\n \n     def __init__(self, context, request):\n         super(RecordEditView, self).__init__(context, request)\n-        self.request[\'disable_border\'] = True\n+        self.request["disable_border"] = True\n \n     def publishTraverse(self, request, name):\n-        path = self.request[\'TraversalRequestNameStack\'] + [name]\n+        path = self.request["TraversalRequestNameStack"] + [name]\n         path.reverse()\n-        key = \'/\'.join(path)\n-        del self.request[\'TraversalRequestNameStack\'][:]\n+        key = "/".join(path)\n+        del self.request["TraversalRequestNameStack"][:]\n         record = self.context.records[key]\n         self.record = record\n         self.form_instance.record = record\ndiff --git a/plone/app/registry/browser/exportxml.py b/plone/app/registry/browser/exportxml.py\nindex 72fb011..143bb85 100644\n--- a/plone/app/registry/browser/exportxml.py\n+++ b/plone/app/registry/browser/exportxml.py\n@@ -24,12 +24,12 @@ class RegistryExporterView(BrowserView):\n     """\n \n     template = ViewPageTemplateFile(\n-        os.path.join(_current_dir, \'templates\', \'exportxml.pt\')\n+        os.path.join(_current_dir, "templates", "exportxml.pt")\n     )\n \n     def __call__(self):\n-        interface = self.request.form.get(\'interface\', None)\n-        name = self.request.form.get(\'name\', None)\n+        interface = self.request.form.get("interface", None)\n+        name = self.request.form.get("name", None)\n         if not interface and not name:\n             return self.template()\n         return self.export(sinterface=interface, sname=name)\n@@ -37,14 +37,14 @@ def __call__(self):\n     def interfaces(self):\n         prefixes = []\n         registry = getUtility(IRegistry)\n-        baseurl = \'{0}/@@configuration_registry_export_xml?interface=\'.format(\n+        baseurl = "{0}/@@configuration_registry_export_xml?interface=".format(\n             self.context.absolute_url()\n         )\n         for record in registry.records.values():\n             if record.interfaceName is None:\n                 continue\n             name = record.interfaceName\n-            url = \'{0}{1}\'.format(baseurl, record.interfaceName)\n+            url = "{0}{1}".format(baseurl, record.interfaceName)\n             pair = (name, url)\n             if pair not in prefixes:\n                 prefixes.append(pair)\n@@ -54,7 +54,7 @@ def interfaces(self):\n     def prefixes(self):\n         prefixes = []\n         registry = getUtility(IRegistry)\n-        baseurl = \'{0}/@@configuration_registry_export_xml?\'.format(\n+        baseurl = "{0}/@@configuration_registry_export_xml?".format(\n             self.context.absolute_url()\n         )\n         for record in registry.records.values():\n@@ -62,14 +62,14 @@ def prefixes(self):\n                 continue\n \n             def add_split(part):\n-                url = \'{0}name={1}\'.format(baseurl, part)\n+                url = "{0}name={1}".format(baseurl, part)\n                 pair = (part, url)\n                 if pair not in prefixes:\n                     prefixes.append(pair)\n-                if part.rfind(\'/\') > part.rfind(\'.\'):\n-                    new_parts = part.rsplit(\'/\', 1)\n+                if part.rfind("/") > part.rfind("."):\n+                    new_parts = part.rsplit("/", 1)\n                 else:\n-                    new_parts = part.rsplit(\'.\', 1)\n+                    new_parts = part.rsplit(".", 1)\n                 if len(new_parts) > 1:\n                     add_split(new_parts[0])\n \n@@ -78,7 +78,7 @@ def add_split(part):\n \n     def export(self, sinterface=None, sname=None):\n         registry = getUtility(IRegistry)\n-        root = etree.Element(\'registry\')\n+        root = etree.Element("registry")\n         values = {}  # full prefix to valuerecord\n         interface2values = {}\n         interface2prefix = {}\n@@ -87,23 +87,23 @@ def export(self, sinterface=None, sname=None):\n                 continue\n             if sname and not record.__name__.startswith(sname):\n                 continue\n-            prefix, value_key = record.__name__.rsplit(\'.\', 1)\n-            xmlvalue = etree.Element(\'value\')\n+            prefix, value_key = record.__name__.rsplit(".", 1)\n+            xmlvalue = etree.Element("value")\n             if record.value is None:\n                 continue\n             if isinstance(record.value, (list, tuple)):\n                 for element in record.value:\n-                    xmlel = etree.SubElement(xmlvalue, \'element\')\n+                    xmlel = etree.SubElement(xmlvalue, "element")\n                     xmlel.text = element\n             elif isinstance(record.value, bool):\n-                xmlvalue.text = \'True\' if record.value else \'False\'\n+                xmlvalue.text = "True" if record.value else "False"\n             elif isinstance(record.value, six.string_types):\n                 xmlvalue.text = record.value\n             else:\n                 xmlvalue.text = str(record.value)\n \n             if record.interfaceName:\n-                xmlvalue.attrib[\'key\'] = value_key\n+                xmlvalue.attrib["key"] = value_key\n                 if record.interfaceName not in interface2values:\n                     interface2values[record.interfaceName] = []\n                 interface2values[record.interfaceName].append(record.__name__)\n@@ -111,30 +111,27 @@ def export(self, sinterface=None, sname=None):\n             values[record.__name__] = xmlvalue\n \n         for ifname in sorted(interface2values):\n-            xmlrecord = etree.SubElement(root, \'records\')\n-            xmlrecord.attrib[\'interface\'] = ifname\n-            xmlrecord.attrib[\'prefix\'] = interface2prefix[ifname]\n+            xmlrecord = etree.SubElement(root, "records")\n+            xmlrecord.attrib["interface"] = ifname\n+            xmlrecord.attrib["prefix"] = interface2prefix[ifname]\n             for value in sorted(interface2values[ifname]):\n                 xmlrecord.append(values.pop(value))\n         for name, xmlvalue in values.items():\n-            xmlrecord = etree.SubElement(root, \'records\')\n-            xmlrecord.attrib[\'prefix\'] = name\n+            xmlrecord = etree.SubElement(root, "records")\n+            xmlrecord.attrib["prefix"] = name\n             xmlrecord.append(xmlvalue)\n \n-        self.request.response.setHeader(\'Content-Type\', \'text/xml\')\n-        filename = \'\'\n+        self.request.response.setHeader("Content-Type", "text/xml")\n+        filename = ""\n         if sinterface:\n             filename += sinterface\n         if sinterface and sname:\n-            filename += \'_-_\'\n+            filename += "_-_"\n         if sname:\n             filename += sname\n         self.request.response.setHeader(\n-            \'Content-Disposition\',\n-            \'attachment; filename={0}.xml\'.format(filename))\n+            "Content-Disposition", "attachment; filename={0}.xml".format(filename)\n+        )\n         return etree.tostring(\n-            root,\n-            pretty_print=True,\n-            xml_declaration=True,\n-            encoding=\'UTF-8\'\n+            root, pretty_print=True, xml_declaration=True, encoding="UTF-8"\n         )\ndiff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py\nindex 88372bb..8dbaa9b 100644\n--- a/plone/app/registry/browser/records.py\n+++ b/plone/app/registry/browser/records.py\n@@ -25,7 +25,7 @@\n import string\n \n \n-logger = logging.getLogger(\'plone.app.registry\')\n+logger = logging.getLogger("plone.app.registry")\n \n \n def _true(s, v):\n@@ -40,14 +40,10 @@ def _starts_with(s, v):\n     return v.startswith(s)\n \n \n-_okay_prefixes = [\n-    \'Products\',\n-    \'plone.app\',\n-    \'plone\']\n+_okay_prefixes = ["Products", "plone.app", "plone"]\n \n \n class FakeEnv(object):\n-\n     def getLogger(self, name):\n         return logger\n \n@@ -55,7 +51,7 @@ def shouldPurge(self):\n         return False\n \n \n-_valid_field_name_chars = string.ascii_letters + \'._\'\n+_valid_field_name_chars = string.ascii_letters + "._"\n \n \n def checkFieldName(val):\n@@ -65,36 +61,51 @@ def checkFieldName(val):\n         r"([/][a-zA-Z0-9][a-zA-Z0-9_-]*)?((?:\\.[a-zA-Z0-9][a-zA-Z0-9_-]*)*)$"\n     ).match\n     if not validkey(val):\n-        raise Invalid(\'Not a valid field name\')\n+        raise Invalid("Not a valid field name")\n     return True\n \n \n class IAddFieldForm(Interface):\n     name = schema.TextLine(\n-        title=_(u\'label_field_name\', default=u\'Field Name\'),\n+        title=_(u"label_field_name", default=u"Field Name"),\n         description=u\'Must be in a format like "plone.my_name". Only letters, periods, underscores and up to one /.\',\n         required=True,\n-        constraint=checkFieldName)\n+        constraint=checkFieldName,\n+    )\n \n     title = schema.TextLine(\n-        title=_(u\'label_field_title\', default=u\'Field Title\'),\n-        required=True)\n+        title=_(u"label_field_title", default=u"Field Title"), required=True\n+    )\n \n     field_type = schema.Choice(\n-        title=u\'Field Type\',\n-        vocabulary=SimpleVocabulary.fromValues([\n-            \'Bytes\', \'BytesLine\', \'ASCII\', \'ASCIILine\', \'Text\', \'TextLine\', \'Bool\', \'Int\',\n-            \'Float\', \'Decimal\', \'Password\',\n-            \'Datetime\', \'Date\', \'Timedelta\', \'SourceText\', \'URI\', \'Id\', \'DottedName\',\n-            # XXX not supporting these types yet as it requires additional config\n-            # \'Tuple\', \'List\', \'Set\', \'FrozenSet\', \'Dict\',\n-        ])\n+        title=u"Field Type",\n+        vocabulary=SimpleVocabulary.fromValues(\n+            [\n+                "Bytes",\n+                "BytesLine",\n+                "ASCII",\n+                "ASCIILine",\n+                "Text",\n+                "TextLine",\n+                "Bool",\n+                "Int",\n+                "Float",\n+                "Decimal",\n+                "Password",\n+                "Datetime",\n+                "Date",\n+                "Timedelta",\n+                "SourceText",\n+                "URI",\n+                "Id",\n+                "DottedName",\n+                # XXX not supporting these types yet as it requires additional config\n+                # \'Tuple\', \'List\', \'Set\', \'FrozenSet\', \'Dict\',\n+            ]\n+        ),\n     )\n \n-    required = schema.Bool(\n-        title=u\'Required\',\n-        default=False\n-    )\n+    required = schema.Bool(title=u"Required", default=False)\n \n \n class RecordsControlPanel(AutoExtensibleForm, form.Form):\n@@ -102,47 +113,57 @@ class RecordsControlPanel(AutoExtensibleForm, form.Form):\n     ignoreContext = True\n     submitted = False\n \n-    template = ViewPageTemplateFile(\'templates/records.pt\')\n+    template = ViewPageTemplateFile("templates/records.pt")\n \n     @property\n     def action(self):\n-        return \'{url}#autotoc-item-autotoc-3\'.format(url=self.context.absolute_url())\n+        return "{url}#autotoc-item-autotoc-3".format(url=self.context.absolute_url())\n \n     def updateActions(self):\n         super(RecordsControlPanel, self).updateActions()\n-        self.actions[\'addfield\'].addClass(\'btn-primary\')\n+        self.actions["addfield"].addClass("btn-primary")\n \n-    @button.buttonAndHandler(u\'Add field\', name=\'addfield\')\n+    @button.buttonAndHandler(u"Add field", name="addfield")\n     def action_addfield(self, action):\n         data, errors = self.extractData()\n         self.submitted = True\n         if not errors:\n-            field_class = getattr(registry_field, data[\'field_type\'], None)\n+            field_class = getattr(registry_field, data["field_type"], None)\n             if field_class is None:\n                 notify(\n                     ActionErrorOccurred(\n                         action,\n-                        WidgetActionExecutionError(\'field_type\', Invalid(\'Invalid Field\'))))\n+                        WidgetActionExecutionError(\n+                            "field_type", Invalid("Invalid Field")\n+                        ),\n+                    )\n+                )\n                 return\n-            if data[\'name\'] in self.context:\n+            if data["name"] in self.context:\n                 notify(\n                     ActionErrorOccurred(\n                         action,\n-                        WidgetActionExecutionError(\'name\', Invalid(\'Field name already in use\'))))\n+                        WidgetActionExecutionError(\n+                            "name", Invalid("Field name already in use")\n+                        ),\n+                    )\n+                )\n                 return\n \n-            new_field = field_class(title=data[\'title\'], required=data[\'required\'])\n+            new_field = field_class(title=data["title"], required=data["required"])\n             new_record = Record(new_field)\n-            self.context.records[data[\'name\']] = new_record\n+            self.context.records[data["name"]] = new_record\n             messages = IStatusMessage(self.request)\n-            messages.add(u"Successfully added field %s" % data[\'name\'], type=u"info")\n-            return self.request.response.redirect(\'{url}/edit/{field}\'.format(\n-                url=self.context.absolute_url(),\n-                field=data[\'name\']))\n+            messages.add(u"Successfully added field %s" % data["name"], type=u"info")\n+            return self.request.response.redirect(\n+                "{url}/edit/{field}".format(\n+                    url=self.context.absolute_url(), field=data["name"]\n+                )\n+            )\n \n     def import_registry(self):\n         try:\n-            fi = self.request.form[\'file\']\n+            fi = self.request.form["file"]\n             body = fi.read()\n         except (AttributeError, KeyError):\n             messages = IStatusMessage(self.request)\n@@ -161,8 +182,8 @@ def export_registry(self):\n         exporter = RegistryExporter(self.context, FakeEnv())\n         body = exporter.exportDocument()\n         resp = self.request.response\n-        resp.setHeader(\'Content-type\', \'text/xml\')\n-        resp.setHeader(\'Content-Disposition\', \'attachment; filename=registry.xml\')\n+        resp.setHeader("Content-type", "text/xml")\n+        resp.setHeader("Content-Disposition", "attachment; filename=registry.xml")\n         resp.setHeader("Content-Length", len(body))\n         return body\n \n@@ -172,18 +193,18 @@ def control_panel_url(self):\n \n     def __call__(self):\n         form = self.request.form\n-        if self.request.REQUEST_METHOD == \'POST\':\n-            if form.get(\'button.exportregistry\'):\n+        if self.request.REQUEST_METHOD == "POST":\n+            if form.get("button.exportregistry"):\n                 return self.export_registry()\n-            if form.get(\'button.importregistry\'):\n+            if form.get("button.importregistry"):\n                 return self.import_registry()\n-        search = form.get(\'q\')\n-        searchp = form.get(\'qp\')\n+        search = form.get("q")\n+        searchp = form.get("qp")\n         compare = _is_in\n-        if searchp not in (None, \'\'):\n+        if searchp not in (None, ""):\n             search = searchp\n-        if search is not None and search.startswith(\'prefix:\'):\n-            search = search[len(\'prefix:\'):]\n+        if search is not None and search.startswith("prefix:"):\n+            search = search[len("prefix:") :]\n             compare = _starts_with\n         if not search:\n             compare = _true\n@@ -193,25 +214,21 @@ def __call__(self):\n         for record in self.context.records.values():\n             ifaceName = record.interfaceName\n             if ifaceName is not None:\n-                recordPrefix = ifaceName.split(\'.\')[-1]\n+                recordPrefix = ifaceName.split(".")[-1]\n                 prefixValue = record.interfaceName\n             else:\n                 prefixValue = record.__name__\n                 for prefix in _okay_prefixes:\n                     name = record.__name__\n                     if name.startswith(prefix):\n-                        recordPrefix = \'.\'.join(\n-                            name.split(\'.\')[:len(prefix.split(\'.\')) + 1])\n+                        recordPrefix = ".".join(\n+                            name.split(".")[: len(prefix.split(".")) + 1]\n+                        )\n                         prefixValue = recordPrefix\n                         break\n             if recordPrefix not in self.prefixes:\n                 self.prefixes[recordPrefix] = prefixValue\n-            if (compare(search, prefixValue) or compare(search, record.__name__)):\n+            if compare(search, prefixValue) or compare(search, record.__name__):\n                 self.records.append(record)\n-        self.records = Batch(\n-            self.records,\n-            15,\n-            int(form.get(\'b_start\', \'0\')),\n-            orphan=1\n-        )\n+        self.records = Batch(self.records, 15, int(form.get("b_start", "0")), orphan=1)\n         return super(RecordsControlPanel, self).__call__()\ndiff --git a/plone/app/registry/exportimport/handler.py b/plone/app/registry/exportimport/handler.py\nindex 2ff876f..1cea52a 100644\n--- a/plone/app/registry/exportimport/handler.py\n+++ b/plone/app/registry/exportimport/handler.py\n@@ -38,6 +38,7 @@ def evaluateCondition(expression):\n     """\n     try:\n         import Zope2.App.zcml\n+\n         context = Zope2.App.zcml._context or config.ConfigurationMachine()\n     except ImportError:\n         context = config.ConfigurationMachine()\n@@ -49,8 +50,8 @@ def evaluateCondition(expression):\n def shouldPurgeList(value_node, key):\n     for child in value_node:\n         attrib = child.attrib\n-        if attrib.get(\'key\') == key:\n-            if attrib.get(\'purge\', \'true\').lower() == \'false\':\n+        if attrib.get("key") == key:\n+            if attrib.get("purge", "true").lower() == "false":\n                 return False\n             else:\n                 return True\n@@ -59,18 +60,18 @@ def shouldPurgeList(value_node, key):\n \n def importRegistry(context):\n \n-    logger = context.getLogger(\'plone.app.registry\')\n+    logger = context.getLogger("plone.app.registry")\n     registry = queryUtility(IRegistry)\n \n     if registry is None:\n         logger.info("Cannot find registry")\n         return\n \n-    filepaths = [\'registry.xml\']\n-    if context.isDirectory(\'registry\'):\n-        for filename in context.listDirectory(\'registry\'):\n-            if not filename.startswith(\'.\'):\n-                filepaths.append(\'registry/\' + filename)\n+    filepaths = ["registry.xml"]\n+    if context.isDirectory("registry"):\n+        for filename in context.listDirectory("registry"):\n+            if not filename.startswith("."):\n+                filepaths.append("registry/" + filename)\n \n     importer = RegistryImporter(registry, context)\n     for filepath in filepaths:\n@@ -82,7 +83,7 @@ def importRegistry(context):\n \n def exportRegistry(context):\n \n-    logger = context.getLogger(\'plone.app.registry\')\n+    logger = context.getLogger("plone.app.registry")\n     registry = queryUtility(IRegistry)\n \n     if registry is None:\n@@ -92,14 +93,13 @@ def exportRegistry(context):\n     exporter = RegistryExporter(registry, context)\n     body = exporter.exportDocument()\n     if body is not None:\n-        context.writeDataFile(\'registry.xml\', safe_encode(body), \'text/xml\')\n+        context.writeDataFile("registry.xml", safe_encode(body), "text/xml")\n \n \n class RegistryImporter(object):\n-    """Helper classt to import a registry file\n-    """\n+    """Helper classt to import a registry file"""\n \n-    LOGGER_ID = \'plone.app.registry\'\n+    LOGGER_ID = "plone.app.registry"\n \n     def __init__(self, context, environ):\n         self.context = context\n@@ -112,36 +112,36 @@ def importDocument(self, document):\n         if self.environ.shouldPurge():\n             self.context.records.clear()\n \n-        i18n_domain = tree.attrib.get(ns(\'domain\', I18N_NAMESPACE))\n+        i18n_domain = tree.attrib.get(ns("domain", I18N_NAMESPACE))\n         if i18n_domain:\n             parseinfo.i18n_domain = i18n_domain\n \n         for node in tree:\n             if not isinstance(node.tag, str):\n                 continue\n-            condition = node.attrib.get(\'condition\', None)\n+            condition = node.attrib.get("condition", None)\n             if condition and not evaluateCondition(condition):\n                 continue\n-            if node.tag.lower() == \'record\':\n+            if node.tag.lower() == "record":\n                 self.importRecord(node)\n-            elif node.tag.lower() == \'records\':\n+            elif node.tag.lower() == "records":\n                 self.importRecords(node)\n \n         parseinfo.i18n_domain = None\n \n     def importRecord(self, node):\n-        name = node.get(\'name\', \'\')\n-        if node.get(\'delete\') is not None:\n+        name = node.get("name", "")\n+        if node.get("delete") is not None:\n             self.logger.warning(\n                 u"The \'delete\' attribute of <record /> nodes is deprecated, "\n                 u"it should be replaced with \'remove\'."\n             )\n-        remove = node.get(\'remove\', node.get(\'delete\', \'false\'))\n-        interfaceName = node.get(\'interface\', None)\n-        fieldName = node.get(\'field\', None)\n+        remove = node.get("remove", node.get("delete", "false"))\n+        interfaceName = node.get("interface", None)\n+        fieldName = node.get("field", None)\n \n         if not name and (interfaceName and fieldName):\n-            prefix = node.get(\'prefix\', None)\n+            prefix = node.get("prefix", None)\n             if prefix is None:\n                 prefix = interfaceName\n \n@@ -152,10 +152,10 @@ def importRecord(self, node):\n \n         # Unicode is not supported\n         name = str(name)\n-        __traceback_info__ = \'record name: {0}\'.format(name)\n+        __traceback_info__ = "record name: {0}".format(name)\n \n         # Handle deletion and quit\n-        if remove.lower() == \'true\':\n+        if remove.lower() == "true":\n             if name in self.context.records:\n                 del self.context.records[name]\n                 self.logger.info("Removed record %s." % name)\n@@ -181,15 +181,15 @@ def importRecord(self, node):\n                 field = IPersistentField(interface[fieldName])\n             except ImportError:\n                 self.logger.warning(\n-                    \'Failed to import interface {0} for \'\n-                    \'record {1}\'.format(interfaceName, name)\n+                    "Failed to import interface {0} for "\n+                    "record {1}".format(interfaceName, name)\n                 )\n                 interface = None\n                 field = None\n             except KeyError:\n                 self.logger.warning(\n-                    \'Interface {0} specified for record %s has \'\n-                    \'no field {1}.\'.format(interfaceName, name, fieldName)\n+                    "Interface {0} specified for record %s has "\n+                    "no field {1}.".format(interfaceName, name, fieldName)\n                 )\n                 interface = None\n                 field = None\n@@ -197,9 +197,7 @@ def importRecord(self, node):\n                 self.logger.warning(\n                     "Field {0} in interface {1} specified for record {2} "\n                     "cannot be used as a persistent field.".format(\n-                        fieldName,\n-                        interfaceName,\n-                        name\n+                        fieldName, interfaceName, name\n                     )\n                 )\n                 interface = None\n@@ -213,29 +211,28 @@ def importRecord(self, node):\n         for child in node:\n             if not isinstance(child.tag, str):\n                 continue\n-            elif child.tag.lower() == \'field\':\n+            elif child.tag.lower() == "field":\n                 field_node = child\n-            elif child.tag.lower() == \'value\':\n+            elif child.tag.lower() == "value":\n                 value_node = child\n \n         # Let field not potentially override interface[fieldName]\n         if field_node is not None:\n-            field_ref = field_node.attrib.get(\'ref\', None)\n+            field_ref = field_node.attrib.get("ref", None)\n             if field_ref is not None:\n                 # We have a field reference\n                 if field_ref not in self.context:\n                     raise KeyError(\n-                        u\'Record {0} references field for record {1}, \'\n-                        u\'which does not exist\'.format(name, field_ref)\n+                        u"Record {0} references field for record {1}, "\n+                        u"which does not exist".format(name, field_ref)\n                     )\n                 ref_record = self.context.records[field_ref]\n                 field = FieldRef(field_ref, ref_record.field)\n             else:\n                 # We have a standard field\n-                field_type = field_node.attrib.get(\'type\', None)\n+                field_type = field_node.attrib.get("type", None)\n                 field_type_handler = queryUtility(\n-                    IFieldExportImportHandler,\n-                    name=field_type\n+                    IFieldExportImportHandler, name=field_type\n                 )\n                 if field_type_handler is None:\n                     raise TypeError(\n@@ -247,10 +244,7 @@ def importRecord(self, node):\n                     if not IPersistentField.providedBy(field):\n                         raise TypeError(\n                             "Only persistent fields may be imported. {0} used "\n-                            "for record {1} is invalid.".format(\n-                                field_type,\n-                                name\n-                            )\n+                            "for record {1} is invalid.".format(field_type, name)\n                         )\n \n         if field is not None and not IFieldRef.providedBy(field):\n@@ -270,15 +264,13 @@ def importRecord(self, node):\n         if field is None:\n             raise ValueError(\n                 "Cannot find a field for the record {0}. Add a <field /> "\n-                "element or reference an interface and field name.".format(\n-                    name\n-                )\n+                "element or reference an interface and field name.".format(name)\n             )\n \n         # Extract the value\n \n         if value_node is not None:\n-            value_purge = value_node.attrib.get(\'purge\', \'\').lower() != \'false\'\n+            value_purge = value_node.attrib.get("purge", "").lower() != "false"\n             value = elementToValue(field, value_node, default=_marker)\n \n         # Now either construct or update the record\n@@ -295,27 +287,29 @@ def importRecord(self, node):\n \n                 if not value_purge and type(value) == type(existing_value):\n                     if isinstance(value, list):\n-                        value = (\n-                            existing_value +\n-                            [v for v in value if v not in existing_value]\n-                        )\n+                        value = existing_value + [\n+                            v for v in value if v not in existing_value\n+                        ]\n                     elif isinstance(value, tuple):\n-                        value = (\n-                            existing_value +\n-                            tuple(\n-                                [v for v in value if v not in existing_value]\n-                            )\n+                        value = existing_value + tuple(\n+                            [v for v in value if v not in existing_value]\n                         )\n-                    elif isinstance(value, (set, frozenset, )):\n+                    elif isinstance(\n+                        value,\n+                        (\n+                            set,\n+                            frozenset,\n+                        ),\n+                    ):\n                         value = existing_value.union(value)\n                     elif isinstance(value, dict):\n                         for key, value in value.items():\n                             # check if value is list, if so, let\'s add\n                             # instead of overridding\n                             if (\n-                                type(value) == list and\n-                                key in existing_value and\n-                                not shouldPurgeList(value_node, key)\n+                                type(value) == list\n+                                and key in existing_value\n+                                and not shouldPurgeList(value_node, key)\n                             ):\n                                 existing = existing_value[key]\n                                 for item in existing:\n@@ -338,26 +332,23 @@ def importRecords(self, node):\n         # May raise ImportError if interface can\'t be found or KeyError if\n         # attribute is missing.\n \n-        interfaceName = node.attrib.get(\'interface\', None)\n+        interfaceName = node.attrib.get("interface", None)\n         if interfaceName is None:\n-            raise KeyError(\n-                u"A <records /> node must have an \'interface\' attribute."\n-            )\n+            raise KeyError(u"A <records /> node must have an \'interface\' attribute.")\n \n         __traceback_info__ = "records name: " + interfaceName\n \n         prefix = node.attrib.get(\n-            \'prefix\',\n-            None  # None means use interface.__identifier__\n+            "prefix", None  # None means use interface.__identifier__\n         )\n \n-        if node.attrib.get(\'delete\') is not None:\n+        if node.attrib.get("delete") is not None:\n             self.logger.warning(\n                 u"The \'delete\' attribute of <record /> nodes is deprecated, "\n                 u"it should be replaced with \'remove\'."\n             )\n-        remove = node.attrib.get(\'remove\', node.attrib.get(\'delete\', \'false\'))\n-        remove = remove.lower() == \'true\'\n+        remove = node.attrib.get("remove", node.attrib.get("delete", "false"))\n+        remove = remove.lower() == "true"\n \n         # May raise ImportError\n         interface = resolve(interfaceName)\n@@ -369,10 +360,10 @@ def importRecords(self, node):\n         for child in node:\n             if not isinstance(child.tag, str):\n                 continue\n-            elif child.tag.lower() == \'omit\':\n+            elif child.tag.lower() == "omit":\n                 if child.text:\n                     omit.append(safe_unicode(child.text))\n-            elif child.tag.lower() == \'value\':\n+            elif child.tag.lower() == "value":\n                 values.append(child)\n \n         if remove and values:\n@@ -385,15 +376,11 @@ def importRecords(self, node):\n                 if f in omit:\n                     continue\n \n-                child = etree.Element(\'value\', key=f, purge=\'True\')\n+                child = etree.Element("value", key=f, purge="True")\n                 values.append(child)\n \n         # May raise TypeError\n-        self.context.registerInterface(\n-            interface,\n-            omit=tuple(omit),\n-            prefix=prefix\n-        )\n+        self.context.registerInterface(interface, omit=tuple(omit), prefix=prefix)\n \n         if not values and not remove:\n             # Skip out if there are no value records to handle\n@@ -409,7 +396,7 @@ def importRecords(self, node):\n                 interface=interface.__identifier__,\n                 field=value.attrib["key"],\n                 prefix=prefix,\n-                remove=repr(remove).lower()\n+                remove=repr(remove).lower(),\n             )\n             field.append(value)\n             self.importRecord(field)\n@@ -417,7 +404,7 @@ def importRecords(self, node):\n \n class RegistryExporter(object):\n \n-    LOGGER_ID = \'plone.app.registry\'\n+    LOGGER_ID = "plone.app.registry"\n \n     def __init__(self, context, environ):\n         self.context = context\n@@ -425,7 +412,7 @@ def __init__(self, context, environ):\n         self.logger = environ.getLogger(self.LOGGER_ID)\n \n     def exportDocument(self):\n-        root = etree.Element(\'registry\')\n+        root = etree.Element("registry")\n \n         for record in self.context.records.values():\n             node = self.exportRecord(record)\n@@ -435,43 +422,37 @@ def exportDocument(self):\n \n     def exportRecord(self, record):\n \n-        node = etree.Element(\'record\')\n-        node.attrib[\'name\'] = record.__name__\n+        node = etree.Element("record")\n+        node.attrib["name"] = record.__name__\n \n         if IInterfaceAwareRecord.providedBy(record):\n-            node.attrib[\'interface\'] = record.interfaceName\n-            node.attrib[\'field\'] = record.fieldName\n+            node.attrib["interface"] = record.interfaceName\n+            node.attrib["field"] = record.fieldName\n \n         # write field\n \n         field = record.field\n         if IFieldRef.providedBy(field):\n-            field_element = etree.Element(\'field\')\n-            field_element.attrib[\'ref\'] = field.recordName\n+            field_element = etree.Element("field")\n+            field_element.attrib["ref"] = field.recordName\n             node.append(field_element)\n         else:\n             field_type = IFieldNameExtractor(record.field)()\n             handler = queryUtility(IFieldExportImportHandler, name=field_type)\n             if handler is None:\n                 self.logger.warning(\n-                    \'Field type {0} specified for record {1} \'\n-                    \'cannot be exported\'.format(field_type, record.__name__)\n+                    "Field type {0} specified for record {1} "\n+                    "cannot be exported".format(field_type, record.__name__)\n                 )\n             else:\n                 field_element = handler.write(\n-                    record.field,\n-                    None,\n-                    field_type,\n-                    elementName=\'field\'\n+                    record.field, None, field_type, elementName="field"\n                 )\n                 node.append(field_element)\n \n         # write value\n         value_element = valueToElement(\n-            record.field,\n-            record.value,\n-            name=\'value\',\n-            force=True\n+            record.field, record.value, name="value", force=True\n         )\n         node.append(value_element)\n \ndiff --git a/plone/app/registry/registry.py b/plone/app/registry/registry.py\nindex 4f3cd59..9cbae85 100644\n--- a/plone/app/registry/registry.py\n+++ b/plone/app/registry/registry.py\n@@ -4,8 +4,7 @@\n \n \n class Registry(registry.Registry, SimpleItem):\n-    """A Zope 2 style registry\n-    """\n+    """A Zope 2 style registry"""\n \n     def __init__(self, id, title=None):\n         super(Registry, self).__init__()\ndiff --git a/plone/app/registry/testing.py b/plone/app/registry/testing.py\nindex 6c0ec7c..6f61f58 100644\n--- a/plone/app/registry/testing.py\n+++ b/plone/app/registry/testing.py\n@@ -8,24 +8,22 @@\n \n class PloneAppRegistry(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.registry\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.registry,\n-            context=configurationContext\n+            "configure.zcml", plone.app.registry, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.registry:default\')\n+        applyProfile(portal, "plone.app.registry:default")\n \n \n PLONE_APP_REGISTRY_FIXTURE = PloneAppRegistry()\n \n PLONE_APP_REGISTRY_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_REGISTRY_FIXTURE, ),\n-    name="plone.app.registry:Integration"\n+    bases=(PLONE_APP_REGISTRY_FIXTURE,), name="plone.app.registry:Integration"\n )\ndiff --git a/plone/app/registry/tests/test_controlpanel.py b/plone/app/registry/tests/test_controlpanel.py\nindex efed362..e7dbac6 100644\n--- a/plone/app/registry/tests/test_controlpanel.py\n+++ b/plone/app/registry/tests/test_controlpanel.py\n@@ -20,8 +20,7 @@ def test_registry_base_controlpanel__control_panel_url(self):\n         """\n         view = ControlPanelFormWrapper(None, None)\n         self.assertEqual(\n-            view.control_panel_url,\n-            u\'http://nohost/plone/@@overview-controlpanel\'\n+            view.control_panel_url, u"http://nohost/plone/@@overview-controlpanel"\n         )\n \n \n@@ -30,8 +29,8 @@ class TestRecordsControlPanel(unittest.TestCase):\n     layer = PLONE_APP_REGISTRY_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n \n     def test_records_control_panel__control_panel_url(self):\n         """Test, if control_panel_url property of the registry controlpanel\n@@ -39,18 +38,19 @@ def test_records_control_panel__control_panel_url(self):\n         """\n         view = RecordsControlPanel(None, None)\n         self.assertEqual(\n-            view.control_panel_url,\n-            u\'http://nohost/plone/@@overview-controlpanel\'\n+            view.control_panel_url, u"http://nohost/plone/@@overview-controlpanel"\n         )\n \n     def test_add_new_record(self):\n-        self.request.form.update({\n-            \'form.widgets.name\': \'foobar\',\n-            \'form.widgets.title\': \'Foobar\',\n-            \'form.widgets.field_type\': \'TextLine\',\n-            \'form.widgets.required-empty-marker\': \'1\',\n-            \'form.buttons.addfield\': \'Add field\'\n-        })\n+        self.request.form.update(\n+            {\n+                "form.widgets.name": "foobar",\n+                "form.widgets.title": "Foobar",\n+                "form.widgets.field_type": "TextLine",\n+                "form.widgets.required-empty-marker": "1",\n+                "form.buttons.addfield": "Add field",\n+            }\n+        )\n \n         registry = self.portal.portal_registry\n \n@@ -61,23 +61,20 @@ def test_add_new_record(self):\n         self.assertTrue(len(errors) == 0)\n \n         view.action_addfield(view, None)\n-        self.assertTrue(\'foobar\' in registry.records)\n+        self.assertTrue("foobar" in registry.records)\n \n     def test_delete(self):\n         registry = self.portal.portal_registry\n         new_field = TextLine()\n         new_record = Record(new_field)\n-        registry.records[\'foobar\'] = new_record\n-        self.assertTrue(\'foobar\' in registry.records)\n-\n-        self.request.form.update({\n-            \'form.buttons.delete\': \'Yes\',\n-            \'name\': \'foobar\'\n-        })\n-        self.request.REQUEST_METHOD = \'POST\'\n+        registry.records["foobar"] = new_record\n+        self.assertTrue("foobar" in registry.records)\n+\n+        self.request.form.update({"form.buttons.delete": "Yes", "name": "foobar"})\n+        self.request.REQUEST_METHOD = "POST"\n         view = RecordDeleteView(registry, self.request)\n         view()\n-        self.assertTrue(\'foobar\' not in registry.records)\n+        self.assertTrue("foobar" not in registry.records)\n \n     def test_edit_record_with_slash(self):\n         # Prepare a new record "foo/bar"\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex f3e1bd9..e556eee 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -1174,7 +1174,7 @@ def test_import_folder(self):\n         context = DummyImportContext(self.site, purge=False)\n         context._files = {\n             "registry.xml": xml1,\n-            ".ignored_file" : "",\n+            ".ignored_file": "",\n             "registry/foo2.xml": xml2,\n             "registry/foo3.xml": xml3,\n         }\ndiff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py\nindex 5706662..6141c80 100644\n--- a/plone/app/registry/tests/test_setup.py\n+++ b/plone/app/registry/tests/test_setup.py\n@@ -13,13 +13,13 @@ class TestSetup(unittest.TestCase):\n \n     def test_tool_installed(self):\n \n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n \n-        self.assertIn(\'portal_registry\', portal.objectIds())\n+        self.assertIn("portal_registry", portal.objectIds())\n         self.assertTrue(IRegistry.providedBy(portal.portal_registry))\n \n     def test_local_utility_installed(self):\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n \n         registry = getUtility(IRegistry)\n         self.assertTrue(aq_base(registry) is aq_base(portal.portal_registry))\ndiff --git a/setup.py b/setup.py\nindex 20d2ba3..623974e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,14 +3,13 @@\n from setuptools import setup\n \n \n-version = \'2.0.0a9.dev0\'\n+version = "2.0.0a9.dev0"\n \n setup(\n-    name=\'plone.app.registry\',\n+    name="plone.app.registry",\n     version=version,\n     description="Zope 2 and Plone  integration for plone.registry",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n@@ -27,32 +26,36 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone registry settings configuration\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.app.registry\',\n-    license=\'GPL\',\n+    keywords="plone registry settings configuration",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.app.registry",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'lxml\',\n-        \'plone.app.z3cform\',\n-        \'plone.autoform>=1.0b2\',\n-        \'plone.registry>=1.0b1\',\n-        \'plone.supermodel>=1.1dev\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.statusmessages\',\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'Zope2\',\n+        "lxml",\n+        "plone.app.z3cform",\n+        "plone.autoform>=1.0b2",\n+        "plone.registry>=1.0b1",\n+        "plone.supermodel>=1.1dev",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Products.statusmessages",\n+        "setuptools",\n+        "zope.component",\n+        "zope.dottedname",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "Zope2",\n     ],\n-    extras_require={\'test\': [\'plone.app.testing\', ]},\n+    extras_require={\n+        "test": [\n+            "plone.app.testing",\n+        ]\n+    },\n     entry_points="""\n     # -*- Entry points: -*-\n     """,\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2022-05-04T21:47:38+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/2ec4ef6e4b44fdb291bcdf77441a6dcaf3e9426a

find . -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/registry/browser/__init__.py
M plone/app/registry/browser/controlpanel.py
M plone/app/registry/browser/delete.py
M plone/app/registry/browser/edit.py
M plone/app/registry/browser/exportxml.py
M plone/app/registry/browser/records.py
M plone/app/registry/exportimport/__init__.py
M plone/app/registry/exportimport/fields.py
M plone/app/registry/exportimport/handler.py
M plone/app/registry/registry.py
M plone/app/registry/testing.py
M plone/app/registry/tests/__init__.py
M plone/app/registry/tests/data.py
M plone/app/registry/tests/test_controlpanel.py
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/registry/browser/__init__.py b/plone/app/registry/browser/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/registry/browser/__init__.py\n+++ b/plone/app/registry/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/registry/browser/controlpanel.py b/plone/app/registry/browser/controlpanel.py\nindex 74a7617..b6a9649 100644\n--- a/plone/app/registry/browser/controlpanel.py\n+++ b/plone/app/registry/browser/controlpanel.py\n@@ -47,25 +47,25 @@ def getContent(self):\n         )\n \n     def updateActions(self):\n-        super(RegistryEditForm, self).updateActions()\n+        super().updateActions()\n         self.actions["save"].addClass("btn btn-primary")\n         self.actions["cancel"].addClass("btn btn-secondary")\n \n-    @button.buttonAndHandler(_(u"Save"), name="save")\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(_(u"Changes saved."), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Changes saved."), "info")\n         self.request.response.redirect(self.request.getURL())\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u"Changes canceled."), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Changes canceled."), "info")\n         self.request.response.redirect(\n-            u"{0}/{1}".format(getSite().absolute_url(), self.control_panel_view)\n+            f"{getSite().absolute_url()}/{self.control_panel_view}"\n         )\n \n \n@@ -78,4 +78,4 @@ class ControlPanelFormWrapper(layout.FormWrapper):\n \n     @property\n     def control_panel_url(self):\n-        return u"{0}/@@overview-controlpanel".format(getSite().absolute_url())\n+        return f"{getSite().absolute_url()}/@@overview-controlpanel"\ndiff --git a/plone/app/registry/browser/delete.py b/plone/app/registry/browser/delete.py\nindex 507aca5..9124a9c 100644\n--- a/plone/app/registry/browser/delete.py\n+++ b/plone/app/registry/browser/delete.py\n@@ -12,9 +12,9 @@ def __call__(self):\n                 if name in self.context:\n                     del self.context.records[name]\n                     messages = IStatusMessage(self.request)\n-                    messages.add(u"Successfully deleted field %s" % name, type=u"info")\n+                    messages.add("Successfully deleted field %s" % name, type="info")\n             elif self.request.form.get("form.buttons.cancel") and name:\n                 messages = IStatusMessage(self.request)\n-                messages.add(u"Successfully deleted field %s" % name, type=u"info")\n+                messages.add("Successfully deleted field %s" % name, type="info")\n             return self.request.response.redirect(self.context.absolute_url())\n-        return super(RecordDeleteView, self).__call__()\n+        return super().__call__()\ndiff --git a/plone/app/registry/browser/edit.py b/plone/app/registry/browser/edit.py\nindex 3a56f18..6bd31ac 100644\n--- a/plone/app/registry/browser/edit.py\n+++ b/plone/app/registry/browser/edit.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import ImplicitAcquisitionWrapper\n from plone.z3cform import layout\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -29,10 +28,10 @@ def update(self):\n         self.fields = field.Fields(\n             self.record.field,\n         )\n-        super(RecordEditForm, self).update()\n+        super().update()\n \n     def updateActions(self):\n-        super(RecordEditForm, self).updateActions()\n+        super().updateActions()\n         self.actions["save"].addClass("btn btn-primary")\n         self.actions["cancel"].addClass("btn btn-secondary")\n \n@@ -61,7 +60,7 @@ class RecordEditView(layout.FormWrapper):\n     form = RecordEditForm\n \n     def __init__(self, context, request):\n-        super(RecordEditView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.request["disable_border"] = True\n \n     def publishTraverse(self, request, name):\ndiff --git a/plone/app/registry/browser/exportxml.py b/plone/app/registry/browser/exportxml.py\nindex 143bb85..6c6124b 100644\n--- a/plone/app/registry/browser/exportxml.py\n+++ b/plone/app/registry/browser/exportxml.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from plone.registry.interfaces import IRegistry\n from Products.Five import BrowserView\n@@ -6,7 +5,6 @@\n from zope.component import getUtility\n \n import os\n-import six\n \n \n _current_dir = os.path.dirname(__file__)\n@@ -37,14 +35,14 @@ def __call__(self):\n     def interfaces(self):\n         prefixes = []\n         registry = getUtility(IRegistry)\n-        baseurl = "{0}/@@configuration_registry_export_xml?interface=".format(\n+        baseurl = "{}/@@configuration_registry_export_xml?interface=".format(\n             self.context.absolute_url()\n         )\n         for record in registry.records.values():\n             if record.interfaceName is None:\n                 continue\n             name = record.interfaceName\n-            url = "{0}{1}".format(baseurl, record.interfaceName)\n+            url = f"{baseurl}{record.interfaceName}"\n             pair = (name, url)\n             if pair not in prefixes:\n                 prefixes.append(pair)\n@@ -54,7 +52,7 @@ def interfaces(self):\n     def prefixes(self):\n         prefixes = []\n         registry = getUtility(IRegistry)\n-        baseurl = "{0}/@@configuration_registry_export_xml?".format(\n+        baseurl = "{}/@@configuration_registry_export_xml?".format(\n             self.context.absolute_url()\n         )\n         for record in registry.records.values():\n@@ -62,7 +60,7 @@ def prefixes(self):\n                 continue\n \n             def add_split(part):\n-                url = "{0}name={1}".format(baseurl, part)\n+                url = f"{baseurl}name={part}"\n                 pair = (part, url)\n                 if pair not in prefixes:\n                     prefixes.append(pair)\n@@ -97,7 +95,7 @@ def export(self, sinterface=None, sname=None):\n                     xmlel.text = element\n             elif isinstance(record.value, bool):\n                 xmlvalue.text = "True" if record.value else "False"\n-            elif isinstance(record.value, six.string_types):\n+            elif isinstance(record.value, str):\n                 xmlvalue.text = record.value\n             else:\n                 xmlvalue.text = str(record.value)\n@@ -130,7 +128,7 @@ def export(self, sinterface=None, sname=None):\n         if sname:\n             filename += sname\n         self.request.response.setHeader(\n-            "Content-Disposition", "attachment; filename={0}.xml".format(filename)\n+            "Content-Disposition", f"attachment; filename={filename}.xml"\n         )\n         return etree.tostring(\n             root, pretty_print=True, xml_declaration=True, encoding="UTF-8"\ndiff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py\nindex 8dbaa9b..b16eea9 100644\n--- a/plone/app/registry/browser/records.py\n+++ b/plone/app/registry/browser/records.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml.etree import XMLSyntaxError\n from plone.app.registry.exportimport.handler import RegistryExporter\n from plone.app.registry.exportimport.handler import RegistryImporter\n@@ -43,7 +42,7 @@ def _starts_with(s, v):\n _okay_prefixes = ["Products", "plone.app", "plone"]\n \n \n-class FakeEnv(object):\n+class FakeEnv:\n     def getLogger(self, name):\n         return logger\n \n@@ -67,18 +66,18 @@ def checkFieldName(val):\n \n class IAddFieldForm(Interface):\n     name = schema.TextLine(\n-        title=_(u"label_field_name", default=u"Field Name"),\n-        description=u\'Must be in a format like "plone.my_name". Only letters, periods, underscores and up to one /.\',\n+        title=_("label_field_name", default="Field Name"),\n+        description=\'Must be in a format like "plone.my_name". Only letters, periods, underscores and up to one /.\',\n         required=True,\n         constraint=checkFieldName,\n     )\n \n     title = schema.TextLine(\n-        title=_(u"label_field_title", default=u"Field Title"), required=True\n+        title=_("label_field_title", default="Field Title"), required=True\n     )\n \n     field_type = schema.Choice(\n-        title=u"Field Type",\n+        title="Field Type",\n         vocabulary=SimpleVocabulary.fromValues(\n             [\n                 "Bytes",\n@@ -105,7 +104,7 @@ class IAddFieldForm(Interface):\n         ),\n     )\n \n-    required = schema.Bool(title=u"Required", default=False)\n+    required = schema.Bool(title="Required", default=False)\n \n \n class RecordsControlPanel(AutoExtensibleForm, form.Form):\n@@ -117,13 +116,13 @@ class RecordsControlPanel(AutoExtensibleForm, form.Form):\n \n     @property\n     def action(self):\n-        return "{url}#autotoc-item-autotoc-3".format(url=self.context.absolute_url())\n+        return f"{self.context.absolute_url()}#autotoc-item-autotoc-3"\n \n     def updateActions(self):\n-        super(RecordsControlPanel, self).updateActions()\n+        super().updateActions()\n         self.actions["addfield"].addClass("btn-primary")\n \n-    @button.buttonAndHandler(u"Add field", name="addfield")\n+    @button.buttonAndHandler("Add field", name="addfield")\n     def action_addfield(self, action):\n         data, errors = self.extractData()\n         self.submitted = True\n@@ -154,7 +153,7 @@ def action_addfield(self, action):\n             new_record = Record(new_field)\n             self.context.records[data["name"]] = new_record\n             messages = IStatusMessage(self.request)\n-            messages.add(u"Successfully added field %s" % data["name"], type=u"info")\n+            messages.add("Successfully added field %s" % data["name"], type="info")\n             return self.request.response.redirect(\n                 "{url}/edit/{field}".format(\n                     url=self.context.absolute_url(), field=data["name"]\n@@ -167,7 +166,7 @@ def import_registry(self):\n             body = fi.read()\n         except (AttributeError, KeyError):\n             messages = IStatusMessage(self.request)\n-            messages.add(u"Must provide XML file", type=u"error")\n+            messages.add("Must provide XML file", type="error")\n             body = None\n         if body is not None:\n             importer = RegistryImporter(self.context, FakeEnv())\n@@ -175,7 +174,7 @@ def import_registry(self):\n                 importer.importDocument(body)\n             except XMLSyntaxError:\n                 messages = IStatusMessage(self.request)\n-                messages.add(u"Must provide valid XML file", type=u"error")\n+                messages.add("Must provide valid XML file", type="error")\n         return self.request.response.redirect(self.context.absolute_url())\n \n     def export_registry(self):\n@@ -189,7 +188,7 @@ def export_registry(self):\n \n     @property\n     def control_panel_url(self):\n-        return u"{0}/@@overview-controlpanel".format(getSite().absolute_url())\n+        return f"{getSite().absolute_url()}/@@overview-controlpanel"\n \n     def __call__(self):\n         form = self.request.form\n@@ -231,4 +230,4 @@ def __call__(self):\n             if compare(search, prefixValue) or compare(search, record.__name__):\n                 self.records.append(record)\n         self.records = Batch(self.records, 15, int(form.get("b_start", "0")), orphan=1)\n-        return super(RecordsControlPanel, self).__call__()\n+        return super().__call__()\ndiff --git a/plone/app/registry/exportimport/__init__.py b/plone/app/registry/exportimport/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/registry/exportimport/__init__.py\n+++ b/plone/app/registry/exportimport/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/registry/exportimport/fields.py b/plone/app/registry/exportimport/fields.py\nindex 4632c0f..0215e38 100644\n--- a/plone/app/registry/exportimport/fields.py\n+++ b/plone/app/registry/exportimport/fields.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry import field\n from plone.supermodel.exportimport import BaseHandler\n from plone.supermodel.exportimport import ChoiceHandler\ndiff --git a/plone/app/registry/exportimport/handler.py b/plone/app/registry/exportimport/handler.py\nindex 1cea52a..db1900c 100644\n--- a/plone/app/registry/exportimport/handler.py\n+++ b/plone/app/registry/exportimport/handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from plone.registry import FieldRef\n from plone.registry import Record\n@@ -96,7 +95,7 @@ def exportRegistry(context):\n         context.writeDataFile("registry.xml", safe_encode(body), "text/xml")\n \n \n-class RegistryImporter(object):\n+class RegistryImporter:\n     """Helper classt to import a registry file"""\n \n     LOGGER_ID = "plone.app.registry"\n@@ -133,8 +132,8 @@ def importRecord(self, node):\n         name = node.get("name", "")\n         if node.get("delete") is not None:\n             self.logger.warning(\n-                u"The \'delete\' attribute of <record /> nodes is deprecated, "\n-                u"it should be replaced with \'remove\'."\n+                "The \'delete\' attribute of <record /> nodes is deprecated, "\n+                "it should be replaced with \'remove\'."\n             )\n         remove = node.get("remove", node.get("delete", "false"))\n         interfaceName = node.get("interface", None)\n@@ -145,14 +144,14 @@ def importRecord(self, node):\n             if prefix is None:\n                 prefix = interfaceName\n \n-            name = "%s.%s" % (prefix, fieldName)\n+            name = f"{prefix}.{fieldName}"\n \n         if not name:\n             raise NameError("No name given for <record /> node!")\n \n         # Unicode is not supported\n         name = str(name)\n-        __traceback_info__ = "record name: {0}".format(name)\n+        __traceback_info__ = f"record name: {name}"\n \n         # Handle deletion and quit\n         if remove.lower() == "true":\n@@ -161,7 +160,7 @@ def importRecord(self, node):\n                 self.logger.info("Removed record %s." % name)\n             else:\n                 self.logger.warning(\n-                    "Record {0} was marked for deletion, but was not "\n+                    "Record {} was marked for deletion, but was not "\n                     "found.".format(name)\n                 )\n             return\n@@ -181,21 +180,21 @@ def importRecord(self, node):\n                 field = IPersistentField(interface[fieldName])\n             except ImportError:\n                 self.logger.warning(\n-                    "Failed to import interface {0} for "\n-                    "record {1}".format(interfaceName, name)\n+                    "Failed to import interface {} for "\n+                    "record {}".format(interfaceName, name)\n                 )\n                 interface = None\n                 field = None\n             except KeyError:\n                 self.logger.warning(\n-                    "Interface {0} specified for record %s has "\n-                    "no field {1}.".format(interfaceName, name, fieldName)\n+                    "Interface {} specified for record %s has "\n+                    "no field {}.".format(interfaceName, name, fieldName)\n                 )\n                 interface = None\n                 field = None\n             except TypeError:\n                 self.logger.warning(\n-                    "Field {0} in interface {1} specified for record {2} "\n+                    "Field {} in interface {} specified for record {} "\n                     "cannot be used as a persistent field.".format(\n                         fieldName, interfaceName, name\n                     )\n@@ -223,8 +222,8 @@ def importRecord(self, node):\n                 # We have a field reference\n                 if field_ref not in self.context:\n                     raise KeyError(\n-                        u"Record {0} references field for record {1}, "\n-                        u"which does not exist".format(name, field_ref)\n+                        "Record {} references field for record {}, "\n+                        "which does not exist".format(name, field_ref)\n                     )\n                 ref_record = self.context.records[field_ref]\n                 field = FieldRef(field_ref, ref_record.field)\n@@ -236,15 +235,15 @@ def importRecord(self, node):\n                 )\n                 if field_type_handler is None:\n                     raise TypeError(\n-                        "Field of type {0} used for record {1} is not "\n+                        "Field of type {} used for record {} is not "\n                         "supported.".format(field_type, name)\n                     )\n                 else:\n                     field = field_type_handler.read(field_node)\n                     if not IPersistentField.providedBy(field):\n                         raise TypeError(\n-                            "Only persistent fields may be imported. {0} used "\n-                            "for record {1} is invalid.".format(field_type, name)\n+                            "Only persistent fields may be imported. {} used "\n+                            "for record {} is invalid.".format(field_type, name)\n                         )\n \n         if field is not None and not IFieldRef.providedBy(field):\n@@ -263,7 +262,7 @@ def importRecord(self, node):\n \n         if field is None:\n             raise ValueError(\n-                "Cannot find a field for the record {0}. Add a <field /> "\n+                "Cannot find a field for the record {}. Add a <field /> "\n                 "element or reference an interface and field name.".format(name)\n             )\n \n@@ -292,7 +291,7 @@ def importRecord(self, node):\n                         ]\n                     elif isinstance(value, tuple):\n                         value = existing_value + tuple(\n-                            [v for v in value if v not in existing_value]\n+                            v for v in value if v not in existing_value\n                         )\n                     elif isinstance(\n                         value,\n@@ -334,7 +333,7 @@ def importRecords(self, node):\n \n         interfaceName = node.attrib.get("interface", None)\n         if interfaceName is None:\n-            raise KeyError(u"A <records /> node must have an \'interface\' attribute.")\n+            raise KeyError("A <records /> node must have an \'interface\' attribute.")\n \n         __traceback_info__ = "records name: " + interfaceName\n \n@@ -344,8 +343,8 @@ def importRecords(self, node):\n \n         if node.attrib.get("delete") is not None:\n             self.logger.warning(\n-                u"The \'delete\' attribute of <record /> nodes is deprecated, "\n-                u"it should be replaced with \'remove\'."\n+                "The \'delete\' attribute of <record /> nodes is deprecated, "\n+                "it should be replaced with \'remove\'."\n             )\n         remove = node.attrib.get("remove", node.attrib.get("delete", "false"))\n         remove = remove.lower() == "true"\n@@ -402,7 +401,7 @@ def importRecords(self, node):\n             self.importRecord(field)\n \n \n-class RegistryExporter(object):\n+class RegistryExporter:\n \n     LOGGER_ID = "plone.app.registry"\n \n@@ -441,7 +440,7 @@ def exportRecord(self, record):\n             handler = queryUtility(IFieldExportImportHandler, name=field_type)\n             if handler is None:\n                 self.logger.warning(\n-                    "Field type {0} specified for record {1} "\n+                    "Field type {} specified for record {} "\n                     "cannot be exported".format(field_type, record.__name__)\n                 )\n             else:\ndiff --git a/plone/app/registry/registry.py b/plone/app/registry/registry.py\nindex 9cbae85..9518493 100644\n--- a/plone/app/registry/registry.py\n+++ b/plone/app/registry/registry.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.registry import registry\n \n@@ -7,7 +6,7 @@ class Registry(registry.Registry, SimpleItem):\n     """A Zope 2 style registry"""\n \n     def __init__(self, id, title=None):\n-        super(Registry, self).__init__()\n+        super().__init__()\n \n         self.id = id\n         self.title = title\ndiff --git a/plone/app/registry/testing.py b/plone/app/registry/testing.py\nindex 6f61f58..c7dc054 100644\n--- a/plone/app/registry/testing.py\n+++ b/plone/app/registry/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\ndiff --git a/plone/app/registry/tests/__init__.py b/plone/app/registry/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/registry/tests/__init__.py\n+++ b/plone/app/registry/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/registry/tests/data.py b/plone/app/registry/tests/data.py\nindex 9c6bb02..b99c40f 100644\n--- a/plone/app/registry/tests/data.py\n+++ b/plone/app/registry/tests/data.py\n@@ -1,16 +1,15 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \n \n class ITestSettings(Interface):\n \n-    name = schema.TextLine(title=u"Name", default=u"Mr. Registry")\n-    age = schema.Int(title=u"Age", min=0)\n+    name = schema.TextLine(title="Name", default="Mr. Registry")\n+    age = schema.Int(title="Age", min=0)\n \n \n class ITestSettingsDisallowed(Interface):\n \n-    name = schema.TextLine(title=u"Name", default=u"Mr. Registry")\n-    age = schema.Int(title=u"Age", min=0)\n-    blob = schema.Object(title=u"Blob", schema=Interface)\n+    name = schema.TextLine(title="Name", default="Mr. Registry")\n+    age = schema.Int(title="Age", min=0)\n+    blob = schema.Object(title="Blob", schema=Interface)\ndiff --git a/plone/app/registry/tests/test_controlpanel.py b/plone/app/registry/tests/test_controlpanel.py\nindex e7dbac6..11efeb5 100644\n--- a/plone/app/registry/tests/test_controlpanel.py\n+++ b/plone/app/registry/tests/test_controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.registry.browser.controlpanel import ControlPanelFormWrapper\n from plone.app.registry.browser.delete import RecordDeleteView\n from plone.app.registry.browser.records import RecordsControlPanel\n@@ -20,7 +19,7 @@ def test_registry_base_controlpanel__control_panel_url(self):\n         """\n         view = ControlPanelFormWrapper(None, None)\n         self.assertEqual(\n-            view.control_panel_url, u"http://nohost/plone/@@overview-controlpanel"\n+            view.control_panel_url, "http://nohost/plone/@@overview-controlpanel"\n         )\n \n \n@@ -38,7 +37,7 @@ def test_records_control_panel__control_panel_url(self):\n         """\n         view = RecordsControlPanel(None, None)\n         self.assertEqual(\n-            view.control_panel_url, u"http://nohost/plone/@@overview-controlpanel"\n+            view.control_panel_url, "http://nohost/plone/@@overview-controlpanel"\n         )\n \n     def test_add_new_record(self):\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex e556eee..99ac764 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -1,6 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import print_function\n-\n from lxml import etree\n from OFS.ObjectManager import ObjectManager\n from plone.app.registry import Registry\n@@ -89,7 +86,7 @@ def assertXmlEquals(self, expected, actual):\n             print(prettyXML(actual_tree))\n             print()\n \n-            raise AssertionError(u"XML mis-match")\n+            raise AssertionError("XML mis-match")\n \n \n class TestImport(ExportImportTest):\n@@ -100,8 +97,8 @@ def test_empty_import_no_purge(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -114,8 +111,8 @@ def test_import_purge(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -131,8 +128,8 @@ def test_import_records(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -151,8 +148,8 @@ def test_import_records_disallowed(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         try:\n@@ -174,8 +171,8 @@ def test_import_records_omit(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -370,16 +367,16 @@ def test_import_value_only(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n+        self.assertEqual("Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_installed(self):\n         xml = """\\\n@@ -394,16 +391,16 @@ def test_import_value_only_condition_installed(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n+        self.assertEqual("Sample value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_have(self):\n         xml = """\\\n@@ -418,16 +415,16 @@ def test_import_value_only_condition_have(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n+        self.assertEqual("Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_not_have(self):\n         xml = """\\\n@@ -442,16 +439,16 @@ def test_import_value_only_condition_not_have(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n+        self.assertEqual("Sample value", self.registry["test.export.simple"])\n \n     def test_import_interface_and_value(self):\n         xml = """\\\n@@ -468,7 +465,7 @@ def test_import_interface_and_value(self):\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Age",\n+            "Age",\n             self.registry.records[\n                 "plone.app.registry.tests.data.ITestSettingsDisallowed.age"\n             ].field.title,  # noqa\n@@ -495,7 +492,7 @@ def test_import_interface_with_differnet_name(self):\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Age", self.registry.records["plone.registry.oops"].field.title\n+            "Age", self.registry.records["plone.registry.oops"].field.title\n         )\n         self.assertEqual(2, self.registry["plone.registry.oops"])\n \n@@ -512,13 +509,13 @@ def test_import_interface_no_value(self):\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Name",\n+            "Name",\n             self.registry.records[\n                 "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n             ].field.title,  # noqa\n         )\n         self.assertEqual(\n-            u"Mr. Registry",\n+            "Mr. Registry",\n             self.registry[\n                 "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n             ],  # noqa\n@@ -547,12 +544,12 @@ def test_import_field_only(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"value", self.registry.records["test.registry.field"].field.__name__\n+            "value", self.registry.records["test.registry.field"].field.__name__\n         )\n-        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n+        self.assertEqual("N/A", self.registry["test.registry.field"])\n \n     def test_import_field_ref(self):\n         xml = """\\\n@@ -567,8 +564,8 @@ def test_import_field_ref(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         importRegistry(context)\n@@ -580,18 +577,16 @@ def test_import_field_ref(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n+            "Simple record",\n             self.registry.records["test.registry.field.override"].field.title,\n         )\n         self.assertEqual(\n-            u"value",\n+            "value",\n             self.registry.records[\n                 "test.registry.field.override"\n             ].field.__name__,  # noqa\n         )\n-        self.assertEqual(\n-            u"Another value", self.registry["test.registry.field.override"]\n-        )\n+        self.assertEqual("Another value", self.registry["test.registry.field.override"])\n \n     def test_import_field_and_interface(self):\n         xml = """\\\n@@ -616,7 +611,7 @@ def test_import_field_and_interface(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual("N/A", self.registry["test.registry.field"])\n \n@@ -633,7 +628,7 @@ def test_import_overwrite_field_with_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -648,7 +643,7 @@ def test_import_overwrite_field_with_field(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual("Nada", self.registry["test.registry.field"])\n \n@@ -660,7 +655,7 @@ def test_import_overwrite_field_with_interface(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -673,7 +668,7 @@ def test_import_overwrite_field_with_interface(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Int)\n         )\n         self.assertEqual(\n-            u"Age", self.registry.records["test.registry.field"].field.title\n+            "Age", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(None, self.registry["test.registry.field"])\n \n@@ -696,7 +691,7 @@ def test_import_collection_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -711,7 +706,7 @@ def test_import_collection_field(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(frozenset([1, 3]), self.registry["test.registry.field"])\n \n@@ -728,8 +723,8 @@ def test_import_collection_value(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n-            value=set([1]),\n+            field.Set(title="Simple record", value_type=field.Int(title="Val")),\n+            value={1},\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -742,7 +737,7 @@ def test_import_collection_value(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(frozenset([4, 6]), self.registry["test.registry.field"])\n \n@@ -759,8 +754,8 @@ def test_import_collection_nopurge(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n-            value=set([1]),\n+            field.Set(title="Simple record", value_type=field.Int(title="Val")),\n+            value={1},\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -773,7 +768,7 @@ def test_import_collection_nopurge(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(frozenset([1, 4, 6]), self.registry["test.registry.field"])\n \n@@ -790,7 +785,7 @@ def test_import_collection_list_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            field.List(title="Simple record", value_type=field.Int(title="Val")),\n             value=[2, 4],\n         )\n \n@@ -815,12 +810,10 @@ def test_import_collection_tuple_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Tuple(\n-                title=u"Simple record", value_type=field.TextLine(title=u"Val")\n-            ),\n+            field.Tuple(title="Simple record", value_type=field.TextLine(title="Val")),\n             value=(\n-                u"a",\n-                u"b",\n+                "a",\n+                "b",\n             ),\n         )\n \n@@ -832,9 +825,9 @@ def test_import_collection_tuple_append(self):\n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n             (\n-                u"a",\n-                u"b",\n-                u"c",\n+                "a",\n+                "b",\n+                "c",\n             ),\n             self.registry["test.registry.field"],\n         )\n@@ -852,8 +845,8 @@ def test_import_collection_set_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n-            value=set([2, 4]),\n+            field.Set(title="Simple record", value_type=field.Int(title="Val")),\n+            value={2, 4},\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -862,7 +855,7 @@ def test_import_collection_set_append(self):\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual(set([2, 4, 6]), self.registry["test.registry.field"])\n+        self.assertEqual({2, 4, 6}, self.registry["test.registry.field"])\n \n     def test_import_collection_frozenset_append(self):\n         xml = """\\\n@@ -877,7 +870,7 @@ def test_import_collection_frozenset_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.FrozenSet(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            field.FrozenSet(title="Simple record", value_type=field.Int(title="Val")),\n             value=frozenset([2, 4]),\n         )\n \n@@ -911,7 +904,7 @@ def test_import_dict_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -924,7 +917,7 @@ def test_import_dict_field(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual({"a": 1, "b": 3}, self.registry["test.registry.field"])\n \n@@ -942,9 +935,9 @@ def test_import_dict_value(self):\n \n         self.registry.records["test.registry.field"] = Record(\n             field.Dict(\n-                title=u"Simple record",\n-                key_type=field.ASCIILine(title=u"Key"),\n-                value_type=field.Int(title=u"Val"),\n+                title="Simple record",\n+                key_type=field.ASCIILine(title="Key"),\n+                value_type=field.Int(title="Val"),\n             ),\n             value={"a": 1},\n         )\n@@ -959,7 +952,7 @@ def test_import_dict_value(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual({"x": 4, "y": 6}, self.registry["test.registry.field"])\n \n@@ -977,9 +970,9 @@ def test_import_dict_nopurge(self):\n \n         self.registry.records["test.registry.field"] = Record(\n             field.Dict(\n-                title=u"Simple record",\n-                key_type=field.ASCIILine(title=u"Key"),\n-                value_type=field.Int(title=u"Val"),\n+                title="Simple record",\n+                key_type=field.ASCIILine(title="Key"),\n+                value_type=field.Int(title="Val"),\n             ),\n             value={"a": 1},\n         )\n@@ -994,7 +987,7 @@ def test_import_dict_nopurge(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual({"a": 1, "x": 4, "y": 6}, self.registry["test.registry.field"])\n \n@@ -1014,7 +1007,7 @@ def test_import_choice_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -1027,10 +1020,10 @@ def test_import_choice_field(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Choice)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            [u"One", u"Two"],\n+            ["One", "Two"],\n             [\n                 t.value\n                 for t in self.registry.records["test.registry.field"].field.vocabulary\n@@ -1069,12 +1062,12 @@ def test_import_with_comments(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"value", self.registry.records["test.registry.field"].field.__name__\n+            "value", self.registry.records["test.registry.field"].field.__name__\n         )\n-        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n+        self.assertEqual("N/A", self.registry["test.registry.field"])\n \n         self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n         self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n@@ -1095,8 +1088,8 @@ def test_remove(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -1112,8 +1105,8 @@ def test_delete_deprecated(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -1129,16 +1122,16 @@ def test_delete_not_found(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n+        self.assertEqual("Sample value", self.registry["test.export.simple"])\n \n     def test_import_folder(self):\n         xml1 = """\\\n@@ -1195,10 +1188,10 @@ def test_import_folder(self):\n                 isinstance(self.registry.records[fieldname].field, field.TextLine)\n             )\n             self.assertEqual(\n-                u"Simple record", self.registry.records[fieldname].field.title\n+                "Simple record", self.registry.records[fieldname].field.title\n             )\n-            self.assertEqual(u"value", self.registry.records[fieldname].field.__name__)\n-            self.assertEqual(u"N/A", self.registry[fieldname])\n+            self.assertEqual("value", self.registry.records[fieldname].field.__name__)\n+            self.assertEqual("N/A", self.registry[fieldname])\n \n     def test_import_jsonfield_only(self):\n         xml = """\\\n@@ -1223,7 +1216,7 @@ def test_import_jsonfield_only(self):\n             )\n         )\n         self.assertEqual(\n-            u"JSON record", self.registry.records["test.registry.field"].field.title\n+            "JSON record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertDictEqual({}, self.registry["test.registry.field"])\n \n@@ -1251,7 +1244,7 @@ def test_import_jsonfield_with_value(self):\n             )\n         )\n         self.assertEqual(\n-            u"JSON record", self.registry.records["test.registry.field"].field.title\n+            "JSON record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertDictEqual(\n             {\n@@ -1288,8 +1281,8 @@ def test_export_simple(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         context = DummyExportContext(self.site)\n@@ -1325,8 +1318,8 @@ def test_export_with_interface(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         self.registry.registerInterface(data.ITestSettings)\n@@ -1355,12 +1348,12 @@ def test_export_field_ref(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = refRecord = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         self.registry.records["test.export.simple.override"] = Record(\n-            FieldRef(refRecord.__name__, refRecord.field), value=u"Another value"\n+            FieldRef(refRecord.__name__, refRecord.field), value="Another value"\n         )\n \n         context = DummyExportContext(self.site)\n@@ -1386,7 +1379,7 @@ def test_export_with_collection(self):\n   </record>\n </registry>"""\n         self.registry.records["test.export.simple"] = Record(\n-            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            field.List(title="Simple record", value_type=field.Int(title="Val")),\n             value=[2],\n         )\n \n@@ -1419,10 +1412,10 @@ def test_export_with_dict(self):\n \n         self.registry.records["test.export.dict"] = Record(\n             field.Dict(\n-                title=u"Dict",\n+                title="Dict",\n                 default={},\n-                key_type=field.ASCIILine(title=u"Key"),\n-                value_type=field.Int(title=u"Value"),\n+                key_type=field.ASCIILine(title="Key"),\n+                value_type=field.Int(title="Value"),\n             ),\n             value={"a": 1},\n         )\n@@ -1447,7 +1440,7 @@ def test_export_with_choice(self):\n </registry>"""\n \n         self.registry.records["test.export.choice"] = Record(\n-            field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab")\n+            field.Choice(title="Simple record", vocabulary="dummy.vocab")\n         )\n \n         context = DummyExportContext(self.site)\n@@ -1470,8 +1463,8 @@ def test_export_with_missing_schema_does_not_error(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         # Note: These are nominally read-only!\n@@ -1503,7 +1496,7 @@ def test_export_with_jsonfield(self):\n \n         self.registry.records["test.export.field"] = Record(\n             field.JSONField(\n-                title=u"Dict",\n+                title="Dict",\n                 default={},\n             ),\n             value={\ndiff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py\nindex 6141c80..41af7b7 100644\n--- a/plone/app/registry/tests/test_setup.py\n+++ b/plone/app/registry/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.registry.testing import PLONE_APP_REGISTRY_INTEGRATION_TESTING\n from plone.registry.interfaces import IRegistry\ndiff --git a/setup.py b/setup.py\nindex 623974e..3db188b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2022-05-04T21:51:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/a0dec67140e01fc082a3102c72c94df377074bb8

depedency cleanup - plone.base

Files changed:
M plone/app/registry/browser/records.py
M plone/app/registry/exportimport/handler.py
M setup.py

b'diff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py\nindex b16eea9..294c6f3 100644\n--- a/plone/app/registry/browser/records.py\n+++ b/plone/app/registry/browser/records.py\n@@ -2,10 +2,10 @@\n from plone.app.registry.exportimport.handler import RegistryExporter\n from plone.app.registry.exportimport.handler import RegistryImporter\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import _\n+from plone.base.batch import Batch\n from plone.registry import field as registry_field\n from plone.registry import Record\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\ndiff --git a/plone/app/registry/exportimport/handler.py b/plone/app/registry/exportimport/handler.py\nindex db1900c..16ccb98 100644\n--- a/plone/app/registry/exportimport/handler.py\n+++ b/plone/app/registry/exportimport/handler.py\n@@ -1,4 +1,6 @@\n from lxml import etree\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from plone.registry import FieldRef\n from plone.registry import Record\n from plone.registry.interfaces import IFieldRef\n@@ -13,8 +15,6 @@\n from plone.supermodel.utils import ns\n from plone.supermodel.utils import prettyXML\n from plone.supermodel.utils import valueToElement\n-from Products.CMFPlone.utils import safe_encode\n-from Products.CMFPlone.utils import safe_unicode\n from zope.component import queryUtility\n from zope.configuration import config\n from zope.configuration import xmlconfig\n@@ -92,7 +92,7 @@ def exportRegistry(context):\n     exporter = RegistryExporter(registry, context)\n     body = exporter.exportDocument()\n     if body is not None:\n-        context.writeDataFile("registry.xml", safe_encode(body), "text/xml")\n+        context.writeDataFile("registry.xml", safe_bytes(body), "text/xml")\n \n \n class RegistryImporter:\n@@ -361,7 +361,7 @@ def importRecords(self, node):\n                 continue\n             elif child.tag.lower() == "omit":\n                 if child.text:\n-                    omit.append(safe_unicode(child.text))\n+                    omit.append(safe_text(child.text))\n             elif child.tag.lower() == "value":\n                 values.append(child)\n \ndiff --git a/setup.py b/setup.py\nindex 3db188b..853a5bc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,17 +38,11 @@\n         "lxml",\n         "plone.app.z3cform",\n         "plone.autoform>=1.0b2",\n+        "plone.base",\n         "plone.registry>=1.0b1",\n         "plone.supermodel>=1.1dev",\n-        "Products.CMFCore",\n-        "Products.GenericSetup",\n         "Products.statusmessages",\n         "setuptools",\n-        "zope.component",\n-        "zope.dottedname",\n-        "zope.i18nmessageid",\n-        "zope.interface",\n-        "Zope2",\n     ],\n     extras_require={\n         "test": [\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2022-05-04T21:54:30+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/2ed9526c8c36a83c0341a2cc47fcb8b6c09a68d1

add newsfile

Files changed:
A news/63.breaking
M plone/app/registry/browser/records.py

b'diff --git a/news/63.breaking b/news/63.breaking\nnew file mode 100644\nindex 0000000..a29fc0f\n--- /dev/null\n+++ b/news/63.breaking\n@@ -0,0 +1,2 @@\n+isort, black, pyupgrade. Use plone.base and dependency cleanup.\n+[jensens]\ndiff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py\nindex 294c6f3..4c783ab 100644\n--- a/plone/app/registry/browser/records.py\n+++ b/plone/app/registry/browser/records.py\n@@ -2,7 +2,7 @@\n from plone.app.registry.exportimport.handler import RegistryExporter\n from plone.app.registry.exportimport.handler import RegistryImporter\n from plone.autoform.form import AutoExtensibleForm\n-from plone.base import _\n+from plone.base import PloneMessageFactory as _\n from plone.base.batch import Batch\n from plone.registry import field as registry_field\n from plone.registry import Record\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2022-05-04T23:42:31+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.registry/commit/a9ea5d590b654243448ae454c8027c6c092395e3

Merge pull request #63 from plone/plone.base-overhaul

Plone.base overhaul

Files changed:
A news/63.breaking
M plone/__init__.py
M plone/app/__init__.py
M plone/app/registry/__init__.py
M plone/app/registry/browser/__init__.py
M plone/app/registry/browser/controlpanel.py
M plone/app/registry/browser/delete.py
M plone/app/registry/browser/edit.py
M plone/app/registry/browser/exportxml.py
M plone/app/registry/browser/records.py
M plone/app/registry/exportimport/__init__.py
M plone/app/registry/exportimport/fields.py
M plone/app/registry/exportimport/handler.py
M plone/app/registry/registry.py
M plone/app/registry/testing.py
M plone/app/registry/tests/__init__.py
M plone/app/registry/tests/data.py
M plone/app/registry/tests/test_controlpanel.py
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py
M setup.cfg
M setup.py

b'diff --git a/news/63.breaking b/news/63.breaking\nnew file mode 100644\nindex 0000000..a29fc0f\n--- /dev/null\n+++ b/news/63.breaking\n@@ -0,0 +1,2 @@\n+isort, black, pyupgrade. Use plone.base and dependency cleanup.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/registry/__init__.py b/plone/app/registry/__init__.py\nindex 8b32ba6..a057128 100644\n--- a/plone/app/registry/__init__.py\n+++ b/plone/app/registry/__init__.py\n@@ -1 +1 @@\n-from plone.app.registry.registry import Registry\n\\ No newline at end of file\n+from plone.app.registry.registry import Registry\ndiff --git a/plone/app/registry/browser/__init__.py b/plone/app/registry/browser/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/registry/browser/__init__.py\n+++ b/plone/app/registry/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/registry/browser/controlpanel.py b/plone/app/registry/browser/controlpanel.py\nindex 8042f86..b6a9649 100644\n--- a/plone/app/registry/browser/controlpanel.py\n+++ b/plone/app/registry/browser/controlpanel.py\n@@ -1,19 +1,16 @@\n-from zope.component import getUtility\n-\n+from plone.autoform.form import AutoExtensibleForm\n from plone.registry.interfaces import IRegistry\n-\n-from z3c.form import form, button\n-\n from plone.z3cform import layout\n-from plone.autoform.form import AutoExtensibleForm\n-\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-\n+from z3c.form import button\n+from z3c.form import form\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.i18nmessageid import MessageFactory\n \n-_ = MessageFactory(\'plone\')\n+\n+_ = MessageFactory("plone")\n \n \n class RegistryEditForm(AutoExtensibleForm, form.EditForm):\n@@ -46,43 +43,39 @@ class MyForm(RegistryEditForm):\n \n     def getContent(self):\n         return getUtility(IRegistry).forInterface(\n-            self.schema,\n-            prefix=self.schema_prefix)\n+            self.schema, prefix=self.schema_prefix\n+        )\n \n     def updateActions(self):\n-        super(RegistryEditForm, self).updateActions()\n-        self.actions[\'save\'].addClass("btn btn-primary")\n-        self.actions[\'cancel\'].addClass("btn btn-secondary")\n+        super().updateActions()\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n-    @button.buttonAndHandler(_(u"Save"), name=\'save\')\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes saved."),\n-            "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Changes saved."), "info")\n         self.request.response.redirect(self.request.getURL())\n \n-    @button.buttonAndHandler(_(u"Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes canceled."),\n-            "info")\n-        self.request.response.redirect(u"{0}/{1}".format(\n-            getSite().absolute_url(),\n-            self.control_panel_view\n-        ))\n+        IStatusMessage(self.request).addStatusMessage(_("Changes canceled."), "info")\n+        self.request.response.redirect(\n+            f"{getSite().absolute_url()}/{self.control_panel_view}"\n+        )\n \n \n class ControlPanelFormWrapper(layout.FormWrapper):\n     """Use this form as the plone.z3cform layout wrapper to get the control\n     panel layout.\n     """\n-    index = ViewPageTemplateFile(\'templates/controlpanel_layout.pt\')\n+\n+    index = ViewPageTemplateFile("templates/controlpanel_layout.pt")\n \n     @property\n     def control_panel_url(self):\n-        return u"{0}/@@overview-controlpanel".format(getSite().absolute_url())\n+        return f"{getSite().absolute_url()}/@@overview-controlpanel"\ndiff --git a/plone/app/registry/browser/delete.py b/plone/app/registry/browser/delete.py\nindex e9cd4f3..9124a9c 100644\n--- a/plone/app/registry/browser/delete.py\n+++ b/plone/app/registry/browser/delete.py\n@@ -3,19 +3,18 @@\n \n \n class RecordDeleteView(BrowserView):\n-\n     def __call__(self):\n-        if self.request.REQUEST_METHOD == \'POST\':\n-            name = self.request.form.get(\'name\')\n+        if self.request.REQUEST_METHOD == "POST":\n+            name = self.request.form.get("name")\n             if isinstance(name, list) and len(name) > 0:\n                 name = name[0]\n-            if self.request.form.get(\'form.buttons.delete\'):\n+            if self.request.form.get("form.buttons.delete"):\n                 if name in self.context:\n                     del self.context.records[name]\n                     messages = IStatusMessage(self.request)\n-                    messages.add(u"Successfully deleted field %s" % name, type=u"info")\n-            elif self.request.form.get(\'form.buttons.cancel\') and name:\n+                    messages.add("Successfully deleted field %s" % name, type="info")\n+            elif self.request.form.get("form.buttons.cancel") and name:\n                 messages = IStatusMessage(self.request)\n-                messages.add(u"Successfully deleted field %s" % name, type=u"info")\n+                messages.add("Successfully deleted field %s" % name, type="info")\n             return self.request.response.redirect(self.context.absolute_url())\n-        return super(RecordDeleteView, self).__call__()\n+        return super().__call__()\ndiff --git a/plone/app/registry/browser/edit.py b/plone/app/registry/browser/edit.py\nindex 41a81c1..6bd31ac 100644\n--- a/plone/app/registry/browser/edit.py\n+++ b/plone/app/registry/browser/edit.py\n@@ -1,18 +1,19 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import ImplicitAcquisitionWrapper\n from plone.z3cform import layout\n from Products.statusmessages.interfaces import IStatusMessage\n-from z3c.form import form, field, button\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n-_ = MessageFactory(\'plone\')\n+\n+_ = MessageFactory("plone")\n \n \n class RecordEditForm(form.EditForm):\n-    """Edit a single record\n-    """\n+    """Edit a single record"""\n \n     record = None\n \n@@ -21,46 +22,36 @@ def action(self):\n         return f"{self.context.absolute_url()}/edit/{self.record.__name__}"\n \n     def getContent(self):\n-        return ImplicitAcquisitionWrapper(\n-            {\'value\': self.record.value},\n-            self.context\n-        )\n+        return ImplicitAcquisitionWrapper({"value": self.record.value}, self.context)\n \n     def update(self):\n-        self.fields = field.Fields(self.record.field, )\n-        super(RecordEditForm, self).update()\n+        self.fields = field.Fields(\n+            self.record.field,\n+        )\n+        super().update()\n \n     def updateActions(self):\n-        super(RecordEditForm, self).updateActions()\n-        self.actions[\'save\'].addClass("btn btn-primary")\n-        self.actions[\'cancel\'].addClass("btn btn-secondary")\n+        super().updateActions()\n+        self.actions["save"].addClass("btn btn-primary")\n+        self.actions["cancel"].addClass("btn btn-secondary")\n \n     @property\n     def label(self):\n-        return _(\n-            u"Edit record: ${name}",\n-            mapping={\'name\': self.record.__name__}\n-        )\n+        return _("Edit record: ${name}", mapping={"name": self.record.__name__})\n \n-    @button.buttonAndHandler(_(u"Save"), name=\'save\')\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n-        self.record.value = data[\'value\']\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes saved."),\n-            "info"\n-        )\n+        self.record.value = data["value"]\n+        IStatusMessage(self.request).addStatusMessage(_("Changes saved."), "info")\n         self.request.response.redirect(self.context.absolute_url())\n \n-    @button.buttonAndHandler(_(u"Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Edit cancelled."),\n-            "info"\n-        )\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled."), "info")\n         self.request.response.redirect(self.context.absolute_url())\n \n \n@@ -69,14 +60,14 @@ class RecordEditView(layout.FormWrapper):\n     form = RecordEditForm\n \n     def __init__(self, context, request):\n-        super(RecordEditView, self).__init__(context, request)\n-        self.request[\'disable_border\'] = True\n+        super().__init__(context, request)\n+        self.request["disable_border"] = True\n \n     def publishTraverse(self, request, name):\n-        path = self.request[\'TraversalRequestNameStack\'] + [name]\n+        path = self.request["TraversalRequestNameStack"] + [name]\n         path.reverse()\n-        key = \'/\'.join(path)\n-        del self.request[\'TraversalRequestNameStack\'][:]\n+        key = "/".join(path)\n+        del self.request["TraversalRequestNameStack"][:]\n         record = self.context.records[key]\n         self.record = record\n         self.form_instance.record = record\ndiff --git a/plone/app/registry/browser/exportxml.py b/plone/app/registry/browser/exportxml.py\nindex 60e9cdd..6c6124b 100644\n--- a/plone/app/registry/browser/exportxml.py\n+++ b/plone/app/registry/browser/exportxml.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from plone.registry.interfaces import IRegistry\n from Products.Five import BrowserView\n@@ -6,7 +5,7 @@\n from zope.component import getUtility\n \n import os\n-import six\n+\n \n _current_dir = os.path.dirname(__file__)\n \n@@ -23,12 +22,12 @@ class RegistryExporterView(BrowserView):\n     """\n \n     template = ViewPageTemplateFile(\n-        os.path.join(_current_dir, \'templates\', \'exportxml.pt\')\n+        os.path.join(_current_dir, "templates", "exportxml.pt")\n     )\n \n     def __call__(self):\n-        interface = self.request.form.get(\'interface\', None)\n-        name = self.request.form.get(\'name\', None)\n+        interface = self.request.form.get("interface", None)\n+        name = self.request.form.get("name", None)\n         if not interface and not name:\n             return self.template()\n         return self.export(sinterface=interface, sname=name)\n@@ -36,14 +35,14 @@ def __call__(self):\n     def interfaces(self):\n         prefixes = []\n         registry = getUtility(IRegistry)\n-        baseurl = \'{0}/@@configuration_registry_export_xml?interface=\'.format(\n+        baseurl = "{}/@@configuration_registry_export_xml?interface=".format(\n             self.context.absolute_url()\n         )\n         for record in registry.records.values():\n             if record.interfaceName is None:\n                 continue\n             name = record.interfaceName\n-            url = \'{0}{1}\'.format(baseurl, record.interfaceName)\n+            url = f"{baseurl}{record.interfaceName}"\n             pair = (name, url)\n             if pair not in prefixes:\n                 prefixes.append(pair)\n@@ -53,7 +52,7 @@ def interfaces(self):\n     def prefixes(self):\n         prefixes = []\n         registry = getUtility(IRegistry)\n-        baseurl = \'{0}/@@configuration_registry_export_xml?\'.format(\n+        baseurl = "{}/@@configuration_registry_export_xml?".format(\n             self.context.absolute_url()\n         )\n         for record in registry.records.values():\n@@ -61,14 +60,14 @@ def prefixes(self):\n                 continue\n \n             def add_split(part):\n-                url = \'{0}name={1}\'.format(baseurl, part)\n+                url = f"{baseurl}name={part}"\n                 pair = (part, url)\n                 if pair not in prefixes:\n                     prefixes.append(pair)\n-                if part.rfind(\'/\') > part.rfind(\'.\'):\n-                    new_parts = part.rsplit(\'/\', 1)\n+                if part.rfind("/") > part.rfind("."):\n+                    new_parts = part.rsplit("/", 1)\n                 else:\n-                    new_parts = part.rsplit(\'.\', 1)\n+                    new_parts = part.rsplit(".", 1)\n                 if len(new_parts) > 1:\n                     add_split(new_parts[0])\n \n@@ -77,7 +76,7 @@ def add_split(part):\n \n     def export(self, sinterface=None, sname=None):\n         registry = getUtility(IRegistry)\n-        root = etree.Element(\'registry\')\n+        root = etree.Element("registry")\n         values = {}  # full prefix to valuerecord\n         interface2values = {}\n         interface2prefix = {}\n@@ -86,23 +85,23 @@ def export(self, sinterface=None, sname=None):\n                 continue\n             if sname and not record.__name__.startswith(sname):\n                 continue\n-            prefix, value_key = record.__name__.rsplit(\'.\', 1)\n-            xmlvalue = etree.Element(\'value\')\n+            prefix, value_key = record.__name__.rsplit(".", 1)\n+            xmlvalue = etree.Element("value")\n             if record.value is None:\n                 continue\n             if isinstance(record.value, (list, tuple)):\n                 for element in record.value:\n-                    xmlel = etree.SubElement(xmlvalue, \'element\')\n+                    xmlel = etree.SubElement(xmlvalue, "element")\n                     xmlel.text = element\n             elif isinstance(record.value, bool):\n-                xmlvalue.text = \'True\' if record.value else \'False\'\n-            elif isinstance(record.value, six.string_types):\n+                xmlvalue.text = "True" if record.value else "False"\n+            elif isinstance(record.value, str):\n                 xmlvalue.text = record.value\n             else:\n                 xmlvalue.text = str(record.value)\n \n             if record.interfaceName:\n-                xmlvalue.attrib[\'key\'] = value_key\n+                xmlvalue.attrib["key"] = value_key\n                 if record.interfaceName not in interface2values:\n                     interface2values[record.interfaceName] = []\n                 interface2values[record.interfaceName].append(record.__name__)\n@@ -110,30 +109,27 @@ def export(self, sinterface=None, sname=None):\n             values[record.__name__] = xmlvalue\n \n         for ifname in sorted(interface2values):\n-            xmlrecord = etree.SubElement(root, \'records\')\n-            xmlrecord.attrib[\'interface\'] = ifname\n-            xmlrecord.attrib[\'prefix\'] = interface2prefix[ifname]\n+            xmlrecord = etree.SubElement(root, "records")\n+            xmlrecord.attrib["interface"] = ifname\n+            xmlrecord.attrib["prefix"] = interface2prefix[ifname]\n             for value in sorted(interface2values[ifname]):\n                 xmlrecord.append(values.pop(value))\n         for name, xmlvalue in values.items():\n-            xmlrecord = etree.SubElement(root, \'records\')\n-            xmlrecord.attrib[\'prefix\'] = name\n+            xmlrecord = etree.SubElement(root, "records")\n+            xmlrecord.attrib["prefix"] = name\n             xmlrecord.append(xmlvalue)\n \n-        self.request.response.setHeader(\'Content-Type\', \'text/xml\')\n-        filename = \'\'\n+        self.request.response.setHeader("Content-Type", "text/xml")\n+        filename = ""\n         if sinterface:\n             filename += sinterface\n         if sinterface and sname:\n-            filename += \'_-_\'\n+            filename += "_-_"\n         if sname:\n             filename += sname\n         self.request.response.setHeader(\n-            \'Content-Disposition\',\n-            \'attachment; filename={0}.xml\'.format(filename))\n+            "Content-Disposition", f"attachment; filename={filename}.xml"\n+        )\n         return etree.tostring(\n-            root,\n-            pretty_print=True,\n-            xml_declaration=True,\n-            encoding=\'UTF-8\'\n+            root, pretty_print=True, xml_declaration=True, encoding="UTF-8"\n         )\ndiff --git a/plone/app/registry/browser/records.py b/plone/app/registry/browser/records.py\nindex 88372bb..4c783ab 100644\n--- a/plone/app/registry/browser/records.py\n+++ b/plone/app/registry/browser/records.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from lxml.etree import XMLSyntaxError\n from plone.app.registry.exportimport.handler import RegistryExporter\n from plone.app.registry.exportimport.handler import RegistryImporter\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n+from plone.base.batch import Batch\n from plone.registry import field as registry_field\n from plone.registry import Record\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n@@ -25,7 +24,7 @@\n import string\n \n \n-logger = logging.getLogger(\'plone.app.registry\')\n+logger = logging.getLogger("plone.app.registry")\n \n \n def _true(s, v):\n@@ -40,14 +39,10 @@ def _starts_with(s, v):\n     return v.startswith(s)\n \n \n-_okay_prefixes = [\n-    \'Products\',\n-    \'plone.app\',\n-    \'plone\']\n+_okay_prefixes = ["Products", "plone.app", "plone"]\n \n \n-class FakeEnv(object):\n-\n+class FakeEnv:\n     def getLogger(self, name):\n         return logger\n \n@@ -55,7 +50,7 @@ def shouldPurge(self):\n         return False\n \n \n-_valid_field_name_chars = string.ascii_letters + \'._\'\n+_valid_field_name_chars = string.ascii_letters + "._"\n \n \n def checkFieldName(val):\n@@ -65,36 +60,51 @@ def checkFieldName(val):\n         r"([/][a-zA-Z0-9][a-zA-Z0-9_-]*)?((?:\\.[a-zA-Z0-9][a-zA-Z0-9_-]*)*)$"\n     ).match\n     if not validkey(val):\n-        raise Invalid(\'Not a valid field name\')\n+        raise Invalid("Not a valid field name")\n     return True\n \n \n class IAddFieldForm(Interface):\n     name = schema.TextLine(\n-        title=_(u\'label_field_name\', default=u\'Field Name\'),\n-        description=u\'Must be in a format like "plone.my_name". Only letters, periods, underscores and up to one /.\',\n+        title=_("label_field_name", default="Field Name"),\n+        description=\'Must be in a format like "plone.my_name". Only letters, periods, underscores and up to one /.\',\n         required=True,\n-        constraint=checkFieldName)\n+        constraint=checkFieldName,\n+    )\n \n     title = schema.TextLine(\n-        title=_(u\'label_field_title\', default=u\'Field Title\'),\n-        required=True)\n+        title=_("label_field_title", default="Field Title"), required=True\n+    )\n \n     field_type = schema.Choice(\n-        title=u\'Field Type\',\n-        vocabulary=SimpleVocabulary.fromValues([\n-            \'Bytes\', \'BytesLine\', \'ASCII\', \'ASCIILine\', \'Text\', \'TextLine\', \'Bool\', \'Int\',\n-            \'Float\', \'Decimal\', \'Password\',\n-            \'Datetime\', \'Date\', \'Timedelta\', \'SourceText\', \'URI\', \'Id\', \'DottedName\',\n-            # XXX not supporting these types yet as it requires additional config\n-            # \'Tuple\', \'List\', \'Set\', \'FrozenSet\', \'Dict\',\n-        ])\n+        title="Field Type",\n+        vocabulary=SimpleVocabulary.fromValues(\n+            [\n+                "Bytes",\n+                "BytesLine",\n+                "ASCII",\n+                "ASCIILine",\n+                "Text",\n+                "TextLine",\n+                "Bool",\n+                "Int",\n+                "Float",\n+                "Decimal",\n+                "Password",\n+                "Datetime",\n+                "Date",\n+                "Timedelta",\n+                "SourceText",\n+                "URI",\n+                "Id",\n+                "DottedName",\n+                # XXX not supporting these types yet as it requires additional config\n+                # \'Tuple\', \'List\', \'Set\', \'FrozenSet\', \'Dict\',\n+            ]\n+        ),\n     )\n \n-    required = schema.Bool(\n-        title=u\'Required\',\n-        default=False\n-    )\n+    required = schema.Bool(title="Required", default=False)\n \n \n class RecordsControlPanel(AutoExtensibleForm, form.Form):\n@@ -102,51 +112,61 @@ class RecordsControlPanel(AutoExtensibleForm, form.Form):\n     ignoreContext = True\n     submitted = False\n \n-    template = ViewPageTemplateFile(\'templates/records.pt\')\n+    template = ViewPageTemplateFile("templates/records.pt")\n \n     @property\n     def action(self):\n-        return \'{url}#autotoc-item-autotoc-3\'.format(url=self.context.absolute_url())\n+        return f"{self.context.absolute_url()}#autotoc-item-autotoc-3"\n \n     def updateActions(self):\n-        super(RecordsControlPanel, self).updateActions()\n-        self.actions[\'addfield\'].addClass(\'btn-primary\')\n+        super().updateActions()\n+        self.actions["addfield"].addClass("btn-primary")\n \n-    @button.buttonAndHandler(u\'Add field\', name=\'addfield\')\n+    @button.buttonAndHandler("Add field", name="addfield")\n     def action_addfield(self, action):\n         data, errors = self.extractData()\n         self.submitted = True\n         if not errors:\n-            field_class = getattr(registry_field, data[\'field_type\'], None)\n+            field_class = getattr(registry_field, data["field_type"], None)\n             if field_class is None:\n                 notify(\n                     ActionErrorOccurred(\n                         action,\n-                        WidgetActionExecutionError(\'field_type\', Invalid(\'Invalid Field\'))))\n+                        WidgetActionExecutionError(\n+                            "field_type", Invalid("Invalid Field")\n+                        ),\n+                    )\n+                )\n                 return\n-            if data[\'name\'] in self.context:\n+            if data["name"] in self.context:\n                 notify(\n                     ActionErrorOccurred(\n                         action,\n-                        WidgetActionExecutionError(\'name\', Invalid(\'Field name already in use\'))))\n+                        WidgetActionExecutionError(\n+                            "name", Invalid("Field name already in use")\n+                        ),\n+                    )\n+                )\n                 return\n \n-            new_field = field_class(title=data[\'title\'], required=data[\'required\'])\n+            new_field = field_class(title=data["title"], required=data["required"])\n             new_record = Record(new_field)\n-            self.context.records[data[\'name\']] = new_record\n+            self.context.records[data["name"]] = new_record\n             messages = IStatusMessage(self.request)\n-            messages.add(u"Successfully added field %s" % data[\'name\'], type=u"info")\n-            return self.request.response.redirect(\'{url}/edit/{field}\'.format(\n-                url=self.context.absolute_url(),\n-                field=data[\'name\']))\n+            messages.add("Successfully added field %s" % data["name"], type="info")\n+            return self.request.response.redirect(\n+                "{url}/edit/{field}".format(\n+                    url=self.context.absolute_url(), field=data["name"]\n+                )\n+            )\n \n     def import_registry(self):\n         try:\n-            fi = self.request.form[\'file\']\n+            fi = self.request.form["file"]\n             body = fi.read()\n         except (AttributeError, KeyError):\n             messages = IStatusMessage(self.request)\n-            messages.add(u"Must provide XML file", type=u"error")\n+            messages.add("Must provide XML file", type="error")\n             body = None\n         if body is not None:\n             importer = RegistryImporter(self.context, FakeEnv())\n@@ -154,36 +174,36 @@ def import_registry(self):\n                 importer.importDocument(body)\n             except XMLSyntaxError:\n                 messages = IStatusMessage(self.request)\n-                messages.add(u"Must provide valid XML file", type=u"error")\n+                messages.add("Must provide valid XML file", type="error")\n         return self.request.response.redirect(self.context.absolute_url())\n \n     def export_registry(self):\n         exporter = RegistryExporter(self.context, FakeEnv())\n         body = exporter.exportDocument()\n         resp = self.request.response\n-        resp.setHeader(\'Content-type\', \'text/xml\')\n-        resp.setHeader(\'Content-Disposition\', \'attachment; filename=registry.xml\')\n+        resp.setHeader("Content-type", "text/xml")\n+        resp.setHeader("Content-Disposition", "attachment; filename=registry.xml")\n         resp.setHeader("Content-Length", len(body))\n         return body\n \n     @property\n     def control_panel_url(self):\n-        return u"{0}/@@overview-controlpanel".format(getSite().absolute_url())\n+        return f"{getSite().absolute_url()}/@@overview-controlpanel"\n \n     def __call__(self):\n         form = self.request.form\n-        if self.request.REQUEST_METHOD == \'POST\':\n-            if form.get(\'button.exportregistry\'):\n+        if self.request.REQUEST_METHOD == "POST":\n+            if form.get("button.exportregistry"):\n                 return self.export_registry()\n-            if form.get(\'button.importregistry\'):\n+            if form.get("button.importregistry"):\n                 return self.import_registry()\n-        search = form.get(\'q\')\n-        searchp = form.get(\'qp\')\n+        search = form.get("q")\n+        searchp = form.get("qp")\n         compare = _is_in\n-        if searchp not in (None, \'\'):\n+        if searchp not in (None, ""):\n             search = searchp\n-        if search is not None and search.startswith(\'prefix:\'):\n-            search = search[len(\'prefix:\'):]\n+        if search is not None and search.startswith("prefix:"):\n+            search = search[len("prefix:") :]\n             compare = _starts_with\n         if not search:\n             compare = _true\n@@ -193,25 +213,21 @@ def __call__(self):\n         for record in self.context.records.values():\n             ifaceName = record.interfaceName\n             if ifaceName is not None:\n-                recordPrefix = ifaceName.split(\'.\')[-1]\n+                recordPrefix = ifaceName.split(".")[-1]\n                 prefixValue = record.interfaceName\n             else:\n                 prefixValue = record.__name__\n                 for prefix in _okay_prefixes:\n                     name = record.__name__\n                     if name.startswith(prefix):\n-                        recordPrefix = \'.\'.join(\n-                            name.split(\'.\')[:len(prefix.split(\'.\')) + 1])\n+                        recordPrefix = ".".join(\n+                            name.split(".")[: len(prefix.split(".")) + 1]\n+                        )\n                         prefixValue = recordPrefix\n                         break\n             if recordPrefix not in self.prefixes:\n                 self.prefixes[recordPrefix] = prefixValue\n-            if (compare(search, prefixValue) or compare(search, record.__name__)):\n+            if compare(search, prefixValue) or compare(search, record.__name__):\n                 self.records.append(record)\n-        self.records = Batch(\n-            self.records,\n-            15,\n-            int(form.get(\'b_start\', \'0\')),\n-            orphan=1\n-        )\n-        return super(RecordsControlPanel, self).__call__()\n+        self.records = Batch(self.records, 15, int(form.get("b_start", "0")), orphan=1)\n+        return super().__call__()\ndiff --git a/plone/app/registry/exportimport/__init__.py b/plone/app/registry/exportimport/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/registry/exportimport/__init__.py\n+++ b/plone/app/registry/exportimport/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/registry/exportimport/fields.py b/plone/app/registry/exportimport/fields.py\nindex 4632c0f..0215e38 100644\n--- a/plone/app/registry/exportimport/fields.py\n+++ b/plone/app/registry/exportimport/fields.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry import field\n from plone.supermodel.exportimport import BaseHandler\n from plone.supermodel.exportimport import ChoiceHandler\ndiff --git a/plone/app/registry/exportimport/handler.py b/plone/app/registry/exportimport/handler.py\nindex 2ff876f..16ccb98 100644\n--- a/plone/app/registry/exportimport/handler.py\n+++ b/plone/app/registry/exportimport/handler.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from plone.registry import FieldRef\n from plone.registry import Record\n from plone.registry.interfaces import IFieldRef\n@@ -14,8 +15,6 @@\n from plone.supermodel.utils import ns\n from plone.supermodel.utils import prettyXML\n from plone.supermodel.utils import valueToElement\n-from Products.CMFPlone.utils import safe_encode\n-from Products.CMFPlone.utils import safe_unicode\n from zope.component import queryUtility\n from zope.configuration import config\n from zope.configuration import xmlconfig\n@@ -38,6 +37,7 @@ def evaluateCondition(expression):\n     """\n     try:\n         import Zope2.App.zcml\n+\n         context = Zope2.App.zcml._context or config.ConfigurationMachine()\n     except ImportError:\n         context = config.ConfigurationMachine()\n@@ -49,8 +49,8 @@ def evaluateCondition(expression):\n def shouldPurgeList(value_node, key):\n     for child in value_node:\n         attrib = child.attrib\n-        if attrib.get(\'key\') == key:\n-            if attrib.get(\'purge\', \'true\').lower() == \'false\':\n+        if attrib.get("key") == key:\n+            if attrib.get("purge", "true").lower() == "false":\n                 return False\n             else:\n                 return True\n@@ -59,18 +59,18 @@ def shouldPurgeList(value_node, key):\n \n def importRegistry(context):\n \n-    logger = context.getLogger(\'plone.app.registry\')\n+    logger = context.getLogger("plone.app.registry")\n     registry = queryUtility(IRegistry)\n \n     if registry is None:\n         logger.info("Cannot find registry")\n         return\n \n-    filepaths = [\'registry.xml\']\n-    if context.isDirectory(\'registry\'):\n-        for filename in context.listDirectory(\'registry\'):\n-            if not filename.startswith(\'.\'):\n-                filepaths.append(\'registry/\' + filename)\n+    filepaths = ["registry.xml"]\n+    if context.isDirectory("registry"):\n+        for filename in context.listDirectory("registry"):\n+            if not filename.startswith("."):\n+                filepaths.append("registry/" + filename)\n \n     importer = RegistryImporter(registry, context)\n     for filepath in filepaths:\n@@ -82,7 +82,7 @@ def importRegistry(context):\n \n def exportRegistry(context):\n \n-    logger = context.getLogger(\'plone.app.registry\')\n+    logger = context.getLogger("plone.app.registry")\n     registry = queryUtility(IRegistry)\n \n     if registry is None:\n@@ -92,14 +92,13 @@ def exportRegistry(context):\n     exporter = RegistryExporter(registry, context)\n     body = exporter.exportDocument()\n     if body is not None:\n-        context.writeDataFile(\'registry.xml\', safe_encode(body), \'text/xml\')\n+        context.writeDataFile("registry.xml", safe_bytes(body), "text/xml")\n \n \n-class RegistryImporter(object):\n-    """Helper classt to import a registry file\n-    """\n+class RegistryImporter:\n+    """Helper classt to import a registry file"""\n \n-    LOGGER_ID = \'plone.app.registry\'\n+    LOGGER_ID = "plone.app.registry"\n \n     def __init__(self, context, environ):\n         self.context = context\n@@ -112,56 +111,56 @@ def importDocument(self, document):\n         if self.environ.shouldPurge():\n             self.context.records.clear()\n \n-        i18n_domain = tree.attrib.get(ns(\'domain\', I18N_NAMESPACE))\n+        i18n_domain = tree.attrib.get(ns("domain", I18N_NAMESPACE))\n         if i18n_domain:\n             parseinfo.i18n_domain = i18n_domain\n \n         for node in tree:\n             if not isinstance(node.tag, str):\n                 continue\n-            condition = node.attrib.get(\'condition\', None)\n+            condition = node.attrib.get("condition", None)\n             if condition and not evaluateCondition(condition):\n                 continue\n-            if node.tag.lower() == \'record\':\n+            if node.tag.lower() == "record":\n                 self.importRecord(node)\n-            elif node.tag.lower() == \'records\':\n+            elif node.tag.lower() == "records":\n                 self.importRecords(node)\n \n         parseinfo.i18n_domain = None\n \n     def importRecord(self, node):\n-        name = node.get(\'name\', \'\')\n-        if node.get(\'delete\') is not None:\n+        name = node.get("name", "")\n+        if node.get("delete") is not None:\n             self.logger.warning(\n-                u"The \'delete\' attribute of <record /> nodes is deprecated, "\n-                u"it should be replaced with \'remove\'."\n+                "The \'delete\' attribute of <record /> nodes is deprecated, "\n+                "it should be replaced with \'remove\'."\n             )\n-        remove = node.get(\'remove\', node.get(\'delete\', \'false\'))\n-        interfaceName = node.get(\'interface\', None)\n-        fieldName = node.get(\'field\', None)\n+        remove = node.get("remove", node.get("delete", "false"))\n+        interfaceName = node.get("interface", None)\n+        fieldName = node.get("field", None)\n \n         if not name and (interfaceName and fieldName):\n-            prefix = node.get(\'prefix\', None)\n+            prefix = node.get("prefix", None)\n             if prefix is None:\n                 prefix = interfaceName\n \n-            name = "%s.%s" % (prefix, fieldName)\n+            name = f"{prefix}.{fieldName}"\n \n         if not name:\n             raise NameError("No name given for <record /> node!")\n \n         # Unicode is not supported\n         name = str(name)\n-        __traceback_info__ = \'record name: {0}\'.format(name)\n+        __traceback_info__ = f"record name: {name}"\n \n         # Handle deletion and quit\n-        if remove.lower() == \'true\':\n+        if remove.lower() == "true":\n             if name in self.context.records:\n                 del self.context.records[name]\n                 self.logger.info("Removed record %s." % name)\n             else:\n                 self.logger.warning(\n-                    "Record {0} was marked for deletion, but was not "\n+                    "Record {} was marked for deletion, but was not "\n                     "found.".format(name)\n                 )\n             return\n@@ -181,25 +180,23 @@ def importRecord(self, node):\n                 field = IPersistentField(interface[fieldName])\n             except ImportError:\n                 self.logger.warning(\n-                    \'Failed to import interface {0} for \'\n-                    \'record {1}\'.format(interfaceName, name)\n+                    "Failed to import interface {} for "\n+                    "record {}".format(interfaceName, name)\n                 )\n                 interface = None\n                 field = None\n             except KeyError:\n                 self.logger.warning(\n-                    \'Interface {0} specified for record %s has \'\n-                    \'no field {1}.\'.format(interfaceName, name, fieldName)\n+                    "Interface {} specified for record %s has "\n+                    "no field {}.".format(interfaceName, name, fieldName)\n                 )\n                 interface = None\n                 field = None\n             except TypeError:\n                 self.logger.warning(\n-                    "Field {0} in interface {1} specified for record {2} "\n+                    "Field {} in interface {} specified for record {} "\n                     "cannot be used as a persistent field.".format(\n-                        fieldName,\n-                        interfaceName,\n-                        name\n+                        fieldName, interfaceName, name\n                     )\n                 )\n                 interface = None\n@@ -213,44 +210,40 @@ def importRecord(self, node):\n         for child in node:\n             if not isinstance(child.tag, str):\n                 continue\n-            elif child.tag.lower() == \'field\':\n+            elif child.tag.lower() == "field":\n                 field_node = child\n-            elif child.tag.lower() == \'value\':\n+            elif child.tag.lower() == "value":\n                 value_node = child\n \n         # Let field not potentially override interface[fieldName]\n         if field_node is not None:\n-            field_ref = field_node.attrib.get(\'ref\', None)\n+            field_ref = field_node.attrib.get("ref", None)\n             if field_ref is not None:\n                 # We have a field reference\n                 if field_ref not in self.context:\n                     raise KeyError(\n-                        u\'Record {0} references field for record {1}, \'\n-                        u\'which does not exist\'.format(name, field_ref)\n+                        "Record {} references field for record {}, "\n+                        "which does not exist".format(name, field_ref)\n                     )\n                 ref_record = self.context.records[field_ref]\n                 field = FieldRef(field_ref, ref_record.field)\n             else:\n                 # We have a standard field\n-                field_type = field_node.attrib.get(\'type\', None)\n+                field_type = field_node.attrib.get("type", None)\n                 field_type_handler = queryUtility(\n-                    IFieldExportImportHandler,\n-                    name=field_type\n+                    IFieldExportImportHandler, name=field_type\n                 )\n                 if field_type_handler is None:\n                     raise TypeError(\n-                        "Field of type {0} used for record {1} is not "\n+                        "Field of type {} used for record {} is not "\n                         "supported.".format(field_type, name)\n                     )\n                 else:\n                     field = field_type_handler.read(field_node)\n                     if not IPersistentField.providedBy(field):\n                         raise TypeError(\n-                            "Only persistent fields may be imported. {0} used "\n-                            "for record {1} is invalid.".format(\n-                                field_type,\n-                                name\n-                            )\n+                            "Only persistent fields may be imported. {} used "\n+                            "for record {} is invalid.".format(field_type, name)\n                         )\n \n         if field is not None and not IFieldRef.providedBy(field):\n@@ -269,16 +262,14 @@ def importRecord(self, node):\n \n         if field is None:\n             raise ValueError(\n-                "Cannot find a field for the record {0}. Add a <field /> "\n-                "element or reference an interface and field name.".format(\n-                    name\n-                )\n+                "Cannot find a field for the record {}. Add a <field /> "\n+                "element or reference an interface and field name.".format(name)\n             )\n \n         # Extract the value\n \n         if value_node is not None:\n-            value_purge = value_node.attrib.get(\'purge\', \'\').lower() != \'false\'\n+            value_purge = value_node.attrib.get("purge", "").lower() != "false"\n             value = elementToValue(field, value_node, default=_marker)\n \n         # Now either construct or update the record\n@@ -295,27 +286,29 @@ def importRecord(self, node):\n \n                 if not value_purge and type(value) == type(existing_value):\n                     if isinstance(value, list):\n-                        value = (\n-                            existing_value +\n-                            [v for v in value if v not in existing_value]\n-                        )\n+                        value = existing_value + [\n+                            v for v in value if v not in existing_value\n+                        ]\n                     elif isinstance(value, tuple):\n-                        value = (\n-                            existing_value +\n-                            tuple(\n-                                [v for v in value if v not in existing_value]\n-                            )\n+                        value = existing_value + tuple(\n+                            v for v in value if v not in existing_value\n                         )\n-                    elif isinstance(value, (set, frozenset, )):\n+                    elif isinstance(\n+                        value,\n+                        (\n+                            set,\n+                            frozenset,\n+                        ),\n+                    ):\n                         value = existing_value.union(value)\n                     elif isinstance(value, dict):\n                         for key, value in value.items():\n                             # check if value is list, if so, let\'s add\n                             # instead of overridding\n                             if (\n-                                type(value) == list and\n-                                key in existing_value and\n-                                not shouldPurgeList(value_node, key)\n+                                type(value) == list\n+                                and key in existing_value\n+                                and not shouldPurgeList(value_node, key)\n                             ):\n                                 existing = existing_value[key]\n                                 for item in existing:\n@@ -338,26 +331,23 @@ def importRecords(self, node):\n         # May raise ImportError if interface can\'t be found or KeyError if\n         # attribute is missing.\n \n-        interfaceName = node.attrib.get(\'interface\', None)\n+        interfaceName = node.attrib.get("interface", None)\n         if interfaceName is None:\n-            raise KeyError(\n-                u"A <records /> node must have an \'interface\' attribute."\n-            )\n+            raise KeyError("A <records /> node must have an \'interface\' attribute.")\n \n         __traceback_info__ = "records name: " + interfaceName\n \n         prefix = node.attrib.get(\n-            \'prefix\',\n-            None  # None means use interface.__identifier__\n+            "prefix", None  # None means use interface.__identifier__\n         )\n \n-        if node.attrib.get(\'delete\') is not None:\n+        if node.attrib.get("delete") is not None:\n             self.logger.warning(\n-                u"The \'delete\' attribute of <record /> nodes is deprecated, "\n-                u"it should be replaced with \'remove\'."\n+                "The \'delete\' attribute of <record /> nodes is deprecated, "\n+                "it should be replaced with \'remove\'."\n             )\n-        remove = node.attrib.get(\'remove\', node.attrib.get(\'delete\', \'false\'))\n-        remove = remove.lower() == \'true\'\n+        remove = node.attrib.get("remove", node.attrib.get("delete", "false"))\n+        remove = remove.lower() == "true"\n \n         # May raise ImportError\n         interface = resolve(interfaceName)\n@@ -369,10 +359,10 @@ def importRecords(self, node):\n         for child in node:\n             if not isinstance(child.tag, str):\n                 continue\n-            elif child.tag.lower() == \'omit\':\n+            elif child.tag.lower() == "omit":\n                 if child.text:\n-                    omit.append(safe_unicode(child.text))\n-            elif child.tag.lower() == \'value\':\n+                    omit.append(safe_text(child.text))\n+            elif child.tag.lower() == "value":\n                 values.append(child)\n \n         if remove and values:\n@@ -385,15 +375,11 @@ def importRecords(self, node):\n                 if f in omit:\n                     continue\n \n-                child = etree.Element(\'value\', key=f, purge=\'True\')\n+                child = etree.Element("value", key=f, purge="True")\n                 values.append(child)\n \n         # May raise TypeError\n-        self.context.registerInterface(\n-            interface,\n-            omit=tuple(omit),\n-            prefix=prefix\n-        )\n+        self.context.registerInterface(interface, omit=tuple(omit), prefix=prefix)\n \n         if not values and not remove:\n             # Skip out if there are no value records to handle\n@@ -409,15 +395,15 @@ def importRecords(self, node):\n                 interface=interface.__identifier__,\n                 field=value.attrib["key"],\n                 prefix=prefix,\n-                remove=repr(remove).lower()\n+                remove=repr(remove).lower(),\n             )\n             field.append(value)\n             self.importRecord(field)\n \n \n-class RegistryExporter(object):\n+class RegistryExporter:\n \n-    LOGGER_ID = \'plone.app.registry\'\n+    LOGGER_ID = "plone.app.registry"\n \n     def __init__(self, context, environ):\n         self.context = context\n@@ -425,7 +411,7 @@ def __init__(self, context, environ):\n         self.logger = environ.getLogger(self.LOGGER_ID)\n \n     def exportDocument(self):\n-        root = etree.Element(\'registry\')\n+        root = etree.Element("registry")\n \n         for record in self.context.records.values():\n             node = self.exportRecord(record)\n@@ -435,43 +421,37 @@ def exportDocument(self):\n \n     def exportRecord(self, record):\n \n-        node = etree.Element(\'record\')\n-        node.attrib[\'name\'] = record.__name__\n+        node = etree.Element("record")\n+        node.attrib["name"] = record.__name__\n \n         if IInterfaceAwareRecord.providedBy(record):\n-            node.attrib[\'interface\'] = record.interfaceName\n-            node.attrib[\'field\'] = record.fieldName\n+            node.attrib["interface"] = record.interfaceName\n+            node.attrib["field"] = record.fieldName\n \n         # write field\n \n         field = record.field\n         if IFieldRef.providedBy(field):\n-            field_element = etree.Element(\'field\')\n-            field_element.attrib[\'ref\'] = field.recordName\n+            field_element = etree.Element("field")\n+            field_element.attrib["ref"] = field.recordName\n             node.append(field_element)\n         else:\n             field_type = IFieldNameExtractor(record.field)()\n             handler = queryUtility(IFieldExportImportHandler, name=field_type)\n             if handler is None:\n                 self.logger.warning(\n-                    \'Field type {0} specified for record {1} \'\n-                    \'cannot be exported\'.format(field_type, record.__name__)\n+                    "Field type {} specified for record {} "\n+                    "cannot be exported".format(field_type, record.__name__)\n                 )\n             else:\n                 field_element = handler.write(\n-                    record.field,\n-                    None,\n-                    field_type,\n-                    elementName=\'field\'\n+                    record.field, None, field_type, elementName="field"\n                 )\n                 node.append(field_element)\n \n         # write value\n         value_element = valueToElement(\n-            record.field,\n-            record.value,\n-            name=\'value\',\n-            force=True\n+            record.field, record.value, name="value", force=True\n         )\n         node.append(value_element)\n \ndiff --git a/plone/app/registry/registry.py b/plone/app/registry/registry.py\nindex 4f3cd59..9518493 100644\n--- a/plone/app/registry/registry.py\n+++ b/plone/app/registry/registry.py\n@@ -1,14 +1,12 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.registry import registry\n \n \n class Registry(registry.Registry, SimpleItem):\n-    """A Zope 2 style registry\n-    """\n+    """A Zope 2 style registry"""\n \n     def __init__(self, id, title=None):\n-        super(Registry, self).__init__()\n+        super().__init__()\n \n         self.id = id\n         self.title = title\ndiff --git a/plone/app/registry/testing.py b/plone/app/registry/testing.py\nindex 6c0ec7c..c7dc054 100644\n--- a/plone/app/registry/testing.py\n+++ b/plone/app/registry/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n@@ -8,24 +7,22 @@\n \n class PloneAppRegistry(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.registry\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.registry,\n-            context=configurationContext\n+            "configure.zcml", plone.app.registry, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.registry:default\')\n+        applyProfile(portal, "plone.app.registry:default")\n \n \n PLONE_APP_REGISTRY_FIXTURE = PloneAppRegistry()\n \n PLONE_APP_REGISTRY_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_REGISTRY_FIXTURE, ),\n-    name="plone.app.registry:Integration"\n+    bases=(PLONE_APP_REGISTRY_FIXTURE,), name="plone.app.registry:Integration"\n )\ndiff --git a/plone/app/registry/tests/__init__.py b/plone/app/registry/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/registry/tests/__init__.py\n+++ b/plone/app/registry/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/registry/tests/data.py b/plone/app/registry/tests/data.py\nindex 9c6bb02..b99c40f 100644\n--- a/plone/app/registry/tests/data.py\n+++ b/plone/app/registry/tests/data.py\n@@ -1,16 +1,15 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \n \n class ITestSettings(Interface):\n \n-    name = schema.TextLine(title=u"Name", default=u"Mr. Registry")\n-    age = schema.Int(title=u"Age", min=0)\n+    name = schema.TextLine(title="Name", default="Mr. Registry")\n+    age = schema.Int(title="Age", min=0)\n \n \n class ITestSettingsDisallowed(Interface):\n \n-    name = schema.TextLine(title=u"Name", default=u"Mr. Registry")\n-    age = schema.Int(title=u"Age", min=0)\n-    blob = schema.Object(title=u"Blob", schema=Interface)\n+    name = schema.TextLine(title="Name", default="Mr. Registry")\n+    age = schema.Int(title="Age", min=0)\n+    blob = schema.Object(title="Blob", schema=Interface)\ndiff --git a/plone/app/registry/tests/test_controlpanel.py b/plone/app/registry/tests/test_controlpanel.py\nindex efed362..11efeb5 100644\n--- a/plone/app/registry/tests/test_controlpanel.py\n+++ b/plone/app/registry/tests/test_controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.registry.browser.controlpanel import ControlPanelFormWrapper\n from plone.app.registry.browser.delete import RecordDeleteView\n from plone.app.registry.browser.records import RecordsControlPanel\n@@ -20,8 +19,7 @@ def test_registry_base_controlpanel__control_panel_url(self):\n         """\n         view = ControlPanelFormWrapper(None, None)\n         self.assertEqual(\n-            view.control_panel_url,\n-            u\'http://nohost/plone/@@overview-controlpanel\'\n+            view.control_panel_url, "http://nohost/plone/@@overview-controlpanel"\n         )\n \n \n@@ -30,8 +28,8 @@ class TestRecordsControlPanel(unittest.TestCase):\n     layer = PLONE_APP_REGISTRY_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n \n     def test_records_control_panel__control_panel_url(self):\n         """Test, if control_panel_url property of the registry controlpanel\n@@ -39,18 +37,19 @@ def test_records_control_panel__control_panel_url(self):\n         """\n         view = RecordsControlPanel(None, None)\n         self.assertEqual(\n-            view.control_panel_url,\n-            u\'http://nohost/plone/@@overview-controlpanel\'\n+            view.control_panel_url, "http://nohost/plone/@@overview-controlpanel"\n         )\n \n     def test_add_new_record(self):\n-        self.request.form.update({\n-            \'form.widgets.name\': \'foobar\',\n-            \'form.widgets.title\': \'Foobar\',\n-            \'form.widgets.field_type\': \'TextLine\',\n-            \'form.widgets.required-empty-marker\': \'1\',\n-            \'form.buttons.addfield\': \'Add field\'\n-        })\n+        self.request.form.update(\n+            {\n+                "form.widgets.name": "foobar",\n+                "form.widgets.title": "Foobar",\n+                "form.widgets.field_type": "TextLine",\n+                "form.widgets.required-empty-marker": "1",\n+                "form.buttons.addfield": "Add field",\n+            }\n+        )\n \n         registry = self.portal.portal_registry\n \n@@ -61,23 +60,20 @@ def test_add_new_record(self):\n         self.assertTrue(len(errors) == 0)\n \n         view.action_addfield(view, None)\n-        self.assertTrue(\'foobar\' in registry.records)\n+        self.assertTrue("foobar" in registry.records)\n \n     def test_delete(self):\n         registry = self.portal.portal_registry\n         new_field = TextLine()\n         new_record = Record(new_field)\n-        registry.records[\'foobar\'] = new_record\n-        self.assertTrue(\'foobar\' in registry.records)\n-\n-        self.request.form.update({\n-            \'form.buttons.delete\': \'Yes\',\n-            \'name\': \'foobar\'\n-        })\n-        self.request.REQUEST_METHOD = \'POST\'\n+        registry.records["foobar"] = new_record\n+        self.assertTrue("foobar" in registry.records)\n+\n+        self.request.form.update({"form.buttons.delete": "Yes", "name": "foobar"})\n+        self.request.REQUEST_METHOD = "POST"\n         view = RecordDeleteView(registry, self.request)\n         view()\n-        self.assertTrue(\'foobar\' not in registry.records)\n+        self.assertTrue("foobar" not in registry.records)\n \n     def test_edit_record_with_slash(self):\n         # Prepare a new record "foo/bar"\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex b09a40b..99ac764 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import print_function\n from lxml import etree\n from OFS.ObjectManager import ObjectManager\n from plone.app.registry import Registry\n@@ -14,10 +12,10 @@\n from plone.registry.interfaces import IRegistry\n from plone.supermodel.utils import prettyXML\n from plone.testing import zca\n+from Products.GenericSetup.tests.common import DummyExportContext\n from Products.GenericSetup.tests.common import (\n     DummyImportContext as BaseDummyImportContext,\n )\n-from Products.GenericSetup.tests.common import DummyExportContext\n from zope.component import provideUtility\n from zope.configuration import xmlconfig\n from zope.interface import alsoProvides\n@@ -88,7 +86,7 @@ def assertXmlEquals(self, expected, actual):\n             print(prettyXML(actual_tree))\n             print()\n \n-            raise AssertionError(u"XML mis-match")\n+            raise AssertionError("XML mis-match")\n \n \n class TestImport(ExportImportTest):\n@@ -99,8 +97,8 @@ def test_empty_import_no_purge(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -113,8 +111,8 @@ def test_import_purge(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -130,8 +128,8 @@ def test_import_records(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -150,8 +148,8 @@ def test_import_records_disallowed(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         try:\n@@ -173,8 +171,8 @@ def test_import_records_omit(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -369,16 +367,16 @@ def test_import_value_only(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n+        self.assertEqual("Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_installed(self):\n         xml = """\\\n@@ -393,16 +391,16 @@ def test_import_value_only_condition_installed(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n+        self.assertEqual("Sample value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_have(self):\n         xml = """\\\n@@ -417,16 +415,16 @@ def test_import_value_only_condition_have(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Imported value", self.registry["test.export.simple"])\n+        self.assertEqual("Imported value", self.registry["test.export.simple"])\n \n     def test_import_value_only_condition_not_have(self):\n         xml = """\\\n@@ -441,16 +439,16 @@ def test_import_value_only_condition_not_have(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n+        self.assertEqual("Sample value", self.registry["test.export.simple"])\n \n     def test_import_interface_and_value(self):\n         xml = """\\\n@@ -467,7 +465,7 @@ def test_import_interface_and_value(self):\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Age",\n+            "Age",\n             self.registry.records[\n                 "plone.app.registry.tests.data.ITestSettingsDisallowed.age"\n             ].field.title,  # noqa\n@@ -494,7 +492,7 @@ def test_import_interface_with_differnet_name(self):\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Age", self.registry.records["plone.registry.oops"].field.title\n+            "Age", self.registry.records["plone.registry.oops"].field.title\n         )\n         self.assertEqual(2, self.registry["plone.registry.oops"])\n \n@@ -511,13 +509,13 @@ def test_import_interface_no_value(self):\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Name",\n+            "Name",\n             self.registry.records[\n                 "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n             ].field.title,  # noqa\n         )\n         self.assertEqual(\n-            u"Mr. Registry",\n+            "Mr. Registry",\n             self.registry[\n                 "plone.app.registry.tests.data.ITestSettingsDisallowed.name"\n             ],  # noqa\n@@ -546,12 +544,12 @@ def test_import_field_only(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"value", self.registry.records["test.registry.field"].field.__name__\n+            "value", self.registry.records["test.registry.field"].field.__name__\n         )\n-        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n+        self.assertEqual("N/A", self.registry["test.registry.field"])\n \n     def test_import_field_ref(self):\n         xml = """\\\n@@ -566,8 +564,8 @@ def test_import_field_ref(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         importRegistry(context)\n@@ -579,18 +577,16 @@ def test_import_field_ref(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record",\n+            "Simple record",\n             self.registry.records["test.registry.field.override"].field.title,\n         )\n         self.assertEqual(\n-            u"value",\n+            "value",\n             self.registry.records[\n                 "test.registry.field.override"\n             ].field.__name__,  # noqa\n         )\n-        self.assertEqual(\n-            u"Another value", self.registry["test.registry.field.override"]\n-        )\n+        self.assertEqual("Another value", self.registry["test.registry.field.override"])\n \n     def test_import_field_and_interface(self):\n         xml = """\\\n@@ -615,7 +611,7 @@ def test_import_field_and_interface(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual("N/A", self.registry["test.registry.field"])\n \n@@ -632,7 +628,7 @@ def test_import_overwrite_field_with_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -647,7 +643,7 @@ def test_import_overwrite_field_with_field(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual("Nada", self.registry["test.registry.field"])\n \n@@ -659,7 +655,7 @@ def test_import_overwrite_field_with_interface(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -672,7 +668,7 @@ def test_import_overwrite_field_with_interface(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Int)\n         )\n         self.assertEqual(\n-            u"Age", self.registry.records["test.registry.field"].field.title\n+            "Age", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(None, self.registry["test.registry.field"])\n \n@@ -695,7 +691,7 @@ def test_import_collection_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -710,7 +706,7 @@ def test_import_collection_field(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(frozenset([1, 3]), self.registry["test.registry.field"])\n \n@@ -727,8 +723,8 @@ def test_import_collection_value(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n-            value=set([1]),\n+            field.Set(title="Simple record", value_type=field.Int(title="Val")),\n+            value={1},\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -741,7 +737,7 @@ def test_import_collection_value(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(frozenset([4, 6]), self.registry["test.registry.field"])\n \n@@ -758,8 +754,8 @@ def test_import_collection_nopurge(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n-            value=set([1]),\n+            field.Set(title="Simple record", value_type=field.Int(title="Val")),\n+            value={1},\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -772,7 +768,7 @@ def test_import_collection_nopurge(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Set)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(frozenset([1, 4, 6]), self.registry["test.registry.field"])\n \n@@ -789,7 +785,7 @@ def test_import_collection_list_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            field.List(title="Simple record", value_type=field.Int(title="Val")),\n             value=[2, 4],\n         )\n \n@@ -814,12 +810,10 @@ def test_import_collection_tuple_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Tuple(\n-                title=u"Simple record", value_type=field.TextLine(title=u"Val")\n-            ),\n+            field.Tuple(title="Simple record", value_type=field.TextLine(title="Val")),\n             value=(\n-                u"a",\n-                u"b",\n+                "a",\n+                "b",\n             ),\n         )\n \n@@ -831,9 +825,9 @@ def test_import_collection_tuple_append(self):\n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n             (\n-                u"a",\n-                u"b",\n-                u"c",\n+                "a",\n+                "b",\n+                "c",\n             ),\n             self.registry["test.registry.field"],\n         )\n@@ -851,8 +845,8 @@ def test_import_collection_set_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.Set(title=u"Simple record", value_type=field.Int(title=u"Val")),\n-            value=set([2, 4]),\n+            field.Set(title="Simple record", value_type=field.Int(title="Val")),\n+            value={2, 4},\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -861,7 +855,7 @@ def test_import_collection_set_append(self):\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n-        self.assertEqual(set([2, 4, 6]), self.registry["test.registry.field"])\n+        self.assertEqual({2, 4, 6}, self.registry["test.registry.field"])\n \n     def test_import_collection_frozenset_append(self):\n         xml = """\\\n@@ -876,7 +870,7 @@ def test_import_collection_frozenset_append(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.FrozenSet(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            field.FrozenSet(title="Simple record", value_type=field.Int(title="Val")),\n             value=frozenset([2, 4]),\n         )\n \n@@ -910,7 +904,7 @@ def test_import_dict_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -923,7 +917,7 @@ def test_import_dict_field(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual({"a": 1, "b": 3}, self.registry["test.registry.field"])\n \n@@ -941,9 +935,9 @@ def test_import_dict_value(self):\n \n         self.registry.records["test.registry.field"] = Record(\n             field.Dict(\n-                title=u"Simple record",\n-                key_type=field.ASCIILine(title=u"Key"),\n-                value_type=field.Int(title=u"Val"),\n+                title="Simple record",\n+                key_type=field.ASCIILine(title="Key"),\n+                value_type=field.Int(title="Val"),\n             ),\n             value={"a": 1},\n         )\n@@ -958,7 +952,7 @@ def test_import_dict_value(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual({"x": 4, "y": 6}, self.registry["test.registry.field"])\n \n@@ -976,9 +970,9 @@ def test_import_dict_nopurge(self):\n \n         self.registry.records["test.registry.field"] = Record(\n             field.Dict(\n-                title=u"Simple record",\n-                key_type=field.ASCIILine(title=u"Key"),\n-                value_type=field.Int(title=u"Val"),\n+                title="Simple record",\n+                key_type=field.ASCIILine(title="Key"),\n+                value_type=field.Int(title="Val"),\n             ),\n             value={"a": 1},\n         )\n@@ -993,7 +987,7 @@ def test_import_dict_nopurge(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Dict)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual({"a": 1, "x": 4, "y": 6}, self.registry["test.registry.field"])\n \n@@ -1013,7 +1007,7 @@ def test_import_choice_field(self):\n """\n \n         self.registry.records["test.registry.field"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"), value=u"Old value"\n+            field.TextLine(title="Simple record", default="N/A"), value="Old value"\n         )\n \n         context = DummyImportContext(self.site, purge=False)\n@@ -1026,10 +1020,10 @@ def test_import_choice_field(self):\n             isinstance(self.registry.records["test.registry.field"].field, field.Choice)\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            [u"One", u"Two"],\n+            ["One", "Two"],\n             [\n                 t.value\n                 for t in self.registry.records["test.registry.field"].field.vocabulary\n@@ -1068,12 +1062,12 @@ def test_import_with_comments(self):\n             )\n         )\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.registry.field"].field.title\n+            "Simple record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertEqual(\n-            u"value", self.registry.records["test.registry.field"].field.__name__\n+            "value", self.registry.records["test.registry.field"].field.__name__\n         )\n-        self.assertEqual(u"N/A", self.registry["test.registry.field"])\n+        self.assertEqual("N/A", self.registry["test.registry.field"])\n \n         self.assertIn("plone.app.registry.tests.data.SomethingElse.name", self.registry)\n         self.assertIn("plone.app.registry.tests.data.SomethingElse.age", self.registry)\n@@ -1094,8 +1088,8 @@ def test_remove(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -1111,8 +1105,8 @@ def test_delete_deprecated(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n@@ -1128,16 +1122,16 @@ def test_delete_not_found(self):\n         context._files = {"registry.xml": xml}\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n         importRegistry(context)\n \n         self.assertEqual(1, len(self.registry.records))\n         self.assertEqual(\n-            u"Simple record", self.registry.records["test.export.simple"].field.title\n+            "Simple record", self.registry.records["test.export.simple"].field.title\n         )\n-        self.assertEqual(u"Sample value", self.registry["test.export.simple"])\n+        self.assertEqual("Sample value", self.registry["test.export.simple"])\n \n     def test_import_folder(self):\n         xml1 = """\\\n@@ -1173,7 +1167,7 @@ def test_import_folder(self):\n         context = DummyImportContext(self.site, purge=False)\n         context._files = {\n             "registry.xml": xml1,\n-            ".ignored_file" : "",\n+            ".ignored_file": "",\n             "registry/foo2.xml": xml2,\n             "registry/foo3.xml": xml3,\n         }\n@@ -1194,10 +1188,10 @@ def test_import_folder(self):\n                 isinstance(self.registry.records[fieldname].field, field.TextLine)\n             )\n             self.assertEqual(\n-                u"Simple record", self.registry.records[fieldname].field.title\n+                "Simple record", self.registry.records[fieldname].field.title\n             )\n-            self.assertEqual(u"value", self.registry.records[fieldname].field.__name__)\n-            self.assertEqual(u"N/A", self.registry[fieldname])\n+            self.assertEqual("value", self.registry.records[fieldname].field.__name__)\n+            self.assertEqual("N/A", self.registry[fieldname])\n \n     def test_import_jsonfield_only(self):\n         xml = """\\\n@@ -1222,7 +1216,7 @@ def test_import_jsonfield_only(self):\n             )\n         )\n         self.assertEqual(\n-            u"JSON record", self.registry.records["test.registry.field"].field.title\n+            "JSON record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertDictEqual({}, self.registry["test.registry.field"])\n \n@@ -1250,7 +1244,7 @@ def test_import_jsonfield_with_value(self):\n             )\n         )\n         self.assertEqual(\n-            u"JSON record", self.registry.records["test.registry.field"].field.title\n+            "JSON record", self.registry.records["test.registry.field"].field.title\n         )\n         self.assertDictEqual(\n             {\n@@ -1287,8 +1281,8 @@ def test_export_simple(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         context = DummyExportContext(self.site)\n@@ -1324,8 +1318,8 @@ def test_export_with_interface(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         self.registry.registerInterface(data.ITestSettings)\n@@ -1354,12 +1348,12 @@ def test_export_field_ref(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = refRecord = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         self.registry.records["test.export.simple.override"] = Record(\n-            FieldRef(refRecord.__name__, refRecord.field), value=u"Another value"\n+            FieldRef(refRecord.__name__, refRecord.field), value="Another value"\n         )\n \n         context = DummyExportContext(self.site)\n@@ -1385,7 +1379,7 @@ def test_export_with_collection(self):\n   </record>\n </registry>"""\n         self.registry.records["test.export.simple"] = Record(\n-            field.List(title=u"Simple record", value_type=field.Int(title=u"Val")),\n+            field.List(title="Simple record", value_type=field.Int(title="Val")),\n             value=[2],\n         )\n \n@@ -1418,10 +1412,10 @@ def test_export_with_dict(self):\n \n         self.registry.records["test.export.dict"] = Record(\n             field.Dict(\n-                title=u"Dict",\n+                title="Dict",\n                 default={},\n-                key_type=field.ASCIILine(title=u"Key"),\n-                value_type=field.Int(title=u"Value"),\n+                key_type=field.ASCIILine(title="Key"),\n+                value_type=field.Int(title="Value"),\n             ),\n             value={"a": 1},\n         )\n@@ -1446,7 +1440,7 @@ def test_export_with_choice(self):\n </registry>"""\n \n         self.registry.records["test.export.choice"] = Record(\n-            field.Choice(title=u"Simple record", vocabulary=u"dummy.vocab")\n+            field.Choice(title="Simple record", vocabulary="dummy.vocab")\n         )\n \n         context = DummyExportContext(self.site)\n@@ -1469,8 +1463,8 @@ def test_export_with_missing_schema_does_not_error(self):\n </registry>"""\n \n         self.registry.records["test.export.simple"] = Record(\n-            field.TextLine(title=u"Simple record", default=u"N/A"),\n-            value=u"Sample value",\n+            field.TextLine(title="Simple record", default="N/A"),\n+            value="Sample value",\n         )\n \n         # Note: These are nominally read-only!\n@@ -1502,7 +1496,7 @@ def test_export_with_jsonfield(self):\n \n         self.registry.records["test.export.field"] = Record(\n             field.JSONField(\n-                title=u"Dict",\n+                title="Dict",\n                 default={},\n             ),\n             value={\ndiff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py\nindex 6dc0a53..41af7b7 100644\n--- a/plone/app/registry/tests/test_setup.py\n+++ b/plone/app/registry/tests/test_setup.py\n@@ -1,8 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.registry.testing import PLONE_APP_REGISTRY_INTEGRATION_TESTING\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n+\n import unittest\n \n \n@@ -12,13 +12,13 @@ class TestSetup(unittest.TestCase):\n \n     def test_tool_installed(self):\n \n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n \n-        self.assertIn(\'portal_registry\', portal.objectIds())\n+        self.assertIn("portal_registry", portal.objectIds())\n         self.assertTrue(IRegistry.providedBy(portal.portal_registry))\n \n     def test_local_utility_installed(self):\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n \n         registry = getUtility(IRegistry)\n         self.assertTrue(aq_base(registry) is aq_base(portal.portal_registry))\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..b616d8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 475b449..853a5bc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'2.0.0a9.dev0\'\n+\n+version = "2.0.0a9.dev0"\n \n setup(\n-    name=\'plone.app.registry\',\n+    name="plone.app.registry",\n     version=version,\n     description="Zope 2 and Plone  integration for plone.registry",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n@@ -26,32 +25,30 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone registry settings configuration\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.app.registry\',\n-    license=\'GPL\',\n+    keywords="plone registry settings configuration",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.app.registry",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'lxml\',\n-        \'plone.app.z3cform\',\n-        \'plone.autoform>=1.0b2\',\n-        \'plone.registry>=1.0b1\',\n-        \'plone.supermodel>=1.1dev\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.statusmessages\',\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'Zope2\',\n+        "lxml",\n+        "plone.app.z3cform",\n+        "plone.autoform>=1.0b2",\n+        "plone.base",\n+        "plone.registry>=1.0b1",\n+        "plone.supermodel>=1.1dev",\n+        "Products.statusmessages",\n+        "setuptools",\n     ],\n-    extras_require={\'test\': [\'plone.app.testing\', ]},\n+    extras_require={\n+        "test": [\n+            "plone.app.testing",\n+        ]\n+    },\n     entry_points="""\n     # -*- Entry points: -*-\n     """,\n'

