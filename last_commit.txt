Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:51+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/f62aab2d0ff9e7917e25b41e211ab67f1b7a83f5

Add alternative urls with manual=True.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 2899ad1bf..9b2213822 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -125,7 +125,9 @@ def __call__(self):\n             else:\n                 del form[\'redirection\']\n                 storage.add(\n-                    redirection, "/".join(self.context.getPhysicalPath())\n+                    redirection,\n+                    "/".join(self.context.getPhysicalPath()),\n+                    manual=True,\n                 )\n                 status.addStatusMessage(\n                     _(u"Alternative url added."), type=\'info\'\n@@ -286,7 +288,7 @@ def add(self, redirection, target, portal, storage, status):\n         if err:\n             status.addStatusMessage(_(err), type=\'error\')\n         else:\n-            storage.add(abs_redirection, abs_target)\n+            storage.add(abs_redirection, abs_target, manual=True)\n             status.addStatusMessage(\n                 _(u"Alternative url from {0} to {1} added.").format(\n                     abs_redirection, abs_target\n@@ -354,7 +356,7 @@ def upload(self, file, portal, storage, status):\n \n         if not had_errors:\n             for abs_redirection, abs_target in successes:\n-                storage.add(abs_redirection, abs_target)\n+                storage.add(abs_redirection, abs_target, manual=True)\n             status.addStatusMessage(\n                 _(\n                     u"${count} alternative urls added.",\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/22a944683c21933218a434aa7432a4cbdcae93c2

Redirects control panel: added Download button.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex a117d3401..c1a6d17f4 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -204,6 +204,16 @@\n             All existing alternative urls for this site\n           </legend>\n \n+          <div>\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Download all as CSV"\n+                name="form.button.Download"\n+                i18n:attributes="value"\n+              />\n+          </div>\n+\n           <label for="filter-existing-aliases-q" i18n:translate="">Filter by prefix</label>\n           <input\n               type="text"\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 9b2213822..7531ace5f 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from csv import writer\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n from plone.memoize.view import memoize\n@@ -258,6 +259,8 @@ def __call__(self):\n                 del form[\'target_path\']\n         elif \'form.button.Upload\' in form:\n             self.upload(form[\'file\'], portal, storage, status)\n+        elif \'form.button.Download\' in form:\n+            return self.download()\n \n         return self.index()\n \n@@ -365,6 +368,31 @@ def upload(self, file, portal, storage, status):\n                 type=\'info\',\n             )\n \n+    def download(self):\n+        """Download all redirects as CSV."""\n+        # TODO: saving to a file and streaming as a blob would be useful:\n+        # with one million redirects you easily get 30 MB.\n+        stream = StringIO()\n+        csv_writer = writer(stream)\n+        csv_writer.writerow((\'old path\', \'new path\', \'datetime\', \'manual\'))\n+        storage = getUtility(IRedirectionStorage)\n+        paths = storage._paths\n+        for old_path, new_info in paths.items():\n+            row = [old_path]\n+            if not isinstance(new_info, tuple):\n+                # Old data: only a single path, no date and manual boolean.\n+                new_info = (new_info,)\n+            row.extend(new_info)\n+            csv_writer.writerow(row)\n+        contents = stream.getvalue()\n+        response = self.request.response\n+        response.setHeader(\'Content-Type\', \'text/csv\')\n+        response.setHeader(\'Content-Length\', len(contents))\n+        response.setHeader(\n+            \'Content-Disposition\', \'attachment; filename=redirects.csv\'\n+        )\n+        return contents\n+\n     @memoize\n     def view_url(self):\n         return self.context.absolute_url() + \'/@@redirection-controlpanel\'\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/cffc600c05c668e548dcc4fe9f2c83e7bc933bf4

Redirects control panel: download as a stream.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 7531ace5f..039f30b27 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -16,6 +16,13 @@\n from zope.i18nmessageid import MessageFactory\n \n import csv\n+import tempfile\n+\n+try:\n+    # use this to stream csv data if we can\n+    from ZPublisher.Iterators import filestream_iterator\n+except ImportError:\n+    filestream_iterator = None\n \n \n _ = MessageFactory(\'plone\')\n@@ -369,29 +376,39 @@ def upload(self, file, portal, storage, status):\n             )\n \n     def download(self):\n-        """Download all redirects as CSV."""\n-        # TODO: saving to a file and streaming as a blob would be useful:\n-        # with one million redirects you easily get 30 MB.\n-        stream = StringIO()\n-        csv_writer = writer(stream)\n-        csv_writer.writerow((\'old path\', \'new path\', \'datetime\', \'manual\'))\n-        storage = getUtility(IRedirectionStorage)\n-        paths = storage._paths\n-        for old_path, new_info in paths.items():\n-            row = [old_path]\n-            if not isinstance(new_info, tuple):\n-                # Old data: only a single path, no date and manual boolean.\n-                new_info = (new_info,)\n-            row.extend(new_info)\n-            csv_writer.writerow(row)\n-        contents = stream.getvalue()\n+        """Download all redirects as CSV.\n+\n+        We save to a temporary file and try to stream it as a blob:\n+        with one million redirects you easily get 30 MB, which is slow as non-blob.\n+        """\n+        file_descriptor, file_path = tempfile.mkstemp(\n+            suffix=\'.csv\', prefix=\'redirects_\'\n+        )\n+        with open(file_path, \'w\') as stream:\n+            csv_writer = writer(stream)\n+            csv_writer.writerow((\'old path\', \'new path\', \'datetime\', \'manual\'))\n+            storage = getUtility(IRedirectionStorage)\n+            paths = storage._paths\n+            for old_path, new_info in paths.items():\n+                row = [old_path]\n+                if not isinstance(new_info, tuple):\n+                    # Old data: only a single path, no date and manual boolean.\n+                    new_info = (new_info,)\n+                row.extend(new_info)\n+                csv_writer.writerow(row)\n+        with open(file_path) as stream:\n+            contents = stream.read()\n+            length = len(contents)\n+\n         response = self.request.response\n         response.setHeader(\'Content-Type\', \'text/csv\')\n-        response.setHeader(\'Content-Length\', len(contents))\n+        response.setHeader(\'Content-Length\', length)\n         response.setHeader(\n             \'Content-Disposition\', \'attachment; filename=redirects.csv\'\n         )\n-        return contents\n+        if filestream_iterator is None:\n+            return contents\n+        return filestream_iterator(file_path, \'rb\')\n \n     @memoize\n     def view_url(self):\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/229a28153432efb1bca6676cf084c48b8037f9d6

Redirects control panel: test the download.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 039f30b27..0d2504de3 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -408,6 +408,9 @@ def download(self):\n         )\n         if filestream_iterator is None:\n             return contents\n+        # TODO: this is not enough to really stream the file.\n+        # I think we would need to handle Request-Range, like in the old\n+        # plone.app.blob.download.handleRequestRange\n         return filestream_iterator(file_path, \'rb\')\n \n     @memoize\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex cd36ef3ed..acaa9313e 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from DateTime import DateTime\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -418,3 +419,50 @@ def test_absolutize_path(self):\n                 \'The provided target object does not exist.\',\n             ),\n         )\n+\n+    def test_download_empty(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        self.assertEqual(\n+            self.browser.headers[\'Content-Disposition\'],\n+            \'attachment; filename=redirects.csv\',\n+        )\n+        contents = self.browser.contents.splitlines()\n+        self.assertEqual(len(contents), 1)\n+        self.assertEqual(contents[0], \'old path,new path,datetime,manual\')\n+\n+    def test_download_bigger(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n+        for i in range(2000):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                now=now,\n+                manual=True,\n+            )\n+        transaction.commit()\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        self.assertEqual(\n+            self.browser.headers[\'Content-Disposition\'],\n+            \'attachment; filename=redirects.csv\',\n+        )\n+        contents = self.browser.contents.splitlines()\n+        # pop the header\n+        self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n+        self.assertEqual(len(contents), 2000)\n+        # The order is probably the alphabetical order of the old path,\n+        # but that is not important and may change,\n+        # so let\'s sort it in the tests for good measure.\n+        # Note that \'999\' sorts alphabetically after \'1999\'.\n+        contents.sort()\n+        self.assertEqual(\n+            contents[0],\n+            \'/plone/foo/0,/plone/bar/0,2019/01/27 10:00:00 GMT-3,True\',\n+        )\n+        self.assertEqual(\n+            contents[1999],\n+            \'/plone/foo/999,/plone/bar/999,2019/01/27 10:00:00 GMT-3,True\',\n+        )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d24ee6f0ad95d3b3fdb7c18a5c1536b5284aeeff

Redirects control panel: test the upload.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex acaa9313e..4e3e21799 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -420,6 +420,66 @@ def test_absolutize_path(self):\n             ),\n         )\n \n+    def test_upload_correct(self):\n+        from Products.CMFPlone.tests import dummy\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # Note: the targets must exist as actual content.\n+        data = [\n+            (b\'/old-home-page.asp\', b\'/test-folder\'),\n+            (b\'/people/JoeT\', b\'/Members\'),\n+        ]\n+        csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n+        upload = dummy.File(filename=\'redirects.csv\', data=csv)\n+        self.browser.getControl(name=\'file\').value = upload\n+        # We need to explicitly set the filename a second time\n+        # because it gets lost...\n+        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'No alternative urls were added.\', self.browser.contents\n+        )\n+        self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n+        storage = getUtility(IRedirectionStorage)\n+        self.assertEqual(len(storage), 2)\n+        self.assertEqual(\n+            storage.get(\'/plone/old-home-page.asp\'), \'/plone/test-folder\'\n+        )\n+        self.assertEqual(storage.get(\'/plone/people/JoeT\'), \'/plone/Members\')\n+        # Test the internals.\n+        redirect = storage._paths[\'/plone/old-home-page.asp\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertIsInstance(redirect[1], DateTime)\n+        self.assertEqual(redirect[2], True)  # manual\n+\n+    def test_upload_bad(self):\n+        from Products.CMFPlone.tests import dummy\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # The targets must exist as actual content.\n+        # We try a good one and one that does not exist.\n+        data = [\n+            (b\'/old-home-page.asp\', b\'/test-folder\'),\n+            (b\'/people/JoeT\', b\'/no-such-content\'),\n+        ]\n+        csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n+        upload = dummy.File(filename=\'redirects.csv\', data=csv)\n+        self.browser.getControl(name=\'file\').value = upload\n+        # We need to explicitly set the filename a second time\n+        # because it gets lost...\n+        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertIn(\'No alternative urls were added.\', self.browser.contents)\n+        self.assertIn(\'Please correct these errors\', self.browser.contents)\n+        storage = getUtility(IRedirectionStorage)\n+        self.assertEqual(len(storage), 0)\n+\n     def test_download_empty(self):\n         self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         self.browser.getControl(name=\'form.button.Download\').click()\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c2a519e83572247d8030cdd3fcf61acdf7c4075c

Redirects control panel: test uploading with various columns.

And in case of errors, always report the detected delimiter.
I was getting delimiter 'w' in tests...

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 0d2504de3..7e93aa874 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from DateTime.interfaces import DateTimeError\n from csv import writer\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n@@ -16,6 +18,7 @@\n from zope.i18nmessageid import MessageFactory\n \n import csv\n+import logging\n import tempfile\n \n try:\n@@ -26,6 +29,7 @@\n \n \n _ = MessageFactory(\'plone\')\n+logger = logging.getLogger(__name__)\n \n \n def absolutize_path(path, is_source=True):\n@@ -326,11 +330,33 @@ def upload(self, file, portal, storage, status):\n         dialect = csv.Sniffer().sniff(file.readline() + file.readline())\n         file.seek(0)\n \n-        successes = []  # list of tuples: (abs_redirection, target)\n+        # key is old path, value is tuple(new path, datetime, manual)\n+        successes = {}\n         had_errors = False\n         for i, fields in enumerate(csv.reader(file, dialect)):\n-            if len(fields) == 2:\n-                redirection, target = fields\n+            if len(fields) >= 2:\n+                redirection = fields[0]\n+                target = fields[1]\n+\n+                now = None\n+                manual = True\n+                if len(fields) >= 3:\n+                    dt = fields[2]\n+                    if dt:\n+                        try:\n+                            now = DateTime(dt)\n+                        except DateTimeError:\n+                            logger.warning(\n+                                \'Failed to parse as DateTime: %s\', dt\n+                            )\n+                            now = None\n+                if len(fields) >= 4:\n+                    manual = fields[3].lower()\n+                    # Compare first character with false, no, 0.\n+                    if manual and manual[0] in \'fn0\':\n+                        manual = False\n+                    else:\n+                        manual = True\n                 abs_redirection, err = absolutize_path(\n                     redirection, is_source=True\n                 )\n@@ -338,6 +364,13 @@ def upload(self, file, portal, storage, status):\n                     target, is_source=False\n                 )\n                 if err and target_err:\n+                    if (\n+                        i == 0\n+                        and not redirection.startswith(\'/\')\n+                        and not target.startswith(\'/\')\n+                    ):\n+                        # First line is a header.  Ignore this.\n+                        continue\n                     err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n                 elif target_err:\n                     err = target_err\n@@ -349,11 +382,11 @@ def upload(self, file, portal, storage, status):\n                             u"an endless cycle of redirects."\n                         )\n             else:\n-                err = _(u"Each line must have 2 columns.")\n+                err = _(u"Each line must have 2 or more columns.")\n \n             if not err:\n                 if not had_errors:  # else don\'t bother\n-                    successes.append((abs_redirection, abs_target))\n+                    successes[abs_redirection] = (abs_target, now, manual)\n             else:\n                 had_errors = True\n                 self.csv_errors.append(\n@@ -365,8 +398,7 @@ def upload(self, file, portal, storage, status):\n                 )\n \n         if not had_errors:\n-            for abs_redirection, abs_target in successes:\n-                storage.add(abs_redirection, abs_target, manual=True)\n+            storage.update(successes)\n             status.addStatusMessage(\n                 _(\n                     u"${count} alternative urls added.",\n@@ -374,6 +406,19 @@ def upload(self, file, portal, storage, status):\n                 ),\n                 type=\'info\',\n             )\n+        else:\n+            self.csv_errors.insert(\n+                0,\n+                dict(\n+                    line_number=0,\n+                    line=\'\',\n+                    message=_(\n+                        u\'msg_delimiter\',\n+                        default=u"Delimiter detected: ${delimiter}",\n+                        mapping={\'delimiter\': dialect.delimiter},\n+                    ),\n+                ),\n+            )\n \n     def download(self):\n         """Download all redirects as CSV.\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 4e3e21799..c04b5901e 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -7,6 +7,7 @@\n from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from Products.CMFPlone.tests import dummy\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n@@ -420,9 +421,7 @@ def test_absolutize_path(self):\n             ),\n         )\n \n-    def test_upload_correct(self):\n-        from Products.CMFPlone.tests import dummy\n-\n+    def test_upload_two_columns(self):\n         self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         # Note: the targets must exist as actual content.\n         data = [\n@@ -455,9 +454,109 @@ def test_upload_correct(self):\n         self.assertIsInstance(redirect[1], DateTime)\n         self.assertEqual(redirect[2], True)  # manual\n \n-    def test_upload_bad(self):\n-        from Products.CMFPlone.tests import dummy\n+    def test_upload_four_columns(self):\n+        # Two columns are the minimum,\n+        # but we can handle a third column with a datetime,\n+        # a fourth column with manual True/False,\n+        # and more columns that we ignore.\n+        now = DateTime()\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # Note: the targets must exist as actual content.\n+        data = [\n+            # We can first have a header, which should be ignored.\n+            # Second one should have the same number of columns,\n+            # otherwise the delimiter detection can get it wrong.\n+            (b\'old path\', b\'new path\', b\'datetime\', b\'manual\'),\n+            # bad dates are silently ignored\n+            (b\'/baddate\', b\'/test-folder\', b\'2006-13-62\', b\'yes\'),\n+            # two columns:\n+            (b\'/two\', b\'/test-folder\'),\n+            # third column with date:\n+            (b\'/three\', b\'/test-folder\', b\'2003-01-31\'),\n+            # fourth column with manual:\n+            (b\'/four\', b\'/test-folder\', b\'2004-01-31\', b\'False\'),\n+            # fifth column is ignored:\n+            (b\'/five\', b\'/test-folder\', b\'2005-01-31\', b\'True\', b\'ignored\'),\n+            # manual can be \'0\' (or anything starting with f/F/n/N/0)\n+            (b\'/zero\', b\'/test-folder\', b\'2000-01-31\', b\'0\'),\n+        ]\n+        csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n+        upload = dummy.File(filename=\'redirects.csv\', data=csv)\n+        self.browser.getControl(name=\'file\').value = upload\n+        # We need to explicitly set the filename a second time\n+        # because it gets lost...\n+        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'No alternative urls were added.\', self.browser.contents\n+        )\n+        self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n \n+        # All five lines have been added.\n+        storage = getUtility(IRedirectionStorage)\n+        self.assertEqual(len(storage), 6)\n+        self.assertEqual(storage.get(\'/plone/two\'), \'/plone/test-folder\')\n+        old_paths = [\n+            \'/plone/baddate\',\n+            \'/plone/five\',\n+            \'/plone/four\',\n+            \'/plone/three\',\n+            \'/plone/two\',\n+            \'/plone/zero\',\n+        ]\n+        self.assertListEqual(sorted(list(storage)), old_paths)\n+        self.assertListEqual(\n+            sorted(list(storage.redirects(\'/plone/test-folder\'))), old_paths\n+        )\n+        # Test the internals.\n+\n+        # two columns:\n+        # (b\'/two\', b\'/test-folder\'),\n+        redirect = storage._paths[\'/plone/two\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertIsInstance(redirect[1], DateTime)\n+        self.assertGreater(redirect[1], now)\n+        self.assertEqual(redirect[2], True)  # manual\n+\n+        # third column with date:\n+        # (b\'/three\', b\'/test-folder\', b\'2003-01-31\'),\n+        redirect = storage._paths[\'/plone/three\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2003-01-31\'))\n+        self.assertEqual(redirect[2], True)\n+\n+        # fourth column with manual:\n+        # (b\'/four\', b\'/test-folder\', b\'2004-01-31\', b\'False\'),\n+        redirect = storage._paths[\'/plone/four\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2004-01-31\'))\n+        self.assertEqual(redirect[2], False)\n+\n+        # fifth column is ignored:\n+        # (b\'/five\', b\'/test-folder\', b\'2005-01-31\', b\'True\', b\'ignored\'),\n+        redirect = storage._paths[\'/plone/five\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2005-01-31\'))\n+        self.assertEqual(redirect[2], True)\n+\n+        # manual can be \'0\' (or anything starting with f/F/n/N/0)\n+        # (b\'/zero\', b\'/test-folder\', b\'2000-01-31\', b\'0\'),\n+        redirect = storage._paths[\'/plone/zero\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2000-01-31\'))\n+        self.assertEqual(redirect[2], False)\n+\n+        # bad dates are silently ignored\n+        # (b\'/baddate\', b\'/test-folder\', b\'2006-13-62\', b\'yes\'),\n+        redirect = storage._paths[\'/plone/baddate\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertGreater(redirect[1], now)\n+        self.assertEqual(redirect[2], True)\n+\n+    def test_upload_bad(self):\n         self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         # The targets must exist as actual content.\n         # We try a good one and one that does not exist.\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8631e15d419916a023ba598bd53a3c0d407277b8

Redirects: test uploading a download and downloading an upload.

This actually fails, because the download contains /plone/bar/0 and the upload should contain only /bar/0.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex c04b5901e..6226a89d0 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -8,6 +8,7 @@\n from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.tests import dummy\n+from Products.CMFPlone.utils import safe_bytes\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n@@ -625,3 +626,61 @@ def test_download_bigger(self):\n             contents[1999],\n             \'/plone/foo/999,/plone/bar/999,2019/01/27 10:00:00 GMT-3,True\',\n         )\n+\n+    def test_download_upload(self):\n+        # Test uploading a download and downloading an upload.\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n+        for i in range(10):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                now=now,\n+                manual=True,\n+            )\n+        transaction.commit()\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        self.assertEqual(\n+            self.browser.headers[\'Content-Disposition\'],\n+            \'attachment; filename=redirects.csv\',\n+        )\n+        downloaded_contents = self.browser.contents\n+        contents = downloaded_contents.splitlines()\n+        # pop the header\n+        self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n+        self.assertEqual(len(contents), 10)\n+        contents.sort()\n+        self.assertEqual(\n+            contents[0],\n+            \'/plone/foo/0,/plone/bar/0,2019/01/27 10:00:00 GMT-3,True\',\n+        )\n+        # clear the storage\n+        storage.clear()\n+        transaction.commit()\n+        # download is empty\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        contents = self.browser.contents.splitlines()\n+        self.assertEqual(len(contents), 1)\n+        self.assertEqual(contents[0], \'old path,new path,datetime,manual\')\n+        # upload the original download\n+        upload = dummy.File(\n+            filename=\'redirects.csv\', data=safe_bytes(downloaded_contents)\n+        )\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'file\').value = upload\n+        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'The provided target object does not exist.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'No alternative urls were added.\', self.browser.contents\n+        )\n+        self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n+        self.assertEqual(len(storage), 10)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/4848615d0079bf62340c39c90dd8d44930fc1387

Redirects: let the download strip the portal path.

Then you can use the download as upload.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 7e93aa874..5e60b0142 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -426,6 +426,9 @@ def download(self):\n         We save to a temporary file and try to stream it as a blob:\n         with one million redirects you easily get 30 MB, which is slow as non-blob.\n         """\n+        portal = getSite()\n+        portal_path = "/".join(portal.getPhysicalPath())\n+        len_portal_path = len(portal_path)\n         file_descriptor, file_path = tempfile.mkstemp(\n             suffix=\'.csv\', prefix=\'redirects_\'\n         )\n@@ -434,12 +437,20 @@ def download(self):\n             csv_writer.writerow((\'old path\', \'new path\', \'datetime\', \'manual\'))\n             storage = getUtility(IRedirectionStorage)\n             paths = storage._paths\n+            # Note that the old and new paths start with /plone-site-id.\n+            # We strip this, as it is superfluous, and we would get errors\n+            # when using this download as an upload.\n             for old_path, new_info in paths.items():\n+                if old_path.startswith(portal_path):\n+                    old_path = old_path[len_portal_path:]\n                 row = [old_path]\n                 if not isinstance(new_info, tuple):\n                     # Old data: only a single path, no date and manual boolean.\n                     new_info = (new_info,)\n                 row.extend(new_info)\n+                new_path = row[1]\n+                if new_path.startswith(portal_path):\n+                    row[1] = new_path[len_portal_path:]\n                 csv_writer.writerow(row)\n         with open(file_path) as stream:\n             contents = stream.read()\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 6226a89d0..b7ceff448 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -620,26 +620,30 @@ def test_download_bigger(self):\n         contents.sort()\n         self.assertEqual(\n             contents[0],\n-            \'/plone/foo/0,/plone/bar/0,2019/01/27 10:00:00 GMT-3,True\',\n+            \'/foo/0,/bar/0,2019/01/27 10:00:00 GMT-3,True\',\n         )\n         self.assertEqual(\n             contents[1999],\n-            \'/plone/foo/999,/plone/bar/999,2019/01/27 10:00:00 GMT-3,True\',\n+            \'/foo/999,/bar/999,2019/01/27 10:00:00 GMT-3,True\',\n         )\n \n     def test_download_upload(self):\n         # Test uploading a download and downloading an upload.\n+\n+        # 1. Manually add some redirects.\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n         for i in range(10):\n             storage.add(\n                 \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n-                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/test-folder\'.format(portal_path),\n                 now=now,\n                 manual=True,\n             )\n         transaction.commit()\n+\n+        # 2. Download the redirects.\n         self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         self.browser.getControl(name=\'form.button.Download\').click()\n         self.assertEqual(\n@@ -648,24 +652,24 @@ def test_download_upload(self):\n         )\n         downloaded_contents = self.browser.contents\n         contents = downloaded_contents.splitlines()\n-        # pop the header\n         self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n         self.assertEqual(len(contents), 10)\n         contents.sort()\n         self.assertEqual(\n             contents[0],\n-            \'/plone/foo/0,/plone/bar/0,2019/01/27 10:00:00 GMT-3,True\',\n+            \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\',\n         )\n-        # clear the storage\n+\n+        # 3. clear the redirect storage\n         storage.clear()\n         transaction.commit()\n-        # download is empty\n         self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         self.browser.getControl(name=\'form.button.Download\').click()\n         contents = self.browser.contents.splitlines()\n         self.assertEqual(len(contents), 1)\n         self.assertEqual(contents[0], \'old path,new path,datetime,manual\')\n-        # upload the original download\n+\n+        # 4. upload the original download\n         upload = dummy.File(\n             filename=\'redirects.csv\', data=safe_bytes(downloaded_contents)\n         )\n@@ -684,3 +688,17 @@ def test_download_upload(self):\n         )\n         self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n         self.assertEqual(len(storage), 10)\n+\n+        # 5. download the upload\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        new_downloaded_contents = self.browser.contents\n+        contents = downloaded_contents.splitlines()\n+        self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n+        self.assertEqual(len(contents), 10)\n+        contents.sort()\n+        self.assertEqual(\n+            contents[0],\n+            \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\',\n+        )\n+        # and it is actually the same as the original download\n+        self.assertEqual(new_downloaded_contents, downloaded_contents)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c23700dd571cb2b1c686458a44553c7f35302687

Redirects: update the example bulk upload to contain datetime and manual boolean.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex c1a6d17f4..bfebb7a12 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -146,13 +146,14 @@\n           <p i18n:translate="description_bulk_upload">\n             Add many alternative urls at once by uploading a CSV file. The first column should be the path to\n             redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative,\n-            starting with a slash (/).\n+            starting with a slash (/). An optional third colum can contain a date and time.\n+            An optional fourth column can contain a boolean to mark as a manual redirect (default true).\n           </p>\n           <p>\n             <tal:block i18n:translate="example_caption_bulk_upload">Example:</tal:block><br />\n             <code i18n:translate="example_bulk_upload">\n-              /old-home-page.asp,/front-page<br />\n-              /people/JoeT,/Users/joe-thurston\n+              /old-home-page.asp,/front-page,2019/01/27 10:42:59 GMT+1,true<br />\n+              /people/JoeT,/Users/joe-thurston,2018-12-31,false\n             </code>\n           </p>\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex b7ceff448..f122c2087 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -475,7 +475,7 @@ def test_upload_four_columns(self):\n             # third column with date:\n             (b\'/three\', b\'/test-folder\', b\'2003-01-31\'),\n             # fourth column with manual:\n-            (b\'/four\', b\'/test-folder\', b\'2004-01-31\', b\'False\'),\n+            (b\'/four\', b\'/test-folder\', b\'2004/01/27 10:00:00 GMT-3\', b\'False\'),\n             # fifth column is ignored:\n             (b\'/five\', b\'/test-folder\', b\'2005-01-31\', b\'True\', b\'ignored\'),\n             # manual can be \'0\' (or anything starting with f/F/n/N/0)\n@@ -530,10 +530,10 @@ def test_upload_four_columns(self):\n         self.assertEqual(redirect[2], True)\n \n         # fourth column with manual:\n-        # (b\'/four\', b\'/test-folder\', b\'2004-01-31\', b\'False\'),\n+        # (b\'/four\', b\'/test-folder\', b\'2004/01/27 10:00:00 GMT-3\', b\'False\'),\n         redirect = storage._paths[\'/plone/four\']\n         self.assertEqual(redirect[0], \'/plone/test-folder\')\n-        self.assertEqual(redirect[1], DateTime(\'2004-01-31\'))\n+        self.assertEqual(redirect[1], DateTime(\'2004/01/27 10:00:00 GMT-3\'))\n         self.assertEqual(redirect[2], False)\n \n         # fifth column is ignored:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/45ad431cda0b79f907fad068b7fe39c57a7d21f8

Redirects: explain more on redirects control panel and view.

Text taken from comment by @djay:
https://github.com/plone/Products.CMFPlone/issues/1486#issuecomment-463072762

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex bfebb7a12..7fe0b966a 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -54,6 +54,7 @@\n           <legend i18n:translate="add_alias">\n             Add a new alternative url\n           </legend>\n+          <p i18n:translate="description_change_primary_url">To change the primary url of content, use Actions > Rename.</p>\n \n           <div class="field"\n                tal:define="error view/form_errors/redirection|nothing"\n@@ -79,6 +80,7 @@\n \n           <div class="formHelp" i18n:translate="help_alias">\n             Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+            Only urls that result in a 404 not found page will result in a redirect occurring.\n           </div>\n \n           <input\n@@ -112,6 +114,7 @@\n \n           <div class="formHelp" i18n:translate="help_target_path">\n             Enter the absolute path of the target. The path must start with \'/\'.\n+            Target must exist or be an existing alternative url path to the target.\n           </div>\n \n           <input\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex 617fbac3b..90c4c3b4f 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -39,6 +39,7 @@\n         Using this form, you can manage alternative urls for an item. This\n         is an easy way to make an item available under two different URLs.\n       </p>\n+      <p i18n:translate="description_change_primary_url">To change the primary url of content, use Actions > Rename.</p>\n \n       <form\n           action="${view/view_url}"\n@@ -71,6 +72,7 @@\n \n             <div class="formHelp" i18n:translate="help_alias">\n               Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+              Only urls that result in a 404 not found page will result in a redirect occurring.\n             </div>\n \n             <input\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/5f21e71911a44904c89ba4dfa6005c8e909209de

Test removing aliases from context and from control panel.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex f122c2087..4a36a2237 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -72,6 +72,37 @@ def test_redirection_controlpanel_add_redirect(self):\n             u\'Redirection storage should have path "{0}"\'.format(storage_path),\n         )\n \n+    def test_redirection_controlpanel_remove_redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        for i in range(30):\n+            storage[\'/plone/alias{0}\'.format(i)] = \'/plone/test-folder\'\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # A batch of 15 is shown, so some are missing.\n+        self.assertTrue(\'/plone/alias1\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias10\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias19\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias2\' in self.browser.contents)\n+        self.assertFalse(\'/plone/alias29\' in self.browser.contents)\n+        # query aliases starting with /alias2\n+        self.browser.getControl(name=\'q\').value = \'/alias2\'\n+        self.browser.getControl(name=\'form.button.filter\').click()\n+        self.assertFalse(\'/plone/alias1\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias2\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias29\' in self.browser.contents)\n+        # Remove two.\n+        self.browser.getControl(name=\'redirects:tuple\').value = [\n+            \'/plone/alias2\',\n+            \'/plone/alias20\',\n+        ]\n+        self.browser.getControl(name=\'form.button.Remove\').click()\n+        self.assertFalse(\'/plone/alias2\' in storage)\n+        self.assertFalse(\'/plone/alias20\' in storage)\n+        self.assertTrue(\'/plone/alias1\' in storage)\n+        self.assertTrue(\'/plone/alias29\' in storage)\n+        self.assertEqual(storage.get(\'/plone/alias29\'), \'/plone/test-folder\')\n+\n     def test_redirection_controlpanel_set(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n@@ -264,6 +295,32 @@ def test_manage_aliases_standard(self):\n         self.assertTrue(storage.has_path(\'/plone/alias\'))\n         self.assertEqual(storage.get(\'/plone/alias\'), \'/plone/test-folder\')\n \n+    def test_manage_aliases_remove(self):\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+        storage[\'/plone/alias1\'] = \'/plone/test-folder\'\n+        storage[\'/plone/alias2\'] = \'/plone/test-folder\'\n+        storage[\'/plone/alias3\'] = \'/plone/test-folder\'\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirects:tuple\').value = [\n+            \'/plone/alias1\',\n+            \'/plone/alias2\',\n+        ]\n+        self.browser.getControl(name=\'form.button.Remove\').click()\n+        with open(\'/tmp/test.html\', \'w\') as testfile:\n+            testfile.write(self.browser.contents)\n+\n+        self.assertTrue(\n+            \'Alternative urls removed.\' in self.browser.contents,\n+            u\'Message for removed alternative url missing\',\n+        )\n+        self.assertFalse(\'/plone/alias1\' in storage)\n+        self.assertFalse(\'/plone/alias2\' in storage)\n+        self.assertTrue(\'/plone/alias3\' in storage)\n+        self.assertEqual(storage.get(\'/plone/alias3\'), \'/plone/test-folder\')\n+\n     def test_manage_aliases_navigation_root(self):\n         from zope.interface import alsoProvides\n         from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -475,7 +532,12 @@ def test_upload_four_columns(self):\n             # third column with date:\n             (b\'/three\', b\'/test-folder\', b\'2003-01-31\'),\n             # fourth column with manual:\n-            (b\'/four\', b\'/test-folder\', b\'2004/01/27 10:00:00 GMT-3\', b\'False\'),\n+            (\n+                b\'/four\',\n+                b\'/test-folder\',\n+                b\'2004/01/27 10:00:00 GMT-3\',\n+                b\'False\',\n+            ),\n             # fifth column is ignored:\n             (b\'/five\', b\'/test-folder\', b\'2005-01-31\', b\'True\', b\'ignored\'),\n             # manual can be \'0\' (or anything starting with f/F/n/N/0)\n@@ -619,12 +681,10 @@ def test_download_bigger(self):\n         # Note that \'999\' sorts alphabetically after \'1999\'.\n         contents.sort()\n         self.assertEqual(\n-            contents[0],\n-            \'/foo/0,/bar/0,2019/01/27 10:00:00 GMT-3,True\',\n+            contents[0], \'/foo/0,/bar/0,2019/01/27 10:00:00 GMT-3,True\'\n         )\n         self.assertEqual(\n-            contents[1999],\n-            \'/foo/999,/bar/999,2019/01/27 10:00:00 GMT-3,True\',\n+            contents[1999], \'/foo/999,/bar/999,2019/01/27 10:00:00 GMT-3,True\'\n         )\n \n     def test_download_upload(self):\n@@ -656,8 +716,7 @@ def test_download_upload(self):\n         self.assertEqual(len(contents), 10)\n         contents.sort()\n         self.assertEqual(\n-            contents[0],\n-            \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\',\n+            contents[0], \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\'\n         )\n \n         # 3. clear the redirect storage\n@@ -697,8 +756,7 @@ def test_download_upload(self):\n         self.assertEqual(len(contents), 10)\n         contents.sort()\n         self.assertEqual(\n-            contents[0],\n-            \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\',\n+            contents[0], \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\'\n         )\n         # and it is actually the same as the original download\n         self.assertEqual(new_downloaded_contents, downloaded_contents)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/1bf80b69900d40f1e4334cdb8d98987383e6685c

Redirects: button for removing all that match the filter.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 7fe0b966a..4aae8b5d9 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -259,9 +259,14 @@\n           <div class="formControls">\n             <input class="context"\n                    type="submit"\n-                   value="Remove"\n+                   value="Remove selected"\n                    name="form.button.Remove"\n                    i18n:attributes="value" />\n+            <input class="context"\n+                   type="submit"\n+                   value="Remove all that match filter"\n+                   name="form.button.MatchRemove"\n+                   i18n:attributes="value" />\n           </div>\n \n         </fieldset>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 5e60b0142..b9dbebb50 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -180,7 +180,9 @@ def __init__(self, query=\'\'):\n             # Apparently that is the way to minize the keys we ask.\n             min_k = u\'{0:s}/{1:s}\'.format(self.portal_path, query.strip(\'/\'))\n             max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n-            self.data = self.storage._paths.keys(min=min_k, max=max_k)\n+            self.data = self.storage._paths.keys(\n+                min=min_k, max=max_k, excludemax=True\n+            )\n         else:\n             self.data = self.storage._paths.keys()\n \n@@ -240,8 +242,16 @@ def __call__(self):\n         self.csv_errors = []\n         self.form_errors = {}\n \n-        if \'form.button.Remove\' in form:\n-            redirects = form.get(\'redirects\', ())\n+        if \'form.button.Remove\' in form or \'form.button.MatchRemove\' in form:\n+            if \'form.button.Remove\' in form:\n+                redirects = form.get(\'redirects\', ())\n+            else:\n+                query = self.request.form.get(\'q\', \'\')\n+                if query and query != \'/\':\n+                    rset = RedirectionSet(query)\n+                    redirects = list(rset.data)\n+                else:\n+                    redirects = []\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) == 0:\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 4a36a2237..2baa1d4f2 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -74,7 +74,7 @@ def test_redirection_controlpanel_add_redirect(self):\n \n     def test_redirection_controlpanel_remove_redirects(self):\n         storage = getUtility(IRedirectionStorage)\n-        for i in range(30):\n+        for i in range(31):\n             storage[\'/plone/alias{0}\'.format(i)] = \'/plone/test-folder\'\n         transaction.commit()\n \n@@ -91,6 +91,10 @@ def test_redirection_controlpanel_remove_redirects(self):\n         self.assertFalse(\'/plone/alias1\' in self.browser.contents)\n         self.assertTrue(\'/plone/alias2\' in self.browser.contents)\n         self.assertTrue(\'/plone/alias29\' in self.browser.contents)\n+        # The filter could return one value too much.\n+        # This tests that we have excludemax=True in the RedirectionSet.\n+        self.assertFalse(\'/plone/alias3\' in self.browser.contents)\n+        self.assertFalse(\'/plone/alias30\' in self.browser.contents)\n         # Remove two.\n         self.browser.getControl(name=\'redirects:tuple\').value = [\n             \'/plone/alias2\',\n@@ -103,6 +107,33 @@ def test_redirection_controlpanel_remove_redirects(self):\n         self.assertTrue(\'/plone/alias29\' in storage)\n         self.assertEqual(storage.get(\'/plone/alias29\'), \'/plone/test-folder\')\n \n+    def test_redirection_controlpanel_remove_matching_redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        for i in range(30):\n+            storage[\'/plone/alias{0}\'.format(i)] = \'/plone/test-folder\'\n+        transaction.commit()\n+\n+        # Removing matching redirects can only happen when a filter is selected.\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.MatchRemove\').click()\n+        self.assertTrue(\n+            \'No alternative urls selected for removal.\'\n+            in self.browser.contents\n+        )\n+        self.assertEqual(len(storage), 30)\n+        # query aliases starting with /alias2\n+        self.browser.getControl(name=\'q\').value = \'/alias2\'\n+        # The filter is immediately taken into account,\n+        # without first explicitly clicking filter.\n+        # self.browser.getControl(name=\'form.button.filter\').click()\n+        self.browser.getControl(name=\'form.button.MatchRemove\').click()\n+        self.assertEqual(len(storage), 19)\n+        self.assertFalse(\'/plone/alias2\' in storage)\n+        self.assertFalse(\'/plone/alias20\' in storage)\n+        self.assertFalse(\'/plone/alias29\' in storage)\n+        self.assertTrue(\'/plone/alias1\' in storage)\n+        self.assertTrue(\'/plone/alias12\' in storage)\n+\n     def test_redirection_controlpanel_set(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n@@ -204,6 +235,9 @@ def test_redirection_controlpanel_filtering(self):\n         self.assertEqual(len(redirects), 1000)\n         redirects = RedirectionSet(query=\'/foo2\')\n         self.assertEqual(len(redirects), 1000)\n+        # this should return one and not two (we need excludemax=True)\n+        redirects = RedirectionSet(query=\'/foo1/777\')\n+        self.assertEqual(len(redirects), 1)\n \n         request = self.layer[\'request\'].clone()\n         request.form[\'q\'] = \'/foo\'\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/53edd8c96b0b5f7ed31180b3d2ab364a39c80793

Redirects: show datetime and manual in control panel.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 4aae8b5d9..fd45774dc 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -239,6 +239,7 @@\n                tal:attributes="class python:error and \'field error\' or \'field\'"\n                tal:content="error" />\n \n+          <p>Alternative url path &rarr; target url path (date and time of creation, manually created yes/no) </p>\n           <tal:redirects repeat="redirect batch">\n             <div>\n               <label>\n@@ -247,7 +248,7 @@\n                   class="noborder"\n                   name="redirects:tuple"\n                   value="${redirect/redirect}" />\n-              ${redirect/path} &rarr; ${redirect/redirect-to}\n+              ${redirect/path} &rarr; ${redirect/redirect-to} (${redirect/datetime}, ${redirect/manual})\n               </label>\n             </div>\n           </tal:redirects>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex b9dbebb50..94acc2cf2 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -195,10 +195,18 @@ def __getitem__(self, item):\n             path = redirect[self.portal_path_len :]\n         else:\n             path = redirect\n-        redirect_to = self.storage.get(redirect)\n+        # redirect_to = self.storage.get(redirect)\n+        info = self.storage.get_full(redirect)\n+        redirect_to = info[0]\n         if redirect_to.startswith(self.portal_path):\n             redirect_to = redirect_to[self.portal_path_len :]\n-        return {\'redirect\': redirect, \'path\': path, \'redirect-to\': redirect_to}\n+        return {\n+            \'redirect\': redirect,\n+            \'path\': path,\n+            \'redirect-to\': redirect_to,\n+            \'datetime\': info[1],\n+            \'manual\': info[2],\n+        }\n \n \n class RedirectsBatchView(PloneBatchView):\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 2baa1d4f2..4455fc160 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -137,26 +137,32 @@ def test_redirection_controlpanel_remove_matching_redirects(self):\n     def test_redirection_controlpanel_set(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n+        now = DateTime(\'2022-02-03\')\n         for i in range(1000):\n             storage.add(\n                 \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n                 \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                now=now,\n             )\n         redirects = RedirectionSet()\n         self.assertEqual(len(redirects), 1000)\n         self.assertDictEqual(\n             redirects[0],\n             {\n-                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'datetime\': DateTime(\'2022-02-03\'),\n+                \'manual\': False,\n                 \'path\': \'/foo/0\',\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n                 \'redirect-to\': \'/bar/0\',\n             },\n         )\n         self.assertDictEqual(\n             redirects[999],\n             {\n-                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n+                \'datetime\': DateTime(\'2022-02-03\'),\n+                \'manual\': False,\n                 \'path\': \'/foo/999\',\n+                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n                 \'redirect-to\': \'/bar/999\',\n             },\n         )\n@@ -164,8 +170,10 @@ def test_redirection_controlpanel_set(self):\n         self.assertDictEqual(\n             list(iter(redirects))[0],\n             {\n-                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'datetime\': DateTime(\'2022-02-03\'),\n+                \'manual\': False,\n                 \'path\': \'/foo/0\',\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n                 \'redirect-to\': \'/bar/0\',\n             },\n         )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/ae00d6cbc71e10d505a23d635eaa7e88a10cb23d

Redirects: allow filtering on manual or automatic.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex fd45774dc..fd8ce74a8 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -225,6 +225,17 @@\n               value=""\n               id="filter-existing-aliases-q"\n                tal:attributes="value python:request.form.get(\'q\', \'/\')"/>\n+          <label for="filter-existing-aliases-manual" i18n:translate="">Manually or automatically added?</label>\n+          <div\n+              id="filter-existing-aliases-manual"\n+              tal:define="chosen python:request.form.get(\'manual\', \'\')">\n+              <input type="radio" name="manual" id="manual-both" value="" tal:attributes="checked python:chosen==\'\'">\n+              <label for="manual-both" i18n:translate="">Both</label><br />\n+              <input type="radio" name="manual" id="manual-no" value="no" tal:attributes="checked python:chosen==\'no\'">\n+              <label for="manual-no" i18n:translate="">Automatically</label><br />\n+              <input type="radio" name="manual" id="manual-yes" value="yes" tal:attributes="checked python:chosen==\'yes\'">\n+              <label for="manual-yes" i18n:translate="">Manually</label>\n+          </div>\n           <div class="formControls">\n             <input\n                 class="context"\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 94acc2cf2..5781ed664 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -165,7 +165,7 @@ def view_url(self):\n \n \n class RedirectionSet(object):\n-    def __init__(self, query=\'\'):\n+    def __init__(self, query=\'\', manual=\'\'):\n         self.storage = getUtility(IRedirectionStorage)\n \n         portal = getSite()\n@@ -185,6 +185,18 @@ def __init__(self, query=\'\'):\n             )\n         else:\n             self.data = self.storage._paths.keys()\n+        if manual:\n+            # either \'yes\' or \'no\n+            if manual == \'yes\':\n+                self.data = list(filter(self.is_manual, self.data))\n+            else:\n+                self.data = list(filter(self.is_automatic, self.data))\n+\n+    def is_manual(self, redirect):\n+        return self.storage.get_full(redirect)[2]\n+\n+    def is_automatic(self, redirect):\n+        return not self.storage.get_full(redirect)[2]\n \n     def __len__(self):\n         return len(self.data)\n@@ -233,7 +245,10 @@ def redirects(self):\n             \'redirect\' are equal.\n         """\n         return Batch(\n-            RedirectionSet(self.request.form.get(\'q\', \'\')),\n+            RedirectionSet(\n+                query=self.request.form.get(\'q\', \'\'),\n+                manual=self.request.form.get(\'manual\', \'\'),\n+            ),\n             15,\n             int(self.request.form.get(\'b_start\', \'0\')),\n             orphan=1,\n@@ -255,8 +270,9 @@ def __call__(self):\n                 redirects = form.get(\'redirects\', ())\n             else:\n                 query = self.request.form.get(\'q\', \'\')\n-                if query and query != \'/\':\n-                    rset = RedirectionSet(query)\n+                manual = self.request.form.get(\'manual\', \'\')\n+                if manual or (query and query != \'/\'):\n+                    rset = RedirectionSet(query, manual)\n                     redirects = list(rset.data)\n                 else:\n                     redirects = []\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/fa1f70d0cb6ba8835cb807db350d83303503bfbd

Redirects: allow filtering on created date.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex fd8ce74a8..5e4aa1663 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -236,6 +236,9 @@\n               <input type="radio" name="manual" id="manual-yes" value="yes" tal:attributes="checked python:chosen==\'yes\'">\n               <label for="manual-yes" i18n:translate="">Manually</label>\n           </div>\n+          <label for="filter-existing-aliases-date" i18n:translate="">Created before</label>\n+          <input type="date" id="filter-existing-aliases-date" name="datetime"\n+               tal:attributes="value python:request.form.get(\'datetime\', \'\')"/>\n           <div class="formControls">\n             <input\n                 class="context"\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 5781ed664..1743cae27 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -165,7 +165,7 @@ def view_url(self):\n \n \n class RedirectionSet(object):\n-    def __init__(self, query=\'\', manual=\'\'):\n+    def __init__(self, query=\'\', created=\'\', manual=\'\'):\n         self.storage = getUtility(IRedirectionStorage)\n \n         portal = getSite()\n@@ -187,16 +187,21 @@ def __init__(self, query=\'\', manual=\'\'):\n             self.data = self.storage._paths.keys()\n         if manual:\n             # either \'yes\' or \'no\n-            if manual == \'yes\':\n-                self.data = list(filter(self.is_manual, self.data))\n-            else:\n-                self.data = list(filter(self.is_automatic, self.data))\n-\n-    def is_manual(self, redirect):\n-        return self.storage.get_full(redirect)[2]\n-\n-    def is_automatic(self, redirect):\n-        return not self.storage.get_full(redirect)[2]\n+            manual = True if manual == \'yes\' else False\n+        if created:\n+            created = DateTime(created)\n+        if created or manual != \'\':\n+            chosen = []\n+            for redirect in self.data:\n+                info = self.storage.get_full(redirect)\n+                if manual != \'\':\n+                    if info[2] != manual:\n+                        continue\n+                if created and info[1]:\n+                    if info[1] >= created:\n+                        continue\n+                chosen.append(redirect)\n+            self.data = chosen\n \n     def __len__(self):\n         return len(self.data)\n@@ -247,6 +252,7 @@ def redirects(self):\n         return Batch(\n             RedirectionSet(\n                 query=self.request.form.get(\'q\', \'\'),\n+                created=self.request.form.get(\'datetime\', \'\'),\n                 manual=self.request.form.get(\'manual\', \'\'),\n             ),\n             15,\n@@ -270,9 +276,12 @@ def __call__(self):\n                 redirects = form.get(\'redirects\', ())\n             else:\n                 query = self.request.form.get(\'q\', \'\')\n+                created = self.request.form.get(\'datetime\', \'\')\n                 manual = self.request.form.get(\'manual\', \'\')\n-                if manual or (query and query != \'/\'):\n-                    rset = RedirectionSet(query, manual)\n+                if created or manual or (query and query != \'/\'):\n+                    rset = RedirectionSet(\n+                        query=query, created=created, manual=manual\n+                    )\n                     redirects = list(rset.data)\n                 else:\n                     redirects = []\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/0df1da88ba3f3efab8501ba652a1ee8f7eb8c98d

Redirects: test filtering on manual yes/no.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b"diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 1743cae27..e3b47ae91 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -186,8 +186,13 @@ def __init__(self, query='', created='', manual=''):\n         else:\n             self.data = self.storage._paths.keys()\n         if manual:\n-            # either 'yes' or 'no\n-            manual = True if manual == 'yes' else False\n+            # either 'yes' or 'no', otherwise we ignore the filter\n+            if manual == 'yes':\n+                manual = True\n+            elif manual == 'no':\n+                manual = False\n+            else:\n+                manual = ''\n         if created:\n             created = DateTime(created)\n         if created or manual != '':\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 4455fc160..3e04d5f7c 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -278,6 +278,56 @@ def test_redirection_controlpanel_filtering(self):\n         request.form['q'] = '/foo2'\n         self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n \n+    def test_redirection_controlpanel_filter_manual(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer['portal'].absolute_url_path()\n+        for i in range(100):\n+            storage.add(\n+                '{0:s}/foo/{1:s}'.format(portal_path, str(i)),\n+                '{0:s}/bar/{1:s}'.format(portal_path, str(i)),\n+                manual=False\n+            )\n+        for i in range(100, 300):\n+            storage.add(\n+                '{0:s}/foo/{1:s}'.format(portal_path, str(i)),\n+                '{0:s}/bar/{1:s}'.format(portal_path, str(i)),\n+                manual=True\n+            )\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 300)\n+        # Form has yes, no, or empty string, anything else is ignored\n+        # (so treated as empty string).\n+        redirects = RedirectionSet(manual='yes')\n+        self.assertEqual(len(redirects), 200)\n+        redirects = RedirectionSet(manual='no')\n+        self.assertEqual(len(redirects), 100)\n+        redirects = RedirectionSet(manual='')\n+        self.assertEqual(len(redirects), 300)\n+        redirects = RedirectionSet(manual='badvalue')\n+        self.assertEqual(len(redirects), 300)\n+\n+        request = self.layer['request'].clone()\n+        request.form['manual'] = ''\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(300 / 15.0))\n+\n+        request = self.layer['request'].clone()\n+        request.form['manual'] = 'yes'\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(200 / 15.0))\n+\n+        request = self.layer['request'].clone()\n+        request.form['manual'] = 'no'\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(100 / 15.0))\n+\n     def test_redirection_controlpanel_redirect_no_target(self):\n         path_alias = '/alias'\n         path_target = '/not-existing'\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/db7a431ebda1a579179fc1a7297e9c36195a04b6

Redirects: test filtering on date.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b"diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex e3b47ae91..2f9b8ead0 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -194,7 +194,13 @@ def __init__(self, query='', created='', manual=''):\n             else:\n                 manual = ''\n         if created:\n-            created = DateTime(created)\n+            try:\n+                created = DateTime(created)\n+            except DateTimeError:\n+                logger.warning(\n+                    'Failed to parse as DateTime: %s', created\n+                )\n+                created = ''\n         if created or manual != '':\n             chosen = []\n             for redirect in self.data:\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 3e04d5f7c..e960b80e4 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -328,6 +328,73 @@ def test_redirection_controlpanel_filter_manual(self):\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(100 / 15.0))\n \n+    def test_redirection_controlpanel_filter_date(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer['portal'].absolute_url_path()\n+        time0 = DateTime('2001-01-01')\n+        for i in range(400):\n+            storage.add(\n+                '{0:s}/foo/{1:s}'.format(portal_path, str(i)),\n+                '{0:s}/bar/{1:s}'.format(portal_path, str(i)),\n+                now=time0 + i,\n+            )\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 400)\n+        # created can be anything that can be parsed by DateTime.\n+        # Otherwise it is ignored.\n+        redirects = RedirectionSet(created='2019-01-01')\n+        self.assertEqual(len(redirects), 400)\n+        redirects = RedirectionSet(created='1999-01-01')\n+        self.assertEqual(len(redirects), 0)\n+        redirects = RedirectionSet(created='2001-01-01')\n+        self.assertEqual(len(redirects), 0)\n+        redirects = RedirectionSet(created='2001-01-02')\n+        self.assertEqual(len(redirects), 1)\n+        redirects = RedirectionSet(created='2001-02-01')\n+        self.assertEqual(len(redirects), 31)\n+        redirects = RedirectionSet(created='2001-02-01 00:00:00')\n+        self.assertEqual(len(redirects), 31)\n+        redirects = RedirectionSet(created='2001-02-01 00:00:01')\n+        self.assertEqual(len(redirects), 32)\n+        redirects = RedirectionSet(created='2002-01-01')\n+        self.assertEqual(len(redirects), 365)\n+        redirects = RedirectionSet(created='2002/01/01')\n+        self.assertEqual(len(redirects), 365)\n+        redirects = RedirectionSet(created='2002-01-01')\n+        self.assertEqual(len(redirects), 365)\n+        redirects = RedirectionSet(created='badvalue')\n+        self.assertEqual(len(redirects), 400)\n+\n+        request = self.layer['request'].clone()\n+        request.form['datetime'] = ''\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n+\n+        request = self.layer['request'].clone()\n+        request.form['datetime'] = '2001-01-27'\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(27 / 15.0))\n+\n+        request = self.layer['request'].clone()\n+        request.form['datetime'] = '2002-01-01'\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(365 / 15.0))\n+\n+        request = self.layer['request'].clone()\n+        request.form['datetime'] = '2019-01-01'\n+        view = getMultiAdapter(\n+            (self.layer['portal'], request), name='redirection-controlpanel'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n+\n+\n     def test_redirection_controlpanel_redirect_no_target(self):\n         path_alias = '/alias'\n         path_target = '/not-existing'\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/90aac13d52918a0efbee7a411eec2640890a603a

Redirects: added test_controlpanel_redirection.robot.

Basic test for adding a redirect and checking that you end up at the new location.

Files changed:
A Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot

b'diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nnew file mode 100644\nindex 000000000..46eda6174\n--- /dev/null\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -0,0 +1,46 @@\n+*** Settings *****************************************************************\n+\n+Resource  plone/app/robotframework/keywords.robot\n+Resource  plone/app/robotframework/saucelabs.robot\n+\n+Library  Remote  ${PLONE_URL}/RobotRemote\n+\n+Resource  keywords.robot\n+\n+Test Setup  Run keywords  Plone Test Setup\n+Test Teardown  Run keywords  Plone Test Teardown\n+\n+\n+*** Test Cases ***************************************************************\n+\n+Scenario: Add redirect in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+   When I add a redirect\n+   Then the redirect works\n+\n+\n+*** Keywords *****************************************************************\n+\n+# --- GIVEN ------------------------------------------------------------------\n+\n+a logged-in site administrator\n+  Enable autologin as  Site Administrator\n+\n+the URL Management control panel\n+  Go to  ${PLONE_URL}/@@redirection-controlpanel\n+\n+\n+# --- WHEN -------------------------------------------------------------------\n+\n+I add a redirect\n+  Input Text  name=redirection  /old\n+  Input Text  name=target_path  /test-folder\n+  Click Button  Add\n+\n+\n+# --- THEN -------------------------------------------------------------------\n+\n+the redirect works\n+  Go to  ${PLONE_URL}/old\n+  Location Should Be  ${PLONE_URL}/test-folder\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/316966a805be48c5913b96d0848cbbf29036cd0a

test_controlpanel_redirection.robot: figure out how to accept arguments in keywords.

I was looking at the wrong examples.

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot

b'diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nindex 46eda6174..d837e0549 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -16,8 +16,8 @@ Test Teardown  Run keywords  Plone Test Teardown\n Scenario: Add redirect in the URL Management Control Panel\n   Given a logged-in site administrator\n     and the URL Management control panel\n-   When I add a redirect\n-   Then the redirect works\n+  When I Add A Redirect To The Test Folder From Alternative Url  /old\n+  Then I get redirected to the test folder when visiting  /old\n \n \n *** Keywords *****************************************************************\n@@ -33,14 +33,17 @@ the URL Management control panel\n \n # --- WHEN -------------------------------------------------------------------\n \n-I add a redirect\n-  Input Text  name=redirection  /old\n+I Add A Redirect To The Test Folder From Alternative Url\n+  [Documentation]  target path must exist in the site\n+  [Arguments]  ${old}\n+  Input Text  name=redirection  ${old}\n   Input Text  name=target_path  /test-folder\n   Click Button  Add\n \n \n # --- THEN -------------------------------------------------------------------\n \n-the redirect works\n-  Go to  ${PLONE_URL}/old\n+I get redirected to the test folder when visiting\n+  [Arguments]  ${old}\n+  Go to  ${PLONE_URL}/${old}\n   Location Should Be  ${PLONE_URL}/test-folder\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/3b994e067dc9b03b39e2953331bab32ced9a343e

Redirects: added robot test for removing a redirect.

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot

b"diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nindex d837e0549..5d30b75f9 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -20,6 +20,14 @@ Scenario: Add redirect in the URL Management Control Panel\n   Then I get redirected to the test folder when visiting  /old\n \n \n+Scenario: Remove redirect in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I Add A Redirect To The Test Folder From Alternative Url  /old\n+   and I Remove The Redirect From Alternative Url  /old\n+  Then I do not get redirected when visiting  /old\n+\n+\n *** Keywords *****************************************************************\n \n # --- GIVEN ------------------------------------------------------------------\n@@ -41,9 +49,22 @@ I Add A Redirect To The Test Folder From Alternative Url\n   Click Button  Add\n \n \n+I Remove The Redirect From Alternative Url\n+  [Arguments]  ${old}\n+  Select Checkbox  xpath=//input[@value='/plone${old}']\n+  Click Button  Remove selected\n+\n+\n # --- THEN -------------------------------------------------------------------\n \n I get redirected to the test folder when visiting\n   [Arguments]  ${old}\n   Go to  ${PLONE_URL}/${old}\n   Location Should Be  ${PLONE_URL}/test-folder\n+\n+\n+I do not get redirected when visiting\n+  [Arguments]  ${old}\n+  Go to  ${PLONE_URL}/${old}\n+  Location Should Be  ${PLONE_URL}/${old}\n+  Wait Until Page Contains  This page does not seem to exist\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/0bbd76cdaeed43d8259ae364f4c95bc09d9b89f2

Redirects: added robot test for removing matching redirects.

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot

b'diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nindex 5d30b75f9..5e03e0acf 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -28,6 +28,17 @@ Scenario: Remove redirect in the URL Management Control Panel\n   Then I do not get redirected when visiting  /old\n \n \n+Scenario: Remove filtered redirects in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I Add A Redirect To The Test Folder From Alternative Url  /a\n+   and I Add A Redirect To The Test Folder From Alternative Url  /b\n+   and I Filter The Redirects With Path  /a\n+   and I Remove The Matching Redirects\n+  Then I do not get redirected when visiting  /a\n+   and I get redirected to the test folder when visiting  /b\n+\n+\n *** Keywords *****************************************************************\n \n # --- GIVEN ------------------------------------------------------------------\n@@ -55,6 +66,15 @@ I Remove The Redirect From Alternative Url\n   Click Button  Remove selected\n \n \n+I Filter The Redirects With Path\n+  [Arguments]  ${old}\n+  Input Text  name=q  ${old}\n+  Click Button  Filter\n+\n+I Remove The Matching Redirects\n+  Click Button  Remove all that match filter\n+\n+\n # --- THEN -------------------------------------------------------------------\n \n I get redirected to the test folder when visiting\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/87f0ae9b36133e84c0dfdb3135f9af047d04deee

test_controlpanel_redirection.robot: Less Capital Letters.

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot

b"diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nindex 5e03e0acf..4c533cc91 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -16,25 +16,25 @@ Test Teardown  Run keywords  Plone Test Teardown\n Scenario: Add redirect in the URL Management Control Panel\n   Given a logged-in site administrator\n     and the URL Management control panel\n-  When I Add A Redirect To The Test Folder From Alternative Url  /old\n+  When I add a redirect to the test folder from alternative url  /old\n   Then I get redirected to the test folder when visiting  /old\n \n \n Scenario: Remove redirect in the URL Management Control Panel\n   Given a logged-in site administrator\n     and the URL Management control panel\n-  When I Add A Redirect To The Test Folder From Alternative Url  /old\n-   and I Remove The Redirect From Alternative Url  /old\n+  When I add a redirect to the test folder from alternative url  /old\n+   and I remove the redirect from alternative url  /old\n   Then I do not get redirected when visiting  /old\n \n \n Scenario: Remove filtered redirects in the URL Management Control Panel\n   Given a logged-in site administrator\n     and the URL Management control panel\n-  When I Add A Redirect To The Test Folder From Alternative Url  /a\n-   and I Add A Redirect To The Test Folder From Alternative Url  /b\n-   and I Filter The Redirects With Path  /a\n-   and I Remove The Matching Redirects\n+  When I add a redirect to the test folder from alternative url  /a\n+   and I add a redirect to the test folder from alternative url  /b\n+   and I filter the redirects with path  /a\n+   and I remove the matching redirects\n   Then I do not get redirected when visiting  /a\n    and I get redirected to the test folder when visiting  /b\n \n@@ -52,7 +52,7 @@ the URL Management control panel\n \n # --- WHEN -------------------------------------------------------------------\n \n-I Add A Redirect To The Test Folder From Alternative Url\n+I add a redirect to the test folder from alternative url\n   [Documentation]  target path must exist in the site\n   [Arguments]  ${old}\n   Input Text  name=redirection  ${old}\n@@ -60,18 +60,18 @@ I Add A Redirect To The Test Folder From Alternative Url\n   Click Button  Add\n \n \n-I Remove The Redirect From Alternative Url\n+I remove the redirect from alternative url\n   [Arguments]  ${old}\n   Select Checkbox  xpath=//input[@value='/plone${old}']\n   Click Button  Remove selected\n \n \n-I Filter The Redirects With Path\n+I filter the redirects with path\n   [Arguments]  ${old}\n   Input Text  name=q  ${old}\n   Click Button  Filter\n \n-I Remove The Matching Redirects\n+I remove the matching redirects\n   Click Button  Remove all that match filter\n \n \n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8f23ddf38c5785c0273f1082b2c725fc48bd5412

test_controlpanel_redirection.robot: basic download csv test.

I don't know how to get the contents of the downloaded file,
so this only tests that there is no error.

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot

b"diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nindex 4c533cc91..21ec31889 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -39,6 +39,14 @@ Scenario: Remove filtered redirects in the URL Management Control Panel\n    and I get redirected to the test folder when visiting  /b\n \n \n+Scenario: Download all redirects in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I add a redirect to the test folder from alternative url  /a\n+   and I add a redirect to the test folder from alternative url  /b\n+  Then I can download all redirects as CSV\n+\n+\n *** Keywords *****************************************************************\n \n # --- GIVEN ------------------------------------------------------------------\n@@ -88,3 +96,9 @@ I do not get redirected when visiting\n   Go to  ${PLONE_URL}/${old}\n   Location Should Be  ${PLONE_URL}/${old}\n   Wait Until Page Contains  This page does not seem to exist\n+\n+\n+I can download all redirects as CSV\n+  [Documentation]  I don't know how to get the contents of the downloaded file\n+  Click Button  Download all as CSV\n+  Page Should Not Contain  there seems to be an error\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c191669c33a26988dba56c62f7fe18b8af22e465

Redirects: fixed uploading a file in the test browser in Python 2.

Sample traceback:

Traceback (most recent call last):
  File "/usr/local/py27/parts/opt/lib/python2.7/unittest/case.py", line 398, in debug
    getattr(self, self._testMethodName)()
  File "/Users/maurits/community/plone-coredev/5.2/src/Products.CMFPlone/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py", line 653, in test_upload_two_columns
    self.browser.getControl(name='file').value.filename = 'redirects.csv'
  File "/Users/maurits/shared-eggs/cp27m/zope.testbrowser-5.3.2-py2.7.egg/zope/testbrowser/browser.py", line 698, in value
    return self.browser.toStr(val)
  File "/Users/maurits/shared-eggs/cp27m/zope.testbrowser-5.3.2-py2.7.egg/zope/testbrowser/browser.py", line 541, in toStr
    return s.encode(self._response.charset)
AttributeError: 'Upload' object has no attribute 'encode'

Solution: get the file control and call the add_file method on it.
Found in the documentation:
https://zopetestbrowser.readthedocs.io/en/latest/narrative.html#file-control

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex e960b80e4..8c8baee9a 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -7,11 +7,11 @@\n from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n-from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.utils import safe_bytes\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import io\n import math\n import transaction\n import unittest\n@@ -285,13 +285,13 @@ def test_redirection_controlpanel_filter_manual(self):\n             storage.add(\n                 \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n                 \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n-                manual=False\n+                manual=False,\n             )\n         for i in range(100, 300):\n             storage.add(\n                 \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n                 \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n-                manual=True\n+                manual=True,\n             )\n \n         redirects = RedirectionSet()\n@@ -394,7 +394,6 @@ def test_redirection_controlpanel_filter_date(self):\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n \n-\n     def test_redirection_controlpanel_redirect_no_target(self):\n         path_alias = \'/alias\'\n         path_target = \'/not-existing\'\n@@ -646,11 +645,9 @@ def test_upload_two_columns(self):\n             (b\'/people/JoeT\', b\'/Members\'),\n         ]\n         csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n-        upload = dummy.File(filename=\'redirects.csv\', data=csv)\n-        self.browser.getControl(name=\'file\').value = upload\n-        # We need to explicitly set the filename a second time\n-        # because it gets lost...\n-        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(csv), \'text/plain\', \'redirects.csv\'\n+        )\n         self.browser.getControl(name=\'form.button.Upload\').click()\n         self.assertNotIn(\n             \'Please pick a file to upload.\', self.browser.contents\n@@ -703,11 +700,9 @@ def test_upload_four_columns(self):\n             (b\'/zero\', b\'/test-folder\', b\'2000-01-31\', b\'0\'),\n         ]\n         csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n-        upload = dummy.File(filename=\'redirects.csv\', data=csv)\n-        self.browser.getControl(name=\'file\').value = upload\n-        # We need to explicitly set the filename a second time\n-        # because it gets lost...\n-        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(csv), \'text/plain\', \'redirects.csv\'\n+        )\n         self.browser.getControl(name=\'form.button.Upload\').click()\n         self.assertNotIn(\n             \'Please pick a file to upload.\', self.browser.contents\n@@ -787,11 +782,9 @@ def test_upload_bad(self):\n             (b\'/people/JoeT\', b\'/no-such-content\'),\n         ]\n         csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n-        upload = dummy.File(filename=\'redirects.csv\', data=csv)\n-        self.browser.getControl(name=\'file\').value = upload\n-        # We need to explicitly set the filename a second time\n-        # because it gets lost...\n-        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(csv), \'text/plain\', \'redirects.csv\'\n+        )\n         self.browser.getControl(name=\'form.button.Upload\').click()\n         self.assertNotIn(\n             \'Please pick a file to upload.\', self.browser.contents\n@@ -888,12 +881,12 @@ def test_download_upload(self):\n         self.assertEqual(contents[0], \'old path,new path,datetime,manual\')\n \n         # 4. upload the original download\n-        upload = dummy.File(\n-            filename=\'redirects.csv\', data=safe_bytes(downloaded_contents)\n-        )\n         self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n-        self.browser.getControl(name=\'file\').value = upload\n-        self.browser.getControl(name=\'file\').value.filename = \'redirects.csv\'\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(safe_bytes(downloaded_contents)),\n+            \'text/plain\',\n+            \'redirects.csv\',\n+        )\n         self.browser.getControl(name=\'form.button.Upload\').click()\n         self.assertNotIn(\n             \'Please pick a file to upload.\', self.browser.contents\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d84fc67720de0a7c02ef0af2557dfc8e797ee547

Added news snippets for feature 2799.

Files changed:
A news/2799.feature.1
A news/2799.feature.2
A news/2799.feature.3

b'diff --git a/news/2799.feature.1 b/news/2799.feature.1\nnew file mode 100644\nindex 000000000..b2c8e05b5\n--- /dev/null\n+++ b/news/2799.feature.1\n@@ -0,0 +1 @@\n+Allow filtering on date and manual/automatic in redirection controlpanel.\ndiff --git a/news/2799.feature.2 b/news/2799.feature.2\nnew file mode 100644\nindex 000000000..d83776b74\n--- /dev/null\n+++ b/news/2799.feature.2\n@@ -0,0 +1 @@\n+Add a button to export the alternative urls in redirection controlpanel.\ndiff --git a/news/2799.feature.3 b/news/2799.feature.3\nnew file mode 100644\nindex 000000000..4154d9bfb\n--- /dev/null\n+++ b/news/2799.feature.3\n@@ -0,0 +1,3 @@\n+Add a button to remove all alternative urls that match the filter.\n+See `issue 2799 <https://github.com/plone/Products.CMFPlone/issues/2799>`_.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/044bad53ef8788e7dd4477bb52e949067241e7b4

Redirects: edit so these asserts are on one line.

Makes it easier to spot which one goes wrong.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b"diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 8c8baee9a..0295c852e 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -343,28 +343,17 @@ def test_redirection_controlpanel_filter_date(self):\n         self.assertEqual(len(redirects), 400)\n         # created can be anything that can be parsed by DateTime.\n         # Otherwise it is ignored.\n-        redirects = RedirectionSet(created='2019-01-01')\n-        self.assertEqual(len(redirects), 400)\n-        redirects = RedirectionSet(created='1999-01-01')\n-        self.assertEqual(len(redirects), 0)\n-        redirects = RedirectionSet(created='2001-01-01')\n-        self.assertEqual(len(redirects), 0)\n-        redirects = RedirectionSet(created='2001-01-02')\n-        self.assertEqual(len(redirects), 1)\n-        redirects = RedirectionSet(created='2001-02-01')\n-        self.assertEqual(len(redirects), 31)\n-        redirects = RedirectionSet(created='2001-02-01 00:00:00')\n-        self.assertEqual(len(redirects), 31)\n-        redirects = RedirectionSet(created='2001-02-01 00:00:01')\n-        self.assertEqual(len(redirects), 32)\n-        redirects = RedirectionSet(created='2002-01-01')\n-        self.assertEqual(len(redirects), 365)\n-        redirects = RedirectionSet(created='2002/01/01')\n-        self.assertEqual(len(redirects), 365)\n-        redirects = RedirectionSet(created='2002-01-01')\n-        self.assertEqual(len(redirects), 365)\n-        redirects = RedirectionSet(created='badvalue')\n-        self.assertEqual(len(redirects), 400)\n+        self.assertEqual(len(RedirectionSet(created='2019-01-01')), 400)\n+        self.assertEqual(len(RedirectionSet(created='1999-01-01')), 0)\n+        self.assertEqual(len(RedirectionSet(created='2001-01-01')), 0)\n+        self.assertEqual(len(RedirectionSet(created='2001-01-02')), 1)\n+        self.assertEqual(len(RedirectionSet(created='2001-02-01')), 31)\n+        self.assertEqual(len(RedirectionSet(created='2001-02-01 00:00:00')), 31)\n+        self.assertEqual(len(RedirectionSet(created='2001-02-01 00:00:01')), 32)\n+        self.assertEqual(len(RedirectionSet(created='2002-01-01')), 365)\n+        self.assertEqual(len(RedirectionSet(created='2002/01/01')), 365)\n+        self.assertEqual(len(RedirectionSet(created='2002-01-01')), 365)\n+        self.assertEqual(len(RedirectionSet(created='badvalue')), 400)\n \n         request = self.layer['request'].clone()\n         request.form['datetime'] = ''\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/71ae51fa6d9f632e61f14a30775ac35a03999eba

Redirects: be lenient in tests where non-naive timezones are used.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b"diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 0295c852e..898fe3ed4 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -350,11 +350,16 @@ def test_redirection_controlpanel_filter_date(self):\n         self.assertEqual(len(RedirectionSet(created='2001-02-01')), 31)\n         self.assertEqual(len(RedirectionSet(created='2001-02-01 00:00:00')), 31)\n         self.assertEqual(len(RedirectionSet(created='2001-02-01 00:00:01')), 32)\n-        self.assertEqual(len(RedirectionSet(created='2002-01-01')), 365)\n-        self.assertEqual(len(RedirectionSet(created='2002/01/01')), 365)\n-        self.assertEqual(len(RedirectionSet(created='2002-01-01')), 365)\n         self.assertEqual(len(RedirectionSet(created='badvalue')), 400)\n \n+        # DateTime('2002-01-01') results in a timezone GMT+0\n+        self.assertEqual(len(RedirectionSet(created='2002-01-01')), 365)\n+        # DateTime('2002/01/01') results in a timezone GMT+1 for me,\n+        # or a different zone depending on where in the world you are.\n+        # So we need to be lenient in the tests.\n+        self.assertGreaterEqual(len(RedirectionSet(created='2002/01/01')), 364)\n+        self.assertLessEqual(len(RedirectionSet(created='2002/01/01')), 366)\n+\n         request = self.layer['request'].clone()\n         request.form['datetime'] = ''\n         view = getMultiAdapter(\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-03-19T09:47:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/bc96b0d899812588d8193b39f152e4364c6cf090

Redirects: removed writing of html file to /tmp in tests.

This was an accidental left-over from local debugging.
It actually failed on Jenkins.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b"diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 898fe3ed4..d77e96ffd 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -461,8 +461,6 @@ def test_manage_aliases_remove(self):\n             '/plone/alias2',\n         ]\n         self.browser.getControl(name='form.button.Remove').click()\n-        with open('/tmp/test.html', 'w') as testfile:\n-            testfile.write(self.browser.contents)\n \n         self.assertTrue(\n             'Alternative urls removed.' in self.browser.contents,\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-04-11T11:03:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/92e0fd282bfb1748f23f06a9d5b127aa82cf20f2

Merge branch 'master' into maurits-extend-paths

Files changed:
A news/2809.bugfix
A news/2821.bugfix
A news/2828.bugfix
M CHANGES.rst
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/interfaces/resources.py
M Products/CMFPlone/tests/robot/test_actionmenu.robot
M Products/CMFPlone/tests/robot/test_controlpanel_actions.robot
M Products/CMFPlone/tests/robot/test_controlpanel_editing.robot
M Products/CMFPlone/tests/robot/test_controlpanel_filter.robot
M Products/CMFPlone/tests/robot/test_controlpanel_language.robot
M Products/CMFPlone/tests/robot/test_controlpanel_markup.robot
M Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot
M Products/CMFPlone/tests/robot/test_controlpanel_search.robot
M Products/CMFPlone/tests/robot/test_controlpanel_security.robot
M Products/CMFPlone/tests/robot/test_controlpanel_site.robot
M Products/CMFPlone/tests/robot/test_controlpanel_social.robot
M Products/CMFPlone/tests/robot/test_controlpanel_types.robot
M Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot
M Products/CMFPlone/tests/robot/test_edit.robot
M Products/CMFPlone/tests/robot/test_edit_user_schema.robot
M Products/CMFPlone/tests/robot/test_linkintegrity.robot
M Products/CMFPlone/tests/robot/test_overlays.robot
M Products/CMFPlone/tests/robot/test_portlets.robot
M Products/CMFPlone/tests/robot/test_querystring.robot
M Products/CMFPlone/tests/robot/test_thememapper.robot
M Products/CMFPlone/tests/robot/test_tinymce.robot
M Products/CMFPlone/tests/testNavigationView.py
M setup.py
D news/2516.bugfix
D news/2689.bugfix
D news/2788.bugfix
D news/2792.bugfix
D news/2798.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex addbe0f74..9c9f3077b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,6 +12,23 @@ Changelog\n \n .. towncrier release notes start\n \n+5.2rc2 (2019-03-21)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Fix excluded items in navigation [ale-rt] (#2516)\n+- Add basic validators for the portal action controlpanel forms (#2689)\n+- Fix wrong msgids in link management control panel [erral] (#2788)\n+- Fix errors that abort the verification when debugging a DB with ./bin/instance verifydb -D.\n+  [pbauer] (#2792)\n+- Add summary of all errors when verifying a DB with ./bin/instance verifydb.\n+  [pbauer] (#2798)\n+- Fixed unstable SearchableText and Scenario Type querystring robot tests.  [maurits] (#2808)\n+- Fixed unstable Markup Control Panel and other robot tests.   [maurits] (#2809)\n+\n+\n 5.2rc1 (2019-03-04)\n -------------------\n \ndiff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex ba9c12031..895830322 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -72,7 +72,7 @@ def siteMap(self):\n class CatalogNavigationTabs(BrowserView):\n \n     def _getNavQuery(self):\n-                # check whether we only want actions\n+        # check whether we only want actions\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n             INavigationSchema,\n@@ -101,6 +101,9 @@ def _getNavQuery(self):\n \n         query[\'is_default_page\'] = False\n \n+        if not navigation_settings.show_excluded_items:\n+            query[\'exclude_from_nav\'] = False\n+\n         if not navigation_settings.nonfolderish_tabs:\n             query[\'is_folderish\'] = True\n \n@@ -146,11 +149,13 @@ def _get_url(item):\n                 return (get_id(item), item.getRemoteUrl)\n             return get_view_url(item)\n \n+        context_path = \'/\'.join(context.getPhysicalPath())\n+\n         # now add the content to results\n         for item in rawresult:\n-            if not navigation_settings.show_excluded_items:\n-                if item.exclude_from_nav:\n-                    continue\n+            if item.exclude_from_nav and not context_path.startswith(item.getPath()):  # noqa: E501\n+                # skip excluded items if they\'re not in our context path\n+                continue\n             cid, item_url = _get_url(item)\n             data = {\n                 \'name\': utils.pretty_title_or_id(context, item),\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 2f9b8ead0..b17bc680f 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -349,7 +349,7 @@ def add(self, redirection, target, portal, storage, status):\n             if abs_redirection == abs_target:\n                 err = _(\n                     u"Alternative urls that point to themselves will cause"\n-                    u"an endless cycle of redirects."\n+                    u" an endless cycle of redirects."\n                 )\n                 # TODO: detect indirect recursion\n \ndiff --git a/Products/CMFPlone/interfaces/resources.py b/Products/CMFPlone/interfaces/resources.py\nindex 2e1c6a0b4..b2ed2372d 100644\n--- a/Products/CMFPlone/interfaces/resources.py\n+++ b/Products/CMFPlone/interfaces/resources.py\n@@ -138,7 +138,7 @@ class IBundleRegistry(zope.interface.Interface):\n         required=False)\n \n     load_defer = schema.Bool(\n-        title=_(u"Load deffered"),\n-        description=_("Load the JavaScript files deffered after the document has been parsed but before ``DOMContentLoaded`` by adding a ``defer`` attribute to the script tag."),\n+        title=_(u"Load deferred"),\n+        description=_("Load the JavaScript files deferred after the document has been parsed but before ``DOMContentLoaded`` by adding a ``defer`` attribute to the script tag."),\n         default=False,\n         required=False)\ndiff --git a/Products/CMFPlone/tests/robot/test_actionmenu.robot b/Products/CMFPlone/tests/robot/test_actionmenu.robot\nindex fb4c6e1d1..9fe356848 100644\n--- a/Products/CMFPlone/tests/robot/test_actionmenu.robot\n+++ b/Products/CMFPlone/tests/robot/test_actionmenu.robot\n@@ -94,7 +94,7 @@ Scenario:\n an actionsmenu page\n     Create content  type=Document  title=${TITLE}\n     Go to  ${PLONE_URL}/${PAGE_ID}\n-\n+    Wait until page contains  An actionsmenu page\n \n # --- WHEN -------------------------------------------------------------------\n \ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot b/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot\nindex 4a302f030..3d44502d8 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot\n@@ -63,6 +63,7 @@ a logged-in administrator\n \n the actions control panel\n   Go to  ${PLONE_URL}/@@actions-controlpanel\n+  Wait until page contains  Portal actions\n \n # --- WHEN -------------------------------------------------------------------\n \n@@ -106,11 +107,13 @@ I unhide the action\n anonymous users can see the new action title\n   Disable autologin\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Accessibility\n   Page Should Contain  A new site map\n \n anonymous users can see the actions new ordering\n   Disable autologin\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Accessibility\n   Page Should Contain Element   xpath=//div[@id=\'portal-footer\']//ul/li[1]/a/span[contains(text(), \'Accessibility\')]\n   Page Should Contain Element   xpath=//div[@id=\'portal-footer\']//ul/li[3]/a/span[contains(text(), \'Site Map\')]\n \n@@ -118,14 +121,17 @@ logged-in users can see the new action\n   Disable autologin\n   Enable autologin as   Contributor\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Accessibility\n   Page Should Contain  My favorites\n \n anonymous users cannot see the action anymore\n   Disable autologin\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Accessibility\n   Page Should Not Contain  Site Map\n \n anonymous users can see the action again\n   Disable autologin\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Accessibility\n   Page Should Contain  Site Map\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot\nindex 46a66d3b3..4b99bb4fc 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_editing.robot\n@@ -53,7 +53,7 @@ a document \'${title}\'\n \n the editing control panel\n   Go to  ${PLONE_URL}/@@editing-controlpanel\n-\n+  Wait until page contains  Editing Settings\n \n # --- WHEN -------------------------------------------------------------------\n \ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot b/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot\nindex 26399060f..1ca5cbf83 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_filter.robot\n@@ -64,6 +64,7 @@ a logged-in site administrator\n \n the filter control panel\n   Go to  ${PLONE_URL}/@@filter-controlpanel\n+  Wait until page contains  HTML Filtering Settings\n \n Input RichText\n   [Arguments]  ${input}\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_language.robot b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot\nindex 7f3cc7979..ebd790247 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_language.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_language.robot\n@@ -29,6 +29,7 @@ a logged-in site administrator\n \n the language control panel\n   Go to  ${PLONE_URL}/@@language-controlpanel\n+  Wait until page contains  Language Settings\n \n \n # --- WHEN -------------------------------------------------------------------\n@@ -45,4 +46,5 @@ I set the site language to German\n \n the Plone user interface is in German\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Sie sind hier\n   Page should contain  Sie sind hier\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_markup.robot b/Products/CMFPlone/tests/robot/test_controlpanel_markup.robot\nindex 6181f7373..1df997158 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_markup.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_markup.robot\n@@ -40,16 +40,20 @@ a document \'${title}\'\n \n the markup control panel\n   Go to  ${PLONE_URL}/@@markup-controlpanel\n+  Wait until page contains  Markup Settings\n \n \n # --- WHEN -------------------------------------------------------------------\n \n I set allowed types to "${type}"\n+  with the label  ${type}   Select Checkbox\n   with the label  text/html  UnSelect Checkbox\n   with the label  text/x-web-textile  UnSelect Checkbox\n-  with the label  ${type}   Select Checkbox\n   Click Button  Save\n   Wait until page contains  Changes saved\n+  Checkbox Should Be Selected  ${type}\n+  Checkbox Should Not Be Selected  text/html\n+  Checkbox Should Not Be Selected  text/x-web-textile\n \n I set the default type to "${type}"\n   Select from list by label  name=form.widgets.default_type:list  ${type}\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot\nindex ca715c9a0..29c77563e 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_navigation.robot\n@@ -53,6 +53,7 @@ Scenario: Filter Navigation By Displayed Types in the Navigation Control Panel\n \n the navigation control panel\n   Go to  ${PLONE_URL}/@@navigation-controlpanel\n+  Wait until page contains  Navigation Settings\n \n a published document \'${title}\'\n   ${uid}=  a document \'${title}\'\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_search.robot b/Products/CMFPlone/tests/robot/test_controlpanel_search.robot\nindex 39d5cc07b..f0a7721c2 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_search.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_search.robot\n@@ -41,6 +41,7 @@ a document \'${title}\'\n \n the search control panel\n   Go to  ${PLONE_URL}/@@search-controlpanel\n+  Wait until page contains  Search Settings\n \n \n # --- WHEN -------------------------------------------------------------------\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_security.robot b/Products/CMFPlone/tests/robot/test_controlpanel_security.robot\nindex 4e9902589..cb91da1ff 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_security.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_security.robot\n@@ -61,9 +61,11 @@ a logged-in site administrator\n \n the security control panel\n   Go to  ${PLONE_URL}/@@security-controlpanel\n+  Wait until page contains  Security Settings\n \n a published test folder\n   Go to  ${PLONE_URL}/test-folder\n+  Wait until element is visible  css=#plone-contentmenu-workflow\n   Click link  xpath=//li[@id=\'plone-contentmenu-workflow\']/a\n   Wait until element is visible  id=workflow-transition-publish\n   Click link  id=workflow-transition-publish\n@@ -114,16 +116,19 @@ I enable UUID to be used as a user id\n Anonymous users can register to the site\n   Disable autologin\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Plone site\n   Element Should Be Visible  xpath=//a[@id=\'personaltools-join\']\n \n Users can select their own passwords when registering\n   Disable autologin\n   Go to  ${PLONE_URL}/@@register\n+  Wait until page contains  Registration form\n   Element Should Be Visible  xpath=//input[@id=\'form-widgets-password\']\n \n Users can use email as their login name\n   Disable autologin\n   Go to  ${PLONE_URL}/@@register\n+  Wait until page contains  Registration form\n   Element Should Be Visible  xpath=//input[@id=\'form-widgets-email\']\n   Element Should Not Be Visible  xpath=//input[@id=\'form-widgets-username\']\n \n@@ -133,6 +138,7 @@ A user folder should be created when a user registers and logs in to the site\n \n   # I register to the site\n   Go to  ${PLONE_URL}/@@register\n+  Wait until page contains  Registration form\n   Input Text for sure  form.widgets.username  joe\n   Input Text for sure  form.widgets.email  joe@test.com\n   Input Text for sure  form.widgets.password  supersecret\n@@ -141,6 +147,7 @@ A user folder should be created when a user registers and logs in to the site\n \n   # I login to the site\n   Go to  ${PLONE_URL}/login\n+  Wait until page contains  Login Name\n   Input text for sure  __ac_name  joe\n   Input text for sure  __ac_password  supersecret\n   Click Button  Log in\n@@ -148,12 +155,14 @@ A user folder should be created when a user registers and logs in to the site\n \n   # The user folder should be created\n   Go to  ${PLONE_URL}/Members/joe\n+  Wait until page contains  joe\n   Element Should Contain  css=h1.documentFirstHeading  joe\n   Page should Not contain  This page does not seem to exist\n \n Anonymous users can view \'about\' information\n   Disable autologin\n   Go to  ${PLONE_URL}/@@search?SearchableText=test\n+  Wait until page contains  Search results\n   Element Should Be Visible  xpath=//span[contains(@class, \'documentAuthor\')]\n \n UUID should be used for the user id\n@@ -162,6 +171,7 @@ UUID should be used for the user id\n \n   # I register to the site\n   Go to  ${PLONE_URL}/@@register\n+  Wait until page contains  Registration form\n   Input Text for sure  form.widgets.username  joe\n   Input Text for sure  form.widgets.email  joe@test.com\n   Input Text for sure  form.widgets.password  supersecret\n@@ -170,6 +180,7 @@ UUID should be used for the user id\n \n   # I login to the site\n   Go to  ${PLONE_URL}/login\n+  Wait until page contains  Login Name\n   Input text for sure  __ac_name  joe\n   Input text for sure  __ac_password  supersecret\n   Click Button  Log in\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_site.robot b/Products/CMFPlone/tests/robot/test_controlpanel_site.robot\nindex 94a4c24eb..518fd7283 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_site.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_site.robot\n@@ -100,6 +100,7 @@ the site title should be set to \'${expected_site_title}\'\n \n the site logo should be set to the custom logo\n   Go To  ${PLONE_URL}\n+  Wait Until Element Is Visible  css=#portal-logo\n   Page should contain element  //*[@id="portal-logo"]/img[contains(@src,\'@@site-logo/pixel.png\')]\n \n then I can see a sitemap\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_social.robot b/Products/CMFPlone/tests/robot/test_controlpanel_social.robot\nindex bd4f45a22..8acf10ff1 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_social.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_social.robot\n@@ -36,6 +36,7 @@ a logged-in site administrator\n \n the social control panel\n   Go to  ${PLONE_URL}/@@social-controlpanel\n+  Wait until page contains  Social Media Settings\n \n \n # --- WHEN -------------------------------------------------------------------\n@@ -59,17 +60,20 @@ I provide social settings\n \n social tags should exist for anonymous\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Plone site\n   Page should not contain element  css=meta[name="twitter:site"]\n   Page should not contain element  css=meta[property="og:article:publisher"]\n   Page should not contain element  css=meta[property="fb:app_id"]\n   Disable autologin\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Plone site\n   Page should contain element  css=meta[name="twitter:site"]\n   Page should contain element  css=meta[property="og:article:publisher"]\n   Page should contain element  css=meta[property="fb:app_id"]\n \n social tags should not exist\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Plone site\n   Page should not contain element  css=meta[name="twitter:site"]\n   Page should not contain element  css=meta[property="og:article:publisher"]\n   Page should not contain element  css=meta[property="fb:app_id"]\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\nindex a4d9f6248..dd4f480e5 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n@@ -41,9 +41,11 @@ a logged-in manager\n \n the types control panel\n   Go to  ${PLONE_URL}/@@content-controlpanel\n+  Wait until page contains  Content Settings\n \n Globaly enabled comments\n   Go to  ${PLONE_URL}/@@discussion-settings\n+  Wait until page contains  Discussion settings\n   Select checkbox  name=form.widgets.globally_enabled:list\n   Click button  Save\n \n@@ -65,6 +67,7 @@ I select \'${workflow}\' workflow\n \n I add new Link \'${id}\'\n   Go to  ${PLONE_URL}\n+  Wait until page contains  Plone site\n   Create content  type=Link  id=${id}  title=${id}  remoteUrl=http://www.starzel.de\n \n \n@@ -72,9 +75,11 @@ I add new Link \'${id}\'\n \n Link \'${id}\' should have comments enabled\n   Go to  ${PLONE_URL}/${id}\n+  Wait until page contains  ${id}\n   Page should contain element  xpath=//div[@id="commenting"]\n \n Link \'${id}\' should have Single State Workflow enabled\n   Go to  ${PLONE_URL}/${id}\n+  Wait until page contains  ${id}\n   # We check that single state worklow is used, publish button is not present\n   Page should not contain element  xpath=//a[@id="workflow-transition-publish"]\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot b/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot\nindex 9572b23d0..77ee561d1 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_usergroups.robot\n@@ -61,18 +61,22 @@ a logged-in site administrator\n \n the usergroups control panel\n   Go to  ${PLONE_URL}/@@usergroup-userprefs\n+  Wait until page contains  Users and Groups\n \n \n # --- WHEN -------------------------------------------------------------------\n \n I click show all users\n   Click button  Show all\n+  Wait until page contains  User Search\n \n I go to Groups control panel\n   Click link  Groups\n+  Wait until page contains  Group Search\n \n I click show all groups\n   Click button  Show all\n+  Wait until page contains  Group Search\n \n I create new group\n   Click button  Add New Group\n@@ -89,11 +93,13 @@ I create new group\n \n I go to Settings control panel\n   Click link  Settings\n+  Wait until page contains  User and groups settings\n \n enable many groups and many users settings\n   Select Checkbox  name=form.widgets.many_groups:list\n   Select Checkbox  name=form.widgets.many_users:list\n   Click button  Save\n+  Wait until page contains  Data successfully updated.\n \n # --- THEN -------------------------------------------------------------------\n \n@@ -109,10 +115,12 @@ all groups should be shown\n \n showing all users is disabled\n   Click link  Users\n+  Wait until page contains  User Search\n   Page should not contain  Show all\n \n showing all groups is disabled\n   Click link  Groups\n+  Wait until page contains  Group Search\n   Page should not contain  Show all\n \n new group should show under all groups\ndiff --git a/Products/CMFPlone/tests/robot/test_edit.robot b/Products/CMFPlone/tests/robot/test_edit.robot\nindex c03e7f838..cdeffdc00 100644\n--- a/Products/CMFPlone/tests/robot/test_edit.robot\n+++ b/Products/CMFPlone/tests/robot/test_edit.robot\n@@ -73,6 +73,7 @@ Scenario: Form dropdowns follows DateTime widget values\n an edited page\n     Create content  type=Document  title=${TITLE}\n     Go to  ${PLONE_URL}/${PAGE_ID}/edit\n+    Wait until page contains  Edit Page\n \n \n # --- WHEN -------------------------------------------------------------------\ndiff --git a/Products/CMFPlone/tests/robot/test_edit_user_schema.robot b/Products/CMFPlone/tests/robot/test_edit_user_schema.robot\nindex 8b2f83210..ce8b87f4e 100644\n--- a/Products/CMFPlone/tests/robot/test_edit_user_schema.robot\n+++ b/Products/CMFPlone/tests/robot/test_edit_user_schema.robot\n@@ -80,6 +80,7 @@ a logged-in manager\n \n site registration enabled\n   Go To  ${PLONE_URL}/@@security-controlpanel\n+  Wait until page contains  Security Settings\n   Wait until page contains element  form.widgets.enable_self_reg:list\n   Select Checkbox  form.widgets.enable_self_reg:list\n   Click Button  Save\ndiff --git a/Products/CMFPlone/tests/robot/test_linkintegrity.robot b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\nindex 6f812fda8..5544e34b4 100644\n--- a/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n+++ b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n@@ -91,6 +91,7 @@ a link in rich text\n \n should show warning when deleting page\n   Go To  ${PLONE_URL}/foo\n+  Wait until element is visible  css=#plone-contentmenu-actions a\n   Click Link  css=#plone-contentmenu-actions a\n   Wait until element is visible  css=#plone-contentmenu-actions-delete\n   Click Link  css=#plone-contentmenu-actions-delete\n@@ -126,6 +127,7 @@ should not show warning when deleting page from folder_contents\n \n should not show warning when deleting page\n   Go To  ${PLONE_URL}/foo\n+  Wait until element is visible  css=#plone-contentmenu-actions a\n   Click Link  css=#plone-contentmenu-actions a\n   Wait until element is visible  css=#plone-contentmenu-actions-delete\n   Click Link  css=#plone-contentmenu-actions-delete\n@@ -134,6 +136,7 @@ should not show warning when deleting page\n \n remove link to page\n   Go To  ${PLONE_URL}/bar\n+  Wait until element is visible  css=#contentview-edit a\n   Click Link  css=#contentview-edit a\n   Wait until element is visible  css=.mce-edit-area iframe\n   Select Frame  css=.mce-edit-area iframe\ndiff --git a/Products/CMFPlone/tests/robot/test_overlays.robot b/Products/CMFPlone/tests/robot/test_overlays.robot\nindex 716a549cf..9b4c581b4 100644\n--- a/Products/CMFPlone/tests/robot/test_overlays.robot\n+++ b/Products/CMFPlone/tests/robot/test_overlays.robot\n@@ -218,12 +218,15 @@ a logged-in site administrator\n \n the users and groups configlet\n     Go to  ${PLONE_URL}/@@usergroup-userprefs\n+    Wait until page contains  User Search\n \n I click the \'${link_name}\' link\n+    Wait until page contains  ${link_name}\n     Element should be visible  xpath=//a[descendant-or-self::*[contains(text(), \'${link_name}\')]]\n     Click Link  xpath=//a[descendant-or-self::*[contains(text(), \'${link_name}\')]]\n \n the \'${link_name}\' overlay\n+    Wait until page contains  ${link_name}\n     Click Link  xpath=//a[descendant-or-self::*[contains(text(), \'${link_name}\')]]\n     Wait until keyword succeeds  30  1  Page should contain element  css=div.plone-modal-dialog\n \ndiff --git a/Products/CMFPlone/tests/robot/test_portlets.robot b/Products/CMFPlone/tests/robot/test_portlets.robot\nindex ca54a825b..313b42a77 100644\n--- a/Products/CMFPlone/tests/robot/test_portlets.robot\n+++ b/Products/CMFPlone/tests/robot/test_portlets.robot\n@@ -24,6 +24,7 @@ Scenario: Add Login Portlet\n \n a manage portlets view\n     Go to   ${PLONE_URL}/@@manage-portlets\n+    Wait until page contains  Manage portlets\n \n I add a \'${portletname}\' portlet to the left column\n     Select from list  xpath=//div[@id="portletmanager-plone-leftcolumn"]//select  ${portletname}\ndiff --git a/Products/CMFPlone/tests/robot/test_querystring.robot b/Products/CMFPlone/tests/robot/test_querystring.robot\nindex f06598d1f..13c1d71ff 100644\n--- a/Products/CMFPlone/tests/robot/test_querystring.robot\n+++ b/Products/CMFPlone/tests/robot/test_querystring.robot\n@@ -70,6 +70,8 @@ Scenario: Searchable text query\n     and the querystring pattern\n     When I open the criteria Searchable text\n     and I search for a\n+    and Sleep  0.2\n+    and Wait Until Element Is Visible  css=div.querystring-preview\n     and Click Element  css=div.querystring-preview\n     Then we expect 2 hits\n     When I open the criteria Searchable text\n@@ -331,6 +333,9 @@ we expect ${NUM} hits\n     mark results\n \n we do not expect any hits\n+    [Documentation]  The search results may be the previous results that are still visible for a short time, so sleep a bit.  Alternatively look at http://www.obeythetestinggoat.com/how-to-get-selenium-to-wait-for-page-load-after-a-click.html\n+    Sleep  0.2\n+    Wait Until Element Is Visible  css=div#search-results\n     Wait Until Element Contains  css=div#search-results  No results were found.\n \n a logged-in manager\ndiff --git a/Products/CMFPlone/tests/robot/test_thememapper.robot b/Products/CMFPlone/tests/robot/test_thememapper.robot\nindex 951fd5190..16d3a7a58 100644\n--- a/Products/CMFPlone/tests/robot/test_thememapper.robot\n+++ b/Products/CMFPlone/tests/robot/test_thememapper.robot\n@@ -50,6 +50,7 @@ Scenario: Thememapper LESS builder\n \n a new theme to edit\n     Go to  ${PLONE_URL}/theming-controlpanel\n+    Wait until page contains  Theme settings\n     Click Element   jquery=a[href="#modal-copy-barceloneta"]\n     Wait Until Element Is Visible   jquery=.plone-modal-body input[type="text"]\n     Input Text  jquery=.plone-modal-body input[type="text"]   Test\ndiff --git a/Products/CMFPlone/tests/robot/test_tinymce.robot b/Products/CMFPlone/tests/robot/test_tinymce.robot\nindex c4f617e8a..c6bc13726 100644\n--- a/Products/CMFPlone/tests/robot/test_tinymce.robot\n+++ b/Products/CMFPlone/tests/robot/test_tinymce.robot\n@@ -43,6 +43,7 @@ Scenario: A page is opened to edit in TinyMCE\n an edited page\n     Create content  type=Document  title=${TITLE}\n     Go to  ${PLONE_URL}/${PAGE_ID}/edit\n+    Wait until page contains  Edit Page\n \n an uploaded image\n     Create content  type=Image  title=an-image\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex e18f08897..bc343ce22 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -596,28 +596,25 @@ def testDisableFolderTabs(self):\n         self.assertEqual(tabs, [])\n \n     def testTabsExcludeItemsWithExcludeProperty(self):\n-        # Make sure that items witht he exclude_from_nav property are purged\n-        view = self.view_class(self.portal, self.request.clone())\n-        tabs = view.topLevelTabs(actions=[])\n-        orig_len = len(tabs)\n         self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n \n-        # For the moment nothing changes because the default for\n-        # plone.show_excluded_items is True\n-        view = self.view_class(self.portal, self.request.clone())\n+        # if we\'re not in context of the excluded item it should disappear\n+        view = self.view_class(self.portal, self.request)\n+        tabs = view.topLevelTabs(actions=[])\n+        tab_names = [t[\'id\'] for t in tabs]\n+        self.assertNotIn(\'folder2\', tab_names)\n+\n+        # but if we\'re inside, it should be visible\n+        view = self.view_class(self.portal.folder2, self.request)\n         tabs = view.topLevelTabs(actions=[])\n-        self.assertTrue(tabs)\n-        self.assertEqual(len(tabs), orig_len)\n         tab_names = [t[\'id\'] for t in tabs]\n         self.assertIn(\'folder2\', tab_names)\n \n         # Now we flip the setting for plone.show_excluded_items\n         self.navigation_settings.show_excluded_items = False\n-        view = self.view_class(self.portal, self.request)\n+        view = self.view_class(self.portal.folder2, self.request)\n         tabs = view.topLevelTabs(actions=[])\n-        self.assertTrue(tabs)\n-        self.assertEqual(len(tabs), orig_len - 1)\n         tab_names = [t[\'id\'] for t in tabs]\n         self.assertNotIn(\'folder2\', tab_names)\n \ndiff --git a/news/2516.bugfix b/news/2516.bugfix\ndeleted file mode 100644\nindex f78be280a..000000000\n--- a/news/2516.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix excluded items in navigation [ale-rt]\ndiff --git a/news/2689.bugfix b/news/2689.bugfix\ndeleted file mode 100644\nindex 5029791a7..000000000\n--- a/news/2689.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Add basic validators for the portal action controlpanel forms\ndiff --git a/news/2788.bugfix b/news/2788.bugfix\ndeleted file mode 100644\nindex e3d68b9b4..000000000\n--- a/news/2788.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix wrong msgids in link management control panel [erral]\ndiff --git a/news/2792.bugfix b/news/2792.bugfix\ndeleted file mode 100644\nindex e7c6fc4c2..000000000\n--- a/news/2792.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix errors that abort the verification when debugging a DB with ./bin/instance verifydb -D.\n-[pbauer]\n\\ No newline at end of file\ndiff --git a/news/2798.bugfix b/news/2798.bugfix\ndeleted file mode 100644\nindex 683a79d0e..000000000\n--- a/news/2798.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Add summary of all errors when verifying a DB with ./bin/instance verifydb.\n-[pbauer]\n\\ No newline at end of file\ndiff --git a/news/2809.bugfix b/news/2809.bugfix\nnew file mode 100644\nindex 000000000..9e3c9b8e1\n--- /dev/null\n+++ b/news/2809.bugfix\n@@ -0,0 +1 @@\n+Fixed unstable Markup Control Panel robot test again.  [maurits]\ndiff --git a/news/2821.bugfix b/news/2821.bugfix\nnew file mode 100644\nindex 000000000..f003cf01c\n--- /dev/null\n+++ b/news/2821.bugfix\n@@ -0,0 +1 @@\n+add a missing space in an error message in the redirects control panel and replace "deffered" by "deferred" [vincentfretin]\ndiff --git a/news/2828.bugfix b/news/2828.bugfix\nnew file mode 100644\nindex 000000000..9971ac605\n--- /dev/null\n+++ b/news/2828.bugfix\n@@ -0,0 +1,2 @@\n+restore ``exclude_from_nav`` combined with ``show_excluded_items`` handling\n+[petschki]\ndiff --git a/setup.py b/setup.py\nindex b832ce9ef..d532a6fb3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n from setuptools import find_packages\n \n-version = \'5.2rc2.dev0\'\n+version = \'5.2rc3.dev0\'\n \n \n setup(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-04-11T11:04:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/705d0eaf0cb6d1ffaff73e1d35968c82000b00b8

Merge pull request #2801 from plone/maurits-extend-paths

Implement redirections features: store date and manual, export, bulk remove

Files changed:
A Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot
A news/2799.feature.1
A news/2799.feature.2
A news/2799.feature.3
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex a117d3401..5e4aa1663 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -54,6 +54,7 @@\n           <legend i18n:translate="add_alias">\n             Add a new alternative url\n           </legend>\n+          <p i18n:translate="description_change_primary_url">To change the primary url of content, use Actions > Rename.</p>\n \n           <div class="field"\n                tal:define="error view/form_errors/redirection|nothing"\n@@ -79,6 +80,7 @@\n \n           <div class="formHelp" i18n:translate="help_alias">\n             Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+            Only urls that result in a 404 not found page will result in a redirect occurring.\n           </div>\n \n           <input\n@@ -112,6 +114,7 @@\n \n           <div class="formHelp" i18n:translate="help_target_path">\n             Enter the absolute path of the target. The path must start with \'/\'.\n+            Target must exist or be an existing alternative url path to the target.\n           </div>\n \n           <input\n@@ -146,13 +149,14 @@\n           <p i18n:translate="description_bulk_upload">\n             Add many alternative urls at once by uploading a CSV file. The first column should be the path to\n             redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative,\n-            starting with a slash (/).\n+            starting with a slash (/). An optional third colum can contain a date and time.\n+            An optional fourth column can contain a boolean to mark as a manual redirect (default true).\n           </p>\n           <p>\n             <tal:block i18n:translate="example_caption_bulk_upload">Example:</tal:block><br />\n             <code i18n:translate="example_bulk_upload">\n-              /old-home-page.asp,/front-page<br />\n-              /people/JoeT,/Users/joe-thurston\n+              /old-home-page.asp,/front-page,2019/01/27 10:42:59 GMT+1,true<br />\n+              /people/JoeT,/Users/joe-thurston,2018-12-31,false\n             </code>\n           </p>\n \n@@ -204,6 +208,16 @@\n             All existing alternative urls for this site\n           </legend>\n \n+          <div>\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Download all as CSV"\n+                name="form.button.Download"\n+                i18n:attributes="value"\n+              />\n+          </div>\n+\n           <label for="filter-existing-aliases-q" i18n:translate="">Filter by prefix</label>\n           <input\n               type="text"\n@@ -211,6 +225,20 @@\n               value=""\n               id="filter-existing-aliases-q"\n                tal:attributes="value python:request.form.get(\'q\', \'/\')"/>\n+          <label for="filter-existing-aliases-manual" i18n:translate="">Manually or automatically added?</label>\n+          <div\n+              id="filter-existing-aliases-manual"\n+              tal:define="chosen python:request.form.get(\'manual\', \'\')">\n+              <input type="radio" name="manual" id="manual-both" value="" tal:attributes="checked python:chosen==\'\'">\n+              <label for="manual-both" i18n:translate="">Both</label><br />\n+              <input type="radio" name="manual" id="manual-no" value="no" tal:attributes="checked python:chosen==\'no\'">\n+              <label for="manual-no" i18n:translate="">Automatically</label><br />\n+              <input type="radio" name="manual" id="manual-yes" value="yes" tal:attributes="checked python:chosen==\'yes\'">\n+              <label for="manual-yes" i18n:translate="">Manually</label>\n+          </div>\n+          <label for="filter-existing-aliases-date" i18n:translate="">Created before</label>\n+          <input type="date" id="filter-existing-aliases-date" name="datetime"\n+               tal:attributes="value python:request.form.get(\'datetime\', \'\')"/>\n           <div class="formControls">\n             <input\n                 class="context"\n@@ -225,6 +253,7 @@\n                tal:attributes="class python:error and \'field error\' or \'field\'"\n                tal:content="error" />\n \n+          <p>Alternative url path &rarr; target url path (date and time of creation, manually created yes/no) </p>\n           <tal:redirects repeat="redirect batch">\n             <div>\n               <label>\n@@ -233,7 +262,7 @@\n                   class="noborder"\n                   name="redirects:tuple"\n                   value="${redirect/redirect}" />\n-              ${redirect/path} &rarr; ${redirect/redirect-to}\n+              ${redirect/path} &rarr; ${redirect/redirect-to} (${redirect/datetime}, ${redirect/manual})\n               </label>\n             </div>\n           </tal:redirects>\n@@ -245,9 +274,14 @@\n           <div class="formControls">\n             <input class="context"\n                    type="submit"\n-                   value="Remove"\n+                   value="Remove selected"\n                    name="form.button.Remove"\n                    i18n:attributes="value" />\n+            <input class="context"\n+                   type="submit"\n+                   value="Remove all that match filter"\n+                   name="form.button.MatchRemove"\n+                   i18n:attributes="value" />\n           </div>\n \n         </fieldset>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex 617fbac3b..90c4c3b4f 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -39,6 +39,7 @@\n         Using this form, you can manage alternative urls for an item. This\n         is an easy way to make an item available under two different URLs.\n       </p>\n+      <p i18n:translate="description_change_primary_url">To change the primary url of content, use Actions > Rename.</p>\n \n       <form\n           action="${view/view_url}"\n@@ -71,6 +72,7 @@\n \n             <div class="formHelp" i18n:translate="help_alias">\n               Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+              Only urls that result in a 404 not found page will result in a redirect occurring.\n             </div>\n \n             <input\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 89bf4e0ae..b17bc680f 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,4 +1,7 @@\n # -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from DateTime.interfaces import DateTimeError\n+from csv import writer\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n from plone.memoize.view import memoize\n@@ -15,9 +18,18 @@\n from zope.i18nmessageid import MessageFactory\n \n import csv\n+import logging\n+import tempfile\n+\n+try:\n+    # use this to stream csv data if we can\n+    from ZPublisher.Iterators import filestream_iterator\n+except ImportError:\n+    filestream_iterator = None\n \n \n _ = MessageFactory(\'plone\')\n+logger = logging.getLogger(__name__)\n \n \n def absolutize_path(path, is_source=True):\n@@ -125,7 +137,9 @@ def __call__(self):\n             else:\n                 del form[\'redirection\']\n                 storage.add(\n-                    redirection, "/".join(self.context.getPhysicalPath())\n+                    redirection,\n+                    "/".join(self.context.getPhysicalPath()),\n+                    manual=True,\n                 )\n                 status.addStatusMessage(\n                     _(u"Alternative url added."), type=\'info\'\n@@ -151,7 +165,7 @@ def view_url(self):\n \n \n class RedirectionSet(object):\n-    def __init__(self, query=\'\'):\n+    def __init__(self, query=\'\', created=\'\', manual=\'\'):\n         self.storage = getUtility(IRedirectionStorage)\n \n         portal = getSite()\n@@ -166,9 +180,39 @@ def __init__(self, query=\'\'):\n             # Apparently that is the way to minize the keys we ask.\n             min_k = u\'{0:s}/{1:s}\'.format(self.portal_path, query.strip(\'/\'))\n             max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n-            self.data = self.storage._paths.keys(min=min_k, max=max_k)\n+            self.data = self.storage._paths.keys(\n+                min=min_k, max=max_k, excludemax=True\n+            )\n         else:\n             self.data = self.storage._paths.keys()\n+        if manual:\n+            # either \'yes\' or \'no\', otherwise we ignore the filter\n+            if manual == \'yes\':\n+                manual = True\n+            elif manual == \'no\':\n+                manual = False\n+            else:\n+                manual = \'\'\n+        if created:\n+            try:\n+                created = DateTime(created)\n+            except DateTimeError:\n+                logger.warning(\n+                    \'Failed to parse as DateTime: %s\', created\n+                )\n+                created = \'\'\n+        if created or manual != \'\':\n+            chosen = []\n+            for redirect in self.data:\n+                info = self.storage.get_full(redirect)\n+                if manual != \'\':\n+                    if info[2] != manual:\n+                        continue\n+                if created and info[1]:\n+                    if info[1] >= created:\n+                        continue\n+                chosen.append(redirect)\n+            self.data = chosen\n \n     def __len__(self):\n         return len(self.data)\n@@ -179,10 +223,18 @@ def __getitem__(self, item):\n             path = redirect[self.portal_path_len :]\n         else:\n             path = redirect\n-        redirect_to = self.storage.get(redirect)\n+        # redirect_to = self.storage.get(redirect)\n+        info = self.storage.get_full(redirect)\n+        redirect_to = info[0]\n         if redirect_to.startswith(self.portal_path):\n             redirect_to = redirect_to[self.portal_path_len :]\n-        return {\'redirect\': redirect, \'path\': path, \'redirect-to\': redirect_to}\n+        return {\n+            \'redirect\': redirect,\n+            \'path\': path,\n+            \'redirect-to\': redirect_to,\n+            \'datetime\': info[1],\n+            \'manual\': info[2],\n+        }\n \n \n class RedirectsBatchView(PloneBatchView):\n@@ -209,7 +261,11 @@ def redirects(self):\n             \'redirect\' are equal.\n         """\n         return Batch(\n-            RedirectionSet(self.request.form.get(\'q\', \'\')),\n+            RedirectionSet(\n+                query=self.request.form.get(\'q\', \'\'),\n+                created=self.request.form.get(\'datetime\', \'\'),\n+                manual=self.request.form.get(\'manual\', \'\'),\n+            ),\n             15,\n             int(self.request.form.get(\'b_start\', \'0\')),\n             orphan=1,\n@@ -226,8 +282,20 @@ def __call__(self):\n         self.csv_errors = []\n         self.form_errors = {}\n \n-        if \'form.button.Remove\' in form:\n-            redirects = form.get(\'redirects\', ())\n+        if \'form.button.Remove\' in form or \'form.button.MatchRemove\' in form:\n+            if \'form.button.Remove\' in form:\n+                redirects = form.get(\'redirects\', ())\n+            else:\n+                query = self.request.form.get(\'q\', \'\')\n+                created = self.request.form.get(\'datetime\', \'\')\n+                manual = self.request.form.get(\'manual\', \'\')\n+                if created or manual or (query and query != \'/\'):\n+                    rset = RedirectionSet(\n+                        query=query, created=created, manual=manual\n+                    )\n+                    redirects = list(rset.data)\n+                else:\n+                    redirects = []\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) == 0:\n@@ -256,6 +324,8 @@ def __call__(self):\n                 del form[\'target_path\']\n         elif \'form.button.Upload\' in form:\n             self.upload(form[\'file\'], portal, storage, status)\n+        elif \'form.button.Download\' in form:\n+            return self.download()\n \n         return self.index()\n \n@@ -286,7 +356,7 @@ def add(self, redirection, target, portal, storage, status):\n         if err:\n             status.addStatusMessage(_(err), type=\'error\')\n         else:\n-            storage.add(abs_redirection, abs_target)\n+            storage.add(abs_redirection, abs_target, manual=True)\n             status.addStatusMessage(\n                 _(u"Alternative url from {0} to {1} added.").format(\n                     abs_redirection, abs_target\n@@ -314,11 +384,33 @@ def upload(self, file, portal, storage, status):\n         dialect = csv.Sniffer().sniff(file.readline() + file.readline())\n         file.seek(0)\n \n-        successes = []  # list of tuples: (abs_redirection, target)\n+        # key is old path, value is tuple(new path, datetime, manual)\n+        successes = {}\n         had_errors = False\n         for i, fields in enumerate(csv.reader(file, dialect)):\n-            if len(fields) == 2:\n-                redirection, target = fields\n+            if len(fields) >= 2:\n+                redirection = fields[0]\n+                target = fields[1]\n+\n+                now = None\n+                manual = True\n+                if len(fields) >= 3:\n+                    dt = fields[2]\n+                    if dt:\n+                        try:\n+                            now = DateTime(dt)\n+                        except DateTimeError:\n+                            logger.warning(\n+                                \'Failed to parse as DateTime: %s\', dt\n+                            )\n+                            now = None\n+                if len(fields) >= 4:\n+                    manual = fields[3].lower()\n+                    # Compare first character with false, no, 0.\n+                    if manual and manual[0] in \'fn0\':\n+                        manual = False\n+                    else:\n+                        manual = True\n                 abs_redirection, err = absolutize_path(\n                     redirection, is_source=True\n                 )\n@@ -326,6 +418,13 @@ def upload(self, file, portal, storage, status):\n                     target, is_source=False\n                 )\n                 if err and target_err:\n+                    if (\n+                        i == 0\n+                        and not redirection.startswith(\'/\')\n+                        and not target.startswith(\'/\')\n+                    ):\n+                        # First line is a header.  Ignore this.\n+                        continue\n                     err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n                 elif target_err:\n                     err = target_err\n@@ -337,11 +436,11 @@ def upload(self, file, portal, storage, status):\n                             u"an endless cycle of redirects."\n                         )\n             else:\n-                err = _(u"Each line must have 2 columns.")\n+                err = _(u"Each line must have 2 or more columns.")\n \n             if not err:\n                 if not had_errors:  # else don\'t bother\n-                    successes.append((abs_redirection, abs_target))\n+                    successes[abs_redirection] = (abs_target, now, manual)\n             else:\n                 had_errors = True\n                 self.csv_errors.append(\n@@ -353,8 +452,7 @@ def upload(self, file, portal, storage, status):\n                 )\n \n         if not had_errors:\n-            for abs_redirection, abs_target in successes:\n-                storage.add(abs_redirection, abs_target)\n+            storage.update(successes)\n             status.addStatusMessage(\n                 _(\n                     u"${count} alternative urls added.",\n@@ -362,6 +460,68 @@ def upload(self, file, portal, storage, status):\n                 ),\n                 type=\'info\',\n             )\n+        else:\n+            self.csv_errors.insert(\n+                0,\n+                dict(\n+                    line_number=0,\n+                    line=\'\',\n+                    message=_(\n+                        u\'msg_delimiter\',\n+                        default=u"Delimiter detected: ${delimiter}",\n+                        mapping={\'delimiter\': dialect.delimiter},\n+                    ),\n+                ),\n+            )\n+\n+    def download(self):\n+        """Download all redirects as CSV.\n+\n+        We save to a temporary file and try to stream it as a blob:\n+        with one million redirects you easily get 30 MB, which is slow as non-blob.\n+        """\n+        portal = getSite()\n+        portal_path = "/".join(portal.getPhysicalPath())\n+        len_portal_path = len(portal_path)\n+        file_descriptor, file_path = tempfile.mkstemp(\n+            suffix=\'.csv\', prefix=\'redirects_\'\n+        )\n+        with open(file_path, \'w\') as stream:\n+            csv_writer = writer(stream)\n+            csv_writer.writerow((\'old path\', \'new path\', \'datetime\', \'manual\'))\n+            storage = getUtility(IRedirectionStorage)\n+            paths = storage._paths\n+            # Note that the old and new paths start with /plone-site-id.\n+            # We strip this, as it is superfluous, and we would get errors\n+            # when using this download as an upload.\n+            for old_path, new_info in paths.items():\n+                if old_path.startswith(portal_path):\n+                    old_path = old_path[len_portal_path:]\n+                row = [old_path]\n+                if not isinstance(new_info, tuple):\n+                    # Old data: only a single path, no date and manual boolean.\n+                    new_info = (new_info,)\n+                row.extend(new_info)\n+                new_path = row[1]\n+                if new_path.startswith(portal_path):\n+                    row[1] = new_path[len_portal_path:]\n+                csv_writer.writerow(row)\n+        with open(file_path) as stream:\n+            contents = stream.read()\n+            length = len(contents)\n+\n+        response = self.request.response\n+        response.setHeader(\'Content-Type\', \'text/csv\')\n+        response.setHeader(\'Content-Length\', length)\n+        response.setHeader(\n+            \'Content-Disposition\', \'attachment; filename=redirects.csv\'\n+        )\n+        if filestream_iterator is None:\n+            return contents\n+        # TODO: this is not enough to really stream the file.\n+        # I think we would need to handle Request-Range, like in the old\n+        # plone.app.blob.download.handleRequestRange\n+        return filestream_iterator(file_path, \'rb\')\n \n     @memoize\n     def view_url(self):\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex cd36ef3ed..d77e96ffd 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from DateTime import DateTime\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -6,9 +7,11 @@\n from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from Products.CMFPlone.utils import safe_bytes\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import io\n import math\n import transaction\n import unittest\n@@ -69,29 +72,97 @@ def test_redirection_controlpanel_add_redirect(self):\n             u\'Redirection storage should have path "{0}"\'.format(storage_path),\n         )\n \n+    def test_redirection_controlpanel_remove_redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        for i in range(31):\n+            storage[\'/plone/alias{0}\'.format(i)] = \'/plone/test-folder\'\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # A batch of 15 is shown, so some are missing.\n+        self.assertTrue(\'/plone/alias1\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias10\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias19\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias2\' in self.browser.contents)\n+        self.assertFalse(\'/plone/alias29\' in self.browser.contents)\n+        # query aliases starting with /alias2\n+        self.browser.getControl(name=\'q\').value = \'/alias2\'\n+        self.browser.getControl(name=\'form.button.filter\').click()\n+        self.assertFalse(\'/plone/alias1\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias2\' in self.browser.contents)\n+        self.assertTrue(\'/plone/alias29\' in self.browser.contents)\n+        # The filter could return one value too much.\n+        # This tests that we have excludemax=True in the RedirectionSet.\n+        self.assertFalse(\'/plone/alias3\' in self.browser.contents)\n+        self.assertFalse(\'/plone/alias30\' in self.browser.contents)\n+        # Remove two.\n+        self.browser.getControl(name=\'redirects:tuple\').value = [\n+            \'/plone/alias2\',\n+            \'/plone/alias20\',\n+        ]\n+        self.browser.getControl(name=\'form.button.Remove\').click()\n+        self.assertFalse(\'/plone/alias2\' in storage)\n+        self.assertFalse(\'/plone/alias20\' in storage)\n+        self.assertTrue(\'/plone/alias1\' in storage)\n+        self.assertTrue(\'/plone/alias29\' in storage)\n+        self.assertEqual(storage.get(\'/plone/alias29\'), \'/plone/test-folder\')\n+\n+    def test_redirection_controlpanel_remove_matching_redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        for i in range(30):\n+            storage[\'/plone/alias{0}\'.format(i)] = \'/plone/test-folder\'\n+        transaction.commit()\n+\n+        # Removing matching redirects can only happen when a filter is selected.\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.MatchRemove\').click()\n+        self.assertTrue(\n+            \'No alternative urls selected for removal.\'\n+            in self.browser.contents\n+        )\n+        self.assertEqual(len(storage), 30)\n+        # query aliases starting with /alias2\n+        self.browser.getControl(name=\'q\').value = \'/alias2\'\n+        # The filter is immediately taken into account,\n+        # without first explicitly clicking filter.\n+        # self.browser.getControl(name=\'form.button.filter\').click()\n+        self.browser.getControl(name=\'form.button.MatchRemove\').click()\n+        self.assertEqual(len(storage), 19)\n+        self.assertFalse(\'/plone/alias2\' in storage)\n+        self.assertFalse(\'/plone/alias20\' in storage)\n+        self.assertFalse(\'/plone/alias29\' in storage)\n+        self.assertTrue(\'/plone/alias1\' in storage)\n+        self.assertTrue(\'/plone/alias12\' in storage)\n+\n     def test_redirection_controlpanel_set(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n+        now = DateTime(\'2022-02-03\')\n         for i in range(1000):\n             storage.add(\n                 \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n                 \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                now=now,\n             )\n         redirects = RedirectionSet()\n         self.assertEqual(len(redirects), 1000)\n         self.assertDictEqual(\n             redirects[0],\n             {\n-                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'datetime\': DateTime(\'2022-02-03\'),\n+                \'manual\': False,\n                 \'path\': \'/foo/0\',\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n                 \'redirect-to\': \'/bar/0\',\n             },\n         )\n         self.assertDictEqual(\n             redirects[999],\n             {\n-                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n+                \'datetime\': DateTime(\'2022-02-03\'),\n+                \'manual\': False,\n                 \'path\': \'/foo/999\',\n+                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n                 \'redirect-to\': \'/bar/999\',\n             },\n         )\n@@ -99,8 +170,10 @@ def test_redirection_controlpanel_set(self):\n         self.assertDictEqual(\n             list(iter(redirects))[0],\n             {\n-                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'datetime\': DateTime(\'2022-02-03\'),\n+                \'manual\': False,\n                 \'path\': \'/foo/0\',\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n                 \'redirect-to\': \'/bar/0\',\n             },\n         )\n@@ -170,6 +243,9 @@ def test_redirection_controlpanel_filtering(self):\n         self.assertEqual(len(redirects), 1000)\n         redirects = RedirectionSet(query=\'/foo2\')\n         self.assertEqual(len(redirects), 1000)\n+        # this should return one and not two (we need excludemax=True)\n+        redirects = RedirectionSet(query=\'/foo1/777\')\n+        self.assertEqual(len(redirects), 1)\n \n         request = self.layer[\'request\'].clone()\n         request.form[\'q\'] = \'/foo\'\n@@ -202,6 +278,116 @@ def test_redirection_controlpanel_filtering(self):\n         request.form[\'q\'] = \'/foo2\'\n         self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n \n+    def test_redirection_controlpanel_filter_manual(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(100):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                manual=False,\n+            )\n+        for i in range(100, 300):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                manual=True,\n+            )\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 300)\n+        # Form has yes, no, or empty string, anything else is ignored\n+        # (so treated as empty string).\n+        redirects = RedirectionSet(manual=\'yes\')\n+        self.assertEqual(len(redirects), 200)\n+        redirects = RedirectionSet(manual=\'no\')\n+        self.assertEqual(len(redirects), 100)\n+        redirects = RedirectionSet(manual=\'\')\n+        self.assertEqual(len(redirects), 300)\n+        redirects = RedirectionSet(manual=\'badvalue\')\n+        self.assertEqual(len(redirects), 300)\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'manual\'] = \'\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(300 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'manual\'] = \'yes\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(200 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'manual\'] = \'no\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(100 / 15.0))\n+\n+    def test_redirection_controlpanel_filter_date(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        time0 = DateTime(\'2001-01-01\')\n+        for i in range(400):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                now=time0 + i,\n+            )\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 400)\n+        # created can be anything that can be parsed by DateTime.\n+        # Otherwise it is ignored.\n+        self.assertEqual(len(RedirectionSet(created=\'2019-01-01\')), 400)\n+        self.assertEqual(len(RedirectionSet(created=\'1999-01-01\')), 0)\n+        self.assertEqual(len(RedirectionSet(created=\'2001-01-01\')), 0)\n+        self.assertEqual(len(RedirectionSet(created=\'2001-01-02\')), 1)\n+        self.assertEqual(len(RedirectionSet(created=\'2001-02-01\')), 31)\n+        self.assertEqual(len(RedirectionSet(created=\'2001-02-01 00:00:00\')), 31)\n+        self.assertEqual(len(RedirectionSet(created=\'2001-02-01 00:00:01\')), 32)\n+        self.assertEqual(len(RedirectionSet(created=\'badvalue\')), 400)\n+\n+        # DateTime(\'2002-01-01\') results in a timezone GMT+0\n+        self.assertEqual(len(RedirectionSet(created=\'2002-01-01\')), 365)\n+        # DateTime(\'2002/01/01\') results in a timezone GMT+1 for me,\n+        # or a different zone depending on where in the world you are.\n+        # So we need to be lenient in the tests.\n+        self.assertGreaterEqual(len(RedirectionSet(created=\'2002/01/01\')), 364)\n+        self.assertLessEqual(len(RedirectionSet(created=\'2002/01/01\')), 366)\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'datetime\'] = \'\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'datetime\'] = \'2001-01-27\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(27 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'datetime\'] = \'2002-01-01\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(365 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'datetime\'] = \'2019-01-01\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n+\n     def test_redirection_controlpanel_redirect_no_target(self):\n         path_alias = \'/alias\'\n         path_target = \'/not-existing\'\n@@ -261,6 +447,30 @@ def test_manage_aliases_standard(self):\n         self.assertTrue(storage.has_path(\'/plone/alias\'))\n         self.assertEqual(storage.get(\'/plone/alias\'), \'/plone/test-folder\')\n \n+    def test_manage_aliases_remove(self):\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+        storage[\'/plone/alias1\'] = \'/plone/test-folder\'\n+        storage[\'/plone/alias2\'] = \'/plone/test-folder\'\n+        storage[\'/plone/alias3\'] = \'/plone/test-folder\'\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirects:tuple\').value = [\n+            \'/plone/alias1\',\n+            \'/plone/alias2\',\n+        ]\n+        self.browser.getControl(name=\'form.button.Remove\').click()\n+\n+        self.assertTrue(\n+            \'Alternative urls removed.\' in self.browser.contents,\n+            u\'Message for removed alternative url missing\',\n+        )\n+        self.assertFalse(\'/plone/alias1\' in storage)\n+        self.assertFalse(\'/plone/alias2\' in storage)\n+        self.assertTrue(\'/plone/alias3\' in storage)\n+        self.assertEqual(storage.get(\'/plone/alias3\'), \'/plone/test-folder\')\n+\n     def test_manage_aliases_navigation_root(self):\n         from zope.interface import alsoProvides\n         from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -418,3 +628,279 @@ def test_absolutize_path(self):\n                 \'The provided target object does not exist.\',\n             ),\n         )\n+\n+    def test_upload_two_columns(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # Note: the targets must exist as actual content.\n+        data = [\n+            (b\'/old-home-page.asp\', b\'/test-folder\'),\n+            (b\'/people/JoeT\', b\'/Members\'),\n+        ]\n+        csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(csv), \'text/plain\', \'redirects.csv\'\n+        )\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'No alternative urls were added.\', self.browser.contents\n+        )\n+        self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n+        storage = getUtility(IRedirectionStorage)\n+        self.assertEqual(len(storage), 2)\n+        self.assertEqual(\n+            storage.get(\'/plone/old-home-page.asp\'), \'/plone/test-folder\'\n+        )\n+        self.assertEqual(storage.get(\'/plone/people/JoeT\'), \'/plone/Members\')\n+        # Test the internals.\n+        redirect = storage._paths[\'/plone/old-home-page.asp\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertIsInstance(redirect[1], DateTime)\n+        self.assertEqual(redirect[2], True)  # manual\n+\n+    def test_upload_four_columns(self):\n+        # Two columns are the minimum,\n+        # but we can handle a third column with a datetime,\n+        # a fourth column with manual True/False,\n+        # and more columns that we ignore.\n+        now = DateTime()\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # Note: the targets must exist as actual content.\n+        data = [\n+            # We can first have a header, which should be ignored.\n+            # Second one should have the same number of columns,\n+            # otherwise the delimiter detection can get it wrong.\n+            (b\'old path\', b\'new path\', b\'datetime\', b\'manual\'),\n+            # bad dates are silently ignored\n+            (b\'/baddate\', b\'/test-folder\', b\'2006-13-62\', b\'yes\'),\n+            # two columns:\n+            (b\'/two\', b\'/test-folder\'),\n+            # third column with date:\n+            (b\'/three\', b\'/test-folder\', b\'2003-01-31\'),\n+            # fourth column with manual:\n+            (\n+                b\'/four\',\n+                b\'/test-folder\',\n+                b\'2004/01/27 10:00:00 GMT-3\',\n+                b\'False\',\n+            ),\n+            # fifth column is ignored:\n+            (b\'/five\', b\'/test-folder\', b\'2005-01-31\', b\'True\', b\'ignored\'),\n+            # manual can be \'0\' (or anything starting with f/F/n/N/0)\n+            (b\'/zero\', b\'/test-folder\', b\'2000-01-31\', b\'0\'),\n+        ]\n+        csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(csv), \'text/plain\', \'redirects.csv\'\n+        )\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'No alternative urls were added.\', self.browser.contents\n+        )\n+        self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n+\n+        # All five lines have been added.\n+        storage = getUtility(IRedirectionStorage)\n+        self.assertEqual(len(storage), 6)\n+        self.assertEqual(storage.get(\'/plone/two\'), \'/plone/test-folder\')\n+        old_paths = [\n+            \'/plone/baddate\',\n+            \'/plone/five\',\n+            \'/plone/four\',\n+            \'/plone/three\',\n+            \'/plone/two\',\n+            \'/plone/zero\',\n+        ]\n+        self.assertListEqual(sorted(list(storage)), old_paths)\n+        self.assertListEqual(\n+            sorted(list(storage.redirects(\'/plone/test-folder\'))), old_paths\n+        )\n+        # Test the internals.\n+\n+        # two columns:\n+        # (b\'/two\', b\'/test-folder\'),\n+        redirect = storage._paths[\'/plone/two\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertIsInstance(redirect[1], DateTime)\n+        self.assertGreater(redirect[1], now)\n+        self.assertEqual(redirect[2], True)  # manual\n+\n+        # third column with date:\n+        # (b\'/three\', b\'/test-folder\', b\'2003-01-31\'),\n+        redirect = storage._paths[\'/plone/three\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2003-01-31\'))\n+        self.assertEqual(redirect[2], True)\n+\n+        # fourth column with manual:\n+        # (b\'/four\', b\'/test-folder\', b\'2004/01/27 10:00:00 GMT-3\', b\'False\'),\n+        redirect = storage._paths[\'/plone/four\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2004/01/27 10:00:00 GMT-3\'))\n+        self.assertEqual(redirect[2], False)\n+\n+        # fifth column is ignored:\n+        # (b\'/five\', b\'/test-folder\', b\'2005-01-31\', b\'True\', b\'ignored\'),\n+        redirect = storage._paths[\'/plone/five\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2005-01-31\'))\n+        self.assertEqual(redirect[2], True)\n+\n+        # manual can be \'0\' (or anything starting with f/F/n/N/0)\n+        # (b\'/zero\', b\'/test-folder\', b\'2000-01-31\', b\'0\'),\n+        redirect = storage._paths[\'/plone/zero\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertEqual(redirect[1], DateTime(\'2000-01-31\'))\n+        self.assertEqual(redirect[2], False)\n+\n+        # bad dates are silently ignored\n+        # (b\'/baddate\', b\'/test-folder\', b\'2006-13-62\', b\'yes\'),\n+        redirect = storage._paths[\'/plone/baddate\']\n+        self.assertEqual(redirect[0], \'/plone/test-folder\')\n+        self.assertGreater(redirect[1], now)\n+        self.assertEqual(redirect[2], True)\n+\n+    def test_upload_bad(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        # The targets must exist as actual content.\n+        # We try a good one and one that does not exist.\n+        data = [\n+            (b\'/old-home-page.asp\', b\'/test-folder\'),\n+            (b\'/people/JoeT\', b\'/no-such-content\'),\n+        ]\n+        csv = b\'\\n\'.join([b\',\'.join(d) for d in data])\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(csv), \'text/plain\', \'redirects.csv\'\n+        )\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertIn(\'No alternative urls were added.\', self.browser.contents)\n+        self.assertIn(\'Please correct these errors\', self.browser.contents)\n+        storage = getUtility(IRedirectionStorage)\n+        self.assertEqual(len(storage), 0)\n+\n+    def test_download_empty(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        self.assertEqual(\n+            self.browser.headers[\'Content-Disposition\'],\n+            \'attachment; filename=redirects.csv\',\n+        )\n+        contents = self.browser.contents.splitlines()\n+        self.assertEqual(len(contents), 1)\n+        self.assertEqual(contents[0], \'old path,new path,datetime,manual\')\n+\n+    def test_download_bigger(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n+        for i in range(2000):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+                now=now,\n+                manual=True,\n+            )\n+        transaction.commit()\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        self.assertEqual(\n+            self.browser.headers[\'Content-Disposition\'],\n+            \'attachment; filename=redirects.csv\',\n+        )\n+        contents = self.browser.contents.splitlines()\n+        # pop the header\n+        self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n+        self.assertEqual(len(contents), 2000)\n+        # The order is probably the alphabetical order of the old path,\n+        # but that is not important and may change,\n+        # so let\'s sort it in the tests for good measure.\n+        # Note that \'999\' sorts alphabetically after \'1999\'.\n+        contents.sort()\n+        self.assertEqual(\n+            contents[0], \'/foo/0,/bar/0,2019/01/27 10:00:00 GMT-3,True\'\n+        )\n+        self.assertEqual(\n+            contents[1999], \'/foo/999,/bar/999,2019/01/27 10:00:00 GMT-3,True\'\n+        )\n+\n+    def test_download_upload(self):\n+        # Test uploading a download and downloading an upload.\n+\n+        # 1. Manually add some redirects.\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n+        for i in range(10):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/test-folder\'.format(portal_path),\n+                now=now,\n+                manual=True,\n+            )\n+        transaction.commit()\n+\n+        # 2. Download the redirects.\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        self.assertEqual(\n+            self.browser.headers[\'Content-Disposition\'],\n+            \'attachment; filename=redirects.csv\',\n+        )\n+        downloaded_contents = self.browser.contents\n+        contents = downloaded_contents.splitlines()\n+        self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n+        self.assertEqual(len(contents), 10)\n+        contents.sort()\n+        self.assertEqual(\n+            contents[0], \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\'\n+        )\n+\n+        # 3. clear the redirect storage\n+        storage.clear()\n+        transaction.commit()\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        contents = self.browser.contents.splitlines()\n+        self.assertEqual(len(contents), 1)\n+        self.assertEqual(contents[0], \'old path,new path,datetime,manual\')\n+\n+        # 4. upload the original download\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'file\').add_file(\n+            io.BytesIO(safe_bytes(downloaded_contents)),\n+            \'text/plain\',\n+            \'redirects.csv\',\n+        )\n+        self.browser.getControl(name=\'form.button.Upload\').click()\n+        self.assertNotIn(\n+            \'Please pick a file to upload.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'The provided target object does not exist.\', self.browser.contents\n+        )\n+        self.assertNotIn(\n+            \'No alternative urls were added.\', self.browser.contents\n+        )\n+        self.assertNotIn(\'Please correct these errors\', self.browser.contents)\n+        self.assertEqual(len(storage), 10)\n+\n+        # 5. download the upload\n+        self.browser.getControl(name=\'form.button.Download\').click()\n+        new_downloaded_contents = self.browser.contents\n+        contents = downloaded_contents.splitlines()\n+        self.assertEqual(contents.pop(0), \'old path,new path,datetime,manual\')\n+        self.assertEqual(len(contents), 10)\n+        contents.sort()\n+        self.assertEqual(\n+            contents[0], \'/foo/0,/test-folder,2019/01/27 10:00:00 GMT-3,True\'\n+        )\n+        # and it is actually the same as the original download\n+        self.assertEqual(new_downloaded_contents, downloaded_contents)\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\nnew file mode 100644\nindex 000000000..21ec31889\n--- /dev/null\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_redirection.robot\n@@ -0,0 +1,104 @@\n+*** Settings *****************************************************************\n+\n+Resource  plone/app/robotframework/keywords.robot\n+Resource  plone/app/robotframework/saucelabs.robot\n+\n+Library  Remote  ${PLONE_URL}/RobotRemote\n+\n+Resource  keywords.robot\n+\n+Test Setup  Run keywords  Plone Test Setup\n+Test Teardown  Run keywords  Plone Test Teardown\n+\n+\n+*** Test Cases ***************************************************************\n+\n+Scenario: Add redirect in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I add a redirect to the test folder from alternative url  /old\n+  Then I get redirected to the test folder when visiting  /old\n+\n+\n+Scenario: Remove redirect in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I add a redirect to the test folder from alternative url  /old\n+   and I remove the redirect from alternative url  /old\n+  Then I do not get redirected when visiting  /old\n+\n+\n+Scenario: Remove filtered redirects in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I add a redirect to the test folder from alternative url  /a\n+   and I add a redirect to the test folder from alternative url  /b\n+   and I filter the redirects with path  /a\n+   and I remove the matching redirects\n+  Then I do not get redirected when visiting  /a\n+   and I get redirected to the test folder when visiting  /b\n+\n+\n+Scenario: Download all redirects in the URL Management Control Panel\n+  Given a logged-in site administrator\n+    and the URL Management control panel\n+  When I add a redirect to the test folder from alternative url  /a\n+   and I add a redirect to the test folder from alternative url  /b\n+  Then I can download all redirects as CSV\n+\n+\n+*** Keywords *****************************************************************\n+\n+# --- GIVEN ------------------------------------------------------------------\n+\n+a logged-in site administrator\n+  Enable autologin as  Site Administrator\n+\n+the URL Management control panel\n+  Go to  ${PLONE_URL}/@@redirection-controlpanel\n+\n+\n+# --- WHEN -------------------------------------------------------------------\n+\n+I add a redirect to the test folder from alternative url\n+  [Documentation]  target path must exist in the site\n+  [Arguments]  ${old}\n+  Input Text  name=redirection  ${old}\n+  Input Text  name=target_path  /test-folder\n+  Click Button  Add\n+\n+\n+I remove the redirect from alternative url\n+  [Arguments]  ${old}\n+  Select Checkbox  xpath=//input[@value=\'/plone${old}\']\n+  Click Button  Remove selected\n+\n+\n+I filter the redirects with path\n+  [Arguments]  ${old}\n+  Input Text  name=q  ${old}\n+  Click Button  Filter\n+\n+I remove the matching redirects\n+  Click Button  Remove all that match filter\n+\n+\n+# --- THEN -------------------------------------------------------------------\n+\n+I get redirected to the test folder when visiting\n+  [Arguments]  ${old}\n+  Go to  ${PLONE_URL}/${old}\n+  Location Should Be  ${PLONE_URL}/test-folder\n+\n+\n+I do not get redirected when visiting\n+  [Arguments]  ${old}\n+  Go to  ${PLONE_URL}/${old}\n+  Location Should Be  ${PLONE_URL}/${old}\n+  Wait Until Page Contains  This page does not seem to exist\n+\n+\n+I can download all redirects as CSV\n+  [Documentation]  I don\'t know how to get the contents of the downloaded file\n+  Click Button  Download all as CSV\n+  Page Should Not Contain  there seems to be an error\ndiff --git a/news/2799.feature.1 b/news/2799.feature.1\nnew file mode 100644\nindex 000000000..b2c8e05b5\n--- /dev/null\n+++ b/news/2799.feature.1\n@@ -0,0 +1 @@\n+Allow filtering on date and manual/automatic in redirection controlpanel.\ndiff --git a/news/2799.feature.2 b/news/2799.feature.2\nnew file mode 100644\nindex 000000000..d83776b74\n--- /dev/null\n+++ b/news/2799.feature.2\n@@ -0,0 +1 @@\n+Add a button to export the alternative urls in redirection controlpanel.\ndiff --git a/news/2799.feature.3 b/news/2799.feature.3\nnew file mode 100644\nindex 000000000..4154d9bfb\n--- /dev/null\n+++ b/news/2799.feature.3\n@@ -0,0 +1,3 @@\n+Add a button to remove all alternative urls that match the filter.\n+See `issue 2799 <https://github.com/plone/Products.CMFPlone/issues/2799>`_.\n+[maurits]\n'

