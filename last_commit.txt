Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-22T13:13:16+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/bfcdcee0e12ff45221f2e6d4ffa8f87512e6ba57

Drop Archetypes and Py2-specific code

Files changed:
M .travis.yml
M docs/content.rst
M docs/group.rst
M setup.py
M src/plone/api/content.py
M src/plone/api/portal.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py
M src/plone/api/user.py
M src/plone/api/validation.py
M tox.ini

b'diff --git a/.travis.yml b/.travis.yml\nindex d3dc6bd..b3920fc 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -14,10 +14,6 @@ matrix:\n         env: TOXENV=isort,lint\n       - python: "3.7"\n         env: TOXENV=docs\n-      - python: "2.7"\n-        env: TOXENV=py27-plone-5.2\n-      - python: "2.7"\n-        env: TOXENV=py27-plone-5.2-archetypes\n       - python: "3.6"\n         env: TOXENV=py36-plone-5.2\n       - python: "3.7"\ndiff --git a/docs/content.rst b/docs/content.rst\nindex 6714b88..e0292b9 100644\n--- a/docs/content.rst\n+++ b/docs/content.rst\n@@ -28,7 +28,6 @@ Get the portal object; it will serve nicely:\n \n Create your new content item using the :meth:`api.content.create` method.\n The type argument will decide which content type will be created.\n-Both Dexterity and Archetypes content types are supported.\n \n .. code-block:: python\n \ndiff --git a/docs/group.rst b/docs/group.rst\nindex 5efbd40..66eb637 100644\n--- a/docs/group.rst\n+++ b/docs/group.rst\n@@ -143,13 +143,7 @@ Groups may be filtered by member. By passing the ``username`` parameter,\n .. invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n-    import six\n-    if six.PY2:\n-        assertCountEqual = self.assertItemsEqual\n-    else:\n-        assertCountEqual = self.assertCountEqual\n-\n-    assertCountEqual(\n+    self.assertCountEqual(\n         group_list,\n         [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n     )\n@@ -163,7 +157,7 @@ You can also pass the user directly to :meth:`api.group.get_groups`:\n .. invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n-    assertCountEqual(\n+    self.assertCountEqual(\n         group_list,\n         [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n     )\ndiff --git a/setup.py b/setup.py\nindex 59e5f41..c04fc4a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,22 +51,17 @@ def read(*rnames):\n             \'plone.indexer\',\n             \'plone.registry\',\n         ],\n-        \'archetypes\': [\n-            \'Products.Archetypes\',\n-        ],\n     },\n     classifiers=[\n         \'Development Status :: 5 - Production/Stable\',\n         \'Environment :: Web Environment\',\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.2\',\n         \'Framework :: Plone :: 6.0\',\n         \'Framework :: Plone :: Core\',\n         \'Intended Audience :: Developers\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Operating System :: OS Independent\',\n         \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n         \'Programming Language :: Python :: 3.6\',\n         \'Programming Language :: Python :: 3.7\',\n         \'Programming Language :: Python :: 3.8\',\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 1f520a1..3607d62 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -23,22 +23,6 @@\n import random\n import transaction\n \n-\n-try:\n-    get_distribution(\'Products.Archetypes\')\n-except DistributionNotFound:\n-    class IBaseObject(Interface):\n-        """Fake Products.Archetypes.interfaces.base.IBaseObject"""\n-else:\n-    from Products.Archetypes.interfaces.base import IBaseObject\n-\n-# Old linkintegrity (Plone <= 5.0b4) or new (Plone > 5.0b4)\n-linkintegrity_version = get_distribution(\'plone.app.linkintegrity\').version\n-if parse_version(linkintegrity_version) >= parse_version(\'3.0.dev0\'):\n-    NEW_LINKINTEGRITY = True\n-else:\n-    NEW_LINKINTEGRITY = False\n-\n _marker = []\n \n \n@@ -105,16 +89,6 @@ def create(\n         )\n \n     content = container[content_id]\n-\n-    # Archetypes specific code\n-    if IBaseObject.providedBy(content):\n-        # Will finish Archetypes content item creation process,\n-        # rename-after-creation and such\n-        # Passing values as a dict with None values so values set by\n-        # invokeFactory don\'t get overridden.\n-        # \'\': \'\' is required so that bool(values) is True.\n-        content.processForm(values={\'\': \'\'})\n-\n     if not id or (safe_id and id):\n         # Create a new id from title\n         chooser = INameChooser(container)\n@@ -306,14 +280,13 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n     if not objects:\n         return\n \n-    if check_linkintegrity and NEW_LINKINTEGRITY:\n+    if check_linkintegrity:\n         site = portal.get()\n         linkintegrity_view = get_view(\n             name=\'delete_confirmation_info\',\n             context=site,\n             request=site.REQUEST,\n         )\n-\n         # look for breaches and manually raise a exception\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n@@ -322,16 +295,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n             )\n \n     for obj_ in objects:\n-        if not check_linkintegrity and not NEW_LINKINTEGRITY:\n-            # old style ignoring breaches:\n-            # we have to explicitly ignore the exception\n-            try:\n-                obj_.aq_parent.manage_delObjects([obj_.getId()])\n-            except LinkIntegrityNotificationException:\n-                pass\n-        else:\n-            # All other cases\n-            obj_.aq_parent.manage_delObjects([obj_.getId()])\n+        obj_.aq_parent.manage_delObjects([obj_.getId()])\n \n \n @required_parameters(\'obj\')\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex f8e91f0..1be0489 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -9,6 +9,7 @@\n from plone.api.exc import InvalidParameterError\n from plone.api.validation import required_parameters\n from plone.app.layout.navigation.root import getNavigationRootObject\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -25,15 +26,6 @@\n \n logger = getLogger(\'plone.api.portal\')\n \n-try:\n-    pkg_resources.get_distribution(\'plone.registry\')\n-    from plone.registry.interfaces import IRegistry\n-except pkg_resources.DistributionNotFound:\n-    logger.warning(\n-        \'plone.registry is not installed. get_registry_record and \'\n-        \'set_registry_record will be unavailable.\',\n-    )\n-\n try:\n     from Products import PrintingMailHost\n except ImportError:\n@@ -171,19 +163,11 @@ def send_email(\n         if ctrlOverview.mailhost_warning():\n             raise ValueError(\'MailHost is not configured.\')\n \n-    try:\n-        encoding = get_registry_record(\'plone.email_charset\')\n-    except InvalidParameterError:\n-        encoding = portal.getProperty(\'email_charset\', \'utf-8\')\n+    encoding = get_registry_record(\'plone.email_charset\')\n \n     if not sender:\n-        try:\n-            from_address = get_registry_record(\'plone.email_from_address\')\n-            from_name = get_registry_record(\'plone.email_from_name\')\n-        except InvalidParameterError:\n-            # Before Plone 5.0b2 these were stored in portal_properties\n-            from_address = portal.getProperty(\'email_from_address\', \'\')\n-            from_name = portal.getProperty(\'email_from_name\', \'\')\n+        from_address = get_registry_record(\'plone.email_from_address\')\n+        from_name = get_registry_record(\'plone.email_from_name\')\n         sender = formataddr((from_name, from_address))\n         if parseaddr(sender)[1] != from_address:\n             # formataddr probably got confused by special characters.\n@@ -401,19 +385,7 @@ def get_default_language():\n     :rtype: string\n     :Example: :ref:`portal_get_default_language_example`\n     """\n-    try:\n-        # Plone 5.2+\n-        from plone.i18n.interfaces import ILanguageSchema\n-    except ImportError:  # pragma: no cover\n-        try:\n-            # Plone 5.0/5.1\n-            from Products.CMFPlone.interfaces import ILanguageSchema\n-        except ImportError:\n-            # Plone 4.3\n-            portal = get()\n-            return portal.portal_properties.site_properties.getProperty(\n-                \'default_language\', None,\n-            )\n+    from plone.i18n.interfaces import ILanguageSchema\n     registry = getUtility(IRegistry)\n     settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n     return settings.default_language\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex 1046a30..d49952c 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -13,14 +13,6 @@\n import pkg_resources\n \n \n-try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_PA_CONTENTTYPES = False\n-else:\n-    HAS_PA_CONTENTTYPES = True\n-\n-\n class PloneApiLayer(PloneSandboxLayer):\n \n     defaultBases = (PLONE_FIXTURE, )\n@@ -31,19 +23,14 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.dexterity)\n         import plone.api\n         self.loadZCML(package=plone.api, name=\'testing.zcml\')\n-\n-        if HAS_PA_CONTENTTYPES:\n-            import plone.app.contenttypes\n-            self.loadZCML(package=plone.app.contenttypes)\n+        import plone.app.contenttypes\n+        self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         """Prepare a Plone instance for testing."""\n         # Install into Plone site using portal_setup\n         self.applyProfile(portal, \'Products.CMFPlone:plone\')\n-\n-        # Plone 5 support\n-        if HAS_PA_CONTENTTYPES:\n-            self.applyProfile(portal, \'plone.app.contenttypes:default\')\n+        self.applyProfile(portal, \'plone.app.contenttypes:default\')\n \n         # Create dummy content types for Dexterity tests\n         self.applyProfile(portal, \'plone.api:testfixture\')\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 1332d7d..77c21a4 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -7,7 +7,6 @@\n from OFS.interfaces import IObjectWillBeMovedEvent\n from plone import api\n from plone.api.content import _parse_object_provides_query\n-from plone.api.content import NEW_LINKINTEGRITY\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # NOQA: E501\n@@ -35,14 +34,6 @@\n import unittest\n \n \n-try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_PACONTENTYPES = False\n-else:\n-    HAS_PACONTENTYPES = True\n-\n-\n class TestPloneApiContent(unittest.TestCase):\n     """Unit tests for content manipulation using plone.api"""\n \n@@ -421,46 +412,6 @@ def test_create_collection(self):\n         )\n         self.assertEqual(collection.Title(), \'Mandelbrot set\')\n \n-    @unittest.skipIf(HAS_PACONTENTYPES, \'Archetypes only\')\n-    def test_create_at_event(self):\n-        """https://github.com/plone/plone.api/issues/364"""\n-        from DateTime import DateTime\n-        today = DateTime()\n-        tomorrow = today + 1\n-        event = api.content.create(\n-            container=self.portal,\n-            type=\'Event\',\n-            title=u\'My event\',\n-            startDate=today,\n-            endDate=tomorrow,\n-        )\n-        self.assertEqual(event.startDate, today)\n-        self.assertEqual(event.endDate, tomorrow)\n-        results = api.content.find(Title=u\'My event\')\n-        self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].start, today)\n-        self.assertEqual(results[0].end, tomorrow)\n-\n-    @unittest.skipUnless(HAS_PACONTENTYPES, \'Dexterity only\')\n-    def test_create_dx_event(self):\n-        """Test create a DX event."""\n-        import datetime\n-        today = datetime.datetime.now()\n-        tomorrow = today + datetime.timedelta(days=1)\n-        event = api.content.create(\n-            container=self.portal,\n-            type=\'Event\',\n-            title=u\'My event\',\n-            start=today,\n-            end=tomorrow,\n-        )\n-        self.assertEqual(event.start, today)\n-        self.assertEqual(event.end, tomorrow)\n-        results = api.content.find(Title=u\'My event\')\n-        self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].start, today)\n-        self.assertEqual(results[0].end, tomorrow)\n-\n     def test_get_constraints(self):\n         """Test the constraints when content is fetched with get."""\n \n@@ -623,11 +574,7 @@ def recordEvent(event):\n                 and container[\'about\'][\'nu-contact\'] == nucontact)\n         assert \'contact\' not in container[\'about\'].keys()\n \n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             firedEvents,\n             [\n                 ObjectMovedEvent,\n@@ -867,25 +814,14 @@ def test_delete_ignore_linkintegrity(self):\n         api.content.delete(self.contact, check_linkintegrity=False)\n         self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n \n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n     def test_delete_check_linkintegrity(self):\n         """Test deleting a content item with a link pointed at it."""\n         self._set_text(self.team, \'<a href="contact">contact</a>\')\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(self.contact)\n-        if NEW_LINKINTEGRITY:\n-            # In the old implementation of linkintegrity the items are\n-            # still gone during this request.\n-            self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-\n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n+        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+\n     def test_delete_multiple_check_linkintegrity(self):\n         """Test deleting multiple item with linkintegrity-breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -893,16 +829,9 @@ def test_delete_multiple_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.contact])\n-        if NEW_LINKINTEGRITY:\n-            # In the old implementation of linkintegrity the items are\n-            # still gone during this request.\n-            self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-            self.assertIn(\'blog\', self.portal.keys())\n-\n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n+        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertIn(\'blog\', self.portal.keys())\n+\n     def test_delete_multiple_ignore_linkintegrity(self):\n         """Test deleting multiple items ignoring linkintegrity-breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -915,10 +844,6 @@ def test_delete_multiple_ignore_linkintegrity(self):\n         self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n         self.assertNotIn(\'blog\', self.portal.keys())\n \n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n     def test_delete_with_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -926,17 +851,10 @@ def test_delete_with_internal_breaches(self):\n         # Deleting pages with unresolved breaches throws an exception\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.about])\n-        if NEW_LINKINTEGRITY:\n-            # In the old implementation of linkintegrity the items are\n-            # still gone during this request.\n-            self.assertIn(\'about\', self.portal.keys())\n-            self.assertIn(\'blog\', self.portal.keys())\n-            self.assertIn(\'training\', self.portal[\'events\'].keys())\n-\n-    @unittest.skipUnless(\n-        NEW_LINKINTEGRITY,\n-        \'Only new Linkintegrity resolves internal breaches\',\n-    )\n+        self.assertIn(\'about\', self.portal.keys())\n+        self.assertIn(\'blog\', self.portal.keys())\n+        self.assertIn(\'training\', self.portal[\'events\'].keys())\n+\n     def test_delete_with_resolved_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -948,12 +866,7 @@ def test_delete_with_resolved_internal_breaches(self):\n         self.assertNotIn(\'training\', self.portal[\'events\'].keys())\n \n     def _set_text(self, obj, text):\n-        if IDexterityContent.providedBy(obj):\n-            # Dexterity\n-            obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n-        else:\n-            # Archetypes\n-            obj.setText(text, mimetype=\'text/html\')\n+        obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n         modified(obj)\n \n     def test_find(self):\n@@ -1437,16 +1350,6 @@ def test_get_uuid(self):\n         self.assertEqual(uuid1, uuid2)\n         self.assertIsInstance(uuid2, str)\n \n-        if not HAS_PACONTENTYPES:\n-            container.invokeFactory(\'Document\', \'test-archetype\')\n-            document = container[\'test-archetype\']\n-            uuid1 = generator()\n-            document._setUID(uuid1)\n-\n-            uuid2 = api.content.get_uuid(document)\n-            self.assertEqual(uuid1, uuid2)\n-            self.assertIsInstance(uuid2, str)\n-\n     def test_get_view_view_not_found(self):\n         """Test that error msg lists available views if a view is not found."""\n         request = self.layer[\'request\']\ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex 6996068..a937791 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -512,11 +512,6 @@ def test_grant_roles_in_context(self):\n \n     def test_local_roles_without_inheritance(self):\n         """Test granting and getting local_roles."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-\n         api.group.create(groupname=\'foo\')\n \n         portal = api.portal.get()\n@@ -538,12 +533,12 @@ def test_local_roles_without_inheritance(self):\n         )\n         # Add the editor-role as global role\n         api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Authenticated\', \'Editor\'],\n             api.group.get_roles(groupname=\'foo\'),\n         )\n         # local_roles plus global_roles\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Authenticated\', \'Editor\'],\n             api.group.get_roles(groupname=\'foo\', obj=folder),\n         )\n@@ -557,7 +552,7 @@ def test_local_roles_without_inheritance(self):\n         api.group.grant_roles(\n             groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Contributor\'],\n             api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n         )\n@@ -609,11 +604,6 @@ def test_local_roles_without_inheritance(self):\n     def test_local_roles_disregard_adapter(self):\n         """Test that borg.localrole-adpaters are not copied when granting\n         local roles."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n@@ -646,12 +636,12 @@ def getRoles(self, principal_id):\n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder),\n             [\'Authenticated\', \'Reviewer\'],\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n             [\'Reviewer\'],\n         )\n@@ -660,18 +650,18 @@ def getRoles(self, principal_id):\n         api.group.grant_roles(\n             groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder),\n             [\'Authenticated\', \'Contributor\', \'Reviewer\'],\n         )\n \n         # The adapter role in in the local roles but not persistent\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n         local_roles = getattr(folder, \'__ac_local_roles__\', {})\n-        assertCountEqual(\n+        self.assertCountEqual(\n             local_roles.get(\'foo\'),\n             [\'Contributor\'],\n         )\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 3ea3cb8..91fe26e 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -292,30 +292,6 @@ def test_send_email_parseaddr(self, mock_parseaddr):\n             body=u\'One for you Bob!\',\n         )\n \n-    @unittest.skipIf(\n-        HAS_PLONE5,\n-        \'Plone 4 uses portal_properties for mail settings\',\n-    )\n-    def test_send_email_with_config_in_portal_properties(self):\n-        """Test mail-setting being stored in portal_properties.\n-        Before Plone 5.0b2 the settings were stored in portal_properties.\n-        """\n-        self.portal._updateProperty(\'email_from_name\', \'Properties\')\n-        self.portal._updateProperty(\'email_from_address\', \'prop@example.org\')\n-        self.mailhost.reset()\n-        portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n-        )\n-        self.assertEqual(len(self.mailhost.messages), 1)\n-        msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Properties <prop@example.org>\')\n-\n-    @unittest.skipUnless(\n-        HAS_PLONE5,\n-        \'Plone 5 uses the registry for mail settings\',\n-    )\n     def test_send_email_with_config_in_registry(self):\n         """Test mail-setting being stored in registry\n         """\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 7c44530..53ff480 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -8,6 +8,7 @@\n from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.registry.interfaces import IRegistry\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n@@ -137,11 +138,7 @@ def test_create_default_roles(self):\n             email=\'chuck@norris.org\',\n             password=\'secret\',\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(user=user),\n             [\'Member\', \'Authenticated\'],\n         )\n@@ -154,12 +151,7 @@ def test_create_specified_roles(self):\n             password=\'secret\',\n             roles=[\'Reviewer\', \'Editor\'],\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(user=user),\n             [\'Reviewer\', \'Authenticated\', \'Editor\'],\n         )\n@@ -172,11 +164,7 @@ def test_create_no_roles(self):\n             password=\'secret\',\n             roles=[],\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(user=user),\n             [\'Authenticated\'],\n         )\n@@ -213,11 +201,7 @@ def test_get_all_users(self):\n             password=\'secret\',\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             users,\n             [\'chuck\', TEST_USER_NAME],\n         )\n@@ -312,11 +296,7 @@ def test_get_roles_username(self):\n             password=\'secret\',\n             roles=ROLES,\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES + [\'Authenticated\'],\n             api.user.get_roles(username=\'chuck\'),\n         )\n@@ -330,11 +310,7 @@ def test_get_roles_user(self):\n             password=\'secret\',\n             roles=ROLES,\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES + [\'Authenticated\'],\n             api.user.get_roles(user=user),\n         )\n@@ -358,22 +334,14 @@ def test_get_roles_username_and_user(self):\n \n     def test_get_roles_no_parameters(self):\n         """Test get roles without any parameters."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Manager\', \'Authenticated\'],\n             api.user.get_roles(),\n         )\n \n     def test_get_permissions_no_parameters(self):\n         """Test get_permissions passing no parameters."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [p[0] for p in getPermissions()],\n             api.user.get_permissions().keys(),\n         )\n@@ -464,10 +432,6 @@ def test_get_roles_local_includes_group_roles(self):\n         )\n         api.group.create(\'foo\', roles=[\'Reviewer\'])\n         api.group.add_user(groupname=\'foo\', username=\'chuck\')\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n \n         portal = api.portal.get()\n         folder = api.content.create(\n@@ -482,7 +446,7 @@ def test_get_roles_local_includes_group_roles(self):\n             id=\'document_one\',\n             title=\'Document One\',\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\'Member\', \'Reviewer\', \'Authenticated\'],\n         )\n@@ -491,15 +455,15 @@ def test_get_roles_local_includes_group_roles(self):\n             roles=[\'Editor\'],\n             obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\'Member\', \'Reviewer\', \'Authenticated\', \'Editor\'],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Editor\'],\n         )\n@@ -508,7 +472,7 @@ def test_get_roles_local_includes_group_roles(self):\n             roles=[\'Contributor\'],\n             obj=document,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Contributor\'],\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n         )\n@@ -676,15 +640,11 @@ def test_grant_roles(self):\n             \'Authenticated\',\n             \'Member\',\n         ]\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\'),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user),\n         )\n@@ -758,24 +718,20 @@ def test_revoke_roles(self):\n \n         api.user.revoke_roles(username=\'chuck\', roles=(\'Editor\',))\n         ROLES = [\'Authenticated\', \'Member\']\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\'),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, inherit=False),\n         )\n@@ -885,11 +841,7 @@ def test_grant_roles_in_context(self):\n             \'Editor\',\n             api.user.get_roles(username=\'chuck\', obj=folder),\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Editor\'],\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n         )\n@@ -929,19 +881,19 @@ def test_grant_roles_in_context(self):\n         )\n \n         ROLES = [\'Editor\', \'Contributor\', \'Authenticated\', \'Member\']\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=document),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=document),\n         )\n@@ -949,10 +901,6 @@ def test_grant_roles_in_context(self):\n     def test_grant_roles_disregards_adapter(self):\n         """Test that borg.localrole-adpaters are not copied when granting\n         local roles."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n \n         portal = api.portal.get()\n         folder = api.content.create(\n@@ -973,7 +921,7 @@ def test_grant_roles_disregards_adapter(self):\n             password=\'secret\',\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\'Member\', \'Authenticated\'],\n         )\n@@ -995,12 +943,12 @@ def getRoles(self, principal_id):\n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\'Member\', \'Authenticated\', \'Reviewer\'],\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Reviewer\'],\n         )\n@@ -1011,13 +959,13 @@ def getRoles(self, principal_id):\n             roles=[\'Contributor\'],\n             obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n         )\n \n         # The adapter role is in in the local roles but not persistent\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n@@ -1027,11 +975,11 @@ def getRoles(self, principal_id):\n             [\'Contributor\'],\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [\'Reviewer\'],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n         )\n@@ -1045,16 +993,16 @@ def getRoles(self, principal_id):\n         )\n         api.group.add_user(groupname=\'foo\', username=\'chuck\')\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n         api.group.grant_roles(groupname=\'foo\', roles=[\'Manager\'], obj=folder)\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\n                 \'Contributor\',\n@@ -1064,7 +1012,7 @@ def getRoles(self, principal_id):\n                 \'Member\',\n             ],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\n                 \'Contributor\',\n@@ -1074,7 +1022,7 @@ def getRoles(self, principal_id):\n                 \'Member\',\n             ],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Contributor\', \'Reviewer\', \'Manager\'],\n         )\n@@ -1151,39 +1099,35 @@ def test_revoke_roles_in_context(self):\n         self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n \n         ROLES = [\'Authenticated\', \'Member\']\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=document),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=document),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(user=user, obj=folder, inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(user=user, obj=document, inherit=False),\n         )\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 0deb7ab..34c843b 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -59,15 +59,7 @@ def create(\n     if not email:\n         raise MissingParameterError("You need to pass the new user\'s email.")\n \n-    try:\n-        use_email_as_username = portal.get_registry_record(\n-            \'plone.use_email_as_login\',\n-        )\n-    except InvalidParameterError:\n-        site = portal.get()\n-        props = site.portal_properties\n-        use_email_as_username = props.site_properties.use_email_as_login\n-\n+    use_email_as_username = portal.get_registry_record(\'plone.use_email_as_login\')\n     if not use_email_as_username and not username:\n         raise InvalidParameterError(\n             \'The portal is configured to use username \'\ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex 2d5e164..f948856 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -12,12 +12,7 @@ def _get_arg_spec(func, validator_args):\n     """Get the arguments specified in the function spec\n     and check that the decorator doesn\'t refer to non-existant args.\n     """\n-    try:\n-        signature_args = inspect.getfullargspec(func).args\n-    except AttributeError:\n-        # Python 2.7 compatibility\n-        signature_args = inspect.getargspec(func).args\n-\n+    signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\n     if extra_args:\n         raise ValueError(\ndiff --git a/tox.ini b/tox.ini\nindex 777f7cc..5d0b011 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,7 +1,5 @@\n [tox]\n envlist =\n-    py27-plone-5.2,\n-    py27-plone-5.2-archetypes,\n     py{36,37,38}-plone-{5.2},\n     docs,\n #    black-check,\n@@ -15,7 +13,6 @@ skip_missing_interpreters = False\n skip_install = True\n \n basepython:\n-    py27: python2.7\n     py36: python3.6\n     py37: python3.7\n     py38: python3.8\n@@ -34,7 +31,6 @@ commands =\n \n setenv =\n     COVERAGE_FILE=.coverage.{envname}\n-    plone-5.2-archetypes: BUILDOUT_FILE="plone-5.2.x-archetypes.cfg"\n     plone-5.2: BUILDOUT_FILE="plone-5.2.x.cfg"\n \n deps =\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-22T13:22:16+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/ecd204b642349515abb3d03de04c1ff2de5dc2bb

drop six

Files changed:
M setup.py
M src/plone/api/env.py
M src/plone/api/portal.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_user.py

b'diff --git a/setup.py b/setup.py\nindex c04fc4a..000648c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,7 +38,6 @@ def read(*rnames):\n         \'plone.app.linkintegrity\',\n         \'plone.uuid\',\n         \'setuptools\',\n-        \'six\',\n         \'zope.globalrequest\',\n     ],\n     extras_require={\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex 2d61541..cc22805 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -14,7 +14,6 @@\n from plone.api.validation import required_parameters\n from zope.globalrequest import getRequest\n \n-import six\n import traceback\n import Zope2\n \n@@ -93,7 +92,7 @@ def adopt_roles(roles=None):\n     :type roles: list of strings\n     :Example: :ref:`env_adopt_roles_example`\n     """\n-    if isinstance(roles, six.string_types):\n+    if isinstance(roles, str):\n         roles = [roles]\n \n     if not roles:\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 1be0489..74c6013 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -21,7 +21,6 @@\n \n import datetime as dtime\n import pkg_resources\n-import six\n \n \n logger = getLogger(\'plone.api.portal\')\n@@ -175,7 +174,7 @@ def send_email(\n \n     # If the mail headers are not properly encoded we need to extract\n     # them and let MailHost manage the encoding.\n-    if isinstance(body, six.text_type):\n+    if isinstance(body, str):\n         body = body.encode(encoding)\n \n     host = get_tool(\'MailHost\')\n@@ -418,7 +417,7 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :param lang: target language\n     :type lang: string\n     :returns: translated message\n-    :rtype: six.text_type\n+    :rtype: str\n     :Example: :ref:`portal_translate_example`\n     """\n     translation_service = get_tool(\'translation_service\')\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 77c21a4..6472b9a 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -30,7 +30,6 @@\n \n import mock\n import pkg_resources\n-import six\n import unittest\n \n \ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex a937791..d5bc576 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -12,7 +12,6 @@\n from zope.interface import Interface\n \n import mock\n-import six\n import unittest\n \n \ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 53ff480..9e6bf00 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -16,7 +16,6 @@\n from zope.interface import Interface\n \n import mock\n-import six\n import unittest\n \n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-22T13:27:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/b3c3ad2651bc5589401713798f05a52cdba34ff0

pyupgrade

Files changed:
M docs/conf.py
M setup.py
M src/plone/__init__.py
M src/plone/api/__init__.py
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/exc.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py
M src/plone/api/tests/test_validation.py
M src/plone/api/user.py
M src/plone/api/validation.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 15158c3..106e0d3 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,7 +1,7 @@\n # sphinx configuration\n \n-project = u\'plone.api\'\n-copyright = u\'2012, Plone Foundation\'\n+project = \'plone.api\'\n+copyright = \'2012, Plone Foundation\'\n \n extensions = [\n     \'sphinx.ext.doctest\',\n@@ -21,8 +21,8 @@\n latex_documents = [(\n     \'index\',\n     \'ploneapi.tex\',\n-    u\'plone.api Documentation\',\n-    u\'\', \'manual\'\n+    \'plone.api Documentation\',\n+    \'\', \'manual\'\n ), ]\n \n from pkg_resources import get_distribution\n@@ -31,7 +31,7 @@\n import sys\n \n \n-class Mock(object):\n+class Mock:\n     def __init__(self, *args, **kwargs):\n         pass\n \ndiff --git a/setup.py b/setup.py\nindex 000648c..b9eec73 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/api/__init__.py b/src/plone/api/__init__.py\nindex 251c015..59d677c 100644\n--- a/src/plone/api/__init__.py\n+++ b/src/plone/api/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # flake8: NOQA: S401\n \n from plone.api import content\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 3607d62..cd06e23 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides functionality for content manipulation."""\n \n from copy import copy as _copy\n@@ -291,7 +290,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                \'Linkintegrity-breaches: {0}\'.format(breaches),\n+                \'Linkintegrity-breaches: {}\'.format(breaches),\n             )\n \n     for obj_ in objects:\n@@ -453,15 +452,15 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n             ]\n \n             raise InvalidParameterError(\n-                "Invalid transition \'{0}\'.\\n"\n+                "Invalid transition \'{}\'.\\n"\n                 \'Valid transitions are:\\n\'\n-                \'{1}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n+                \'{}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n             )\n     else:\n         _transition_to(obj, workflow, to_state, **kwargs)\n         if workflow.getInfoFor(obj, \'review_state\') != to_state:\n             raise InvalidParameterError(\n-                \'Could not find workflow to set state to {0} on {1}\'.format(\n+                \'Could not find workflow to set state to {} on {}\'.format(\n                     to_state,\n                     obj,\n                 ),\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex cc22805..acd7e6f 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -124,7 +123,7 @@ def _adopt_roles(roles):\n     security_manager.removeContext(overriding_context)\n \n \n-class _GlobalRoleOverridingContext(object):\n+class _GlobalRoleOverridingContext:\n     # ZopeSecurityPolicy will use security_context._proxy_roles in place of\n     # the roles that would normally be active, provided that it happens to\n     # consider the security_context object to be relevant.\ndiff --git a/src/plone/api/exc.py b/src/plone/api/exc.py\nindex cbc2e91..245eff9 100644\n--- a/src/plone/api/exc.py\n+++ b/src/plone/api/exc.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Exceptions raised by plone.api methods."""\n \n \ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex be8d50f..f56e186 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides functionality for group manipulation."""\n \n from plone.api import portal\n@@ -242,7 +241,7 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n         # get only the local roles on a object\n         # same as above we use the PloneUser version of getRolesInContext.\n         # Include roles from adapters granting local roles\n-        roles = set([])\n+        roles = set()\n         pas = portal.get_tool(\'acl_users\')\n         for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n             for adapter in lrmanager._getAdapters(obj):\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 74c6013..7a95113 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides various utility methods on the portal level."""\n \n from Acquisition import aq_inner\n@@ -269,12 +268,12 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n     :Example: :ref:`portal_get_registry_record_example`\n     """\n     if not isinstance(name, str):\n-        raise InvalidParameterError(u"The \'name\' parameter has to be a string")\n+        raise InvalidParameterError("The \'name\' parameter has to be a string")\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            u\'The interface parameter has to derive from \'\n-            u\'zope.interface.Interface\',\n+            \'The interface parameter has to derive from \'\n+            \'zope.interface.Interface\',\n         )\n \n     registry = getUtility(IRegistry)\n@@ -283,7 +282,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry[\'{0}.{1}\'.format(interface.__identifier__, name)]\n+            return registry[\'{}.{}\'.format(interface.__identifier__, name)]\n \n         if default is not MISSING:\n             return default\n@@ -337,12 +336,12 @@ def set_registry_record(name=None, value=None, interface=None):\n     :Example: :ref:`portal_set_registry_record_example`\n     """\n     if not isinstance(name, str):\n-        raise InvalidParameterError(u"The parameter \'name\' has to be a string")\n+        raise InvalidParameterError("The parameter \'name\' has to be a string")\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            u\'The interface parameter has to derive from \'\n-            u\'zope.interface.Interface\',\n+            \'The interface parameter has to derive from \'\n+            \'zope.interface.Interface\',\n         )\n \n     registry = getUtility(IRegistry)\n@@ -361,8 +360,8 @@ def set_registry_record(name=None, value=None, interface=None):\n                 if field[0] == \'field_one\'\n             ][0]\n             raise InvalidParameterError(\n-                u\'The value parameter for the field {name} needs to be \'\n-                u\'{of_class} instead of {of_type}\'.format(\n+                \'The value parameter for the field {name} needs to be \'\n+                \'{of_class} instead of {of_type}\'.format(\n                     name=name,\n                     of_class=str(field_type.__class__),\n                     of_type=type(value),\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex d49952c..654836f 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base module for unittesting."""\n \n from plone.app.testing import FunctionalTesting\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 6472b9a..abd0ae6 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.content."""\n \n from Acquisition import aq_base\n@@ -28,7 +27,7 @@\n from zope.lifecycleevent import modified\n from zope.lifecycleevent import ObjectMovedEvent\n \n-import mock\n+from unittest import mock\n import pkg_resources\n import unittest\n \n@@ -444,7 +443,7 @@ def test_get(self):\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            \'/{0}/about/team\'.format(self.portal.getId()),\n+            \'/{}/about/team\'.format(self.portal.getId()),\n         )\n         self.assertEqual(self.team, team_by_path)\n \ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex c95b3f7..4ad9fd0 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Boilerplate for doctest functional tests."""\n \n from logging import getLogger\n@@ -117,7 +116,7 @@ def test_suite():\n     for filename in os.listdir(docs_path):\n         try:\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n-        except IOError:\n+        except OSError:\n             logger.warning(\n                 \'test_doctest.py skipping {file}\'.format(file=filename),\n             )\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 18e043f..f6402a9 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.roles."""\n \n from AccessControl import Unauthorized\ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex d5bc576..ca4c8f2 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.group."""\n \n from borg.localrole.interfaces import ILocalRoleProvider\n@@ -11,7 +10,7 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import mock\n+from unittest import mock\n import unittest\n \n \n@@ -360,7 +359,7 @@ def test_grant_roles(self):\n         self.assertIn(\'Contributor\', api.group.get_roles(group=group))\n \n         api.group.grant_roles(groupname=\'foo\', roles=[\'Reader\', \'Reader\'])\n-        ROLES = set([\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'])\n+        ROLES = {\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'}\n         self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'foo\')))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n@@ -405,7 +404,7 @@ def test_revoke_roles(self):\n         self.assertIn(\'Editor\', api.group.get_roles(group=group))\n \n         api.group.revoke_roles(groupname=\'bar\', roles=[\'Editor\'])\n-        ROLES = set([\'Authenticated\'])\n+        ROLES = {\'Authenticated\'}\n         self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'bar\')))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n@@ -462,7 +461,7 @@ def test_grant_roles_in_context(self):\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = set([\'Editor\', \'Contributor\', \'Authenticated\'])\n+        ROLES = {\'Editor\', \'Contributor\', \'Authenticated\'}\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(groupname=\'foo\', obj=folder)),\n@@ -479,7 +478,7 @@ def test_grant_roles_in_context(self):\n             ROLES,\n             set(api.group.get_roles(group=group, obj=document)),\n         )\n-        ROLES = set([\'Editor\', \'Contributor\'])\n+        ROLES = {\'Editor\', \'Contributor\'}\n         self.assertEqual(\n             ROLES,\n             set(\n@@ -495,7 +494,7 @@ def test_grant_roles_in_context(self):\n             set(api.group.get_roles(group=group, obj=folder, inherit=False)),\n         )\n         self.assertEqual(\n-            set([]),\n+            set(),\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -505,7 +504,7 @@ def test_grant_roles_in_context(self):\n             ),\n         )\n         self.assertEqual(\n-            set([]),\n+            set(),\n             set(api.group.get_roles(group=group, obj=document, inherit=False)),\n         )\n \n@@ -557,12 +556,12 @@ def test_local_roles_without_inheritance(self):\n         )\n         # local_roles plus global_roles\n         self.assertEqual(\n-            set([\'Authenticated\', \'Editor\', \'Contributor\']),\n+            {\'Authenticated\', \'Editor\', \'Contributor\'},\n             set(api.group.get_roles(groupname=\'foo\', obj=document)),\n         )\n         # no only-local roles\n         self.assertEqual(\n-            set([]),\n+            set(),\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -576,7 +575,7 @@ def test_local_roles_without_inheritance(self):\n         )\n         # one only-local role\n         self.assertEqual(\n-            set([\'Contributor\']),\n+            {\'Contributor\'},\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -590,7 +589,7 @@ def test_local_roles_without_inheritance(self):\n         # The Editor-role is added even though it is already a global role\n         api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n         self.assertEqual(\n-            set([\'Contributor\', \'Editor\']),\n+            {\'Contributor\', \'Editor\'},\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -624,7 +623,7 @@ def test_local_roles_disregard_adapter(self):\n         # throw in a adapter granting the reviewer-roles\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n-        class LocalRoleProvider(object):\n+        class LocalRoleProvider:\n \n             def __init__(self, context):\n                 self.context = context\n@@ -748,7 +747,7 @@ def test_revoke_roles_in_context(self):\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = set([\'Authenticated\'])\n+        ROLES = {\'Authenticated\'}\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(groupname=\'ploneboat\', obj=folder)),\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 91fe26e..b264852 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.portal."""\n \n from datetime import date\n@@ -22,7 +21,7 @@\n from zope.site import LocalSiteManager\n \n import DateTime\n-import mock\n+from unittest import mock\n import unittest\n \n \n@@ -40,17 +39,17 @@\n class IMyRegistrySettings(Interface):\n \n     field_one = schema.TextLine(\n-        title=u\'something\',\n-        description=u\'something else\',\n+        title=\'something\',\n+        description=\'something else\',\n     )\n \n     field_two = schema.TextLine(\n-        title=u\'something\',\n-        description=u\'something else\',\n+        title=\'something\',\n+        description=\'something else\',\n     )\n \n \n-class ImNotAnInterface(object):\n+class ImNotAnInterface:\n     pass\n \n \n@@ -77,7 +76,7 @@ def setUp(self):\n         if HAS_PLONE5:\n             portal.set_registry_record(\n                 \'plone.email_from_name\',\n-                u\'Portal Owner\',\n+                \'Portal Owner\',\n             )\n             portal.set_registry_record(\n                 \'plone.email_from_address\',\n@@ -231,7 +230,7 @@ def test_send_email(self):\n             recipient=\'bob@plone.org\',\n             sender=\'noreply@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n@@ -239,14 +238,14 @@ def test_send_email(self):\n         self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n         self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n         self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-        self.assertEqual(msg.get_payload(), u\'One for you Bob!\')\n+        self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n         self.mailhost.reset()\n \n         # When no sender is set, we take the portal properties.\n         portal.send_email(\n             recipient=\'bob@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n@@ -269,7 +268,7 @@ def test_send_email_without_configured_mailhost(self):\n                 recipient=\'bob@plone.org\',\n                 sender=\'noreply@plone.org\',\n                 subject=\'Trappist\',\n-                body=u\'One for you Bob!\',\n+                body=\'One for you Bob!\',\n             )\n \n         if HAS_PLONE5:\n@@ -289,7 +288,7 @@ def test_send_email_parseaddr(self, mock_parseaddr):\n         portal.send_email(\n             recipient=\'bob@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n     def test_send_email_with_config_in_registry(self):\n@@ -303,12 +302,12 @@ def test_send_email_with_config_in_registry(self):\n         )  # ASCII\n         portal.set_registry_record(\n             \'plone.email_from_name\',\n-            u\'Registry\',\n+            \'Registry\',\n         )  # TextLine\n         portal.send_email(\n             recipient=\'bob@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n@@ -334,7 +333,7 @@ def test_send_email_with_printingmailhost(self):\n                 recipient=\'bob@plone.org\',\n                 sender=\'noreply@plone.org\',\n                 subject=\'Trappist\',\n-                body=u\'One for you Bob!\',\n+                body=\'One for you Bob!\',\n             )\n \n         # PrintingMailHost enabled\n@@ -343,7 +342,7 @@ def test_send_email_with_printingmailhost(self):\n             recipient=\'bob@plone.org\',\n             sender=\'noreply@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n         # Prevents sideeffects in other tests.\n@@ -480,16 +479,16 @@ def test_get_existing_registry_record(self):\n         """Test that existing registry records are returned correctly."""\n         registry = getUtility(IRegistry)\n         registry.records[\'plone.api.norris_power\'] = Record(\n-            field.TextLine(title=u"Chuck Norris\' Power"),\n+            field.TextLine(title="Chuck Norris\' Power"),\n         )\n         registry.records[\'plone.api.unset\'] = Record(\n-            field.TextLine(title=u\'An unset field\'),\n+            field.TextLine(title=\'An unset field\'),\n         )\n-        registry[\'plone.api.norris_power\'] = u\'infinite\'\n+        registry[\'plone.api.norris_power\'] = \'infinite\'\n \n         self.assertEqual(\n             portal.get_registry_record(\'plone.api.norris_power\'),\n-            u\'infinite\',\n+            \'infinite\',\n         )\n \n         self.assertEqual(\n@@ -644,10 +643,10 @@ def test_set_valid_registry_record(self):\n         """Test that setting a valid registry record succeeds."""\n         registry = getUtility(IRegistry)\n         registry.records[\'plone.api.plone_power\'] = Record(\n-            field.TextLine(title=u"Plone\'s Power"),\n+            field.TextLine(title="Plone\'s Power"),\n         )\n-        portal.set_registry_record(\'plone.api.plone_power\', u\'awesome\')\n-        self.assertEqual(registry[\'plone.api.plone_power\'], u\'awesome\')\n+        portal.set_registry_record(\'plone.api.plone_power\', \'awesome\')\n+        self.assertEqual(registry[\'plone.api.plone_power\'], \'awesome\')\n \n     def test_set_missing_param_registry_record(self):\n         """Test that when set_registry_record is called without\n@@ -665,7 +664,7 @@ def test_set_non_existing_record_value(self):\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n                 name=\'nonexistent.sharepoint.power\',\n-                value=u\'Zero\',\n+                value=\'Zero\',\n             )\n \n     def test_set_no_value_param_for_existing_record(self):\n@@ -675,7 +674,7 @@ def test_set_no_value_param_for_existing_record(self):\n         """\n         registry = getUtility(IRegistry)\n         registry.records[\'plone.api.plone_power\'] = Record(\n-            field.TextLine(title=u"Plone\'s Power"),\n+            field.TextLine(title="Plone\'s Power"),\n         )\n \n         from plone.api.exc import MissingParameterError\n@@ -690,7 +689,7 @@ def test_set_invalid_key_type_record(self):\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n                 name=[\'foo\', \'bar\'],\n-                value=u\'baz\',\n+                value=\'baz\',\n             )\n \n     def test_set_registry_record_from_interface(self):\n@@ -698,7 +697,7 @@ def test_set_registry_record_from_interface(self):\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n-        text = u\'random text\'\n+        text = \'random text\'\n         portal.set_registry_record(\n             \'field_one\',\n             text,\n@@ -831,7 +830,7 @@ def test_translate(self):\n                 \'object.\',\n                 lang=\'es\',\n             ),\n-            u\'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n+            \'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n             \'flujo de trabajo en un objeto.\',\n         )\n         self.assertEqual(\n@@ -840,5 +839,5 @@ def test_translate(self):\n                 domain=\'plonelocales\',\n                 lang=\'fr\',\n             ),\n-            u\'Avril\',\n+            \'Avril\',\n         )\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 9e6bf00..6731323 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.user."""\n \n from AccessControl.Permission import getPermissions\n@@ -15,7 +14,7 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import mock\n+from unittest import mock\n import unittest\n \n \n@@ -931,7 +930,7 @@ def test_grant_roles_disregards_adapter(self):\n         # throw in a adapter granting the reviewer-roles\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n-        class LocalRoleProvider(object):\n+        class LocalRoleProvider:\n \n             def __init__(self, context):\n                 self.context = context\ndiff --git a/src/plone/api/tests/test_validation.py b/src/plone/api/tests/test_validation.py\nindex f3e19bb..48c951b 100644\n--- a/src/plone/api/tests/test_validation.py\n+++ b/src/plone/api/tests/test_validation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.validation."""\n \n from plone.api.tests.base import INTEGRATION_TESTING\n@@ -64,7 +63,7 @@ def test_get_supplied_args(self):\n         result = _gsa(signature, (\'foo\', \'wibble\'), {})\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\', \'arg2\')),\n+            {\'arg1\', \'arg2\'},\n         )\n \n         # test that keyword args are recognised correctly\n@@ -78,7 +77,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\', \'arg2\')),\n+            {\'arg1\', \'arg2\'},\n         )\n \n         # test that a mixture of args are recognised correctly\n@@ -89,7 +88,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\', \'arg2\')),\n+            {\'arg1\', \'arg2\'},\n         )\n \n         # test that None-valued positional args are ignored\n@@ -100,7 +99,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\',)),\n+            {\'arg1\'},\n         )\n \n         # test that None-valued keyword args are ignored\n@@ -114,7 +113,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg2\',)),\n+            {\'arg2\'},\n         )\n \n     def test_single_keyword_arg_provided(self):\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 34c843b..375d865 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides functionality for user manipulation."""\n \n from AccessControl.Permission import getPermissions\n@@ -418,11 +417,11 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n         # if obj, get only a list of local roles, without inherited ones\n         inherit = False\n \n-    actual_roles = set([\n+    actual_roles = {\n         role\n         for role in get_roles(user=user, obj=obj, inherit=inherit)\n         if role not in [\'Anonymous\', \'Authenticated\']\n-    ])\n+    }\n \n     roles = list(actual_roles - roles)\n \ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex f948856..c7b2e31 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Decorators for validating parameters"""\n \n from decorator import decorator\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-22T13:34:53+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/8d8e7223f078ecd0a6f8d41df513ce9f040b1399

add changenote

Files changed:
A news/460.breaking

b'diff --git a/news/460.breaking b/news/460.breaking\nnew file mode 100644\nindex 0000000..9b27743\n--- /dev/null\n+++ b/news/460.breaking\n@@ -0,0 +1,2 @@\n+Drop support for Archetypes and Python 2.\n+[pbauer]\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-22T13:35:54+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/b372be4fccaa645d463a0f80c134d210ae7688a4

next version is 2.0.0

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex b9eec73..e37f424 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,7 +13,7 @@ def read(*rnames):\n     read('CHANGES.rst') + '\\n\\n' + \\\n     read('LICENSE')\n \n-version = '1.11.1.dev0'\n+version = '2.0.0.dev0'\n \n setup(\n     name='plone.api',\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-24T14:29:18+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/8a8b0ad8c7aaeab3f08066cbd05add2b313a1e6e

re-add removed test

Files changed:
M src/plone/api/tests/test_content.py

b'diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex abd0ae6..f2a6334 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -410,6 +410,25 @@ def test_create_collection(self):\n         )\n         self.assertEqual(collection.Title(), \'Mandelbrot set\')\n \n+    def test_create_event(self):\n+        """Test create a event."""\n+        import datetime\n+        today = datetime.datetime.now()\n+        tomorrow = today + datetime.timedelta(days=1)\n+        event = api.content.create(\n+            container=self.portal,\n+            type=\'Event\',\n+            title=\'My event\',\n+            start=today,\n+            end=tomorrow,\n+        )\n+        self.assertEqual(event.start, today)\n+        self.assertEqual(event.end, tomorrow)\n+        results = api.content.find(Title=\'My event\')\n+        self.assertEqual(len(results), 1)\n+        self.assertEqual(results[0].start, today)\n+        self.assertEqual(results[0].end, tomorrow)\n+\n     def test_get_constraints(self):\n         """Test the constraints when content is fetched with get."""\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-24T14:43:46+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/2e97181432779f6047aaca27103c7f489200b053

remove dependency on mock and sort imports

Files changed:
M setup.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py

b"diff --git a/setup.py b/setup.py\nindex e37f424..e28576e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -43,7 +43,6 @@ def read(*rnames):\n         'test': [\n             'Products.CMFPlone',\n             'manuel',\n-            'mock',\n             'plone.app.dexterity',\n             'plone.app.testing',\n             'plone.indexer',\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex f2a6334..6c0c092 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -17,6 +17,7 @@\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.ZCatalog.interfaces import IZCatalog\n+from unittest import mock\n from zExceptions import BadRequest\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n@@ -27,7 +28,6 @@\n from zope.lifecycleevent import modified\n from zope.lifecycleevent import ObjectMovedEvent\n \n-from unittest import mock\n import pkg_resources\n import unittest\n \ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex ca4c8f2..4ef54ae 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -4,13 +4,13 @@\n from plone import api\n from plone.api.tests.base import INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n+from unittest import mock\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-from unittest import mock\n import unittest\n \n \ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex b264852..998aeed 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -14,6 +14,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n+from unittest import mock\n from zope import schema\n from zope.component import getUtility\n from zope.component.hooks import setSite\n@@ -21,7 +22,6 @@\n from zope.site import LocalSiteManager\n \n import DateTime\n-from unittest import mock\n import unittest\n \n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2021-08-29T21:38:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.api/commit/35dfb9fc5dad4801d6c81ad29cd53a1cac0b24b1

Merge pull request #461 from plone/drop_at_and_py2

Drop Archetypes and Python 2

Files changed:
A news/460.breaking
M .travis.yml
M docs/conf.py
M docs/content.rst
M docs/group.rst
M setup.py
M src/plone/__init__.py
M src/plone/api/__init__.py
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/exc.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py
M src/plone/api/tests/test_validation.py
M src/plone/api/user.py
M src/plone/api/validation.py
M tox.ini

b'diff --git a/.travis.yml b/.travis.yml\nindex d3dc6bd..b3920fc 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -14,10 +14,6 @@ matrix:\n         env: TOXENV=isort,lint\n       - python: "3.7"\n         env: TOXENV=docs\n-      - python: "2.7"\n-        env: TOXENV=py27-plone-5.2\n-      - python: "2.7"\n-        env: TOXENV=py27-plone-5.2-archetypes\n       - python: "3.6"\n         env: TOXENV=py36-plone-5.2\n       - python: "3.7"\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 15158c3..106e0d3 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,7 +1,7 @@\n # sphinx configuration\n \n-project = u\'plone.api\'\n-copyright = u\'2012, Plone Foundation\'\n+project = \'plone.api\'\n+copyright = \'2012, Plone Foundation\'\n \n extensions = [\n     \'sphinx.ext.doctest\',\n@@ -21,8 +21,8 @@\n latex_documents = [(\n     \'index\',\n     \'ploneapi.tex\',\n-    u\'plone.api Documentation\',\n-    u\'\', \'manual\'\n+    \'plone.api Documentation\',\n+    \'\', \'manual\'\n ), ]\n \n from pkg_resources import get_distribution\n@@ -31,7 +31,7 @@\n import sys\n \n \n-class Mock(object):\n+class Mock:\n     def __init__(self, *args, **kwargs):\n         pass\n \ndiff --git a/docs/content.rst b/docs/content.rst\nindex 6714b88..e0292b9 100644\n--- a/docs/content.rst\n+++ b/docs/content.rst\n@@ -28,7 +28,6 @@ Get the portal object; it will serve nicely:\n \n Create your new content item using the :meth:`api.content.create` method.\n The type argument will decide which content type will be created.\n-Both Dexterity and Archetypes content types are supported.\n \n .. code-block:: python\n \ndiff --git a/docs/group.rst b/docs/group.rst\nindex 5efbd40..66eb637 100644\n--- a/docs/group.rst\n+++ b/docs/group.rst\n@@ -143,13 +143,7 @@ Groups may be filtered by member. By passing the ``username`` parameter,\n .. invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n-    import six\n-    if six.PY2:\n-        assertCountEqual = self.assertItemsEqual\n-    else:\n-        assertCountEqual = self.assertCountEqual\n-\n-    assertCountEqual(\n+    self.assertCountEqual(\n         group_list,\n         [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n     )\n@@ -163,7 +157,7 @@ You can also pass the user directly to :meth:`api.group.get_groups`:\n .. invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n-    assertCountEqual(\n+    self.assertCountEqual(\n         group_list,\n         [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n     )\ndiff --git a/news/460.breaking b/news/460.breaking\nnew file mode 100644\nindex 0000000..9b27743\n--- /dev/null\n+++ b/news/460.breaking\n@@ -0,0 +1,2 @@\n+Drop support for Archetypes and Python 2.\n+[pbauer]\ndiff --git a/setup.py b/setup.py\nindex 59e5f41..e28576e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n@@ -14,7 +13,7 @@ def read(*rnames):\n     read(\'CHANGES.rst\') + \'\\n\\n\' + \\\n     read(\'LICENSE\')\n \n-version = \'1.11.1.dev0\'\n+version = \'2.0.0.dev0\'\n \n setup(\n     name=\'plone.api\',\n@@ -38,35 +37,28 @@ def read(*rnames):\n         \'plone.app.linkintegrity\',\n         \'plone.uuid\',\n         \'setuptools\',\n-        \'six\',\n         \'zope.globalrequest\',\n     ],\n     extras_require={\n         \'test\': [\n             \'Products.CMFPlone\',\n             \'manuel\',\n-            \'mock\',\n             \'plone.app.dexterity\',\n             \'plone.app.testing\',\n             \'plone.indexer\',\n             \'plone.registry\',\n         ],\n-        \'archetypes\': [\n-            \'Products.Archetypes\',\n-        ],\n     },\n     classifiers=[\n         \'Development Status :: 5 - Production/Stable\',\n         \'Environment :: Web Environment\',\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.2\',\n         \'Framework :: Plone :: 6.0\',\n         \'Framework :: Plone :: Core\',\n         \'Intended Audience :: Developers\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Operating System :: OS Independent\',\n         \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n         \'Programming Language :: Python :: 3.6\',\n         \'Programming Language :: Python :: 3.7\',\n         \'Programming Language :: Python :: 3.8\',\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/api/__init__.py b/src/plone/api/__init__.py\nindex 251c015..59d677c 100644\n--- a/src/plone/api/__init__.py\n+++ b/src/plone/api/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # flake8: NOQA: S401\n \n from plone.api import content\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 1f520a1..cd06e23 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides functionality for content manipulation."""\n \n from copy import copy as _copy\n@@ -23,22 +22,6 @@\n import random\n import transaction\n \n-\n-try:\n-    get_distribution(\'Products.Archetypes\')\n-except DistributionNotFound:\n-    class IBaseObject(Interface):\n-        """Fake Products.Archetypes.interfaces.base.IBaseObject"""\n-else:\n-    from Products.Archetypes.interfaces.base import IBaseObject\n-\n-# Old linkintegrity (Plone <= 5.0b4) or new (Plone > 5.0b4)\n-linkintegrity_version = get_distribution(\'plone.app.linkintegrity\').version\n-if parse_version(linkintegrity_version) >= parse_version(\'3.0.dev0\'):\n-    NEW_LINKINTEGRITY = True\n-else:\n-    NEW_LINKINTEGRITY = False\n-\n _marker = []\n \n \n@@ -105,16 +88,6 @@ def create(\n         )\n \n     content = container[content_id]\n-\n-    # Archetypes specific code\n-    if IBaseObject.providedBy(content):\n-        # Will finish Archetypes content item creation process,\n-        # rename-after-creation and such\n-        # Passing values as a dict with None values so values set by\n-        # invokeFactory don\'t get overridden.\n-        # \'\': \'\' is required so that bool(values) is True.\n-        content.processForm(values={\'\': \'\'})\n-\n     if not id or (safe_id and id):\n         # Create a new id from title\n         chooser = INameChooser(container)\n@@ -306,32 +279,22 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n     if not objects:\n         return\n \n-    if check_linkintegrity and NEW_LINKINTEGRITY:\n+    if check_linkintegrity:\n         site = portal.get()\n         linkintegrity_view = get_view(\n             name=\'delete_confirmation_info\',\n             context=site,\n             request=site.REQUEST,\n         )\n-\n         # look for breaches and manually raise a exception\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                \'Linkintegrity-breaches: {0}\'.format(breaches),\n+                \'Linkintegrity-breaches: {}\'.format(breaches),\n             )\n \n     for obj_ in objects:\n-        if not check_linkintegrity and not NEW_LINKINTEGRITY:\n-            # old style ignoring breaches:\n-            # we have to explicitly ignore the exception\n-            try:\n-                obj_.aq_parent.manage_delObjects([obj_.getId()])\n-            except LinkIntegrityNotificationException:\n-                pass\n-        else:\n-            # All other cases\n-            obj_.aq_parent.manage_delObjects([obj_.getId()])\n+        obj_.aq_parent.manage_delObjects([obj_.getId()])\n \n \n @required_parameters(\'obj\')\n@@ -489,15 +452,15 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n             ]\n \n             raise InvalidParameterError(\n-                "Invalid transition \'{0}\'.\\n"\n+                "Invalid transition \'{}\'.\\n"\n                 \'Valid transitions are:\\n\'\n-                \'{1}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n+                \'{}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n             )\n     else:\n         _transition_to(obj, workflow, to_state, **kwargs)\n         if workflow.getInfoFor(obj, \'review_state\') != to_state:\n             raise InvalidParameterError(\n-                \'Could not find workflow to set state to {0} on {1}\'.format(\n+                \'Could not find workflow to set state to {} on {}\'.format(\n                     to_state,\n                     obj,\n                 ),\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex 2d61541..acd7e6f 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -14,7 +13,6 @@\n from plone.api.validation import required_parameters\n from zope.globalrequest import getRequest\n \n-import six\n import traceback\n import Zope2\n \n@@ -93,7 +91,7 @@ def adopt_roles(roles=None):\n     :type roles: list of strings\n     :Example: :ref:`env_adopt_roles_example`\n     """\n-    if isinstance(roles, six.string_types):\n+    if isinstance(roles, str):\n         roles = [roles]\n \n     if not roles:\n@@ -125,7 +123,7 @@ def _adopt_roles(roles):\n     security_manager.removeContext(overriding_context)\n \n \n-class _GlobalRoleOverridingContext(object):\n+class _GlobalRoleOverridingContext:\n     # ZopeSecurityPolicy will use security_context._proxy_roles in place of\n     # the roles that would normally be active, provided that it happens to\n     # consider the security_context object to be relevant.\ndiff --git a/src/plone/api/exc.py b/src/plone/api/exc.py\nindex cbc2e91..245eff9 100644\n--- a/src/plone/api/exc.py\n+++ b/src/plone/api/exc.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Exceptions raised by plone.api methods."""\n \n \ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex be8d50f..f56e186 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides functionality for group manipulation."""\n \n from plone.api import portal\n@@ -242,7 +241,7 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n         # get only the local roles on a object\n         # same as above we use the PloneUser version of getRolesInContext.\n         # Include roles from adapters granting local roles\n-        roles = set([])\n+        roles = set()\n         pas = portal.get_tool(\'acl_users\')\n         for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n             for adapter in lrmanager._getAdapters(obj):\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex f8e91f0..7a95113 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides various utility methods on the portal level."""\n \n from Acquisition import aq_inner\n@@ -9,6 +8,7 @@\n from plone.api.exc import InvalidParameterError\n from plone.api.validation import required_parameters\n from plone.app.layout.navigation.root import getNavigationRootObject\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -20,20 +20,10 @@\n \n import datetime as dtime\n import pkg_resources\n-import six\n \n \n logger = getLogger(\'plone.api.portal\')\n \n-try:\n-    pkg_resources.get_distribution(\'plone.registry\')\n-    from plone.registry.interfaces import IRegistry\n-except pkg_resources.DistributionNotFound:\n-    logger.warning(\n-        \'plone.registry is not installed. get_registry_record and \'\n-        \'set_registry_record will be unavailable.\',\n-    )\n-\n try:\n     from Products import PrintingMailHost\n except ImportError:\n@@ -171,19 +161,11 @@ def send_email(\n         if ctrlOverview.mailhost_warning():\n             raise ValueError(\'MailHost is not configured.\')\n \n-    try:\n-        encoding = get_registry_record(\'plone.email_charset\')\n-    except InvalidParameterError:\n-        encoding = portal.getProperty(\'email_charset\', \'utf-8\')\n+    encoding = get_registry_record(\'plone.email_charset\')\n \n     if not sender:\n-        try:\n-            from_address = get_registry_record(\'plone.email_from_address\')\n-            from_name = get_registry_record(\'plone.email_from_name\')\n-        except InvalidParameterError:\n-            # Before Plone 5.0b2 these were stored in portal_properties\n-            from_address = portal.getProperty(\'email_from_address\', \'\')\n-            from_name = portal.getProperty(\'email_from_name\', \'\')\n+        from_address = get_registry_record(\'plone.email_from_address\')\n+        from_name = get_registry_record(\'plone.email_from_name\')\n         sender = formataddr((from_name, from_address))\n         if parseaddr(sender)[1] != from_address:\n             # formataddr probably got confused by special characters.\n@@ -191,7 +173,7 @@ def send_email(\n \n     # If the mail headers are not properly encoded we need to extract\n     # them and let MailHost manage the encoding.\n-    if isinstance(body, six.text_type):\n+    if isinstance(body, str):\n         body = body.encode(encoding)\n \n     host = get_tool(\'MailHost\')\n@@ -286,12 +268,12 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n     :Example: :ref:`portal_get_registry_record_example`\n     """\n     if not isinstance(name, str):\n-        raise InvalidParameterError(u"The \'name\' parameter has to be a string")\n+        raise InvalidParameterError("The \'name\' parameter has to be a string")\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            u\'The interface parameter has to derive from \'\n-            u\'zope.interface.Interface\',\n+            \'The interface parameter has to derive from \'\n+            \'zope.interface.Interface\',\n         )\n \n     registry = getUtility(IRegistry)\n@@ -300,7 +282,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry[\'{0}.{1}\'.format(interface.__identifier__, name)]\n+            return registry[\'{}.{}\'.format(interface.__identifier__, name)]\n \n         if default is not MISSING:\n             return default\n@@ -354,12 +336,12 @@ def set_registry_record(name=None, value=None, interface=None):\n     :Example: :ref:`portal_set_registry_record_example`\n     """\n     if not isinstance(name, str):\n-        raise InvalidParameterError(u"The parameter \'name\' has to be a string")\n+        raise InvalidParameterError("The parameter \'name\' has to be a string")\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            u\'The interface parameter has to derive from \'\n-            u\'zope.interface.Interface\',\n+            \'The interface parameter has to derive from \'\n+            \'zope.interface.Interface\',\n         )\n \n     registry = getUtility(IRegistry)\n@@ -378,8 +360,8 @@ def set_registry_record(name=None, value=None, interface=None):\n                 if field[0] == \'field_one\'\n             ][0]\n             raise InvalidParameterError(\n-                u\'The value parameter for the field {name} needs to be \'\n-                u\'{of_class} instead of {of_type}\'.format(\n+                \'The value parameter for the field {name} needs to be \'\n+                \'{of_class} instead of {of_type}\'.format(\n                     name=name,\n                     of_class=str(field_type.__class__),\n                     of_type=type(value),\n@@ -401,19 +383,7 @@ def get_default_language():\n     :rtype: string\n     :Example: :ref:`portal_get_default_language_example`\n     """\n-    try:\n-        # Plone 5.2+\n-        from plone.i18n.interfaces import ILanguageSchema\n-    except ImportError:  # pragma: no cover\n-        try:\n-            # Plone 5.0/5.1\n-            from Products.CMFPlone.interfaces import ILanguageSchema\n-        except ImportError:\n-            # Plone 4.3\n-            portal = get()\n-            return portal.portal_properties.site_properties.getProperty(\n-                \'default_language\', None,\n-            )\n+    from plone.i18n.interfaces import ILanguageSchema\n     registry = getUtility(IRegistry)\n     settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n     return settings.default_language\n@@ -446,7 +416,7 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :param lang: target language\n     :type lang: string\n     :returns: translated message\n-    :rtype: six.text_type\n+    :rtype: str\n     :Example: :ref:`portal_translate_example`\n     """\n     translation_service = get_tool(\'translation_service\')\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex 1046a30..654836f 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base module for unittesting."""\n \n from plone.app.testing import FunctionalTesting\n@@ -13,14 +12,6 @@\n import pkg_resources\n \n \n-try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_PA_CONTENTTYPES = False\n-else:\n-    HAS_PA_CONTENTTYPES = True\n-\n-\n class PloneApiLayer(PloneSandboxLayer):\n \n     defaultBases = (PLONE_FIXTURE, )\n@@ -31,19 +22,14 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.dexterity)\n         import plone.api\n         self.loadZCML(package=plone.api, name=\'testing.zcml\')\n-\n-        if HAS_PA_CONTENTTYPES:\n-            import plone.app.contenttypes\n-            self.loadZCML(package=plone.app.contenttypes)\n+        import plone.app.contenttypes\n+        self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         """Prepare a Plone instance for testing."""\n         # Install into Plone site using portal_setup\n         self.applyProfile(portal, \'Products.CMFPlone:plone\')\n-\n-        # Plone 5 support\n-        if HAS_PA_CONTENTTYPES:\n-            self.applyProfile(portal, \'plone.app.contenttypes:default\')\n+        self.applyProfile(portal, \'plone.app.contenttypes:default\')\n \n         # Create dummy content types for Dexterity tests\n         self.applyProfile(portal, \'plone.api:testfixture\')\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 1332d7d..6c0c092 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.content."""\n \n from Acquisition import aq_base\n@@ -7,7 +6,6 @@\n from OFS.interfaces import IObjectWillBeMovedEvent\n from plone import api\n from plone.api.content import _parse_object_provides_query\n-from plone.api.content import NEW_LINKINTEGRITY\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # NOQA: E501\n@@ -19,6 +17,7 @@\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.ZCatalog.interfaces import IZCatalog\n+from unittest import mock\n from zExceptions import BadRequest\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n@@ -29,20 +28,10 @@\n from zope.lifecycleevent import modified\n from zope.lifecycleevent import ObjectMovedEvent\n \n-import mock\n import pkg_resources\n-import six\n import unittest\n \n \n-try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_PACONTENTYPES = False\n-else:\n-    HAS_PACONTENTYPES = True\n-\n-\n class TestPloneApiContent(unittest.TestCase):\n     """Unit tests for content manipulation using plone.api"""\n \n@@ -421,42 +410,21 @@ def test_create_collection(self):\n         )\n         self.assertEqual(collection.Title(), \'Mandelbrot set\')\n \n-    @unittest.skipIf(HAS_PACONTENTYPES, \'Archetypes only\')\n-    def test_create_at_event(self):\n-        """https://github.com/plone/plone.api/issues/364"""\n-        from DateTime import DateTime\n-        today = DateTime()\n-        tomorrow = today + 1\n-        event = api.content.create(\n-            container=self.portal,\n-            type=\'Event\',\n-            title=u\'My event\',\n-            startDate=today,\n-            endDate=tomorrow,\n-        )\n-        self.assertEqual(event.startDate, today)\n-        self.assertEqual(event.endDate, tomorrow)\n-        results = api.content.find(Title=u\'My event\')\n-        self.assertEqual(len(results), 1)\n-        self.assertEqual(results[0].start, today)\n-        self.assertEqual(results[0].end, tomorrow)\n-\n-    @unittest.skipUnless(HAS_PACONTENTYPES, \'Dexterity only\')\n-    def test_create_dx_event(self):\n-        """Test create a DX event."""\n+    def test_create_event(self):\n+        """Test create a event."""\n         import datetime\n         today = datetime.datetime.now()\n         tomorrow = today + datetime.timedelta(days=1)\n         event = api.content.create(\n             container=self.portal,\n             type=\'Event\',\n-            title=u\'My event\',\n+            title=\'My event\',\n             start=today,\n             end=tomorrow,\n         )\n         self.assertEqual(event.start, today)\n         self.assertEqual(event.end, tomorrow)\n-        results = api.content.find(Title=u\'My event\')\n+        results = api.content.find(Title=\'My event\')\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].start, today)\n         self.assertEqual(results[0].end, tomorrow)\n@@ -494,7 +462,7 @@ def test_get(self):\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            \'/{0}/about/team\'.format(self.portal.getId()),\n+            \'/{}/about/team\'.format(self.portal.getId()),\n         )\n         self.assertEqual(self.team, team_by_path)\n \n@@ -623,11 +591,7 @@ def recordEvent(event):\n                 and container[\'about\'][\'nu-contact\'] == nucontact)\n         assert \'contact\' not in container[\'about\'].keys()\n \n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             firedEvents,\n             [\n                 ObjectMovedEvent,\n@@ -867,25 +831,14 @@ def test_delete_ignore_linkintegrity(self):\n         api.content.delete(self.contact, check_linkintegrity=False)\n         self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n \n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n     def test_delete_check_linkintegrity(self):\n         """Test deleting a content item with a link pointed at it."""\n         self._set_text(self.team, \'<a href="contact">contact</a>\')\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(self.contact)\n-        if NEW_LINKINTEGRITY:\n-            # In the old implementation of linkintegrity the items are\n-            # still gone during this request.\n-            self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-\n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n+        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+\n     def test_delete_multiple_check_linkintegrity(self):\n         """Test deleting multiple item with linkintegrity-breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -893,16 +846,9 @@ def test_delete_multiple_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.contact])\n-        if NEW_LINKINTEGRITY:\n-            # In the old implementation of linkintegrity the items are\n-            # still gone during this request.\n-            self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-            self.assertIn(\'blog\', self.portal.keys())\n-\n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n+        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertIn(\'blog\', self.portal.keys())\n+\n     def test_delete_multiple_ignore_linkintegrity(self):\n         """Test deleting multiple items ignoring linkintegrity-breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -915,10 +861,6 @@ def test_delete_multiple_ignore_linkintegrity(self):\n         self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n         self.assertNotIn(\'blog\', self.portal.keys())\n \n-    @unittest.skipIf(\n-        HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,\n-        \'This test only makes sense with Archetypes or new Linkintegrity.\',\n-    )\n     def test_delete_with_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -926,17 +868,10 @@ def test_delete_with_internal_breaches(self):\n         # Deleting pages with unresolved breaches throws an exception\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.about])\n-        if NEW_LINKINTEGRITY:\n-            # In the old implementation of linkintegrity the items are\n-            # still gone during this request.\n-            self.assertIn(\'about\', self.portal.keys())\n-            self.assertIn(\'blog\', self.portal.keys())\n-            self.assertIn(\'training\', self.portal[\'events\'].keys())\n-\n-    @unittest.skipUnless(\n-        NEW_LINKINTEGRITY,\n-        \'Only new Linkintegrity resolves internal breaches\',\n-    )\n+        self.assertIn(\'about\', self.portal.keys())\n+        self.assertIn(\'blog\', self.portal.keys())\n+        self.assertIn(\'training\', self.portal[\'events\'].keys())\n+\n     def test_delete_with_resolved_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n         self._set_text(self.team, \'<a href="../about/contact">contact</a>\')\n@@ -948,12 +883,7 @@ def test_delete_with_resolved_internal_breaches(self):\n         self.assertNotIn(\'training\', self.portal[\'events\'].keys())\n \n     def _set_text(self, obj, text):\n-        if IDexterityContent.providedBy(obj):\n-            # Dexterity\n-            obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n-        else:\n-            # Archetypes\n-            obj.setText(text, mimetype=\'text/html\')\n+        obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n         modified(obj)\n \n     def test_find(self):\n@@ -1437,16 +1367,6 @@ def test_get_uuid(self):\n         self.assertEqual(uuid1, uuid2)\n         self.assertIsInstance(uuid2, str)\n \n-        if not HAS_PACONTENTYPES:\n-            container.invokeFactory(\'Document\', \'test-archetype\')\n-            document = container[\'test-archetype\']\n-            uuid1 = generator()\n-            document._setUID(uuid1)\n-\n-            uuid2 = api.content.get_uuid(document)\n-            self.assertEqual(uuid1, uuid2)\n-            self.assertIsInstance(uuid2, str)\n-\n     def test_get_view_view_not_found(self):\n         """Test that error msg lists available views if a view is not found."""\n         request = self.layer[\'request\']\ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex c95b3f7..4ad9fd0 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Boilerplate for doctest functional tests."""\n \n from logging import getLogger\n@@ -117,7 +116,7 @@ def test_suite():\n     for filename in os.listdir(docs_path):\n         try:\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n-        except IOError:\n+        except OSError:\n             logger.warning(\n                 \'test_doctest.py skipping {file}\'.format(file=filename),\n             )\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 18e043f..f6402a9 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.roles."""\n \n from AccessControl import Unauthorized\ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex 6996068..4ef54ae 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -1,18 +1,16 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.group."""\n \n from borg.localrole.interfaces import ILocalRoleProvider\n from plone import api\n from plone.api.tests.base import INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n+from unittest import mock\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import mock\n-import six\n import unittest\n \n \n@@ -361,7 +359,7 @@ def test_grant_roles(self):\n         self.assertIn(\'Contributor\', api.group.get_roles(group=group))\n \n         api.group.grant_roles(groupname=\'foo\', roles=[\'Reader\', \'Reader\'])\n-        ROLES = set([\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'])\n+        ROLES = {\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'}\n         self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'foo\')))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n@@ -406,7 +404,7 @@ def test_revoke_roles(self):\n         self.assertIn(\'Editor\', api.group.get_roles(group=group))\n \n         api.group.revoke_roles(groupname=\'bar\', roles=[\'Editor\'])\n-        ROLES = set([\'Authenticated\'])\n+        ROLES = {\'Authenticated\'}\n         self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'bar\')))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n@@ -463,7 +461,7 @@ def test_grant_roles_in_context(self):\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = set([\'Editor\', \'Contributor\', \'Authenticated\'])\n+        ROLES = {\'Editor\', \'Contributor\', \'Authenticated\'}\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(groupname=\'foo\', obj=folder)),\n@@ -480,7 +478,7 @@ def test_grant_roles_in_context(self):\n             ROLES,\n             set(api.group.get_roles(group=group, obj=document)),\n         )\n-        ROLES = set([\'Editor\', \'Contributor\'])\n+        ROLES = {\'Editor\', \'Contributor\'}\n         self.assertEqual(\n             ROLES,\n             set(\n@@ -496,7 +494,7 @@ def test_grant_roles_in_context(self):\n             set(api.group.get_roles(group=group, obj=folder, inherit=False)),\n         )\n         self.assertEqual(\n-            set([]),\n+            set(),\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -506,17 +504,12 @@ def test_grant_roles_in_context(self):\n             ),\n         )\n         self.assertEqual(\n-            set([]),\n+            set(),\n             set(api.group.get_roles(group=group, obj=document, inherit=False)),\n         )\n \n     def test_local_roles_without_inheritance(self):\n         """Test granting and getting local_roles."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-\n         api.group.create(groupname=\'foo\')\n \n         portal = api.portal.get()\n@@ -538,12 +531,12 @@ def test_local_roles_without_inheritance(self):\n         )\n         # Add the editor-role as global role\n         api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Authenticated\', \'Editor\'],\n             api.group.get_roles(groupname=\'foo\'),\n         )\n         # local_roles plus global_roles\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Authenticated\', \'Editor\'],\n             api.group.get_roles(groupname=\'foo\', obj=folder),\n         )\n@@ -557,18 +550,18 @@ def test_local_roles_without_inheritance(self):\n         api.group.grant_roles(\n             groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Contributor\'],\n             api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n         )\n         # local_roles plus global_roles\n         self.assertEqual(\n-            set([\'Authenticated\', \'Editor\', \'Contributor\']),\n+            {\'Authenticated\', \'Editor\', \'Contributor\'},\n             set(api.group.get_roles(groupname=\'foo\', obj=document)),\n         )\n         # no only-local roles\n         self.assertEqual(\n-            set([]),\n+            set(),\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -582,7 +575,7 @@ def test_local_roles_without_inheritance(self):\n         )\n         # one only-local role\n         self.assertEqual(\n-            set([\'Contributor\']),\n+            {\'Contributor\'},\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -596,7 +589,7 @@ def test_local_roles_without_inheritance(self):\n         # The Editor-role is added even though it is already a global role\n         api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n         self.assertEqual(\n-            set([\'Contributor\', \'Editor\']),\n+            {\'Contributor\', \'Editor\'},\n             set(\n                 api.group.get_roles(\n                     groupname=\'foo\',\n@@ -609,11 +602,6 @@ def test_local_roles_without_inheritance(self):\n     def test_local_roles_disregard_adapter(self):\n         """Test that borg.localrole-adpaters are not copied when granting\n         local roles."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n@@ -635,7 +623,7 @@ def test_local_roles_disregard_adapter(self):\n         # throw in a adapter granting the reviewer-roles\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n-        class LocalRoleProvider(object):\n+        class LocalRoleProvider:\n \n             def __init__(self, context):\n                 self.context = context\n@@ -646,12 +634,12 @@ def getRoles(self, principal_id):\n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder),\n             [\'Authenticated\', \'Reviewer\'],\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n             [\'Reviewer\'],\n         )\n@@ -660,18 +648,18 @@ def getRoles(self, principal_id):\n         api.group.grant_roles(\n             groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder),\n             [\'Authenticated\', \'Contributor\', \'Reviewer\'],\n         )\n \n         # The adapter role in in the local roles but not persistent\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n         local_roles = getattr(folder, \'__ac_local_roles__\', {})\n-        assertCountEqual(\n+        self.assertCountEqual(\n             local_roles.get(\'foo\'),\n             [\'Contributor\'],\n         )\n@@ -759,7 +747,7 @@ def test_revoke_roles_in_context(self):\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = set([\'Authenticated\'])\n+        ROLES = {\'Authenticated\'}\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(groupname=\'ploneboat\', obj=folder)),\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 3ea3cb8..998aeed 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.portal."""\n \n from datetime import date\n@@ -15,6 +14,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n+from unittest import mock\n from zope import schema\n from zope.component import getUtility\n from zope.component.hooks import setSite\n@@ -22,7 +22,6 @@\n from zope.site import LocalSiteManager\n \n import DateTime\n-import mock\n import unittest\n \n \n@@ -40,17 +39,17 @@\n class IMyRegistrySettings(Interface):\n \n     field_one = schema.TextLine(\n-        title=u\'something\',\n-        description=u\'something else\',\n+        title=\'something\',\n+        description=\'something else\',\n     )\n \n     field_two = schema.TextLine(\n-        title=u\'something\',\n-        description=u\'something else\',\n+        title=\'something\',\n+        description=\'something else\',\n     )\n \n \n-class ImNotAnInterface(object):\n+class ImNotAnInterface:\n     pass\n \n \n@@ -77,7 +76,7 @@ def setUp(self):\n         if HAS_PLONE5:\n             portal.set_registry_record(\n                 \'plone.email_from_name\',\n-                u\'Portal Owner\',\n+                \'Portal Owner\',\n             )\n             portal.set_registry_record(\n                 \'plone.email_from_address\',\n@@ -231,7 +230,7 @@ def test_send_email(self):\n             recipient=\'bob@plone.org\',\n             sender=\'noreply@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n@@ -239,14 +238,14 @@ def test_send_email(self):\n         self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n         self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n         self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-        self.assertEqual(msg.get_payload(), u\'One for you Bob!\')\n+        self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n         self.mailhost.reset()\n \n         # When no sender is set, we take the portal properties.\n         portal.send_email(\n             recipient=\'bob@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n@@ -269,7 +268,7 @@ def test_send_email_without_configured_mailhost(self):\n                 recipient=\'bob@plone.org\',\n                 sender=\'noreply@plone.org\',\n                 subject=\'Trappist\',\n-                body=u\'One for you Bob!\',\n+                body=\'One for you Bob!\',\n             )\n \n         if HAS_PLONE5:\n@@ -289,33 +288,9 @@ def test_send_email_parseaddr(self, mock_parseaddr):\n         portal.send_email(\n             recipient=\'bob@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n-        )\n-\n-    @unittest.skipIf(\n-        HAS_PLONE5,\n-        \'Plone 4 uses portal_properties for mail settings\',\n-    )\n-    def test_send_email_with_config_in_portal_properties(self):\n-        """Test mail-setting being stored in portal_properties.\n-        Before Plone 5.0b2 the settings were stored in portal_properties.\n-        """\n-        self.portal._updateProperty(\'email_from_name\', \'Properties\')\n-        self.portal._updateProperty(\'email_from_address\', \'prop@example.org\')\n-        self.mailhost.reset()\n-        portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n-        self.assertEqual(len(self.mailhost.messages), 1)\n-        msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Properties <prop@example.org>\')\n \n-    @unittest.skipUnless(\n-        HAS_PLONE5,\n-        \'Plone 5 uses the registry for mail settings\',\n-    )\n     def test_send_email_with_config_in_registry(self):\n         """Test mail-setting being stored in registry\n         """\n@@ -327,12 +302,12 @@ def test_send_email_with_config_in_registry(self):\n         )  # ASCII\n         portal.set_registry_record(\n             \'plone.email_from_name\',\n-            u\'Registry\',\n+            \'Registry\',\n         )  # TextLine\n         portal.send_email(\n             recipient=\'bob@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n@@ -358,7 +333,7 @@ def test_send_email_with_printingmailhost(self):\n                 recipient=\'bob@plone.org\',\n                 sender=\'noreply@plone.org\',\n                 subject=\'Trappist\',\n-                body=u\'One for you Bob!\',\n+                body=\'One for you Bob!\',\n             )\n \n         # PrintingMailHost enabled\n@@ -367,7 +342,7 @@ def test_send_email_with_printingmailhost(self):\n             recipient=\'bob@plone.org\',\n             sender=\'noreply@plone.org\',\n             subject=\'Trappist\',\n-            body=u\'One for you Bob!\',\n+            body=\'One for you Bob!\',\n         )\n \n         # Prevents sideeffects in other tests.\n@@ -504,16 +479,16 @@ def test_get_existing_registry_record(self):\n         """Test that existing registry records are returned correctly."""\n         registry = getUtility(IRegistry)\n         registry.records[\'plone.api.norris_power\'] = Record(\n-            field.TextLine(title=u"Chuck Norris\' Power"),\n+            field.TextLine(title="Chuck Norris\' Power"),\n         )\n         registry.records[\'plone.api.unset\'] = Record(\n-            field.TextLine(title=u\'An unset field\'),\n+            field.TextLine(title=\'An unset field\'),\n         )\n-        registry[\'plone.api.norris_power\'] = u\'infinite\'\n+        registry[\'plone.api.norris_power\'] = \'infinite\'\n \n         self.assertEqual(\n             portal.get_registry_record(\'plone.api.norris_power\'),\n-            u\'infinite\',\n+            \'infinite\',\n         )\n \n         self.assertEqual(\n@@ -668,10 +643,10 @@ def test_set_valid_registry_record(self):\n         """Test that setting a valid registry record succeeds."""\n         registry = getUtility(IRegistry)\n         registry.records[\'plone.api.plone_power\'] = Record(\n-            field.TextLine(title=u"Plone\'s Power"),\n+            field.TextLine(title="Plone\'s Power"),\n         )\n-        portal.set_registry_record(\'plone.api.plone_power\', u\'awesome\')\n-        self.assertEqual(registry[\'plone.api.plone_power\'], u\'awesome\')\n+        portal.set_registry_record(\'plone.api.plone_power\', \'awesome\')\n+        self.assertEqual(registry[\'plone.api.plone_power\'], \'awesome\')\n \n     def test_set_missing_param_registry_record(self):\n         """Test that when set_registry_record is called without\n@@ -689,7 +664,7 @@ def test_set_non_existing_record_value(self):\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n                 name=\'nonexistent.sharepoint.power\',\n-                value=u\'Zero\',\n+                value=\'Zero\',\n             )\n \n     def test_set_no_value_param_for_existing_record(self):\n@@ -699,7 +674,7 @@ def test_set_no_value_param_for_existing_record(self):\n         """\n         registry = getUtility(IRegistry)\n         registry.records[\'plone.api.plone_power\'] = Record(\n-            field.TextLine(title=u"Plone\'s Power"),\n+            field.TextLine(title="Plone\'s Power"),\n         )\n \n         from plone.api.exc import MissingParameterError\n@@ -714,7 +689,7 @@ def test_set_invalid_key_type_record(self):\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n                 name=[\'foo\', \'bar\'],\n-                value=u\'baz\',\n+                value=\'baz\',\n             )\n \n     def test_set_registry_record_from_interface(self):\n@@ -722,7 +697,7 @@ def test_set_registry_record_from_interface(self):\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n-        text = u\'random text\'\n+        text = \'random text\'\n         portal.set_registry_record(\n             \'field_one\',\n             text,\n@@ -855,7 +830,7 @@ def test_translate(self):\n                 \'object.\',\n                 lang=\'es\',\n             ),\n-            u\'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n+            \'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n             \'flujo de trabajo en un objeto.\',\n         )\n         self.assertEqual(\n@@ -864,5 +839,5 @@ def test_translate(self):\n                 domain=\'plonelocales\',\n                 lang=\'fr\',\n             ),\n-            u\'Avril\',\n+            \'Avril\',\n         )\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 7c44530..6731323 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.user."""\n \n from AccessControl.Permission import getPermissions\n@@ -8,14 +7,14 @@\n from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.registry.interfaces import IRegistry\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import mock\n-import six\n+from unittest import mock\n import unittest\n \n \n@@ -137,11 +136,7 @@ def test_create_default_roles(self):\n             email=\'chuck@norris.org\',\n             password=\'secret\',\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(user=user),\n             [\'Member\', \'Authenticated\'],\n         )\n@@ -154,12 +149,7 @@ def test_create_specified_roles(self):\n             password=\'secret\',\n             roles=[\'Reviewer\', \'Editor\'],\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(user=user),\n             [\'Reviewer\', \'Authenticated\', \'Editor\'],\n         )\n@@ -172,11 +162,7 @@ def test_create_no_roles(self):\n             password=\'secret\',\n             roles=[],\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(user=user),\n             [\'Authenticated\'],\n         )\n@@ -213,11 +199,7 @@ def test_get_all_users(self):\n             password=\'secret\',\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             users,\n             [\'chuck\', TEST_USER_NAME],\n         )\n@@ -312,11 +294,7 @@ def test_get_roles_username(self):\n             password=\'secret\',\n             roles=ROLES,\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES + [\'Authenticated\'],\n             api.user.get_roles(username=\'chuck\'),\n         )\n@@ -330,11 +308,7 @@ def test_get_roles_user(self):\n             password=\'secret\',\n             roles=ROLES,\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES + [\'Authenticated\'],\n             api.user.get_roles(user=user),\n         )\n@@ -358,22 +332,14 @@ def test_get_roles_username_and_user(self):\n \n     def test_get_roles_no_parameters(self):\n         """Test get roles without any parameters."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Manager\', \'Authenticated\'],\n             api.user.get_roles(),\n         )\n \n     def test_get_permissions_no_parameters(self):\n         """Test get_permissions passing no parameters."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [p[0] for p in getPermissions()],\n             api.user.get_permissions().keys(),\n         )\n@@ -464,10 +430,6 @@ def test_get_roles_local_includes_group_roles(self):\n         )\n         api.group.create(\'foo\', roles=[\'Reviewer\'])\n         api.group.add_user(groupname=\'foo\', username=\'chuck\')\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n \n         portal = api.portal.get()\n         folder = api.content.create(\n@@ -482,7 +444,7 @@ def test_get_roles_local_includes_group_roles(self):\n             id=\'document_one\',\n             title=\'Document One\',\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\'Member\', \'Reviewer\', \'Authenticated\'],\n         )\n@@ -491,15 +453,15 @@ def test_get_roles_local_includes_group_roles(self):\n             roles=[\'Editor\'],\n             obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\'Member\', \'Reviewer\', \'Authenticated\', \'Editor\'],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Editor\'],\n         )\n@@ -508,7 +470,7 @@ def test_get_roles_local_includes_group_roles(self):\n             roles=[\'Contributor\'],\n             obj=document,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Contributor\'],\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n         )\n@@ -676,15 +638,11 @@ def test_grant_roles(self):\n             \'Authenticated\',\n             \'Member\',\n         ]\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\'),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user),\n         )\n@@ -758,24 +716,20 @@ def test_revoke_roles(self):\n \n         api.user.revoke_roles(username=\'chuck\', roles=(\'Editor\',))\n         ROLES = [\'Authenticated\', \'Member\']\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\'),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, inherit=False),\n         )\n@@ -885,11 +839,7 @@ def test_grant_roles_in_context(self):\n             \'Editor\',\n             api.user.get_roles(username=\'chuck\', obj=folder),\n         )\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [\'Editor\'],\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n         )\n@@ -929,19 +879,19 @@ def test_grant_roles_in_context(self):\n         )\n \n         ROLES = [\'Editor\', \'Contributor\', \'Authenticated\', \'Member\']\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=document),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=document),\n         )\n@@ -949,10 +899,6 @@ def test_grant_roles_in_context(self):\n     def test_grant_roles_disregards_adapter(self):\n         """Test that borg.localrole-adpaters are not copied when granting\n         local roles."""\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n \n         portal = api.portal.get()\n         folder = api.content.create(\n@@ -973,7 +919,7 @@ def test_grant_roles_disregards_adapter(self):\n             password=\'secret\',\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\'Member\', \'Authenticated\'],\n         )\n@@ -984,7 +930,7 @@ def test_grant_roles_disregards_adapter(self):\n         # throw in a adapter granting the reviewer-roles\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n-        class LocalRoleProvider(object):\n+        class LocalRoleProvider:\n \n             def __init__(self, context):\n                 self.context = context\n@@ -995,12 +941,12 @@ def getRoles(self, principal_id):\n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\'Member\', \'Authenticated\', \'Reviewer\'],\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Reviewer\'],\n         )\n@@ -1011,13 +957,13 @@ def getRoles(self, principal_id):\n             roles=[\'Contributor\'],\n             obj=folder,\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n         )\n \n         # The adapter role is in in the local roles but not persistent\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n@@ -1027,11 +973,11 @@ def getRoles(self, principal_id):\n             [\'Contributor\'],\n         )\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [\'Reviewer\'],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n         )\n@@ -1045,16 +991,16 @@ def getRoles(self, principal_id):\n         )\n         api.group.add_user(groupname=\'foo\', username=\'chuck\')\n \n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n         api.group.grant_roles(groupname=\'foo\', roles=[\'Manager\'], obj=folder)\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n             [\'Contributor\', \'Reviewer\'],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=document),\n             [\n                 \'Contributor\',\n@@ -1064,7 +1010,7 @@ def getRoles(self, principal_id):\n                 \'Member\',\n             ],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder),\n             [\n                 \'Contributor\',\n@@ -1074,7 +1020,7 @@ def getRoles(self, principal_id):\n                 \'Member\',\n             ],\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n             [\'Contributor\', \'Reviewer\', \'Manager\'],\n         )\n@@ -1151,39 +1097,35 @@ def test_revoke_roles_in_context(self):\n         self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n \n         ROLES = [\'Authenticated\', \'Member\']\n-        if six.PY2:\n-            assertCountEqual = self.assertItemsEqual\n-        else:\n-            assertCountEqual = self.assertCountEqual\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=folder),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(username=\'chuck\', obj=document),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             ROLES,\n             api.user.get_roles(user=user, obj=document),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(user=user, obj=folder, inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n         )\n-        assertCountEqual(\n+        self.assertCountEqual(\n             [],\n             api.user.get_roles(user=user, obj=document, inherit=False),\n         )\ndiff --git a/src/plone/api/tests/test_validation.py b/src/plone/api/tests/test_validation.py\nindex f3e19bb..48c951b 100644\n--- a/src/plone/api/tests/test_validation.py\n+++ b/src/plone/api/tests/test_validation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for plone.api.validation."""\n \n from plone.api.tests.base import INTEGRATION_TESTING\n@@ -64,7 +63,7 @@ def test_get_supplied_args(self):\n         result = _gsa(signature, (\'foo\', \'wibble\'), {})\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\', \'arg2\')),\n+            {\'arg1\', \'arg2\'},\n         )\n \n         # test that keyword args are recognised correctly\n@@ -78,7 +77,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\', \'arg2\')),\n+            {\'arg1\', \'arg2\'},\n         )\n \n         # test that a mixture of args are recognised correctly\n@@ -89,7 +88,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\', \'arg2\')),\n+            {\'arg1\', \'arg2\'},\n         )\n \n         # test that None-valued positional args are ignored\n@@ -100,7 +99,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg1\',)),\n+            {\'arg1\'},\n         )\n \n         # test that None-valued keyword args are ignored\n@@ -114,7 +113,7 @@ def test_get_supplied_args(self):\n         )\n         self.assertEqual(\n             set(result),\n-            set((\'arg2\',)),\n+            {\'arg2\'},\n         )\n \n     def test_single_keyword_arg_provided(self):\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 0deb7ab..375d865 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Module that provides functionality for user manipulation."""\n \n from AccessControl.Permission import getPermissions\n@@ -59,15 +58,7 @@ def create(\n     if not email:\n         raise MissingParameterError("You need to pass the new user\'s email.")\n \n-    try:\n-        use_email_as_username = portal.get_registry_record(\n-            \'plone.use_email_as_login\',\n-        )\n-    except InvalidParameterError:\n-        site = portal.get()\n-        props = site.portal_properties\n-        use_email_as_username = props.site_properties.use_email_as_login\n-\n+    use_email_as_username = portal.get_registry_record(\'plone.use_email_as_login\')\n     if not use_email_as_username and not username:\n         raise InvalidParameterError(\n             \'The portal is configured to use username \'\n@@ -426,11 +417,11 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n         # if obj, get only a list of local roles, without inherited ones\n         inherit = False\n \n-    actual_roles = set([\n+    actual_roles = {\n         role\n         for role in get_roles(user=user, obj=obj, inherit=inherit)\n         if role not in [\'Anonymous\', \'Authenticated\']\n-    ])\n+    }\n \n     roles = list(actual_roles - roles)\n \ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex 2d5e164..c7b2e31 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Decorators for validating parameters"""\n \n from decorator import decorator\n@@ -12,12 +11,7 @@ def _get_arg_spec(func, validator_args):\n     """Get the arguments specified in the function spec\n     and check that the decorator doesn\'t refer to non-existant args.\n     """\n-    try:\n-        signature_args = inspect.getfullargspec(func).args\n-    except AttributeError:\n-        # Python 2.7 compatibility\n-        signature_args = inspect.getargspec(func).args\n-\n+    signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\n     if extra_args:\n         raise ValueError(\ndiff --git a/tox.ini b/tox.ini\nindex 777f7cc..5d0b011 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,7 +1,5 @@\n [tox]\n envlist =\n-    py27-plone-5.2,\n-    py27-plone-5.2-archetypes,\n     py{36,37,38}-plone-{5.2},\n     docs,\n #    black-check,\n@@ -15,7 +13,6 @@ skip_missing_interpreters = False\n skip_install = True\n \n basepython:\n-    py27: python2.7\n     py36: python3.6\n     py37: python3.7\n     py38: python3.8\n@@ -34,7 +31,6 @@ commands =\n \n setenv =\n     COVERAGE_FILE=.coverage.{envname}\n-    plone-5.2-archetypes: BUILDOUT_FILE="plone-5.2.x-archetypes.cfg"\n     plone-5.2: BUILDOUT_FILE="plone-5.2.x.cfg"\n \n deps =\n'

