Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T15:04:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/0726e494604d9d1e3aa5347def1af1ba9e46c9ec

move caching ruleset to definitions of endpoints

Files changed:
M src/plone/restapi/configure.zcml
M src/plone/restapi/services/actions/configure.zcml
M src/plone/restapi/services/breadcrumbs/configure.zcml
M src/plone/restapi/services/content/configure.zcml
M src/plone/restapi/services/discussion/configure.zcml
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/navigation/configure.zcml
M src/plone/restapi/services/querystring/configure.zcml
M src/plone/restapi/services/search/configure.zcml

b'diff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 5fcfb0e47..c1e6b77cf 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -22,6 +22,11 @@\n   <include package="plone.behavior" />\n   <include package="plone.rest" />\n   <include package="plone.schema" />\n+\n+  <configure zcml:condition="installed plone.app.caching">\n+      <include package="plone.app.caching" />\n+  </configure>\n+\n   <include file="indexers.zcml" />\n \n   <five:registerPackage\ndiff --git a/src/plone/restapi/services/actions/configure.zcml b/src/plone/restapi/services/actions/configure.zcml\nindex b716a1a99..085ff70de 100644\n--- a/src/plone/restapi/services/actions/configure.zcml\n+++ b/src/plone/restapi/services/actions/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@actions"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".get.ActionsGet"\n+      ruleset="plone.content.dynamic"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/breadcrumbs/configure.zcml b/src/plone/restapi/services/breadcrumbs/configure.zcml\nindex 6dde6de78..a40374c12 100644\n--- a/src/plone/restapi/services/breadcrumbs/configure.zcml\n+++ b/src/plone/restapi/services/breadcrumbs/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@breadcrumbs"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".get.BreadcrumbsGet "\n+      ruleset="plone.content.dynamic"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/content/configure.zcml b/src/plone/restapi/services/content/configure.zcml\nindex c18e6a0fb..ce4e524bd 100644\n--- a/src/plone/restapi/services/content/configure.zcml\n+++ b/src/plone/restapi/services/content/configure.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -17,6 +18,11 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       permission="zope2.View"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".get.ContentGet"\n+      ruleset="plone.content.dynamic"\n+      />\n \n   <plone:service\n       method="PATCH"\ndiff --git a/src/plone/restapi/services/discussion/configure.zcml b/src/plone/restapi/services/discussion/configure.zcml\nindex 9b2b446a6..433dd1d1d 100644\n--- a/src/plone/restapi/services/discussion/configure.zcml\n+++ b/src/plone/restapi/services/discussion/configure.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -16,6 +17,11 @@\n       permission="zope2.View"\n       name="@comments"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".conversation.CommentsGet"\n+      ruleset="plone.content.itemView"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex b304117f6..a3f0ea768 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -21,6 +22,11 @@\n       permission="zope2.View"\n       name="@translations"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".pam.TranslationInfo"\n+      ruleset="plone.content.dynamic"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/navigation/configure.zcml b/src/plone/restapi/services/navigation/configure.zcml\nindex f1de8f2d6..e2902c161 100644\n--- a/src/plone/restapi/services/navigation/configure.zcml\n+++ b/src/plone/restapi/services/navigation/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@navigation"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".get.NavigationGet"\n+      ruleset="plone.content.dynamic"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/querystring/configure.zcml b/src/plone/restapi/services/querystring/configure.zcml\nindex 7088090b0..ea4250400 100644\n--- a/src/plone/restapi/services/querystring/configure.zcml\n+++ b/src/plone/restapi/services/querystring/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@querystring"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".get.QuerystringGet"\n+      ruleset="plone.content.dynamic"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/search/configure.zcml b/src/plone/restapi/services/search/configure.zcml\nindex e436c00a2..f18af2f72 100644\n--- a/src/plone/restapi/services/search/configure.zcml\n+++ b/src/plone/restapi/services/search/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@search"\n       />\n+  <cache:ruleset\n+      zcml:condition="have plone-app-caching-3"\n+      for=".get.SearchGet"\n+      ruleset="plone.content.dynamic"\n+      />\n \n </configure>\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T15:04:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/596464ab55a5dfd6fbb6c55f66de02e0468a8bd6

zpretty

Files changed:
M src/plone/restapi/configure.zcml
M src/plone/restapi/services/actions/configure.zcml
M src/plone/restapi/services/breadcrumbs/configure.zcml
M src/plone/restapi/services/content/configure.zcml
M src/plone/restapi/services/discussion/configure.zcml
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/navigation/configure.zcml
M src/plone/restapi/services/querystring/configure.zcml
M src/plone/restapi/services/search/configure.zcml

b'diff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex c1e6b77cf..6312649a8 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -24,7 +24,7 @@\n   <include package="plone.schema" />\n \n   <configure zcml:condition="installed plone.app.caching">\n-      <include package="plone.app.caching" />\n+    <include package="plone.app.caching" />\n   </configure>\n \n   <include file="indexers.zcml" />\ndiff --git a/src/plone/restapi/services/actions/configure.zcml b/src/plone/restapi/services/actions/configure.zcml\nindex 085ff70de..042e1e316 100644\n--- a/src/plone/restapi/services/actions/configure.zcml\n+++ b/src/plone/restapi/services/actions/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -18,9 +18,9 @@\n       name="@actions"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".get.ActionsGet"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n </configure>\ndiff --git a/src/plone/restapi/services/breadcrumbs/configure.zcml b/src/plone/restapi/services/breadcrumbs/configure.zcml\nindex a40374c12..d8a169b03 100644\n--- a/src/plone/restapi/services/breadcrumbs/configure.zcml\n+++ b/src/plone/restapi/services/breadcrumbs/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -18,9 +18,9 @@\n       name="@breadcrumbs"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n-      for=".get.BreadcrumbsGet "\n+      for=".get.BreadcrumbsGet"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n </configure>\ndiff --git a/src/plone/restapi/services/content/configure.zcml b/src/plone/restapi/services/content/configure.zcml\nindex ce4e524bd..72073faaf 100644\n--- a/src/plone/restapi/services/content/configure.zcml\n+++ b/src/plone/restapi/services/content/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -19,9 +19,9 @@\n       permission="zope2.View"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".get.ContentGet"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n   <plone:service\ndiff --git a/src/plone/restapi/services/discussion/configure.zcml b/src/plone/restapi/services/discussion/configure.zcml\nindex 433dd1d1d..af608d91e 100644\n--- a/src/plone/restapi/services/discussion/configure.zcml\n+++ b/src/plone/restapi/services/discussion/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -18,9 +18,9 @@\n       name="@comments"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".conversation.CommentsGet"\n       ruleset="plone.content.itemView"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n   <plone:service\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex a3f0ea768..58d65c74d 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -23,9 +23,9 @@\n       name="@translations"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".pam.TranslationInfo"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n   <plone:service\ndiff --git a/src/plone/restapi/services/navigation/configure.zcml b/src/plone/restapi/services/navigation/configure.zcml\nindex e2902c161..4d38b80bf 100644\n--- a/src/plone/restapi/services/navigation/configure.zcml\n+++ b/src/plone/restapi/services/navigation/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -18,9 +18,9 @@\n       name="@navigation"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".get.NavigationGet"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n </configure>\ndiff --git a/src/plone/restapi/services/querystring/configure.zcml b/src/plone/restapi/services/querystring/configure.zcml\nindex ea4250400..0cc223e65 100644\n--- a/src/plone/restapi/services/querystring/configure.zcml\n+++ b/src/plone/restapi/services/querystring/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -13,9 +13,9 @@\n       name="@querystring"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".get.QuerystringGet"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n </configure>\ndiff --git a/src/plone/restapi/services/search/configure.zcml b/src/plone/restapi/services/search/configure.zcml\nindex f18af2f72..a48c7fc36 100644\n--- a/src/plone/restapi/services/search/configure.zcml\n+++ b/src/plone/restapi/services/search/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n@@ -13,9 +13,9 @@\n       name="@search"\n       />\n   <cache:ruleset\n-      zcml:condition="have plone-app-caching-3"\n       for=".get.SearchGet"\n       ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n       />\n \n </configure>\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T15:04:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/9e058d0d45fe111cc24096077df6f3b7443a6cd0

add newsfile

Files changed:
A news/1414.feature

b'diff --git a/news/1414.feature b/news/1414.feature\nnew file mode 100644\nindex 000000000..e3c8ee64a\n--- /dev/null\n+++ b/news/1414.feature\n@@ -0,0 +1,2 @@\n+Move caching rulesets to the ZCML where the endpoints are defined.\n+[jensens]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T15:04:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/77d0a4074048afaaa7e0be997e9474a48dcb53ae

move tests from caching

Files changed:
A src/plone/restapi/tests/test_caching.py
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/testing.py

b'diff --git a/setup.py b/setup.py\nindex 34fdb2d61..742c7d35f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,11 @@\n \n version = "8.22.1.dev0"\n \n-assert sys.version_info >= (3, 6, 0), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n+assert sys.version_info >= (\n+    3,\n+    6,\n+    0,\n+), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n \n \n def read(filename):\n@@ -34,6 +38,7 @@ def read(filename):\n \n TEST_REQUIRES = [\n     "collective.MockMailHost",\n+    "plone.app.caching",\n     "plone.app.contenttypes",\n     "plone.app.robotframework",\n     "plone.app.testing [robot] >= 4.2.2",  # ROBOT_TEST_LEVEL added\n@@ -82,9 +87,9 @@ def read(filename):\n         "setuptools",\n         "importlib-metadata; python_version<\'3.8\'",\n         "python-dateutil",\n-        "plone.behavior>=1.1",  # adds name to behavior directive\n-        "plone.rest >= 1.0a6",  # json renderer moved to plone.restapi\n-        "plone.schema >= 1.2.1",  # new/fixed json field\n+        "plone.rest",  # json renderer moved to plone.restapi\n+        "plone.schema>=1.2.1",  # new/fixed json field\n+        "Products.CMFPlone>=5.2",\n         "PyJWT>=1.7.0",\n         "pytz",\n     ],\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 6312649a8..a18da9013 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -23,9 +23,10 @@\n   <include package="plone.rest" />\n   <include package="plone.schema" />\n \n-  <configure zcml:condition="installed plone.app.caching">\n-    <include package="plone.app.caching" />\n-  </configure>\n+  <include\n+      package="plone.app.caching"\n+      zcml:condition="installed plone.app.caching"\n+      />\n \n   <include file="indexers.zcml" />\n \ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 303eed97c..2ed577fb3 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -18,7 +18,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.tests.dxtypes import INDEXES as DX_TYPES_INDEXES\n from plone.restapi.tests.helpers import add_catalog_indexes\n-from plone.testing import z2\n+from plone.testing import zope\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n@@ -37,6 +37,11 @@\n import time\n \n \n+try:\n+    from plone.app.caching.testing import PloneAppCachingBase\n+except ImportError:\n+    PloneAppCachingBase = None\n+\n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n@@ -118,7 +123,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -142,10 +147,11 @@ def setUpPloneSite(self, portal):\n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n+    name="PloneRestApiDXLayer:Integration",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional",\n )\n \n@@ -175,7 +181,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -201,10 +207,34 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n \n+if PloneAppCachingBase is not None:\n+\n+    class PloneRestApiCachingLayer(PloneAppCachingBase):\n+\n+        defaultBases = [\n+            PLONE_RESTAPI_DX_PAM_FIXTURE,\n+        ]\n+\n+    PLONE_RESTAPI_CACHING_FIXTURE = PloneRestApiCachingLayer()\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_CACHING_FIXTURE,),\n+        name="PloneRestApICachingLayer:Integration",\n+    )\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(\n+            PLONE_RESTAPI_CACHING_FIXTURE,\n+            zope.WSGI_SERVER_FIXTURE,\n+        ),\n+        name="PloneRestApICachingLayer:Functional",\n+    )\n+else:\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = None\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = None\n+\n \n class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n \n@@ -216,7 +246,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n \n PLONE_RESTAPI_ITERATE_FIXTURE = PloneRestApiDXIterateLayer()\n@@ -225,7 +255,7 @@ def setUpZope(self, app, configurationContext):\n     name="PloneRestApiDXIterateLayer:Integration",\n )\n PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXIterateLayer:Functional",\n )\n \n@@ -243,7 +273,7 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_BLOCKS_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApIBlocksLayer:Functional",\n )\n \ndiff --git a/src/plone/restapi/tests/test_caching.py b/src/plone/restapi/tests/test_caching.py\nnew file mode 100644\nindex 000000000..80239b34c\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_caching.py\n@@ -0,0 +1,235 @@\n+from ..testing import PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+from ..testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+from ..testing import RelativeSession\n+from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.caching.interfaces import ICacheSettings\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.globalrequest import setRequest\n+\n+import transaction\n+import unittest\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+)\n+class TestProfileWithCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `with-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+    else:\n+        layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+)\n+class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `without-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+    else:\n+        layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T15:26:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/d44f0e7ccc0021dcfc4f00a51685732ca5c77c19

remove else and add comments

Files changed:
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_caching.py

b'diff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 2ed577fb3..3840b292a 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -40,6 +40,7 @@\n try:\n     from plone.app.caching.testing import PloneAppCachingBase\n except ImportError:\n+    # we get an import error in Plone 5.2 and in 6.0a4 an earlier\n     PloneAppCachingBase = None\n \n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n@@ -212,7 +213,7 @@ def setUpPloneSite(self, portal):\n )\n \n if PloneAppCachingBase is not None:\n-\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n     class PloneRestApiCachingLayer(PloneAppCachingBase):\n \n         defaultBases = [\ndiff --git a/src/plone/restapi/tests/test_caching.py b/src/plone/restapi/tests/test_caching.py\nindex 80239b34c..060ae3566 100644\n--- a/src/plone/restapi/tests/test_caching.py\n+++ b/src/plone/restapi/tests/test_caching.py\n@@ -1,5 +1,4 @@\n from ..testing import PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n-from ..testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from ..testing import RelativeSession\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n@@ -16,6 +15,7 @@\n @unittest.skipIf(\n     PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n     "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n )\n class TestProfileWithCachingRestAPI(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n@@ -24,8 +24,6 @@ class TestProfileWithCachingRestAPI(unittest.TestCase):\n \n     if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n         layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n-    else:\n-        layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.app = self.layer["app"]\n@@ -127,6 +125,7 @@ def test_restapi_search(self):\n @unittest.skipIf(\n     PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n     "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n )\n class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n@@ -135,8 +134,6 @@ class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n \n     if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n         layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n-    else:\n-        layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.app = self.layer["app"]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-10T15:01:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/3f34d47713555204fa987b5192d074ad86b07ef3

Merge pull request #1414 from plone/move-caching-rules

move caching ruleset to definitions of endpoints

Files changed:
A news/1414.feature
A src/plone/restapi/tests/test_caching.py
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/services/actions/configure.zcml
M src/plone/restapi/services/breadcrumbs/configure.zcml
M src/plone/restapi/services/content/configure.zcml
M src/plone/restapi/services/discussion/configure.zcml
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/navigation/configure.zcml
M src/plone/restapi/services/querystring/configure.zcml
M src/plone/restapi/services/search/configure.zcml
M src/plone/restapi/testing.py

b'diff --git a/news/1414.feature b/news/1414.feature\nnew file mode 100644\nindex 000000000..e3c8ee64a\n--- /dev/null\n+++ b/news/1414.feature\n@@ -0,0 +1,2 @@\n+Move caching rulesets to the ZCML where the endpoints are defined.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 34fdb2d61..742c7d35f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,11 @@\n \n version = "8.22.1.dev0"\n \n-assert sys.version_info >= (3, 6, 0), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n+assert sys.version_info >= (\n+    3,\n+    6,\n+    0,\n+), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n \n \n def read(filename):\n@@ -34,6 +38,7 @@ def read(filename):\n \n TEST_REQUIRES = [\n     "collective.MockMailHost",\n+    "plone.app.caching",\n     "plone.app.contenttypes",\n     "plone.app.robotframework",\n     "plone.app.testing [robot] >= 4.2.2",  # ROBOT_TEST_LEVEL added\n@@ -82,9 +87,9 @@ def read(filename):\n         "setuptools",\n         "importlib-metadata; python_version<\'3.8\'",\n         "python-dateutil",\n-        "plone.behavior>=1.1",  # adds name to behavior directive\n-        "plone.rest >= 1.0a6",  # json renderer moved to plone.restapi\n-        "plone.schema >= 1.2.1",  # new/fixed json field\n+        "plone.rest",  # json renderer moved to plone.restapi\n+        "plone.schema>=1.2.1",  # new/fixed json field\n+        "Products.CMFPlone>=5.2",\n         "PyJWT>=1.7.0",\n         "pytz",\n     ],\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 5fcfb0e47..a18da9013 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -22,6 +22,12 @@\n   <include package="plone.behavior" />\n   <include package="plone.rest" />\n   <include package="plone.schema" />\n+\n+  <include\n+      package="plone.app.caching"\n+      zcml:condition="installed plone.app.caching"\n+      />\n+\n   <include file="indexers.zcml" />\n \n   <five:registerPackage\ndiff --git a/src/plone/restapi/services/actions/configure.zcml b/src/plone/restapi/services/actions/configure.zcml\nindex b716a1a99..042e1e316 100644\n--- a/src/plone/restapi/services/actions/configure.zcml\n+++ b/src/plone/restapi/services/actions/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@actions"\n       />\n+  <cache:ruleset\n+      for=".get.ActionsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/breadcrumbs/configure.zcml b/src/plone/restapi/services/breadcrumbs/configure.zcml\nindex 6dde6de78..d8a169b03 100644\n--- a/src/plone/restapi/services/breadcrumbs/configure.zcml\n+++ b/src/plone/restapi/services/breadcrumbs/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@breadcrumbs"\n       />\n+  <cache:ruleset\n+      for=".get.BreadcrumbsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/content/configure.zcml b/src/plone/restapi/services/content/configure.zcml\nindex c18e6a0fb..72073faaf 100644\n--- a/src/plone/restapi/services/content/configure.zcml\n+++ b/src/plone/restapi/services/content/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -17,6 +18,11 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       permission="zope2.View"\n       />\n+  <cache:ruleset\n+      for=".get.ContentGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="PATCH"\ndiff --git a/src/plone/restapi/services/discussion/configure.zcml b/src/plone/restapi/services/discussion/configure.zcml\nindex 9b2b446a6..af608d91e 100644\n--- a/src/plone/restapi/services/discussion/configure.zcml\n+++ b/src/plone/restapi/services/discussion/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -16,6 +17,11 @@\n       permission="zope2.View"\n       name="@comments"\n       />\n+  <cache:ruleset\n+      for=".conversation.CommentsGet"\n+      ruleset="plone.content.itemView"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex b304117f6..58d65c74d 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -21,6 +22,11 @@\n       permission="zope2.View"\n       name="@translations"\n       />\n+  <cache:ruleset\n+      for=".pam.TranslationInfo"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/navigation/configure.zcml b/src/plone/restapi/services/navigation/configure.zcml\nindex f1de8f2d6..4d38b80bf 100644\n--- a/src/plone/restapi/services/navigation/configure.zcml\n+++ b/src/plone/restapi/services/navigation/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@navigation"\n       />\n+  <cache:ruleset\n+      for=".get.NavigationGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/querystring/configure.zcml b/src/plone/restapi/services/querystring/configure.zcml\nindex 7088090b0..0cc223e65 100644\n--- a/src/plone/restapi/services/querystring/configure.zcml\n+++ b/src/plone/restapi/services/querystring/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@querystring"\n       />\n+  <cache:ruleset\n+      for=".get.QuerystringGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/search/configure.zcml b/src/plone/restapi/services/search/configure.zcml\nindex e436c00a2..a48c7fc36 100644\n--- a/src/plone/restapi/services/search/configure.zcml\n+++ b/src/plone/restapi/services/search/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@search"\n       />\n+  <cache:ruleset\n+      for=".get.SearchGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 303eed97c..3840b292a 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -18,7 +18,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.tests.dxtypes import INDEXES as DX_TYPES_INDEXES\n from plone.restapi.tests.helpers import add_catalog_indexes\n-from plone.testing import z2\n+from plone.testing import zope\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n@@ -37,6 +37,12 @@\n import time\n \n \n+try:\n+    from plone.app.caching.testing import PloneAppCachingBase\n+except ImportError:\n+    # we get an import error in Plone 5.2 and in 6.0a4 an earlier\n+    PloneAppCachingBase = None\n+\n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n@@ -118,7 +124,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -142,10 +148,11 @@ def setUpPloneSite(self, portal):\n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n+    name="PloneRestApiDXLayer:Integration",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional",\n )\n \n@@ -175,7 +182,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -201,10 +208,34 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n \n+if PloneAppCachingBase is not None:\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+    class PloneRestApiCachingLayer(PloneAppCachingBase):\n+\n+        defaultBases = [\n+            PLONE_RESTAPI_DX_PAM_FIXTURE,\n+        ]\n+\n+    PLONE_RESTAPI_CACHING_FIXTURE = PloneRestApiCachingLayer()\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_CACHING_FIXTURE,),\n+        name="PloneRestApICachingLayer:Integration",\n+    )\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(\n+            PLONE_RESTAPI_CACHING_FIXTURE,\n+            zope.WSGI_SERVER_FIXTURE,\n+        ),\n+        name="PloneRestApICachingLayer:Functional",\n+    )\n+else:\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = None\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = None\n+\n \n class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n \n@@ -216,7 +247,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n \n PLONE_RESTAPI_ITERATE_FIXTURE = PloneRestApiDXIterateLayer()\n@@ -225,7 +256,7 @@ def setUpZope(self, app, configurationContext):\n     name="PloneRestApiDXIterateLayer:Integration",\n )\n PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXIterateLayer:Functional",\n )\n \n@@ -243,7 +274,7 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_BLOCKS_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApIBlocksLayer:Functional",\n )\n \ndiff --git a/src/plone/restapi/tests/test_caching.py b/src/plone/restapi/tests/test_caching.py\nnew file mode 100644\nindex 000000000..060ae3566\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_caching.py\n@@ -0,0 +1,232 @@\n+from ..testing import PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+from ..testing import RelativeSession\n+from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.caching.interfaces import ICacheSettings\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.globalrequest import setRequest\n+\n+import transaction\n+import unittest\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `with-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `without-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n'

