Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:16:23+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/25384f41e10b6d026da68067d608a03add50a472

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5cc689e5.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..1b2346d\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..2beee90\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.indexer {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.indexer {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:23:29+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/843dce335b3e91973fb5e3f83caab6a7961498b8

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/indexer/__init__.py
M plone/indexer/decorator.py
M plone/indexer/delegate.py
M plone/indexer/interfaces.py
M plone/indexer/tests.py
M plone/indexer/wrapper.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/indexer/__init__.py b/plone/indexer/__init__.py\nindex 5fc65fb..7b67d92 100644\n--- a/plone/indexer/__init__.py\n+++ b/plone/indexer/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n from plone.indexer.decorator import indexer  # noqa\ndiff --git a/plone/indexer/decorator.py b/plone/indexer/decorator.py\nindex 994131e..27abded 100644\n--- a/plone/indexer/decorator.py\n+++ b/plone/indexer/decorator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """This module defines a decorator that\n """\n \n@@ -40,8 +39,8 @@ def __init__(self, *interfaces):\n             interfaces += (IZCatalog, )\n         elif len(interfaces) > 2:\n             raise ValueError(\n-                u\'The @indexer decorator takes at most two interfaces as \'\n-                u\'arguments.\',\n+                \'The @indexer decorator takes at most two interfaces as \'\n+                \'arguments.\',\n             )\n         adapter.__init__(self, *interfaces)\n \ndiff --git a/plone/indexer/delegate.py b/plone/indexer/delegate.py\nindex 1bd6d6e..85ec3c8 100644\n--- a/plone/indexer/delegate.py\n+++ b/plone/indexer/delegate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from functools import update_wrapper\n from plone.indexer.interfaces import IIndexer\n from zope.interface import implementer\n@@ -7,7 +6,7 @@\n \n \n @implementer(IIndexer)\n-class DelegatingIndexer(object):\n+class DelegatingIndexer:\n     """An indexer that delegates to a given callable\n     """\n \n@@ -20,7 +19,7 @@ def __call__(self):\n         return self.callable(self.context)\n \n \n-class DelegatingIndexerFactory(object):\n+class DelegatingIndexerFactory:\n     """An adapter factory for an IIndexer that works by calling a\n     DelegatingIndexer.\n     """\ndiff --git a/plone/indexer/interfaces.py b/plone/indexer/interfaces.py\nindex efdab8a..9668c51 100644\n--- a/plone/indexer/interfaces.py\n+++ b/plone/indexer/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/indexer/tests.py b/plone/indexer/tests.py\nindex 0988a07..4b237bf 100644\n--- a/plone/indexer/tests.py\n+++ b/plone/indexer/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.component import testing\n \n import doctest\n@@ -38,7 +37,7 @@ def test_suite():\n             tearDown=testing.tearDown,\n             checker=Py23DocChecker(),\n             ),\n-        unittest.makeSuite(TestWrapperUpdate),\n+        unittest.defaultTestLoader.loadTestsFromTestCase(TestWrapperUpdate),\n     ])\n \n \ndiff --git a/plone/indexer/wrapper.py b/plone/indexer/wrapper.py\nindex 376c175..310eeb8 100644\n--- a/plone/indexer/wrapper.py\n+++ b/plone/indexer/wrapper.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.indexer.interfaces import IIndexableObject\n from plone.indexer.interfaces import IIndexableObjectWrapper\n@@ -31,7 +30,7 @@ def __get__(self, inst, cls=None):\n \n @implementer(IIndexableObject, IIndexableObjectWrapper)\n @adapter(Interface, IZCatalog)\n-class IndexableObjectWrapper(object):\n+class IndexableObjectWrapper:\n     """A simple wrapper for indexable objects that will delegate to IIndexer\n     adapters as appropriate.\n     """\ndiff --git a/setup.py b/setup.py\nindex f8bd297..78f6542 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:26:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/e6eccbfd991ed1564dbda25b58157a994b9160ce

chore: black

Files changed:
M plone/__init__.py
M plone/indexer/decorator.py
M plone/indexer/delegate.py
M plone/indexer/interfaces.py
M plone/indexer/tests.py
M plone/indexer/wrapper.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/indexer/decorator.py b/plone/indexer/decorator.py\nindex 27abded..58c6708 100644\n--- a/plone/indexer/decorator.py\n+++ b/plone/indexer/decorator.py\n@@ -36,11 +36,10 @@ class indexer(adapter):\n \n     def __init__(self, *interfaces):\n         if len(interfaces) == 1:\n-            interfaces += (IZCatalog, )\n+            interfaces += (IZCatalog,)\n         elif len(interfaces) > 2:\n             raise ValueError(\n-                \'The @indexer decorator takes at most two interfaces as \'\n-                \'arguments.\',\n+                "The @indexer decorator takes at most two interfaces as arguments.",\n             )\n         adapter.__init__(self, *interfaces)\n \ndiff --git a/plone/indexer/delegate.py b/plone/indexer/delegate.py\nindex 85ec3c8..f947fc4 100644\n--- a/plone/indexer/delegate.py\n+++ b/plone/indexer/delegate.py\n@@ -7,8 +7,7 @@\n \n @implementer(IIndexer)\n class DelegatingIndexer:\n-    """An indexer that delegates to a given callable\n-    """\n+    """An indexer that delegates to a given callable"""\n \n     def __init__(self, context, catalog, callable):\n         self.context = context\ndiff --git a/plone/indexer/interfaces.py b/plone/indexer/interfaces.py\nindex 9668c51..8d19f45 100644\n--- a/plone/indexer/interfaces.py\n+++ b/plone/indexer/interfaces.py\n@@ -7,11 +7,15 @@\n try:\n     from Products.CMFCore.interfaces import IIndexableObjectWrapper\n except ImportError:\n+\n     class IIndexableObjectWrapper(Interface):\n         pass\n+\n+\n try:\n     from Products.CMFCore.interfaces import IIndexableObject\n except ImportError:\n+\n     class IIndexableObject(Interface):\n         """An object being indexed in the catalog. The indexable object\n         wrapper will be looked up as a multi-adapter of (object, catalog)\n@@ -34,8 +38,7 @@ class IIndexer(Interface):\n     """\n \n     def __call__(self):\n-        """Return the value to index.\n-        """\n+        """Return the value to index."""\n \n \n class IDelegatingIndexableObjectWrapper(IIndexableObjectWrapper):\ndiff --git a/plone/indexer/tests.py b/plone/indexer/tests.py\nindex 4b237bf..9ce69c5 100644\n--- a/plone/indexer/tests.py\n+++ b/plone/indexer/tests.py\n@@ -7,7 +7,6 @@\n \n \n class TestWrapperUpdate(unittest.TestCase):\n-\n     def test_wrapper_update(self):\n         from plone.indexer import indexer\n         from zope.interface import Interface\n@@ -16,9 +15,9 @@ def test_wrapper_update(self):\n         def my_func(obj):\n             """My custom docstring."""\n \n-        self.assertEqual(my_func.__doc__, \'My custom docstring.\')\n-        self.assertEqual(my_func.__module__, \'plone.indexer.tests\')\n-        self.assertEqual(my_func.__name__, \'my_func\')\n+        self.assertEqual(my_func.__doc__, "My custom docstring.")\n+        self.assertEqual(my_func.__module__, "plone.indexer.tests")\n+        self.assertEqual(my_func.__name__, "my_func")\n \n \n class Py23DocChecker(doctest.OutputChecker):\n@@ -29,17 +28,19 @@ def check_output(self, want, got, optionflags):\n \n \n def test_suite():\n-    return unittest.TestSuite([\n-        doctest.DocFileSuite(\n-            \'README.rst\',\n-            package=\'plone.indexer\',\n-            setUp=testing.setUp,\n-            tearDown=testing.tearDown,\n-            checker=Py23DocChecker(),\n+    return unittest.TestSuite(\n+        [\n+            doctest.DocFileSuite(\n+                "README.rst",\n+                package="plone.indexer",\n+                setUp=testing.setUp,\n+                tearDown=testing.tearDown,\n+                checker=Py23DocChecker(),\n             ),\n-        unittest.defaultTestLoader.loadTestsFromTestCase(TestWrapperUpdate),\n-    ])\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestWrapperUpdate),\n+        ]\n+    )\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(defaultTest=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/indexer/wrapper.py b/plone/indexer/wrapper.py\nindex 310eeb8..9bdd052 100644\n--- a/plone/indexer/wrapper.py\n+++ b/plone/indexer/wrapper.py\n@@ -34,6 +34,7 @@ class IndexableObjectWrapper:\n     """A simple wrapper for indexable objects that will delegate to IIndexer\n     adapters as appropriate.\n     """\n+\n     __providedBy__ = WrapperSpecification()\n \n     def __init__(self, object, catalog):\n@@ -41,7 +42,7 @@ def __init__(self, object, catalog):\n         self.__catalog = catalog\n         self.__vars = {}\n \n-        portal_workflow = getToolByName(catalog, \'portal_workflow\', None)\n+        portal_workflow = getToolByName(catalog, "portal_workflow", None)\n         if portal_workflow is not None:\n             self.__vars = portal_workflow.getCatalogVariablesFor(object)\n \n@@ -58,7 +59,8 @@ def __getattr__(self, name):\n         # First, try to look up an indexer adapter\n         indexer = queryMultiAdapter(\n             (self.__object, self.__catalog),\n-            IIndexer, name=name,\n+            IIndexer,\n+            name=name,\n         )\n         if indexer is not None:\n             return indexer()\n@@ -78,13 +80,8 @@ def __getattr__(self, name):\n             # it does not!\n             # PythonScripts are the only way to add indexers TTW.\n             # If there is a PythonScript acquired, thats fine:\n-            if (\n-                getattr(\n-                    value_or_callable,\n-                    \'meta_type\',\n-                    None,\n-                ) == \'Script (Python)\'\n-            ):\n+            meta_type = getattr(value_or_callable, "meta_type", None)\n+            if meta_type == "Script (Python)":\n                 return value_or_callable\n             raise\n         # here we know it is a direct attribute.\ndiff --git a/setup.py b/setup.py\nindex 78f6542..01c4ea6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,18 +4,19 @@\n import os\n \n \n-version = \'1.0.8.dev0\'\n-description = \'Hooks to facilitate managing custom index values in Zope 2/CMF applications\'  # noqa\n-long_description = (\'\\n\\n\'.join([\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read(),\n-    open(os.path.join("plone", "indexer", "README.rst")).read(),\n-\n-]))\n+version = "1.0.8.dev0"\n+description = "Hooks to facilitate managing custom index values in Zope 2/CMF applications"  # noqa\n+long_description = "\\n\\n".join(\n+    [\n+        open("README.rst").read(),\n+        open("CHANGES.rst").read(),\n+        open(os.path.join("plone", "indexer", "README.rst")).read(),\n+    ]\n+)\n \n \n setup(\n-    name=\'plone.indexer\',\n+    name="plone.indexer",\n     version=version,\n     description=description,\n     long_description=long_description,\n@@ -38,20 +39,20 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'plone cmf zope catalog index\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.indexer\',\n-    license=\'BSD\',\n+    keywords="plone cmf zope catalog index",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.indexer",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'Products.CMFCore\',\n-        \'Products.ZCatalog\',\n+        "setuptools",\n+        "zope.interface",\n+        "zope.component",\n+        "Products.CMFCore",\n+        "Products.ZCatalog",\n     ],\n )\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:27:45+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/676d9da4aef772490f3ff3dc544df4821aea55eb

feat: drop six

Files changed:
M plone/indexer/tests.py

b'diff --git a/plone/indexer/tests.py b/plone/indexer/tests.py\nindex 9ce69c5..e4afb88 100644\n--- a/plone/indexer/tests.py\n+++ b/plone/indexer/tests.py\n@@ -1,8 +1,6 @@\n from zope.component import testing\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -20,13 +18,6 @@ def my_func(obj):\n         self.assertEqual(my_func.__name__, "my_func")\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         [\n@@ -35,7 +26,6 @@ def test_suite():\n                 package="plone.indexer",\n                 setUp=testing.setUp,\n                 tearDown=testing.tearDown,\n-                checker=Py23DocChecker(),\n             ),\n             unittest.defaultTestLoader.loadTestsFromTestCase(TestWrapperUpdate),\n         ]\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:30:14+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/93fb165240bde006cab7f7ce85525b6c7f971f68

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 01c4ea6..655a54b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,20 +24,16 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="plone cmf zope catalog index",\n     author="Plone Foundation",\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:30:14+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/b60a85fe8b3d202e1e28bcc7cbf320c08e99324c

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 655a54b..94be045 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,6 +44,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "zope.interface",\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:30:15+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/7eaf4bf3e4934babfe6cb9ea17210f4086bd3e7d

feat: codespell

Files changed:
M plone/indexer/wrapper.py

b'diff --git a/plone/indexer/wrapper.py b/plone/indexer/wrapper.py\nindex 9bdd052..ab48929 100644\n--- a/plone/indexer/wrapper.py\n+++ b/plone/indexer/wrapper.py\n@@ -79,7 +79,7 @@ def __getattr__(self, name):\n         except AttributeError:\n             # it does not!\n             # PythonScripts are the only way to add indexers TTW.\n-            # If there is a PythonScript acquired, thats fine:\n+            # If there is a PythonScript acquired, that\'s fine:\n             meta_type = getattr(value_or_callable, "meta_type", None)\n             if meta_type == "Script (Python)":\n                 return value_or_callable\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T22:33:16+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/0b3735e107982545cee783d013c2dd1f9ad92218

feat: flake8

Files changed:
M plone/indexer/decorator.py

b'diff --git a/plone/indexer/decorator.py b/plone/indexer/decorator.py\nindex 58c6708..f2f059c 100644\n--- a/plone/indexer/decorator.py\n+++ b/plone/indexer/decorator.py\n@@ -9,7 +9,10 @@\n class indexer(adapter):\n     """The @indexer decorator can be used like this:\n \n+        >>> from zope.interface import Interface\n         >>> from plone.indexer.decorator import indexer\n+        >>> class IMyType(Interface): ...\n+        >>> class IMyCatalog(Interface): ...\n         >>> @indexer(IMyType)\n         ... def some_attribute(object):\n         ...     return \'some indexable value\'\n@@ -21,7 +24,7 @@ class indexer(adapter):\n \n         >>> from plone.indexer.decorator import indexer\n         >>> @indexer(IMyType, IMyCatalog)\n-        ... def some_attribute(object):\n+        ... def another_attribute(object):\n         ...     return \'some indexable value\'\n \n     The default is to register the indexer for all IZCatalog catalogs.\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T23:52:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/81bc582dd3bce9b4ac418be87ae98547ee819299

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 94be045..412b7b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -47,9 +47,6 @@\n     python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n-        "zope.interface",\n-        "zope.component",\n         "Products.CMFCore",\n-        "Products.ZCatalog",\n     ],\n )\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T23:54:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/1511d92c604646ca144ca2632938ad34b67ca2d4

chore: version bump

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 412b7b4..95e55fc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,7 +4,7 @@\n import os\n \n \n-version = "1.0.8.dev0"\n+version = "2.0.0.dev0"\n description = "Hooks to facilitate managing custom index values in Zope 2/CMF applications"  # noqa\n long_description = "\\n\\n".join(\n     [\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-15T23:54:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.indexer/commit/2461ce0ef833ef3f42b358668f60a774653c0924

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\n'

Repository: plone.indexer


Branch: refs/heads/master
Date: 2023-04-17T18:08:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.indexer/commit/77ef417a7c6f27a61181e03e802b569851279a76

Merge pull request #9 from plone/config-with-default-template-50a0ead2

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.breaking
A news/5cc689e5.internal
A tox.ini
M plone/__init__.py
M plone/indexer/__init__.py
M plone/indexer/decorator.py
M plone/indexer/delegate.py
M plone/indexer/interfaces.py
M plone/indexer/tests.py
M plone/indexer/wrapper.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..1b2346d\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/indexer/__init__.py b/plone/indexer/__init__.py\nindex 5fc65fb..7b67d92 100644\n--- a/plone/indexer/__init__.py\n+++ b/plone/indexer/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n from plone.indexer.decorator import indexer  # noqa\ndiff --git a/plone/indexer/decorator.py b/plone/indexer/decorator.py\nindex 994131e..f2f059c 100644\n--- a/plone/indexer/decorator.py\n+++ b/plone/indexer/decorator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """This module defines a decorator that\n """\n \n@@ -10,7 +9,10 @@\n class indexer(adapter):\n     """The @indexer decorator can be used like this:\n \n+        >>> from zope.interface import Interface\n         >>> from plone.indexer.decorator import indexer\n+        >>> class IMyType(Interface): ...\n+        >>> class IMyCatalog(Interface): ...\n         >>> @indexer(IMyType)\n         ... def some_attribute(object):\n         ...     return \'some indexable value\'\n@@ -22,7 +24,7 @@ class indexer(adapter):\n \n         >>> from plone.indexer.decorator import indexer\n         >>> @indexer(IMyType, IMyCatalog)\n-        ... def some_attribute(object):\n+        ... def another_attribute(object):\n         ...     return \'some indexable value\'\n \n     The default is to register the indexer for all IZCatalog catalogs.\n@@ -37,11 +39,10 @@ class indexer(adapter):\n \n     def __init__(self, *interfaces):\n         if len(interfaces) == 1:\n-            interfaces += (IZCatalog, )\n+            interfaces += (IZCatalog,)\n         elif len(interfaces) > 2:\n             raise ValueError(\n-                u\'The @indexer decorator takes at most two interfaces as \'\n-                u\'arguments.\',\n+                "The @indexer decorator takes at most two interfaces as arguments.",\n             )\n         adapter.__init__(self, *interfaces)\n \ndiff --git a/plone/indexer/delegate.py b/plone/indexer/delegate.py\nindex 1bd6d6e..f947fc4 100644\n--- a/plone/indexer/delegate.py\n+++ b/plone/indexer/delegate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from functools import update_wrapper\n from plone.indexer.interfaces import IIndexer\n from zope.interface import implementer\n@@ -7,9 +6,8 @@\n \n \n @implementer(IIndexer)\n-class DelegatingIndexer(object):\n-    """An indexer that delegates to a given callable\n-    """\n+class DelegatingIndexer:\n+    """An indexer that delegates to a given callable"""\n \n     def __init__(self, context, catalog, callable):\n         self.context = context\n@@ -20,7 +18,7 @@ def __call__(self):\n         return self.callable(self.context)\n \n \n-class DelegatingIndexerFactory(object):\n+class DelegatingIndexerFactory:\n     """An adapter factory for an IIndexer that works by calling a\n     DelegatingIndexer.\n     """\ndiff --git a/plone/indexer/interfaces.py b/plone/indexer/interfaces.py\nindex efdab8a..8d19f45 100644\n--- a/plone/indexer/interfaces.py\n+++ b/plone/indexer/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n@@ -8,11 +7,15 @@\n try:\n     from Products.CMFCore.interfaces import IIndexableObjectWrapper\n except ImportError:\n+\n     class IIndexableObjectWrapper(Interface):\n         pass\n+\n+\n try:\n     from Products.CMFCore.interfaces import IIndexableObject\n except ImportError:\n+\n     class IIndexableObject(Interface):\n         """An object being indexed in the catalog. The indexable object\n         wrapper will be looked up as a multi-adapter of (object, catalog)\n@@ -35,8 +38,7 @@ class IIndexer(Interface):\n     """\n \n     def __call__(self):\n-        """Return the value to index.\n-        """\n+        """Return the value to index."""\n \n \n class IDelegatingIndexableObjectWrapper(IIndexableObjectWrapper):\ndiff --git a/plone/indexer/tests.py b/plone/indexer/tests.py\nindex 0988a07..e4afb88 100644\n--- a/plone/indexer/tests.py\n+++ b/plone/indexer/tests.py\n@@ -1,14 +1,10 @@\n-# -*- coding: utf-8 -*-\n from zope.component import testing\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n class TestWrapperUpdate(unittest.TestCase):\n-\n     def test_wrapper_update(self):\n         from plone.indexer import indexer\n         from zope.interface import Interface\n@@ -17,30 +13,24 @@ def test_wrapper_update(self):\n         def my_func(obj):\n             """My custom docstring."""\n \n-        self.assertEqual(my_func.__doc__, \'My custom docstring.\')\n-        self.assertEqual(my_func.__module__, \'plone.indexer.tests\')\n-        self.assertEqual(my_func.__name__, \'my_func\')\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+        self.assertEqual(my_func.__doc__, "My custom docstring.")\n+        self.assertEqual(my_func.__module__, "plone.indexer.tests")\n+        self.assertEqual(my_func.__name__, "my_func")\n \n \n def test_suite():\n-    return unittest.TestSuite([\n-        doctest.DocFileSuite(\n-            \'README.rst\',\n-            package=\'plone.indexer\',\n-            setUp=testing.setUp,\n-            tearDown=testing.tearDown,\n-            checker=Py23DocChecker(),\n+    return unittest.TestSuite(\n+        [\n+            doctest.DocFileSuite(\n+                "README.rst",\n+                package="plone.indexer",\n+                setUp=testing.setUp,\n+                tearDown=testing.tearDown,\n             ),\n-        unittest.makeSuite(TestWrapperUpdate),\n-    ])\n+            unittest.defaultTestLoader.loadTestsFromTestCase(TestWrapperUpdate),\n+        ]\n+    )\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(defaultTest=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/indexer/wrapper.py b/plone/indexer/wrapper.py\nindex 376c175..ab48929 100644\n--- a/plone/indexer/wrapper.py\n+++ b/plone/indexer/wrapper.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.indexer.interfaces import IIndexableObject\n from plone.indexer.interfaces import IIndexableObjectWrapper\n@@ -31,10 +30,11 @@ def __get__(self, inst, cls=None):\n \n @implementer(IIndexableObject, IIndexableObjectWrapper)\n @adapter(Interface, IZCatalog)\n-class IndexableObjectWrapper(object):\n+class IndexableObjectWrapper:\n     """A simple wrapper for indexable objects that will delegate to IIndexer\n     adapters as appropriate.\n     """\n+\n     __providedBy__ = WrapperSpecification()\n \n     def __init__(self, object, catalog):\n@@ -42,7 +42,7 @@ def __init__(self, object, catalog):\n         self.__catalog = catalog\n         self.__vars = {}\n \n-        portal_workflow = getToolByName(catalog, \'portal_workflow\', None)\n+        portal_workflow = getToolByName(catalog, "portal_workflow", None)\n         if portal_workflow is not None:\n             self.__vars = portal_workflow.getCatalogVariablesFor(object)\n \n@@ -59,7 +59,8 @@ def __getattr__(self, name):\n         # First, try to look up an indexer adapter\n         indexer = queryMultiAdapter(\n             (self.__object, self.__catalog),\n-            IIndexer, name=name,\n+            IIndexer,\n+            name=name,\n         )\n         if indexer is not None:\n             return indexer()\n@@ -78,14 +79,9 @@ def __getattr__(self, name):\n         except AttributeError:\n             # it does not!\n             # PythonScripts are the only way to add indexers TTW.\n-            # If there is a PythonScript acquired, thats fine:\n-            if (\n-                getattr(\n-                    value_or_callable,\n-                    \'meta_type\',\n-                    None,\n-                ) == \'Script (Python)\'\n-            ):\n+            # If there is a PythonScript acquired, that\'s fine:\n+            meta_type = getattr(value_or_callable, "meta_type", None)\n+            if meta_type == "Script (Python)":\n                 return value_or_callable\n             raise\n         # here we know it is a direct attribute.\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex f8bd297..95e55fc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,22 +1,22 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'1.0.8.dev0\'\n-description = \'Hooks to facilitate managing custom index values in Zope 2/CMF applications\'  # noqa\n-long_description = (\'\\n\\n\'.join([\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read(),\n-    open(os.path.join("plone", "indexer", "README.rst")).read(),\n-\n-]))\n+version = "2.0.0.dev0"\n+description = "Hooks to facilitate managing custom index values in Zope 2/CMF applications"  # noqa\n+long_description = "\\n\\n".join(\n+    [\n+        open("README.rst").read(),\n+        open("CHANGES.rst").read(),\n+        open(os.path.join("plone", "indexer", "README.rst")).read(),\n+    ]\n+)\n \n \n setup(\n-    name=\'plone.indexer\',\n+    name="plone.indexer",\n     version=version,\n     description=description,\n     long_description=long_description,\n@@ -24,35 +24,29 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone cmf zope catalog index\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.indexer\',\n-    license=\'BSD\',\n+    keywords="plone cmf zope catalog index",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.indexer",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'Products.CMFCore\',\n-        \'Products.ZCatalog\',\n+        "setuptools",\n+        "Products.CMFCore",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..2beee90\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.indexer {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.indexer {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

