Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T12:09:22+02:00
Author: mamico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/65aa2d197e7232cfcf42e0d09e208f2036769ed2

safewrite

Files changed:
M plone/scale/storage.py

b'diff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex a8cc235..c56d6d0 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -13,6 +13,10 @@\n import logging\n import pprint\n \n+try:\n+    from plone.protect.utils import safeWrite\n+except ImportError:\n+    safeWrite = None\n \n logger = logging.getLogger("plone.scale")\n # Keep old scales around for this amount of milliseconds.\n@@ -168,11 +172,17 @@ def __repr__(self):\n     @property\n     def storage(self):\n         annotations = IAnnotations(self.context)\n-        scales = annotations.setdefault("plone.scale", ScalesDict())\n+        if "plone.scale" not in annotations:\n+            annotations["plone.scale"] = ScalesDict()\n+            if safeWrite is not None:\n+                safeWrite(self.context)\n+        scales = annotations["plone.scale"]\n         if not isinstance(scales, ScalesDict):\n             # migrate from PersistentDict to ScalesDict\n             new_scales = ScalesDict(scales)\n             annotations["plone.scale"] = new_scales\n+            if safeWrite is not None:\n+                safeWrite(self.context)\n             return new_scales\n         return scales\n \n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T12:49:56+02:00
Author: mamico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/257e4244187087a2bc01be6a918d09744b8354c6

changelog

Files changed:
A news/58.feature

b"diff --git a/news/58.feature b/news/58.feature\nnew file mode 100644\nindex 0000000..e125479\n--- /dev/null\n+++ b/news/58.feature\n@@ -0,0 +1,4 @@\n+Mark as plone.protect's safeWrite AnnotationStorage.\n+Precondition for https://github.com/plone/plone.namedfile/pull/117.\n+[mamico]\n+\n"

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T14:46:46+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/c5b8ed7badc4a39ad9c324f51138c87953308a53

Merge pull request #58 from plone/mamico/safewrite

optional safewrite storage

Files changed:
A news/58.feature
M plone/scale/storage.py

b'diff --git a/news/58.feature b/news/58.feature\nnew file mode 100644\nindex 0000000..e125479\n--- /dev/null\n+++ b/news/58.feature\n@@ -0,0 +1,4 @@\n+Mark as plone.protect\'s safeWrite AnnotationStorage.\n+Precondition for https://github.com/plone/plone.namedfile/pull/117.\n+[mamico]\n+\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex a8cc235..c56d6d0 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -13,6 +13,10 @@\n import logging\n import pprint\n \n+try:\n+    from plone.protect.utils import safeWrite\n+except ImportError:\n+    safeWrite = None\n \n logger = logging.getLogger("plone.scale")\n # Keep old scales around for this amount of milliseconds.\n@@ -168,11 +172,17 @@ def __repr__(self):\n     @property\n     def storage(self):\n         annotations = IAnnotations(self.context)\n-        scales = annotations.setdefault("plone.scale", ScalesDict())\n+        if "plone.scale" not in annotations:\n+            annotations["plone.scale"] = ScalesDict()\n+            if safeWrite is not None:\n+                safeWrite(self.context)\n+        scales = annotations["plone.scale"]\n         if not isinstance(scales, ScalesDict):\n             # migrate from PersistentDict to ScalesDict\n             new_scales = ScalesDict(scales)\n             annotations["plone.scale"] = new_scales\n+            if safeWrite is not None:\n+                safeWrite(self.context)\n             return new_scales\n         return scales\n \n'

