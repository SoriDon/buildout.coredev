Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:04:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/d1ff29dd118faad27d9d85362cd33c67e2fe6911

Removed unused files.

Files changed:
M README.rst
M setup.cfg
D Gemfile
D buildout-varnish.cfg
D templates/varnish.vcl.in
D travis.cfg
D versions.cfg

b'diff --git a/Gemfile b/Gemfile\ndeleted file mode 100644\nindex 20812cd..0000000\n--- a/Gemfile\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-source \'https://rubygems.org\'\n-gem \'mime-types\', \'2.6.2\'\n-gem \'faraday\', \'0.8.9\'\n-gem \'net-ssh\', \'2.9.2\'\n-gem \'travis-artifacts\'\ndiff --git a/README.rst b/README.rst\nindex 558deb8..7dbcd6d 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,12 +1,6 @@\n plone.app.robotframework\n ------------------------\n \n-.. image:: https://secure.travis-ci.org/plone/plone.app.robotframework.png\n-     :target: http://travis-ci.org/plone/plone.app.robotframework\n-\n-.. image:: https://saucelabs.com/buildstatus/parobotframework\n-       :target: https://saucelabs.com/u/parobotframework\n-\n .. image:: https://img.shields.io/pypi/v/plone.app.robotframework.svg\n         :target: https://pypi.org/project/plone.app.robotframework/\n \n@@ -17,8 +11,3 @@ and its add-ons.\n \n Please read the full documentation at `Plone Developer Documentation\n <https://docs.plone.org/external/plone.app.robotframework/docs/source/index.html>`_.\n-\n-`The latest known good version`__ for **plone.app.robotframework** and\n-packages related to it.\n-\n-__ https://raw.githubusercontent.com/plone/plone.app.robotframework/master/versions.cfg\ndiff --git a/buildout-varnish.cfg b/buildout-varnish.cfg\ndeleted file mode 100644\nindex c9953d1..0000000\n--- a/buildout-varnish.cfg\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-[buildout]\n-parts +=\n-    varnish-build\n-    varnish\n-    varnish-conf\n-    supervisor\n-    test-wrap-varnish\n-\n-[hosts]\n-supervisor = localhost\n-plone-testing = localhost\n-varnish = localhost\n-varnish-telnet = localhost\n-\n-[ports]\n-supervisor = 9001\n-plone-testing = 55000\n-varnish = 8080\n-varnish-telnet = 5001\n-\n-[environment]\n-ZSERVER_HOST = ${hosts:plone-testing}\n-ZSERVER_PORT = ${ports:plone-testing}\n-ROBOT_ZOPE_HOST = ${hosts:varnish}\n-ROBOT_ZOPE_PORT = ${ports:varnish}\n-\n-[test]\n-environment = environment\n-script = run-tests\n-\n-[test-wrap-varnish]\n-recipe = collective.recipe.template\n-input = inline:\n-    #!/usr/bin/env sh\n-    ${buildout:directory}/bin/supervisord\n-    ${buildout:directory}/bin/run-tests $@\n-    result=$?\n-    ${buildout:directory}/bin/supervisorctl shutdown\n-    exit $result\n-output = ${buildout:directory}/bin/test\n-mode = 755\n-\n-[varnish-build]\n-recipe = zc.recipe.cmmi\n-url = ${varnish:download-url}\n-\n-[varnish]\n-recipe = plone.recipe.varnish:instance\n-bind = ${hosts:varnish}:${ports:varnish}\n-telnet = ${hosts:varnish-telnet}:${ports:varnish-telnet}\n-cache-size = 256M\n-mode = foreground\n-daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd\n-config = ${buildout:directory}/etc/varnish.vcl\n-\n-[varnish-conf]\n-recipe = collective.recipe.template\n-url = https://raw.github.com/plone/plone.act/master/templates/varnish.vcl.in\n-output = ${buildout:directory}/etc/varnish.vcl\n-backend = ${hosts:plone-testing}\n-backend_port = ${ports:plone-testing}\n-\n-[supervisor]\n-recipe = collective.recipe.supervisor\n-port = ${hosts:supervisor}:${ports:supervisor}\n-user = admin\n-password = admin\n-programs =\n-    10 varnish ${varnish:daemon} [ -f ${varnish:config} -n ${buildout:directory}/var -s malloc,1G -a ${hosts:varnish}:${ports:varnish} -F ] ${buildout:directory}\ndiff --git a/setup.cfg b/setup.cfg\nindex 1885445..b6c751e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,12 +1,7 @@\n [check-manifest]\n ignore =\n     *.cfg\n-    bootstrap.py\n-    Gemfile\n     requirements.txt\n-    templates\n-    templates/varnish.vcl.in\n-\n \n \n [isort]\ndiff --git a/templates/varnish.vcl.in b/templates/varnish.vcl.in\ndeleted file mode 100644\nindex ba1867c..0000000\n--- a/templates/varnish.vcl.in\n+++ /dev/null\n@@ -1,107 +0,0 @@\n-# VCL file optimized for Plone with a webserver in front.  See vcl(7) for details\n-\n-backend instance {\n-  .host = "${varnish-conf:backend}";\n-  .port = "${varnish-conf:backend_port}";\n-}\n-\n-# Define a sub to handle requests where we ignore cache-control headers.  Now\n-# we don\'t have to put the check for a 200 status code in every content type:\n-sub override {\n-    if (beresp.status == 200) {\n-            set beresp.http.X-Varnish-Action = "Stored";\n-            return(deliver);\n-            }\n-    return(pass);\n-}\n-\n-acl purge {\n-    "127.0.0.1";\n-}\n-\n-sub vcl_recv {\n-\n-  set req.backend = instance;\n-  set req.grace = 120s;\n-\n-    if (req.request == "PURGE") {\n-            if (!client.ip ~ purge) {\n-                    error 405 "Not allowed.";\n-            }\n-            purge_url(req.url);\n-        error 200 "Purged";\n-    }\n-    if (req.request != "GET" && req.request != "HEAD") {\n-        /* We only deal with GET and HEAD by default */\n-        return(pass);\n-    }\n-    return(lookup);\n-}\n-\n-sub vcl_hit {\n-    if (req.request == "PURGE") {\n-    set obj.ttl = 0s;\n-    error 200 "Purged";\n-    }\n-    if (!obj.cacheable) {\n-        set obj.http.X-Varnish-Action = "return(pass) (not cacheable - hit)";\n-        return(pass);\n-    }\n-    if (obj.http.Cache-Control ~ "(stale-while-revalidate|no-transform)") {\n-        # This is a special cache. Don\'t serve to authenticated.\n-        if (req.http.Cookie ~ "__ac=" || req.http.Authorization) {\n-            set obj.http.X-Varnish-Action = "PASS (special not cacheable - hit)";\n-                    return(pass);\n-                }\n-        }\n-\n-    set obj.http.X-Varnish-Action = "HIT (return(deliver) - from cache)";\n-    return(deliver);\n-}\n-\n-sub vcl_miss {\n-    if (req.request == "PURGE") {\n-            error 404 "Not in cache.";\n-    }\n-    return(fetch);\n-}\n-\n-sub vcl_fetch {\n-    if (beresp.http.Cache-Control ~ "(stale-while-revalidate|no-transform)") {\n-            # Leveraging a non-varnish token to set a minimum ttl without contaminating s-maxage\n-            # Wouldn\'t need this if varnish supported Surrogate-Control\n-            if (beresp.ttl < 3600s) {\n-                    set beresp.http.X-Varnish-Special = "SPECIAL (local proxy for 1 hour)";\n-                    unset beresp.http.expires;\n-                    set beresp.ttl = 3600s;\n-                    # Add reset marker\n-                    set beresp.http.reset-age = "1";\n-            }\n-    }\n-\n-    if (req.url ~ "\\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|js|kss|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm)$") {\n-    set beresp.ttl = 3600s;\n-    call override;\n-    }\n-    if (beresp.http.Content-Type ~ "image.*$") {\n-    set beresp.ttl = 3600s;\n-        call override;\n-    }\n-    if (beresp.http.Set-Cookie) {\n-            set beresp.http.X-Varnish-Action = "FETCH (return(pass) - response sets cookie)";\n-            return(pass);\n-    }\n-    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {\n-            set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";\n-            return(pass);\n-    }\n-    if (beresp.http.cookie ~ "__ac.*$") {\n-        return(pass);\n-    }\n-    if (!beresp.cacheable) {\n-    set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";\n-        return(pass);\n-    }\n-    return(deliver);\n-}\n-\ndiff --git a/travis.cfg b/travis.cfg\ndeleted file mode 100644\nindex 57c1900..0000000\n--- a/travis.cfg\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-[buildout]\n-extends =\n-    buildout.cfg\n-\n-parts =\n-    docs\n-    libdoc\n-    test\n-\n-[test]\n-eggs =\n-    plone.app.robotframework [test,speak]\n-defaults = [\'--auto-color\', \'--auto-progress\', \'-s\', \'plone.app.robotframework\']\ndiff --git a/versions.cfg b/versions.cfg\ndeleted file mode 100644\nindex 15e60f0..0000000\n--- a/versions.cfg\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-[versions]\n-# Good known versions for plone.app.robotframework and friends\n-\n-# THOSE ARE PART OF PLONE COREDEV BUILDOUT\n-# NEWER VERSIONS CAN BE TESTED HERE FOR BRANCHES BUT NEED AN UPDATE OF\n-# BUILDOUT COREDEV DIRECTLY AFTER MERGE\n-\n-# Pygments = 2.0.2\n-# robotframework = 3.0\n-# robotframework-selenium2library = 1.7.4\n-# robotframework-selenium2screenshots = 0.7.0\n-# robotsuite = 1.7.0\n-# selenium = 2.53.6\n-# sphinxcontrib-robotframework = 0.7.0\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:04:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/0ea272b63118591f6f49bcd41713da52188d165c

isort

Files changed:
M docs/source/conf.py
M setup.py
M src/plone/app/robotframework/__init__.py
M src/plone/app/robotframework/autologin.py
M src/plone/app/robotframework/config.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/patches.py
M src/plone/app/robotframework/quickinstaller.py
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/robotentrypoints.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/tests/test_robot.py
M src/plone/app/robotframework/utils.py
M src/plone/app/robotframework/variables.py

b"diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 352d0fd..b895453 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -11,7 +11,9 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\ndiff --git a/setup.py b/setup.py\nindex 25bc868..172188d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,6 +3,7 @@\n \n import sys\n \n+\n version = '2.0.0a4.dev0'\n \n \ndiff --git a/src/plone/app/robotframework/__init__.py b/src/plone/app/robotframework/__init__.py\nindex 06749a1..e2a32e1 100644\n--- a/src/plone/app/robotframework/__init__.py\n+++ b/src/plone/app/robotframework/__init__.py\n@@ -1,30 +1,25 @@\n # -*- coding: utf-8 -*-\n \n # Stand-alone Python keyword libraries\n-from plone.app.robotframework.server import Zope2Server\n-from plone.app.robotframework.saucelabs import SauceLabs\n-from plone.app.robotframework.keywords import Debugging\n-from plone.app.robotframework.keywords import LayoutMath\n+# Load our patches.  Call it _patches to mark it as private.\n+from plone.app.robotframework import patches as _patches\n from plone.app.robotframework.annotate import Annotate\n-\n-# Remote Python libraries\n-from plone.app.robotframework.server import Zope2ServerRemote\n from plone.app.robotframework.autologin import AutoLogin\n+from plone.app.robotframework.content import Content\n from plone.app.robotframework.genericsetup import GenericSetup\n from plone.app.robotframework.i18n import I18N\n+from plone.app.robotframework.keywords import Debugging\n+from plone.app.robotframework.keywords import LayoutMath\n from plone.app.robotframework.mailhost import MockMailHost\n-from plone.app.robotframework.users import Users\n-from plone.app.robotframework.content import Content\n from plone.app.robotframework.quickinstaller import QuickInstaller\n-\n # Generic remote Python library layer\n from plone.app.robotframework.remote import RemoteLibraryLayer\n-\n+from plone.app.robotframework.saucelabs import SauceLabs\n # Pybot listener for calling Robot Server from pybot\n+# Remote Python libraries\n from plone.app.robotframework.server import RobotListener\n-\n+from plone.app.robotframework.server import Zope2Server\n+from plone.app.robotframework.server import Zope2ServerRemote\n # Robot Plone fixture\n from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n-\n-# Load our patches.  Call it _patches to mark it as private.\n-from plone.app.robotframework import patches as _patches\n+from plone.app.robotframework.users import Users\ndiff --git a/src/plone/app/robotframework/autologin.py b/src/plone/app/robotframework/autologin.py\nindex 4a3e802..957430b 100644\n--- a/src/plone/app/robotframework/autologin.py\n+++ b/src/plone/app/robotframework/autologin.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Products.PlonePAS.setuphandlers import activatePluginInterfaces\n-from Products.PluggableAuthService.plugins import DomainAuthHelper\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from Products.PlonePAS.setuphandlers import activatePluginInterfaces\n+from Products.PluggableAuthService.plugins import DomainAuthHelper\n \n \n class AutoLogin(RemoteLibrary):\ndiff --git a/src/plone/app/robotframework/config.py b/src/plone/app/robotframework/config.py\nindex e38b88b..5f03494 100644\n--- a/src/plone/app/robotframework/config.py\n+++ b/src/plone/app/robotframework/config.py\n@@ -2,6 +2,7 @@\n \n import pkg_resources\n \n+\n try:\n     pkg_resources.get_distribution('plone.dexterity')\n except pkg_resources.DistributionNotFound:\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex c03fa07..26b0d2d 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -22,9 +22,8 @@\n \n if HAS_DEXTERITY:\n     from plone.app.textfield.value import RichTextValue\n-\n-    from plone.dexterity.utils import getAdditionalSchemata\n     from plone.dexterity.fti import DexterityFTI\n+    from plone.dexterity.utils import getAdditionalSchemata\n     from z3c.form.interfaces import IDataConverter\n     from z3c.form.interfaces import IDataManager\n     from z3c.form.interfaces import IFieldWidget\n@@ -39,8 +38,8 @@\n         from plone.namedfile.file import NamedImage as NamedBlobImage\n \n if HAS_DEXTERITY_RELATIONS:\n-    from zope.intid.interfaces import IIntIds\n     from z3c.relationfield import RelationValue\n+    from zope.intid.interfaces import IIntIds\n \n \n class Content(RemoteLibrary):\n@@ -291,10 +290,11 @@ def prefill_image_types(portal, kwargs):\n \n \n def random_image():\n-    import random\n-    from six import BytesIO\n     from PIL import Image\n     from PIL import ImageDraw\n+    from six import BytesIO\n+\n+    import random\n \n     img = Image.new('RGB', (random.randint(320, 640),\n                             random.randint(320, 640)))\ndiff --git a/src/plone/app/robotframework/patches.py b/src/plone/app/robotframework/patches.py\nindex 791e2ce..a3bd285 100644\n--- a/src/plone/app/robotframework/patches.py\n+++ b/src/plone/app/robotframework/patches.py\n@@ -4,6 +4,7 @@\n # and for Plone: https://github.com/plone/Products.CMFPlone/issues/2786\n from selenium.webdriver.common import utils\n \n+\n try:\n     # Python 3\n     ConnectionResetError\ndiff --git a/src/plone/app/robotframework/quickinstaller.py b/src/plone/app/robotframework/quickinstaller.py\nindex ce96b30..62059f7 100644\n--- a/src/plone/app/robotframework/quickinstaller.py\n+++ b/src/plone/app/robotframework/quickinstaller.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n-from zope.component.hooks import getSite\n-from Products.CMFCore.utils import getToolByName\n from plone.app.robotframework.remote import RemoteLibrary\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import get_installer\n+from zope.component.hooks import getSite\n \n \n class QuickInstaller(RemoteLibrary):\ndiff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 1aa2c21..0b2672d 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -1,9 +1,7 @@\n # -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n-from plone.app.testing import (\n-    PLONE_FIXTURE,\n-    ploneSite\n-)\n+from plone.app.testing import PLONE_FIXTURE\n+from plone.app.testing import ploneSite\n from plone.testing import Layer\n from Products.CMFPlone.Portal import PloneSite\n \ndiff --git a/src/plone/app/robotframework/robotentrypoints.py b/src/plone/app/robotframework/robotentrypoints.py\nindex 9c07d58..fe83b45 100644\n--- a/src/plone/app/robotframework/robotentrypoints.py\n+++ b/src/plone/app/robotframework/robotentrypoints.py\n@@ -1,10 +1,12 @@\n from __future__ import print_function\n-from robot import run_cli\n+\n from robot import libdoc as ld\n+from robot import run_cli\n \n import pkg_resources\n import sys\n \n+\n try:\n     pkg_resources.get_distribution('robotframework-ride')\n except pkg_resources.DistributionNotFound:\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 4ab5222..7070826 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from __future__ import print_function\n+\n from plone.app.robotframework.remote import RemoteLibrary\n from six.moves.xmlrpc_client import ServerProxy\n from six.moves.xmlrpc_server import SimpleXMLRPCServer\n@@ -127,9 +128,9 @@ def start_reload(zope_layer_dotted_name, reload_paths=('src',),\n     # XXX: For unknown reason call to socket.gethostbyaddr may cause malloc\n     # errors on OSX in forked child when called from medusa http_server, but\n     # proper sleep seem to fix it:\n-    import time\n-    import socket\n     import platform\n+    import socket\n+    import time\n     if 'Darwin' in platform.uname():\n         gethostbyaddr = socket.gethostbyaddr\n         socket.gethostbyaddr = lambda x: time.sleep(0.5) or (ZSERVER_HOST,)\n@@ -367,6 +368,7 @@ def setup_layer(layer, setup_layers=setup_layers):\n \n def tear_down(setup_layers=setup_layers):\n     from zope.testrunner.runner import order_by_bases\n+\n     # Tear down any layers not needed for these tests. The unneeded layers\n     # might interfere.\n     unneeded = [l for l in setup_layers]\ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 54fca8c..e10bcd7 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,14 +1,17 @@\n # -*- coding: utf-8 -*-\n-from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n # from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n+from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n-from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING  # noqa: E501\n+from plone.app.robotframework.testing import (  # noqa: E501\n+    SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING\n+)\n from plone.testing import layered\n \n import pkg_resources\n import robotsuite\n import unittest\n \n+\n try:\n     pkg_resources.get_distribution('collective.js.speakjs')\n except pkg_resources.DistributionNotFound:\ndiff --git a/src/plone/app/robotframework/utils.py b/src/plone/app/robotframework/utils.py\nindex 671fc6f..7338795 100644\n--- a/src/plone/app/robotframework/utils.py\n+++ b/src/plone/app/robotframework/utils.py\n@@ -1,5 +1,6 @@\n-from zope.interface import alsoProvides\n from zope.globalrequest import getRequest\n+from zope.interface import alsoProvides\n+\n \n try:\n     from plone.protect.interfaces import IDisableCSRFProtection\ndiff --git a/src/plone/app/robotframework/variables.py b/src/plone/app/robotframework/variables.py\nindex 8a3e549..7489cea 100644\n--- a/src/plone/app/robotframework/variables.py\n+++ b/src/plone/app/robotframework/variables.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n+\n import pkg_resources\n \n-from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n ZOPE_HOST = WSGI_SERVER_FIXTURE.host\n ZOPE_PORT = WSGI_SERVER_FIXTURE.port\n"

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:04:51+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/212001c70e985771cff0bd64656164e0be7fd467

black

Files changed:
M docs/source/conf.py
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/robotframework/__init__.py
M src/plone/app/robotframework/annotate.py
M src/plone/app/robotframework/autologin.py
M src/plone/app/robotframework/config.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/genericsetup.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/keywords.py
M src/plone/app/robotframework/mailhost.py
M src/plone/app/robotframework/pybabel.py
M src/plone/app/robotframework/quickinstaller.py
M src/plone/app/robotframework/reload.py
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/robotentrypoints.py
M src/plone/app/robotframework/saucelabs.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_content.py
M src/plone/app/robotframework/tests/test_robot.py
M src/plone/app/robotframework/tests/test_robotfixture.py
M src/plone/app/robotframework/users.py
M src/plone/app/robotframework/utils.py
M src/plone/app/robotframework/variables.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex b895453..12a3696 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -18,196 +18,199 @@\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinxcontrib_robotdoc\']\n+extensions = ["sphinxcontrib_robotdoc"]\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.robotframework\'\n-copyright = u\'2013, Plone Foundation\'\n+project = "plone.app.robotframework"\n+copyright = "2013, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0.4\'\n+release = "1.0.4"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n exclude_patterns = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'parobotframeworkdoc\'\n+htmlhelp_basename = "parobotframeworkdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    #\'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    #\'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    #\'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'parobotframework.tex\', u\'Writing Robot Framework tests for Plone\',\n-   u\'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "parobotframework.tex",\n+        "Writing Robot Framework tests for Plone",\n+        "Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -215,12 +218,17 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'parobotframework\', u\'Writing Robot Framework tests for Plone\',\n-     [u\'Plone Foundation\'], 1)\n+    (\n+        "index",\n+        "parobotframework",\n+        "Writing Robot Framework tests for Plone",\n+        ["Plone Foundation"],\n+        1,\n+    )\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -229,16 +237,22 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'index\', \'parobotframework\', u\'Writing Robot Framework tests for Plone\',\n-   u\'Plone Foundation\', \'parobotframework\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "index",\n+        "parobotframework",\n+        "Writing Robot Framework tests for Plone",\n+        "Plone Foundation",\n+        "parobotframework",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\ndiff --git a/setup.py b/setup.py\nindex 172188d..131badf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,15 +4,15 @@\n import sys\n \n \n-version = \'2.0.0a4.dev0\'\n+version = "2.0.0a4.dev0"\n \n \n def indented(filename):\n-    return \'\'.join([indent(line) for line in open(filename)])\n+    return "".join([indent(line) for line in open(filename)])\n \n \n def indent(line):\n-    return \'   \' + line\n+    return "   " + line\n \n \n def read(filename):\n@@ -29,15 +29,12 @@ def read(filename):\n         return contents.decode("utf-8")\n \n \n-long_description = (\n-    read(\'README.rst\') +\n-    \'\\n\' +\n-    \'Contributors\\n\'\n-    \'============\\n\' +\n-    \'\\n\' +\n-    read(\'CONTRIBUTORS.rst\') +\n-    \'\\n\' +\n-    read(\'CHANGES.rst\')\n+long_description = read(\n+    "README.rst"\n+) + "\\n" + "Contributors\\n" "============\\n" + "\\n" + read(\n+    "CONTRIBUTORS.rst"\n+) + "\\n" + read(\n+    "CHANGES.rst"\n )\n \n \n@@ -54,70 +51,72 @@ def read(filename):\n entry_points = dict(console_scripts=console_scripts)\n \n install_requires = [\n-    \'Products.CMFCore\',\n-    \'Products.CMFPlone\',\n-    \'Products.MailHost\',\n-    \'Products.PlonePAS >= 5.0.1\',\n-    \'Products.PluggableAuthService\',\n-    \'babel\',\n-    \'plone.app.testing\',\n-    \'plone.testing\',\n-    \'plone.uuid\',\n-    \'robotframework\',\n-    \'robotframework-selenium2library\',\n-    \'robotsuite\',  # not a direct dependency, but required for convenience\n-    \'selenium\',\n-    \'setuptools\',\n-    \'six\',\n-    \'zope.component\',\n-    \'zope.configuration\',\n-    \'zope.i18n\',\n-    \'zope.schema\',\n-    \'zope.testrunner\',\n+    "Products.CMFCore",\n+    "Products.CMFPlone",\n+    "Products.MailHost",\n+    "Products.PlonePAS >= 5.0.1",\n+    "Products.PluggableAuthService",\n+    "babel",\n+    "plone.app.testing",\n+    "plone.testing",\n+    "plone.uuid",\n+    "robotframework",\n+    "robotframework-selenium2library",\n+    "robotsuite",  # not a direct dependency, but required for convenience\n+    "selenium",\n+    "setuptools",\n+    "six",\n+    "zope.component",\n+    "zope.configuration",\n+    "zope.i18n",\n+    "zope.schema",\n+    "zope.testrunner",\n ]\n \n if sys.version_info < (2, 7):\n-    install_requires.extend([\n-        \'argparse\',\n-        \'decorator\',   # required by r.selenium2library on Python 2.6.x\n-        \'simplejson\',  # required for SauceLabs-keywords on Python 2.6.x\n-    ])\n+    install_requires.extend(\n+        [\n+            "argparse",\n+            "decorator",  # required by r.selenium2library on Python 2.6.x\n+            "simplejson",  # required for SauceLabs-keywords on Python 2.6.x\n+        ]\n+    )\n \n test_requires = [\n-    \'plone.app.dexterity\',\n-    \'plone.app.textfield\',\n-    \'plone.dexterity\',\n-    \'robotsuite\',\n-    \'z3c.form\',\n+    "plone.app.dexterity",\n+    "plone.app.textfield",\n+    "plone.dexterity",\n+    "robotsuite",\n+    "z3c.form",\n ]\n \n debug_requires = [\n     # REPL-debugger for Robot Framework:\n-    \'robotframework-debuglibrary\',\n+    "robotframework-debuglibrary",\n ]\n \n ride_requires = [\n     # Robot Framework IDE:\n-    \'robotframework-ride\'\n+    "robotframework-ride"\n ]\n \n speak_requires = [\n     # Enable talking screen casts:\n-    \'collective.js.speakjs\'\n+    "collective.js.speakjs"\n ]\n \n reload_requires = [\n     # Watch for filesystem changes:\n-    \'watchdog\'\n+    "watchdog"\n ]\n \n docs_requires = [\n     # Include robot-files outside docs:\n-    \'sphinxcontrib-robotdoc\'\n+    "sphinxcontrib-robotdoc"\n ]\n \n setup(\n-    name=\'plone.app.robotframework\',\n+    name="plone.app.robotframework",\n     version=version,\n     description="Robot Framework testing resources for Plone",\n     long_description=long_description,\n@@ -131,22 +130,24 @@ def read(filename):\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'robot automatic browser testing Plone\',\n-    author=\'Asko Soukka\',\n-    author_email=\'asko.soukka@iki.fi\',\n-    url=\'https://github.com/plone/plone.app.robotframework/\',\n-    license=\'GPL\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    keywords="robot automatic browser testing Plone",\n+    author="Asko Soukka",\n+    author_email="asko.soukka@iki.fi",\n+    url="https://github.com/plone/plone.app.robotframework/",\n+    license="GPL",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=install_requires,\n-    extras_require={\'ride\': ride_requires,\n-                    \'speak\': speak_requires,\n-                    \'test\': test_requires,\n-                    \'reload\': reload_requires,\n-                    \'docs\': docs_requires,\n-                    \'debug\': debug_requires},\n+    extras_require={\n+        "ride": ride_requires,\n+        "speak": speak_requires,\n+        "test": test_requires,\n+        "reload": reload_requires,\n+        "docs": docs_requires,\n+        "debug": debug_requires,\n+    },\n     entry_points=entry_points,\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/robotframework/__init__.py b/src/plone/app/robotframework/__init__.py\nindex e2a32e1..ff3197a 100644\n--- a/src/plone/app/robotframework/__init__.py\n+++ b/src/plone/app/robotframework/__init__.py\n@@ -12,14 +12,17 @@\n from plone.app.robotframework.keywords import LayoutMath\n from plone.app.robotframework.mailhost import MockMailHost\n from plone.app.robotframework.quickinstaller import QuickInstaller\n+\n # Generic remote Python library layer\n from plone.app.robotframework.remote import RemoteLibraryLayer\n from plone.app.robotframework.saucelabs import SauceLabs\n+\n # Pybot listener for calling Robot Server from pybot\n # Remote Python libraries\n from plone.app.robotframework.server import RobotListener\n from plone.app.robotframework.server import Zope2Server\n from plone.app.robotframework.server import Zope2ServerRemote\n+\n # Robot Plone fixture\n from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n from plone.app.robotframework.users import Users\ndiff --git a/src/plone/app/robotframework/annotate.py b/src/plone/app/robotframework/annotate.py\nindex b02ddc8..39577b5 100644\n--- a/src/plone/app/robotframework/annotate.py\n+++ b/src/plone/app/robotframework/annotate.py\n@@ -4,10 +4,8 @@\n \n \n class Annotate:\n-\n     def crop_image(self, output_dir, filename, left, top, width, height):\n-        """Crop the saved image with given filename for the given dimensions.\n-        """\n+        """Crop the saved image with given filename for the given dimensions."""\n         from PIL import Image\n \n         img = Image.open(os.path.join(output_dir, filename))\n@@ -15,5 +13,5 @@ def crop_image(self, output_dir, filename, left, top, width, height):\n \n         area = img.crop(box)\n \n-        with open(os.path.join(output_dir, filename), \'wb\') as output:\n-            area.save(output, \'png\')\n+        with open(os.path.join(output_dir, filename), "wb") as output:\n+            area.save(output, "png")\ndiff --git a/src/plone/app/robotframework/autologin.py b/src/plone/app/robotframework/autologin.py\nindex 957430b..b13be9c 100644\n--- a/src/plone/app/robotframework/autologin.py\n+++ b/src/plone/app/robotframework/autologin.py\n@@ -6,7 +6,6 @@\n \n \n class AutoLogin(RemoteLibrary):\n-\n     def enable_autologin_as(self, *args):\n         """Add and configure DomainAuthHelper PAS-plugin to login\n         all anonymous users from localhost as a special *Remote User* with\n@@ -18,27 +17,26 @@ def enable_autologin_as(self, *args):\n \n         """\n         disableCSRFProtection()\n-        if \'robot_login\' in self.acl_users.objectIds():\n+        if "robot_login" in self.acl_users.objectIds():\n             self.acl_users.robot_login._domain_map.clear()\n         else:\n-            DomainAuthHelper.manage_addDomainAuthHelper(\n-                self.acl_users, \'robot_login\')\n-            activatePluginInterfaces(self, \'robot_login\')\n-        user = \', \'.join(sorted(args))\n+            DomainAuthHelper.manage_addDomainAuthHelper(self.acl_users, "robot_login")\n+            activatePluginInterfaces(self, "robot_login")\n+        user = ", ".join(sorted(args))\n         self.acl_users.robot_login.manage_addMapping(\n-            match_type=\'regex\', match_string=\'.*\', roles=args, username=user)\n+            match_type="regex", match_string=".*", roles=args, username=user\n+        )\n \n     def set_autologin_username(self, username):\n-        """Update autologin mapping with the given username\n-        """\n+        """Update autologin mapping with the given username"""\n         disableCSRFProtection()\n-        if \'robot_login\' not in self.acl_users.objectIds():\n-            raise Exception(u"Autologin is not enabled")\n+        if "robot_login" not in self.acl_users.objectIds():\n+            raise Exception("Autologin is not enabled")\n         if len(self.acl_users.robot_login._domain_map) == 0:\n-            raise Exception(u"Autologin is not enabled")\n+            raise Exception("Autologin is not enabled")\n         domain_map_key = list(self.acl_users.robot_login._domain_map.keys())[0]\n         domain_map = self.acl_users.robot_login._domain_map[domain_map_key]\n-        domain_map[0][\'username\'] = username\n+        domain_map[0]["username"] = username\n         self.acl_users.robot_login._domain_map[domain_map_key] = domain_map\n \n     def disable_autologin(self):\n@@ -48,6 +46,6 @@ def disable_autologin(self):\n             Disable autologin\n \n         """\n-        if \'robot_login\' in self.acl_users.objectIds():\n+        if "robot_login" in self.acl_users.objectIds():\n             disableCSRFProtection()\n             self.acl_users.robot_login._domain_map.clear()\ndiff --git a/src/plone/app/robotframework/config.py b/src/plone/app/robotframework/config.py\nindex 5f03494..069551f 100644\n--- a/src/plone/app/robotframework/config.py\n+++ b/src/plone/app/robotframework/config.py\n@@ -4,7 +4,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.dexterity\')\n+    pkg_resources.get_distribution("plone.dexterity")\n except pkg_resources.DistributionNotFound:\n     HAS_DEXTERITY = False\n else:\n@@ -12,7 +12,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'z3c.relationfield\')\n+    pkg_resources.get_distribution("z3c.relationfield")\n except pkg_resources.DistributionNotFound:\n     HAS_DEXTERITY_RELATIONS = False\n else:\n@@ -20,7 +20,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'z3c.blobfile\')\n+    pkg_resources.get_distribution("z3c.blobfile")\n except pkg_resources.DistributionNotFound:\n     HAS_BLOBS = False\n else:\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex 26b0d2d..63865ee 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -43,19 +43,16 @@\n \n \n class Content(RemoteLibrary):\n-\n     def delete_content(self, uid_or_path):\n         """Delete content by uid or path"""\n         disableCSRFProtection()\n         portal = getSite()\n-        pc = getToolByName(portal, \'portal_catalog\')\n-        uid_results =\\\n-            pc.unrestrictedSearchResults(UID=uid_or_path)\n-        path_results = \\\n-            pc.unrestrictedSearchResults(\n-                path={\'query\': uid_or_path.rstrip(\'/\'), \'depth\': 0})\n-        content =\\\n-            (uid_results or path_results)[0]._unrestrictedGetObject()\n+        pc = getToolByName(portal, "portal_catalog")\n+        uid_results = pc.unrestrictedSearchResults(UID=uid_or_path)\n+        path_results = pc.unrestrictedSearchResults(\n+            path={"query": uid_or_path.rstrip("/"), "depth": 0}\n+        )\n+        content = (uid_results or path_results)[0]._unrestrictedGetObject()\n         content.aq_parent.manage_delObjects([content.getId()])\n \n     def create_content(self, *args, **kwargs):\n@@ -63,23 +60,21 @@ def create_content(self, *args, **kwargs):\n         disableCSRFProtection()\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n-        for arg in [x for x in args if \'=\' in x]:\n-            name, value = arg.split(\'=\', 1)\n+        for arg in [x for x in args if "=" in x]:\n+            name, value = arg.split("=", 1)\n             kwargs[name] = value\n \n-        assert \'type\' in kwargs, u"Keyword arguments must include \'type\'."\n-        portal_type = kwargs.get(\'type\')\n+        assert "type" in kwargs, "Keyword arguments must include \'type\'."\n+        portal_type = kwargs.get("type")\n         portal = getSite()\n-        if \'container\' in kwargs:\n-            pc = getToolByName(portal, \'portal_catalog\')\n-            uid_or_path = kwargs.pop(\'container\')\n-            uid_results =\\\n-                pc.unrestrictedSearchResults(UID=uid_or_path)\n-            path_results = \\\n-                pc.unrestrictedSearchResults(\n-                    path={\'query\': uid_or_path.rstrip(\'/\'), \'depth\': 0})\n-            container =\\\n-                (uid_results or path_results)[0]._unrestrictedGetObject()\n+        if "container" in kwargs:\n+            pc = getToolByName(portal, "portal_catalog")\n+            uid_or_path = kwargs.pop("container")\n+            uid_results = pc.unrestrictedSearchResults(UID=uid_or_path)\n+            path_results = pc.unrestrictedSearchResults(\n+                path={"query": uid_or_path.rstrip("/"), "depth": 0}\n+            )\n+            container = (uid_results or path_results)[0]._unrestrictedGetObject()\n         else:\n             container = portal\n \n@@ -89,36 +84,35 @@ def create_content(self, *args, **kwargs):\n         create_kwargs.update(kwargs)\n \n         if HAS_DEXTERITY:\n-            if portal_type in (\'File\', ) and \'file\' not in kwargs:\n+            if portal_type in ("File",) and "file" not in kwargs:\n                 pdf_file = os.path.join(\n-                    os.path.dirname(__file__), \'content\', u\'file.pdf\')\n-                with open(pdf_file, \'rb\') as f:\n+                    os.path.dirname(__file__), "content", "file.pdf"\n+                )\n+                with open(pdf_file, "rb") as f:\n                     file_data = f.read()\n                 value = NamedBlobFile(\n-                    data=file_data,\n-                    contentType=\'application/pdf\',\n-                    filename=u\'file.pdf\'\n+                    data=file_data, contentType="application/pdf", filename="file.pdf"\n                 )\n-                kwargs[\'file\'] = value\n+                kwargs["file"] = value\n \n-        if portal_type in (\'Image\', \'News Item\') and \'image\' not in kwargs:\n+        if portal_type in ("Image", "News Item") and "image" not in kwargs:\n             prefill_image_types(portal, kwargs)\n \n-        id_ = kwargs.pop(\'id\', None)\n-        type_ = kwargs.pop(\'type\')\n+        id_ = kwargs.pop("id", None)\n+        type_ = kwargs.pop("type")\n \n         content = None\n         if HAS_DEXTERITY:\n             # The title attribute for Dexterity types needs to be unicode\n-            if \'title\' in kwargs and isinstance(kwargs[\'title\'], six.binary_type):\n-                kwargs[\'title\'] = kwargs[\'title\'].decode(\'utf-8\')\n-                create_kwargs[\'title\'] = create_kwargs[\'title\'].decode(\'utf-8\')\n+            if "title" in kwargs and isinstance(kwargs["title"], six.binary_type):\n+                kwargs["title"] = kwargs["title"].decode("utf-8")\n+                create_kwargs["title"] = create_kwargs["title"].decode("utf-8")\n             from plone.dexterity.interfaces import IDexterityFTI\n             from plone.dexterity.utils import createContentInContainer\n+\n             try:\n                 getUtility(IDexterityFTI, name=type_)\n-                content = createContentInContainer(\n-                    container, type_, **create_kwargs)\n+                content = createContentInContainer(container, type_, **create_kwargs)\n                 if id_ is not None and content.id != id_:\n                     container.manage_renameObject(content.id, id_)\n             except ComponentLookupError:\n@@ -144,8 +138,9 @@ def create_content(self, *args, **kwargs):\n                     elif isinstance(kwargs[name], six.text_type):\n                         value = kwargs[name]\n                     else:\n-                        value = six.text_type(str(kwargs[name]), \'utf-8\',\n-                                        errors=\'ignore\')\n+                        value = six.text_type(\n+                            str(kwargs[name]), "utf-8", errors="ignore"\n+                        )\n                     converter = IDataConverter(widget)\n                     dm = queryMultiAdapter((content, field), IDataManager)\n                     if dm:\n@@ -154,7 +149,7 @@ def create_content(self, *args, **kwargs):\n         if content is None:\n             if id_ is None:\n                 normalizer = queryUtility(IURLNormalizer)\n-                id_ = normalizer.normalize(kwargs[\'title\'])\n+                id_ = normalizer.normalize(kwargs["title"])\n \n             # It must be Archetypes based content:\n             content = container[container.invokeFactory(type_, id_, **kwargs)]\n@@ -169,36 +164,36 @@ def set_field_value(self, uid, field, value, field_type):\n \n             XXX: Only dexterity fields are supported\n             """\n-            pc = getToolByName(self, \'portal_catalog\')\n+            pc = getToolByName(self, "portal_catalog")\n             results = pc.unrestrictedSearchResults(UID=uid)\n             obj = results[0]._unrestrictedGetObject()\n-            if field_type == \'float\':\n+            if field_type == "float":\n                 value = float(value)\n-            if field_type == \'int\':\n+            if field_type == "int":\n                 value = int(value)\n-            if field_type == \'list\':\n+            if field_type == "list":\n                 value = eval(value)\n-            if field_type.startswith(\'datetime\'):\n+            if field_type.startswith("datetime"):\n                 # field_type must begin with \'datetime\'\n                 # followed by optional format \'datetime%Y%m%d%H%M\'\n                 # without format: %Y%m%d%H%M is used\n                 field_type = field_type[8:]\n-                fmt = field_type and field_type or \'%Y%m%d%H%M\'\n+                fmt = field_type and field_type or "%Y%m%d%H%M"\n                 value = datetime.strptime(value, fmt)\n-            if field_type.startswith(\'date\'):\n+            if field_type.startswith("date"):\n                 # field_type must begin with \'date\'\n                 # followed by optional format \'date%Y%m%d\'\n                 # without format: %Y%m%d is used\n                 field_type = field_type[4:]\n-                fmt = field_type and field_type or \'%Y%m%d\'\n+                fmt = field_type and field_type or "%Y%m%d"\n                 value = datetime.strptime(value, fmt).date()\n-            if field_type == \'reference\' and HAS_DEXTERITY_RELATIONS:\n+            if field_type == "reference" and HAS_DEXTERITY_RELATIONS:\n                 results_referenced = pc.unrestrictedSearchResults(UID=value)\n                 referenced_obj = results_referenced[0]._unrestrictedGetObject()\n                 intids = getUtility(IIntIds)\n                 referenced_obj_intid = intids.getId(referenced_obj)\n                 value = RelationValue(referenced_obj_intid)\n-            if field_type == \'references\' and HAS_DEXTERITY_RELATIONS:\n+            if field_type == "references" and HAS_DEXTERITY_RELATIONS:\n                 values = eval(value)\n                 intids = getUtility(IIntIds)\n                 value = []\n@@ -207,32 +202,24 @@ def set_field_value(self, uid, field, value, field_type):\n                     referenced_obj = results_referenced[0]._unrestrictedGetObject()\n                     referenced_obj_intid = intids.getId(referenced_obj)\n                     value.append(RelationValue(referenced_obj_intid))\n-            if field_type == \'text/html\':\n-                value = RichTextValue(\n-                    value,\n-                    \'text/html\',\n-                    \'text/html\'\n-                )\n+            if field_type == "text/html":\n+                value = RichTextValue(value, "text/html", "text/html")\n                 obj.text = value\n-            if field_type == \'file\':\n+            if field_type == "file":\n                 pdf_file = os.path.join(\n-                    os.path.dirname(__file__), \'content\', u\'file.pdf\')\n-                with open(pdf_file, \'rb\') as f:\n+                    os.path.dirname(__file__), "content", "file.pdf"\n+                )\n+                with open(pdf_file, "rb") as f:\n                     file_data = f.read()\n                 value = NamedBlobFile(\n-                    data=file_data,\n-                    contentType=\'application/pdf\',\n-                    filename=u\'file.pdf\'\n+                    data=file_data, contentType="application/pdf", filename="file.pdf"\n                 )\n-            if field_type == \'image\':\n-                image_file = os.path.join(\n-                    os.path.dirname(__file__), u\'image.jpg\')\n-                with open(image_file, \'rb\') as f:\n+            if field_type == "image":\n+                image_file = os.path.join(os.path.dirname(__file__), "image.jpg")\n+                with open(image_file, "rb") as f:\n                     image_data = f.read()\n                 value = NamedBlobImage(\n-                    data=image_data,\n-                    contentType=\'image/jpg\',\n-                    filename=u\'image.jpg\'\n+                    data=image_data, contentType="image/jpg", filename="image.jpg"\n                 )\n \n             setattr(obj, field, value)\n@@ -241,7 +228,7 @@ def set_field_value(self, uid, field, value, field_type):\n \n     def uid_to_url(self, uid):\n         """Return absolute path for an UID"""\n-        pc = getToolByName(self, \'portal_catalog\')\n+        pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(UID=str(uid))\n         if not results:\n             return None\n@@ -250,9 +237,10 @@ def uid_to_url(self, uid):\n \n     def path_to_uid(self, path):\n         """Return UID for an absolute path"""\n-        pc = getToolByName(self, \'portal_catalog\')\n+        pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(\n-            path={\'query\': path.rstrip(\'/\'), \'depth\': 0})\n+            path={"query": path.rstrip("/"), "depth": 0}\n+        )\n         if not results:\n             return None\n         else:\n@@ -263,10 +251,10 @@ def fire_transition(self, content, action):\n         disableCSRFProtection()\n         # It should be ok to use unrestricted-methods, because workflow\n         # transition guard should proctect unprivileged transition:\n-        pc = getToolByName(self, \'portal_catalog\')\n+        pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(UID=content)\n         obj = results[0]._unrestrictedGetObject()\n-        wftool = getToolByName(obj, \'portal_workflow\')\n+        wftool = getToolByName(obj, "portal_workflow")\n         wftool.doActionFor(obj, action)\n \n     do_action_for = fire_transition\n@@ -280,8 +268,8 @@ def global_allow(self, type_, value=True):\n \n \n def prefill_image_types(portal, kwargs):\n-    portal_type = kwargs.get(\'type\')\n-    portal_types = getToolByName(portal, \'portal_types\')\n+    portal_type = kwargs.get("type")\n+    portal_types = getToolByName(portal, "portal_types")\n     fti = portal_types[portal_type]\n     if HAS_DEXTERITY and isinstance(fti, DexterityFTI):\n         prefill_image_types_dexterity(kwargs)\n@@ -296,21 +284,16 @@ def random_image():\n \n     import random\n \n-    img = Image.new(\'RGB\', (random.randint(320, 640),\n-                            random.randint(320, 640)))\n+    img = Image.new("RGB", (random.randint(320, 640), random.randint(320, 640)))\n     draw = ImageDraw.Draw(img)\n     draw.rectangle(\n         ((0, 0), img.size),\n-        fill=(\n-            random.randint(0, 255),\n-            random.randint(0, 255),\n-            random.randint(0, 255)\n-        )\n+        fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),\n     )\n     del draw\n \n     result = BytesIO()\n-    img.save(result, \'PNG\')\n+    img.save(result, "PNG")\n     result.seek(0)\n     return result\n \n@@ -318,13 +301,13 @@ def random_image():\n def prefill_image_types_dexterity(kwargs):\n     import random\n     import string\n+\n     image = random_image()\n-    filename = u\'{}.png\'.format(\'\'.join(\n-        random.choice(string.ascii_lowercase) for _ in range(6)\n-    ))\n-    kwargs[\'image\'] = NamedBlobImage(\n-        data=image, filename=filename)\n+    filename = "{}.png".format(\n+        "".join(random.choice(string.ascii_lowercase) for _ in range(6))\n+    )\n+    kwargs["image"] = NamedBlobImage(data=image, filename=filename)\n \n \n def prefill_image_types_archetypes(kwargs):\n-    kwargs[\'image\'] = random_image()\n+    kwargs["image"] = random_image()\ndiff --git a/src/plone/app/robotframework/genericsetup.py b/src/plone/app/robotframework/genericsetup.py\nindex 155a5ed..db493b5 100644\n--- a/src/plone/app/robotframework/genericsetup.py\n+++ b/src/plone/app/robotframework/genericsetup.py\n@@ -4,10 +4,10 @@\n \n \n class GenericSetup(RemoteLibrary):\n-\n     def apply_profile(self, name):\n         """Apply named profile"""\n         disableCSRFProtection()\n         from Products.CMFCore.utils import getToolByName\n-        portal_setup = getToolByName(self, \'portal_setup\')\n-        portal_setup.runAllImportStepsFromProfile(\'profile-%s\' % name)\n\\ No newline at end of file\n+\n+        portal_setup = getToolByName(self, "portal_setup")\n+        portal_setup.runAllImportStepsFromProfile("profile-%s" % name)\ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex f07392c..8405625 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -17,14 +17,13 @@\n \n \n class I18N(RemoteLibrary):\n-\n     def set_default_language(self, language=None):\n         """Change portal default language"""\n         disableCSRFProtection()\n         if language is None:\n-            language = os.environ.get(\'LANGUAGE\') or \'en\'\n+            language = os.environ.get("LANGUAGE") or "en"\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         settings.default_language = language\n \n     def translate(self, msgid, *args, **kwargs):\n@@ -32,27 +31,30 @@ def translate(self, msgid, *args, **kwargs):\n         # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n-        for arg in [x for x in args if \'=\' in x]:\n-            name, value = arg.split(\'=\', 1)\n+        for arg in [x for x in args if "=" in x]:\n+            name, value = arg.split("=", 1)\n             kwargs[name] = value\n \n         mapping = {}\n         for key, value in kwargs.items():\n-            if key not in (\'target_language\', \'domain\', \'default\'):\n+            if key not in ("target_language", "domain", "default"):\n                 mapping[key] = value\n-        if kwargs.get(\'target_language\'):\n+        if kwargs.get("target_language"):\n             return translate(\n                 msgid,\n-                target_langauge=kwargs.get(\'target_language\'),\n-                domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+                target_langauge=kwargs.get("target_language"),\n+                domain=kwargs.get("domain") or "plone",\n+                default=kwargs.get("default") or msgid,\n+                mapping=mapping,\n             )\n         else:\n             # XXX: Should self.REQUEST be replaced with\n             # zope.globalrequest.getRequest()?\n             request = getRequest()\n             return translate(\n-                msgid, context=request,\n-                domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+                msgid,\n+                context=request,\n+                domain=kwargs.get("domain") or "plone",\n+                default=kwargs.get("default") or msgid,\n+                mapping=mapping,\n             )\ndiff --git a/src/plone/app/robotframework/keywords.py b/src/plone/app/robotframework/keywords.py\nindex d070949..d02de9c 100644\n--- a/src/plone/app/robotframework/keywords.py\n+++ b/src/plone/app/robotframework/keywords.py\n@@ -3,20 +3,20 @@\n \n \n class LayoutMath:\n-\n     def get_offset_difference(self, source_offset, dest_offset, padding):\n         """Return dest_offset - source_offset + padding"""\n         return (int(dest_offset) - int(source_offset)) + int(padding)\n \n \n class Debugging:\n-\n     def stop(self):\n         """Pauses the test runner and drops it into Python debugger.\n         Enter \'c\' into debugger to continue.\n         """\n         import sys\n-        for attr in (\'stdin\', \'stdout\', \'stderr\'):\n-            setattr(sys, attr, getattr(sys, \'__%s__\' % attr))\n+\n+        for attr in ("stdin", "stdout", "stderr"):\n+            setattr(sys, attr, getattr(sys, "__%s__" % attr))\n         import pdb\n+\n         pdb.set_trace()\ndiff --git a/src/plone/app/robotframework/mailhost.py b/src/plone/app/robotframework/mailhost.py\nindex 0e27ec3..3ef876c 100644\n--- a/src/plone/app/robotframework/mailhost.py\n+++ b/src/plone/app/robotframework/mailhost.py\n@@ -3,11 +3,9 @@\n \n \n class MockMailHost(RemoteLibrary):\n-\n     def get_the_last_sent_email(self):\n-        """Return the last sent email from MockMailHost sent messages storage\n-        """\n-        return self.MailHost.messages[-1] if self.MailHost.messages else u""\n+        """Return the last sent email from MockMailHost sent messages storage"""\n+        return self.MailHost.messages[-1] if self.MailHost.messages else ""\n \n     def get_the_total_amount_of_sent_emails(self):\n         """Return the total amount of sent emails in MockMailHost sent messages\ndiff --git a/src/plone/app/robotframework/pybabel.py b/src/plone/app/robotframework/pybabel.py\nindex 73ead52..348fbf3 100644\n--- a/src/plone/app/robotframework/pybabel.py\n+++ b/src/plone/app/robotframework/pybabel.py\n@@ -4,14 +4,15 @@\n \n MESSAGES = []\n \n+\n def populate(self):\n     if self._value or self._comments:\n         self._setter(self._value, self._comments.value)\n     try:\n         parts = map(six.text_type.lower, self._value)\n-        index = parts.index(\'translate\')\n+        index = parts.index("translate")\n         comments = []\n-        for part in filter(lambda x: x.startswith(\'default=\'), self._value):\n+        for part in filter(lambda x: x.startswith("default="), self._value):\n             comments.append(\'Default: "%s"\' % part[8:])\n         MESSAGES.append((0, None, self._value[index + 1], comments))\n     except ValueError:\n@@ -19,6 +20,7 @@ def populate(self):\n     except IndexError:\n         pass\n \n+\n import robot\n import robot.parsing.tablepopulators\n import six\n@@ -27,9 +29,6 @@ def populate(self):\n robot.parsing.tablepopulators.StepPopulator.populate = populate\n \n \n-\n-\n-\n def extract_robot(fileobj, keywords, comment_tags, options):\n     global MESSAGES\n     try:\ndiff --git a/src/plone/app/robotframework/quickinstaller.py b/src/plone/app/robotframework/quickinstaller.py\nindex 62059f7..3534a81 100644\n--- a/src/plone/app/robotframework/quickinstaller.py\n+++ b/src/plone/app/robotframework/quickinstaller.py\n@@ -6,7 +6,6 @@\n \n \n class QuickInstaller(RemoteLibrary):\n-\n     def product_is_activated(self, product_name):\n         """Assert that given product_name is activated (installed) in\n         the add-ons control panel.\n@@ -14,10 +13,12 @@ def product_is_activated(self, product_name):\n         portal = getSite()\n         qi = get_installer(portal)\n         installed = qi.is_product_installed(product_name)\n-        portal_setup = getToolByName(portal, \'portal_setup\')\n+        portal_setup = getToolByName(portal, "portal_setup")\n         imported = portal_setup.getProfileImportDate(\n-            \'profile-{0}:default\'.format(product_name))\n-        assert installed or imported,\\\n-            u"Product \'{0}\' was not activated.".format(product_name)\n+            "profile-{0}:default".format(product_name)\n+        )\n+        assert installed or imported, "Product \'{0}\' was not activated.".format(\n+            product_name\n+        )\n \n     product_is_installed = product_is_activated\ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex e72ea22..afe2331 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -9,20 +9,20 @@\n \n \n def TIME():\n-    return time.strftime(\'%H:%M:%S\')\n+    return time.strftime("%H:%M:%S")\n \n \n def WAIT(msg):\n-    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n+    return "{0} [\\033[33m wait \\033[0m] {1}".format(TIME(), msg)\n \n \n def ERROR(msg):\n-    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+    return "{0} [\\033[31m ERROR \\033[0m] {1}".format(TIME(), msg)\n \n \n class Watcher(FileSystemEventHandler):\n \n-    allowed_extensions = set((\'po\', \'pt\', \'py\', \'xml\', \'csv\', \'zcml\'))\n+    allowed_extensions = set(("po", "pt", "py", "xml", "csv", "zcml"))\n \n     def __init__(self, paths, forkloop, minimum_wait=2.0):\n         FileSystemEventHandler.__init__(self)\n@@ -33,8 +33,7 @@ def __init__(self, paths, forkloop, minimum_wait=2.0):\n         self.last_event = time.time()\n \n     def start(self):\n-        """Start file monitoring thread\n-        """\n+        """Start file monitoring thread"""\n \n         signal.signal(signal.SIGINT, self._exitHandler)\n         signal.signal(signal.SIGTERM, self._exitHandler)\n@@ -51,7 +50,7 @@ def _exitHandler(self):\n             observer.stop()\n \n     def on_any_event(self, event):\n-        extension = event.src_path.split(\'.\')[-1].lower()\n+        extension = event.src_path.split(".")[-1].lower()\n \n         if extension in self.allowed_extensions:\n             event_type = event.event_type\n@@ -65,20 +64,21 @@ def on_any_event(self, event):\n                     break\n \n             if self.last_event + self.minimum_wait < time.time():\n-                print(WAIT("Watchdog got %s event on %s"\n-                           % (event_type, event_relpath)))\n+                print(WAIT("Watchdog got %s event on %s" % (event_type, event_relpath)))\n                 try:\n                     self.forkloop.forkNewChild()\n                     self.last_event = time.time()\n                 except Exception as e:\n                     print(ERROR(str(e)))\n             else:\n-                print(WAIT("Watchdog skipped %s event on %s"\n-                           % (event_type, event_relpath)))\n+                print(\n+                    WAIT(\n+                        "Watchdog skipped %s event on %s" % (event_type, event_relpath)\n+                    )\n+                )\n \n \n class ForkLoop(object):\n-\n     def __init__(self):\n \n         self.fork = True  # Must be \'True\' to create new child on start\n@@ -97,8 +97,8 @@ def isChild(self):\n     def isChildAlive(self):\n         if self.isChild():\n             return True\n-        elif self.child_pid is not None and os.path.exists(\'/proc\'):\n-            return os.path.exists(\'/proc/%i\' % self.child_pid)\n+        elif self.child_pid is not None and os.path.exists("/proc"):\n+            return os.path.exists("/proc/%i" % self.child_pid)\n         elif self.child_pid is not None:\n             try:\n                 os.kill(self.child_pid, 0)\n@@ -115,8 +115,7 @@ def _childIsGoingToDie(self, signum=None, frame=None):\n         self.killed_child = True\n \n     def start(self):\n-        """Start fork loop\n-        """\n+        """Start fork loop"""\n         # SIGCHLD tells us that child process has really died and we can spawn\n         # new child\n         signal.signal(signal.SIGCHLD, self._waitChildToDieAndScheduleNew)\n@@ -128,8 +127,7 @@ def start(self):\n         self.loop()\n \n     def loop(self):\n-        """Magic happens\n-        """\n+        """Magic happens"""\n         signal.signal(signal.SIGINT, self._parentExitHandler)\n         signal.signal(signal.SIGTERM, self._parentExitHandler)\n \n@@ -151,12 +149,14 @@ def loop(self):\n                     continue\n \n                 if not self.killed_child:\n-                    print(ERROR(\n-                        "Forked child process died on bootup. "\n-                        "Fix possible errors and save edits. "\n-                        "We are now paused until we detect the next file "\n-                        "change..."\n-                    ))\n+                    print(\n+                        ERROR(\n+                            "Forked child process died on bootup. "\n+                            "Fix possible errors and save edits. "\n+                            "We are now paused until we detect the next file "\n+                            "change..."\n+                        )\n+                    )\n \n                     # Child died because of unknown reason. Mark it as killed\n                     # and go into pause mode.\n@@ -187,16 +187,21 @@ def forkNewChild(self):\n \n         """\n         if not self.active:\n-            raise Exception("Cannot fork the process, because the fork loop "\n-                            "has not been started yet")\n+            raise Exception(\n+                "Cannot fork the process, because the fork loop "\n+                "has not been started yet"\n+            )\n \n         if self.forking:\n-            raise Exception("Cannot fork the process, because there should be "\n-                            "serious forking action already going on")\n+            raise Exception(\n+                "Cannot fork the process, because there should be "\n+                "serious forking action already going on"\n+            )\n \n         if self.child_pid is None:\n-            raise Exception("Cannot kill a process fork, because there should "\n-                            "not be one yet")\n+            raise Exception(\n+                "Cannot kill a process fork, because there should " "not be one yet"\n+            )\n \n         self.pause = False\n \n@@ -234,8 +239,9 @@ def _parentExitHandler(self, signum=None, frame=None):\n \n         while self.isChildAlive():\n             # XXX: Somehow this may get stuck if we don\'t print before kill\n-            print(WAIT("Fork loop is terminating its child process %s" %\n-                       self.child_pid))\n+            print(\n+                WAIT("Fork loop is terminating its child process %s" % self.child_pid)\n+            )\n             self._killChild()\n             time.sleep(2)\n \n@@ -270,11 +276,16 @@ def _waitChildToDieAndScheduleNew(self, signal=None, frame=None):\n                 print(WAIT("Fork loop terminated child process %d" % pid))\n \n             elif exit_flags:\n-                print(ERROR("Forked child process %d %s"\n-                            % (pid, ", ".join(exit_flags))))\n+                print(\n+                    ERROR("Forked child process %d %s" % (pid, ", ".join(exit_flags)))\n+                )\n             else:\n-                print(ERROR("Forked child process %d exited with code %s"\n-                            % (pid, exit_status)))\n+                print(\n+                    ERROR(\n+                        "Forked child process %d exited with code %s"\n+                        % (pid, exit_status)\n+                    )\n+                )\n \n         except OSError:\n             # OSError: [Errno 10] No child processes\ndiff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 0b2672d..3c6f6dd 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -12,44 +12,43 @@ class RemoteLibrary(SimpleItem):\n     http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#remote-library-interface\n     https://github.com/robotframework/PythonRemoteServer/blob/master/src/robotremoteserver.py\n     """\n+\n     def get_keyword_names(self):\n-        """Return names of the implemented keywords\n-        """\n+        """Return names of the implemented keywords"""\n         blacklist = dir(SimpleItem)\n-        blacklist.extend([\n-            \'get_keyword_names\',\n-            \'get_keyword_arguments\',\n-            \'get_keyword_documentation\',\n-            \'run_keyword\'\n-        ])\n-        names = [x for x in dir(self) if x[0] != \'_\' and x not in blacklist]\n+        blacklist.extend(\n+            [\n+                "get_keyword_names",\n+                "get_keyword_arguments",\n+                "get_keyword_documentation",\n+                "run_keyword",\n+            ]\n+        )\n+        names = [x for x in dir(self) if x[0] != "_" and x not in blacklist]\n         return names\n \n     def get_keyword_arguments(self, name):\n-        """Return keyword arguments\n-        """\n+        """Return keyword arguments"""\n         return None\n \n     def get_keyword_documentation(self, name):\n-        """Return keyword documentation\n-        """\n+        """Return keyword documentation"""\n         func = getattr(self, name, None)\n-        return func.__doc__ if func else u\'\'\n+        return func.__doc__ if func else ""\n \n     def run_keyword(self, name, args, kwargs={}):\n-        """Execute the specified keyword with given arguments.\n-        """\n+        """Execute the specified keyword with given arguments."""\n         func = getattr(self, name, None)\n-        result = {\'error\': \'\', \'return\': \'\'}\n+        result = {"error": "", "return": ""}\n         try:\n             retval = func(*args, **kwargs)\n         except Exception as e:\n-            result[\'status\'] = \'FAIL\'\n-            result[\'error\'] = str(e)\n+            result["status"] = "FAIL"\n+            result["error"] = str(e)\n         else:\n-            result[\'status\'] = \'PASS\'\n-            result[\'return\'] = retval\n-            result[\'output\'] = retval\n+            result["status"] = "PASS"\n+            result["return"] = retval\n+            result["output"] = retval\n         return result\n \n \n@@ -59,17 +58,17 @@ class RemoteLibraryLayer(Layer):\n     libraryBases = ()\n \n     def __init__(self, *args, **kwargs):\n-        kwargs[\'name\'] = kwargs.get(\'name\', \'RobotRemote\')\n-        self.libraryBases = (RemoteLibrary,) + kwargs.pop(\'libraries\', ())\n+        kwargs["name"] = kwargs.get("name", "RobotRemote")\n+        self.libraryBases = (RemoteLibrary,) + kwargs.pop("libraries", ())\n         super(RemoteLibraryLayer, self).__init__(*args, **kwargs)\n \n     def setUp(self):\n-        id_ = self.__name__.split(\':\')[-1]\n+        id_ = self.__name__.split(":")[-1]\n         assert id_ not in globals(), "Conflicting remote library id: %s" % id_\n         globals()[id_] = Remote = type(id_, self.libraryBases, {})\n         setattr(PloneSite, id_, Remote())\n \n     def tearDown(self):\n-        id_ = self.__name__.split(\':\')[-1]\n+        id_ = self.__name__.split(":")[-1]\n         delattr(PloneSite, id_)\n         del globals()[id_]\ndiff --git a/src/plone/app/robotframework/robotentrypoints.py b/src/plone/app/robotframework/robotentrypoints.py\nindex fe83b45..617f13a 100644\n--- a/src/plone/app/robotframework/robotentrypoints.py\n+++ b/src/plone/app/robotframework/robotentrypoints.py\n@@ -8,7 +8,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'robotframework-ride\')\n+    pkg_resources.get_distribution("robotframework-ride")\n except pkg_resources.DistributionNotFound:\n     HAS_RIDE = False\n else:\n@@ -20,36 +20,44 @@ def pybot():\n     # executing pybot against Sphinx-documentation:\n     from docutils.parsers.rst.directives import register_directive\n     from docutils.parsers.rst.roles import register_local_role\n+\n     dummy_directive = lambda *args: []\n     dummy_role = lambda *args: ([], [])\n-    options = (\'maxdepth\', \'creates\', \'numbered\', \'hidden\')\n-    setattr(dummy_directive, \'content\', True)\n-    setattr(dummy_directive, \'options\', dict([(opt, str) for opt in options]))\n-    register_directive(\'toctree\', dummy_directive)\n-    register_directive(\'robotframework\', dummy_directive)\n-    register_local_role(\'ref\', dummy_role)\n+    options = ("maxdepth", "creates", "numbered", "hidden")\n+    setattr(dummy_directive, "content", True)\n+    setattr(dummy_directive, "options", dict([(opt, str) for opt in options]))\n+    register_directive("toctree", dummy_directive)\n+    register_directive("robotframework", dummy_directive)\n+    register_local_role("ref", dummy_role)\n \n     # Run pybot\n     run_cli(sys.argv[1:])\n \n \n def robot():\n-    run_cli([\'--listener\', \'plone.app.robotframework.RobotListener\']\n-            + sys.argv[1:])\n+    run_cli(["--listener", "plone.app.robotframework.RobotListener"] + sys.argv[1:])\n \n \n def robot_debug():\n-    run_cli([\'--listener\', \'plone.app.robotframework.RobotListener\',\n-             \'-v\', \'SELENIUM_RUN_ON_FAILURE:Debug\']\n-            + sys.argv[1:])\n+    run_cli(\n+        [\n+            "--listener",\n+            "plone.app.robotframework.RobotListener",\n+            "-v",\n+            "SELENIUM_RUN_ON_FAILURE:Debug",\n+        ]\n+        + sys.argv[1:]\n+    )\n \n \n def ride():\n     if HAS_RIDE:\n         from robotide import main\n+\n         main(*sys.argv[1:])\n     else:\n-        print(u"""\\\n+        print(\n+            """\\\n Package robotframework-ride was not found. Please, install\n plone.app.robotframework with proper extras, like:\n \n@@ -63,7 +71,8 @@ def ride():\n wxPython installed, like:\n \n     /usr/bin/python bin/ride\n-""")\n+"""\n+        )\n \n \n def libdoc():\n@@ -73,23 +82,28 @@ def libdoc():\n def pybabel():\n     # This registers our minimal robot translation extractor\n     import babel.messages.extract\n-    babel.messages.extract.DEFAULT_MAPPING.extend([\n-        (\'**.rst\', \'plone.app.robotframework.pybabel:extract_robot\'),\n-        (\'**.robot\', \'plone.app.robotframework.pybabel:extract_robot\')\n-    ])\n+\n+    babel.messages.extract.DEFAULT_MAPPING.extend(\n+        [\n+            ("**.rst", "plone.app.robotframework.pybabel:extract_robot"),\n+            ("**.robot", "plone.app.robotframework.pybabel:extract_robot"),\n+        ]\n+    )\n \n     # This code hides warnings for known Sphinx-only-directives when\n     # executing pybot against Sphinx-documentation:\n     from docutils.parsers.rst.directives import register_directive\n     from docutils.parsers.rst.roles import register_local_role\n+\n     dummy_directive = lambda *args: []\n     dummy_role = lambda *args: ([], [])\n-    options = (\'maxdepth\', \'creates\', \'numbered\', \'hidden\')\n-    setattr(dummy_directive, \'content\', True)\n-    setattr(dummy_directive, \'options\', dict([(opt, str) for opt in options]))\n-    register_directive(\'toctree\', dummy_directive)\n-    register_directive(\'robotframework\', dummy_directive)\n-    register_local_role(\'ref\', dummy_role)\n+    options = ("maxdepth", "creates", "numbered", "hidden")\n+    setattr(dummy_directive, "content", True)\n+    setattr(dummy_directive, "options", dict([(opt, str) for opt in options]))\n+    register_directive("toctree", dummy_directive)\n+    register_directive("robotframework", dummy_directive)\n+    register_local_role("ref", dummy_role)\n \n     from babel.messages.frontend import main\n+\n     main()\ndiff --git a/src/plone/app/robotframework/saucelabs.py b/src/plone/app/robotframework/saucelabs.py\nindex b69b5bc..3091526 100644\n--- a/src/plone/app/robotframework/saucelabs.py\n+++ b/src/plone/app/robotframework/saucelabs.py\n@@ -9,42 +9,44 @@\n \n try:\n     import json\n+\n     json  # pyflakes\n except ImportError:\n     import simplejson as json\n \n \n-USERNAME_ACCESS_KEY = re.compile(r\'^(http|https)://([^:]+):([^@]+)@\')\n+USERNAME_ACCESS_KEY = re.compile(r"^(http|https)://([^:]+):([^@]+)@")\n \n \n class SauceLabs:\n-\n-    def report_sauce_status(self, name, status, tags=[], remote_url=\'\'):\n-        """Report test status and tags to SauceLabs\n-        """\n-        job_id = BuiltIn().get_library_instance(\n-            \'Selenium2Library\')._current_browser().session_id\n+    def report_sauce_status(self, name, status, tags=[], remote_url=""):\n+        """Report test status and tags to SauceLabs"""\n+        job_id = (\n+            BuiltIn()\n+            .get_library_instance("Selenium2Library")\n+            ._current_browser()\n+            .session_id\n+        )\n \n         if USERNAME_ACCESS_KEY.match(remote_url):\n-            username, access_key =\\\n-                USERNAME_ACCESS_KEY.findall(remote_url)[0][1:]\n+            username, access_key = USERNAME_ACCESS_KEY.findall(remote_url)[0][1:]\n         else:\n-            username = os.environ.get(\'SAUCE_USERNAME\')\n-            access_key = os.environ.get(\'SAUCE_ACCESS_KEY\')\n+            username = os.environ.get("SAUCE_USERNAME")\n+            access_key = os.environ.get("SAUCE_ACCESS_KEY")\n \n         if not job_id:\n-            return u"No Sauce job id found. Skipping..."\n+            return "No Sauce job id found. Skipping..."\n         elif not username or not access_key:\n-            return u"No Sauce environment variables found. Skipping..."\n+            return "No Sauce environment variables found. Skipping..."\n \n-        token = base64.encodestring(\'%s:%s\' % (username, access_key))[:-1]\n-        body = json.dumps({\'name\': name,\n-                           \'passed\': status == \'PASS\',\n-                           \'tags\': tags})\n+        token = base64.encodestring("%s:%s" % (username, access_key))[:-1]\n+        body = json.dumps({"name": name, "passed": status == "PASS", "tags": tags})\n \n-        connection = HTTPConnection(\'saucelabs.com\')\n-        connection.request(\'PUT\', \'/rest/v1/%s/jobs/%s\' % (\n-            username, job_id), body,\n-            headers={\'Authorization\': \'Basic %s\' % token}\n+        connection = HTTPConnection("saucelabs.com")\n+        connection.request(\n+            "PUT",\n+            "/rest/v1/%s/jobs/%s" % (username, job_id),\n+            body,\n+            headers={"Authorization": "Basic %s" % token},\n         )\n         return connection.getresponse().status\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 7070826..0b63f03 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -15,12 +15,13 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'watchdog\')\n+    pkg_resources.get_distribution("watchdog")\n except pkg_resources.DistributionNotFound:\n     HAS_RELOAD = False\n else:\n     from plone.app.robotframework.reload import ForkLoop\n     from plone.app.robotframework.reload import Watcher\n+\n     HAS_RELOAD = True\n \n try:\n@@ -39,19 +40,19 @@\n \n \n def TIME():\n-    return time.strftime(\'%H:%M:%S\')\n+    return time.strftime("%H:%M:%S")\n \n \n def WAIT(msg):\n-    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n+    return "{0} [\\033[33m wait \\033[0m] {1}".format(TIME(), msg)\n \n \n def ERROR(msg):\n-    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+    return "{0} [\\033[31m ERROR \\033[0m] {1}".format(TIME(), msg)\n \n \n def READY(msg):\n-    return \'{0} [\\033[32m ready \\033[0m] {1}\'.format(TIME(), msg)\n+    return "{0} [\\033[32m ready \\033[0m] {1}".format(TIME(), msg)\n \n \n def start(zope_layer_dotted_name):\n@@ -63,11 +64,10 @@ def start(zope_layer_dotted_name):\n \n     print(READY("Started Zope robot server"))\n \n-    listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n-                                  logRequests=False)\n+    listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT), logRequests=False)\n     listener.allow_none = True\n-    listener.register_function(zsl.zodb_setup, \'zodb_setup\')\n-    listener.register_function(zsl.zodb_teardown, \'zodb_teardown\')\n+    listener.register_function(zsl.zodb_setup, "zodb_setup")\n+    listener.register_function(zsl.zodb_teardown, "zodb_teardown")\n \n     print_urls(zsl.zope_layer, listener)\n \n@@ -92,18 +92,21 @@ def print_urls(zope_layer, xmlrpc_server):\n     for layer in zope_layer.baseResolutionOrder:\n         # Walk up the testing layers and look for the first zserver in order to get the\n         # actual server name and server port.\n-        zserver = getattr(layer, \'zserver\', None)\n+        zserver = getattr(layer, "zserver", None)\n         if not zserver:\n             continue\n-        print(\'ZSERVER: http://{}:{}\'.format(zserver.server_name, zserver.server_port))\n+        print("ZSERVER: http://{}:{}".format(zserver.server_name, zserver.server_port))\n         break\n \n-    print(\'XMLRPC: http://{0}:{1}\'.format(*xmlrpc_server.server_address))\n+    print("XMLRPC: http://{0}:{1}".format(*xmlrpc_server.server_address))\n \n \n-def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n-                 preload_layer_dotted_name=\'plone.app.testing.PLONE_FIXTURE\',\n-                 extensions=None):\n+def start_reload(\n+    zope_layer_dotted_name,\n+    reload_paths=("src",),\n+    preload_layer_dotted_name="plone.app.testing.PLONE_FIXTURE",\n+    extensions=None,\n+):\n \n     print(WAIT("Starting Zope robot server"))\n \n@@ -115,7 +118,7 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     if extensions:\n         watcher.allowed_extensions = extensions\n     elif HAS_DEBUG_MODE:\n-        watcher.allowed_extensions.remove(\'pt\')\n+        watcher.allowed_extensions.remove("pt")\n     watcher.start()\n     forkloop.start()\n \n@@ -131,7 +134,8 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     import platform\n     import socket\n     import time\n-    if \'Darwin\' in platform.uname():\n+\n+    if "Darwin" in platform.uname():\n         gethostbyaddr = socket.gethostbyaddr\n         socket.gethostbyaddr = lambda x: time.sleep(0.5) or (ZSERVER_HOST,)\n \n@@ -142,18 +146,18 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n \n     if HAS_DEBUG_MODE:\n         import App.config\n+\n         config = App.config.getConfiguration()\n         config.debug_mode = HAS_DEBUG_MODE\n         App.config.setConfiguration(config)\n \n-    if \'Darwin\' in platform.uname():\n+    if "Darwin" in platform.uname():\n         socket.gethostbyaddr = gethostbyaddr\n \n     print(READY("Zope robot server started"))\n \n     try:\n-        listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n-                                      logRequests=False)\n+        listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT), logRequests=False)\n     except socket.error as e:\n         print(ERROR(str(e)))\n         print(WAIT("Pruning Zope robot server"))\n@@ -162,8 +166,8 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n \n     listener.timeout = 0.5\n     listener.allow_none = True\n-    listener.register_function(zsl.zodb_setup, \'zodb_setup\')\n-    listener.register_function(zsl.zodb_teardown, \'zodb_teardown\')\n+    listener.register_function(zsl.zodb_setup, "zodb_setup")\n+    listener.register_function(zsl.zodb_teardown, "zodb_teardown")\n \n     try:\n         while not forkloop.exit:\n@@ -180,27 +184,30 @@ def server():\n         parser = argparse.ArgumentParser()\n     else:\n         parser = argparse.ArgumentParser(\n-            epilog=\'Note: require \\\'plone.app.robotframework\\\' with \'\n-                   \'\\\'[reload]\\\'-extras to get the automatic code reloading \'\n-                   \'support (powered by \\\'watchdog\\\').\')\n-    parser.add_argument(\'layer\')\n-    parser.add_argument(\'--debug-mode\', \'-d\', dest=\'debug_mode\',\n-                        action=\'store_true\')\n+            epilog="Note: require \'plone.app.robotframework\' with "\n+            "\'[reload]\'-extras to get the automatic code reloading "\n+            "support (powered by \'watchdog\')."\n+        )\n+    parser.add_argument("layer")\n+    parser.add_argument("--debug-mode", "-d", dest="debug_mode", action="store_true")\n     VERBOSE_HELP = (\n-        \'-v information about test layers setup and tear down, \'\n-        \'-vv add logging.WARNING messages, \'\n-        \'-vvv add INFO messages, -vvvv add DEBUG messages.\')\n-    parser.add_argument(\'--verbose\', \'-v\', action=\'count\', help=VERBOSE_HELP)\n+        "-v information about test layers setup and tear down, "\n+        "-vv add logging.WARNING messages, "\n+        "-vvv add INFO messages, -vvvv add DEBUG messages."\n+    )\n+    parser.add_argument("--verbose", "-v", action="count", help=VERBOSE_HELP)\n \n     if HAS_RELOAD:\n-        parser.add_argument(\'--reload-path\', \'-p\', dest=\'reload_paths\',\n-                            action=\'append\')\n-        parser.add_argument(\'--reload-extensions\', \'-x\', dest=\'extensions\',\n-                            nargs=\'*\', help=(\n-                                \'file extensions to watch for changes\'))\n-        parser.add_argument(\'--preload-layer\', \'-l\', dest=\'preload_layer\')\n-        parser.add_argument(\'--no-reload\', \'-n\', dest=\'reload\',\n-                            action=\'store_false\')\n+        parser.add_argument("--reload-path", "-p", dest="reload_paths", action="append")\n+        parser.add_argument(\n+            "--reload-extensions",\n+            "-x",\n+            dest="extensions",\n+            nargs="*",\n+            help=("file extensions to watch for changes"),\n+        )\n+        parser.add_argument("--preload-layer", "-l", dest="preload_layer")\n+        parser.add_argument("--no-reload", "-n", dest="reload", action="store_false")\n     args = parser.parse_args()\n \n     # Set debug mode\n@@ -224,9 +231,12 @@ def server():\n         except KeyboardInterrupt:\n             pass\n     else:\n-        start_reload(args.layer, args.reload_paths or [\'src\'],\n-                     args.preload_layer or \'plone.app.testing.PLONE_FIXTURE\',\n-                     args.extensions)\n+        start_reload(\n+            args.layer,\n+            args.reload_paths or ["src"],\n+            args.preload_layer or "plone.app.testing.PLONE_FIXTURE",\n+            args.extensions,\n+        )\n \n \n class RobotListener:\n@@ -234,8 +244,7 @@ class RobotListener:\n     ROBOT_LISTENER_API_VERSION = 2\n \n     def __init__(self):\n-        server_listener_address = \'http://%s:%s\' % (\n-            LISTENER_HOST, LISTENER_PORT)\n+        server_listener_address = "http://%s:%s" % (LISTENER_HOST, LISTENER_PORT)\n         self.server = ServerProxy(server_listener_address)\n \n     def start_test(self, name, attrs):\n@@ -244,6 +253,7 @@ def start_test(self, name, attrs):\n     def end_test(self, name, attrs):\n         self.server.zodb_teardown()\n \n+\n ZODB = RobotListener  # BBB\n \n \n@@ -257,10 +267,10 @@ def __init__(self):\n         self.extra_layers = {}\n \n     def _import_layer(self, layer_dotted_name):\n-        parts = layer_dotted_name.split(\'.\')\n+        parts = layer_dotted_name.split(".")\n         if len(parts) < 2:\n-            raise ValueError(\'no dot in layer dotted name\')\n-        module_name = \'.\'.join(parts[:-1])\n+            raise ValueError("no dot in layer dotted name")\n+        module_name = ".".join(parts[:-1])\n         layer_name = parts[-1]\n         __import__(module_name)\n         module = sys.modules[module_name]\n@@ -271,7 +281,7 @@ def start_zope_server(self, layer_dotted_name):\n         new_layer = self._import_layer(layer_dotted_name)\n         if self.zope_layer and self.zope_layer is not new_layer:\n             self.stop_zope_server(force=True)\n-        elif self.zope_layer and self.zope_layer.get(\'dirty\', False):\n+        elif self.zope_layer and self.zope_layer.get("dirty", False):\n             self.stop_zope_server(force=True)\n         setup_layer(new_layer)\n         self.zope_layer = new_layer\n@@ -313,12 +323,18 @@ def zodb_setup(self, layer_dotted_name=None):\n             self.set_zope_layer(layer_dotted_name)\n \n         from zope.testrunner.runner import order_by_bases\n+\n         layers = order_by_bases([self.zope_layer])\n         for layer in layers:\n-            if hasattr(layer, \'testSetUp\'):\n+            if hasattr(layer, "testSetUp"):\n                 if HAS_VERBOSE_CONSOLE:\n-                    print(WAIT("Test set up {0}.{1}".format(\n-                        layer.__module__, layer.__name__)))\n+                    print(\n+                        WAIT(\n+                            "Test set up {0}.{1}".format(\n+                                layer.__module__, layer.__name__\n+                            )\n+                        )\n+                    )\n                 layer.testSetUp()\n         if HAS_VERBOSE_CONSOLE:\n             print(READY("Test set up"))\n@@ -328,13 +344,19 @@ def zodb_teardown(self, layer_dotted_name=None):\n             self.set_zope_layer(layer_dotted_name)\n \n         from zope.testrunner.runner import order_by_bases\n+\n         layers = order_by_bases([self.zope_layer])\n         layers.reverse()\n         for layer in layers:\n-            if hasattr(layer, \'testTearDown\'):\n+            if hasattr(layer, "testTearDown"):\n                 if HAS_VERBOSE_CONSOLE:\n-                    print(WAIT("Test tear down {0}.{1}".format(\n-                        layer.__module__, layer.__name__)))\n+                    print(\n+                        WAIT(\n+                            "Test tear down {0}.{1}".format(\n+                                layer.__module__, layer.__name__\n+                            )\n+                        )\n+                    )\n                 layer.testTearDown()\n         if HAS_VERBOSE_CONSOLE:\n             print(READY("Test torn down"))\n@@ -349,17 +371,22 @@ def setup_layer(layer, setup_layers=setup_layers):\n         for base in layer.__bases__:\n             if base is not object:\n                 setup_layer(base, setup_layers)\n-        if hasattr(layer, \'setUp\'):\n+        if hasattr(layer, "setUp"):\n             name = "{0}.{1}".format(layer.__module__, layer.__name__)\n-            if HAS_VERBOSE_CONSOLE and name == \'plone.testing.z2.Startup\':\n-                print(WAIT("Set up {0}.{1} (debug-mode={2})".format(\n-                    layer.__module__, layer.__name__, HAS_DEBUG_MODE)))\n+            if HAS_VERBOSE_CONSOLE and name == "plone.testing.z2.Startup":\n+                print(\n+                    WAIT(\n+                        "Set up {0}.{1} (debug-mode={2})".format(\n+                            layer.__module__, layer.__name__, HAS_DEBUG_MODE\n+                        )\n+                    )\n+                )\n             elif HAS_VERBOSE_CONSOLE:\n-                print(WAIT("Set up {0}.{1}".format(layer.__module__,\n-                                                   layer.__name__)))\n+                print(WAIT("Set up {0}.{1}".format(layer.__module__, layer.__name__)))\n             layer.setUp()\n-            if HAS_DEBUG_MODE and name == \'plone.testing.z2.Startup\':\n+            if HAS_DEBUG_MODE and name == "plone.testing.z2.Startup":\n                 import App.config\n+\n                 config = App.config.getConfiguration()\n                 config.debug_mode = HAS_DEBUG_MODE\n                 App.config.setConfiguration(config)\n@@ -377,10 +404,11 @@ def tear_down(setup_layers=setup_layers):\n     for l in unneeded:\n         try:\n             try:\n-                if hasattr(l, \'tearDown\'):\n+                if hasattr(l, "tearDown"):\n                     if HAS_VERBOSE_CONSOLE:\n-                        print(WAIT("Tear down {0}.{1}".format(l.__module__,\n-                                                              l.__name__)))\n+                        print(\n+                            WAIT("Tear down {0}.{1}".format(l.__module__, l.__name__))\n+                        )\n                     l.tearDown()\n             except NotImplementedError:\n                 pass\n@@ -395,6 +423,7 @@ class Zope2ServerRemote(RemoteLibrary):\n \n     *WARNING* These keywords does not with zope.testrunner (yet).\n     """\n+\n     def remote_zodb_setup(self, layer_dotted_name):\n         Zope2Server().zodb_setup(layer_dotted_name)\n \n@@ -410,6 +439,7 @@ class LazyStop:\n     Usage: pybot --listener plone.app.robotframework.LazyStop\n \n     """\n+\n     ROBOT_LISTENER_API_VERSION = 2\n \n     def __init__(self):\n@@ -429,4 +459,4 @@ def setup(app):\n \n     """\n     Zope2Server.stop_zope_server_lazy = True\n-    app.connect(\'build-finished\', lambda app, exception: tear_down())\n+    app.connect("build-finished", lambda app, exception: tear_down())\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex ab4c054..6ccecb3 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -30,7 +30,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'collective.js.speakjs\')\n+    pkg_resources.get_distribution("collective.js.speakjs")\n except pkg_resources.DistributionNotFound:\n     HAS_SPEAKJS = False\n else:\n@@ -55,14 +55,12 @@ class SimplePublicationLayer(Layer):\n \n     def setUp(self):\n         with ploneSite() as portal:\n-            applyProfile(portal, \'plone.app.contenttypes:default\')\n-            portal.portal_workflow.setDefaultChain(\n-                \'simple_publication_workflow\'\n-            )\n+            applyProfile(portal, "plone.app.contenttypes:default")\n+            portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n     def tearDown(self):\n         with ploneSite() as portal:\n-            portal.portal_workflow.setDefaultChain(\'\')\n+            portal.portal_workflow.setDefaultChain("")\n \n \n SIMPLE_PUBLICATION_FIXTURE = SimplePublicationLayer()\n@@ -74,7 +72,7 @@ class SimplePublicationWithTypesLayer(Layer):\n \n     def setUp(self):\n         with ploneSite() as portal:\n-            applyProfile(portal, \'plone.app.contenttypes:default\')\n+            applyProfile(portal, "plone.app.contenttypes:default")\n \n \n SIMPLE_PUBLICATION_WITH_TYPES_FIXTURE = SimplePublicationLayer()\n@@ -93,18 +91,18 @@ def setUp(self):\n         from Products.CMFPlone.tests import utils\n \n         with ploneSite() as portal:\n-            portal.email_from_address = \'noreply@example.com\'\n-            portal.email_from_name = \'Plone Site\'\n+            portal.email_from_address = "noreply@example.com"\n+            portal.email_from_name = "Plone Site"\n             portal._original_MailHost = portal.MailHost\n-            portal.MailHost = mailhost = utils.MockMailHost(\'MailHost\')\n-            portal.MailHost.smtp_host = \'localhost\'\n+            portal.MailHost = mailhost = utils.MockMailHost("MailHost")\n+            portal.MailHost.smtp_host = "localhost"\n             sm = getSiteManager(context=portal)\n             sm.unregisterUtility(provided=IMailHost)\n             sm.registerUtility(mailhost, provided=IMailHost)\n \n     def tearDown(self):\n         with ploneSite() as portal:\n-            _o_mailhost = getattr(portal, \'_original_MailHost\', None)\n+            _o_mailhost = getattr(portal, "_original_MailHost", None)\n             if _o_mailhost:\n                 portal.MailHost = portal._original_MailHost\n                 sm = getSiteManager(context=portal)\n@@ -152,7 +150,7 @@ def tearDown(self):\n #\n \n RobotRemote = type(\n-    \'RobotRemote\',\n+    "RobotRemote",\n     (\n         AutoLogin,\n         QuickInstaller,\n@@ -163,7 +161,7 @@ def tearDown(self):\n         MockMailHost,\n         Zope2ServerRemote,\n     ),\n-    {\'__doc__\': \'Robot Framework remote library\', \'id\': \'RobotRemote\'},\n+    {"__doc__": "Robot Framework remote library", "id": "RobotRemote"},\n )()\n \n REMOTE_LIBRARY_ROBOT_TESTING = FunctionalTesting(\n@@ -209,14 +207,14 @@ def _get_robot_variable(self, name):\n         """Return robot list variable either from robot instance or\n         from ROBOT_-prefixed environment variable\n         """\n-        if getattr(BuiltIn(), \'_context\', None) is not None:\n-            value = BuiltIn().get_variable_value(\'${%s}\' % name, [])\n+        if getattr(BuiltIn(), "_context", None) is not None:\n+            value = BuiltIn().get_variable_value("${%s}" % name, [])\n             if isinstance(value, str) or isinstance(value, six.text_type):\n-                return value.split(\',\')\n+                return value.split(",")\n             else:\n                 return value\n         else:\n-            candidates = os.environ.get(name, \'\').split(\',\')\n+            candidates = os.environ.get(name, "").split(",")\n             return filter(bool, [s.strip() for s in candidates])\n \n     def setUpZope(self, app, configurationContext):\n@@ -224,65 +222,63 @@ def setUpZope(self, app, configurationContext):\n         # This installs the VHM in the Zope root, so we can have VHM support too\n         AppInitializer(app).install_virtual_hosting()\n \n-        for locales in self._get_robot_variable(\'REGISTER_TRANSLATIONS\'):\n+        for locales in self._get_robot_variable("REGISTER_TRANSLATIONS"):\n             if locales and os.path.isdir(locales):\n                 from zope.i18n.zcml import registerTranslations\n \n                 registerTranslations(configurationContext, locales)\n-                self[\'state\'].append(locales)\n+                self["state"].append(locales)\n \n-        for name in self._get_robot_variable(\'META_PACKAGES\'):\n+        for name in self._get_robot_variable("META_PACKAGES"):\n             if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\'meta.zcml\', package, context=configurationContext)\n-            self[\'state\'].append(name)\n+            xmlconfig.file("meta.zcml", package, context=configurationContext)\n+            self["state"].append(name)\n \n-        for name in self._get_robot_variable(\'CONFIGURE_PACKAGES\'):\n+        for name in self._get_robot_variable("CONFIGURE_PACKAGES"):\n             if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\n-                \'configure.zcml\', package, context=configurationContext\n-            )\n-            self[\'state\'].append(name)\n+            xmlconfig.file("configure.zcml", package, context=configurationContext)\n+            self["state"].append(name)\n \n-        for name in self._get_robot_variable(\'OVERRIDE_PACKAGES\'):\n+        for name in self._get_robot_variable("OVERRIDE_PACKAGES"):\n             if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n             xmlconfig.includeOverrides(\n-                configurationContext, \'overrides.zcml\', package=package\n+                configurationContext, "overrides.zcml", package=package\n             )\n-            self[\'state\'].append(name)\n+            self["state"].append(name)\n \n-        for name in self._get_robot_variable(\'INSTALL_PRODUCTS\'):\n+        for name in self._get_robot_variable("INSTALL_PRODUCTS"):\n             if name not in sys.modules:\n                 __import__(name)\n             zope_testing.installProduct(app, name)\n-            self[\'state\'].append(name)\n+            self["state"].append(name)\n \n     def setUpPloneSite(self, portal):\n-        for name in self._get_robot_variable(\'APPLY_PROFILES\'):\n+        for name in self._get_robot_variable("APPLY_PROFILES"):\n             self.applyProfile(portal, name)\n-            self[\'state\'].append(name)\n+            self["state"].append(name)\n \n     def setUp(self):\n-        self[\'state\'] = []\n+        self["state"] = []\n         super(PloneRobotFixture, self).setUp()\n \n         class Value:\n             __repr__ = lambda x: str(bool(x))\n-            __nonzero__ = lambda x: self.get(\'state\', []) != (\n-                self._get_robot_variable(\'REGISTER_TRANSLATIONS\')\n-                + self._get_robot_variable(\'META_PACKAGES\')\n-                + self._get_robot_variable(\'CONFIGURE_PACKAGES\')\n-                + self._get_robot_variable(\'OVERRIDE_PACKAGES\')\n-                + self._get_robot_variable(\'INSTALL_PRODUCTS\')\n-                + self._get_robot_variable(\'APPLY_PROFILES\')\n+            __nonzero__ = lambda x: self.get("state", []) != (\n+                self._get_robot_variable("REGISTER_TRANSLATIONS")\n+                + self._get_robot_variable("META_PACKAGES")\n+                + self._get_robot_variable("CONFIGURE_PACKAGES")\n+                + self._get_robot_variable("OVERRIDE_PACKAGES")\n+                + self._get_robot_variable("INSTALL_PRODUCTS")\n+                + self._get_robot_variable("APPLY_PROFILES")\n             )\n \n-        self[\'dirty\'] = Value()\n+        self["dirty"] = Value()\n \n \n PLONE_ROBOT_FIXTURE = PloneRobotFixture()\n@@ -291,7 +287,8 @@ class Value:\n     bases=(\n         PLONE_ROBOT_FIXTURE,\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-    ), name="PloneRobot:Integration"\n+    ),\n+    name="PloneRobot:Integration",\n )\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n@@ -299,7 +296,8 @@ class Value:\n         PLONE_ROBOT_FIXTURE,\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         WSGI_SERVER_FIXTURE,\n-    ), name="Plone:Robot"\n+    ),\n+    name="Plone:Robot",\n )\n \n \n@@ -313,13 +311,13 @@ def setUp(self):\n             import collective.js.speakjs\n \n             xmlconfig.file(\n-                \'configure.zcml\',\n+                "configure.zcml",\n                 collective.js.speakjs,\n-                context=self[\'configurationContext\'],\n+                context=self["configurationContext"],\n             )\n \n             with ploneSite() as portal:\n-                applyProfile(portal, \'collective.js.speakjs:default\')\n+                applyProfile(portal, "collective.js.speakjs:default")\n \n     SPEAKJS_FIXTURE = SpeakJSLayer()\n \ndiff --git a/src/plone/app/robotframework/tests/test_content.py b/src/plone/app/robotframework/tests/test_content.py\nindex 21a78ac..9052b24 100644\n--- a/src/plone/app/robotframework/tests/test_content.py\n+++ b/src/plone/app/robotframework/tests/test_content.py\n@@ -11,58 +11,40 @@ class TestCreateContent(unittest.TestCase):\n     layer = PLONE_ROBOT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def create_content(self, *args, **kwargs):\n         from plone.app.robotframework.content import Content\n+\n         Content().create_content(*args, **kwargs)\n \n     def test_create_content_without_id(self):\n-        self.create_content(\n-            type=\'Document\',\n-            title=\'Document 1\'\n-        )\n-        self.assertTrue(\'document-1\' in self.portal.objectIds())\n+        self.create_content(type="Document", title="Document 1")\n+        self.assertTrue("document-1" in self.portal.objectIds())\n \n     def test_create_content(self):\n-        self.create_content(\n-            type=\'Document\',\n-            id=\'doc1\',\n-            title=\'Document 1\'\n-        )\n-        self.assertTrue(\'doc1\' in self.portal.objectIds())\n+        self.create_content(type="Document", id="doc1", title="Document 1")\n+        self.assertTrue("doc1" in self.portal.objectIds())\n \n     def test_create_image(self):\n-        self.create_content(\n-            type=\'Image\',\n-            id=\'image1\',\n-            title=\'Image 1\'\n-        )\n-        self.assertTrue(\'image1\' in self.portal.objectIds())\n+        self.create_content(type="Image", id="image1", title="Image 1")\n+        self.assertTrue("image1" in self.portal.objectIds())\n \n     def test_create_news(self):\n-        self.create_content(\n-            type=\'News Item\',\n-            id=\'news1\',\n-            title=\'News 1\'\n-        )\n-        self.assertTrue(\'news1\' in self.portal.objectIds())\n+        self.create_content(type="News Item", id="news1", title="News 1")\n+        self.assertTrue("news1" in self.portal.objectIds())\n \n     def test_create_content_requires_type(self):\n         self.assertRaises(\n             AssertionError,\n             self.create_content,\n-            id=\'d\',\n+            id="d",\n         )\n \n     def test_create_content_updates_catalog(self):\n-        self.create_content(\n-            type=\'Document\',\n-            id=\'doc1\',\n-            title=\'Document 1\'\n-        )\n+        self.create_content(type="Document", id="doc1", title="Document 1")\n         catalog = getToolByName(self.portal, "portal_catalog")\n         self.assertEqual(len(catalog(portal_type="Document")), 1)\n \n@@ -72,24 +54,26 @@ class TestGlobalAllow(unittest.TestCase):\n     layer = PLONE_ROBOT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.types_tool = getToolByName(self.portal, "portal_types")\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def global_allow(self, *args, **kwargs):\n         from plone.app.robotframework.content import Content\n+\n         Content().global_allow(*args, **kwargs)\n \n     def test_global_allow(self):\n-        self.types_tool[\'Document\'].global_allow = False\n+        self.types_tool["Document"].global_allow = False\n         self.assertRaises(\n             ValueError,\n             self.portal.invokeFactory,\n-            \'Document\', \'doc1\',\n+            "Document",\n+            "doc1",\n         )\n \n-        self.global_allow(\'Document\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n+        self.global_allow("Document")\n+        self.portal.invokeFactory("Document", "doc1")\n \n-        self.assertTrue(\'doc1\' in self.portal.objectIds())\n+        self.assertTrue("doc1" in self.portal.objectIds())\ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex e10bcd7..1dc41f7 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -3,7 +3,7 @@\n from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n from plone.app.robotframework.testing import (  # noqa: E501\n-    SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING\n+    SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING,\n )\n from plone.testing import layered\n \n@@ -13,7 +13,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'collective.js.speakjs\')\n+    pkg_resources.get_distribution("collective.js.speakjs")\n except pkg_resources.DistributionNotFound:\n     HAS_SPEAKJS = False\n else:\n@@ -44,9 +44,7 @@ def test_suite():\n                 robotsuite.RobotTestSuite("test_users_library.robot"),\n                 layer=PLONE_ROBOT_TESTING,\n             ),\n-            layered(\n-                robotsuite.RobotTestSuite("docs"), layer=PLONE_ROBOT_TESTING\n-            ),\n+            layered(robotsuite.RobotTestSuite("docs"), layer=PLONE_ROBOT_TESTING),\n         ]\n     )\n \n@@ -58,7 +56,7 @@ def test_suite():\n                 layered(\n                     robotsuite.RobotTestSuite(\n                         "test_speakjs_library.robot",\n-                        noncritical=[\'non-critical\'],\n+                        noncritical=["non-critical"],\n                     ),\n                     layer=SPEAKJS_ROBOT_TESTING,\n                 )\ndiff --git a/src/plone/app/robotframework/tests/test_robotfixture.py b/src/plone/app/robotframework/tests/test_robotfixture.py\nindex 5ddca64..a4f3a18 100644\n--- a/src/plone/app/robotframework/tests/test_robotfixture.py\n+++ b/src/plone/app/robotframework/tests/test_robotfixture.py\n@@ -22,18 +22,17 @@\n \n \n class CustomPloneRobotFixture(PloneRobotFixture):\n-\n     def setUp(self):\n-        os.environ[\'CONFIGURE_PACKAGES\'] = \'plone.session\'\n-        os.environ[\'APPLY_PROFILES\'] = \'plone.session:default\'\n+        os.environ["CONFIGURE_PACKAGES"] = "plone.session"\n+        os.environ["APPLY_PROFILES"] = "plone.session:default"\n         super(CustomPloneRobotFixture, self).setUp()\n \n     def tearDown(self):\n         super(CustomPloneRobotFixture, self).tearDown()\n-        if \'CONFIGURE_PACKAGES\' in os.environ:\n-            del os.environ[\'CONFIGURE_PACKAGES\']\n-        if \'APPLY_PROFILES\' in os.environ:\n-            del os.environ[\'APPLY_PROFILES\']\n+        if "CONFIGURE_PACKAGES" in os.environ:\n+            del os.environ["CONFIGURE_PACKAGES"]\n+        if "APPLY_PROFILES" in os.environ:\n+            del os.environ["APPLY_PROFILES"]\n \n \n PLONE_ROBOT_FIXTURE = CustomPloneRobotFixture()\n@@ -44,15 +43,18 @@ def tearDown(self):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         WSGI_SERVER_FIXTURE,\n     ),\n-    name="Plone:Robot"\n+    name="Plone:Robot",\n )\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(robotsuite.RobotTestSuite(\n-                "test_robotfixture.robot"),\n-                layer=PLONE_ROBOT_TESTING),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                robotsuite.RobotTestSuite("test_robotfixture.robot"),\n+                layer=PLONE_ROBOT_TESTING,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py\nindex 804e306..8667164 100644\n--- a/src/plone/app/robotframework/users.py\n+++ b/src/plone/app/robotframework/users.py\n@@ -9,39 +9,37 @@\n \n \n class Users(RemoteLibrary):\n-\n     def create_user(self, *args, **kwargs):\n         """Create user with given details and return its id"""\n         disableCSRFProtection()\n         # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n-        for arg in [x for x in args if \'=\' in x]:\n-            name, value = arg.split(\'=\', 1)\n+        for arg in [x for x in args if "=" in x]:\n+            name, value = arg.split("=", 1)\n             kwargs[name] = value\n \n-        assert len(args), u"username must be provided."\n+        assert len(args), "username must be provided."\n         username = args[0]\n \n         roles = []\n         properties = kwargs\n-        for arg in [x for x in args[1:] if \'=\' not in x]:\n+        for arg in [x for x in args[1:] if "=" not in x]:\n             roles.append(arg)\n \n-        if \'email\' not in properties:\n-            properties[\'email\'] = \'%s@example.com\' % username\n+        if "email" not in properties:\n+            properties["email"] = "%s@example.com" % username\n \n         portal = getSite()\n-        registration = getToolByName(portal, \'portal_registration\')\n+        registration = getToolByName(portal, "portal_registration")\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n-        use_email_as_username = getattr(settings, \'use_email_as_login\', None)\n-        user_id = use_email_as_username and properties[\'email\'] or username\n-        password = properties.pop(\'password\', username)\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        use_email_as_username = getattr(settings, "use_email_as_login", None)\n+        user_id = use_email_as_username and properties["email"] or username\n+        password = properties.pop("password", username)\n \n-        roles.extend(properties.pop(\'roles\', []))\n+        roles.extend(properties.pop("roles", []))\n         if not roles:\n-            roles.append(\'Member\')\n-        properties[\'username\'] = user_id\n-        registration.addMember(\n-            user_id, password, roles, properties=properties)\n+            roles.append("Member")\n+        properties["username"] = user_id\n+        registration.addMember(user_id, password, roles, properties=properties)\ndiff --git a/src/plone/app/robotframework/utils.py b/src/plone/app/robotframework/utils.py\nindex 7338795..da55a3b 100644\n--- a/src/plone/app/robotframework/utils.py\n+++ b/src/plone/app/robotframework/utils.py\n@@ -6,9 +6,10 @@\n     from plone.protect.interfaces import IDisableCSRFProtection\n except ImportError:\n     from zope.interface import Interface\n+\n     class IDisableCSRFProtection(Interface):\n         pass\n \n \n def disableCSRFProtection():\n-    alsoProvides(getRequest(), IDisableCSRFProtection)\n\\ No newline at end of file\n+    alsoProvides(getRequest(), IDisableCSRFProtection)\ndiff --git a/src/plone/app/robotframework/variables.py b/src/plone/app/robotframework/variables.py\nindex 7489cea..2337739 100644\n--- a/src/plone/app/robotframework/variables.py\n+++ b/src/plone/app/robotframework/variables.py\n@@ -7,11 +7,11 @@\n ZOPE_HOST = WSGI_SERVER_FIXTURE.host\n ZOPE_PORT = WSGI_SERVER_FIXTURE.port\n \n-CMFPLONE_VERSION = pkg_resources.get_distribution(\'Products.CMFPlone\').version\n+CMFPLONE_VERSION = pkg_resources.get_distribution("Products.CMFPlone").version\n \n-if CMFPLONE_VERSION.startswith(\'4.\'):\n-    CMFPLONE_SELECTORS = \'selectors/cmfplone43.robot\'\n-elif CMFPLONE_VERSION.startswith(\'5.\'):\n-    CMFPLONE_SELECTORS = \'selectors/cmfplone50.robot\'\n-elif CMFPLONE_VERSION.startswith(\'6.\'):\n-    CMFPLONE_SELECTORS = \'selectors/cmfplone60.robot\'\n+if CMFPLONE_VERSION.startswith("4."):\n+    CMFPLONE_SELECTORS = "selectors/cmfplone43.robot"\n+elif CMFPLONE_VERSION.startswith("5."):\n+    CMFPLONE_SELECTORS = "selectors/cmfplone50.robot"\n+elif CMFPLONE_VERSION.startswith("6."):\n+    CMFPLONE_SELECTORS = "selectors/cmfplone60.robot"\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:06:14+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/4211e0f2df7064b107dbce0fb52d3de7b11f26d0

pyupgrade --py36-plus

I kept 3.6 compatibility, because we might need this to test plone.restapi on Plone 5.2-Py3.

Files changed:
M docs/source/conf.py
M src/plone/app/robotframework/__init__.py
M src/plone/app/robotframework/annotate.py
M src/plone/app/robotframework/autologin.py
M src/plone/app/robotframework/config.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/genericsetup.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/keywords.py
M src/plone/app/robotframework/mailhost.py
M src/plone/app/robotframework/patches.py
M src/plone/app/robotframework/pybabel.py
M src/plone/app/robotframework/quickinstaller.py
M src/plone/app/robotframework/reload.py
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/robotentrypoints.py
M src/plone/app/robotframework/saucelabs.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_robot.py
M src/plone/app/robotframework/tests/test_robotfixture.py
M src/plone/app/robotframework/users.py
M src/plone/app/robotframework/variables.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 12a3696..7743766 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.robotframework documentation build configuration file, created by\n # sphinx-quickstart on Wed Sep 12 14:43:02 2012.\ndiff --git a/src/plone/app/robotframework/__init__.py b/src/plone/app/robotframework/__init__.py\nindex ff3197a..ee4b7e6 100644\n--- a/src/plone/app/robotframework/__init__.py\n+++ b/src/plone/app/robotframework/__init__.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n # Stand-alone Python keyword libraries\n # Load our patches.  Call it _patches to mark it as private.\n from plone.app.robotframework import patches as _patches\ndiff --git a/src/plone/app/robotframework/annotate.py b/src/plone/app/robotframework/annotate.py\nindex 39577b5..7e73f56 100644\n--- a/src/plone/app/robotframework/annotate.py\n+++ b/src/plone/app/robotframework/annotate.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n import os.path\n \n \ndiff --git a/src/plone/app/robotframework/autologin.py b/src/plone/app/robotframework/autologin.py\nindex b13be9c..a6f8b50 100644\n--- a/src/plone/app/robotframework/autologin.py\n+++ b/src/plone/app/robotframework/autologin.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from Products.PlonePAS.setuphandlers import activatePluginInterfaces\ndiff --git a/src/plone/app/robotframework/config.py b/src/plone/app/robotframework/config.py\nindex 069551f..ba5d8b3 100644\n--- a/src/plone/app/robotframework/config.py\n+++ b/src/plone/app/robotframework/config.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n import pkg_resources\n \n \ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex 63865ee..4971dd7 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from plone.app.robotframework.config import HAS_BLOBS\n from plone.app.robotframework.config import HAS_DEXTERITY\n@@ -104,7 +103,7 @@ def create_content(self, *args, **kwargs):\n         content = None\n         if HAS_DEXTERITY:\n             # The title attribute for Dexterity types needs to be unicode\n-            if "title" in kwargs and isinstance(kwargs["title"], six.binary_type):\n+            if "title" in kwargs and isinstance(kwargs["title"], bytes):\n                 kwargs["title"] = kwargs["title"].decode("utf-8")\n                 create_kwargs["title"] = create_kwargs["title"].decode("utf-8")\n             from plone.dexterity.interfaces import IDexterityFTI\n@@ -135,10 +134,10 @@ def create_content(self, *args, **kwargs):\n                 if widget and name in kwargs:\n                     if not IFromUnicode.providedBy(field):\n                         value = kwargs[name]\n-                    elif isinstance(kwargs[name], six.text_type):\n+                    elif isinstance(kwargs[name], str):\n                         value = kwargs[name]\n                     else:\n-                        value = six.text_type(\n+                        value = str(\n                             str(kwargs[name]), "utf-8", errors="ignore"\n                         )\n                     converter = IDataConverter(widget)\ndiff --git a/src/plone/app/robotframework/genericsetup.py b/src/plone/app/robotframework/genericsetup.py\nindex db493b5..301587f 100644\n--- a/src/plone/app/robotframework/genericsetup.py\n+++ b/src/plone/app/robotframework/genericsetup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n \ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex 8405625..d6f8dc0 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\ndiff --git a/src/plone/app/robotframework/keywords.py b/src/plone/app/robotframework/keywords.py\nindex d02de9c..ed55cb4 100644\n--- a/src/plone/app/robotframework/keywords.py\n+++ b/src/plone/app/robotframework/keywords.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Standalone Python keyword-libraries"""\n \n \ndiff --git a/src/plone/app/robotframework/mailhost.py b/src/plone/app/robotframework/mailhost.py\nindex 3ef876c..3c65b69 100644\n--- a/src/plone/app/robotframework/mailhost.py\n+++ b/src/plone/app/robotframework/mailhost.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n \n \ndiff --git a/src/plone/app/robotframework/patches.py b/src/plone/app/robotframework/patches.py\nindex a3bd285..4232c2f 100644\n--- a/src/plone/app/robotframework/patches.py\n+++ b/src/plone/app/robotframework/patches.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Patch selenium.is_connectable for Python 3.\n # See https://github.com/SeleniumHQ/selenium/pull/6480\n # and for Plone: https://github.com/plone/Products.CMFPlone/issues/2786\ndiff --git a/src/plone/app/robotframework/pybabel.py b/src/plone/app/robotframework/pybabel.py\nindex 348fbf3..5c2f7a8 100644\n--- a/src/plone/app/robotframework/pybabel.py\n+++ b/src/plone/app/robotframework/pybabel.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n # WARNING: This module must not be imported outside running babel\n \n MESSAGES = []\n@@ -9,7 +7,7 @@ def populate(self):\n     if self._value or self._comments:\n         self._setter(self._value, self._comments.value)\n     try:\n-        parts = map(six.text_type.lower, self._value)\n+        parts = map(str.lower, self._value)\n         index = parts.index("translate")\n         comments = []\n         for part in filter(lambda x: x.startswith("default="), self._value):\ndiff --git a/src/plone/app/robotframework/quickinstaller.py b/src/plone/app/robotframework/quickinstaller.py\nindex 3534a81..123188c 100644\n--- a/src/plone/app/robotframework/quickinstaller.py\n+++ b/src/plone/app/robotframework/quickinstaller.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import get_installer\n@@ -15,9 +14,9 @@ def product_is_activated(self, product_name):\n         installed = qi.is_product_installed(product_name)\n         portal_setup = getToolByName(portal, "portal_setup")\n         imported = portal_setup.getProfileImportDate(\n-            "profile-{0}:default".format(product_name)\n+            f"profile-{product_name}:default"\n         )\n-        assert installed or imported, "Product \'{0}\' was not activated.".format(\n+        assert installed or imported, "Product \'{}\' was not activated.".format(\n             product_name\n         )\n \ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex afe2331..2f5edb1 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from watchdog.events import FileSystemEventHandler\n from watchdog.observers import Observer\n \n@@ -13,16 +11,16 @@ def TIME():\n \n \n def WAIT(msg):\n-    return "{0} [\\033[33m wait \\033[0m] {1}".format(TIME(), msg)\n+    return f"{TIME()} [\\033[33m wait \\033[0m] {msg}"\n \n \n def ERROR(msg):\n-    return "{0} [\\033[31m ERROR \\033[0m] {1}".format(TIME(), msg)\n+    return f"{TIME()} [\\033[31m ERROR \\033[0m] {msg}"\n \n \n class Watcher(FileSystemEventHandler):\n \n-    allowed_extensions = set(("po", "pt", "py", "xml", "csv", "zcml"))\n+    allowed_extensions = {"po", "pt", "py", "xml", "csv", "zcml"}\n \n     def __init__(self, paths, forkloop, minimum_wait=2.0):\n         FileSystemEventHandler.__init__(self)\n@@ -64,7 +62,7 @@ def on_any_event(self, event):\n                     break\n \n             if self.last_event + self.minimum_wait < time.time():\n-                print(WAIT("Watchdog got %s event on %s" % (event_type, event_relpath)))\n+                print(WAIT(f"Watchdog got {event_type} event on {event_relpath}"))\n                 try:\n                     self.forkloop.forkNewChild()\n                     self.last_event = time.time()\n@@ -73,12 +71,12 @@ def on_any_event(self, event):\n             else:\n                 print(\n                     WAIT(\n-                        "Watchdog skipped %s event on %s" % (event_type, event_relpath)\n+                        f"Watchdog skipped {event_type} event on {event_relpath}"\n                     )\n                 )\n \n \n-class ForkLoop(object):\n+class ForkLoop:\n     def __init__(self):\n \n         self.fork = True  # Must be \'True\' to create new child on start\ndiff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 3c6f6dd..74345e9 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import ploneSite\n@@ -60,7 +59,7 @@ class RemoteLibraryLayer(Layer):\n     def __init__(self, *args, **kwargs):\n         kwargs["name"] = kwargs.get("name", "RobotRemote")\n         self.libraryBases = (RemoteLibrary,) + kwargs.pop("libraries", ())\n-        super(RemoteLibraryLayer, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n \n     def setUp(self):\n         id_ = self.__name__.split(":")[-1]\ndiff --git a/src/plone/app/robotframework/robotentrypoints.py b/src/plone/app/robotframework/robotentrypoints.py\nindex 617f13a..9a7cf4c 100644\n--- a/src/plone/app/robotframework/robotentrypoints.py\n+++ b/src/plone/app/robotframework/robotentrypoints.py\n@@ -1,5 +1,3 @@\n-from __future__ import print_function\n-\n from robot import libdoc as ld\n from robot import run_cli\n \n@@ -25,7 +23,7 @@ def pybot():\n     dummy_role = lambda *args: ([], [])\n     options = ("maxdepth", "creates", "numbered", "hidden")\n     setattr(dummy_directive, "content", True)\n-    setattr(dummy_directive, "options", dict([(opt, str) for opt in options]))\n+    setattr(dummy_directive, "options", {opt: str for opt in options})\n     register_directive("toctree", dummy_directive)\n     register_directive("robotframework", dummy_directive)\n     register_local_role("ref", dummy_role)\n@@ -99,7 +97,7 @@ def pybabel():\n     dummy_role = lambda *args: ([], [])\n     options = ("maxdepth", "creates", "numbered", "hidden")\n     setattr(dummy_directive, "content", True)\n-    setattr(dummy_directive, "options", dict([(opt, str) for opt in options]))\n+    setattr(dummy_directive, "options", {opt: str for opt in options})\n     register_directive("toctree", dummy_directive)\n     register_directive("robotframework", dummy_directive)\n     register_local_role("ref", dummy_role)\ndiff --git a/src/plone/app/robotframework/saucelabs.py b/src/plone/app/robotframework/saucelabs.py\nindex 3091526..1965afb 100644\n--- a/src/plone/app/robotframework/saucelabs.py\n+++ b/src/plone/app/robotframework/saucelabs.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from robot.libraries.BuiltIn import BuiltIn\n from six.moves.http_client import HTTPConnection\n \n@@ -39,13 +38,13 @@ def report_sauce_status(self, name, status, tags=[], remote_url=""):\n         elif not username or not access_key:\n             return "No Sauce environment variables found. Skipping..."\n \n-        token = base64.encodestring("%s:%s" % (username, access_key))[:-1]\n+        token = base64.encodestring(f"{username}:{access_key}")[:-1]\n         body = json.dumps({"name": name, "passed": status == "PASS", "tags": tags})\n \n         connection = HTTPConnection("saucelabs.com")\n         connection.request(\n             "PUT",\n-            "/rest/v1/%s/jobs/%s" % (username, job_id),\n+            f"/rest/v1/{username}/jobs/{job_id}",\n             body,\n             headers={"Authorization": "Basic %s" % token},\n         )\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 0b63f03..faa55d5 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -1,6 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import print_function\n-\n from plone.app.robotframework.remote import RemoteLibrary\n from six.moves.xmlrpc_client import ServerProxy\n from six.moves.xmlrpc_server import SimpleXMLRPCServer\n@@ -44,15 +41,15 @@ def TIME():\n \n \n def WAIT(msg):\n-    return "{0} [\\033[33m wait \\033[0m] {1}".format(TIME(), msg)\n+    return f"{TIME()} [\\033[33m wait \\033[0m] {msg}"\n \n \n def ERROR(msg):\n-    return "{0} [\\033[31m ERROR \\033[0m] {1}".format(TIME(), msg)\n+    return f"{TIME()} [\\033[31m ERROR \\033[0m] {msg}"\n \n \n def READY(msg):\n-    return "{0} [\\033[32m ready \\033[0m] {1}".format(TIME(), msg)\n+    return f"{TIME()} [\\033[32m ready \\033[0m] {msg}"\n \n \n def start(zope_layer_dotted_name):\n@@ -95,10 +92,10 @@ def print_urls(zope_layer, xmlrpc_server):\n         zserver = getattr(layer, "zserver", None)\n         if not zserver:\n             continue\n-        print("ZSERVER: http://{}:{}".format(zserver.server_name, zserver.server_port))\n+        print(f"ZSERVER: http://{zserver.server_name}:{zserver.server_port}")\n         break\n \n-    print("XMLRPC: http://{0}:{1}".format(*xmlrpc_server.server_address))\n+    print("XMLRPC: http://{}:{}".format(*xmlrpc_server.server_address))\n \n \n def start_reload(\n@@ -158,7 +155,7 @@ def start_reload(\n \n     try:\n         listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT), logRequests=False)\n-    except socket.error as e:\n+    except OSError as e:\n         print(ERROR(str(e)))\n         print(WAIT("Pruning Zope robot server"))\n         zsl.prune_zope_server()\n@@ -172,7 +169,7 @@ def start_reload(\n     try:\n         while not forkloop.exit:\n             listener.handle_request()\n-    except select.error:  # Interrupted system call\n+    except OSError:  # Interrupted system call\n         pass\n     finally:\n         print(WAIT("Pruning Zope robot server"))\n@@ -244,7 +241,7 @@ class RobotListener:\n     ROBOT_LISTENER_API_VERSION = 2\n \n     def __init__(self):\n-        server_listener_address = "http://%s:%s" % (LISTENER_HOST, LISTENER_PORT)\n+        server_listener_address = f"http://{LISTENER_HOST}:{LISTENER_PORT}"\n         self.server = ServerProxy(server_listener_address)\n \n     def start_test(self, name, attrs):\n@@ -330,7 +327,7 @@ def zodb_setup(self, layer_dotted_name=None):\n                 if HAS_VERBOSE_CONSOLE:\n                     print(\n                         WAIT(\n-                            "Test set up {0}.{1}".format(\n+                            "Test set up {}.{}".format(\n                                 layer.__module__, layer.__name__\n                             )\n                         )\n@@ -352,7 +349,7 @@ def zodb_teardown(self, layer_dotted_name=None):\n                 if HAS_VERBOSE_CONSOLE:\n                     print(\n                         WAIT(\n-                            "Test tear down {0}.{1}".format(\n+                            "Test tear down {}.{}".format(\n                                 layer.__module__, layer.__name__\n                             )\n                         )\n@@ -372,17 +369,17 @@ def setup_layer(layer, setup_layers=setup_layers):\n             if base is not object:\n                 setup_layer(base, setup_layers)\n         if hasattr(layer, "setUp"):\n-            name = "{0}.{1}".format(layer.__module__, layer.__name__)\n+            name = f"{layer.__module__}.{layer.__name__}"\n             if HAS_VERBOSE_CONSOLE and name == "plone.testing.z2.Startup":\n                 print(\n                     WAIT(\n-                        "Set up {0}.{1} (debug-mode={2})".format(\n+                        "Set up {}.{} (debug-mode={})".format(\n                             layer.__module__, layer.__name__, HAS_DEBUG_MODE\n                         )\n                     )\n                 )\n             elif HAS_VERBOSE_CONSOLE:\n-                print(WAIT("Set up {0}.{1}".format(layer.__module__, layer.__name__)))\n+                print(WAIT(f"Set up {layer.__module__}.{layer.__name__}"))\n             layer.setUp()\n             if HAS_DEBUG_MODE and name == "plone.testing.z2.Startup":\n                 import App.config\n@@ -407,7 +404,7 @@ def tear_down(setup_layers=setup_layers):\n                 if hasattr(l, "tearDown"):\n                     if HAS_VERBOSE_CONSOLE:\n                         print(\n-                            WAIT("Tear down {0}.{1}".format(l.__module__, l.__name__))\n+                            WAIT(f"Tear down {l.__module__}.{l.__name__}")\n                         )\n                     l.tearDown()\n             except NotImplementedError:\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 6ccecb3..15c6522 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test layers required to run plone.app.robotframework tests."""\n from Acquisition import aq_base\n from OFS.Application import AppInitializer\n@@ -209,7 +208,7 @@ def _get_robot_variable(self, name):\n         """\n         if getattr(BuiltIn(), "_context", None) is not None:\n             value = BuiltIn().get_variable_value("${%s}" % name, [])\n-            if isinstance(value, str) or isinstance(value, six.text_type):\n+            if isinstance(value, str) or isinstance(value, str):\n                 return value.split(",")\n             else:\n                 return value\n@@ -265,7 +264,7 @@ def setUpPloneSite(self, portal):\n \n     def setUp(self):\n         self["state"] = []\n-        super(PloneRobotFixture, self).setUp()\n+        super().setUp()\n \n         class Value:\n             __repr__ = lambda x: str(bool(x))\ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 1dc41f7..72aa087 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\ndiff --git a/src/plone/app/robotframework/tests/test_robotfixture.py b/src/plone/app/robotframework/tests/test_robotfixture.py\nindex a4f3a18..c8ee9bf 100644\n--- a/src/plone/app/robotframework/tests/test_robotfixture.py\n+++ b/src/plone/app/robotframework/tests/test_robotfixture.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.testing import PloneRobotFixture\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.testing import layered\n@@ -25,10 +24,10 @@ class CustomPloneRobotFixture(PloneRobotFixture):\n     def setUp(self):\n         os.environ["CONFIGURE_PACKAGES"] = "plone.session"\n         os.environ["APPLY_PROFILES"] = "plone.session:default"\n-        super(CustomPloneRobotFixture, self).setUp()\n+        super().setUp()\n \n     def tearDown(self):\n-        super(CustomPloneRobotFixture, self).tearDown()\n+        super().tearDown()\n         if "CONFIGURE_PACKAGES" in os.environ:\n             del os.environ["CONFIGURE_PACKAGES"]\n         if "APPLY_PROFILES" in os.environ:\ndiff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py\nindex 8667164..4471c2b 100644\n--- a/src/plone/app/robotframework/users.py\n+++ b/src/plone/app/robotframework/users.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\ndiff --git a/src/plone/app/robotframework/variables.py b/src/plone/app/robotframework/variables.py\nindex 2337739..d77e822 100644\n--- a/src/plone/app/robotframework/variables.py\n+++ b/src/plone/app/robotframework/variables.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n import pkg_resources\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:09:17+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/957ccee9a66bd034c32ffd41ac90c76534ad5d99

isort/black

Files changed:
M setup.cfg
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/quickinstaller.py
M src/plone/app/robotframework/reload.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/tests/test_robot.py

b'diff --git a/setup.cfg b/setup.cfg\nindex b6c751e..8ca15cc 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,15 +3,11 @@ ignore =\n     *.cfg\n     requirements.txt\n \n-\n [isort]\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n \n [bdist_wheel]\n # (gforcada) do not release universal wheels unless the sys.version_info on setup.py is removed\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex 4971dd7..0a25ae6 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -137,9 +137,7 @@ def create_content(self, *args, **kwargs):\n                     elif isinstance(kwargs[name], str):\n                         value = kwargs[name]\n                     else:\n-                        value = str(\n-                            str(kwargs[name]), "utf-8", errors="ignore"\n-                        )\n+                        value = str(str(kwargs[name]), "utf-8", errors="ignore")\n                     converter = IDataConverter(widget)\n                     dm = queryMultiAdapter((content, field), IDataManager)\n                     if dm:\ndiff --git a/src/plone/app/robotframework/quickinstaller.py b/src/plone/app/robotframework/quickinstaller.py\nindex 123188c..4747217 100644\n--- a/src/plone/app/robotframework/quickinstaller.py\n+++ b/src/plone/app/robotframework/quickinstaller.py\n@@ -13,9 +13,7 @@ def product_is_activated(self, product_name):\n         qi = get_installer(portal)\n         installed = qi.is_product_installed(product_name)\n         portal_setup = getToolByName(portal, "portal_setup")\n-        imported = portal_setup.getProfileImportDate(\n-            f"profile-{product_name}:default"\n-        )\n+        imported = portal_setup.getProfileImportDate(f"profile-{product_name}:default")\n         assert installed or imported, "Product \'{}\' was not activated.".format(\n             product_name\n         )\ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex 2f5edb1..201aa65 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -69,11 +69,7 @@ def on_any_event(self, event):\n                 except Exception as e:\n                     print(ERROR(str(e)))\n             else:\n-                print(\n-                    WAIT(\n-                        f"Watchdog skipped {event_type} event on {event_relpath}"\n-                    )\n-                )\n+                print(WAIT(f"Watchdog skipped {event_type} event on {event_relpath}"))\n \n \n class ForkLoop:\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex faa55d5..bbe6776 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -327,9 +327,7 @@ def zodb_setup(self, layer_dotted_name=None):\n                 if HAS_VERBOSE_CONSOLE:\n                     print(\n                         WAIT(\n-                            "Test set up {}.{}".format(\n-                                layer.__module__, layer.__name__\n-                            )\n+                            "Test set up {}.{}".format(layer.__module__, layer.__name__)\n                         )\n                     )\n                 layer.testSetUp()\n@@ -403,9 +401,7 @@ def tear_down(setup_layers=setup_layers):\n             try:\n                 if hasattr(l, "tearDown"):\n                     if HAS_VERBOSE_CONSOLE:\n-                        print(\n-                            WAIT(f"Tear down {l.__module__}.{l.__name__}")\n-                        )\n+                        print(WAIT(f"Tear down {l.__module__}.{l.__name__}"))\n                     l.tearDown()\n             except NotImplementedError:\n                 pass\ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 72aa087..52ad450 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,9 +1,7 @@\n # from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n-from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n+from plone.app.robotframework.testing import PLONE_ROBOT_TESTING  # noqa: E501\n from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n-from plone.app.robotframework.testing import (  # noqa: E501\n-    SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING,\n-)\n+from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING\n from plone.testing import layered\n \n import pkg_resources\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:10:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/97466277a4bb9a04cf9f79ebb1b4ed82277f2a48

Removed sys.version_info check froms setup.py

Files changed:
M setup.cfg
M setup.py

b'diff --git a/setup.cfg b/setup.cfg\nindex 8ca15cc..4f3a3e2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -10,5 +10,5 @@ force_single_line = True\n lines_after_imports = 2\n \n [bdist_wheel]\n-# (gforcada) do not release universal wheels unless the sys.version_info on setup.py is removed\n+# Py3 only\n universal = 0\ndiff --git a/setup.py b/setup.py\nindex 131badf..1931a30 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,8 +1,6 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-import sys\n-\n \n version = "2.0.0a4.dev0"\n \n@@ -73,15 +71,6 @@ def read(filename):\n     "zope.testrunner",\n ]\n \n-if sys.version_info < (2, 7):\n-    install_requires.extend(\n-        [\n-            "argparse",\n-            "decorator",  # required by r.selenium2library on Python 2.6.x\n-            "simplejson",  # required for SauceLabs-keywords on Python 2.6.x\n-        ]\n-    )\n-\n test_requires = [\n     "plone.app.dexterity",\n     "plone.app.textfield",\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:14:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/75e3c883c8afe3c8b7bb2b33b44c7fb63d0609ab

Removed six.

Files changed:
M setup.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/pybabel.py
M src/plone/app/robotframework/saucelabs.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py

b'diff --git a/setup.py b/setup.py\nindex 1931a30..98a6327 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -63,7 +63,6 @@ def read(filename):\n     "robotsuite",  # not a direct dependency, but required for convenience\n     "selenium",\n     "setuptools",\n-    "six",\n     "zope.component",\n     "zope.configuration",\n     "zope.i18n",\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex 0a25ae6..d79778b 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -16,7 +16,6 @@\n from zope.lifecycleevent import ObjectModifiedEvent\n \n import os\n-import six\n \n \n if HAS_DEXTERITY:\n@@ -277,7 +276,7 @@ def prefill_image_types(portal, kwargs):\n def random_image():\n     from PIL import Image\n     from PIL import ImageDraw\n-    from six import BytesIO\n+    from io import BytesIO\n \n     import random\n \ndiff --git a/src/plone/app/robotframework/pybabel.py b/src/plone/app/robotframework/pybabel.py\nindex 5c2f7a8..b48415e 100644\n--- a/src/plone/app/robotframework/pybabel.py\n+++ b/src/plone/app/robotframework/pybabel.py\n@@ -21,7 +21,6 @@ def populate(self):\n \n import robot\n import robot.parsing.tablepopulators\n-import six\n \n \n robot.parsing.tablepopulators.StepPopulator.populate = populate\ndiff --git a/src/plone/app/robotframework/saucelabs.py b/src/plone/app/robotframework/saucelabs.py\nindex 1965afb..687f3e9 100644\n--- a/src/plone/app/robotframework/saucelabs.py\n+++ b/src/plone/app/robotframework/saucelabs.py\n@@ -1,5 +1,5 @@\n from robot.libraries.BuiltIn import BuiltIn\n-from six.moves.http_client import HTTPConnection\n+from http.client import HTTPConnection\n \n import base64\n import os\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex bbe6776..66a3efb 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -1,6 +1,6 @@\n from plone.app.robotframework.remote import RemoteLibrary\n-from six.moves.xmlrpc_client import ServerProxy\n-from six.moves.xmlrpc_server import SimpleXMLRPCServer\n+from xmlrpc.client import ServerProxy\n+from xmlrpc.server import SimpleXMLRPCServer\n \n import argparse\n import logging\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 15c6522..6cd1826 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -24,7 +24,6 @@\n \n import os\n import pkg_resources\n-import six\n import sys\n \n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:27:16+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/268fe893d418d7c84dadc96a1b12380a3374dcb1

Removed backwards compatibility code for older Plone versions.

We always have dexterity.

Files changed:
M src/plone/app/robotframework/config.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/saucelabs.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_robotfixture.py
M src/plone/app/robotframework/utils.py

b'diff --git a/src/plone/app/robotframework/config.py b/src/plone/app/robotframework/config.py\nindex ba5d8b3..e69de29 100644\n--- a/src/plone/app/robotframework/config.py\n+++ b/src/plone/app/robotframework/config.py\n@@ -1,25 +0,0 @@\n-import pkg_resources\n-\n-\n-try:\n-    pkg_resources.get_distribution("plone.dexterity")\n-except pkg_resources.DistributionNotFound:\n-    HAS_DEXTERITY = False\n-else:\n-    HAS_DEXTERITY = True\n-\n-\n-try:\n-    pkg_resources.get_distribution("z3c.relationfield")\n-except pkg_resources.DistributionNotFound:\n-    HAS_DEXTERITY_RELATIONS = False\n-else:\n-    HAS_DEXTERITY_RELATIONS = True\n-\n-\n-try:\n-    pkg_resources.get_distribution("z3c.blobfile")\n-except pkg_resources.DistributionNotFound:\n-    HAS_BLOBS = False\n-else:\n-    HAS_BLOBS = True\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex d79778b..b5fb2ff 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -1,44 +1,41 @@\n from datetime import datetime\n-from plone.app.robotframework.config import HAS_BLOBS\n-from plone.app.robotframework.config import HAS_DEXTERITY\n-from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from plone.app.textfield.value import RichTextValue\n+from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.utils import getAdditionalSchemata\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n+from z3c.form.interfaces import IDataConverter\n+from z3c.form.interfaces import IDataManager\n+from z3c.form.interfaces import IFieldWidget\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n from zope.event import notify\n from zope.globalrequest import getRequest\n from zope.lifecycleevent import ObjectModifiedEvent\n+from zope.schema.interfaces import IFromUnicode\n \n import os\n+import pkg_resources\n \n \n-if HAS_DEXTERITY:\n-    from plone.app.textfield.value import RichTextValue\n-    from plone.dexterity.fti import DexterityFTI\n-    from plone.dexterity.utils import getAdditionalSchemata\n-    from z3c.form.interfaces import IDataConverter\n-    from z3c.form.interfaces import IDataManager\n-    from z3c.form.interfaces import IFieldWidget\n-    from zope.component import queryMultiAdapter\n-    from zope.schema.interfaces import IFromUnicode\n-\n-    if HAS_BLOBS:\n-        from plone.namedfile.file import NamedBlobFile\n-        from plone.namedfile.file import NamedBlobImage\n-    else:\n-        from plone.namedfile.file import NamedFile as NamedBlobFile\n-        from plone.namedfile.file import NamedImage as NamedBlobImage\n-\n-if HAS_DEXTERITY_RELATIONS:\n+try:\n+    pkg_resources.get_distribution("z3c.relationfield")\n+except pkg_resources.DistributionNotFound:\n+    HAS_DEXTERITY_RELATIONS = False\n+else:\n     from z3c.relationfield import RelationValue\n     from zope.intid.interfaces import IIntIds\n \n+    HAS_DEXTERITY_RELATIONS = True\n+\n \n class Content(RemoteLibrary):\n     def delete_content(self, uid_or_path):\n@@ -81,17 +78,14 @@ def create_content(self, *args, **kwargs):\n         create_kwargs = {}\n         create_kwargs.update(kwargs)\n \n-        if HAS_DEXTERITY:\n-            if portal_type in ("File",) and "file" not in kwargs:\n-                pdf_file = os.path.join(\n-                    os.path.dirname(__file__), "content", "file.pdf"\n-                )\n-                with open(pdf_file, "rb") as f:\n-                    file_data = f.read()\n-                value = NamedBlobFile(\n-                    data=file_data, contentType="application/pdf", filename="file.pdf"\n-                )\n-                kwargs["file"] = value\n+        if portal_type in ("File",) and "file" not in kwargs:\n+            pdf_file = os.path.join(os.path.dirname(__file__), "content", "file.pdf")\n+            with open(pdf_file, "rb") as f:\n+                file_data = f.read()\n+            value = NamedBlobFile(\n+                data=file_data, contentType="application/pdf", filename="file.pdf"\n+            )\n+            kwargs["file"] = value\n \n         if portal_type in ("Image", "News Item") and "image" not in kwargs:\n             prefill_image_types(portal, kwargs)\n@@ -100,26 +94,24 @@ def create_content(self, *args, **kwargs):\n         type_ = kwargs.pop("type")\n \n         content = None\n-        if HAS_DEXTERITY:\n-            # The title attribute for Dexterity types needs to be unicode\n-            if "title" in kwargs and isinstance(kwargs["title"], bytes):\n-                kwargs["title"] = kwargs["title"].decode("utf-8")\n-                create_kwargs["title"] = create_kwargs["title"].decode("utf-8")\n-            from plone.dexterity.interfaces import IDexterityFTI\n-            from plone.dexterity.utils import createContentInContainer\n-\n-            try:\n-                getUtility(IDexterityFTI, name=type_)\n-                content = createContentInContainer(container, type_, **create_kwargs)\n-                if id_ is not None and content.id != id_:\n-                    container.manage_renameObject(content.id, id_)\n-            except ComponentLookupError:\n-                pass\n-\n-        if HAS_DEXTERITY and content:\n-            # For dexterity-types, we need a second pass to fill all fields\n-            # using their widgets to get e.g. RichText-values created\n-            # correctly.\n+        # The title attribute needs to be unicode.\n+        if "title" in kwargs and isinstance(kwargs["title"], bytes):\n+            kwargs["title"] = kwargs["title"].decode("utf-8")\n+            create_kwargs["title"] = create_kwargs["title"].decode("utf-8")\n+        from plone.dexterity.interfaces import IDexterityFTI\n+        from plone.dexterity.utils import createContentInContainer\n+\n+        try:\n+            getUtility(IDexterityFTI, name=type_)\n+            content = createContentInContainer(container, type_, **create_kwargs)\n+            if id_ is not None and content.id != id_:\n+                container.manage_renameObject(content.id, id_)\n+        except ComponentLookupError:\n+            pass\n+\n+        if content:\n+            # We need a second pass to fill all fields using their widgets to\n+            # get e.g. RichText-values created correctly.\n             fti = getUtility(IDexterityFTI, name=type_)\n             schema = fti.lookupSchema()\n             fields = {}\n@@ -153,74 +145,70 @@ def create_content(self, *args, **kwargs):\n \n         return IUUID(content)\n \n-    if HAS_DEXTERITY:\n-\n-        def set_field_value(self, uid, field, value, field_type):\n-            """Set field value with a specific type\n-\n-            XXX: Only dexterity fields are supported\n-            """\n-            pc = getToolByName(self, "portal_catalog")\n-            results = pc.unrestrictedSearchResults(UID=uid)\n-            obj = results[0]._unrestrictedGetObject()\n-            if field_type == "float":\n-                value = float(value)\n-            if field_type == "int":\n-                value = int(value)\n-            if field_type == "list":\n-                value = eval(value)\n-            if field_type.startswith("datetime"):\n-                # field_type must begin with \'datetime\'\n-                # followed by optional format \'datetime%Y%m%d%H%M\'\n-                # without format: %Y%m%d%H%M is used\n-                field_type = field_type[8:]\n-                fmt = field_type and field_type or "%Y%m%d%H%M"\n-                value = datetime.strptime(value, fmt)\n-            if field_type.startswith("date"):\n-                # field_type must begin with \'date\'\n-                # followed by optional format \'date%Y%m%d\'\n-                # without format: %Y%m%d is used\n-                field_type = field_type[4:]\n-                fmt = field_type and field_type or "%Y%m%d"\n-                value = datetime.strptime(value, fmt).date()\n-            if field_type == "reference" and HAS_DEXTERITY_RELATIONS:\n-                results_referenced = pc.unrestrictedSearchResults(UID=value)\n+    def set_field_value(self, uid, field, value, field_type):\n+        """Set field value with a specific type\n+\n+        XXX: Only dexterity fields are supported\n+        """\n+        pc = getToolByName(self, "portal_catalog")\n+        results = pc.unrestrictedSearchResults(UID=uid)\n+        obj = results[0]._unrestrictedGetObject()\n+        if field_type == "float":\n+            value = float(value)\n+        if field_type == "int":\n+            value = int(value)\n+        if field_type == "list":\n+            value = eval(value)\n+        if field_type.startswith("datetime"):\n+            # field_type must begin with \'datetime\'\n+            # followed by optional format \'datetime%Y%m%d%H%M\'\n+            # without format: %Y%m%d%H%M is used\n+            field_type = field_type[8:]\n+            fmt = field_type and field_type or "%Y%m%d%H%M"\n+            value = datetime.strptime(value, fmt)\n+        if field_type.startswith("date"):\n+            # field_type must begin with \'date\'\n+            # followed by optional format \'date%Y%m%d\'\n+            # without format: %Y%m%d is used\n+            field_type = field_type[4:]\n+            fmt = field_type and field_type or "%Y%m%d"\n+            value = datetime.strptime(value, fmt).date()\n+        if field_type == "reference" and HAS_DEXTERITY_RELATIONS:\n+            results_referenced = pc.unrestrictedSearchResults(UID=value)\n+            referenced_obj = results_referenced[0]._unrestrictedGetObject()\n+            intids = getUtility(IIntIds)\n+            referenced_obj_intid = intids.getId(referenced_obj)\n+            value = RelationValue(referenced_obj_intid)\n+        if field_type == "references" and HAS_DEXTERITY_RELATIONS:\n+            values = eval(value)\n+            intids = getUtility(IIntIds)\n+            value = []\n+            for uid in values:\n+                results_referenced = pc.unrestrictedSearchResults(UID=uid)\n                 referenced_obj = results_referenced[0]._unrestrictedGetObject()\n-                intids = getUtility(IIntIds)\n                 referenced_obj_intid = intids.getId(referenced_obj)\n-                value = RelationValue(referenced_obj_intid)\n-            if field_type == "references" and HAS_DEXTERITY_RELATIONS:\n-                values = eval(value)\n-                intids = getUtility(IIntIds)\n-                value = []\n-                for uid in values:\n-                    results_referenced = pc.unrestrictedSearchResults(UID=uid)\n-                    referenced_obj = results_referenced[0]._unrestrictedGetObject()\n-                    referenced_obj_intid = intids.getId(referenced_obj)\n-                    value.append(RelationValue(referenced_obj_intid))\n-            if field_type == "text/html":\n-                value = RichTextValue(value, "text/html", "text/html")\n-                obj.text = value\n-            if field_type == "file":\n-                pdf_file = os.path.join(\n-                    os.path.dirname(__file__), "content", "file.pdf"\n-                )\n-                with open(pdf_file, "rb") as f:\n-                    file_data = f.read()\n-                value = NamedBlobFile(\n-                    data=file_data, contentType="application/pdf", filename="file.pdf"\n-                )\n-            if field_type == "image":\n-                image_file = os.path.join(os.path.dirname(__file__), "image.jpg")\n-                with open(image_file, "rb") as f:\n-                    image_data = f.read()\n-                value = NamedBlobImage(\n-                    data=image_data, contentType="image/jpg", filename="image.jpg"\n-                )\n-\n-            setattr(obj, field, value)\n-            obj.reindexObject()\n-            notify(ObjectModifiedEvent(obj))\n+                value.append(RelationValue(referenced_obj_intid))\n+        if field_type == "text/html":\n+            value = RichTextValue(value, "text/html", "text/html")\n+            obj.text = value\n+        if field_type == "file":\n+            pdf_file = os.path.join(os.path.dirname(__file__), "content", "file.pdf")\n+            with open(pdf_file, "rb") as f:\n+                file_data = f.read()\n+            value = NamedBlobFile(\n+                data=file_data, contentType="application/pdf", filename="file.pdf"\n+            )\n+        if field_type == "image":\n+            image_file = os.path.join(os.path.dirname(__file__), "image.jpg")\n+            with open(image_file, "rb") as f:\n+                image_data = f.read()\n+            value = NamedBlobImage(\n+                data=image_data, contentType="image/jpg", filename="image.jpg"\n+            )\n+\n+        setattr(obj, field, value)\n+        obj.reindexObject()\n+        notify(ObjectModifiedEvent(obj))\n \n     def uid_to_url(self, uid):\n         """Return absolute path for an UID"""\n@@ -267,16 +255,14 @@ def prefill_image_types(portal, kwargs):\n     portal_type = kwargs.get("type")\n     portal_types = getToolByName(portal, "portal_types")\n     fti = portal_types[portal_type]\n-    if HAS_DEXTERITY and isinstance(fti, DexterityFTI):\n+    if isinstance(fti, DexterityFTI):\n         prefill_image_types_dexterity(kwargs)\n-    else:\n-        prefill_image_types_archetypes(kwargs)\n \n \n def random_image():\n+    from io import BytesIO\n     from PIL import Image\n     from PIL import ImageDraw\n-    from io import BytesIO\n \n     import random\n \ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex d6f8dc0..2af6f82 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -1,5 +1,6 @@\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n@@ -8,13 +9,6 @@\n import os\n \n \n-try:\n-    from plone.i18n.interfaces import ILanguageSchema\n-except ImportError:\n-    # BBB for Plone 5.1, remove with Plone 6\n-    from Products.CMFPlone.interfaces import ILanguageSchema\n-\n-\n class I18N(RemoteLibrary):\n     def set_default_language(self, language=None):\n         """Change portal default language"""\ndiff --git a/src/plone/app/robotframework/saucelabs.py b/src/plone/app/robotframework/saucelabs.py\nindex 687f3e9..9aedad3 100644\n--- a/src/plone/app/robotframework/saucelabs.py\n+++ b/src/plone/app/robotframework/saucelabs.py\n@@ -1,19 +1,12 @@\n-from robot.libraries.BuiltIn import BuiltIn\n from http.client import HTTPConnection\n+from robot.libraries.BuiltIn import BuiltIn\n \n import base64\n+import json\n import os\n import re\n \n \n-try:\n-    import json\n-\n-    json  # pyflakes\n-except ImportError:\n-    import simplejson as json\n-\n-\n USERNAME_ACCESS_KEY = re.compile(r"^(http|https)://([^:]+):([^@]+)@")\n \n \ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 66a3efb..9b7d937 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -1,4 +1,5 @@\n from plone.app.robotframework.remote import RemoteLibrary\n+from plone.testing.zope import WSGIServer\n from xmlrpc.client import ServerProxy\n from xmlrpc.server import SimpleXMLRPCServer\n \n@@ -21,12 +22,6 @@\n \n     HAS_RELOAD = True\n \n-try:\n-    from plone.testing.zope import WSGIServer\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import ZServer as WSGIServer\n-\n \n HAS_DEBUG_MODE = False\n HAS_VERBOSE_CONSOLE = False\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 6cd1826..f7054ae 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -17,6 +17,8 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import ploneSite\n from plone.testing import Layer\n+from plone.testing import zope as zope_testing\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n from Products.MailHost.interfaces import IMailHost\n from robot.libraries.BuiltIn import BuiltIn\n from zope.component import getSiteManager\n@@ -34,19 +36,6 @@\n else:\n     HAS_SPEAKJS = True\n \n-try:\n-    from plone.testing import zope as zope_testing\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing import z2 as zope_testing\n-\n-\n-try:\n-    from plone.testing.zope import WSGI_SERVER_FIXTURE\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import ZSERVER_FIXTURE as WSGI_SERVER_FIXTURE\n-\n \n class SimplePublicationLayer(Layer):\n     defaultBases = (PLONE_FIXTURE,)\ndiff --git a/src/plone/app/robotframework/tests/test_robotfixture.py b/src/plone/app/robotframework/tests/test_robotfixture.py\nindex c8ee9bf..ddf696e 100644\n--- a/src/plone/app/robotframework/tests/test_robotfixture.py\n+++ b/src/plone/app/robotframework/tests/test_robotfixture.py\n@@ -1,25 +1,14 @@\n from plone.app.robotframework.testing import PloneRobotFixture\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.testing import layered\n+from plone.testing.zope import FunctionalTesting\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n import os\n import robotsuite\n import unittest\n \n \n-try:\n-    from plone.testing.zope import FunctionalTesting\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import FunctionalTesting\n-\n-try:\n-    from plone.testing.zope import WSGI_SERVER_FIXTURE\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import ZSERVER_FIXTURE as WSGI_SERVER_FIXTURE\n-\n-\n class CustomPloneRobotFixture(PloneRobotFixture):\n     def setUp(self):\n         os.environ["CONFIGURE_PACKAGES"] = "plone.session"\ndiff --git a/src/plone/app/robotframework/utils.py b/src/plone/app/robotframework/utils.py\nindex da55a3b..30b25d9 100644\n--- a/src/plone/app/robotframework/utils.py\n+++ b/src/plone/app/robotframework/utils.py\n@@ -1,15 +1,7 @@\n+from plone.protect.interfaces import IDisableCSRFProtection\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n \n \n-try:\n-    from plone.protect.interfaces import IDisableCSRFProtection\n-except ImportError:\n-    from zope.interface import Interface\n-\n-    class IDisableCSRFProtection(Interface):\n-        pass\n-\n-\n def disableCSRFProtection():\n     alsoProvides(getRequest(), IDisableCSRFProtection)\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:35:26+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/e11ff67b9393e338d07f79023ce0ebf7fd320099

Removed Archetypes from code, include reference browser.

Note: `content.rst` in the docs still points to a field with archetypes in the css.
The documentation may need a more thorough overhaul in a different PR.

Files changed:
M docs/source/index.rst
M docs/source/plone-keywords/index.rst
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/keywords.robot
D docs/source/plone-keywords/reference-browser-widget.rst

b'diff --git a/docs/source/index.rst b/docs/source/index.rst\nindex ef89d93..f600831 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -164,4 +164,3 @@ Old tutorials\n    plone-keywords/history\n    plone-keywords/index\n    plone-keywords/login\n-   plone-keywords/reference-browser-widget\ndiff --git a/docs/source/plone-keywords/index.rst b/docs/source/plone-keywords/index.rst\nindex c7fedea..7928b1c 100644\n--- a/docs/source/plone-keywords/index.rst\n+++ b/docs/source/plone-keywords/index.rst\n@@ -15,7 +15,6 @@ all the keywords that are necessary to write acceptance test in Plone.\n    login.rst\n    history.rst\n    edit-wizard-tabs.rst\n-   reference-browser-widget.rst\n \n \n Using plone.app.testing variables\ndiff --git a/docs/source/plone-keywords/reference-browser-widget.rst b/docs/source/plone-keywords/reference-browser-widget.rst\ndeleted file mode 100644\nindex 89c63ca..0000000\n--- a/docs/source/plone-keywords/reference-browser-widget.rst\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-==============================================================================\n-Reference Browser Widget Keywords\n-==============================================================================\n-\n-Set Reference Browser Field Value::\n-\n-    Set reference browser field value\n-\n-    [arguments]  ${fieldName}  @{path}\n-\n-\n-Checkbox Select::\n-\n-    Select checkbox (check it)\n-\n-    [arguments]  ${title}\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex b5fb2ff..8d4678a 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -1,10 +1,11 @@\n from datetime import datetime\n+from io import BytesIO\n+from PIL import Image\n+from PIL import ImageDraw\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.app.textfield.value import RichTextValue\n-from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n-from plone.i18n.normalizer.interfaces import IURLNormalizer\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n from plone.uuid.interfaces import IUUID\n@@ -15,7 +16,6 @@\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n-from zope.component import queryUtility\n from zope.component.hooks import getSite\n from zope.event import notify\n from zope.globalrequest import getRequest\n@@ -24,6 +24,8 @@\n \n import os\n import pkg_resources\n+import random\n+import string\n \n \n try:\n@@ -88,7 +90,7 @@ def create_content(self, *args, **kwargs):\n             kwargs["file"] = value\n \n         if portal_type in ("Image", "News Item") and "image" not in kwargs:\n-            prefill_image_types(portal, kwargs)\n+            prefill_image_types(kwargs)\n \n         id_ = kwargs.pop("id", None)\n         type_ = kwargs.pop("type")\n@@ -134,22 +136,10 @@ def create_content(self, *args, **kwargs):\n                     if dm:\n                         dm.set(converter.toFieldValue(value))\n \n-        if content is None:\n-            if id_ is None:\n-                normalizer = queryUtility(IURLNormalizer)\n-                id_ = normalizer.normalize(kwargs["title"])\n-\n-            # It must be Archetypes based content:\n-            content = container[container.invokeFactory(type_, id_, **kwargs)]\n-            content.processForm()\n-\n         return IUUID(content)\n \n     def set_field_value(self, uid, field, value, field_type):\n-        """Set field value with a specific type\n-\n-        XXX: Only dexterity fields are supported\n-        """\n+        """Set field value with a specific type"""\n         pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(UID=uid)\n         obj = results[0]._unrestrictedGetObject()\n@@ -251,21 +241,15 @@ def global_allow(self, type_, value=True):\n         types_tool[type_].global_allow = value\n \n \n-def prefill_image_types(portal, kwargs):\n-    portal_type = kwargs.get("type")\n-    portal_types = getToolByName(portal, "portal_types")\n-    fti = portal_types[portal_type]\n-    if isinstance(fti, DexterityFTI):\n-        prefill_image_types_dexterity(kwargs)\n+def prefill_image_types(kwargs):\n+    image = random_image()\n+    filename = "{}.png".format(\n+        "".join(random.choice(string.ascii_lowercase) for _ in range(6))\n+    )\n+    kwargs["image"] = NamedBlobImage(data=image, filename=filename)\n \n \n def random_image():\n-    from io import BytesIO\n-    from PIL import Image\n-    from PIL import ImageDraw\n-\n-    import random\n-\n     img = Image.new("RGB", (random.randint(320, 640), random.randint(320, 640)))\n     draw = ImageDraw.Draw(img)\n     draw.rectangle(\n@@ -278,18 +262,3 @@ def random_image():\n     img.save(result, "PNG")\n     result.seek(0)\n     return result\n-\n-\n-def prefill_image_types_dexterity(kwargs):\n-    import random\n-    import string\n-\n-    image = random_image()\n-    filename = "{}.png".format(\n-        "".join(random.choice(string.ascii_lowercase) for _ in range(6))\n-    )\n-    kwargs["image"] = NamedBlobImage(data=image, filename=filename)\n-\n-\n-def prefill_image_types_archetypes(kwargs):\n-    kwargs["image"] = random_image()\ndiff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex 0d0e647..1c9a5c2 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -304,19 +304,6 @@ Open wizard tab\n # Widgets\n # ----------------------------------------------------------------------------\n \n-Set Reference Browser Field Value\n-    [arguments]  ${fieldName}  @{path}\n-    Click Overlay Button  css=#archetypes-fieldname-${fieldName} input[type=button]\n-    ${len}=  Get Length  ${path}\n-    :FOR  ${i}  IN RANGE  ${len}\n-    \\   Run Keyword If  ${i}!=${len}-1  Click Link  xpath=//table[contains(@class, \'group\')]//a[contains(., "@{path}[${i}]")]\n-    \\   Run Keyword If  ${i}==${len}-1  Checkbox Select  @{path}[${i}]\n-\n-Checkbox Select\n-    [arguments]  ${title}\n-    ${for}=  Get Element Attribute  xpath=//table[contains(@class, \'group\')]//label[contains(., "${title}")]@for\n-    Select Checkbox  id=${for}\n-\n Remove line from textarea\n     [arguments]  ${fieldName}  ${value}\n     ${lines}=  Get value  name=${fieldName}\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T10:55:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/dffa1b81dcb13f12172ae48e24cf5d448acc6489

flake8

Files changed:
M src/plone/app/robotframework/pybabel.py
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/robotentrypoints.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_robot.py

b'diff --git a/src/plone/app/robotframework/pybabel.py b/src/plone/app/robotframework/pybabel.py\nindex b48415e..eabd01c 100644\n--- a/src/plone/app/robotframework/pybabel.py\n+++ b/src/plone/app/robotframework/pybabel.py\n@@ -1,4 +1,7 @@\n # WARNING: This module must not be imported outside running babel\n+import robot\n+import robot.parsing.tablepopulators\n+\n \n MESSAGES = []\n \n@@ -19,10 +22,6 @@ def populate(self):\n         pass\n \n \n-import robot\n-import robot.parsing.tablepopulators\n-\n-\n robot.parsing.tablepopulators.StepPopulator.populate = populate\n \n \ndiff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 74345e9..2967001 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -1,6 +1,5 @@\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import PLONE_FIXTURE\n-from plone.app.testing import ploneSite\n from plone.testing import Layer\n from Products.CMFPlone.Portal import PloneSite\n \ndiff --git a/src/plone/app/robotframework/robotentrypoints.py b/src/plone/app/robotframework/robotentrypoints.py\nindex 9a7cf4c..71357d5 100644\n--- a/src/plone/app/robotframework/robotentrypoints.py\n+++ b/src/plone/app/robotframework/robotentrypoints.py\n@@ -19,8 +19,12 @@ def pybot():\n     from docutils.parsers.rst.directives import register_directive\n     from docutils.parsers.rst.roles import register_local_role\n \n-    dummy_directive = lambda *args: []\n-    dummy_role = lambda *args: ([], [])\n+    def dummy_directive(*args):\n+        return []\n+\n+    def dummy_role(*args):\n+        return ([], [])\n+\n     options = ("maxdepth", "creates", "numbered", "hidden")\n     setattr(dummy_directive, "content", True)\n     setattr(dummy_directive, "options", {opt: str for opt in options})\n@@ -93,8 +97,12 @@ def pybabel():\n     from docutils.parsers.rst.directives import register_directive\n     from docutils.parsers.rst.roles import register_local_role\n \n-    dummy_directive = lambda *args: []\n-    dummy_role = lambda *args: ([], [])\n+    def dummy_directive(*args):\n+        return []\n+\n+    def dummy_role(*args):\n+        return ([], [])\n+\n     options = ("maxdepth", "creates", "numbered", "hidden")\n     setattr(dummy_directive, "content", True)\n     setattr(dummy_directive, "options", {opt: str for opt in options})\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 9b7d937..0015186 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -7,7 +7,6 @@\n import logging\n import os\n import pkg_resources\n-import select\n import sys\n import time\n \n@@ -388,20 +387,20 @@ def tear_down(setup_layers=setup_layers):\n \n     # Tear down any layers not needed for these tests. The unneeded layers\n     # might interfere.\n-    unneeded = [l for l in setup_layers]\n+    unneeded = [layer for layer in setup_layers]\n     unneeded = order_by_bases(unneeded)\n     unneeded.reverse()\n-    for l in unneeded:\n+    for layer in unneeded:\n         try:\n             try:\n-                if hasattr(l, "tearDown"):\n+                if hasattr(layer, "tearDown"):\n                     if HAS_VERBOSE_CONSOLE:\n-                        print(WAIT(f"Tear down {l.__module__}.{l.__name__}"))\n-                    l.tearDown()\n+                        print(WAIT(f"Tear down {layer.__module__}.{layer.__name__}"))\n+                    layer.tearDown()\n             except NotImplementedError:\n                 pass\n         finally:\n-            del setup_layers[l]\n+            del setup_layers[layer]\n \n \n class Zope2ServerRemote(RemoteLibrary):\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex f7054ae..284556b 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -255,15 +255,18 @@ def setUp(self):\n         super().setUp()\n \n         class Value:\n-            __repr__ = lambda x: str(bool(x))\n-            __nonzero__ = lambda x: self.get("state", []) != (\n-                self._get_robot_variable("REGISTER_TRANSLATIONS")\n-                + self._get_robot_variable("META_PACKAGES")\n-                + self._get_robot_variable("CONFIGURE_PACKAGES")\n-                + self._get_robot_variable("OVERRIDE_PACKAGES")\n-                + self._get_robot_variable("INSTALL_PRODUCTS")\n-                + self._get_robot_variable("APPLY_PROFILES")\n-            )\n+            def __repr__(self, x):\n+                return str(bool(x))\n+\n+            def __nonzero__(x):\n+                return self.get("state", []) != (\n+                    self._get_robot_variable("REGISTER_TRANSLATIONS")\n+                    + self._get_robot_variable("META_PACKAGES")\n+                    + self._get_robot_variable("CONFIGURE_PACKAGES")\n+                    + self._get_robot_variable("OVERRIDE_PACKAGES")\n+                    + self._get_robot_variable("INSTALL_PRODUCTS")\n+                    + self._get_robot_variable("APPLY_PROFILES")\n+                )\n \n         self["dirty"] = Value()\n \ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 52ad450..6178ad9 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,7 +1,8 @@\n # from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n-from plone.app.robotframework.testing import PLONE_ROBOT_TESTING  # noqa: E501\n+from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n-from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING\n+\n+# from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING\n from plone.testing import layered\n \n import pkg_resources\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T11:10:43+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/36f0bcc2a5faa14df72897529ba8e0cedcb2ece7

news snippet

Files changed:
A news/129.breaking

b'diff --git a/news/129.breaking b/news/129.breaking\nnew file mode 100644\nindex 0000000..2d07e9b\n--- /dev/null\n+++ b/news/129.breaking\n@@ -0,0 +1,2 @@\n+Cleanup: Python 3 only, Dexterity only, isort, black.\n+[maurits]\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T12:30:43+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/087c1005aeaa4d402fb39a564d0bca286c95b8a9

random_image: return the bytes, not the BytesIO object.

The `NamedImage` class that was accidentally used before  could handle this.
But with `NamedBlobImage` it resulted in a few test failures like this:

```
Failure in test Scenario A page is opened to edit in TinyMCE (test_tinymce.robot)
Traceback (most recent call last):
  File "/Users/maurits/.pyenv/versions/3.9.9/lib/python3.9/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/Users/maurits/.pyenv/versions/3.9.9/lib/python3.9/unittest/case.py", line 592, in run
    self._callTestMethod(testMethod)
  File "/Users/maurits/.pyenv/versions/3.9.9/lib/python3.9/unittest/case.py", line 550, in _callTestMethod
    method()
  File "/Users/maurits/community/plone-coredev/6.0/src/robotsuite/src/robotsuite/__init__.py", line 514, in runTest
    assert last_status == 'PASS', last_message
AssertionError: (&lt;InterfaceClass plone.namedfile.interfaces.IStorage&gt;, '_io.BytesIO')
```

Files changed:
M src/plone/app/robotframework/content.py

b'diff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex 8d4678a..31459b2 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -261,4 +261,4 @@ def random_image():\n     result = BytesIO()\n     img.save(result, "PNG")\n     result.seek(0)\n-    return result\n+    return result.read()\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-02T22:56:03+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/30ba1bc6d6e76a38807589e49a065a78cd723834

Make compatible with robotframework 3-5.

Files changed:
A news/5.bugfix
M src/plone/app/robotframework/saucelabs.py

b'diff --git a/news/5.bugfix b/news/5.bugfix\nnew file mode 100644\nindex 0000000..cddac02\n--- /dev/null\n+++ b/news/5.bugfix\n@@ -0,0 +1,2 @@\n+Make compatible with robotframework 3-5.\n+[maurits]\ndiff --git a/src/plone/app/robotframework/saucelabs.py b/src/plone/app/robotframework/saucelabs.py\nindex 9aedad3..59c92cb 100644\n--- a/src/plone/app/robotframework/saucelabs.py\n+++ b/src/plone/app/robotframework/saucelabs.py\n@@ -16,7 +16,7 @@ def report_sauce_status(self, name, status, tags=[], remote_url=""):\n         job_id = (\n             BuiltIn()\n             .get_library_instance("Selenium2Library")\n-            ._current_browser()\n+            .driver\n             .session_id\n         )\n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-03T01:14:03+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/3591014b0a753927adaaea46dfb35d1ddb113e53

Merge pull request #130 from plone/robotframework5

Make compatible with robotframework 3-5

Files changed:
A news/129.breaking
A news/5.bugfix
M README.rst
M docs/source/conf.py
M docs/source/index.rst
M docs/source/plone-keywords/index.rst
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/robotframework/__init__.py
M src/plone/app/robotframework/annotate.py
M src/plone/app/robotframework/autologin.py
M src/plone/app/robotframework/config.py
M src/plone/app/robotframework/content.py
M src/plone/app/robotframework/genericsetup.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/keywords.py
M src/plone/app/robotframework/keywords.robot
M src/plone/app/robotframework/mailhost.py
M src/plone/app/robotframework/patches.py
M src/plone/app/robotframework/pybabel.py
M src/plone/app/robotframework/quickinstaller.py
M src/plone/app/robotframework/reload.py
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/robotentrypoints.py
M src/plone/app/robotframework/saucelabs.py
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_content.py
M src/plone/app/robotframework/tests/test_robot.py
M src/plone/app/robotframework/tests/test_robotfixture.py
M src/plone/app/robotframework/users.py
M src/plone/app/robotframework/utils.py
M src/plone/app/robotframework/variables.py
D Gemfile
D buildout-varnish.cfg
D docs/source/plone-keywords/reference-browser-widget.rst
D templates/varnish.vcl.in
D travis.cfg
D versions.cfg

b'diff --git a/Gemfile b/Gemfile\ndeleted file mode 100644\nindex 20812cd..0000000\n--- a/Gemfile\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-source \'https://rubygems.org\'\n-gem \'mime-types\', \'2.6.2\'\n-gem \'faraday\', \'0.8.9\'\n-gem \'net-ssh\', \'2.9.2\'\n-gem \'travis-artifacts\'\ndiff --git a/README.rst b/README.rst\nindex 558deb8..7dbcd6d 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,12 +1,6 @@\n plone.app.robotframework\n ------------------------\n \n-.. image:: https://secure.travis-ci.org/plone/plone.app.robotframework.png\n-     :target: http://travis-ci.org/plone/plone.app.robotframework\n-\n-.. image:: https://saucelabs.com/buildstatus/parobotframework\n-       :target: https://saucelabs.com/u/parobotframework\n-\n .. image:: https://img.shields.io/pypi/v/plone.app.robotframework.svg\n         :target: https://pypi.org/project/plone.app.robotframework/\n \n@@ -17,8 +11,3 @@ and its add-ons.\n \n Please read the full documentation at `Plone Developer Documentation\n <https://docs.plone.org/external/plone.app.robotframework/docs/source/index.html>`_.\n-\n-`The latest known good version`__ for **plone.app.robotframework** and\n-packages related to it.\n-\n-__ https://raw.githubusercontent.com/plone/plone.app.robotframework/master/versions.cfg\ndiff --git a/buildout-varnish.cfg b/buildout-varnish.cfg\ndeleted file mode 100644\nindex c9953d1..0000000\n--- a/buildout-varnish.cfg\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-[buildout]\n-parts +=\n-    varnish-build\n-    varnish\n-    varnish-conf\n-    supervisor\n-    test-wrap-varnish\n-\n-[hosts]\n-supervisor = localhost\n-plone-testing = localhost\n-varnish = localhost\n-varnish-telnet = localhost\n-\n-[ports]\n-supervisor = 9001\n-plone-testing = 55000\n-varnish = 8080\n-varnish-telnet = 5001\n-\n-[environment]\n-ZSERVER_HOST = ${hosts:plone-testing}\n-ZSERVER_PORT = ${ports:plone-testing}\n-ROBOT_ZOPE_HOST = ${hosts:varnish}\n-ROBOT_ZOPE_PORT = ${ports:varnish}\n-\n-[test]\n-environment = environment\n-script = run-tests\n-\n-[test-wrap-varnish]\n-recipe = collective.recipe.template\n-input = inline:\n-    #!/usr/bin/env sh\n-    ${buildout:directory}/bin/supervisord\n-    ${buildout:directory}/bin/run-tests $@\n-    result=$?\n-    ${buildout:directory}/bin/supervisorctl shutdown\n-    exit $result\n-output = ${buildout:directory}/bin/test\n-mode = 755\n-\n-[varnish-build]\n-recipe = zc.recipe.cmmi\n-url = ${varnish:download-url}\n-\n-[varnish]\n-recipe = plone.recipe.varnish:instance\n-bind = ${hosts:varnish}:${ports:varnish}\n-telnet = ${hosts:varnish-telnet}:${ports:varnish-telnet}\n-cache-size = 256M\n-mode = foreground\n-daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd\n-config = ${buildout:directory}/etc/varnish.vcl\n-\n-[varnish-conf]\n-recipe = collective.recipe.template\n-url = https://raw.github.com/plone/plone.act/master/templates/varnish.vcl.in\n-output = ${buildout:directory}/etc/varnish.vcl\n-backend = ${hosts:plone-testing}\n-backend_port = ${ports:plone-testing}\n-\n-[supervisor]\n-recipe = collective.recipe.supervisor\n-port = ${hosts:supervisor}:${ports:supervisor}\n-user = admin\n-password = admin\n-programs =\n-    10 varnish ${varnish:daemon} [ -f ${varnish:config} -n ${buildout:directory}/var -s malloc,1G -a ${hosts:varnish}:${ports:varnish} -F ] ${buildout:directory}\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 352d0fd..7743766 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.robotframework documentation build configuration file, created by\n # sphinx-quickstart on Wed Sep 12 14:43:02 2012.\n@@ -11,201 +10,206 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinxcontrib_robotdoc\']\n+extensions = ["sphinxcontrib_robotdoc"]\n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.robotframework\'\n-copyright = u\'2013, Plone Foundation\'\n+project = "plone.app.robotframework"\n+copyright = "2013, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0.4\'\n+release = "1.0.4"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n exclude_patterns = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'default\'\n+html_theme = "default"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'parobotframeworkdoc\'\n+htmlhelp_basename = "parobotframeworkdoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    #\'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    #\'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    #\'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'parobotframework.tex\', u\'Writing Robot Framework tests for Plone\',\n-   u\'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "parobotframework.tex",\n+        "Writing Robot Framework tests for Plone",\n+        "Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -213,12 +217,17 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'parobotframework\', u\'Writing Robot Framework tests for Plone\',\n-     [u\'Plone Foundation\'], 1)\n+    (\n+        "index",\n+        "parobotframework",\n+        "Writing Robot Framework tests for Plone",\n+        ["Plone Foundation"],\n+        1,\n+    )\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -227,16 +236,22 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'index\', \'parobotframework\', u\'Writing Robot Framework tests for Plone\',\n-   u\'Plone Foundation\', \'parobotframework\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "index",\n+        "parobotframework",\n+        "Writing Robot Framework tests for Plone",\n+        "Plone Foundation",\n+        "parobotframework",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex ef89d93..f600831 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -164,4 +164,3 @@ Old tutorials\n    plone-keywords/history\n    plone-keywords/index\n    plone-keywords/login\n-   plone-keywords/reference-browser-widget\ndiff --git a/docs/source/plone-keywords/index.rst b/docs/source/plone-keywords/index.rst\nindex c7fedea..7928b1c 100644\n--- a/docs/source/plone-keywords/index.rst\n+++ b/docs/source/plone-keywords/index.rst\n@@ -15,7 +15,6 @@ all the keywords that are necessary to write acceptance test in Plone.\n    login.rst\n    history.rst\n    edit-wizard-tabs.rst\n-   reference-browser-widget.rst\n \n \n Using plone.app.testing variables\ndiff --git a/docs/source/plone-keywords/reference-browser-widget.rst b/docs/source/plone-keywords/reference-browser-widget.rst\ndeleted file mode 100644\nindex 89c63ca..0000000\n--- a/docs/source/plone-keywords/reference-browser-widget.rst\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-==============================================================================\n-Reference Browser Widget Keywords\n-==============================================================================\n-\n-Set Reference Browser Field Value::\n-\n-    Set reference browser field value\n-\n-    [arguments]  ${fieldName}  @{path}\n-\n-\n-Checkbox Select::\n-\n-    Select checkbox (check it)\n-\n-    [arguments]  ${title}\ndiff --git a/news/129.breaking b/news/129.breaking\nnew file mode 100644\nindex 0000000..2d07e9b\n--- /dev/null\n+++ b/news/129.breaking\n@@ -0,0 +1,2 @@\n+Cleanup: Python 3 only, Dexterity only, isort, black.\n+[maurits]\ndiff --git a/news/5.bugfix b/news/5.bugfix\nnew file mode 100644\nindex 0000000..cddac02\n--- /dev/null\n+++ b/news/5.bugfix\n@@ -0,0 +1,2 @@\n+Make compatible with robotframework 3-5.\n+[maurits]\ndiff --git a/setup.cfg b/setup.cfg\nindex 1885445..4f3a3e2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,23 +1,14 @@\n [check-manifest]\n ignore =\n     *.cfg\n-    bootstrap.py\n-    Gemfile\n     requirements.txt\n-    templates\n-    templates/varnish.vcl.in\n-\n-\n \n [isort]\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n \n [bdist_wheel]\n-# (gforcada) do not release universal wheels unless the sys.version_info on setup.py is removed\n+# Py3 only\n universal = 0\ndiff --git a/setup.py b/setup.py\nindex 25bc868..98a6327 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,17 +1,16 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-import sys\n \n-version = \'2.0.0a4.dev0\'\n+version = "2.0.0a4.dev0"\n \n \n def indented(filename):\n-    return \'\'.join([indent(line) for line in open(filename)])\n+    return "".join([indent(line) for line in open(filename)])\n \n \n def indent(line):\n-    return \'   \' + line\n+    return "   " + line\n \n \n def read(filename):\n@@ -28,15 +27,12 @@ def read(filename):\n         return contents.decode("utf-8")\n \n \n-long_description = (\n-    read(\'README.rst\') +\n-    \'\\n\' +\n-    \'Contributors\\n\'\n-    \'============\\n\' +\n-    \'\\n\' +\n-    read(\'CONTRIBUTORS.rst\') +\n-    \'\\n\' +\n-    read(\'CHANGES.rst\')\n+long_description = read(\n+    "README.rst"\n+) + "\\n" + "Contributors\\n" "============\\n" + "\\n" + read(\n+    "CONTRIBUTORS.rst"\n+) + "\\n" + read(\n+    "CHANGES.rst"\n )\n \n \n@@ -53,70 +49,62 @@ def read(filename):\n entry_points = dict(console_scripts=console_scripts)\n \n install_requires = [\n-    \'Products.CMFCore\',\n-    \'Products.CMFPlone\',\n-    \'Products.MailHost\',\n-    \'Products.PlonePAS >= 5.0.1\',\n-    \'Products.PluggableAuthService\',\n-    \'babel\',\n-    \'plone.app.testing\',\n-    \'plone.testing\',\n-    \'plone.uuid\',\n-    \'robotframework\',\n-    \'robotframework-selenium2library\',\n-    \'robotsuite\',  # not a direct dependency, but required for convenience\n-    \'selenium\',\n-    \'setuptools\',\n-    \'six\',\n-    \'zope.component\',\n-    \'zope.configuration\',\n-    \'zope.i18n\',\n-    \'zope.schema\',\n-    \'zope.testrunner\',\n+    "Products.CMFCore",\n+    "Products.CMFPlone",\n+    "Products.MailHost",\n+    "Products.PlonePAS >= 5.0.1",\n+    "Products.PluggableAuthService",\n+    "babel",\n+    "plone.app.testing",\n+    "plone.testing",\n+    "plone.uuid",\n+    "robotframework",\n+    "robotframework-selenium2library",\n+    "robotsuite",  # not a direct dependency, but required for convenience\n+    "selenium",\n+    "setuptools",\n+    "zope.component",\n+    "zope.configuration",\n+    "zope.i18n",\n+    "zope.schema",\n+    "zope.testrunner",\n ]\n \n-if sys.version_info < (2, 7):\n-    install_requires.extend([\n-        \'argparse\',\n-        \'decorator\',   # required by r.selenium2library on Python 2.6.x\n-        \'simplejson\',  # required for SauceLabs-keywords on Python 2.6.x\n-    ])\n-\n test_requires = [\n-    \'plone.app.dexterity\',\n-    \'plone.app.textfield\',\n-    \'plone.dexterity\',\n-    \'robotsuite\',\n-    \'z3c.form\',\n+    "plone.app.dexterity",\n+    "plone.app.textfield",\n+    "plone.dexterity",\n+    "robotsuite",\n+    "z3c.form",\n ]\n \n debug_requires = [\n     # REPL-debugger for Robot Framework:\n-    \'robotframework-debuglibrary\',\n+    "robotframework-debuglibrary",\n ]\n \n ride_requires = [\n     # Robot Framework IDE:\n-    \'robotframework-ride\'\n+    "robotframework-ride"\n ]\n \n speak_requires = [\n     # Enable talking screen casts:\n-    \'collective.js.speakjs\'\n+    "collective.js.speakjs"\n ]\n \n reload_requires = [\n     # Watch for filesystem changes:\n-    \'watchdog\'\n+    "watchdog"\n ]\n \n docs_requires = [\n     # Include robot-files outside docs:\n-    \'sphinxcontrib-robotdoc\'\n+    "sphinxcontrib-robotdoc"\n ]\n \n setup(\n-    name=\'plone.app.robotframework\',\n+    name="plone.app.robotframework",\n     version=version,\n     description="Robot Framework testing resources for Plone",\n     long_description=long_description,\n@@ -130,22 +118,24 @@ def read(filename):\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'robot automatic browser testing Plone\',\n-    author=\'Asko Soukka\',\n-    author_email=\'asko.soukka@iki.fi\',\n-    url=\'https://github.com/plone/plone.app.robotframework/\',\n-    license=\'GPL\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    keywords="robot automatic browser testing Plone",\n+    author="Asko Soukka",\n+    author_email="asko.soukka@iki.fi",\n+    url="https://github.com/plone/plone.app.robotframework/",\n+    license="GPL",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=install_requires,\n-    extras_require={\'ride\': ride_requires,\n-                    \'speak\': speak_requires,\n-                    \'test\': test_requires,\n-                    \'reload\': reload_requires,\n-                    \'docs\': docs_requires,\n-                    \'debug\': debug_requires},\n+    extras_require={\n+        "ride": ride_requires,\n+        "speak": speak_requires,\n+        "test": test_requires,\n+        "reload": reload_requires,\n+        "docs": docs_requires,\n+        "debug": debug_requires,\n+    },\n     entry_points=entry_points,\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/robotframework/__init__.py b/src/plone/app/robotframework/__init__.py\nindex 06749a1..ee4b7e6 100644\n--- a/src/plone/app/robotframework/__init__.py\n+++ b/src/plone/app/robotframework/__init__.py\n@@ -1,30 +1,26 @@\n-# -*- coding: utf-8 -*-\n-\n # Stand-alone Python keyword libraries\n-from plone.app.robotframework.server import Zope2Server\n-from plone.app.robotframework.saucelabs import SauceLabs\n-from plone.app.robotframework.keywords import Debugging\n-from plone.app.robotframework.keywords import LayoutMath\n+# Load our patches.  Call it _patches to mark it as private.\n+from plone.app.robotframework import patches as _patches\n from plone.app.robotframework.annotate import Annotate\n-\n-# Remote Python libraries\n-from plone.app.robotframework.server import Zope2ServerRemote\n from plone.app.robotframework.autologin import AutoLogin\n+from plone.app.robotframework.content import Content\n from plone.app.robotframework.genericsetup import GenericSetup\n from plone.app.robotframework.i18n import I18N\n+from plone.app.robotframework.keywords import Debugging\n+from plone.app.robotframework.keywords import LayoutMath\n from plone.app.robotframework.mailhost import MockMailHost\n-from plone.app.robotframework.users import Users\n-from plone.app.robotframework.content import Content\n from plone.app.robotframework.quickinstaller import QuickInstaller\n \n # Generic remote Python library layer\n from plone.app.robotframework.remote import RemoteLibraryLayer\n+from plone.app.robotframework.saucelabs import SauceLabs\n \n # Pybot listener for calling Robot Server from pybot\n+# Remote Python libraries\n from plone.app.robotframework.server import RobotListener\n+from plone.app.robotframework.server import Zope2Server\n+from plone.app.robotframework.server import Zope2ServerRemote\n \n # Robot Plone fixture\n from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n-\n-# Load our patches.  Call it _patches to mark it as private.\n-from plone.app.robotframework import patches as _patches\n+from plone.app.robotframework.users import Users\ndiff --git a/src/plone/app/robotframework/annotate.py b/src/plone/app/robotframework/annotate.py\nindex b02ddc8..7e73f56 100644\n--- a/src/plone/app/robotframework/annotate.py\n+++ b/src/plone/app/robotframework/annotate.py\n@@ -1,13 +1,9 @@\n-# -*- coding: utf-8 -*-\n-\n import os.path\n \n \n class Annotate:\n-\n     def crop_image(self, output_dir, filename, left, top, width, height):\n-        """Crop the saved image with given filename for the given dimensions.\n-        """\n+        """Crop the saved image with given filename for the given dimensions."""\n         from PIL import Image\n \n         img = Image.open(os.path.join(output_dir, filename))\n@@ -15,5 +11,5 @@ def crop_image(self, output_dir, filename, left, top, width, height):\n \n         area = img.crop(box)\n \n-        with open(os.path.join(output_dir, filename), \'wb\') as output:\n-            area.save(output, \'png\')\n+        with open(os.path.join(output_dir, filename), "wb") as output:\n+            area.save(output, "png")\ndiff --git a/src/plone/app/robotframework/autologin.py b/src/plone/app/robotframework/autologin.py\nindex 4a3e802..a6f8b50 100644\n--- a/src/plone/app/robotframework/autologin.py\n+++ b/src/plone/app/robotframework/autologin.py\n@@ -1,12 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from Products.PlonePAS.setuphandlers import activatePluginInterfaces\n-from Products.PluggableAuthService.plugins import DomainAuthHelper\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from Products.PlonePAS.setuphandlers import activatePluginInterfaces\n+from Products.PluggableAuthService.plugins import DomainAuthHelper\n \n \n class AutoLogin(RemoteLibrary):\n-\n     def enable_autologin_as(self, *args):\n         """Add and configure DomainAuthHelper PAS-plugin to login\n         all anonymous users from localhost as a special *Remote User* with\n@@ -18,27 +16,26 @@ def enable_autologin_as(self, *args):\n \n         """\n         disableCSRFProtection()\n-        if \'robot_login\' in self.acl_users.objectIds():\n+        if "robot_login" in self.acl_users.objectIds():\n             self.acl_users.robot_login._domain_map.clear()\n         else:\n-            DomainAuthHelper.manage_addDomainAuthHelper(\n-                self.acl_users, \'robot_login\')\n-            activatePluginInterfaces(self, \'robot_login\')\n-        user = \', \'.join(sorted(args))\n+            DomainAuthHelper.manage_addDomainAuthHelper(self.acl_users, "robot_login")\n+            activatePluginInterfaces(self, "robot_login")\n+        user = ", ".join(sorted(args))\n         self.acl_users.robot_login.manage_addMapping(\n-            match_type=\'regex\', match_string=\'.*\', roles=args, username=user)\n+            match_type="regex", match_string=".*", roles=args, username=user\n+        )\n \n     def set_autologin_username(self, username):\n-        """Update autologin mapping with the given username\n-        """\n+        """Update autologin mapping with the given username"""\n         disableCSRFProtection()\n-        if \'robot_login\' not in self.acl_users.objectIds():\n-            raise Exception(u"Autologin is not enabled")\n+        if "robot_login" not in self.acl_users.objectIds():\n+            raise Exception("Autologin is not enabled")\n         if len(self.acl_users.robot_login._domain_map) == 0:\n-            raise Exception(u"Autologin is not enabled")\n+            raise Exception("Autologin is not enabled")\n         domain_map_key = list(self.acl_users.robot_login._domain_map.keys())[0]\n         domain_map = self.acl_users.robot_login._domain_map[domain_map_key]\n-        domain_map[0][\'username\'] = username\n+        domain_map[0]["username"] = username\n         self.acl_users.robot_login._domain_map[domain_map_key] = domain_map\n \n     def disable_autologin(self):\n@@ -48,6 +45,6 @@ def disable_autologin(self):\n             Disable autologin\n \n         """\n-        if \'robot_login\' in self.acl_users.objectIds():\n+        if "robot_login" in self.acl_users.objectIds():\n             disableCSRFProtection()\n             self.acl_users.robot_login._domain_map.clear()\ndiff --git a/src/plone/app/robotframework/config.py b/src/plone/app/robotframework/config.py\nindex e38b88b..e69de29 100644\n--- a/src/plone/app/robotframework/config.py\n+++ b/src/plone/app/robotframework/config.py\n@@ -1,26 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-import pkg_resources\n-\n-try:\n-    pkg_resources.get_distribution(\'plone.dexterity\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_DEXTERITY = False\n-else:\n-    HAS_DEXTERITY = True\n-\n-\n-try:\n-    pkg_resources.get_distribution(\'z3c.relationfield\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_DEXTERITY_RELATIONS = False\n-else:\n-    HAS_DEXTERITY_RELATIONS = True\n-\n-\n-try:\n-    pkg_resources.get_distribution(\'z3c.blobfile\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_BLOBS = False\n-else:\n-    HAS_BLOBS = True\ndiff --git a/src/plone/app/robotframework/content.py b/src/plone/app/robotframework/content.py\nindex c03fa07..31459b2 100644\n--- a/src/plone/app/robotframework/content.py\n+++ b/src/plone/app/robotframework/content.py\n@@ -1,62 +1,55 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n-from plone.app.robotframework.config import HAS_BLOBS\n-from plone.app.robotframework.config import HAS_DEXTERITY\n-from plone.app.robotframework.config import HAS_DEXTERITY_RELATIONS\n+from io import BytesIO\n+from PIL import Image\n+from PIL import ImageDraw\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n-from plone.i18n.normalizer.interfaces import IURLNormalizer\n+from plone.app.textfield.value import RichTextValue\n+from plone.dexterity.utils import getAdditionalSchemata\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n+from z3c.form.interfaces import IDataConverter\n+from z3c.form.interfaces import IDataManager\n+from z3c.form.interfaces import IFieldWidget\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n-from zope.component import queryUtility\n+from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.event import notify\n from zope.globalrequest import getRequest\n from zope.lifecycleevent import ObjectModifiedEvent\n+from zope.schema.interfaces import IFromUnicode\n \n import os\n-import six\n+import pkg_resources\n+import random\n+import string\n \n \n-if HAS_DEXTERITY:\n-    from plone.app.textfield.value import RichTextValue\n-\n-    from plone.dexterity.utils import getAdditionalSchemata\n-    from plone.dexterity.fti import DexterityFTI\n-    from z3c.form.interfaces import IDataConverter\n-    from z3c.form.interfaces import IDataManager\n-    from z3c.form.interfaces import IFieldWidget\n-    from zope.component import queryMultiAdapter\n-    from zope.schema.interfaces import IFromUnicode\n-\n-    if HAS_BLOBS:\n-        from plone.namedfile.file import NamedBlobFile\n-        from plone.namedfile.file import NamedBlobImage\n-    else:\n-        from plone.namedfile.file import NamedFile as NamedBlobFile\n-        from plone.namedfile.file import NamedImage as NamedBlobImage\n-\n-if HAS_DEXTERITY_RELATIONS:\n-    from zope.intid.interfaces import IIntIds\n+try:\n+    pkg_resources.get_distribution("z3c.relationfield")\n+except pkg_resources.DistributionNotFound:\n+    HAS_DEXTERITY_RELATIONS = False\n+else:\n     from z3c.relationfield import RelationValue\n+    from zope.intid.interfaces import IIntIds\n \n+    HAS_DEXTERITY_RELATIONS = True\n \n-class Content(RemoteLibrary):\n \n+class Content(RemoteLibrary):\n     def delete_content(self, uid_or_path):\n         """Delete content by uid or path"""\n         disableCSRFProtection()\n         portal = getSite()\n-        pc = getToolByName(portal, \'portal_catalog\')\n-        uid_results =\\\n-            pc.unrestrictedSearchResults(UID=uid_or_path)\n-        path_results = \\\n-            pc.unrestrictedSearchResults(\n-                path={\'query\': uid_or_path.rstrip(\'/\'), \'depth\': 0})\n-        content =\\\n-            (uid_results or path_results)[0]._unrestrictedGetObject()\n+        pc = getToolByName(portal, "portal_catalog")\n+        uid_results = pc.unrestrictedSearchResults(UID=uid_or_path)\n+        path_results = pc.unrestrictedSearchResults(\n+            path={"query": uid_or_path.rstrip("/"), "depth": 0}\n+        )\n+        content = (uid_results or path_results)[0]._unrestrictedGetObject()\n         content.aq_parent.manage_delObjects([content.getId()])\n \n     def create_content(self, *args, **kwargs):\n@@ -64,23 +57,21 @@ def create_content(self, *args, **kwargs):\n         disableCSRFProtection()\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n-        for arg in [x for x in args if \'=\' in x]:\n-            name, value = arg.split(\'=\', 1)\n+        for arg in [x for x in args if "=" in x]:\n+            name, value = arg.split("=", 1)\n             kwargs[name] = value\n \n-        assert \'type\' in kwargs, u"Keyword arguments must include \'type\'."\n-        portal_type = kwargs.get(\'type\')\n+        assert "type" in kwargs, "Keyword arguments must include \'type\'."\n+        portal_type = kwargs.get("type")\n         portal = getSite()\n-        if \'container\' in kwargs:\n-            pc = getToolByName(portal, \'portal_catalog\')\n-            uid_or_path = kwargs.pop(\'container\')\n-            uid_results =\\\n-                pc.unrestrictedSearchResults(UID=uid_or_path)\n-            path_results = \\\n-                pc.unrestrictedSearchResults(\n-                    path={\'query\': uid_or_path.rstrip(\'/\'), \'depth\': 0})\n-            container =\\\n-                (uid_results or path_results)[0]._unrestrictedGetObject()\n+        if "container" in kwargs:\n+            pc = getToolByName(portal, "portal_catalog")\n+            uid_or_path = kwargs.pop("container")\n+            uid_results = pc.unrestrictedSearchResults(UID=uid_or_path)\n+            path_results = pc.unrestrictedSearchResults(\n+                path={"query": uid_or_path.rstrip("/"), "depth": 0}\n+            )\n+            container = (uid_results or path_results)[0]._unrestrictedGetObject()\n         else:\n             container = portal\n \n@@ -89,46 +80,40 @@ def create_content(self, *args, **kwargs):\n         create_kwargs = {}\n         create_kwargs.update(kwargs)\n \n-        if HAS_DEXTERITY:\n-            if portal_type in (\'File\', ) and \'file\' not in kwargs:\n-                pdf_file = os.path.join(\n-                    os.path.dirname(__file__), \'content\', u\'file.pdf\')\n-                with open(pdf_file, \'rb\') as f:\n-                    file_data = f.read()\n-                value = NamedBlobFile(\n-                    data=file_data,\n-                    contentType=\'application/pdf\',\n-                    filename=u\'file.pdf\'\n-                )\n-                kwargs[\'file\'] = value\n+        if portal_type in ("File",) and "file" not in kwargs:\n+            pdf_file = os.path.join(os.path.dirname(__file__), "content", "file.pdf")\n+            with open(pdf_file, "rb") as f:\n+                file_data = f.read()\n+            value = NamedBlobFile(\n+                data=file_data, contentType="application/pdf", filename="file.pdf"\n+            )\n+            kwargs["file"] = value\n \n-        if portal_type in (\'Image\', \'News Item\') and \'image\' not in kwargs:\n-            prefill_image_types(portal, kwargs)\n+        if portal_type in ("Image", "News Item") and "image" not in kwargs:\n+            prefill_image_types(kwargs)\n \n-        id_ = kwargs.pop(\'id\', None)\n-        type_ = kwargs.pop(\'type\')\n+        id_ = kwargs.pop("id", None)\n+        type_ = kwargs.pop("type")\n \n         content = None\n-        if HAS_DEXTERITY:\n-            # The title attribute for Dexterity types needs to be unicode\n-            if \'title\' in kwargs and isinstance(kwargs[\'title\'], six.binary_type):\n-                kwargs[\'title\'] = kwargs[\'title\'].decode(\'utf-8\')\n-                create_kwargs[\'title\'] = create_kwargs[\'title\'].decode(\'utf-8\')\n-            from plone.dexterity.interfaces import IDexterityFTI\n-            from plone.dexterity.utils import createContentInContainer\n-            try:\n-                getUtility(IDexterityFTI, name=type_)\n-                content = createContentInContainer(\n-                    container, type_, **create_kwargs)\n-                if id_ is not None and content.id != id_:\n-                    container.manage_renameObject(content.id, id_)\n-            except ComponentLookupError:\n-                pass\n-\n-        if HAS_DEXTERITY and content:\n-            # For dexterity-types, we need a second pass to fill all fields\n-            # using their widgets to get e.g. RichText-values created\n-            # correctly.\n+        # The title attribute needs to be unicode.\n+        if "title" in kwargs and isinstance(kwargs["title"], bytes):\n+            kwargs["title"] = kwargs["title"].decode("utf-8")\n+            create_kwargs["title"] = create_kwargs["title"].decode("utf-8")\n+        from plone.dexterity.interfaces import IDexterityFTI\n+        from plone.dexterity.utils import createContentInContainer\n+\n+        try:\n+            getUtility(IDexterityFTI, name=type_)\n+            content = createContentInContainer(container, type_, **create_kwargs)\n+            if id_ is not None and content.id != id_:\n+                container.manage_renameObject(content.id, id_)\n+        except ComponentLookupError:\n+            pass\n+\n+        if content:\n+            # We need a second pass to fill all fields using their widgets to\n+            # get e.g. RichText-values created correctly.\n             fti = getUtility(IDexterityFTI, name=type_)\n             schema = fti.lookupSchema()\n             fields = {}\n@@ -142,107 +127,82 @@ def create_content(self, *args, **kwargs):\n                 if widget and name in kwargs:\n                     if not IFromUnicode.providedBy(field):\n                         value = kwargs[name]\n-                    elif isinstance(kwargs[name], six.text_type):\n+                    elif isinstance(kwargs[name], str):\n                         value = kwargs[name]\n                     else:\n-                        value = six.text_type(str(kwargs[name]), \'utf-8\',\n-                                        errors=\'ignore\')\n+                        value = str(str(kwargs[name]), "utf-8", errors="ignore")\n                     converter = IDataConverter(widget)\n                     dm = queryMultiAdapter((content, field), IDataManager)\n                     if dm:\n                         dm.set(converter.toFieldValue(value))\n \n-        if content is None:\n-            if id_ is None:\n-                normalizer = queryUtility(IURLNormalizer)\n-                id_ = normalizer.normalize(kwargs[\'title\'])\n-\n-            # It must be Archetypes based content:\n-            content = container[container.invokeFactory(type_, id_, **kwargs)]\n-            content.processForm()\n-\n         return IUUID(content)\n \n-    if HAS_DEXTERITY:\n-\n-        def set_field_value(self, uid, field, value, field_type):\n-            """Set field value with a specific type\n-\n-            XXX: Only dexterity fields are supported\n-            """\n-            pc = getToolByName(self, \'portal_catalog\')\n-            results = pc.unrestrictedSearchResults(UID=uid)\n-            obj = results[0]._unrestrictedGetObject()\n-            if field_type == \'float\':\n-                value = float(value)\n-            if field_type == \'int\':\n-                value = int(value)\n-            if field_type == \'list\':\n-                value = eval(value)\n-            if field_type.startswith(\'datetime\'):\n-                # field_type must begin with \'datetime\'\n-                # followed by optional format \'datetime%Y%m%d%H%M\'\n-                # without format: %Y%m%d%H%M is used\n-                field_type = field_type[8:]\n-                fmt = field_type and field_type or \'%Y%m%d%H%M\'\n-                value = datetime.strptime(value, fmt)\n-            if field_type.startswith(\'date\'):\n-                # field_type must begin with \'date\'\n-                # followed by optional format \'date%Y%m%d\'\n-                # without format: %Y%m%d is used\n-                field_type = field_type[4:]\n-                fmt = field_type and field_type or \'%Y%m%d\'\n-                value = datetime.strptime(value, fmt).date()\n-            if field_type == \'reference\' and HAS_DEXTERITY_RELATIONS:\n-                results_referenced = pc.unrestrictedSearchResults(UID=value)\n+    def set_field_value(self, uid, field, value, field_type):\n+        """Set field value with a specific type"""\n+        pc = getToolByName(self, "portal_catalog")\n+        results = pc.unrestrictedSearchResults(UID=uid)\n+        obj = results[0]._unrestrictedGetObject()\n+        if field_type == "float":\n+            value = float(value)\n+        if field_type == "int":\n+            value = int(value)\n+        if field_type == "list":\n+            value = eval(value)\n+        if field_type.startswith("datetime"):\n+            # field_type must begin with \'datetime\'\n+            # followed by optional format \'datetime%Y%m%d%H%M\'\n+            # without format: %Y%m%d%H%M is used\n+            field_type = field_type[8:]\n+            fmt = field_type and field_type or "%Y%m%d%H%M"\n+            value = datetime.strptime(value, fmt)\n+        if field_type.startswith("date"):\n+            # field_type must begin with \'date\'\n+            # followed by optional format \'date%Y%m%d\'\n+            # without format: %Y%m%d is used\n+            field_type = field_type[4:]\n+            fmt = field_type and field_type or "%Y%m%d"\n+            value = datetime.strptime(value, fmt).date()\n+        if field_type == "reference" and HAS_DEXTERITY_RELATIONS:\n+            results_referenced = pc.unrestrictedSearchResults(UID=value)\n+            referenced_obj = results_referenced[0]._unrestrictedGetObject()\n+            intids = getUtility(IIntIds)\n+            referenced_obj_intid = intids.getId(referenced_obj)\n+            value = RelationValue(referenced_obj_intid)\n+        if field_type == "references" and HAS_DEXTERITY_RELATIONS:\n+            values = eval(value)\n+            intids = getUtility(IIntIds)\n+            value = []\n+            for uid in values:\n+                results_referenced = pc.unrestrictedSearchResults(UID=uid)\n                 referenced_obj = results_referenced[0]._unrestrictedGetObject()\n-                intids = getUtility(IIntIds)\n                 referenced_obj_intid = intids.getId(referenced_obj)\n-                value = RelationValue(referenced_obj_intid)\n-            if field_type == \'references\' and HAS_DEXTERITY_RELATIONS:\n-                values = eval(value)\n-                intids = getUtility(IIntIds)\n-                value = []\n-                for uid in values:\n-                    results_referenced = pc.unrestrictedSearchResults(UID=uid)\n-                    referenced_obj = results_referenced[0]._unrestrictedGetObject()\n-                    referenced_obj_intid = intids.getId(referenced_obj)\n-                    value.append(RelationValue(referenced_obj_intid))\n-            if field_type == \'text/html\':\n-                value = RichTextValue(\n-                    value,\n-                    \'text/html\',\n-                    \'text/html\'\n-                )\n-                obj.text = value\n-            if field_type == \'file\':\n-                pdf_file = os.path.join(\n-                    os.path.dirname(__file__), \'content\', u\'file.pdf\')\n-                with open(pdf_file, \'rb\') as f:\n-                    file_data = f.read()\n-                value = NamedBlobFile(\n-                    data=file_data,\n-                    contentType=\'application/pdf\',\n-                    filename=u\'file.pdf\'\n-                )\n-            if field_type == \'image\':\n-                image_file = os.path.join(\n-                    os.path.dirname(__file__), u\'image.jpg\')\n-                with open(image_file, \'rb\') as f:\n-                    image_data = f.read()\n-                value = NamedBlobImage(\n-                    data=image_data,\n-                    contentType=\'image/jpg\',\n-                    filename=u\'image.jpg\'\n-                )\n-\n-            setattr(obj, field, value)\n-            obj.reindexObject()\n-            notify(ObjectModifiedEvent(obj))\n+                value.append(RelationValue(referenced_obj_intid))\n+        if field_type == "text/html":\n+            value = RichTextValue(value, "text/html", "text/html")\n+            obj.text = value\n+        if field_type == "file":\n+            pdf_file = os.path.join(os.path.dirname(__file__), "content", "file.pdf")\n+            with open(pdf_file, "rb") as f:\n+                file_data = f.read()\n+            value = NamedBlobFile(\n+                data=file_data, contentType="application/pdf", filename="file.pdf"\n+            )\n+        if field_type == "image":\n+            image_file = os.path.join(os.path.dirname(__file__), "image.jpg")\n+            with open(image_file, "rb") as f:\n+                image_data = f.read()\n+            value = NamedBlobImage(\n+                data=image_data, contentType="image/jpg", filename="image.jpg"\n+            )\n+\n+        setattr(obj, field, value)\n+        obj.reindexObject()\n+        notify(ObjectModifiedEvent(obj))\n \n     def uid_to_url(self, uid):\n         """Return absolute path for an UID"""\n-        pc = getToolByName(self, \'portal_catalog\')\n+        pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(UID=str(uid))\n         if not results:\n             return None\n@@ -251,9 +211,10 @@ def uid_to_url(self, uid):\n \n     def path_to_uid(self, path):\n         """Return UID for an absolute path"""\n-        pc = getToolByName(self, \'portal_catalog\')\n+        pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(\n-            path={\'query\': path.rstrip(\'/\'), \'depth\': 0})\n+            path={"query": path.rstrip("/"), "depth": 0}\n+        )\n         if not results:\n             return None\n         else:\n@@ -264,10 +225,10 @@ def fire_transition(self, content, action):\n         disableCSRFProtection()\n         # It should be ok to use unrestricted-methods, because workflow\n         # transition guard should proctect unprivileged transition:\n-        pc = getToolByName(self, \'portal_catalog\')\n+        pc = getToolByName(self, "portal_catalog")\n         results = pc.unrestrictedSearchResults(UID=content)\n         obj = results[0]._unrestrictedGetObject()\n-        wftool = getToolByName(obj, \'portal_workflow\')\n+        wftool = getToolByName(obj, "portal_workflow")\n         wftool.doActionFor(obj, action)\n \n     do_action_for = fire_transition\n@@ -280,51 +241,24 @@ def global_allow(self, type_, value=True):\n         types_tool[type_].global_allow = value\n \n \n-def prefill_image_types(portal, kwargs):\n-    portal_type = kwargs.get(\'type\')\n-    portal_types = getToolByName(portal, \'portal_types\')\n-    fti = portal_types[portal_type]\n-    if HAS_DEXTERITY and isinstance(fti, DexterityFTI):\n-        prefill_image_types_dexterity(kwargs)\n-    else:\n-        prefill_image_types_archetypes(kwargs)\n+def prefill_image_types(kwargs):\n+    image = random_image()\n+    filename = "{}.png".format(\n+        "".join(random.choice(string.ascii_lowercase) for _ in range(6))\n+    )\n+    kwargs["image"] = NamedBlobImage(data=image, filename=filename)\n \n \n def random_image():\n-    import random\n-    from six import BytesIO\n-    from PIL import Image\n-    from PIL import ImageDraw\n-\n-    img = Image.new(\'RGB\', (random.randint(320, 640),\n-                            random.randint(320, 640)))\n+    img = Image.new("RGB", (random.randint(320, 640), random.randint(320, 640)))\n     draw = ImageDraw.Draw(img)\n     draw.rectangle(\n         ((0, 0), img.size),\n-        fill=(\n-            random.randint(0, 255),\n-            random.randint(0, 255),\n-            random.randint(0, 255)\n-        )\n+        fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),\n     )\n     del draw\n \n     result = BytesIO()\n-    img.save(result, \'PNG\')\n+    img.save(result, "PNG")\n     result.seek(0)\n-    return result\n-\n-\n-def prefill_image_types_dexterity(kwargs):\n-    import random\n-    import string\n-    image = random_image()\n-    filename = u\'{}.png\'.format(\'\'.join(\n-        random.choice(string.ascii_lowercase) for _ in range(6)\n-    ))\n-    kwargs[\'image\'] = NamedBlobImage(\n-        data=image, filename=filename)\n-\n-\n-def prefill_image_types_archetypes(kwargs):\n-    kwargs[\'image\'] = random_image()\n+    return result.read()\ndiff --git a/src/plone/app/robotframework/genericsetup.py b/src/plone/app/robotframework/genericsetup.py\nindex 155a5ed..301587f 100644\n--- a/src/plone/app/robotframework/genericsetup.py\n+++ b/src/plone/app/robotframework/genericsetup.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n \n \n class GenericSetup(RemoteLibrary):\n-\n     def apply_profile(self, name):\n         """Apply named profile"""\n         disableCSRFProtection()\n         from Products.CMFCore.utils import getToolByName\n-        portal_setup = getToolByName(self, \'portal_setup\')\n-        portal_setup.runAllImportStepsFromProfile(\'profile-%s\' % name)\n\\ No newline at end of file\n+\n+        portal_setup = getToolByName(self, "portal_setup")\n+        portal_setup.runAllImportStepsFromProfile("profile-%s" % name)\ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex f07392c..2af6f82 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -1,6 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n@@ -9,22 +9,14 @@\n import os\n \n \n-try:\n-    from plone.i18n.interfaces import ILanguageSchema\n-except ImportError:\n-    # BBB for Plone 5.1, remove with Plone 6\n-    from Products.CMFPlone.interfaces import ILanguageSchema\n-\n-\n class I18N(RemoteLibrary):\n-\n     def set_default_language(self, language=None):\n         """Change portal default language"""\n         disableCSRFProtection()\n         if language is None:\n-            language = os.environ.get(\'LANGUAGE\') or \'en\'\n+            language = os.environ.get("LANGUAGE") or "en"\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         settings.default_language = language\n \n     def translate(self, msgid, *args, **kwargs):\n@@ -32,27 +24,30 @@ def translate(self, msgid, *args, **kwargs):\n         # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n-        for arg in [x for x in args if \'=\' in x]:\n-            name, value = arg.split(\'=\', 1)\n+        for arg in [x for x in args if "=" in x]:\n+            name, value = arg.split("=", 1)\n             kwargs[name] = value\n \n         mapping = {}\n         for key, value in kwargs.items():\n-            if key not in (\'target_language\', \'domain\', \'default\'):\n+            if key not in ("target_language", "domain", "default"):\n                 mapping[key] = value\n-        if kwargs.get(\'target_language\'):\n+        if kwargs.get("target_language"):\n             return translate(\n                 msgid,\n-                target_langauge=kwargs.get(\'target_language\'),\n-                domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+                target_langauge=kwargs.get("target_language"),\n+                domain=kwargs.get("domain") or "plone",\n+                default=kwargs.get("default") or msgid,\n+                mapping=mapping,\n             )\n         else:\n             # XXX: Should self.REQUEST be replaced with\n             # zope.globalrequest.getRequest()?\n             request = getRequest()\n             return translate(\n-                msgid, context=request,\n-                domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+                msgid,\n+                context=request,\n+                domain=kwargs.get("domain") or "plone",\n+                default=kwargs.get("default") or msgid,\n+                mapping=mapping,\n             )\ndiff --git a/src/plone/app/robotframework/keywords.py b/src/plone/app/robotframework/keywords.py\nindex d070949..ed55cb4 100644\n--- a/src/plone/app/robotframework/keywords.py\n+++ b/src/plone/app/robotframework/keywords.py\n@@ -1,22 +1,21 @@\n-# -*- coding: utf-8 -*-\n """Standalone Python keyword-libraries"""\n \n \n class LayoutMath:\n-\n     def get_offset_difference(self, source_offset, dest_offset, padding):\n         """Return dest_offset - source_offset + padding"""\n         return (int(dest_offset) - int(source_offset)) + int(padding)\n \n \n class Debugging:\n-\n     def stop(self):\n         """Pauses the test runner and drops it into Python debugger.\n         Enter \'c\' into debugger to continue.\n         """\n         import sys\n-        for attr in (\'stdin\', \'stdout\', \'stderr\'):\n-            setattr(sys, attr, getattr(sys, \'__%s__\' % attr))\n+\n+        for attr in ("stdin", "stdout", "stderr"):\n+            setattr(sys, attr, getattr(sys, "__%s__" % attr))\n         import pdb\n+\n         pdb.set_trace()\ndiff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex 0d0e647..1c9a5c2 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -304,19 +304,6 @@ Open wizard tab\n # Widgets\n # ----------------------------------------------------------------------------\n \n-Set Reference Browser Field Value\n-    [arguments]  ${fieldName}  @{path}\n-    Click Overlay Button  css=#archetypes-fieldname-${fieldName} input[type=button]\n-    ${len}=  Get Length  ${path}\n-    :FOR  ${i}  IN RANGE  ${len}\n-    \\   Run Keyword If  ${i}!=${len}-1  Click Link  xpath=//table[contains(@class, \'group\')]//a[contains(., "@{path}[${i}]")]\n-    \\   Run Keyword If  ${i}==${len}-1  Checkbox Select  @{path}[${i}]\n-\n-Checkbox Select\n-    [arguments]  ${title}\n-    ${for}=  Get Element Attribute  xpath=//table[contains(@class, \'group\')]//label[contains(., "${title}")]@for\n-    Select Checkbox  id=${for}\n-\n Remove line from textarea\n     [arguments]  ${fieldName}  ${value}\n     ${lines}=  Get value  name=${fieldName}\ndiff --git a/src/plone/app/robotframework/mailhost.py b/src/plone/app/robotframework/mailhost.py\nindex 0e27ec3..3c65b69 100644\n--- a/src/plone/app/robotframework/mailhost.py\n+++ b/src/plone/app/robotframework/mailhost.py\n@@ -1,13 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n \n \n class MockMailHost(RemoteLibrary):\n-\n     def get_the_last_sent_email(self):\n-        """Return the last sent email from MockMailHost sent messages storage\n-        """\n-        return self.MailHost.messages[-1] if self.MailHost.messages else u""\n+        """Return the last sent email from MockMailHost sent messages storage"""\n+        return self.MailHost.messages[-1] if self.MailHost.messages else ""\n \n     def get_the_total_amount_of_sent_emails(self):\n         """Return the total amount of sent emails in MockMailHost sent messages\ndiff --git a/src/plone/app/robotframework/patches.py b/src/plone/app/robotframework/patches.py\nindex 791e2ce..4232c2f 100644\n--- a/src/plone/app/robotframework/patches.py\n+++ b/src/plone/app/robotframework/patches.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n # Patch selenium.is_connectable for Python 3.\n # See https://github.com/SeleniumHQ/selenium/pull/6480\n # and for Plone: https://github.com/plone/Products.CMFPlone/issues/2786\n from selenium.webdriver.common import utils\n \n+\n try:\n     # Python 3\n     ConnectionResetError\ndiff --git a/src/plone/app/robotframework/pybabel.py b/src/plone/app/robotframework/pybabel.py\nindex 73ead52..eabd01c 100644\n--- a/src/plone/app/robotframework/pybabel.py\n+++ b/src/plone/app/robotframework/pybabel.py\n@@ -1,17 +1,19 @@\n-# -*- coding: utf-8 -*-\n-\n # WARNING: This module must not be imported outside running babel\n+import robot\n+import robot.parsing.tablepopulators\n+\n \n MESSAGES = []\n \n+\n def populate(self):\n     if self._value or self._comments:\n         self._setter(self._value, self._comments.value)\n     try:\n-        parts = map(six.text_type.lower, self._value)\n-        index = parts.index(\'translate\')\n+        parts = map(str.lower, self._value)\n+        index = parts.index("translate")\n         comments = []\n-        for part in filter(lambda x: x.startswith(\'default=\'), self._value):\n+        for part in filter(lambda x: x.startswith("default="), self._value):\n             comments.append(\'Default: "%s"\' % part[8:])\n         MESSAGES.append((0, None, self._value[index + 1], comments))\n     except ValueError:\n@@ -19,17 +21,10 @@ def populate(self):\n     except IndexError:\n         pass\n \n-import robot\n-import robot.parsing.tablepopulators\n-import six\n-\n \n robot.parsing.tablepopulators.StepPopulator.populate = populate\n \n \n-\n-\n-\n def extract_robot(fileobj, keywords, comment_tags, options):\n     global MESSAGES\n     try:\ndiff --git a/src/plone/app/robotframework/quickinstaller.py b/src/plone/app/robotframework/quickinstaller.py\nindex ce96b30..4747217 100644\n--- a/src/plone/app/robotframework/quickinstaller.py\n+++ b/src/plone/app/robotframework/quickinstaller.py\n@@ -1,12 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from zope.component.hooks import getSite\n-from Products.CMFCore.utils import getToolByName\n from plone.app.robotframework.remote import RemoteLibrary\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import get_installer\n+from zope.component.hooks import getSite\n \n \n class QuickInstaller(RemoteLibrary):\n-\n     def product_is_activated(self, product_name):\n         """Assert that given product_name is activated (installed) in\n         the add-ons control panel.\n@@ -14,10 +12,10 @@ def product_is_activated(self, product_name):\n         portal = getSite()\n         qi = get_installer(portal)\n         installed = qi.is_product_installed(product_name)\n-        portal_setup = getToolByName(portal, \'portal_setup\')\n-        imported = portal_setup.getProfileImportDate(\n-            \'profile-{0}:default\'.format(product_name))\n-        assert installed or imported,\\\n-            u"Product \'{0}\' was not activated.".format(product_name)\n+        portal_setup = getToolByName(portal, "portal_setup")\n+        imported = portal_setup.getProfileImportDate(f"profile-{product_name}:default")\n+        assert installed or imported, "Product \'{}\' was not activated.".format(\n+            product_name\n+        )\n \n     product_is_installed = product_is_activated\ndiff --git a/src/plone/app/robotframework/reload.py b/src/plone/app/robotframework/reload.py\nindex e72ea22..201aa65 100644\n--- a/src/plone/app/robotframework/reload.py\n+++ b/src/plone/app/robotframework/reload.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from watchdog.events import FileSystemEventHandler\n from watchdog.observers import Observer\n \n@@ -9,20 +7,20 @@\n \n \n def TIME():\n-    return time.strftime(\'%H:%M:%S\')\n+    return time.strftime("%H:%M:%S")\n \n \n def WAIT(msg):\n-    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n+    return f"{TIME()} [\\033[33m wait \\033[0m] {msg}"\n \n \n def ERROR(msg):\n-    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+    return f"{TIME()} [\\033[31m ERROR \\033[0m] {msg}"\n \n \n class Watcher(FileSystemEventHandler):\n \n-    allowed_extensions = set((\'po\', \'pt\', \'py\', \'xml\', \'csv\', \'zcml\'))\n+    allowed_extensions = {"po", "pt", "py", "xml", "csv", "zcml"}\n \n     def __init__(self, paths, forkloop, minimum_wait=2.0):\n         FileSystemEventHandler.__init__(self)\n@@ -33,8 +31,7 @@ def __init__(self, paths, forkloop, minimum_wait=2.0):\n         self.last_event = time.time()\n \n     def start(self):\n-        """Start file monitoring thread\n-        """\n+        """Start file monitoring thread"""\n \n         signal.signal(signal.SIGINT, self._exitHandler)\n         signal.signal(signal.SIGTERM, self._exitHandler)\n@@ -51,7 +48,7 @@ def _exitHandler(self):\n             observer.stop()\n \n     def on_any_event(self, event):\n-        extension = event.src_path.split(\'.\')[-1].lower()\n+        extension = event.src_path.split(".")[-1].lower()\n \n         if extension in self.allowed_extensions:\n             event_type = event.event_type\n@@ -65,20 +62,17 @@ def on_any_event(self, event):\n                     break\n \n             if self.last_event + self.minimum_wait < time.time():\n-                print(WAIT("Watchdog got %s event on %s"\n-                           % (event_type, event_relpath)))\n+                print(WAIT(f"Watchdog got {event_type} event on {event_relpath}"))\n                 try:\n                     self.forkloop.forkNewChild()\n                     self.last_event = time.time()\n                 except Exception as e:\n                     print(ERROR(str(e)))\n             else:\n-                print(WAIT("Watchdog skipped %s event on %s"\n-                           % (event_type, event_relpath)))\n-\n+                print(WAIT(f"Watchdog skipped {event_type} event on {event_relpath}"))\n \n-class ForkLoop(object):\n \n+class ForkLoop:\n     def __init__(self):\n \n         self.fork = True  # Must be \'True\' to create new child on start\n@@ -97,8 +91,8 @@ def isChild(self):\n     def isChildAlive(self):\n         if self.isChild():\n             return True\n-        elif self.child_pid is not None and os.path.exists(\'/proc\'):\n-            return os.path.exists(\'/proc/%i\' % self.child_pid)\n+        elif self.child_pid is not None and os.path.exists("/proc"):\n+            return os.path.exists("/proc/%i" % self.child_pid)\n         elif self.child_pid is not None:\n             try:\n                 os.kill(self.child_pid, 0)\n@@ -115,8 +109,7 @@ def _childIsGoingToDie(self, signum=None, frame=None):\n         self.killed_child = True\n \n     def start(self):\n-        """Start fork loop\n-        """\n+        """Start fork loop"""\n         # SIGCHLD tells us that child process has really died and we can spawn\n         # new child\n         signal.signal(signal.SIGCHLD, self._waitChildToDieAndScheduleNew)\n@@ -128,8 +121,7 @@ def start(self):\n         self.loop()\n \n     def loop(self):\n-        """Magic happens\n-        """\n+        """Magic happens"""\n         signal.signal(signal.SIGINT, self._parentExitHandler)\n         signal.signal(signal.SIGTERM, self._parentExitHandler)\n \n@@ -151,12 +143,14 @@ def loop(self):\n                     continue\n \n                 if not self.killed_child:\n-                    print(ERROR(\n-                        "Forked child process died on bootup. "\n-                        "Fix possible errors and save edits. "\n-                        "We are now paused until we detect the next file "\n-                        "change..."\n-                    ))\n+                    print(\n+                        ERROR(\n+                            "Forked child process died on bootup. "\n+                            "Fix possible errors and save edits. "\n+                            "We are now paused until we detect the next file "\n+                            "change..."\n+                        )\n+                    )\n \n                     # Child died because of unknown reason. Mark it as killed\n                     # and go into pause mode.\n@@ -187,16 +181,21 @@ def forkNewChild(self):\n \n         """\n         if not self.active:\n-            raise Exception("Cannot fork the process, because the fork loop "\n-                            "has not been started yet")\n+            raise Exception(\n+                "Cannot fork the process, because the fork loop "\n+                "has not been started yet"\n+            )\n \n         if self.forking:\n-            raise Exception("Cannot fork the process, because there should be "\n-                            "serious forking action already going on")\n+            raise Exception(\n+                "Cannot fork the process, because there should be "\n+                "serious forking action already going on"\n+            )\n \n         if self.child_pid is None:\n-            raise Exception("Cannot kill a process fork, because there should "\n-                            "not be one yet")\n+            raise Exception(\n+                "Cannot kill a process fork, because there should " "not be one yet"\n+            )\n \n         self.pause = False\n \n@@ -234,8 +233,9 @@ def _parentExitHandler(self, signum=None, frame=None):\n \n         while self.isChildAlive():\n             # XXX: Somehow this may get stuck if we don\'t print before kill\n-            print(WAIT("Fork loop is terminating its child process %s" %\n-                       self.child_pid))\n+            print(\n+                WAIT("Fork loop is terminating its child process %s" % self.child_pid)\n+            )\n             self._killChild()\n             time.sleep(2)\n \n@@ -270,11 +270,16 @@ def _waitChildToDieAndScheduleNew(self, signal=None, frame=None):\n                 print(WAIT("Fork loop terminated child process %d" % pid))\n \n             elif exit_flags:\n-                print(ERROR("Forked child process %d %s"\n-                            % (pid, ", ".join(exit_flags))))\n+                print(\n+                    ERROR("Forked child process %d %s" % (pid, ", ".join(exit_flags)))\n+                )\n             else:\n-                print(ERROR("Forked child process %d exited with code %s"\n-                            % (pid, exit_status)))\n+                print(\n+                    ERROR(\n+                        "Forked child process %d exited with code %s"\n+                        % (pid, exit_status)\n+                    )\n+                )\n \n         except OSError:\n             # OSError: [Errno 10] No child processes\ndiff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 1aa2c21..2967001 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -1,9 +1,5 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n-from plone.app.testing import (\n-    PLONE_FIXTURE,\n-    ploneSite\n-)\n+from plone.app.testing import PLONE_FIXTURE\n from plone.testing import Layer\n from Products.CMFPlone.Portal import PloneSite\n \n@@ -14,44 +10,43 @@ class RemoteLibrary(SimpleItem):\n     http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#remote-library-interface\n     https://github.com/robotframework/PythonRemoteServer/blob/master/src/robotremoteserver.py\n     """\n+\n     def get_keyword_names(self):\n-        """Return names of the implemented keywords\n-        """\n+        """Return names of the implemented keywords"""\n         blacklist = dir(SimpleItem)\n-        blacklist.extend([\n-            \'get_keyword_names\',\n-            \'get_keyword_arguments\',\n-            \'get_keyword_documentation\',\n-            \'run_keyword\'\n-        ])\n-        names = [x for x in dir(self) if x[0] != \'_\' and x not in blacklist]\n+        blacklist.extend(\n+            [\n+                "get_keyword_names",\n+                "get_keyword_arguments",\n+                "get_keyword_documentation",\n+                "run_keyword",\n+            ]\n+        )\n+        names = [x for x in dir(self) if x[0] != "_" and x not in blacklist]\n         return names\n \n     def get_keyword_arguments(self, name):\n-        """Return keyword arguments\n-        """\n+        """Return keyword arguments"""\n         return None\n \n     def get_keyword_documentation(self, name):\n-        """Return keyword documentation\n-        """\n+        """Return keyword documentation"""\n         func = getattr(self, name, None)\n-        return func.__doc__ if func else u\'\'\n+        return func.__doc__ if func else ""\n \n     def run_keyword(self, name, args, kwargs={}):\n-        """Execute the specified keyword with given arguments.\n-        """\n+        """Execute the specified keyword with given arguments."""\n         func = getattr(self, name, None)\n-        result = {\'error\': \'\', \'return\': \'\'}\n+        result = {"error": "", "return": ""}\n         try:\n             retval = func(*args, **kwargs)\n         except Exception as e:\n-            result[\'status\'] = \'FAIL\'\n-            result[\'error\'] = str(e)\n+            result["status"] = "FAIL"\n+            result["error"] = str(e)\n         else:\n-            result[\'status\'] = \'PASS\'\n-            result[\'return\'] = retval\n-            result[\'output\'] = retval\n+            result["status"] = "PASS"\n+            result["return"] = retval\n+            result["output"] = retval\n         return result\n \n \n@@ -61,17 +56,17 @@ class RemoteLibraryLayer(Layer):\n     libraryBases = ()\n \n     def __init__(self, *args, **kwargs):\n-        kwargs[\'name\'] = kwargs.get(\'name\', \'RobotRemote\')\n-        self.libraryBases = (RemoteLibrary,) + kwargs.pop(\'libraries\', ())\n-        super(RemoteLibraryLayer, self).__init__(*args, **kwargs)\n+        kwargs["name"] = kwargs.get("name", "RobotRemote")\n+        self.libraryBases = (RemoteLibrary,) + kwargs.pop("libraries", ())\n+        super().__init__(*args, **kwargs)\n \n     def setUp(self):\n-        id_ = self.__name__.split(\':\')[-1]\n+        id_ = self.__name__.split(":")[-1]\n         assert id_ not in globals(), "Conflicting remote library id: %s" % id_\n         globals()[id_] = Remote = type(id_, self.libraryBases, {})\n         setattr(PloneSite, id_, Remote())\n \n     def tearDown(self):\n-        id_ = self.__name__.split(\':\')[-1]\n+        id_ = self.__name__.split(":")[-1]\n         delattr(PloneSite, id_)\n         del globals()[id_]\ndiff --git a/src/plone/app/robotframework/robotentrypoints.py b/src/plone/app/robotframework/robotentrypoints.py\nindex 9c07d58..71357d5 100644\n--- a/src/plone/app/robotframework/robotentrypoints.py\n+++ b/src/plone/app/robotframework/robotentrypoints.py\n@@ -1,12 +1,12 @@\n-from __future__ import print_function\n-from robot import run_cli\n from robot import libdoc as ld\n+from robot import run_cli\n \n import pkg_resources\n import sys\n \n+\n try:\n-    pkg_resources.get_distribution(\'robotframework-ride\')\n+    pkg_resources.get_distribution("robotframework-ride")\n except pkg_resources.DistributionNotFound:\n     HAS_RIDE = False\n else:\n@@ -18,36 +18,48 @@ def pybot():\n     # executing pybot against Sphinx-documentation:\n     from docutils.parsers.rst.directives import register_directive\n     from docutils.parsers.rst.roles import register_local_role\n-    dummy_directive = lambda *args: []\n-    dummy_role = lambda *args: ([], [])\n-    options = (\'maxdepth\', \'creates\', \'numbered\', \'hidden\')\n-    setattr(dummy_directive, \'content\', True)\n-    setattr(dummy_directive, \'options\', dict([(opt, str) for opt in options]))\n-    register_directive(\'toctree\', dummy_directive)\n-    register_directive(\'robotframework\', dummy_directive)\n-    register_local_role(\'ref\', dummy_role)\n+\n+    def dummy_directive(*args):\n+        return []\n+\n+    def dummy_role(*args):\n+        return ([], [])\n+\n+    options = ("maxdepth", "creates", "numbered", "hidden")\n+    setattr(dummy_directive, "content", True)\n+    setattr(dummy_directive, "options", {opt: str for opt in options})\n+    register_directive("toctree", dummy_directive)\n+    register_directive("robotframework", dummy_directive)\n+    register_local_role("ref", dummy_role)\n \n     # Run pybot\n     run_cli(sys.argv[1:])\n \n \n def robot():\n-    run_cli([\'--listener\', \'plone.app.robotframework.RobotListener\']\n-            + sys.argv[1:])\n+    run_cli(["--listener", "plone.app.robotframework.RobotListener"] + sys.argv[1:])\n \n \n def robot_debug():\n-    run_cli([\'--listener\', \'plone.app.robotframework.RobotListener\',\n-             \'-v\', \'SELENIUM_RUN_ON_FAILURE:Debug\']\n-            + sys.argv[1:])\n+    run_cli(\n+        [\n+            "--listener",\n+            "plone.app.robotframework.RobotListener",\n+            "-v",\n+            "SELENIUM_RUN_ON_FAILURE:Debug",\n+        ]\n+        + sys.argv[1:]\n+    )\n \n \n def ride():\n     if HAS_RIDE:\n         from robotide import main\n+\n         main(*sys.argv[1:])\n     else:\n-        print(u"""\\\n+        print(\n+            """\\\n Package robotframework-ride was not found. Please, install\n plone.app.robotframework with proper extras, like:\n \n@@ -61,7 +73,8 @@ def ride():\n wxPython installed, like:\n \n     /usr/bin/python bin/ride\n-""")\n+"""\n+        )\n \n \n def libdoc():\n@@ -71,23 +84,32 @@ def libdoc():\n def pybabel():\n     # This registers our minimal robot translation extractor\n     import babel.messages.extract\n-    babel.messages.extract.DEFAULT_MAPPING.extend([\n-        (\'**.rst\', \'plone.app.robotframework.pybabel:extract_robot\'),\n-        (\'**.robot\', \'plone.app.robotframework.pybabel:extract_robot\')\n-    ])\n+\n+    babel.messages.extract.DEFAULT_MAPPING.extend(\n+        [\n+            ("**.rst", "plone.app.robotframework.pybabel:extract_robot"),\n+            ("**.robot", "plone.app.robotframework.pybabel:extract_robot"),\n+        ]\n+    )\n \n     # This code hides warnings for known Sphinx-only-directives when\n     # executing pybot against Sphinx-documentation:\n     from docutils.parsers.rst.directives import register_directive\n     from docutils.parsers.rst.roles import register_local_role\n-    dummy_directive = lambda *args: []\n-    dummy_role = lambda *args: ([], [])\n-    options = (\'maxdepth\', \'creates\', \'numbered\', \'hidden\')\n-    setattr(dummy_directive, \'content\', True)\n-    setattr(dummy_directive, \'options\', dict([(opt, str) for opt in options]))\n-    register_directive(\'toctree\', dummy_directive)\n-    register_directive(\'robotframework\', dummy_directive)\n-    register_local_role(\'ref\', dummy_role)\n+\n+    def dummy_directive(*args):\n+        return []\n+\n+    def dummy_role(*args):\n+        return ([], [])\n+\n+    options = ("maxdepth", "creates", "numbered", "hidden")\n+    setattr(dummy_directive, "content", True)\n+    setattr(dummy_directive, "options", {opt: str for opt in options})\n+    register_directive("toctree", dummy_directive)\n+    register_directive("robotframework", dummy_directive)\n+    register_local_role("ref", dummy_role)\n \n     from babel.messages.frontend import main\n+\n     main()\ndiff --git a/src/plone/app/robotframework/saucelabs.py b/src/plone/app/robotframework/saucelabs.py\nindex b69b5bc..59c92cb 100644\n--- a/src/plone/app/robotframework/saucelabs.py\n+++ b/src/plone/app/robotframework/saucelabs.py\n@@ -1,50 +1,44 @@\n-# -*- coding: utf-8 -*-\n+from http.client import HTTPConnection\n from robot.libraries.BuiltIn import BuiltIn\n-from six.moves.http_client import HTTPConnection\n \n import base64\n+import json\n import os\n import re\n \n \n-try:\n-    import json\n-    json  # pyflakes\n-except ImportError:\n-    import simplejson as json\n-\n-\n-USERNAME_ACCESS_KEY = re.compile(r\'^(http|https)://([^:]+):([^@]+)@\')\n+USERNAME_ACCESS_KEY = re.compile(r"^(http|https)://([^:]+):([^@]+)@")\n \n \n class SauceLabs:\n-\n-    def report_sauce_status(self, name, status, tags=[], remote_url=\'\'):\n-        """Report test status and tags to SauceLabs\n-        """\n-        job_id = BuiltIn().get_library_instance(\n-            \'Selenium2Library\')._current_browser().session_id\n+    def report_sauce_status(self, name, status, tags=[], remote_url=""):\n+        """Report test status and tags to SauceLabs"""\n+        job_id = (\n+            BuiltIn()\n+            .get_library_instance("Selenium2Library")\n+            .driver\n+            .session_id\n+        )\n \n         if USERNAME_ACCESS_KEY.match(remote_url):\n-            username, access_key =\\\n-                USERNAME_ACCESS_KEY.findall(remote_url)[0][1:]\n+            username, access_key = USERNAME_ACCESS_KEY.findall(remote_url)[0][1:]\n         else:\n-            username = os.environ.get(\'SAUCE_USERNAME\')\n-            access_key = os.environ.get(\'SAUCE_ACCESS_KEY\')\n+            username = os.environ.get("SAUCE_USERNAME")\n+            access_key = os.environ.get("SAUCE_ACCESS_KEY")\n \n         if not job_id:\n-            return u"No Sauce job id found. Skipping..."\n+            return "No Sauce job id found. Skipping..."\n         elif not username or not access_key:\n-            return u"No Sauce environment variables found. Skipping..."\n+            return "No Sauce environment variables found. Skipping..."\n \n-        token = base64.encodestring(\'%s:%s\' % (username, access_key))[:-1]\n-        body = json.dumps({\'name\': name,\n-                           \'passed\': status == \'PASS\',\n-                           \'tags\': tags})\n+        token = base64.encodestring(f"{username}:{access_key}")[:-1]\n+        body = json.dumps({"name": name, "passed": status == "PASS", "tags": tags})\n \n-        connection = HTTPConnection(\'saucelabs.com\')\n-        connection.request(\'PUT\', \'/rest/v1/%s/jobs/%s\' % (\n-            username, job_id), body,\n-            headers={\'Authorization\': \'Basic %s\' % token}\n+        connection = HTTPConnection("saucelabs.com")\n+        connection.request(\n+            "PUT",\n+            f"/rest/v1/{username}/jobs/{job_id}",\n+            body,\n+            headers={"Authorization": "Basic %s" % token},\n         )\n         return connection.getresponse().status\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 4ab5222..0015186 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -1,32 +1,25 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import print_function\n from plone.app.robotframework.remote import RemoteLibrary\n-from six.moves.xmlrpc_client import ServerProxy\n-from six.moves.xmlrpc_server import SimpleXMLRPCServer\n+from plone.testing.zope import WSGIServer\n+from xmlrpc.client import ServerProxy\n+from xmlrpc.server import SimpleXMLRPCServer\n \n import argparse\n import logging\n import os\n import pkg_resources\n-import select\n import sys\n import time\n \n \n try:\n-    pkg_resources.get_distribution(\'watchdog\')\n+    pkg_resources.get_distribution("watchdog")\n except pkg_resources.DistributionNotFound:\n     HAS_RELOAD = False\n else:\n     from plone.app.robotframework.reload import ForkLoop\n     from plone.app.robotframework.reload import Watcher\n-    HAS_RELOAD = True\n \n-try:\n-    from plone.testing.zope import WSGIServer\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import ZServer as WSGIServer\n+    HAS_RELOAD = True\n \n \n HAS_DEBUG_MODE = False\n@@ -38,19 +31,19 @@\n \n \n def TIME():\n-    return time.strftime(\'%H:%M:%S\')\n+    return time.strftime("%H:%M:%S")\n \n \n def WAIT(msg):\n-    return \'{0} [\\033[33m wait \\033[0m] {1}\'.format(TIME(), msg)\n+    return f"{TIME()} [\\033[33m wait \\033[0m] {msg}"\n \n \n def ERROR(msg):\n-    return \'{0} [\\033[31m ERROR \\033[0m] {1}\'.format(TIME(), msg)\n+    return f"{TIME()} [\\033[31m ERROR \\033[0m] {msg}"\n \n \n def READY(msg):\n-    return \'{0} [\\033[32m ready \\033[0m] {1}\'.format(TIME(), msg)\n+    return f"{TIME()} [\\033[32m ready \\033[0m] {msg}"\n \n \n def start(zope_layer_dotted_name):\n@@ -62,11 +55,10 @@ def start(zope_layer_dotted_name):\n \n     print(READY("Started Zope robot server"))\n \n-    listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n-                                  logRequests=False)\n+    listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT), logRequests=False)\n     listener.allow_none = True\n-    listener.register_function(zsl.zodb_setup, \'zodb_setup\')\n-    listener.register_function(zsl.zodb_teardown, \'zodb_teardown\')\n+    listener.register_function(zsl.zodb_setup, "zodb_setup")\n+    listener.register_function(zsl.zodb_teardown, "zodb_teardown")\n \n     print_urls(zsl.zope_layer, listener)\n \n@@ -91,18 +83,21 @@ def print_urls(zope_layer, xmlrpc_server):\n     for layer in zope_layer.baseResolutionOrder:\n         # Walk up the testing layers and look for the first zserver in order to get the\n         # actual server name and server port.\n-        zserver = getattr(layer, \'zserver\', None)\n+        zserver = getattr(layer, "zserver", None)\n         if not zserver:\n             continue\n-        print(\'ZSERVER: http://{}:{}\'.format(zserver.server_name, zserver.server_port))\n+        print(f"ZSERVER: http://{zserver.server_name}:{zserver.server_port}")\n         break\n \n-    print(\'XMLRPC: http://{0}:{1}\'.format(*xmlrpc_server.server_address))\n+    print("XMLRPC: http://{}:{}".format(*xmlrpc_server.server_address))\n \n \n-def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n-                 preload_layer_dotted_name=\'plone.app.testing.PLONE_FIXTURE\',\n-                 extensions=None):\n+def start_reload(\n+    zope_layer_dotted_name,\n+    reload_paths=("src",),\n+    preload_layer_dotted_name="plone.app.testing.PLONE_FIXTURE",\n+    extensions=None,\n+):\n \n     print(WAIT("Starting Zope robot server"))\n \n@@ -114,7 +109,7 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     if extensions:\n         watcher.allowed_extensions = extensions\n     elif HAS_DEBUG_MODE:\n-        watcher.allowed_extensions.remove(\'pt\')\n+        watcher.allowed_extensions.remove("pt")\n     watcher.start()\n     forkloop.start()\n \n@@ -127,10 +122,11 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n     # XXX: For unknown reason call to socket.gethostbyaddr may cause malloc\n     # errors on OSX in forked child when called from medusa http_server, but\n     # proper sleep seem to fix it:\n-    import time\n-    import socket\n     import platform\n-    if \'Darwin\' in platform.uname():\n+    import socket\n+    import time\n+\n+    if "Darwin" in platform.uname():\n         gethostbyaddr = socket.gethostbyaddr\n         socket.gethostbyaddr = lambda x: time.sleep(0.5) or (ZSERVER_HOST,)\n \n@@ -141,19 +137,19 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n \n     if HAS_DEBUG_MODE:\n         import App.config\n+\n         config = App.config.getConfiguration()\n         config.debug_mode = HAS_DEBUG_MODE\n         App.config.setConfiguration(config)\n \n-    if \'Darwin\' in platform.uname():\n+    if "Darwin" in platform.uname():\n         socket.gethostbyaddr = gethostbyaddr\n \n     print(READY("Zope robot server started"))\n \n     try:\n-        listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT),\n-                                      logRequests=False)\n-    except socket.error as e:\n+        listener = SimpleXMLRPCServer((LISTENER_HOST, LISTENER_PORT), logRequests=False)\n+    except OSError as e:\n         print(ERROR(str(e)))\n         print(WAIT("Pruning Zope robot server"))\n         zsl.prune_zope_server()\n@@ -161,13 +157,13 @@ def start_reload(zope_layer_dotted_name, reload_paths=(\'src\',),\n \n     listener.timeout = 0.5\n     listener.allow_none = True\n-    listener.register_function(zsl.zodb_setup, \'zodb_setup\')\n-    listener.register_function(zsl.zodb_teardown, \'zodb_teardown\')\n+    listener.register_function(zsl.zodb_setup, "zodb_setup")\n+    listener.register_function(zsl.zodb_teardown, "zodb_teardown")\n \n     try:\n         while not forkloop.exit:\n             listener.handle_request()\n-    except select.error:  # Interrupted system call\n+    except OSError:  # Interrupted system call\n         pass\n     finally:\n         print(WAIT("Pruning Zope robot server"))\n@@ -179,27 +175,30 @@ def server():\n         parser = argparse.ArgumentParser()\n     else:\n         parser = argparse.ArgumentParser(\n-            epilog=\'Note: require \\\'plone.app.robotframework\\\' with \'\n-                   \'\\\'[reload]\\\'-extras to get the automatic code reloading \'\n-                   \'support (powered by \\\'watchdog\\\').\')\n-    parser.add_argument(\'layer\')\n-    parser.add_argument(\'--debug-mode\', \'-d\', dest=\'debug_mode\',\n-                        action=\'store_true\')\n+            epilog="Note: require \'plone.app.robotframework\' with "\n+            "\'[reload]\'-extras to get the automatic code reloading "\n+            "support (powered by \'watchdog\')."\n+        )\n+    parser.add_argument("layer")\n+    parser.add_argument("--debug-mode", "-d", dest="debug_mode", action="store_true")\n     VERBOSE_HELP = (\n-        \'-v information about test layers setup and tear down, \'\n-        \'-vv add logging.WARNING messages, \'\n-        \'-vvv add INFO messages, -vvvv add DEBUG messages.\')\n-    parser.add_argument(\'--verbose\', \'-v\', action=\'count\', help=VERBOSE_HELP)\n+        "-v information about test layers setup and tear down, "\n+        "-vv add logging.WARNING messages, "\n+        "-vvv add INFO messages, -vvvv add DEBUG messages."\n+    )\n+    parser.add_argument("--verbose", "-v", action="count", help=VERBOSE_HELP)\n \n     if HAS_RELOAD:\n-        parser.add_argument(\'--reload-path\', \'-p\', dest=\'reload_paths\',\n-                            action=\'append\')\n-        parser.add_argument(\'--reload-extensions\', \'-x\', dest=\'extensions\',\n-                            nargs=\'*\', help=(\n-                                \'file extensions to watch for changes\'))\n-        parser.add_argument(\'--preload-layer\', \'-l\', dest=\'preload_layer\')\n-        parser.add_argument(\'--no-reload\', \'-n\', dest=\'reload\',\n-                            action=\'store_false\')\n+        parser.add_argument("--reload-path", "-p", dest="reload_paths", action="append")\n+        parser.add_argument(\n+            "--reload-extensions",\n+            "-x",\n+            dest="extensions",\n+            nargs="*",\n+            help=("file extensions to watch for changes"),\n+        )\n+        parser.add_argument("--preload-layer", "-l", dest="preload_layer")\n+        parser.add_argument("--no-reload", "-n", dest="reload", action="store_false")\n     args = parser.parse_args()\n \n     # Set debug mode\n@@ -223,9 +222,12 @@ def server():\n         except KeyboardInterrupt:\n             pass\n     else:\n-        start_reload(args.layer, args.reload_paths or [\'src\'],\n-                     args.preload_layer or \'plone.app.testing.PLONE_FIXTURE\',\n-                     args.extensions)\n+        start_reload(\n+            args.layer,\n+            args.reload_paths or ["src"],\n+            args.preload_layer or "plone.app.testing.PLONE_FIXTURE",\n+            args.extensions,\n+        )\n \n \n class RobotListener:\n@@ -233,8 +235,7 @@ class RobotListener:\n     ROBOT_LISTENER_API_VERSION = 2\n \n     def __init__(self):\n-        server_listener_address = \'http://%s:%s\' % (\n-            LISTENER_HOST, LISTENER_PORT)\n+        server_listener_address = f"http://{LISTENER_HOST}:{LISTENER_PORT}"\n         self.server = ServerProxy(server_listener_address)\n \n     def start_test(self, name, attrs):\n@@ -243,6 +244,7 @@ def start_test(self, name, attrs):\n     def end_test(self, name, attrs):\n         self.server.zodb_teardown()\n \n+\n ZODB = RobotListener  # BBB\n \n \n@@ -256,10 +258,10 @@ def __init__(self):\n         self.extra_layers = {}\n \n     def _import_layer(self, layer_dotted_name):\n-        parts = layer_dotted_name.split(\'.\')\n+        parts = layer_dotted_name.split(".")\n         if len(parts) < 2:\n-            raise ValueError(\'no dot in layer dotted name\')\n-        module_name = \'.\'.join(parts[:-1])\n+            raise ValueError("no dot in layer dotted name")\n+        module_name = ".".join(parts[:-1])\n         layer_name = parts[-1]\n         __import__(module_name)\n         module = sys.modules[module_name]\n@@ -270,7 +272,7 @@ def start_zope_server(self, layer_dotted_name):\n         new_layer = self._import_layer(layer_dotted_name)\n         if self.zope_layer and self.zope_layer is not new_layer:\n             self.stop_zope_server(force=True)\n-        elif self.zope_layer and self.zope_layer.get(\'dirty\', False):\n+        elif self.zope_layer and self.zope_layer.get("dirty", False):\n             self.stop_zope_server(force=True)\n         setup_layer(new_layer)\n         self.zope_layer = new_layer\n@@ -312,12 +314,16 @@ def zodb_setup(self, layer_dotted_name=None):\n             self.set_zope_layer(layer_dotted_name)\n \n         from zope.testrunner.runner import order_by_bases\n+\n         layers = order_by_bases([self.zope_layer])\n         for layer in layers:\n-            if hasattr(layer, \'testSetUp\'):\n+            if hasattr(layer, "testSetUp"):\n                 if HAS_VERBOSE_CONSOLE:\n-                    print(WAIT("Test set up {0}.{1}".format(\n-                        layer.__module__, layer.__name__)))\n+                    print(\n+                        WAIT(\n+                            "Test set up {}.{}".format(layer.__module__, layer.__name__)\n+                        )\n+                    )\n                 layer.testSetUp()\n         if HAS_VERBOSE_CONSOLE:\n             print(READY("Test set up"))\n@@ -327,13 +333,19 @@ def zodb_teardown(self, layer_dotted_name=None):\n             self.set_zope_layer(layer_dotted_name)\n \n         from zope.testrunner.runner import order_by_bases\n+\n         layers = order_by_bases([self.zope_layer])\n         layers.reverse()\n         for layer in layers:\n-            if hasattr(layer, \'testTearDown\'):\n+            if hasattr(layer, "testTearDown"):\n                 if HAS_VERBOSE_CONSOLE:\n-                    print(WAIT("Test tear down {0}.{1}".format(\n-                        layer.__module__, layer.__name__)))\n+                    print(\n+                        WAIT(\n+                            "Test tear down {}.{}".format(\n+                                layer.__module__, layer.__name__\n+                            )\n+                        )\n+                    )\n                 layer.testTearDown()\n         if HAS_VERBOSE_CONSOLE:\n             print(READY("Test torn down"))\n@@ -348,17 +360,22 @@ def setup_layer(layer, setup_layers=setup_layers):\n         for base in layer.__bases__:\n             if base is not object:\n                 setup_layer(base, setup_layers)\n-        if hasattr(layer, \'setUp\'):\n-            name = "{0}.{1}".format(layer.__module__, layer.__name__)\n-            if HAS_VERBOSE_CONSOLE and name == \'plone.testing.z2.Startup\':\n-                print(WAIT("Set up {0}.{1} (debug-mode={2})".format(\n-                    layer.__module__, layer.__name__, HAS_DEBUG_MODE)))\n+        if hasattr(layer, "setUp"):\n+            name = f"{layer.__module__}.{layer.__name__}"\n+            if HAS_VERBOSE_CONSOLE and name == "plone.testing.z2.Startup":\n+                print(\n+                    WAIT(\n+                        "Set up {}.{} (debug-mode={})".format(\n+                            layer.__module__, layer.__name__, HAS_DEBUG_MODE\n+                        )\n+                    )\n+                )\n             elif HAS_VERBOSE_CONSOLE:\n-                print(WAIT("Set up {0}.{1}".format(layer.__module__,\n-                                                   layer.__name__)))\n+                print(WAIT(f"Set up {layer.__module__}.{layer.__name__}"))\n             layer.setUp()\n-            if HAS_DEBUG_MODE and name == \'plone.testing.z2.Startup\':\n+            if HAS_DEBUG_MODE and name == "plone.testing.z2.Startup":\n                 import App.config\n+\n                 config = App.config.getConfiguration()\n                 config.debug_mode = HAS_DEBUG_MODE\n                 App.config.setConfiguration(config)\n@@ -367,23 +384,23 @@ def setup_layer(layer, setup_layers=setup_layers):\n \n def tear_down(setup_layers=setup_layers):\n     from zope.testrunner.runner import order_by_bases\n+\n     # Tear down any layers not needed for these tests. The unneeded layers\n     # might interfere.\n-    unneeded = [l for l in setup_layers]\n+    unneeded = [layer for layer in setup_layers]\n     unneeded = order_by_bases(unneeded)\n     unneeded.reverse()\n-    for l in unneeded:\n+    for layer in unneeded:\n         try:\n             try:\n-                if hasattr(l, \'tearDown\'):\n+                if hasattr(layer, "tearDown"):\n                     if HAS_VERBOSE_CONSOLE:\n-                        print(WAIT("Tear down {0}.{1}".format(l.__module__,\n-                                                              l.__name__)))\n-                    l.tearDown()\n+                        print(WAIT(f"Tear down {layer.__module__}.{layer.__name__}"))\n+                    layer.tearDown()\n             except NotImplementedError:\n                 pass\n         finally:\n-            del setup_layers[l]\n+            del setup_layers[layer]\n \n \n class Zope2ServerRemote(RemoteLibrary):\n@@ -393,6 +410,7 @@ class Zope2ServerRemote(RemoteLibrary):\n \n     *WARNING* These keywords does not with zope.testrunner (yet).\n     """\n+\n     def remote_zodb_setup(self, layer_dotted_name):\n         Zope2Server().zodb_setup(layer_dotted_name)\n \n@@ -408,6 +426,7 @@ class LazyStop:\n     Usage: pybot --listener plone.app.robotframework.LazyStop\n \n     """\n+\n     ROBOT_LISTENER_API_VERSION = 2\n \n     def __init__(self):\n@@ -427,4 +446,4 @@ def setup(app):\n \n     """\n     Zope2Server.stop_zope_server_lazy = True\n-    app.connect(\'build-finished\', lambda app, exception: tear_down())\n+    app.connect("build-finished", lambda app, exception: tear_down())\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex ab4c054..284556b 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test layers required to run plone.app.robotframework tests."""\n from Acquisition import aq_base\n from OFS.Application import AppInitializer\n@@ -18,6 +17,8 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import ploneSite\n from plone.testing import Layer\n+from plone.testing import zope as zope_testing\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n from Products.MailHost.interfaces import IMailHost\n from robot.libraries.BuiltIn import BuiltIn\n from zope.component import getSiteManager\n@@ -25,44 +26,28 @@\n \n import os\n import pkg_resources\n-import six\n import sys\n \n \n try:\n-    pkg_resources.get_distribution(\'collective.js.speakjs\')\n+    pkg_resources.get_distribution("collective.js.speakjs")\n except pkg_resources.DistributionNotFound:\n     HAS_SPEAKJS = False\n else:\n     HAS_SPEAKJS = True\n \n-try:\n-    from plone.testing import zope as zope_testing\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing import z2 as zope_testing\n-\n-\n-try:\n-    from plone.testing.zope import WSGI_SERVER_FIXTURE\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import ZSERVER_FIXTURE as WSGI_SERVER_FIXTURE\n-\n \n class SimplePublicationLayer(Layer):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUp(self):\n         with ploneSite() as portal:\n-            applyProfile(portal, \'plone.app.contenttypes:default\')\n-            portal.portal_workflow.setDefaultChain(\n-                \'simple_publication_workflow\'\n-            )\n+            applyProfile(portal, "plone.app.contenttypes:default")\n+            portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n     def tearDown(self):\n         with ploneSite() as portal:\n-            portal.portal_workflow.setDefaultChain(\'\')\n+            portal.portal_workflow.setDefaultChain("")\n \n \n SIMPLE_PUBLICATION_FIXTURE = SimplePublicationLayer()\n@@ -74,7 +59,7 @@ class SimplePublicationWithTypesLayer(Layer):\n \n     def setUp(self):\n         with ploneSite() as portal:\n-            applyProfile(portal, \'plone.app.contenttypes:default\')\n+            applyProfile(portal, "plone.app.contenttypes:default")\n \n \n SIMPLE_PUBLICATION_WITH_TYPES_FIXTURE = SimplePublicationLayer()\n@@ -93,18 +78,18 @@ def setUp(self):\n         from Products.CMFPlone.tests import utils\n \n         with ploneSite() as portal:\n-            portal.email_from_address = \'noreply@example.com\'\n-            portal.email_from_name = \'Plone Site\'\n+            portal.email_from_address = "noreply@example.com"\n+            portal.email_from_name = "Plone Site"\n             portal._original_MailHost = portal.MailHost\n-            portal.MailHost = mailhost = utils.MockMailHost(\'MailHost\')\n-            portal.MailHost.smtp_host = \'localhost\'\n+            portal.MailHost = mailhost = utils.MockMailHost("MailHost")\n+            portal.MailHost.smtp_host = "localhost"\n             sm = getSiteManager(context=portal)\n             sm.unregisterUtility(provided=IMailHost)\n             sm.registerUtility(mailhost, provided=IMailHost)\n \n     def tearDown(self):\n         with ploneSite() as portal:\n-            _o_mailhost = getattr(portal, \'_original_MailHost\', None)\n+            _o_mailhost = getattr(portal, "_original_MailHost", None)\n             if _o_mailhost:\n                 portal.MailHost = portal._original_MailHost\n                 sm = getSiteManager(context=portal)\n@@ -152,7 +137,7 @@ def tearDown(self):\n #\n \n RobotRemote = type(\n-    \'RobotRemote\',\n+    "RobotRemote",\n     (\n         AutoLogin,\n         QuickInstaller,\n@@ -163,7 +148,7 @@ def tearDown(self):\n         MockMailHost,\n         Zope2ServerRemote,\n     ),\n-    {\'__doc__\': \'Robot Framework remote library\', \'id\': \'RobotRemote\'},\n+    {"__doc__": "Robot Framework remote library", "id": "RobotRemote"},\n )()\n \n REMOTE_LIBRARY_ROBOT_TESTING = FunctionalTesting(\n@@ -209,14 +194,14 @@ def _get_robot_variable(self, name):\n         """Return robot list variable either from robot instance or\n         from ROBOT_-prefixed environment variable\n         """\n-        if getattr(BuiltIn(), \'_context\', None) is not None:\n-            value = BuiltIn().get_variable_value(\'${%s}\' % name, [])\n-            if isinstance(value, str) or isinstance(value, six.text_type):\n-                return value.split(\',\')\n+        if getattr(BuiltIn(), "_context", None) is not None:\n+            value = BuiltIn().get_variable_value("${%s}" % name, [])\n+            if isinstance(value, str) or isinstance(value, str):\n+                return value.split(",")\n             else:\n                 return value\n         else:\n-            candidates = os.environ.get(name, \'\').split(\',\')\n+            candidates = os.environ.get(name, "").split(",")\n             return filter(bool, [s.strip() for s in candidates])\n \n     def setUpZope(self, app, configurationContext):\n@@ -224,65 +209,66 @@ def setUpZope(self, app, configurationContext):\n         # This installs the VHM in the Zope root, so we can have VHM support too\n         AppInitializer(app).install_virtual_hosting()\n \n-        for locales in self._get_robot_variable(\'REGISTER_TRANSLATIONS\'):\n+        for locales in self._get_robot_variable("REGISTER_TRANSLATIONS"):\n             if locales and os.path.isdir(locales):\n                 from zope.i18n.zcml import registerTranslations\n \n                 registerTranslations(configurationContext, locales)\n-                self[\'state\'].append(locales)\n+                self["state"].append(locales)\n \n-        for name in self._get_robot_variable(\'META_PACKAGES\'):\n+        for name in self._get_robot_variable("META_PACKAGES"):\n             if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\'meta.zcml\', package, context=configurationContext)\n-            self[\'state\'].append(name)\n+            xmlconfig.file("meta.zcml", package, context=configurationContext)\n+            self["state"].append(name)\n \n-        for name in self._get_robot_variable(\'CONFIGURE_PACKAGES\'):\n+        for name in self._get_robot_variable("CONFIGURE_PACKAGES"):\n             if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\n-                \'configure.zcml\', package, context=configurationContext\n-            )\n-            self[\'state\'].append(name)\n+            xmlconfig.file("configure.zcml", package, context=configurationContext)\n+            self["state"].append(name)\n \n-        for name in self._get_robot_variable(\'OVERRIDE_PACKAGES\'):\n+        for name in self._get_robot_variable("OVERRIDE_PACKAGES"):\n             if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n             xmlconfig.includeOverrides(\n-                configurationContext, \'overrides.zcml\', package=package\n+                configurationContext, "overrides.zcml", package=package\n             )\n-            self[\'state\'].append(name)\n+            self["state"].append(name)\n \n-        for name in self._get_robot_variable(\'INSTALL_PRODUCTS\'):\n+        for name in self._get_robot_variable("INSTALL_PRODUCTS"):\n             if name not in sys.modules:\n                 __import__(name)\n             zope_testing.installProduct(app, name)\n-            self[\'state\'].append(name)\n+            self["state"].append(name)\n \n     def setUpPloneSite(self, portal):\n-        for name in self._get_robot_variable(\'APPLY_PROFILES\'):\n+        for name in self._get_robot_variable("APPLY_PROFILES"):\n             self.applyProfile(portal, name)\n-            self[\'state\'].append(name)\n+            self["state"].append(name)\n \n     def setUp(self):\n-        self[\'state\'] = []\n-        super(PloneRobotFixture, self).setUp()\n+        self["state"] = []\n+        super().setUp()\n \n         class Value:\n-            __repr__ = lambda x: str(bool(x))\n-            __nonzero__ = lambda x: self.get(\'state\', []) != (\n-                self._get_robot_variable(\'REGISTER_TRANSLATIONS\')\n-                + self._get_robot_variable(\'META_PACKAGES\')\n-                + self._get_robot_variable(\'CONFIGURE_PACKAGES\')\n-                + self._get_robot_variable(\'OVERRIDE_PACKAGES\')\n-                + self._get_robot_variable(\'INSTALL_PRODUCTS\')\n-                + self._get_robot_variable(\'APPLY_PROFILES\')\n-            )\n+            def __repr__(self, x):\n+                return str(bool(x))\n+\n+            def __nonzero__(x):\n+                return self.get("state", []) != (\n+                    self._get_robot_variable("REGISTER_TRANSLATIONS")\n+                    + self._get_robot_variable("META_PACKAGES")\n+                    + self._get_robot_variable("CONFIGURE_PACKAGES")\n+                    + self._get_robot_variable("OVERRIDE_PACKAGES")\n+                    + self._get_robot_variable("INSTALL_PRODUCTS")\n+                    + self._get_robot_variable("APPLY_PROFILES")\n+                )\n \n-        self[\'dirty\'] = Value()\n+        self["dirty"] = Value()\n \n \n PLONE_ROBOT_FIXTURE = PloneRobotFixture()\n@@ -291,7 +277,8 @@ class Value:\n     bases=(\n         PLONE_ROBOT_FIXTURE,\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-    ), name="PloneRobot:Integration"\n+    ),\n+    name="PloneRobot:Integration",\n )\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n@@ -299,7 +286,8 @@ class Value:\n         PLONE_ROBOT_FIXTURE,\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         WSGI_SERVER_FIXTURE,\n-    ), name="Plone:Robot"\n+    ),\n+    name="Plone:Robot",\n )\n \n \n@@ -313,13 +301,13 @@ def setUp(self):\n             import collective.js.speakjs\n \n             xmlconfig.file(\n-                \'configure.zcml\',\n+                "configure.zcml",\n                 collective.js.speakjs,\n-                context=self[\'configurationContext\'],\n+                context=self["configurationContext"],\n             )\n \n             with ploneSite() as portal:\n-                applyProfile(portal, \'collective.js.speakjs:default\')\n+                applyProfile(portal, "collective.js.speakjs:default")\n \n     SPEAKJS_FIXTURE = SpeakJSLayer()\n \ndiff --git a/src/plone/app/robotframework/tests/test_content.py b/src/plone/app/robotframework/tests/test_content.py\nindex 21a78ac..9052b24 100644\n--- a/src/plone/app/robotframework/tests/test_content.py\n+++ b/src/plone/app/robotframework/tests/test_content.py\n@@ -11,58 +11,40 @@ class TestCreateContent(unittest.TestCase):\n     layer = PLONE_ROBOT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def create_content(self, *args, **kwargs):\n         from plone.app.robotframework.content import Content\n+\n         Content().create_content(*args, **kwargs)\n \n     def test_create_content_without_id(self):\n-        self.create_content(\n-            type=\'Document\',\n-            title=\'Document 1\'\n-        )\n-        self.assertTrue(\'document-1\' in self.portal.objectIds())\n+        self.create_content(type="Document", title="Document 1")\n+        self.assertTrue("document-1" in self.portal.objectIds())\n \n     def test_create_content(self):\n-        self.create_content(\n-            type=\'Document\',\n-            id=\'doc1\',\n-            title=\'Document 1\'\n-        )\n-        self.assertTrue(\'doc1\' in self.portal.objectIds())\n+        self.create_content(type="Document", id="doc1", title="Document 1")\n+        self.assertTrue("doc1" in self.portal.objectIds())\n \n     def test_create_image(self):\n-        self.create_content(\n-            type=\'Image\',\n-            id=\'image1\',\n-            title=\'Image 1\'\n-        )\n-        self.assertTrue(\'image1\' in self.portal.objectIds())\n+        self.create_content(type="Image", id="image1", title="Image 1")\n+        self.assertTrue("image1" in self.portal.objectIds())\n \n     def test_create_news(self):\n-        self.create_content(\n-            type=\'News Item\',\n-            id=\'news1\',\n-            title=\'News 1\'\n-        )\n-        self.assertTrue(\'news1\' in self.portal.objectIds())\n+        self.create_content(type="News Item", id="news1", title="News 1")\n+        self.assertTrue("news1" in self.portal.objectIds())\n \n     def test_create_content_requires_type(self):\n         self.assertRaises(\n             AssertionError,\n             self.create_content,\n-            id=\'d\',\n+            id="d",\n         )\n \n     def test_create_content_updates_catalog(self):\n-        self.create_content(\n-            type=\'Document\',\n-            id=\'doc1\',\n-            title=\'Document 1\'\n-        )\n+        self.create_content(type="Document", id="doc1", title="Document 1")\n         catalog = getToolByName(self.portal, "portal_catalog")\n         self.assertEqual(len(catalog(portal_type="Document")), 1)\n \n@@ -72,24 +54,26 @@ class TestGlobalAllow(unittest.TestCase):\n     layer = PLONE_ROBOT_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.types_tool = getToolByName(self.portal, "portal_types")\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def global_allow(self, *args, **kwargs):\n         from plone.app.robotframework.content import Content\n+\n         Content().global_allow(*args, **kwargs)\n \n     def test_global_allow(self):\n-        self.types_tool[\'Document\'].global_allow = False\n+        self.types_tool["Document"].global_allow = False\n         self.assertRaises(\n             ValueError,\n             self.portal.invokeFactory,\n-            \'Document\', \'doc1\',\n+            "Document",\n+            "doc1",\n         )\n \n-        self.global_allow(\'Document\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n+        self.global_allow("Document")\n+        self.portal.invokeFactory("Document", "doc1")\n \n-        self.assertTrue(\'doc1\' in self.portal.objectIds())\n+        self.assertTrue("doc1" in self.portal.objectIds())\ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 54fca8c..6178ad9 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,16 +1,17 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n # from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n+from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n-from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING  # noqa: E501\n+\n+# from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING\n from plone.testing import layered\n \n import pkg_resources\n import robotsuite\n import unittest\n \n+\n try:\n-    pkg_resources.get_distribution(\'collective.js.speakjs\')\n+    pkg_resources.get_distribution("collective.js.speakjs")\n except pkg_resources.DistributionNotFound:\n     HAS_SPEAKJS = False\n else:\n@@ -41,9 +42,7 @@ def test_suite():\n                 robotsuite.RobotTestSuite("test_users_library.robot"),\n                 layer=PLONE_ROBOT_TESTING,\n             ),\n-            layered(\n-                robotsuite.RobotTestSuite("docs"), layer=PLONE_ROBOT_TESTING\n-            ),\n+            layered(robotsuite.RobotTestSuite("docs"), layer=PLONE_ROBOT_TESTING),\n         ]\n     )\n \n@@ -55,7 +54,7 @@ def test_suite():\n                 layered(\n                     robotsuite.RobotTestSuite(\n                         "test_speakjs_library.robot",\n-                        noncritical=[\'non-critical\'],\n+                        noncritical=["non-critical"],\n                     ),\n                     layer=SPEAKJS_ROBOT_TESTING,\n                 )\ndiff --git a/src/plone/app/robotframework/tests/test_robotfixture.py b/src/plone/app/robotframework/tests/test_robotfixture.py\nindex 5ddca64..ddf696e 100644\n--- a/src/plone/app/robotframework/tests/test_robotfixture.py\n+++ b/src/plone/app/robotframework/tests/test_robotfixture.py\n@@ -1,39 +1,26 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.testing import PloneRobotFixture\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.testing import layered\n+from plone.testing.zope import FunctionalTesting\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n import os\n import robotsuite\n import unittest\n \n \n-try:\n-    from plone.testing.zope import FunctionalTesting\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import FunctionalTesting\n-\n-try:\n-    from plone.testing.zope import WSGI_SERVER_FIXTURE\n-except ImportError:\n-    # Plone 5.1 compatibility, remove in Plone 6\n-    from plone.testing.z2 import ZSERVER_FIXTURE as WSGI_SERVER_FIXTURE\n-\n-\n class CustomPloneRobotFixture(PloneRobotFixture):\n-\n     def setUp(self):\n-        os.environ[\'CONFIGURE_PACKAGES\'] = \'plone.session\'\n-        os.environ[\'APPLY_PROFILES\'] = \'plone.session:default\'\n-        super(CustomPloneRobotFixture, self).setUp()\n+        os.environ["CONFIGURE_PACKAGES"] = "plone.session"\n+        os.environ["APPLY_PROFILES"] = "plone.session:default"\n+        super().setUp()\n \n     def tearDown(self):\n-        super(CustomPloneRobotFixture, self).tearDown()\n-        if \'CONFIGURE_PACKAGES\' in os.environ:\n-            del os.environ[\'CONFIGURE_PACKAGES\']\n-        if \'APPLY_PROFILES\' in os.environ:\n-            del os.environ[\'APPLY_PROFILES\']\n+        super().tearDown()\n+        if "CONFIGURE_PACKAGES" in os.environ:\n+            del os.environ["CONFIGURE_PACKAGES"]\n+        if "APPLY_PROFILES" in os.environ:\n+            del os.environ["APPLY_PROFILES"]\n \n \n PLONE_ROBOT_FIXTURE = CustomPloneRobotFixture()\n@@ -44,15 +31,18 @@ def tearDown(self):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         WSGI_SERVER_FIXTURE,\n     ),\n-    name="Plone:Robot"\n+    name="Plone:Robot",\n )\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(robotsuite.RobotTestSuite(\n-                "test_robotfixture.robot"),\n-                layer=PLONE_ROBOT_TESTING),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                robotsuite.RobotTestSuite("test_robotfixture.robot"),\n+                layer=PLONE_ROBOT_TESTING,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py\nindex 804e306..4471c2b 100644\n--- a/src/plone/app/robotframework/users.py\n+++ b/src/plone/app/robotframework/users.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\n@@ -9,39 +8,37 @@\n \n \n class Users(RemoteLibrary):\n-\n     def create_user(self, *args, **kwargs):\n         """Create user with given details and return its id"""\n         disableCSRFProtection()\n         # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n-        for arg in [x for x in args if \'=\' in x]:\n-            name, value = arg.split(\'=\', 1)\n+        for arg in [x for x in args if "=" in x]:\n+            name, value = arg.split("=", 1)\n             kwargs[name] = value\n \n-        assert len(args), u"username must be provided."\n+        assert len(args), "username must be provided."\n         username = args[0]\n \n         roles = []\n         properties = kwargs\n-        for arg in [x for x in args[1:] if \'=\' not in x]:\n+        for arg in [x for x in args[1:] if "=" not in x]:\n             roles.append(arg)\n \n-        if \'email\' not in properties:\n-            properties[\'email\'] = \'%s@example.com\' % username\n+        if "email" not in properties:\n+            properties["email"] = "%s@example.com" % username\n \n         portal = getSite()\n-        registration = getToolByName(portal, \'portal_registration\')\n+        registration = getToolByName(portal, "portal_registration")\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n-        use_email_as_username = getattr(settings, \'use_email_as_login\', None)\n-        user_id = use_email_as_username and properties[\'email\'] or username\n-        password = properties.pop(\'password\', username)\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        use_email_as_username = getattr(settings, "use_email_as_login", None)\n+        user_id = use_email_as_username and properties["email"] or username\n+        password = properties.pop("password", username)\n \n-        roles.extend(properties.pop(\'roles\', []))\n+        roles.extend(properties.pop("roles", []))\n         if not roles:\n-            roles.append(\'Member\')\n-        properties[\'username\'] = user_id\n-        registration.addMember(\n-            user_id, password, roles, properties=properties)\n+            roles.append("Member")\n+        properties["username"] = user_id\n+        registration.addMember(user_id, password, roles, properties=properties)\ndiff --git a/src/plone/app/robotframework/utils.py b/src/plone/app/robotframework/utils.py\nindex 671fc6f..30b25d9 100644\n--- a/src/plone/app/robotframework/utils.py\n+++ b/src/plone/app/robotframework/utils.py\n@@ -1,13 +1,7 @@\n-from zope.interface import alsoProvides\n+from plone.protect.interfaces import IDisableCSRFProtection\n from zope.globalrequest import getRequest\n-\n-try:\n-    from plone.protect.interfaces import IDisableCSRFProtection\n-except ImportError:\n-    from zope.interface import Interface\n-    class IDisableCSRFProtection(Interface):\n-        pass\n+from zope.interface import alsoProvides\n \n \n def disableCSRFProtection():\n-    alsoProvides(getRequest(), IDisableCSRFProtection)\n\\ No newline at end of file\n+    alsoProvides(getRequest(), IDisableCSRFProtection)\ndiff --git a/src/plone/app/robotframework/variables.py b/src/plone/app/robotframework/variables.py\nindex 8a3e549..d77e822 100644\n--- a/src/plone/app/robotframework/variables.py\n+++ b/src/plone/app/robotframework/variables.py\n@@ -1,16 +1,16 @@\n-# -*- coding: utf-8 -*-\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n+\n import pkg_resources\n \n-from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n ZOPE_HOST = WSGI_SERVER_FIXTURE.host\n ZOPE_PORT = WSGI_SERVER_FIXTURE.port\n \n-CMFPLONE_VERSION = pkg_resources.get_distribution(\'Products.CMFPlone\').version\n+CMFPLONE_VERSION = pkg_resources.get_distribution("Products.CMFPlone").version\n \n-if CMFPLONE_VERSION.startswith(\'4.\'):\n-    CMFPLONE_SELECTORS = \'selectors/cmfplone43.robot\'\n-elif CMFPLONE_VERSION.startswith(\'5.\'):\n-    CMFPLONE_SELECTORS = \'selectors/cmfplone50.robot\'\n-elif CMFPLONE_VERSION.startswith(\'6.\'):\n-    CMFPLONE_SELECTORS = \'selectors/cmfplone60.robot\'\n+if CMFPLONE_VERSION.startswith("4."):\n+    CMFPLONE_SELECTORS = "selectors/cmfplone43.robot"\n+elif CMFPLONE_VERSION.startswith("5."):\n+    CMFPLONE_SELECTORS = "selectors/cmfplone50.robot"\n+elif CMFPLONE_VERSION.startswith("6."):\n+    CMFPLONE_SELECTORS = "selectors/cmfplone60.robot"\ndiff --git a/templates/varnish.vcl.in b/templates/varnish.vcl.in\ndeleted file mode 100644\nindex ba1867c..0000000\n--- a/templates/varnish.vcl.in\n+++ /dev/null\n@@ -1,107 +0,0 @@\n-# VCL file optimized for Plone with a webserver in front.  See vcl(7) for details\n-\n-backend instance {\n-  .host = "${varnish-conf:backend}";\n-  .port = "${varnish-conf:backend_port}";\n-}\n-\n-# Define a sub to handle requests where we ignore cache-control headers.  Now\n-# we don\'t have to put the check for a 200 status code in every content type:\n-sub override {\n-    if (beresp.status == 200) {\n-            set beresp.http.X-Varnish-Action = "Stored";\n-            return(deliver);\n-            }\n-    return(pass);\n-}\n-\n-acl purge {\n-    "127.0.0.1";\n-}\n-\n-sub vcl_recv {\n-\n-  set req.backend = instance;\n-  set req.grace = 120s;\n-\n-    if (req.request == "PURGE") {\n-            if (!client.ip ~ purge) {\n-                    error 405 "Not allowed.";\n-            }\n-            purge_url(req.url);\n-        error 200 "Purged";\n-    }\n-    if (req.request != "GET" && req.request != "HEAD") {\n-        /* We only deal with GET and HEAD by default */\n-        return(pass);\n-    }\n-    return(lookup);\n-}\n-\n-sub vcl_hit {\n-    if (req.request == "PURGE") {\n-    set obj.ttl = 0s;\n-    error 200 "Purged";\n-    }\n-    if (!obj.cacheable) {\n-        set obj.http.X-Varnish-Action = "return(pass) (not cacheable - hit)";\n-        return(pass);\n-    }\n-    if (obj.http.Cache-Control ~ "(stale-while-revalidate|no-transform)") {\n-        # This is a special cache. Don\'t serve to authenticated.\n-        if (req.http.Cookie ~ "__ac=" || req.http.Authorization) {\n-            set obj.http.X-Varnish-Action = "PASS (special not cacheable - hit)";\n-                    return(pass);\n-                }\n-        }\n-\n-    set obj.http.X-Varnish-Action = "HIT (return(deliver) - from cache)";\n-    return(deliver);\n-}\n-\n-sub vcl_miss {\n-    if (req.request == "PURGE") {\n-            error 404 "Not in cache.";\n-    }\n-    return(fetch);\n-}\n-\n-sub vcl_fetch {\n-    if (beresp.http.Cache-Control ~ "(stale-while-revalidate|no-transform)") {\n-            # Leveraging a non-varnish token to set a minimum ttl without contaminating s-maxage\n-            # Wouldn\'t need this if varnish supported Surrogate-Control\n-            if (beresp.ttl < 3600s) {\n-                    set beresp.http.X-Varnish-Special = "SPECIAL (local proxy for 1 hour)";\n-                    unset beresp.http.expires;\n-                    set beresp.ttl = 3600s;\n-                    # Add reset marker\n-                    set beresp.http.reset-age = "1";\n-            }\n-    }\n-\n-    if (req.url ~ "\\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|js|kss|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm)$") {\n-    set beresp.ttl = 3600s;\n-    call override;\n-    }\n-    if (beresp.http.Content-Type ~ "image.*$") {\n-    set beresp.ttl = 3600s;\n-        call override;\n-    }\n-    if (beresp.http.Set-Cookie) {\n-            set beresp.http.X-Varnish-Action = "FETCH (return(pass) - response sets cookie)";\n-            return(pass);\n-    }\n-    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {\n-            set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";\n-            return(pass);\n-    }\n-    if (beresp.http.cookie ~ "__ac.*$") {\n-        return(pass);\n-    }\n-    if (!beresp.cacheable) {\n-    set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";\n-        return(pass);\n-    }\n-    return(deliver);\n-}\n-\ndiff --git a/travis.cfg b/travis.cfg\ndeleted file mode 100644\nindex 57c1900..0000000\n--- a/travis.cfg\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-[buildout]\n-extends =\n-    buildout.cfg\n-\n-parts =\n-    docs\n-    libdoc\n-    test\n-\n-[test]\n-eggs =\n-    plone.app.robotframework [test,speak]\n-defaults = [\'--auto-color\', \'--auto-progress\', \'-s\', \'plone.app.robotframework\']\ndiff --git a/versions.cfg b/versions.cfg\ndeleted file mode 100644\nindex 15e60f0..0000000\n--- a/versions.cfg\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-[versions]\n-# Good known versions for plone.app.robotframework and friends\n-\n-# THOSE ARE PART OF PLONE COREDEV BUILDOUT\n-# NEWER VERSIONS CAN BE TESTED HERE FOR BRANCHES BUT NEED AN UPDATE OF\n-# BUILDOUT COREDEV DIRECTLY AFTER MERGE\n-\n-# Pygments = 2.0.2\n-# robotframework = 3.0\n-# robotframework-selenium2library = 1.7.4\n-# robotframework-selenium2screenshots = 0.7.0\n-# robotsuite = 1.7.0\n-# selenium = 2.53.6\n-# sphinxcontrib-robotframework = 0.7.0\n'

