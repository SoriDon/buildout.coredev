Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-15T17:51:38+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/7e3d2d68cb5fca7ae1031fc41b08ea7bd813e7b1

Remove six, Python 2 code, and fix flake8 errors.

Files changed:
M news/120.bugfix
M plone/namedfile/file.py
M plone/namedfile/handler.rst
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/usage.rst
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M setup.py

b'diff --git a/news/120.bugfix b/news/120.bugfix\nindex 56b4cbb..f5e899f 100644\n--- a/news/120.bugfix\n+++ b/news/120.bugfix\n@@ -1,2 +1,2 @@\n-Cleanup: isort, black, pyupgrade, etc.\n+Cleanup: isort, black, pyupgrade, remove use of six, etc.\n [maurits]\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 5d68d36..7c2d1ef 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -19,7 +19,6 @@\n from ZPublisher import HTTPRangeSupport\n \n import piexif\n-import six\n import transaction\n \n \ndiff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex b1e6143..b1caf27 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -19,7 +19,7 @@ First, we wire up the handlers::\n     ... </configure>\n     ... """\n \n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex f1d6936..df373e5 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -10,8 +10,6 @@\n from zope.component import adapter\n from zope.interface import Interface\n \n-import six\n-\n \n class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     """Base marshaler for plone.namedfile values. Actual adapters are\n@@ -62,7 +60,7 @@ def postProcessMessage(self, message):\n                 message.add_header("Content-Disposition", "attachment")\n                 message.set_param(\n                     "filename",\n-                    filename.encode("utf-8") if six.PY2 else filename,\n+                    filename,\n                     header="Content-Disposition",\n                     charset="utf-8",\n                 )\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 26825ed..e928e9f 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -21,9 +21,9 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> import six\n+    >>> import io\n     >>> from zope.configuration import xmlconfig\n-    >>> xmlconfig.xmlconfig(six.StringIO(configuration))\n+    >>> xmlconfig.xmlconfig(io.StringIO(configuration))\n \n Next, we will create a schema with which to test the marshaler::\n \n@@ -106,7 +106,7 @@ Let\'s try it with primary fields::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_file\']), IFieldMarshaler)\n     >>> bytearray(marshaler.marshal(primary=True))\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n@@ -161,7 +161,7 @@ Let\'s now use this message to construct a new object::\n     >>> from plone.rfc822 import initializeObjectFromSchema\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n     >>> bytearray(newContent._file.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n@@ -209,7 +209,7 @@ Of course, we will also be able to load this data from a message::\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n \n     >>> bytearray(newContent._file.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 4b444c2..7b20dc5 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -35,7 +35,6 @@\n \n import functools\n import logging\n-import six\n \n \n logger = logging.getLogger(__name__)\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 06e502c..5626200 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -8,7 +8,6 @@\n from zope.publisher.browser import FileUpload\n \n import io\n-import six\n \n \n MAXCHUNKSIZE = 1 << 16\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex 35e76d2..3a6d47b 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -2,8 +2,6 @@\n from plone.testing import layered\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -15,21 +13,6 @@\n ]\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-            got = re.sub("zExceptions.NotFound", "NotFound", got)\n-            got = got.replace("bytearray(b", "bytearray(")\n-            got = re.sub("WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n-            got = got.replace(\n-                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt"\n-            )\n-\n-        got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         [\n@@ -37,7 +20,6 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     testfile,\n                     package="plone.namedfile",\n-                    checker=Py23DocChecker(),\n                     optionflags=doctest.ELLIPSIS,\n                 ),\n                 PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n@@ -45,7 +27,3 @@ def test_suite():\n             for testfile in TEST_FILES\n         ]\n     )\n-\n-\n-if __name__ == "__main__":\n-    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 2dd697f..1eabdc5 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,6 +1,6 @@\n-from contextlib import contextmanager\n from DateTime import DateTime\n from doctest import _ellipsis_match\n+from io import BytesIO\n from OFS.SimpleItem import SimpleItem\n from plone.namedfile.field import NamedImage as NamedImageField\n from plone.namedfile.file import NamedImage\n@@ -13,7 +13,6 @@\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n-from six import BytesIO\n from unittest.mock import patch\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n@@ -533,7 +532,7 @@ def testGetPictureTagByName(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n         tag = self.scaling.picture("image", picture_variant="medium")\n-        expected = f"""<picture>\n+        expected = """<picture>\n  <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n http://nohost/item/@@images/image-400-....png 400w,\n http://nohost/item/@@images/image-800-....png 800w,\n@@ -567,12 +566,12 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         )\n         base = self.item.absolute_url()\n         expected = f"""<picture>\n- <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n-http://nohost/item/@@images/image-400-....png 400w,\n-http://nohost/item/@@images/image-800-....png 800w,\n-http://nohost/item/@@images/image-1000-....png 1000w,\n-http://nohost/item/@@images/image-1200-....png 1200w"/>\n- <img alt="Alternative text" height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="Custom title" width="200"/>\n+ <source srcset="{base}/@@images/image-600-....png 600w,\n+{base}/@@images/image-400-....png 400w,\n+{base}/@@images/image-800-....png 800w,\n+{base}/@@images/image-1000-....png 1000w,\n+{base}/@@images/image-1200-....png 1200w"/>\n+ <img alt="Alternative text" height="200" loading="lazy" src="{base}/@@images/image-600-....png" title="Custom title" width="200"/>\n </picture>"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n@@ -593,7 +592,7 @@ def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n         tag = self.scaling.picture("image", picture_variant="medium")\n-        expected = f"""<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n+        expected = """<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n     def testGetUnknownScale(self):\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex b3c684a..b9610ad 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -1,4 +1,5 @@\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n@@ -9,12 +10,10 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n from plone.testing.zope import Browser\n-from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n from zope.interface import implementer\n \n import PIL\n-import six\n import transaction\n import unittest\n \n@@ -45,8 +44,6 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        if six.PY2:\n-            raise unittest.SkipTest("Disabled in py2 for now.")\n         data = getFile("image.png")\n         item = DummyContent()\n         item.image = NamedImage(data, "image/png", "image.png")\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 77030c2..b59639c 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -44,7 +44,7 @@ The FileContainer class creates empty objects to start with::\n     >>> container = FileContainer()\n \n     >>> bytearray(container.simple.data)\n-    bytearray(\'\')\n+    bytearray(b\'\')\n     >>> container.simple.contentType\n     \'\'\n     >>> container.simple.filename is None\n@@ -75,7 +75,7 @@ will attempt to guess the filename from the file extension::\n \n     >>> container.simple = namedfile.NamedFile(\'dummy test data\', filename=u"test.txt")\n     >>> bytearray(container.simple.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> container.simple.contentType\n     \'text/plain\'\n     >>> print(container.simple.filename)\n@@ -83,7 +83,7 @@ will attempt to guess the filename from the file extension::\n \n     >>> container.blob = namedfile.NamedBlobFile(\'dummy test data\', filename=u"test.txt")\n     >>> bytearray(container.blob.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> container.blob.contentType\n     \'text/plain\'\n     >>> print(container.blob.filename)\n@@ -170,7 +170,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'simple\')\n     >>> bytearray(download())\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -182,7 +182,7 @@ We will test this with a dummy request, faking traversal::\n     >>> download = Download(container, request).publishTraverse(request, \'blob\')\n     >>> data = download()\n     >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -262,7 +262,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'simple\')\n     >>> bytearray(display_file())\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -273,7 +273,7 @@ We will test this with a dummy request, faking traversal::\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'blob\')\n     >>> data = display_file()\n     >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -336,7 +336,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request)\n     >>> bytearray(download())\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 3d8fa38..87d24f0 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -1,4 +1,5 @@\n from collections.abc import Iterable\n+from io import BytesIO\n from io import FileIO\n from logging import getLogger\n from plone.namedfile.interfaces import IBlobby\n@@ -6,8 +7,7 @@\n from plone.namedfile.utils.png_utils import process_png\n from plone.namedfile.utils.svg_utils import process_svg\n from plone.registry.interfaces import IRegistry\n-from six import BytesIO\n-from six.moves import urllib\n+from urllib.parse import quote\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n from zope.interface import implementer\n@@ -17,7 +17,6 @@\n import os.path\n import piexif\n import PIL.Image\n-import six\n import struct\n \n \n@@ -119,7 +118,7 @@ def set_headers(file, response, filename=None):\n     if filename is not None:\n         if not isinstance(filename, str):\n             filename = str(filename, "utf-8", errors="ignore")\n-        filename = urllib.parse.quote(filename.encode("utf8"))\n+        filename = quote(filename.encode("utf8"))\n         response.setHeader(\n             "Content-Disposition", f"attachment; filename*=UTF-8\'\'{filename}"\n         )\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex cf8eb96..26aa877 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,5 +1,5 @@\n+from io import BytesIO\n from logging import getLogger\n-from six import BytesIO\n \n import struct\n \ndiff --git a/setup.py b/setup.py\nindex ed1db77..03c2727 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -54,7 +54,6 @@\n         "plone.schemaeditor",\n         "plone.supermodel",\n         "setuptools",\n-        "six",\n         "zope.browserpage",\n         "zope.component",\n         "zope.copy",\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-16T07:11:52+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/ac83daece512d64872804ae999f3227e7830b945

Merge pull request #122 from plone/maurits-no-six

Remove six, Python 2 code, and fix flake8 errors.

Files changed:
M news/120.bugfix
M plone/namedfile/file.py
M plone/namedfile/handler.rst
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/usage.rst
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M setup.py

b'diff --git a/news/120.bugfix b/news/120.bugfix\nindex 56b4cbb..f5e899f 100644\n--- a/news/120.bugfix\n+++ b/news/120.bugfix\n@@ -1,2 +1,2 @@\n-Cleanup: isort, black, pyupgrade, etc.\n+Cleanup: isort, black, pyupgrade, remove use of six, etc.\n [maurits]\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 5d68d36..7c2d1ef 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -19,7 +19,6 @@\n from ZPublisher import HTTPRangeSupport\n \n import piexif\n-import six\n import transaction\n \n \ndiff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex b1e6143..b1caf27 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -19,7 +19,7 @@ First, we wire up the handlers::\n     ... </configure>\n     ... """\n \n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex f1d6936..df373e5 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -10,8 +10,6 @@\n from zope.component import adapter\n from zope.interface import Interface\n \n-import six\n-\n \n class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     """Base marshaler for plone.namedfile values. Actual adapters are\n@@ -62,7 +60,7 @@ def postProcessMessage(self, message):\n                 message.add_header("Content-Disposition", "attachment")\n                 message.set_param(\n                     "filename",\n-                    filename.encode("utf-8") if six.PY2 else filename,\n+                    filename,\n                     header="Content-Disposition",\n                     charset="utf-8",\n                 )\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 26825ed..e928e9f 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -21,9 +21,9 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> import six\n+    >>> import io\n     >>> from zope.configuration import xmlconfig\n-    >>> xmlconfig.xmlconfig(six.StringIO(configuration))\n+    >>> xmlconfig.xmlconfig(io.StringIO(configuration))\n \n Next, we will create a schema with which to test the marshaler::\n \n@@ -106,7 +106,7 @@ Let\'s try it with primary fields::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_file\']), IFieldMarshaler)\n     >>> bytearray(marshaler.marshal(primary=True))\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n@@ -161,7 +161,7 @@ Let\'s now use this message to construct a new object::\n     >>> from plone.rfc822 import initializeObjectFromSchema\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n     >>> bytearray(newContent._file.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n@@ -209,7 +209,7 @@ Of course, we will also be able to load this data from a message::\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n \n     >>> bytearray(newContent._file.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 4b444c2..7b20dc5 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -35,7 +35,6 @@\n \n import functools\n import logging\n-import six\n \n \n logger = logging.getLogger(__name__)\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 06e502c..5626200 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -8,7 +8,6 @@\n from zope.publisher.browser import FileUpload\n \n import io\n-import six\n \n \n MAXCHUNKSIZE = 1 << 16\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex 35e76d2..3a6d47b 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -2,8 +2,6 @@\n from plone.testing import layered\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -15,21 +13,6 @@\n ]\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-            got = re.sub("zExceptions.NotFound", "NotFound", got)\n-            got = got.replace("bytearray(b", "bytearray(")\n-            got = re.sub("WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n-            got = got.replace(\n-                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt"\n-            )\n-\n-        got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         [\n@@ -37,7 +20,6 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     testfile,\n                     package="plone.namedfile",\n-                    checker=Py23DocChecker(),\n                     optionflags=doctest.ELLIPSIS,\n                 ),\n                 PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n@@ -45,7 +27,3 @@ def test_suite():\n             for testfile in TEST_FILES\n         ]\n     )\n-\n-\n-if __name__ == "__main__":\n-    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 2dd697f..1eabdc5 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,6 +1,6 @@\n-from contextlib import contextmanager\n from DateTime import DateTime\n from doctest import _ellipsis_match\n+from io import BytesIO\n from OFS.SimpleItem import SimpleItem\n from plone.namedfile.field import NamedImage as NamedImageField\n from plone.namedfile.file import NamedImage\n@@ -13,7 +13,6 @@\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n-from six import BytesIO\n from unittest.mock import patch\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n@@ -533,7 +532,7 @@ def testGetPictureTagByName(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n         tag = self.scaling.picture("image", picture_variant="medium")\n-        expected = f"""<picture>\n+        expected = """<picture>\n  <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n http://nohost/item/@@images/image-400-....png 400w,\n http://nohost/item/@@images/image-800-....png 800w,\n@@ -567,12 +566,12 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         )\n         base = self.item.absolute_url()\n         expected = f"""<picture>\n- <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n-http://nohost/item/@@images/image-400-....png 400w,\n-http://nohost/item/@@images/image-800-....png 800w,\n-http://nohost/item/@@images/image-1000-....png 1000w,\n-http://nohost/item/@@images/image-1200-....png 1200w"/>\n- <img alt="Alternative text" height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="Custom title" width="200"/>\n+ <source srcset="{base}/@@images/image-600-....png 600w,\n+{base}/@@images/image-400-....png 400w,\n+{base}/@@images/image-800-....png 800w,\n+{base}/@@images/image-1000-....png 1000w,\n+{base}/@@images/image-1200-....png 1200w"/>\n+ <img alt="Alternative text" height="200" loading="lazy" src="{base}/@@images/image-600-....png" title="Custom title" width="200"/>\n </picture>"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n@@ -593,7 +592,7 @@ def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n         tag = self.scaling.picture("image", picture_variant="medium")\n-        expected = f"""<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n+        expected = """<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n     def testGetUnknownScale(self):\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex b3c684a..b9610ad 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -1,4 +1,5 @@\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n@@ -9,12 +10,10 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n from plone.testing.zope import Browser\n-from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n from zope.interface import implementer\n \n import PIL\n-import six\n import transaction\n import unittest\n \n@@ -45,8 +44,6 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        if six.PY2:\n-            raise unittest.SkipTest("Disabled in py2 for now.")\n         data = getFile("image.png")\n         item = DummyContent()\n         item.image = NamedImage(data, "image/png", "image.png")\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 77030c2..b59639c 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -44,7 +44,7 @@ The FileContainer class creates empty objects to start with::\n     >>> container = FileContainer()\n \n     >>> bytearray(container.simple.data)\n-    bytearray(\'\')\n+    bytearray(b\'\')\n     >>> container.simple.contentType\n     \'\'\n     >>> container.simple.filename is None\n@@ -75,7 +75,7 @@ will attempt to guess the filename from the file extension::\n \n     >>> container.simple = namedfile.NamedFile(\'dummy test data\', filename=u"test.txt")\n     >>> bytearray(container.simple.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> container.simple.contentType\n     \'text/plain\'\n     >>> print(container.simple.filename)\n@@ -83,7 +83,7 @@ will attempt to guess the filename from the file extension::\n \n     >>> container.blob = namedfile.NamedBlobFile(\'dummy test data\', filename=u"test.txt")\n     >>> bytearray(container.blob.data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> container.blob.contentType\n     \'text/plain\'\n     >>> print(container.blob.filename)\n@@ -170,7 +170,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'simple\')\n     >>> bytearray(download())\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -182,7 +182,7 @@ We will test this with a dummy request, faking traversal::\n     >>> download = Download(container, request).publishTraverse(request, \'blob\')\n     >>> data = download()\n     >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -262,7 +262,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'simple\')\n     >>> bytearray(display_file())\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -273,7 +273,7 @@ We will test this with a dummy request, faking traversal::\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'blob\')\n     >>> data = display_file()\n     >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -336,7 +336,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request)\n     >>> bytearray(download())\n-    bytearray(\'dummy test data\')\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 3d8fa38..87d24f0 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -1,4 +1,5 @@\n from collections.abc import Iterable\n+from io import BytesIO\n from io import FileIO\n from logging import getLogger\n from plone.namedfile.interfaces import IBlobby\n@@ -6,8 +7,7 @@\n from plone.namedfile.utils.png_utils import process_png\n from plone.namedfile.utils.svg_utils import process_svg\n from plone.registry.interfaces import IRegistry\n-from six import BytesIO\n-from six.moves import urllib\n+from urllib.parse import quote\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n from zope.interface import implementer\n@@ -17,7 +17,6 @@\n import os.path\n import piexif\n import PIL.Image\n-import six\n import struct\n \n \n@@ -119,7 +118,7 @@ def set_headers(file, response, filename=None):\n     if filename is not None:\n         if not isinstance(filename, str):\n             filename = str(filename, "utf-8", errors="ignore")\n-        filename = urllib.parse.quote(filename.encode("utf8"))\n+        filename = quote(filename.encode("utf8"))\n         response.setHeader(\n             "Content-Disposition", f"attachment; filename*=UTF-8\'\'{filename}"\n         )\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex cf8eb96..26aa877 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,5 +1,5 @@\n+from io import BytesIO\n from logging import getLogger\n-from six import BytesIO\n \n import struct\n \ndiff --git a/setup.py b/setup.py\nindex ed1db77..03c2727 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -54,7 +54,6 @@\n         "plone.schemaeditor",\n         "plone.supermodel",\n         "setuptools",\n-        "six",\n         "zope.browserpage",\n         "zope.component",\n         "zope.copy",\n'

