Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2021-04-02T17:18:57+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.i18n/commit/aaac63a1c71065f18b665b4160e2d323a94d1a08

Update Language Selector Template

- use icon resolver form Products.CMFPlone

Files changed:
M plone/app/i18n/locales/browser/languageselector.pt

b'diff --git a/plone/app/i18n/locales/browser/languageselector.pt b/plone/app/i18n/locales/browser/languageselector.pt\nindex 1b2e377..ab4fbe9 100644\n--- a/plone/app/i18n/locales/browser/languageselector.pt\n+++ b/plone/app/i18n/locales/browser/languageselector.pt\n@@ -1,33 +1,33 @@\n <tal:language tal:condition="view/available">\n-<ul id="portal-languageselector"\n-    tal:define="showFlags view/showFlags;\n+  <ul\n+      id="portal-languageselector"\n+      tal:define="showFlags view/showFlags;\n                 languages view/languages;\n                 here_url context/@@plone_context_state/view_url;\n-                portal_url view/portal_url;">\n+                portal_url view/portal_url;\n+                icons python:context.restrictedTraverse(\'@@iconresolver\');">\n     <tal:language repeat="lang languages">\n-    <li tal:define="code lang/code;\n+      <li\n+          tal:define="code lang/code;\n                     selected lang/selected;\n                     codeclass string:language-${code};\n                     current python: selected and \'currentLanguage \' or \'\';"\n-        tal:attributes="class string:${current}${codeclass}">\n-        <a href=""\n-           tal:define="flag lang/flag|nothing;\n+          tal:attributes="class string:${current}${codeclass}">\n+        <a\n+            href=""\n+            tal:define="flag lang/flag|nothing;\n                        name lang/native|lang/name;\n                        showflag python:showFlags and flag;"\n-           tal:attributes="href string:${here_url}?set_language=${code};\n-                           title name"\n-            ><tal:flag condition="showflag">\n-                <img width="14"\n-                     height="11"\n-                     alt=""\n-                     tal:attributes="src string:${portal_url}${flag};\n-                                     alt name;\n-                                     title name;" />\n-            </tal:flag\n-            ><tal:nonflag condition="not: showflag"\n-                          replace="name">language name</tal:nonflag\n-        ></a>\n-    </li>\n+            tal:attributes="href string:${here_url}?set_language=${code};\n+                           title name">\n+          <tal:flag condition="showflag">\n+            <img tal:replace="structure python:icons.tag(flag, tag_class=\'plone-icon-flag\')" />\n+          </tal:flag>\n+          <tal:nonflag\n+              condition="not: showflag"\n+              replace="name">language name</tal:nonflag>\n+        </a>\n+      </li>\n     </tal:language>\n-</ul>\n+  </ul>\n </tal:language>\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2021-04-02T17:19:22+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.i18n/commit/19cebec1afb7ad1c8f3976d5079a4b9eae145bec

Update Test

Files changed:
M plone/app/i18n/locales/tests/countries.txt

b"diff --git a/plone/app/i18n/locales/tests/countries.txt b/plone/app/i18n/locales/tests/countries.txt\nindex b648307..ad038c8 100644\n--- a/plone/app/i18n/locales/tests/countries.txt\n+++ b/plone/app/i18n/locales/tests/countries.txt\n@@ -26,7 +26,7 @@ Country tests.\n   'Germany'\n \n   >>> de[u'flag']\n-  '/++resource++country-flags/de.gif'\n+  'countryflag/de'\n \n   >>> old = util.getAvailableCountries()\n   >>> countries = ['de']\n"

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2021-04-07T16:17:06+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.i18n/commit/bf069c5cd38bb47bbfa1a9e772ca11edf9ded09a

Add Changes Message

- add towncrier message

Files changed:
A news/8.breaking

b'diff --git a/news/8.breaking b/news/8.breaking\nnew file mode 100644\nindex 0000000..59eaed5\n--- /dev/null\n+++ b/news/8.breaking\n@@ -0,0 +1,4 @@\n+Use SVG Flags in Language Selector\n+Update Markup in Language Selector\n+Prepare of use the Icon Resolver in Plone 6\n+[1letter]\n\\ No newline at end of file\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-20T16:00:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.i18n/commit/e6da17e4ca1048cad3a94b8c3715a762782f93e2

Plone 6/py3 only

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 83abfa0..965a8a8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n-version = \'3.0.7.dev0\'\n+version = \'4.0.0.dev0\'\n \n setup(name=\'plone.app.i18n\',\n       version=version,\n@@ -12,24 +12,20 @@\n           "Development Status :: 6 - Mature",\n           "Environment :: Web Environment",\n           "Framework :: Plone",\n-          "Framework :: Plone :: 5.0",\n-          "Framework :: Plone :: 5.1",\n-          "Framework :: Plone :: 5.2",\n+          "Framework :: Plone :: 6.0",\n           "Framework :: Plone :: Core",\n-          "Framework :: Zope2",\n-          "Framework :: Zope :: 4",\n+          "Framework :: Zope :: 5",\n           "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.7",\n-          "Programming Language :: Python :: 3.6",\n           "Programming Language :: Python :: 3.7",\n           "Programming Language :: Python :: 3.8",\n+          "Programming Language :: Python :: 3.9",\n       ],\n       keywords=\'plone i18n\',\n       author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.app.i18n\',\n+      author_email=\'releaseteam@plone;org\',\n+      url=\'https://github.com/plone/plone.app.i18n\',\n       license=\'GPL version 2\',\n       packages=find_packages(),\n       namespace_packages=[\'plone\', \'plone.app\'],\n@@ -37,11 +33,12 @@\n       zip_safe=False,\n       install_requires=[\n           \'setuptools\',\n+          \'Products.CMFCore\',\n+          \'plone.i18n\',\n       ],\n       extras_require={\n           \'test\': [\n               \'plone.app.testing\',\n-              \'six\',\n           ]\n       },\n       )\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-20T16:02:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.i18n/commit/1c7412b1fccb2097557319d053c3d2fd2e06d42f

pyupgrade

Files changed:
M news/8.breaking
M plone/__init__.py
M plone/app/__init__.py
M plone/app/i18n/__init__.py
M plone/app/i18n/locales/__init__.py
M plone/app/i18n/locales/browser/__init__.py
M plone/app/i18n/locales/browser/selector.py
M plone/app/i18n/locales/browser/tests.py
M plone/app/i18n/locales/countries.py
M plone/app/i18n/locales/interfaces.py
M plone/app/i18n/locales/languages.py
M plone/app/i18n/locales/tests/__init__.py
M plone/app/i18n/locales/tests/test_doctests.py
M setup.py

b'diff --git a/news/8.breaking b/news/8.breaking\nindex 59eaed5..c5e417b 100644\n--- a/news/8.breaking\n+++ b/news/8.breaking\n@@ -1,4 +1,6 @@\n Use SVG Flags in Language Selector\n Update Markup in Language Selector\n-Prepare of use the Icon Resolver in Plone 6\n-[1letter]\n\\ No newline at end of file\n+Prepare of use the Icon Resolver in Plone 6.\n+Drop Python 2 and Plone 5.2 support.\n+Pyupgrade, code style Black and Isort.\n+[1letter, jensens]\n\\ No newline at end of file\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef..f48ad10 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef..f48ad10 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/i18n/__init__.py b/plone/app/i18n/__init__.py\nindex 4aa11c7..4287ca8 100644\n--- a/plone/app/i18n/__init__.py\n+++ b/plone/app/i18n/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\n\\ No newline at end of file\ndiff --git a/plone/app/i18n/locales/__init__.py b/plone/app/i18n/locales/__init__.py\nindex 4aa11c7..4287ca8 100644\n--- a/plone/app/i18n/locales/__init__.py\n+++ b/plone/app/i18n/locales/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\n\\ No newline at end of file\ndiff --git a/plone/app/i18n/locales/browser/__init__.py b/plone/app/i18n/locales/browser/__init__.py\nindex 4aa11c7..4287ca8 100644\n--- a/plone/app/i18n/locales/browser/__init__.py\n+++ b/plone/app/i18n/locales/browser/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\n\\ No newline at end of file\ndiff --git a/plone/app/i18n/locales/browser/selector.py b/plone/app/i18n/locales/browser/selector.py\nindex 138a5a1..0ccf49c 100644\n--- a/plone/app/i18n/locales/browser/selector.py\n+++ b/plone/app/i18n/locales/browser/selector.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import implementer\n from zope.viewlet.interfaces import IViewlet\n \n@@ -86,7 +85,7 @@ class LanguageSelector(BrowserView):\n     """\n \n     def __init__(self, context, request, view, manager):\n-        super(LanguageSelector, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context = context\n         self.request = request\n         self.view = view\ndiff --git a/plone/app/i18n/locales/browser/tests.py b/plone/app/i18n/locales/browser/tests.py\nindex e31fc33..d0c5418 100644\n--- a/plone/app/i18n/locales/browser/tests.py\n+++ b/plone/app/i18n/locales/browser/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from zope.component.testing import setUp, tearDown\n \n import doctest\n@@ -7,20 +6,12 @@\n import unittest\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite((\n+    return unittest.TestSuite(\n         doctest.DocTestSuite(\n             \'plone.app.i18n.locales.browser.selector\',\n             setUp=setUp(),\n             tearDown=tearDown,\n             optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE,\n-            checker=Py23DocChecker(),\n             )\n-        ))\n+        )\ndiff --git a/plone/app/i18n/locales/countries.py b/plone/app/i18n/locales/countries.py\nindex 0d45f7a..9aa9f58 100644\n--- a/plone/app/i18n/locales/countries.py\n+++ b/plone/app/i18n/locales/countries.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.app.i18n.locales.interfaces import ICountries\n from plone.i18n.locales.countries import CountryAvailability\n \ndiff --git a/plone/app/i18n/locales/interfaces.py b/plone/app/i18n/locales/interfaces.py\nindex c22caae..fd7ae41 100644\n--- a/plone/app/i18n/locales/interfaces.py\n+++ b/plone/app/i18n/locales/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.locales.interfaces import ICountryAvailability\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\ndiff --git a/plone/app/i18n/locales/languages.py b/plone/app/i18n/locales/languages.py\nindex 3ef5be6..f41afc2 100644\n--- a/plone/app/i18n/locales/languages.py\n+++ b/plone/app/i18n/locales/languages.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.app.i18n.locales.interfaces import IContentLanguages\n from plone.app.i18n.locales.interfaces import IMetadataLanguages\n from plone.app.i18n.locales.interfaces import IModifiableLanguageAvailability\ndiff --git a/plone/app/i18n/locales/tests/__init__.py b/plone/app/i18n/locales/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/app/i18n/locales/tests/__init__.py\n+++ b/plone/app/i18n/locales/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/i18n/locales/tests/test_doctests.py b/plone/app/i18n/locales/tests/test_doctests.py\nindex 3374bc8..865c424 100644\n--- a/plone/app/i18n/locales/tests/test_doctests.py\n+++ b/plone/app/i18n/locales/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.testing import layered\n \ndiff --git a/setup.py b/setup.py\nindex 965a8a8..18748dc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n version = \'4.0.0.dev0\'\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-20T16:03:21+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.i18n/commit/fe1d2f8572e8e22e14f87ee16ded38d9ff75a031

isort &amp; black

Files changed:
M bootstrap.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/i18n/__init__.py
M plone/app/i18n/locales/__init__.py
M plone/app/i18n/locales/browser/__init__.py
M plone/app/i18n/locales/browser/selector.py
M plone/app/i18n/locales/browser/tests.py
M plone/app/i18n/locales/countries.py
M plone/app/i18n/locales/interfaces.py
M plone/app/i18n/locales/languages.py
M plone/app/i18n/locales/tests/test_doctests.py
M setup.cfg
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex ed57894..f9cd227 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,16 +18,17 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n tmpeggs = tempfile.mkdtemp()\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -37,28 +38,40 @@\n \n Note that by using --find-links to point to local resources, you can keep \n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n \n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n \n \n options, args = parser.parse_args()\n@@ -75,23 +88,25 @@\n     from urllib2 import urlopen\n \n ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n+    # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n+\n+    # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -104,36 +119,43 @@\n \n ws = pkg_resources.working_set\n \n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n+            if (part[:1] == "*") and (part not in _final_parts):\n                 return False\n         return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -152,13 +174,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -167,12 +190,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/i18n/__init__.py b/plone/app/i18n/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/app/i18n/__init__.py\n+++ b/plone/app/i18n/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/i18n/locales/__init__.py b/plone/app/i18n/locales/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/app/i18n/locales/__init__.py\n+++ b/plone/app/i18n/locales/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/i18n/locales/browser/__init__.py b/plone/app/i18n/locales/browser/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/app/i18n/locales/browser/__init__.py\n+++ b/plone/app/i18n/locales/browser/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/i18n/locales/browser/selector.py b/plone/app/i18n/locales/browser/selector.py\nindex 0ccf49c..1569c80 100644\n--- a/plone/app/i18n/locales/browser/selector.py\n+++ b/plone/app/i18n/locales/browser/selector.py\n@@ -1,87 +1,86 @@\n-from zope.interface import implementer\n-from zope.viewlet.interfaces import IViewlet\n-\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n+from zope.interface import implementer\n+from zope.viewlet.interfaces import IViewlet\n \n \n @implementer(IViewlet)\n class LanguageSelector(BrowserView):\n     """Language selector.\n \n-      >>> ls = LanguageSelector(None, dict(), None, None)\n-      >>> ls\n-      <plone.app.i18n.locales.browser.selector.LanguageSelector object at ...>\n-\n-      >>> ls.update()\n-      >>> ls.available()\n-      False\n-      >>> ls.languages()\n-      []\n-      >>> ls.showFlags()\n-      False\n-\n-      >>> class Tool(object):\n-      ...     use_cookie_negotiation = False\n-      ...     supported_langs = [\'de\', \'en\', \'ar\']\n-      ...     always_show_selector = False\n-      ...\n-      ...     def __init__(self, **kw):\n-      ...         self.__dict__.update(kw)\n-      ...         self.showFlags = True\n-      ...\n-      ...     def getSupportedLanguages(self):\n-      ...         return self.supported_langs\n-      ...\n-      ...     def getAvailableLanguageInformation(self):\n-      ...         return dict(en={\'selected\' : True}, de={\'selected\' : False},\n-      ...                     nl={\'selected\' : True}, ar={\'selected\': True})\n-      ...\n-      ...     def getLanguageBindings(self, request):\n-      ...         # en = selected by user, nl = default, [] = other options\n-      ...         return (\'en\', \'nl\', [])\n-      ...\n-      ...     def showSelector(self):\n-      ...         return bool(self.use_cookie_negotiation or self.always_show_selector)\n-\n-      >>> ls.tool = Tool()\n-      >>> ls.available()\n-      False\n-\n-      >>> ls.tool = Tool(use_cookie_negotiation=True)\n-      >>> ls.available()\n-      True\n-\n-      >>> result = [{\'code\': \'en\', \'selected\': True}, {\'code\': \'ar\', \'selected\': False},\n-      ...           {\'code\': \'nl\', \'selected\': False}]\n-      >>> ls.languages() == result\n-      True\n-\n-      >>> ls.showFlags()\n-      True\n-\n-      >>> ls.tool = Tool(use_cookie_negotiation=True)\n-      >>> ls.available()\n-      True\n-\n-      >>> ls.tool = Tool(always_show_selector=True)\n-      >>> ls.available()\n-      True\n-\n-      >>> from zope.interface import implementer\n-      >>> from OFS.interfaces import IItem\n-      >>> @implementer(IItem)\n-      ... class Dummy(object):\n-      ...     def getPortalObject(self):\n-      ...         return self\n-      ...     def absolute_url(self):\n-      ...         return \'absolute url\'\n-\n-      >>> context = Dummy()\n-      >>> context.portal_url = Dummy()\n-      >>> ls = LanguageSelector(context, dict(), None, None)\n-      >>> ls.portal_url()\n-      \'absolute url\'\n+    >>> ls = LanguageSelector(None, dict(), None, None)\n+    >>> ls\n+    <plone.app.i18n.locales.browser.selector.LanguageSelector object at ...>\n+\n+    >>> ls.update()\n+    >>> ls.available()\n+    False\n+    >>> ls.languages()\n+    []\n+    >>> ls.showFlags()\n+    False\n+\n+    >>> class Tool(object):\n+    ...     use_cookie_negotiation = False\n+    ...     supported_langs = [\'de\', \'en\', \'ar\']\n+    ...     always_show_selector = False\n+    ...\n+    ...     def __init__(self, **kw):\n+    ...         self.__dict__.update(kw)\n+    ...         self.showFlags = True\n+    ...\n+    ...     def getSupportedLanguages(self):\n+    ...         return self.supported_langs\n+    ...\n+    ...     def getAvailableLanguageInformation(self):\n+    ...         return dict(en={\'selected\' : True}, de={\'selected\' : False},\n+    ...                     nl={\'selected\' : True}, ar={\'selected\': True})\n+    ...\n+    ...     def getLanguageBindings(self, request):\n+    ...         # en = selected by user, nl = default, [] = other options\n+    ...         return (\'en\', \'nl\', [])\n+    ...\n+    ...     def showSelector(self):\n+    ...         return bool(self.use_cookie_negotiation or self.always_show_selector)\n+\n+    >>> ls.tool = Tool()\n+    >>> ls.available()\n+    False\n+\n+    >>> ls.tool = Tool(use_cookie_negotiation=True)\n+    >>> ls.available()\n+    True\n+\n+    >>> result = [{\'code\': \'en\', \'selected\': True}, {\'code\': \'ar\', \'selected\': False},\n+    ...           {\'code\': \'nl\', \'selected\': False}]\n+    >>> ls.languages() == result\n+    True\n+\n+    >>> ls.showFlags()\n+    True\n+\n+    >>> ls.tool = Tool(use_cookie_negotiation=True)\n+    >>> ls.available()\n+    True\n+\n+    >>> ls.tool = Tool(always_show_selector=True)\n+    >>> ls.available()\n+    True\n+\n+    >>> from zope.interface import implementer\n+    >>> from OFS.interfaces import IItem\n+    >>> @implementer(IItem)\n+    ... class Dummy(object):\n+    ...     def getPortalObject(self):\n+    ...         return self\n+    ...     def absolute_url(self):\n+    ...         return \'absolute url\'\n+\n+    >>> context = Dummy()\n+    >>> context.portal_url = Dummy()\n+    >>> ls = LanguageSelector(context, dict(), None, None)\n+    >>> ls.portal_url()\n+    \'absolute url\'\n     """\n \n     def __init__(self, context, request, view, manager):\n@@ -92,7 +91,7 @@ def __init__(self, context, request, view, manager):\n         self.manager = manager\n \n     def update(self):\n-        self.tool = getToolByName(self.context, \'portal_languages\', None)\n+        self.tool = getToolByName(self.context, "portal_languages", None)\n \n     def available(self):\n         if self.tool is not None:\n@@ -102,7 +101,7 @@ def available(self):\n         return False\n \n     def portal_url(self):\n-        portal_tool = getToolByName(self.context, \'portal_url\', None)\n+        portal_tool = getToolByName(self.context, "portal_url", None)\n         if portal_tool is not None:\n             return portal_tool.getPortalObject().absolute_url()\n         return None\n@@ -118,14 +117,16 @@ def languages(self):\n         def merge(lang, info):\n             info["code"] = lang\n             if lang == current:\n-                info[\'selected\'] = True\n+                info["selected"] = True\n             else:\n-                info[\'selected\'] = False\n+                info["selected"] = False\n             return info\n \n-        languages = [merge(lang, info) for (lang, info) in\n-                        self.tool.getAvailableLanguageInformation().items()\n-                        if info["selected"]]\n+        languages = [\n+            merge(lang, info)\n+            for (lang, info) in self.tool.getAvailableLanguageInformation().items()\n+            if info["selected"]\n+        ]\n \n         # sort supported languages by index in portal_languages tool\n         supported_langs = self.tool.getSupportedLanguages()\ndiff --git a/plone/app/i18n/locales/browser/tests.py b/plone/app/i18n/locales/browser/tests.py\nindex d0c5418..15ea4e7 100644\n--- a/plone/app/i18n/locales/browser/tests.py\n+++ b/plone/app/i18n/locales/browser/tests.py\n@@ -1,4 +1,5 @@\n-from zope.component.testing import setUp, tearDown\n+from zope.component.testing import setUp\n+from zope.component.testing import tearDown\n \n import doctest\n import re\n@@ -9,9 +10,9 @@\n def test_suite():\n     return unittest.TestSuite(\n         doctest.DocTestSuite(\n-            \'plone.app.i18n.locales.browser.selector\',\n+            "plone.app.i18n.locales.browser.selector",\n             setUp=setUp(),\n             tearDown=tearDown,\n             optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE,\n-            )\n         )\n+    )\ndiff --git a/plone/app/i18n/locales/countries.py b/plone/app/i18n/locales/countries.py\nindex 9aa9f58..a7b4273 100644\n--- a/plone/app/i18n/locales/countries.py\n+++ b/plone/app/i18n/locales/countries.py\n@@ -1,10 +1,8 @@\n+from OFS.SimpleItem import SimpleItem\n from plone.app.i18n.locales.interfaces import ICountries\n from plone.i18n.locales.countries import CountryAvailability\n-\n from zope.interface import implementer\n \n-from OFS.SimpleItem import SimpleItem\n-\n \n @implementer(ICountries)\n class Countries(SimpleItem, CountryAvailability):\n@@ -17,20 +15,18 @@ class Countries(SimpleItem, CountryAvailability):\n       True\n     """\n \n-    id = \'plone_app_countries\'\n-    title = \'Manages available countries\'\n-    meta_type = \'Plone App I18N Countries\'\n+    id = "plone_app_countries"\n+    title = "Manages available countries"\n+    meta_type = "Plone App I18N Countries"\n \n     def __init__(self):\n-        self.countries = [\'en\']\n+        self.countries = ["en"]\n \n     def getAvailableCountries(self):\n-        """Return a sequence of country tags for available countries.\n-        """\n+        """Return a sequence of country tags for available countries."""\n         return list(self.countries)\n \n     def setAvailableCountries(self, countries):\n-        """Set a list of available country tags.\n-        """\n+        """Set a list of available country tags."""\n         countries = list(countries)\n         self.countries = countries\ndiff --git a/plone/app/i18n/locales/interfaces.py b/plone/app/i18n/locales/interfaces.py\nindex fd7ae41..36e0640 100644\n--- a/plone/app/i18n/locales/interfaces.py\n+++ b/plone/app/i18n/locales/interfaces.py\n@@ -1,5 +1,5 @@\n-from plone.i18n.locales.interfaces import ICountryAvailability\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n+from plone.i18n.locales.interfaces import ICountryAvailability\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n from plone.i18n.locales.interfaces import IModifiableCountryAvailability\n from plone.i18n.locales.interfaces import IModifiableLanguageAvailability\n@@ -9,11 +9,11 @@ class ICountries(ICountryAvailability, IModifiableCountryAvailability):\n     """A modifiable list of countries."""\n \n \n-class IContentLanguages(IContentLanguageAvailability,\n-                        IModifiableLanguageAvailability):\n+class IContentLanguages(IContentLanguageAvailability, IModifiableLanguageAvailability):\n     """A modifiable list of available content languages."""\n \n \n-class IMetadataLanguages(IMetadataLanguageAvailability,\n-                         IModifiableLanguageAvailability):\n+class IMetadataLanguages(\n+    IMetadataLanguageAvailability, IModifiableLanguageAvailability\n+):\n     """A modifiable list of available metadata languages."""\ndiff --git a/plone/app/i18n/locales/languages.py b/plone/app/i18n/locales/languages.py\nindex f41afc2..d31062f 100644\n--- a/plone/app/i18n/locales/languages.py\n+++ b/plone/app/i18n/locales/languages.py\n@@ -1,19 +1,16 @@\n+from OFS.SimpleItem import SimpleItem\n from plone.app.i18n.locales.interfaces import IContentLanguages\n from plone.app.i18n.locales.interfaces import IMetadataLanguages\n from plone.app.i18n.locales.interfaces import IModifiableLanguageAvailability\n-\n from plone.i18n.locales.languages import ContentLanguageAvailability\n-from plone.i18n.locales.languages import MetadataLanguageAvailability\n from plone.i18n.locales.languages import LanguageAvailability\n-\n+from plone.i18n.locales.languages import MetadataLanguageAvailability\n from zope.interface import implementer\n \n-from OFS.SimpleItem import SimpleItem\n-\n \n @implementer(IModifiableLanguageAvailability)\n class Languages(SimpleItem, LanguageAvailability):\n-    """ A base implementation for persistent utilities implementing\n+    """A base implementation for persistent utilities implementing\n     IModifiableLanguageAvailability.\n \n     Let\'s make sure that this implementation actually fulfills the API.\n@@ -24,12 +21,11 @@ class Languages(SimpleItem, LanguageAvailability):\n     """\n \n     def __init__(self):\n-        self.languages = [\'en\']\n+        self.languages = ["en"]\n         self.combined = []\n \n     def getAvailableLanguages(self, combined=False):\n-        """Returns a sequence of language tags for available languages.\n-        """\n+        """Returns a sequence of language tags for available languages."""\n         if combined:\n             languages = list(self.languages)\n             languages.extend(self.combined)\n@@ -38,8 +34,7 @@ def getAvailableLanguages(self, combined=False):\n             return list(self.languages)\n \n     def setAvailableLanguages(self, languages, combined=False):\n-        """Sets a list of available language tags.\n-        """\n+        """Sets a list of available language tags."""\n         languages = list(languages)\n         if combined:\n             self.combined = languages\n@@ -58,9 +53,9 @@ class ContentLanguages(Languages, ContentLanguageAvailability):\n       True\n     """\n \n-    id = \'plone_app_content_languages\'\n-    title = \'Manages available content languages\'\n-    meta_type = \'Plone App I18N Content Languages\'\n+    id = "plone_app_content_languages"\n+    title = "Manages available content languages"\n+    meta_type = "Plone App I18N Content Languages"\n \n \n @implementer(IMetadataLanguages)\n@@ -74,6 +69,6 @@ class MetadataLanguages(Languages, MetadataLanguageAvailability):\n       True\n     """\n \n-    id = \'plone_app_metadata_languages\'\n-    title = \'Manages available metadata languages\'\n-    meta_type = \'Plone App I18N Metadata Languages\'\n+    id = "plone_app_metadata_languages"\n+    title = "Manages available metadata languages"\n+    meta_type = "Plone App I18N Metadata Languages"\ndiff --git a/plone/app/i18n/locales/tests/test_doctests.py b/plone/app/i18n/locales/tests/test_doctests.py\nindex 865c424..1746ddc 100644\n--- a/plone/app/i18n/locales/tests/test_doctests.py\n+++ b/plone/app/i18n/locales/tests/test_doctests.py\n@@ -6,9 +6,10 @@\n import six\n import unittest\n \n-OPTIONFLAGS = (doctest.REPORT_ONLY_FIRST_FAILURE |\n-               doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+\n+OPTIONFLAGS = (\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+)\n \n \n class Py23DocChecker(doctest.OutputChecker):\n@@ -19,17 +20,27 @@ def check_output(self, want, got, optionflags):\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocTestSuite(\'plone.app.i18n.locales.countries\'),\n-        doctest.DocTestSuite(\'plone.app.i18n.locales.languages\'),\n-        layered(doctest.DocFileSuite(\'countries.txt\',\n-            optionflags=OPTIONFLAGS,\n-            package=\'plone.app.i18n.locales.tests\',\n-            checker=Py23DocChecker(),\n-            ), layer=PLONE_INTEGRATION_TESTING),\n-        layered(doctest.DocFileSuite(\'languages.txt\',\n-            optionflags=OPTIONFLAGS,\n-            package=\'plone.app.i18n.locales.tests\',\n-            checker=Py23DocChecker(),\n-            ), layer=PLONE_INTEGRATION_TESTING)\n-        ))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocTestSuite("plone.app.i18n.locales.countries"),\n+            doctest.DocTestSuite("plone.app.i18n.locales.languages"),\n+            layered(\n+                doctest.DocFileSuite(\n+                    "countries.txt",\n+                    optionflags=OPTIONFLAGS,\n+                    package="plone.app.i18n.locales.tests",\n+                    checker=Py23DocChecker(),\n+                ),\n+                layer=PLONE_INTEGRATION_TESTING,\n+            ),\n+            layered(\n+                doctest.DocFileSuite(\n+                    "languages.txt",\n+                    optionflags=OPTIONFLAGS,\n+                    package="plone.app.i18n.locales.tests",\n+                    checker=Py23DocChecker(),\n+                ),\n+                layer=PLONE_INTEGRATION_TESTING,\n+            ),\n+        )\n+    )\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..b616d8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 18748dc..8a294b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,43 +1,45 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'4.0.0.dev0\'\n \n-setup(name=\'plone.app.i18n\',\n-      version=version,\n-      description="Plone specific i18n extensions.",\n-      long_description=open("README.rst").read() + "\\n" +\n-                       open("CHANGES.rst").read(),\n-      classifiers=[\n-          "Development Status :: 6 - Mature",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 6.0",\n-          "Framework :: Plone :: Core",\n-          "Framework :: Zope :: 5",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-          "Programming Language :: Python :: 3.9",\n-      ],\n-      keywords=\'plone i18n\',\n-      author=\'Plone Foundation\',\n-      author_email=\'releaseteam@plone;org\',\n-      url=\'https://github.com/plone/plone.app.i18n\',\n-      license=\'GPL version 2\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\', \'plone.app\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=[\n-          \'setuptools\',\n-          \'Products.CMFCore\',\n-          \'plone.i18n\',\n-      ],\n-      extras_require={\n-          \'test\': [\n-              \'plone.app.testing\',\n-          ]\n-      },\n-      )\n+version = "4.0.0.dev0"\n+\n+setup(\n+    name="plone.app.i18n",\n+    version=version,\n+    description="Plone specific i18n extensions.",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n+    classifiers=[\n+        "Development Status :: 6 - Mature",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+    ],\n+    keywords="plone i18n",\n+    author="Plone Foundation",\n+    author_email="releaseteam@plone;org",\n+    url="https://github.com/plone/plone.app.i18n",\n+    license="GPL version 2",\n+    packages=find_packages(),\n+    namespace_packages=["plone", "plone.app"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        "setuptools",\n+        "Products.CMFCore",\n+        "plone.i18n",\n+    ],\n+    extras_require={\n+        "test": [\n+            "plone.app.testing",\n+        ]\n+    },\n+)\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-20T16:04:27+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.i18n/commit/5962e237b27caadd598962d602f7f4e2ec29d563

rm six

Files changed:
M plone/app/i18n/locales/browser/tests.py
M plone/app/i18n/locales/tests/test_doctests.py

b'diff --git a/plone/app/i18n/locales/browser/tests.py b/plone/app/i18n/locales/browser/tests.py\nindex 15ea4e7..be6ed77 100644\n--- a/plone/app/i18n/locales/browser/tests.py\n+++ b/plone/app/i18n/locales/browser/tests.py\n@@ -3,7 +3,6 @@\n \n import doctest\n import re\n-import six\n import unittest\n \n \ndiff --git a/plone/app/i18n/locales/tests/test_doctests.py b/plone/app/i18n/locales/tests/test_doctests.py\nindex 1746ddc..5e5d3e7 100644\n--- a/plone/app/i18n/locales/tests/test_doctests.py\n+++ b/plone/app/i18n/locales/tests/test_doctests.py\n@@ -3,7 +3,6 @@\n \n import doctest\n import re\n-import six\n import unittest\n \n \n@@ -12,13 +11,6 @@\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         (\n@@ -29,7 +21,6 @@ def test_suite():\n                     "countries.txt",\n                     optionflags=OPTIONFLAGS,\n                     package="plone.app.i18n.locales.tests",\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=PLONE_INTEGRATION_TESTING,\n             ),\n@@ -38,7 +29,6 @@ def test_suite():\n                     "languages.txt",\n                     optionflags=OPTIONFLAGS,\n                     package="plone.app.i18n.locales.tests",\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=PLONE_INTEGRATION_TESTING,\n             ),\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-20T16:06:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.i18n/commit/63a89351a0273f86a8ae1a23d346036f6e1c0ab9

reduce zcml

Files changed:
M plone/app/i18n/configure.zcml
D plone/app/i18n/dependencies.zcml

b'diff --git a/plone/app/i18n/configure.zcml b/plone/app/i18n/configure.zcml\nindex 02223ab..1c7c669 100644\n--- a/plone/app/i18n/configure.zcml\n+++ b/plone/app/i18n/configure.zcml\n@@ -3,7 +3,6 @@\n     xmlns:five="http://namespaces.zope.org/five">\n \n     <include package=".locales" />\n-\n-    <include file="dependencies.zcml"/>\n+    <include package="plone.i18n" />\n \n </configure>\n\\ No newline at end of file\ndiff --git a/plone/app/i18n/dependencies.zcml b/plone/app/i18n/dependencies.zcml\ndeleted file mode 100644\nindex 6874827..0000000\n--- a/plone/app/i18n/dependencies.zcml\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five">\n-\n-  <include package="plone.i18n" />\n-\n-</configure>\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-20T16:11:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.i18n/commit/21bdd15d67f189e1b0822a7373c2575eb35394d6

manual overhaul

Files changed:
M plone/app/i18n/locales/browser/selector.py
M plone/app/i18n/locales/languages.py

b'diff --git a/plone/app/i18n/locales/browser/selector.py b/plone/app/i18n/locales/browser/selector.py\nindex 1569c80..4f43269 100644\n--- a/plone/app/i18n/locales/browser/selector.py\n+++ b/plone/app/i18n/locales/browser/selector.py\n@@ -85,20 +85,18 @@ class LanguageSelector(BrowserView):\n \n     def __init__(self, context, request, view, manager):\n         super().__init__(context, request)\n-        self.context = context\n-        self.request = request\n         self.view = view\n         self.manager = manager\n \n     def update(self):\n         self.tool = getToolByName(self.context, "portal_languages", None)\n \n-    def available(self):\n-        if self.tool is not None:\n-            selector = self.tool.showSelector()\n-            languages = len(self.tool.getSupportedLanguages()) > 1\n-            return selector and languages\n-        return False\n+    def available(self) -> bool:\n+        if self.tool is None:\n+            return False\n+        selector = self.tool.showSelector()\n+        languages = len(self.tool.getSupportedLanguages()) > 1\n+        return selector and languages\n \n     def portal_url(self):\n         portal_tool = getToolByName(self.context, "portal_url", None)\n@@ -116,10 +114,7 @@ def languages(self):\n \n         def merge(lang, info):\n             info["code"] = lang\n-            if lang == current:\n-                info["selected"] = True\n-            else:\n-                info["selected"] = False\n+            info["selected"] = lang == current\n             return info\n \n         languages = [\n@@ -141,6 +136,6 @@ def index(info):\n \n     def showFlags(self):\n         """Do we use flags?."""\n-        if self.tool is not None:\n-            return self.tool.showFlags\n-        return False\n+        if self.tool is None:\n+            return False\n+        return self.tool.showFlags\ndiff --git a/plone/app/i18n/locales/languages.py b/plone/app/i18n/locales/languages.py\nindex d31062f..69a101c 100644\n--- a/plone/app/i18n/locales/languages.py\n+++ b/plone/app/i18n/locales/languages.py\n@@ -30,8 +30,7 @@ def getAvailableLanguages(self, combined=False):\n             languages = list(self.languages)\n             languages.extend(self.combined)\n             return languages\n-        else:\n-            return list(self.languages)\n+        return list(self.languages)\n \n     def setAvailableLanguages(self, languages, combined=False):\n         """Sets a list of available language tags."""\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2022-05-31T11:20:48+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.i18n/commit/1010cbbe5350d06538ba51416d40e4687a44d241

Merge pull request #8 from plone/1letter/svg-flag-support

1letter/svg flag support

Files changed:
A news/8.breaking
M bootstrap.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/i18n/__init__.py
M plone/app/i18n/configure.zcml
M plone/app/i18n/locales/__init__.py
M plone/app/i18n/locales/browser/__init__.py
M plone/app/i18n/locales/browser/languageselector.pt
M plone/app/i18n/locales/browser/selector.py
M plone/app/i18n/locales/browser/tests.py
M plone/app/i18n/locales/countries.py
M plone/app/i18n/locales/interfaces.py
M plone/app/i18n/locales/languages.py
M plone/app/i18n/locales/tests/__init__.py
M plone/app/i18n/locales/tests/countries.txt
M plone/app/i18n/locales/tests/test_doctests.py
M setup.cfg
M setup.py
D plone/app/i18n/dependencies.zcml

b'diff --git a/bootstrap.py b/bootstrap.py\nindex ed57894..f9cd227 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,16 +18,17 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n tmpeggs = tempfile.mkdtemp()\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -37,28 +38,40 @@\n \n Note that by using --find-links to point to local resources, you can keep \n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n \n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --version, the "\n+        "bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n \n \n options, args = parser.parse_args()\n@@ -75,23 +88,25 @@\n     from urllib2 import urlopen\n \n ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n+    # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n+\n+    # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -104,36 +119,43 @@\n \n ws = pkg_resources.working_set\n \n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n+            if (part[:1] == "*") and (part not in _final_parts):\n                 return False\n         return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -152,13 +174,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -167,12 +190,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/news/8.breaking b/news/8.breaking\nnew file mode 100644\nindex 0000000..c5e417b\n--- /dev/null\n+++ b/news/8.breaking\n@@ -0,0 +1,6 @@\n+Use SVG Flags in Language Selector\n+Update Markup in Language Selector\n+Prepare of use the Icon Resolver in Plone 6.\n+Drop Python 2 and Plone 5.2 support.\n+Pyupgrade, code style Black and Isort.\n+[1letter, jensens]\n\\ No newline at end of file\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef..05f0beb 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/i18n/__init__.py b/plone/app/i18n/__init__.py\nindex 4aa11c7..792d600 100644\n--- a/plone/app/i18n/__init__.py\n+++ b/plone/app/i18n/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/i18n/configure.zcml b/plone/app/i18n/configure.zcml\nindex 02223ab..1c7c669 100644\n--- a/plone/app/i18n/configure.zcml\n+++ b/plone/app/i18n/configure.zcml\n@@ -3,7 +3,6 @@\n     xmlns:five="http://namespaces.zope.org/five">\n \n     <include package=".locales" />\n-\n-    <include file="dependencies.zcml"/>\n+    <include package="plone.i18n" />\n \n </configure>\n\\ No newline at end of file\ndiff --git a/plone/app/i18n/dependencies.zcml b/plone/app/i18n/dependencies.zcml\ndeleted file mode 100644\nindex 6874827..0000000\n--- a/plone/app/i18n/dependencies.zcml\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five">\n-\n-  <include package="plone.i18n" />\n-\n-</configure>\ndiff --git a/plone/app/i18n/locales/__init__.py b/plone/app/i18n/locales/__init__.py\nindex 4aa11c7..792d600 100644\n--- a/plone/app/i18n/locales/__init__.py\n+++ b/plone/app/i18n/locales/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/i18n/locales/browser/__init__.py b/plone/app/i18n/locales/browser/__init__.py\nindex 4aa11c7..792d600 100644\n--- a/plone/app/i18n/locales/browser/__init__.py\n+++ b/plone/app/i18n/locales/browser/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/i18n/locales/browser/languageselector.pt b/plone/app/i18n/locales/browser/languageselector.pt\nindex 1b2e377..ab4fbe9 100644\n--- a/plone/app/i18n/locales/browser/languageselector.pt\n+++ b/plone/app/i18n/locales/browser/languageselector.pt\n@@ -1,33 +1,33 @@\n <tal:language tal:condition="view/available">\n-<ul id="portal-languageselector"\n-    tal:define="showFlags view/showFlags;\n+  <ul\n+      id="portal-languageselector"\n+      tal:define="showFlags view/showFlags;\n                 languages view/languages;\n                 here_url context/@@plone_context_state/view_url;\n-                portal_url view/portal_url;">\n+                portal_url view/portal_url;\n+                icons python:context.restrictedTraverse(\'@@iconresolver\');">\n     <tal:language repeat="lang languages">\n-    <li tal:define="code lang/code;\n+      <li\n+          tal:define="code lang/code;\n                     selected lang/selected;\n                     codeclass string:language-${code};\n                     current python: selected and \'currentLanguage \' or \'\';"\n-        tal:attributes="class string:${current}${codeclass}">\n-        <a href=""\n-           tal:define="flag lang/flag|nothing;\n+          tal:attributes="class string:${current}${codeclass}">\n+        <a\n+            href=""\n+            tal:define="flag lang/flag|nothing;\n                        name lang/native|lang/name;\n                        showflag python:showFlags and flag;"\n-           tal:attributes="href string:${here_url}?set_language=${code};\n-                           title name"\n-            ><tal:flag condition="showflag">\n-                <img width="14"\n-                     height="11"\n-                     alt=""\n-                     tal:attributes="src string:${portal_url}${flag};\n-                                     alt name;\n-                                     title name;" />\n-            </tal:flag\n-            ><tal:nonflag condition="not: showflag"\n-                          replace="name">language name</tal:nonflag\n-        ></a>\n-    </li>\n+            tal:attributes="href string:${here_url}?set_language=${code};\n+                           title name">\n+          <tal:flag condition="showflag">\n+            <img tal:replace="structure python:icons.tag(flag, tag_class=\'plone-icon-flag\')" />\n+          </tal:flag>\n+          <tal:nonflag\n+              condition="not: showflag"\n+              replace="name">language name</tal:nonflag>\n+        </a>\n+      </li>\n     </tal:language>\n-</ul>\n+  </ul>\n </tal:language>\ndiff --git a/plone/app/i18n/locales/browser/selector.py b/plone/app/i18n/locales/browser/selector.py\nindex 138a5a1..4f43269 100644\n--- a/plone/app/i18n/locales/browser/selector.py\n+++ b/plone/app/i18n/locales/browser/selector.py\n@@ -1,109 +1,105 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.viewlet.interfaces import IViewlet\n-\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n+from zope.interface import implementer\n+from zope.viewlet.interfaces import IViewlet\n \n \n @implementer(IViewlet)\n class LanguageSelector(BrowserView):\n     """Language selector.\n \n-      >>> ls = LanguageSelector(None, dict(), None, None)\n-      >>> ls\n-      <plone.app.i18n.locales.browser.selector.LanguageSelector object at ...>\n-\n-      >>> ls.update()\n-      >>> ls.available()\n-      False\n-      >>> ls.languages()\n-      []\n-      >>> ls.showFlags()\n-      False\n-\n-      >>> class Tool(object):\n-      ...     use_cookie_negotiation = False\n-      ...     supported_langs = [\'de\', \'en\', \'ar\']\n-      ...     always_show_selector = False\n-      ...\n-      ...     def __init__(self, **kw):\n-      ...         self.__dict__.update(kw)\n-      ...         self.showFlags = True\n-      ...\n-      ...     def getSupportedLanguages(self):\n-      ...         return self.supported_langs\n-      ...\n-      ...     def getAvailableLanguageInformation(self):\n-      ...         return dict(en={\'selected\' : True}, de={\'selected\' : False},\n-      ...                     nl={\'selected\' : True}, ar={\'selected\': True})\n-      ...\n-      ...     def getLanguageBindings(self, request):\n-      ...         # en = selected by user, nl = default, [] = other options\n-      ...         return (\'en\', \'nl\', [])\n-      ...\n-      ...     def showSelector(self):\n-      ...         return bool(self.use_cookie_negotiation or self.always_show_selector)\n-\n-      >>> ls.tool = Tool()\n-      >>> ls.available()\n-      False\n-\n-      >>> ls.tool = Tool(use_cookie_negotiation=True)\n-      >>> ls.available()\n-      True\n-\n-      >>> result = [{\'code\': \'en\', \'selected\': True}, {\'code\': \'ar\', \'selected\': False},\n-      ...           {\'code\': \'nl\', \'selected\': False}]\n-      >>> ls.languages() == result\n-      True\n-\n-      >>> ls.showFlags()\n-      True\n-\n-      >>> ls.tool = Tool(use_cookie_negotiation=True)\n-      >>> ls.available()\n-      True\n-\n-      >>> ls.tool = Tool(always_show_selector=True)\n-      >>> ls.available()\n-      True\n-\n-      >>> from zope.interface import implementer\n-      >>> from OFS.interfaces import IItem\n-      >>> @implementer(IItem)\n-      ... class Dummy(object):\n-      ...     def getPortalObject(self):\n-      ...         return self\n-      ...     def absolute_url(self):\n-      ...         return \'absolute url\'\n-\n-      >>> context = Dummy()\n-      >>> context.portal_url = Dummy()\n-      >>> ls = LanguageSelector(context, dict(), None, None)\n-      >>> ls.portal_url()\n-      \'absolute url\'\n+    >>> ls = LanguageSelector(None, dict(), None, None)\n+    >>> ls\n+    <plone.app.i18n.locales.browser.selector.LanguageSelector object at ...>\n+\n+    >>> ls.update()\n+    >>> ls.available()\n+    False\n+    >>> ls.languages()\n+    []\n+    >>> ls.showFlags()\n+    False\n+\n+    >>> class Tool(object):\n+    ...     use_cookie_negotiation = False\n+    ...     supported_langs = [\'de\', \'en\', \'ar\']\n+    ...     always_show_selector = False\n+    ...\n+    ...     def __init__(self, **kw):\n+    ...         self.__dict__.update(kw)\n+    ...         self.showFlags = True\n+    ...\n+    ...     def getSupportedLanguages(self):\n+    ...         return self.supported_langs\n+    ...\n+    ...     def getAvailableLanguageInformation(self):\n+    ...         return dict(en={\'selected\' : True}, de={\'selected\' : False},\n+    ...                     nl={\'selected\' : True}, ar={\'selected\': True})\n+    ...\n+    ...     def getLanguageBindings(self, request):\n+    ...         # en = selected by user, nl = default, [] = other options\n+    ...         return (\'en\', \'nl\', [])\n+    ...\n+    ...     def showSelector(self):\n+    ...         return bool(self.use_cookie_negotiation or self.always_show_selector)\n+\n+    >>> ls.tool = Tool()\n+    >>> ls.available()\n+    False\n+\n+    >>> ls.tool = Tool(use_cookie_negotiation=True)\n+    >>> ls.available()\n+    True\n+\n+    >>> result = [{\'code\': \'en\', \'selected\': True}, {\'code\': \'ar\', \'selected\': False},\n+    ...           {\'code\': \'nl\', \'selected\': False}]\n+    >>> ls.languages() == result\n+    True\n+\n+    >>> ls.showFlags()\n+    True\n+\n+    >>> ls.tool = Tool(use_cookie_negotiation=True)\n+    >>> ls.available()\n+    True\n+\n+    >>> ls.tool = Tool(always_show_selector=True)\n+    >>> ls.available()\n+    True\n+\n+    >>> from zope.interface import implementer\n+    >>> from OFS.interfaces import IItem\n+    >>> @implementer(IItem)\n+    ... class Dummy(object):\n+    ...     def getPortalObject(self):\n+    ...         return self\n+    ...     def absolute_url(self):\n+    ...         return \'absolute url\'\n+\n+    >>> context = Dummy()\n+    >>> context.portal_url = Dummy()\n+    >>> ls = LanguageSelector(context, dict(), None, None)\n+    >>> ls.portal_url()\n+    \'absolute url\'\n     """\n \n     def __init__(self, context, request, view, manager):\n-        super(LanguageSelector, self).__init__(context, request)\n-        self.context = context\n-        self.request = request\n+        super().__init__(context, request)\n         self.view = view\n         self.manager = manager\n \n     def update(self):\n-        self.tool = getToolByName(self.context, \'portal_languages\', None)\n+        self.tool = getToolByName(self.context, "portal_languages", None)\n \n-    def available(self):\n-        if self.tool is not None:\n-            selector = self.tool.showSelector()\n-            languages = len(self.tool.getSupportedLanguages()) > 1\n-            return selector and languages\n-        return False\n+    def available(self) -> bool:\n+        if self.tool is None:\n+            return False\n+        selector = self.tool.showSelector()\n+        languages = len(self.tool.getSupportedLanguages()) > 1\n+        return selector and languages\n \n     def portal_url(self):\n-        portal_tool = getToolByName(self.context, \'portal_url\', None)\n+        portal_tool = getToolByName(self.context, "portal_url", None)\n         if portal_tool is not None:\n             return portal_tool.getPortalObject().absolute_url()\n         return None\n@@ -118,15 +114,14 @@ def languages(self):\n \n         def merge(lang, info):\n             info["code"] = lang\n-            if lang == current:\n-                info[\'selected\'] = True\n-            else:\n-                info[\'selected\'] = False\n+            info["selected"] = lang == current\n             return info\n \n-        languages = [merge(lang, info) for (lang, info) in\n-                        self.tool.getAvailableLanguageInformation().items()\n-                        if info["selected"]]\n+        languages = [\n+            merge(lang, info)\n+            for (lang, info) in self.tool.getAvailableLanguageInformation().items()\n+            if info["selected"]\n+        ]\n \n         # sort supported languages by index in portal_languages tool\n         supported_langs = self.tool.getSupportedLanguages()\n@@ -141,6 +136,6 @@ def index(info):\n \n     def showFlags(self):\n         """Do we use flags?."""\n-        if self.tool is not None:\n-            return self.tool.showFlags\n-        return False\n+        if self.tool is None:\n+            return False\n+        return self.tool.showFlags\ndiff --git a/plone/app/i18n/locales/browser/tests.py b/plone/app/i18n/locales/browser/tests.py\nindex e31fc33..be6ed77 100644\n--- a/plone/app/i18n/locales/browser/tests.py\n+++ b/plone/app/i18n/locales/browser/tests.py\n@@ -1,26 +1,17 @@\n-# -*- coding: UTF-8 -*-\n-from zope.component.testing import setUp, tearDown\n+from zope.component.testing import setUp\n+from zope.component.testing import tearDown\n \n import doctest\n import re\n-import six\n import unittest\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite((\n+    return unittest.TestSuite(\n         doctest.DocTestSuite(\n-            \'plone.app.i18n.locales.browser.selector\',\n+            "plone.app.i18n.locales.browser.selector",\n             setUp=setUp(),\n             tearDown=tearDown,\n             optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE,\n-            checker=Py23DocChecker(),\n-            )\n-        ))\n+        )\n+    )\ndiff --git a/plone/app/i18n/locales/countries.py b/plone/app/i18n/locales/countries.py\nindex 0d45f7a..a7b4273 100644\n--- a/plone/app/i18n/locales/countries.py\n+++ b/plone/app/i18n/locales/countries.py\n@@ -1,12 +1,8 @@\n-# -*- coding: UTF-8 -*-\n-\n+from OFS.SimpleItem import SimpleItem\n from plone.app.i18n.locales.interfaces import ICountries\n from plone.i18n.locales.countries import CountryAvailability\n-\n from zope.interface import implementer\n \n-from OFS.SimpleItem import SimpleItem\n-\n \n @implementer(ICountries)\n class Countries(SimpleItem, CountryAvailability):\n@@ -19,20 +15,18 @@ class Countries(SimpleItem, CountryAvailability):\n       True\n     """\n \n-    id = \'plone_app_countries\'\n-    title = \'Manages available countries\'\n-    meta_type = \'Plone App I18N Countries\'\n+    id = "plone_app_countries"\n+    title = "Manages available countries"\n+    meta_type = "Plone App I18N Countries"\n \n     def __init__(self):\n-        self.countries = [\'en\']\n+        self.countries = ["en"]\n \n     def getAvailableCountries(self):\n-        """Return a sequence of country tags for available countries.\n-        """\n+        """Return a sequence of country tags for available countries."""\n         return list(self.countries)\n \n     def setAvailableCountries(self, countries):\n-        """Set a list of available country tags.\n-        """\n+        """Set a list of available country tags."""\n         countries = list(countries)\n         self.countries = countries\ndiff --git a/plone/app/i18n/locales/interfaces.py b/plone/app/i18n/locales/interfaces.py\nindex c22caae..36e0640 100644\n--- a/plone/app/i18n/locales/interfaces.py\n+++ b/plone/app/i18n/locales/interfaces.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n-from plone.i18n.locales.interfaces import ICountryAvailability\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n+from plone.i18n.locales.interfaces import ICountryAvailability\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n from plone.i18n.locales.interfaces import IModifiableCountryAvailability\n from plone.i18n.locales.interfaces import IModifiableLanguageAvailability\n@@ -10,11 +9,11 @@ class ICountries(ICountryAvailability, IModifiableCountryAvailability):\n     """A modifiable list of countries."""\n \n \n-class IContentLanguages(IContentLanguageAvailability,\n-                        IModifiableLanguageAvailability):\n+class IContentLanguages(IContentLanguageAvailability, IModifiableLanguageAvailability):\n     """A modifiable list of available content languages."""\n \n \n-class IMetadataLanguages(IMetadataLanguageAvailability,\n-                         IModifiableLanguageAvailability):\n+class IMetadataLanguages(\n+    IMetadataLanguageAvailability, IModifiableLanguageAvailability\n+):\n     """A modifiable list of available metadata languages."""\ndiff --git a/plone/app/i18n/locales/languages.py b/plone/app/i18n/locales/languages.py\nindex 3ef5be6..69a101c 100644\n--- a/plone/app/i18n/locales/languages.py\n+++ b/plone/app/i18n/locales/languages.py\n@@ -1,21 +1,16 @@\n-# -*- coding: UTF-8 -*-\n-\n+from OFS.SimpleItem import SimpleItem\n from plone.app.i18n.locales.interfaces import IContentLanguages\n from plone.app.i18n.locales.interfaces import IMetadataLanguages\n from plone.app.i18n.locales.interfaces import IModifiableLanguageAvailability\n-\n from plone.i18n.locales.languages import ContentLanguageAvailability\n-from plone.i18n.locales.languages import MetadataLanguageAvailability\n from plone.i18n.locales.languages import LanguageAvailability\n-\n+from plone.i18n.locales.languages import MetadataLanguageAvailability\n from zope.interface import implementer\n \n-from OFS.SimpleItem import SimpleItem\n-\n \n @implementer(IModifiableLanguageAvailability)\n class Languages(SimpleItem, LanguageAvailability):\n-    """ A base implementation for persistent utilities implementing\n+    """A base implementation for persistent utilities implementing\n     IModifiableLanguageAvailability.\n \n     Let\'s make sure that this implementation actually fulfills the API.\n@@ -26,22 +21,19 @@ class Languages(SimpleItem, LanguageAvailability):\n     """\n \n     def __init__(self):\n-        self.languages = [\'en\']\n+        self.languages = ["en"]\n         self.combined = []\n \n     def getAvailableLanguages(self, combined=False):\n-        """Returns a sequence of language tags for available languages.\n-        """\n+        """Returns a sequence of language tags for available languages."""\n         if combined:\n             languages = list(self.languages)\n             languages.extend(self.combined)\n             return languages\n-        else:\n-            return list(self.languages)\n+        return list(self.languages)\n \n     def setAvailableLanguages(self, languages, combined=False):\n-        """Sets a list of available language tags.\n-        """\n+        """Sets a list of available language tags."""\n         languages = list(languages)\n         if combined:\n             self.combined = languages\n@@ -60,9 +52,9 @@ class ContentLanguages(Languages, ContentLanguageAvailability):\n       True\n     """\n \n-    id = \'plone_app_content_languages\'\n-    title = \'Manages available content languages\'\n-    meta_type = \'Plone App I18N Content Languages\'\n+    id = "plone_app_content_languages"\n+    title = "Manages available content languages"\n+    meta_type = "Plone App I18N Content Languages"\n \n \n @implementer(IMetadataLanguages)\n@@ -76,6 +68,6 @@ class MetadataLanguages(Languages, MetadataLanguageAvailability):\n       True\n     """\n \n-    id = \'plone_app_metadata_languages\'\n-    title = \'Manages available metadata languages\'\n-    meta_type = \'Plone App I18N Metadata Languages\'\n+    id = "plone_app_metadata_languages"\n+    title = "Manages available metadata languages"\n+    meta_type = "Plone App I18N Metadata Languages"\ndiff --git a/plone/app/i18n/locales/tests/__init__.py b/plone/app/i18n/locales/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/app/i18n/locales/tests/__init__.py\n+++ b/plone/app/i18n/locales/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/i18n/locales/tests/countries.txt b/plone/app/i18n/locales/tests/countries.txt\nindex b648307..ad038c8 100644\n--- a/plone/app/i18n/locales/tests/countries.txt\n+++ b/plone/app/i18n/locales/tests/countries.txt\n@@ -26,7 +26,7 @@ Country tests.\n   \'Germany\'\n \n   >>> de[u\'flag\']\n-  \'/++resource++country-flags/de.gif\'\n+  \'countryflag/de\'\n \n   >>> old = util.getAvailableCountries()\n   >>> countries = [\'de\']\ndiff --git a/plone/app/i18n/locales/tests/test_doctests.py b/plone/app/i18n/locales/tests/test_doctests.py\nindex 3374bc8..5e5d3e7 100644\n--- a/plone/app/i18n/locales/tests/test_doctests.py\n+++ b/plone/app/i18n/locales/tests/test_doctests.py\n@@ -1,36 +1,36 @@\n-# -*- coding: UTF-8 -*-\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.testing import layered\n \n import doctest\n import re\n-import six\n import unittest\n \n-OPTIONFLAGS = (doctest.REPORT_ONLY_FIRST_FAILURE |\n-               doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n \n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+OPTIONFLAGS = (\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+)\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocTestSuite(\'plone.app.i18n.locales.countries\'),\n-        doctest.DocTestSuite(\'plone.app.i18n.locales.languages\'),\n-        layered(doctest.DocFileSuite(\'countries.txt\',\n-            optionflags=OPTIONFLAGS,\n-            package=\'plone.app.i18n.locales.tests\',\n-            checker=Py23DocChecker(),\n-            ), layer=PLONE_INTEGRATION_TESTING),\n-        layered(doctest.DocFileSuite(\'languages.txt\',\n-            optionflags=OPTIONFLAGS,\n-            package=\'plone.app.i18n.locales.tests\',\n-            checker=Py23DocChecker(),\n-            ), layer=PLONE_INTEGRATION_TESTING)\n-        ))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocTestSuite("plone.app.i18n.locales.countries"),\n+            doctest.DocTestSuite("plone.app.i18n.locales.languages"),\n+            layered(\n+                doctest.DocFileSuite(\n+                    "countries.txt",\n+                    optionflags=OPTIONFLAGS,\n+                    package="plone.app.i18n.locales.tests",\n+                ),\n+                layer=PLONE_INTEGRATION_TESTING,\n+            ),\n+            layered(\n+                doctest.DocFileSuite(\n+                    "languages.txt",\n+                    optionflags=OPTIONFLAGS,\n+                    package="plone.app.i18n.locales.tests",\n+                ),\n+                layer=PLONE_INTEGRATION_TESTING,\n+            ),\n+        )\n+    )\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..b616d8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 83abfa0..8a294b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,47 +1,45 @@\n-# -*- coding: utf-8 -*-\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.0.7.dev0\'\n \n-setup(name=\'plone.app.i18n\',\n-      version=version,\n-      description="Plone specific i18n extensions.",\n-      long_description=open("README.rst").read() + "\\n" +\n-                       open("CHANGES.rst").read(),\n-      classifiers=[\n-          "Development Status :: 6 - Mature",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 5.0",\n-          "Framework :: Plone :: 5.1",\n-          "Framework :: Plone :: 5.2",\n-          "Framework :: Plone :: Core",\n-          "Framework :: Zope2",\n-          "Framework :: Zope :: 4",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.7",\n-          "Programming Language :: Python :: 3.6",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-      ],\n-      keywords=\'plone i18n\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.app.i18n\',\n-      license=\'GPL version 2\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\', \'plone.app\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=[\n-          \'setuptools\',\n-      ],\n-      extras_require={\n-          \'test\': [\n-              \'plone.app.testing\',\n-              \'six\',\n-          ]\n-      },\n-      )\n+version = "4.0.0.dev0"\n+\n+setup(\n+    name="plone.app.i18n",\n+    version=version,\n+    description="Plone specific i18n extensions.",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n+    classifiers=[\n+        "Development Status :: 6 - Mature",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+    ],\n+    keywords="plone i18n",\n+    author="Plone Foundation",\n+    author_email="releaseteam@plone;org",\n+    url="https://github.com/plone/plone.app.i18n",\n+    license="GPL version 2",\n+    packages=find_packages(),\n+    namespace_packages=["plone", "plone.app"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        "setuptools",\n+        "Products.CMFCore",\n+        "plone.i18n",\n+    ],\n+    extras_require={\n+        "test": [\n+            "plone.app.testing",\n+        ]\n+    },\n+)\n'

