Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-23T11:26:15-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3df49f078dad0565411bcef447cd62c24a76d868

Improve error handling in Products.CMFCore.factory.addPloneSite (#3562)

* Improve error handling in Products.CMFCore.factory.addPloneSite

- Avoid swallowing exceptions while importing extension profiles
- Remove the status message reporting these errors (no longer relevant since the addsite form no longer offers selecting addon profiles)
- Use the zope.component.hooks.site context manager instead of setSite to make sure the component site gets cleared

Fixes #3561

* leave component site in place unless there's an exception

Files changed:
A news/3561.bugfix
M Products/CMFPlone/factory.py

b'diff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py\nindex 6a23bd1164..6249a3bf43 100644\n--- a/Products/CMFPlone/factory.py\n+++ b/Products/CMFPlone/factory.py\n@@ -1,13 +1,10 @@\n from logging import getLogger\n from plone.registry.interfaces import IRegistry\n-from plone.uuid.handlers import addAttributeUUID\n-from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.events import SiteManagerCreatedEvent\n from plone.base.interfaces import INonInstallable\n from Products.CMFPlone.Portal import PloneSite\n from Products.GenericSetup.tool import SetupTool\n-from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import queryUtility\n from zope.component.hooks import setSite\n from zope.event import notify\n@@ -143,49 +140,41 @@ def addPloneSite(context, site_id, title=\'Plone site\', description=\'\',\n     notify(SiteManagerCreatedEvent(site))\n     setSite(site)\n \n-    setup_tool.setBaselineContext(\'profile-%s\' % profile_id)\n-    setup_tool.runAllImportStepsFromProfile(\'profile-%s\' % profile_id)\n-\n-    reg = queryUtility(IRegistry, context=site)\n-    reg[\'plone.portal_timezone\'] = portal_timezone\n-    reg[\'plone.available_timezones\'] = [portal_timezone]\n-    reg[\'plone.default_language\'] = default_language\n-    reg[\'plone.available_languages\'] = [default_language]\n-\n-    # Install default content types profile if user do not select "example content"\n-    # during site creation.\n-    content_types_profile = content_profile_id if setup_content else _TYPES_PROFILE\n-\n-    setup_tool.runAllImportStepsFromProfile(f\'profile-{content_types_profile}\')\n-\n-    props = dict(\n-        title=title,\n-        description=description,\n-    )\n-    # Do this before applying extension profiles, so the settings from a\n-    # properties.xml file are applied and not overwritten by this\n-    site.manage_changeProperties(**props)\n-\n-    for extension_id in extension_ids:\n-        try:\n-            setup_tool.runAllImportStepsFromProfile(\n-                \'profile-%s\' % extension_id)\n-        except Exception as msg:\n-            IStatusMessage(request).add(_(\n-                \'Could not install ${profile_id}: ${error_msg}! \'\n-                \'Please try to install it manually using the "Addons" \'\n-                \'controlpanel and report any issues to the \'\n-                \'addon maintainers.\',\n-                mapping={\n-                    \'profile_id\': extension_id,\n-                    \'error_msg\': msg.args,\n-                }),\n-                type=\'error\')\n-            logger.exception(\n-                \'Error while installing addon {}. \'\n-                \'See traceback below for details.\'.format(extension_id))\n-\n-    if snapshot is True:\n-        setup_tool.createSnapshot(\'initial_configuration\')\n-\n-    return site\n+    try:\n+        setup_tool.setBaselineContext(\'profile-%s\' % profile_id)\n+        setup_tool.runAllImportStepsFromProfile(\'profile-%s\' % profile_id)\n+\n+        reg = queryUtility(IRegistry, context=site)\n+        reg[\'plone.portal_timezone\'] = portal_timezone\n+        reg[\'plone.available_timezones\'] = [portal_timezone]\n+        reg[\'plone.default_language\'] = default_language\n+        reg[\'plone.available_languages\'] = [default_language]\n+\n+        # Install default content types profile if user do not select "example content"\n+        # during site creation.\n+        content_types_profile = content_profile_id if setup_content else _TYPES_PROFILE\n+\n+        setup_tool.runAllImportStepsFromProfile(f\'profile-{content_types_profile}\')\n+\n+        props = dict(\n+            title=title,\n+            description=description,\n+        )\n+        # Do this before applying extension profiles, so the settings from a\n+        # properties.xml file are applied and not overwritten by this\n+        site.manage_changeProperties(**props)\n+\n+        for extension_id in extension_ids:\n+            try:\n+                setup_tool.runAllImportStepsFromProfile(f"profile-{extension_id}")\n+            except Exception:\n+                logger.error(f"Error while installing profile {extension_id}:")\n+                raise\n+\n+        if snapshot is True:\n+            setup_tool.createSnapshot(\'initial_configuration\')\n+\n+        return site\n+    except Exception:\n+        setSite(None)\n+        raise\ndiff --git a/news/3561.bugfix b/news/3561.bugfix\nnew file mode 100644\nindex 0000000000..61b876583e\n--- /dev/null\n+++ b/news/3561.bugfix\n@@ -0,0 +1,2 @@\n+Fix reporting of exceptions in Products.CMFPlone.factory.addPloneSite.\n+[davisagli]\n'

