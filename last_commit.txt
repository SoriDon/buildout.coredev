Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-15T00:43:57+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/725b70fe366a2bc48c78c1b1931f0a455acc5508

comment

Files changed:
M Products/CMFPlone/resources/browser/mixins.py

diff --git a/Products/CMFPlone/resources/browser/mixins.py b/Products/CMFPlone/resources/browser/mixins.py
index 40fb148..8a6ff36 100644
--- a/Products/CMFPlone/resources/browser/mixins.py
+++ b/Products/CMFPlone/resources/browser/mixins.py
@@ -70,6 +70,7 @@ def __call__(self):
             t = value.format(**less_vars_params)
             result += "'%s': \"%s\",\n" % (name, t)
 
+        # Adding all plone.resource entries css values as less vars
         for name, value in self.resource_registry().items():
             for css in value.css:
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-15T00:44:32+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/8c921799353fd12a42f0093be606c1522b28b17e

Remove dependency on grunt executable
``plone-compile-resources``: Install ``grunt-cli`` instead of depending on an installed ``grunt`` executable.
  If you already have a auto-generated ``package.json`` file in buildout directory, remove it.

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/_generate_gruntfile.py
M Products/CMFPlone/_scripts/compile_resources.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dd3cb21..7e769ca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,12 +10,18 @@ Changelog
 
 Breaking changes:
 
+- ``plone-compile-resources``: Install ``grunt-cli`` instead of depending on an installed ``grunt`` executable.
+  If you already have a auto-generated ``package.json`` file in buildout directory, remove it.
+  [thet]
+
+
 - Moved code around and deprecated old locations in ``Products/CMFPlone/patterns/__init__``.
   This goes together with same pattern settings changes in ``plone.app.layout.globals.pattern_settings``.
   Also moved general usable ``./patterns/utils/get_portal`` to ``./utils/.get_portal``.
   Deprecated ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
   [jensens]
 
+
 New features:
 
 - Added setting to editing controlpanel to enable limit of keywords to the current navigation root.
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 2d1f088..de55bed 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -323,7 +323,7 @@ def resource_to_dir(resource, file_type='.js'):
 
 globalVars_string = ""
 for key, value in sorted(globalVars.items()):
-    globalVars_string += '{0}"{1}": "{2}",\n'.format(22*' ', key, value)
+    globalVars_string += '{0}"{1}": "{2}",\n'.format(22 * ' ', key, value)
 
 
 # BUNDLE LOOP
diff --git a/Products/CMFPlone/_scripts/compile_resources.py b/Products/CMFPlone/_scripts/compile_resources.py
index 319d6aa..be458b3 100644
--- a/Products/CMFPlone/_scripts/compile_resources.py
+++ b/Products/CMFPlone/_scripts/compile_resources.py
@@ -8,10 +8,11 @@
 
 package_json_contents = """{
   "name": "gruntrunner",
-  "version": "1.1.0",
+  "version": "1.1.1",
   "private": true,
   "devDependencies": {
-    "grunt": "~1.0.1",
+    "grunt": "~0.4.5",
+    "grunt-cli": "~1.2.0",
     "grunt-contrib-less": "~1.3.0",
     "grunt-contrib-requirejs": "~1.0.0",
     "grunt-contrib-uglify": "~1.0.1",
@@ -65,7 +66,7 @@ def main(argv=sys.argv):
         help='path to instance executable. If not provided, '
              'will look in bin this was executed from for '
              'instance or client1'
-        )
+    )
     parser.add_argument(
         '-s',
         '--site-id',
@@ -90,13 +91,6 @@ def main(argv=sys.argv):
              'If not given the directory is looked up from Plone registry. '
     )
     parser.add_argument(
-        '-g',
-        '--grunt',
-        dest='grunt_bin',
-        help='path to grunt executable. If not provided, '
-             'will look in system path.'
-    )
-    parser.add_argument(
         '-d',
         '--base-dir',
         dest='base_dir',
@@ -128,29 +122,20 @@ def main(argv=sys.argv):
 
     args = parser.parse_args()
 
-    grunt = args.grunt_bin
-
-    if not grunt:
-        if 'PATH' in os.environ:
-            path = os.environ['PATH']
-            path = path.split(os.pathsep)
-        else:
-            path = ['/bin', '/usr/bin', '/usr/local/bin']
-
-        for directory in path:
-            fullname = os.path.join(directory, 'grunt')
-            if os.path.exists(fullname):
-                grunt = fullname
-                break
-
-    if not grunt:
-        print('Error: no grunt executable found. Exiting')
-        sys.exit(0)
-
     base_path = args.base_dir
     if base_path == '.':
         base_path = os.getcwd()
 
+    # generates only if not already there
+    generate_package_json(base_path)
+    if not args.skip_npminstall:
+        cmd = ['npm', 'install']
+        print('Setup npm env')
+        print('Running command: %s' % ' '.join(cmd))
+        subprocess.check_call(cmd)
+
+    # Generate Gruntfile
+    grunt = os.path.join(base_path, 'node_modules', 'grunt-cli', 'bin', 'grunt')
     if not args.skip_gruntfile:
         generate_gruntfile(
             base_path,
@@ -158,9 +143,7 @@ def main(argv=sys.argv):
             args.site_id,
             args.compile_dir
         )
-
     gruntfile = os.path.join(base_path, 'Gruntfile.js')
-
     if not os.path.exists(gruntfile):
         print(
             "Error, no Gruntfile.js generated at {0} where expected".format(
@@ -168,15 +151,6 @@ def main(argv=sys.argv):
             )
         )
 
-    # generates only if not already there
-    generate_package_json(base_path)
-
-    if not args.skip_npminstall:
-        cmd = ['npm', 'install']
-        print('Setup npm env')
-        print('Running command: %s' % ' '.join(cmd))
-        subprocess.check_call(cmd)
-
     if not args.skip_compile:
         print('Compile {0}'.format(args.bundle))
         cmd = [


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-15T12:45:57+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/52466a82cd2811887e7913d33560008b20b0f9a2

Merge pull request #1638 from plone/thet-nogruntdep

Remove dependency on grunt executable

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/_generate_gruntfile.py
M Products/CMFPlone/_scripts/compile_resources.py
M Products/CMFPlone/resources/browser/mixins.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dd3cb21..7e769ca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,12 +10,18 @@ Changelog
 
 Breaking changes:
 
+- ``plone-compile-resources``: Install ``grunt-cli`` instead of depending on an installed ``grunt`` executable.
+  If you already have a auto-generated ``package.json`` file in buildout directory, remove it.
+  [thet]
+
+
 - Moved code around and deprecated old locations in ``Products/CMFPlone/patterns/__init__``.
   This goes together with same pattern settings changes in ``plone.app.layout.globals.pattern_settings``.
   Also moved general usable ``./patterns/utils/get_portal`` to ``./utils/.get_portal``.
   Deprecated ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
   [jensens]
 
+
 New features:
 
 - Added setting to editing controlpanel to enable limit of keywords to the current navigation root.
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 2d1f088..de55bed 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -323,7 +323,7 @@ def resource_to_dir(resource, file_type='.js'):
 
 globalVars_string = ""
 for key, value in sorted(globalVars.items()):
-    globalVars_string += '{0}"{1}": "{2}",\n'.format(22*' ', key, value)
+    globalVars_string += '{0}"{1}": "{2}",\n'.format(22 * ' ', key, value)
 
 
 # BUNDLE LOOP
diff --git a/Products/CMFPlone/_scripts/compile_resources.py b/Products/CMFPlone/_scripts/compile_resources.py
index 319d6aa..be458b3 100644
--- a/Products/CMFPlone/_scripts/compile_resources.py
+++ b/Products/CMFPlone/_scripts/compile_resources.py
@@ -8,10 +8,11 @@
 
 package_json_contents = """{
   "name": "gruntrunner",
-  "version": "1.1.0",
+  "version": "1.1.1",
   "private": true,
   "devDependencies": {
-    "grunt": "~1.0.1",
+    "grunt": "~0.4.5",
+    "grunt-cli": "~1.2.0",
     "grunt-contrib-less": "~1.3.0",
     "grunt-contrib-requirejs": "~1.0.0",
     "grunt-contrib-uglify": "~1.0.1",
@@ -65,7 +66,7 @@ def main(argv=sys.argv):
         help='path to instance executable. If not provided, '
              'will look in bin this was executed from for '
              'instance or client1'
-        )
+    )
     parser.add_argument(
         '-s',
         '--site-id',
@@ -90,13 +91,6 @@ def main(argv=sys.argv):
              'If not given the directory is looked up from Plone registry. '
     )
     parser.add_argument(
-        '-g',
-        '--grunt',
-        dest='grunt_bin',
-        help='path to grunt executable. If not provided, '
-             'will look in system path.'
-    )
-    parser.add_argument(
         '-d',
         '--base-dir',
         dest='base_dir',
@@ -128,29 +122,20 @@ def main(argv=sys.argv):
 
     args = parser.parse_args()
 
-    grunt = args.grunt_bin
-
-    if not grunt:
-        if 'PATH' in os.environ:
-            path = os.environ['PATH']
-            path = path.split(os.pathsep)
-        else:
-            path = ['/bin', '/usr/bin', '/usr/local/bin']
-
-        for directory in path:
-            fullname = os.path.join(directory, 'grunt')
-            if os.path.exists(fullname):
-                grunt = fullname
-                break
-
-    if not grunt:
-        print('Error: no grunt executable found. Exiting')
-        sys.exit(0)
-
     base_path = args.base_dir
     if base_path == '.':
         base_path = os.getcwd()
 
+    # generates only if not already there
+    generate_package_json(base_path)
+    if not args.skip_npminstall:
+        cmd = ['npm', 'install']
+        print('Setup npm env')
+        print('Running command: %s' % ' '.join(cmd))
+        subprocess.check_call(cmd)
+
+    # Generate Gruntfile
+    grunt = os.path.join(base_path, 'node_modules', 'grunt-cli', 'bin', 'grunt')
     if not args.skip_gruntfile:
         generate_gruntfile(
             base_path,
@@ -158,9 +143,7 @@ def main(argv=sys.argv):
             args.site_id,
             args.compile_dir
         )
-
     gruntfile = os.path.join(base_path, 'Gruntfile.js')
-
     if not os.path.exists(gruntfile):
         print(
             "Error, no Gruntfile.js generated at {0} where expected".format(
@@ -168,15 +151,6 @@ def main(argv=sys.argv):
             )
         )
 
-    # generates only if not already there
-    generate_package_json(base_path)
-
-    if not args.skip_npminstall:
-        cmd = ['npm', 'install']
-        print('Setup npm env')
-        print('Running command: %s' % ' '.join(cmd))
-        subprocess.check_call(cmd)
-
     if not args.skip_compile:
         print('Compile {0}'.format(args.bundle))
         cmd = [
diff --git a/Products/CMFPlone/resources/browser/mixins.py b/Products/CMFPlone/resources/browser/mixins.py
index 40fb148..8a6ff36 100644
--- a/Products/CMFPlone/resources/browser/mixins.py
+++ b/Products/CMFPlone/resources/browser/mixins.py
@@ -70,6 +70,7 @@ def __call__(self):
             t = value.format(**less_vars_params)
             result += "'%s': \"%s\",\n" % (name, t)
 
+        # Adding all plone.resource entries css values as less vars
         for name, value in self.resource_registry().items():
             for css in value.css:
 


