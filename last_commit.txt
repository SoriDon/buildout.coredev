Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T21:51:00+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/9d70fce2bf70af5f7f0ecd3fd59577f5db8db611

Drop compatibility for Plone 5.2, Archetypes, Python 2.

Support Plone 6 only.

Files changed:
A news/60.breaking
M setup.py

b'diff --git a/news/60.breaking b/news/60.breaking\nnew file mode 100644\nindex 0000000..ef22518\n--- /dev/null\n+++ b/news/60.breaking\n@@ -0,0 +1,2 @@\n+Drop compatibility for Plone 5.2.  Support Plone 6 only.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex 5c69824..16b0020 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'3.6.2.dev0\'\n+version = \'4.0.0.dev0\'\n \n setup(\n     name=\'plone.app.linkintegrity\',\n@@ -17,32 +17,29 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "Intended Audience :: Other Audience",\n         "Intended Audience :: System Administrators",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",\n     ],\n     keywords=\'link integrity plone\',\n     author=\'Plone Foundation\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.linkintegrity\',\n+    url=\'https://github.com/plone/plone.app.linkintegrity\',\n     license=\'GPL version 2\',\n     packages=find_packages(),\n     namespace_packages=[\'plone\', \'plone.app\'],\n     include_package_data=True,\n+    python_requires=\'>=3.8\',\n     install_requires=[\n         \'setuptools\',\n         \'six\',\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T22:25:50+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/26354313a743bde9c07d25e07ff0923c7a5b0bfe

Removed Archetypes and Python 2 code, removed six.

Files changed:
M README.rst
M plone/app/linkintegrity/configure.zcml
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/parser.py
M plone/app/linkintegrity/retriever.py
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/tests/base.py
M plone/app/linkintegrity/tests/test_circular.py
M plone/app/linkintegrity/tests/test_functional.py
M plone/app/linkintegrity/tests/test_handlers.py
M plone/app/linkintegrity/tests/test_imagescales.py
M plone/app/linkintegrity/tests/test_references.py
M setup.py
D plone/app/linkintegrity/compat.py
D plone/app/linkintegrity/tests/test_upgrade.py

b'diff --git a/README.rst b/README.rst\nindex 4d66a03..5e7a348 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -56,7 +56,7 @@ Customization\n \n On object created, added, modified events the ``modifiedContent`` handler\n is called. This handler adapts an ``IRetriever`` object if found.\n-The package comes with two general adapters for Dexterity and Archetypes.\n+The package comes with one general adapter for Dexterity content.\n You can easily write custom adapters implementing the ``IRetriever``\n interface for your contenttype. Look at the ``retriever`` module in this\n package for examples.\ndiff --git a/plone/app/linkintegrity/compat.py b/plone/app/linkintegrity/compat.py\ndeleted file mode 100644\nindex 4dbe0d3..0000000\n--- a/plone/app/linkintegrity/compat.py\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-# -*- coding: utf-8 -*-\n-# If Archetypes is not installed, define dummy objects\n-# to replace Archetypes imports.\n-try:\n-    from Products.Archetypes.interfaces import IBaseObject\n-    from Products.Archetypes.Field import TextField\n-except ImportError:\n-    from zope.interface import Interface\n-\n-    class IBaseObject(Interface):\n-        pass\n-\n-    class TextField(object):\n-        pass\ndiff --git a/plone/app/linkintegrity/configure.zcml b/plone/app/linkintegrity/configure.zcml\nindex c683178..ce1cd55 100644\n--- a/plone/app/linkintegrity/configure.zcml\n+++ b/plone/app/linkintegrity/configure.zcml\n@@ -2,7 +2,7 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+    >\n \n   <include package="plone.app.intid" />\n   <include package="plone.app.relationfield" />\n@@ -10,42 +10,22 @@\n \n   <include package=".browser" />\n \n-  <adapter factory=".retriever.ATGeneral" />\n   <adapter factory=".retriever.DXGeneral" />\n \n-  <configure zcml:condition="installed Products.Archetypes">\n-    <subscriber\n-        for="Products.Archetypes.interfaces.IBaseObject\n-             OFS.interfaces.IObjectClonedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="Products.Archetypes.interfaces.IBaseObject\n-             zope.lifecycleevent.interfaces.IObjectCreatedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="Products.Archetypes.interfaces.IBaseObject\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".handlers.modifiedContent" />\n-  </configure>\n-\n-  <configure zcml:condition="installed plone.dexterity">\n-    <subscriber\n-        for="plone.app.relationfield.interfaces.IDexterityHasRelations\n-             zope.lifecycleevent.interfaces.IObjectCopiedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="plone.app.relationfield.interfaces.IDexterityHasRelations\n-             zope.lifecycleevent.interfaces.IObjectAddedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="plone.app.relationfield.interfaces.IDexterityHasRelations\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".handlers.modifiedContent" />\n-  </configure>\n+  <subscriber\n+      for="plone.app.relationfield.interfaces.IDexterityHasRelations\n+            zope.lifecycleevent.interfaces.IObjectCopiedEvent"\n+      handler=".handlers.modifiedContent" />\n+\n+  <subscriber\n+      for="plone.app.relationfield.interfaces.IDexterityHasRelations\n+            zope.lifecycleevent.interfaces.IObjectAddedEvent"\n+      handler=".handlers.modifiedContent" />\n+\n+  <subscriber\n+      for="plone.app.relationfield.interfaces.IDexterityHasRelations\n+            zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".handlers.modifiedContent" />\n \n   <genericsetup:registerProfile\n       name="default"\ndiff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex ff859b2..8ff3e18 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from .compat import IBaseObject\n from Acquisition import aq_get\n from Acquisition import aq_parent\n from plone.app.linkintegrity.interfaces import IRetriever\n@@ -11,8 +9,8 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IEditingSchema\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urlsplit\n+from urllib.parse import unquote\n+from urllib.parse import urlsplit\n from z3c.relationfield import RelationValue\n from z3c.relationfield.event import _setRelation\n from zc.relation.interfaces import ICatalog\n@@ -24,7 +22,7 @@\n from zope.publisher.interfaces import NotFound as ztkNotFound\n \n import logging\n-import six\n+\n \n logger = logging.getLogger(__name__)\n \n@@ -72,7 +70,6 @@ def findObject(base, path):\n                 NotFound, ztkNotFound, UnicodeEncodeError):\n             return None, None\n         if not IDexterityContent.providedBy(child) and \\\n-                not IBaseObject.providedBy(child) and \\\n                 not IPloneSiteRoot.providedBy(child):\n             break\n         obj = child\n@@ -90,10 +87,6 @@ def getObjectsFromLinks(base, links):\n         s, h, path, q, f = urlsplit(link)\n         # relative or local url\n         if (not s and not h) or (s == scheme and h == host):\n-            # Paths should always be strings\n-            if six.PY2 and isinstance(path, six.text_type):\n-                path = path.encode(\'utf-8\')\n-\n             obj, extra = findObject(base, path)\n             if obj and not IPloneSiteRoot.providedBy(obj):\n                 objid = ensure_intid(obj, intids)\ndiff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex bf95800..55d97d6 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -1,13 +1,4 @@\n-# -*- coding: utf-8 -*-\n-from six.moves.html_parser import HTMLParser\n-\n-try:\n-    from html.parser import HTMLParseError\n-except ImportError as e:\n-    # HTMLParseError is removed in Python 3.5. Since it can never be\n-    # thrown in 3.5, we can just define our own class as a placeholder.\n-    class HTMLParseError(Exception):\n-        pass\n+from html.parser import HTMLParser\n \n \n TAG_ATTRS_TO_TRACK = {\n@@ -73,7 +64,7 @@ def extractLinks(data, encoding="utf-8"):\n         parser = LinkParser()\n         parser.feed(data.decode(encoding))\n         parser.close()\n-    except (HTMLParseError, TypeError):\n+    except TypeError:\n         pass\n \n     return parser.getLinks()\ndiff --git a/plone/app/linkintegrity/retriever.py b/plone/app/linkintegrity/retriever.py\nindex 7768e11..993a7a5 100644\n--- a/plone/app/linkintegrity/retriever.py\n+++ b/plone/app/linkintegrity/retriever.py\n@@ -1,8 +1,5 @@\n-# -*- coding: utf-8 -*-\n """Link Integrity - link retriever methods.\n """\n-from .compat import IBaseObject\n-from .compat import TextField\n from plone.app.linkintegrity.interfaces import IRetriever\n from plone.app.linkintegrity.parser import extractLinks\n from plone.app.textfield import RichText\n@@ -15,33 +12,6 @@\n from zope.schema import getFieldsInOrder\n \n \n-@implementer(IRetriever)\n-@adapter(IBaseObject)\n-class ATGeneral(object):\n-    """General retriever for AT that extracts URLs from (rich) text fields.\n-    """\n-\n-    def __init__(self, context):\n-        self.context = context\n-\n-    def retrieveLinks(self):\n-        """Finds all links from the object and return them.\n-        """\n-        links = set()\n-        for field in self.context.Schema().fields():\n-            if isinstance(field, TextField):\n-                accessor = field.getAccessor(self.context)\n-                encoding = field.getRaw(self.context, raw=1).original_encoding\n-                if accessor is not None:\n-                    value = accessor()\n-                else:\n-                    # Fields that have been added via schema extension do\n-                    # not have an accessor method.\n-                    value = field.get(self.context)\n-                links |= set(extractLinks(value, encoding))\n-        return links\n-\n-\n @implementer(IRetriever)\n @adapter(IDexterityContent)\n class DXGeneral(object):\ndiff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex 7391708..6794481 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -1,4 +1,4 @@\n-# -*- coding: utf-8 -*-\n+from base64 import decodebytes\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import layers\n from plone.app.testing import login\n@@ -13,17 +13,11 @@\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n-import six\n-\n-try:\n-    from base64 import decodebytes\n-except ImportError:\n-    # BBB for Python 2\n-    from base64 import decodestring as decodebytes\n+import io\n \n \n B64_DATA = b\'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\'\n-GIF = six.BytesIO(decodebytes(B64_DATA))\n+GIF = io.BytesIO(decodebytes(B64_DATA))\n GIF.filename = \'sample.gif\'\n GIF.contentType = \'image/gif\'\n GIF._width = 1\n@@ -34,22 +28,13 @@ def create(container, type_name, **kwargs):\n     """A easy helper method to create some content since we do not have\n     plone.api in core.\n     """\n-\n     new_id = container.invokeFactory(type_name, **kwargs)\n     content = container[new_id]\n-\n-    # Archetypes specific code was taken from ``plone.api``\n-    # Switch when api has been merged into core.\n-    if six.PY2:\n-        from Products.Archetypes.interfaces import IBaseObject\n-        if IBaseObject.providedBy(content):\n-            content.processForm()\n-\n     return content\n \n \n class LinkIntegrityLayer(z2.Layer):\n-    """Base Layer for AT and Dexterity testing.\n+    """Base Layer for Dexterity testing.\n     """\n \n     defaultBases = (PLONE_FIXTURE, )\n@@ -131,39 +116,3 @@ def setUpContent(self):\n     bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n     name=\'plone.app.linkintegrity:DX:Functional\'\n )\n-\n-if six.PY2:\n-    from plone.app.contenttypes.testing import (\n-        PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,\n-    )\n-\n-    class LinkIntegrityATLayer(LinkIntegrityLayer):\n-        """Layer which targets testing with Archetypes and ATContentTypes.\n-        """\n-\n-        directory = \'at\'\n-        defaultBases = (\n-            PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,\n-            PLONE_APP_LINKINTEGRITY_FIXTURE,\n-        )\n-\n-        def setUp(self):\n-            self.setUpContent()\n-\n-        def setUpContent(self):\n-            super(LinkIntegrityATLayer, self).setUpContent()\n-\n-            with ploneSite() as portal:\n-                create(portal, \'Image\', id=\'image1\', title=\'Image 1\', image=GIF)\n-\n-    PLONE_APP_LINKINTEGRITY_AT_FIXTURE = LinkIntegrityATLayer()\n-\n-    PLONE_APP_LINKINTEGRITY_AT_INTEGRATION_TESTING = layers.IntegrationTesting(\n-        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-        name=\'plone.app.linkintegrity:AT:Integration\'\n-    )\n-\n-    PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n-        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-        name=\'plone.app.linkintegrity:AT:Functional\'\n-    )\ndiff --git a/plone/app/linkintegrity/tests/base.py b/plone/app/linkintegrity/tests/base.py\nindex 55e05f2..f35c95a 100644\n--- a/plone/app/linkintegrity/tests/base.py\n+++ b/plone/app/linkintegrity/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.relationfield.behavior import IRelatedItems\n from plone.app.testing import setRoles\n@@ -12,7 +11,6 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import modified\n \n-import six\n import unittest\n \n \n@@ -62,26 +60,3 @@ def _set_related_items(self, obj, items):\n \n     def _get_related_items(self, obj):\n         return obj.relatedItems\n-\n-\n-if six.PY2:\n-    class ATBaseTestCase(BaseTestCase):\n-        """Base testcase for testing Archetypes content types"""\n-\n-        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n-\n-        def _set_text(self, obj, text):\n-            obj.setText(text, mimetype=\'text/html\')\n-            modified(obj)\n-\n-        def _get_text(self, obj):\n-            # This is the equivalent to obj.text in dexterity. No transforms,\n-            # no rewritten relative urls\n-            return obj.getText(raw=1).raw\n-\n-        def _set_related_items(self, obj, items):\n-            obj.setRelatedItems(items)\n-            modified(obj)\n-\n-        def _get_related_items(self, obj):\n-            return obj.getRelatedItems()\ndiff --git a/plone/app/linkintegrity/tests/test_circular.py b/plone/app/linkintegrity/tests/test_circular.py\nindex 9f869e7..d13e938 100644\n--- a/plone/app/linkintegrity/tests/test_circular.py\n+++ b/plone/app/linkintegrity/tests/test_circular.py\n@@ -1,12 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity.browser.info import DeleteConfirmationInfo\n from plone.app.linkintegrity.testing import create\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n \n-import six\n-\n \n class CircularReferencesTestCase:\n \n@@ -86,8 +83,3 @@ def test_internal_breaches_are_dropped(self):\n \n class CircularReferencesDXTestCase(DXBaseTestCase, CircularReferencesTestCase):\n     """Circular reference testcase for dx content types"""\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-    class CircularReferencesATTestCase(ATBaseTestCase, CircularReferencesTestCase):\n-        """Circular reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex 2b68e7c..88cff35 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n-# from plone.app.linkintegrity.utils import hasIncomingLinks\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasOutgoingLinks\n@@ -13,7 +11,6 @@\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n \n-import six\n import transaction\n import unittest\n \n@@ -56,9 +53,8 @@ def test_file_reference_linkintegrity_page_is_shown(self):\n                       self.browser.contents)\n \n         # Click cancel button, item should stay in place\n-        # FIXME! This fails in Archetypes because the redirect\n-        # plone.app.content.browser.actions.DeleteConfirmationForm.handle_cancel\n-        # is broken for AT-content.\n+        # FIXME! This fails in Plone 6 with an internal server error,\n+        # but maybe no longer for the original reasons for which we skip this test.\n         self.browser.getControl(name=\'form.buttons.Cancel\').click()\n         self.assertEqual(self.browser.url, file2.absolute_url() + \'/view\')\n         self.assertIn(\'Removal cancelled.\', self.browser.contents)\n@@ -385,12 +381,3 @@ class FunctionalReferenceDXTestCase(DXBaseTestCase, ReferenceTestCase):\n     """Functional reference testcase for dx content types"""\n \n     layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\n-\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class FunctionalReferenceATTestCase(ATBaseTestCase, ReferenceTestCase):\n-        """Functional reference testcase for dx content types"""\n-\n-        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex 2cd0310..6721352 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,11 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity.handlers import findObject\n from plone.app.linkintegrity.testing import create\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.testing import logout\n \n-import six\n-\n \n class FindObjectTests:\n     """ testing the handlers.findObject function """\n@@ -43,8 +40,6 @@ def test_uuid_link(self):\n         # We logout.  This is to check that findObject also finds objects\n         # that are not visible to the current user, like a private page.\n         # See https://github.com/plone/plone.app.linkintegrity/issues/79\n-        # Note that in the Archetypes tests this is no problem,\n-        # but for Dexterity it is.  Likely they use a different workflow.\n         logout()\n \n         obj, components = findObject(self.portal.doc1, path)\n@@ -54,9 +49,3 @@ def test_uuid_link(self):\n \n class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n     """findObject testcase for dx content types"""\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class ReferenceGenerationATTestCase(ATBaseTestCase, FindObjectTests):\n-        """findObject testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_imagescales.py b/plone/app/linkintegrity/tests/test_imagescales.py\nindex b934934..0d54375 100644\n--- a/plone/app/linkintegrity/tests/test_imagescales.py\n+++ b/plone/app/linkintegrity/tests/test_imagescales.py\n@@ -1,11 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.uuid.interfaces import IUUID\n \n-import six\n-\n \n class ImageReferenceTestCase:\n \n@@ -65,9 +62,3 @@ def test_image_resolveuid_reference_creation(self):\n \n class ImageReferenceDXTestCase(DXBaseTestCase, ImageReferenceTestCase):\n     """Image reference testcase for dx content types"""\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class ImageReferenceATTestCase(ATBaseTestCase, ImageReferenceTestCase):\n-        """Image reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex ba52035..31598b1 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.linkintegrity.parser import extractLinks\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n@@ -16,8 +15,6 @@\n from zope.intid.interfaces import IIntIds\n from zope.lifecycleevent import modified\n \n-import six\n-\n \n class ReferenceGenerationTestCase:\n \n@@ -212,13 +209,3 @@ class ReferenceGenerationDXTestCase(\n     ReferenceGenerationTestCase,\n ):\n     """Reference generation testcase for dx content types"""\n-\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class ReferenceGenerationATTestCase(\n-        ATBaseTestCase,\n-        ReferenceGenerationTestCase,\n-    ):\n-        """Reference generation testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_upgrade.py b/plone/app/linkintegrity/tests/test_upgrade.py\ndeleted file mode 100644\nindex c363339..0000000\n--- a/plone/app/linkintegrity/tests/test_upgrade.py\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations\n-from plone.app.linkintegrity.utils import hasIncomingLinks\n-from plone.app.linkintegrity.utils import referencedRelationship\n-try:\n-    from Products.Archetypes.interfaces import IReferenceable\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-    HAS_AT = True\n-except ImportError:\n-    HAS_AT = False\n-import unittest\n-\n-\n-if HAS_AT:\n-    class ReferenceMigrationATTestCase(ATBaseTestCase):\n-        """Reference migration testcase for at content types"""\n-\n-        @unittest.skipUnless(\n-            HAS_AT, \'Archetypes are not installed. Skipping migration tests\')\n-        def test_upgrade(self):\n-            doc3 = self.portal[\'doc3\']\n-            doc1 = self.portal[\'doc1\']\n-            self.assertTrue(IReferenceable.providedBy(doc3))\n-            doc3.setText(\'<a href="doc1">doc1</a>\', mimetype=\'text/html\')\n-            doc3.addReference(doc1, relationship=referencedRelationship)\n-            self.assertFalse(hasIncomingLinks(doc1))\n-            self.assertFalse(hasIncomingLinks(doc3))\n-            migrate_linkintegrity_relations(self.portal)\n-            self.assertTrue(hasIncomingLinks(doc1))\n-            self.assertFalse(hasIncomingLinks(doc3))\n-\n-else:\n-\n-    class TestDummy(unittest.TestCase):\n-\n-        def test_dummy(self):\n-            pass\ndiff --git a/setup.py b/setup.py\nindex 16b0020..86883d0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,9 +42,9 @@\n     python_requires=\'>=3.8\',\n     install_requires=[\n         \'setuptools\',\n-        \'six\',\n         \'plone.app.intid\',\n         \'plone.app.relationfield\',\n+        \'plone.dexterity\',\n     ],\n     extras_require={\n         \'test\': [\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T22:47:32+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/b20f50a0279165355ecfdba31fce5e411d3aa206

Removed migrate_linkintegrity_relations.

This was ancient, unused code to migrate linkintegrity-relation from reference_catalog to zc.relation.

Files changed:
D plone/app/linkintegrity/upgrades.py

b'diff --git a/plone/app/linkintegrity/upgrades.py b/plone/app/linkintegrity/upgrades.py\ndeleted file mode 100644\nindex a803180..0000000\n--- a/plone/app/linkintegrity/upgrades.py\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.utils import ensure_intid\n-from plone.app.linkintegrity.utils import referencedRelationship\n-from plone.app.uuid.utils import uuidToObject\n-try:\n-    from Products.Archetypes.config import REFERENCE_CATALOG\n-except ImportError:\n-    REFERENCE_CATALOG = "reference_catalog"\n-from Products.CMFCore.utils import getToolByName\n-from z3c.relationfield import RelationValue\n-from z3c.relationfield.event import _setRelation\n-from zope.component import getUtility\n-from zope.intid.interfaces import IIntIds\n-\n-import logging\n-log = logging.getLogger(__name__)\n-\n-\n-def migrate_linkintegrity_relations(context):\n-    """Migrate linkintegrity-relation from reference_catalog to zc.relation.\n-    """\n-    reference_catalog = getToolByName(context, REFERENCE_CATALOG, None)\n-    intids = getUtility(IIntIds)\n-    if reference_catalog is not None:\n-        # Only handle linkintegrity-relations (\'isReferencing\').\n-        # [:] copies the full result list to make sure\n-        # it won\'t change while we delete references below\n-        for brain in reference_catalog(relationship=referencedRelationship)[:]:\n-            try:\n-                source_obj = uuidToObject(brain.sourceUID)\n-                target_obj = uuidToObject(brain.targetUID)\n-            except AttributeError:\n-                source_obj = target_obj = None\n-            if source_obj is None or target_obj is None:\n-                # reference_catalog may be inconsistent\n-                log.info(\'Cannot delete relation since the relation_catalog is inconsistent.\')   # noqa: E501\n-                continue\n-            # Delete old reference\n-            reference_catalog.deleteReference(\n-                source_obj, target_obj, relationship=referencedRelationship)\n-\n-            # Trigger the recreation of linkintegrity-relation in\n-            # the relation_catalog (zc.relation)\n-            target_id = ensure_intid(target_obj, intids)\n-            if target_id is None:\n-                continue\n-            rel = RelationValue(target_id)\n-            _setRelation(source_obj, referencedRelationship, rel)\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T22:47:33+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/515740bbafd399d4a19d63fb0873771389228768

Use plone.testing.zope instead of deprecated z2.

Files changed:
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/tests/base.py
M plone/app/linkintegrity/tests/test_functional.py

b'diff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex 6794481..f3f4e9e 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -9,7 +9,7 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.namedfile.file import NamedImage\n-from plone.testing import z2\n+from plone.testing import zope\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n@@ -33,7 +33,7 @@ def create(container, type_name, **kwargs):\n     return content\n \n \n-class LinkIntegrityLayer(z2.Layer):\n+class LinkIntegrityLayer(zope.Layer):\n     """Base Layer for Dexterity testing.\n     """\n \n@@ -50,8 +50,8 @@ def setUpContent(self):\n         xmlconfig.file(\'configure.zcml\', plone.app.linkintegrity,\n                        context=self[\'configurationContext\'])\n \n-        with z2.zopeApp() as app:\n-            z2.installProduct(app, \'plone.app.linkintegrity\')\n+        with zope.zopeApp() as app:\n+            zope.installProduct(app, \'plone.app.linkintegrity\')\n \n         with ploneSite() as portal:\n             setRoles(portal, TEST_USER_ID, [\'Manager\', ])\n@@ -72,8 +72,8 @@ def setUpContent(self):\n             self.setUpMembers(portal)\n \n     def tearDown(self):\n-        with z2.zopeApp() as app:\n-            z2.uninstallProduct(app, \'plone.app.linkintegrity\')\n+        with zope.zopeApp() as app:\n+            zope.uninstallProduct(app, \'plone.app.linkintegrity\')\n \n \n PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()\ndiff --git a/plone/app/linkintegrity/tests/base.py b/plone/app/linkintegrity/tests/base.py\nindex f35c95a..527583d 100644\n--- a/plone/app/linkintegrity/tests/base.py\n+++ b/plone/app/linkintegrity/tests/base.py\n@@ -5,7 +5,7 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.textfield import RichTextValue\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from z3c.form.interfaces import IFormLayer\n from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex 88cff35..780f1a6 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -6,7 +6,7 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.interfaces import IEditingSchema\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T22:47:33+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/88dc39de9fa47a79a2ab31b81821f664d5466b1d

Merge DXBaseTestCase into BaseTestCase and merge layers into one.

Files changed:
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/tests/base.py
M plone/app/linkintegrity/tests/test_circular.py
M plone/app/linkintegrity/tests/test_functional.py
M plone/app/linkintegrity/tests/test_handlers.py
M plone/app/linkintegrity/tests/test_imagescales.py
M plone/app/linkintegrity/tests/test_references.py

b'diff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex f3f4e9e..d4e3a50 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -2,7 +2,6 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import layers\n from plone.app.testing import login\n-from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import ploneSite\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -37,7 +36,13 @@ class LinkIntegrityLayer(zope.Layer):\n     """Base Layer for Dexterity testing.\n     """\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    # defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (\n+        PLONE_APP_CONTENTTYPES_FIXTURE,\n+    )\n+\n+    def setUp(self):\n+        self.setUpContent()\n \n     def setUpMembers(self, portal):\n         pm = getToolByName(portal, \'portal_membership\')\n@@ -47,6 +52,7 @@ def setUpMembers(self, portal):\n \n     def setUpContent(self):\n         import plone.app.linkintegrity\n+\n         xmlconfig.file(\'configure.zcml\', plone.app.linkintegrity,\n                        context=self[\'configurationContext\'])\n \n@@ -71,31 +77,6 @@ def setUpContent(self):\n \n             self.setUpMembers(portal)\n \n-    def tearDown(self):\n-        with zope.zopeApp() as app:\n-            zope.uninstallProduct(app, \'plone.app.linkintegrity\')\n-\n-\n-PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()\n-\n-\n-class LinkIntegrityDXLayer(LinkIntegrityLayer):\n-    """Layer which targets testing with Dexterity.\n-    """\n-\n-    directory = \'dx\'\n-    defaultBases = (\n-        PLONE_APP_CONTENTTYPES_FIXTURE,\n-        PLONE_APP_LINKINTEGRITY_FIXTURE,\n-    )\n-\n-    def setUp(self):\n-        self.setUpContent()\n-\n-    def setUpContent(self):\n-        super(LinkIntegrityDXLayer, self).setUpContent()\n-\n-        with ploneSite() as portal:\n             # Create an object that does not provide the behavior to live along\n             create(portal, \'News Item\', id=\'news1\', title=\'News 1\')\n \n@@ -104,15 +85,19 @@ def setUpContent(self):\n             portal[\'image1\'].image = NamedImage(GIF, \'image/gif\',\n                                                 u\'sample.gif\')\n \n+    def tearDown(self):\n+        with zope.zopeApp() as app:\n+            zope.uninstallProduct(app, \'plone.app.linkintegrity\')\n+\n \n-PLONE_APP_LINKINTEGRITY_DX_FIXTURE = LinkIntegrityDXLayer()\n+PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()\n \n-PLONE_APP_LINKINTEGRITY_DX_INTEGRATION_TESTING = layers.IntegrationTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:DX:Integration\'\n+PLONE_APP_LINKINTEGRITY_INTEGRATION_TESTING = layers.IntegrationTesting(\n+    bases=(PLONE_APP_LINKINTEGRITY_FIXTURE, ),\n+    name=\'plone.app.linkintegrity:Integration\'\n )\n \n-PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:DX:Functional\'\n+PLONE_APP_LINKINTEGRITY_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n+    bases=(PLONE_APP_LINKINTEGRITY_FIXTURE, ),\n+    name=\'plone.app.linkintegrity:Functional\'\n )\ndiff --git a/plone/app/linkintegrity/tests/base.py b/plone/app/linkintegrity/tests/base.py\nindex 527583d..621d9a3 100644\n--- a/plone/app/linkintegrity/tests/base.py\n+++ b/plone/app/linkintegrity/tests/base.py\n@@ -15,6 +15,9 @@\n \n \n class BaseTestCase(unittest.TestCase):\n+    """Base testcase for testing Dexterity content types"""\n+\n+    layer = testing.PLONE_APP_LINKINTEGRITY_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n@@ -40,12 +43,6 @@ def _get_token(self, obj):\n         return getMultiAdapter(\n             (obj, self.request), name=\'authenticator\').token()\n \n-\n-class DXBaseTestCase(BaseTestCase):\n-    """Base testcase for testing Dexterity content types"""\n-\n-    layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\n-\n     def _set_text(self, obj, text):\n         obj.text = RichTextValue(text)\n         modified(obj)\ndiff --git a/plone/app/linkintegrity/tests/test_circular.py b/plone/app/linkintegrity/tests/test_circular.py\nindex d13e938..89d5a7f 100644\n--- a/plone/app/linkintegrity/tests/test_circular.py\n+++ b/plone/app/linkintegrity/tests/test_circular.py\n@@ -1,6 +1,6 @@\n from plone.app.linkintegrity.browser.info import DeleteConfirmationInfo\n from plone.app.linkintegrity.testing import create\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n \n@@ -81,5 +81,5 @@ def test_internal_breaches_are_dropped(self):\n         self.assertNotIn(\'Potential link breakage\', view())\n \n \n-class CircularReferencesDXTestCase(DXBaseTestCase, CircularReferencesTestCase):\n+class CircularReferencesDXTestCase(BaseTestCase, CircularReferencesTestCase):\n     """Circular reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex 780f1a6..e7aa20b 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -1,5 +1,5 @@\n from plone.app.linkintegrity import testing\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasOutgoingLinks\n@@ -15,7 +15,10 @@\n import unittest\n \n \n-class ReferenceTestCase:\n+class FunctionalReferenceTestCase(BaseTestCase):\n+    """functional reference testcase"""\n+\n+    layer = testing.PLONE_APP_LINKINTEGRITY_FUNCTIONAL_TESTING\n \n     @unittest.skip(\'Re-enable after https://github.com/plone/plone.app.content/issues/38\')  # noqa\n     def test_file_reference_linkintegrity_page_is_shown(self):\n@@ -375,9 +378,3 @@ def test_warn_about_content(self):\n         self.assertIn(\'2 Objects in all\', self.browser.contents)\n         self.assertIn(\'1 Folders\', self.browser.contents)\n         self.assertIn(\'0 Published objects\', self.browser.contents)\n-\n-\n-class FunctionalReferenceDXTestCase(DXBaseTestCase, ReferenceTestCase):\n-    """Functional reference testcase for dx content types"""\n-\n-    layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex 6721352..4de0cff 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,10 +1,10 @@\n from plone.app.linkintegrity.handlers import findObject\n from plone.app.linkintegrity.testing import create\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.testing import logout\n \n \n-class FindObjectTests:\n+class ReferenceGenerationTestCase(BaseTestCase):\n     """ testing the handlers.findObject function """\n \n     def test_relative_to_portal_root_1(self):\n@@ -45,7 +45,3 @@ def test_uuid_link(self):\n         obj, components = findObject(self.portal.doc1, path)\n         self.assertEqual(obj.absolute_url_path(), \'/plone/target\')\n         self.assertEqual(components, path)\n-\n-\n-class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n-    """findObject testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_imagescales.py b/plone/app/linkintegrity/tests/test_imagescales.py\nindex 0d54375..e31f40f 100644\n--- a/plone/app/linkintegrity/tests/test_imagescales.py\n+++ b/plone/app/linkintegrity/tests/test_imagescales.py\n@@ -1,10 +1,11 @@\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.uuid.interfaces import IUUID\n \n \n-class ImageReferenceTestCase:\n+class ImageReferenceTestCase(BaseTestCase):\n+    """image reference testcase"""\n \n     def test_image_tag_reference_creation(self):\n         doc1 = self.portal.doc1\n@@ -58,7 +59,3 @@ def test_image_resolveuid_reference_creation(self):\n             [r.from_object for r in getIncomingLinks(img1)],\n             [doc1, ],\n         )\n-\n-\n-class ImageReferenceDXTestCase(DXBaseTestCase, ImageReferenceTestCase):\n-    """Image reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex 31598b1..e327338 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -1,6 +1,6 @@\n from plone.app.linkintegrity import testing\n from plone.app.linkintegrity.parser import extractLinks\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n@@ -16,7 +16,8 @@\n from zope.lifecycleevent import modified\n \n \n-class ReferenceGenerationTestCase:\n+class ReferenceGenerationTestCase(BaseTestCase):\n+    """reference generation testcase"""\n \n     def test_is_linked(self):\n         img1 = self.portal[\'image1\']\n@@ -202,10 +203,3 @@ def test_delete_confirmation_for_any_reference(self):\n         breaches = info.get_breaches()\n         self.assertEqual(len(breaches), 1)\n         self.assertEqual(len(info.get_breaches()[0][\'sources\']), 1)\n-\n-\n-class ReferenceGenerationDXTestCase(\n-    DXBaseTestCase,\n-    ReferenceGenerationTestCase,\n-):\n-    """Reference generation testcase for dx content types"""\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T22:47:33+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/ed2fef6bdb6fd236d75ccb21b5c9b2fc1073963a

Testing: plone.app.linkintegrity is no real 'product'.

So don't try to install it as one.

Files changed:
M plone/app/linkintegrity/testing.py

b"diff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex d4e3a50..90b031f 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -56,9 +56,6 @@ def setUpContent(self):\n         xmlconfig.file('configure.zcml', plone.app.linkintegrity,\n                        context=self['configurationContext'])\n \n-        with zope.zopeApp() as app:\n-            zope.installProduct(app, 'plone.app.linkintegrity')\n-\n         with ploneSite() as portal:\n             setRoles(portal, TEST_USER_ID, ['Manager', ])\n             login(portal, TEST_USER_NAME)\n"

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-02-28T22:47:33+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/bd6bc7315d89ea26c988d6002f833e14c6746069

Use plone.base instead of Products.CMFPlone.

Files changed:
M plone/app/linkintegrity/browser/configure.zcml
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/browser/update.py
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/tests/test_functional.py
M plone/app/linkintegrity/utils.py
M setup.py

b'diff --git a/plone/app/linkintegrity/browser/configure.zcml b/plone/app/linkintegrity/browser/configure.zcml\nindex 77c5b30..ffff903 100644\n--- a/plone/app/linkintegrity/browser/configure.zcml\n+++ b/plone/app/linkintegrity/browser/configure.zcml\n@@ -11,7 +11,7 @@\n \n   <browser:page\n         name="updateLinkIntegrityInformation"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         template="update.pt"\n         class=".update.UpdateView"\n         permission="cmf.ManagePortal"\ndiff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py\nindex 2921efa..e93f95c 100644\n--- a/plone/app/linkintegrity/browser/info.py\n+++ b/plone/app/linkintegrity/browser/info.py\n@@ -7,8 +7,8 @@\n from Products.CMFCore.permissions import AccessContentsInformation\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import IPloneSiteRoot\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.i18n import translate\ndiff --git a/plone/app/linkintegrity/browser/update.py b/plone/app/linkintegrity/browser/update.py\nindex 1141f61..a31b1ef 100644\n--- a/plone/app/linkintegrity/browser/update.py\n+++ b/plone/app/linkintegrity/browser/update.py\n@@ -4,7 +4,7 @@\n from datetime import timedelta\n from plone.app.linkintegrity.handlers import modifiedContent\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n+from plone.base import PloneMessageFactory as _\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from transaction import savepoint\ndiff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex 8ff3e18..5bcaaed 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -7,8 +7,8 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IEditingSchema\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from plone.base.interfaces import IEditingSchema\n+from plone.base.interfaces import IPloneSiteRoot\n from urllib.parse import unquote\n from urllib.parse import urlsplit\n from z3c.relationfield import RelationValue\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex e7aa20b..357906c 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -7,7 +7,7 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.registry.interfaces import IRegistry\n from plone.testing.zope import Browser\n-from Products.CMFPlone.interfaces import IEditingSchema\n+from plone.base.interfaces import IEditingSchema\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n \ndiff --git a/plone/app/linkintegrity/utils.py b/plone/app/linkintegrity/utils.py\nindex 226efac..629350b 100644\n--- a/plone/app/linkintegrity/utils.py\n+++ b/plone/app/linkintegrity/utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import IEditingSchema\n+from plone.base.interfaces import IEditingSchema\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\ndiff --git a/setup.py b/setup.py\nindex 86883d0..d3ff232 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,6 +44,7 @@\n         \'setuptools\',\n         \'plone.app.intid\',\n         \'plone.app.relationfield\',\n+        \'plone.base\',\n         \'plone.dexterity\',\n     ],\n     extras_require={\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2023-03-07T09:42:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/b81490a1320164ea8560f73507a51eda12836a8b

Merge pull request #87 from plone/maurits-plone6-only

Drop compatibility for Plone 5.2, Archetypes, Python 2.

Files changed:
A news/60.breaking
M README.rst
M plone/app/linkintegrity/browser/configure.zcml
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/browser/update.py
M plone/app/linkintegrity/configure.zcml
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/parser.py
M plone/app/linkintegrity/retriever.py
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/tests/base.py
M plone/app/linkintegrity/tests/test_circular.py
M plone/app/linkintegrity/tests/test_functional.py
M plone/app/linkintegrity/tests/test_handlers.py
M plone/app/linkintegrity/tests/test_imagescales.py
M plone/app/linkintegrity/tests/test_references.py
M plone/app/linkintegrity/utils.py
M setup.py
D plone/app/linkintegrity/compat.py
D plone/app/linkintegrity/tests/test_upgrade.py
D plone/app/linkintegrity/upgrades.py

b'diff --git a/README.rst b/README.rst\nindex 4d66a03..5e7a348 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -56,7 +56,7 @@ Customization\n \n On object created, added, modified events the ``modifiedContent`` handler\n is called. This handler adapts an ``IRetriever`` object if found.\n-The package comes with two general adapters for Dexterity and Archetypes.\n+The package comes with one general adapter for Dexterity content.\n You can easily write custom adapters implementing the ``IRetriever``\n interface for your contenttype. Look at the ``retriever`` module in this\n package for examples.\ndiff --git a/news/60.breaking b/news/60.breaking\nnew file mode 100644\nindex 0000000..ef22518\n--- /dev/null\n+++ b/news/60.breaking\n@@ -0,0 +1,2 @@\n+Drop compatibility for Plone 5.2.  Support Plone 6 only.\n+[maurits]\ndiff --git a/plone/app/linkintegrity/browser/configure.zcml b/plone/app/linkintegrity/browser/configure.zcml\nindex 77c5b30..ffff903 100644\n--- a/plone/app/linkintegrity/browser/configure.zcml\n+++ b/plone/app/linkintegrity/browser/configure.zcml\n@@ -11,7 +11,7 @@\n \n   <browser:page\n         name="updateLinkIntegrityInformation"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         template="update.pt"\n         class=".update.UpdateView"\n         permission="cmf.ManagePortal"\ndiff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py\nindex 2921efa..e93f95c 100644\n--- a/plone/app/linkintegrity/browser/info.py\n+++ b/plone/app/linkintegrity/browser/info.py\n@@ -7,8 +7,8 @@\n from Products.CMFCore.permissions import AccessContentsInformation\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import IPloneSiteRoot\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.i18n import translate\ndiff --git a/plone/app/linkintegrity/browser/update.py b/plone/app/linkintegrity/browser/update.py\nindex 1141f61..a31b1ef 100644\n--- a/plone/app/linkintegrity/browser/update.py\n+++ b/plone/app/linkintegrity/browser/update.py\n@@ -4,7 +4,7 @@\n from datetime import timedelta\n from plone.app.linkintegrity.handlers import modifiedContent\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n+from plone.base import PloneMessageFactory as _\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from transaction import savepoint\ndiff --git a/plone/app/linkintegrity/compat.py b/plone/app/linkintegrity/compat.py\ndeleted file mode 100644\nindex 4dbe0d3..0000000\n--- a/plone/app/linkintegrity/compat.py\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-# -*- coding: utf-8 -*-\n-# If Archetypes is not installed, define dummy objects\n-# to replace Archetypes imports.\n-try:\n-    from Products.Archetypes.interfaces import IBaseObject\n-    from Products.Archetypes.Field import TextField\n-except ImportError:\n-    from zope.interface import Interface\n-\n-    class IBaseObject(Interface):\n-        pass\n-\n-    class TextField(object):\n-        pass\ndiff --git a/plone/app/linkintegrity/configure.zcml b/plone/app/linkintegrity/configure.zcml\nindex c683178..ce1cd55 100644\n--- a/plone/app/linkintegrity/configure.zcml\n+++ b/plone/app/linkintegrity/configure.zcml\n@@ -2,7 +2,7 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+    >\n \n   <include package="plone.app.intid" />\n   <include package="plone.app.relationfield" />\n@@ -10,42 +10,22 @@\n \n   <include package=".browser" />\n \n-  <adapter factory=".retriever.ATGeneral" />\n   <adapter factory=".retriever.DXGeneral" />\n \n-  <configure zcml:condition="installed Products.Archetypes">\n-    <subscriber\n-        for="Products.Archetypes.interfaces.IBaseObject\n-             OFS.interfaces.IObjectClonedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="Products.Archetypes.interfaces.IBaseObject\n-             zope.lifecycleevent.interfaces.IObjectCreatedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="Products.Archetypes.interfaces.IBaseObject\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".handlers.modifiedContent" />\n-  </configure>\n-\n-  <configure zcml:condition="installed plone.dexterity">\n-    <subscriber\n-        for="plone.app.relationfield.interfaces.IDexterityHasRelations\n-             zope.lifecycleevent.interfaces.IObjectCopiedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="plone.app.relationfield.interfaces.IDexterityHasRelations\n-             zope.lifecycleevent.interfaces.IObjectAddedEvent"\n-        handler=".handlers.modifiedContent" />\n-\n-    <subscriber\n-        for="plone.app.relationfield.interfaces.IDexterityHasRelations\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".handlers.modifiedContent" />\n-  </configure>\n+  <subscriber\n+      for="plone.app.relationfield.interfaces.IDexterityHasRelations\n+            zope.lifecycleevent.interfaces.IObjectCopiedEvent"\n+      handler=".handlers.modifiedContent" />\n+\n+  <subscriber\n+      for="plone.app.relationfield.interfaces.IDexterityHasRelations\n+            zope.lifecycleevent.interfaces.IObjectAddedEvent"\n+      handler=".handlers.modifiedContent" />\n+\n+  <subscriber\n+      for="plone.app.relationfield.interfaces.IDexterityHasRelations\n+            zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".handlers.modifiedContent" />\n \n   <genericsetup:registerProfile\n       name="default"\ndiff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex ff859b2..5bcaaed 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from .compat import IBaseObject\n from Acquisition import aq_get\n from Acquisition import aq_parent\n from plone.app.linkintegrity.interfaces import IRetriever\n@@ -9,10 +7,10 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IEditingSchema\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urlsplit\n+from plone.base.interfaces import IEditingSchema\n+from plone.base.interfaces import IPloneSiteRoot\n+from urllib.parse import unquote\n+from urllib.parse import urlsplit\n from z3c.relationfield import RelationValue\n from z3c.relationfield.event import _setRelation\n from zc.relation.interfaces import ICatalog\n@@ -24,7 +22,7 @@\n from zope.publisher.interfaces import NotFound as ztkNotFound\n \n import logging\n-import six\n+\n \n logger = logging.getLogger(__name__)\n \n@@ -72,7 +70,6 @@ def findObject(base, path):\n                 NotFound, ztkNotFound, UnicodeEncodeError):\n             return None, None\n         if not IDexterityContent.providedBy(child) and \\\n-                not IBaseObject.providedBy(child) and \\\n                 not IPloneSiteRoot.providedBy(child):\n             break\n         obj = child\n@@ -90,10 +87,6 @@ def getObjectsFromLinks(base, links):\n         s, h, path, q, f = urlsplit(link)\n         # relative or local url\n         if (not s and not h) or (s == scheme and h == host):\n-            # Paths should always be strings\n-            if six.PY2 and isinstance(path, six.text_type):\n-                path = path.encode(\'utf-8\')\n-\n             obj, extra = findObject(base, path)\n             if obj and not IPloneSiteRoot.providedBy(obj):\n                 objid = ensure_intid(obj, intids)\ndiff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex bf95800..55d97d6 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -1,13 +1,4 @@\n-# -*- coding: utf-8 -*-\n-from six.moves.html_parser import HTMLParser\n-\n-try:\n-    from html.parser import HTMLParseError\n-except ImportError as e:\n-    # HTMLParseError is removed in Python 3.5. Since it can never be\n-    # thrown in 3.5, we can just define our own class as a placeholder.\n-    class HTMLParseError(Exception):\n-        pass\n+from html.parser import HTMLParser\n \n \n TAG_ATTRS_TO_TRACK = {\n@@ -73,7 +64,7 @@ def extractLinks(data, encoding="utf-8"):\n         parser = LinkParser()\n         parser.feed(data.decode(encoding))\n         parser.close()\n-    except (HTMLParseError, TypeError):\n+    except TypeError:\n         pass\n \n     return parser.getLinks()\ndiff --git a/plone/app/linkintegrity/retriever.py b/plone/app/linkintegrity/retriever.py\nindex 7768e11..993a7a5 100644\n--- a/plone/app/linkintegrity/retriever.py\n+++ b/plone/app/linkintegrity/retriever.py\n@@ -1,8 +1,5 @@\n-# -*- coding: utf-8 -*-\n """Link Integrity - link retriever methods.\n """\n-from .compat import IBaseObject\n-from .compat import TextField\n from plone.app.linkintegrity.interfaces import IRetriever\n from plone.app.linkintegrity.parser import extractLinks\n from plone.app.textfield import RichText\n@@ -15,33 +12,6 @@\n from zope.schema import getFieldsInOrder\n \n \n-@implementer(IRetriever)\n-@adapter(IBaseObject)\n-class ATGeneral(object):\n-    """General retriever for AT that extracts URLs from (rich) text fields.\n-    """\n-\n-    def __init__(self, context):\n-        self.context = context\n-\n-    def retrieveLinks(self):\n-        """Finds all links from the object and return them.\n-        """\n-        links = set()\n-        for field in self.context.Schema().fields():\n-            if isinstance(field, TextField):\n-                accessor = field.getAccessor(self.context)\n-                encoding = field.getRaw(self.context, raw=1).original_encoding\n-                if accessor is not None:\n-                    value = accessor()\n-                else:\n-                    # Fields that have been added via schema extension do\n-                    # not have an accessor method.\n-                    value = field.get(self.context)\n-                links |= set(extractLinks(value, encoding))\n-        return links\n-\n-\n @implementer(IRetriever)\n @adapter(IDexterityContent)\n class DXGeneral(object):\ndiff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex 7391708..90b031f 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -1,29 +1,22 @@\n-# -*- coding: utf-8 -*-\n+from base64 import decodebytes\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import layers\n from plone.app.testing import login\n-from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import ploneSite\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.namedfile.file import NamedImage\n-from plone.testing import z2\n+from plone.testing import zope\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n-import six\n-\n-try:\n-    from base64 import decodebytes\n-except ImportError:\n-    # BBB for Python 2\n-    from base64 import decodestring as decodebytes\n+import io\n \n \n B64_DATA = b\'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\'\n-GIF = six.BytesIO(decodebytes(B64_DATA))\n+GIF = io.BytesIO(decodebytes(B64_DATA))\n GIF.filename = \'sample.gif\'\n GIF.contentType = \'image/gif\'\n GIF._width = 1\n@@ -34,25 +27,22 @@ def create(container, type_name, **kwargs):\n     """A easy helper method to create some content since we do not have\n     plone.api in core.\n     """\n-\n     new_id = container.invokeFactory(type_name, **kwargs)\n     content = container[new_id]\n-\n-    # Archetypes specific code was taken from ``plone.api``\n-    # Switch when api has been merged into core.\n-    if six.PY2:\n-        from Products.Archetypes.interfaces import IBaseObject\n-        if IBaseObject.providedBy(content):\n-            content.processForm()\n-\n     return content\n \n \n-class LinkIntegrityLayer(z2.Layer):\n-    """Base Layer for AT and Dexterity testing.\n+class LinkIntegrityLayer(zope.Layer):\n+    """Base Layer for Dexterity testing.\n     """\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    # defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (\n+        PLONE_APP_CONTENTTYPES_FIXTURE,\n+    )\n+\n+    def setUp(self):\n+        self.setUpContent()\n \n     def setUpMembers(self, portal):\n         pm = getToolByName(portal, \'portal_membership\')\n@@ -62,12 +52,10 @@ def setUpMembers(self, portal):\n \n     def setUpContent(self):\n         import plone.app.linkintegrity\n+\n         xmlconfig.file(\'configure.zcml\', plone.app.linkintegrity,\n                        context=self[\'configurationContext\'])\n \n-        with z2.zopeApp() as app:\n-            z2.installProduct(app, \'plone.app.linkintegrity\')\n-\n         with ploneSite() as portal:\n             setRoles(portal, TEST_USER_ID, [\'Manager\', ])\n             login(portal, TEST_USER_NAME)\n@@ -86,31 +74,6 @@ def setUpContent(self):\n \n             self.setUpMembers(portal)\n \n-    def tearDown(self):\n-        with z2.zopeApp() as app:\n-            z2.uninstallProduct(app, \'plone.app.linkintegrity\')\n-\n-\n-PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()\n-\n-\n-class LinkIntegrityDXLayer(LinkIntegrityLayer):\n-    """Layer which targets testing with Dexterity.\n-    """\n-\n-    directory = \'dx\'\n-    defaultBases = (\n-        PLONE_APP_CONTENTTYPES_FIXTURE,\n-        PLONE_APP_LINKINTEGRITY_FIXTURE,\n-    )\n-\n-    def setUp(self):\n-        self.setUpContent()\n-\n-    def setUpContent(self):\n-        super(LinkIntegrityDXLayer, self).setUpContent()\n-\n-        with ploneSite() as portal:\n             # Create an object that does not provide the behavior to live along\n             create(portal, \'News Item\', id=\'news1\', title=\'News 1\')\n \n@@ -119,51 +82,19 @@ def setUpContent(self):\n             portal[\'image1\'].image = NamedImage(GIF, \'image/gif\',\n                                                 u\'sample.gif\')\n \n+    def tearDown(self):\n+        with zope.zopeApp() as app:\n+            zope.uninstallProduct(app, \'plone.app.linkintegrity\')\n \n-PLONE_APP_LINKINTEGRITY_DX_FIXTURE = LinkIntegrityDXLayer()\n \n-PLONE_APP_LINKINTEGRITY_DX_INTEGRATION_TESTING = layers.IntegrationTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:DX:Integration\'\n-)\n+PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()\n \n-PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:DX:Functional\'\n+PLONE_APP_LINKINTEGRITY_INTEGRATION_TESTING = layers.IntegrationTesting(\n+    bases=(PLONE_APP_LINKINTEGRITY_FIXTURE, ),\n+    name=\'plone.app.linkintegrity:Integration\'\n )\n \n-if six.PY2:\n-    from plone.app.contenttypes.testing import (\n-        PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,\n-    )\n-\n-    class LinkIntegrityATLayer(LinkIntegrityLayer):\n-        """Layer which targets testing with Archetypes and ATContentTypes.\n-        """\n-\n-        directory = \'at\'\n-        defaultBases = (\n-            PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE,\n-            PLONE_APP_LINKINTEGRITY_FIXTURE,\n-        )\n-\n-        def setUp(self):\n-            self.setUpContent()\n-\n-        def setUpContent(self):\n-            super(LinkIntegrityATLayer, self).setUpContent()\n-\n-            with ploneSite() as portal:\n-                create(portal, \'Image\', id=\'image1\', title=\'Image 1\', image=GIF)\n-\n-    PLONE_APP_LINKINTEGRITY_AT_FIXTURE = LinkIntegrityATLayer()\n-\n-    PLONE_APP_LINKINTEGRITY_AT_INTEGRATION_TESTING = layers.IntegrationTesting(\n-        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-        name=\'plone.app.linkintegrity:AT:Integration\'\n-    )\n-\n-    PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n-        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-        name=\'plone.app.linkintegrity:AT:Functional\'\n-    )\n+PLONE_APP_LINKINTEGRITY_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n+    bases=(PLONE_APP_LINKINTEGRITY_FIXTURE, ),\n+    name=\'plone.app.linkintegrity:Functional\'\n+)\ndiff --git a/plone/app/linkintegrity/tests/base.py b/plone/app/linkintegrity/tests/base.py\nindex 55e05f2..621d9a3 100644\n--- a/plone/app/linkintegrity/tests/base.py\n+++ b/plone/app/linkintegrity/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.relationfield.behavior import IRelatedItems\n from plone.app.testing import setRoles\n@@ -6,17 +5,19 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.textfield import RichTextValue\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from z3c.form.interfaces import IFormLayer\n from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\n from zope.lifecycleevent import modified\n \n-import six\n import unittest\n \n \n class BaseTestCase(unittest.TestCase):\n+    """Base testcase for testing Dexterity content types"""\n+\n+    layer = testing.PLONE_APP_LINKINTEGRITY_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n@@ -42,12 +43,6 @@ def _get_token(self, obj):\n         return getMultiAdapter(\n             (obj, self.request), name=\'authenticator\').token()\n \n-\n-class DXBaseTestCase(BaseTestCase):\n-    """Base testcase for testing Dexterity content types"""\n-\n-    layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\n-\n     def _set_text(self, obj, text):\n         obj.text = RichTextValue(text)\n         modified(obj)\n@@ -62,26 +57,3 @@ def _set_related_items(self, obj, items):\n \n     def _get_related_items(self, obj):\n         return obj.relatedItems\n-\n-\n-if six.PY2:\n-    class ATBaseTestCase(BaseTestCase):\n-        """Base testcase for testing Archetypes content types"""\n-\n-        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n-\n-        def _set_text(self, obj, text):\n-            obj.setText(text, mimetype=\'text/html\')\n-            modified(obj)\n-\n-        def _get_text(self, obj):\n-            # This is the equivalent to obj.text in dexterity. No transforms,\n-            # no rewritten relative urls\n-            return obj.getText(raw=1).raw\n-\n-        def _set_related_items(self, obj, items):\n-            obj.setRelatedItems(items)\n-            modified(obj)\n-\n-        def _get_related_items(self, obj):\n-            return obj.getRelatedItems()\ndiff --git a/plone/app/linkintegrity/tests/test_circular.py b/plone/app/linkintegrity/tests/test_circular.py\nindex 9f869e7..89d5a7f 100644\n--- a/plone/app/linkintegrity/tests/test_circular.py\n+++ b/plone/app/linkintegrity/tests/test_circular.py\n@@ -1,12 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity.browser.info import DeleteConfirmationInfo\n from plone.app.linkintegrity.testing import create\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n \n-import six\n-\n \n class CircularReferencesTestCase:\n \n@@ -84,10 +81,5 @@ def test_internal_breaches_are_dropped(self):\n         self.assertNotIn(\'Potential link breakage\', view())\n \n \n-class CircularReferencesDXTestCase(DXBaseTestCase, CircularReferencesTestCase):\n+class CircularReferencesDXTestCase(BaseTestCase, CircularReferencesTestCase):\n     """Circular reference testcase for dx content types"""\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-    class CircularReferencesATTestCase(ATBaseTestCase, CircularReferencesTestCase):\n-        """Circular reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex 2b68e7c..357906c 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -1,24 +1,24 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n-# from plone.app.linkintegrity.utils import hasIncomingLinks\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasOutgoingLinks\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n-from Products.CMFPlone.interfaces import IEditingSchema\n+from plone.testing.zope import Browser\n+from plone.base.interfaces import IEditingSchema\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n \n-import six\n import transaction\n import unittest\n \n \n-class ReferenceTestCase:\n+class FunctionalReferenceTestCase(BaseTestCase):\n+    """functional reference testcase"""\n+\n+    layer = testing.PLONE_APP_LINKINTEGRITY_FUNCTIONAL_TESTING\n \n     @unittest.skip(\'Re-enable after https://github.com/plone/plone.app.content/issues/38\')  # noqa\n     def test_file_reference_linkintegrity_page_is_shown(self):\n@@ -56,9 +56,8 @@ def test_file_reference_linkintegrity_page_is_shown(self):\n                       self.browser.contents)\n \n         # Click cancel button, item should stay in place\n-        # FIXME! This fails in Archetypes because the redirect\n-        # plone.app.content.browser.actions.DeleteConfirmationForm.handle_cancel\n-        # is broken for AT-content.\n+        # FIXME! This fails in Plone 6 with an internal server error,\n+        # but maybe no longer for the original reasons for which we skip this test.\n         self.browser.getControl(name=\'form.buttons.Cancel\').click()\n         self.assertEqual(self.browser.url, file2.absolute_url() + \'/view\')\n         self.assertIn(\'Removal cancelled.\', self.browser.contents)\n@@ -379,18 +378,3 @@ def test_warn_about_content(self):\n         self.assertIn(\'2 Objects in all\', self.browser.contents)\n         self.assertIn(\'1 Folders\', self.browser.contents)\n         self.assertIn(\'0 Published objects\', self.browser.contents)\n-\n-\n-class FunctionalReferenceDXTestCase(DXBaseTestCase, ReferenceTestCase):\n-    """Functional reference testcase for dx content types"""\n-\n-    layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\n-\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class FunctionalReferenceATTestCase(ATBaseTestCase, ReferenceTestCase):\n-        """Functional reference testcase for dx content types"""\n-\n-        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex 2cd0310..4de0cff 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,13 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity.handlers import findObject\n from plone.app.linkintegrity.testing import create\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.testing import logout\n \n-import six\n \n-\n-class FindObjectTests:\n+class ReferenceGenerationTestCase(BaseTestCase):\n     """ testing the handlers.findObject function """\n \n     def test_relative_to_portal_root_1(self):\n@@ -43,20 +40,8 @@ def test_uuid_link(self):\n         # We logout.  This is to check that findObject also finds objects\n         # that are not visible to the current user, like a private page.\n         # See https://github.com/plone/plone.app.linkintegrity/issues/79\n-        # Note that in the Archetypes tests this is no problem,\n-        # but for Dexterity it is.  Likely they use a different workflow.\n         logout()\n \n         obj, components = findObject(self.portal.doc1, path)\n         self.assertEqual(obj.absolute_url_path(), \'/plone/target\')\n         self.assertEqual(components, path)\n-\n-\n-class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n-    """findObject testcase for dx content types"""\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class ReferenceGenerationATTestCase(ATBaseTestCase, FindObjectTests):\n-        """findObject testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_imagescales.py b/plone/app/linkintegrity/tests/test_imagescales.py\nindex b934934..e31f40f 100644\n--- a/plone/app/linkintegrity/tests/test_imagescales.py\n+++ b/plone/app/linkintegrity/tests/test_imagescales.py\n@@ -1,13 +1,11 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.uuid.interfaces import IUUID\n \n-import six\n \n-\n-class ImageReferenceTestCase:\n+class ImageReferenceTestCase(BaseTestCase):\n+    """image reference testcase"""\n \n     def test_image_tag_reference_creation(self):\n         doc1 = self.portal.doc1\n@@ -61,13 +59,3 @@ def test_image_resolveuid_reference_creation(self):\n             [r.from_object for r in getIncomingLinks(img1)],\n             [doc1, ],\n         )\n-\n-\n-class ImageReferenceDXTestCase(DXBaseTestCase, ImageReferenceTestCase):\n-    """Image reference testcase for dx content types"""\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class ImageReferenceATTestCase(ATBaseTestCase, ImageReferenceTestCase):\n-        """Image reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex ba52035..e327338 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.linkintegrity.parser import extractLinks\n-from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.linkintegrity.tests.base import BaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n@@ -16,10 +15,9 @@\n from zope.intid.interfaces import IIntIds\n from zope.lifecycleevent import modified\n \n-import six\n \n-\n-class ReferenceGenerationTestCase:\n+class ReferenceGenerationTestCase(BaseTestCase):\n+    """reference generation testcase"""\n \n     def test_is_linked(self):\n         img1 = self.portal[\'image1\']\n@@ -205,20 +203,3 @@ def test_delete_confirmation_for_any_reference(self):\n         breaches = info.get_breaches()\n         self.assertEqual(len(breaches), 1)\n         self.assertEqual(len(info.get_breaches()[0][\'sources\']), 1)\n-\n-\n-class ReferenceGenerationDXTestCase(\n-    DXBaseTestCase,\n-    ReferenceGenerationTestCase,\n-):\n-    """Reference generation testcase for dx content types"""\n-\n-\n-if six.PY2:\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-\n-    class ReferenceGenerationATTestCase(\n-        ATBaseTestCase,\n-        ReferenceGenerationTestCase,\n-    ):\n-        """Reference generation testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_upgrade.py b/plone/app/linkintegrity/tests/test_upgrade.py\ndeleted file mode 100644\nindex c363339..0000000\n--- a/plone/app/linkintegrity/tests/test_upgrade.py\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations\n-from plone.app.linkintegrity.utils import hasIncomingLinks\n-from plone.app.linkintegrity.utils import referencedRelationship\n-try:\n-    from Products.Archetypes.interfaces import IReferenceable\n-    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n-    HAS_AT = True\n-except ImportError:\n-    HAS_AT = False\n-import unittest\n-\n-\n-if HAS_AT:\n-    class ReferenceMigrationATTestCase(ATBaseTestCase):\n-        """Reference migration testcase for at content types"""\n-\n-        @unittest.skipUnless(\n-            HAS_AT, \'Archetypes are not installed. Skipping migration tests\')\n-        def test_upgrade(self):\n-            doc3 = self.portal[\'doc3\']\n-            doc1 = self.portal[\'doc1\']\n-            self.assertTrue(IReferenceable.providedBy(doc3))\n-            doc3.setText(\'<a href="doc1">doc1</a>\', mimetype=\'text/html\')\n-            doc3.addReference(doc1, relationship=referencedRelationship)\n-            self.assertFalse(hasIncomingLinks(doc1))\n-            self.assertFalse(hasIncomingLinks(doc3))\n-            migrate_linkintegrity_relations(self.portal)\n-            self.assertTrue(hasIncomingLinks(doc1))\n-            self.assertFalse(hasIncomingLinks(doc3))\n-\n-else:\n-\n-    class TestDummy(unittest.TestCase):\n-\n-        def test_dummy(self):\n-            pass\ndiff --git a/plone/app/linkintegrity/upgrades.py b/plone/app/linkintegrity/upgrades.py\ndeleted file mode 100644\nindex a803180..0000000\n--- a/plone/app/linkintegrity/upgrades.py\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.utils import ensure_intid\n-from plone.app.linkintegrity.utils import referencedRelationship\n-from plone.app.uuid.utils import uuidToObject\n-try:\n-    from Products.Archetypes.config import REFERENCE_CATALOG\n-except ImportError:\n-    REFERENCE_CATALOG = "reference_catalog"\n-from Products.CMFCore.utils import getToolByName\n-from z3c.relationfield import RelationValue\n-from z3c.relationfield.event import _setRelation\n-from zope.component import getUtility\n-from zope.intid.interfaces import IIntIds\n-\n-import logging\n-log = logging.getLogger(__name__)\n-\n-\n-def migrate_linkintegrity_relations(context):\n-    """Migrate linkintegrity-relation from reference_catalog to zc.relation.\n-    """\n-    reference_catalog = getToolByName(context, REFERENCE_CATALOG, None)\n-    intids = getUtility(IIntIds)\n-    if reference_catalog is not None:\n-        # Only handle linkintegrity-relations (\'isReferencing\').\n-        # [:] copies the full result list to make sure\n-        # it won\'t change while we delete references below\n-        for brain in reference_catalog(relationship=referencedRelationship)[:]:\n-            try:\n-                source_obj = uuidToObject(brain.sourceUID)\n-                target_obj = uuidToObject(brain.targetUID)\n-            except AttributeError:\n-                source_obj = target_obj = None\n-            if source_obj is None or target_obj is None:\n-                # reference_catalog may be inconsistent\n-                log.info(\'Cannot delete relation since the relation_catalog is inconsistent.\')   # noqa: E501\n-                continue\n-            # Delete old reference\n-            reference_catalog.deleteReference(\n-                source_obj, target_obj, relationship=referencedRelationship)\n-\n-            # Trigger the recreation of linkintegrity-relation in\n-            # the relation_catalog (zc.relation)\n-            target_id = ensure_intid(target_obj, intids)\n-            if target_id is None:\n-                continue\n-            rel = RelationValue(target_id)\n-            _setRelation(source_obj, referencedRelationship, rel)\ndiff --git a/plone/app/linkintegrity/utils.py b/plone/app/linkintegrity/utils.py\nindex 226efac..629350b 100644\n--- a/plone/app/linkintegrity/utils.py\n+++ b/plone/app/linkintegrity/utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import IEditingSchema\n+from plone.base.interfaces import IEditingSchema\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\ndiff --git a/setup.py b/setup.py\nindex 5c69824..d3ff232 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'3.6.2.dev0\'\n+version = \'4.0.0.dev0\'\n \n setup(\n     name=\'plone.app.linkintegrity\',\n@@ -17,37 +17,35 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "Intended Audience :: Other Audience",\n         "Intended Audience :: System Administrators",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",\n     ],\n     keywords=\'link integrity plone\',\n     author=\'Plone Foundation\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.linkintegrity\',\n+    url=\'https://github.com/plone/plone.app.linkintegrity\',\n     license=\'GPL version 2\',\n     packages=find_packages(),\n     namespace_packages=[\'plone\', \'plone.app\'],\n     include_package_data=True,\n+    python_requires=\'>=3.8\',\n     install_requires=[\n         \'setuptools\',\n-        \'six\',\n         \'plone.app.intid\',\n         \'plone.app.relationfield\',\n+        \'plone.base\',\n+        \'plone.dexterity\',\n     ],\n     extras_require={\n         \'test\': [\n'

