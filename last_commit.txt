Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-30T11:59:23+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/311a05637c4779e1836368d66fd3d25d2e19433a

Add "Use UUID as user ID" support for password resets

Files changed:
M CHANGES.rst
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 46bbc788..29c26232 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,10 @@ Changelog\n 3.4.3 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Bugfixes:\n+\n+- Add "Use UUID as user ID" support for password resets\n+  [sneridagh]\n \n \n 3.4.2 (2018-08-27)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 3adb1d6b..5d70e576 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -1,14 +1,14 @@\n # -*- coding: utf-8 -*-\n \n from AccessControl import getSecurityManager\n-\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n-from Products.CMFPlone.utils import getFSVersionTuple\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.RegistrationTool import get_member_by_login_name\n+from Products.CMFPlone.utils import getFSVersionTuple\n from zope.component import getAdapter\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n@@ -240,6 +240,10 @@ def _get_user(self, user_id):\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.getMemberById(user_id)\n \n+    def _get_user_by_login_name(self, user_id):\n+        return get_member_by_login_name(\n+            self.context, user_id, raise_exceptions=False)\n+\n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n         return {\'error\': {\'type\': type,\n@@ -273,8 +277,16 @@ def update_password(self, data):\n         pwt = getToolByName(self.context, \'portal_password_reset\')\n \n         if target_user is None:\n-            self.request.response.setStatus(404)\n-            return\n+            portal = getSite()\n+            security = getAdapter(portal, ISecuritySchema)\n+            if PLONE5 and security.use_uuid_as_userid:\n+                target_user = self._get_user_by_login_name(username)\n+                if target_user is None:\n+                    self.request.response.setStatus(404)\n+                    return\n+            else:\n+                self.request.response.setStatus(404)\n+                return\n \n         # Send password reset mail\n         if data.keys() == []:\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 4ed516e2..0602a1d4 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -619,6 +619,74 @@ def test_reset_with_token(self):\n                                                     {})\n         self.assertTrue(authed)\n \n+    def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.id),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_delete_user(self):\n         response = self.api_session.delete(\'/@users/noam\')\n         transaction.commit()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-30T12:17:27+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/54be68d7f1a3c4c2c27cd00c16487412b2647187

Merge pull request #592 from plone/fix-password-reset-uuid-as-userid

Add "Use UUID as user ID" support for password resets

Files changed:
M CHANGES.rst
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 46bbc788..29c26232 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,10 @@ Changelog\n 3.4.3 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Bugfixes:\n+\n+- Add "Use UUID as user ID" support for password resets\n+  [sneridagh]\n \n \n 3.4.2 (2018-08-27)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 3adb1d6b..5d70e576 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -1,14 +1,14 @@\n # -*- coding: utf-8 -*-\n \n from AccessControl import getSecurityManager\n-\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n-from Products.CMFPlone.utils import getFSVersionTuple\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.RegistrationTool import get_member_by_login_name\n+from Products.CMFPlone.utils import getFSVersionTuple\n from zope.component import getAdapter\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n@@ -240,6 +240,10 @@ def _get_user(self, user_id):\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.getMemberById(user_id)\n \n+    def _get_user_by_login_name(self, user_id):\n+        return get_member_by_login_name(\n+            self.context, user_id, raise_exceptions=False)\n+\n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n         return {\'error\': {\'type\': type,\n@@ -273,8 +277,16 @@ def update_password(self, data):\n         pwt = getToolByName(self.context, \'portal_password_reset\')\n \n         if target_user is None:\n-            self.request.response.setStatus(404)\n-            return\n+            portal = getSite()\n+            security = getAdapter(portal, ISecuritySchema)\n+            if PLONE5 and security.use_uuid_as_userid:\n+                target_user = self._get_user_by_login_name(username)\n+                if target_user is None:\n+                    self.request.response.setStatus(404)\n+                    return\n+            else:\n+                self.request.response.setStatus(404)\n+                return\n \n         # Send password reset mail\n         if data.keys() == []:\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 4ed516e2..0602a1d4 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -619,6 +619,74 @@ def test_reset_with_token(self):\n                                                     {})\n         self.assertTrue(authed)\n \n+    def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.id),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        security_settings.use_uuid_as_userid = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_delete_user(self):\n         response = self.api_session.delete(\'/@users/noam\')\n         transaction.commit()\n'

