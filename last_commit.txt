Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-11T21:56:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/7d1c83f637a84f20b870494eed9ffaf4e8cf4b00

easier container selection in subclasses

Files changed:
A news/101.feature
M plone/dexterity/browser/add.py

b'diff --git a/news/101.feature b/news/101.feature\nnew file mode 100644\nindex 0000000..cee7125\n--- /dev/null\n+++ b/news/101.feature\n@@ -0,0 +1 @@\n+Add container property to ``AddForm`` to simplify target container selection in subclasses. [jensens]\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 6fe0750..0c05d86 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -50,12 +50,20 @@ def __init__(self, context, request, ti=None):\n     def additionalSchemata(self):\n         return getAdditionalSchemata(portal_type=self.portal_type)\n \n-    # API\n+    @property\n+    def container(self):\n+        """find container\n+\n+        return container object.\n \n+        In subclasses this could be used to point to a different container.\n+        """\n+        return aq_inner(self.context)\n+\n+    # API\n     def create(self, data):\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n \n-        container = aq_inner(self.context)\n         content = createObject(fti.factory)\n \n         # Note: The factory may have done this already, but we want to be sure\n@@ -69,7 +77,7 @@ def create(self, data):\n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\n         if IAcquirer.providedBy(content):\n-            content = content.__of__(container)\n+            content = content.__of__(self.container)\n \n         _applyChanges(self, content, data, force=True)\n         for group in self.groups:\n@@ -80,16 +88,15 @@ def create(self, data):\n     def add(self, object):\n \n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n-        container = aq_inner(self.context)\n-        new_object = addContentToContainer(container, object)\n+        new_object = addContentToContainer(self.container, object)\n \n         if fti.immediate_view:\n             self.immediate_view = "/".join(\n-                [container.absolute_url(), new_object.id, fti.immediate_view]\n+                [self.container.absolute_url(), new_object.id, fti.immediate_view]\n             )\n         else:\n             self.immediate_view = "/".join(\n-                [container.absolute_url(), new_object.id]\n+                [self.container.absolute_url(), new_object.id]\n             )\n \n     def nextURL(self):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-12T09:18:34+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.dexterity/commit/b49ceee681b4ffb5e8c440ea2de5a50bd5590ec7

Merge pull request #101 from plone/jensens/better-subclassing-capabilities

easier container selection in subclasses

Files changed:
A news/101.feature
M plone/dexterity/browser/add.py

b'diff --git a/news/101.feature b/news/101.feature\nnew file mode 100644\nindex 0000000..cee7125\n--- /dev/null\n+++ b/news/101.feature\n@@ -0,0 +1 @@\n+Add container property to ``AddForm`` to simplify target container selection in subclasses. [jensens]\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 6fe0750..0c05d86 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -50,12 +50,20 @@ def __init__(self, context, request, ti=None):\n     def additionalSchemata(self):\n         return getAdditionalSchemata(portal_type=self.portal_type)\n \n-    # API\n+    @property\n+    def container(self):\n+        """find container\n+\n+        return container object.\n \n+        In subclasses this could be used to point to a different container.\n+        """\n+        return aq_inner(self.context)\n+\n+    # API\n     def create(self, data):\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n \n-        container = aq_inner(self.context)\n         content = createObject(fti.factory)\n \n         # Note: The factory may have done this already, but we want to be sure\n@@ -69,7 +77,7 @@ def create(self, data):\n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\n         if IAcquirer.providedBy(content):\n-            content = content.__of__(container)\n+            content = content.__of__(self.container)\n \n         _applyChanges(self, content, data, force=True)\n         for group in self.groups:\n@@ -80,16 +88,15 @@ def create(self, data):\n     def add(self, object):\n \n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n-        container = aq_inner(self.context)\n-        new_object = addContentToContainer(container, object)\n+        new_object = addContentToContainer(self.container, object)\n \n         if fti.immediate_view:\n             self.immediate_view = "/".join(\n-                [container.absolute_url(), new_object.id, fti.immediate_view]\n+                [self.container.absolute_url(), new_object.id, fti.immediate_view]\n             )\n         else:\n             self.immediate_view = "/".join(\n-                [container.absolute_url(), new_object.id]\n+                [self.container.absolute_url(), new_object.id]\n             )\n \n     def nextURL(self):\n'

