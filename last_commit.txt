Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:14:21-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/a08bcf6e5677a6c48862dc1337819c362853d4e0

Rebase Work: Revert "Related items pattern: result button style margin for scrollbar and"

This reverts commit 98327d37d6a4b09233a290b972c8aa80738d6262.

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.relateditems.less

diff --git a/CHANGES.rst b/CHANGES.rst
index 7a5bfb5..5f195be 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -24,11 +24,6 @@ Incompatibilities:
 
 New:
 
-- Related items pattern: result button style allow for more room
-  for scrollbar, and have subltle color change on hover to deliniate
-  user-expected behavior of browsing vs. selecting item.
-  [seanupton]
-
 - Fix urls in modals not opening in new window
   [vangheem]
 
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index a7a111b..30bf235 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -60,7 +60,6 @@
   right: 0;
   top: 50%;
   margin-top: -16px;
-  margin-right: 8px;
   a {
     display: block;
     height: 36px;
@@ -68,9 +67,6 @@
     .glyphicon();
     .glyphicon-chevron-right();
   }
-  a:hover:before {
-    color:purple;
-  }
 }
 
 .pattern-relateditems-result {


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:02-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/d26592dc30bc9e990065c0698283b5573ecc4b7e

Rebase Work: Revert "Related Items pattern: content icon cross-compatibility with Plone"

This reverts commit 6ec3b4e133fa8d63a945009f876a7963470df003.

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 5f195be..4dbd754 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -68,14 +68,6 @@ New:
 
 Fixes:
 
-- Related Items pattern: content icon cross-compatibility with Plone
-  5.x and 4.x (via plone.app.widgets 1.x); in Plone 5 getIcon returned
-  from brain is a boolean, in Plone 4, it is a string -- use this to
-  show content icons in Plone 5 as previous, but also show image scale
-  in Plone 4, but only for images.  This is the most reasonable
-  solution to avoid requesting many broken image scales (404) in Plone 4.
-  [seanupton]
-
 - Upload pattern LESS: included omitted styles for progress bar
   in upload patttern by importing seletected styles from Bootstrap LESS.
   Fixes incorrect/omitted display of progress bar in plone.app.widgets 1.x.
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 3caeb29..69b7990 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -112,7 +112,7 @@ define([
       resultTemplate: '' +
         '<div class="   pattern-relateditems-result  <% if (selected) { %>pattern-relateditems-active<% } %>">' +
         '  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">' +
-        '    <% if (getIcon === true || portal_type === "Image") { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>' +
+        '    <% if (typeof getIcon !== "undefined" && getIcon) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>' +
         '    <span class="pattern-relateditems-result-title  <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>' +
         '    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>' +
         '    <span class="pattern-relateditems-result-path"><%- path %></span>' +
@@ -126,7 +126,7 @@ define([
       resultTemplateSelector: null,
       selectionTemplate: '' +
         '<span class="pattern-relateditems-item">' +
-        ' <% if (getIcon === true || portal_type === "Image") { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>' +
+        ' <% if (typeof getIcon !== "undefined" && getIcon) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>' +
         ' <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>' +
         ' <span class="pattern-relateditems-item-path"><%- path %></span>' +
         '</span>',


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:27-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/6994b72516d8d5d9109c7993a5747c9a77d3cfc6

Cleanup, JSCS Autoformat

Files changed:
M mockup/js/bundles/docs.js
M mockup/js/utils.js
M mockup/patterns/relateditems/pattern.js

diff --git a/mockup/js/bundles/docs.js b/mockup/js/bundles/docs.js
index 8c787aa..22e6d65 100644
--- a/mockup/js/bundles/docs.js
+++ b/mockup/js/bundles/docs.js
@@ -32,156 +32,36 @@ require([
         description: 'All the patterns you\'ll ever need',
         autotoc: false,
         patterns: [
-          { id: 'autotoc',
-            title: 'Autotoc',
-            description: 'Automatically generate a table of contents',
-            url: 'patterns/autotoc/pattern.js'
-          },
-          { id: 'backdrop',
-            title: 'Backdrop',
-            description: 'TODO',
-            url: 'patterns/backdrop/pattern.js'
-          },
-          { id: 'cookietrigger',
-            title: 'Cookie Trigger',
-            description: "Shows a DOM element if browser cookies are disabled.",
-            url: 'patterns/cookietrigger/pattern.js'
-          },
-          { id: 'formautofocus',
-            title: 'Form Auto Focus',
-            description: 'TODO',
-            url: 'patterns/formautofocus/pattern.js'
-          },
-          { id: 'formunloadalert',
-            title: 'Form Unload Alert',
-            description: 'A pattern to warn user when changes are unsaved and they try to navigate away from page',
-            url: 'patterns/formunloadalert/pattern.js'
-          },
-          { id: 'inlinevalidation',
-            title: 'Inline Validation',
-            description: 'Client side validation of form fields',
-            url: 'patterns/inlinevalidation/pattern.js'
-          },
-          { id: 'markspeciallinks',
-            title: 'Mark special links',
-            description: 'Mark special links based on protocol and optionally open in new window.',
-            url: 'patterns/markspeciallinks/pattern.js'
-          },
-          { id: 'modal',
-            title: 'Modal',
-            description: 'Creates a modal dialog (also called overlay)',
-            url: 'patterns/modal/pattern.js'
-          },
-          { id: 'moment',
-            title: 'Moment',
-            description: 'Human date representation of dates',
-            url: 'patterns/moment/pattern.js'
-          },
-          { id: 'pickadate',
-            title: 'Pick-A-Date',
-            description: 'Allows the user to select a date (with or without time) through a calendar',
-            url: 'patterns/pickadate/pattern.js'
-          },
-          { id: 'preventdoublesubmit',
-            title: 'Prevent Double Submit',
-            description: 'A pattern to prevent submitting a form twice',
-            url: 'patterns/preventdoublesubmit/pattern.js'
-          },
-          { id: 'querystring',
-            title: 'Querystring',
-            description: 'A widget for creating queries for collections',
-            url: 'patterns/querystring/pattern.js'
-          },
-          { id: 'relateditems',
-            title: 'Related Items',
-            description: 'An advanced widget for selecting related items',
-            url: 'patterns/relateditems/pattern.js'
-          },
-          { id: 'select2',
-            title: 'Select2',
-            description: 'Autocompletes, multiple or single selections from any kind of data source (with search!)',
-            url: 'patterns/select2/pattern.js'
-          },
-          { id: 'sortable',
-            title: 'Sortable',
-            description: 'Sort items in list using drag and drop',
-            url: 'patterns/sortable/pattern.js'
-          },
-          { id: 'structure',
-            title: 'Structure',
-            description: 'Managing a folder of items',
-            url: 'patterns/structure/pattern.js'
-          },
-          { id: 'textareamimetypeselector',
-            title: 'Textarea MimeType Selector',
-            description: 'Selects the MimeType for a textarea and changes the widget according to the MimeType',
-            url: 'patterns/textareamimetypeselector/pattern.js'
-          },
-          { id: 'tinymce',
-            title: 'TinyMCE',
-            description: 'Rich text editor',
-            url: 'patterns/tinymce/pattern.js'
-          },
-          { id: 'toggle',
-            title: 'Toggle',
-            description: 'Toggles any attribute value after some event is fired',
-            url: 'patterns/toggle/pattern.js'
-          },
-          { id: 'tooltip',
-            title: 'Tooltip',
-            description: 'A pattern to show a tooltip on hover',
-            url: 'patterns/tooltip/pattern.js'
-          },
-          { id: 'tree',
-            title: 'Tree',
-            description: 'Manage tree of items',
-            url: 'patterns/tree/pattern.js'
-          },
-          { id: 'upload',
-            title: 'Upload',
-            description: 'File upload with drag and drop support.',
-            url: 'patterns/upload/pattern.js'
-          },
-          { id: 'filemanager',
-            title: 'File Manager',
-            description: 'Manage file system-like resources',
-            url: 'patterns/filemanager/pattern.js'
-          },
-          { id: 'texteditor',
-            title: 'Text editor',
-            description: 'Edit files TTW nicely',
-            url: 'patterns/texteditor/pattern.js'
-          },
-          { id: 'thememapper',
-            title: 'Theme Mapper',
-            description: 'Map theme rules',
-            url: 'patterns/thememapper/pattern.js'
-          },
-          { id: 'resourceregistry',
-            title: 'Resource Registry',
-            description: 'Register and override resources',
-            url: 'patterns/resourceregistry/pattern.js'
-          },
-          { id: 'eventedit',
-            title: 'Event Edit Forms',
-            description: 'Start/End delta, validation whole day and open end handling',
-            url: 'patterns/eventedit/pattern.js'
-          },
-          { id: 'livesearch',
-            title: 'Live search',
-            description: 'Live search widget',
-            url: 'patterns/livesearch/pattern.js'
-          },
-          { id: 'contentloader',
-            title: 'Content Loader',
-            description: 'Dynamically configure content to be reloaded',
-            url: 'patterns/contentloader/pattern.js'
-          },
-          { id: 'recurrence',
-            title: 'Recurrence Widget',
-            description: 'Recurrence widget',
-            url: 'patterns/recurrence/pattern.js'
-          }
+          { id: 'autotoc',                   url: 'patterns/autotoc/pattern.js',                   title: 'Autotoc',                     description: 'Automatically generate a table of contents'                                                },
+          { id: 'backdrop',                  url: 'patterns/backdrop/pattern.js',                  title: 'Backdrop',                    description: 'TODO'                                                                                      },
+          { id: 'contentloader',             url: 'patterns/contentloader/pattern.js',             title: 'Content Loader',              description: 'Dynamically configure content to be reloaded'                                              },
+          { id: 'cookietrigger',             url: 'patterns/cookietrigger/pattern.js',             title: 'Cookie Trigger',              description: 'Shows a DOM element if browser cookies are disabled.'                                      },
+          { id: 'eventedit',                 url: 'patterns/eventedit/pattern.js',                 title: 'Event Edit Forms',            description: 'Start/End delta validation whole day and open end handling'                                },
+          { id: 'filemanager',               url: 'patterns/filemanager/pattern.js',               title: 'File Manager',                description: 'Manage file system-like resources'                                                         },
+          { id: 'formautofocus',             url: 'patterns/formautofocus/pattern.js',             title: 'Form Auto Focus',             description: 'TODO'                                                                                      },
+          { id: 'formunloadalert',           url: 'patterns/formunloadalert/pattern.js',           title: 'Form Unload Alert',           description: 'A pattern to warn user when changes are unsaved and they try to navigate away from page'   },
+          { id: 'inlinevalidation',          url: 'patterns/inlinevalidation/pattern.js',          title: 'Inline Validation',           description: 'Client side validation of form fields'                                                     },
+          { id: 'livesearch',                url: 'patterns/livesearch/pattern.js',                title: 'Live search',                 description: 'Live search widget'                                                                        },
+          { id: 'markspeciallinks',          url: 'patterns/markspeciallinks/pattern.js',          title: 'Mark special links',          description: 'Mark special links based on protocol and optionally open in new window.'                   },
+          { id: 'modal',                     url: 'patterns/modal/pattern.js',                     title: 'Modal',                       description: 'Creates a modal dialog (also called overlay)'                                              },
+          { id: 'moment',                    url: 'patterns/moment/pattern.js',                    title: 'Moment',                      description: 'Human date representation of dates'                                                        },
+          { id: 'pickadate',                 url: 'patterns/pickadate/pattern.js',                 title: 'Pick-A-Date',                 description: 'Allows the user to select a date (with or without time) through a calendar'                },
+          { id: 'preventdoublesubmit',       url: 'patterns/preventdoublesubmit/pattern.js',       title: 'Prevent Double Submit',       description: 'A pattern to prevent submitting a form twice'                                              },
+          { id: 'querystring',               url: 'patterns/querystring/pattern.js',               title: 'Querystring',                 description: 'A widget for creating queries for collections'                                             },
+          { id: 'recurrence',                url: 'patterns/recurrence/pattern.js',                title: 'Recurrence Widget',           description: 'Recurrence widget'                                                                         },
+          { id: 'relateditems',              url: 'patterns/relateditems/pattern.js',              title: 'Related Items',               description: 'An advanced widget for selecting related items'                                            },
+          { id: 'resourceregistry',          url: 'patterns/resourceregistry/pattern.js',          title: 'Resource Registry',           description: 'Register and override resources'                                                           },
+          { id: 'select2',                   url: 'patterns/select2/pattern.js',                   title: 'Select2',                     description: 'Autocompletes multiple or single selections from any kind of data source (with search!)'   },
+          { id: 'sortable',                  url: 'patterns/sortable/pattern.js',                  title: 'Sortable',                    description: 'Sort items in list using drag and drop'                                                    },
+          { id: 'structure',                 url: 'patterns/structure/pattern.js',                 title: 'Structure',                   description: 'Managing a folder of items'                                                                },
+          { id: 'textareamimetypeselector',  url: 'patterns/textareamimetypeselector/pattern.js',  title: 'Textarea MimeType Selector',  description: 'Selects the MimeType for a textarea and changes the widget according to the MimeType'      },
+          { id: 'texteditor',                url: 'patterns/texteditor/pattern.js',                title: 'Text editor',                 description: 'Edit files TTW nicely'                                                                     },
+          { id: 'thememapper',               url: 'patterns/thememapper/pattern.js',               title: 'Theme Mapper',                description: 'Map theme rules'                                                                           },
+          { id: 'tinymce',                   url: 'patterns/tinymce/pattern.js',                   title: 'TinyMCE',                     description: 'Rich text editor'                                                                          },
+          { id: 'toggle',                    url: 'patterns/toggle/pattern.js',                    title: 'Toggle',                      description: 'Toggles any attribute value after some event is fired'                                     },
+          { id: 'tooltip',                   url: 'patterns/tooltip/pattern.js',                   title: 'Tooltip',                     description: 'A pattern to show a tooltip on hover'                                                      },
+          { id: 'tree',                      url: 'patterns/tree/pattern.js',                      title: 'Tree',                        description: 'Manage tree of items'                                                                      },
+          { id: 'upload',                    url: 'patterns/upload/pattern.js',                    title: 'Upload',                      description: 'File upload with drag and drop support.'                                                   }
         ]
       },
       { id: 'contribute',
diff --git a/mockup/js/utils.js b/mockup/js/utils.js
index 976ce24..1db4dca 100644
--- a/mockup/js/utils.js
+++ b/mockup/js/utils.js
@@ -9,10 +9,10 @@ define([
 
   var QueryHelper = function(options) {
     /* if pattern argument provided, it can implement the interface of:
-      *    - browsing: boolean if currently browsing
-      *    - currentPath: string of current path to apply to search if browsing
-      *    - basePath: default path to provide if no subpath used
-      */
+     *    - browsing: boolean if currently browsing
+     *    - currentPath: string of current path to apply to search if browsing
+     *    - basePath: default path to provide if no subpath used
+     */
 
     var self = this;
     var defaults = {
@@ -27,6 +27,7 @@ define([
       pathDepth: 1
     };
     self.options = $.extend({}, defaults, options);
+
     self.pattern = self.options.pattern;
     if (self.pattern === undefined || self.pattern === null) {
       self.pattern = {
@@ -40,12 +41,14 @@ define([
     } else if (self.pattern.vocabularyUrl) {
       self.options.vocabularyUrl = self.pattern.vocabularyUrl;
     }
-    if (self.options.vocabularyUrl !== undefined &&
-        self.options.vocabularyUrl !== null) {
-      self.valid = true;
-    } else {
-      self.valid = false;
-    }
+    self.valid = Boolean(self.options.vocabularyUrl);
+
+    self.getBatch = function(page) {
+      return {
+        page: page ? page : 1,
+        size: self.options.batchSize
+      };
+    };
 
     self.getCurrentPath = function() {
       var pattern = self.pattern;
@@ -59,7 +62,7 @@ define([
       } else {
         currentPath = pattern.currentPath;
       }
-      if (typeof currentPath  === 'function') {
+      if (typeof currentPath === 'function') {
         currentPath = currentPath();
       }
       var path = currentPath;
@@ -75,17 +78,17 @@ define([
       return path;
     };
 
-    self.getCriterias = function(term, options) {
-      if (options === undefined) {
-        options = {};
+    self.getCriterias = function(term, searchOptions) {
+      if (searchOptions === undefined) {
+        searchOptions = {};
       }
-      options = $.extend({}, {
+      searchOptions = $.extend({}, {
         useBaseCriteria: true,
         additionalCriterias: []
-      }, options);
+      }, searchOptions);
 
       var criterias = [];
-      if (options.useBaseCriteria) {
+      if (searchOptions.useBaseCriteria) {
         criterias = self.options.baseCriteria.slice(0);
       }
       if (term) {
@@ -96,31 +99,46 @@ define([
           v: term
         });
       }
-      if(options.searchPath){
+      if (searchOptions.searchPath) {
         criterias.push({
           i: 'path',
           o: 'plone.app.querystring.operation.string.path',
-          v: options.searchPath + '::' + self.options.pathDepth
+          v: searchOptions.searchPath + '::' + self.options.pathDepth
         });
-      }else if (self.pattern.browsing) {
+      } else if (self.pattern.browsing) {
         criterias.push({
           i: 'path',
           o: 'plone.app.querystring.operation.string.path',
           v: self.getCurrentPath() + '::' + self.options.pathDepth
         });
       }
-      criterias = criterias.concat(options.additionalCriterias);
+      criterias = criterias.concat(searchOptions.additionalCriterias);
       return criterias;
     };
 
-    self.getBatch = function(page) {
-      if (!page) {
-        page = 1;
-      }
-      return {
-        page: page,
-        size: self.options.batchSize
+    self.getQueryData = function(term, page) {
+      var data = {
+        query: JSON.stringify({
+          criteria: self.getCriterias(term),
+          sort_on: self.options.sort_on,
+          sort_order: self.options.sort_order
+        }),
+        attributes: JSON.stringify(self.options.attributes)
       };
+      if (page) {
+        data.batch = JSON.stringify(self.getBatch(page));
+      }
+      return data;
+    };
+
+    self.getUrl = function() {
+      var url = self.options.vocabularyUrl;
+      if (url.indexOf('?') === -1) {
+        url += '?';
+      } else {
+        url += '&';
+      }
+      return url + $.param(self.getQueryData());
     };
 
     self.selectAjax = function() {
@@ -131,44 +149,22 @@ define([
         data: function(term, page) {
           return self.getQueryData(term, page);
         },
-        results: function (data, page) {
+        results: function(data, page) {
           var more = (page * 10) < data.total; // whether or not there are more results available
           // notice we return the value of more so Select2 knows if more results can be loaded
-          return {results: data.results, more: more};
+          return {
+            results: data.results,
+            more: more
+          };
         }
       };
     };
 
-    self.getUrl = function() {
-      var url = self.options.vocabularyUrl;
-      if (url.indexOf('?') === -1) {
-        url += '?';
-      } else {
-        url += '&';
-      }
-      return url + $.param(self.getQueryData());
-    };
-
-    self.getQueryData = function(term, page) {
-      var data = {
-        query: JSON.stringify({
-          criteria: self.getCriterias(term),
-          sort_on: self.options.sort_on,
-          sort_order: self.options.sort_order
-        }),
-        attributes: JSON.stringify(self.options.attributes)
-      };
-      if (page) {
-        data.batch = JSON.stringify(self.getBatch(page));
-      }
-      return data;
-    };
-
     self.search = function(term, operation, value, callback, useBaseCriteria, type) {
       if (useBaseCriteria === undefined) {
         useBaseCriteria = true;
       }
-      if(type === undefined){
+      if (type === undefined) {
         type = 'GET';
       }
       var criteria = [];
@@ -181,7 +177,9 @@ define([
         v: value
       });
       var data = {
-        query: JSON.stringify({ criteria: criteria }),
+        query: JSON.stringify({
+          criteria: criteria
+        }),
         attributes: JSON.stringify(self.options.attributes)
       };
       $.ajax({
@@ -196,7 +194,7 @@ define([
     return self;
   };
 
-  var Loading = function(options){
+  var Loading = function(options) {
     /*
      * Options:
      *   backdrop(pattern): if you want to have the progress indicator work
@@ -209,30 +207,30 @@ define([
       backdrop: null,
       zIndex: 10005 // can be a function
     };
-    if(!options){
+    if (!options) {
       options = {};
     }
     self.options = $.extend({}, defaults, options);
 
-    self.init = function(){
+    self.init = function() {
       self.$el = $('.' + self.className);
-      if(self.$el.length === 0){
+      if (self.$el.length === 0) {
         self.$el = $('<div><div></div></div>');
         self.$el.addClass(self.className).hide().appendTo('body');
       }
     };
 
-    self.show = function(closable){
+    self.show = function(closable) {
       self.init();
       self.$el.show();
       var zIndex = self.options.zIndex;
       if (typeof(zIndex) === 'function') {
         zIndex = Math.max(zIndex(), 10005);
-      }else{
+      } else {
         // go through all modals and backdrops and make sure we have a higher
         // z-index to use
         zIndex = 10005;
-        $('.plone-modal-wrapper,.plone-modal-backdrop').each(function(){
+        $('.plone-modal-wrapper,.plone-modal-backdrop').each(function() {
           zIndex = Math.max(zIndex, $(this).css('zIndex') || 10005);
         });
         zIndex += 1;
@@ -250,7 +248,7 @@ define([
       }
     };
 
-    self.hide = function(){
+    self.hide = function() {
       self.init();
       self.$el.hide();
     };
@@ -258,12 +256,41 @@ define([
     return self;
   };
 
-  var generateId = function(prefix){
+  var getAuthenticator = function() {
+    var $el = $('input[name="_authenticator"]');
+    if ($el.length === 0) {
+      $el = $('a[href*="_authenticator"]');
+      if ($el.length > 0) {
+        return $el.attr('href').split('_authenticator=')[1];
+      }
+      return '';
+    } else {
+      return $el.val();
+    }
+  };
+
+  var generateId = function(prefix) {
     if (prefix === undefined) {
       prefix = 'id';
     }
     return prefix + (Math.floor((1 + Math.random()) * 0x10000)
-        .toString(16).substring(1));
+      .toString(16).substring(1));
+  };
+
+  var setId = function($el, prefix) {
+    if (prefix === undefined) {
+      prefix = 'id';
+    }
+    var id = $el.attr('id');
+    if (id === undefined) {
+      id = generateId(prefix);
+    } else {
+      /* hopefully we don't screw anything up here... changing the id
+       * in some cases so we get a decent selector */
+      id = id.replace(/\./g, '-');
+    }
+    $el.attr('id', id);
+    return id;
   };
 
   var getWindow = function() {
@@ -274,68 +301,49 @@ define([
     return win;
   };
 
-  return {
-    generateId: generateId,
-    parseBodyTag: function(txt) {
-      return $((/<body[^>]*>((.|[\n\r])*)<\/body>/im).exec(txt)[0]
-          .replace('<body', '<div').replace('</body>', '</div>')).eq(0).html();
-    },
-    setId: function($el, prefix) {
-      if (prefix === undefined) {
-        prefix = 'id';
-      }
-      var id = $el.attr('id');
-      if (id === undefined) {
-        id = generateId(prefix);
-      } else {
-        /* hopefully we don't screw anything up here... changing the id
-         * in some cases so we get a decent selector */
-        id = id.replace(/\./g, '-');
-      }
-      $el.attr('id', id);
-      return id;
-    },
-    bool: function(val) {
-      if (typeof val === 'string') {
-        val = $.trim(val).toLowerCase();
-      }
-      return ['true', true, 1].indexOf(val) !== -1;
-    },
-    QueryHelper: QueryHelper,
-    Loading: Loading,
-    // provide default loader
-    loading: new Loading(),
-    getAuthenticator: function() {
-      var $el = $('input[name="_authenticator"]');
-      if($el.length === 0){
-        $el = $('a[href*="_authenticator"]');
-        if($el.length > 0){
-          return $el.attr('href').split('_authenticator=')[1];
-        }
-        return '';
-      }else{
-        return $el.val();
-      }
+  var parseBodyTag = function(txt) {
+    return $((/<body[^>]*>((.|[\n\r])*)<\/body>/im).exec(txt)[0]
+      .replace('<body', '<div').replace('</body>', '</div>')).eq(0).html();
+  };
+
+  var featureSupport = {
+    /* Well tested feature support for things we use in mockup.
+     * All gathered from: http://diveintohtml5.info/everything.html
+     * Alternative to using some form of modernizr.
+     */
+    dragAndDrop: function() {
+      return 'draggable' in document.createElement('span');
     },
-    getWindow: getWindow,
-    featureSupport: {
-      /*
-        well tested feature support for things we use in mockup.
-        All gathered from: http://diveintohtml5.info/everything.html
-        Alternative to using some form of modernizr.
-      */
-      dragAndDrop: function(){
-        return 'draggable' in document.createElement('span');
-      },
-      fileApi: function(){
-        return typeof FileReader != 'undefined'; // jshint ignore:line
-      },
-      history: function(){
-        return !!(window.history && window.history.pushState);
-      }
+    fileApi: function() {
+      return typeof FileReader != 'undefined'; // jshint ignore:line
     },
-    escapeHTML: function(val){
-      return $("<div/>").text(val).html();
+    history: function() {
+      return !!(window.history && window.history.pushState);
+    }
+  };
+
+  var bool = function(val) {
+    if (typeof val === 'string') {
+      val = $.trim(val).toLowerCase();
     }
+    return ['true', true, 1].indexOf(val) !== -1;
+  };
+
+  var escapeHTML = function(val) {
+    return $('<div/>').text(val).html();
+  };
+
+  return {
+    bool: bool,
+    escapeHTML: escapeHTML,
+    featureSupport: featureSupport,
+    generateId: generateId,
+    getAuthenticator: getAuthenticator,
+    getWindow: getWindow,
+    Loading: Loading,
+    loading: new Loading(),  // provide default loader
+    parseBodyTag: parseBodyTag,
+    QueryHelper: QueryHelper,
+    setId: setId
   };
 });
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 69b7990..7cd120d 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -4,34 +4,25 @@
  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)
  *    attributes(array): This list is passed to the server during an AJAX request to specify the attributes which should be included on each item. (['UID', 'Title', 'portal_type', 'path'])
  *    basePath(string): If this is set the widget will start in "Browse" mode and will pass the path to the server to filter the results. ('/')
- *    rootPath(string): If this is set the widget will only display breadcrumb path elements deeprt than this path.
+ *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (false)
+ *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
+ *    maximumSelectionSize(integer): The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited. (-1)
  *    mode(string): Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
+ *    multiple(boolean): Allow referencing single or multiple items. (true)
+ *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
+ *    rootPath(string): If this is set the widget will only display breadcrumb path elements deeprt than this path.
+ *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
+ *    separator(string): Select2 option. String which separates multiple items. (',')
+ *    tokenSeparators(array): Select2 option, refer to select2 documentation. ([",", " "])
+ *    width(string): Specify a width for the widget. ('100%')
  *    breadCrumbTemplate(string): Template to use for a single item in the breadcrumbs. ('/<a href="<%- path %>"><%- text %></a>')
  *    breadCrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadCrumbTemplate. (null)
  *    breadCrumbsTemplate(string): Template for element to which breadCrumbs will be appended. ('<span><span class="pattern-relateditems-path-label"><%- searchText %></span><a class="icon-home" href="/"></a><%- items %></span>')
  *    breadCrumbsTemplateSelector(string): Select an element from the DOM from which to grab the breadCrumbsTemplate. (null)
- *    cache(boolean): Whether or not results from the server should be
- *    cached. (true)
- *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (false)
- *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
- *  
- * #this does not respect custom dx types which are also folderish:
- * --> folderTypes(array): Types which should be considered browsable. (["Folder"])
- * #   needs to be implemented with meta data field: is_folderish from vocabulary
- * 
- *    homeText(string): Text to display in the initial breadcrumb item. (home)
- *    maximumSelectionSize(integer): The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited. (-1)
- *    multiple(boolean): Do not change this option. (true)
- *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
  *    resultTemplate(string): Template for an item in the in the list of results. Refer to source for default. (Refer to source)
  *    resultTemplateSelector(string): Select an element from the DOM from which to grab the resultTemplate. (null)
- *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
  *    selectionTemplate(string): Template for element that will be used to construct a selected item. (Refer to source)
  *    selectionTemplateSelector(string): Select an element from the DOM from which to grab the selectionTemplate. (null)
- *    separator(string): Select2 option. String which separates multiple items. (',')
- *    tokenSeparators(array): Select2 option, refer to select2 documentation.
- *    ([",", " "])
- *    width(string): Specify a width for the widget. ('100%')
  *
  * Documentation:
  *    The Related Items pattern is based on Select2 so many of the same options will work here as well.
@@ -64,11 +55,11 @@
  *
  * Example: example-3
  *    <input type="text" class="pat-relateditems"
-             data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json"}' />
+ *           data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json"}' />
  *
  * Example: example-4
  *    <input type="text" class="pat-relateditems"
-             data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json", "maximumSelectionSize": 1}' />
+ *           data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json", "maximumSelectionSize": 1}' />
  *
  */
 
@@ -91,29 +82,54 @@ define([
     browsing: false,
     currentPath: null,
     defaults: {
-      vocabularyUrl: null, // must be set to work
-      width: '100%',
-      multiple: true,
-      tokenSeparators: [',', ' '],
-      separator: ',',
-      orderable: true,
-      cache: true,
-      mode: 'search', // possible values are search and browse
-      closeOnSelect: false,
+      // main option
+      vocabularyUrl: null,  // must be set to work
+
+      // more options
+      attributes: ['UID', 'Title', 'portal_type', 'path', 'getURL', 'getIcon', 'is_folderish', 'review_state'],  // used by utils.QueryHelper
       basePath: '/',
-      rootPath: '/',
-      homeText: _t('home'),
-      //folderTypes: ['Folder'],   
-      selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
-      attributes: ['UID', 'Title', 'portal_type', 'path','getURL', 'getIcon','is_folderish','review_state'],
+      closeOnSelect: false,
       dropdownCssClass: 'pattern-relateditems-dropdown',
       maximumSelectionSize: -1,
-      treeVocabularyUrl: null,
+      mode: 'search', // possible values are search and browse
+      multiple: true,  // mockup-patterns-select2
+      orderable: true,  // mockup-patterns-select2
+      rootPath: '/',
+      selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
+      separator: ',',
+      tokenSeparators: [',', ' '],
+      width: '100%',
+
+      // templates
+      breadCrumbTemplate: '' +
+        '/<a href="<%- path %>" class="crumb"><%- text %></a>',
+      breadCrumbTemplateSelector: null,
+      breadCrumbsTemplate: '' +
+        '<span>' +
+        '  <span class="pattern-relateditems-tree">' +
+        '    <a href="#" class="pattern-relateditems-tree-select"><span class="glyphicon glyphicon-indent-left"></span></a> ' +
+        '    <div class="tree-container">' +
+        '      <div class="title-container">' +
+        '        <a href="#" class="btn close pattern-relateditems-tree-cancel">' +
+        '          <span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span>' +
+        '        </a>' +
+        '        <span class="select-folder-label">Select folder</span>' +
+        '      </div>' +
+        '      <div class="pat-tree" />' +
+        '    </div>' +
+        '  </span>' +
+        '  <span class="pattern-relateditems-path-label">' +
+        '    <%- searchText %></span><a class="crumb" href="<%- rootPath %>">' +
+        '    <span class="glyphicon glyphicon-home"></span></a>' +
+        '    <%= items %>' +
+        '  </span>' +
+        '</span>',
+      breadCrumbsTemplateSelector: null,
       resultTemplate: '' +
-        '<div class="   pattern-relateditems-result  <% if (selected) { %>pattern-relateditems-active<% } %>">' +
+        '<div class="pattern-relateditems-result <% if (selected) { %>pattern-relateditems-active<% } %>">' +
         '  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">' +
         '    <% if (typeof getIcon !== "undefined" && getIcon) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>' +
-        '    <span class="pattern-relateditems-result-title  <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>' +
+        '    <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>' +
         '    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>' +
         '    <span class="pattern-relateditems-result-path"><%- path %></span>' +
         '  </a>' +
@@ -126,38 +142,13 @@ define([
       resultTemplateSelector: null,
       selectionTemplate: '' +
         '<span class="pattern-relateditems-item">' +
-        ' <% if (typeof getIcon !== "undefined" && getIcon) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>' +
-        ' <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>' +
-        ' <span class="pattern-relateditems-item-path"><%- path %></span>' +
+        '  <% if (typeof getIcon !== "undefined" && getIcon) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>' +
+        '  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>' +
+        '  <span class="pattern-relateditems-item-path"><%- path %></span>' +
         '</span>',
       selectionTemplateSelector: null,
-      breadCrumbsTemplate: '<span>' +
-        '<span class="pattern-relateditems-tree">' +
-          '<a href="#" class="pattern-relateditems-tree-select"><span class="glyphicon glyphicon-indent-left"></span></a> ' +
-          '<div class="tree-container">' +
-            '<div class="title-container">' +
-              '<a href="#" class="btn close pattern-relateditems-tree-cancel">' +
-                '<span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span>' +
-              '</a>' +
-              '<span class="select-folder-label">Select folder</span>' +
-            '</div>' +
-            '<div class="pat-tree" />' +
-          '</div>' +
-        '</span>' +
-        '<span class="pattern-relateditems-path-label">' +
-          '<%- searchText %></span><a class="crumb" href="<%- rootPath %>">' +
-          '<span class="glyphicon glyphicon-home"></span></a>' +
-          // ``items assumed to be santized html``
-          '<%= items %>' +
-        '</span>' +
-      '</span>',
-      breadCrumbsTemplateSelector: null,
-      breadCrumbTemplate: '' +
-        '/<a href="<%- path %>" class="crumb"><%- text %></a>',
-      breadCrumbTemplateSelector: null,
-      escapeMarkup: function(text) {
-        return text;
-      },
+
+      // functions
       setupAjax: function() {
         // Setup the ajax object to use during requests
         var self = this;
@@ -167,6 +158,7 @@ define([
         return {};
       }
     },
+
     applyTemplate: function(tpl, item) {
       var self = this;
       var template;
@@ -183,16 +175,19 @@ define([
       options._item = item;
       return _.template(template)(options);
     },
+
     activateBrowsing: function() {
       var self = this;
       self.browsing = true;
       self.setBreadCrumbs();
     },
+
     deactivateBrowsing: function() {
       var self = this;
       self.browsing = false;
       self.setBreadCrumbs();
     },
+
     browseTo: function(path) {
       var self = this;
       self.emit('before-browse');
@@ -206,6 +201,7 @@ define([
       self.$el.select2('open');
       self.emit('after-browse');
     },
+
     setBreadCrumbs: function() {
       var self = this;
       var path = self.currentPath ? self.currentPath : self.options.basePath;
@@ -236,9 +232,11 @@ define([
             itemsHtml = itemsHtml + self.applyTemplate('breadCrumb', item);
           }
         });
-        html = self.applyTemplate('breadCrumbs', {items: itemsHtml,
-                                                  searchText: _t('Search:'),
-                                                  rootPath: self.options.rootPath});
+        html = self.applyTemplate('breadCrumbs', {
+          items: itemsHtml,
+          searchText: _t('Search:'),
+          rootPath: self.options.rootPath
+        });
       }
       var $crumbs = $(html);
       $('a.crumb', $crumbs).on('click', function(e) {
@@ -246,6 +244,7 @@ define([
         self.browseTo($(this).attr('href'));
         return false;
       });
+
       var $treeSelect = $('.pattern-relateditems-tree-select', $crumbs);
       var $container = $treeSelect.parent();
       var $treeContainer = $('.tree-container', $container);
@@ -267,13 +266,13 @@ define([
           return nodes;
         },
         onCreateLi: function(node, $li) {
-          if(node._loaded){
-            if(node.children.length === 0){
+          if (node._loaded) {
+            if (node.children.length === 0) {
               $li.find('.jqtree-title').append('<span class="tree-node-empty">' + _t('(empty)') + '</span>');
             }
           }
           $li.append('<span class="pattern-relateditems-buttons"><a class="pattern-relateditems-result-browse" href="#"></a></span>');
-          $li.find('.pattern-relateditems-result-browse').click(function(e){
+          $li.find('.pattern-relateditems-result-browse').click(function(e) {
             e.preventDefault();
             self.currentPath = node.path;
             self.browseTo(self.currentPath);
@@ -286,14 +285,14 @@ define([
         if (node && !node._loaded) {
           self.currentPath = node.path;
           selectedNode = node;
-          treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl(), node, function(){
+          treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl(), node, function() {
             treePattern.$el.tree('openNode', node);
           });
           node._loaded = true;
         }
       });
-      treePattern.$el.bind('tree.dblclick', function(e){
-        if(e.node){
+      treePattern.$el.bind('tree.dblclick', function(e) {
+        if (e.node) {
           self.currentPath = e.node.path;
           self.browseTo(self.currentPath);
           $treeContainer.fadeOut();
@@ -311,7 +310,6 @@ define([
         $treeContainer.fadeOut();
         return false;
       });
-
       $treeSelect.on('click', function(e) {
         e.preventDefault();
         self.browsing = true;
@@ -321,13 +319,12 @@ define([
         treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl());
         return false;
       });
-
-      self.$el.on('select2-opening', function(){
+      self.$el.on('select2-opening', function() {
         $treeContainer.fadeOut();
       });
-
       self.$browsePath.html($crumbs);
     },
+
     selectItem: function(item) {
       var self = this;
       self.emit('selecting');
@@ -337,6 +334,7 @@ define([
       item.selected = true;
       self.emit('selected');
     },
+
     deselectItem: function(item) {
       var self = this;
       self.emit('deselecting');
@@ -350,6 +348,7 @@ define([
       item.selected = false;
       self.emit('deselected');
     },
+
     isSelectable: function(item) {
       var self = this;
       if (self.options.selectableTypes === null) {
@@ -358,15 +357,20 @@ define([
         return _.indexOf(self.options.selectableTypes, item.portal_type) > -1;
       }
     },
+
     init: function() {
       var self = this;
+
       self.query = new utils.QueryHelper(
-        $.extend(true, {}, self.options, {pattern: self})
+        $.extend(true, {}, self.options, {
+          pattern: self
+        })
       );
+
       self.treeQuery = new utils.QueryHelper(
         $.extend(true, {}, self.options, {
           pattern: self,
-          vocabularyUrl: self.options.treeVocabularyUrl || self.options.vocabularyUrl,
+          vocabularyUrl: self.options.vocabularyUrl,
           baseCriteria: [{
             i: 'is_folderish',
             o: 'plone.app.querystring.operation.selection.any',
@@ -389,15 +393,13 @@ define([
       };
 
       Select2.prototype.initializeOrdering.call(self);
-      self.options.formatResult = function(item) {
-        if (item.is_folderish){
-            item.folderish = true;
-           }
-         else {
-               item.folderish = false;
-           }
-      
 
+      self.options.formatResult = function(item) {
+        if (item.is_folderish) {
+          item.folderish = true;
+        } else {
+          item.folderish = false;
+        }
         item.selectable = self.isSelectable(item);
 
         if (item.selected === undefined) {
@@ -441,6 +443,7 @@ define([
 
         return $(result);
       };
+
       self.options.initSelection = function(element, callback) {
         var data = [];
         var value = $(element).val();
@@ -455,8 +458,12 @@ define([
               }, {});
               callback(
                 ids
-                  .map(function(uid) { return results[uid]; })
-                  .filter(function(item) { return item !== undefined; })
+                .map(function(uid) {
+                  return results[uid];
+                })
+                .filter(function(item) {
+                  return item !== undefined;
+                })
               );
             },
             false


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:27-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/8a0903ea2691dee7b4d4504b1fbc307559ba7e37

Contentloader pattern: Wrap AJAX response to allow jQuery to also find the first element.

Files changed:
M CHANGES.rst
M mockup/patterns/contentloader/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 4dbd754..5f12279 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -26,6 +26,12 @@ New:
 
 - Fix urls in modals not opening in new window
   [vangheem]
+- Contentloader pattern: Remotely loaded HTML content is wrapped in a ``div`` element, to allow jQuery to find also the first element.
+  jQuery starts to search at it's first child element.
+  [thet]
+
+- Add option ``allowPathSelection`` to the upload widget to explicitly disable the pat-relateditems path selection.
+  [thet]
 
 - Update safe bower.json dependencies except backbone which tests would fail.
   Keep jQuery at ``1.11.3`` as long as this might be used in Plone 4.x together with plone.app.jquerytools, which uses the deprecated internal ``$.buildFragments`` method.
diff --git a/mockup/patterns/contentloader/pattern.js b/mockup/patterns/contentloader/pattern.js
index a2fbecf..692f0ad 100644
--- a/mockup/patterns/contentloader/pattern.js
+++ b/mockup/patterns/contentloader/pattern.js
@@ -82,7 +82,7 @@ define([
             if(data.indexOf('<html') !== -1){
               data = utils.parseBodyTag(data);
             }
-            $el = $(data);
+            $el = $('<div>' + data + '</div>');  // jQuery starts to search at the first child element.
           }else if(that.options.dataType.indexOf('json') !== -1){
             // must have template defined with json
             if(data.constructor === Array && data.length === 1){


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:27-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/809fff2b018a3c71a0044370c626ac02971a75fb

Upload pattern: Option ``allowPathSelection``.

Files changed:
M CHANGES.rst
M mockup/patterns/structure/js/views/upload.js
M mockup/patterns/upload/pattern.js
M mockup/patterns/upload/templates/upload.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 5f12279..5993ef8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -51,6 +51,7 @@ New:
   [thet]
 
 - Structure pattern:
+  - Remove ``pat-relateditems`` path selection widget but make sure, the path can still be set via navigation within the structure pattern.
   - Allow definition of action menu items not only as dropdowns but also as buttons.
   - Add ``openItem`` and ``editItem`` actions as buttons and remove the open icon from the title column.
   - Open ``openItem`` links according to ``typeToViewAction`` instead of default with the ``/view`` postfix.
diff --git a/mockup/patterns/structure/js/views/upload.js b/mockup/patterns/structure/js/views/upload.js
index d9994d8..74cefa2 100644
--- a/mockup/patterns/structure/js/views/upload.js
+++ b/mockup/patterns/structure/js/views/upload.js
@@ -29,10 +29,8 @@ define([
       options.success = function() {
         self.app.collection.pager();
       };
-      options.relatedItems = {
-        vocabularyUrl: self.app.options.vocabularyUrl
-      };
       options.currentPath = self.app.getCurrentPath();
+      options.allowPathSelection = false;
       self.upload = new Upload(self.$('.uploadify-me').addClass('pat-upload'), options);
       return this;
     },
@@ -45,13 +43,7 @@ define([
         return;
       }
       var currentPath = self.app.getCurrentPath();
-      var relatedItems = self.upload.relatedItems;
-      if (self.currentPathData && relatedItems && currentPath !== self.upload.currentPath){
-        if (currentPath === '/'){
-          relatedItems.$el.select2('data', []);
-        } else {
-          relatedItems.$el.select2('data', [self.currentPathData.object]);
-        }
+      if (self.currentPathData && currentPath !== self.upload.currentPath){
         self.upload.setPath(currentPath);
       }
     }
diff --git a/mockup/patterns/upload/pattern.js b/mockup/patterns/upload/pattern.js
index 0a8e4a4..3efb25f 100644
--- a/mockup/patterns/upload/pattern.js
+++ b/mockup/patterns/upload/pattern.js
@@ -16,7 +16,8 @@
  *    autoCleanResults(boolean): condition value for the file preview in div element to fadeout after file upload is completed. (true)
  *    previewsContainer(selector): JavaScript selector for file preview in div element. (.upload-previews)
  *    container(selector): JavaScript selector for where to put upload stuff into in case of form. If not provided it will be place before the first submit button. ('')
- *    relatedItems(object): Related items pattern options. Will only use only if relativePath is used to use correct upload destination ({ attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"], batchSize: 20, basePath: "/", vocabularyUrl: null, width: 500, maximumSelectionSize: 1, placeholder: "Search for item on site..." })
+ *    allowPathSelection(boolean): Use relatedItems to set a different path from the current path. (true, if baseUrl and relativePath are set)
+ *    relatedItems(object): Related items pattern options. Will only be used if allowPathSelection is true. ({ attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"], batchSize: 20, basePath: "/", vocabularyUrl: null, width: 500, maximumSelectionSize: 1, placeholder: "Search for item on site..." })
  *
  * Documentation:
  *
@@ -78,6 +79,7 @@ define([
       maxFiles: null,
       maxFilesize: 99999999, // let's not have a max by default...
 
+      allowPathSelection: undefined,
       relatedItems: {
         // UID attribute is required here since we're working with related items
         attributes: ['UID', 'Title', 'Description', 'getURL', 'portal_type', 'path', 'ModificationDate'],
@@ -94,8 +96,13 @@ define([
       var self = this,
           template = UploadTemplate;
 
+      if (typeof self.options.allowPathSelection === 'undefined') {
+        // Set allowPathSelection to true, if we can use path based urls.
+        self.options.allowPathSelection = self.options.baseUrl && self.options.relativePath;
+      }
+
       // TODO: find a way to make this work in firefox (and IE)
-      $(document).bind('paste', function(e){
+      $(document).bind('paste', function(e) {
         var oe = e.originalEvent;
         var items = oe.clipboardData.items;
         if (items) {
@@ -111,7 +118,10 @@ define([
       self.currentPath = self.options.currentPath;
       self.currentFile = 0;
 
-      template = _.template(template)({_t: _t});
+      template = _.template(template)({
+        _t: _t,
+        allowPathSelection: self.options.allowPathSelection
+      });
       self.$el.addClass(self.options.className);
       self.$el.append(template);
 
@@ -136,8 +146,8 @@ define([
         self.$el = self.$el.parent();
       }
 
-      if (self.options.baseUrl && self.options.relativePath){
-        // only use related items if we can generate paths based urls
+      if (self.options.allowPathSelection) {
+        // only use related items if we can generate path based urls and if it's not turned off.
         self.$pathInput = $('input[name="location"]', self.$el);
         self.relatedItems = self.setupRelatedItems(self.$pathInput);
       } else {
diff --git a/mockup/patterns/upload/templates/upload.xml b/mockup/patterns/upload/templates/upload.xml
index 75c0ac3..663debe 100644
--- a/mockup/patterns/upload/templates/upload.xml
+++ b/mockup/patterns/upload/templates/upload.xml
@@ -28,6 +28,7 @@
             <div class="previews">
             </div>
             <div class="controls">
+                <% if (allowPathSelection) { %>
                 <div class="path">
                     <label><%- _t("Upload to...") %></label>
                     <p class="form-help">
@@ -38,6 +39,7 @@
                         name="location"
                         />
                 </div>
+                <% } %>
                 <div class="actions row">
                     <div class="col-md-9">
                         <div class="progress progress-striped active">


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:27-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/7757c4a560f1f09dc414567eda7535935e28cdf7

Structure pattern refactorings
- Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with visibility: hidden or opacity: 0). That in addition to elements, which are not visible at all and do not use screen space (display: none). Prevents upload form in structure pattern to be closed when opening the file selection tool.
- Use thumb scale for image preview in rename dialog and optimize the rename dialog layout.
- Remove pat-relateditems path selection widget but make sure, the path can still be set via navigation within the structure pattern.
- Add action menu item option ``css`` and always do a pattern scan on action menu items. This allows to set patterns on them, e.g. to open a modal or use tooltips.
- Sort Available Columns dialog entries.

Files changed:
M CHANGES.rst
M mockup/patterns/structure/js/actionmenu.js
M mockup/patterns/structure/js/views/actionmenu.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/columns.js
M mockup/patterns/structure/less/pattern.structure.less
M mockup/patterns/structure/pattern.js
M mockup/patterns/structure/templates/actionmenu.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 5993ef8..75ccd28 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -36,6 +36,35 @@ New:
 - Update safe bower.json dependencies except backbone which tests would fail.
   Keep jQuery at ``1.11.3`` as long as this might be used in Plone 4.x together with plone.app.jquerytools, which uses the deprecated internal ``$.buildFragments`` method.
   [thet]
+- Related items pattern:
+  OK - Remove obsolete tree widget
+  OK - Make Search/Browse mode user-selectable via buttons
+  OK - Let search search recursively
+  OK - Let search mode use last browse mode's path
+  OK - Show only selectable items in search mode, if defined.
+  OK - Search only in current path in browse mode.
+  - Show only selectable and folderish items in browse mode, if selctable items are defined.
+  - Optional Image Upload
+  - Favorites based on registry path entries
+
+- Related items pattern refactoring:
+  - [x] Make "search" and "browse" mode user-selectable via buttons.
+  - [x] Remove obsolete tree widget, use "browse" mode instead.
+  - [x] Let "search" mode search in currentPath recursively. The current path can be selected in "browse" mode.
+  - [x] Show only selectable items in "search" mode, if defined.
+  - [ ] Show only selectable and folderish items in browse mode, if selctable items are defined.
+  - [ ] Allow optional image and file upload (especially useful for image and file reference widgets).
+  - [ ] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
+  - [x] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
+  - [x] Default ``closeOnSelect`` to ``true``.
+  - [x] Exclude already selected items in result list.
+  - [x] Immediately open select2 results when clicking on "Browse" or "Search".
+  - [x] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
+  - [x] Default ``closeOnSelect`` to ``true``.
+  - [x] Exclude already selected items in result list.
+  - [x] Immediately open select2 results when clicking on "Browse" or "Search".
+  [thet]
+
 
 - Update package.json dependencies, except less which has incompatible changes since 2.0 (less.parse).
   [thet]
@@ -51,6 +80,7 @@ New:
   [thet]
 
 - Structure pattern:
+  - Sort Available Columns dialog entries.
   - Remove ``pat-relateditems`` path selection widget but make sure, the path can still be set via navigation within the structure pattern.
   - Allow definition of action menu items not only as dropdowns but also as buttons.
   - Add ``openItem`` and ``editItem`` actions as buttons and remove the open icon from the title column.
@@ -58,6 +88,7 @@ New:
   - Open ``editItem`` under ``/@@edit`` instead ``/edit``.
   - Remove JS event handlers for externally opening simple URLs and use the href attribute instead.
   - Add ``iconCSS`` option for action menus items to add icons.
+  - Add ``patternClasses`` option for action menu items to be able to set abitrary patterns (or classes) on the anchor tag of the menu item.
   - Add ``modal`` option for action menus items to allow links open in a modal.
   - Add ``iconSize`` option to set the icon size if a item has an image.
   - Use icons for all actionmenu entries.
@@ -70,6 +101,12 @@ New:
     Show them transparent but in the same height as if they were not empty.
     Align HTML structue with bootstrap ones and use ``<strong>`` for alert labels.
   - Fix rearrange button
+  - Use thumb scale for image preview in rename dialog and optimize the rename dialog layout.
+  [thet]
+
+- Contentloader pattern: Remotely loaded HTML content is wrapped in a ``div`` element, to allow jQuery to find also the first element.
+  jQuery starts to search at it's first child element.
+  [thet]
 
   [thet]
 
@@ -87,6 +124,10 @@ Fixes:
 - Fix issues where querystring widget was broke due to issues with
   checks for undefined
   [datakurre]
+- Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with ``visibility: hidden`` or ``opacity: 0``).
+  That in addition to elements, which are not visible at all and do not use screen space (``display: none``).
+  Prevents upload form in structure pattern to be closed when opening the file selection tool.
+  [thet]
 
 - Escape input into select2 widget
   [vangheem]
diff --git a/mockup/patterns/structure/js/actionmenu.js b/mockup/patterns/structure/js/actionmenu.js
index 1ab291d..c5c1007 100644
--- a/mockup/patterns/structure/js/actionmenu.js
+++ b/mockup/patterns/structure/js/actionmenu.js
@@ -7,6 +7,7 @@ define(['underscore'], function(_) {
       'title':    'Open',
       'category': 'button',
       'iconCSS':  'glyphicon glyphicon-eye-open',
+      'css': '',
       'modal':    false
     },
     'editItem': {
@@ -14,6 +15,7 @@ define(['underscore'], function(_) {
       'title':    'Edit',
       'category': 'button',
       'iconCSS':  'glyphicon glyphicon-pencil',
+      'css': '',
       'modal':    false
     },
     'cutItem': {
@@ -23,6 +25,7 @@ define(['underscore'], function(_) {
       'title':    'Cut',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-scissors',
+      'css': '',
       'modal':    false
     },
     'copyItem': {
@@ -32,6 +35,7 @@ define(['underscore'], function(_) {
       'title':    'Copy',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-duplicate',
+      'css': '',
       'modal':    false
     },
     'pasteItem': {
@@ -41,6 +45,7 @@ define(['underscore'], function(_) {
       'title':    'Paste',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-open-file',
+      'css': '',
       'modal':    false
     },
     'move-top': {
@@ -50,6 +55,7 @@ define(['underscore'], function(_) {
       'title':    'Move to top of folder',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-step-backward rright',
+      'css': '',
       'modal':    false
     },
     'move-bottom': {
@@ -59,6 +65,7 @@ define(['underscore'], function(_) {
       'title':    'Move to bottom of folder',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-step-backward rleft',
+      'css': '',
       'modal':    false
     },
     'set-default-page': {
@@ -68,6 +75,7 @@ define(['underscore'], function(_) {
       'title':    'Set as default page',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-ok-circle',
+      'css': '',
       'modal':    false
     },
     'selectAll': {
@@ -77,6 +85,7 @@ define(['underscore'], function(_) {
       'title':    'Select all contained items',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-check',
+      'css': '',
       'modal':    false
     }
   };
diff --git a/mockup/patterns/structure/js/views/actionmenu.js b/mockup/patterns/structure/js/views/actionmenu.js
index 0e24544..58a187e 100644
--- a/mockup/patterns/structure/js/views/actionmenu.js
+++ b/mockup/patterns/structure/js/views/actionmenu.js
@@ -9,7 +9,6 @@ define([
   'text!mockup-patterns-structure-url/templates/actionmenu.xml',
   'pat-registry',
   'translate',
-  'mockup-patterns-modal',
   'mockup-patterns-tooltip',
   'bootstrap-dropdown'
 ], function($, _, BaseView, utils, Result, Actions, ActionMenu, ActionMenuTemplate, registry, _t) {
@@ -23,7 +22,6 @@ define([
     menuOptions: null,
     // Dynamic menu options
     menuGenerator: 'mockup-patterns-structure-url/js/actionmenu',
-    needsRescan: false,
 
     eventConstructor: function(definition) {
       var self = this;
@@ -60,11 +58,14 @@ define([
               menuOptionsCategorized[category] = [];
           }
           menuOptionsCategorized[category].push(menuOption);
-          if (menuOption.modal || menuOption.category === 'button') {
-            self.needsRescan = true;
+          menuOption.css = menuOption.css || '';
+          if (menuOption.modal === true) {
+            // add standard pat-plone-modal.
+            // If you want another modal implementation, don't use modal=true but set the css option on action items.
+            menuOption.css += ' pat-plone-modal';
           }
 
-		      // Create event handler and add it to the results object.
+          // Create event handler and add it to the results object.
           var e = self.eventConstructor(menuOption);
           if (e) {
             result['click a.' + idx] = e;
@@ -103,7 +104,6 @@ define([
       var data = this.model.toJSON();
       data.header = self.options.header || null;
       data.menuOptions = self.menuOptionsCategorized;
-
       self.$el.html(self.template($.extend({
         _t: _t,
         id: utils.generateId()
@@ -118,9 +118,7 @@ define([
         self.$el.addClass(self.options.className);
       }
 
-      if (this.needsRescan) {
-        registry.scan(this.$el);
-      }
+      registry.scan(this.$el);
 
       return this;
     }
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index 404b49f..58e8511 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -51,7 +51,7 @@ define([
       /* close popovers when clicking away */
       $(document).click(function(e) {
         var $el = $(e.target);
-        if (!$el.is(':visible')) {
+        if (!$el.is(':visible') || $el.css('visibility') === 'hidden' || $el.css('opacity') === '0') {
           // ignore this, fake event trigger to element that is not visible
           return;
         }
diff --git a/mockup/patterns/structure/js/views/columns.js b/mockup/patterns/structure/js/views/columns.js
index 3c18b98..c13e1ed 100644
--- a/mockup/patterns/structure/js/views/columns.js
+++ b/mockup/patterns/structure/js/views/columns.js
@@ -33,7 +33,21 @@ define([
     afterRender: function() {
       var self = this;
 
+      var objKeySortCmp = function (a, b) {
+        // object key sort compare function
+        var ca = self.app.availableColumns[a];
+        var cb = self.app.availableColumns[b];
+        if (ca < cb) {
+          return -1;
+        } else if (ca == cb) {
+          return 0;
+        } else {
+          return 1;
+        }
+      }
+
       self.$container = self.$('ul');
+
       _.each(self.app.activeColumns, function(id) {
         var $el = $(self.itemTemplate({
           title: self.app.availableColumns[id],
@@ -42,10 +56,11 @@ define([
         $el.find('input')[0].checked = true;
         self.$container.append($el);
       });
-      _.each(_.omit(self.app.availableColumns, self.app.activeColumns),
-        function(name, id) {
+
+      var availableKeys = _.keys(_.omit(self.app.availableColumns, self.app.activeColumns)).sort(objKeySortCmp);
+      _.each(availableKeys, function(id) {
           var $el = $(self.itemTemplate({
-            title: name,
+            title: self.app.availableColumns[id],
             id: id
           }));
           self.$container.append($el);
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 576abb0..3882355 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -287,7 +287,6 @@
 }
 
 #popover-rename {
-    width: 400px;
 
     .popover-content{
         max-height: 500px;
@@ -303,6 +302,20 @@
         border-bottom: 1px solid #0E6EB0;
         margin-bottom: 5px;
         padding-bottom: 10px;
+
+        /* clearfix */
+        display: table;
+        clear: both;
+        content: '';
+
+        div.form-group {
+            float: left;
+        }
+        img {
+            float: left;
+            margin-left: 1em;
+        }
+
     }
 }
 
@@ -338,7 +351,7 @@ table.structure-dragging{
     .itemRow{
         .actionmenu-container{
             display: none;
-        } 
+        }
         td{
             padding: 5px;
         }
diff --git a/mockup/patterns/structure/pattern.js b/mockup/patterns/structure/pattern.js
index 8d8f2d7..9461f63 100644
--- a/mockup/patterns/structure/pattern.js
+++ b/mockup/patterns/structure/pattern.js
@@ -48,7 +48,7 @@ define([
 
       activeColumnsCookie: 'activeColumns',
 
-      iconSize: 'icon',
+      iconSize: 'thumb',
 
       /*
         As the options operate on a merging basis per new attribute
@@ -131,7 +131,6 @@ define([
         },
         url: '/rearrange'
       },
-      basePath: '/',
       moveUrl: null,
 
       buttons: null,
diff --git a/mockup/patterns/structure/templates/actionmenu.xml b/mockup/patterns/structure/templates/actionmenu.xml
index 6ad72b5..dea7ba1 100644
--- a/mockup/patterns/structure/templates/actionmenu.xml
+++ b/mockup/patterns/structure/templates/actionmenu.xml
@@ -1,5 +1,5 @@
 <% _.each(menuOptions.button, function(menuOption){ %>
-<a class="action <%- menuOption.name %> <%- menuOption.idx %> pat-tooltip <% if (menuOption.modal) { %>pat-plone-modal<% } %>"
+<a class="action <%- menuOption.name %> <%- menuOption.idx %> pat-tooltip <%- menuOption.css %>"
     href="<%- menuOption.url %>"
     title="<%- _t(menuOption.title) %>">
   <% if (menuOption.iconCSS) { %>
@@ -29,7 +29,7 @@
 
   <% _.each(menuOptions.dropdown, function(menuOption){ %>
   <li>
-    <a class="action <%- menuOption.name %> <%- menuOption.idx %> <% if (menuOption.modal) { %>pat-plone-modal<% } %>"
+    <a class="action <%- menuOption.name %> <%- menuOption.idx %> <%- menuOption.css %>"
         href="<%- menuOption.url %>">
       <% if (menuOption.iconCSS) { %>
       <span class="<%- menuOption.iconCSS %>"></span>


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:27-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/20ab3a18b383afed599531018e01a8b47ba59ac6

Related Items refactorings
- Make "search" and "browse" mode user-selectable via buttons.
- Remove obsolete tree widget, use "browse" mode instead.
- Let "search" mode search recursively.
- Let "browse" mode start from current path.
- Immediately open select2 results when clicking on "Browse" or "Search".
- Show only selectable items in "search" mode, if defined.
- Show only selectable and folderish items in "browse" mode, if selctable items are defined.
- Exclude already selected items in result list.
- Default closeOnSelect to true.
- Show "Open folder" arrow only when in "browse" mode.
- Seperate templates from JavaScript into xml files.
- Allow optional image and file upload (especially useful for image and file reference widgets).
- Allow configuration of "favorites" to quickly switch the current path via a dropdown menu.

Files changed:
A mockup/patterns/relateditems/templates/breadcrumb.xml
A mockup/patterns/relateditems/templates/favorite.xml
A mockup/patterns/relateditems/templates/result.xml
A mockup/patterns/relateditems/templates/selection.xml
A mockup/patterns/relateditems/templates/toolbar.xml
A mockup/patterns/relateditems/upload.js
M CHANGES.rst
M mockup/js/config.js
M mockup/patterns/relateditems/pattern.js
M mockup/patterns/relateditems/pattern.relateditems.less
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/tinymce/pattern.js
M mockup/patterns/upload/less/pattern.upload.less
M mockup/patterns/upload/pattern.js
M mockup/tests/pattern-relateditems-test.js
D mockup/patterns/tinymce/templates/result.xml
D mockup/patterns/tinymce/templates/selection.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 75ccd28..4c5c94e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -22,6 +22,8 @@ Incompatibilities:
 - Remove support for node version < ``0.11`` and update travis dependencies.
   [thet]
 
+- Needs RequireJS configuration for ``mockup-patterns-relateditems-url``.
+
 New:
 
 - Fix urls in modals not opening in new window
@@ -50,7 +52,7 @@ New:
 - Related items pattern refactoring:
   - [x] Make "search" and "browse" mode user-selectable via buttons.
   - [x] Remove obsolete tree widget, use "browse" mode instead.
-  - [x] Let "search" mode search in currentPath recursively. The current path can be selected in "browse" mode.
+    [x] Let "browse" mode start from current path.
   - [x] Show only selectable items in "search" mode, if defined.
   - [ ] Show only selectable and folderish items in browse mode, if selctable items are defined.
   - [ ] Allow optional image and file upload (especially useful for image and file reference widgets).
@@ -59,10 +61,13 @@ New:
   - [x] Default ``closeOnSelect`` to ``true``.
   - [x] Exclude already selected items in result list.
   - [x] Immediately open select2 results when clicking on "Browse" or "Search".
+  - [x] Show "Open folder" arrow only when in browse mode.
+  - [x] Allow optional image and file upload (especially useful for image and file reference widgets).
   - [x] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
   - [x] Default ``closeOnSelect`` to ``true``.
   - [x] Exclude already selected items in result list.
   - [x] Immediately open select2 results when clicking on "Browse" or "Search".
+  - [x] Seperate templates from JavaScript into xml files.
   [thet]
 
 
@@ -124,6 +129,9 @@ Fixes:
 - Fix issues where querystring widget was broke due to issues with
   checks for undefined
   [datakurre]
+- Adapt TinyMCE to relateditems changes and remove the selection and result templates.
+  [thet]
+
 - Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with ``visibility: hidden`` or ``opacity: 0``).
   That in addition to elements, which are not visible at all and do not use screen space (``display: none``).
   Prevents upload form in structure pattern to be closed when opening the file selection tool.
diff --git a/mockup/js/config.js b/mockup/js/config.js
index 269ba76..6280d58 100644
--- a/mockup/js/config.js
+++ b/mockup/js/config.js
@@ -79,6 +79,8 @@
       'mockup-patterns-preventdoublesubmit': 'patterns/preventdoublesubmit/pattern',
       'mockup-patterns-querystring': 'patterns/querystring/pattern',
       'mockup-patterns-relateditems': 'patterns/relateditems/pattern',
+      'mockup-patterns-relateditems-upload': 'patterns/relateditems/upload',
+      'mockup-patterns-relateditems-url': 'patterns/relateditems',
       'mockup-patterns-recurrence': 'patterns/recurrence/pattern',
       'mockup-patterns-resourceregistry': 'patterns/resourceregistry/pattern',
       'mockup-patterns-resourceregistry-url': 'patterns/resourceregistry',
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 7cd120d..7b0d267 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -3,64 +3,86 @@
  * Options:
  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)
  *    attributes(array): This list is passed to the server during an AJAX request to specify the attributes which should be included on each item. (['UID', 'Title', 'portal_type', 'path'])
- *    basePath(string): If this is set the widget will start in "Browse" mode and will pass the path to the server to filter the results. ('/')
- *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (false)
+ *    basePath(string): Start browse/search in this path. Default: set to rootPath.
+ *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (true)
  *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
+ *    favorites(array): Array of objects. These are favorites, which can be used to quickly jump to different locations. Objects have the attributes "title" and "path". Default: []
+ *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    maximumSelectionSize(integer): The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited. (-1)
- *    mode(string): Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
- *    multiple(boolean): Allow referencing single or multiple items. (true)
+ *    minimumInputLength: Select2 option. Number of characters necessary to start a search. Default: 0.
  *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
- *    rootPath(string): If this is set the widget will only display breadcrumb path elements deeprt than this path.
+ *    rootPath(string): Only display breadcrumb path elements deeper than this path. Default: "/"
  *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
  *    separator(string): Select2 option. String which separates multiple items. (',')
  *    tokenSeparators(array): Select2 option, refer to select2 documentation. ([",", " "])
  *    width(string): Specify a width for the widget. ('100%')
- *    breadCrumbTemplate(string): Template to use for a single item in the breadcrumbs. ('/<a href="<%- path %>"><%- text %></a>')
- *    breadCrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadCrumbTemplate. (null)
- *    breadCrumbsTemplate(string): Template for element to which breadCrumbs will be appended. ('<span><span class="pattern-relateditems-path-label"><%- searchText %></span><a class="icon-home" href="/"></a><%- items %></span>')
- *    breadCrumbsTemplateSelector(string): Select an element from the DOM from which to grab the breadCrumbsTemplate. (null)
+ *    breadcrumbTemplate(string): Template to use for a single item in the breadcrumbs.
+ *    breadcrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadcrumbTemplate. (null)
+ *    toolbarTemplate(string): Template for element to which toolbar items will be appended.
+ *    toolbarTemplateSelector(string): Select an element from the DOM from which to grab the toolbarTemplate. (null)
  *    resultTemplate(string): Template for an item in the in the list of results. Refer to source for default. (Refer to source)
  *    resultTemplateSelector(string): Select an element from the DOM from which to grab the resultTemplate. (null)
  *    selectionTemplate(string): Template for element that will be used to construct a selected item. (Refer to source)
  *    selectionTemplateSelector(string): Select an element from the DOM from which to grab the selectionTemplate. (null)
+ *    upload(boolen): Allow file and image uploads from within the related items widget.
+ *    uploadAllowView(string): View, which returns a JSON response in the form of {allowUpload: true}, if upload is allowed in the current context.
  *
  * Documentation:
  *    The Related Items pattern is based on Select2 so many of the same options will work here as well.
  *
- *    # Default
+ *    # Default, mode "search"
  *
  *    {{ example-1 }}
  *
- *    # Existing values, some bad
+ *    # Default, mode "browse"
  *
  *    {{ example-2 }}
  *
- *    # Selectable Types
+ *    # Existing values, some bad
  *
  *    {{ example-3 }}
  *
- *    # Select a single item
+ *    # Selectable Types
  *
  *    {{ example-4 }}
  *
+ *    # Select a single item
+ *
+ *    {{ example-5 }}
+ *
+ *    # Mode "browse", Upload
+ *
+ *    {{ example-6 }}
+ *
  * Example: example-1
  *    <input type="text" class="pat-relateditems"
  *           data-pat-relateditems="width:30em;
+ *                                  mode:search;
  *                                  vocabularyUrl:/relateditems-test.json" />
  *
  * Example: example-2
  *    <input type="text" class="pat-relateditems"
+ *           data-pat-relateditems="width:30em;
+ *                                  mode:browse;
+ *                                  vocabularyUrl:/relateditems-test.json" />
+ *
+ * Example: example-3
+ *    <input type="text" class="pat-relateditems"
  *           value="asdf1234gsad,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"
  *           data-pat-relateditems="width:30em; vocabularyUrl:/relateditems-test.json" />
  *
- * Example: example-3
+ * Example: example-4
  *    <input type="text" class="pat-relateditems"
  *           data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json"}' />
  *
- * Example: example-4
+ * Example: example-5
  *    <input type="text" class="pat-relateditems"
  *           data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json", "maximumSelectionSize": 1}' />
  *
+ * Example: example-6
+ *    <input type="text" class="pat-relateditems"
+ *           data-pat-relateditems='{"selectableTypes": ["Image", "File"], "vocabularyUrl": "/relateditems-test.json", "upload": true}' />
+ *
  */
 
 
@@ -69,30 +91,45 @@ define([
   'underscore',
   'pat-base',
   'mockup-patterns-select2',
+  'mockup-ui-url/views/button',
   'mockup-utils',
-  'mockup-patterns-tree',
-  'translate'
-], function($, _, Base, Select2, utils, Tree, _t) {
+  'translate',
+  'text!mockup-patterns-relateditems-url/templates/breadcrumb.xml',
+  'text!mockup-patterns-relateditems-url/templates/favorite.xml',
+  'text!mockup-patterns-relateditems-url/templates/result.xml',
+  'text!mockup-patterns-relateditems-url/templates/selection.xml',
+  'text!mockup-patterns-relateditems-url/templates/toolbar.xml',
+  'bootstrap-dropdown'
+], function($, _, Base, Select2, ButtonView, utils, _t,
+            BreadcrumbTemplate,
+            FavoriteTemplate,
+            ResultTemplate,
+            SelectionTemplate,
+            ToolbarTemplate
+) {
   'use strict';
 
   var RelatedItems = Base.extend({
     name: 'relateditems',
     trigger: '.pat-relateditems',
     parser: 'mockup',
-    browsing: false,
-    currentPath: null,
+    currentPath: undefined,
+    openAfterInit: undefined,
     defaults: {
       // main option
       vocabularyUrl: null,  // must be set to work
 
       // more options
+      upload: false,
       attributes: ['UID', 'Title', 'portal_type', 'path', 'getURL', 'getIcon', 'is_folderish', 'review_state'],  // used by utils.QueryHelper
-      basePath: '/',
-      closeOnSelect: false,
+      basePath: undefined,
+      closeOnSelect: true,
       dropdownCssClass: 'pattern-relateditems-dropdown',
+      favorites: [],
       maximumSelectionSize: -1,
+      minimumInputLength: 0,
       mode: 'search', // possible values are search and browse
-      multiple: true,  // mockup-patterns-select2
+      browsing: undefined,
       orderable: true,  // mockup-patterns-select2
       rootPath: '/',
       selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
@@ -101,62 +138,20 @@ define([
       width: '100%',
 
       // templates
-      breadCrumbTemplate: '' +
-        '/<a href="<%- path %>" class="crumb"><%- text %></a>',
-      breadCrumbTemplateSelector: null,
-      breadCrumbsTemplate: '' +
-        '<span>' +
-        '  <span class="pattern-relateditems-tree">' +
-        '    <a href="#" class="pattern-relateditems-tree-select"><span class="glyphicon glyphicon-indent-left"></span></a> ' +
-        '    <div class="tree-container">' +
-        '      <div class="title-container">' +
-        '        <a href="#" class="btn close pattern-relateditems-tree-cancel">' +
-        '          <span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span>' +
-        '        </a>' +
-        '        <span class="select-folder-label">Select folder</span>' +
-        '      </div>' +
-        '      <div class="pat-tree" />' +
-        '    </div>' +
-        '  </span>' +
-        '  <span class="pattern-relateditems-path-label">' +
-        '    <%- searchText %></span><a class="crumb" href="<%- rootPath %>">' +
-        '    <span class="glyphicon glyphicon-home"></span></a>' +
-        '    <%= items %>' +
-        '  </span>' +
-        '</span>',
-      breadCrumbsTemplateSelector: null,
-      resultTemplate: '' +
-        '<div class="pattern-relateditems-result <% if (selected) { %>pattern-relateditems-active<% } %>">' +
-        '  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">' +
-        '    <% if (typeof getIcon !== "undefined" && getIcon) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>' +
-        '    <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>' +
-        '    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>' +
-        '    <span class="pattern-relateditems-result-path"><%- path %></span>' +
-        '  </a>' +
-        '  <span class="pattern-relateditems-buttons">' +
-        '  <% if (is_folderish) { %>' +
-        '     <a class="pattern-relateditems-result-browse" href="#" data-path="<%- path %>"></a>' +
-        '   <% } %>' +
-        ' </span>' +
-        '</div>',
+      breadcrumbTemplate: BreadcrumbTemplate,
+      breadcrumbTemplateSelector: null,
+      favoriteTemplate: FavoriteTemplate,
+      favoriteTemplateSelector: null,
+      resultTemplate: ResultTemplate,
       resultTemplateSelector: null,
-      selectionTemplate: '' +
-        '<span class="pattern-relateditems-item">' +
-        '  <% if (typeof getIcon !== "undefined" && getIcon) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>' +
-        '  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>' +
-        '  <span class="pattern-relateditems-item-path"><%- path %></span>' +
-        '</span>',
+      selectionTemplate: SelectionTemplate,
       selectionTemplateSelector: null,
+      toolbarTemplate: ToolbarTemplate,
+      toolbarTemplateSelector: null,
+
+      // needed
+      multiple: true,
 
-      // functions
-      setupAjax: function() {
-        // Setup the ajax object to use during requests
-        var self = this;
-        if (self.query.valid) {
-          return self.query.selectAjax();
-        }
-        return {};
-      }
     },
 
     applyTemplate: function(tpl, item) {
@@ -176,153 +171,200 @@ define([
       return _.template(template)(options);
     },
 
-    activateBrowsing: function() {
-      var self = this;
-      self.browsing = true;
-      self.setBreadCrumbs();
-    },
+    setQuery: function () {
 
-    deactivateBrowsing: function() {
-      var self = this;
-      self.browsing = false;
-      self.setBreadCrumbs();
-    },
+      var baseCriteria = [];
+
+      if (this.options.mode == 'search') {
+        // MODE SEARCH
+
+        // restrict to given types
+        if (this.options.selectableTypes) {
+          baseCriteria.push({
+            i: 'portal_type',
+            o: 'plone.app.querystring.operation.selection.any',
+            v: this.options.selectableTypes
+          });
+        }
+
+        baseCriteria.push({
+          i: 'path',
+          o: 'plone.app.querystring.operation.string.path',
+          v: this.currentPath
+        });
 
-    browseTo: function(path) {
-      var self = this;
-      self.emit('before-browse');
-      self.currentPath = path;
-      if (path === '/' && self.options.mode === 'search') {
-        self.deactivateBrowsing();
-      } else {
-        self.activateBrowsing();
       }
-      self.$el.select2('close');
-      self.$el.select2('open');
-      self.emit('after-browse');
+
+      // set query object
+      this.query = new utils.QueryHelper(
+        $.extend(true, {}, this.options, {
+          pattern: this,
+          baseCriteria: baseCriteria
+        })
+      );
+
+      var ajax = {};
+      if (this.query.valid) {
+        ajax = this.query.selectAjax();
+      }
+      this.options.ajax = ajax;
+      this.$el.select2(this.options);
     },
 
-    setBreadCrumbs: function() {
+    setBreadCrumbs: function () {
       var self = this;
-      var path = self.currentPath ? self.currentPath : self.options.basePath;
+      var path = self.currentPath;
       var root = self.options.rootPath.replace(/\/$/, '');
       var html;
+
       // strip site root from path
       path = path.indexOf(root) === 0 ? path.slice(root.length) : path;
-      if (path === '/') {
-        var searchText = '';
-        if (self.options.mode === 'search') {
-          searchText = '<em>' + _t('entire site') + '</em>';
+
+      var paths = path.split('/');
+      var itemPath = root;
+      var itemsHtml = '';
+      _.each(paths, function(node) {
+        if (node !== '') {
+          var item = {};
+          itemPath = itemPath + '/' + node;
+          item.text = node;
+          item.path = itemPath;
+          itemsHtml = itemsHtml + self.applyTemplate('breadcrumb', item);
         }
-        html = self.applyTemplate('breadCrumbs', {
-          items: searchText,
-          searchText: _t('Search:'),
-          rootPath: self.options.rootPath
-        });
-      } else {
-        var paths = path.split('/');
-        var itemPath = root;
-        var itemsHtml = '';
-        _.each(paths, function(node) {
-          if (node !== '') {
-            var item = {};
-            itemPath = itemPath + '/' + node;
-            item.text = node;
-            item.path = itemPath;
-            itemsHtml = itemsHtml + self.applyTemplate('breadCrumb', item);
-          }
-        });
-        html = self.applyTemplate('breadCrumbs', {
-          items: itemsHtml,
-          searchText: _t('Search:'),
-          rootPath: self.options.rootPath
-        });
-      }
-      var $crumbs = $(html);
-      $('a.crumb', $crumbs).on('click', function(e) {
-        e.preventDefault();
-        self.browseTo($(this).attr('href'));
-        return false;
       });
 
-      var $treeSelect = $('.pattern-relateditems-tree-select', $crumbs);
-      var $container = $treeSelect.parent();
-      var $treeContainer = $('.tree-container', $container);
-      var $tree = $('.pat-tree', $container);
-      var selectedNode = null;
-      var treePattern = new Tree($tree, {
-        data: [],
-        dataFilter: function(data) {
-          var nodes = [];
-          _.each(data.results, function(item) {
-            var node = {
-              label: item.Title,
-              id: item.UID,
-              path: item.path,
-              folder: item.is_folderish
-            };
-            nodes.push(node);
-          });
-          return nodes;
-        },
-        onCreateLi: function(node, $li) {
-          if (node._loaded) {
-            if (node.children.length === 0) {
-              $li.find('.jqtree-title').append('<span class="tree-node-empty">' + _t('(empty)') + '</span>');
-            }
-          }
-          $li.append('<span class="pattern-relateditems-buttons"><a class="pattern-relateditems-result-browse" href="#"></a></span>');
-          $li.find('.pattern-relateditems-result-browse').click(function(e) {
-            e.preventDefault();
-            self.currentPath = node.path;
-            self.browseTo(self.currentPath);
-            $treeContainer.fadeOut();
-          });
-        }
+      // favorites
+      var favoritesHtml = '';
+      _.each(self.options.favorites, function (item) {
+        favoritesHtml = favoritesHtml + self.applyTemplate('favorite', item);
       });
-      treePattern.$el.bind('tree.select', function(e) {
-        var node = e.node;
-        if (node && !node._loaded) {
-          self.currentPath = node.path;
-          selectedNode = node;
-          treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl(), node, function() {
-            treePattern.$el.tree('openNode', node);
-          });
-          node._loaded = true;
-        }
+
+      html = self.applyTemplate('toolbar', {
+        items: itemsHtml,
+        favItems: favoritesHtml,
+        favText: _t('Favorites'),
+        searchText: _t('Current path:'),
+        searchModeText: _t('Search'),
+        browseModeText: _t('Browse'),
+        rootPath: self.options.rootPath
       });
-      treePattern.$el.bind('tree.dblclick', function(e) {
-        if (e.node) {
-          self.currentPath = e.node.path;
-          self.browseTo(self.currentPath);
-          $treeContainer.fadeOut();
+
+      self.$toolbar.html(html);
+
+      $('.dropdown-toggle', self.$toolbar).dropdown();
+
+      $('button.mode.search', self.$toolbar).on('click', function(e) {
+        e.preventDefault();
+        if (self.browsing) {
+          $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
+          $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
+          self.options.mode = 'search';
+          self.browsing = false;
+          if (self.$el.select2('data').length > 0) {
+            // Have to call after initialization
+            self.openAfterInit = true;
+          }
+          self.setQuery();
+          if (!self.openAfterInit) {
+            self.$el.select2('close');
+            self.$el.select2('open');
+          }
+        } else {
+          // just open result list
+          self.$el.select2('close');
+          self.$el.select2('open');
         }
       });
-      treePattern.$el.bind('tree.refresh', function() {
-        /* the purpose of this is that when new data is loaded, the selected
-         * node is cleared. This re-selects it as a user browses structure of site */
-        if (selectedNode) {
-          treePattern.$el.tree('selectNode', selectedNode);
+
+      $('button.mode.browse', self.$toolbar).on('click', function(e) {
+        e.preventDefault();
+        if (!self.browsing) {
+          $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
+          $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
+          self.options.mode = 'browse';
+          self.browsing = true;
+          if (self.$el.select2('data').length > 0) {
+            // Have to call after initialization
+            self.openAfterInit = true;
+          }
+          self.setQuery();
+          if (!self.openAfterInit) {
+            self.$el.select2('close');
+            self.$el.select2('open');
+          }
+        } else {
+          // just open result list
+          self.$el.select2('close');
+          self.$el.select2('open');
         }
       });
-      $('a.pattern-relateditems-tree-cancel', $treeContainer).click(function(e) {
+
+      $('a.crumb', self.$toolbar).on('click', function(e) {
         e.preventDefault();
-        $treeContainer.fadeOut();
-        return false;
+        self.browseTo($(this).attr('href'));
       });
-      $treeSelect.on('click', function(e) {
+
+      $('a.fav', self.$toolbar).on('click', function(e) {
         e.preventDefault();
-        self.browsing = true;
-        self.currentPath = '/';
-        self.$el.select2('close');
-        $treeContainer.fadeIn();
-        treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl());
-        return false;
-      });
-      self.$el.on('select2-opening', function() {
-        $treeContainer.fadeOut();
+        self.browseTo($(this).attr('href'));
       });
-      self.$browsePath.html($crumbs);
+
+      function initUploadView(UploadView, disabled) {
+        var uploadButtonId = 'upload-' + utils.generateId();
+        var uploadButton = new ButtonView({
+          id:  uploadButtonId,
+          title: _t('Upload'),
+          tooltip: _t('Upload files'),
+          icon: 'upload',
+        });
+        if (disabled) {
+          uploadButton.disable();
+        }
+        $('.controls', self.$toolbar).prepend(uploadButton.render().el);
+        self.uploadView = new UploadView({
+          triggerView: uploadButton,
+          app: self
+        });
+        $('#btn-' +  uploadButtonId, self.$toolbar).append(self.uploadView.render().el);
+      }
+
+      // upload
+      if (self.options.upload && utils.featureSupport.dragAndDrop() && utils.featureSupport.fileApi()) {
+
+        require(['mockup-patterns-relateditems-upload'], function (UploadView) {
+          if (self.options.uploadAllowView) {
+            // Check, if uploads are allowed in current context
+            $.ajax({
+              url: self.options.uploadAllowView,
+              // url: self.currentUrl() + self.options.uploadAllowView,  // not working yet
+              dataType: 'JSON',
+              data: {
+                path: self.currentPath
+              },
+              type: 'GET',
+              success: function (result) {
+                initUploadView(UploadView, !result.allowUpload);
+              }
+            });
+          } else {
+            // just initialize upload view without checking, if uploads are allowed.
+            initUploadView(UploadView);
+          }
+        });
+
+      }
+
+    },
+
+    browseTo: function (path) {
+      var self = this;
+      self.emit('before-browse');
+      self.currentPath = path;
+      self.$el.select2('close');
+      self.$el.select2('open');
+      self.emit('after-browse');
+      self.setBreadCrumbs();
+      self.setQuery();
     },
 
     selectItem: function(item) {
@@ -331,7 +373,6 @@ define([
       var data = self.$el.select2('data');
       data.push(item);
       self.$el.select2('data', data, true);
-      item.selected = true;
       self.emit('selected');
     },
 
@@ -345,7 +386,6 @@ define([
         }
       });
       self.$el.select2('data', data, true);
-      item.selected = false;
       self.emit('deselected');
     },
 
@@ -361,25 +401,10 @@ define([
     init: function() {
       var self = this;
 
-      self.query = new utils.QueryHelper(
-        $.extend(true, {}, self.options, {
-          pattern: self
-        })
-      );
-
-      self.treeQuery = new utils.QueryHelper(
-        $.extend(true, {}, self.options, {
-          pattern: self,
-          vocabularyUrl: self.options.vocabularyUrl,
-          baseCriteria: [{
-            i: 'is_folderish',
-            o: 'plone.app.querystring.operation.selection.any',
-            v: 'True'
-          }]
-        })
-      );
+      self.browsing = self.options.mode === 'browse';
+      self.currentPath = self.options.basePath || self.options.rootPath;
 
-      self.options.ajax = self.options.setupAjax.apply(self);
+      self.setQuery();
 
       self.$el.wrap('<div class="pattern-relateditems-container" />');
       self.$container = self.$el.parents('.pattern-relateditems-container');
@@ -395,21 +420,14 @@ define([
       Select2.prototype.initializeOrdering.call(self);
 
       self.options.formatResult = function(item) {
-        if (item.is_folderish) {
-          item.folderish = true;
-        } else {
-          item.folderish = false;
-        }
         item.selectable = self.isSelectable(item);
+        var data = self.$el.select2('data');
 
-        if (item.selected === undefined) {
-          var data = self.$el.select2('data');
-          item.selected = false;
-          _.each(data, function(obj) {
-            if (obj.UID === item.UID) {
-              item.selected = true;
-            }
-          });
+        for (var i = 0; i < data.length; i = i + 1) {
+          if (data[i].UID === item.UID) {
+            // Exclude already selected items in result list.
+            return;
+          }
         }
 
         var result = $(self.applyTemplate('result', item));
@@ -425,11 +443,14 @@ define([
               self.selectItem(item);
               $parent.addClass('pattern-relateditems-active');
               if (self.options.maximumSelectionSize > 0) {
-                var items = self.$select2.select2('data');
+                var items = self.$el.select2('data');
                 if (items.length >= self.options.maximumSelectionSize) {
-                  self.$select2.select2('close');
+                  self.$el.select2('close');
                 }
               }
+              if (self.options.closeOnSelect) {
+                self.$el.select2('close');
+              }
             }
           }
         });
@@ -449,7 +470,12 @@ define([
         var value = $(element).val();
         if (value !== '') {
           var ids = value.split(self.options.separator);
-          self.query.search(
+          var query = new utils.QueryHelper(
+            $.extend(true, {}, self.options, {
+              pattern: self
+            })
+          );
+          query.search(
             'UID', 'plone.app.querystring.operation.list.contains', ids,
             function(data) {
               var results = data.results.reduce(function(prev, item) {
@@ -465,10 +491,18 @@ define([
                   return item !== undefined;
                 })
               );
+
+              if (self.openAfterInit) {
+                // open after initialization
+                self.$el.select2('open');
+                self.openAfterInit = undefined;
+              }
+
             },
             false
           );
         }
+
       };
 
       self.options.id = function(item) {
@@ -477,21 +511,15 @@ define([
 
       Select2.prototype.initializeSelect2.call(self);
 
-      self.$browsePath = $('<span class="pattern-relateditems-path" />');
-      self.$container.prepend(self.$browsePath);
-
-      if (self.options.mode === 'search') {
-        self.deactivateBrowsing();
-        self.browsing = false;
-      } else {
-        self.activateBrowsing();
-        self.browsing = true;
-      }
+      self.$toolbar = $('<div class="toolbar ui-offset-parent" />');
+      self.$container.prepend(self.$toolbar);
 
       self.$el.on('select2-selecting', function(event) {
         event.preventDefault();
       });
 
+      self.setBreadCrumbs();
+
     }
   });
 
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index 30bf235..45b811a 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -1,185 +1,164 @@
-@import "@{bowerPath}/bootstrap/less/variables.less"; // Modify this for custom colors, font-sizes, etc
-@icon-font-path: "@{bowerPath}/bootstrap/dist/fonts/";
-@import "@{bowerPath}/bootstrap/less/glyphicons.less";
-@import "@{mockupPath}/select2/pattern.select2.less";
-@import "@{mockupPath}/tree/pattern.tree.less";
+@import '@{bowerPath}/bootstrap/less/variables.less'; // Modify this for custom colors, font-sizes, etc
+@icon-font-path: '@{bowerPath}/bootstrap/dist/fonts/';
+@import '@{bowerPath}/bootstrap/less/glyphicons.less';
+@import '@{mockuplessPath}/ui.less';
 
+@import (reference) '@{bowerPath}/bootstrap/less/mixins.less';
+@import (reference) '@{bowerPath}/bootstrap/less/utilities.less';
+@import (reference) '@{bowerPath}/bootstrap/less/buttons.less';
+@import (reference) '@{bowerPath}/bootstrap/less/button-groups.less';
+@import (reference) '@{bowerPath}/bootstrap/less/popovers.less';
+@import (reference) '@{bowerPath}/bootstrap/less/tooltip.less';
+@import (reference) '@{mockuplessPath}/popover.less';
 
-.pattern-relateditems-dropdown {
-  z-index: 10002;
+@import '@{mockupPath}/select2/pattern.select2.less';
 
-  .select2-results {
-    .select2-highlighted {
-      color: #000;
-      background: #d8d8d8;
-    }
-    .select2-selected {
-      display: list-item;
+
+.pattern-relateditems-container {
+
+    .fade:extend(.fade all){}
+    .collapse:extend(.collapse all){}
+    .collapsing:extend(.collapsing all){}
+
+    .popover:extend(.popover all){}
+    .popover-title:extend(.popover-title all){}
+    .popover-content:extend(.popover-content all){}
+    .arrow:extend(.arrow all){}
+    .tooltip:extend(.tooltip all){}
+    .tooltip-arrow:extend(.tooltip-arrow all){}
+    .tooltip-inner:extend(.tooltip-inner all){}
+
+    .table:extend(.table all){}
+    .pagination:extend(.pagination all){}
+
+    .btn:extend(.btn all){}
+    .btn-default:extend(.btn-default all){}
+    .btn-danger:extend(.btn-danger all){}
+    .btn-primary:extend(.btn-primary all){}
+    .btn-group:extend(.btn-group all){}
+    .btn-success:extend(.btn-success all){}
+    .input-group:extend(.input-group all){}
+    .input-group-addon:extend(.input-group-addon all){}
+    .input-group-btn:extend(.input-group-btn all){}
+    .dropdown-menu:extend(.dropdown-menu all){}
+    .dropdown-toggle:extend(.dropdown-toggle all){}
+    .dropdown-header:extend(.dropdown-header all){}
+    .divider:extend(.divider all){}
+
+    .table-striped:extend(.table-striped all){}
+    .table-bordered:extend(.table-bordered all){}
+
+    .navbar:extend(.navbar all){}
+    .navbar-search:extend(.navbar-search all){}
+    .form-search:extend(.form-search all){}
+    .ui-offset-parent:extend(.ui-offset-parent all){}
+
+    .form-group:extend(.form-group all){}
+    .help-block:extend(.help-block all){}
+    .checkbox:extend(.checkbox all){}
+
+    .open:extend(.open all){}
+
+    position: relative;
+    display: inline-block;
+
+    .toolbar {
+        display: table;
+        width: 100%;
+        background-color: #d8d8d8;
+
+        .btn {
+            &:extend(.btn-sm);
+        }
+
+        .mode-selector {
+            display: table-cell;
+            width: 140px;
+            vertical-align: middle;
+        }
+
+        .path-wrapper {
+            display: table-cell;
+            margin-top: 2px;
+            margin-bottom: 2px;
+            vertical-align: middle;
+        }
+
+        .controls {
+            display: table-cell;
+            width: 210px;
+            vertical-align: middle;
+        }
     }
-  }
 }
-.pat-relateditems {
 
+.pattern-relateditems-dropdown {
+    .select2-results {
+        .select2-highlighted {
+            color: #000;
+            background: #d8d8d8;
+        }
+
+        .select2-selected {
+            display: list-item;
+        }
+    }
 }
 
 .pattern-relateditems-active {
     padding: 5px;
-    background-color: #DDD;
+    background-color: #ddd;
 }
 
-.pattern-relateditems-container {
-  display: inline-block;
-  position: relative;
-}
-.pattern-relateditems-path {
-  display: block;
-  line-height: 20px;
-  background-color: #f1f1f1;
-  font-size: 12px;
-  border: 1px solid #aaa;
-  border-bottom-style: none;
-  z-index: 4;
-  position: relative;
-  padding: 0 6px;
-  color: #333;
-
-  a {
-    padding: 0 6px;
-  }
-
-  em {
-    color: #666;
-  }
+.pattern-relateditems-path-label {
+    margin-top: 2px;
 }
 
 .pattern-relateditems-buttons {
-  position: absolute;
-  display: inline-block;
-  text-align: right;
-  font-size: 18px;
-  right: 0;
-  top: 50%;
-  margin-top: -16px;
-  a {
-    display: block;
-    height: 36px;
-    line-height: 36px;
-    .glyphicon();
-    .glyphicon-chevron-right();
-  }
-}
-
-.pattern-relateditems-result {
-  padding-right: 30px;
-  position: relative;
-
-  a {
-    &:hover {
-      text-decoration: none;
+    font-size: 18px;
+    position: absolute;
+    top: 50%;
+    right: 0;
+    display: inline-block;
+    margin-top: -16px;
+    text-align: right;
+
+    a {
+        .glyphicon();
+        .glyphicon-chevron-right();
+        line-height: 36px;
+        display: block;
+        height: 36px;
     }
-  }
-
-  .pattern-relateditems-result-select {
-    display: block;
-    line-height: 15px;
-    padding-top: 5px;
-  }
-
-  .pattern-relateditems-result-path {
-    display: block;
-    color: #444;
-    font-size: 11px;
-  }
-}
-
-.pattern-relateditems-item {
-  .pattern-relateditems-item-path {
-    font-size: 11px;
-    color: #444;
-    display: block;
-  }
 }
 
-/* tree parts */
-.pattern-relateditems-tree {
-  .tree-container {
-    box-shadow: 0px 0px 8px 0px #DDD;
-    position: absolute;
-    background-color: white;
-    min-width: 200px;
-    padding: 0px;
-    left: -1px;
-    top: -11px;
-    border: 1px solid #5897fb;
-    display: none;
-    z-index: 10000;
-    min-width: 350px;
-    margin-top: 10px;
-
-    .pat-tree {
-      max-height: 400px;
-      overflow-y: scroll;
-      overflow-x: hidden;
-      border-top: 1px solid #DDD;
-      border-bottom: 1px solid #DDD;
-      padding: 2px 0;
-    }
+.pattern-relateditems-result {
+    position: relative;
+    padding-right: 30px;
 
-    .select-folder-label {
-      font-weight: bold;
+    a {
+        &:hover {
+            text-decoration: none;
+        }
     }
 
-    .tree-node-empty{
-      font-size: 75%;
+    .pattern-relateditems-result-select {
+        line-height: 15px;
+        display: block;
+        padding-top: 5px;
     }
 
-    .title-container{
-      background-color: #f1f1f1;
+    .pattern-relateditems-result-path {
+        font-size: 11px;
+        display: block;
+        color: #444;
     }
+}
 
-    .jqtree-tree {
-      background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, color-stop(1%, #eeeeee), color-stop(5%, #ffffff));
-      background-image: -webkit-linear-gradient(top, #eeeeee 1%, #ffffff 5%);
-      background-image: -moz-linear-gradient(top, #eeeeee 1%, #ffffff 5%);
-      background-image: linear-gradient(to bottom, #eeeeee 1%, #ffffff 5%);
-
-      .pattern-relateditems-buttons {
-        margin-top: -22px;
-        top: inherit;
-      }
-      .jqtree_common {
-        padding-left: 2px;
-      }
-
-      .jqtree_common.jqtree-selected {
-        .jqtree_common.jqtree-element {
-          background: #f1f1f1;
-          text-shadow: none;
-        }
-      }
-
-      .jqtree-toggler{
-        top: 20%;
-      }
-
-      li.jqtree_common {
-        .jqtree-element{
-          padding: 0;
-        }
-        .jqtree_common.jqtree-element {
-            &:hover {
-                background: #f1f1f1;
-            }
-        }
-        &.jqtree-folder{
-          margin-left: 18px;
-
-          ul.jqtree_common{
-            margin-left:0;
-            padding-left:0;
-          }
-        }
-      }
+.pattern-relateditems-item {
+    .pattern-relateditems-item-path {
+        font-size: 11px;
+        display: block;
+        color: #444;
     }
-  }
 }
diff --git a/mockup/patterns/relateditems/templates/breadcrumb.xml b/mockup/patterns/relateditems/templates/breadcrumb.xml
new file mode 100644
index 0000000..e9db410
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/breadcrumb.xml
@@ -0,0 +1,2 @@
+<span class="separator">/<span>
+<a href="<%- path %>" class="crumb"><%- text %></a>
diff --git a/mockup/patterns/relateditems/templates/favorite.xml b/mockup/patterns/relateditems/templates/favorite.xml
new file mode 100644
index 0000000..538cf4f
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/favorite.xml
@@ -0,0 +1 @@
+<li><a href="<%- path %>" class="fav" aria-labelledby="blip"><%- title %></a></li>
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
new file mode 100644
index 0000000..0471fe8
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -0,0 +1,13 @@
+<div class="pattern-relateditems-result">
+  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
+    <% if (typeof getIcon !== "undefined" && getIcon) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>
+    <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
+    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
+    <span class="pattern-relateditems-result-path"><%- path %></span>
+  </a>
+  <span class="pattern-relateditems-buttons">
+  <% if (mode !== "search" && is_folderish) { %>
+     <a class="pattern-relateditems-result-browse" href="#" data-path="<%- path %>"></a>
+   <% } %>
+ </span>
+</div>
diff --git a/mockup/patterns/relateditems/templates/selection.xml b/mockup/patterns/relateditems/templates/selection.xml
new file mode 100644
index 0000000..d6d6e76
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/selection.xml
@@ -0,0 +1,5 @@
+<span class="pattern-relateditems-item">
+  <% if (typeof getIcon !== "undefined" && getIcon) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>
+  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>
+  <span class="pattern-relateditems-item-path"><%- path %></span>
+</span>
diff --git a/mockup/patterns/relateditems/templates/toolbar.xml b/mockup/patterns/relateditems/templates/toolbar.xml
new file mode 100644
index 0000000..dc0d217
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/toolbar.xml
@@ -0,0 +1,23 @@
+<div class="btn-group mode-selector" role="group">
+  <button type="button" class="mode search btn <% if (mode=="search") { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
+  <button type="button" class="mode browse btn <% if (mode=="browse") { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
+</div>
+<div class="path-wrapper">
+  <span class="pattern-relateditems-path-label"><%- searchText %></span>
+  <a class="crumb" href="<%- rootPath %>"><span class="glyphicon glyphicon-home"/></a>
+  <%= items %>
+</div>
+<div class="controls pull-right">
+  <% if (favorites.length > 0) { %>
+  <div class="favorites dropdown pull-right">
+    <button class="favorites dropdown-toggle btn btn-primary" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
+      <span class="glyphicon glyphicon-star"/>
+      <%- favText %>
+      <span class="caret"/>
+    </button>
+    <ul class="dropdown-menu">
+      <%= favItems %>
+    </ul>
+  </div>
+  <% } %>
+</div>
diff --git a/mockup/patterns/relateditems/upload.js b/mockup/patterns/relateditems/upload.js
new file mode 100644
index 0000000..2079476
--- /dev/null
+++ b/mockup/patterns/relateditems/upload.js
@@ -0,0 +1,76 @@
+define([
+  'underscore',
+  'mockup-ui-url/views/popover',
+  'mockup-patterns-upload',
+  'mockup-utils',
+], function(_, PopoverView, Upload, utils) {
+  'use strict';
+
+  var UploadView = PopoverView.extend({
+    className: 'popover upload',
+    title: _.template('<%- _t("Upload files") %>'),
+    content: _.template(
+      '<input type="text" name="upload" style="display:none" />' +
+      '<div class="uploadify-me"></div>'),
+
+    popover: undefined,
+
+    initialize: function(options) {
+      var self = this;
+      self.app = options.app;
+      PopoverView.prototype.initialize.apply(self, [options]);
+    },
+
+    render: function() {
+      var self = this;
+      self.popover = PopoverView.prototype.render.call(this);
+      var options = {};
+      options.success = function(e, response) {
+        var uid = response.UID;
+        if (uid) {
+          var query = new utils.QueryHelper({
+            vocabularyUrl: self.app.options.vocabularyUrl,
+            attributes: self.app.options.attributes
+          });
+          var result = query.search(
+              'UID',
+              'plone.app.querystring.operation.selection.is',
+              uid,
+              function (e) {
+                var data = self.app.$el.select2('data');
+                data.push.apply(data, e.results);
+                self.app.$el.select2('data', data, true);
+                self.app.emit('selected');
+                self.popover.hide();
+              },
+              false
+          )
+        }
+        // getIcon, getURL, portal_type, review_state, Title, path
+        // var itemHtml = self.applyTemplate('selection', item);
+      };
+      options.uploadMultiple = true;
+      options.allowPathSelection = false;
+      options.relativePath = 'fileUpload';
+      options.baseUrl = self.app.currentPath;
+      self.upload = new Upload(self.$('.uploadify-me').addClass('pat-upload'), options);
+      return this;
+    },
+
+    toggle: function(button, e) {
+      /* we need to be able to change the current default upload directory */
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+      var self = this;
+      if (!this.opened) {
+        return;
+      }
+      if (self.app.currentPath !== self.upload.currentPath) {
+        self.upload.setPath(self.app.currentPath);
+      }
+    }
+
+  });
+
+  return UploadView;
+});
+
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index 39b32c4..6890cdb 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -84,8 +84,9 @@ define([
     },
 
     createRelatedItems: function() {
-      this.relatedItems = new RelatedItems(this.getEl(),
-        this.linkModal.options.relatedItems);
+      var options = this.tinypattern.options.relatedItems;
+      options.upload = false;  // ensure that related items upload is off.
+      this.relatedItems = new RelatedItems(this.getEl(), options);
     },
 
     value: function() {
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index e3d9c1c..f5ea50a 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -63,8 +63,6 @@ define([
   'underscore',
   'pat-base',
   'tinymce',
-  'text!mockup-patterns-tinymce-url/templates/result.xml',
-  'text!mockup-patterns-tinymce-url/templates/selection.xml',
   'mockup-utils',
   'mockup-patterns-tinymce-url/js/links',
   'mockup-i18n',
@@ -111,10 +109,7 @@ define([
   'tinymce-visualchars',
   'tinymce-wordcount',
   'tinymce-compat3x'
-], function($, _,
-            Base, tinymce,
-            ResultTemplate, SelectionTemplate,
-            utils, LinkModal, I18n, _t) {
+], function($, _, Base, tinymce, utils, LinkModal, I18n, _t) {
   'use strict';
 
   var TinyMCE = Base.extend({
@@ -229,9 +224,7 @@ define([
               o: 'plone.app.querystring.operation.list.contains',
               v: self.options.imageTypes.concat(self.options.folderTypes)
             }],
-            selectableTypes: self.options.imageTypes,
-            resultTemplate: ResultTemplate,
-            selectionTemplate: SelectionTemplate
+            selectableTypes: self.options.imageTypes
           }
         });
         var $el = $('<div/>').insertAfter(self.$el);
@@ -358,11 +351,6 @@ define([
       // XXX: disabled skin means it wont load css files which we already
       // include in widgets.min.css
       tinyOptions.skin = false;
-      self.options.relatedItems.generateImageUrl = function(data, scale) {
-        // this is so, in our result and selection template, we can
-        // access getting actual urls from related items
-        return self.generateImageUrl.apply(self, [data, scale]);
-      };
 
       tinyOptions.init_instance_callback = function(editor) {
         if (self.tiny === undefined || self.tiny === null) {
diff --git a/mockup/patterns/tinymce/templates/result.xml b/mockup/patterns/tinymce/templates/result.xml
deleted file mode 100644
index 5f1bee7..0000000
--- a/mockup/patterns/tinymce/templates/result.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<div class="pattern-relateditems-result pattern-relateditems-type-<%= portal_type %> <% if (selected) { %>pattern-active<% } %>">
-  <a href="#" class="pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
-    <% if (!folderish) { %>
-    <span class="pattern-relateditems-result-image">
-      <img src="<%= generateImageUrl(_item, 'thumb') %>" />
-    </span>
-    <% } %>
-    <span class="pattern-relateditems-result-title"><%= Title %></span>
-    <span class="pattern-relateditems-result-path"><%= path %></span>
-  </a>
-  <span class="pattern-relateditems-buttons">
-    <% if (folderish) { %>
-      <a class="pattern-relateditems-result-browse" href="#" data-path="<%= path %>"></a>
-    <% } %>
-  </span>
-</div>
diff --git a/mockup/patterns/tinymce/templates/selection.xml b/mockup/patterns/tinymce/templates/selection.xml
deleted file mode 100644
index 7927adb..0000000
--- a/mockup/patterns/tinymce/templates/selection.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<span class="pattern-relateditems-item pattern-relateditems-type-<%= portal_type %>">
- <span class="pattern-relateditems-result-image">
-   <img src="<%= generateImageUrl(_item, 'thumb') %>" />
- </span>
- <span class="pattern-relateditems-item-title"><%= Title %></span>
- <span class="pattern-relateditems-item-path"><%= path %></span>
-</span>'
diff --git a/mockup/patterns/upload/less/pattern.upload.less b/mockup/patterns/upload/less/pattern.upload.less
index 56907e3..31282eb 100644
--- a/mockup/patterns/upload/less/pattern.upload.less
+++ b/mockup/patterns/upload/less/pattern.upload.less
@@ -24,8 +24,10 @@
             margin-bottom: 1px;
         }
         .controls{
+            display: block;
             margin-top: 10px;
             padding-top: 10px;
+            width: 100%;
         }
         .previews{
             margin-top: 4em;
diff --git a/mockup/patterns/upload/pattern.js b/mockup/patterns/upload/pattern.js
index 3efb25f..8411061 100644
--- a/mockup/patterns/upload/pattern.js
+++ b/mockup/patterns/upload/pattern.js
@@ -485,6 +485,7 @@ define([
     setupRelatedItems: function($input) {
       var self = this;
       var options = self.options.relatedItems;
+      options.upload = false;  // ensure that related items upload is off.
       if (self.options.initialFolder){
         $input.attr('value', self.options.initialFolder);
       }
diff --git a/mockup/tests/pattern-relateditems-test.js b/mockup/tests/pattern-relateditems-test.js
index bd5e511..25de272 100644
--- a/mockup/tests/pattern-relateditems-test.js
+++ b/mockup/tests/pattern-relateditems-test.js
@@ -11,13 +11,38 @@ define([
   window.mocha.setup('bdd').globals(['jQuery*']);
   $.fx.off = true;
 
-  var $el;
 
   /* ==========================
    TEST: Related Items
   ========================== */
 
   describe('Related Items', function() {
+
+    var root = [
+      {UID:  'UID1',   Title:  'Document  1',  path:  '/document1',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID2',   Title:  'Document  2',  path:  '/document2',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID3',   Title:  'Document  3',  path:  '/document3',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID4',   Title:  'Document  4',  path:  '/document4',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID5',   Title:  'Document  5',  path:  '/document5',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID6',   Title:  'Folder    1',  path:  '/folder1',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID7',   Title:  'Folder    2',  path:  '/folder2',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID8',   Title:  'Image     1',  path:  '/image1',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID9',   Title:  'Image     2',  path:  '/image2',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID10',  Title:  'Image     3',  path:  '/image3',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
+    ];
+    var folder1 = [
+      {UID:  'UID11',   Title:  'Document  11',  path:  '/folder1/document11',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID12',   Title:  'Document  12',  path:  '/folder1/document12',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID13',   Title:  'Document  13',  path:  '/folder1/document13',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+    ];
+    var folder2 = [
+      {UID:  'UID14',   Title:  'Document  14',  path:  '/folder2/document14',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID15',   Title:  'Document  15',  path:  '/folder2/document15',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID16',   Title:  'Document  16',  path:  '/folder2/document16',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+    ];
+    var searchables;
+    var $container;
+
     beforeEach(function() {
       this.server = sinon.fakeServer.create();
       this.server.autoRespond = true;
@@ -37,53 +62,21 @@ define([
         return null;
       }
       this.server.respondWith(/relateditems-test.json/, function(xhr, id) {
-        var root = [
-          {UID: 'jasdlfdlkdkjasdf', Title: 'Some Image', path: '/test.png', portal_type: 'Image', getIcon: "image.png"},
-          {UID: 'asdlfkjasdlfkjasdf', Title: 'News', path: '/news', portal_type: 'Folder', getIcon: ""},
-          {UID: '124asdfasasdaf34', Title: 'About', path: '/about', portal_type: 'Folder', getIcon: ""},
-          {UID: 'asdf1234', Title: 'Projects', path: '/projects', portal_type: 'Folder', getIcon: ""},
-          {UID: 'asdf1234gsad', Title: 'Contact', path: '/contact', portal_type: 'Document', getIcon: "document.png"},
-          {UID: 'asdv34sdfs', Title: 'Privacy Policy', path: '/policy', portal_type: 'Document', getIcon: ""},
-          {UID: 'asdfasdf234sdf', Title: 'Our Process', path: '/our-process', portal_type: 'Folder', getIcon: "folder.png"},
-          {UID: 'asdhsfghyt45', Title: 'Donate', path: '/donate-now', portal_type: 'Document', getIcon: ""},
-        ];
-        var about = [
-          {UID: 'gfn5634f', Title: 'About Us', path: '/about/about-us', portal_type: 'Document', getIcon: ""},
-          {UID: '45dsfgsdcd', Title: 'Philosophy', path: '/about/philosophy', portal_type: 'Document', getIcon: ""},
-          {UID: 'dfgsdfgj675', Title: 'Staff', path: '/about/staff', portal_type: 'Folder', getIcon: ""},
-          {UID: 'sdfbsfdh345', Title: 'Board of Directors', path: '/about/board-of-directors', portal_type: 'Document', getIcon: ""}
-        ];
-
-        var staff = [
-          {UID: 'asdfasdf9sdf', Title: 'Mike', path: '/about/staff/mike', portal_type: 'Document', getIcon: ""},
-          {UID: 'cvbcvb82345', Title: 'Joe', path: '/about/staff/joe', portal_type: 'Document', getIcon: ""},
-          {UID: 'hax0r', Title: '<script>window.xss=1</script>', path: '/about/staff/xss', portal_type: 'Document', getIcon: ""}
-        ];
-
-        var addMissingFields = function(item) {
-          item.getURL = 'http://localhost:8081' + item.path;
-          item.is_folderish = item.portal_type === 'Folder';
-          item.review_state = 'published';
-        };
 
-        _.each(root, addMissingFields);
-        _.each(about, addMissingFields);
-        _.each(staff, addMissingFields);
-
-        var searchables = about.concat(root).concat(staff);
 
         var addUrls = function(list) {
           /* add getURL value */
           for (var i = 0; i < list.length; i = i + 1) {
-            var data = list[i];
-            data.getURL = window.location.origin + data.path;
+            var item = list[i];
+            item.getURL = window.location.origin + item.path;
           }
         };
-        addUrls(searchables);
+
         addUrls(root);
-        root[0].getURL = window.location.origin + '/exampledata/test.png';
+        addUrls(folder1);
+        addUrls(folder2);
 
-        var results = [];
+        searchables = root.concat(folder1).concat(folder2);
 
         // grab the page number and number of items per page -- note, page is 1-based from Select2
         var batch = getQueryVariable(xhr.url, 'batch');
@@ -113,7 +106,8 @@ define([
           }
         }
 
-        // this seach is for basically searching the entire hierarchy -- this IS NOT the browse "search"
+        var results = [];
+
         function search(items, term) {
           results = [];
           if (term === undefined) {
@@ -137,7 +131,7 @@ define([
                 }
               }
             } else {
-              q = term.toLowerCase();
+              q = term.toLowerCase().slice(0, -1);  // "*" removed
               if (keys.indexOf(q) > -1) {
                 results.push(item);
               }
@@ -147,12 +141,14 @@ define([
 
         function browse(items, q, p) {
           results = [];
-          var path = p.substring(0, p.length - 1);
-          var splitPath = path.split('/');
+          var path = p;
+          // var path = p.substring(0, p.length - 1);
+          // var splitPath = path.split('/');
           var fromPath = [];
           _.each(items, function(item) {
             var itemSplit = item.path.split('/');
-            if (item.path.indexOf(path) === 0 && itemSplit.length - 1 === splitPath.length) {
+            // if (item.path.indexOf(path) === 0 && itemSplit.length - 1 === splitPath.length) {  // search recursively
+            if (item.path.indexOf(path) === 0) {
               fromPath.push(item);
             }
           });
@@ -170,7 +166,7 @@ define([
         xhr.respond(200, { 'Content-Type': 'application/json' },
           JSON.stringify({
             total: results.length,
-            results: results.slice(page * pageSize, (page * pageSize) + (pageSize - 1))
+            results: results.slice(page * pageSize, (page * pageSize) + pageSize)
           })
         );
       });
@@ -178,353 +174,194 @@ define([
 
     afterEach(function() {
       this.server.restore();
-      $el.remove();
+      $container.remove();
       $('.select2-sizer, .select2-drop').remove();
     });
 
+    // test cases
+    // - [x] initialize pattern
+    // - [x] click on browse opens result list
+    // - [x] click on search opens result list
+    // - [x] click on browse with already selected result items opens result list
+    // - [x] click on search with already selected result items opens result list
+    // - [ ] browse to item and select it
+    // - [x] selected item is removed from result list
+    // - [ ] don't allow to select items which are not selectable
+    // - [ ] don't show non-selectable and non folderish items
+    // - [x] only search in current path
+    // - [x] search item and select it
+    // - [x] deselect an item from result list
+    // - [x] selection from favorites opens path
+
+    var initializePattern = function (options) {
+      options = options || {};
+      options.vocabularyUrl = '/relateditems-test.json';
+      options = JSON.stringify(options);
+      $container = $('<div><input class="pat-relateditems" /></div>');
+      $container.appendTo('body');
+      var pattern = $('.pat-relateditems', $container)
+        .attr('data-pat-relateditems', options)
+        .patternRelateditems()
+        .data('patternRelateditems');
+      return pattern;
+
+    };
+
     it('test initialize', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      expect($('.select2-container-multi', $el)).to.have.length(1);
-      expect($('.pattern-relateditems-container', $el)).to.have.length(1);
-      expect($('.pattern-relateditems-path', $el)).to.have.length(1);
-    });
 
-    it('select an item by clicking add button', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      initializePattern();
 
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect($('.pattern-relateditems-result-select')).to.have.length(14);
-      $('.pattern-relateditems-result-select').first().on('click', function() {
-        expect(pattern.$el.select2('data')).to.have.length(1);
-        expect(pattern.$el.select2('val')[0]).to.equal('gfn5634f');
-      }).click();
-      clock.tick(1000);
+      expect($('.select2-container-multi'), $container).to.have.length(1);
+      expect($('.pattern-relateditems-container'), $container).to.have.length(1);
+      expect($('.pattern-relateditems-container .toolbar .path-wrapper'), $container).to.have.length(1);
     });
 
-    it('deselect an item from selected items using click', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
+    it('browse roundtrip', function () {
+      var pattern = initializePattern();
       var clock = sinon.useFakeTimers();
+      var $input;
 
-      pattern.$el.select2('open');
+      // open up result list by clicking on "browse"
+      $('.mode.browse', $container).click();
       clock.tick(1000);
 
-      $('.pattern-relateditems-result-select').first().on('click', function() {
-        expect(pattern.$el.select2('data')).to.have.length(1);
-      }).click();
-      clock.tick(1000);
-      // deselect our first choice
-      var $choice = $('.select2-search-choice').first();
-      $choice.find('.select2-search-choice-close').click();
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect(pattern.$el.select2('val')).to.have.length(0);
-
-      // // Need to simulate a backspace to remove the selected item: below doesn't work
-      // var backspaceEvent = $.Event('keydown');
-      // backspaceEvent.ctrlKey = false;
-      // backspaceEvent.which = 8;
-      // $('.select2-search-field input').trigger( backspaceEvent );
-      // expect(pattern.$el.select2('data')).to.have.length(0);
-    });
-
-    it('deselect an item from results using click', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      var clock = sinon.useFakeTimers();
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(16);
 
-      pattern.$el.select2('open');
-      clock.tick(1000);
-
-      var $result = $('.pattern-relateditems-result').first();
-
-      expect($result.is('.pattern-relateditems-active')).to.equal(false);
-
-      $('.pattern-relateditems-result-select', $result).click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
+      // compare result list with test data
+      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
+        return $(el).text().trim();
+      });
+      stringtext = _.sortBy(stringtext);
 
-      expect($result.is('.pattern-relateditems-active')).to.equal(true);
-      $('.pattern-relateditems-result-select', $result).click();
+      // ... compare the whole list, sorted
+      expect(stringtext.length).to.be.equal(searchables.length);
+      _.sortBy(searchables, 'Title').map(function (el, index) {
+        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
+      });
 
-      expect($result.is('.pattern-relateditems-active')).to.equal(false);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect(pattern.$el.select2('val')).to.have.length(0);
-    });
+      // PT 2
 
-    it('allow only a single type to be selectable', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems" />' +
-        '</div>').appendTo('body');
-      var opts = {
-        vocabularyUrl: '/relateditems-test.json',
-        selectableTypes: ['Image']
-      };
-      var pattern = $('.pat-relateditems', $el).attr('data-pat-relateditems', JSON.stringify(opts)).patternRelateditems().data('patternRelateditems');
+      // select one element
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1');
 
-      var clock = sinon.useFakeTimers();
+      // PT 3
 
-      pattern.$el.select2('open');
+      // click again on browse, should open up result list again, this time without 'UID1'
+      $('.mode.browse', $container).click();
       clock.tick(1000);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-
-      $('.pattern-relateditems-result-select').first().click();
-      expect(pattern.$el.select2('data')).to.have.length(0);
 
-      $('.contenttype-image:parent').first().click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
-    });
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(15);
 
-    it('clicking folder button filters to that folder', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // add another one
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
 
-      var clock = sinon.useFakeTimers();
+      // remove first one
+      $($('a.select2-search-choice-close')[0]).click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2');
 
-      pattern.$el.select2('open');
+      // search for...
+      $input = $('.select2-search-field input.select2-input');
+      $input.click().val('Ima');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
       clock.tick(1000);
-      var $items = $('.select2-results > li');
-      expect(pattern.browsing).to.be.equal(false);
-      expect($('.pattern-relateditems-result-browse', $items)).to.have.length(5);
-      $('.pattern-relateditems-result-browse', $items).first().on('click', function() {
-        expect(pattern.browsing).to.be.equal(true);
-        expect(pattern.currentPath).to.equal($(this).attr('data-path'));
-      }).click();
-    });
+      expect($('.pattern-relateditems-result-select')).to.have.length(3);
 
-    it('after selecting a folder, it remains in the results list', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // add first from result
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID8');
 
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect($('.pattern-relateditems-result-select')).to.have.length(14);
-      $('.pattern-relateditems-result-path')
-        .filter(function() { return $(this).text() === '/about'; })
-        .click();
-      clock.tick(1000);
-      expect(pattern.$el.select2('val')[0]).to.equal('124asdfasasdaf34');
-      var result = $('.pattern-relateditems-result-path')
-        .filter(function() { return $(this).text() === '/about'; });
-      expect(result.length).to.equal(1);
     });
 
-    it('clicking on breadcrumbs goes back up', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
+    it('search roundtrip', function () {
+      var pattern = initializePattern({'selectableTypes': ['Page']});
       var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
+      var $input;
 
+      // open up result list by clicking on "browse"
+      $('.mode.search', $container).click();
       clock.tick(1000);
-      var $items = $('.select2-results > li');
-      expect(pattern.browsing).to.be.equal(false);
-      expect($('.pattern-relateditems-result-browse', $items)).to.have.length(5);
-      $('.pattern-relateditems-result-browse', $items).first().click();
-      clock.tick(1000);
-      var $crumbs = $('.pattern-relateditems-path a.crumb');
-      // /about/staff
-      expect($crumbs).to.have.length(3);
-      // Staff XSS bomb
-      expect(window.xss).not.equal(1);
-      // /about
-      $crumbs.eq(1).on('click', function() {
-      }).click();
-      clock.tick(1000);
-      expect(pattern.currentPath).to.equal('/about');
-    });
 
-    it('maximum number of selected items', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(11);
 
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-
-      $('.pattern-relateditems-result-select').first().click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
-      $('.pattern-relateditems-result-select').last().click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
-    });
-
-    it('init selection', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-    });
+      // compare result list with test data
+      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
+        return $(el).text().trim();
+      });
+      stringtext = _.sortBy(stringtext);
 
-    it('test tree initialized', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
+      // ... compare the whole list, sorted
+      var mySearchables = searchables.filter(function (item) {
+        return item.portal_type === 'Page';
+      });
+      expect(stringtext.length).to.be.equal(mySearchables.length);
+      _.sortBy(mySearchables, 'Title').map(function (el, index) {
+        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
+      });
 
-      var clock = sinon.useFakeTimers();
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // PT 2
 
-      clock.tick(1000);
+      // select one element
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1');
 
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
+      // PT 3
 
+      // click again on browse, should open up result list again, this time without 'UID1'
+      $('.mode.search', $container).click();
       clock.tick(1000);
 
-      expect($el.find('.pat-tree ul li').length).to.equal(4);
-    });
-
-    it('test tree select', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-
-      var clock = sinon.useFakeTimers();
-      $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(10);
 
-      clock.tick(1000);
+      // add another one
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
 
-      expect($el.find('.crumb').length).to.equal(1);
+      // remove first one
+      $($('a.select2-search-choice-close')[0]).click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2');
 
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
+      // search for...
+      $input = $('.select2-search-field input.select2-input');
+      $input.click().val('document15');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
       clock.tick(1000);
+      expect($('.pattern-relateditems-result-select')).to.have.length(1);
 
-      $el.find('.pat-tree ul li .pattern-relateditems-buttons a').eq(2).trigger('click');
-      clock.tick(1000);
+      // add first from result
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID15');
 
-      expect($el.find('.crumb').length).to.equal(2);
     });
 
-    it('test tree sub select', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-
-      var clock = sinon.useFakeTimers();
-      $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      clock.tick(1000);
-
-      expect($el.find('.crumb').length).to.equal(1);
-
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
-      clock.tick(1000);
-
-      $el.find('.pat-tree ul li div').eq(1).trigger('click');
-      clock.tick(1000);
-
-      $el.find('.pat-tree ul li .pattern-relateditems-buttons a').eq(2).trigger('click');
-      clock.tick(1000);
-
-      expect($el.find('.crumb').length).to.equal(3);
+    it('empty favorites not shown', function () {
+      var pattern = initializePattern();
+      expect($('button.favorites', $container).length).to.be.equal(0);
     });
 
-    it('test tree cancel', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-
+    it('use favorites', function () {
+      var pattern = initializePattern({'favorites': [{'title': 'root', 'path': '/'}, {'title': 'folder1', 'path': '/folder1'}]});
       var clock = sinon.useFakeTimers();
-      $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      var $input;
 
+      // open up result list by clicking on "browse"
+      $('button.favorites', $container).click();
       clock.tick(1000);
 
-      expect($el.find('.crumb').length).to.equal(1);
-
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
+      // click "folder1"
+      $($('.favorites li a')[1]).click();
       clock.tick(1000);
 
-      $el.find('.pattern-relateditems-tree-cancel').trigger('click');
-      clock.tick(1000);
+      expect($('.path-wrapper .pattern-relateditems-path-label', $container).text()).to.be.equal('Current path:');
+      expect($($('.path-wrapper .crumb')[1], $container).text()).to.be.equal('folder1');
 
-      expect($el.find('.crumb').length).to.equal(1);
-      expect($el.find('.tree-container').is(':visible')).to.equal(false);
     });
 
   });


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T16:15:27-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/6a9c1988a75b3f3a67be620bfd71e97826f127f8

TinyMCE: Simplify definition of custom imageScales by passing a JSON string.

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/tinymce/pattern.js
M mockup/patterns/tinymce/templates/image.xml
M mockup/tests/pattern-tinymce-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 4c5c94e..0d4cbf4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -115,6 +115,9 @@ New:
 
   [thet]
 
+- TinyMCE pattern: simplify image scale options to a JSON string.
+
+
 Fixes:
 
 - Upload pattern LESS: included omitted styles for progress bar
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index 6890cdb..db1ce11 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -462,7 +462,7 @@ define([
         altText: this.options.text.alt,
         imageAlignText: this.options.text.imageAlign,
         scaleText: this.options.text.scale,
-        scales: this.options.scales,
+        imageScales: this.options.imageScales,
         cancelBtn: this.options.text.cancelBtn,
         insertBtn: this.options.text.insertBtn
       });
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index f5ea50a..a69a34b 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -4,7 +4,7 @@
  *    relatedItems(object): Related items pattern options. ({ attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"], batchSize: 20, basePath: "/", vocabularyUrl: null, width: 500, maximumSelectionSize: 1, placeholder: "Search for item on site..." })
  *    upload(object): Upload pattern options. ({ attributes: look at upload pattern for getting the options list })
  *    text(object): Translation strings ({ insertBtn: "Insert", cancelBtn: "Cancel", insertHeading: "Insert link", title: "Title", internal: "Internal", external: "External", email: "Email", anchor: "Anchor", subject: "Subject" image: "Image", imageAlign: "Align", scale: "Size", alt: "Alternative Text", externalImage: "External Image URI"})
- *    scales(string): TODO: is this even used ('Listing (16x16):listing,Icon (32x32):icon,Tile (64x64):tile,Thumb (128x128):thumb,Mini (200x200):mini,Preview (400x400):preview,Large (768x768):large')
+ *    imageScales(string): Image scale name/value object-array or JSON string for use in the image dialog.
  *    targetList(array): TODO ([ {text: "Open in this window / frame", value: ""}, {text: "Open in new window", value: "_blank"}, {text: "Open in parent window / frame", value: "_parent"}, {text: "Open in top frame (replaces all frames)", value: "_top"}])
  *    imageTypes(string): TODO ('Image')
  *    folderTypes(string): TODO ('Folder,Plone Site')
@@ -153,13 +153,19 @@ define([
       prependToUrl: '',
       appendToUrl: '',
       linkAttribute: 'path', // attribute to get link value from data
-      prependToScalePart: '/imagescale/', // some value here is required to be able to parse scales back
+      prependToScalePart: '/imagescale/',
       appendToScalePart: '',
       appendToOriginalScalePart: '',
       defaultScale: 'large',
-      scales: _t('Listing (16x16):listing,Icon (32x32):icon,Tile (64x64):tile,' +
-              'Thumb (128x128):thumb,Mini (200x200):mini,Preview (400x400):preview,' +
-              'Large (768x768):large'),
+      imageScales: [
+        {title: 'Mini', value: 'mini'},
+        {title: 'Thumb', value: 'thumb'},
+        {title: 'Listing', value: 'listing'},
+        {title: 'Preview', value: 'preview'},
+        {title: 'Tile', value: 'tile'},
+        {title: 'Icon', value: 'icon'},
+        {title: 'Large', value: 'large'}
+      ],
       targetList: [
         {text: _t('Open in this window / frame'), value: ''},
         {text: _t('Open in new window'), value: '_blank'},
@@ -243,16 +249,9 @@ define([
     generateImageUrl: function(data, scale_name) {
       var self = this;
       var url = self.generateUrl(data);
-      if (scale_name !== ''){
-        var part = scale_name;
-        for(var i=0; i<self.options.scales.length; i=i+1){
-          if(self.options.scales[i].name === scale_name){
-            part = self.options.scales[i].part;
-          }
-        }
-        url = (url + self.options.prependToScalePart + part +
-               self.options.appendToScalePart);
-      }else{
+      if (scale_name) {
+        url = url + self.options.prependToScalePart + scale_name + self.options.appendToScalePart;
+      } else {
         url = url + self.options.appendToOriginalScalePart;
       }
       return url;
@@ -336,6 +335,11 @@ define([
       self.linkModal = self.imageModal = self.uploadModal = self.pasteModal = null;
       // tiny needs an id in order to initialize. Creat it if not set.
       var id = utils.setId(self.$el);
+
+      if (self.options.imageScales && typeof self.options.imageScales === 'string') {
+        self.options.imageScales = JSON.parse(self.options.imageScales);
+      }
+
       var tinyOptions = self.options.tiny;
       if (self.options.inline === true) {
         self.options.tiny.inline = true;
@@ -359,19 +363,10 @@ define([
       };
 
       self.initLanguage(function() {
-        if(typeof(self.options.scales) === 'string'){
-          self.options.scales = _.map(self.options.scales.split(','), function(scale){
-            scale = scale.split(':');
-            return {
-              part: scale[1],
-              name: scale[1],
-              label: scale[0]
-            };
-          });
-        }
         if(typeof(self.options.folderTypes) === 'string'){
           self.options.folderTypes = self.options.folderTypes.split(',');
         }
+
         if(typeof(self.options.imageTypes) === 'string'){
           self.options.imageTypes = self.options.imageTypes.split(',');
         }
diff --git a/mockup/patterns/tinymce/templates/image.xml b/mockup/patterns/tinymce/templates/image.xml
index 52b4ee8..f3e0fcd 100644
--- a/mockup/patterns/tinymce/templates/image.xml
+++ b/mockup/patterns/tinymce/templates/image.xml
@@ -19,9 +19,9 @@
             <label><%- scaleText %></label>
             <select name="scale">
               <option value="">Original</option>
-                <% _.each(scales, function(scale){ %>
-                  <option value="<%- scale.part %>" <% if(scale.name === options.defaultScale){ %>selected<% } %> >
-                    <%- scale.label %>
+                <% _.each(imageScales, function(scale){ %>
+                  <option value="<%- scale.value %>" <% if(scale.value === options.defaultScale){ %>selected<% } %> >
+                    <%- scale.title %>
                   </option>
                 <% }); %>
             </select>
diff --git a/mockup/tests/pattern-tinymce-test.js b/mockup/tests/pattern-tinymce-test.js
index 5a208d1..ffc1101 100644
--- a/mockup/tests/pattern-tinymce-test.js
+++ b/mockup/tests/pattern-tinymce-test.js
@@ -296,7 +296,7 @@ define([
       $('#' + $('#tinylink-uploadImage').data().navref).click();
       expect($('#tinylink-uploadImage').parent().hasClass('active')).to.equal(true);
       var blob;
-      try{
+      try {
         blob = new Blob(['dummy data'],  {type: 'image/png'});
       } catch (err) {
         var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
@@ -312,6 +312,25 @@ define([
       expect($('#tinylink-image').parent().hasClass('active')).to.equal(true);
       expect(pattern.imageModal.getLinkUrl()).to.equal('/blah.png/imagescale/large');
     });
+    it('test add image with custom scale', function() {
+      var pattern = createTinymce({
+        prependToUrl: 'resolveuid/',
+        linkAttribute: 'UID',
+        prependToScalePart: '/@@images/image/',
+        imageScales: '[{"title": "Custom Scale", "value": "customscale"}]'
+      });
+      pattern.addImageClicked();
+      pattern.imageModal.linkTypes.image.getEl().select2('data', {
+        UID: 'foobar',
+        portal_type: 'Document',
+        Title: 'Foobar',
+        path: '/foobar'
+      });
+      pattern.imageModal.linkType = 'image';
+      expect(pattern.imageModal.$scale.html().indexOf('Custom Scale')).to.be.greaterThan(-1);
+      pattern.imageModal.$scale.find('[value="customscale"]')[0].selected = true;
+      expect(pattern.imageModal.getLinkUrl()).to.equal('resolveuid/foobar/@@images/image/customscale');
+    });
 
     it('test adds data attributes', function() {
       var pattern = createTinymce();


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T18:10:49-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/e004cecf9fe3a2f4e2db9a67e9a7e483e6bad8d3

Changelog additions

Files changed:
M CHANGES.rst
M package.json

diff --git a/CHANGES.rst b/CHANGES.rst
index 0d4cbf4..969e99d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,13 +1,77 @@
 Changelog
 =========
 
-2.3.1 (unreleased)
+2.4.0 (unreleased)
 ------------------
 
 Incompatibilities:
 
+- The related items and structure patterns have changed quite a lot.
+  Customizations might break due to these changes.
+  See below.
+
+
 New:
 
+- Related Items refactorings:
+
+    - Make "search" and "browse" mode user-selectable via buttons.
+
+    - Remove obsolete tree widget, use "browse" mode instead.
+
+    - Let "search" mode search recursively.
+
+    - Let "browse" mode start from current path.
+
+    - Immediately open select2 results when clicking on "Browse" or "Search".
+
+    - Show only selectable items in "search" mode, if defined.
+
+    - Show only selectable and folderish items in "browse" mode, if selctable items are defined.
+
+    - Exclude already selected items in result list.
+
+    - Default closeOnSelect to true.
+
+    - Show "Open folder" arrow only when in "browse" mode.
+
+    - Seperate templates from JavaScript into xml files.
+
+    - Allow optional image and file upload (especially useful for image and file reference widgets).
+
+    - Allow configuration of "favorites" to quickly switch the current path via a dropdown menu.
+
+    - Adapt TinyMCE pattern to related item changes and remove now obsolete selection and result templates.
+
+  [thet]
+
+
+- Structure pattern refactorings:
+
+    - Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with visibility: hidden or opacity: 0). That in addition to elements, which are not visible at all and do not use screen space (display: none). Prevents upload form in structure pattern to be closed when opening the file selection tool.
+
+    - Use thumb scale for image preview in rename dialog and optimize the rename dialog layout.
+
+    - Remove ``pat-relateditems`` path selection widget but make sure, the path can still be set via navigation within the structure pattern.
+
+    - Add ``css`` action menu item option and always do a pattern scan on action menu items. This allows to set patterns on them, e.g. to open a modal or use tooltips.
+
+    - Sort Available Columns dialog entries.
+
+  [thet]
+
+
+- Contentloader pattern: Remotely loaded HTML content is wrapped in a ``div`` element, to allow jQuery to find also the first element.
+  jQuery starts to search at it's first child element.
+  [thet]
+
+- TinyMCE: Simplify definition of custom imageScales by passing a JSON string.
+  [thet]
+
+- Upload pattern: Add option ``allowPathSelection`` to disable the related items path selection.
+  [thet]
+
+
 Fixes:
 
 - Update outdated links in Learn.md  
@@ -23,100 +87,71 @@ Incompatibilities:
   [thet]
 
 - Needs RequireJS configuration for ``mockup-patterns-relateditems-url``.
+  [thet]
+
 
 New:
 
-- Fix urls in modals not opening in new window
-  [vangheem]
-- Contentloader pattern: Remotely loaded HTML content is wrapped in a ``div`` element, to allow jQuery to find also the first element.
-  jQuery starts to search at it's first child element.
-  [thet]
+- Related items pattern: Result button style allow for more room for scrollbar, and have subltle color change on hover to deliniate user-expected behavior of browsing vs. selecting item.
+  [seanupton]
 
-- Add option ``allowPathSelection`` to the upload widget to explicitly disable the pat-relateditems path selection.
-  [thet]
+ - Related items pattern: Related Items pattern: content icon cross-compatibility with Plone 5.x and 4.x (via plone.app.widgets 1.x); in Plone 5 getIcon returned from brain is a boolean, in Plone 4, it is a string -- use this to show content icons in Plone 5 as previous, but also show image scale in Plone 4, but only for images.  This is the most reasonable solution to avoid requesting many broken image scales (404) in Plone 4.
+  [seanupton]
 
-- Update safe bower.json dependencies except backbone which tests would fail.
-  Keep jQuery at ``1.11.3`` as long as this might be used in Plone 4.x together with plone.app.jquerytools, which uses the deprecated internal ``$.buildFragments`` method.
-  [thet]
-- Related items pattern:
-  OK - Remove obsolete tree widget
-  OK - Make Search/Browse mode user-selectable via buttons
-  OK - Let search search recursively
-  OK - Let search mode use last browse mode's path
-  OK - Show only selectable items in search mode, if defined.
-  OK - Search only in current path in browse mode.
-  - Show only selectable and folderish items in browse mode, if selctable items are defined.
-  - Optional Image Upload
-  - Favorites based on registry path entries
-
-- Related items pattern refactoring:
-  - [x] Make "search" and "browse" mode user-selectable via buttons.
-  - [x] Remove obsolete tree widget, use "browse" mode instead.
-    [x] Let "browse" mode start from current path.
-  - [x] Show only selectable items in "search" mode, if defined.
-  - [ ] Show only selectable and folderish items in browse mode, if selctable items are defined.
-  - [ ] Allow optional image and file upload (especially useful for image and file reference widgets).
-  - [ ] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
-  - [x] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
-  - [x] Default ``closeOnSelect`` to ``true``.
-  - [x] Exclude already selected items in result list.
-  - [x] Immediately open select2 results when clicking on "Browse" or "Search".
-  - [x] Show "Open folder" arrow only when in browse mode.
-  - [x] Allow optional image and file upload (especially useful for image and file reference widgets).
-  - [x] Allow configuration of favorites based on registry path entries and show them as dropdowns to quickly navigate to these locations.
-  - [x] Default ``closeOnSelect`` to ``true``.
-  - [x] Exclude already selected items in result list.
-  - [x] Immediately open select2 results when clicking on "Browse" or "Search".
-  - [x] Seperate templates from JavaScript into xml files.
-  [thet]
+- Structure pattern refactorings:
 
+    - Allow definition of action menu items not only as dropdowns but also as buttons.
 
-- Update package.json dependencies, except less which has incompatible changes since 2.0 (less.parse).
-  [thet]
+    - Add ``openItem`` and ``editItem`` actions as buttons and remove the open icon from the title column.
 
-- add body class for active popover
-  [vangheem]
+    - Open ``openItem`` links according to ``typeToViewAction`` instead of default with the ``/view`` postfix.
+
+    - Open ``editItem`` under ``/@@edit`` instead ``/edit``.
+
+    - Remove JS event handlers for externally opening simple URLs and use the href attribute instead.
+
+    - Add ``iconCSS`` option for action menus items to add icons.
+
+    - Add ``modal`` option for action menus items to allow links open in a modal.
+
+    - Add ``iconSize`` option to set the icon size if a item has an image.
+
+    - Use icons for all actionmenu entries.
+
+    - Use the tooltip pattern for all actionmenu buttons.
+
+    - Use pat-moment also for ``start``, ``end`` and ``last_comment_date`` columns.
+
+    - For columns with date fields, show an empty column if the date value is 'None'.
+
+    - Remove the checkbox and the actionmenu from the breadcrumbs bar for the current active folder to simplify the structure pattern.
+      The actionmenu contained redundant actions (cut, copy, paste) and selecting the current folder is possible one level up.
+
+    - Don't show empty alerts with ``alert-warning`` CSS class.
+      Show them transparent but in the same height as if they were not empty.
+      Align HTML structue with bootstrap ones and use ``<strong>`` for alert labels.
+
+    - Fix rearrange button
+
+  [thet]
 
 - Be able to set structure status from server with object of { text: '', label: '', type: 'warning'}
   so you can customize the status message from ajax handlers.
   [vangheem]
 
-- Add ``test-dev-ff`` as Makefile target and the related grunt/karma setup to run tests in Firefox.
-  [thet]
+- Add body class for active popover.
+  [vangheem]
 
-- Structure pattern:
-  - Sort Available Columns dialog entries.
-  - Remove ``pat-relateditems`` path selection widget but make sure, the path can still be set via navigation within the structure pattern.
-  - Allow definition of action menu items not only as dropdowns but also as buttons.
-  - Add ``openItem`` and ``editItem`` actions as buttons and remove the open icon from the title column.
-  - Open ``openItem`` links according to ``typeToViewAction`` instead of default with the ``/view`` postfix.
-  - Open ``editItem`` under ``/@@edit`` instead ``/edit``.
-  - Remove JS event handlers for externally opening simple URLs and use the href attribute instead.
-  - Add ``iconCSS`` option for action menus items to add icons.
-  - Add ``patternClasses`` option for action menu items to be able to set abitrary patterns (or classes) on the anchor tag of the menu item.
-  - Add ``modal`` option for action menus items to allow links open in a modal.
-  - Add ``iconSize`` option to set the icon size if a item has an image.
-  - Use icons for all actionmenu entries.
-  - Use the tooltip pattern for all actionmenu buttons.
-  - Use pat-moment also for ``start``, ``end`` and ``last_comment_date`` columns.
-  - For columns with date fields, show an empty column if the date value is 'None'.
-  - Remove the checkbox and the actionmenu from the breadcrumbs bar for the current active folder to simplify the structure pattern.
-    The actionmenu contained redundant actions (cut, copy, paste) and selecting the current folder is possible one level up.
-  - Don't show empty alerts with ``alert-warning`` CSS class.
-    Show them transparent but in the same height as if they were not empty.
-    Align HTML structue with bootstrap ones and use ``<strong>`` for alert labels.
-  - Fix rearrange button
-  - Use thumb scale for image preview in rename dialog and optimize the rename dialog layout.
+- Add ``test-dev-ff`` as Makefile target and the related grunt/karma setup to run tests in Firefox.
   [thet]
 
-- Contentloader pattern: Remotely loaded HTML content is wrapped in a ``div`` element, to allow jQuery to find also the first element.
-  jQuery starts to search at it's first child element.
+- Update bower.json dependencies except backbone which tests would fail.
+  Keep jQuery at ``1.11.3`` as long as this might be used in Plone 4.x together with plone.app.jquerytools, which uses the deprecated internal ``$.buildFragments`` method.
   [thet]
 
+- Update package.json dependencies, except less which has incompatible changes since 2.0 (less.parse).
   [thet]
 
-- TinyMCE pattern: simplify image scale options to a JSON string.
-
 
 Fixes:
 
@@ -132,21 +167,17 @@ Fixes:
 - Fix issues where querystring widget was broke due to issues with
   checks for undefined
   [datakurre]
-- Adapt TinyMCE to relateditems changes and remove the selection and result templates.
-  [thet]
 
-- Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with ``visibility: hidden`` or ``opacity: 0``).
-  That in addition to elements, which are not visible at all and do not use screen space (``display: none``).
-  Prevents upload form in structure pattern to be closed when opening the file selection tool.
-  [thet]
+- Fix urls in modals not opening in new window
+  [vangheem]
 
-- Escape input into select2 widget
+- Fix positioning of popovers in structure
   [vangheem]
 
-- Fix issue where using filter when paging would not work in the structure pattern
+- Escape input into select2 widget
   [vangheem]
 
-- Fix positioning of popovers in structure
+- Fix issue where using filter when paging would not work in the structure pattern
   [vangheem]
 
 - Fix structure to always default to page 1 of results when moving between breadcrumbs
diff --git a/package.json b/package.json
index 50a070a..442b370 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "mockup",
-  "version": "2.3.1",
+  "version": "2.4.0",
   "description": "A collection of client side patterns for faster and easier web development",
   "homepage": "http://plone.github.io/mockup",
   "devDependencies": {


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-26T18:10:49-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/2a35f9342e6e94f6b946b38c79dd74b131d87bf8

manually apply seanuptons changes from: 98327d37d6a4b09233a290b972c8aa80738d6262 and 6ec3b4e133fa8d63a945009f876a7963470df003

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.relateditems.less
M mockup/patterns/relateditems/templates/result.xml
M mockup/patterns/relateditems/templates/selection.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 969e99d..e4c4019 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -46,6 +46,15 @@ New:
   [thet]
 
 
+- More Related items pattern:
+
+    - Result button style allow for more room for scrollbar, and have subltle color change on hover to deliniate user-expected behavior of browsing vs. selecting item.
+
+    - Related Items pattern: content icon cross-compatibility with Plone 5.x and 4.x (via plone.app.widgets 1.x); in Plone 5 getIcon returned from brain is a boolean, in Plone 4, it is a string -- use this to show content icons in Plone 5 as previous, but also show image scale in Plone 4, but only for images.  This is the most reasonable solution to avoid requesting many broken image scales (404) in Plone 4.
+
+  [seanupton]
+
+
 - Structure pattern refactorings:
 
     - Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with visibility: hidden or opacity: 0). That in addition to elements, which are not visible at all and do not use screen space (display: none). Prevents upload form in structure pattern to be closed when opening the file selection tool.
@@ -74,7 +83,7 @@ New:
 
 Fixes:
 
-- Update outdated links in Learn.md  
+- Update outdated links in Learn.md
   [staeff]
 
 
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index 45b811a..6f0b09f 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -121,6 +121,7 @@
     right: 0;
     display: inline-block;
     margin-top: -16px;
+    margin-right: 8px;
     text-align: right;
 
     a {
@@ -129,7 +130,12 @@
         line-height: 36px;
         display: block;
         height: 36px;
+
+        &:hover:before {
+            color:purple;
+        }
     }
+
 }
 
 .pattern-relateditems-result {
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
index 0471fe8..49a82f6 100644
--- a/mockup/patterns/relateditems/templates/result.xml
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -1,6 +1,6 @@
 <div class="pattern-relateditems-result">
   <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
-    <% if (typeof getIcon !== "undefined" && getIcon) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>
+    <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>
     <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
     <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
     <span class="pattern-relateditems-result-path"><%- path %></span>
diff --git a/mockup/patterns/relateditems/templates/selection.xml b/mockup/patterns/relateditems/templates/selection.xml
index d6d6e76..cabafec 100644
--- a/mockup/patterns/relateditems/templates/selection.xml
+++ b/mockup/patterns/relateditems/templates/selection.xml
@@ -1,5 +1,5 @@
 <span class="pattern-relateditems-item">
-  <% if (typeof getIcon !== "undefined" && getIcon) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>
+  <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>
   <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>
   <span class="pattern-relateditems-item-path"><%- path %></span>
 </span>


Repository: mockup


Branch: refs/heads/master
Date: 2016-08-28T05:58:25-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/0d4d7e2c9736167bc0bd90d18155f71a69726e32

Merge pull request #696 from plone/thet-a-lot

Relateditems refactoring + more

Files changed:
A mockup/patterns/relateditems/templates/breadcrumb.xml
A mockup/patterns/relateditems/templates/favorite.xml
A mockup/patterns/relateditems/templates/result.xml
A mockup/patterns/relateditems/templates/selection.xml
A mockup/patterns/relateditems/templates/toolbar.xml
A mockup/patterns/relateditems/upload.js
M CHANGES.rst
M mockup/js/bundles/docs.js
M mockup/js/config.js
M mockup/js/utils.js
M mockup/patterns/contentloader/pattern.js
M mockup/patterns/relateditems/pattern.js
M mockup/patterns/relateditems/pattern.relateditems.less
M mockup/patterns/structure/js/actionmenu.js
M mockup/patterns/structure/js/views/actionmenu.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/columns.js
M mockup/patterns/structure/js/views/upload.js
M mockup/patterns/structure/less/pattern.structure.less
M mockup/patterns/structure/pattern.js
M mockup/patterns/structure/templates/actionmenu.xml
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/tinymce/pattern.js
M mockup/patterns/tinymce/templates/image.xml
M mockup/patterns/upload/less/pattern.upload.less
M mockup/patterns/upload/pattern.js
M mockup/patterns/upload/templates/upload.xml
M mockup/tests/pattern-relateditems-test.js
M mockup/tests/pattern-tinymce-test.js
M package.json
D mockup/patterns/tinymce/templates/result.xml
D mockup/patterns/tinymce/templates/selection.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 7a5bfb5..e4c4019 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,16 +1,89 @@
 Changelog
 =========
 
-2.3.1 (unreleased)
+2.4.0 (unreleased)
 ------------------
 
 Incompatibilities:
 
+- The related items and structure patterns have changed quite a lot.
+  Customizations might break due to these changes.
+  See below.
+
+
 New:
 
+- Related Items refactorings:
+
+    - Make "search" and "browse" mode user-selectable via buttons.
+
+    - Remove obsolete tree widget, use "browse" mode instead.
+
+    - Let "search" mode search recursively.
+
+    - Let "browse" mode start from current path.
+
+    - Immediately open select2 results when clicking on "Browse" or "Search".
+
+    - Show only selectable items in "search" mode, if defined.
+
+    - Show only selectable and folderish items in "browse" mode, if selctable items are defined.
+
+    - Exclude already selected items in result list.
+
+    - Default closeOnSelect to true.
+
+    - Show "Open folder" arrow only when in "browse" mode.
+
+    - Seperate templates from JavaScript into xml files.
+
+    - Allow optional image and file upload (especially useful for image and file reference widgets).
+
+    - Allow configuration of "favorites" to quickly switch the current path via a dropdown menu.
+
+    - Adapt TinyMCE pattern to related item changes and remove now obsolete selection and result templates.
+
+  [thet]
+
+
+- More Related items pattern:
+
+    - Result button style allow for more room for scrollbar, and have subltle color change on hover to deliniate user-expected behavior of browsing vs. selecting item.
+
+    - Related Items pattern: content icon cross-compatibility with Plone 5.x and 4.x (via plone.app.widgets 1.x); in Plone 5 getIcon returned from brain is a boolean, in Plone 4, it is a string -- use this to show content icons in Plone 5 as previous, but also show image scale in Plone 4, but only for images.  This is the most reasonable solution to avoid requesting many broken image scales (404) in Plone 4.
+
+  [seanupton]
+
+
+- Structure pattern refactorings:
+
+    - Prevent popovers to be closed when clicking on non-visible elements which still use screen space (those with visibility: hidden or opacity: 0). That in addition to elements, which are not visible at all and do not use screen space (display: none). Prevents upload form in structure pattern to be closed when opening the file selection tool.
+
+    - Use thumb scale for image preview in rename dialog and optimize the rename dialog layout.
+
+    - Remove ``pat-relateditems`` path selection widget but make sure, the path can still be set via navigation within the structure pattern.
+
+    - Add ``css`` action menu item option and always do a pattern scan on action menu items. This allows to set patterns on them, e.g. to open a modal or use tooltips.
+
+    - Sort Available Columns dialog entries.
+
+  [thet]
+
+
+- Contentloader pattern: Remotely loaded HTML content is wrapped in a ``div`` element, to allow jQuery to find also the first element.
+  jQuery starts to search at it's first child element.
+  [thet]
+
+- TinyMCE: Simplify definition of custom imageScales by passing a JSON string.
+  [thet]
+
+- Upload pattern: Add option ``allowPathSelection`` to disable the related items path selection.
+  [thet]
+
+
 Fixes:
 
-- Update outdated links in Learn.md  
+- Update outdated links in Learn.md
   [staeff]
 
 
@@ -22,64 +95,74 @@ Incompatibilities:
 - Remove support for node version < ``0.11`` and update travis dependencies.
   [thet]
 
+- Needs RequireJS configuration for ``mockup-patterns-relateditems-url``.
+  [thet]
+
+
 New:
 
-- Related items pattern: result button style allow for more room
-  for scrollbar, and have subltle color change on hover to deliniate
-  user-expected behavior of browsing vs. selecting item.
+- Related items pattern: Result button style allow for more room for scrollbar, and have subltle color change on hover to deliniate user-expected behavior of browsing vs. selecting item.
   [seanupton]
 
-- Fix urls in modals not opening in new window
-  [vangheem]
+ - Related items pattern: Related Items pattern: content icon cross-compatibility with Plone 5.x and 4.x (via plone.app.widgets 1.x); in Plone 5 getIcon returned from brain is a boolean, in Plone 4, it is a string -- use this to show content icons in Plone 5 as previous, but also show image scale in Plone 4, but only for images.  This is the most reasonable solution to avoid requesting many broken image scales (404) in Plone 4.
+  [seanupton]
 
-- Update safe bower.json dependencies except backbone which tests would fail.
-  Keep jQuery at ``1.11.3`` as long as this might be used in Plone 4.x together with plone.app.jquerytools, which uses the deprecated internal ``$.buildFragments`` method.
-  [thet]
+- Structure pattern refactorings:
 
-- Update package.json dependencies, except less which has incompatible changes since 2.0 (less.parse).
-  [thet]
+    - Allow definition of action menu items not only as dropdowns but also as buttons.
 
-- add body class for active popover
-  [vangheem]
+    - Add ``openItem`` and ``editItem`` actions as buttons and remove the open icon from the title column.
+
+    - Open ``openItem`` links according to ``typeToViewAction`` instead of default with the ``/view`` postfix.
+
+    - Open ``editItem`` under ``/@@edit`` instead ``/edit``.
+
+    - Remove JS event handlers for externally opening simple URLs and use the href attribute instead.
+
+    - Add ``iconCSS`` option for action menus items to add icons.
+
+    - Add ``modal`` option for action menus items to allow links open in a modal.
+
+    - Add ``iconSize`` option to set the icon size if a item has an image.
+
+    - Use icons for all actionmenu entries.
+
+    - Use the tooltip pattern for all actionmenu buttons.
+
+    - Use pat-moment also for ``start``, ``end`` and ``last_comment_date`` columns.
+
+    - For columns with date fields, show an empty column if the date value is 'None'.
+
+    - Remove the checkbox and the actionmenu from the breadcrumbs bar for the current active folder to simplify the structure pattern.
+      The actionmenu contained redundant actions (cut, copy, paste) and selecting the current folder is possible one level up.
+
+    - Don't show empty alerts with ``alert-warning`` CSS class.
+      Show them transparent but in the same height as if they were not empty.
+      Align HTML structue with bootstrap ones and use ``<strong>`` for alert labels.
+
+    - Fix rearrange button
+
+  [thet]
 
 - Be able to set structure status from server with object of { text: '', label: '', type: 'warning'}
   so you can customize the status message from ajax handlers.
   [vangheem]
 
+- Add body class for active popover.
+  [vangheem]
+
 - Add ``test-dev-ff`` as Makefile target and the related grunt/karma setup to run tests in Firefox.
   [thet]
 
-- Structure pattern:
-  - Allow definition of action menu items not only as dropdowns but also as buttons.
-  - Add ``openItem`` and ``editItem`` actions as buttons and remove the open icon from the title column.
-  - Open ``openItem`` links according to ``typeToViewAction`` instead of default with the ``/view`` postfix.
-  - Open ``editItem`` under ``/@@edit`` instead ``/edit``.
-  - Remove JS event handlers for externally opening simple URLs and use the href attribute instead.
-  - Add ``iconCSS`` option for action menus items to add icons.
-  - Add ``modal`` option for action menus items to allow links open in a modal.
-  - Add ``iconSize`` option to set the icon size if a item has an image.
-  - Use icons for all actionmenu entries.
-  - Use the tooltip pattern for all actionmenu buttons.
-  - Use pat-moment also for ``start``, ``end`` and ``last_comment_date`` columns.
-  - For columns with date fields, show an empty column if the date value is 'None'.
-  - Remove the checkbox and the actionmenu from the breadcrumbs bar for the current active folder to simplify the structure pattern.
-    The actionmenu contained redundant actions (cut, copy, paste) and selecting the current folder is possible one level up.
-  - Don't show empty alerts with ``alert-warning`` CSS class.
-    Show them transparent but in the same height as if they were not empty.
-    Align HTML structue with bootstrap ones and use ``<strong>`` for alert labels.
-  - Fix rearrange button
+- Update bower.json dependencies except backbone which tests would fail.
+  Keep jQuery at ``1.11.3`` as long as this might be used in Plone 4.x together with plone.app.jquerytools, which uses the deprecated internal ``$.buildFragments`` method.
+  [thet]
 
+- Update package.json dependencies, except less which has incompatible changes since 2.0 (less.parse).
   [thet]
 
-Fixes:
 
-- Related Items pattern: content icon cross-compatibility with Plone
-  5.x and 4.x (via plone.app.widgets 1.x); in Plone 5 getIcon returned
-  from brain is a boolean, in Plone 4, it is a string -- use this to
-  show content icons in Plone 5 as previous, but also show image scale
-  in Plone 4, but only for images.  This is the most reasonable
-  solution to avoid requesting many broken image scales (404) in Plone 4.
-  [seanupton]
+Fixes:
 
 - Upload pattern LESS: included omitted styles for progress bar
   in upload patttern by importing seletected styles from Bootstrap LESS.
@@ -94,13 +177,16 @@ Fixes:
   checks for undefined
   [datakurre]
 
-- Escape input into select2 widget
+- Fix urls in modals not opening in new window
   [vangheem]
 
-- Fix issue where using filter when paging would not work in the structure pattern
+- Fix positioning of popovers in structure
   [vangheem]
 
-- Fix positioning of popovers in structure
+- Escape input into select2 widget
+  [vangheem]
+
+- Fix issue where using filter when paging would not work in the structure pattern
   [vangheem]
 
 - Fix structure to always default to page 1 of results when moving between breadcrumbs
diff --git a/mockup/js/bundles/docs.js b/mockup/js/bundles/docs.js
index 8c787aa..22e6d65 100644
--- a/mockup/js/bundles/docs.js
+++ b/mockup/js/bundles/docs.js
@@ -32,156 +32,36 @@ require([
         description: 'All the patterns you\'ll ever need',
         autotoc: false,
         patterns: [
-          { id: 'autotoc',
-            title: 'Autotoc',
-            description: 'Automatically generate a table of contents',
-            url: 'patterns/autotoc/pattern.js'
-          },
-          { id: 'backdrop',
-            title: 'Backdrop',
-            description: 'TODO',
-            url: 'patterns/backdrop/pattern.js'
-          },
-          { id: 'cookietrigger',
-            title: 'Cookie Trigger',
-            description: "Shows a DOM element if browser cookies are disabled.",
-            url: 'patterns/cookietrigger/pattern.js'
-          },
-          { id: 'formautofocus',
-            title: 'Form Auto Focus',
-            description: 'TODO',
-            url: 'patterns/formautofocus/pattern.js'
-          },
-          { id: 'formunloadalert',
-            title: 'Form Unload Alert',
-            description: 'A pattern to warn user when changes are unsaved and they try to navigate away from page',
-            url: 'patterns/formunloadalert/pattern.js'
-          },
-          { id: 'inlinevalidation',
-            title: 'Inline Validation',
-            description: 'Client side validation of form fields',
-            url: 'patterns/inlinevalidation/pattern.js'
-          },
-          { id: 'markspeciallinks',
-            title: 'Mark special links',
-            description: 'Mark special links based on protocol and optionally open in new window.',
-            url: 'patterns/markspeciallinks/pattern.js'
-          },
-          { id: 'modal',
-            title: 'Modal',
-            description: 'Creates a modal dialog (also called overlay)',
-            url: 'patterns/modal/pattern.js'
-          },
-          { id: 'moment',
-            title: 'Moment',
-            description: 'Human date representation of dates',
-            url: 'patterns/moment/pattern.js'
-          },
-          { id: 'pickadate',
-            title: 'Pick-A-Date',
-            description: 'Allows the user to select a date (with or without time) through a calendar',
-            url: 'patterns/pickadate/pattern.js'
-          },
-          { id: 'preventdoublesubmit',
-            title: 'Prevent Double Submit',
-            description: 'A pattern to prevent submitting a form twice',
-            url: 'patterns/preventdoublesubmit/pattern.js'
-          },
-          { id: 'querystring',
-            title: 'Querystring',
-            description: 'A widget for creating queries for collections',
-            url: 'patterns/querystring/pattern.js'
-          },
-          { id: 'relateditems',
-            title: 'Related Items',
-            description: 'An advanced widget for selecting related items',
-            url: 'patterns/relateditems/pattern.js'
-          },
-          { id: 'select2',
-            title: 'Select2',
-            description: 'Autocompletes, multiple or single selections from any kind of data source (with search!)',
-            url: 'patterns/select2/pattern.js'
-          },
-          { id: 'sortable',
-            title: 'Sortable',
-            description: 'Sort items in list using drag and drop',
-            url: 'patterns/sortable/pattern.js'
-          },
-          { id: 'structure',
-            title: 'Structure',
-            description: 'Managing a folder of items',
-            url: 'patterns/structure/pattern.js'
-          },
-          { id: 'textareamimetypeselector',
-            title: 'Textarea MimeType Selector',
-            description: 'Selects the MimeType for a textarea and changes the widget according to the MimeType',
-            url: 'patterns/textareamimetypeselector/pattern.js'
-          },
-          { id: 'tinymce',
-            title: 'TinyMCE',
-            description: 'Rich text editor',
-            url: 'patterns/tinymce/pattern.js'
-          },
-          { id: 'toggle',
-            title: 'Toggle',
-            description: 'Toggles any attribute value after some event is fired',
-            url: 'patterns/toggle/pattern.js'
-          },
-          { id: 'tooltip',
-            title: 'Tooltip',
-            description: 'A pattern to show a tooltip on hover',
-            url: 'patterns/tooltip/pattern.js'
-          },
-          { id: 'tree',
-            title: 'Tree',
-            description: 'Manage tree of items',
-            url: 'patterns/tree/pattern.js'
-          },
-          { id: 'upload',
-            title: 'Upload',
-            description: 'File upload with drag and drop support.',
-            url: 'patterns/upload/pattern.js'
-          },
-          { id: 'filemanager',
-            title: 'File Manager',
-            description: 'Manage file system-like resources',
-            url: 'patterns/filemanager/pattern.js'
-          },
-          { id: 'texteditor',
-            title: 'Text editor',
-            description: 'Edit files TTW nicely',
-            url: 'patterns/texteditor/pattern.js'
-          },
-          { id: 'thememapper',
-            title: 'Theme Mapper',
-            description: 'Map theme rules',
-            url: 'patterns/thememapper/pattern.js'
-          },
-          { id: 'resourceregistry',
-            title: 'Resource Registry',
-            description: 'Register and override resources',
-            url: 'patterns/resourceregistry/pattern.js'
-          },
-          { id: 'eventedit',
-            title: 'Event Edit Forms',
-            description: 'Start/End delta, validation whole day and open end handling',
-            url: 'patterns/eventedit/pattern.js'
-          },
-          { id: 'livesearch',
-            title: 'Live search',
-            description: 'Live search widget',
-            url: 'patterns/livesearch/pattern.js'
-          },
-          { id: 'contentloader',
-            title: 'Content Loader',
-            description: 'Dynamically configure content to be reloaded',
-            url: 'patterns/contentloader/pattern.js'
-          },
-          { id: 'recurrence',
-            title: 'Recurrence Widget',
-            description: 'Recurrence widget',
-            url: 'patterns/recurrence/pattern.js'
-          }
+          { id: 'autotoc',                   url: 'patterns/autotoc/pattern.js',                   title: 'Autotoc',                     description: 'Automatically generate a table of contents'                                                },
+          { id: 'backdrop',                  url: 'patterns/backdrop/pattern.js',                  title: 'Backdrop',                    description: 'TODO'                                                                                      },
+          { id: 'contentloader',             url: 'patterns/contentloader/pattern.js',             title: 'Content Loader',              description: 'Dynamically configure content to be reloaded'                                              },
+          { id: 'cookietrigger',             url: 'patterns/cookietrigger/pattern.js',             title: 'Cookie Trigger',              description: 'Shows a DOM element if browser cookies are disabled.'                                      },
+          { id: 'eventedit',                 url: 'patterns/eventedit/pattern.js',                 title: 'Event Edit Forms',            description: 'Start/End delta validation whole day and open end handling'                                },
+          { id: 'filemanager',               url: 'patterns/filemanager/pattern.js',               title: 'File Manager',                description: 'Manage file system-like resources'                                                         },
+          { id: 'formautofocus',             url: 'patterns/formautofocus/pattern.js',             title: 'Form Auto Focus',             description: 'TODO'                                                                                      },
+          { id: 'formunloadalert',           url: 'patterns/formunloadalert/pattern.js',           title: 'Form Unload Alert',           description: 'A pattern to warn user when changes are unsaved and they try to navigate away from page'   },
+          { id: 'inlinevalidation',          url: 'patterns/inlinevalidation/pattern.js',          title: 'Inline Validation',           description: 'Client side validation of form fields'                                                     },
+          { id: 'livesearch',                url: 'patterns/livesearch/pattern.js',                title: 'Live search',                 description: 'Live search widget'                                                                        },
+          { id: 'markspeciallinks',          url: 'patterns/markspeciallinks/pattern.js',          title: 'Mark special links',          description: 'Mark special links based on protocol and optionally open in new window.'                   },
+          { id: 'modal',                     url: 'patterns/modal/pattern.js',                     title: 'Modal',                       description: 'Creates a modal dialog (also called overlay)'                                              },
+          { id: 'moment',                    url: 'patterns/moment/pattern.js',                    title: 'Moment',                      description: 'Human date representation of dates'                                                        },
+          { id: 'pickadate',                 url: 'patterns/pickadate/pattern.js',                 title: 'Pick-A-Date',                 description: 'Allows the user to select a date (with or without time) through a calendar'                },
+          { id: 'preventdoublesubmit',       url: 'patterns/preventdoublesubmit/pattern.js',       title: 'Prevent Double Submit',       description: 'A pattern to prevent submitting a form twice'                                              },
+          { id: 'querystring',               url: 'patterns/querystring/pattern.js',               title: 'Querystring',                 description: 'A widget for creating queries for collections'                                             },
+          { id: 'recurrence',                url: 'patterns/recurrence/pattern.js',                title: 'Recurrence Widget',           description: 'Recurrence widget'                                                                         },
+          { id: 'relateditems',              url: 'patterns/relateditems/pattern.js',              title: 'Related Items',               description: 'An advanced widget for selecting related items'                                            },
+          { id: 'resourceregistry',          url: 'patterns/resourceregistry/pattern.js',          title: 'Resource Registry',           description: 'Register and override resources'                                                           },
+          { id: 'select2',                   url: 'patterns/select2/pattern.js',                   title: 'Select2',                     description: 'Autocompletes multiple or single selections from any kind of data source (with search!)'   },
+          { id: 'sortable',                  url: 'patterns/sortable/pattern.js',                  title: 'Sortable',                    description: 'Sort items in list using drag and drop'                                                    },
+          { id: 'structure',                 url: 'patterns/structure/pattern.js',                 title: 'Structure',                   description: 'Managing a folder of items'                                                                },
+          { id: 'textareamimetypeselector',  url: 'patterns/textareamimetypeselector/pattern.js',  title: 'Textarea MimeType Selector',  description: 'Selects the MimeType for a textarea and changes the widget according to the MimeType'      },
+          { id: 'texteditor',                url: 'patterns/texteditor/pattern.js',                title: 'Text editor',                 description: 'Edit files TTW nicely'                                                                     },
+          { id: 'thememapper',               url: 'patterns/thememapper/pattern.js',               title: 'Theme Mapper',                description: 'Map theme rules'                                                                           },
+          { id: 'tinymce',                   url: 'patterns/tinymce/pattern.js',                   title: 'TinyMCE',                     description: 'Rich text editor'                                                                          },
+          { id: 'toggle',                    url: 'patterns/toggle/pattern.js',                    title: 'Toggle',                      description: 'Toggles any attribute value after some event is fired'                                     },
+          { id: 'tooltip',                   url: 'patterns/tooltip/pattern.js',                   title: 'Tooltip',                     description: 'A pattern to show a tooltip on hover'                                                      },
+          { id: 'tree',                      url: 'patterns/tree/pattern.js',                      title: 'Tree',                        description: 'Manage tree of items'                                                                      },
+          { id: 'upload',                    url: 'patterns/upload/pattern.js',                    title: 'Upload',                      description: 'File upload with drag and drop support.'                                                   }
         ]
       },
       { id: 'contribute',
diff --git a/mockup/js/config.js b/mockup/js/config.js
index 269ba76..6280d58 100644
--- a/mockup/js/config.js
+++ b/mockup/js/config.js
@@ -79,6 +79,8 @@
       'mockup-patterns-preventdoublesubmit': 'patterns/preventdoublesubmit/pattern',
       'mockup-patterns-querystring': 'patterns/querystring/pattern',
       'mockup-patterns-relateditems': 'patterns/relateditems/pattern',
+      'mockup-patterns-relateditems-upload': 'patterns/relateditems/upload',
+      'mockup-patterns-relateditems-url': 'patterns/relateditems',
       'mockup-patterns-recurrence': 'patterns/recurrence/pattern',
       'mockup-patterns-resourceregistry': 'patterns/resourceregistry/pattern',
       'mockup-patterns-resourceregistry-url': 'patterns/resourceregistry',
diff --git a/mockup/js/utils.js b/mockup/js/utils.js
index 976ce24..1db4dca 100644
--- a/mockup/js/utils.js
+++ b/mockup/js/utils.js
@@ -9,10 +9,10 @@ define([
 
   var QueryHelper = function(options) {
     /* if pattern argument provided, it can implement the interface of:
-      *    - browsing: boolean if currently browsing
-      *    - currentPath: string of current path to apply to search if browsing
-      *    - basePath: default path to provide if no subpath used
-      */
+     *    - browsing: boolean if currently browsing
+     *    - currentPath: string of current path to apply to search if browsing
+     *    - basePath: default path to provide if no subpath used
+     */
 
     var self = this;
     var defaults = {
@@ -27,6 +27,7 @@ define([
       pathDepth: 1
     };
     self.options = $.extend({}, defaults, options);
+
     self.pattern = self.options.pattern;
     if (self.pattern === undefined || self.pattern === null) {
       self.pattern = {
@@ -40,12 +41,14 @@ define([
     } else if (self.pattern.vocabularyUrl) {
       self.options.vocabularyUrl = self.pattern.vocabularyUrl;
     }
-    if (self.options.vocabularyUrl !== undefined &&
-        self.options.vocabularyUrl !== null) {
-      self.valid = true;
-    } else {
-      self.valid = false;
-    }
+    self.valid = Boolean(self.options.vocabularyUrl);
+
+    self.getBatch = function(page) {
+      return {
+        page: page ? page : 1,
+        size: self.options.batchSize
+      };
+    };
 
     self.getCurrentPath = function() {
       var pattern = self.pattern;
@@ -59,7 +62,7 @@ define([
       } else {
         currentPath = pattern.currentPath;
       }
-      if (typeof currentPath  === 'function') {
+      if (typeof currentPath === 'function') {
         currentPath = currentPath();
       }
       var path = currentPath;
@@ -75,17 +78,17 @@ define([
       return path;
     };
 
-    self.getCriterias = function(term, options) {
-      if (options === undefined) {
-        options = {};
+    self.getCriterias = function(term, searchOptions) {
+      if (searchOptions === undefined) {
+        searchOptions = {};
       }
-      options = $.extend({}, {
+      searchOptions = $.extend({}, {
         useBaseCriteria: true,
         additionalCriterias: []
-      }, options);
+      }, searchOptions);
 
       var criterias = [];
-      if (options.useBaseCriteria) {
+      if (searchOptions.useBaseCriteria) {
         criterias = self.options.baseCriteria.slice(0);
       }
       if (term) {
@@ -96,31 +99,46 @@ define([
           v: term
         });
       }
-      if(options.searchPath){
+      if (searchOptions.searchPath) {
         criterias.push({
           i: 'path',
           o: 'plone.app.querystring.operation.string.path',
-          v: options.searchPath + '::' + self.options.pathDepth
+          v: searchOptions.searchPath + '::' + self.options.pathDepth
         });
-      }else if (self.pattern.browsing) {
+      } else if (self.pattern.browsing) {
         criterias.push({
           i: 'path',
           o: 'plone.app.querystring.operation.string.path',
           v: self.getCurrentPath() + '::' + self.options.pathDepth
         });
       }
-      criterias = criterias.concat(options.additionalCriterias);
+      criterias = criterias.concat(searchOptions.additionalCriterias);
       return criterias;
     };
 
-    self.getBatch = function(page) {
-      if (!page) {
-        page = 1;
-      }
-      return {
-        page: page,
-        size: self.options.batchSize
+    self.getQueryData = function(term, page) {
+      var data = {
+        query: JSON.stringify({
+          criteria: self.getCriterias(term),
+          sort_on: self.options.sort_on,
+          sort_order: self.options.sort_order
+        }),
+        attributes: JSON.stringify(self.options.attributes)
       };
+      if (page) {
+        data.batch = JSON.stringify(self.getBatch(page));
+      }
+      return data;
+    };
+
+    self.getUrl = function() {
+      var url = self.options.vocabularyUrl;
+      if (url.indexOf('?') === -1) {
+        url += '?';
+      } else {
+        url += '&';
+      }
+      return url + $.param(self.getQueryData());
     };
 
     self.selectAjax = function() {
@@ -131,44 +149,22 @@ define([
         data: function(term, page) {
           return self.getQueryData(term, page);
         },
-        results: function (data, page) {
+        results: function(data, page) {
           var more = (page * 10) < data.total; // whether or not there are more results available
           // notice we return the value of more so Select2 knows if more results can be loaded
-          return {results: data.results, more: more};
+          return {
+            results: data.results,
+            more: more
+          };
         }
       };
     };
 
-    self.getUrl = function() {
-      var url = self.options.vocabularyUrl;
-      if (url.indexOf('?') === -1) {
-        url += '?';
-      } else {
-        url += '&';
-      }
-      return url + $.param(self.getQueryData());
-    };
-
-    self.getQueryData = function(term, page) {
-      var data = {
-        query: JSON.stringify({
-          criteria: self.getCriterias(term),
-          sort_on: self.options.sort_on,
-          sort_order: self.options.sort_order
-        }),
-        attributes: JSON.stringify(self.options.attributes)
-      };
-      if (page) {
-        data.batch = JSON.stringify(self.getBatch(page));
-      }
-      return data;
-    };
-
     self.search = function(term, operation, value, callback, useBaseCriteria, type) {
       if (useBaseCriteria === undefined) {
         useBaseCriteria = true;
       }
-      if(type === undefined){
+      if (type === undefined) {
         type = 'GET';
       }
       var criteria = [];
@@ -181,7 +177,9 @@ define([
         v: value
       });
       var data = {
-        query: JSON.stringify({ criteria: criteria }),
+        query: JSON.stringify({
+          criteria: criteria
+        }),
         attributes: JSON.stringify(self.options.attributes)
       };
       $.ajax({
@@ -196,7 +194,7 @@ define([
     return self;
   };
 
-  var Loading = function(options){
+  var Loading = function(options) {
     /*
      * Options:
      *   backdrop(pattern): if you want to have the progress indicator work
@@ -209,30 +207,30 @@ define([
       backdrop: null,
       zIndex: 10005 // can be a function
     };
-    if(!options){
+    if (!options) {
       options = {};
     }
     self.options = $.extend({}, defaults, options);
 
-    self.init = function(){
+    self.init = function() {
       self.$el = $('.' + self.className);
-      if(self.$el.length === 0){
+      if (self.$el.length === 0) {
         self.$el = $('<div><div></div></div>');
         self.$el.addClass(self.className).hide().appendTo('body');
       }
     };
 
-    self.show = function(closable){
+    self.show = function(closable) {
       self.init();
       self.$el.show();
       var zIndex = self.options.zIndex;
       if (typeof(zIndex) === 'function') {
         zIndex = Math.max(zIndex(), 10005);
-      }else{
+      } else {
         // go through all modals and backdrops and make sure we have a higher
         // z-index to use
         zIndex = 10005;
-        $('.plone-modal-wrapper,.plone-modal-backdrop').each(function(){
+        $('.plone-modal-wrapper,.plone-modal-backdrop').each(function() {
           zIndex = Math.max(zIndex, $(this).css('zIndex') || 10005);
         });
         zIndex += 1;
@@ -250,7 +248,7 @@ define([
       }
     };
 
-    self.hide = function(){
+    self.hide = function() {
       self.init();
       self.$el.hide();
     };
@@ -258,12 +256,41 @@ define([
     return self;
   };
 
-  var generateId = function(prefix){
+  var getAuthenticator = function() {
+    var $el = $('input[name="_authenticator"]');
+    if ($el.length === 0) {
+      $el = $('a[href*="_authenticator"]');
+      if ($el.length > 0) {
+        return $el.attr('href').split('_authenticator=')[1];
+      }
+      return '';
+    } else {
+      return $el.val();
+    }
+  };
+
+  var generateId = function(prefix) {
     if (prefix === undefined) {
       prefix = 'id';
     }
     return prefix + (Math.floor((1 + Math.random()) * 0x10000)
-        .toString(16).substring(1));
+      .toString(16).substring(1));
+  };
+
+  var setId = function($el, prefix) {
+    if (prefix === undefined) {
+      prefix = 'id';
+    }
+    var id = $el.attr('id');
+    if (id === undefined) {
+      id = generateId(prefix);
+    } else {
+      /* hopefully we don't screw anything up here... changing the id
+       * in some cases so we get a decent selector */
+      id = id.replace(/\./g, '-');
+    }
+    $el.attr('id', id);
+    return id;
   };
 
   var getWindow = function() {
@@ -274,68 +301,49 @@ define([
     return win;
   };
 
-  return {
-    generateId: generateId,
-    parseBodyTag: function(txt) {
-      return $((/<body[^>]*>((.|[\n\r])*)<\/body>/im).exec(txt)[0]
-          .replace('<body', '<div').replace('</body>', '</div>')).eq(0).html();
-    },
-    setId: function($el, prefix) {
-      if (prefix === undefined) {
-        prefix = 'id';
-      }
-      var id = $el.attr('id');
-      if (id === undefined) {
-        id = generateId(prefix);
-      } else {
-        /* hopefully we don't screw anything up here... changing the id
-         * in some cases so we get a decent selector */
-        id = id.replace(/\./g, '-');
-      }
-      $el.attr('id', id);
-      return id;
-    },
-    bool: function(val) {
-      if (typeof val === 'string') {
-        val = $.trim(val).toLowerCase();
-      }
-      return ['true', true, 1].indexOf(val) !== -1;
-    },
-    QueryHelper: QueryHelper,
-    Loading: Loading,
-    // provide default loader
-    loading: new Loading(),
-    getAuthenticator: function() {
-      var $el = $('input[name="_authenticator"]');
-      if($el.length === 0){
-        $el = $('a[href*="_authenticator"]');
-        if($el.length > 0){
-          return $el.attr('href').split('_authenticator=')[1];
-        }
-        return '';
-      }else{
-        return $el.val();
-      }
+  var parseBodyTag = function(txt) {
+    return $((/<body[^>]*>((.|[\n\r])*)<\/body>/im).exec(txt)[0]
+      .replace('<body', '<div').replace('</body>', '</div>')).eq(0).html();
+  };
+
+  var featureSupport = {
+    /* Well tested feature support for things we use in mockup.
+     * All gathered from: http://diveintohtml5.info/everything.html
+     * Alternative to using some form of modernizr.
+     */
+    dragAndDrop: function() {
+      return 'draggable' in document.createElement('span');
     },
-    getWindow: getWindow,
-    featureSupport: {
-      /*
-        well tested feature support for things we use in mockup.
-        All gathered from: http://diveintohtml5.info/everything.html
-        Alternative to using some form of modernizr.
-      */
-      dragAndDrop: function(){
-        return 'draggable' in document.createElement('span');
-      },
-      fileApi: function(){
-        return typeof FileReader != 'undefined'; // jshint ignore:line
-      },
-      history: function(){
-        return !!(window.history && window.history.pushState);
-      }
+    fileApi: function() {
+      return typeof FileReader != 'undefined'; // jshint ignore:line
     },
-    escapeHTML: function(val){
-      return $("<div/>").text(val).html();
+    history: function() {
+      return !!(window.history && window.history.pushState);
+    }
+  };
+
+  var bool = function(val) {
+    if (typeof val === 'string') {
+      val = $.trim(val).toLowerCase();
     }
+    return ['true', true, 1].indexOf(val) !== -1;
+  };
+
+  var escapeHTML = function(val) {
+    return $('<div/>').text(val).html();
+  };
+
+  return {
+    bool: bool,
+    escapeHTML: escapeHTML,
+    featureSupport: featureSupport,
+    generateId: generateId,
+    getAuthenticator: getAuthenticator,
+    getWindow: getWindow,
+    Loading: Loading,
+    loading: new Loading(),  // provide default loader
+    parseBodyTag: parseBodyTag,
+    QueryHelper: QueryHelper,
+    setId: setId
   };
 });
diff --git a/mockup/patterns/contentloader/pattern.js b/mockup/patterns/contentloader/pattern.js
index a2fbecf..692f0ad 100644
--- a/mockup/patterns/contentloader/pattern.js
+++ b/mockup/patterns/contentloader/pattern.js
@@ -82,7 +82,7 @@ define([
             if(data.indexOf('<html') !== -1){
               data = utils.parseBodyTag(data);
             }
-            $el = $(data);
+            $el = $('<div>' + data + '</div>');  // jQuery starts to search at the first child element.
           }else if(that.options.dataType.indexOf('json') !== -1){
             // must have template defined with json
             if(data.constructor === Array && data.length === 1){
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 3caeb29..7b0d267 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -3,72 +3,85 @@
  * Options:
  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)
  *    attributes(array): This list is passed to the server during an AJAX request to specify the attributes which should be included on each item. (['UID', 'Title', 'portal_type', 'path'])
- *    basePath(string): If this is set the widget will start in "Browse" mode and will pass the path to the server to filter the results. ('/')
- *    rootPath(string): If this is set the widget will only display breadcrumb path elements deeprt than this path.
- *    mode(string): Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
- *    breadCrumbTemplate(string): Template to use for a single item in the breadcrumbs. ('/<a href="<%- path %>"><%- text %></a>')
- *    breadCrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadCrumbTemplate. (null)
- *    breadCrumbsTemplate(string): Template for element to which breadCrumbs will be appended. ('<span><span class="pattern-relateditems-path-label"><%- searchText %></span><a class="icon-home" href="/"></a><%- items %></span>')
- *    breadCrumbsTemplateSelector(string): Select an element from the DOM from which to grab the breadCrumbsTemplate. (null)
- *    cache(boolean): Whether or not results from the server should be
- *    cached. (true)
- *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (false)
+ *    basePath(string): Start browse/search in this path. Default: set to rootPath.
+ *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (true)
  *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
- *  
- * #this does not respect custom dx types which are also folderish:
- * --> folderTypes(array): Types which should be considered browsable. (["Folder"])
- * #   needs to be implemented with meta data field: is_folderish from vocabulary
- * 
- *    homeText(string): Text to display in the initial breadcrumb item. (home)
+ *    favorites(array): Array of objects. These are favorites, which can be used to quickly jump to different locations. Objects have the attributes "title" and "path". Default: []
+ *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    maximumSelectionSize(integer): The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited. (-1)
- *    multiple(boolean): Do not change this option. (true)
+ *    minimumInputLength: Select2 option. Number of characters necessary to start a search. Default: 0.
  *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
+ *    rootPath(string): Only display breadcrumb path elements deeper than this path. Default: "/"
+ *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
+ *    separator(string): Select2 option. String which separates multiple items. (',')
+ *    tokenSeparators(array): Select2 option, refer to select2 documentation. ([",", " "])
+ *    width(string): Specify a width for the widget. ('100%')
+ *    breadcrumbTemplate(string): Template to use for a single item in the breadcrumbs.
+ *    breadcrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadcrumbTemplate. (null)
+ *    toolbarTemplate(string): Template for element to which toolbar items will be appended.
+ *    toolbarTemplateSelector(string): Select an element from the DOM from which to grab the toolbarTemplate. (null)
  *    resultTemplate(string): Template for an item in the in the list of results. Refer to source for default. (Refer to source)
  *    resultTemplateSelector(string): Select an element from the DOM from which to grab the resultTemplate. (null)
- *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
  *    selectionTemplate(string): Template for element that will be used to construct a selected item. (Refer to source)
  *    selectionTemplateSelector(string): Select an element from the DOM from which to grab the selectionTemplate. (null)
- *    separator(string): Select2 option. String which separates multiple items. (',')
- *    tokenSeparators(array): Select2 option, refer to select2 documentation.
- *    ([",", " "])
- *    width(string): Specify a width for the widget. ('100%')
+ *    upload(boolen): Allow file and image uploads from within the related items widget.
+ *    uploadAllowView(string): View, which returns a JSON response in the form of {allowUpload: true}, if upload is allowed in the current context.
  *
  * Documentation:
  *    The Related Items pattern is based on Select2 so many of the same options will work here as well.
  *
- *    # Default
+ *    # Default, mode "search"
  *
  *    {{ example-1 }}
  *
- *    # Existing values, some bad
+ *    # Default, mode "browse"
  *
  *    {{ example-2 }}
  *
- *    # Selectable Types
+ *    # Existing values, some bad
  *
  *    {{ example-3 }}
  *
- *    # Select a single item
+ *    # Selectable Types
  *
  *    {{ example-4 }}
  *
+ *    # Select a single item
+ *
+ *    {{ example-5 }}
+ *
+ *    # Mode "browse", Upload
+ *
+ *    {{ example-6 }}
+ *
  * Example: example-1
  *    <input type="text" class="pat-relateditems"
  *           data-pat-relateditems="width:30em;
+ *                                  mode:search;
  *                                  vocabularyUrl:/relateditems-test.json" />
  *
  * Example: example-2
  *    <input type="text" class="pat-relateditems"
- *           value="asdf1234gsad,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"
- *           data-pat-relateditems="width:30em; vocabularyUrl:/relateditems-test.json" />
+ *           data-pat-relateditems="width:30em;
+ *                                  mode:browse;
+ *                                  vocabularyUrl:/relateditems-test.json" />
  *
  * Example: example-3
  *    <input type="text" class="pat-relateditems"
-             data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json"}' />
+ *           value="asdf1234gsad,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"
+ *           data-pat-relateditems="width:30em; vocabularyUrl:/relateditems-test.json" />
  *
  * Example: example-4
  *    <input type="text" class="pat-relateditems"
-             data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json", "maximumSelectionSize": 1}' />
+ *           data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json"}' />
+ *
+ * Example: example-5
+ *    <input type="text" class="pat-relateditems"
+ *           data-pat-relateditems='{"selectableTypes": ["Document"], "vocabularyUrl": "/relateditems-test.json", "maximumSelectionSize": 1}' />
+ *
+ * Example: example-6
+ *    <input type="text" class="pat-relateditems"
+ *           data-pat-relateditems='{"selectableTypes": ["Image", "File"], "vocabularyUrl": "/relateditems-test.json", "upload": true}' />
  *
  */
 
@@ -78,95 +91,69 @@ define([
   'underscore',
   'pat-base',
   'mockup-patterns-select2',
+  'mockup-ui-url/views/button',
   'mockup-utils',
-  'mockup-patterns-tree',
-  'translate'
-], function($, _, Base, Select2, utils, Tree, _t) {
+  'translate',
+  'text!mockup-patterns-relateditems-url/templates/breadcrumb.xml',
+  'text!mockup-patterns-relateditems-url/templates/favorite.xml',
+  'text!mockup-patterns-relateditems-url/templates/result.xml',
+  'text!mockup-patterns-relateditems-url/templates/selection.xml',
+  'text!mockup-patterns-relateditems-url/templates/toolbar.xml',
+  'bootstrap-dropdown'
+], function($, _, Base, Select2, ButtonView, utils, _t,
+            BreadcrumbTemplate,
+            FavoriteTemplate,
+            ResultTemplate,
+            SelectionTemplate,
+            ToolbarTemplate
+) {
   'use strict';
 
   var RelatedItems = Base.extend({
     name: 'relateditems',
     trigger: '.pat-relateditems',
     parser: 'mockup',
-    browsing: false,
-    currentPath: null,
+    currentPath: undefined,
+    openAfterInit: undefined,
     defaults: {
-      vocabularyUrl: null, // must be set to work
-      width: '100%',
-      multiple: true,
-      tokenSeparators: [',', ' '],
-      separator: ',',
-      orderable: true,
-      cache: true,
+      // main option
+      vocabularyUrl: null,  // must be set to work
+
+      // more options
+      upload: false,
+      attributes: ['UID', 'Title', 'portal_type', 'path', 'getURL', 'getIcon', 'is_folderish', 'review_state'],  // used by utils.QueryHelper
+      basePath: undefined,
+      closeOnSelect: true,
+      dropdownCssClass: 'pattern-relateditems-dropdown',
+      favorites: [],
+      maximumSelectionSize: -1,
+      minimumInputLength: 0,
       mode: 'search', // possible values are search and browse
-      closeOnSelect: false,
-      basePath: '/',
+      browsing: undefined,
+      orderable: true,  // mockup-patterns-select2
       rootPath: '/',
-      homeText: _t('home'),
-      //folderTypes: ['Folder'],   
       selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
-      attributes: ['UID', 'Title', 'portal_type', 'path','getURL', 'getIcon','is_folderish','review_state'],
-      dropdownCssClass: 'pattern-relateditems-dropdown',
-      maximumSelectionSize: -1,
-      treeVocabularyUrl: null,
-      resultTemplate: '' +
-        '<div class="   pattern-relateditems-result  <% if (selected) { %>pattern-relateditems-active<% } %>">' +
-        '  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">' +
-        '    <% if (getIcon === true || portal_type === "Image") { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>' +
-        '    <span class="pattern-relateditems-result-title  <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>' +
-        '    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>' +
-        '    <span class="pattern-relateditems-result-path"><%- path %></span>' +
-        '  </a>' +
-        '  <span class="pattern-relateditems-buttons">' +
-        '  <% if (is_folderish) { %>' +
-        '     <a class="pattern-relateditems-result-browse" href="#" data-path="<%- path %>"></a>' +
-        '   <% } %>' +
-        ' </span>' +
-        '</div>',
+      separator: ',',
+      tokenSeparators: [',', ' '],
+      width: '100%',
+
+      // templates
+      breadcrumbTemplate: BreadcrumbTemplate,
+      breadcrumbTemplateSelector: null,
+      favoriteTemplate: FavoriteTemplate,
+      favoriteTemplateSelector: null,
+      resultTemplate: ResultTemplate,
       resultTemplateSelector: null,
-      selectionTemplate: '' +
-        '<span class="pattern-relateditems-item">' +
-        ' <% if (getIcon === true || portal_type === "Image") { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>' +
-        ' <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>' +
-        ' <span class="pattern-relateditems-item-path"><%- path %></span>' +
-        '</span>',
+      selectionTemplate: SelectionTemplate,
       selectionTemplateSelector: null,
-      breadCrumbsTemplate: '<span>' +
-        '<span class="pattern-relateditems-tree">' +
-          '<a href="#" class="pattern-relateditems-tree-select"><span class="glyphicon glyphicon-indent-left"></span></a> ' +
-          '<div class="tree-container">' +
-            '<div class="title-container">' +
-              '<a href="#" class="btn close pattern-relateditems-tree-cancel">' +
-                '<span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span>' +
-              '</a>' +
-              '<span class="select-folder-label">Select folder</span>' +
-            '</div>' +
-            '<div class="pat-tree" />' +
-          '</div>' +
-        '</span>' +
-        '<span class="pattern-relateditems-path-label">' +
-          '<%- searchText %></span><a class="crumb" href="<%- rootPath %>">' +
-          '<span class="glyphicon glyphicon-home"></span></a>' +
-          // ``items assumed to be santized html``
-          '<%= items %>' +
-        '</span>' +
-      '</span>',
-      breadCrumbsTemplateSelector: null,
-      breadCrumbTemplate: '' +
-        '/<a href="<%- path %>" class="crumb"><%- text %></a>',
-      breadCrumbTemplateSelector: null,
-      escapeMarkup: function(text) {
-        return text;
-      },
-      setupAjax: function() {
-        // Setup the ajax object to use during requests
-        var self = this;
-        if (self.query.valid) {
-          return self.query.selectAjax();
-        }
-        return {};
-      }
+      toolbarTemplate: ToolbarTemplate,
+      toolbarTemplateSelector: null,
+
+      // needed
+      multiple: true,
+
     },
+
     applyTemplate: function(tpl, item) {
       var self = this;
       var template;
@@ -183,160 +170,212 @@ define([
       options._item = item;
       return _.template(template)(options);
     },
-    activateBrowsing: function() {
-      var self = this;
-      self.browsing = true;
-      self.setBreadCrumbs();
-    },
-    deactivateBrowsing: function() {
-      var self = this;
-      self.browsing = false;
-      self.setBreadCrumbs();
-    },
-    browseTo: function(path) {
-      var self = this;
-      self.emit('before-browse');
-      self.currentPath = path;
-      if (path === '/' && self.options.mode === 'search') {
-        self.deactivateBrowsing();
-      } else {
-        self.activateBrowsing();
+
+    setQuery: function () {
+
+      var baseCriteria = [];
+
+      if (this.options.mode == 'search') {
+        // MODE SEARCH
+
+        // restrict to given types
+        if (this.options.selectableTypes) {
+          baseCriteria.push({
+            i: 'portal_type',
+            o: 'plone.app.querystring.operation.selection.any',
+            v: this.options.selectableTypes
+          });
+        }
+
+        baseCriteria.push({
+          i: 'path',
+          o: 'plone.app.querystring.operation.string.path',
+          v: this.currentPath
+        });
+
       }
-      self.$el.select2('close');
-      self.$el.select2('open');
-      self.emit('after-browse');
+
+      // set query object
+      this.query = new utils.QueryHelper(
+        $.extend(true, {}, this.options, {
+          pattern: this,
+          baseCriteria: baseCriteria
+        })
+      );
+
+      var ajax = {};
+      if (this.query.valid) {
+        ajax = this.query.selectAjax();
+      }
+      this.options.ajax = ajax;
+      this.$el.select2(this.options);
     },
-    setBreadCrumbs: function() {
+
+    setBreadCrumbs: function () {
       var self = this;
-      var path = self.currentPath ? self.currentPath : self.options.basePath;
+      var path = self.currentPath;
       var root = self.options.rootPath.replace(/\/$/, '');
       var html;
+
       // strip site root from path
       path = path.indexOf(root) === 0 ? path.slice(root.length) : path;
-      if (path === '/') {
-        var searchText = '';
-        if (self.options.mode === 'search') {
-          searchText = '<em>' + _t('entire site') + '</em>';
+
+      var paths = path.split('/');
+      var itemPath = root;
+      var itemsHtml = '';
+      _.each(paths, function(node) {
+        if (node !== '') {
+          var item = {};
+          itemPath = itemPath + '/' + node;
+          item.text = node;
+          item.path = itemPath;
+          itemsHtml = itemsHtml + self.applyTemplate('breadcrumb', item);
         }
-        html = self.applyTemplate('breadCrumbs', {
-          items: searchText,
-          searchText: _t('Search:'),
-          rootPath: self.options.rootPath
-        });
-      } else {
-        var paths = path.split('/');
-        var itemPath = root;
-        var itemsHtml = '';
-        _.each(paths, function(node) {
-          if (node !== '') {
-            var item = {};
-            itemPath = itemPath + '/' + node;
-            item.text = node;
-            item.path = itemPath;
-            itemsHtml = itemsHtml + self.applyTemplate('breadCrumb', item);
-          }
-        });
-        html = self.applyTemplate('breadCrumbs', {items: itemsHtml,
-                                                  searchText: _t('Search:'),
-                                                  rootPath: self.options.rootPath});
-      }
-      var $crumbs = $(html);
-      $('a.crumb', $crumbs).on('click', function(e) {
-        e.preventDefault();
-        self.browseTo($(this).attr('href'));
-        return false;
       });
-      var $treeSelect = $('.pattern-relateditems-tree-select', $crumbs);
-      var $container = $treeSelect.parent();
-      var $treeContainer = $('.tree-container', $container);
-      var $tree = $('.pat-tree', $container);
-      var selectedNode = null;
-      var treePattern = new Tree($tree, {
-        data: [],
-        dataFilter: function(data) {
-          var nodes = [];
-          _.each(data.results, function(item) {
-            var node = {
-              label: item.Title,
-              id: item.UID,
-              path: item.path,
-              folder: item.is_folderish
-            };
-            nodes.push(node);
-          });
-          return nodes;
-        },
-        onCreateLi: function(node, $li) {
-          if(node._loaded){
-            if(node.children.length === 0){
-              $li.find('.jqtree-title').append('<span class="tree-node-empty">' + _t('(empty)') + '</span>');
-            }
-          }
-          $li.append('<span class="pattern-relateditems-buttons"><a class="pattern-relateditems-result-browse" href="#"></a></span>');
-          $li.find('.pattern-relateditems-result-browse').click(function(e){
-            e.preventDefault();
-            self.currentPath = node.path;
-            self.browseTo(self.currentPath);
-            $treeContainer.fadeOut();
-          });
-        }
+
+      // favorites
+      var favoritesHtml = '';
+      _.each(self.options.favorites, function (item) {
+        favoritesHtml = favoritesHtml + self.applyTemplate('favorite', item);
       });
-      treePattern.$el.bind('tree.select', function(e) {
-        var node = e.node;
-        if (node && !node._loaded) {
-          self.currentPath = node.path;
-          selectedNode = node;
-          treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl(), node, function(){
-            treePattern.$el.tree('openNode', node);
-          });
-          node._loaded = true;
-        }
+
+      html = self.applyTemplate('toolbar', {
+        items: itemsHtml,
+        favItems: favoritesHtml,
+        favText: _t('Favorites'),
+        searchText: _t('Current path:'),
+        searchModeText: _t('Search'),
+        browseModeText: _t('Browse'),
+        rootPath: self.options.rootPath
       });
-      treePattern.$el.bind('tree.dblclick', function(e){
-        if(e.node){
-          self.currentPath = e.node.path;
-          self.browseTo(self.currentPath);
-          $treeContainer.fadeOut();
+
+      self.$toolbar.html(html);
+
+      $('.dropdown-toggle', self.$toolbar).dropdown();
+
+      $('button.mode.search', self.$toolbar).on('click', function(e) {
+        e.preventDefault();
+        if (self.browsing) {
+          $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
+          $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
+          self.options.mode = 'search';
+          self.browsing = false;
+          if (self.$el.select2('data').length > 0) {
+            // Have to call after initialization
+            self.openAfterInit = true;
+          }
+          self.setQuery();
+          if (!self.openAfterInit) {
+            self.$el.select2('close');
+            self.$el.select2('open');
+          }
+        } else {
+          // just open result list
+          self.$el.select2('close');
+          self.$el.select2('open');
         }
       });
-      treePattern.$el.bind('tree.refresh', function() {
-        /* the purpose of this is that when new data is loaded, the selected
-         * node is cleared. This re-selects it as a user browses structure of site */
-        if (selectedNode) {
-          treePattern.$el.tree('selectNode', selectedNode);
+
+      $('button.mode.browse', self.$toolbar).on('click', function(e) {
+        e.preventDefault();
+        if (!self.browsing) {
+          $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
+          $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
+          self.options.mode = 'browse';
+          self.browsing = true;
+          if (self.$el.select2('data').length > 0) {
+            // Have to call after initialization
+            self.openAfterInit = true;
+          }
+          self.setQuery();
+          if (!self.openAfterInit) {
+            self.$el.select2('close');
+            self.$el.select2('open');
+          }
+        } else {
+          // just open result list
+          self.$el.select2('close');
+          self.$el.select2('open');
         }
       });
-      $('a.pattern-relateditems-tree-cancel', $treeContainer).click(function(e) {
+
+      $('a.crumb', self.$toolbar).on('click', function(e) {
         e.preventDefault();
-        $treeContainer.fadeOut();
-        return false;
+        self.browseTo($(this).attr('href'));
       });
 
-      $treeSelect.on('click', function(e) {
+      $('a.fav', self.$toolbar).on('click', function(e) {
         e.preventDefault();
-        self.browsing = true;
-        self.currentPath = '/';
-        self.$el.select2('close');
-        $treeContainer.fadeIn();
-        treePattern.$el.tree('loadDataFromUrl', self.treeQuery.getUrl());
-        return false;
+        self.browseTo($(this).attr('href'));
       });
 
-      self.$el.on('select2-opening', function(){
-        $treeContainer.fadeOut();
-      });
+      function initUploadView(UploadView, disabled) {
+        var uploadButtonId = 'upload-' + utils.generateId();
+        var uploadButton = new ButtonView({
+          id:  uploadButtonId,
+          title: _t('Upload'),
+          tooltip: _t('Upload files'),
+          icon: 'upload',
+        });
+        if (disabled) {
+          uploadButton.disable();
+        }
+        $('.controls', self.$toolbar).prepend(uploadButton.render().el);
+        self.uploadView = new UploadView({
+          triggerView: uploadButton,
+          app: self
+        });
+        $('#btn-' +  uploadButtonId, self.$toolbar).append(self.uploadView.render().el);
+      }
+
+      // upload
+      if (self.options.upload && utils.featureSupport.dragAndDrop() && utils.featureSupport.fileApi()) {
+
+        require(['mockup-patterns-relateditems-upload'], function (UploadView) {
+          if (self.options.uploadAllowView) {
+            // Check, if uploads are allowed in current context
+            $.ajax({
+              url: self.options.uploadAllowView,
+              // url: self.currentUrl() + self.options.uploadAllowView,  // not working yet
+              dataType: 'JSON',
+              data: {
+                path: self.currentPath
+              },
+              type: 'GET',
+              success: function (result) {
+                initUploadView(UploadView, !result.allowUpload);
+              }
+            });
+          } else {
+            // just initialize upload view without checking, if uploads are allowed.
+            initUploadView(UploadView);
+          }
+        });
+
+      }
 
-      self.$browsePath.html($crumbs);
     },
+
+    browseTo: function (path) {
+      var self = this;
+      self.emit('before-browse');
+      self.currentPath = path;
+      self.$el.select2('close');
+      self.$el.select2('open');
+      self.emit('after-browse');
+      self.setBreadCrumbs();
+      self.setQuery();
+    },
+
     selectItem: function(item) {
       var self = this;
       self.emit('selecting');
       var data = self.$el.select2('data');
       data.push(item);
       self.$el.select2('data', data, true);
-      item.selected = true;
       self.emit('selected');
     },
+
     deselectItem: function(item) {
       var self = this;
       self.emit('deselecting');
@@ -347,9 +386,9 @@ define([
         }
       });
       self.$el.select2('data', data, true);
-      item.selected = false;
       self.emit('deselected');
     },
+
     isSelectable: function(item) {
       var self = this;
       if (self.options.selectableTypes === null) {
@@ -358,24 +397,14 @@ define([
         return _.indexOf(self.options.selectableTypes, item.portal_type) > -1;
       }
     },
+
     init: function() {
       var self = this;
-      self.query = new utils.QueryHelper(
-        $.extend(true, {}, self.options, {pattern: self})
-      );
-      self.treeQuery = new utils.QueryHelper(
-        $.extend(true, {}, self.options, {
-          pattern: self,
-          vocabularyUrl: self.options.treeVocabularyUrl || self.options.vocabularyUrl,
-          baseCriteria: [{
-            i: 'is_folderish',
-            o: 'plone.app.querystring.operation.selection.any',
-            v: 'True'
-          }]
-        })
-      );
 
-      self.options.ajax = self.options.setupAjax.apply(self);
+      self.browsing = self.options.mode === 'browse';
+      self.currentPath = self.options.basePath || self.options.rootPath;
+
+      self.setQuery();
 
       self.$el.wrap('<div class="pattern-relateditems-container" />');
       self.$container = self.$el.parents('.pattern-relateditems-container');
@@ -389,25 +418,16 @@ define([
       };
 
       Select2.prototype.initializeOrdering.call(self);
-      self.options.formatResult = function(item) {
-        if (item.is_folderish){
-            item.folderish = true;
-           }
-         else {
-               item.folderish = false;
-           }
-      
 
+      self.options.formatResult = function(item) {
         item.selectable = self.isSelectable(item);
+        var data = self.$el.select2('data');
 
-        if (item.selected === undefined) {
-          var data = self.$el.select2('data');
-          item.selected = false;
-          _.each(data, function(obj) {
-            if (obj.UID === item.UID) {
-              item.selected = true;
-            }
-          });
+        for (var i = 0; i < data.length; i = i + 1) {
+          if (data[i].UID === item.UID) {
+            // Exclude already selected items in result list.
+            return;
+          }
         }
 
         var result = $(self.applyTemplate('result', item));
@@ -423,11 +443,14 @@ define([
               self.selectItem(item);
               $parent.addClass('pattern-relateditems-active');
               if (self.options.maximumSelectionSize > 0) {
-                var items = self.$select2.select2('data');
+                var items = self.$el.select2('data');
                 if (items.length >= self.options.maximumSelectionSize) {
-                  self.$select2.select2('close');
+                  self.$el.select2('close');
                 }
               }
+              if (self.options.closeOnSelect) {
+                self.$el.select2('close');
+              }
             }
           }
         });
@@ -441,12 +464,18 @@ define([
 
         return $(result);
       };
+
       self.options.initSelection = function(element, callback) {
         var data = [];
         var value = $(element).val();
         if (value !== '') {
           var ids = value.split(self.options.separator);
-          self.query.search(
+          var query = new utils.QueryHelper(
+            $.extend(true, {}, self.options, {
+              pattern: self
+            })
+          );
+          query.search(
             'UID', 'plone.app.querystring.operation.list.contains', ids,
             function(data) {
               var results = data.results.reduce(function(prev, item) {
@@ -455,13 +484,25 @@ define([
               }, {});
               callback(
                 ids
-                  .map(function(uid) { return results[uid]; })
-                  .filter(function(item) { return item !== undefined; })
+                .map(function(uid) {
+                  return results[uid];
+                })
+                .filter(function(item) {
+                  return item !== undefined;
+                })
               );
+
+              if (self.openAfterInit) {
+                // open after initialization
+                self.$el.select2('open');
+                self.openAfterInit = undefined;
+              }
+
             },
             false
           );
         }
+
       };
 
       self.options.id = function(item) {
@@ -470,21 +511,15 @@ define([
 
       Select2.prototype.initializeSelect2.call(self);
 
-      self.$browsePath = $('<span class="pattern-relateditems-path" />');
-      self.$container.prepend(self.$browsePath);
-
-      if (self.options.mode === 'search') {
-        self.deactivateBrowsing();
-        self.browsing = false;
-      } else {
-        self.activateBrowsing();
-        self.browsing = true;
-      }
+      self.$toolbar = $('<div class="toolbar ui-offset-parent" />');
+      self.$container.prepend(self.$toolbar);
 
       self.$el.on('select2-selecting', function(event) {
         event.preventDefault();
       });
 
+      self.setBreadCrumbs();
+
     }
   });
 
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index a7a111b..6f0b09f 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -1,189 +1,170 @@
-@import "@{bowerPath}/bootstrap/less/variables.less"; // Modify this for custom colors, font-sizes, etc
-@icon-font-path: "@{bowerPath}/bootstrap/dist/fonts/";
-@import "@{bowerPath}/bootstrap/less/glyphicons.less";
-@import "@{mockupPath}/select2/pattern.select2.less";
-@import "@{mockupPath}/tree/pattern.tree.less";
+@import '@{bowerPath}/bootstrap/less/variables.less'; // Modify this for custom colors, font-sizes, etc
+@icon-font-path: '@{bowerPath}/bootstrap/dist/fonts/';
+@import '@{bowerPath}/bootstrap/less/glyphicons.less';
+@import '@{mockuplessPath}/ui.less';
 
+@import (reference) '@{bowerPath}/bootstrap/less/mixins.less';
+@import (reference) '@{bowerPath}/bootstrap/less/utilities.less';
+@import (reference) '@{bowerPath}/bootstrap/less/buttons.less';
+@import (reference) '@{bowerPath}/bootstrap/less/button-groups.less';
+@import (reference) '@{bowerPath}/bootstrap/less/popovers.less';
+@import (reference) '@{bowerPath}/bootstrap/less/tooltip.less';
+@import (reference) '@{mockuplessPath}/popover.less';
 
-.pattern-relateditems-dropdown {
-  z-index: 10002;
+@import '@{mockupPath}/select2/pattern.select2.less';
 
-  .select2-results {
-    .select2-highlighted {
-      color: #000;
-      background: #d8d8d8;
-    }
-    .select2-selected {
-      display: list-item;
+
+.pattern-relateditems-container {
+
+    .fade:extend(.fade all){}
+    .collapse:extend(.collapse all){}
+    .collapsing:extend(.collapsing all){}
+
+    .popover:extend(.popover all){}
+    .popover-title:extend(.popover-title all){}
+    .popover-content:extend(.popover-content all){}
+    .arrow:extend(.arrow all){}
+    .tooltip:extend(.tooltip all){}
+    .tooltip-arrow:extend(.tooltip-arrow all){}
+    .tooltip-inner:extend(.tooltip-inner all){}
+
+    .table:extend(.table all){}
+    .pagination:extend(.pagination all){}
+
+    .btn:extend(.btn all){}
+    .btn-default:extend(.btn-default all){}
+    .btn-danger:extend(.btn-danger all){}
+    .btn-primary:extend(.btn-primary all){}
+    .btn-group:extend(.btn-group all){}
+    .btn-success:extend(.btn-success all){}
+    .input-group:extend(.input-group all){}
+    .input-group-addon:extend(.input-group-addon all){}
+    .input-group-btn:extend(.input-group-btn all){}
+    .dropdown-menu:extend(.dropdown-menu all){}
+    .dropdown-toggle:extend(.dropdown-toggle all){}
+    .dropdown-header:extend(.dropdown-header all){}
+    .divider:extend(.divider all){}
+
+    .table-striped:extend(.table-striped all){}
+    .table-bordered:extend(.table-bordered all){}
+
+    .navbar:extend(.navbar all){}
+    .navbar-search:extend(.navbar-search all){}
+    .form-search:extend(.form-search all){}
+    .ui-offset-parent:extend(.ui-offset-parent all){}
+
+    .form-group:extend(.form-group all){}
+    .help-block:extend(.help-block all){}
+    .checkbox:extend(.checkbox all){}
+
+    .open:extend(.open all){}
+
+    position: relative;
+    display: inline-block;
+
+    .toolbar {
+        display: table;
+        width: 100%;
+        background-color: #d8d8d8;
+
+        .btn {
+            &:extend(.btn-sm);
+        }
+
+        .mode-selector {
+            display: table-cell;
+            width: 140px;
+            vertical-align: middle;
+        }
+
+        .path-wrapper {
+            display: table-cell;
+            margin-top: 2px;
+            margin-bottom: 2px;
+            vertical-align: middle;
+        }
+
+        .controls {
+            display: table-cell;
+            width: 210px;
+            vertical-align: middle;
+        }
     }
-  }
 }
-.pat-relateditems {
 
+.pattern-relateditems-dropdown {
+    .select2-results {
+        .select2-highlighted {
+            color: #000;
+            background: #d8d8d8;
+        }
+
+        .select2-selected {
+            display: list-item;
+        }
+    }
 }
 
 .pattern-relateditems-active {
     padding: 5px;
-    background-color: #DDD;
+    background-color: #ddd;
 }
 
-.pattern-relateditems-container {
-  display: inline-block;
-  position: relative;
-}
-.pattern-relateditems-path {
-  display: block;
-  line-height: 20px;
-  background-color: #f1f1f1;
-  font-size: 12px;
-  border: 1px solid #aaa;
-  border-bottom-style: none;
-  z-index: 4;
-  position: relative;
-  padding: 0 6px;
-  color: #333;
-
-  a {
-    padding: 0 6px;
-  }
-
-  em {
-    color: #666;
-  }
+.pattern-relateditems-path-label {
+    margin-top: 2px;
 }
 
 .pattern-relateditems-buttons {
-  position: absolute;
-  display: inline-block;
-  text-align: right;
-  font-size: 18px;
-  right: 0;
-  top: 50%;
-  margin-top: -16px;
-  margin-right: 8px;
-  a {
-    display: block;
-    height: 36px;
-    line-height: 36px;
-    .glyphicon();
-    .glyphicon-chevron-right();
-  }
-  a:hover:before {
-    color:purple;
-  }
-}
-
-.pattern-relateditems-result {
-  padding-right: 30px;
-  position: relative;
-
-  a {
-    &:hover {
-      text-decoration: none;
+    font-size: 18px;
+    position: absolute;
+    top: 50%;
+    right: 0;
+    display: inline-block;
+    margin-top: -16px;
+    margin-right: 8px;
+    text-align: right;
+
+    a {
+        .glyphicon();
+        .glyphicon-chevron-right();
+        line-height: 36px;
+        display: block;
+        height: 36px;
+
+        &:hover:before {
+            color:purple;
+        }
     }
-  }
-
-  .pattern-relateditems-result-select {
-    display: block;
-    line-height: 15px;
-    padding-top: 5px;
-  }
-
-  .pattern-relateditems-result-path {
-    display: block;
-    color: #444;
-    font-size: 11px;
-  }
-}
 
-.pattern-relateditems-item {
-  .pattern-relateditems-item-path {
-    font-size: 11px;
-    color: #444;
-    display: block;
-  }
 }
 
-/* tree parts */
-.pattern-relateditems-tree {
-  .tree-container {
-    box-shadow: 0px 0px 8px 0px #DDD;
-    position: absolute;
-    background-color: white;
-    min-width: 200px;
-    padding: 0px;
-    left: -1px;
-    top: -11px;
-    border: 1px solid #5897fb;
-    display: none;
-    z-index: 10000;
-    min-width: 350px;
-    margin-top: 10px;
-
-    .pat-tree {
-      max-height: 400px;
-      overflow-y: scroll;
-      overflow-x: hidden;
-      border-top: 1px solid #DDD;
-      border-bottom: 1px solid #DDD;
-      padding: 2px 0;
-    }
+.pattern-relateditems-result {
+    position: relative;
+    padding-right: 30px;
 
-    .select-folder-label {
-      font-weight: bold;
+    a {
+        &:hover {
+            text-decoration: none;
+        }
     }
 
-    .tree-node-empty{
-      font-size: 75%;
+    .pattern-relateditems-result-select {
+        line-height: 15px;
+        display: block;
+        padding-top: 5px;
     }
 
-    .title-container{
-      background-color: #f1f1f1;
+    .pattern-relateditems-result-path {
+        font-size: 11px;
+        display: block;
+        color: #444;
     }
+}
 
-    .jqtree-tree {
-      background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, color-stop(1%, #eeeeee), color-stop(5%, #ffffff));
-      background-image: -webkit-linear-gradient(top, #eeeeee 1%, #ffffff 5%);
-      background-image: -moz-linear-gradient(top, #eeeeee 1%, #ffffff 5%);
-      background-image: linear-gradient(to bottom, #eeeeee 1%, #ffffff 5%);
-
-      .pattern-relateditems-buttons {
-        margin-top: -22px;
-        top: inherit;
-      }
-      .jqtree_common {
-        padding-left: 2px;
-      }
-
-      .jqtree_common.jqtree-selected {
-        .jqtree_common.jqtree-element {
-          background: #f1f1f1;
-          text-shadow: none;
-        }
-      }
-
-      .jqtree-toggler{
-        top: 20%;
-      }
-
-      li.jqtree_common {
-        .jqtree-element{
-          padding: 0;
-        }
-        .jqtree_common.jqtree-element {
-            &:hover {
-                background: #f1f1f1;
-            }
-        }
-        &.jqtree-folder{
-          margin-left: 18px;
-
-          ul.jqtree_common{
-            margin-left:0;
-            padding-left:0;
-          }
-        }
-      }
+.pattern-relateditems-item {
+    .pattern-relateditems-item-path {
+        font-size: 11px;
+        display: block;
+        color: #444;
     }
-  }
 }
diff --git a/mockup/patterns/relateditems/templates/breadcrumb.xml b/mockup/patterns/relateditems/templates/breadcrumb.xml
new file mode 100644
index 0000000..e9db410
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/breadcrumb.xml
@@ -0,0 +1,2 @@
+<span class="separator">/<span>
+<a href="<%- path %>" class="crumb"><%- text %></a>
diff --git a/mockup/patterns/relateditems/templates/favorite.xml b/mockup/patterns/relateditems/templates/favorite.xml
new file mode 100644
index 0000000..538cf4f
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/favorite.xml
@@ -0,0 +1 @@
+<li><a href="<%- path %>" class="fav" aria-labelledby="blip"><%- title %></a></li>
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
new file mode 100644
index 0000000..49a82f6
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -0,0 +1,13 @@
+<div class="pattern-relateditems-result">
+  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
+    <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon "> <% } %>
+    <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
+    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
+    <span class="pattern-relateditems-result-path"><%- path %></span>
+  </a>
+  <span class="pattern-relateditems-buttons">
+  <% if (mode !== "search" && is_folderish) { %>
+     <a class="pattern-relateditems-result-browse" href="#" data-path="<%- path %>"></a>
+   <% } %>
+ </span>
+</div>
diff --git a/mockup/patterns/relateditems/templates/selection.xml b/mockup/patterns/relateditems/templates/selection.xml
new file mode 100644
index 0000000..cabafec
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/selection.xml
@@ -0,0 +1,5 @@
+<span class="pattern-relateditems-item">
+  <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %> <img src="<%- getURL %>/@@images/image/icon"> <% } %>
+  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>
+  <span class="pattern-relateditems-item-path"><%- path %></span>
+</span>
diff --git a/mockup/patterns/relateditems/templates/toolbar.xml b/mockup/patterns/relateditems/templates/toolbar.xml
new file mode 100644
index 0000000..dc0d217
--- /dev/null
+++ b/mockup/patterns/relateditems/templates/toolbar.xml
@@ -0,0 +1,23 @@
+<div class="btn-group mode-selector" role="group">
+  <button type="button" class="mode search btn <% if (mode=="search") { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
+  <button type="button" class="mode browse btn <% if (mode=="browse") { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
+</div>
+<div class="path-wrapper">
+  <span class="pattern-relateditems-path-label"><%- searchText %></span>
+  <a class="crumb" href="<%- rootPath %>"><span class="glyphicon glyphicon-home"/></a>
+  <%= items %>
+</div>
+<div class="controls pull-right">
+  <% if (favorites.length > 0) { %>
+  <div class="favorites dropdown pull-right">
+    <button class="favorites dropdown-toggle btn btn-primary" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
+      <span class="glyphicon glyphicon-star"/>
+      <%- favText %>
+      <span class="caret"/>
+    </button>
+    <ul class="dropdown-menu">
+      <%= favItems %>
+    </ul>
+  </div>
+  <% } %>
+</div>
diff --git a/mockup/patterns/relateditems/upload.js b/mockup/patterns/relateditems/upload.js
new file mode 100644
index 0000000..2079476
--- /dev/null
+++ b/mockup/patterns/relateditems/upload.js
@@ -0,0 +1,76 @@
+define([
+  'underscore',
+  'mockup-ui-url/views/popover',
+  'mockup-patterns-upload',
+  'mockup-utils',
+], function(_, PopoverView, Upload, utils) {
+  'use strict';
+
+  var UploadView = PopoverView.extend({
+    className: 'popover upload',
+    title: _.template('<%- _t("Upload files") %>'),
+    content: _.template(
+      '<input type="text" name="upload" style="display:none" />' +
+      '<div class="uploadify-me"></div>'),
+
+    popover: undefined,
+
+    initialize: function(options) {
+      var self = this;
+      self.app = options.app;
+      PopoverView.prototype.initialize.apply(self, [options]);
+    },
+
+    render: function() {
+      var self = this;
+      self.popover = PopoverView.prototype.render.call(this);
+      var options = {};
+      options.success = function(e, response) {
+        var uid = response.UID;
+        if (uid) {
+          var query = new utils.QueryHelper({
+            vocabularyUrl: self.app.options.vocabularyUrl,
+            attributes: self.app.options.attributes
+          });
+          var result = query.search(
+              'UID',
+              'plone.app.querystring.operation.selection.is',
+              uid,
+              function (e) {
+                var data = self.app.$el.select2('data');
+                data.push.apply(data, e.results);
+                self.app.$el.select2('data', data, true);
+                self.app.emit('selected');
+                self.popover.hide();
+              },
+              false
+          )
+        }
+        // getIcon, getURL, portal_type, review_state, Title, path
+        // var itemHtml = self.applyTemplate('selection', item);
+      };
+      options.uploadMultiple = true;
+      options.allowPathSelection = false;
+      options.relativePath = 'fileUpload';
+      options.baseUrl = self.app.currentPath;
+      self.upload = new Upload(self.$('.uploadify-me').addClass('pat-upload'), options);
+      return this;
+    },
+
+    toggle: function(button, e) {
+      /* we need to be able to change the current default upload directory */
+      PopoverView.prototype.toggle.apply(this, [button, e]);
+      var self = this;
+      if (!this.opened) {
+        return;
+      }
+      if (self.app.currentPath !== self.upload.currentPath) {
+        self.upload.setPath(self.app.currentPath);
+      }
+    }
+
+  });
+
+  return UploadView;
+});
+
diff --git a/mockup/patterns/structure/js/actionmenu.js b/mockup/patterns/structure/js/actionmenu.js
index 1ab291d..c5c1007 100644
--- a/mockup/patterns/structure/js/actionmenu.js
+++ b/mockup/patterns/structure/js/actionmenu.js
@@ -7,6 +7,7 @@ define(['underscore'], function(_) {
       'title':    'Open',
       'category': 'button',
       'iconCSS':  'glyphicon glyphicon-eye-open',
+      'css': '',
       'modal':    false
     },
     'editItem': {
@@ -14,6 +15,7 @@ define(['underscore'], function(_) {
       'title':    'Edit',
       'category': 'button',
       'iconCSS':  'glyphicon glyphicon-pencil',
+      'css': '',
       'modal':    false
     },
     'cutItem': {
@@ -23,6 +25,7 @@ define(['underscore'], function(_) {
       'title':    'Cut',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-scissors',
+      'css': '',
       'modal':    false
     },
     'copyItem': {
@@ -32,6 +35,7 @@ define(['underscore'], function(_) {
       'title':    'Copy',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-duplicate',
+      'css': '',
       'modal':    false
     },
     'pasteItem': {
@@ -41,6 +45,7 @@ define(['underscore'], function(_) {
       'title':    'Paste',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-open-file',
+      'css': '',
       'modal':    false
     },
     'move-top': {
@@ -50,6 +55,7 @@ define(['underscore'], function(_) {
       'title':    'Move to top of folder',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-step-backward rright',
+      'css': '',
       'modal':    false
     },
     'move-bottom': {
@@ -59,6 +65,7 @@ define(['underscore'], function(_) {
       'title':    'Move to bottom of folder',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-step-backward rleft',
+      'css': '',
       'modal':    false
     },
     'set-default-page': {
@@ -68,6 +75,7 @@ define(['underscore'], function(_) {
       'title':    'Set as default page',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-ok-circle',
+      'css': '',
       'modal':    false
     },
     'selectAll': {
@@ -77,6 +85,7 @@ define(['underscore'], function(_) {
       'title':    'Select all contained items',
       'category': 'dropdown',
       'iconCSS':  'glyphicon glyphicon-check',
+      'css': '',
       'modal':    false
     }
   };
diff --git a/mockup/patterns/structure/js/views/actionmenu.js b/mockup/patterns/structure/js/views/actionmenu.js
index 0e24544..58a187e 100644
--- a/mockup/patterns/structure/js/views/actionmenu.js
+++ b/mockup/patterns/structure/js/views/actionmenu.js
@@ -9,7 +9,6 @@ define([
   'text!mockup-patterns-structure-url/templates/actionmenu.xml',
   'pat-registry',
   'translate',
-  'mockup-patterns-modal',
   'mockup-patterns-tooltip',
   'bootstrap-dropdown'
 ], function($, _, BaseView, utils, Result, Actions, ActionMenu, ActionMenuTemplate, registry, _t) {
@@ -23,7 +22,6 @@ define([
     menuOptions: null,
     // Dynamic menu options
     menuGenerator: 'mockup-patterns-structure-url/js/actionmenu',
-    needsRescan: false,
 
     eventConstructor: function(definition) {
       var self = this;
@@ -60,11 +58,14 @@ define([
               menuOptionsCategorized[category] = [];
           }
           menuOptionsCategorized[category].push(menuOption);
-          if (menuOption.modal || menuOption.category === 'button') {
-            self.needsRescan = true;
+          menuOption.css = menuOption.css || '';
+          if (menuOption.modal === true) {
+            // add standard pat-plone-modal.
+            // If you want another modal implementation, don't use modal=true but set the css option on action items.
+            menuOption.css += ' pat-plone-modal';
           }
 
-		      // Create event handler and add it to the results object.
+          // Create event handler and add it to the results object.
           var e = self.eventConstructor(menuOption);
           if (e) {
             result['click a.' + idx] = e;
@@ -103,7 +104,6 @@ define([
       var data = this.model.toJSON();
       data.header = self.options.header || null;
       data.menuOptions = self.menuOptionsCategorized;
-
       self.$el.html(self.template($.extend({
         _t: _t,
         id: utils.generateId()
@@ -118,9 +118,7 @@ define([
         self.$el.addClass(self.options.className);
       }
 
-      if (this.needsRescan) {
-        registry.scan(this.$el);
-      }
+      registry.scan(this.$el);
 
       return this;
     }
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index 404b49f..58e8511 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -51,7 +51,7 @@ define([
       /* close popovers when clicking away */
       $(document).click(function(e) {
         var $el = $(e.target);
-        if (!$el.is(':visible')) {
+        if (!$el.is(':visible') || $el.css('visibility') === 'hidden' || $el.css('opacity') === '0') {
           // ignore this, fake event trigger to element that is not visible
           return;
         }
diff --git a/mockup/patterns/structure/js/views/columns.js b/mockup/patterns/structure/js/views/columns.js
index 3c18b98..c13e1ed 100644
--- a/mockup/patterns/structure/js/views/columns.js
+++ b/mockup/patterns/structure/js/views/columns.js
@@ -33,7 +33,21 @@ define([
     afterRender: function() {
       var self = this;
 
+      var objKeySortCmp = function (a, b) {
+        // object key sort compare function
+        var ca = self.app.availableColumns[a];
+        var cb = self.app.availableColumns[b];
+        if (ca < cb) {
+          return -1;
+        } else if (ca == cb) {
+          return 0;
+        } else {
+          return 1;
+        }
+      }
+
       self.$container = self.$('ul');
+
       _.each(self.app.activeColumns, function(id) {
         var $el = $(self.itemTemplate({
           title: self.app.availableColumns[id],
@@ -42,10 +56,11 @@ define([
         $el.find('input')[0].checked = true;
         self.$container.append($el);
       });
-      _.each(_.omit(self.app.availableColumns, self.app.activeColumns),
-        function(name, id) {
+
+      var availableKeys = _.keys(_.omit(self.app.availableColumns, self.app.activeColumns)).sort(objKeySortCmp);
+      _.each(availableKeys, function(id) {
           var $el = $(self.itemTemplate({
-            title: name,
+            title: self.app.availableColumns[id],
             id: id
           }));
           self.$container.append($el);
diff --git a/mockup/patterns/structure/js/views/upload.js b/mockup/patterns/structure/js/views/upload.js
index d9994d8..74cefa2 100644
--- a/mockup/patterns/structure/js/views/upload.js
+++ b/mockup/patterns/structure/js/views/upload.js
@@ -29,10 +29,8 @@ define([
       options.success = function() {
         self.app.collection.pager();
       };
-      options.relatedItems = {
-        vocabularyUrl: self.app.options.vocabularyUrl
-      };
       options.currentPath = self.app.getCurrentPath();
+      options.allowPathSelection = false;
       self.upload = new Upload(self.$('.uploadify-me').addClass('pat-upload'), options);
       return this;
     },
@@ -45,13 +43,7 @@ define([
         return;
       }
       var currentPath = self.app.getCurrentPath();
-      var relatedItems = self.upload.relatedItems;
-      if (self.currentPathData && relatedItems && currentPath !== self.upload.currentPath){
-        if (currentPath === '/'){
-          relatedItems.$el.select2('data', []);
-        } else {
-          relatedItems.$el.select2('data', [self.currentPathData.object]);
-        }
+      if (self.currentPathData && currentPath !== self.upload.currentPath){
         self.upload.setPath(currentPath);
       }
     }
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 576abb0..3882355 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -287,7 +287,6 @@
 }
 
 #popover-rename {
-    width: 400px;
 
     .popover-content{
         max-height: 500px;
@@ -303,6 +302,20 @@
         border-bottom: 1px solid #0E6EB0;
         margin-bottom: 5px;
         padding-bottom: 10px;
+
+        /* clearfix */
+        display: table;
+        clear: both;
+        content: '';
+
+        div.form-group {
+            float: left;
+        }
+        img {
+            float: left;
+            margin-left: 1em;
+        }
+
     }
 }
 
@@ -338,7 +351,7 @@ table.structure-dragging{
     .itemRow{
         .actionmenu-container{
             display: none;
-        } 
+        }
         td{
             padding: 5px;
         }
diff --git a/mockup/patterns/structure/pattern.js b/mockup/patterns/structure/pattern.js
index 8d8f2d7..9461f63 100644
--- a/mockup/patterns/structure/pattern.js
+++ b/mockup/patterns/structure/pattern.js
@@ -48,7 +48,7 @@ define([
 
       activeColumnsCookie: 'activeColumns',
 
-      iconSize: 'icon',
+      iconSize: 'thumb',
 
       /*
         As the options operate on a merging basis per new attribute
@@ -131,7 +131,6 @@ define([
         },
         url: '/rearrange'
       },
-      basePath: '/',
       moveUrl: null,
 
       buttons: null,
diff --git a/mockup/patterns/structure/templates/actionmenu.xml b/mockup/patterns/structure/templates/actionmenu.xml
index 6ad72b5..dea7ba1 100644
--- a/mockup/patterns/structure/templates/actionmenu.xml
+++ b/mockup/patterns/structure/templates/actionmenu.xml
@@ -1,5 +1,5 @@
 <% _.each(menuOptions.button, function(menuOption){ %>
-<a class="action <%- menuOption.name %> <%- menuOption.idx %> pat-tooltip <% if (menuOption.modal) { %>pat-plone-modal<% } %>"
+<a class="action <%- menuOption.name %> <%- menuOption.idx %> pat-tooltip <%- menuOption.css %>"
     href="<%- menuOption.url %>"
     title="<%- _t(menuOption.title) %>">
   <% if (menuOption.iconCSS) { %>
@@ -29,7 +29,7 @@
 
   <% _.each(menuOptions.dropdown, function(menuOption){ %>
   <li>
-    <a class="action <%- menuOption.name %> <%- menuOption.idx %> <% if (menuOption.modal) { %>pat-plone-modal<% } %>"
+    <a class="action <%- menuOption.name %> <%- menuOption.idx %> <%- menuOption.css %>"
         href="<%- menuOption.url %>">
       <% if (menuOption.iconCSS) { %>
       <span class="<%- menuOption.iconCSS %>"></span>
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index 39b32c4..db1ce11 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -84,8 +84,9 @@ define([
     },
 
     createRelatedItems: function() {
-      this.relatedItems = new RelatedItems(this.getEl(),
-        this.linkModal.options.relatedItems);
+      var options = this.tinypattern.options.relatedItems;
+      options.upload = false;  // ensure that related items upload is off.
+      this.relatedItems = new RelatedItems(this.getEl(), options);
     },
 
     value: function() {
@@ -461,7 +462,7 @@ define([
         altText: this.options.text.alt,
         imageAlignText: this.options.text.imageAlign,
         scaleText: this.options.text.scale,
-        scales: this.options.scales,
+        imageScales: this.options.imageScales,
         cancelBtn: this.options.text.cancelBtn,
         insertBtn: this.options.text.insertBtn
       });
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index e3d9c1c..a69a34b 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -4,7 +4,7 @@
  *    relatedItems(object): Related items pattern options. ({ attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"], batchSize: 20, basePath: "/", vocabularyUrl: null, width: 500, maximumSelectionSize: 1, placeholder: "Search for item on site..." })
  *    upload(object): Upload pattern options. ({ attributes: look at upload pattern for getting the options list })
  *    text(object): Translation strings ({ insertBtn: "Insert", cancelBtn: "Cancel", insertHeading: "Insert link", title: "Title", internal: "Internal", external: "External", email: "Email", anchor: "Anchor", subject: "Subject" image: "Image", imageAlign: "Align", scale: "Size", alt: "Alternative Text", externalImage: "External Image URI"})
- *    scales(string): TODO: is this even used ('Listing (16x16):listing,Icon (32x32):icon,Tile (64x64):tile,Thumb (128x128):thumb,Mini (200x200):mini,Preview (400x400):preview,Large (768x768):large')
+ *    imageScales(string): Image scale name/value object-array or JSON string for use in the image dialog.
  *    targetList(array): TODO ([ {text: "Open in this window / frame", value: ""}, {text: "Open in new window", value: "_blank"}, {text: "Open in parent window / frame", value: "_parent"}, {text: "Open in top frame (replaces all frames)", value: "_top"}])
  *    imageTypes(string): TODO ('Image')
  *    folderTypes(string): TODO ('Folder,Plone Site')
@@ -63,8 +63,6 @@ define([
   'underscore',
   'pat-base',
   'tinymce',
-  'text!mockup-patterns-tinymce-url/templates/result.xml',
-  'text!mockup-patterns-tinymce-url/templates/selection.xml',
   'mockup-utils',
   'mockup-patterns-tinymce-url/js/links',
   'mockup-i18n',
@@ -111,10 +109,7 @@ define([
   'tinymce-visualchars',
   'tinymce-wordcount',
   'tinymce-compat3x'
-], function($, _,
-            Base, tinymce,
-            ResultTemplate, SelectionTemplate,
-            utils, LinkModal, I18n, _t) {
+], function($, _, Base, tinymce, utils, LinkModal, I18n, _t) {
   'use strict';
 
   var TinyMCE = Base.extend({
@@ -158,13 +153,19 @@ define([
       prependToUrl: '',
       appendToUrl: '',
       linkAttribute: 'path', // attribute to get link value from data
-      prependToScalePart: '/imagescale/', // some value here is required to be able to parse scales back
+      prependToScalePart: '/imagescale/',
       appendToScalePart: '',
       appendToOriginalScalePart: '',
       defaultScale: 'large',
-      scales: _t('Listing (16x16):listing,Icon (32x32):icon,Tile (64x64):tile,' +
-              'Thumb (128x128):thumb,Mini (200x200):mini,Preview (400x400):preview,' +
-              'Large (768x768):large'),
+      imageScales: [
+        {title: 'Mini', value: 'mini'},
+        {title: 'Thumb', value: 'thumb'},
+        {title: 'Listing', value: 'listing'},
+        {title: 'Preview', value: 'preview'},
+        {title: 'Tile', value: 'tile'},
+        {title: 'Icon', value: 'icon'},
+        {title: 'Large', value: 'large'}
+      ],
       targetList: [
         {text: _t('Open in this window / frame'), value: ''},
         {text: _t('Open in new window'), value: '_blank'},
@@ -229,9 +230,7 @@ define([
               o: 'plone.app.querystring.operation.list.contains',
               v: self.options.imageTypes.concat(self.options.folderTypes)
             }],
-            selectableTypes: self.options.imageTypes,
-            resultTemplate: ResultTemplate,
-            selectionTemplate: SelectionTemplate
+            selectableTypes: self.options.imageTypes
           }
         });
         var $el = $('<div/>').insertAfter(self.$el);
@@ -250,16 +249,9 @@ define([
     generateImageUrl: function(data, scale_name) {
       var self = this;
       var url = self.generateUrl(data);
-      if (scale_name !== ''){
-        var part = scale_name;
-        for(var i=0; i<self.options.scales.length; i=i+1){
-          if(self.options.scales[i].name === scale_name){
-            part = self.options.scales[i].part;
-          }
-        }
-        url = (url + self.options.prependToScalePart + part +
-               self.options.appendToScalePart);
-      }else{
+      if (scale_name) {
+        url = url + self.options.prependToScalePart + scale_name + self.options.appendToScalePart;
+      } else {
         url = url + self.options.appendToOriginalScalePart;
       }
       return url;
@@ -343,6 +335,11 @@ define([
       self.linkModal = self.imageModal = self.uploadModal = self.pasteModal = null;
       // tiny needs an id in order to initialize. Creat it if not set.
       var id = utils.setId(self.$el);
+
+      if (self.options.imageScales && typeof self.options.imageScales === 'string') {
+        self.options.imageScales = JSON.parse(self.options.imageScales);
+      }
+
       var tinyOptions = self.options.tiny;
       if (self.options.inline === true) {
         self.options.tiny.inline = true;
@@ -358,11 +355,6 @@ define([
       // XXX: disabled skin means it wont load css files which we already
       // include in widgets.min.css
       tinyOptions.skin = false;
-      self.options.relatedItems.generateImageUrl = function(data, scale) {
-        // this is so, in our result and selection template, we can
-        // access getting actual urls from related items
-        return self.generateImageUrl.apply(self, [data, scale]);
-      };
 
       tinyOptions.init_instance_callback = function(editor) {
         if (self.tiny === undefined || self.tiny === null) {
@@ -371,19 +363,10 @@ define([
       };
 
       self.initLanguage(function() {
-        if(typeof(self.options.scales) === 'string'){
-          self.options.scales = _.map(self.options.scales.split(','), function(scale){
-            scale = scale.split(':');
-            return {
-              part: scale[1],
-              name: scale[1],
-              label: scale[0]
-            };
-          });
-        }
         if(typeof(self.options.folderTypes) === 'string'){
           self.options.folderTypes = self.options.folderTypes.split(',');
         }
+
         if(typeof(self.options.imageTypes) === 'string'){
           self.options.imageTypes = self.options.imageTypes.split(',');
         }
diff --git a/mockup/patterns/tinymce/templates/image.xml b/mockup/patterns/tinymce/templates/image.xml
index 52b4ee8..f3e0fcd 100644
--- a/mockup/patterns/tinymce/templates/image.xml
+++ b/mockup/patterns/tinymce/templates/image.xml
@@ -19,9 +19,9 @@
             <label><%- scaleText %></label>
             <select name="scale">
               <option value="">Original</option>
-                <% _.each(scales, function(scale){ %>
-                  <option value="<%- scale.part %>" <% if(scale.name === options.defaultScale){ %>selected<% } %> >
-                    <%- scale.label %>
+                <% _.each(imageScales, function(scale){ %>
+                  <option value="<%- scale.value %>" <% if(scale.value === options.defaultScale){ %>selected<% } %> >
+                    <%- scale.title %>
                   </option>
                 <% }); %>
             </select>
diff --git a/mockup/patterns/tinymce/templates/result.xml b/mockup/patterns/tinymce/templates/result.xml
deleted file mode 100644
index 5f1bee7..0000000
--- a/mockup/patterns/tinymce/templates/result.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<div class="pattern-relateditems-result pattern-relateditems-type-<%= portal_type %> <% if (selected) { %>pattern-active<% } %>">
-  <a href="#" class="pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
-    <% if (!folderish) { %>
-    <span class="pattern-relateditems-result-image">
-      <img src="<%= generateImageUrl(_item, 'thumb') %>" />
-    </span>
-    <% } %>
-    <span class="pattern-relateditems-result-title"><%= Title %></span>
-    <span class="pattern-relateditems-result-path"><%= path %></span>
-  </a>
-  <span class="pattern-relateditems-buttons">
-    <% if (folderish) { %>
-      <a class="pattern-relateditems-result-browse" href="#" data-path="<%= path %>"></a>
-    <% } %>
-  </span>
-</div>
diff --git a/mockup/patterns/tinymce/templates/selection.xml b/mockup/patterns/tinymce/templates/selection.xml
deleted file mode 100644
index 7927adb..0000000
--- a/mockup/patterns/tinymce/templates/selection.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<span class="pattern-relateditems-item pattern-relateditems-type-<%= portal_type %>">
- <span class="pattern-relateditems-result-image">
-   <img src="<%= generateImageUrl(_item, 'thumb') %>" />
- </span>
- <span class="pattern-relateditems-item-title"><%= Title %></span>
- <span class="pattern-relateditems-item-path"><%= path %></span>
-</span>'
diff --git a/mockup/patterns/upload/less/pattern.upload.less b/mockup/patterns/upload/less/pattern.upload.less
index 56907e3..31282eb 100644
--- a/mockup/patterns/upload/less/pattern.upload.less
+++ b/mockup/patterns/upload/less/pattern.upload.less
@@ -24,8 +24,10 @@
             margin-bottom: 1px;
         }
         .controls{
+            display: block;
             margin-top: 10px;
             padding-top: 10px;
+            width: 100%;
         }
         .previews{
             margin-top: 4em;
diff --git a/mockup/patterns/upload/pattern.js b/mockup/patterns/upload/pattern.js
index 0a8e4a4..8411061 100644
--- a/mockup/patterns/upload/pattern.js
+++ b/mockup/patterns/upload/pattern.js
@@ -16,7 +16,8 @@
  *    autoCleanResults(boolean): condition value for the file preview in div element to fadeout after file upload is completed. (true)
  *    previewsContainer(selector): JavaScript selector for file preview in div element. (.upload-previews)
  *    container(selector): JavaScript selector for where to put upload stuff into in case of form. If not provided it will be place before the first submit button. ('')
- *    relatedItems(object): Related items pattern options. Will only use only if relativePath is used to use correct upload destination ({ attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"], batchSize: 20, basePath: "/", vocabularyUrl: null, width: 500, maximumSelectionSize: 1, placeholder: "Search for item on site..." })
+ *    allowPathSelection(boolean): Use relatedItems to set a different path from the current path. (true, if baseUrl and relativePath are set)
+ *    relatedItems(object): Related items pattern options. Will only be used if allowPathSelection is true. ({ attributes: ["UID", "Title", "Description", "getURL", "portal_type", "path", "ModificationDate"], batchSize: 20, basePath: "/", vocabularyUrl: null, width: 500, maximumSelectionSize: 1, placeholder: "Search for item on site..." })
  *
  * Documentation:
  *
@@ -78,6 +79,7 @@ define([
       maxFiles: null,
       maxFilesize: 99999999, // let's not have a max by default...
 
+      allowPathSelection: undefined,
       relatedItems: {
         // UID attribute is required here since we're working with related items
         attributes: ['UID', 'Title', 'Description', 'getURL', 'portal_type', 'path', 'ModificationDate'],
@@ -94,8 +96,13 @@ define([
       var self = this,
           template = UploadTemplate;
 
+      if (typeof self.options.allowPathSelection === 'undefined') {
+        // Set allowPathSelection to true, if we can use path based urls.
+        self.options.allowPathSelection = self.options.baseUrl && self.options.relativePath;
+      }
+
       // TODO: find a way to make this work in firefox (and IE)
-      $(document).bind('paste', function(e){
+      $(document).bind('paste', function(e) {
         var oe = e.originalEvent;
         var items = oe.clipboardData.items;
         if (items) {
@@ -111,7 +118,10 @@ define([
       self.currentPath = self.options.currentPath;
       self.currentFile = 0;
 
-      template = _.template(template)({_t: _t});
+      template = _.template(template)({
+        _t: _t,
+        allowPathSelection: self.options.allowPathSelection
+      });
       self.$el.addClass(self.options.className);
       self.$el.append(template);
 
@@ -136,8 +146,8 @@ define([
         self.$el = self.$el.parent();
       }
 
-      if (self.options.baseUrl && self.options.relativePath){
-        // only use related items if we can generate paths based urls
+      if (self.options.allowPathSelection) {
+        // only use related items if we can generate path based urls and if it's not turned off.
         self.$pathInput = $('input[name="location"]', self.$el);
         self.relatedItems = self.setupRelatedItems(self.$pathInput);
       } else {
@@ -475,6 +485,7 @@ define([
     setupRelatedItems: function($input) {
       var self = this;
       var options = self.options.relatedItems;
+      options.upload = false;  // ensure that related items upload is off.
       if (self.options.initialFolder){
         $input.attr('value', self.options.initialFolder);
       }
diff --git a/mockup/patterns/upload/templates/upload.xml b/mockup/patterns/upload/templates/upload.xml
index 75c0ac3..663debe 100644
--- a/mockup/patterns/upload/templates/upload.xml
+++ b/mockup/patterns/upload/templates/upload.xml
@@ -28,6 +28,7 @@
             <div class="previews">
             </div>
             <div class="controls">
+                <% if (allowPathSelection) { %>
                 <div class="path">
                     <label><%- _t("Upload to...") %></label>
                     <p class="form-help">
@@ -38,6 +39,7 @@
                         name="location"
                         />
                 </div>
+                <% } %>
                 <div class="actions row">
                     <div class="col-md-9">
                         <div class="progress progress-striped active">
diff --git a/mockup/tests/pattern-relateditems-test.js b/mockup/tests/pattern-relateditems-test.js
index bd5e511..25de272 100644
--- a/mockup/tests/pattern-relateditems-test.js
+++ b/mockup/tests/pattern-relateditems-test.js
@@ -11,13 +11,38 @@ define([
   window.mocha.setup('bdd').globals(['jQuery*']);
   $.fx.off = true;
 
-  var $el;
 
   /* ==========================
    TEST: Related Items
   ========================== */
 
   describe('Related Items', function() {
+
+    var root = [
+      {UID:  'UID1',   Title:  'Document  1',  path:  '/document1',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID2',   Title:  'Document  2',  path:  '/document2',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID3',   Title:  'Document  3',  path:  '/document3',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID4',   Title:  'Document  4',  path:  '/document4',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID5',   Title:  'Document  5',  path:  '/document5',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID6',   Title:  'Folder    1',  path:  '/folder1',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID7',   Title:  'Folder    2',  path:  '/folder2',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID8',   Title:  'Image     1',  path:  '/image1',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID9',   Title:  'Image     2',  path:  '/image2',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID10',  Title:  'Image     3',  path:  '/image3',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
+    ];
+    var folder1 = [
+      {UID:  'UID11',   Title:  'Document  11',  path:  '/folder1/document11',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID12',   Title:  'Document  12',  path:  '/folder1/document12',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID13',   Title:  'Document  13',  path:  '/folder1/document13',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+    ];
+    var folder2 = [
+      {UID:  'UID14',   Title:  'Document  14',  path:  '/folder2/document14',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID15',   Title:  'Document  15',  path:  '/folder2/document15',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID16',   Title:  'Document  16',  path:  '/folder2/document16',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+    ];
+    var searchables;
+    var $container;
+
     beforeEach(function() {
       this.server = sinon.fakeServer.create();
       this.server.autoRespond = true;
@@ -37,53 +62,21 @@ define([
         return null;
       }
       this.server.respondWith(/relateditems-test.json/, function(xhr, id) {
-        var root = [
-          {UID: 'jasdlfdlkdkjasdf', Title: 'Some Image', path: '/test.png', portal_type: 'Image', getIcon: "image.png"},
-          {UID: 'asdlfkjasdlfkjasdf', Title: 'News', path: '/news', portal_type: 'Folder', getIcon: ""},
-          {UID: '124asdfasasdaf34', Title: 'About', path: '/about', portal_type: 'Folder', getIcon: ""},
-          {UID: 'asdf1234', Title: 'Projects', path: '/projects', portal_type: 'Folder', getIcon: ""},
-          {UID: 'asdf1234gsad', Title: 'Contact', path: '/contact', portal_type: 'Document', getIcon: "document.png"},
-          {UID: 'asdv34sdfs', Title: 'Privacy Policy', path: '/policy', portal_type: 'Document', getIcon: ""},
-          {UID: 'asdfasdf234sdf', Title: 'Our Process', path: '/our-process', portal_type: 'Folder', getIcon: "folder.png"},
-          {UID: 'asdhsfghyt45', Title: 'Donate', path: '/donate-now', portal_type: 'Document', getIcon: ""},
-        ];
-        var about = [
-          {UID: 'gfn5634f', Title: 'About Us', path: '/about/about-us', portal_type: 'Document', getIcon: ""},
-          {UID: '45dsfgsdcd', Title: 'Philosophy', path: '/about/philosophy', portal_type: 'Document', getIcon: ""},
-          {UID: 'dfgsdfgj675', Title: 'Staff', path: '/about/staff', portal_type: 'Folder', getIcon: ""},
-          {UID: 'sdfbsfdh345', Title: 'Board of Directors', path: '/about/board-of-directors', portal_type: 'Document', getIcon: ""}
-        ];
-
-        var staff = [
-          {UID: 'asdfasdf9sdf', Title: 'Mike', path: '/about/staff/mike', portal_type: 'Document', getIcon: ""},
-          {UID: 'cvbcvb82345', Title: 'Joe', path: '/about/staff/joe', portal_type: 'Document', getIcon: ""},
-          {UID: 'hax0r', Title: '<script>window.xss=1</script>', path: '/about/staff/xss', portal_type: 'Document', getIcon: ""}
-        ];
-
-        var addMissingFields = function(item) {
-          item.getURL = 'http://localhost:8081' + item.path;
-          item.is_folderish = item.portal_type === 'Folder';
-          item.review_state = 'published';
-        };
 
-        _.each(root, addMissingFields);
-        _.each(about, addMissingFields);
-        _.each(staff, addMissingFields);
-
-        var searchables = about.concat(root).concat(staff);
 
         var addUrls = function(list) {
           /* add getURL value */
           for (var i = 0; i < list.length; i = i + 1) {
-            var data = list[i];
-            data.getURL = window.location.origin + data.path;
+            var item = list[i];
+            item.getURL = window.location.origin + item.path;
           }
         };
-        addUrls(searchables);
+
         addUrls(root);
-        root[0].getURL = window.location.origin + '/exampledata/test.png';
+        addUrls(folder1);
+        addUrls(folder2);
 
-        var results = [];
+        searchables = root.concat(folder1).concat(folder2);
 
         // grab the page number and number of items per page -- note, page is 1-based from Select2
         var batch = getQueryVariable(xhr.url, 'batch');
@@ -113,7 +106,8 @@ define([
           }
         }
 
-        // this seach is for basically searching the entire hierarchy -- this IS NOT the browse "search"
+        var results = [];
+
         function search(items, term) {
           results = [];
           if (term === undefined) {
@@ -137,7 +131,7 @@ define([
                 }
               }
             } else {
-              q = term.toLowerCase();
+              q = term.toLowerCase().slice(0, -1);  // "*" removed
               if (keys.indexOf(q) > -1) {
                 results.push(item);
               }
@@ -147,12 +141,14 @@ define([
 
         function browse(items, q, p) {
           results = [];
-          var path = p.substring(0, p.length - 1);
-          var splitPath = path.split('/');
+          var path = p;
+          // var path = p.substring(0, p.length - 1);
+          // var splitPath = path.split('/');
           var fromPath = [];
           _.each(items, function(item) {
             var itemSplit = item.path.split('/');
-            if (item.path.indexOf(path) === 0 && itemSplit.length - 1 === splitPath.length) {
+            // if (item.path.indexOf(path) === 0 && itemSplit.length - 1 === splitPath.length) {  // search recursively
+            if (item.path.indexOf(path) === 0) {
               fromPath.push(item);
             }
           });
@@ -170,7 +166,7 @@ define([
         xhr.respond(200, { 'Content-Type': 'application/json' },
           JSON.stringify({
             total: results.length,
-            results: results.slice(page * pageSize, (page * pageSize) + (pageSize - 1))
+            results: results.slice(page * pageSize, (page * pageSize) + pageSize)
           })
         );
       });
@@ -178,353 +174,194 @@ define([
 
     afterEach(function() {
       this.server.restore();
-      $el.remove();
+      $container.remove();
       $('.select2-sizer, .select2-drop').remove();
     });
 
+    // test cases
+    // - [x] initialize pattern
+    // - [x] click on browse opens result list
+    // - [x] click on search opens result list
+    // - [x] click on browse with already selected result items opens result list
+    // - [x] click on search with already selected result items opens result list
+    // - [ ] browse to item and select it
+    // - [x] selected item is removed from result list
+    // - [ ] don't allow to select items which are not selectable
+    // - [ ] don't show non-selectable and non folderish items
+    // - [x] only search in current path
+    // - [x] search item and select it
+    // - [x] deselect an item from result list
+    // - [x] selection from favorites opens path
+
+    var initializePattern = function (options) {
+      options = options || {};
+      options.vocabularyUrl = '/relateditems-test.json';
+      options = JSON.stringify(options);
+      $container = $('<div><input class="pat-relateditems" /></div>');
+      $container.appendTo('body');
+      var pattern = $('.pat-relateditems', $container)
+        .attr('data-pat-relateditems', options)
+        .patternRelateditems()
+        .data('patternRelateditems');
+      return pattern;
+
+    };
+
     it('test initialize', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      expect($('.select2-container-multi', $el)).to.have.length(1);
-      expect($('.pattern-relateditems-container', $el)).to.have.length(1);
-      expect($('.pattern-relateditems-path', $el)).to.have.length(1);
-    });
 
-    it('select an item by clicking add button', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      initializePattern();
 
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect($('.pattern-relateditems-result-select')).to.have.length(14);
-      $('.pattern-relateditems-result-select').first().on('click', function() {
-        expect(pattern.$el.select2('data')).to.have.length(1);
-        expect(pattern.$el.select2('val')[0]).to.equal('gfn5634f');
-      }).click();
-      clock.tick(1000);
+      expect($('.select2-container-multi'), $container).to.have.length(1);
+      expect($('.pattern-relateditems-container'), $container).to.have.length(1);
+      expect($('.pattern-relateditems-container .toolbar .path-wrapper'), $container).to.have.length(1);
     });
 
-    it('deselect an item from selected items using click', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
+    it('browse roundtrip', function () {
+      var pattern = initializePattern();
       var clock = sinon.useFakeTimers();
+      var $input;
 
-      pattern.$el.select2('open');
+      // open up result list by clicking on "browse"
+      $('.mode.browse', $container).click();
       clock.tick(1000);
 
-      $('.pattern-relateditems-result-select').first().on('click', function() {
-        expect(pattern.$el.select2('data')).to.have.length(1);
-      }).click();
-      clock.tick(1000);
-      // deselect our first choice
-      var $choice = $('.select2-search-choice').first();
-      $choice.find('.select2-search-choice-close').click();
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect(pattern.$el.select2('val')).to.have.length(0);
-
-      // // Need to simulate a backspace to remove the selected item: below doesn't work
-      // var backspaceEvent = $.Event('keydown');
-      // backspaceEvent.ctrlKey = false;
-      // backspaceEvent.which = 8;
-      // $('.select2-search-field input').trigger( backspaceEvent );
-      // expect(pattern.$el.select2('data')).to.have.length(0);
-    });
-
-    it('deselect an item from results using click', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      var clock = sinon.useFakeTimers();
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(16);
 
-      pattern.$el.select2('open');
-      clock.tick(1000);
-
-      var $result = $('.pattern-relateditems-result').first();
-
-      expect($result.is('.pattern-relateditems-active')).to.equal(false);
-
-      $('.pattern-relateditems-result-select', $result).click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
+      // compare result list with test data
+      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
+        return $(el).text().trim();
+      });
+      stringtext = _.sortBy(stringtext);
 
-      expect($result.is('.pattern-relateditems-active')).to.equal(true);
-      $('.pattern-relateditems-result-select', $result).click();
+      // ... compare the whole list, sorted
+      expect(stringtext.length).to.be.equal(searchables.length);
+      _.sortBy(searchables, 'Title').map(function (el, index) {
+        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
+      });
 
-      expect($result.is('.pattern-relateditems-active')).to.equal(false);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect(pattern.$el.select2('val')).to.have.length(0);
-    });
+      // PT 2
 
-    it('allow only a single type to be selectable', function () {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems" />' +
-        '</div>').appendTo('body');
-      var opts = {
-        vocabularyUrl: '/relateditems-test.json',
-        selectableTypes: ['Image']
-      };
-      var pattern = $('.pat-relateditems', $el).attr('data-pat-relateditems', JSON.stringify(opts)).patternRelateditems().data('patternRelateditems');
+      // select one element
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1');
 
-      var clock = sinon.useFakeTimers();
+      // PT 3
 
-      pattern.$el.select2('open');
+      // click again on browse, should open up result list again, this time without 'UID1'
+      $('.mode.browse', $container).click();
       clock.tick(1000);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-
-      $('.pattern-relateditems-result-select').first().click();
-      expect(pattern.$el.select2('data')).to.have.length(0);
 
-      $('.contenttype-image:parent').first().click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
-    });
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(15);
 
-    it('clicking folder button filters to that folder', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // add another one
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
 
-      var clock = sinon.useFakeTimers();
+      // remove first one
+      $($('a.select2-search-choice-close')[0]).click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2');
 
-      pattern.$el.select2('open');
+      // search for...
+      $input = $('.select2-search-field input.select2-input');
+      $input.click().val('Ima');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
       clock.tick(1000);
-      var $items = $('.select2-results > li');
-      expect(pattern.browsing).to.be.equal(false);
-      expect($('.pattern-relateditems-result-browse', $items)).to.have.length(5);
-      $('.pattern-relateditems-result-browse', $items).first().on('click', function() {
-        expect(pattern.browsing).to.be.equal(true);
-        expect(pattern.currentPath).to.equal($(this).attr('data-path'));
-      }).click();
-    });
+      expect($('.pattern-relateditems-result-select')).to.have.length(3);
 
-    it('after selecting a folder, it remains in the results list', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // add first from result
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID8');
 
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-      expect(pattern.$el.select2('data')).to.have.length(0);
-      expect($('.pattern-relateditems-result-select')).to.have.length(14);
-      $('.pattern-relateditems-result-path')
-        .filter(function() { return $(this).text() === '/about'; })
-        .click();
-      clock.tick(1000);
-      expect(pattern.$el.select2('val')[0]).to.equal('124asdfasasdaf34');
-      var result = $('.pattern-relateditems-result-path')
-        .filter(function() { return $(this).text() === '/about'; });
-      expect(result.length).to.equal(1);
     });
 
-    it('clicking on breadcrumbs goes back up', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
+    it('search roundtrip', function () {
+      var pattern = initializePattern({'selectableTypes': ['Page']});
       var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
+      var $input;
 
+      // open up result list by clicking on "browse"
+      $('.mode.search', $container).click();
       clock.tick(1000);
-      var $items = $('.select2-results > li');
-      expect(pattern.browsing).to.be.equal(false);
-      expect($('.pattern-relateditems-result-browse', $items)).to.have.length(5);
-      $('.pattern-relateditems-result-browse', $items).first().click();
-      clock.tick(1000);
-      var $crumbs = $('.pattern-relateditems-path a.crumb');
-      // /about/staff
-      expect($crumbs).to.have.length(3);
-      // Staff XSS bomb
-      expect(window.xss).not.equal(1);
-      // /about
-      $crumbs.eq(1).on('click', function() {
-      }).click();
-      clock.tick(1000);
-      expect(pattern.currentPath).to.equal('/about');
-    });
 
-    it('maximum number of selected items', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(11);
 
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-
-      $('.pattern-relateditems-result-select').first().click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
-      $('.pattern-relateditems-result-select').last().click();
-      expect(pattern.$el.select2('data')).to.have.length(1);
-    });
-
-    it('init selection', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      var clock = sinon.useFakeTimers();
-      pattern.$el.select2('open');
-      clock.tick(1000);
-    });
+      // compare result list with test data
+      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
+        return $(el).text().trim();
+      });
+      stringtext = _.sortBy(stringtext);
 
-    it('test tree initialized', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
+      // ... compare the whole list, sorted
+      var mySearchables = searchables.filter(function (item) {
+        return item.portal_type === 'Page';
+      });
+      expect(stringtext.length).to.be.equal(mySearchables.length);
+      _.sortBy(mySearchables, 'Title').map(function (el, index) {
+        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
+      });
 
-      var clock = sinon.useFakeTimers();
-      var pattern = $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // PT 2
 
-      clock.tick(1000);
+      // select one element
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1');
 
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
+      // PT 3
 
+      // click again on browse, should open up result list again, this time without 'UID1'
+      $('.mode.search', $container).click();
       clock.tick(1000);
 
-      expect($el.find('.pat-tree ul li').length).to.equal(4);
-    });
-
-    it('test tree select', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-
-      var clock = sinon.useFakeTimers();
-      $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      // result list must have expected length
+      expect($('.pattern-relateditems-result-select')).to.have.length(10);
 
-      clock.tick(1000);
+      // add another one
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
 
-      expect($el.find('.crumb').length).to.equal(1);
+      // remove first one
+      $($('a.select2-search-choice-close')[0]).click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2');
 
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
+      // search for...
+      $input = $('.select2-search-field input.select2-input');
+      $input.click().val('document15');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
       clock.tick(1000);
+      expect($('.pattern-relateditems-result-select')).to.have.length(1);
 
-      $el.find('.pat-tree ul li .pattern-relateditems-buttons a').eq(2).trigger('click');
-      clock.tick(1000);
+      // add first from result
+      $('a.pattern-relateditems-result-select')[0].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID15');
 
-      expect($el.find('.crumb').length).to.equal(2);
     });
 
-    it('test tree sub select', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-
-      var clock = sinon.useFakeTimers();
-      $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
-
-      clock.tick(1000);
-
-      expect($el.find('.crumb').length).to.equal(1);
-
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
-      clock.tick(1000);
-
-      $el.find('.pat-tree ul li div').eq(1).trigger('click');
-      clock.tick(1000);
-
-      $el.find('.pat-tree ul li .pattern-relateditems-buttons a').eq(2).trigger('click');
-      clock.tick(1000);
-
-      expect($el.find('.crumb').length).to.equal(3);
+    it('empty favorites not shown', function () {
+      var pattern = initializePattern();
+      expect($('button.favorites', $container).length).to.be.equal(0);
     });
 
-    it('test tree cancel', function() {
-      $el = $('' +
-        '<div>' +
-        ' <input class="pat-relateditems"' +
-        '        value="asdf1234,sdfbsfdh345,asdlfkjasdlfkjasdf,kokpoius98"' +
-        '        data-pat-relateditems="width: 300px;' +
-        '                          maximumSelectionSize: 1;' +
-        '                          vocabularyUrl: /relateditems-test.json;' +
-        '                          treeOptions: {vocabularyUrl: /relateditems-test.json}" />' +
-        '</div>').appendTo('body');
-
+    it('use favorites', function () {
+      var pattern = initializePattern({'favorites': [{'title': 'root', 'path': '/'}, {'title': 'folder1', 'path': '/folder1'}]});
       var clock = sinon.useFakeTimers();
-      $('.pat-relateditems', $el).patternRelateditems().data('patternRelateditems');
+      var $input;
 
+      // open up result list by clicking on "browse"
+      $('button.favorites', $container).click();
       clock.tick(1000);
 
-      expect($el.find('.crumb').length).to.equal(1);
-
-      $el.find('.pattern-relateditems-tree-select').trigger('click');
+      // click "folder1"
+      $($('.favorites li a')[1]).click();
       clock.tick(1000);
 
-      $el.find('.pattern-relateditems-tree-cancel').trigger('click');
-      clock.tick(1000);
+      expect($('.path-wrapper .pattern-relateditems-path-label', $container).text()).to.be.equal('Current path:');
+      expect($($('.path-wrapper .crumb')[1], $container).text()).to.be.equal('folder1');
 
-      expect($el.find('.crumb').length).to.equal(1);
-      expect($el.find('.tree-container').is(':visible')).to.equal(false);
     });
 
   });
diff --git a/mockup/tests/pattern-tinymce-test.js b/mockup/tests/pattern-tinymce-test.js
index 5a208d1..ffc1101 100644
--- a/mockup/tests/pattern-tinymce-test.js
+++ b/mockup/tests/pattern-tinymce-test.js
@@ -296,7 +296,7 @@ define([
       $('#' + $('#tinylink-uploadImage').data().navref).click();
       expect($('#tinylink-uploadImage').parent().hasClass('active')).to.equal(true);
       var blob;
-      try{
+      try {
         blob = new Blob(['dummy data'],  {type: 'image/png'});
       } catch (err) {
         var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
@@ -312,6 +312,25 @@ define([
       expect($('#tinylink-image').parent().hasClass('active')).to.equal(true);
       expect(pattern.imageModal.getLinkUrl()).to.equal('/blah.png/imagescale/large');
     });
+    it('test add image with custom scale', function() {
+      var pattern = createTinymce({
+        prependToUrl: 'resolveuid/',
+        linkAttribute: 'UID',
+        prependToScalePart: '/@@images/image/',
+        imageScales: '[{"title": "Custom Scale", "value": "customscale"}]'
+      });
+      pattern.addImageClicked();
+      pattern.imageModal.linkTypes.image.getEl().select2('data', {
+        UID: 'foobar',
+        portal_type: 'Document',
+        Title: 'Foobar',
+        path: '/foobar'
+      });
+      pattern.imageModal.linkType = 'image';
+      expect(pattern.imageModal.$scale.html().indexOf('Custom Scale')).to.be.greaterThan(-1);
+      pattern.imageModal.$scale.find('[value="customscale"]')[0].selected = true;
+      expect(pattern.imageModal.getLinkUrl()).to.equal('resolveuid/foobar/@@images/image/customscale');
+    });
 
     it('test adds data attributes', function() {
       var pattern = createTinymce();
diff --git a/package.json b/package.json
index 50a070a..442b370 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "mockup",
-  "version": "2.3.1",
+  "version": "2.4.0",
   "description": "A collection of client side patterns for faster and easier web development",
   "homepage": "http://plone.github.io/mockup",
   "devDependencies": {


