Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-03-12T04:14:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/ff1678bb23bf655de75199f349aa25800f1b7920

Configuring with plone/meta

Files changed:
A .pre-commit-config.yaml
A news/13d8d6c0.internal
M .meta.toml
M setup.cfg
M tox.ini

b'diff --git a/.meta.toml b/.meta.toml\nindex 52537be..069f0a2 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,7 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "a9bb3be7"\n+commit-id = "13d8d6c0"\n \n [dependencies]\n mappings = [\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/13d8d6c0.internal b/news/13d8d6c0.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/13d8d6c0.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/setup.cfg b/setup.cfg\nindex 8849fbc..e70eb25 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -19,5 +19,6 @@ ignore =\n ignore =\n     .editorconfig\n     .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n     lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nindex 30329c5..dcebdf9 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -4,61 +4,47 @@\n envlist =\n     format\n     lint\n+    test\n \n [testenv]\n-py_files = git ls-files "*.py"\n-text_files = git ls-files "*.rst" "*.md"\n-xml_files = git ls-files "*.xml"\n-zcml_files = git ls-files "*.zcml"\n allowlist_externals =\n     sh\n \n [testenv:format]\n-description = automatically reformat python code\n+description = automatically reformat code\n skip_install = true\n deps =\n-    pyupgrade\n-    isort\n-    black\n-    zpretty\n-    -c lint-requirements.txt\n+    pre-commit\n commands =\n-    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n-    sh -c \'{[testenv]py_files} | xargs isort\'\n-    sh -c \'{[testenv]py_files} | xargs black\'\n-    sh -c \'{[testenv]xml_files} | xargs zpretty -x -i\'\n-    sh -c \'{[testenv]zcml_files} | xargs zpretty -z -i\'\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n [testenv:lint]\n description = run linters that will help improve the code style\n skip_install = true\n deps =\n-    flake8\n-    codespell\n-    tomli  # needed for codespell to read pyproject.toml\n-    check-manifest\n-    pyroma\n-    -c lint-requirements.txt\n+    pre-commit\n commands =\n-    sh -c \'{[testenv]py_files} | xargs flake8\'\n-    sh -c \'{[testenv]py_files} | xargs codespell\'\n-    sh -c \'{[testenv]text_files} | xargs codespell\'\n-    check-manifest\n-    pyroma -n 10 .\n+    pre-commit run -a\n \n [testenv:dependencies]\n-description = check if the package defines all its dependencies\n+description = check if the package defines all its dependencies and generate a graph out of them\n deps =\n-    z3c.dependencychecker\n-    -c lint-requirements.txt\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n     dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n \n-[testenv:dependencies-graph]\n-description = generate a graph with the distribution dependencies\n+[testenv:test]\n+usedevelop = true\n deps =\n-    pipdeptree\n-    graphviz  # optional dependency of pipdeptree\n-    -c lint-requirements.txt\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n+    zope-testrunner --test-path={toxinidir} -s plone.dexterity\n+extras =\n+    test\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-03-12T04:14:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/3961a335e3d417e91560bce2c7053ae6e2826708

chore: black

Files changed:
M plone/dexterity/browser/add.py
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/exportimport.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/interfaces.py
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_filerepresentation.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_synchronize.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py

b'diff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 3350bc0..bc74398 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -85,7 +85,6 @@ def create(self, data):\n         return aq_base(content)\n \n     def add(self, object):\n-\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n         new_object = addContentToContainer(self.container, object)\n \ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex 79634ae..311853a 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -16,7 +16,6 @@\n \n \n class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n-\n     success_message = _("Changes saved")\n \n     @button.buttonAndHandler(_("Save"), name="save")\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 62d8fc7..55e6b9e 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -25,7 +25,6 @@ def __init__(self, context, request):\n         self.request = request\n \n     def publishTraverse(self, request, name):\n-\n         context = aq_inner(self.context)\n \n         # If we are trying to traverse to the folder "body" pseudo-object\n@@ -59,7 +58,6 @@ def publishTraverse(self, request, name):\n         return defaultTraversal\n \n     def browserDefault(self, request):\n-\n         # If this is not a WebDAV request, we don\'t want to give a\n         # default view. The ZPublisher\'s WebDAV implementation doesn\'t\n         # deal well with default views.\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 271f681..18e0faa 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -336,7 +336,6 @@ def __init__(\n         rights=_marker,\n         **kwargs,\n     ):\n-\n         if id is not None:\n             self.id = id\n         now = DateTime()\n@@ -362,7 +361,7 @@ def __init__(\n         if rights is not _marker:\n             self.setRights(rights)\n \n-        for (k, v) in kwargs.items():\n+        for k, v in kwargs.items():\n             setattr(self, k, v)\n \n     def __getattr__(self, name):\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 31ea17e..6d918b9 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -52,7 +52,6 @@ def export(self, export_context, subdir, root=False):\n         csv_writer = writer(stream)\n \n         for object_id, object, adapter in exportable:\n-\n             factory_namer = IContentFactoryName(object, None)\n             if factory_namer is None:\n                 factory_name = _getDottedName(object.__class__)\n@@ -128,7 +127,6 @@ def import_(self, import_context, subdir, root=False):\n         existing = context.objectIds()\n \n         for object_id, type_name in rows:\n-\n             if object_id not in existing:\n                 object = self._makeInstance(\n                     object_id, type_name, subdir, import_context\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex abe4306..3d79ece 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -457,7 +457,6 @@ def __init__(self, context):\n         self.context = context\n \n     def __call__(self, name, contentType, data):\n-\n         # Deal with Finder cruft\n         if name == ".DS_Store":\n             raise Unauthorized("Refusing to store Mac OS X resource forks")\n@@ -488,14 +487,12 @@ def __call__(self, name, contentType, data):\n         # sane thing for content with new-style factories.\n \n         if targetType.product:  # boo :(\n-\n             newName = self.context.invokeFactory(typeObjectName, name)\n             obj = aq_base(self.context._getOb(newName))\n             self.context._delObject(newName)\n             return obj\n \n         else:  # yay\n-\n             contextType = typesTool.getTypeInfo(self.context)\n             if contextType is not None:\n                 if not contextType.allowType(typeObjectName):\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex f4ec43b..0d34aca 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -246,7 +246,6 @@ def lookupSchema(self):\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n-\n         if self.model_source:\n             return loadString(self.model_source, policy=self.schema_policy)\n \n@@ -531,12 +530,10 @@ def ftiModified(object, event):\n         or "model_file" in mod\n         or "schema_policy" in mod\n     ):\n-\n         # Determine if we need to re-sync a dynamic schema\n         if (fti.model_source or fti.model_file) and (\n             "model_source" in mod or "model_file" in mod or "schema_policy" in mod\n         ):\n-\n             schemaName = portalTypeToSchemaName(portal_type, suffix=get_suffix(fti))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex 4dc07b1..5296e1d 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -9,7 +9,6 @@\n \n \n class IContentType(Interface):\n-\n     pass\n \n \ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex ee45d91..e9c25d1 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -24,7 +24,6 @@ class IFour(IThree):\n \n class TestBehavior(MockTestCase):\n     def test_supports(self):\n-\n         # Context mock\n         context_dummy = self.create_dummy(portal_type="testtype")\n \n@@ -47,7 +46,6 @@ def test_supports(self):\n         self.assertEqual(True, assignable.supports(IFour))\n \n     def test_enumerate(self):\n-\n         # Context mock\n         context_dummy = self.create_dummy(portal_type="testtype")\n \ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex d4293a4..fd85afe 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -88,7 +88,6 @@ class IMarker(Interface):\n         self.assertTrue(ISchema.providedBy(item))\n \n     def test_provided_by_subclass(self):\n-\n         # Make sure the __providedBy__ descriptor lives in sub-classes\n \n         # Dummy type\n@@ -144,7 +143,6 @@ class IMarker(Interface):\n         self.assertTrue(ISchema.providedBy(item))\n \n     def test_provided_by_subclass_nojar(self):\n-\n         # Dummy type\n         class MyItem(Item):\n             pass\n@@ -191,7 +189,6 @@ class IMarker(Interface):\n         self.assertTrue(ISchema.providedBy(item))\n \n     def test_provided_by_behavior_subtype(self):\n-\n         # Dummy type\n         class MyItem(Item):\n             pass\n@@ -287,7 +284,6 @@ class IMarker2(Interface):\n         self.assertTrue(IMarker2.providedBy(item))\n \n     def test_provided_by_behavior_subtype_invalidation(self):\n-\n         # Dummy type\n         class MyItem(Item):\n             pass\n@@ -394,7 +390,6 @@ class IMarker3(Interface):\n         self.assertTrue(IMarker3.providedBy(item))\n \n     def test_getattr_consults_schema_item(self):\n-\n         content = Item()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -417,7 +412,6 @@ class ISchema(Interface):\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n-\n         content = Container()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -440,7 +434,6 @@ class ISchema(Interface):\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n-\n         content = Item()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -470,7 +463,6 @@ class ISchema(Interface):\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n-\n         content = Container()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -529,7 +521,6 @@ def test_ZMI_manage_options_item(self):\n             self.assertTrue(tab in containerOptions, "Tab %s not found" % tab)\n \n     def test_name_and_id_in_sync(self):\n-\n         i = Item()\n         self.assertEqual("", i.id)\n         self.assertEqual("", i.getId())\n@@ -548,7 +539,6 @@ def test_name_and_id_in_sync(self):\n         self.assertEqual("foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n-\n         i = Item()\n         i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex b095769..265cb9c 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -9,7 +9,6 @@\n \n \n class TestUUIDIntegration(unittest.TestCase):\n-\n     layer = UNIT_TESTING\n \n     def setUp(self):\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex 2db96df..e75990c 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -44,7 +44,6 @@ def test_get_interfaces(self):\n     #   - portal_type is set if not set already\n \n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="testtype")\n \n@@ -64,7 +63,6 @@ def test_create_with_schema_already_provided_and_portal_type_set(self):\n         self.assertEqual(obj_mock, factory())\n \n     def test_create_sets_portal_type_if_not_set(self):\n-\n         # Object returned by class\n         obj_mock = Mock()\n \n@@ -86,7 +84,6 @@ def test_create_sets_portal_type_if_not_set(self):\n         self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="othertype")\n \n@@ -108,7 +105,6 @@ def test_create_sets_portal_type_if_wrong(self):\n         self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="testtype")\n \n@@ -129,7 +125,6 @@ def test_create_initialises_schema_if_not_provided(self):\n         self.assertEqual(obj_mock, factory())\n \n     def test_factory_passes_args_and_kwargs(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="testtype")\n \ndiff --git a/plone/dexterity/tests/test_filerepresentation.py b/plone/dexterity/tests/test_filerepresentation.py\nindex 70f2b56..e59c269 100644\n--- a/plone/dexterity/tests/test_filerepresentation.py\n+++ b/plone/dexterity/tests/test_filerepresentation.py\n@@ -10,7 +10,6 @@ def create_dummy(self, **kw):\n         return ItemDummy(**kw)\n \n     def test_defaultreadfile_verify_iface(self):\n-\n         dummy = DefaultReadFile(ItemDummy())\n         self.assertTrue(IStreamIterator.providedBy(dummy))\n         self.assertTrue(verifyObject(IStreamIterator, dummy))\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex a0f9d68..1ce36a2 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -114,7 +114,6 @@ def test_lookupModel_from_string(self):\n         self.assertIs(model_dummy, model)\n \n     def test_lookupModel_from_file_with_package(self):\n-\n         fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n@@ -137,7 +136,6 @@ def test_lookupModel_from_file_with_package(self):\n         loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n-\n         import plone.dexterity.tests\n \n         abs_file = os.path.join(\n@@ -160,7 +158,6 @@ def test_lookupModel_from_file_with_absolute_path(self):\n         loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n-\n         fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n@@ -405,7 +402,6 @@ def bases(self, schemaName, tree):\n \n \n class TestFTIEvents(MockTestCase):\n-\n     # These tests are a bit verbose, but the basic premise is pretty simple.\n     # We create a proxy mock of a PersistentComponents() registry, and\n     # use this for mock assertions as well as to verify that the right\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex c0c6cb0..52c39ce 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -17,7 +17,6 @@\n \n class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n-\n         # No IDexterityFTI registered\n         factory = schema.SchemaModuleFactory()\n         schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n@@ -31,7 +30,6 @@ def test_transient_schema(self):\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n     def test_concrete_default_schema(self):\n-\n         # Mock schema model\n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title="Dummy")\n@@ -56,7 +54,6 @@ class IDummy(Interface):\n         self.assertEqual(("dummy",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_named_schema(self):\n-\n         # Mock schema model\n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title="Dummy")\n@@ -89,7 +86,6 @@ class INamedDummy(Interface):\n         self.assertEqual(("named",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_transient_schema_made_concrete(self):\n-\n         factory = schema.SchemaModuleFactory()\n         schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n \ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex e466300..fb7b4ae 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -28,7 +28,6 @@ class ISchema(Interface):\n         self.assertTrue(schema1 is schema2 is ISchema)\n \n     def test_repeated_behavior_registration_lookup(self):\n-\n         fti = DexterityFTI("testtype")\n         self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n@@ -74,7 +73,6 @@ def test_unexistent_behaviors_lookup(self):\n             )\n \n     def test_repeated_subtypes_lookup(self):\n-\n         fti = DexterityFTI("testtype")\n         self.mock_utility(fti, IDexterityFTI, name="testtype")\n \ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex 6068921..d4d7fee 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -22,7 +22,6 @@ def setUp(self):\n         SCHEMA_CACHE.clear()\n \n     def test_item(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -121,7 +120,6 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n     def test_container(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -224,7 +222,6 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n     def test_no_tagged_value(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -253,7 +250,6 @@ class ITestSchema(Interface):\n         )\n \n     def test_no_read_permission(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -294,7 +290,6 @@ class ITestSchema(Interface):\n         )\n \n     def test_no_schema(self):\n-\n         # Mock FTI\n         fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n@@ -316,7 +311,6 @@ def test_no_schema(self):\n         )\n \n     def test_schema_exception(self):\n-\n         # Mock FTI\n         fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n@@ -339,7 +333,6 @@ def test_schema_exception(self):\n         )\n \n     def test_empty_name(self):\n-\n         # Mock FTI\n         fti_mock = DexterityFTI("testtype")\n         self.mock_utility(fti_mock, IDexterityFTI, "testtype")\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nindex aa3db2d..c03c0f4 100644\n--- a/plone/dexterity/tests/test_synchronize.py\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -5,7 +5,6 @@\n \n \n class StupidStack:\n-\n     _elements = []  # not thread safe\n     _lock = Lock()\n \n@@ -32,7 +31,6 @@ def reverse_global_list():\n \n class Test(unittest.TestCase):\n     def test_instance_method(self):\n-\n         shared_stack = StupidStack()\n         shared_stack.push("one")\n         item = shared_stack.pop()\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex 441a92d..d65a10e 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -84,7 +84,6 @@ def enumerateBehaviors(self):\n \n class TestAddView(MockTestCase):\n     def test_addview_sets_form_portal_type(self):\n-\n         context = Container("container")\n         request = TestRequest()\n         fti = DexterityFTI("testtype")\n@@ -94,7 +93,6 @@ def test_addview_sets_form_portal_type(self):\n         self.assertEqual("testtype", addview.form_instance.portal_type)\n \n     def test_form_create(self):\n-\n         # Context and request\n         context = Container("container")\n         request = TestRequest()\n@@ -133,7 +131,6 @@ class ISchema(Interface):\n         self.assertEqual("testtype", obj_dummy.portal_type)\n \n     def test_add(self):\n-\n         # Container, new object, and request\n         container = Mock()\n         obj = Mock()\n@@ -222,7 +219,6 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         self.assertRaises(ValueError, form.add, obj)\n \n     def test_label(self):\n-\n         # Add view should take its label from the FTI title\n \n         # Context and request\n@@ -248,7 +244,6 @@ def test_label(self):\n         self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n@@ -308,7 +303,6 @@ def test_schema_lookup_add(self):\n         self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n     def test_fires_add_begun_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(\n             portal_type="testtype",\n@@ -339,7 +333,6 @@ def test_fires_add_begun_event(self):\n         self.assertTrue(IAddBegunEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_update_checks_allowed_types(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(\n             portal_type="testtype", allowedContentTypes=lambda: []\n@@ -361,7 +354,6 @@ def test_update_checks_allowed_types(self):\n         self.assertRaises(ValueError, view.update)\n \n     def test_update_ignores_type_check_if_security_check_deferred(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(\n             portal_type="testtype", allowedContentTypes=lambda: []\n@@ -387,7 +379,6 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n             self.fail("Update raised Unauthorized with security checks " "deferred")\n \n     def test_fires_add_cancelled_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n@@ -422,7 +413,6 @@ def setUp(self):\n         SCHEMA_CACHE.clear()\n \n     def test_label(self):\n-\n         # Edit view should take its label from the FTI title\n \n         # Context and request\n@@ -447,7 +437,6 @@ def test_label(self):\n         self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n-\n         # Context and request\n         class IMarker(IDexterityContent):\n             pass\n@@ -510,7 +499,6 @@ class IMarker(IDexterityContent):\n         self.assertEqual(tuple(), tuple(additionalSchemata))\n \n     def test_fires_edit_begun_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n@@ -536,7 +524,6 @@ def test_fires_edit_begun_event(self):\n         self.assertTrue(IEditBegunEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_cancelled_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n@@ -566,7 +553,6 @@ def addStatusMessage(self, msg, type=""):\n         self.assertTrue(IEditCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_finished_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n@@ -601,7 +587,6 @@ def addStatusMessage(self, msg, type=""):\n \n class TestDefaultView(MockTestCase):\n     def test_schema_lookup_default_view(self):\n-\n         # Context and request\n         class IMarker(IDexterityContent):\n             pass\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 1d58bfc..04828a4 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -53,7 +53,6 @@ class ITestBehavior(Interface):\n \n \n class DAVTestRequest(TestRequest):\n-\n     get_header = TestRequest.getHeader\n \n     def _createResponse(self):\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 1cccbcb..022e608 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -135,7 +135,7 @@ def createContent(portal_type, **kw):\n             setattr(behavior, name, value)\n             done.append(name)\n \n-    for (key, value) in fields.items():\n+    for key, value in fields.items():\n         if key in done:\n             continue\n         setattr(content, key, value)\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-03-12T04:14:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/a0e6479bc04f8496036442220a11bbc8902c83f6

chore: zpretty

Files changed:
M plone/dexterity/browser/containercontentcore.pt
M plone/dexterity/browser/fti.pt
M plone/dexterity/browser/item.pt
M plone/dexterity/browser/itemcontentcore.pt

b'diff --git a/plone/dexterity/browser/containercontentcore.pt b/plone/dexterity/browser/containercontentcore.pt\nindex 2e07bdf..6deb6fe 100644\n--- a/plone/dexterity/browser/containercontentcore.pt\n+++ b/plone/dexterity/browser/containercontentcore.pt\n@@ -1,21 +1,28 @@\n <metal:content-core define-macro="content-core">\n \n   <tal:block repeat="widget view/widgets/values">\n-      <div class="field" tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+    <div class="field"\n+         tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </tal:block>\n \n   <fieldset tal:repeat="group view/groups"\n-            tal:attributes="id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\')">\n-      <legend tal:content="group/label" />\n-      <div class="field" tal:repeat="widget group/widgets/values">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+            tal:attributes="\n+              id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\');\n+            "\n+  >\n+    <legend tal:content="group/label"></legend>\n+    <div class="field"\n+         tal:repeat="widget group/widgets/values"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </fieldset>\n \n </metal:content-core>\ndiff --git a/plone/dexterity/browser/fti.pt b/plone/dexterity/browser/fti.pt\nindex 728200e..d17c29f 100644\n--- a/plone/dexterity/browser/fti.pt\n+++ b/plone/dexterity/browser/fti.pt\n@@ -1,46 +1,73 @@\n <h1 tal:replace="structure context/manage_page_header">PAGE HEADER</h1>\n-<h2 tal:define="form_title view/title"\n-    tal:replace="structure context/manage_form_title">FORM TITLE</h2>\n+<h2 tal:define="\n+      form_title view/title;\n+    "\n+    tal:replace="structure context/manage_form_title"\n+>FORM TITLE</h2>\n \n-<p class="form-help" tal:content="view/description">DESCRIPTION TEXT.</p>\n+<p class="form-help"\n+   tal:content="view/description"\n+>DESCRIPTION TEXT.</p>\n \n-<form action="." method="post"\n-   tal:attributes="action request/ACTUAL_URL">\n-<table cellspacing="0" cellpadding="2" border="0">\n- <tr>\n-  <td>\n-   <div class="form-label">ID</div>\n-  </td>\n-  <td>\n-   <input type="text" name="add_input_name" size="40" />\n-  </td>\n- </tr>\n- <tr tal:condition="view/getProfileInfos">\n-  <td>\n-   <div class="form-label">Presettings</div>\n-  </td>\n-  <td>\n-   <select name="settings_id">\n-    <option value="" selected="selected">(None)</option>\n-    <optgroup label="PROFILE_TITLE"\n-       tal:repeat="profile view/getProfileInfos"\n-       tal:attributes="label profile/title">\n-     <option value="SETTINGS_ID"\n-             tal:repeat="obj_id profile/obj_ids"\n-             tal:attributes="value string:${profile/id}/${obj_id}"\n-             tal:content="obj_id">OBJ ID</option></optgroup>\n-   </select>\n-  </td>\n- </tr>\n- <tr>\n-  <td>\n+<form action="."\n+      method="post"\n+      tal:attributes="\n+        action request/ACTUAL_URL;\n+      "\n+>\n+  <table border="0"\n+         cellpadding="2"\n+         cellspacing="0"\n+  >\n+    <tr>\n+      <td>\n+        <div class="form-label">ID</div>\n+      </td>\n+      <td>\n+        <input name="add_input_name"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr tal:condition="view/getProfileInfos">\n+      <td>\n+        <div class="form-label">Presettings</div>\n+      </td>\n+      <td>\n+        <select name="settings_id">\n+          <option selected="selected"\n+                  value=""\n+          >(None)</option>\n+          <optgroup label="PROFILE_TITLE"\n+                    tal:repeat="profile view/getProfileInfos"\n+                    tal:attributes="\n+                      label profile/title;\n+                    "\n+          >\n+            <option value="SETTINGS_ID"\n+                    tal:repeat="obj_id profile/obj_ids"\n+                    tal:content="obj_id"\n+                    tal:attributes="\n+                      value string:${profile/id}/${obj_id};\n+                    "\n+            >OBJ ID</option></optgroup>\n+        </select>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td>\n    &nbsp;\n-  </td>\n-  <td>\n-   <input class="form-element" type="submit" name="submit_add" value="Add" />\n-  </td>\n- </tr>\n-</table>\n+      </td>\n+      <td>\n+        <input class="form-element"\n+               name="submit_add"\n+               type="submit"\n+               value="Add"\n+        />\n+      </td>\n+    </tr>\n+  </table>\n </form>\n \n <h1 tal:replace="structure context/manage_page_footer">PAGE FOOTER</h1>\ndiff --git a/plone/dexterity/browser/item.pt b/plone/dexterity/browser/item.pt\nindex 55324f2..ae2da0c 100644\n--- a/plone/dexterity/browser/item.pt\n+++ b/plone/dexterity/browser/item.pt\n@@ -1,38 +1,50 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/@@main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n-\n-<metal:main fill-slot="main">\n-\n-    <h1 class="documentFirstHeading" tal:content="context/Title" />\n-\n-    <p class="documentDescription" tal:content="context/Description" />\n-\n-    <tal:block repeat="widget view/widgets/values">\n-        <div class="field" tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)">\n-            <label tal:content="widget/label" />\n-            <br />\n-            <div tal:content="structure widget/render" />\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n+  <body>\n+\n+    <metal:main fill-slot="main">\n+\n+      <h1 class="documentFirstHeading"\n+          tal:content="context/Title"\n+      ></h1>\n+\n+      <p class="documentDescription"\n+         tal:content="context/Description"\n+      ></p>\n+\n+      <tal:block repeat="widget view/widgets/values">\n+        <div class="field"\n+             tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)"\n+        >\n+          <label tal:content="widget/label"></label>\n+          <br />\n+          <div tal:content="structure widget/render"></div>\n         </div>\n-    </tal:block>\n-\n-    <fieldset tal:repeat="group view/groups"\n-              tal:attributes="id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\')">\n-        <legend tal:content="group/label" />\n-        <div class="field" tal:repeat="widget group/widgets/values">\n-            <label tal:content="widget/label" />\n-            <br />\n-            <div tal:content="structure widget/render" />\n+      </tal:block>\n+\n+      <fieldset tal:repeat="group view/groups"\n+                tal:attributes="\n+                  id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\');\n+                "\n+      >\n+        <legend tal:content="group/label"></legend>\n+        <div class="field"\n+             tal:repeat="widget group/widgets/values"\n+        >\n+          <label tal:content="widget/label"></label>\n+          <br />\n+          <div tal:content="structure widget/render"></div>\n         </div>\n-    </fieldset>\n+      </fieldset>\n \n-</metal:main>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\n-\ndiff --git a/plone/dexterity/browser/itemcontentcore.pt b/plone/dexterity/browser/itemcontentcore.pt\nindex 2e07bdf..6deb6fe 100644\n--- a/plone/dexterity/browser/itemcontentcore.pt\n+++ b/plone/dexterity/browser/itemcontentcore.pt\n@@ -1,21 +1,28 @@\n <metal:content-core define-macro="content-core">\n \n   <tal:block repeat="widget view/widgets/values">\n-      <div class="field" tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+    <div class="field"\n+         tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </tal:block>\n \n   <fieldset tal:repeat="group view/groups"\n-            tal:attributes="id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\')">\n-      <legend tal:content="group/label" />\n-      <div class="field" tal:repeat="widget group/widgets/values">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+            tal:attributes="\n+              id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\');\n+            "\n+  >\n+    <legend tal:content="group/label"></legend>\n+    <div class="field"\n+         tal:repeat="widget group/widgets/values"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </fieldset>\n \n </metal:content-core>\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-03-12T04:14:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/e595299b80d79a24f28750001b0bc007d1b0f077

fix: codespell

Files changed:
M plone/dexterity/browser/configure.zcml

b'diff --git a/plone/dexterity/browser/configure.zcml b/plone/dexterity/browser/configure.zcml\nindex e532b17..65df9de 100644\n--- a/plone/dexterity/browser/configure.zcml\n+++ b/plone/dexterity/browser/configure.zcml\n@@ -14,7 +14,7 @@\n       />\n \n   <!-- Content core views -->\n-  <!-- Note: the templaces are the same since the changes for\n+  <!-- Note: the templates are the same since the changes for\n          https://github.com/plone/Products.CMFPlone/issues/3177\n          That may be okay: makes it easier to customize\n          only the template for items or for containers. -->\n'

