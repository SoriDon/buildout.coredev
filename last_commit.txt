Repository: plone.session


Branch: refs/heads/master
Date: 2022-08-24T16:53:31+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.session/commit/48edcb36a2bb81b52137098aeaf2aa8d31b1cb4c

Fix extension

Files changed:
A news/26.feature
D news/26.feature.txt

b'diff --git a/news/26.feature.txt b/news/26.feature\nsimilarity index 56%\nrename from news/26.feature.txt\nrename to news/26.feature\nindex 1699107..92169cc 100644\n--- a/news/26.feature.txt\n+++ b/news/26.feature\n@@ -1 +1 @@\n-Creating per-user keyrings in order to have session invalidation on log-out (server-side logout). [david-batranu]\n\\ No newline at end of file\n+Creating per-user keyrings in order to have session invalidation on log-out (server-side logout). [david-batranu]\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2022-08-24T17:06:00+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.session/commit/85f862010162f948852a14b730853eb341af5e2d

flake8 and isort config compatible with black

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..d10743c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,11 @@\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+max-line-length = 88\n+\n+[isort]\n+profile = black\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2022-08-24T17:10:04+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.session/commit/fb89288fea9a8b81c10fa3de692a613a7745265f

Run isort

Files changed:
M plone/session/__init__.py
M plone/session/hiddenprofiles.py
M plone/session/plugins/session.py
M plone/session/tests/testDocTests.py
M plone/session/tests/testPAS.py
M plone/session/tktauth.py
M setup.py

b"diff --git a/plone/session/__init__.py b/plone/session/__init__.py\nindex e111fe7..d1a751a 100644\n--- a/plone/session/__init__.py\n+++ b/plone/session/__init__.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from AccessControl.Permissions import add_user_folders\n from plone.session.plugins import session\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    registerMultiPlugin\n+from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin\n+\n \n registerMultiPlugin(session.SessionPlugin.meta_type)\n \ndiff --git a/plone/session/hiddenprofiles.py b/plone/session/hiddenprofiles.py\nindex 07abe16..268d902 100644\n--- a/plone/session/hiddenprofiles.py\n+++ b/plone/session/hiddenprofiles.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer\n from Products.CMFPlone.interfaces import INonInstallable\n+from zope.interface import implementer\n \n \n @implementer(INonInstallable)\ndiff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex 1a6d474..6077373 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -9,20 +9,27 @@\n from plone.session import tktauth\n from plone.session.interfaces import ISessionPlugin\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin  # noqa\n-from Products.PluggableAuthService.interfaces.plugins import ICredentialsResetPlugin  # noqa\n-from Products.PluggableAuthService.interfaces.plugins import ICredentialsUpdatePlugin  # noqa\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    IAuthenticationPlugin,\n+)\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    ICredentialsResetPlugin,\n+)\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    ICredentialsUpdatePlugin,\n+)\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n from Products.PluggableAuthService.permissions import ManageUsers\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.interface import implementer\n from zope.interface import alsoProvides\n+from zope.interface import implementer\n \n import binascii\n import time\n \n+\n EMPTY_GIF = (\n     'GIF89a\\x01\\x00\\x01\\x00\\xf0\\x01\\x00\\xff\\xff\\xff'\n     '\\x00\\x00\\x00!\\xf9\\x04\\x01\\n\\x00\\x00\\x00'\ndiff --git a/plone/session/tests/testDocTests.py b/plone/session/tests/testDocTests.py\nindex c6bc9ce..71ee47d 100644\n--- a/plone/session/tests/testDocTests.py\n+++ b/plone/session/tests/testDocTests.py\n@@ -1,10 +1,11 @@\n # coding=utf-8\n+from plone.session import tktauth\n+\n import doctest\n-import unittest\n-import six\n import re\n+import six\n+import unittest\n \n-from plone.session import tktauth\n \n optionflags = doctest.ELLIPSIS\n \ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 57cd0b9..fd1f4c4 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.testing import logout\n-from zope.publisher.browser import TestRequest\n from plone.session.interfaces import ISessionPlugin\n from plone.session.testing import PLONE_SEESION_FUNCTIONAL_TESTING\n+from zope.publisher.browser import TestRequest\n \n import base64\n import six\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex 94024f9..fd87ea3 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -300,8 +300,9 @@ def validateTicket(secret, ticket, ip='0.0.0.0', timeout=0, now=None,\n \n # doctest runner\n def _test():\n-    import doctest\n     from plone.session.tests.testDocTests import Py23DocChecker\n+\n+    import doctest\n     doctest.testmod(\n         optionflags=doctest.ELLIPSIS + doctest.NORMALIZE_WHITESPACE,\n         checker=Py23DocChecker(),\ndiff --git a/setup.py b/setup.py\nindex 762aae9..dfe1593 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,6 +2,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = '4.0.0b2.dev0'\n longdescription = open('README.rst').read()\n longdescription += '\\n'\n"

Repository: plone.session


Branch: refs/heads/master
Date: 2022-08-24T17:13:33+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.session/commit/74caee0676cd31367ff497e79833e5b85589d830

flake8 fixes

Files changed:
M plone/session/plugins/session.py
M plone/session/tests/testPAS.py
M plone/session/tktauth.py

b'diff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex 6077373..763f8c8 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -23,7 +23,6 @@\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.interface import alsoProvides\n from zope.interface import implementer\n \n import binascii\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex fd1f4c4..c24eb65 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -208,4 +208,4 @@ def testCookieValidAfterLogout(self):\n \n         creds = session.extractCredentials(request)\n         auth = session._validateTicket(creds["cookie"])\n-        self.assertIsNotNone(auth)\n\\ No newline at end of file\n+        self.assertIsNotNone(auth)\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex fd87ea3..8b7578a 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -133,7 +133,7 @@\n   >>> data is not None\n   True\n \n-"""\n+"""  # noqa: E501\n \n from socket import inet_aton\n from struct import pack\n@@ -153,6 +153,7 @@ def safe_encode(value, encoding=\'utf-8\'):\n         value = value.encode(encoding)\n     return value\n \n+\n def safe_text(value, encoding=\'utf-8\'):\n     """Converts a value to text, even it is already a text string.\n \n@@ -177,6 +178,7 @@ def safe_text(value, encoding=\'utf-8\'):\n             value = value.decode(\'utf-8\', \'replace\')\n     return value\n \n+\n def is_equal(val1, val2):\n     # constant time comparison\n     if not isinstance(val1, six.binary_type) or \\\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2022-08-24T19:01:42+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.session/commit/ea96eaa2456c3841f5ac03d98de37b154c64cc11

Merge pull request #31 from plone/small-fixes

Small fixes

Files changed:
A news/26.feature
M plone/session/__init__.py
M plone/session/hiddenprofiles.py
M plone/session/plugins/session.py
M plone/session/tests/testDocTests.py
M plone/session/tests/testPAS.py
M plone/session/tktauth.py
M setup.cfg
M setup.py
D news/26.feature.txt

b'diff --git a/news/26.feature.txt b/news/26.feature\nsimilarity index 56%\nrename from news/26.feature.txt\nrename to news/26.feature\nindex 1699107..92169cc 100644\n--- a/news/26.feature.txt\n+++ b/news/26.feature\n@@ -1 +1 @@\n-Creating per-user keyrings in order to have session invalidation on log-out (server-side logout). [david-batranu]\n\\ No newline at end of file\n+Creating per-user keyrings in order to have session invalidation on log-out (server-side logout). [david-batranu]\ndiff --git a/plone/session/__init__.py b/plone/session/__init__.py\nindex e111fe7..d1a751a 100644\n--- a/plone/session/__init__.py\n+++ b/plone/session/__init__.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n from AccessControl.Permissions import add_user_folders\n from plone.session.plugins import session\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    registerMultiPlugin\n+from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin\n+\n \n registerMultiPlugin(session.SessionPlugin.meta_type)\n \ndiff --git a/plone/session/hiddenprofiles.py b/plone/session/hiddenprofiles.py\nindex 07abe16..268d902 100644\n--- a/plone/session/hiddenprofiles.py\n+++ b/plone/session/hiddenprofiles.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import implementer\n from Products.CMFPlone.interfaces import INonInstallable\n+from zope.interface import implementer\n \n \n @implementer(INonInstallable)\ndiff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex 1a6d474..763f8c8 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -9,20 +9,26 @@\n from plone.session import tktauth\n from plone.session.interfaces import ISessionPlugin\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin  # noqa\n-from Products.PluggableAuthService.interfaces.plugins import ICredentialsResetPlugin  # noqa\n-from Products.PluggableAuthService.interfaces.plugins import ICredentialsUpdatePlugin  # noqa\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    IAuthenticationPlugin,\n+)\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    ICredentialsResetPlugin,\n+)\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    ICredentialsUpdatePlugin,\n+)\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n from Products.PluggableAuthService.permissions import ManageUsers\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n from zope.component import getUtility\n from zope.component import queryUtility\n from zope.interface import implementer\n-from zope.interface import alsoProvides\n \n import binascii\n import time\n \n+\n EMPTY_GIF = (\n     \'GIF89a\\x01\\x00\\x01\\x00\\xf0\\x01\\x00\\xff\\xff\\xff\'\n     \'\\x00\\x00\\x00!\\xf9\\x04\\x01\\n\\x00\\x00\\x00\'\ndiff --git a/plone/session/tests/testDocTests.py b/plone/session/tests/testDocTests.py\nindex c6bc9ce..71ee47d 100644\n--- a/plone/session/tests/testDocTests.py\n+++ b/plone/session/tests/testDocTests.py\n@@ -1,10 +1,11 @@\n # coding=utf-8\n+from plone.session import tktauth\n+\n import doctest\n-import unittest\n-import six\n import re\n+import six\n+import unittest\n \n-from plone.session import tktauth\n \n optionflags = doctest.ELLIPSIS\n \ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 57cd0b9..c24eb65 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.testing import logout\n-from zope.publisher.browser import TestRequest\n from plone.session.interfaces import ISessionPlugin\n from plone.session.testing import PLONE_SEESION_FUNCTIONAL_TESTING\n+from zope.publisher.browser import TestRequest\n \n import base64\n import six\n@@ -208,4 +208,4 @@ def testCookieValidAfterLogout(self):\n \n         creds = session.extractCredentials(request)\n         auth = session._validateTicket(creds["cookie"])\n-        self.assertIsNotNone(auth)\n\\ No newline at end of file\n+        self.assertIsNotNone(auth)\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex 94024f9..8b7578a 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -133,7 +133,7 @@\n   >>> data is not None\n   True\n \n-"""\n+"""  # noqa: E501\n \n from socket import inet_aton\n from struct import pack\n@@ -153,6 +153,7 @@ def safe_encode(value, encoding=\'utf-8\'):\n         value = value.encode(encoding)\n     return value\n \n+\n def safe_text(value, encoding=\'utf-8\'):\n     """Converts a value to text, even it is already a text string.\n \n@@ -177,6 +178,7 @@ def safe_text(value, encoding=\'utf-8\'):\n             value = value.decode(\'utf-8\', \'replace\')\n     return value\n \n+\n def is_equal(val1, val2):\n     # constant time comparison\n     if not isinstance(val1, six.binary_type) or \\\n@@ -300,8 +302,9 @@ def validateTicket(secret, ticket, ip=\'0.0.0.0\', timeout=0, now=None,\n \n # doctest runner\n def _test():\n-    import doctest\n     from plone.session.tests.testDocTests import Py23DocChecker\n+\n+    import doctest\n     doctest.testmod(\n         optionflags=doctest.ELLIPSIS + doctest.NORMALIZE_WHITESPACE,\n         checker=Py23DocChecker(),\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..d10743c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,11 @@\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+max-line-length = 88\n+\n+[isort]\n+profile = black\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\ndiff --git a/setup.py b/setup.py\nindex 762aae9..dfe1593 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,6 +2,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = \'4.0.0b2.dev0\'\n longdescription = open(\'README.rst\').read()\n longdescription += \'\\n\'\n'

