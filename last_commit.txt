Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-08T12:03:57+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/c0a1ac11f1ce77895e296d5651b53ddd018f1a50

cleanup before adding new field

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 1f8dabc..da2d8ba 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from basetool import IPloneBaseTool
 from plone.supermodel import model
-from Products.CMFPlone import PloneMessageFactory as _  # NOQA
+from Products.CMFPlone import PloneMessageFactory as _
 from zope import schema
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
@@ -90,7 +90,7 @@ class IEditingSchema(Interface):
 
     available_editors = schema.List(
         title=_(u'Available editors'),
-        description=_(u"Available editors in the portal."),
+        description=_(u'Available editors in the portal.'),
         default=['TinyMCE', 'None'],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -100,41 +100,41 @@ class IEditingSchema(Interface):
     default_editor = schema.Choice(
         title=_(u'Default editor'),
         description=_(
-            u"Select the default wysiwyg "
-            u"editor. Users will be able to choose their "
-            u"own or select to use the site default."),
+            u'Select the default wysiwyg '
+            u'editor. Users will be able to choose their '
+            u'own or select to use the site default.'),
         default=u'TinyMCE',
         missing_value=set(),
-        vocabulary="plone.app.vocabularies.AvailableEditors",
+        vocabulary='plone.app.vocabularies.AvailableEditors',
         required=True)
 
     ext_editor = schema.Bool(
         title=_(u'Enable External Editor feature'),
         description=_(
-            u"Determines if the external editor "
-            u"feature is enabled. This feature requires a "
-            u"special client-side application installed. The "
-            u"users also have to enable this in their "
-            u"preferences."),
+            u'Determines if the external editor '
+            u'feature is enabled. This feature requires a '
+            u'special client-side application installed. The '
+            u'users also have to enable this in their '
+            u'preferences.'),
         default=False,
         required=False)
 
     enable_link_integrity_checks = schema.Bool(
-        title=_(u"Enable link integrity checks"),
+        title=_(u'Enable link integrity checks'),
         description=_(
-            u"Determines if the users should get "
-            u"warnings when they delete or move content that "
-            u"is linked from inside the site."),
+            u'Determines if the users should get '
+            u'warnings when they delete or move content that '
+            u'is linked from inside the site.'),
         default=True,
         required=False)
 
     lock_on_ttw_edit = schema.Bool(
-        title=_(u"Enable locking for through-the-web edits"),
+        title=_(u'Enable locking for through-the-web edits'),
         description=_(
-            u"Disabling locking here will only "
-            u"affect users editing content through the "
-            u"Plone web UI.  Content edited via WebDAV "
-            u"clients will still be subject to locking."),
+            u'Disabling locking here will only '
+            u'affect users editing content through the '
+            u'Plone web UI.  Content edited via WebDAV '
+            u'clients will still be subject to locking.'),
         default=True,
         required=False)
 
@@ -153,40 +153,40 @@ class ILanguageSchema(Interface):
     )
 
     default_language = schema.Choice(
-        title=_(u"heading_site_language",
-                default=u"Site language"),
+        title=_(u'heading_site_language', default=u'Site language'),
         description=_(
-            u"description_site_language",
-            default=u"The language used for the content and the UI "
-                    u"of this site."),
+            u'description_site_language',
+            default=u'The language used for the content and the UI of '
+                    u'this site.'
+        ),
         default='en',
         required=True,
-        vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+        vocabulary='plone.app.vocabularies.AvailableContentLanguages'
     )
 
     available_languages = schema.List(
-        title=_(u"heading_available_languages",
-                default=u"Available languages"),
-        description=_(u"description_available_languages",
-                      default=u"The languages in which the site should be "
-                              u"translatable."),
+        title=_(u'heading_available_languages',
+                default=u'Available languages'),
+        description=_(u'description_available_languages',
+                      default=u'The languages in which the site should be '
+                              u'translatable.'),
         required=True,
         default=['en'],
         missing_value=[],
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+            vocabulary='plone.app.vocabularies.AvailableContentLanguages'
         )
     )
 
     use_combined_language_codes = schema.Bool(
         title=_(
             u'label_allow_combined_language_codes',
-            default=u"Show country-specific language variants"
+            default=u'Show country-specific language variants'
         ),
         description=_(
-            u"help_allow_combined_language_codes",
-            default=u"Examples: pt-br (Brazilian Portuguese), "
-                    u"en-us (American English) etc."
+            u'help_allow_combined_language_codes',
+            default=u'Examples: pt-br (Brazilian Portuguese), '
+                    u'en-us (American English) etc.'
         ),
         default=True,
         required=False
@@ -195,9 +195,9 @@ class ILanguageSchema(Interface):
     display_flags = schema.Bool(
         title=_(
             u'label_display_flags',
-            default=u"Show language flags"
+            default=u'Show language flags'
         ),
-        description=u"",
+        description=u'',
         default=False,
         required=False
     )
@@ -205,10 +205,10 @@ class ILanguageSchema(Interface):
     always_show_selector = schema.Bool(
         title=_(
             u'label_always_show_selector',
-            default=u"Always show language selector"
+            default=u'Always show language selector'
         ),
         description=_(
-            u"help_always_show_selector",
+            u'help_always_show_selector',
             default=u""
         ),
         default=False,
@@ -230,32 +230,32 @@ class ILanguageSchema(Interface):
         ],
     )
     use_content_negotiation = schema.Bool(
-        title=_(u"heading_language_of_the_content",
-                default=u"Use the language of the content item"),
-        description=_(u"description_language_of_the_content",
-                      default=u"Use the language of the content item."),
+        title=_(u'heading_language_of_the_content',
+                default=u'Use the language of the content item'),
+        description=_(u'description_language_of_the_content',
+                      default=u'Use the language of the content item.'),
         default=False,
         required=False,
     )
 
     use_path_negotiation = schema.Bool(
         title=_(
-            u"heading_language_codes_in_URL",
-            default=u"Use language codes in URL path for manual override"),
+            u'heading_language_codes_in_URL',
+            default=u'Use language codes in URL path for manual override'),
         description=_(
-            u"description_language_codes_in_URL",
-            default=u"Use language codes in URL path for manual override."),
+            u'description_language_codes_in_URL',
+            default=u'Use language codes in URL path for manual override.'),
         default=False,
         required=False,
     )
 
     use_cookie_negotiation = schema.Bool(
-        title=_(u"heading_cookie_manual_override",
-                default=(u"Use cookie for manual override")),
+        title=_(u'heading_cookie_manual_override',
+                default=(u'Use cookie for manual override')),
         description=_(
-            u"description_cookie_manual_override",
+            u'description_cookie_manual_override',
             default=(
-                u"Required for the language selector viewlet to be rendered."
+                u'Required for the language selector viewlet to be rendered.'
             )
         ),
         default=False,
@@ -263,11 +263,11 @@ class ILanguageSchema(Interface):
     )
 
     authenticated_users_only = schema.Bool(
-        title=_(u"heading_auth_cookie_manual_override",
-                default=u"Authenticated users only"),
+        title=_(u'heading_auth_cookie_manual_override',
+                default=u'Authenticated users only'),
         description=_(
-            u"description_auth_ookie_manual_override",
-            default=(u"Related to Use cookie for manual override")
+            u'description_auth_ookie_manual_override',
+            default=(u'Related to Use cookie for manual override')
         ),
         default=False,
         required=False,
@@ -275,13 +275,13 @@ class ILanguageSchema(Interface):
 
     set_cookie_always = schema.Bool(
         title=_(
-            u"heading_set_language_cookie_always",
-            default=(u"Set the language cookie always")),
+            u'heading_set_language_cookie_always',
+            default=(u'Set the language cookie always')),
         description=_(
-            u"description_set_language_cookie_always",
+            u'description_set_language_cookie_always',
             default=(
-                u"i.e. also when the 'set_language' request parameter is "
-                u"absent"
+                u'i.e. also when the \'set_language\' request parameter is '
+                u'absent'
             )
         ),
         default=False,
@@ -289,36 +289,36 @@ class ILanguageSchema(Interface):
     )
 
     use_subdomain_negotiation = schema.Bool(
-        title=_(u"heading_use_subdomain",
-                default=u"Use subdomain"),
-        description=_(u"description_use_subdomain",
-                      default=u"e.g.: de.plone.org"),
+        title=_(u'heading_use_subdomain',
+                default=u'Use subdomain'),
+        description=_(u'description_use_subdomain',
+                      default=u'e.g.: de.plone.org'),
         default=False,
         required=False,
     )
 
     use_cctld_negotiation = schema.Bool(
-        title=_(u"heading_top_level_domain",
-                default=u"Use top-level domain"),
-        description=_(u"description_top_level_domain",
-                      default=u"e.g.: www.plone.de"),
+        title=_(u'heading_top_level_domain',
+                default=u'Use top-level domain'),
+        description=_(u'description_top_level_domain',
+                      default=u'e.g.: www.plone.de'),
         default=False,
         required=False,
     )
 
     use_request_negotiation = schema.Bool(
-        title=_(u"heading_browser_language_request_negotiation",
-                default=u"Use browser language request negotiation"),
-        description=_(u"description_browser_language_request_negotiation",
-                      default=u"Use browser language request negotiation."),
+        title=_(u'heading_browser_language_request_negotiation',
+                default=u'Use browser language request negotiation'),
+        description=_(u'description_browser_language_request_negotiation',
+                      default=u'Use browser language request negotiation.'),
         default=False,
         required=False,
     )
 
 
 class ITagAttrPair(Interface):
-    tags = schema.TextLine(title=u"tags")
-    attributes = schema.TextLine(title=u"attributes")
+    tags = schema.TextLine(title=u'tags')
+    attributes = schema.TextLine(title=u'attributes')
 
 
 @implementer(ITagAttrPair)
@@ -344,8 +344,8 @@ class IFilterSchema(Interface):
 
     nasty_tags = schema.List(
         title=_(u'Nasty tags'),
-        description=_(u"These tags and their content are completely blocked "
-                      "when a page is saved or rendered."),
+        description=_(u'These tags and their content are completely blocked '
+                      'when a page is saved or rendered.'),
         default=[u'style', u'object', u'embed', u'applet', u'script', u'meta'],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -353,8 +353,8 @@ class IFilterSchema(Interface):
 
     stripped_tags = schema.List(
         title=_(u'Stripped tags'),
-        description=_(u"These tags are stripped when saving or rendering, "
-                      "but any content is preserved."),
+        description=_(u'These tags are stripped when saving or rendering, '
+                      'but any content is preserved.'),
         default=[u'font', ],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -362,8 +362,8 @@ class IFilterSchema(Interface):
 
     custom_tags = schema.List(
         title=_(u'Custom tags'),
-        description=_(u"Add tag names here for tags which are not part of "
-                      "XHTML but which should be permitted."),
+        description=_(u'Add tag names here for tags which are not part of '
+                      'XHTML but which should be permitted.'),
         default=[],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -373,8 +373,8 @@ class IFilterSchema(Interface):
 
     stripped_attributes = schema.List(
         title=_(u'Stripped attributes'),
-        description=_(u"These attributes are stripped from any tag when "
-                      "saving."),
+        description=_(u'These attributes are stripped from any tag when '
+                      'saving.'),
         default=(u'dir lang valign halign border frame rules cellspacing '
                  'cellpadding bgcolor').split(),
         value_type=schema.TextLine(),
@@ -383,10 +383,10 @@ class IFilterSchema(Interface):
 
     stripped_combinations = schema.Dict(
         title=_(u'Stripped combinations'),
-        description=_(u"These attributes are stripped from those tags when "
-                      "saving."),
-        key_type=schema.TextLine(title=u"tags"),
-        value_type=schema.TextLine(title=u"attributes"),
+        description=_(u'These attributes are stripped from those tags when '
+                      'saving.'),
+        key_type=schema.TextLine(title=u'tags'),
+        value_type=schema.TextLine(title=u'attributes'),
         default={'table th td': 'width height'},
         missing_value={},
         required=False)
@@ -397,7 +397,12 @@ class IFilterSchema(Interface):
         title=_(u'Permitted properties'),
         description=_(
             u'These CSS properties are allowed in style attributes.'),
-        default=u'text-align list-style-type float padding-left text-decoration'.split(),
+        default=[
+            u'text-align',
+            u'list-style-type',
+            u'float padding-left',
+            u'text-decoration'
+        ],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)
@@ -416,120 +421,121 @@ class ITinyMCELayoutSchema(Interface):
     """This interface defines the layout properties."""
 
     resizing = schema.Bool(
-        title=_(u"Enable resizing the editor window."),
-        description=_(u"This option gives you the ability to enable/disable "
-                      "resizing the editor window. "),
+        title=_(u'Enable resizing the editor window.'),
+        description=_(u'This option gives you the ability to enable/disable '
+                      'resizing the editor window. '),
         default=True,
         required=False)
 
     autoresize = schema.Bool(
-        title=_(u"Enable auto resizing of the editor window."),
-        description=_(u"This option gives you the ability to enable/disable "
-                      "auto resizing the editor window depending "
-                      "on the content."),
+        title=_(u'Enable auto resizing of the editor window.'),
+        description=_(u'This option gives you the ability to enable/disable '
+                      'auto resizing the editor window depending '
+                      'on the content.'),
         default=False,
         required=False)
 
     # TODO: add validation to assert % and px in the value
     editor_width = schema.TextLine(
-        title=_(u"Editor width"),
-        description=_(u"This option gives you the ability to specify the "
-                      "width of the editor (like 100% or 400px)."),
+        title=_(u'Editor width'),
+        description=_(u'This option gives you the ability to specify the '
+                      'width of the editor (like 100% or 400px).'),
         default=None,
         required=False)
 
     # TODO: add validation to assert % and px in the value
     editor_height = schema.TextLine(
-        title=_(u"Editor height"),
-        description=_(u"This option gives you the ability to specify the "
-                      "height of the editor in pixels. "
-                      "If auto resize is enabled this value is used "
-                      "as minimum height."),
+        title=_(u'Editor height'),
+        description=_(u'This option gives you the ability to specify the '
+                      'height of the editor in pixels. '
+                      'If auto resize is enabled this value is used '
+                      'as minimum height.'),
         default=None,
         required=False)
 
     content_css = schema.List(
-        title=_(u"Choose the CSS used in WYSIWYG Editor Area"),
-        description=_(u"This option enables you to specify a custom CSS file "
-                      "that provides content CSS. "
-                      "This CSS file is the one used within the editor "
-                      "(the editable area). In addition to what is listed here, "
-                      "the plone bundle CSS and diazo themes using the "
-                      "tinymce-content-css setting are also added."),
+        title=_(u'Choose the CSS used in WYSIWYG Editor Area'),
+        description=_(u'This option enables you to specify a custom CSS file '
+                      'that provides content CSS. '
+                      'This CSS file is the one used within the editor '
+                      '(the editable area). In addition to what is listed, '
+                      'here the plone bundle CSS and diazo themes using the '
+                      'tinymce-content-css setting are also added.'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u'++plone++static/components/tinymce/skins/lightgray/content.min.css',
+            u'++plone++static/components/tinymce/'
+            u'skins/lightgray/content.min.css'
         ],
         required=False)
 
     header_styles = schema.List(
-        title=_(u"Header styles"),
+        title=_(u'Header styles'),
         description=_('Name|tag'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
             u'Header 1|h1',
-            u"Header 2|h2",
-            u"Header 3|h3",
-            u"Header 4|h4",
-            u"Header 5|h5",
-            u"Header 6|h6"
+            u'Header 2|h2',
+            u'Header 3|h3',
+            u'Header 4|h4',
+            u'Header 5|h5',
+            u'Header 6|h6'
         ])
 
     inline_styles = schema.List(
-        title=_(u"Inline styles"),
+        title=_(u'Inline styles'),
         description=_('Name|format|icon'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Bold|bold|bold",
-            u"Italic|italic|italic",
-            u"Underline|underline|underline",
-            u"Strikethrough|strikethrough|strikethrough",
-            u"Superscript|superscript|superscript",
-            u"Subscript|subscript|subscript",
-            u"Code|code|code"])
+            u'Bold|bold|bold',
+            u'Italic|italic|italic',
+            u'Underline|underline|underline',
+            u'Strikethrough|strikethrough|strikethrough',
+            u'Superscript|superscript|superscript',
+            u'Subscript|subscript|subscript',
+            u'Code|code|code'])
 
     block_styles = schema.List(
-        title=_(u"Block styles"),
+        title=_(u'Block styles'),
         description=_('Name|format'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Paragraph|p",
-            u"Blockquote|blockquote",
-            u"Div|div",
-            u"Pre|pre"])
+            u'Paragraph|p',
+            u'Blockquote|blockquote',
+            u'Div|div',
+            u'Pre|pre'])
 
     alignment_styles = schema.List(
-        title=_(u"Alignment styles"),
+        title=_(u'Alignment styles'),
         description=_('Name|format|icon'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Left|alignleft|alignleft",
-            u"Center|aligncenter|aligncenter",
-            u"Right|alignright|alignright",
-            u"Justify|alignjustify|alignjustify"])
+            u'Left|alignleft|alignleft',
+            u'Center|aligncenter|aligncenter',
+            u'Right|alignright|alignright',
+            u'Justify|alignjustify|alignjustify'])
 
     table_styles = schema.List(
-        title=_(u"Table styles"),
+        title=_(u'Table styles'),
         description=_('Name|class'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Listing|listing"
-            u"Invisible Grid|invisible-grid"
+            u'Listing|listing'
+            u'Invisible Grid|invisible-grid'
         ])
 
     formats = schema.Text(
-        title=_(u"Formats"),
+        title=_(u'Formats'),
         description=_(
-            u"Enter a JSON-formatted style format configuration. "
-            u"A format is for example the style that get applied when "
-            u"you press the bold button inside the editor. "
-            u"See http://www.tinymce.com/wiki.php/Configuration:formats"),
+            u'Enter a JSON-formatted style format configuration. '
+            u'A format is for example the style that get applied when '
+            u'you press the bold button inside the editor. '
+            u'See http://www.tinymce.com/wiki.php/Configuration:formats'),
         constraint=validate_json,
         default=json.dumps({
             'discreet': {'inline': 'span', 'classes': 'discreet'},
@@ -543,42 +549,42 @@ class ITinyMCEPluginSchema(Interface):
     """This interface defines the toolbar properties."""
 
     plugins = schema.List(
-        title=_("label_tinymce_plugins", default=u"Editor plugins"),
-        description=_("help_tinymce_plugins", default=(
-            u"Select plugins to include with tinymce")),
+        title=_('label_tinymce_plugins', default=u'Editor plugins'),
+        description=_('help_tinymce_plugins', default=(
+            u'Select plugins to include with tinymce')),
         value_type=schema.Choice(vocabulary=SimpleVocabulary([
-            SimpleTerm('advlist', 'advlist', u"advlist"),
-            SimpleTerm('anchor', 'anchor', u"anchor"),
-            SimpleTerm('autosave', 'autosave', u"autosave"),
-            SimpleTerm('charmap', 'charmap', u"charmap"),
-            SimpleTerm('code', 'code', u"code"),
-            SimpleTerm('colorpicker', 'colorpicker', u"colorpicker"),
-            SimpleTerm('contextmenu', 'contextmenu', u"contextmenu"),
-            SimpleTerm('directionality', 'directionality', u"directionality"),
-            SimpleTerm('emoticons', 'emoticons', u"emoticons"),
-            SimpleTerm('fullpage', 'fullpage', u"fullpage"),
-            SimpleTerm('fullscreen', 'fullscreen', u"fullscreen"),
-            SimpleTerm('hr', 'hr', u"hr"),
-            SimpleTerm('insertdatetime', 'insertdatetime', u"insertdatetime"),
-            SimpleTerm('layer', 'layer', u"layer"),
-            SimpleTerm('lists', 'lists', u"lists"),
-            SimpleTerm('media', 'media', u"media"),
-            SimpleTerm('nonbreaking', 'nonbreaking', u"nonbreaking"),
-            SimpleTerm('noneditable', 'noneditable', u"noneditable"),
-            SimpleTerm('pagebreak', 'pagebreak', u"pagebreak"),
-            SimpleTerm('paste', 'paste', u"paste"),
-            SimpleTerm('preview', 'preview', u"preview"),
-            SimpleTerm('print', 'print', u"print"),
+            SimpleTerm('advlist', 'advlist', u'advlist'),
+            SimpleTerm('anchor', 'anchor', u'anchor'),
+            SimpleTerm('autosave', 'autosave', u'autosave'),
+            SimpleTerm('charmap', 'charmap', u'charmap'),
+            SimpleTerm('code', 'code', u'code'),
+            SimpleTerm('colorpicker', 'colorpicker', u'colorpicker'),
+            SimpleTerm('contextmenu', 'contextmenu', u'contextmenu'),
+            SimpleTerm('directionality', 'directionality', u'directionality'),
+            SimpleTerm('emoticons', 'emoticons', u'emoticons'),
+            SimpleTerm('fullpage', 'fullpage', u'fullpage'),
+            SimpleTerm('fullscreen', 'fullscreen', u'fullscreen'),
+            SimpleTerm('hr', 'hr', u'hr'),
+            SimpleTerm('insertdatetime', 'insertdatetime', u'insertdatetime'),
+            SimpleTerm('layer', 'layer', u'layer'),
+            SimpleTerm('lists', 'lists', u'lists'),
+            SimpleTerm('media', 'media', u'media'),
+            SimpleTerm('nonbreaking', 'nonbreaking', u'nonbreaking'),
+            SimpleTerm('noneditable', 'noneditable', u'noneditable'),
+            SimpleTerm('pagebreak', 'pagebreak', u'pagebreak'),
+            SimpleTerm('paste', 'paste', u'paste'),
+            SimpleTerm('preview', 'preview', u'preview'),
+            SimpleTerm('print', 'print', u'print'),
             # XXX disable save button since it is not implemeneted
-            # SimpleTerm('save', 'save', u"save"),
-            SimpleTerm('searchreplace', 'searchreplace', u"searchreplace"),
-            SimpleTerm('tabfocus', 'tabfocus', u"tabfocus"),
-            SimpleTerm('table', 'table', u"table"),
-            SimpleTerm('textcolor', 'textcolor', u"textcolor"),
-            SimpleTerm('textpattern', 'textpattern', u"textpattern"),
-            SimpleTerm('visualblocks', 'visualblocks', u"visualblocks"),
-            SimpleTerm('visualchars', 'visualchars', u"visualchars"),
-            SimpleTerm('wordcount', 'wordcount', u"wordcount")
+            # SimpleTerm('save', 'save', u'save'),
+            SimpleTerm('searchreplace', 'searchreplace', u'searchreplace'),
+            SimpleTerm('tabfocus', 'tabfocus', u'tabfocus'),
+            SimpleTerm('table', 'table', u'table'),
+            SimpleTerm('textcolor', 'textcolor', u'textcolor'),
+            SimpleTerm('textpattern', 'textpattern', u'textpattern'),
+            SimpleTerm('visualblocks', 'visualblocks', u'visualblocks'),
+            SimpleTerm('visualchars', 'visualchars', u'visualchars'),
+            SimpleTerm('wordcount', 'wordcount', u'wordcount')
         ])),
         default=['advlist', 'fullscreen', 'hr', 'lists', 'media',
                  'nonbreaking', 'noneditable', 'pagebreak', 'paste', 'preview',
@@ -588,9 +594,9 @@ class ITinyMCEPluginSchema(Interface):
         required=False)
 
     menubar = schema.List(
-        title=_("label_tinymce_menubar", default=u"Menubar"),
-        description=_("help_tinymce_menubar", default=(
-            u"Enter what items you would like in the menu bar.")),
+        title=_('label_tinymce_menubar', default=u'Menubar'),
+        description=_('help_tinymce_menubar', default=(
+            u'Enter what items you would like in the menu bar.')),
         required=True,
         value_type=schema.TextLine(),
         missing_value=[],
@@ -609,32 +615,45 @@ class ITinyMCEPluginSchema(Interface):
                 'items': 'undo redo | cut copy paste pastetext | '
                          'searchreplace textpattern selectall | textcolor'},
             'insert': {'title': 'Insert', 'items': 'link media | template hr'},
-            'view': {'title': 'View', 'items': 'visualaid visualchars visualblocks preview '
-                                               'fullpage fullscreen'},
-            'format': {'title': 'Format',
-                       'items': 'bold italic underline strikethrough '
-                                'superscript subscript | formats | removeformat'},
-            'table': {'title': 'Table', 'items': 'inserttable tableprops deletetable '
-                                                 '| cell row column'},
+            'view': {
+                'title': 'View',
+                'items': 'visualaid visualchars visualblocks preview '
+                         'fullpage fullscreen',
+            },
+            'format': {
+                'title': 'Format',
+                'items': 'bold italic underline strikethrough '
+                         'superscript subscript | formats | removeformat'
+            },
+            'table': {
+                'title': 'Table',
+                'items': 'inserttable tableprops deletetable | cell row column'
+            },
             'tools': {
                 'title': 'Tools',
-                'items': 'spellchecker charmap emoticons insertdatetime layer code'}
+                'items': 'spellchecker charmap emoticons insertdatetime '
+                         'layer code'
+            }
         }, indent=4).decode('utf8')
     )
 
     templates = schema.Text(
-        title=_("label_tinymce_templates", default=u"Templates"),
-        description=_("help_tinymce_templates", default=(
-            u"Enter the list of templates in json format \
-                http://www.tinymce.com/wiki.php/Plugin:template")),
+        title=_('label_tinymce_templates', default=u'Templates'),
+        description=_(
+            'help_tinymce_templates',
+            default=(
+                u'Enter the list of templates in json format '
+                u'http://www.tinymce.com/wiki.php/Plugin:template'
+            )
+        ),
         required=False,
         constraint=validate_json,
         default=json.dumps({}).decode('utf8'))
 
     toolbar = schema.Text(
-        title=_("label_tinymce_toolbar", default=u"Toolbar"),
-        description=_("help_tinymce_toolbar", default=(
-            u"Enter how you would like the toolbar items to list.")),
+        title=_('label_tinymce_toolbar', default=u'Toolbar'),
+        description=_('help_tinymce_toolbar', default=(
+            u'Enter how you would like the toolbar items to list.')),
         required=True,
         default=u'ltr rtl | undo redo | styleselect | bold italic | '
                 u'alignleft aligncenter alignright alignjustify | '
@@ -642,19 +661,19 @@ class ITinyMCEPluginSchema(Interface):
                 u'unlink plonelink ploneimage')
 
     custom_plugins = schema.List(
-        title=_(u"Custom plugins"),
-        description=_(u"Enter a list of custom plugins which will be loaded "
-                      "in the editor. Format is "
-                      "pluginname|location, one per line."),
+        title=_(u'Custom plugins'),
+        description=_(u'Enter a list of custom plugins which will be loaded '
+                      'in the editor. Format is '
+                      'pluginname|location, one per line.'),
         required=False,
         value_type=schema.TextLine(),
         missing_value=[],
         default=[])
 
     custom_buttons = schema.List(
-        title=_(u"Custom buttons"),
+        title=_(u'Custom buttons'),
         description=_(
-            u"Enter a list of custom buttons which will be added to toolbar"),
+            u'Enter a list of custom buttons which will be added to toolbar'),
         required=False,
         value_type=schema.TextLine(),
         missing_value=[],
@@ -666,69 +685,69 @@ class ITinyMCESpellCheckerSchema(Interface):
     """This interface defines the libraries properties."""
 
     libraries_spellchecker_choice = schema.Choice(
-        title=_(u"Spellchecker plugin to use"),
-        description=_(u"This option allows you to choose the spellchecker for "
-                      u"TinyMCE."),
+        title=_(u'Spellchecker plugin to use'),
+        description=_(u'This option allows you to choose the spellchecker for '
+                      u'TinyMCE.'),
         missing_value=set(),
         vocabulary=SimpleVocabulary([
             SimpleTerm('browser', 'browser',
-                       _(u"Default browser spellchecker")),
+                       _(u'Default browser spellchecker')),
             SimpleTerm('AtD', 'AtD',
-                       _(u"After the deadline (FLOSS)")),
+                       _(u'After the deadline (FLOSS)')),
         ]),
         default=u'browser',
         required=False)
 
     libraries_atd_ignore_strings = schema.List(
-        title=_(u"AtD ignore strings"),
+        title=_(u'AtD ignore strings'),
         description=_(
             'label_atd_ignore_strings',
-            default=u"A list of strings which the \"After the Deadline\" "
-                    u"spellchecker should ignore. "
-                    u"Note: This option is only applicable when the "
-                    u"appropriate spellchecker has been chosen above."),
+            default=u'A list of strings which the "After the Deadline" '
+                    u'spellchecker should ignore. '
+                    u'Note: This option is only applicable when the '
+                    u'appropriate spellchecker has been chosen above.'),
         default=[
-            u"Zope",
-            u"Plone",
-            u"TinyMCE"],
+            u'Zope',
+            u'Plone',
+            u'TinyMCE'],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)
 
     libraries_atd_show_types = schema.List(
-        title=_(u"AtD error types to show"),
+        title=_(u'AtD error types to show'),
         description=_(
             'help_atderrortypes_to_show',
-            default=u"A list of error types which the "
-                    u"\"After the Deadline\" spellchecker should check for. "
-                    u"By default, all the available error type will be "
-                    u"listed here."),
+            default=u'A list of error types which the '
+                    u'"After the Deadline" spellchecker should check for. '
+                    u'By default, all the available error type will be '
+                    u'listed here.'),
         value_type=schema.TextLine(),
         default=[
-            u"Bias Language",
-            u"Cliches",
-            u"Complex Expression",
-            u"Diacritical Marks",
-            u"Double Negatives",
-            u"Hidden Verbs",
-            u"Jargon Language",
-            u"Passive voice",
-            u"Phrases to Avoid",
-            u"Redundant Expression"],
+            u'Bias Language',
+            u'Cliches',
+            u'Complex Expression',
+            u'Diacritical Marks',
+            u'Double Negatives',
+            u'Hidden Verbs',
+            u'Jargon Language',
+            u'Passive voice',
+            u'Phrases to Avoid',
+            u'Redundant Expression'],
         missing_value=[],
         required=False)
 
     libraries_atd_service_url = schema.TextLine(
-        title=_(u"AtD service URL"),
+        title=_(u'AtD service URL'),
         description=_(
             'help_atd_service_url',
-            default=u"The URL of the \"After the Deadline\" grammar and spell "
-                    u"checking server. "
-                    u"The default value is the public server, "
-                    u"but ideally you should download and install your own "
-                    u"and specify its address here."),
+            default=u'The URL of the "After the Deadline" grammar and spell '
+                    u'checking server. '
+                    u'The default value is the public server, '
+                    u'but ideally you should download and install your own '
+                    u'and specify its address here.'),
         required=True,
-        default=u"service.afterthedeadline.com",)
+        default=u'service.afterthedeadline.com',)
 
 
 class ITinyMCEResourceTypesSchema(Interface):
@@ -738,66 +757,46 @@ class ITinyMCEResourceTypesSchema(Interface):
     # rooted = schema.Bool(
     #    title=_(u"Rooted to current object"),
     #    description=_(u"When enabled the user will be rooted to the current "
-    #                  "object and can't add links and images from other parts "
-    #                  "of the site."),
+    #                  "object and can't add links and images from other "
+    #                  "parts of the site."),
     #    default=False,
     #    required=False)
 
     contains_objects = schema.List(
-        title=_(u"Contains objects"),
-        description=_(u"Enter a list of content types which can contain other "
-                      "objects. Format is one contenttype per line."),
+        title=_(u'Contains objects'),
+        description=_(u'Enter a list of content types which can contain other '
+                      'objects. Format is one contenttype per line.'),
         value_type=schema.TextLine(),
         default=[
-            u"Folder",
-            u"Large Plone Folder",
-            u"Plone Site"],
+            u'Folder',
+            u'Large Plone Folder',
+            u'Plone Site'],
         missing_value=[],
         required=False)
 
-    # XXX not implements
-    # containsanchors = schema.Text(
-    #    title=_(u"Contains Anchors"),
-    #    description=_(u"Enter a list of content types which can contain "
-    #                  "anchors. Format is one contenttype per line."),
-    #    default=u"Event\n"
-    #            u"News Item\n"
-    #            u"Document\n"
-    #            u"ATRelativePathCriterion",
-    #    required=False)
-
-    # XXX do we still want this?
-    # seems like it could be really annoying for users
-    # creating new types.
-    # linkable = schema.Text(
-    #    title=_(u"Linkable Objects"),
-    #    description=_(u"Enter a list of content types which can be linked. "
-    #                  "Format is one contenttype per line."),
-    #    required=False)
-
     image_objects = schema.List(
-        title=_(u"Image objects"),
-        description=_(u"Enter a list of content types which can be used as "
-                      "images. Format is one contenttype per line."),
-        default=[u"Image"],
+        title=_(u'Image objects'),
+        description=_(u'Enter a list of content types which can be used as '
+                      'images. Format is one contenttype per line.'),
+        default=[u'Image'],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)
 
     entity_encoding = schema.Choice(
-        title=_(u"Entity encoding"),
-        description=_(
-            u"This option controls how entities/characters get processed. "
-            "Named: Characters will be converted into named entities "
-            "based on the entities option. "
-            "Numeric: Characters will be converted into numeric entities. "
-            "Raw: All characters will be stored in non-entity form "
-            "except these XML default entities: amp lt gt quot"),
+        title=_(u'Entity encoding'),
+        description=_(
+            u'This option controls how entities/characters get processed. '
+            'Named: Characters will be converted into named entities '
+            'based on the entities option. '
+            'Numeric: Characters will be converted into numeric entities. '
+            'Raw: All characters will be stored in non-entity form '
+            'except these XML default entities: amp lt gt quot'),
         missing_value=set(),
         vocabulary=SimpleVocabulary(
-            [SimpleTerm('named', 'named', _(u"Named")),
-             SimpleTerm('numeric', 'numeric', _(u"Numeric")),
-             SimpleTerm('raw', 'raw', _(u"Raw"))]),
+            [SimpleTerm('named', 'named', _(u'Named')),
+             SimpleTerm('numeric', 'numeric', _(u'Numeric')),
+             SimpleTerm('raw', 'raw', _(u'Raw'))]),
         default=u"raw",
         required=False)
 
@@ -807,8 +806,10 @@ class ITinyMCEAdvancedSchema(Interface):
 
     other_settings = schema.Text(
         title=_('label_tinymce_other_settings', 'Other settings'),
-        description=_('hint_tinymce_other_settings',
-                      default='Other TinyMCE configuration formatted as JSON.'),
+        description=_(
+            'hint_tinymce_other_settings',
+            default='Other TinyMCE configuration formatted as JSON.'
+        ),
         required=False,
         constraint=validate_json,
         default=json.dumps({}).decode('utf8'),
@@ -828,13 +829,13 @@ class ITinyMCESchema(
 class IMaintenanceSchema(Interface):
 
     days = schema.Int(
-        title=_(u"Days of object history to keep after packing"),
+        title=_(u'Days of object history to keep after packing'),
         description=_(
-            u"You should pack your database regularly. This number "
-            u"indicates how many days of undo history you want to "
-            u"keep. It is unrelated to versioning, so even if you "
-            u"pack the database, the history of the content changes "
-            u"will be kept. Recommended value is 7 days."
+            u'You should pack your database regularly. This number '
+            u'indicates how many days of undo history you want to '
+            u'keep. It is unrelated to versioning, so even if you '
+            u'pack the database, the history of the content changes '
+            u'will be kept. Recommended value is 7 days.'
         ),
         default=7,
         min=0,
@@ -845,28 +846,28 @@ class IMaintenanceSchema(Interface):
 class INavigationSchema(Interface):
 
     generate_tabs = schema.Bool(
-        title=_(u"Automatically generate tabs"),
+        title=_(u'Automatically generate tabs'),
         description=_(
-            u"By default, all items created at the root level will "
-            u"appear as tabs. You can turn this off if you prefer manually "
-            u"constructing this part of the navigation."),
+            u'By default, all items created at the root level will '
+            u'appear as tabs. You can turn this off if you prefer manually '
+            u'constructing this part of the navigation.'),
         default=True,
         required=False)
 
     nonfolderish_tabs = schema.Bool(
-        title=_(u"Generate tabs for items other than folders."),
+        title=_(u'Generate tabs for items other than folders.'),
         description=_(
-            u"By default, any content item in the root of the portal will "
-            u"appear as a tab. If you turn this option off, only folders "
-            u"will be shown. This only has an effect if 'Automatically "
-            u"generate tabs' is enabled."),
+            u'By default, any content item in the root of the portal will '
+            u'appear as a tab. If you turn this option off, only folders '
+            u'will be shown. This only has an effect if \'Automatically '
+            u'generate tabs\' is enabled.'),
         default=True,
         required=False)
 
     sort_tabs_on = schema.Choice(
-        title=_(u"Sort tabs on"),
+        title=_(u'Sort tabs on'),
         description=_(
-            u"Index used to sort the tabs"
+            u'Index used to sort the tabs'
         ),
         required=True,
         default=u'getObjPositionInParent',
@@ -891,17 +892,17 @@ class INavigationSchema(Interface):
         ]),
     )
     sort_tabs_reversed = schema.Bool(
-        title=_(u"Reversed sort order for tabs."),
+        title=_(u'Reversed sort order for tabs.'),
         description=_(
-            u"Sort tabs in descending."),
+            u'Sort tabs in descending.'),
         default=False,
         required=False)
 
     displayed_types = schema.Tuple(
-        title=_(u"Displayed content types"),
+        title=_(u'Displayed content types'),
         description=_(
-            u"The content types that should be shown in the navigation and "
-            u"site map."),
+            u'The content types that should be shown in the navigation and '
+            u'site map.'),
         required=False,
         default=(
             'Image',
@@ -914,14 +915,14 @@ class INavigationSchema(Interface):
         ),
         missing_value=(),
         value_type=schema.Choice(
-            source="plone.app.vocabularies.ReallyUserFriendlyTypes"
+            source='plone.app.vocabularies.ReallyUserFriendlyTypes'
         ))
 
     filter_on_workflow = schema.Bool(
-        title=_(u"Filter on workflow state"),
+        title=_(u'Filter on workflow state'),
         description=_(
-            u"The workflow states that should be shown in the navigation "
-            u"and the site map."),
+            u'The workflow states that should be shown in the navigation '
+            u'and the site map.'),
         default=False,
         required=False)
 
@@ -930,41 +931,41 @@ class INavigationSchema(Interface):
         default=(),
         missing_value=(),
         value_type=schema.Choice(
-            source="plone.app.vocabularies.WorkflowStates"))
+            source='plone.app.vocabularies.WorkflowStates'))
 
     show_excluded_items = schema.Bool(
         title=_(
-            u"Show items normally excluded from navigation if viewing their "
-            u"children."),
+            u'Show items normally excluded from navigation if viewing their '
+            u'children.'),
         description=_(
-            u"If an item has been excluded from navigation should it be "
-            u"shown in navigation when viewing content contained within it "
-            u"or within a subfolder."),
+            u'If an item has been excluded from navigation should it be '
+            u'shown in navigation when viewing content contained within it '
+            u'or within a subfolder.'),
         default=True,
         required=False)
 
     root = schema.TextLine(
         title=_(
-            u"Root"),
+            u'Root'),
         description=_(
-            u"Path to be used as navigation root, relative to Plone site root."
-            u"Starts with '/'"
+            u'Path to be used as navigation root, relative to Plone site root.'
+            u'Starts with \'/\''
         ),
         default=u'/',
         required=True
     )
 
     sitemap_depth = schema.Int(
-        title=_(u"Sitemap depth"),
-        description=_(u"Number of folder levels to show in the site map."),
+        title=_(u'Sitemap depth'),
+        description=_(u'Number of folder levels to show in the site map.'),
         default=3,
         required=True
     )
 
     parent_types_not_to_query = schema.List(
-        title=_(u"Hide children of these types"),
+        title=_(u'Hide children of these types'),
         description=_(
-            u"Hide content inside the following types in Navigation."),
+            u'Hide content inside the following types in Navigation.'),
         default=[u'TempFolder'],
         value_type=schema.TextLine(),
         missing_value=(),
@@ -977,20 +978,20 @@ class ISearchSchema(Interface):
     enable_livesearch = schema.Bool(
         title=_(u'Enable LiveSearch'),
         description=_(
-            u"Enables the LiveSearch feature, which shows live "
-            u"results if the browser supports JavaScript."),
+            u'Enables the LiveSearch feature, which shows live '
+            u'results if the browser supports JavaScript.'),
         default=True,
         required=False
     )
 
     types_not_searched = schema.Tuple(
-        title=_(u"Define the types to be shown in the site and searched"),
+        title=_(u'Define the types to be shown in the site and searched'),
         description=_(
-            u"Define the types that should be searched and be "
-            u"available in the user facing part of the site. "
-            u"Note that if new content types are installed, they "
-            u"will be enabled by default unless explicitly turned "
-            u"off here or by the relevant installer."
+            u'Define the types that should be searched and be '
+            u'available in the user facing part of the site. '
+            u'Note that if new content types are installed, they '
+            u'will be enabled by default unless explicitly turned '
+            u'off here or by the relevant installer.'
         ),
         required=False,
         default=(
@@ -1000,13 +1001,13 @@ class ISearchSchema(Interface):
         ),
         missing_value=(),
         value_type=schema.Choice(
-            source="plone.app.vocabularies.PortalTypes"
+            source='plone.app.vocabularies.PortalTypes'
         ),
     )
 
     search_results_description_length = schema.Int(
-        title=_(u"Crop the item description in search result listings "
-                u"after a number of characters."),
+        title=_(u'Crop the item description in search result listings '
+                u'after a number of characters.'),
         required=False,
         default=160,
     )
@@ -1017,60 +1018,60 @@ class ISecuritySchema(Interface):
     enable_self_reg = schema.Bool(
         title=_(u'Enable self-registration'),
         description=_(
-            u"Allows users to register themselves on the site. If "
-            u"not selected, only site managers can add new users."),
+            u'Allows users to register themselves on the site. If '
+            u'not selected, only site managers can add new users.'),
         default=False,
         required=False)
 
     enable_user_pwd_choice = schema.Bool(
         title=_(u'Let users select their own passwords'),
         description=_(
-            u"If not selected, a URL will be generated and "
-            u"e-mailed. Users are instructed to follow the link to "
-            u"reach a page where they can change their password and "
-            u"complete the registration process; this also verifies "
-            u"that they have entered a valid email address."),
+            u'If not selected, a URL will be generated and '
+            u'e-mailed. Users are instructed to follow the link to '
+            u'reach a page where they can change their password and '
+            u'complete the registration process; this also verifies '
+            u'that they have entered a valid email address.'),
         default=False,
         required=False)
 
     enable_user_folders = schema.Bool(
         title=_(u'Enable User Folders'),
         description=_(
-            u"If selected, home folders where users can create "
-            u"content will be created when they log in."),
+            u'If selected, home folders where users can create '
+            u'content will be created when they log in.'),
         default=False,
         required=False)
 
     allow_anon_views_about = schema.Bool(
-        title=_(u"Allow anyone to view 'about' information"),
+        title=_(u'Allow anyone to view \'about\' information'),
         description=_(
-            u"If not selected only logged-in users will be able to "
-            u"view information about who created an item and when it "
-            u"was modified."),
+            u'If not selected only logged-in users will be able to '
+            u'view information about who created an item and when it '
+            u'was modified.'),
         default=False,
         required=False)
 
     use_email_as_login = schema.Bool(
         title=_(u'Use email address as login name'),
         description=_(
-            u"Allows users to login with their email address instead "
-            u"of specifying a separate login name. This also updates "
-            u"the login name of existing users, which may take a "
-            u"while on large sites. The login name is saved as "
-            u"lower case, but to be userfriendly it does not matter "
-            u"which case you use to login. When duplicates are found, "
-            u"saving this form will fail. You can use the "
-            u"@@migrate-to-emaillogin page to show the duplicates."),
+            u'Allows users to login with their email address instead '
+            u'of specifying a separate login name. This also updates '
+            u'the login name of existing users, which may take a '
+            u'while on large sites. The login name is saved as '
+            u'lower case, but to be userfriendly it does not matter '
+            u'which case you use to login. When duplicates are found, '
+            u'saving this form will fail. You can use the '
+            u'@@migrate-to-emaillogin page to show the duplicates.'),
         default=False,
         required=False)
 
     use_uuid_as_userid = schema.Bool(
         title=_(u'Use UUID user ids'),
         description=_(
-            u"Use automatically generated UUIDs as user id for new users. "
-            u"When not turned on, the default is to use the same as the "
-            u"login name, or when using the email address as login name we "
-            u"generate a user id based on the fullname."),
+            u'Use automatically generated UUIDs as user id for new users. '
+            u'When not turned on, the default is to use the same as the '
+            u'login name, or when using the email address as login name we '
+            u'generate a user id based on the fullname.'),
         default=False,
         required=False)
 
@@ -1080,42 +1081,42 @@ class ISiteSchema(Interface):
     site_title = schema.TextLine(
         title=_(u'Site title'),
         description=_(
-            u"This shows up in the title bar of "
-            u"browsers and in syndication feeds."),
+            u'This shows up in the title bar of '
+            u'browsers and in syndication feeds.'),
         default=u'Plone site')
 
     site_logo = schema.ASCII(
-        title=_(u"Site Logo"),
-        description=_(u"This shows a custom Logo on your Site."),
+        title=_(u'Site Logo'),
+        description=_(u'This shows a custom Logo on your Site.'),
         required=False,
     )
 
     exposeDCMetaTags = schema.Bool(
-        title=_(u"Expose Dublin Core metadata"),
-        description=_(u"Exposes the Dublin Core properties as metatags."),
+        title=_(u'Expose Dublin Core metadata'),
+        description=_(u'Exposes the Dublin Core properties as metatags.'),
         default=False,
         required=False)
 
     enable_sitemap = schema.Bool(
-        title=_(u"Expose sitemap.xml.gz"),
-        description=_(
-            u"Exposes your content as a file "
-            u"according to the sitemaps.org standard. You "
-            u"can submit this to compliant search engines "
-            u"like Google, Yahoo and Microsoft. It allows "
-            u"these search engines to more intelligently "
-            u"crawl your site."),
+        title=_(u'Expose sitemap.xml.gz'),
+        description=_(
+            u'Exposes your content as a file '
+            u'according to the sitemaps.org standard. You '
+            u'can submit this to compliant search engines '
+            u'like Google, Yahoo and Microsoft. It allows '
+            u'these search engines to more intelligently '
+            u'crawl your site.'),
         default=False,
         required=False)
 
     webstats_js = schema.SourceText(
         title=_(u'JavaScript for web statistics support'),
         description=_(
-            u"For enabling web statistics support "
-            u"from external providers (for e.g. Google "
-            u"Analytics). Paste the code snippets provided. "
-            u"It will be included in the rendered HTML as "
-            u"entered near the end of the page."),
+            u'For enabling web statistics support '
+            u'from external providers (for e.g. Google '
+            u'Analytics). Paste the code snippets provided. '
+            u'It will be included in the rendered HTML as '
+            u'entered near the end of the page.'),
         default=u'',
         required=False)
 
@@ -1151,32 +1152,32 @@ class ISiteSchema(Interface):
     toolbar_position = schema.Choice(
         title=_(u'Position where the toolbar is displayed'),
         description=_(
-            u"It can be in the side vertical mode "
-            u"or in the top horizontal mode"),
+            u'It can be in the side vertical mode '
+            u'or in the top horizontal mode'),
         default=u'side',
         vocabulary=SimpleVocabulary([
-            SimpleTerm('side', 'side', _(u"Side")),
-            SimpleTerm('top', 'top', _(u"Top"))]),
+            SimpleTerm('side', 'side', _(u'Side')),
+            SimpleTerm('top', 'top', _(u'Top'))]),
         required=True)
 
     toolbar_logo = schema.TextLine(
-        title=_(u"Site based relative url for toolbar logo"),
+        title=_(u'Site based relative url for toolbar logo'),
         description=_(
-            u"This must be a relative url to portal root site. "
-            u"By default its /++plone++static/plone-toolbarlogo.svg"),
+            u'This must be a relative url to portal root site. '
+            u'By default its /++plone++static/plone-toolbarlogo.svg'),
         default=u'/++plone++static/plone-toolbarlogo.svg',
         required=False,
     )
 
     robots_txt = schema.SourceText(
-        title=_("robots.txt"),
-        description=_(
-            u"help_robots_txt",
-            default=u"robots.txt is read by search-engines to "
-                    u"determine how to index your site. "
-                    u"For details see <a href='http://www.robotstxt.org'>"
-                    u"http://www.robotstxt.org</a>. "
-                    u"'{portal_url}' is replaced by the sites url."),
+        title=_('robots.txt'),
+        description=_(
+            u'help_robots_txt',
+            default=u'robots.txt is read by search-engines to '
+                    u'determine how to index your site. '
+                    u'For details see <a href=\'http://www.robotstxt.org\'>'
+                    u'http://www.robotstxt.org</a>. '
+                    u'\'{portal_url}\' is replaced by the sites url.'),
         default=ROBOTS_TXT,
         required=False,
     )
@@ -1184,8 +1185,8 @@ class ISiteSchema(Interface):
     default_page = schema.List(
         title=_(u'Default page ids'),
         description=_(
-            u"Select which ids can act as fallback default pages for",
-            u"a container."
+            u'Select which ids can act as fallback default pages for',
+            u'a container.'
         ),
         required=True,
         default=[u'index_html',
@@ -1199,16 +1200,16 @@ class ISiteSchema(Interface):
     roles_allowed_to_add_keywords = schema.List(
         title=_(u'Roles that can add keywords'),
         description=_(
-            u"help_allow_roles_to_add_keywords",
-            default=u"Only the following roles can add new keywords "),
+            u'help_allow_roles_to_add_keywords',
+            default=u'Only the following roles can add new keywords '),
         required=False,
         default=[
-            u"Manager",
-            u"Site Administrator",
-            u"Reviewer",
+            u'Manager',
+            u'Site Administrator',
+            u'Reviewer',
         ],
         missing_value=[],
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"),
+        value_type=schema.Choice(vocabulary='plone.app.vocabularies.Roles'),
     )
 
 
@@ -1217,27 +1218,27 @@ class IDateAndTimeSchema(Interface):
     """
 
     portal_timezone = schema.Choice(
-        title=_(u"Portal default timezone"),
+        title=_(u'Portal default timezone'),
         description=_(
-            u"help_portal_timezone",
-            default=u"The timezone setting of the portal. Users can set "
-                    u"their own timezone, if available timezones are "
-                    u"defined."),
+            u'help_portal_timezone',
+            default=u'The timezone setting of the portal. Users can set '
+                    u'their own timezone, if available timezones are '
+                    u'defined.'),
         required=True,
         default=None,
-        vocabulary="plone.app.vocabularies.CommonTimezones")
+        vocabulary='plone.app.vocabularies.CommonTimezones')
 
     available_timezones = schema.List(
-        title=_(u"Available timezones"),
+        title=_(u'Available timezones'),
         description=_(
-            u"help_available_timezones",
-            default=u"The timezones, which should be available for the "
-                    u"portal. Can be set for users and events"),
+            u'help_available_timezones',
+            default=u'The timezones, which should be available for the '
+                    u'portal. Can be set for users and events'),
         required=False,
         default=[],
         missing_value=[],
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.Timezones"))
+            vocabulary='plone.app.vocabularies.Timezones'))
 
     first_weekday = schema.Choice(
         title=_(u'label_first_weekday', default=u'First weekday'),
@@ -1246,7 +1247,7 @@ class IDateAndTimeSchema(Interface):
             default=u'First day in the week.'),
         required=True,
         default=None,
-        vocabulary="plone.app.vocabularies.Weekdays")
+        vocabulary='plone.app.vocabularies.Weekdays')
 
 
 class ITypesSchema(Interface):
@@ -1256,10 +1257,10 @@ class ITypesSchema(Interface):
     types_use_view_action_in_listings = schema.List(
         title=_(u'Types which use the view action in listing views.'),
         description=_(
-            u"help_types_use_view_action_in_listings",
-            default=u"When clicking items in listing views, these "
-                    u"types will use the '/view' action instead of using "
-                    u"their default view."),
+            u'help_types_use_view_action_in_listings',
+            default=u'When clicking items in listing views, these '
+                    u'types will use the \'view\' action instead of using '
+                    u'their default view.'),
         required=False,
         default=[u'Image',
                  u'File'],
@@ -1268,21 +1269,21 @@ class ITypesSchema(Interface):
     )
 
     redirect_links = schema.Bool(
-        title=_(u"Redirect links"),
+        title=_(u'Redirect links'),
         description=_(
-            u"help_redirect_links",
-            default=u"When clicking on a Link type, should the user be "
-                    u"taken to the default view or be redirected to the "
-                    u"Link's URL?"),
+            u'help_redirect_links',
+            default=u'When clicking on a Link type, should the user be '
+                    u'taken to the default view or be redirected to the '
+                    u'Link\'s URL?'),
         required=False,
         default=True
     )
 
     default_page_types = schema.List(
-        title=_(u"Types that can be set as a default page"),
+        title=_(u'Types that can be set as a default page'),
         description=_(
-            u"The content types that should be available for selection "
-            u"when setting a default page."),
+            u'The content types that should be available for selection '
+            u'when setting a default page.'),
         required=False,
         missing_value=[],
         default=[
@@ -1301,20 +1302,22 @@ class IMailSchema(Interface):
             u'label_smtp_server',
             default=u'SMTP server'),
         description=_(
-            u"help_smtp_server",
-            default=u"The address of your local "
-                    u"SMTP (outgoing e-mail) server. Usually "
-                    u"'localhost', unless you use an "
-                    u"external server to send e-mail."),
+            u'help_smtp_server',
+            default=u'The address of your local '
+                    u'SMTP (outgoing e-mail) server. Usually '
+                    u'\'localhost\', unless you use an '
+                    u'external server to send e-mail.'),
         default=u'localhost',
         required=True)
 
     smtp_port = schema.Int(
         title=_(u'label_smtp_port',
                 default=u'SMTP port'),
-        description=_(u"help_smtp_port",
-                      default=u"The port of your local SMTP "
-                              u"(outgoing e-mail) server. Usually '25'."),
+        description=_(
+            u'help_smtp_port',
+            default=u'The port of your local SMTP '
+                    u'(outgoing e-mail) server. Usually \'25\'.'
+        ),
         default=25,
         required=True)
 
@@ -1323,10 +1326,10 @@ class IMailSchema(Interface):
             u'label_smtp_userid',
             default=u'ESMTP username'),
         description=_(
-            u"help_smtp_userid",
-            default=u"Username for authentication "
-                    u"to your e-mail server. Not required "
-                    u"unless you are using ESMTP."),
+            u'help_smtp_userid',
+            default=u'Username for authentication '
+                    u'to your e-mail server. Not required '
+                    u'unless you are using ESMTP.'),
         default=None,
         required=False)
 
@@ -1335,37 +1338,37 @@ class IMailSchema(Interface):
             u'label_smtp_pass',
             default=u'ESMTP password'),
         description=_(
-            u"help_smtp_pass",
-            default=u"The password for the ESMTP "
-                    u"user account."),
+            u'help_smtp_pass',
+            default=u'The password for the ESMTP '
+                    u'user account.'),
         default=None,
         required=False)
 
     email_from_name = schema.TextLine(
-        title=_(u"Site 'From' name"),
+        title=_(u'Site \'From\' name'),
         description=_(
-            u"Plone generates e-mail using "
-            u"this name as the e-mail "
-            u"sender."),
+            u'Plone generates e-mail using '
+            u'this name as the e-mail '
+            u'sender.'),
         default=None,
         required=True)
 
     email_from_address = schema.ASCIILine(
-        title=_(u"Site 'From' address"),
-        description=_(
-            u"Plone generates e-mail using "
-            u"this address as the e-mail "
-            u"return address. It is also "
-            u"used as the destination "
-            u"address for the site-wide "
-            u"contact form and the 'Send test "
-            u"e-mail' feature."),
+        title=_(u'Site \'From\' address'),
+        description=_(
+            u'Plone generates e-mail using '
+            u'this address as the e-mail '
+            u'return address. It is also '
+            u'used as the destination '
+            u'address for the site-wide '
+            u'contact form and the \'Send test '
+            u'e-mail\' feature.'),
         default=None,
         required=True)
 
     email_charset = schema.ASCIILine(
-        title=_(u"Email characterset"),
-        description=_(u'Characterset to use when sending emails.'),
+        title=_(u'E-mail characterset'),
+        description=_(u'Characterset to use when sending e-mails.'),
         default='utf-8',
         required=True,
     )
@@ -1376,28 +1379,28 @@ class IMarkupSchema(Interface):
     default_type = schema.Choice(
         title=_(u'Default format'),
         description=_(
-            u"Select the default format of textfields for newly "
-            u"created content objects."
+            u'Select the default format of textfields for newly '
+            u'created content objects.'
         ),
         default=u'text/html',
-        vocabulary="plone.app.vocabularies.AllowableContentTypes",
+        vocabulary='plone.app.vocabularies.AllowableContentTypes',
         required=True
     )
 
     allowed_types = schema.Tuple(
         title=_(u'Alternative formats'),
         description=_(
-            u"Select which formats are available for users as "
-            u"alternative to the default format. Note that if new "
-            u"formats are installed, they will be enabled for text "
-            u"fields by default unless explicitly turned off here "
-            u"or by the relevant installer."
+            u'Select which formats are available for users as '
+            u'alternative to the default format. Note that if new '
+            u'formats are installed, they will be enabled for text '
+            u'fields by default unless explicitly turned off here '
+            u'or by the relevant installer.'
         ),
         required=True,
         default=('text/html', 'text/x-web-textile'),
         missing_value=(),
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.AllowableContentTypes"
+            vocabulary='plone.app.vocabularies.AllowableContentTypes'
         )
     )
 
@@ -1407,26 +1410,26 @@ class IUserGroupsSettingsSchema(Interface):
     many_groups = schema.Bool(
         title=_(u'Many groups?'),
         description=_(
-            u"Determines if your Plone is optimized "
-            u"for small or large sites. In environments with a "
-            u"lot of groups it can be very slow or impossible "
-            u"to build a list all groups. This option tunes the "
-            u"user interface and behaviour of Plone for this "
-            u"case by allowing you to search for groups instead "
-            u"of listing all of them."),
+            u'Determines if your Plone is optimized '
+            u'for small or large sites. In environments with a '
+            u'lot of groups it can be very slow or impossible '
+            u'to build a list all groups. This option tunes the '
+            u'user interface and behaviour of Plone for this '
+            u'case by allowing you to search for groups instead '
+            u'of listing all of them.'),
         default=False
     )
 
     many_users = schema.Bool(
         title=_(u'Many users?'),
         description=_(
-            u"Determines if your Plone is optimized "
-            u"for small or large sites. In environments with a "
-            u"lot of users it can be very slow or impossible to "
-            u"build a list all users. This option tunes the user "
-            u"interface and behaviour of Plone for this case by "
-            u"allowing you to search for users instead of "
-            u"listing all of them."),
+            u'Determines if your Plone is optimized '
+            u'for small or large sites. In environments with a '
+            u'lot of users it can be very slow or impossible to '
+            u'build a list all users. This option tunes the user '
+            u'interface and behaviour of Plone for this case by '
+            u'allowing you to search for users instead of '
+            u'listing all of them.'),
         default=False
     )
 
@@ -1463,18 +1466,19 @@ class ISocialMediaSchema(Interface):
 class IImagingSchema(Interface):
     allowed_sizes = schema.List(
         title=_(u'Allowed image sizes'),
-        description=_(u'Specify all allowed maximum image dimensions, '
-                      'one per line. '
-                      'The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.'),
+        description=_(
+            u'Specify all allowed maximum image dimensions, one per line. The '
+            u'required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.'
+        ),
         value_type=schema.TextLine(),
         default=[
-            u"large 768:768",
-            u"preview 400:400",
-            u"mini 200:200",
-            u"thumb 128:128",
-            u"tile 64:64",
-            u"icon 32:32",
-            u"listing 16:16"],
+            u'large 768:768',
+            u'preview 400:400',
+            u'mini 200:200',
+            u'thumb 128:128',
+            u'tile 64:64',
+            u'icon 32:32',
+            u'listing 16:16'],
         missing_value=[],
         required=False,
     )
@@ -1550,7 +1554,7 @@ class IActionSchema(Interface):
 
     category = schema.Choice(
         title=_(u'Category'),
-        vocabulary="plone.app.vocabularies.PortalActionCategories",
+        vocabulary='plone.app.vocabularies.PortalActionCategories',
         required=True)
 
     title = schema.TextLine(
@@ -1562,39 +1566,43 @@ class IActionSchema(Interface):
         required=False)
 
     i18n_domain = schema.TextLine(
-        title=_(u"i18n_domain_heading", default=u'I18n domain'),
+        title=_(u'i18n_domain_heading', default=u'I18n domain'),
         default=u'plone',
         required=False)
 
     url_expr = schema.ASCIILine(
-        title=_(u"action_url_heading", default=u'Action URL'),
-        description=_(u"action_url_description",
-            default=u'An expression producing the called URL'),
+        title=_(u'action_url_heading', default=u'Action URL'),
+        description=_(
+            u'action_url_description',
+            default=u'An expression producing the called URL'
+        ),
         required=True)
 
     available_expr = schema.ASCIILine(
-        title=_(u"action_condition_heading", default=u'Condition'),
-        description=_(u"action_condition_description",
-            default=u'A boolean expression'),
+        title=_(u'action_condition_heading', default=u'Condition'),
+        description=_(
+            u'action_condition_description',
+            default=u'A boolean expression'
+        ),
         required=False)
 
     permissions = schema.List(
-        title=_(u"action_permissions_heading", default=u"Permissions"),
+        title=_(u'action_permissions_heading', default=u'Permissions'),
         required=True,
         default=['View'],
         missing_value=[],
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.Permissions"
+            vocabulary='plone.app.vocabularies.Permissions'
         )
     )
 
     visible = schema.Bool(
-        title=_(u"action_visibility_heading", default=u'Visible?'),
+        title=_(u'action_visibility_heading', default=u'Visible?'),
         default=True,
         required=False)
 
     position = schema.Int(
-        title=_(u"action_position_heading", default=u'Position'),
+        title=_(u'action_position_heading', default=u'Position'),
         default=1,
         min=1,
         required=True)
@@ -1604,7 +1612,7 @@ class INewActionSchema(Interface):
 
     category = schema.Choice(
         title=_(u'Category'),
-        vocabulary="plone.app.vocabularies.PortalActionCategories",
+        vocabulary='plone.app.vocabularies.PortalActionCategories',
         required=True)
 
     id = schema.ASCIILine(


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-09T00:13:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/89c00e138beed3a3948a1b29af3d979ad326fecb

Added setting to editing controlpanel to enable limit of keywords to the current navigation root

Files changed:
M CHANGES.rst
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/default/metadata.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 13acad4..30690f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -13,11 +13,14 @@ Breaking changes:
 - Moved code around and deprecated old locations in ``Products/CMFPlone/patterns/__init__``.
   This goes together with same pattern settings changes in ``plone.app.layout.globals.pattern_settings``.
   Also moved general usable ``./patterns/utils/get_portal`` to ``./utils/.get_portal``.
-  Depreacted ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
+  Deprecated ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
   [jensens]
 
 New features:
 
+- Added setting to editing controlpanel to enable limit of keywords to the current navigation root.
+  [jensens]
+
 - Make login modal dialog follow any redirects set while processing the login request.
   [fulv]
 
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index da2d8ba..632053a 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -138,6 +138,18 @@ class IEditingSchema(Interface):
         default=True,
         required=False)
 
+    subjects_of_navigation_root = schema.Bool(
+        title=_(u'Limit tags/keywords to the current navigation root'),
+        description=_(
+            u'Limit tags aka keywords vocabulary used for Tags field and '
+            u'in searches to the terms used inside the subtree of the current '
+            u'navigation root. This can be used together with Plones '
+            u'multilingual extension plone.app.multilingual to only offer '
+            u'keywords of the current selected language. Other addons may '
+            u'utilize this feature for its specific purposes.'),
+        default=False,
+        required=False)
+
 
 class ILanguageSchema(Interface):
     model.fieldset(
diff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml
index 5cf58ef..cffe102 100644
--- a/Products/CMFPlone/profiles/default/metadata.xml
+++ b/Products/CMFPlone/profiles/default/metadata.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>5101</version>
+  <version>5102</version>
 </metadata>


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-09T10:55:39+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/4a63244ee784bfb76eef565660495ccf16381f94

Merge pull request #1629 from plone/jensens-navroot-subjects-setting

Navroot subjects setting

Files changed:
M CHANGES.rst
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/default/metadata.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 13acad4..30690f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -13,11 +13,14 @@ Breaking changes:
 - Moved code around and deprecated old locations in ``Products/CMFPlone/patterns/__init__``.
   This goes together with same pattern settings changes in ``plone.app.layout.globals.pattern_settings``.
   Also moved general usable ``./patterns/utils/get_portal`` to ``./utils/.get_portal``.
-  Depreacted ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
+  Deprecated ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
   [jensens]
 
 New features:
 
+- Added setting to editing controlpanel to enable limit of keywords to the current navigation root.
+  [jensens]
+
 - Make login modal dialog follow any redirects set while processing the login request.
   [fulv]
 
diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py
index 1f8dabc..632053a 100644
--- a/Products/CMFPlone/interfaces/controlpanel.py
+++ b/Products/CMFPlone/interfaces/controlpanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from basetool import IPloneBaseTool
 from plone.supermodel import model
-from Products.CMFPlone import PloneMessageFactory as _  # NOQA
+from Products.CMFPlone import PloneMessageFactory as _
 from zope import schema
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
@@ -90,7 +90,7 @@ class IEditingSchema(Interface):
 
     available_editors = schema.List(
         title=_(u'Available editors'),
-        description=_(u"Available editors in the portal."),
+        description=_(u'Available editors in the portal.'),
         default=['TinyMCE', 'None'],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -100,44 +100,56 @@ class IEditingSchema(Interface):
     default_editor = schema.Choice(
         title=_(u'Default editor'),
         description=_(
-            u"Select the default wysiwyg "
-            u"editor. Users will be able to choose their "
-            u"own or select to use the site default."),
+            u'Select the default wysiwyg '
+            u'editor. Users will be able to choose their '
+            u'own or select to use the site default.'),
         default=u'TinyMCE',
         missing_value=set(),
-        vocabulary="plone.app.vocabularies.AvailableEditors",
+        vocabulary='plone.app.vocabularies.AvailableEditors',
         required=True)
 
     ext_editor = schema.Bool(
         title=_(u'Enable External Editor feature'),
         description=_(
-            u"Determines if the external editor "
-            u"feature is enabled. This feature requires a "
-            u"special client-side application installed. The "
-            u"users also have to enable this in their "
-            u"preferences."),
+            u'Determines if the external editor '
+            u'feature is enabled. This feature requires a '
+            u'special client-side application installed. The '
+            u'users also have to enable this in their '
+            u'preferences.'),
         default=False,
         required=False)
 
     enable_link_integrity_checks = schema.Bool(
-        title=_(u"Enable link integrity checks"),
+        title=_(u'Enable link integrity checks'),
         description=_(
-            u"Determines if the users should get "
-            u"warnings when they delete or move content that "
-            u"is linked from inside the site."),
+            u'Determines if the users should get '
+            u'warnings when they delete or move content that '
+            u'is linked from inside the site.'),
         default=True,
         required=False)
 
     lock_on_ttw_edit = schema.Bool(
-        title=_(u"Enable locking for through-the-web edits"),
+        title=_(u'Enable locking for through-the-web edits'),
         description=_(
-            u"Disabling locking here will only "
-            u"affect users editing content through the "
-            u"Plone web UI.  Content edited via WebDAV "
-            u"clients will still be subject to locking."),
+            u'Disabling locking here will only '
+            u'affect users editing content through the '
+            u'Plone web UI.  Content edited via WebDAV '
+            u'clients will still be subject to locking.'),
         default=True,
         required=False)
 
+    subjects_of_navigation_root = schema.Bool(
+        title=_(u'Limit tags/keywords to the current navigation root'),
+        description=_(
+            u'Limit tags aka keywords vocabulary used for Tags field and '
+            u'in searches to the terms used inside the subtree of the current '
+            u'navigation root. This can be used together with Plones '
+            u'multilingual extension plone.app.multilingual to only offer '
+            u'keywords of the current selected language. Other addons may '
+            u'utilize this feature for its specific purposes.'),
+        default=False,
+        required=False)
+
 
 class ILanguageSchema(Interface):
     model.fieldset(
@@ -153,40 +165,40 @@ class ILanguageSchema(Interface):
     )
 
     default_language = schema.Choice(
-        title=_(u"heading_site_language",
-                default=u"Site language"),
+        title=_(u'heading_site_language', default=u'Site language'),
         description=_(
-            u"description_site_language",
-            default=u"The language used for the content and the UI "
-                    u"of this site."),
+            u'description_site_language',
+            default=u'The language used for the content and the UI of '
+                    u'this site.'
+        ),
         default='en',
         required=True,
-        vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+        vocabulary='plone.app.vocabularies.AvailableContentLanguages'
     )
 
     available_languages = schema.List(
-        title=_(u"heading_available_languages",
-                default=u"Available languages"),
-        description=_(u"description_available_languages",
-                      default=u"The languages in which the site should be "
-                              u"translatable."),
+        title=_(u'heading_available_languages',
+                default=u'Available languages'),
+        description=_(u'description_available_languages',
+                      default=u'The languages in which the site should be '
+                              u'translatable.'),
         required=True,
         default=['en'],
         missing_value=[],
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.AvailableContentLanguages"
+            vocabulary='plone.app.vocabularies.AvailableContentLanguages'
         )
     )
 
     use_combined_language_codes = schema.Bool(
         title=_(
             u'label_allow_combined_language_codes',
-            default=u"Show country-specific language variants"
+            default=u'Show country-specific language variants'
         ),
         description=_(
-            u"help_allow_combined_language_codes",
-            default=u"Examples: pt-br (Brazilian Portuguese), "
-                    u"en-us (American English) etc."
+            u'help_allow_combined_language_codes',
+            default=u'Examples: pt-br (Brazilian Portuguese), '
+                    u'en-us (American English) etc.'
         ),
         default=True,
         required=False
@@ -195,9 +207,9 @@ class ILanguageSchema(Interface):
     display_flags = schema.Bool(
         title=_(
             u'label_display_flags',
-            default=u"Show language flags"
+            default=u'Show language flags'
         ),
-        description=u"",
+        description=u'',
         default=False,
         required=False
     )
@@ -205,10 +217,10 @@ class ILanguageSchema(Interface):
     always_show_selector = schema.Bool(
         title=_(
             u'label_always_show_selector',
-            default=u"Always show language selector"
+            default=u'Always show language selector'
         ),
         description=_(
-            u"help_always_show_selector",
+            u'help_always_show_selector',
             default=u""
         ),
         default=False,
@@ -230,32 +242,32 @@ class ILanguageSchema(Interface):
         ],
     )
     use_content_negotiation = schema.Bool(
-        title=_(u"heading_language_of_the_content",
-                default=u"Use the language of the content item"),
-        description=_(u"description_language_of_the_content",
-                      default=u"Use the language of the content item."),
+        title=_(u'heading_language_of_the_content',
+                default=u'Use the language of the content item'),
+        description=_(u'description_language_of_the_content',
+                      default=u'Use the language of the content item.'),
         default=False,
         required=False,
     )
 
     use_path_negotiation = schema.Bool(
         title=_(
-            u"heading_language_codes_in_URL",
-            default=u"Use language codes in URL path for manual override"),
+            u'heading_language_codes_in_URL',
+            default=u'Use language codes in URL path for manual override'),
         description=_(
-            u"description_language_codes_in_URL",
-            default=u"Use language codes in URL path for manual override."),
+            u'description_language_codes_in_URL',
+            default=u'Use language codes in URL path for manual override.'),
         default=False,
         required=False,
     )
 
     use_cookie_negotiation = schema.Bool(
-        title=_(u"heading_cookie_manual_override",
-                default=(u"Use cookie for manual override")),
+        title=_(u'heading_cookie_manual_override',
+                default=(u'Use cookie for manual override')),
         description=_(
-            u"description_cookie_manual_override",
+            u'description_cookie_manual_override',
             default=(
-                u"Required for the language selector viewlet to be rendered."
+                u'Required for the language selector viewlet to be rendered.'
             )
         ),
         default=False,
@@ -263,11 +275,11 @@ class ILanguageSchema(Interface):
     )
 
     authenticated_users_only = schema.Bool(
-        title=_(u"heading_auth_cookie_manual_override",
-                default=u"Authenticated users only"),
+        title=_(u'heading_auth_cookie_manual_override',
+                default=u'Authenticated users only'),
         description=_(
-            u"description_auth_ookie_manual_override",
-            default=(u"Related to Use cookie for manual override")
+            u'description_auth_ookie_manual_override',
+            default=(u'Related to Use cookie for manual override')
         ),
         default=False,
         required=False,
@@ -275,13 +287,13 @@ class ILanguageSchema(Interface):
 
     set_cookie_always = schema.Bool(
         title=_(
-            u"heading_set_language_cookie_always",
-            default=(u"Set the language cookie always")),
+            u'heading_set_language_cookie_always',
+            default=(u'Set the language cookie always')),
         description=_(
-            u"description_set_language_cookie_always",
+            u'description_set_language_cookie_always',
             default=(
-                u"i.e. also when the 'set_language' request parameter is "
-                u"absent"
+                u'i.e. also when the \'set_language\' request parameter is '
+                u'absent'
             )
         ),
         default=False,
@@ -289,36 +301,36 @@ class ILanguageSchema(Interface):
     )
 
     use_subdomain_negotiation = schema.Bool(
-        title=_(u"heading_use_subdomain",
-                default=u"Use subdomain"),
-        description=_(u"description_use_subdomain",
-                      default=u"e.g.: de.plone.org"),
+        title=_(u'heading_use_subdomain',
+                default=u'Use subdomain'),
+        description=_(u'description_use_subdomain',
+                      default=u'e.g.: de.plone.org'),
         default=False,
         required=False,
     )
 
     use_cctld_negotiation = schema.Bool(
-        title=_(u"heading_top_level_domain",
-                default=u"Use top-level domain"),
-        description=_(u"description_top_level_domain",
-                      default=u"e.g.: www.plone.de"),
+        title=_(u'heading_top_level_domain',
+                default=u'Use top-level domain'),
+        description=_(u'description_top_level_domain',
+                      default=u'e.g.: www.plone.de'),
         default=False,
         required=False,
     )
 
     use_request_negotiation = schema.Bool(
-        title=_(u"heading_browser_language_request_negotiation",
-                default=u"Use browser language request negotiation"),
-        description=_(u"description_browser_language_request_negotiation",
-                      default=u"Use browser language request negotiation."),
+        title=_(u'heading_browser_language_request_negotiation',
+                default=u'Use browser language request negotiation'),
+        description=_(u'description_browser_language_request_negotiation',
+                      default=u'Use browser language request negotiation.'),
         default=False,
         required=False,
     )
 
 
 class ITagAttrPair(Interface):
-    tags = schema.TextLine(title=u"tags")
-    attributes = schema.TextLine(title=u"attributes")
+    tags = schema.TextLine(title=u'tags')
+    attributes = schema.TextLine(title=u'attributes')
 
 
 @implementer(ITagAttrPair)
@@ -344,8 +356,8 @@ class IFilterSchema(Interface):
 
     nasty_tags = schema.List(
         title=_(u'Nasty tags'),
-        description=_(u"These tags and their content are completely blocked "
-                      "when a page is saved or rendered."),
+        description=_(u'These tags and their content are completely blocked '
+                      'when a page is saved or rendered.'),
         default=[u'style', u'object', u'embed', u'applet', u'script', u'meta'],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -353,8 +365,8 @@ class IFilterSchema(Interface):
 
     stripped_tags = schema.List(
         title=_(u'Stripped tags'),
-        description=_(u"These tags are stripped when saving or rendering, "
-                      "but any content is preserved."),
+        description=_(u'These tags are stripped when saving or rendering, '
+                      'but any content is preserved.'),
         default=[u'font', ],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -362,8 +374,8 @@ class IFilterSchema(Interface):
 
     custom_tags = schema.List(
         title=_(u'Custom tags'),
-        description=_(u"Add tag names here for tags which are not part of "
-                      "XHTML but which should be permitted."),
+        description=_(u'Add tag names here for tags which are not part of '
+                      'XHTML but which should be permitted.'),
         default=[],
         value_type=schema.TextLine(),
         missing_value=[],
@@ -373,8 +385,8 @@ class IFilterSchema(Interface):
 
     stripped_attributes = schema.List(
         title=_(u'Stripped attributes'),
-        description=_(u"These attributes are stripped from any tag when "
-                      "saving."),
+        description=_(u'These attributes are stripped from any tag when '
+                      'saving.'),
         default=(u'dir lang valign halign border frame rules cellspacing '
                  'cellpadding bgcolor').split(),
         value_type=schema.TextLine(),
@@ -383,10 +395,10 @@ class IFilterSchema(Interface):
 
     stripped_combinations = schema.Dict(
         title=_(u'Stripped combinations'),
-        description=_(u"These attributes are stripped from those tags when "
-                      "saving."),
-        key_type=schema.TextLine(title=u"tags"),
-        value_type=schema.TextLine(title=u"attributes"),
+        description=_(u'These attributes are stripped from those tags when '
+                      'saving.'),
+        key_type=schema.TextLine(title=u'tags'),
+        value_type=schema.TextLine(title=u'attributes'),
         default={'table th td': 'width height'},
         missing_value={},
         required=False)
@@ -397,7 +409,12 @@ class IFilterSchema(Interface):
         title=_(u'Permitted properties'),
         description=_(
             u'These CSS properties are allowed in style attributes.'),
-        default=u'text-align list-style-type float padding-left text-decoration'.split(),
+        default=[
+            u'text-align',
+            u'list-style-type',
+            u'float padding-left',
+            u'text-decoration'
+        ],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)
@@ -416,120 +433,121 @@ class ITinyMCELayoutSchema(Interface):
     """This interface defines the layout properties."""
 
     resizing = schema.Bool(
-        title=_(u"Enable resizing the editor window."),
-        description=_(u"This option gives you the ability to enable/disable "
-                      "resizing the editor window. "),
+        title=_(u'Enable resizing the editor window.'),
+        description=_(u'This option gives you the ability to enable/disable '
+                      'resizing the editor window. '),
         default=True,
         required=False)
 
     autoresize = schema.Bool(
-        title=_(u"Enable auto resizing of the editor window."),
-        description=_(u"This option gives you the ability to enable/disable "
-                      "auto resizing the editor window depending "
-                      "on the content."),
+        title=_(u'Enable auto resizing of the editor window.'),
+        description=_(u'This option gives you the ability to enable/disable '
+                      'auto resizing the editor window depending '
+                      'on the content.'),
         default=False,
         required=False)
 
     # TODO: add validation to assert % and px in the value
     editor_width = schema.TextLine(
-        title=_(u"Editor width"),
-        description=_(u"This option gives you the ability to specify the "
-                      "width of the editor (like 100% or 400px)."),
+        title=_(u'Editor width'),
+        description=_(u'This option gives you the ability to specify the '
+                      'width of the editor (like 100% or 400px).'),
         default=None,
         required=False)
 
     # TODO: add validation to assert % and px in the value
     editor_height = schema.TextLine(
-        title=_(u"Editor height"),
-        description=_(u"This option gives you the ability to specify the "
-                      "height of the editor in pixels. "
-                      "If auto resize is enabled this value is used "
-                      "as minimum height."),
+        title=_(u'Editor height'),
+        description=_(u'This option gives you the ability to specify the '
+                      'height of the editor in pixels. '
+                      'If auto resize is enabled this value is used '
+                      'as minimum height.'),
         default=None,
         required=False)
 
     content_css = schema.List(
-        title=_(u"Choose the CSS used in WYSIWYG Editor Area"),
-        description=_(u"This option enables you to specify a custom CSS file "
-                      "that provides content CSS. "
-                      "This CSS file is the one used within the editor "
-                      "(the editable area). In addition to what is listed here, "
-                      "the plone bundle CSS and diazo themes using the "
-                      "tinymce-content-css setting are also added."),
+        title=_(u'Choose the CSS used in WYSIWYG Editor Area'),
+        description=_(u'This option enables you to specify a custom CSS file '
+                      'that provides content CSS. '
+                      'This CSS file is the one used within the editor '
+                      '(the editable area). In addition to what is listed, '
+                      'here the plone bundle CSS and diazo themes using the '
+                      'tinymce-content-css setting are also added.'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u'++plone++static/components/tinymce/skins/lightgray/content.min.css',
+            u'++plone++static/components/tinymce/'
+            u'skins/lightgray/content.min.css'
         ],
         required=False)
 
     header_styles = schema.List(
-        title=_(u"Header styles"),
+        title=_(u'Header styles'),
         description=_('Name|tag'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
             u'Header 1|h1',
-            u"Header 2|h2",
-            u"Header 3|h3",
-            u"Header 4|h4",
-            u"Header 5|h5",
-            u"Header 6|h6"
+            u'Header 2|h2',
+            u'Header 3|h3',
+            u'Header 4|h4',
+            u'Header 5|h5',
+            u'Header 6|h6'
         ])
 
     inline_styles = schema.List(
-        title=_(u"Inline styles"),
+        title=_(u'Inline styles'),
         description=_('Name|format|icon'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Bold|bold|bold",
-            u"Italic|italic|italic",
-            u"Underline|underline|underline",
-            u"Strikethrough|strikethrough|strikethrough",
-            u"Superscript|superscript|superscript",
-            u"Subscript|subscript|subscript",
-            u"Code|code|code"])
+            u'Bold|bold|bold',
+            u'Italic|italic|italic',
+            u'Underline|underline|underline',
+            u'Strikethrough|strikethrough|strikethrough',
+            u'Superscript|superscript|superscript',
+            u'Subscript|subscript|subscript',
+            u'Code|code|code'])
 
     block_styles = schema.List(
-        title=_(u"Block styles"),
+        title=_(u'Block styles'),
         description=_('Name|format'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Paragraph|p",
-            u"Blockquote|blockquote",
-            u"Div|div",
-            u"Pre|pre"])
+            u'Paragraph|p',
+            u'Blockquote|blockquote',
+            u'Div|div',
+            u'Pre|pre'])
 
     alignment_styles = schema.List(
-        title=_(u"Alignment styles"),
+        title=_(u'Alignment styles'),
         description=_('Name|format|icon'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Left|alignleft|alignleft",
-            u"Center|aligncenter|aligncenter",
-            u"Right|alignright|alignright",
-            u"Justify|alignjustify|alignjustify"])
+            u'Left|alignleft|alignleft',
+            u'Center|aligncenter|aligncenter',
+            u'Right|alignright|alignright',
+            u'Justify|alignjustify|alignjustify'])
 
     table_styles = schema.List(
-        title=_(u"Table styles"),
+        title=_(u'Table styles'),
         description=_('Name|class'),
         value_type=schema.TextLine(),
         missing_value=[],
         default=[
-            u"Listing|listing"
-            u"Invisible Grid|invisible-grid"
+            u'Listing|listing'
+            u'Invisible Grid|invisible-grid'
         ])
 
     formats = schema.Text(
-        title=_(u"Formats"),
+        title=_(u'Formats'),
         description=_(
-            u"Enter a JSON-formatted style format configuration. "
-            u"A format is for example the style that get applied when "
-            u"you press the bold button inside the editor. "
-            u"See http://www.tinymce.com/wiki.php/Configuration:formats"),
+            u'Enter a JSON-formatted style format configuration. '
+            u'A format is for example the style that get applied when '
+            u'you press the bold button inside the editor. '
+            u'See http://www.tinymce.com/wiki.php/Configuration:formats'),
         constraint=validate_json,
         default=json.dumps({
             'discreet': {'inline': 'span', 'classes': 'discreet'},
@@ -543,42 +561,42 @@ class ITinyMCEPluginSchema(Interface):
     """This interface defines the toolbar properties."""
 
     plugins = schema.List(
-        title=_("label_tinymce_plugins", default=u"Editor plugins"),
-        description=_("help_tinymce_plugins", default=(
-            u"Select plugins to include with tinymce")),
+        title=_('label_tinymce_plugins', default=u'Editor plugins'),
+        description=_('help_tinymce_plugins', default=(
+            u'Select plugins to include with tinymce')),
         value_type=schema.Choice(vocabulary=SimpleVocabulary([
-            SimpleTerm('advlist', 'advlist', u"advlist"),
-            SimpleTerm('anchor', 'anchor', u"anchor"),
-            SimpleTerm('autosave', 'autosave', u"autosave"),
-            SimpleTerm('charmap', 'charmap', u"charmap"),
-            SimpleTerm('code', 'code', u"code"),
-            SimpleTerm('colorpicker', 'colorpicker', u"colorpicker"),
-            SimpleTerm('contextmenu', 'contextmenu', u"contextmenu"),
-            SimpleTerm('directionality', 'directionality', u"directionality"),
-            SimpleTerm('emoticons', 'emoticons', u"emoticons"),
-            SimpleTerm('fullpage', 'fullpage', u"fullpage"),
-            SimpleTerm('fullscreen', 'fullscreen', u"fullscreen"),
-            SimpleTerm('hr', 'hr', u"hr"),
-            SimpleTerm('insertdatetime', 'insertdatetime', u"insertdatetime"),
-            SimpleTerm('layer', 'layer', u"layer"),
-            SimpleTerm('lists', 'lists', u"lists"),
-            SimpleTerm('media', 'media', u"media"),
-            SimpleTerm('nonbreaking', 'nonbreaking', u"nonbreaking"),
-            SimpleTerm('noneditable', 'noneditable', u"noneditable"),
-            SimpleTerm('pagebreak', 'pagebreak', u"pagebreak"),
-            SimpleTerm('paste', 'paste', u"paste"),
-            SimpleTerm('preview', 'preview', u"preview"),
-            SimpleTerm('print', 'print', u"print"),
+            SimpleTerm('advlist', 'advlist', u'advlist'),
+            SimpleTerm('anchor', 'anchor', u'anchor'),
+            SimpleTerm('autosave', 'autosave', u'autosave'),
+            SimpleTerm('charmap', 'charmap', u'charmap'),
+            SimpleTerm('code', 'code', u'code'),
+            SimpleTerm('colorpicker', 'colorpicker', u'colorpicker'),
+            SimpleTerm('contextmenu', 'contextmenu', u'contextmenu'),
+            SimpleTerm('directionality', 'directionality', u'directionality'),
+            SimpleTerm('emoticons', 'emoticons', u'emoticons'),
+            SimpleTerm('fullpage', 'fullpage', u'fullpage'),
+            SimpleTerm('fullscreen', 'fullscreen', u'fullscreen'),
+            SimpleTerm('hr', 'hr', u'hr'),
+            SimpleTerm('insertdatetime', 'insertdatetime', u'insertdatetime'),
+            SimpleTerm('layer', 'layer', u'layer'),
+            SimpleTerm('lists', 'lists', u'lists'),
+            SimpleTerm('media', 'media', u'media'),
+            SimpleTerm('nonbreaking', 'nonbreaking', u'nonbreaking'),
+            SimpleTerm('noneditable', 'noneditable', u'noneditable'),
+            SimpleTerm('pagebreak', 'pagebreak', u'pagebreak'),
+            SimpleTerm('paste', 'paste', u'paste'),
+            SimpleTerm('preview', 'preview', u'preview'),
+            SimpleTerm('print', 'print', u'print'),
             # XXX disable save button since it is not implemeneted
-            # SimpleTerm('save', 'save', u"save"),
-            SimpleTerm('searchreplace', 'searchreplace', u"searchreplace"),
-            SimpleTerm('tabfocus', 'tabfocus', u"tabfocus"),
-            SimpleTerm('table', 'table', u"table"),
-            SimpleTerm('textcolor', 'textcolor', u"textcolor"),
-            SimpleTerm('textpattern', 'textpattern', u"textpattern"),
-            SimpleTerm('visualblocks', 'visualblocks', u"visualblocks"),
-            SimpleTerm('visualchars', 'visualchars', u"visualchars"),
-            SimpleTerm('wordcount', 'wordcount', u"wordcount")
+            # SimpleTerm('save', 'save', u'save'),
+            SimpleTerm('searchreplace', 'searchreplace', u'searchreplace'),
+            SimpleTerm('tabfocus', 'tabfocus', u'tabfocus'),
+            SimpleTerm('table', 'table', u'table'),
+            SimpleTerm('textcolor', 'textcolor', u'textcolor'),
+            SimpleTerm('textpattern', 'textpattern', u'textpattern'),
+            SimpleTerm('visualblocks', 'visualblocks', u'visualblocks'),
+            SimpleTerm('visualchars', 'visualchars', u'visualchars'),
+            SimpleTerm('wordcount', 'wordcount', u'wordcount')
         ])),
         default=['advlist', 'fullscreen', 'hr', 'lists', 'media',
                  'nonbreaking', 'noneditable', 'pagebreak', 'paste', 'preview',
@@ -588,9 +606,9 @@ class ITinyMCEPluginSchema(Interface):
         required=False)
 
     menubar = schema.List(
-        title=_("label_tinymce_menubar", default=u"Menubar"),
-        description=_("help_tinymce_menubar", default=(
-            u"Enter what items you would like in the menu bar.")),
+        title=_('label_tinymce_menubar', default=u'Menubar'),
+        description=_('help_tinymce_menubar', default=(
+            u'Enter what items you would like in the menu bar.')),
         required=True,
         value_type=schema.TextLine(),
         missing_value=[],
@@ -609,32 +627,45 @@ class ITinyMCEPluginSchema(Interface):
                 'items': 'undo redo | cut copy paste pastetext | '
                          'searchreplace textpattern selectall | textcolor'},
             'insert': {'title': 'Insert', 'items': 'link media | template hr'},
-            'view': {'title': 'View', 'items': 'visualaid visualchars visualblocks preview '
-                                               'fullpage fullscreen'},
-            'format': {'title': 'Format',
-                       'items': 'bold italic underline strikethrough '
-                                'superscript subscript | formats | removeformat'},
-            'table': {'title': 'Table', 'items': 'inserttable tableprops deletetable '
-                                                 '| cell row column'},
+            'view': {
+                'title': 'View',
+                'items': 'visualaid visualchars visualblocks preview '
+                         'fullpage fullscreen',
+            },
+            'format': {
+                'title': 'Format',
+                'items': 'bold italic underline strikethrough '
+                         'superscript subscript | formats | removeformat'
+            },
+            'table': {
+                'title': 'Table',
+                'items': 'inserttable tableprops deletetable | cell row column'
+            },
             'tools': {
                 'title': 'Tools',
-                'items': 'spellchecker charmap emoticons insertdatetime layer code'}
+                'items': 'spellchecker charmap emoticons insertdatetime '
+                         'layer code'
+            }
         }, indent=4).decode('utf8')
     )
 
     templates = schema.Text(
-        title=_("label_tinymce_templates", default=u"Templates"),
-        description=_("help_tinymce_templates", default=(
-            u"Enter the list of templates in json format \
-                http://www.tinymce.com/wiki.php/Plugin:template")),
+        title=_('label_tinymce_templates', default=u'Templates'),
+        description=_(
+            'help_tinymce_templates',
+            default=(
+                u'Enter the list of templates in json format '
+                u'http://www.tinymce.com/wiki.php/Plugin:template'
+            )
+        ),
         required=False,
         constraint=validate_json,
         default=json.dumps({}).decode('utf8'))
 
     toolbar = schema.Text(
-        title=_("label_tinymce_toolbar", default=u"Toolbar"),
-        description=_("help_tinymce_toolbar", default=(
-            u"Enter how you would like the toolbar items to list.")),
+        title=_('label_tinymce_toolbar', default=u'Toolbar'),
+        description=_('help_tinymce_toolbar', default=(
+            u'Enter how you would like the toolbar items to list.')),
         required=True,
         default=u'ltr rtl | undo redo | styleselect | bold italic | '
                 u'alignleft aligncenter alignright alignjustify | '
@@ -642,19 +673,19 @@ class ITinyMCEPluginSchema(Interface):
                 u'unlink plonelink ploneimage')
 
     custom_plugins = schema.List(
-        title=_(u"Custom plugins"),
-        description=_(u"Enter a list of custom plugins which will be loaded "
-                      "in the editor. Format is "
-                      "pluginname|location, one per line."),
+        title=_(u'Custom plugins'),
+        description=_(u'Enter a list of custom plugins which will be loaded '
+                      'in the editor. Format is '
+                      'pluginname|location, one per line.'),
         required=False,
         value_type=schema.TextLine(),
         missing_value=[],
         default=[])
 
     custom_buttons = schema.List(
-        title=_(u"Custom buttons"),
+        title=_(u'Custom buttons'),
         description=_(
-            u"Enter a list of custom buttons which will be added to toolbar"),
+            u'Enter a list of custom buttons which will be added to toolbar'),
         required=False,
         value_type=schema.TextLine(),
         missing_value=[],
@@ -666,69 +697,69 @@ class ITinyMCESpellCheckerSchema(Interface):
     """This interface defines the libraries properties."""
 
     libraries_spellchecker_choice = schema.Choice(
-        title=_(u"Spellchecker plugin to use"),
-        description=_(u"This option allows you to choose the spellchecker for "
-                      u"TinyMCE."),
+        title=_(u'Spellchecker plugin to use'),
+        description=_(u'This option allows you to choose the spellchecker for '
+                      u'TinyMCE.'),
         missing_value=set(),
         vocabulary=SimpleVocabulary([
             SimpleTerm('browser', 'browser',
-                       _(u"Default browser spellchecker")),
+                       _(u'Default browser spellchecker')),
             SimpleTerm('AtD', 'AtD',
-                       _(u"After the deadline (FLOSS)")),
+                       _(u'After the deadline (FLOSS)')),
         ]),
         default=u'browser',
         required=False)
 
     libraries_atd_ignore_strings = schema.List(
-        title=_(u"AtD ignore strings"),
+        title=_(u'AtD ignore strings'),
         description=_(
             'label_atd_ignore_strings',
-            default=u"A list of strings which the \"After the Deadline\" "
-                    u"spellchecker should ignore. "
-                    u"Note: This option is only applicable when the "
-                    u"appropriate spellchecker has been chosen above."),
+            default=u'A list of strings which the "After the Deadline" '
+                    u'spellchecker should ignore. '
+                    u'Note: This option is only applicable when the '
+                    u'appropriate spellchecker has been chosen above.'),
         default=[
-            u"Zope",
-            u"Plone",
-            u"TinyMCE"],
+            u'Zope',
+            u'Plone',
+            u'TinyMCE'],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)
 
     libraries_atd_show_types = schema.List(
-        title=_(u"AtD error types to show"),
+        title=_(u'AtD error types to show'),
         description=_(
             'help_atderrortypes_to_show',
-            default=u"A list of error types which the "
-                    u"\"After the Deadline\" spellchecker should check for. "
-                    u"By default, all the available error type will be "
-                    u"listed here."),
+            default=u'A list of error types which the '
+                    u'"After the Deadline" spellchecker should check for. '
+                    u'By default, all the available error type will be '
+                    u'listed here.'),
         value_type=schema.TextLine(),
         default=[
-            u"Bias Language",
-            u"Cliches",
-            u"Complex Expression",
-            u"Diacritical Marks",
-            u"Double Negatives",
-            u"Hidden Verbs",
-            u"Jargon Language",
-            u"Passive voice",
-            u"Phrases to Avoid",
-            u"Redundant Expression"],
+            u'Bias Language',
+            u'Cliches',
+            u'Complex Expression',
+            u'Diacritical Marks',
+            u'Double Negatives',
+            u'Hidden Verbs',
+            u'Jargon Language',
+            u'Passive voice',
+            u'Phrases to Avoid',
+            u'Redundant Expression'],
         missing_value=[],
         required=False)
 
     libraries_atd_service_url = schema.TextLine(
-        title=_(u"AtD service URL"),
+        title=_(u'AtD service URL'),
         description=_(
             'help_atd_service_url',
-            default=u"The URL of the \"After the Deadline\" grammar and spell "
-                    u"checking server. "
-                    u"The default value is the public server, "
-                    u"but ideally you should download and install your own "
-                    u"and specify its address here."),
+            default=u'The URL of the "After the Deadline" grammar and spell '
+                    u'checking server. '
+                    u'The default value is the public server, '
+                    u'but ideally you should download and install your own '
+                    u'and specify its address here.'),
         required=True,
-        default=u"service.afterthedeadline.com",)
+        default=u'service.afterthedeadline.com',)
 
 
 class ITinyMCEResourceTypesSchema(Interface):
@@ -738,66 +769,46 @@ class ITinyMCEResourceTypesSchema(Interface):
     # rooted = schema.Bool(
     #    title=_(u"Rooted to current object"),
     #    description=_(u"When enabled the user will be rooted to the current "
-    #                  "object and can't add links and images from other parts "
-    #                  "of the site."),
+    #                  "object and can't add links and images from other "
+    #                  "parts of the site."),
     #    default=False,
     #    required=False)
 
     contains_objects = schema.List(
-        title=_(u"Contains objects"),
-        description=_(u"Enter a list of content types which can contain other "
-                      "objects. Format is one contenttype per line."),
+        title=_(u'Contains objects'),
+        description=_(u'Enter a list of content types which can contain other '
+                      'objects. Format is one contenttype per line.'),
         value_type=schema.TextLine(),
         default=[
-            u"Folder",
-            u"Large Plone Folder",
-            u"Plone Site"],
+            u'Folder',
+            u'Large Plone Folder',
+            u'Plone Site'],
         missing_value=[],
         required=False)
 
-    # XXX not implements
-    # containsanchors = schema.Text(
-    #    title=_(u"Contains Anchors"),
-    #    description=_(u"Enter a list of content types which can contain "
-    #                  "anchors. Format is one contenttype per line."),
-    #    default=u"Event\n"
-    #            u"News Item\n"
-    #            u"Document\n"
-    #            u"ATRelativePathCriterion",
-    #    required=False)
-
-    # XXX do we still want this?
-    # seems like it could be really annoying for users
-    # creating new types.
-    # linkable = schema.Text(
-    #    title=_(u"Linkable Objects"),
-    #    description=_(u"Enter a list of content types which can be linked. "
-    #                  "Format is one contenttype per line."),
-    #    required=False)
-
     image_objects = schema.List(
-        title=_(u"Image objects"),
-        description=_(u"Enter a list of content types which can be used as "
-                      "images. Format is one contenttype per line."),
-        default=[u"Image"],
+        title=_(u'Image objects'),
+        description=_(u'Enter a list of content types which can be used as '
+                      'images. Format is one contenttype per line.'),
+        default=[u'Image'],
         value_type=schema.TextLine(),
         missing_value=[],
         required=False)
 
     entity_encoding = schema.Choice(
-        title=_(u"Entity encoding"),
-        description=_(
-            u"This option controls how entities/characters get processed. "
-            "Named: Characters will be converted into named entities "
-            "based on the entities option. "
-            "Numeric: Characters will be converted into numeric entities. "
-            "Raw: All characters will be stored in non-entity form "
-            "except these XML default entities: amp lt gt quot"),
+        title=_(u'Entity encoding'),
+        description=_(
+            u'This option controls how entities/characters get processed. '
+            'Named: Characters will be converted into named entities '
+            'based on the entities option. '
+            'Numeric: Characters will be converted into numeric entities. '
+            'Raw: All characters will be stored in non-entity form '
+            'except these XML default entities: amp lt gt quot'),
         missing_value=set(),
         vocabulary=SimpleVocabulary(
-            [SimpleTerm('named', 'named', _(u"Named")),
-             SimpleTerm('numeric', 'numeric', _(u"Numeric")),
-             SimpleTerm('raw', 'raw', _(u"Raw"))]),
+            [SimpleTerm('named', 'named', _(u'Named')),
+             SimpleTerm('numeric', 'numeric', _(u'Numeric')),
+             SimpleTerm('raw', 'raw', _(u'Raw'))]),
         default=u"raw",
         required=False)
 
@@ -807,8 +818,10 @@ class ITinyMCEAdvancedSchema(Interface):
 
     other_settings = schema.Text(
         title=_('label_tinymce_other_settings', 'Other settings'),
-        description=_('hint_tinymce_other_settings',
-                      default='Other TinyMCE configuration formatted as JSON.'),
+        description=_(
+            'hint_tinymce_other_settings',
+            default='Other TinyMCE configuration formatted as JSON.'
+        ),
         required=False,
         constraint=validate_json,
         default=json.dumps({}).decode('utf8'),
@@ -828,13 +841,13 @@ class ITinyMCESchema(
 class IMaintenanceSchema(Interface):
 
     days = schema.Int(
-        title=_(u"Days of object history to keep after packing"),
+        title=_(u'Days of object history to keep after packing'),
         description=_(
-            u"You should pack your database regularly. This number "
-            u"indicates how many days of undo history you want to "
-            u"keep. It is unrelated to versioning, so even if you "
-            u"pack the database, the history of the content changes "
-            u"will be kept. Recommended value is 7 days."
+            u'You should pack your database regularly. This number '
+            u'indicates how many days of undo history you want to '
+            u'keep. It is unrelated to versioning, so even if you '
+            u'pack the database, the history of the content changes '
+            u'will be kept. Recommended value is 7 days.'
         ),
         default=7,
         min=0,
@@ -845,28 +858,28 @@ class IMaintenanceSchema(Interface):
 class INavigationSchema(Interface):
 
     generate_tabs = schema.Bool(
-        title=_(u"Automatically generate tabs"),
+        title=_(u'Automatically generate tabs'),
         description=_(
-            u"By default, all items created at the root level will "
-            u"appear as tabs. You can turn this off if you prefer manually "
-            u"constructing this part of the navigation."),
+            u'By default, all items created at the root level will '
+            u'appear as tabs. You can turn this off if you prefer manually '
+            u'constructing this part of the navigation.'),
         default=True,
         required=False)
 
     nonfolderish_tabs = schema.Bool(
-        title=_(u"Generate tabs for items other than folders."),
+        title=_(u'Generate tabs for items other than folders.'),
         description=_(
-            u"By default, any content item in the root of the portal will "
-            u"appear as a tab. If you turn this option off, only folders "
-            u"will be shown. This only has an effect if 'Automatically "
-            u"generate tabs' is enabled."),
+            u'By default, any content item in the root of the portal will '
+            u'appear as a tab. If you turn this option off, only folders '
+            u'will be shown. This only has an effect if \'Automatically '
+            u'generate tabs\' is enabled.'),
         default=True,
         required=False)
 
     sort_tabs_on = schema.Choice(
-        title=_(u"Sort tabs on"),
+        title=_(u'Sort tabs on'),
         description=_(
-            u"Index used to sort the tabs"
+            u'Index used to sort the tabs'
         ),
         required=True,
         default=u'getObjPositionInParent',
@@ -891,17 +904,17 @@ class INavigationSchema(Interface):
         ]),
     )
     sort_tabs_reversed = schema.Bool(
-        title=_(u"Reversed sort order for tabs."),
+        title=_(u'Reversed sort order for tabs.'),
         description=_(
-            u"Sort tabs in descending."),
+            u'Sort tabs in descending.'),
         default=False,
         required=False)
 
     displayed_types = schema.Tuple(
-        title=_(u"Displayed content types"),
+        title=_(u'Displayed content types'),
         description=_(
-            u"The content types that should be shown in the navigation and "
-            u"site map."),
+            u'The content types that should be shown in the navigation and '
+            u'site map.'),
         required=False,
         default=(
             'Image',
@@ -914,14 +927,14 @@ class INavigationSchema(Interface):
         ),
         missing_value=(),
         value_type=schema.Choice(
-            source="plone.app.vocabularies.ReallyUserFriendlyTypes"
+            source='plone.app.vocabularies.ReallyUserFriendlyTypes'
         ))
 
     filter_on_workflow = schema.Bool(
-        title=_(u"Filter on workflow state"),
+        title=_(u'Filter on workflow state'),
         description=_(
-            u"The workflow states that should be shown in the navigation "
-            u"and the site map."),
+            u'The workflow states that should be shown in the navigation '
+            u'and the site map.'),
         default=False,
         required=False)
 
@@ -930,41 +943,41 @@ class INavigationSchema(Interface):
         default=(),
         missing_value=(),
         value_type=schema.Choice(
-            source="plone.app.vocabularies.WorkflowStates"))
+            source='plone.app.vocabularies.WorkflowStates'))
 
     show_excluded_items = schema.Bool(
         title=_(
-            u"Show items normally excluded from navigation if viewing their "
-            u"children."),
+            u'Show items normally excluded from navigation if viewing their '
+            u'children.'),
         description=_(
-            u"If an item has been excluded from navigation should it be "
-            u"shown in navigation when viewing content contained within it "
-            u"or within a subfolder."),
+            u'If an item has been excluded from navigation should it be '
+            u'shown in navigation when viewing content contained within it '
+            u'or within a subfolder.'),
         default=True,
         required=False)
 
     root = schema.TextLine(
         title=_(
-            u"Root"),
+            u'Root'),
         description=_(
-            u"Path to be used as navigation root, relative to Plone site root."
-            u"Starts with '/'"
+            u'Path to be used as navigation root, relative to Plone site root.'
+            u'Starts with \'/\''
         ),
         default=u'/',
         required=True
     )
 
     sitemap_depth = schema.Int(
-        title=_(u"Sitemap depth"),
-        description=_(u"Number of folder levels to show in the site map."),
+        title=_(u'Sitemap depth'),
+        description=_(u'Number of folder levels to show in the site map.'),
         default=3,
         required=True
     )
 
     parent_types_not_to_query = schema.List(
-        title=_(u"Hide children of these types"),
+        title=_(u'Hide children of these types'),
         description=_(
-            u"Hide content inside the following types in Navigation."),
+            u'Hide content inside the following types in Navigation.'),
         default=[u'TempFolder'],
         value_type=schema.TextLine(),
         missing_value=(),
@@ -977,20 +990,20 @@ class ISearchSchema(Interface):
     enable_livesearch = schema.Bool(
         title=_(u'Enable LiveSearch'),
         description=_(
-            u"Enables the LiveSearch feature, which shows live "
-            u"results if the browser supports JavaScript."),
+            u'Enables the LiveSearch feature, which shows live '
+            u'results if the browser supports JavaScript.'),
         default=True,
         required=False
     )
 
     types_not_searched = schema.Tuple(
-        title=_(u"Define the types to be shown in the site and searched"),
+        title=_(u'Define the types to be shown in the site and searched'),
         description=_(
-            u"Define the types that should be searched and be "
-            u"available in the user facing part of the site. "
-            u"Note that if new content types are installed, they "
-            u"will be enabled by default unless explicitly turned "
-            u"off here or by the relevant installer."
+            u'Define the types that should be searched and be '
+            u'available in the user facing part of the site. '
+            u'Note that if new content types are installed, they '
+            u'will be enabled by default unless explicitly turned '
+            u'off here or by the relevant installer.'
         ),
         required=False,
         default=(
@@ -1000,13 +1013,13 @@ class ISearchSchema(Interface):
         ),
         missing_value=(),
         value_type=schema.Choice(
-            source="plone.app.vocabularies.PortalTypes"
+            source='plone.app.vocabularies.PortalTypes'
         ),
     )
 
     search_results_description_length = schema.Int(
-        title=_(u"Crop the item description in search result listings "
-                u"after a number of characters."),
+        title=_(u'Crop the item description in search result listings '
+                u'after a number of characters.'),
         required=False,
         default=160,
     )
@@ -1017,60 +1030,60 @@ class ISecuritySchema(Interface):
     enable_self_reg = schema.Bool(
         title=_(u'Enable self-registration'),
         description=_(
-            u"Allows users to register themselves on the site. If "
-            u"not selected, only site managers can add new users."),
+            u'Allows users to register themselves on the site. If '
+            u'not selected, only site managers can add new users.'),
         default=False,
         required=False)
 
     enable_user_pwd_choice = schema.Bool(
         title=_(u'Let users select their own passwords'),
         description=_(
-            u"If not selected, a URL will be generated and "
-            u"e-mailed. Users are instructed to follow the link to "
-            u"reach a page where they can change their password and "
-            u"complete the registration process; this also verifies "
-            u"that they have entered a valid email address."),
+            u'If not selected, a URL will be generated and '
+            u'e-mailed. Users are instructed to follow the link to '
+            u'reach a page where they can change their password and '
+            u'complete the registration process; this also verifies '
+            u'that they have entered a valid email address.'),
         default=False,
         required=False)
 
     enable_user_folders = schema.Bool(
         title=_(u'Enable User Folders'),
         description=_(
-            u"If selected, home folders where users can create "
-            u"content will be created when they log in."),
+            u'If selected, home folders where users can create '
+            u'content will be created when they log in.'),
         default=False,
         required=False)
 
     allow_anon_views_about = schema.Bool(
-        title=_(u"Allow anyone to view 'about' information"),
+        title=_(u'Allow anyone to view \'about\' information'),
         description=_(
-            u"If not selected only logged-in users will be able to "
-            u"view information about who created an item and when it "
-            u"was modified."),
+            u'If not selected only logged-in users will be able to '
+            u'view information about who created an item and when it '
+            u'was modified.'),
         default=False,
         required=False)
 
     use_email_as_login = schema.Bool(
         title=_(u'Use email address as login name'),
         description=_(
-            u"Allows users to login with their email address instead "
-            u"of specifying a separate login name. This also updates "
-            u"the login name of existing users, which may take a "
-            u"while on large sites. The login name is saved as "
-            u"lower case, but to be userfriendly it does not matter "
-            u"which case you use to login. When duplicates are found, "
-            u"saving this form will fail. You can use the "
-            u"@@migrate-to-emaillogin page to show the duplicates."),
+            u'Allows users to login with their email address instead '
+            u'of specifying a separate login name. This also updates '
+            u'the login name of existing users, which may take a '
+            u'while on large sites. The login name is saved as '
+            u'lower case, but to be userfriendly it does not matter '
+            u'which case you use to login. When duplicates are found, '
+            u'saving this form will fail. You can use the '
+            u'@@migrate-to-emaillogin page to show the duplicates.'),
         default=False,
         required=False)
 
     use_uuid_as_userid = schema.Bool(
         title=_(u'Use UUID user ids'),
         description=_(
-            u"Use automatically generated UUIDs as user id for new users. "
-            u"When not turned on, the default is to use the same as the "
-            u"login name, or when using the email address as login name we "
-            u"generate a user id based on the fullname."),
+            u'Use automatically generated UUIDs as user id for new users. '
+            u'When not turned on, the default is to use the same as the '
+            u'login name, or when using the email address as login name we '
+            u'generate a user id based on the fullname.'),
         default=False,
         required=False)
 
@@ -1080,42 +1093,42 @@ class ISiteSchema(Interface):
     site_title = schema.TextLine(
         title=_(u'Site title'),
         description=_(
-            u"This shows up in the title bar of "
-            u"browsers and in syndication feeds."),
+            u'This shows up in the title bar of '
+            u'browsers and in syndication feeds.'),
         default=u'Plone site')
 
     site_logo = schema.ASCII(
-        title=_(u"Site Logo"),
-        description=_(u"This shows a custom Logo on your Site."),
+        title=_(u'Site Logo'),
+        description=_(u'This shows a custom Logo on your Site.'),
         required=False,
     )
 
     exposeDCMetaTags = schema.Bool(
-        title=_(u"Expose Dublin Core metadata"),
-        description=_(u"Exposes the Dublin Core properties as metatags."),
+        title=_(u'Expose Dublin Core metadata'),
+        description=_(u'Exposes the Dublin Core properties as metatags.'),
         default=False,
         required=False)
 
     enable_sitemap = schema.Bool(
-        title=_(u"Expose sitemap.xml.gz"),
-        description=_(
-            u"Exposes your content as a file "
-            u"according to the sitemaps.org standard. You "
-            u"can submit this to compliant search engines "
-            u"like Google, Yahoo and Microsoft. It allows "
-            u"these search engines to more intelligently "
-            u"crawl your site."),
+        title=_(u'Expose sitemap.xml.gz'),
+        description=_(
+            u'Exposes your content as a file '
+            u'according to the sitemaps.org standard. You '
+            u'can submit this to compliant search engines '
+            u'like Google, Yahoo and Microsoft. It allows '
+            u'these search engines to more intelligently '
+            u'crawl your site.'),
         default=False,
         required=False)
 
     webstats_js = schema.SourceText(
         title=_(u'JavaScript for web statistics support'),
         description=_(
-            u"For enabling web statistics support "
-            u"from external providers (for e.g. Google "
-            u"Analytics). Paste the code snippets provided. "
-            u"It will be included in the rendered HTML as "
-            u"entered near the end of the page."),
+            u'For enabling web statistics support '
+            u'from external providers (for e.g. Google '
+            u'Analytics). Paste the code snippets provided. '
+            u'It will be included in the rendered HTML as '
+            u'entered near the end of the page.'),
         default=u'',
         required=False)
 
@@ -1151,32 +1164,32 @@ class ISiteSchema(Interface):
     toolbar_position = schema.Choice(
         title=_(u'Position where the toolbar is displayed'),
         description=_(
-            u"It can be in the side vertical mode "
-            u"or in the top horizontal mode"),
+            u'It can be in the side vertical mode '
+            u'or in the top horizontal mode'),
         default=u'side',
         vocabulary=SimpleVocabulary([
-            SimpleTerm('side', 'side', _(u"Side")),
-            SimpleTerm('top', 'top', _(u"Top"))]),
+            SimpleTerm('side', 'side', _(u'Side')),
+            SimpleTerm('top', 'top', _(u'Top'))]),
         required=True)
 
     toolbar_logo = schema.TextLine(
-        title=_(u"Site based relative url for toolbar logo"),
+        title=_(u'Site based relative url for toolbar logo'),
         description=_(
-            u"This must be a relative url to portal root site. "
-            u"By default its /++plone++static/plone-toolbarlogo.svg"),
+            u'This must be a relative url to portal root site. '
+            u'By default its /++plone++static/plone-toolbarlogo.svg'),
         default=u'/++plone++static/plone-toolbarlogo.svg',
         required=False,
     )
 
     robots_txt = schema.SourceText(
-        title=_("robots.txt"),
-        description=_(
-            u"help_robots_txt",
-            default=u"robots.txt is read by search-engines to "
-                    u"determine how to index your site. "
-                    u"For details see <a href='http://www.robotstxt.org'>"
-                    u"http://www.robotstxt.org</a>. "
-                    u"'{portal_url}' is replaced by the sites url."),
+        title=_('robots.txt'),
+        description=_(
+            u'help_robots_txt',
+            default=u'robots.txt is read by search-engines to '
+                    u'determine how to index your site. '
+                    u'For details see <a href=\'http://www.robotstxt.org\'>'
+                    u'http://www.robotstxt.org</a>. '
+                    u'\'{portal_url}\' is replaced by the sites url.'),
         default=ROBOTS_TXT,
         required=False,
     )
@@ -1184,8 +1197,8 @@ class ISiteSchema(Interface):
     default_page = schema.List(
         title=_(u'Default page ids'),
         description=_(
-            u"Select which ids can act as fallback default pages for",
-            u"a container."
+            u'Select which ids can act as fallback default pages for',
+            u'a container.'
         ),
         required=True,
         default=[u'index_html',
@@ -1199,16 +1212,16 @@ class ISiteSchema(Interface):
     roles_allowed_to_add_keywords = schema.List(
         title=_(u'Roles that can add keywords'),
         description=_(
-            u"help_allow_roles_to_add_keywords",
-            default=u"Only the following roles can add new keywords "),
+            u'help_allow_roles_to_add_keywords',
+            default=u'Only the following roles can add new keywords '),
         required=False,
         default=[
-            u"Manager",
-            u"Site Administrator",
-            u"Reviewer",
+            u'Manager',
+            u'Site Administrator',
+            u'Reviewer',
         ],
         missing_value=[],
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"),
+        value_type=schema.Choice(vocabulary='plone.app.vocabularies.Roles'),
     )
 
 
@@ -1217,27 +1230,27 @@ class IDateAndTimeSchema(Interface):
     """
 
     portal_timezone = schema.Choice(
-        title=_(u"Portal default timezone"),
+        title=_(u'Portal default timezone'),
         description=_(
-            u"help_portal_timezone",
-            default=u"The timezone setting of the portal. Users can set "
-                    u"their own timezone, if available timezones are "
-                    u"defined."),
+            u'help_portal_timezone',
+            default=u'The timezone setting of the portal. Users can set '
+                    u'their own timezone, if available timezones are '
+                    u'defined.'),
         required=True,
         default=None,
-        vocabulary="plone.app.vocabularies.CommonTimezones")
+        vocabulary='plone.app.vocabularies.CommonTimezones')
 
     available_timezones = schema.List(
-        title=_(u"Available timezones"),
+        title=_(u'Available timezones'),
         description=_(
-            u"help_available_timezones",
-            default=u"The timezones, which should be available for the "
-                    u"portal. Can be set for users and events"),
+            u'help_available_timezones',
+            default=u'The timezones, which should be available for the '
+                    u'portal. Can be set for users and events'),
         required=False,
         default=[],
         missing_value=[],
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.Timezones"))
+            vocabulary='plone.app.vocabularies.Timezones'))
 
     first_weekday = schema.Choice(
         title=_(u'label_first_weekday', default=u'First weekday'),
@@ -1246,7 +1259,7 @@ class IDateAndTimeSchema(Interface):
             default=u'First day in the week.'),
         required=True,
         default=None,
-        vocabulary="plone.app.vocabularies.Weekdays")
+        vocabulary='plone.app.vocabularies.Weekdays')
 
 
 class ITypesSchema(Interface):
@@ -1256,10 +1269,10 @@ class ITypesSchema(Interface):
     types_use_view_action_in_listings = schema.List(
         title=_(u'Types which use the view action in listing views.'),
         description=_(
-            u"help_types_use_view_action_in_listings",
-            default=u"When clicking items in listing views, these "
-                    u"types will use the '/view' action instead of using "
-                    u"their default view."),
+            u'help_types_use_view_action_in_listings',
+            default=u'When clicking items in listing views, these '
+                    u'types will use the \'view\' action instead of using '
+                    u'their default view.'),
         required=False,
         default=[u'Image',
                  u'File'],
@@ -1268,21 +1281,21 @@ class ITypesSchema(Interface):
     )
 
     redirect_links = schema.Bool(
-        title=_(u"Redirect links"),
+        title=_(u'Redirect links'),
         description=_(
-            u"help_redirect_links",
-            default=u"When clicking on a Link type, should the user be "
-                    u"taken to the default view or be redirected to the "
-                    u"Link's URL?"),
+            u'help_redirect_links',
+            default=u'When clicking on a Link type, should the user be '
+                    u'taken to the default view or be redirected to the '
+                    u'Link\'s URL?'),
         required=False,
         default=True
     )
 
     default_page_types = schema.List(
-        title=_(u"Types that can be set as a default page"),
+        title=_(u'Types that can be set as a default page'),
         description=_(
-            u"The content types that should be available for selection "
-            u"when setting a default page."),
+            u'The content types that should be available for selection '
+            u'when setting a default page.'),
         required=False,
         missing_value=[],
         default=[
@@ -1301,20 +1314,22 @@ class IMailSchema(Interface):
             u'label_smtp_server',
             default=u'SMTP server'),
         description=_(
-            u"help_smtp_server",
-            default=u"The address of your local "
-                    u"SMTP (outgoing e-mail) server. Usually "
-                    u"'localhost', unless you use an "
-                    u"external server to send e-mail."),
+            u'help_smtp_server',
+            default=u'The address of your local '
+                    u'SMTP (outgoing e-mail) server. Usually '
+                    u'\'localhost\', unless you use an '
+                    u'external server to send e-mail.'),
         default=u'localhost',
         required=True)
 
     smtp_port = schema.Int(
         title=_(u'label_smtp_port',
                 default=u'SMTP port'),
-        description=_(u"help_smtp_port",
-                      default=u"The port of your local SMTP "
-                              u"(outgoing e-mail) server. Usually '25'."),
+        description=_(
+            u'help_smtp_port',
+            default=u'The port of your local SMTP '
+                    u'(outgoing e-mail) server. Usually \'25\'.'
+        ),
         default=25,
         required=True)
 
@@ -1323,10 +1338,10 @@ class IMailSchema(Interface):
             u'label_smtp_userid',
             default=u'ESMTP username'),
         description=_(
-            u"help_smtp_userid",
-            default=u"Username for authentication "
-                    u"to your e-mail server. Not required "
-                    u"unless you are using ESMTP."),
+            u'help_smtp_userid',
+            default=u'Username for authentication '
+                    u'to your e-mail server. Not required '
+                    u'unless you are using ESMTP.'),
         default=None,
         required=False)
 
@@ -1335,37 +1350,37 @@ class IMailSchema(Interface):
             u'label_smtp_pass',
             default=u'ESMTP password'),
         description=_(
-            u"help_smtp_pass",
-            default=u"The password for the ESMTP "
-                    u"user account."),
+            u'help_smtp_pass',
+            default=u'The password for the ESMTP '
+                    u'user account.'),
         default=None,
         required=False)
 
     email_from_name = schema.TextLine(
-        title=_(u"Site 'From' name"),
+        title=_(u'Site \'From\' name'),
         description=_(
-            u"Plone generates e-mail using "
-            u"this name as the e-mail "
-            u"sender."),
+            u'Plone generates e-mail using '
+            u'this name as the e-mail '
+            u'sender.'),
         default=None,
         required=True)
 
     email_from_address = schema.ASCIILine(
-        title=_(u"Site 'From' address"),
-        description=_(
-            u"Plone generates e-mail using "
-            u"this address as the e-mail "
-            u"return address. It is also "
-            u"used as the destination "
-            u"address for the site-wide "
-            u"contact form and the 'Send test "
-            u"e-mail' feature."),
+        title=_(u'Site \'From\' address'),
+        description=_(
+            u'Plone generates e-mail using '
+            u'this address as the e-mail '
+            u'return address. It is also '
+            u'used as the destination '
+            u'address for the site-wide '
+            u'contact form and the \'Send test '
+            u'e-mail\' feature.'),
         default=None,
         required=True)
 
     email_charset = schema.ASCIILine(
-        title=_(u"Email characterset"),
-        description=_(u'Characterset to use when sending emails.'),
+        title=_(u'E-mail characterset'),
+        description=_(u'Characterset to use when sending e-mails.'),
         default='utf-8',
         required=True,
     )
@@ -1376,28 +1391,28 @@ class IMarkupSchema(Interface):
     default_type = schema.Choice(
         title=_(u'Default format'),
         description=_(
-            u"Select the default format of textfields for newly "
-            u"created content objects."
+            u'Select the default format of textfields for newly '
+            u'created content objects.'
         ),
         default=u'text/html',
-        vocabulary="plone.app.vocabularies.AllowableContentTypes",
+        vocabulary='plone.app.vocabularies.AllowableContentTypes',
         required=True
     )
 
     allowed_types = schema.Tuple(
         title=_(u'Alternative formats'),
         description=_(
-            u"Select which formats are available for users as "
-            u"alternative to the default format. Note that if new "
-            u"formats are installed, they will be enabled for text "
-            u"fields by default unless explicitly turned off here "
-            u"or by the relevant installer."
+            u'Select which formats are available for users as '
+            u'alternative to the default format. Note that if new '
+            u'formats are installed, they will be enabled for text '
+            u'fields by default unless explicitly turned off here '
+            u'or by the relevant installer.'
         ),
         required=True,
         default=('text/html', 'text/x-web-textile'),
         missing_value=(),
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.AllowableContentTypes"
+            vocabulary='plone.app.vocabularies.AllowableContentTypes'
         )
     )
 
@@ -1407,26 +1422,26 @@ class IUserGroupsSettingsSchema(Interface):
     many_groups = schema.Bool(
         title=_(u'Many groups?'),
         description=_(
-            u"Determines if your Plone is optimized "
-            u"for small or large sites. In environments with a "
-            u"lot of groups it can be very slow or impossible "
-            u"to build a list all groups. This option tunes the "
-            u"user interface and behaviour of Plone for this "
-            u"case by allowing you to search for groups instead "
-            u"of listing all of them."),
+            u'Determines if your Plone is optimized '
+            u'for small or large sites. In environments with a '
+            u'lot of groups it can be very slow or impossible '
+            u'to build a list all groups. This option tunes the '
+            u'user interface and behaviour of Plone for this '
+            u'case by allowing you to search for groups instead '
+            u'of listing all of them.'),
         default=False
     )
 
     many_users = schema.Bool(
         title=_(u'Many users?'),
         description=_(
-            u"Determines if your Plone is optimized "
-            u"for small or large sites. In environments with a "
-            u"lot of users it can be very slow or impossible to "
-            u"build a list all users. This option tunes the user "
-            u"interface and behaviour of Plone for this case by "
-            u"allowing you to search for users instead of "
-            u"listing all of them."),
+            u'Determines if your Plone is optimized '
+            u'for small or large sites. In environments with a '
+            u'lot of users it can be very slow or impossible to '
+            u'build a list all users. This option tunes the user '
+            u'interface and behaviour of Plone for this case by '
+            u'allowing you to search for users instead of '
+            u'listing all of them.'),
         default=False
     )
 
@@ -1463,18 +1478,19 @@ class ISocialMediaSchema(Interface):
 class IImagingSchema(Interface):
     allowed_sizes = schema.List(
         title=_(u'Allowed image sizes'),
-        description=_(u'Specify all allowed maximum image dimensions, '
-                      'one per line. '
-                      'The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.'),
+        description=_(
+            u'Specify all allowed maximum image dimensions, one per line. The '
+            u'required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.'
+        ),
         value_type=schema.TextLine(),
         default=[
-            u"large 768:768",
-            u"preview 400:400",
-            u"mini 200:200",
-            u"thumb 128:128",
-            u"tile 64:64",
-            u"icon 32:32",
-            u"listing 16:16"],
+            u'large 768:768',
+            u'preview 400:400',
+            u'mini 200:200',
+            u'thumb 128:128',
+            u'tile 64:64',
+            u'icon 32:32',
+            u'listing 16:16'],
         missing_value=[],
         required=False,
     )
@@ -1550,7 +1566,7 @@ class IActionSchema(Interface):
 
     category = schema.Choice(
         title=_(u'Category'),
-        vocabulary="plone.app.vocabularies.PortalActionCategories",
+        vocabulary='plone.app.vocabularies.PortalActionCategories',
         required=True)
 
     title = schema.TextLine(
@@ -1562,39 +1578,43 @@ class IActionSchema(Interface):
         required=False)
 
     i18n_domain = schema.TextLine(
-        title=_(u"i18n_domain_heading", default=u'I18n domain'),
+        title=_(u'i18n_domain_heading', default=u'I18n domain'),
         default=u'plone',
         required=False)
 
     url_expr = schema.ASCIILine(
-        title=_(u"action_url_heading", default=u'Action URL'),
-        description=_(u"action_url_description",
-            default=u'An expression producing the called URL'),
+        title=_(u'action_url_heading', default=u'Action URL'),
+        description=_(
+            u'action_url_description',
+            default=u'An expression producing the called URL'
+        ),
         required=True)
 
     available_expr = schema.ASCIILine(
-        title=_(u"action_condition_heading", default=u'Condition'),
-        description=_(u"action_condition_description",
-            default=u'A boolean expression'),
+        title=_(u'action_condition_heading', default=u'Condition'),
+        description=_(
+            u'action_condition_description',
+            default=u'A boolean expression'
+        ),
         required=False)
 
     permissions = schema.List(
-        title=_(u"action_permissions_heading", default=u"Permissions"),
+        title=_(u'action_permissions_heading', default=u'Permissions'),
         required=True,
         default=['View'],
         missing_value=[],
         value_type=schema.Choice(
-            vocabulary="plone.app.vocabularies.Permissions"
+            vocabulary='plone.app.vocabularies.Permissions'
         )
     )
 
     visible = schema.Bool(
-        title=_(u"action_visibility_heading", default=u'Visible?'),
+        title=_(u'action_visibility_heading', default=u'Visible?'),
         default=True,
         required=False)
 
     position = schema.Int(
-        title=_(u"action_position_heading", default=u'Position'),
+        title=_(u'action_position_heading', default=u'Position'),
         default=1,
         min=1,
         required=True)
@@ -1604,7 +1624,7 @@ class INewActionSchema(Interface):
 
     category = schema.Choice(
         title=_(u'Category'),
-        vocabulary="plone.app.vocabularies.PortalActionCategories",
+        vocabulary='plone.app.vocabularies.PortalActionCategories',
         required=True)
 
     id = schema.ASCIILine(
diff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml
index 5cf58ef..cffe102 100644
--- a/Products/CMFPlone/profiles/default/metadata.xml
+++ b/Products/CMFPlone/profiles/default/metadata.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>5101</version>
+  <version>5102</version>
 </metadata>


