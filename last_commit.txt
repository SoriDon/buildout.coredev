Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-08-20T10:17:33+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ca9442542177d78bdcb672f4a0293997d61e4a3a

Add resolveuid to Link content type `remoteUrl` field. Remove the variable interpolation support since it was broken anyways. (#1198)

* Add resolveuid to Link content type remoteUrl field. Remove the variable interpolation support since it was broken anyways.

* Sor imports

* Fix docs and edge case

* Prove that if  is left unchanged

* Proof that support for variable interpolation in serialization is still present

* Update changelog

Files changed:
A news/1197.feature
A src/plone/restapi/deserializer/utils.py
A src/plone/restapi/serializer/utils.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py

b'diff --git a/news/1197.feature b/news/1197.feature\nnew file mode 100644\nindex 000000000..f26561877\n--- /dev/null\n+++ b/news/1197.feature\n@@ -0,0 +1,2 @@\n+Add resolveuid support to Link content type ``remoteUrl`` field.\n+[sneridagh]\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex f6be51b63..1459d8940 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -1,17 +1,14 @@\n-from Acquisition import aq_parent\n from collections import deque\n from copy import deepcopy\n from plone import api\n from plone.restapi.behaviors import IBlocks\n from plone.restapi.deserializer.dxfields import DefaultFieldDeserializer\n+from plone.restapi.deserializer.utils import path2uid\n from plone.restapi.interfaces import IBlockFieldDeserializationTransformer\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.schema import IJSONField\n-from plone.uuid.interfaces import IUUID\n-from plone.uuid.interfaces import IUUIDAware\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n-from zope.component import getMultiAdapter\n from zope.component import subscribers\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n@@ -32,42 +29,6 @@ def iterate_children(value):\n             queue.extend(child["children"] or [])\n \n \n-def path2uid(context, link):\n-    # unrestrictedTraverse requires a string on py3. see:\n-    # https://github.com/zopefoundation/Zope/issues/674\n-    if not link:\n-        return ""\n-    portal = getMultiAdapter(\n-        (context, context.REQUEST), name="plone_portal_state"\n-    ).portal()\n-    portal_url = portal.portal_url()\n-    portal_path = "/".join(portal.getPhysicalPath())\n-    path = link\n-    context_url = context.absolute_url()\n-    relative_up = len(context_url.split("/")) - len(portal_url.split("/"))\n-    if path.startswith(portal_url):\n-        path = path[len(portal_url) + 1 :]\n-    if not path.startswith(portal_path):\n-        path = "{portal_path}/{path}".format(\n-            portal_path=portal_path, path=path.lstrip("/")\n-        )\n-    obj = portal.unrestrictedTraverse(path, None)\n-    if obj is None or obj == portal:\n-        return link\n-    segments = path.split("/")\n-    suffix = ""\n-    while not IUUIDAware.providedBy(obj):\n-        obj = aq_parent(obj)\n-        suffix += "/" + segments.pop()\n-    # check if obj is wrong because of acquisition\n-    if "/".join(obj.getPhysicalPath()) != "/".join(segments):\n-        return link\n-    href = relative_up * "../" + "resolveuid/" + IUUID(obj)\n-    if suffix:\n-        href += suffix\n-    return href\n-\n-\n @implementer(IFieldDeserializer)\n @adapter(IJSONField, IBlocks, IBrowserRequest)\n class BlocksJSONFieldDeserializer(DefaultFieldDeserializer):\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 5aa122f28..8f75b3f20 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -4,6 +4,7 @@\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedField\n+from plone.restapi.deserializer.utils import path2uid\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.services.content.tus import TUSUpload\n from pytz import timezone\n@@ -27,7 +28,6 @@\n \n import codecs\n import dateutil\n-\n import html as html_parser\n \n \n@@ -78,10 +78,8 @@ def __call__(self, value):\n                 (self.context, self.context.REQUEST), name="plone_portal_state"\n             ).portal()\n             portal_url = portal.portal_url()\n-            if value.startswith(portal_url):\n-                value = "${{portal_url}}{path}".format(\n-                    path=value.replace(portal_url, "")\n-                )\n+            if value.startswith(portal_url) or value.startswith("/"):\n+                value = path2uid(context=self.context, link=value)\n         return value\n \n \ndiff --git a/src/plone/restapi/deserializer/utils.py b/src/plone/restapi/deserializer/utils.py\nnew file mode 100644\nindex 000000000..1c9190cb1\n--- /dev/null\n+++ b/src/plone/restapi/deserializer/utils.py\n@@ -0,0 +1,40 @@\n+from Acquisition import aq_parent\n+from plone.uuid.interfaces import IUUID\n+from plone.uuid.interfaces import IUUIDAware\n+from zope.component import getMultiAdapter\n+\n+\n+def path2uid(context, link):\n+    # unrestrictedTraverse requires a string on py3. see:\n+    # https://github.com/zopefoundation/Zope/issues/674\n+    if not link:\n+        return ""\n+    portal = getMultiAdapter(\n+        (context, context.REQUEST), name="plone_portal_state"\n+    ).portal()\n+    portal_url = portal.portal_url()\n+    portal_path = "/".join(portal.getPhysicalPath())\n+    path = link\n+    context_url = context.absolute_url()\n+    relative_up = len(context_url.split("/")) - len(portal_url.split("/"))\n+    if path.startswith(portal_url):\n+        path = path[len(portal_url) + 1 :]\n+    if not path.startswith(portal_path):\n+        path = "{portal_path}/{path}".format(\n+            portal_path=portal_path, path=path.lstrip("/")\n+        )\n+    obj = portal.unrestrictedTraverse(path, None)\n+    if obj is None or obj == portal:\n+        return link\n+    segments = path.split("/")\n+    suffix = ""\n+    while not IUUIDAware.providedBy(obj):\n+        obj = aq_parent(obj)\n+        suffix += "/" + segments.pop()\n+    # check if obj is wrong because of acquisition\n+    if "/".join(obj.getPhysicalPath()) != "/".join(segments):\n+        return link\n+    href = relative_up * "../" + "resolveuid/" + IUUID(obj)\n+    if suffix:\n+        href += suffix\n+    return href\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex 67f5a65e8..c85750d46 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -1,18 +1,15 @@\n from copy import deepcopy\n-from plone.outputfilters.browser.resolveuid import uuidToObject\n-from plone.outputfilters.browser.resolveuid import uuidToURL\n from plone.restapi.behaviors import IBlocks\n from plone.restapi.deserializer.blocks import SlateBlockTransformer\n from plone.restapi.deserializer.blocks import transform_links\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import IFieldSerializer\n-from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n+from plone.restapi.serializer.utils import uid_to_url\n from plone.schema import IJSONField\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n-from zope.component import queryMultiAdapter\n from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -20,34 +17,6 @@\n \n import copy\n import os\n-import re\n-\n-\n-RESOLVEUID_RE = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n-\n-\n-def uid_to_url(path):\n-    if not path:\n-        return ""\n-    match = RESOLVEUID_RE.match(path)\n-    if match is None:\n-        return path\n-\n-    uid, suffix = match.groups()\n-    href = uuidToURL(uid)\n-    if href is None:\n-        return path\n-    if suffix:\n-        href += "/" + suffix\n-    else:\n-        target_object = uuidToObject(uid)\n-        if target_object:\n-            adapter = queryMultiAdapter(\n-                (target_object, target_object.REQUEST), IObjectPrimaryFieldTarget\n-            )\n-            if adapter and adapter():\n-                href = adapter()\n-    return href\n \n \n @adapter(IJSONField, IBlocks, Interface)\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex afadc6e02..de04b387e 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -1,5 +1,4 @@\n from AccessControl import getSecurityManager\n-from Products.CMFCore.permissions import ModifyPortalContent\n from plone.app.contenttypes.interfaces import ILink\n from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.textfield.interfaces import IRichText\n@@ -11,8 +10,10 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n-from zope.component import getMultiAdapter\n+from plone.restapi.serializer.utils import uid_to_url\n+from Products.CMFCore.permissions import ModifyPortalContent\n from zope.component import adapter\n+from zope.component import getMultiAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import IChoice\n@@ -23,6 +24,7 @@\n \n import logging\n \n+\n log = logging.getLogger(__name__)\n \n \n@@ -139,6 +141,12 @@ def __call__(self):\n         if self.field.getName() != "remoteUrl":\n             return super().__call__()\n         value = self.get_value()\n+\n+        # Expect that all internal links will have resolveuid\n+        if value and "resolveuid" in value:\n+            return uid_to_url(value)\n+\n+        # Fallback in case we still have a variable in there\n         path = replace_link_variables_by_paths(context=self.context, url=value)\n         portal = getMultiAdapter(\n             (self.context, self.context.REQUEST), name="plone_portal_state"\ndiff --git a/src/plone/restapi/serializer/utils.py b/src/plone/restapi/serializer/utils.py\nnew file mode 100644\nindex 000000000..15b37a41a\n--- /dev/null\n+++ b/src/plone/restapi/serializer/utils.py\n@@ -0,0 +1,33 @@\n+from plone.outputfilters.browser.resolveuid import uuidToObject\n+from plone.outputfilters.browser.resolveuid import uuidToURL\n+from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n+from zope.component import queryMultiAdapter\n+\n+import re\n+\n+\n+RESOLVEUID_RE = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n+\n+\n+def uid_to_url(path):\n+    if not path:\n+        return ""\n+    match = RESOLVEUID_RE.match(path)\n+    if match is None:\n+        return path\n+\n+    uid, suffix = match.groups()\n+    href = uuidToURL(uid)\n+    if href is None:\n+        return path\n+    if suffix:\n+        href += "/" + suffix\n+    else:\n+        target_object = uuidToObject(uid)\n+        if target_object:\n+            adapter = queryMultiAdapter(\n+                (target_object, target_object.REQUEST), IObjectPrimaryFieldTarget\n+            )\n+            if adapter and adapter():\n+                href = adapter()\n+    return href\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 9f0ca1c8b..e89ba0cc3 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry", \n     "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1800", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1775", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   }, \n   "items": [\n@@ -434,5 +434,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ], \n-  "items_total": 1823\n+  "items_total": 1779\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex ffa060cd8..32b1ed3cf 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -9,6 +9,7 @@\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.dxtypes import IDXTestDocumentSchema\n+from plone.uuid.interfaces import IUUID\n from pytz import timezone\n from zope.component import getMultiAdapter\n from zope.schema import Field\n@@ -601,14 +602,21 @@ def test_textline_deserializer_for_links_convert_internal_links(self):\n                 field = schema.get("remoteUrl")\n                 break\n         deserializer = getMultiAdapter((field, link, self.request), IFieldDeserializer)\n+        doc_uuid = IUUID(self.portal.doc1)\n \n         self.assertEqual(\n             "http://www.plone.com", deserializer(value="http://www.plone.com")\n         )\n         self.assertEqual(\n-            "${portal_url}/doc1", deserializer(value="http://nohost/plone/doc1")\n+            f"../resolveuid/{doc_uuid}", deserializer(value="http://nohost/plone/doc1")\n         )\n \n+        # I want to save internal URLs as resolveuid\n+        self.assertEqual(f"../resolveuid/{doc_uuid}", deserializer(value="/doc1"))\n+\n+        # If ${portal_url} is present, leave it as it is\n+        self.assertEqual("${portal_url}/doc1", deserializer(value="${portal_url}/doc1"))\n+\n         # for other contents/fields does nothing\n         value = self.deserialize("test_textline_field", "http://www.plone.com")\n         self.assertEqual("http://www.plone.com", value)\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex e789be04d..151dbeaff 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -3,7 +3,6 @@\n from datetime import time\n from datetime import timedelta\n from decimal import Decimal\n-from unittest.mock import patch\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import iterSchemata\n from plone.namedfile.file import NamedBlobFile\n@@ -14,7 +13,9 @@\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.scale import storage\n+from plone.uuid.interfaces import IUUID\n from unittest import TestCase\n+from unittest.mock import patch\n from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n from zope.interface.verify import verifyClass\n@@ -332,11 +333,17 @@ def test_remoteurl_field_in_links_get_converted(self):\n         dm.set("http://www.plone.com")\n         self.assertEqual(serializer(), "http://www.plone.com")\n \n+        doc_uuid = IUUID(self.portal.doc1)\n+\n+        dm.set(f"../resolveuid/{doc_uuid}")\n+        self.assertEqual(serializer(), self.portal.doc1.absolute_url())\n+\n+        # Support for variable interpolation is still present\n         dm.set("${portal_url}/doc1")\n         self.assertEqual(serializer(), self.portal.doc1.absolute_url())\n \n-        dm.set("${portal_url}/doc2")\n-        self.assertEqual(serializer(), "/doc2")\n+        dm.set("/doc1")\n+        self.assertEqual(serializer(), "/doc1")\n \n         dm.set("/doc2")\n         self.assertEqual(serializer(), "/doc2")\n'

