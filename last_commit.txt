Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-08-17T18:28:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/5d5f327f55329ae8542a690fd545f118ffbdf166

Remove Zope 4 BBB and add comment, also: black, isort.

Files changed:
A news/3609.bugfix
M Products/CMFPlone/traversal.py

b'diff --git a/Products/CMFPlone/traversal.py b/Products/CMFPlone/traversal.py\nindex 8b56473dc4..cc19aac322 100644\n--- a/Products/CMFPlone/traversal.py\n+++ b/Products/CMFPlone/traversal.py\n@@ -1,40 +1,33 @@\n-from plone.resource.traversal import ResourceTraverser\n-from zope.component import queryUtility\n+from plone.base.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.interfaces import IUniqueResourceRequest\n-from plone.base.interfaces.resources import (\n-    OVERRIDE_RESOURCE_DIRECTORY_NAME)\n+from plone.resource.traversal import ResourceTraverser\n from Products.PageTemplates.Expressions import getEngine\n from Products.PageTemplates.Expressions import getTrustedEngine\n+from Products.PageTemplates.interfaces import IZopeAwareEngine\n+from zope.component import queryUtility\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.pagetemplate import engine as zpt_engine\n \n \n-try:\n-    # This was introduced in Zope 4.5.\n-    # We try not to make this a hard dependency yet.\n-    from Products.PageTemplates.interfaces import IZopeAwareEngine\n-except ImportError:\n-    # Zope 4.4-\n-    class IZopeAwareEngine(Interface):\n-        pass\n-\n-\n class PloneBundlesTraverser(ResourceTraverser):\n+    # the name is missleading - it is used not only for bundles.\n+    # in fact in Plone 6 bundles are no longer used, despite that the traverser\n+    # might be in use for other use cases.\n \n-    name = \'plone\'\n+    name = "plone"\n \n     def traverse(self, name, remaining):\n         # in case its not a request get the default one\n         req = getRequest()\n-        if not req or \'PATH_INFO\' not in req.environ:\n+        if not req or "PATH_INFO" not in req.environ:\n             return super().traverse(name, remaining)\n \n-        resource_path = req.environ[\'PATH_INFO\'].split(\'++plone++\')[-1]\n+        resource_path = req.environ["PATH_INFO"].split("++plone++")[-1]\n         try:\n-            resource_name, resource_filepath = resource_path.split(\'/\', 1)\n+            resource_name, resource_filepath = resource_path.split("/", 1)\n         except ValueError:\n             # Not the path info / url that we expected.\n             # So the request is not for a resource,\n@@ -44,15 +37,15 @@ def traverse(self, name, remaining):\n \n         # If we have additional traversers in the path we should not use them\n         # in the file lookup\n-        more_traversal = (resource_filepath.startswith(\'++\') or\n-                          resource_filepath.startswith(\'@@\'))\n-        if more_traversal:\n-            resource_filepath = resource_filepath.split(\'/\')[-1]\n+        if resource_filepath.startswith("++") or resource_filepath.startswith("@@"):\n+            resource_filepath = resource_filepath.split("/")[-1]\n \n         persistentDirectory = queryUtility(IResourceDirectory, name="persistent")\n         directory = None\n-        if (persistentDirectory is not None and\n-                OVERRIDE_RESOURCE_DIRECTORY_NAME in persistentDirectory):\n+        if (\n+            persistentDirectory is not None\n+            and OVERRIDE_RESOURCE_DIRECTORY_NAME in persistentDirectory\n+        ):\n             container = persistentDirectory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n             if resource_name in container:\n                 directory = container[resource_name]\ndiff --git a/news/3609.bugfix b/news/3609.bugfix\nnew file mode 100644\nindex 0000000000..47ffdc293f\n--- /dev/null\n+++ b/news/3609.bugfix\n@@ -0,0 +1,2 @@\n+In traversal.py remoe a Zope 4 BBB code, add a comment about bundle traverser and apply black.isort on the file.\n+[jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-08-18T08:38:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1db9d3c0cfd6d7480c155d7eb2d620264c5f62e8

Merge branch 'master' into cleanup-traversalpy

Files changed:
A news/3610.bugfix
M Products/CMFPlone/__init__.py

b'diff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex 207ba2cdec..4edd033abe 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -1,10 +1,12 @@\n from App.ImageFile import ImageFile\n \n import os\n-import sys\n import pkg_resources\n+import sys\n+import warnings\n import zope.deferredimport\n \n+\n __version__ = pkg_resources.require("Products.CMFPlone")[0].version\n \n \n@@ -12,22 +14,25 @@\n this_module = sys.modules[__name__]\n _marker = []\n \n-ADD_CONTENT_PERMISSION = \'Add portal content\'\n-misc_ = {\'plone_icon\': ImageFile(\n-    os.path.join(\'skins\', \'plone_images\', \'logoIcon.png\'),\n-    cmfplone_globals)}\n+ADD_CONTENT_PERMISSION = "Add portal content"\n+misc_ = {\n+    "plone_icon": ImageFile(\n+        os.path.join("skins", "plone_images", "logoIcon.png"), cmfplone_globals\n+    )\n+}\n \n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from plone.base instead (to be removed in Plone 7)",\n-    PloneMessageFactory=\'plone.base:PloneMessageFactory\',\n-    PloneLocalesMessageFactory=\'plone.base:PloneMessageFactory\',\n+    PloneMessageFactory="plone.base:PloneMessageFactory",\n+    PloneLocalesMessageFactory="plone.base:PloneMessageFactory",\n )\n zope.deferredimport.deprecated(\n     "Import from plone.app.discussion.interfaces instead (to be removed in Plone 7)",\n-    DISCUSSION_ANNOTATION_KEY=\'plone.app.discussion.interfaces:DISCUSSION_ANNOTATION_KEY\',\n+    DISCUSSION_ANNOTATION_KEY="plone.app.discussion.interfaces:DISCUSSION_ANNOTATION_KEY",\n )\n \n+\n def initialize(context):\n \n     # Stuff has been moved from module level to this method for a\n@@ -36,119 +41,117 @@ def initialize(context):\n     # For test authors (and people who use parts of Plone only)\n     # it does speed up import *significantly*.\n \n-    from AccessControl import ModuleSecurityInfo\n     from AccessControl import allow_class\n     from AccessControl import allow_module\n+    from AccessControl import ModuleSecurityInfo\n \n     # protect OFS.ObjectManager\n-    ModuleSecurityInfo(\'OFS.ObjectManager\').setDefaultAccess(0)\n-    ModuleSecurityInfo(\'OFS.ObjectManager\').declareObjectPrivate()\n-    ModuleSecurityInfo(\'OFS.ObjectManager\').declarePublic(\n-        \'BeforeDeleteException\')\n+    ModuleSecurityInfo("OFS.ObjectManager").setDefaultAccess(0)\n+    ModuleSecurityInfo("OFS.ObjectManager").declareObjectPrivate()\n+    ModuleSecurityInfo("OFS.ObjectManager").declarePublic("BeforeDeleteException")\n \n     # allow logging\n-    ModuleSecurityInfo(\'logging\').declarePublic(\'getLogger\')\n+    ModuleSecurityInfo("logging").declarePublic("getLogger")\n     from logging import Logger\n+\n     allow_class(Logger)\n \n     # various small utils functions\n     # added for unescaping view names in urls when finding selected action\n-    ModuleSecurityInfo(\'urllib\').declarePublic(\'unquote\')\n+    ModuleSecurityInfo("urllib").declarePublic("unquote")\n \n-    allow_module(\'Products.CMFPlone.utils\')\n+    allow_module("Products.CMFPlone.utils")\n \n     # For content_status_modify\n     from Products.CMFCore.WorkflowCore import ObjectDeleted\n     from Products.CMFCore.WorkflowCore import ObjectMoved\n     from Products.CMFCore.WorkflowCore import WorkflowException\n-    ModuleSecurityInfo(\n-        \'Products.CMFCore.WorkflowCore\').declarePublic(\'ObjectDeleted\')\n-    ModuleSecurityInfo(\n-        \'Products.CMFCore.WorkflowCore\').declarePublic(\'ObjectMoved\')\n-    ModuleSecurityInfo(\n-        \'Products.CMFCore.WorkflowCore\').declarePublic(\'WorkflowException\')\n+\n+    ModuleSecurityInfo("Products.CMFCore.WorkflowCore").declarePublic("ObjectDeleted")\n+    ModuleSecurityInfo("Products.CMFCore.WorkflowCore").declarePublic("ObjectMoved")\n+    ModuleSecurityInfo("Products.CMFCore.WorkflowCore").declarePublic(\n+        "WorkflowException"\n+    )\n     allow_class(ObjectDeleted)\n     allow_class(ObjectMoved)\n     allow_class(WorkflowException)\n \n     # bbb - remove in Plone 7\n-    from Products.CMFPlone.PloneBatch import Batch\n+    with warnings.catch_warnings():\n+        warnings.filterwarnings("ignore", category=DeprecationWarning)\n+        from Products.CMFPlone.PloneBatch import Batch\n     allow_class(Batch)\n \n     # Make Batch available at module level\n     this_module.Batch = Batch\n \n-    ModuleSecurityInfo(\'StringIO\').declarePublic(\'StringIO\')\n+    ModuleSecurityInfo("StringIO").declarePublic("StringIO")\n \n     # Make Unauthorized importable TTW\n-    ModuleSecurityInfo(\'AccessControl\').declarePublic(\'Unauthorized\')\n+    ModuleSecurityInfo("AccessControl").declarePublic("Unauthorized")\n \n     # Make Forbidden importable TTW\n-    ModuleSecurityInfo(\'zExceptions\').declarePublic(\'Forbidden\')\n+    ModuleSecurityInfo("zExceptions").declarePublic("Forbidden")\n \n     # Make ConflictError importable TTW\n-    ModuleSecurityInfo(\'ZODB.POSException\').declarePublic(\'ConflictError\')\n+    ModuleSecurityInfo("ZODB.POSException").declarePublic("ConflictError")\n \n     # Make ZCTextIndex ParseError importable TTW\n-    ModuleSecurityInfo(\'Products.ZCTextIndex.ParseTree\') \\\n-        .declarePublic(\'ParseError\')\n+    ModuleSecurityInfo("Products.ZCTextIndex.ParseTree").declarePublic("ParseError")\n \n     # Make DateTimeError importable TTW\n-    ModuleSecurityInfo(\'DateTime.interfaces\').declarePublic(\'DateTimeError\')\n-    ModuleSecurityInfo(\'DateTime.interfaces\').declarePublic(\'SyntaxError\')\n+    ModuleSecurityInfo("DateTime.interfaces").declarePublic("DateTimeError")\n+    ModuleSecurityInfo("DateTime.interfaces").declarePublic("SyntaxError")\n \n     # BBB support for DateTime < 3\n-    ModuleSecurityInfo(\'DateTime.DateTime\').declarePublic(\'DateTimeError\')\n-    ModuleSecurityInfo(\'DateTime.DateTime\').declarePublic(\'SyntaxError\')\n+    ModuleSecurityInfo("DateTime.DateTime").declarePublic("DateTimeError")\n+    ModuleSecurityInfo("DateTime.DateTime").declarePublic("SyntaxError")\n \n     # Make CopyError importable TTW\n-    ModuleSecurityInfo(\'OFS.CopySupport\').declarePublic(\'CopyError\')\n+    ModuleSecurityInfo("OFS.CopySupport").declarePublic("CopyError")\n \n     # Make AllowSendto importable TTW\n-    ModuleSecurityInfo(\'Products.CMFPlone.PloneTool\') \\\n-        .declarePublic(\'AllowSendto\')\n+    ModuleSecurityInfo("Products.CMFPlone.PloneTool").declarePublic("AllowSendto")\n \n     # Make ZCatalog\'s mergeResults importable TTW\n-    ModuleSecurityInfo(\'Products.ZCatalog.Catalog\') \\\n-        .declarePublic(\'mergeResults\')\n+    ModuleSecurityInfo("Products.ZCatalog.Catalog").declarePublic("mergeResults")\n \n     # Make the navtree constructs available TTW\n-    allow_module(\'Products.CMFPlone.browser.navtree\')\n+    allow_module("Products.CMFPlone.browser.navtree")\n \n     # Allow access to the exception in the folder_delete script\n     from OFS.ObjectManager import BeforeDeleteException\n-    allow_module(\'OFS.ObjectManager\')\n+\n+    allow_module("OFS.ObjectManager")\n     allow_class(BeforeDeleteException)\n \n     # Make cgi.escape available TTW\n-    ModuleSecurityInfo(\'cgi\').declarePublic(\'escape\')\n+    ModuleSecurityInfo("cgi").declarePublic("escape")\n \n     # Make warnings available TTW\n-    ModuleSecurityInfo(\'warnings\').declarePublic(\'warn\')\n+    ModuleSecurityInfo("warnings").declarePublic("warn")\n \n     # Apply monkey patches\n-    from Products.CMFPlone import patches  # noqa\n-\n-    # Register unicode splitter w/ ZCTextIndex\n-    # pipeline registry\n-    from Products.CMFPlone import UnicodeSplitter  # noqa\n-\n     # CMFCore tools\n     from Products.CMFCore import CachingPolicyManager\n \n     # Plone tools\n-    from Products.CMFPlone import PloneTool\n+    # Register unicode splitter w/ ZCTextIndex\n+    # pipeline registry\n+    from Products.CMFPlone import ActionsTool\n+    from Products.CMFPlone import CatalogTool\n     from Products.CMFPlone import MigrationTool\n+    from Products.CMFPlone import patches  # noqa\n     from Products.CMFPlone import PloneControlPanel\n-    from Products.CMFPlone import WorkflowTool\n-    from Products.CMFPlone import URLTool\n-    from Products.CMFPlone import RegistrationTool\n+    from Products.CMFPlone import PloneTool\n     from Products.CMFPlone import PropertiesTool\n-    from Products.CMFPlone import ActionsTool\n-    from Products.CMFPlone import TypesTool\n-    from Products.CMFPlone import CatalogTool\n+    from Products.CMFPlone import RegistrationTool\n     from Products.CMFPlone import SkinsTool\n     from Products.CMFPlone import TranslationServiceTool\n+    from Products.CMFPlone import TypesTool\n+    from Products.CMFPlone import UnicodeSplitter  # noqa\n+    from Products.CMFPlone import URLTool\n+    from Products.CMFPlone import WorkflowTool\n \n     tools = (\n         PloneTool.PloneTool,\n@@ -171,32 +174,32 @@ def initialize(context):\n \n     # Register tools and content\n     ToolInit(\n-        \'Plone Tool\',\n+        "Plone Tool",\n         tools=tools,\n-        icon=\'tool.gif\',\n+        icon="tool.gif",\n     ).initialize(context)\n \n-\n     from AccessControl.Permissions import view_management_screens\n-    from Products.CMFPlone.Portal import PloneSite\n     from Products.CMFPlone.factory import zmi_constructor\n+    from Products.CMFPlone.Portal import PloneSite\n+\n     context.registerClass(\n         instance_class=PloneSite,\n         permission=view_management_screens,\n-        constructors=(zmi_constructor, ),\n+        constructors=(zmi_constructor,),\n     )\n \n     from plone.folder import nogopip\n+\n     context.registerClass(\n         nogopip.GopipIndex,\n-        permission=\'Add Pluggable Index\',\n-        constructors=(nogopip.manage_addGopipForm,\n-                      nogopip.manage_addGopipIndex),\n-        icon=\'index.gif\',\n-        visibility=None\n+        permission="Add Pluggable Index",\n+        constructors=(nogopip.manage_addGopipForm, nogopip.manage_addGopipIndex),\n+        icon="index.gif",\n+        visibility=None,\n     )\n \n+\n # Apply early monkey patches.  For these patches, it is too late if we do this\n # in the initialize method.\n from Products.CMFPlone import earlypatches  # noqa\n-\ndiff --git a/news/3610.bugfix b/news/3610.bugfix\nnew file mode 100644\nindex 0000000000..009d99d62a\n--- /dev/null\n+++ b/news/3610.bugfix\n@@ -0,0 +1,2 @@\n+Supress warning of intentional deprecated import for BBB.\n+[jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-08-18T15:31:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/15c57e6c90565d62869cc574f887891e4e4eed5d

Merge branch 'master' into cleanup-traversalpy

Files changed:
A news/3601.bugfix
M Products/CMFPlone/controlpanel/browser/actions.pt

b'diff --git a/Products/CMFPlone/controlpanel/browser/actions.pt b/Products/CMFPlone/controlpanel/browser/actions.pt\nindex ed8c89431a..fae8e140f2 100644\n--- a/Products/CMFPlone/controlpanel/browser/actions.pt\n+++ b/Products/CMFPlone/controlpanel/browser/actions.pt\n@@ -34,7 +34,7 @@\n               class="list-group-item bg-transparent d-flex align-items-center justify-content-between">\n             <span><span tal:replace="repeat/action/number" />. <span tal:replace="action/title" i18n:translate="" /></span>\n             <form action="@@actions-controlpanel"\n-                  class="plone-action-${action/id}"\n+                  class="plone-action-${action/id} flex-shrink-0"\n                   method="POST">\n               <input type="hidden" name="actionid"\n                 tal:attributes="value action/id" />\ndiff --git a/news/3601.bugfix b/news/3601.bugfix\nnew file mode 100644\nindex 0000000000..32921649a6\n--- /dev/null\n+++ b/news/3601.bugfix\n@@ -0,0 +1,2 @@\n+Fix visual issue with long action name in @@actions-controlpanel.\n+[petschki]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-08-18T17:16:50+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/70b29edc261da9199d5de43e2632f87bbb051938

Merge branch 'master' into cleanup-traversalpy

Files changed:
A news/3614-2.bugfix
A news/3614.bugfix
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/TranslationServiceTool.py
M Products/CMFPlone/browser/author.py
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/browser/ploneview.py
M Products/CMFPlone/browser/sendto.py
M Products/CMFPlone/browser/templates/main_template.pt
M Products/CMFPlone/controlpanel/browser/relations.py
M Products/CMFPlone/controlpanel/events.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_relations.py
M Products/CMFPlone/patches/csrf.py
M Products/CMFPlone/patterns/view.py
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testPloneView.py
M Products/CMFPlone/tests/test_PloneTool.py
M Products/CMFPlone/utils.py

b'diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 87f6c09683..f3939235be 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -11,7 +11,23 @@\n from email.utils import getaddresses\n from OFS.ObjectManager import bad_id\n from OFS.SimpleItem import SimpleItem\n+from plone.base.defaultpage import check_default_page_via_view\n+from plone.base.defaultpage import get_default_page_via_view\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import IPloneTool\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n+from plone.base.utils import _marker\n+from plone.base.utils import base_hasattr\n+from plone.base.utils import get_empty_title\n+from plone.base.utils import pretty_title_or_id\n+from plone.base.utils import safe_callable\n+from plone.base.utils import safe_hasattr\n from plone.base.utils import safe_text\n+from plone.base.utils import transaction_note\n+from plone.protect import CheckAuthenticator\n+from plone.protect import protect\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IDublinCore\n from Products.CMFCore.interfaces import IMutableDublinCore\n@@ -25,21 +41,10 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n from Products.CMFPlone import utils\n-from plone.base.defaultpage import check_default_page_via_view\n-from plone.base.defaultpage import get_default_page_via_view\n from Products.CMFPlone.events import ReorderedEvent\n-from plone.base.interfaces import INonStructuralFolder\n-from plone.base.interfaces import IPloneTool\n-from plone.base.interfaces import ISearchSchema\n-from plone.base.interfaces import ISecuritySchema\n-from plone.base.interfaces import ISiteSchema\n from Products.CMFPlone.log import log\n-from Products.CMFPlone.log import log_deprecated\n from Products.CMFPlone.log import log_exc\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n-from Products.CMFPlone.utils import base_hasattr\n-from Products.CMFPlone.utils import safe_hasattr\n-from Products.CMFPlone.utils import transaction_note\n from Products.statusmessages.interfaces import IStatusMessage\n from urllib import parse\n from ZODB.POSException import ConflictError\n@@ -53,9 +58,9 @@\n import re\n import sys\n import transaction\n+import warnings\n \n \n-_marker = utils._marker\n _icons = {}\n \n CEILING_DATE = DateTime(2500, 0)  # never expires\n@@ -100,6 +105,7 @@ class PloneTool(PloneBaseTool, UniqueObject, SimpleItem):\n     field_prefix = \'field_\'\n \n     @security.protected(ManageUsers)\n+    @protect(CheckAuthenticator)\n     def setMemberProperties(self, member, REQUEST=None, **properties):\n         pas = getToolByName(self, \'acl_users\')\n         if safe_hasattr(member, \'getId\'):\n@@ -341,6 +347,7 @@ def getReviewStateTitleFor(self, obj):\n         return None\n \n     @security.protected(ManagePortal)\n+    @protect(CheckAuthenticator)\n     def changeOwnershipOf(self, object, userid, recursive=0, REQUEST=None):\n         """Changes the ownership of an object."""\n         membership = getToolByName(self, \'portal_membership\')\n@@ -734,6 +741,7 @@ def isStructuralFolder(self, obj):\n         )\n \n     @security.public\n+    @protect(CheckAuthenticator)\n     def acquireLocalRoles(self, obj, status=1, REQUEST=None):\n         # If status is 1, allow acquisition of local roles (regular\n         # behaviour).\n@@ -937,14 +945,14 @@ def reindexOnReorder(self, parent):\n     def getEmptyTitle(self, translated=True):\n         # Returns string to be used for objects with no title or id.\n         # Note: no docstring please, to avoid reflected XSS.\n-        return utils.getEmptyTitle(self, translated)\n+        return get_empty_title(self, translated)\n \n     @security.public\n     def pretty_title_or_id(self, obj, empty_value=_marker):\n         # Return the best possible title or id of an item, regardless\n         # of whether obj is a catalog brain or an object, but returning an\n         # empty title marker if the id is not set (i.e. it\'s auto-generated).\n-        return utils.pretty_title_or_id(self, obj, empty_value=empty_value)\n+        return pretty_title_or_id(self, obj, empty_value=empty_value)\n \n     @security.public\n     def getMethodAliases(self, typeInfo):\n@@ -952,19 +960,24 @@ def getMethodAliases(self, typeInfo):\n         # FTI. If there are no method aliases (i.e. this FTI doesn\'t support\n         # it), return None.\n         getMethodAliases = getattr(typeInfo, \'getMethodAliases\', None)\n-        if getMethodAliases is not None \\\n-                and utils.safe_callable(getMethodAliases):\n+        if getMethodAliases is not None and safe_callable(getMethodAliases):\n             return getMethodAliases()\n-        else:\n-            return None\n+        return None\n \n     # This is public because we don\'t know what permissions the user\n     # has on the objects to be deleted.  The restrictedTraverse and\n     # manage_delObjects calls should handle permission checks for us.\n     @security.public\n+    @protect(CheckAuthenticator)\n+    @postonly\n     def deleteObjectsByPaths(self, paths, handle_errors=True, REQUEST=None):\n-        log_deprecated("deleteObjectsByPaths is deprecated, you should use. "\n-                       "plone.api.content.delete. This method no longer does link integrity checks")  # noqa\n+        # we need to use Python warnings direct instead of @deprecate,\n+        # otherwise plone.protect fails.\n+        warnings.warn(\n+            "Use plone.api.content.delete instead of deleteObjectsByPaths. "\n+            "This method no longer does link integrity checks. Will be removed in Plone 7",\n+            DeprecationWarning\n+        )\n         failure = {}\n         success = []\n         # use the portal for traversal in case we have relative paths\n@@ -990,9 +1003,9 @@ def deleteObjectsByPaths(self, paths, handle_errors=True, REQUEST=None):\n                     raise\n         transaction_note(\'Deleted %s\' % (\', \'.join(success)))\n         return success, failure\n-    deleteObjectsByPaths = postonly(deleteObjectsByPaths)\n \n     @security.public\n+    @protect(CheckAuthenticator)\n     def renameObjectsByPaths(self, paths, new_ids, new_titles,\n                              handle_errors=True, REQUEST=None):\n         failure = {}\ndiff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py\nindex fa17f700ad..976f7d3f04 100644\n--- a/Products/CMFPlone/RegistrationTool.py\n+++ b/Products/CMFPlone/RegistrationTool.py\n@@ -12,6 +12,8 @@\n from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import ISecuritySchema\n from plone.base.permissions import ManagePortal\n+from plone.protect import CheckAuthenticator\n+from plone.protect import protect\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.permissions import AddPortalMember\n@@ -453,6 +455,7 @@ def registeredNotify(self, new_member_id):\n     security.declareProtected(ManagePortal, \'editMember\')\n \n     @postonly\n+    @protect(CheckAuthenticator)\n     def editMember(self, member_id, properties=None, password=None,\n                    roles=None, domains=None, REQUEST=None):\n         """ Edit a user\'s properties and security settings\ndiff --git a/Products/CMFPlone/TranslationServiceTool.py b/Products/CMFPlone/TranslationServiceTool.py\nindex 086af2ae6a..82854b270f 100644\n--- a/Products/CMFPlone/TranslationServiceTool.py\n+++ b/Products/CMFPlone/TranslationServiceTool.py\n@@ -4,20 +4,20 @@\n """\n \n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_get\n from AccessControl.class_init import InitializeClass\n-from .i18nl10n import monthname_english\n-from .i18nl10n import monthname_msgid\n-from .i18nl10n import monthname_msgid_abbr\n-from .i18nl10n import ulocalized_time\n-from .i18nl10n import weekdayname_english\n-from .i18nl10n import weekdayname_msgid\n-from .i18nl10n import weekdayname_msgid_abbr\n-from .i18nl10n import weekdayname_msgid_short\n+from Acquisition import aq_get\n from OFS.SimpleItem import SimpleItem\n from plone.base import PloneLocalesMessageFactory as PLMF\n-from Products.CMFCore.utils import UniqueObject\n+from plone.base.i18nl10n import monthname_english\n+from plone.base.i18nl10n import monthname_msgid\n+from plone.base.i18nl10n import monthname_msgid_abbr\n+from plone.base.i18nl10n import ulocalized_time\n+from plone.base.i18nl10n import weekdayname_english\n+from plone.base.i18nl10n import weekdayname_msgid\n+from plone.base.i18nl10n import weekdayname_msgid_abbr\n+from plone.base.i18nl10n import weekdayname_msgid_short\n from plone.base.interfaces import ITranslationServiceTool\n+from Products.CMFCore.utils import UniqueObject\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n from zope.i18n import translate\n from zope.interface import implementer\ndiff --git a/Products/CMFPlone/browser/author.py b/Products/CMFPlone/browser/author.py\nindex 05d92acabf..741d365606 100644\n--- a/Products/CMFPlone/browser/author.py\n+++ b/Products/CMFPlone/browser/author.py\n@@ -1,27 +1,21 @@\n+from .interfaces import IAuthorFeedbackForm\n from AccessControl import Unauthorized\n-\n-from Products.CMFCore.interfaces import IPropertiesTool\n-from Products.CMFPlone import PloneMessageFactory as _\n+from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import ISecuritySchema\n from plone.base.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.utils import getToolByName\n-from Products.CMFPlone.utils import pretty_title_or_id\n+from plone.base.utils import pretty_title_or_id\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.interfaces import IPropertiesTool\n+from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n from Products.MailHost.interfaces import IMailHost\n from Products.statusmessages.interfaces import IStatusMessage\n-\n-from ZODB.POSException import ConflictError\n-\n-from .interfaces import IAuthorFeedbackForm\n-\n-from plone.registry.interfaces import IRegistry\n from urllib.parse import quote_plus\n-\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n from z3c.form.interfaces import HIDDEN_MODE\n-\n+from ZODB.POSException import ConflictError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import implementer\n@@ -29,6 +23,7 @@\n \n import logging\n \n+\n logger = logging.getLogger("Plone")\n \n \ndiff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex eb76b1d18d..e6799e20b7 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -3,16 +3,18 @@\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.navtree import buildFolderTree\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.defaultpage import check_default_page_via_view\n+from plone.base.interfaces import IHideFromBreadcrumbs\n+from plone.base.interfaces import INavigationSchema\n+from plone.base.utils import pretty_title_or_id\n+from plone.base.utils import safe_callable\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from Products.CMFPlone.browser.interfaces import INavigationBreadcrumbs\n from Products.CMFPlone.browser.interfaces import INavigationTabs\n from Products.CMFPlone.browser.interfaces import ISiteMap\n from Products.CMFPlone.browser.navtree import SitemapQueryBuilder\n-from plone.base.defaultpage import check_default_page_via_view\n-from plone.base.interfaces import IHideFromBreadcrumbs\n-from plone.base.interfaces import INavigationSchema\n+from Products.CMFPlone.utils import parent\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -32,7 +34,7 @@ def get_id(item):\n     if not item:\n         return None\n     getId = getattr(item, "getId")\n-    if not utils.safe_callable(getId):\n+    if not safe_callable(getId):\n         # Looks like a brain\n         return getId\n     return getId()\n@@ -72,7 +74,7 @@ def _getNavQuery(self):\n             INavigationSchema, prefix="plone", check=False\n         )\n         customQuery = getattr(self.context, "getCustomNavQuery", False)\n-        if customQuery is not None and utils.safe_callable(customQuery):\n+        if customQuery is not None and safe_callable(customQuery):\n             query = customQuery()\n         else:\n             query = {}\n@@ -150,7 +152,7 @@ def _get_url(item):\n                 continue\n             cid, item_url = _get_url(item)\n             data = {\n-                "name": utils.pretty_title_or_id(context, item),\n+                "name": pretty_title_or_id(context, item),\n                 "id": item.getId,\n                 "url": item_url,\n                 "description": item.Description,\n@@ -176,7 +178,7 @@ def breadcrumbs(self):\n         # Check to see if the current page is a folder default view, if so\n         # get breadcrumbs from the parent folder\n         if check_default_page_via_view(context, self.request):\n-            currentPath = "/".join(utils.parent(context).getPhysicalPath())\n+            currentPath = "/".join(parent(context).getPhysicalPath())\n         else:\n             currentPath = "/".join(context.getPhysicalPath())\n         query["path"] = {"query": currentPath, "navtree": 1, "depth": 0}\n@@ -201,7 +203,7 @@ def breadcrumbs(self):\n \n             cid, item_url = get_view_url(item)\n             data = {\n-                "Title": utils.pretty_title_or_id(context, item),\n+                "Title": pretty_title_or_id(context, item),\n                 "absolute_url": item_url,\n             }\n             result.append(data)\n@@ -213,7 +215,7 @@ class PhysicalNavigationBreadcrumbs(BrowserView):\n     def breadcrumbs(self):\n         context = aq_inner(self.context)\n         request = self.request\n-        container = utils.parent(context)\n+        container = parent(context)\n \n         name, item_url = get_view_url(context)\n \n@@ -221,7 +223,7 @@ def breadcrumbs(self):\n             return (\n                 {\n                     "absolute_url": item_url,\n-                    "Title": utils.pretty_title_or_id(context, context),\n+                    "Title": pretty_title_or_id(context, context),\n                 },\n             )\n \n@@ -242,7 +244,7 @@ def breadcrumbs(self):\n         ) and not rootPath.startswith(itemPath):\n             entry = {\n                 "absolute_url": item_url,\n-                "Title": utils.pretty_title_or_id(context, context),\n+                "Title": pretty_title_or_id(context, context),\n             }\n             self.customize_entry(entry, context)\n             base += (entry,)\ndiff --git a/Products/CMFPlone/browser/ploneview.py b/Products/CMFPlone/browser/ploneview.py\nindex 43dab697fb..4b4c5fe297 100644\n--- a/Products/CMFPlone/browser/ploneview.py\n+++ b/Products/CMFPlone/browser/ploneview.py\n@@ -1,14 +1,18 @@\n from Acquisition import aq_inner\n+from plone.base.utils import human_readable_size\n+from plone.base.utils import safe_text\n from plone.memoize.view import memoize\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n from Products.CMFPlone.browser.interfaces import IPlone\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n+from zope.deprecation import deprecate\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.size import byteDisplay\n \n+\n _marker = []\n \n \n@@ -23,73 +27,77 @@ def uniqueItemIndex(self, pos=0):\n         return utils.RealIndexIterator(pos=pos)\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n-        """Convert time to localized time\n-        """\n+        """Convert time to localized time"""\n         context = aq_inner(self.context)\n-        util = getToolByName(context, \'translation_service\')\n-        return util.ulocalized_time(time, long_format, time_only,\n-                                    context=context, domain=\'plonelocales\',\n-                                    request=self.request)\n+        util = getToolByName(context, "translation_service")\n+        return util.ulocalized_time(\n+            time,\n+            long_format,\n+            time_only,\n+            context=context,\n+            domain="plonelocales",\n+            request=self.request,\n+        )\n \n     def toLocalizedSize(self, size):\n-        """Convert an integer to a localized size string\n-        """\n+        """Convert an integer to a localized size string"""\n         return translate(byteDisplay(size), context=self.request)\n \n     # This can\'t be request-memoized, because it won\'t necessarily remain\n     # valid across traversals. For example, you may get tabs on an error\n     # message.\n     def showToolbar(self):\n-        """Determine if the editable border should be shown\n-        """\n+        """Determine if the editable border should be shown"""\n         request = self.request\n-        if \'disable_border\' in request or \'disable_toolbar\' in request:\n+        if "disable_border" in request or "disable_toolbar" in request:\n             return False\n-        if \'enable_border\' in request or \'enable_toolbar\' in request:\n+        if "enable_border" in request or "enable_toolbar" in request:\n             return True\n \n         context = aq_inner(self.context)\n \n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n         checkPerm = portal_membership.checkPermission\n \n-        if (checkPerm(\'Modify portal content\', context) or\n-            checkPerm(\'Add portal content\', context) or\n-                checkPerm(\'Review portal content\', context)):\n+        if (\n+            checkPerm("Modify portal content", context)\n+            or checkPerm("Add portal content", context)\n+            or checkPerm("Review portal content", context)\n+        ):\n             return True\n \n         if portal_membership.isAnonymousUser():\n             return False\n \n-        context_state = getMultiAdapter(\n-            (context, request),\n-            name="plone_context_state"\n-        )\n+        context_state = getMultiAdapter((context, request), name="plone_context_state")\n         actions = context_state.actions\n \n-        if actions(\'workflow\', max=1):\n+        if actions("workflow", max=1):\n             return True\n \n-        if actions(\'batch\', max=1):\n+        if actions("batch", max=1):\n             return True\n \n-        for action in actions(\'object\'):\n-            if action.get(\'id\', \'\') != \'view\':\n+        for action in actions("object"):\n+            if action.get("id", "") != "view":\n                 return True\n \n         template_id = None\n-        if \'PUBLISHED\' in request:\n-            if getattr(request[\'PUBLISHED\'], \'getId\', None):\n-                template_id = request[\'PUBLISHED\'].getId()\n+        if "PUBLISHED" in request:\n+            if getattr(request["PUBLISHED"], "getId", None):\n+                template_id = request["PUBLISHED"].getId()\n \n         idActions = {}\n-        for obj in actions(\'object\') + actions(\'folder\'):\n-            idActions[obj.get(\'id\', \'\')] = 1\n-\n-        if \'edit\' in idActions:\n-            if (template_id in idActions or\n-                template_id in [\'synPropertiesForm\', \'folder_contents\',\n-                                \'folder_listing\', \'listing_view\']):\n+        for obj in actions("object") + actions("folder"):\n+            idActions[obj.get("id", "")] = 1\n+\n+        if "edit" in idActions:\n+            if template_id in idActions or template_id in [\n+                "synPropertiesForm",\n+                "folder_contents",\n+                "folder_listing",\n+                "listing_view",\n+            ]:\n                 return True\n \n         # Check to see if the user is able to add content\n@@ -100,118 +108,152 @@ def showToolbar(self):\n         return False\n \n     def normalizeString(self, text):\n-        """Normalizes a title to an id.\n-        """\n+        """Normalizes a title to an id."""\n         return utils.normalizeString(text, context=self)\n \n-    def cropText(self, text, length, ellipsis=\'...\'):\n-        """Crop text on a word boundary\n-        """\n+    def cropText(self, text, length, ellipsis="..."):\n+        """Crop text on a word boundary"""\n         if not length:\n             return text\n         converted = False\n         if not isinstance(text, str):\n-            text = utils.safe_text(text)\n+            text = safe_text(text)\n             converted = True\n         if len(text) > length:\n             text = text[:length]\n-            l = text.rfind(\' \')\n+            l = text.rfind(" ")\n             if l > length / 2:\n-                text = text[:l + 1]\n+                text = text[: l + 1]\n             text += ellipsis\n         if converted:\n             # encode back from unicode\n-            text = text.encode(\'utf-8\')\n+            text = text.encode("utf-8")\n         return text\n \n-    def site_encoding(self):\n-        return \'utf-8\'\n+    @property\n+    def human_readable_size(self):\n+        return human_readable_size\n \n-    # Deprecated in favour of @@plone_context_state and @@plone_portal_state\n+    @deprecate("Site encoding is fixed to utf8. Will be removed in Plone 7")\n+    def site_encoding(self):\n+        return "utf-8"\n \n+    @deprecate(\n+        "Use method current_page_url from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     def getCurrentUrl(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.current_page_url()\n \n+    @deprecate(\n+        "Use method is_default_page from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     def isDefaultPageInFolder(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.is_default_page()\n \n+    @deprecate(\n+        "Use method is_structural_folder from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     def isStructuralFolder(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.is_structural_folder()\n \n+    @deprecate(\n+        "Use method navigation_root_path from @@plone_portal_state instead. Will be removed in Plone 7"\n+    )\n     def navigationRootPath(self):\n         portal_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_portal_state\')\n+            (aq_inner(self.context), self.request), name="plone_portal_state"\n+        )\n         return portal_state.navigation_root_path()\n \n+    @deprecate(\n+        "Use method navigation_root_url from @@plone_portal_state instead. Will be removed in Plone 7"\n+    )\n     def navigationRootUrl(self):\n         portal_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_portal_state\')\n+            (aq_inner(self.context), self.request), name="plone_portal_state"\n+        )\n         return portal_state.navigation_root_url()\n \n+    @deprecate(\n+        "Use method parent from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     def getParentObject(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.parent()\n \n+    @deprecate(\n+        "Use method folder from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     def getCurrentFolder(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.folder()\n \n+    @deprecate(\n+        "Use method folder().absolute_url() from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     def getCurrentFolderUrl(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.folder().absolute_url()\n \n+    @deprecate(\n+        "Use method canonical_object_url from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     @memoize\n     def getCurrentObjectUrl(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.canonical_object_url()\n \n+    @deprecate(\n+        "Use method is_structural_folder from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     @memoize\n     def isFolderOrFolderDefaultPage(self):\n         state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return state.is_structural_folder() or state.is_default_page()\n \n+    @deprecate(\n+        "Use method is_portal_root from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     @memoize\n     def isPortalOrPortalDefaultPage(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.is_portal_root()\n \n+    @deprecate(\n+        "Use method view_template_id from @@plone_context_state instead. Will be removed in Plone 7"\n+    )\n     @memoize\n     def getViewTemplateId(self):\n         context_state = getMultiAdapter(\n-            (aq_inner(self.context), self.request),\n-            name=\'plone_context_state\')\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         return context_state.view_template_id()\n \n+    @deprecate("Use method __call__ from @@plone_patterns_settings instead")\n     @memoize\n     def patterns_settings(self):\n         context = aq_inner(self.context)\n         return getMultiAdapter(\n-            (context, self.request),\n-            name=\'plone_patterns_settings\')()\n-\n-    @property\n-    def human_readable_size(self):\n-        return utils.human_readable_size\n+            (context, self.request), name="plone_patterns_settings"\n+        )()\ndiff --git a/Products/CMFPlone/browser/sendto.py b/Products/CMFPlone/browser/sendto.py\nindex 384d7d5ff3..864dc1f27a 100644\n--- a/Products/CMFPlone/browser/sendto.py\n+++ b/Products/CMFPlone/browser/sendto.py\n@@ -1,23 +1,18 @@\n-from Products.CMFPlone import PloneMessageFactory as _\n+from .interfaces import ISendToForm\n+from plone.base import PloneMessageFactory as _\n from plone.base.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.utils import pretty_title_or_id\n+from plone.base.utils import pretty_title_or_id\n+from plone.registry.interfaces import IRegistry\n+from plone.z3cform import layout\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.MailHost.interfaces import IMailHost\n from Products.statusmessages.interfaces import IStatusMessage\n-\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n from ZODB.POSException import ConflictError\n-\n-from plone.registry.interfaces import IRegistry\n-from plone.z3cform import layout\n-\n from zope.component import getUtility\n \n-from z3c.form import form\n-from z3c.form import field\n-from z3c.form import button\n-\n-from .interfaces import ISendToForm\n-\n import logging\n \n logger = logging.getLogger("Plone")\ndiff --git a/Products/CMFPlone/browser/templates/main_template.pt b/Products/CMFPlone/browser/templates/main_template.pt\nindex 50c5be24f0..9bffd9a9bb 100644\n--- a/Products/CMFPlone/browser/templates/main_template.pt\n+++ b/Products/CMFPlone/browser/templates/main_template.pt\n@@ -49,7 +49,7 @@\n                     body_class python:plone_layout.bodyClass(template, view);"\n         tal:attributes="class body_class;\n                         dir python:isRTL and \'rtl\' or \'ltr\';\n-                        python:plone_view.patterns_settings()"\n+                        python:context.restrictedTraverse(\'@@plone_patterns_settings\')();"\n         id="visual-portal-wrapper">\n \n     <div tal:replace="structure provider:plone.toolbar" />\ndiff --git a/Products/CMFPlone/controlpanel/browser/relations.py b/Products/CMFPlone/controlpanel/browser/relations.py\nindex 03aa2141dc..97a3ce2038 100644\n--- a/Products/CMFPlone/controlpanel/browser/relations.py\n+++ b/Products/CMFPlone/controlpanel/browser/relations.py\n@@ -1,7 +1,7 @@\n from collections import defaultdict\n from operator import itemgetter\n+from plone.base import PloneMessageFactory as _\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.relationhelper import get_relations_stats\n from Products.CMFPlone.relationhelper import rebuild_relations\n from Products.Five.browser import BrowserView\ndiff --git a/Products/CMFPlone/controlpanel/events.py b/Products/CMFPlone/controlpanel/events.py\nindex fdbced0807..4d4d34df0f 100644\n--- a/Products/CMFPlone/controlpanel/events.py\n+++ b/Products/CMFPlone/controlpanel/events.py\n@@ -1,17 +1,17 @@\n-from Products.CMFCore.ActionInformation import Action\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.controlpanel.utils import migrate_to_email_login\n-from Products.CMFPlone.controlpanel.utils import migrate_from_email_login\n+from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import IConfigurationChangedEvent\n from plone.base.interfaces import ISecuritySchema\n-from Products.CMFPlone.utils import safe_hasattr\n+from plone.base.utils import safe_hasattr\n from plone.registry.interfaces import IRecordModifiedEvent\n+from Products.CMFCore.ActionInformation import Action\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.controlpanel.utils import migrate_from_email_login\n+from Products.CMFPlone.controlpanel.utils import migrate_to_email_login\n from zope.component import adapter\n from zope.component import queryUtility\n+from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.ramcache.interfaces.ram import IRAMCache\n-from zope.component.hooks import getSite\n \n \n @implementer(IConfigurationChangedEvent)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 6bfd822039..abf44c5cdd 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -2,11 +2,11 @@\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.base.batch import Batch\n from plone.testing.zope import Browser\n from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n-from Products.CMFPlone.utils import safe_bytes\n+from plone.base.utils import safe_bytes\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_relations.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_relations.py\nindex a99d71950a..dd9a2b76ed 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_relations.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_relations.py\n@@ -1,9 +1,9 @@\n-import unittest\n-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.testing.zope import Browser\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n+import unittest\n+\n \n class RelationsControlPanelFunctionalTest(unittest.TestCase):\n     """Test that links and actions in controlpanel starts with to absolute portal url."""\ndiff --git a/Products/CMFPlone/patches/csrf.py b/Products/CMFPlone/patches/csrf.py\nindex 4c484fffcf..e93f68d5a0 100644\n--- a/Products/CMFPlone/patches/csrf.py\n+++ b/Products/CMFPlone/patches/csrf.py\n@@ -7,28 +7,18 @@\n def applyPatches():\n     """ apply csrf-protection decorator to all relevant methods """\n \n-    from Products.CMFPlone.PloneTool import PloneTool as PT\n-    PT.setMemberProperties = patch(PT.setMemberProperties)\n-    PT.changeOwnershipOf = patch(PT.changeOwnershipOf)\n-    PT.acquireLocalRoles = patch(PT.acquireLocalRoles)\n-    PT.deleteObjectsByPaths = patch(PT.deleteObjectsByPaths)\n-    PT.renameObjectsByPaths = patch(PT.renameObjectsByPaths)\n+    from Products.PlonePAS.tools.membership import MembershipTool as PMT\n+    PMT.setPassword = patch(PMT.setPassword)\n \n     from Products.CMFCore.MembershipTool import MembershipTool as MT\n-    from Products.PlonePAS.tools.membership import MembershipTool as PMT\n     MT.setPassword = patch(MT.setPassword)\n-    PMT.setPassword = patch(PMT.setPassword)\n     MT.setRoleMapping = patch(MT.setRoleMapping)\n     MT.deleteMemberArea = patch(MT.deleteMemberArea)\n     MT.setLocalRoles = patch(MT.setLocalRoles)\n     MT.deleteLocalRoles = patch(MT.deleteLocalRoles)\n     MT.deleteMembers = patch(MT.deleteMembers)\n \n-    try:\n-        # XXX CMF 2.3 compatibility, but does it still make sense?\n-        from Products.CMFCore.MemberDataTool import MemberAdapter as MD\n-    except ImportError:\n-        from Products.CMFCore.MemberDataTool import MemberData as MD\n+    from Products.CMFCore.MemberDataTool import MemberAdapter as MD\n     original_setProperties = MD.setProperties\n \n     def setProperties(self, properties=None, REQUEST=None, **kw):\n@@ -37,9 +27,6 @@ def setProperties(self, properties=None, REQUEST=None, **kw):\n     setProperties.__doc__ = original_setProperties.__doc__\n     MD.setProperties = patch(setProperties)\n \n-    from Products.CMFPlone.RegistrationTool import RegistrationTool\n-    RegistrationTool.editMember = patch(RegistrationTool.editMember)\n-\n     from Products.PlonePAS.tools.groupdata import GroupData\n     GroupData.addMember = patch(GroupData.addMember)\n     GroupData.removeMember = patch(GroupData.removeMember)\ndiff --git a/Products/CMFPlone/patterns/view.py b/Products/CMFPlone/patterns/view.py\nindex 5f7b8e311b..138f740343 100644\n--- a/Products/CMFPlone/patterns/view.py\n+++ b/Products/CMFPlone/patterns/view.py\n@@ -1,6 +1,7 @@\n # This module delivers the global patterns settings\n-from plone.registry.interfaces import IRegistry\n from plone.base.interfaces import IPatternsSettings\n+from plone.memoize.view import memoize\n+from plone.registry.interfaces import IRegistry\n from zope.component import getAdapters\n from zope.component import getMultiAdapter\n from zope.component import getUtility\ndiff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py\nindex ace5f9a80e..65ad4d8943 100644\n--- a/Products/CMFPlone/tests/testBrowserDefault.py\n+++ b/Products/CMFPlone/tests/testBrowserDefault.py\n@@ -1,15 +1,15 @@\n from Acquisition import aq_base\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import setRoles\n+from plone.base.utils import safe_text\n+from plone.base.utils import unrestricted_construct_instance\n from plone.namedfile.file import NamedBlobFile\n from plone.registry.interfaces import IRegistry\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n-from Products.CMFPlone.utils import _createObjectByType\n-from plone.base.utils import safe_text\n from zope.component import getUtility\n \n import difflib\n@@ -17,6 +17,7 @@\n import transaction\n import unittest\n \n+\n RE_REMOVE_DOCCONT = re.compile(r\'\\s*href="http://.*?#content"\')\n RE_REMOVE_SKIPNAV = re.compile(r\'\\s*href="http://.*?#portal-globalnav-wrapper"\')\n RE_REMOVE_TABS = re.compile(r\'<div id="portal-header".*?</nav>\', re.S)\n@@ -42,9 +43,9 @@ def setUp(self):\n         from plone.protect import auto\n         auto.CSRF_DISABLED = True\n \n-        _createObjectByType(\'Folder\', self.portal, \'folder\')\n-        _createObjectByType(\'Document\', self.portal, \'document\')\n-        _createObjectByType(\'File\', self.portal, \'file\')\n+        unrestricted_construct_instance(\'Folder\', self.portal, \'folder\')\n+        unrestricted_construct_instance(\'Document\', self.portal, \'document\')\n+        unrestricted_construct_instance(\'File\', self.portal, \'file\')\n         self.portal.file.file = NamedBlobFile(\'foo\', \'text/plain\', \'foo.txt\')\n         transaction.commit()\n \ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 459d21d01e..86a8d2b365 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -1,33 +1,32 @@\n from Acquisition import Implicit\n from plone.app.testing import SITE_OWNER_NAME\n-from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.utils import getToolByName\n from plone.base.interfaces import IReorderedEvent\n from plone.base.interfaces import ISearchSchema\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.tests import PloneTestCase\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.interface import Interface\n \n+\n default_user = PloneTestCase.default_user\n portal_name = PloneTestCase.portal_name\n \n \n class DummyTitle(Implicit):\n-\n     def Title(self):\n         # Should just return \'portal_catalog\'\n-        tool = getToolByName(self, \'portal_catalog\')\n+        tool = getToolByName(self, "portal_catalog")\n         # Use implicit acquisition even, the horror\n         tool = self.portal_catalog\n         return tool.getId()\n \n     def getId(self):\n-        return \'foobar\'\n+        return "foobar"\n \n \n class TestPloneTool(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n \n@@ -35,99 +34,102 @@ def testvalidateSingleEmailAddress(self):\n         # Any RFC 822 email address allowed, but address list must fail\n         val = self.utils.validateSingleEmailAddress\n         validInputs = (\n-            \'user@example.org\',\n-            \'user@host.example.org\',\n-            \'m@t.nu\',\n-            \'USER@EXAMPLE.ORG\',\n-            \'USER@HOST.EXAMPLE.ORG\',\n-            \'USER@hoST.Example.Org\',\n+            "user@example.org",\n+            "user@host.example.org",\n+            "m@t.nu",\n+            "USER@EXAMPLE.ORG",\n+            "USER@HOST.EXAMPLE.ORG",\n+            "USER@hoST.Example.Org",\n         )\n         invalidInputs = (\n-            \'user@example.org, user2@example.org\',  # only single address allowed\n-            \'user@example.org,user2@example.org\',\n-            \'user@example.org\\n\\nfoo\',  # double new lines\n-            \'user@example.org\\n\\rfoo\',\n-            \'user@example.org\\r\\nfoo\',\n-            \'user@example.org\\r\\rfoo\',\n+            "user@example.org, user2@example.org",  # only single address allowed\n+            "user@example.org,user2@example.org",\n+            "user@example.org\\n\\nfoo",  # double new lines\n+            "user@example.org\\n\\rfoo",\n+            "user@example.org\\r\\nfoo",\n+            "user@example.org\\r\\rfoo",\n             # only single address allowed, even if given one per line\n-            \'user@example.org\\nfoo@example.org\',\n-            \'user@example.org\\nBcc: user@example.org\',\n-            \'user@example.org\\nCc: user@example.org\',\n-            \'user@example.org\\nSubject: Spam\',\n+            "user@example.org\\nfoo@example.org",\n+            "user@example.org\\nBcc: user@example.org",\n+            "user@example.org\\nCc: user@example.org",\n+            "user@example.org\\nSubject: Spam",\n             # and a full email (note the missing ,!)\n-            \'From: foo@example.org\\n\'\n-            \'To: bar@example.org, spam@example.org\\n\'\n-            \'Cc: egg@example.org\\n\'\n-            \'Subject: Spam me plenty\\n\'\n-            \'Spam Spam Spam\\n\'\n-            \'I hate spam\',\n+            "From: foo@example.org\\n"\n+            "To: bar@example.org, spam@example.org\\n"\n+            "Cc: egg@example.org\\n"\n+            "Subject: Spam me plenty\\n"\n+            "Spam Spam Spam\\n"\n+            "I hate spam",\n         )\n         for address in validInputs:\n-            self.assertTrue(val(address), \'%s should validate\' % address)\n+            self.assertTrue(val(address), "%s should validate" % address)\n         for address in invalidInputs:\n-            self.assertFalse(val(address), \'%s should fail\' % address)\n+            self.assertFalse(val(address), "%s should fail" % address)\n \n     def testvalidateEmailAddresses(self):\n         # Any RFC 822 email address allowed and address list allowed\n         val = self.utils.validateEmailAddresses\n \n         validInputs = (\n-            \'user@example.org\',\n-            \'user@example.org,\\n user2@example.org\',\n-            \'user@example.org\\n user2@example.org\',  # omitting comma is ok\n-            \'USER@EXAMPLE.ORG,\\n User2@Example.Org\',\n+            "user@example.org",\n+            "user@example.org,\\n user2@example.org",\n+            "user@example.org\\n user2@example.org",  # omitting comma is ok\n+            "USER@EXAMPLE.ORG,\\n User2@Example.Org",\n         )\n         invalidInputs = (\n-            \'user@example.org\\n\\nfoo\',  # double new lines\n-            \'user@example.org\\n\\rfoo\',\n-            \'user@example.org\\r\\nfoo\',\n-            \'user@example.org\\r\\rfoo\',\n+            "user@example.org\\n\\nfoo",  # double new lines\n+            "user@example.org\\n\\rfoo",\n+            "user@example.org\\r\\nfoo",\n+            "user@example.org\\r\\rfoo",\n         )\n         for address in validInputs:\n-            self.assertTrue(val(address), \'%s should validate\' % address)\n+            self.assertTrue(val(address), "%s should validate" % address)\n         for address in invalidInputs:\n-            self.assertFalse(val(address), \'%s should fail\' % address)\n+            self.assertFalse(val(address), "%s should fail" % address)\n \n     def testNormalizeStringPunctuation(self):\n         # Punctuation and spacing is removed and replaced by \'-\'\n-        self.assertEqual(self.utils.normalizeString("a string with spaces"),\n-                         \'a-string-with-spaces\')\n-        self.assertEqual(self.utils.normalizeString("p.u,n;c(t)u!a@t#i$o%n"),\n-                         \'p-u-n-c-t-u-a-t-i-o-n\')\n+        self.assertEqual(\n+            self.utils.normalizeString("a string with spaces"), "a-string-with-spaces"\n+        )\n+        self.assertEqual(\n+            self.utils.normalizeString("p.u,n;c(t)u!a@t#i$o%n"), "p-u-n-c-t-u-a-t-i-o-n"\n+        )\n \n     def testNormalizeStringFileExtensions(self):\n         # The plone tool version uses the id normalizer, so it doesn\'t\n         # preservce file extensions. Use the file name normalizer from\n         # plone.i18n if you need the behavior.\n-        self.assertEqual(self.utils.normalizeString("this is a file.gif"),\n-                         \'this-is-a-file-gif\')\n-        self.assertEqual(self.utils.normalizeString("its. also. a file.html"),\n-                         \'its-also-a-file-html\')\n+        self.assertEqual(\n+            self.utils.normalizeString("this is a file.gif"), "this-is-a-file-gif"\n+        )\n+        self.assertEqual(\n+            self.utils.normalizeString("its. also. a file.html"), "its-also-a-file-html"\n+        )\n \n     def testNormalizeStringIgnoredCharacters(self):\n         # Some characters should be ignored\n-        self.assertEqual(self.utils.normalizeString("test\'test"), \'testtest\')\n+        self.assertEqual(self.utils.normalizeString("test\'test"), "testtest")\n \n     def testNormalizeStringObject(self):\n         # Objects should be converted to strings using repr()\n-        self.assertEqual(self.utils.normalizeString(None), \'none\')\n-        self.assertEqual(self.utils.normalizeString(True), \'true\')\n-        self.assertEqual(self.utils.normalizeString(False), \'false\')\n+        self.assertEqual(self.utils.normalizeString(None), "none")\n+        self.assertEqual(self.utils.normalizeString(True), "true")\n+        self.assertEqual(self.utils.normalizeString(False), "false")\n \n     def testNormalizeStringDangerousCharsInExtension(self):\n         # Punctuation and spacing is removed and replaced by \'-\'\n-        self.assertEqual(self.utils.normalizeString("A String.a#b"),\n-                         \'a-string-a-b\')\n+        self.assertEqual(self.utils.normalizeString("A String.a#b"), "a-string-a-b")\n \n     def testTypesToList(self):\n         # Make sure typesToList() returns the expected types\n         wl = self.utils.typesToList()\n-        self.assertTrue(\'Folder\' in wl)\n-        self.assertTrue(\'Document\' in wl)\n-        self.assertFalse(\'ATReferenceCriterion\' in wl)\n+        self.assertTrue("Folder" in wl)\n+        self.assertTrue("Document" in wl)\n+        self.assertFalse("ATReferenceCriterion" in wl)\n \n     def testGetUserFriendlyTypes(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         types = set(ttool.keys())\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n@@ -137,15 +139,17 @@ def testGetUserFriendlyTypes(self):\n         # so we filter that out.\n         blacklistedTypes = {t for t in blacklistedTypes if t in types}\n         # No black listed types should be returned.\n-        self.assertEqual([t for t in self.utils.getUserFriendlyTypes()\n-                          if t in blacklistedTypes], [])\n-        self.assertEqual(len(self.utils.getUserFriendlyTypes()),\n-                         len(types) - len(blacklistedTypes))\n+        self.assertEqual(\n+            [t for t in self.utils.getUserFriendlyTypes() if t in blacklistedTypes], []\n+        )\n+        self.assertEqual(\n+            len(self.utils.getUserFriendlyTypes()), len(types) - len(blacklistedTypes)\n+        )\n         # Non-existing types should be filtered out.\n-        self.assertEqual(self.utils.getUserFriendlyTypes(\n-            [\'File\']), [\'File\'])\n-        self.assertEqual(self.utils.getUserFriendlyTypes(\n-            [\'File\', \'Non Existing Type\']), [\'File\'])\n+        self.assertEqual(self.utils.getUserFriendlyTypes(["File"]), ["File"])\n+        self.assertEqual(\n+            self.utils.getUserFriendlyTypes(["File", "Non Existing Type"]), ["File"]\n+        )\n \n     def testReindexOnReorder(self):\n         gsm = getGlobalSiteManager()\n@@ -153,6 +157,7 @@ def testReindexOnReorder(self):\n \n         def my_handler(obj, event):\n             reordered_parents.append(obj)\n+\n         gsm.registerHandler(my_handler, (Interface, IReorderedEvent))\n \n         try:\n@@ -163,16 +168,15 @@ def my_handler(obj, event):\n \n \n class TestOwnershipStuff(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n         self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'new_owner\', \'secret\', [\'Member\'], [])\n-        self.folder.invokeFactory(\'Folder\', \'folder1\')\n+        self.membership.addMember("new_owner", "secret", ["Member"], [])\n+        self.folder.invokeFactory("Folder", "folder1")\n         self.folder1 = self.folder.folder1\n-        self.folder1.invokeFactory(\'Folder\', \'folder2\')\n+        self.folder1.invokeFactory("Folder", "folder2")\n         self.folder2 = self.folder1.folder2\n-        self.folder2.invokeFactory(\'Folder\', \'folder3\')\n+        self.folder2.invokeFactory("Folder", "folder3")\n         self.folder3 = self.folder2.folder3\n \n     def assertList(self, result, expect):\n@@ -186,345 +190,343 @@ def assertList(self, result, expect):\n     def testChangeOwnershipOf(self):\n         # Should take ownership\n         self.assertEqual(self.folder1.getOwnerTuple()[1], default_user)\n-        self.assertList(self.folder1.get_local_roles_for_userid(default_user),\n-                        [\'Owner\'])\n+        self.assertList(\n+            self.folder1.get_local_roles_for_userid(default_user), ["Owner"]\n+        )\n \n-        self.utils.changeOwnershipOf(self.folder1, \'new_owner\')\n-        self.assertEqual(self.folder1.getOwnerTuple()[0], [portal_name,\n-                                                           \'acl_users\'])\n-        self.assertEqual(self.folder1.getOwnerTuple()[1], \'new_owner\')\n-        self.assertList(self.folder1.get_local_roles_for_userid(\'new_owner\'),\n-                        [\'Owner\'])\n+        self.utils.changeOwnershipOf(self.folder1, "new_owner")\n+        self.assertEqual(self.folder1.getOwnerTuple()[0], [portal_name, "acl_users"])\n+        self.assertEqual(self.folder1.getOwnerTuple()[1], "new_owner")\n+        self.assertList(self.folder1.get_local_roles_for_userid("new_owner"), ["Owner"])\n \n         # Initial creator no longer has Owner role.\n-        self.assertList(\n-            self.folder1.get_local_roles_for_userid(default_user), [])\n+        self.assertList(self.folder1.get_local_roles_for_userid(default_user), [])\n \n     def testChangeOwnershipOfWithTopAclUsers(self):\n         # Should be able to give ownership to a user in the top level\n         # acl_users folder (even if this is not offered TTW).\n         self.utils.changeOwnershipOf(self.folder1, SITE_OWNER_NAME)\n-        self.assertEqual(self.folder1.getOwnerTuple()[0], [\'acl_users\'])\n+        self.assertEqual(self.folder1.getOwnerTuple()[0], ["acl_users"])\n         self.assertEqual(self.folder1.getOwnerTuple()[1], SITE_OWNER_NAME)\n         self.assertList(\n-            self.folder1.get_local_roles_for_userid(SITE_OWNER_NAME),\n-            [\'Owner\'])\n+            self.folder1.get_local_roles_for_userid(SITE_OWNER_NAME), ["Owner"]\n+        )\n \n         # Initial creator no longer has Owner role.\n-        self.assertList(\n-            self.folder1.get_local_roles_for_userid(default_user), [])\n+        self.assertList(self.folder1.get_local_roles_for_userid(default_user), [])\n \n     def testChangeOwnershipOfKeepsOtherRoles(self):\n         # Should preserve roles other than Owner\n-        self.folder1.manage_addLocalRoles(\'new_owner\', (\'Reviewer\',))\n-        self.assertList(self.folder1.get_local_roles_for_userid(\'new_owner\'),\n-                        [\'Reviewer\'])\n-        self.utils.changeOwnershipOf(self.folder1, \'new_owner\')\n-        self.assertEqual(self.folder1.getOwnerTuple()[1], \'new_owner\')\n-        self.assertList(self.folder1.get_local_roles_for_userid(\'new_owner\'),\n-                        [\'Owner\', \'Reviewer\'])\n+        self.folder1.manage_addLocalRoles("new_owner", ("Reviewer",))\n         self.assertList(\n-            self.folder1.get_local_roles_for_userid(default_user), [])\n+            self.folder1.get_local_roles_for_userid("new_owner"), ["Reviewer"]\n+        )\n+        self.utils.changeOwnershipOf(self.folder1, "new_owner")\n+        self.assertEqual(self.folder1.getOwnerTuple()[1], "new_owner")\n+        self.assertList(\n+            self.folder1.get_local_roles_for_userid("new_owner"), ["Owner", "Reviewer"]\n+        )\n+        self.assertList(self.folder1.get_local_roles_for_userid(default_user), [])\n \n     def testChangeOwnershipOfRecursive(self):\n         # Should take ownership of subobjects as well\n-        self.utils.changeOwnershipOf(self.folder1, \'new_owner\', recursive=1)\n-        self.assertEqual(self.folder1.getOwnerTuple()[1], \'new_owner\')\n-        self.assertList(self.folder1.get_local_roles_for_userid(\'new_owner\'),\n-                        [\'Owner\'])\n-        self.assertList(\n-            self.folder1.get_local_roles_for_userid(default_user), [])\n-        self.assertEqual(self.folder2.getOwnerTuple()[1], \'new_owner\')\n-        self.assertList(self.folder2.get_local_roles_for_userid(\'new_owner\'),\n-                        [\'Owner\'])\n-        self.assertList(\n-            self.folder2.get_local_roles_for_userid(default_user), [])\n-        self.assertEqual(self.folder3.getOwnerTuple()[1], \'new_owner\')\n-        self.assertList(self.folder3.get_local_roles_for_userid(\'new_owner\'),\n-                        [\'Owner\'])\n-        self.assertList(\n-            self.folder3.get_local_roles_for_userid(default_user), [])\n+        self.utils.changeOwnershipOf(self.folder1, "new_owner", recursive=1)\n+        self.assertEqual(self.folder1.getOwnerTuple()[1], "new_owner")\n+        self.assertList(self.folder1.get_local_roles_for_userid("new_owner"), ["Owner"])\n+        self.assertList(self.folder1.get_local_roles_for_userid(default_user), [])\n+        self.assertEqual(self.folder2.getOwnerTuple()[1], "new_owner")\n+        self.assertList(self.folder2.get_local_roles_for_userid("new_owner"), ["Owner"])\n+        self.assertList(self.folder2.get_local_roles_for_userid(default_user), [])\n+        self.assertEqual(self.folder3.getOwnerTuple()[1], "new_owner")\n+        self.assertList(self.folder3.get_local_roles_for_userid("new_owner"), ["Owner"])\n+        self.assertList(self.folder3.get_local_roles_for_userid(default_user), [])\n \n     def testGetOwnerName(self):\n         # Test that getOwnerName gets the Owner name\n         self.assertEqual(self.utils.getOwnerName(self.folder1), default_user)\n-        self.utils.changeOwnershipOf(self.folder1, \'new_owner\')\n-        self.assertEqual(self.utils.getOwnerName(self.folder1), \'new_owner\')\n+        self.utils.changeOwnershipOf(self.folder1, "new_owner")\n+        self.assertEqual(self.utils.getOwnerName(self.folder1), "new_owner")\n \n     def testGetInheritedLocalRoles(self):\n         # Test basic local roles acquisition is dealt with by\n         # getInheritedLocalRoles\n         gILR = self.utils.getInheritedLocalRoles\n-        self.folder1.manage_addLocalRoles(\'new_owner\', (\'Reviewer\',))\n+        self.folder1.manage_addLocalRoles("new_owner", ("Reviewer",))\n         # Test Normal role acquisition is returned\n-        filtered_roles = [r for r in gILR(self.folder2)\n-                          if r[0] == \'new_owner\'][0]\n-        self.assertList(filtered_roles[1], [\'Reviewer\'])\n-        filtered_roles = [r for r in gILR(self.folder3)\n-                          if r[0] == \'new_owner\'][0]\n-        self.assertList(filtered_roles[1], [\'Reviewer\'])\n+        filtered_roles = [r for r in gILR(self.folder2) if r[0] == "new_owner"][0]\n+        self.assertList(filtered_roles[1], ["Reviewer"])\n+        filtered_roles = [r for r in gILR(self.folder3) if r[0] == "new_owner"][0]\n+        self.assertList(filtered_roles[1], ["Reviewer"])\n \n     def testGetInheritedLocalRolesMultiLevel(self):\n         # Test for http://dev.plone.org/plone/ticket/3901\n         # make sure local roles are picked up from all folders in tree.\n         gILR = self.utils.getInheritedLocalRoles\n-        self.folder1.manage_addLocalRoles(\'new_owner\', (\'Reviewer\',))\n-        self.folder2.manage_addLocalRoles(\'new_owner\', (\'Owner\',))\n+        self.folder1.manage_addLocalRoles("new_owner", ("Reviewer",))\n+        self.folder2.manage_addLocalRoles("new_owner", ("Owner",))\n \n         # folder2 should have only the inherited role\n-        filtered_roles = [r for r in gILR(self.folder2)\n-                          if r[0] == \'new_owner\'][0]\n-        self.assertList(filtered_roles[1], [\'Reviewer\'])\n+        filtered_roles = [r for r in gILR(self.folder2) if r[0] == "new_owner"][0]\n+        self.assertList(filtered_roles[1], ["Reviewer"])\n \n         # folder3 should have roles inherited from parent and grand-parent\n-        filtered_roles = [r for r in gILR(self.folder3)\n-                          if r[0] == \'new_owner\'][0]\n-        self.assertList(filtered_roles[1], [\'Owner\', \'Reviewer\'])\n+        filtered_roles = [r for r in gILR(self.folder3) if r[0] == "new_owner"][0]\n+        self.assertList(filtered_roles[1], ["Owner", "Reviewer"])\n \n \n class TestEditMetadata(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n-        self.folder.invokeFactory(\'Document\', id=\'doc\')\n+        self.folder.invokeFactory("Document", id="doc")\n         self.doc = self.folder.doc\n \n     def testSetTitle(self):\n-        self.assertEqual(self.doc.Title(), \'\')\n-        self.utils.editMetadata(self.doc, title=\'Foo\')\n-        self.assertEqual(self.doc.Title(), \'Foo\')\n+        self.assertEqual(self.doc.Title(), "")\n+        self.utils.editMetadata(self.doc, title="Foo")\n+        self.assertEqual(self.doc.Title(), "Foo")\n \n     def testClearTitle(self):\n-        self.utils.editMetadata(self.doc, title=\'Foo\')\n-        self.assertEqual(self.doc.Title(), \'Foo\')\n-        self.utils.editMetadata(self.doc, title=\'\')\n-        self.assertEqual(self.doc.Title(), \'\')\n+        self.utils.editMetadata(self.doc, title="Foo")\n+        self.assertEqual(self.doc.Title(), "Foo")\n+        self.utils.editMetadata(self.doc, title="")\n+        self.assertEqual(self.doc.Title(), "")\n \n     def testSetDescription(self):\n-        self.assertEqual(self.doc.Description(), \'\')\n-        self.utils.editMetadata(self.doc, description=\'Foo\')\n-        self.assertEqual(self.doc.Description(), \'Foo\')\n+        self.assertEqual(self.doc.Description(), "")\n+        self.utils.editMetadata(self.doc, description="Foo")\n+        self.assertEqual(self.doc.Description(), "Foo")\n \n     def testClearDescription(self):\n-        self.utils.editMetadata(self.doc, description=\'Foo\')\n-        self.assertEqual(self.doc.Description(), \'Foo\')\n-        self.utils.editMetadata(self.doc, description=\'\')\n-        self.assertEqual(self.doc.Description(), \'\')\n+        self.utils.editMetadata(self.doc, description="Foo")\n+        self.assertEqual(self.doc.Description(), "Foo")\n+        self.utils.editMetadata(self.doc, description="")\n+        self.assertEqual(self.doc.Description(), "")\n \n     def testSetSubject(self):\n         self.assertEqual(self.doc.Subject(), ())\n-        self.utils.editMetadata(self.doc, subject=[\'Foo\'])\n-        self.assertEqual(self.doc.Subject(), (\'Foo\',))\n+        self.utils.editMetadata(self.doc, subject=["Foo"])\n+        self.assertEqual(self.doc.Subject(), ("Foo",))\n \n     def testClearSubject(self):\n-        self.utils.editMetadata(self.doc, subject=[\'Foo\'])\n-        self.assertEqual(self.doc.Subject(), (\'Foo\',))\n+        self.utils.editMetadata(self.doc, subject=["Foo"])\n+        self.assertEqual(self.doc.Subject(), ("Foo",))\n         self.utils.editMetadata(self.doc, subject=[])\n         self.assertEqual(self.doc.Subject(), ())\n \n     def testSetContributors(self):\n         self.assertEqual(self.doc.Contributors(), ())\n-        self.utils.editMetadata(self.doc, contributors=[\'Foo\'])\n-        self.assertEqual(self.doc.Contributors(), (\'Foo\',))\n+        self.utils.editMetadata(self.doc, contributors=["Foo"])\n+        self.assertEqual(self.doc.Contributors(), ("Foo",))\n \n     def testClearContributors(self):\n-        self.utils.editMetadata(self.doc, contributors=[\'Foo\'])\n-        self.assertEqual(self.doc.Contributors(), (\'Foo\',))\n+        self.utils.editMetadata(self.doc, contributors=["Foo"])\n+        self.assertEqual(self.doc.Contributors(), ("Foo",))\n         self.utils.editMetadata(self.doc, contributors=[])\n         self.assertEqual(self.doc.Contributors(), ())\n \n     def testSetFormat(self):\n-        self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.format, \'text/html\')\n-        self.utils.editMetadata(self.doc, format=\'text/x-rst\')\n-        self.assertEqual(self.doc.format, \'text/x-rst\')\n-        self.assertEqual(self.doc.Format(), \'text/x-rst\')\n+        self.assertEqual(self.doc.Format(), "text/html")\n+        self.assertEqual(self.doc.format, "text/html")\n+        self.utils.editMetadata(self.doc, format="text/x-rst")\n+        self.assertEqual(self.doc.format, "text/x-rst")\n+        self.assertEqual(self.doc.Format(), "text/x-rst")\n \n     def testClearFormat(self):\n-        self.utils.editMetadata(self.doc, format=\'text/x-rst\')\n-        self.assertEqual(self.doc.format, \'text/x-rst\')\n-        self.assertEqual(self.doc.Format(), \'text/x-rst\')\n-        self.utils.editMetadata(self.doc, format=\'\')\n-        self.assertEqual(self.doc.Format(), \'\')\n-        self.assertEqual(self.doc.format, \'\')\n+        self.utils.editMetadata(self.doc, format="text/x-rst")\n+        self.assertEqual(self.doc.format, "text/x-rst")\n+        self.assertEqual(self.doc.Format(), "text/x-rst")\n+        self.utils.editMetadata(self.doc, format="")\n+        self.assertEqual(self.doc.Format(), "")\n+        self.assertEqual(self.doc.format, "")\n \n     def testSetLanguage(self):\n-        self.assertEqual(self.doc.Language(), \'\')\n-        self.utils.editMetadata(self.doc, language=\'de\')\n-        self.assertEqual(self.doc.Language(), \'de\')\n+        self.assertEqual(self.doc.Language(), "")\n+        self.utils.editMetadata(self.doc, language="de")\n+        self.assertEqual(self.doc.Language(), "de")\n \n     def testClearLanguage(self):\n-        self.utils.editMetadata(self.doc, language=\'de\')\n-        self.assertEqual(self.doc.Language(), \'de\')\n-        self.utils.editMetadata(self.doc, language=\'\')\n-        self.assertEqual(self.doc.Language(), \'\')\n+        self.utils.editMetadata(self.doc, language="de")\n+        self.assertEqual(self.doc.Language(), "de")\n+        self.utils.editMetadata(self.doc, language="")\n+        self.assertEqual(self.doc.Language(), "")\n \n     def testSetRights(self):\n-        self.assertEqual(self.doc.Rights(), \'\')\n-        self.utils.editMetadata(self.doc, rights=\'Foo\')\n-        self.assertEqual(self.doc.Rights(), \'Foo\')\n+        self.assertEqual(self.doc.Rights(), "")\n+        self.utils.editMetadata(self.doc, rights="Foo")\n+        self.assertEqual(self.doc.Rights(), "Foo")\n \n     def testClearRights(self):\n-        self.utils.editMetadata(self.doc, rights=\'Foo\')\n-        self.assertEqual(self.doc.Rights(), \'Foo\')\n-        self.utils.editMetadata(self.doc, rights=\'\')\n-        self.assertEqual(self.doc.Rights(), \'\')\n+        self.utils.editMetadata(self.doc, rights="Foo")\n+        self.assertEqual(self.doc.Rights(), "Foo")\n+        self.utils.editMetadata(self.doc, rights="")\n+        self.assertEqual(self.doc.Rights(), "")\n \n     # Also test the various dates\n \n     def testSetEffectiveDate(self):\n-        self.assertEqual(self.doc.EffectiveDate(), \'None\')\n-        self.utils.editMetadata(self.doc, effective_date=\'2001-01-01\')\n-        self.assertTrue(self.doc.effective_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n+        self.assertEqual(self.doc.EffectiveDate(), "None")\n+        self.utils.editMetadata(self.doc, effective_date="2001-01-01")\n+        self.assertTrue(\n+            self.doc.effective_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n \n     def testClearEffectiveDate(self):\n-        self.utils.editMetadata(self.doc, effective_date=\'2001-01-01\')\n-        self.assertTrue(self.doc.effective_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n-        self.utils.editMetadata(self.doc, effective_date=\'None\')\n-        self.assertEqual(self.doc.EffectiveDate(), \'None\')\n+        self.utils.editMetadata(self.doc, effective_date="2001-01-01")\n+        self.assertTrue(\n+            self.doc.effective_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n+        self.utils.editMetadata(self.doc, effective_date="None")\n+        self.assertEqual(self.doc.EffectiveDate(), "None")\n         self.assertEqual(self.doc.effective_date, None)\n \n     def testSetExpirationDate(self):\n-        self.assertEqual(self.doc.ExpirationDate(), \'None\')\n-        self.utils.editMetadata(self.doc, expiration_date=\'2001-01-01\')\n-        self.assertTrue(self.doc.expiration_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n+        self.assertEqual(self.doc.ExpirationDate(), "None")\n+        self.utils.editMetadata(self.doc, expiration_date="2001-01-01")\n+        self.assertTrue(\n+            self.doc.expiration_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n \n     def testClearExpirationDate(self):\n-        self.utils.editMetadata(self.doc, expiration_date=\'2001-01-01\')\n-        self.assertTrue(self.doc.expiration_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n-        self.utils.editMetadata(self.doc, expiration_date=\'None\')\n-        self.assertEqual(self.doc.ExpirationDate(), \'None\')\n+        self.utils.editMetadata(self.doc, expiration_date="2001-01-01")\n+        self.assertTrue(\n+            self.doc.expiration_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n+        self.utils.editMetadata(self.doc, expiration_date="None")\n+        self.assertEqual(self.doc.ExpirationDate(), "None")\n         self.assertEqual(self.doc.expiration_date, None)\n \n     # Test special cases of tuplification\n \n     def testTuplifySubject_1(self):\n-        self.utils.editMetadata(self.doc, subject=[\'Foo\', \'Bar\', \'Baz\'])\n-        self.assertEqual(self.doc.Subject(), (\'Foo\', \'Bar\', \'Baz\'))\n+        self.utils.editMetadata(self.doc, subject=["Foo", "Bar", "Baz"])\n+        self.assertEqual(self.doc.Subject(), ("Foo", "Bar", "Baz"))\n \n     def testTuplifySubject_2(self):\n-        self.utils.editMetadata(self.doc, subject=[\'Foo\', \'\', \'Bar\', \'Baz\'])\n+        self.utils.editMetadata(self.doc, subject=["Foo", "", "Bar", "Baz"])\n         # Note that empty entries are filtered\n-        self.assertEqual(self.doc.Subject(), (\'Foo\', \'Bar\', \'Baz\'))\n+        self.assertEqual(self.doc.Subject(), ("Foo", "Bar", "Baz"))\n \n     def DISABLED_testTuplifySubject_3(self):\n-        self.utils.editMetadata(self.doc, subject=\'Foo, Bar, Baz\')\n+        self.utils.editMetadata(self.doc, subject="Foo, Bar, Baz")\n         # TODO: Wishful thinking\n-        self.assertEqual(self.doc.Subject(), (\'Foo\', \'Bar\', \'Baz\'))\n+        self.assertEqual(self.doc.Subject(), ("Foo", "Bar", "Baz"))\n \n     def testTuplifyContributors_1(self):\n-        self.utils.editMetadata(self.doc, contributors=[\'Foo\', \'Bar\', \'Baz\'])\n-        self.assertEqual(self.doc.Contributors(), (\'Foo\', \'Bar\', \'Baz\'))\n+        self.utils.editMetadata(self.doc, contributors=["Foo", "Bar", "Baz"])\n+        self.assertEqual(self.doc.Contributors(), ("Foo", "Bar", "Baz"))\n \n     def testTuplifyContributors_2(self):\n-        self.utils.editMetadata(self.doc,\n-                                contributors=[\'Foo\', \'\', \'Bar\', \'Baz\'])\n+        self.utils.editMetadata(self.doc, contributors=["Foo", "", "Bar", "Baz"])\n         # Note that empty entries are filtered\n-        self.assertEqual(self.doc.Contributors(), (\'Foo\', \'Bar\', \'Baz\'))\n+        self.assertEqual(self.doc.Contributors(), ("Foo", "Bar", "Baz"))\n \n     def DISABLED_testTuplifyContributors_3(self):\n-        self.utils.editMetadata(self.doc, contributors=\'Foo; Bar; Baz\')\n+        self.utils.editMetadata(self.doc, contributors="Foo; Bar; Baz")\n         # TODO: Wishful thinking\n-        self.assertEqual(self.doc.Contributors(), (\'Foo\', \'Bar\', \'Baz\'))\n+        self.assertEqual(self.doc.Contributors(), ("Foo", "Bar", "Baz"))\n \n \n class TestEditMetadataIndependence(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n-        self.folder.invokeFactory(\'Document\', id=\'doc\')\n+        self.folder.invokeFactory("Document", id="doc")\n         self.doc = self.folder.doc\n-        self.utils.editMetadata(self.doc,\n-                                title=\'Foo\',\n-                                subject=(\'Bar\',),\n-                                description=\'Baz\',\n-                                contributors=(\'Fred\',),\n-                                effective_date=\'2001-01-01\',\n-                                expiration_date=\'2003-01-01\',\n-                                format=\'text/html\',\n-                                language=\'de\',\n-                                rights=\'Copyleft\',\n-                                )\n+        self.utils.editMetadata(\n+            self.doc,\n+            title="Foo",\n+            subject=("Bar",),\n+            description="Baz",\n+            contributors=("Fred",),\n+            effective_date="2001-01-01",\n+            expiration_date="2003-01-01",\n+            format="text/html",\n+            language="de",\n+            rights="Copyleft",\n+        )\n \n     def testEditTitleOnly(self):\n-        self.utils.editMetadata(self.doc, title=\'Oh Happy Day\')\n-        self.assertEqual(self.doc.Title(), \'Oh Happy Day\')\n+        self.utils.editMetadata(self.doc, title="Oh Happy Day")\n+        self.assertEqual(self.doc.Title(), "Oh Happy Day")\n         # Other elements must not change\n-        self.assertEqual(self.doc.Subject(), (\'Bar\',))\n-        self.assertEqual(self.doc.Description(), \'Baz\')\n-        self.assertEqual(self.doc.Contributors(), (\'Fred\',))\n-        self.assertTrue(self.doc.effective_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n-        self.assertTrue(self.doc.expiration_date.ISO8601()\n-                            .startswith(\'2003-01-01T00:00:00\'))\n-        self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.Language(), \'de\')\n-        self.assertEqual(self.doc.Rights(), \'Copyleft\')\n+        self.assertEqual(self.doc.Subject(), ("Bar",))\n+        self.assertEqual(self.doc.Description(), "Baz")\n+        self.assertEqual(self.doc.Contributors(), ("Fred",))\n+        self.assertTrue(\n+            self.doc.effective_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n+        self.assertTrue(\n+            self.doc.expiration_date.ISO8601().startswith("2003-01-01T00:00:00")\n+        )\n+        self.assertEqual(self.doc.Format(), "text/html")\n+        self.assertEqual(self.doc.Language(), "de")\n+        self.assertEqual(self.doc.Rights(), "Copyleft")\n \n     def testEditSubjectOnly(self):\n-        self.utils.editMetadata(self.doc, subject=(\'Oh\', \'Happy\', \'Day\'))\n-        self.assertEqual(self.doc.Subject(), (\'Oh\', \'Happy\', \'Day\'))\n+        self.utils.editMetadata(self.doc, subject=("Oh", "Happy", "Day"))\n+        self.assertEqual(self.doc.Subject(), ("Oh", "Happy", "Day"))\n         # Other elements must not change\n-        self.assertEqual(self.doc.Title(), \'Foo\')\n-        self.assertEqual(self.doc.Description(), \'Baz\')\n-        self.assertEqual(self.doc.Contributors(), (\'Fred\',))\n-        self.assertTrue(self.doc.effective_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n-        self.assertTrue(self.doc.expiration_date.ISO8601()\n-                            .startswith(\'2003-01-01T00:00:00\'))\n-        self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.Language(), \'de\')\n-        self.assertEqual(self.doc.Rights(), \'Copyleft\')\n+        self.assertEqual(self.doc.Title(), "Foo")\n+        self.assertEqual(self.doc.Description(), "Baz")\n+        self.assertEqual(self.doc.Contributors(), ("Fred",))\n+        self.assertTrue(\n+            self.doc.effective_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n+        self.assertTrue(\n+            self.doc.expiration_date.ISO8601().startswith("2003-01-01T00:00:00")\n+        )\n+        self.assertEqual(self.doc.Format(), "text/html")\n+        self.assertEqual(self.doc.Language(), "de")\n+        self.assertEqual(self.doc.Rights(), "Copyleft")\n \n     def testEditEffectiveDateOnly(self):\n-        self.utils.editMetadata(self.doc, effective_date=\'2001-12-31\')\n-        self.assertTrue(self.doc.effective_date.ISO8601()\n-                            .startswith(\'2001-12-31T00:00:00\'))\n+        self.utils.editMetadata(self.doc, effective_date="2001-12-31")\n+        self.assertTrue(\n+            self.doc.effective_date.ISO8601().startswith("2001-12-31T00:00:00")\n+        )\n         # Other elements must not change\n-        self.assertEqual(self.doc.Title(), \'Foo\')\n-        self.assertEqual(self.doc.Subject(), (\'Bar\',))\n-        self.assertEqual(self.doc.Description(), \'Baz\')\n-        self.assertEqual(self.doc.Contributors(), (\'Fred\',))\n-        self.assertTrue(self.doc.expiration_date.ISO8601()\n-                            .startswith(\'2003-01-01T00:00:00\'))\n-        self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.Language(), \'de\')\n-        self.assertEqual(self.doc.Rights(), \'Copyleft\')\n+        self.assertEqual(self.doc.Title(), "Foo")\n+        self.assertEqual(self.doc.Subject(), ("Bar",))\n+        self.assertEqual(self.doc.Description(), "Baz")\n+        self.assertEqual(self.doc.Contributors(), ("Fred",))\n+        self.assertTrue(\n+            self.doc.expiration_date.ISO8601().startswith("2003-01-01T00:00:00")\n+        )\n+        self.assertEqual(self.doc.Format(), "text/html")\n+        self.assertEqual(self.doc.Language(), "de")\n+        self.assertEqual(self.doc.Rights(), "Copyleft")\n \n     def testEditLanguageOnly(self):\n-        self.utils.editMetadata(self.doc, language=\'fr\')\n-        self.assertEqual(self.doc.Language(), \'fr\')\n+        self.utils.editMetadata(self.doc, language="fr")\n+        self.assertEqual(self.doc.Language(), "fr")\n         # Other elements must not change\n-        self.assertEqual(self.doc.Title(), \'Foo\')\n-        self.assertEqual(self.doc.Subject(), (\'Bar\',))\n-        self.assertEqual(self.doc.Description(), \'Baz\')\n-        self.assertEqual(self.doc.Contributors(), (\'Fred\',))\n-        self.assertTrue(self.doc.effective_date.ISO8601()\n-                            .startswith(\'2001-01-01T00:00:00\'))\n-        self.assertTrue(self.doc.expiration_date.ISO8601()\n-                            .startswith(\'2003-01-01T00:00:00\'))\n-        self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.Rights(), \'Copyleft\')\n+        self.assertEqual(self.doc.Title(), "Foo")\n+        self.assertEqual(self.doc.Subject(), ("Bar",))\n+        self.assertEqual(self.doc.Description(), "Baz")\n+        self.assertEqual(self.doc.Contributors(), ("Fred",))\n+        self.assertTrue(\n+            self.doc.effective_date.ISO8601().startswith("2001-01-01T00:00:00")\n+        )\n+        self.assertTrue(\n+            self.doc.expiration_date.ISO8601().startswith("2003-01-01T00:00:00")\n+        )\n+        self.assertEqual(self.doc.Format(), "text/html")\n+        self.assertEqual(self.doc.Rights(), "Copyleft")\n \n \n class TestBreadCrumbs(PloneTestCase.PloneTestCase):\n-    \'\'\'Tests for the portal tabs query\'\'\'\n+    """Tests for the portal tabs query"""\n \n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n         self.populateSite()\n \n     def populateSite(self):\n-        self.setRoles([\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'File\', \'file11\')\n-        self.setRoles([\'Member\'])\n+        self.setRoles(["Manager"])\n+        self.portal.invokeFactory("Folder", "folder1")\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("File", "file11")\n+        self.setRoles(["Member"])\n \n     def testCreateBreadCrumbs(self):\n         # See if we can create one at all\n@@ -532,9 +534,8 @@ def testCreateBreadCrumbs(self):\n         crumbs = self.utils.createBreadCrumbs(doc)\n         self.assertTrue(crumbs)\n         self.assertEqual(len(crumbs), 2)\n-        self.assertEqual(crumbs[-1][\'absolute_url\'], doc.absolute_url())\n-        self.assertEqual(crumbs[-2][\'absolute_url\'],\n-                         doc.aq_parent.absolute_url())\n+        self.assertEqual(crumbs[-1]["absolute_url"], doc.absolute_url())\n+        self.assertEqual(crumbs[-2]["absolute_url"], doc.aq_parent.absolute_url())\n \n     def testBreadcrumbsRespectTypesWithViewAction(self):\n         # With a type in types_use_view_action_in_listings as current action it\n@@ -542,75 +543,71 @@ def testBreadcrumbsRespectTypesWithViewAction(self):\n         file = self.portal.folder1.file11\n         crumbs = self.utils.createBreadCrumbs(file)\n         self.assertTrue(crumbs)\n-        self.assertEqual(crumbs[-1][\'absolute_url\'][-5:], \'/view\')\n+        self.assertEqual(crumbs[-1]["absolute_url"][-5:], "/view")\n \n \n class TestIDGenerationMethods(PloneTestCase.PloneTestCase):\n-    """Tests the isIDAutoGenerated method and pretty_title_or_id\n-    """\n+    """Tests the isIDAutoGenerated method and pretty_title_or_id"""\n \n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n \n     def test_pretty_title_or_id_returns_title(self):\n-        self.folder.setTitle(\'My pretty title\')\n-        self.assertEqual(self.utils.pretty_title_or_id(self.folder),\n-                         \'My pretty title\')\n+        self.folder.setTitle("My pretty title")\n+        self.assertEqual(self.utils.pretty_title_or_id(self.folder), "My pretty title")\n \n     def test_pretty_title_or_id_returns_id(self):\n-        self.folder.setTitle(\'\')\n-        self.assertEqual(self.utils.pretty_title_or_id(self.folder),\n-                         self.folder.getId())\n+        self.folder.setTitle("")\n+        self.assertEqual(\n+            self.utils.pretty_title_or_id(self.folder), self.folder.getId()\n+        )\n \n     def test_pretty_title_or_id_works_with_method_that_needs_context(self):\n-        self.setRoles([\'Manager\', \'Member\'])\n+        self.setRoles(["Manager", "Member"])\n         # Create a dummy class that looks at it\'s context to find the title\n         new_obj = DummyTitle()\n         new_obj = new_obj.__of__(self.folder)\n         try:\n             title = self.utils.pretty_title_or_id(new_obj)\n         except AttributeError as e:\n-            self.fail(\'pretty_title_or_id failed to include context %s\' % e)\n-        self.assertEqual(title, \'portal_catalog\')\n+            self.fail("pretty_title_or_id failed to include context %s" % e)\n+        self.assertEqual(title, "portal_catalog")\n \n     def test_pretty_title_or_id_on_catalog_brain(self):\n         cat = self.portal.portal_catalog\n-        self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.title = \'My pretty title\'\n-        self.folder.subject = (\'foobar\',)\n+        self.setRoles(["Manager", "Member"])\n+        self.folder.title = "My pretty title"\n+        self.folder.subject = ("foobar",)\n         self.folder.reindexObject()\n-        results = cat(Subject=\'foobar\')\n+        results = cat(Subject="foobar")\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(self.utils.pretty_title_or_id(results[0]),\n-                         \'My pretty title\')\n+        self.assertEqual(self.utils.pretty_title_or_id(results[0]), "My pretty title")\n \n     def test_pretty_title_or_id_on_catalog_brain_returns_id(self):\n         cat = self.portal.portal_catalog\n-        self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.title = \'\'\n-        self.folder.subject = (\'foobar\',)\n+        self.setRoles(["Manager", "Member"])\n+        self.folder.title = ""\n+        self.folder.subject = ("foobar",)\n         self.folder.reindexObject()\n-        results = cat(Subject=\'foobar\')\n+        results = cat(Subject="foobar")\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(self.utils.pretty_title_or_id(results[0]),\n-                         self.folder.getId())\n+        self.assertEqual(self.utils.pretty_title_or_id(results[0]), self.folder.getId())\n \n     def test_pretty_title_or_id_on_catalog_brain_no_title(self):\n         cat = self.portal.portal_catalog\n-        self.setRoles([\'Manager\', \'Member\'])\n+        self.setRoles(["Manager", "Member"])\n         # Remove Title from catalog metadata to simulate a catalog with no\n         # Title metadata and similar pathological cases.\n-        cat.delColumn(\'Title\')\n-        self.folder.title = \'\'\n-        self.folder.subject = (\'foobar\',)\n+        cat.delColumn("Title")\n+        self.folder.title = ""\n+        self.folder.subject = ("foobar",)\n         self.folder.reindexObject()\n-        results = cat(Subject=\'foobar\')\n+        results = cat(Subject="foobar")\n         self.assertEqual(len(results), 1)\n         # Give the portal a title because this is what will show up on\n         # failure\n-        self.portal.title = \'This is not the title you are looking for\'\n-        self.assertEqual(self.utils.pretty_title_or_id(results[0]),\n-                         self.folder.getId())\n+        self.portal.title = "This is not the title you are looking for"\n+        self.assertEqual(self.utils.pretty_title_or_id(results[0]), self.folder.getId())\n \n     def testGetMethodAliases(self):\n         fti = self.folder.getTypeInfo()\ndiff --git a/Products/CMFPlone/tests/testPloneView.py b/Products/CMFPlone/tests/testPloneView.py\nindex 5efdcc84bd..f80af2e4b4 100644\n--- a/Products/CMFPlone/tests/testPloneView.py\n+++ b/Products/CMFPlone/tests/testPloneView.py\n@@ -2,6 +2,8 @@\n from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.tests import PloneTestCase\n \n+import warnings\n+\n \n class TestPloneView(PloneTestCase.PloneTestCase):\n \n@@ -27,111 +29,131 @@ def testToLocalizedSize(self):\n         self.assertEqual(value, \'3 KB\')\n \n     def testIsStructuralFolderWithNonFolder(self):\n-        i = dummy.Item()\n-        self.assertFalse(Plone(i, self.app.REQUEST).isStructuralFolder())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            i = dummy.Item()\n+            self.assertFalse(Plone(i, self.app.REQUEST).isStructuralFolder())\n \n     def testIsStructuralFolderWithFolder(self):\n-        f = dummy.Folder(\'struct_folder\')\n-        self.assertTrue(Plone(f, self.app.REQUEST).isStructuralFolder())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            f = dummy.Folder(\'struct_folder\')\n+            self.assertTrue(Plone(f, self.app.REQUEST).isStructuralFolder())\n \n     def testIsStructuralFolderWithNonStructuralFolder(self):\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.assertFalse(Plone(f, self.app.REQUEST).isStructuralFolder())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            f = dummy.NonStructuralFolder(\'ns_folder\')\n+            self.assertFalse(Plone(f, self.app.REQUEST).isStructuralFolder())\n \n     def testIsDefaultPageInFolder(self):\n-        view = Plone(self.folder.test, self.app.REQUEST)\n-        self.assertFalse(view.isDefaultPageInFolder())\n-        self.assertTrue(self.folder.canSetDefaultPage())\n-        self.folder.setDefaultPage(\'test\')\n-        # re-create the view, because the old value is cached\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.test, self.app.REQUEST)\n-        self.assertTrue(view.isDefaultPageInFolder())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            view = Plone(self.folder.test, self.app.REQUEST)\n+            self.assertFalse(view.isDefaultPageInFolder())\n+            self.assertTrue(self.folder.canSetDefaultPage())\n+            self.folder.setDefaultPage(\'test\')\n+            # re-create the view, because the old value is cached\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.test, self.app.REQUEST)\n+            self.assertTrue(view.isDefaultPageInFolder())\n \n     def testNavigationRootPath(self):\n-        view = Plone(self.folder, self.app.REQUEST)\n-        self.assertEqual(view.navigationRootPath(),\n-                         self.portal.portal_url.getPortalPath())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            view = Plone(self.folder, self.app.REQUEST)\n+            self.assertEqual(view.navigationRootPath(),\n+                            self.portal.portal_url.getPortalPath())\n \n     def testNavigationRootUrl(self):\n-        view = Plone(self.folder, self.app.REQUEST)\n-        self.assertEqual(view.navigationRootUrl(), self.portal.absolute_url())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            view = Plone(self.folder, self.app.REQUEST)\n+            self.assertEqual(view.navigationRootUrl(), self.portal.absolute_url())\n \n     def testGetParentObject(self):\n-        view = Plone(self.folder.test, self.app.REQUEST)\n-        self.assertEqual(view.getParentObject(), self.folder)\n-        # Make sure this looks only at containment\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.test.__of__(self.portal), self.app.REQUEST)\n-        self.assertEqual(view.getParentObject(), self.folder)\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            view = Plone(self.folder.test, self.app.REQUEST)\n+            self.assertEqual(view.getParentObject(), self.folder)\n+            # Make sure this looks only at containment\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.test.__of__(self.portal), self.app.REQUEST)\n+            self.assertEqual(view.getParentObject(), self.folder)\n \n     def testIsFolderOrFolderDefaultPage(self):\n-        # an actual folder whould return true\n-        view = Plone(self.folder, self.app.REQUEST)\n-        self.assertTrue(view.isFolderOrFolderDefaultPage())\n-        # But not a document\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.test, self.app.REQUEST)\n-        self.assertFalse(view.isFolderOrFolderDefaultPage())\n-        # Unless we make it the default view\n-        self.folder.setDefaultPage(\'test\')\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.test, self.app.REQUEST)\n-        self.assertTrue(view.isFolderOrFolderDefaultPage())\n-        # And if we have a non-structural folder it should not be true\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.folder._setObject(\'ns_folder\', f)\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.ns_folder, self.app.REQUEST)\n-        self.assertFalse(view.isFolderOrFolderDefaultPage())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            # an actual folder whould return true\n+            view = Plone(self.folder, self.app.REQUEST)\n+            self.assertTrue(view.isFolderOrFolderDefaultPage())\n+            # But not a document\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.test, self.app.REQUEST)\n+            self.assertFalse(view.isFolderOrFolderDefaultPage())\n+            # Unless we make it the default view\n+            self.folder.setDefaultPage(\'test\')\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.test, self.app.REQUEST)\n+            self.assertTrue(view.isFolderOrFolderDefaultPage())\n+            # And if we have a non-structural folder it should not be true\n+            f = dummy.NonStructuralFolder(\'ns_folder\')\n+            self.folder._setObject(\'ns_folder\', f)\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.ns_folder, self.app.REQUEST)\n+            self.assertFalse(view.isFolderOrFolderDefaultPage())\n \n     def testIsPortalOrPortalDefaultPage(self):\n-        # an actual folder whould return true\n-        view = Plone(self.portal, self.app.REQUEST)\n-        self.assertTrue(view.isPortalOrPortalDefaultPage())\n-        # But not a document\n-        self.setRoles([\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', \'portal_test\',\n-                                  title=\'Test default page\')\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.portal.portal_test, self.app.REQUEST)\n-        self.assertFalse(view.isPortalOrPortalDefaultPage())\n-        # Unless we make it the default view\n-        self.portal.setDefaultPage(\'portal_test\')\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.portal.portal_test, self.app.REQUEST)\n-        self.assertTrue(view.isPortalOrPortalDefaultPage())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            # an actual folder whould return true\n+            view = Plone(self.portal, self.app.REQUEST)\n+            self.assertTrue(view.isPortalOrPortalDefaultPage())\n+            # But not a document\n+            self.setRoles([\'Manager\'])\n+            self.portal.invokeFactory(\'Document\', \'portal_test\',\n+                                    title=\'Test default page\')\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.portal.portal_test, self.app.REQUEST)\n+            self.assertFalse(view.isPortalOrPortalDefaultPage())\n+            # Unless we make it the default view\n+            self.portal.setDefaultPage(\'portal_test\')\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.portal.portal_test, self.app.REQUEST)\n+            self.assertTrue(view.isPortalOrPortalDefaultPage())\n \n     def testGetCurrentFolder(self):\n-        # If context is a folder, then the folder is returned\n-        view = Plone(self.folder, self.app.REQUEST)\n-        self.assertEqual(view.getCurrentFolder(), self.folder)\n-\n-        # If context is not a folder, then the parent is returned\n-        # A bit crude ... we need to make sure our memos don\'t stick in the\n-        # tests\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.test, self.app.REQUEST)\n-        self.assertEqual(view.getCurrentFolder(), self.folder)\n-\n-        # The real container is returned regardless of context\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.test.__of__(self.portal), self.app.REQUEST)\n-        self.assertEqual(view.getCurrentFolder(), self.folder)\n-\n-        # A non-structural folder does not count as a folder`\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.folder._setObject(\'ns_folder\', f)\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.ns_folder, self.app.REQUEST)\n-        self.assertEqual(view.getCurrentFolder(), self.folder)\n-\n-        # And even a structural folder that is used as a default page\n-        # returns its parent\n-        self.folder.setDefaultPage(\'ns_folder\')\n-        self._invalidateRequestMemoizations()\n-        view = Plone(self.folder.ns_folder, self.app.REQUEST)\n-        self.assertEqual(view.getCurrentFolder(), self.folder)\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            # If context is a folder, then the folder is returned\n+            view = Plone(self.folder, self.app.REQUEST)\n+            self.assertEqual(view.getCurrentFolder(), self.folder)\n+\n+            # If context is not a folder, then the parent is returned\n+            # A bit crude ... we need to make sure our memos don\'t stick in the\n+            # tests\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.test, self.app.REQUEST)\n+            self.assertEqual(view.getCurrentFolder(), self.folder)\n+\n+            # The real container is returned regardless of context\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.test.__of__(self.portal), self.app.REQUEST)\n+            self.assertEqual(view.getCurrentFolder(), self.folder)\n+\n+            # A non-structural folder does not count as a folder`\n+            f = dummy.NonStructuralFolder(\'ns_folder\')\n+            self.folder._setObject(\'ns_folder\', f)\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.ns_folder, self.app.REQUEST)\n+            self.assertEqual(view.getCurrentFolder(), self.folder)\n+\n+            # And even a structural folder that is used as a default page\n+            # returns its parent\n+            self.folder.setDefaultPage(\'ns_folder\')\n+            self._invalidateRequestMemoizations()\n+            view = Plone(self.folder.ns_folder, self.app.REQUEST)\n+            self.assertEqual(view.getCurrentFolder(), self.folder)\n \n     def testCropText(self):\n         view = Plone(self.portal, self.app.REQUEST)\n@@ -149,10 +171,12 @@ def testCropText(self):\n         self.assertEqual(view.cropText(text, 5), b\'Koko\\xc5\\x99...\')\n \n     def testSiteEncoding(self):\n-        view = Plone(self.portal, self.app.REQUEST)\n-        self.assertEqual(\'utf-8\', view.site_encoding())\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            view = Plone(self.portal, self.app.REQUEST)\n+            self.assertEqual(\'utf-8\', view.site_encoding())\n \n     def test_human_readable_size(self):\n         view = Plone(self.portal, self.app.REQUEST)\n-        from Products.CMFPlone.utils import human_readable_size\n+        from plone.base.utils import human_readable_size\n         self.assertIs(view.human_readable_size, human_readable_size)\ndiff --git a/Products/CMFPlone/tests/test_PloneTool.py b/Products/CMFPlone/tests/test_PloneTool.py\nindex c28a337cbf..405ce35460 100644\n--- a/Products/CMFPlone/tests/test_PloneTool.py\n+++ b/Products/CMFPlone/tests/test_PloneTool.py\n@@ -7,6 +7,7 @@\n from Products.statusmessages.interfaces import IStatusMessage\n \n import unittest\n+import warnings\n \n \n class TestPloneTool(unittest.TestCase):\n@@ -20,10 +21,12 @@ def setUp(self):\n         self.tool = getToolByName(self.portal, \'plone_utils\', None)\n \n     def test_getSiteEncoding(self):\n-        self.assertEqual(\n-            self.tool.getSiteEncoding(),\n-            \'utf-8\'\n-        )\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings("ignore", category=DeprecationWarning)\n+            self.assertEqual(\n+                self.tool.getSiteEncoding(),\n+                \'utf-8\'\n+            )\n \n     def test_getMailHost(self):\n         self.assertTrue(\ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 7f6c0a1af6..11eb7df766 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -19,6 +19,8 @@\n from os.path import split\n from plone.base import PloneMessageFactory as _\n from plone.base import utils as base_utils\n+from plone.base.interfaces.controlpanel import IImagingSchema\n+from plone.base.interfaces.siteroot import IPloneSiteRoot\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.permissions import AddPortalContent\n@@ -26,11 +28,9 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.utils import ToolInit as CMFCoreToolInit\n from Products.CMFPlone import bbb\n-from plone.base.interfaces.controlpanel import IImagingSchema\n-from plone.base.interfaces.siteroot import IPloneSiteRoot\n from Products.CMFPlone.log import log  # noqa - for python scripts\n-from Products.CMFPlone.log import log_exc  # noqa - for python scripts\n from Products.CMFPlone.log import log_deprecated  # noqa - for python scripts\n+from Products.CMFPlone.log import log_exc  # noqa - for python scripts\n from ZODB.POSException import ConflictError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -62,13 +62,24 @@\n \n deprecated_import(\n     "Import from plone.base.utils instead (will be removed in Plone 7)",\n+    base_hasattr=\'plone.base.utils:base_hasattr\',\n+    getEmptyTitle=\'plone.base.utils:get_empty_title\',\n     human_readable_size=\'plone.base.utils:human_readable_size\',\n-    safeToInt=\'plone.base.utils:safeToInt\',\n+    safeToInt=\'plone.base.utils:safe_int\',\n     safe_bytes=\'plone.base.utils:safe_bytes\',\n+    safe_callable=\'plone.base.utils:safe_callable\',\n+    safe_hasattr=\'plone.base.utils:safe_hasattr\',\n     safe_text=\'plone.base.utils:safe_text\',\n     get_installer=\'plone.base.utils:get_installer\',\n     get_top_request=\'plone.base.utils:get_top_request\',\n     get_top_site_from_url=\'plone.base.utils:get_top_site_from_url\',\n+    pretty_title_or_id=\'plone.base.utils:pretty_title_or_id\',\n+    _createObjectByType=\'plone.base.utils:unrestricted_construct_instance\',\n+)\n+\n+deprecated_import(\n+    "Import from plone.namedfile.utils instead (will be removed in Plone 7)",\n+    getHighPixelDensityScales="plone.namedfile.utils.getHighPixelDensityScales",\n )\n \n @deprecate("Use plone.base.utils.safe_bytes instead (will be removed in Plone 7)")\n@@ -162,7 +173,7 @@ def isExpired(content):\n         expiry = content.expires\n \n     # See if we have a callable\n-    if safe_callable(expiry):\n+    if base_utils.safe_callable(expiry):\n         expiry = expiry()\n \n     # Convert to DateTime if necessary, ExpirationDate may return \'None\'\n@@ -174,44 +185,6 @@ def isExpired(content):\n     return 0\n \n \n-def pretty_title_or_id(context, obj, empty_value=_marker):\n-    """Return the best possible title or id of an item, regardless\n-       of whether obj is a catalog brain or an object, but returning an\n-       empty title marker if the id is not set (i.e. it\'s auto-generated).\n-    """\n-    # if safe_hasattr(obj, \'aq_explicit\'):\n-    #    obj = obj.aq_explicit\n-    # title = getattr(obj, \'Title\', None)\n-    title = None\n-    if base_hasattr(obj, \'Title\'):\n-        title = getattr(obj, \'Title\', None)\n-    if safe_callable(title):\n-        title = title()\n-    if title:\n-        return title\n-    item_id = getattr(obj, \'getId\', None)\n-    if safe_callable(item_id):\n-        item_id = item_id()\n-    if item_id:\n-        return item_id\n-    if empty_value is _marker:\n-        empty_value = getEmptyTitle(context)\n-    return empty_value\n-\n-\n-def getEmptyTitle(context, translated=True):\n-    """Returns string to be used for objects with no title or id"""\n-    # The default is an extra fancy unicode elipsis\n-    empty = b\'\\x5b\\xc2\\xb7\\xc2\\xb7\\xc2\\xb7\\x5d\'.decode(\'utf8\')\n-    if translated:\n-        if context is not None:\n-            if not IBrowserRequest.providedBy(context):\n-                context = aq_get(context, \'REQUEST\', None)\n-        empty = translate(\'title_unset\', domain=\'plone\',\n-                          context=context, default=empty)\n-    return empty\n-\n-\n def typesToList(context):\n     registry = getUtility(IRegistry)\n     return registry.get(\'plone.displayed_types\', ())\n@@ -297,26 +270,6 @@ def initialize(self, context):\n                     getattr(misc, pid)[name] = icon\n \n \n-def _createObjectByType(type_name, container, id, *args, **kw):\n-    """Create an object without performing security checks\n-\n-    invokeFactory and fti.constructInstance perform some security checks\n-    before creating the object. Use this function instead if you need to\n-    skip these checks.\n-\n-    This method uses\n-    CMFCore.TypesTool.FactoryTypeInformation._constructInstance\n-    to create the object without security checks.\n-    """\n-    id = str(id)\n-    typesTool = getToolByName(container, \'portal_types\')\n-    fti = typesTool.getTypeInfo(type_name)\n-    if not fti:\n-        raise ValueError(\'Invalid type %s\' % type_name)\n-\n-    return fti._constructInstance(container, id, *args, **kw)\n-\n-\n release_levels = (\'alpha\', \'beta\', \'candidate\', \'final\')\n rl_abbr = {\'a\': \'alpha\', \'b\': \'beta\', \'rc\': \'candidate\'}\n \n@@ -371,33 +324,6 @@ def transaction_note(note):\n         T.note(base_utils.safe_text(note))\n \n \n-def base_hasattr(obj, name):\n-    """Like safe_hasattr, but also disables acquisition."""\n-    return safe_hasattr(aq_base(obj), name)\n-\n-\n-def safe_hasattr(obj, name, _marker=object()):\n-    """Make sure we don\'t mask exceptions like hasattr().\n-\n-    We don\'t want exceptions other than AttributeError to be masked,\n-    since that too often masks other programming errors.\n-    Three-argument getattr() doesn\'t mask those, so we use that to\n-    implement our own hasattr() replacement.\n-    """\n-    return getattr(obj, name, _marker) is not _marker\n-\n-\n-def safe_callable(obj):\n-    """Make sure our callable checks are ConflictError safe."""\n-    if safe_hasattr(obj, \'__class__\'):\n-        if safe_hasattr(obj, \'__call__\'):\n-            return True\n-        return isinstance(obj, ClassType)\n-    return callable(obj)\n-\n-\n-\n-\n def tuplize(value):\n     if isinstance(value, tuple):\n         return value\n@@ -591,14 +517,10 @@ def getQuality():\n     return QUALITY_DEFAULT\n \n \n-def getHighPixelDensityScales():\n-    from plone.namedfile.utils import getHighPixelDensityScales as func\n-    return func()\n-\n-\n def getSiteLogo(site=None, include_type=False):\n     from plone.base.interfaces import ISiteSchema\n     from plone.formwidget.namedfile.converter import b64decode_file\n+\n     import mimetypes\n \n     if site is None:\ndiff --git a/news/3614-2.bugfix b/news/3614-2.bugfix\nnew file mode 100644\nindex 0000000000..6e01b0f8c7\n--- /dev/null\n+++ b/news/3614-2.bugfix\n@@ -0,0 +1,2 @@\n+Moved CSFR patches addressing CMFPlone itself to decorators.\n+[jensens]\ndiff --git a/news/3614.bugfix b/news/3614.bugfix\nnew file mode 100644\nindex 0000000000..c1691ac58c\n--- /dev/null\n+++ b/news/3614.bugfix\n@@ -0,0 +1,7 @@\n+Use plone.base and reduce deprecation warnings.\n+In utils remove functions already moved to plone.base and add deferred import with message.\n+Deprecate correct, where prior only comments or old logging.\n+Some black/isort where touched.\n+[jensens]\n+\n+\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-08-18T21:09:45+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/aa2da5d8a49e5920bc716c25a84f25a2748aed6f

Merge pull request #3609 from plone/cleanup-traversalpy

Remove Zope 4 BBB and add comment, also: black, isort.

Files changed:
A news/3609.bugfix
M Products/CMFPlone/traversal.py

b'diff --git a/Products/CMFPlone/traversal.py b/Products/CMFPlone/traversal.py\nindex 8b56473dc4..cc19aac322 100644\n--- a/Products/CMFPlone/traversal.py\n+++ b/Products/CMFPlone/traversal.py\n@@ -1,40 +1,33 @@\n-from plone.resource.traversal import ResourceTraverser\n-from zope.component import queryUtility\n+from plone.base.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.interfaces import IUniqueResourceRequest\n-from plone.base.interfaces.resources import (\n-    OVERRIDE_RESOURCE_DIRECTORY_NAME)\n+from plone.resource.traversal import ResourceTraverser\n from Products.PageTemplates.Expressions import getEngine\n from Products.PageTemplates.Expressions import getTrustedEngine\n+from Products.PageTemplates.interfaces import IZopeAwareEngine\n+from zope.component import queryUtility\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.pagetemplate import engine as zpt_engine\n \n \n-try:\n-    # This was introduced in Zope 4.5.\n-    # We try not to make this a hard dependency yet.\n-    from Products.PageTemplates.interfaces import IZopeAwareEngine\n-except ImportError:\n-    # Zope 4.4-\n-    class IZopeAwareEngine(Interface):\n-        pass\n-\n-\n class PloneBundlesTraverser(ResourceTraverser):\n+    # the name is missleading - it is used not only for bundles.\n+    # in fact in Plone 6 bundles are no longer used, despite that the traverser\n+    # might be in use for other use cases.\n \n-    name = \'plone\'\n+    name = "plone"\n \n     def traverse(self, name, remaining):\n         # in case its not a request get the default one\n         req = getRequest()\n-        if not req or \'PATH_INFO\' not in req.environ:\n+        if not req or "PATH_INFO" not in req.environ:\n             return super().traverse(name, remaining)\n \n-        resource_path = req.environ[\'PATH_INFO\'].split(\'++plone++\')[-1]\n+        resource_path = req.environ["PATH_INFO"].split("++plone++")[-1]\n         try:\n-            resource_name, resource_filepath = resource_path.split(\'/\', 1)\n+            resource_name, resource_filepath = resource_path.split("/", 1)\n         except ValueError:\n             # Not the path info / url that we expected.\n             # So the request is not for a resource,\n@@ -44,15 +37,15 @@ def traverse(self, name, remaining):\n \n         # If we have additional traversers in the path we should not use them\n         # in the file lookup\n-        more_traversal = (resource_filepath.startswith(\'++\') or\n-                          resource_filepath.startswith(\'@@\'))\n-        if more_traversal:\n-            resource_filepath = resource_filepath.split(\'/\')[-1]\n+        if resource_filepath.startswith("++") or resource_filepath.startswith("@@"):\n+            resource_filepath = resource_filepath.split("/")[-1]\n \n         persistentDirectory = queryUtility(IResourceDirectory, name="persistent")\n         directory = None\n-        if (persistentDirectory is not None and\n-                OVERRIDE_RESOURCE_DIRECTORY_NAME in persistentDirectory):\n+        if (\n+            persistentDirectory is not None\n+            and OVERRIDE_RESOURCE_DIRECTORY_NAME in persistentDirectory\n+        ):\n             container = persistentDirectory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n             if resource_name in container:\n                 directory = container[resource_name]\ndiff --git a/news/3609.bugfix b/news/3609.bugfix\nnew file mode 100644\nindex 0000000000..47ffdc293f\n--- /dev/null\n+++ b/news/3609.bugfix\n@@ -0,0 +1,2 @@\n+In traversal.py remoe a Zope 4 BBB code, add a comment about bundle traverser and apply black.isort on the file.\n+[jensens]\n'

