Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T21:01:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/8be9c5a51f1813361e6a4fc2087726c25f804efe

isort

Files changed:
M plone/app/workflow/__init__.py
M plone/app/workflow/browser/sharing.py
M plone/app/workflow/events.py
M plone/app/workflow/exportimport.py
M plone/app/workflow/interfaces.py
M plone/app/workflow/localroles.py
M plone/app/workflow/permissions.py
M plone/app/workflow/remap.py
M plone/app/workflow/tests/test_exportimport.py
M plone/app/workflow/tests/test_folder_workflow.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_simple_publication_workflow.py
M plone/app/workflow/tests/utils.py
M setup.cfg
M setup.py

b'diff --git a/plone/app/workflow/__init__.py b/plone/app/workflow/__init__.py\nindex 8fc4fb6..75a83d5 100644\n--- a/plone/app/workflow/__init__.py\n+++ b/plone/app/workflow/__init__.py\n@@ -1,5 +1,7 @@\n # Register the permissions with Zope\n+from zope.i18nmessageid import MessageFactory\n+\n import plone.app.workflow.permissions\n \n-from zope.i18nmessageid import MessageFactory\n+\n PloneMessageFactory = MessageFactory(\'plone\')\ndiff --git a/plone/app/workflow/browser/sharing.py b/plone/app/workflow/browser/sharing.py\nindex 9bca505..45631bb 100644\n--- a/plone/app/workflow/browser/sharing.py\n+++ b/plone/app/workflow/browser/sharing.py\n@@ -1,27 +1,28 @@\n-from itertools import chain\n-\n-from plone.memoize.instance import memoize, clearafter\n-from zope.component import getUtilitiesFor, getMultiAdapter\n-from zope.i18n import translate\n-from zope.event import notify\n-\n-from Acquisition import aq_parent, aq_base\n from AccessControl import Unauthorized\n-from zExceptions import Forbidden\n-\n-from Products.CMFCore.utils import getToolByName\n+from Acquisition import aq_base\n+from Acquisition import aq_parent\n+from itertools import chain\n+from plone.app.workflow import PloneMessageFactory as _\n+from plone.app.workflow.events import LocalrolesModifiedEvent\n+from plone.app.workflow.interfaces import ISharingPageRole\n+from plone.memoize.instance import clearafter\n+from plone.memoize.instance import memoize\n from Products.CMFCore import permissions\n-from Products.CMFPlone.utils import normalizeString, safe_unicode\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import normalizeString\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-\n-from plone.app.workflow import PloneMessageFactory as _\n-from plone.app.workflow.interfaces import ISharingPageRole\n-from plone.app.workflow.events import LocalrolesModifiedEvent\n+from zExceptions import Forbidden\n+from zope.component import getMultiAdapter\n+from zope.component import getUtilitiesFor\n+from zope.event import notify\n+from zope.i18n import translate\n \n import json\n \n+\n AUTH_GROUP = \'AuthenticatedUsers\'\n STICKY = (AUTH_GROUP, )\n \ndiff --git a/plone/app/workflow/events.py b/plone/app/workflow/events.py\nindex 0185b55..d3bf4de 100644\n--- a/plone/app/workflow/events.py\n+++ b/plone/app/workflow/events.py\n@@ -1,6 +1,6 @@\n+from plone.app.workflow.interfaces import ILocalrolesModifiedEvent\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectModifiedEvent\n-from plone.app.workflow.interfaces import ILocalrolesModifiedEvent\n \n \n @implementer(ILocalrolesModifiedEvent)\ndiff --git a/plone/app/workflow/exportimport.py b/plone/app/workflow/exportimport.py\nindex 3cfca7a..e08e92e 100644\n--- a/plone/app/workflow/exportimport.py\n+++ b/plone/app/workflow/exportimport.py\n@@ -1,20 +1,19 @@\n-import six\n from persistent import Persistent\n-from zope.interface import implementer\n-\n from plone.app.workflow.interfaces import ISharingPageRole\n-\n+from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.interfaces import ISetupEnviron\n+from Products.GenericSetup.utils import XMLAdapterBase\n from zope.component import adapts\n from zope.component import getSiteManager\n from zope.component import queryMultiAdapter\n from zope.dottedname.resolve import resolve\n+from zope.i18nmessageid import MessageFactory\n+from zope.interface import implementer\n from zope.interface.interfaces import IComponentRegistry\n \n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.interfaces import ISetupEnviron\n-from Products.GenericSetup.utils import XMLAdapterBase\n+import six\n+\n \n-from zope.i18nmessageid import MessageFactory\n PMF = MessageFactory(\'plone\')\n \n \ndiff --git a/plone/app/workflow/interfaces.py b/plone/app/workflow/interfaces.py\nindex 73ddac9..780b556 100644\n--- a/plone/app/workflow/interfaces.py\n+++ b/plone/app/workflow/interfaces.py\n@@ -1,6 +1,6 @@\n+from zope import schema\n from zope.interface import Interface\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-from zope import schema\n \n \n class ILocalrolesModifiedEvent(IObjectModifiedEvent):\ndiff --git a/plone/app/workflow/localroles.py b/plone/app/workflow/localroles.py\nindex 15b83f8..4b13370 100644\n--- a/plone/app/workflow/localroles.py\n+++ b/plone/app/workflow/localroles.py\n@@ -1,9 +1,11 @@\n-from zope.interface import implementer\n-from plone.app.workflow.interfaces import ISharingPageRole\n from plone.app.workflow import permissions\n+from plone.app.workflow import PloneMessageFactory as _\n+from plone.app.workflow.interfaces import ISharingPageRole\n+from zope.interface import implementer\n+\n+\n #from Products.CMFCore import permissions as core_permissions\n \n-from plone.app.workflow import PloneMessageFactory as _\n \n """\n XXX: policy explanation\ndiff --git a/plone/app/workflow/permissions.py b/plone/app/workflow/permissions.py\nindex 6b489d4..bbe1793 100644\n--- a/plone/app/workflow/permissions.py\n+++ b/plone/app/workflow/permissions.py\n@@ -2,6 +2,7 @@\n from AccessControl import ModuleSecurityInfo\n from AccessControl.Permission import addPermission\n \n+\n security = ModuleSecurityInfo("plone.app.workflow.permissions")\n \n # Controls access to the "sharing" page\ndiff --git a/plone/app/workflow/remap.py b/plone/app/workflow/remap.py\nindex d4488fd..0f9252f 100644\n--- a/plone/app/workflow/remap.py\n+++ b/plone/app/workflow/remap.py\n@@ -1,13 +1,14 @@\n import transaction\n \n+\n SAVE_THRESHOLD = 100 # Do a savepoint every so often\n _marker = object()\n \n-from Products.CMFCore.utils import getToolByName\n-from Products.DCWorkflow.utils import modifyRolesForPermission\n #from Persistence import PersistentMapping\n #from Acquisition import aq_base\n from DateTime import DateTime\n+from Products.CMFCore.utils import getToolByName\n+from Products.DCWorkflow.utils import modifyRolesForPermission\n \n \n def remap_workflow(context, type_ids, chain, state_map={}):\ndiff --git a/plone/app/workflow/tests/test_exportimport.py b/plone/app/workflow/tests/test_exportimport.py\nindex 1082f38..5c25525 100644\n--- a/plone/app/workflow/tests/test_exportimport.py\n+++ b/plone/app/workflow/tests/test_exportimport.py\n@@ -3,20 +3,20 @@\n from OFS.Folder import Folder\n from plone.app.workflow.exportimport import export_sharing\n from plone.app.workflow.exportimport import import_sharing\n-from plone.app.workflow.exportimport import SharingXMLAdapter\n from plone.app.workflow.exportimport import PersistentSharingPageRole\n+from plone.app.workflow.exportimport import SharingXMLAdapter\n from plone.app.workflow.interfaces import ISharingPageRole\n from plone.testing.zca import UNIT_TESTING\n-from Products.GenericSetup.tests.common import DummyImportContext\n from Products.GenericSetup.tests.common import DummyExportContext\n+from Products.GenericSetup.tests.common import DummyImportContext\n from zope.component import getSiteManager\n from zope.component import getUtilitiesFor\n from zope.component import provideAdapter\n from zope.component import provideUtility\n-from zope.interface import Interface\n from zope.component.hooks import clearSite\n from zope.component.hooks import setHooks\n from zope.component.hooks import setSite\n+from zope.interface import Interface\n \n import unittest\n \ndiff --git a/plone/app/workflow/tests/test_folder_workflow.py b/plone/app/workflow/tests/test_folder_workflow.py\nindex a9e5874..5a5944d 100644\n--- a/plone/app/workflow/tests/test_folder_workflow.py\n+++ b/plone/app/workflow/tests/test_folder_workflow.py\n@@ -3,11 +3,11 @@\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ListFolderContents\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.WorkflowCore import WorkflowException\n \n import unittest\ndiff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py\nindex b219a0c..c1dd11f 100644\n--- a/plone/app/workflow/tests/test_functional.py\n+++ b/plone/app/workflow/tests/test_functional.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing import setRoles\n from plone.app.testing import login\n from plone.app.testing import logout\n-from plone.app.workflow.testing import PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING\n+from plone.app.testing import setRoles\n from plone.app.workflow.testing import optionflags\n+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING\n from plone.testing import layered\n from Products.CMFCore.utils import getToolByName\n \ndiff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py\nindex 39b5892..e79b2b3 100644\n--- a/plone/app/workflow/tests/test_one_state_workflow.py\n+++ b/plone/app/workflow/tests/test_one_state_workflow.py\n@@ -4,10 +4,10 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_NAME\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n \n import unittest\n \ndiff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py\nindex ffb7ddc..21de51a 100644\n--- a/plone/app/workflow/tests/test_plone_workflow.py\n+++ b/plone/app/workflow/tests/test_plone_workflow.py\n@@ -4,11 +4,11 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_NAME\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n+from Products.CMFCore.WorkflowCore import WorkflowException\n \n import unittest\n \ndiff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py\nindex f42febf..f259cf2 100644\n--- a/plone/app/workflow/tests/test_simple_publication_workflow.py\n+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py\n@@ -2,11 +2,11 @@\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n+from Products.CMFCore.WorkflowCore import WorkflowException\n \n import unittest\n \ndiff --git a/plone/app/workflow/tests/utils.py b/plone/app/workflow/tests/utils.py\nindex 0771e31..baebe6e 100644\n--- a/plone/app/workflow/tests/utils.py\n+++ b/plone/app/workflow/tests/utils.py\n@@ -1,5 +1,6 @@\n import doctest\n \n+\n # Standard options for DocTests\n optionflags = (doctest.ELLIPSIS |\n                doctest.NORMALIZE_WHITESPACE |\ndiff --git a/setup.cfg b/setup.cfg\nindex fe15aba..0e598c7 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,3 +3,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 4d77c22..6a0ea67 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = \'5.0.0a3.dev0\'\n \n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T21:01:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/53a5ed9c959ce2c5c03e7ca47e286e7fcdf5c18a

black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/workflow/__init__.py
M plone/app/workflow/browser/__init__.py
M plone/app/workflow/browser/sharing.py
M plone/app/workflow/events.py
M plone/app/workflow/exportimport.py
M plone/app/workflow/interfaces.py
M plone/app/workflow/localroles.py
M plone/app/workflow/permissions.py
M plone/app/workflow/remap.py
M plone/app/workflow/testing.py
M plone/app/workflow/tests/test_exportimport.py
M plone/app/workflow/tests/test_folder_workflow.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_remap.py
M plone/app/workflow/tests/test_sharing_view.py
M plone/app/workflow/tests/test_simple_publication_workflow.py
M plone/app/workflow/tests/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/app/workflow/__init__.py b/plone/app/workflow/__init__.py\nindex 75a83d5..36ed231 100644\n--- a/plone/app/workflow/__init__.py\n+++ b/plone/app/workflow/__init__.py\n@@ -4,4 +4,4 @@\n import plone.app.workflow.permissions\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/app/workflow/browser/__init__.py b/plone/app/workflow/browser/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/app/workflow/browser/__init__.py\n+++ b/plone/app/workflow/browser/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/workflow/browser/sharing.py b/plone/app/workflow/browser/sharing.py\nindex 45631bb..ca271bc 100644\n--- a/plone/app/workflow/browser/sharing.py\n+++ b/plone/app/workflow/browser/sharing.py\n@@ -23,8 +23,8 @@\n import json\n \n \n-AUTH_GROUP = \'AuthenticatedUsers\'\n-STICKY = (AUTH_GROUP, )\n+AUTH_GROUP = "AuthenticatedUsers"\n+STICKY = (AUTH_GROUP,)\n \n \n def merge_search_results(results, key):\n@@ -32,15 +32,15 @@ def merge_search_results(results, key):\n \n     Based on PlonePAS.browser.search.PASSearchView.merge.\n     """\n-    output={}\n+    output = {}\n     for entry in results:\n-        id=entry[key]\n+        id = entry[key]\n         if id not in output:\n-            output[id]=entry.copy()\n+            output[id] = entry.copy()\n         else:\n-            buf=entry.copy()\n+            buf = entry.copy()\n             buf.update(output[id])\n-            output[id]=buf\n+            output[id] = buf\n \n     return output.values()\n \n@@ -49,20 +49,18 @@ class SharingView(BrowserView):\n \n     # Actions\n \n-    template = ViewPageTemplateFile(\'sharing.pt\')\n-    macro_wrapper = ViewPageTemplateFile(\'macro_wrapper.pt\')\n+    template = ViewPageTemplateFile("sharing.pt")\n+    macro_wrapper = ViewPageTemplateFile("macro_wrapper.pt")\n \n     STICKY = STICKY\n \n     def __call__(self):\n-        """Perform the update and redirect if necessary, or render the page\n-        """\n+        """Perform the update and redirect if necessary, or render the page"""\n         postback = self.handle_form()\n         if postback:\n             return self.template()\n         else:\n-            context_state = self.context.restrictedTraverse(\n-                "@@plone_context_state")\n+            context_state = self.context.restrictedTraverse("@@plone_context_state")\n             url = context_state.view_url()\n             self.request.response.redirect(url)\n \n@@ -74,43 +72,44 @@ def handle_form(self):\n         postback = True\n \n         form = self.request.form\n-        submitted = form.get(\'form.submitted\', False)\n-        save_button = form.get(\'form.button.Save\', None) is not None\n-        cancel_button = form.get(\'form.button.Cancel\', None) is not None\n+        submitted = form.get("form.submitted", False)\n+        save_button = form.get("form.button.Save", None) is not None\n+        cancel_button = form.get("form.button.Cancel", None) is not None\n         if submitted and save_button and not cancel_button:\n-            if not self.request.get(\'REQUEST_METHOD\', \'GET\') == \'POST\':\n+            if not self.request.get("REQUEST_METHOD", "GET") == "POST":\n                 raise Forbidden\n \n-            authenticator = self.context.restrictedTraverse(\'@@authenticator\',\n-                                                            None)\n+            authenticator = self.context.restrictedTraverse("@@authenticator", None)\n             if not authenticator.verify():\n                 raise Forbidden\n \n             # Update the acquire-roles setting\n             if self.can_edit_inherit():\n-                inherit = bool(form.get(\'inherit\', False))\n+                inherit = bool(form.get("inherit", False))\n                 reindex = self.update_inherit(inherit, reindex=False)\n             else:\n                 reindex = False\n \n             # Update settings for users and groups\n-            entries = form.get(\'entries\', [])\n-            roles = [r[\'id\'] for r in self.roles()]\n+            entries = form.get("entries", [])\n+            roles = [r["id"] for r in self.roles()]\n             settings = []\n             for entry in entries:\n                 settings.append(\n-                    dict(id=entry[\'id\'],\n-                         type=entry[\'type\'],\n-                         roles=[r for r in roles\n-                            if entry.get(\'role_%s\' % r, False)]))\n+                    dict(\n+                        id=entry["id"],\n+                        type=entry["type"],\n+                        roles=[r for r in roles if entry.get("role_%s" % r, False)],\n+                    )\n+                )\n             if settings:\n-                reindex = self.update_role_settings(settings, reindex=False) \\\n-                            or reindex\n+                reindex = self.update_role_settings(settings, reindex=False) or reindex\n             if reindex:\n                 self.context.reindexObjectSecurity()\n                 notify(LocalrolesModifiedEvent(self.context, self.request))\n             IStatusMessage(self.request).addStatusMessage(\n-                _(u"Changes saved."), type=\'info\')\n+                _(u"Changes saved."), type="info"\n+            )\n \n         # Other buttons return to the sharing page\n         if cancel_button:\n@@ -130,7 +129,7 @@ def roles(self):\n             - title\n         """\n         context = self.context\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n \n         pairs = []\n \n@@ -140,12 +139,14 @@ def roles(self):\n                 if not portal_membership.checkPermission(permission, context):\n                     continue\n             # be friendly to utilities implemented without required_interface\n-            iface = getattr(utility, \'required_interface\', None)\n+            iface = getattr(utility, "required_interface", None)\n             if iface is not None and not iface.providedBy(context):\n                 continue\n-            pairs.append(dict(id = name, title = utility.title))\n+            pairs.append(dict(id=name, title=utility.title))\n \n-        pairs.sort(key=lambda x: normalizeString(translate(x["title"], context=self.request)))\n+        pairs.sort(\n+            key=lambda x: normalizeString(translate(x["title"], context=self.request))\n+        )\n         return pairs\n \n     @memoize\n@@ -173,17 +174,16 @@ def role_settings(self):\n         # We may be called when the user does a search instead of an update.\n         # In that case we must not loose the changes the user made and\n         # merge those into the role settings.\n-        requested = self.request.form.get(\'entries\', None)\n+        requested = self.request.form.get("entries", None)\n         if requested is not None:\n-            knownroles = [r[\'id\'] for r in self.roles()]\n+            knownroles = [r["id"] for r in self.roles()]\n             settings = {}\n             for entry in requested:\n-                roles = [r for r in knownroles\n-                                if entry.get(\'role_%s\' % r, False)]\n-                settings[(entry[\'id\'], entry[\'type\'])] = roles\n+                roles = [r for r in knownroles if entry.get("role_%s" % r, False)]\n+                settings[(entry["id"], entry["type"])] = roles\n \n             for entry in current_settings:\n-                desired_roles = settings.get((entry[\'id\'], entry[\'type\']), None)\n+                desired_roles = settings.get((entry["id"], entry["type"]), None)\n \n                 if desired_roles is None:\n                     continue\n@@ -191,7 +191,9 @@ def role_settings(self):\n                     if entry["roles"][role] in [True, False]:\n                         entry["roles"][role] = role in desired_roles\n \n-        current_settings.sort(key=lambda x: safe_unicode(x["type"])+safe_unicode(x["title"]))\n+        current_settings.sort(\n+            key=lambda x: safe_unicode(x["type"]) + safe_unicode(x["title"])\n+        )\n \n         return current_settings\n \n@@ -202,11 +204,10 @@ def can_edit_inherit(self):\n         return True\n \n     def inherited(self, context=None):\n-        """Return True if local roles are inherited here.\n-        """\n+        """Return True if local roles are inherited here."""\n         if context is None:\n             context = self.context\n-        if getattr(aq_base(context), \'__ac_local_roles_block__\', None):\n+        if getattr(aq_base(context), "__ac_local_roles_block__", None):\n             return False\n         return True\n \n@@ -221,9 +222,9 @@ def existing_role_settings(self):\n         """\n         context = self.context\n \n-        portal_membership = getToolByName(context, \'portal_membership\')\n-        portal_groups = getToolByName(context, \'portal_groups\')\n-        acl_users = getToolByName(context, \'acl_users\')\n+        portal_membership = getToolByName(context, "portal_membership")\n+        portal_groups = getToolByName(context, "portal_groups")\n+        acl_users = getToolByName(context, "acl_users")\n \n         info = []\n \n@@ -231,53 +232,59 @@ def existing_role_settings(self):\n \n         local_roles = acl_users._getLocalRolesForDisplay(context)\n         acquired_roles = self._inherited_roles() + self._borg_localroles()\n-        available_roles = [r[\'id\'] for r in self.roles()]\n+        available_roles = [r["id"] for r in self.roles()]\n \n         # first process acquired roles\n         items = {}\n         for name, roles, rtype, rid in acquired_roles:\n-            items[rid] = dict(id = rid,\n-                              name = name,\n-                              type = rtype,\n-                              sitewide = [],\n-                              acquired = roles,\n-                              local = [], )\n+            items[rid] = dict(\n+                id=rid,\n+                name=name,\n+                type=rtype,\n+                sitewide=[],\n+                acquired=roles,\n+                local=[],\n+            )\n \n         # second process local roles\n         for name, roles, rtype, rid in local_roles:\n             if rid in items:\n-                items[rid][\'local\'] = roles\n+                items[rid]["local"] = roles\n             else:\n-                items[rid] = dict(id = rid,\n-                                  name = name,\n-                                  type = rtype,\n-                                  sitewide = [],\n-                                  acquired = [],\n-                                  local = roles, )\n+                items[rid] = dict(\n+                    id=rid,\n+                    name=name,\n+                    type=rtype,\n+                    sitewide=[],\n+                    acquired=[],\n+                    local=roles,\n+                )\n \n         # Make sure we always get the authenticated users virtual group\n         if AUTH_GROUP not in items:\n-            items[AUTH_GROUP] = dict(id = AUTH_GROUP,\n-                                     name = _(u\'Logged-in users\'),\n-                                     type = \'group\',\n-                                     sitewide = [],\n-                                     acquired = [],\n-                                     local = [], )\n+            items[AUTH_GROUP] = dict(\n+                id=AUTH_GROUP,\n+                name=_(u"Logged-in users"),\n+                type="group",\n+                sitewide=[],\n+                acquired=[],\n+                local=[],\n+            )\n \n         # If the current user has been given roles, remove them so that he\n         # doesn\'t accidentally lock himself out.\n \n         member = portal_membership.getAuthenticatedMember()\n         if member.getId() in items:\n-            items[member.getId()][\'disabled\'] = True\n+            items[member.getId()]["disabled"] = True\n \n         # Sort the list: first the authenticated users virtual group, then\n         # all other groups and then all users, alphabetically\n \n-        dec_users = [(a[\'id\'] not in self.STICKY,\n-                       a[\'type\'],\n-                       a[\'name\'],\n-                       a) for a in items.values()]\n+        dec_users = [\n+            (a["id"] not in self.STICKY, a["type"], a["name"], a)\n+            for a in items.values()\n+        ]\n         dec_users.sort()\n \n         # Add the items to the info dict, assigning full name if possible.\n@@ -285,18 +292,20 @@ def existing_role_settings(self):\n \n         for d in dec_users:\n             item = d[-1]\n-            name = item[\'name\']\n-            rid = item[\'id\']\n+            name = item["name"]\n+            rid = item["id"]\n             login = rid\n             global_roles = set()\n \n-            if item[\'type\'] == \'user\':\n+            if item["type"] == "user":\n                 member = acl_users.getUserById(rid)\n                 if member is not None:\n-                    name = member.getProperty(\'fullname\') or member.getUserName() or name\n+                    name = (\n+                        member.getProperty("fullname") or member.getUserName() or name\n+                    )\n                     global_roles = set(member.getRoles())\n                     login = member.getUserName()\n-            elif item[\'type\'] == \'group\':\n+            elif item["type"] == "group":\n                 g = portal_groups.getGroupById(rid)\n                 name = g.getGroupTitleOrName()\n                 login = None\n@@ -304,41 +313,45 @@ def existing_role_settings(self):\n \n                 # This isn\'t a proper group, so it needs special treatment :(\n                 if rid == AUTH_GROUP:\n-                    name = _(u\'Logged-in users\')\n-\n-            info_item = dict(id = item[\'id\'],\n-                             type = item[\'type\'],\n-                             title = name,\n-                             disabled = item.get(\'disabled\', False),\n-                             roles = {})\n+                    name = _(u"Logged-in users")\n+\n+            info_item = dict(\n+                id=item["id"],\n+                type=item["type"],\n+                title=name,\n+                disabled=item.get("disabled", False),\n+                roles={},\n+            )\n             if login != name:\n-                info_item[\'login\'] = login\n+                info_item["login"] = login\n \n             # Record role settings\n             have_roles = False\n             for r in available_roles:\n                 if r in global_roles:\n-                    info_item[\'roles\'][r] = \'global\'\n-                elif r in item[\'acquired\']:\n-                    info_item[\'roles\'][r] = \'acquired\'\n-                    have_roles = True # we want to show acquired roles\n-                elif r in item[\'local\']:\n-                    info_item[\'roles\'][r] = True\n-                    have_roles = True # at least one role is set\n+                    info_item["roles"][r] = "global"\n+                elif r in item["acquired"]:\n+                    info_item["roles"][r] = "acquired"\n+                    have_roles = True  # we want to show acquired roles\n+                elif r in item["local"]:\n+                    info_item["roles"][r] = True\n+                    have_roles = True  # at least one role is set\n                 else:\n-                    info_item[\'roles\'][r] = False\n+                    info_item["roles"][r] = False\n \n             if have_roles or rid in self.STICKY:\n                 info.append(info_item)\n \n         return info\n \n-    def _principal_search_results(self,\n-                                  search_for_principal,\n-                                  get_principal_by_id,\n-                                  get_principal_title,\n-                                  principal_type,\n-                                  id_key):\n+    def _principal_search_results(\n+        self,\n+        search_for_principal,\n+        get_principal_by_id,\n+        get_principal_title,\n+        principal_type,\n+        id_key,\n+    ):\n         """Return search results for a query to add new users or groups.\n \n         Returns a list of dicts, as per role_settings().\n@@ -359,18 +372,24 @@ def _principal_search_results(self,\n         """\n         context = self.context\n \n-        translated_message = translate(_(u"Search for user or group"),\n-                context=self.request)\n-        search_term = safe_unicode(self.request.form.get(\'search_term\', None))\n+        translated_message = translate(\n+            _(u"Search for user or group"), context=self.request\n+        )\n+        search_term = safe_unicode(self.request.form.get("search_term", None))\n         if not search_term or search_term == translated_message:\n             return []\n \n-        existing_principals = set([p[\'id\'] for p in self.existing_role_settings()\n-                                if p[\'type\'] == principal_type])\n-        empty_roles = dict([(r[\'id\'], False) for r in self.roles()])\n+        existing_principals = set(\n+            [\n+                p["id"]\n+                for p in self.existing_role_settings()\n+                if p["type"] == principal_type\n+            ]\n+        )\n+        empty_roles = dict([(r["id"], False) for r in self.roles()])\n         info = []\n \n-        hunter = getMultiAdapter((context, self.request), name=\'pas_search\')\n+        hunter = getMultiAdapter((context, self.request), name="pas_search")\n         for principal_info in search_for_principal(hunter, search_term):\n             principal_id = principal_info[id_key]\n             if principal_id not in existing_principals:\n@@ -381,16 +400,19 @@ def _principal_search_results(self,\n \n                 for r in principal.getRoles():\n                     if r in roles:\n-                        roles[r] = \'global\'\n+                        roles[r] = "global"\n                 login = principal.getUserName()\n-                if principal_type == \'group\':\n+                if principal_type == "group":\n                     login = None\n-                info.append(dict(id = principal_id,\n-                                 title = get_principal_title(principal,\n-                                                             principal_id),\n-                                 login = login,\n-                                 type = principal_type,\n-                                 roles = roles))\n+                info.append(\n+                    dict(\n+                        id=principal_id,\n+                        title=get_principal_title(principal, principal_id),\n+                        login=login,\n+                        type=principal_type,\n+                        roles=roles,\n+                    )\n+                )\n         return info\n \n     def user_search_results(self):\n@@ -400,18 +422,30 @@ def user_search_results(self):\n         """\n \n         def search_for_principal(hunter, search_term):\n-            return merge_search_results(chain(*[hunter.searchUsers(**{field: search_term})\n-                for field in [\'name\', \'fullname\', \'email\']]), \'userid\')\n+            return merge_search_results(\n+                chain(\n+                    *[\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    ]\n+                ),\n+                "userid",\n+            )\n \n         def get_principal_by_id(user_id):\n-            acl_users = getToolByName(self.context, \'acl_users\')\n+            acl_users = getToolByName(self.context, "acl_users")\n             return acl_users.getUserById(user_id)\n \n         def get_principal_title(user, default_title):\n-            return user.getProperty(\'fullname\') or user.getId() or default_title\n+            return user.getProperty("fullname") or user.getId() or default_title\n \n-        return self._principal_search_results(search_for_principal,\n-            get_principal_by_id, get_principal_title, \'user\', \'userid\')\n+        return self._principal_search_results(\n+            search_for_principal,\n+            get_principal_by_id,\n+            get_principal_title,\n+            "user",\n+            "userid",\n+        )\n \n     def group_search_results(self):\n         """Return search results for a query to add new groups.\n@@ -420,18 +454,30 @@ def group_search_results(self):\n         """\n \n         def search_for_principal(hunter, search_term):\n-            return merge_search_results(chain(*[hunter.searchGroups(**{field:search_term})\n-                for field in [\'id\', \'title\']]), \'groupid\')\n+            return merge_search_results(\n+                chain(\n+                    *[\n+                        hunter.searchGroups(**{field: search_term})\n+                        for field in ["id", "title"]\n+                    ]\n+                ),\n+                "groupid",\n+            )\n \n         def get_principal_by_id(group_id):\n-            portal_groups = getToolByName(self.context, \'portal_groups\')\n+            portal_groups = getToolByName(self.context, "portal_groups")\n             return portal_groups.getGroupById(group_id)\n \n         def get_principal_title(group, _):\n             return group.getGroupTitleOrName()\n \n-        return self._principal_search_results(search_for_principal,\n-            get_principal_by_id, get_principal_title, \'group\', \'groupid\')\n+        return self._principal_search_results(\n+            search_for_principal,\n+            get_principal_by_id,\n+            get_principal_title,\n+            "group",\n+            "groupid",\n+        )\n \n     def _inherited_roles(self):\n         """Returns a tuple with the acquired local roles."""\n@@ -440,13 +486,13 @@ def _inherited_roles(self):\n         if not self.inherited(context):\n             return ()\n \n-        portal = getToolByName(context, \'portal_url\').getPortalObject()\n+        portal = getToolByName(context, "portal_url").getPortalObject()\n         result = []\n         cont = True\n         if portal != context:\n             parent = aq_parent(context)\n             while cont:\n-                if not getattr(parent, \'acl_users\', False):\n+                if not getattr(parent, "acl_users", False):\n                     break\n                 userroles = parent.acl_users._getLocalRolesForDisplay(parent)\n                 for user, roles, role_type, name in userroles:\n@@ -473,7 +519,7 @@ def _inherited_roles(self):\n                     parent = aq_parent(parent)\n \n         # Tuplize all inner roles\n-        for pos in range(len(result)-1, -1, -1):\n+        for pos in range(len(result) - 1, -1, -1):\n             result[pos][1] = tuple(result[pos][1])\n             result[pos] = tuple(result[pos])\n \n@@ -493,8 +539,8 @@ def _borg_localroles(self):\n         borg_local_roles = pas._getAllLocalRoles(self.context)\n         for principal, roles in editable_local_roles.items():\n             borg_local_roles[principal] = [\n-                r for r in borg_local_roles.get(principal, ())\n-                if r not in roles]\n+                r for r in borg_local_roles.get(principal, ()) if r not in roles\n+            ]\n             if not borg_local_roles[principal]:\n                 del borg_local_roles[principal]\n \n@@ -502,9 +548,9 @@ def _borg_localroles(self):\n         result = []\n         for principal, roles in borg_local_roles.items():\n             username = principal\n-            userType = \'user\'\n+            userType = "user"\n             if pas.getGroup(principal):\n-                userType = \'group\'\n+                userType = "group"\n             else:\n                 user = pas.getUserById(principal)\n                 if user:\n@@ -521,15 +567,15 @@ def update_inherit(self, status=True, reindex=True):\n         are the same as the existing settings.\n         """\n         context = self.context\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n \n         if not portal_membership.checkPermission(\n-                                permissions.ModifyPortalContent, context):\n+            permissions.ModifyPortalContent, context\n+        ):\n             raise Unauthorized\n \n         block = not status\n-        oldblock = bool(getattr(aq_base(context),\n-                                \'__ac_local_roles_block__\', False))\n+        oldblock = bool(getattr(aq_base(context), "__ac_local_roles_block__", False))\n \n         if block == oldblock:\n             return False\n@@ -566,14 +612,16 @@ def update_role_settings(self, new_settings, reindex=True):\n         changed = False\n         context = self.context\n \n-        managed_roles = frozenset([r[\'id\'] for r in self.roles()])\n+        managed_roles = frozenset([r["id"] for r in self.roles()])\n         member_ids_to_clear = []\n \n         for s in new_settings:\n-            user_id = s[\'id\']\n+            user_id = s["id"]\n \n-            existing_roles = frozenset(context.get_local_roles_for_userid(userid=user_id))\n-            selected_roles = frozenset(s[\'roles\'])\n+            existing_roles = frozenset(\n+                context.get_local_roles_for_userid(userid=user_id)\n+            )\n+            selected_roles = frozenset(s["roles"])\n \n             relevant_existing_roles = managed_roles & existing_roles\n \n@@ -608,15 +656,11 @@ def update_role_settings(self, new_settings, reindex=True):\n \n         return changed\n \n-    def updateSharingInfo(self, search_term=\'\'):\n+    def updateSharingInfo(self, search_term=""):\n         self.handle_form()\n-        the_id = \'user-group-sharing\'\n+        the_id = "user-group-sharing"\n         macro = self.template.macros[the_id]\n-        res = self.macro_wrapper(the_macro=macro, instance=self.context,\n-                                 view=self)\n-        messages = self.context.restrictedTraverse(\'global_statusmessage\')()\n-        self.request.response.setHeader("Content-type","application/json")\n-        return json.dumps({\n-            \'body\': res,\n-            \'messages\': messages\n-        })\n+        res = self.macro_wrapper(the_macro=macro, instance=self.context, view=self)\n+        messages = self.context.restrictedTraverse("global_statusmessage")()\n+        self.request.response.setHeader("Content-type", "application/json")\n+        return json.dumps({"body": res, "messages": messages})\ndiff --git a/plone/app/workflow/events.py b/plone/app/workflow/events.py\nindex d3bf4de..b8b3133 100644\n--- a/plone/app/workflow/events.py\n+++ b/plone/app/workflow/events.py\n@@ -5,5 +5,4 @@\n \n @implementer(ILocalrolesModifiedEvent)\n class LocalrolesModifiedEvent(ObjectModifiedEvent):\n-    """Gets fired after local roles of an object has been changed.\n-    """\n+    """Gets fired after local roles of an object has been changed."""\ndiff --git a/plone/app/workflow/exportimport.py b/plone/app/workflow/exportimport.py\nindex e08e92e..5623e42 100644\n--- a/plone/app/workflow/exportimport.py\n+++ b/plone/app/workflow/exportimport.py\n@@ -14,7 +14,7 @@\n import six\n \n \n-PMF = MessageFactory(\'plone\')\n+PMF = MessageFactory("plone")\n \n \n @implementer(ISharingPageRole)\n@@ -27,8 +27,7 @@ class PersistentSharingPageRole(Persistent):\n     required_permission = None\n     required_interface = None\n \n-    def __init__(self, title=u"",\n-                 required_permission=None, required_interface=None):\n+    def __init__(self, title=u"", required_permission=None, required_interface=None):\n         self.title = PMF(title)\n         self.required_permission = required_permission\n         self.required_interface = required_interface\n@@ -37,9 +36,9 @@ def __init__(self, title=u"",\n class SharingXMLAdapter(XMLAdapterBase):\n     adapts(IComponentRegistry, ISetupEnviron)\n \n-    _LOGGER_ID = \'plone.app.workflow\'\n+    _LOGGER_ID = "plone.app.workflow"\n \n-    name = \'plone.app.workflow.sharing\'\n+    name = "plone.app.workflow.sharing"\n     info_tag = u"__sharing_gs__"\n \n     def _importNode(self, node):\n@@ -55,9 +54,11 @@ def _exportNode(self):\n         for reg in self._iterRoleRegistrations():\n             regs.append(self._extractRole(reg))\n \n-        node = self._doc.createElement(\'sharing\')\n+        node = self._doc.createElement("sharing")\n+\n         def _sort(key):\n-            return (key.getAttribute(\'id\'), key.getAttribute(\'title\'))\n+            return (key.getAttribute("id"), key.getAttribute("title"))\n+\n         regs.sort(key=_sort)\n         for reg in regs:\n             node.appendChild(reg)\n@@ -65,9 +66,11 @@ def _sort(key):\n \n     def _iterRoleRegistrations(self):\n         for reg in tuple(self.context.registeredUtilities()):\n-            if reg.provided.isOrExtends(ISharingPageRole) \\\n-                    and isinstance(reg.info, six.string_types)  \\\n-                    and self.info_tag in reg.info:\n+            if (\n+                reg.provided.isOrExtends(ISharingPageRole)\n+                and isinstance(reg.info, six.string_types)\n+                and self.info_tag in reg.info\n+            ):\n                 yield reg\n \n     def _purgeRoles(self):\n@@ -76,17 +79,17 @@ def _purgeRoles(self):\n \n     def _initRole(self, node):\n \n-        if node.nodeName != \'role\':\n+        if node.nodeName != "role":\n             return\n \n-        name = six.text_type(node.getAttribute(\'id\'))\n-        title = six.text_type(node.getAttribute(\'title\'))\n-        required = node.getAttribute(\'permission\') or None\n-        iface = node.getAttribute(\'interface\') or None\n+        name = six.text_type(node.getAttribute("id"))\n+        title = six.text_type(node.getAttribute("title"))\n+        required = node.getAttribute("permission") or None\n+        iface = node.getAttribute("interface") or None\n         if iface is not None:\n             iface = resolve(iface)\n \n-        if node.hasAttribute(\'remove\'):\n+        if node.hasAttribute("remove"):\n             utility = self.context.queryUtility(ISharingPageRole, name)\n             if utility is not None:\n                 if name in self.context.objectIds():\n@@ -95,25 +98,28 @@ def _initRole(self, node):\n             return\n \n         component = PersistentSharingPageRole(\n-            title=title, required_permission=required, required_interface=iface)\n+            title=title, required_permission=required, required_interface=iface\n+        )\n \n-        self.context.registerUtility(component, ISharingPageRole, name, info=self.info_tag)\n+        self.context.registerUtility(\n+            component, ISharingPageRole, name, info=self.info_tag\n+        )\n \n     def _extractRole(self, reg):\n \n         component = reg.component\n \n-        node = self._doc.createElement(\'role\')\n-        node.setAttribute(\'id\', reg.name)\n-        node.setAttribute(\'title\', component.title)\n+        node = self._doc.createElement("role")\n+        node.setAttribute("id", reg.name)\n+        node.setAttribute("title", component.title)\n \n         if component.required_permission:\n-            node.setAttribute(\'permission\', component.required_permission)\n+            node.setAttribute("permission", component.required_permission)\n \n         if component.required_interface:\n             iface = component.required_interface\n-            iface = iface.__module__ + \'.\' + iface.__name__\n-            node.setAttribute(\'interface\', iface)\n+            iface = iface.__module__ + "." + iface.__name__\n+            node.setAttribute("interface", iface)\n \n         return node\n \n@@ -121,15 +127,19 @@ def _extractRole(self, reg):\n def import_sharing(context):\n \n     sm = getSiteManager(context.getSite())\n-    logger = context.getLogger(\'plone.app.workflow\')\n+    logger = context.getLogger("plone.app.workflow")\n \n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger.info("Can not register sharing page roles, as no component registry was found.")\n+        logger.info(\n+            "Can not register sharing page roles, as no component registry was found."\n+        )\n         return\n \n-    importer = queryMultiAdapter((sm, context), IBody, name=u"plone.app.workflow.sharing")\n+    importer = queryMultiAdapter(\n+        (sm, context), IBody, name=u"plone.app.workflow.sharing"\n+    )\n     if importer:\n-        body = context.readDataFile(\'sharing.xml\')\n+        body = context.readDataFile("sharing.xml")\n         if body is not None:\n             importer.body = body\n \n@@ -137,14 +147,16 @@ def import_sharing(context):\n def export_sharing(context):\n \n     sm = getSiteManager(context.getSite())\n-    logger = context.getLogger(\'plone.app.workflow\')\n+    logger = context.getLogger("plone.app.workflow")\n \n     if sm is None or not IComponentRegistry.providedBy(sm):\n         logger.debug("Nothing to export.")\n         return\n \n-    exporter = queryMultiAdapter((sm, context), IBody, name=u"plone.app.workflow.sharing")\n+    exporter = queryMultiAdapter(\n+        (sm, context), IBody, name=u"plone.app.workflow.sharing"\n+    )\n     if exporter:\n         body = exporter.body\n         if body is not None:\n-            context.writeDataFile(\'sharing.xml\', body, exporter.mime_type)\n+            context.writeDataFile("sharing.xml", body, exporter.mime_type)\ndiff --git a/plone/app/workflow/interfaces.py b/plone/app/workflow/interfaces.py\nindex 780b556..1f2564d 100644\n--- a/plone/app/workflow/interfaces.py\n+++ b/plone/app/workflow/interfaces.py\n@@ -22,10 +22,11 @@ class ISharingPageRole(Interface):\n     title = schema.TextLine(title=u"A friendly name for the role")\n \n     required_permission = schema.TextLine(\n-        title=u"Permission required to manage this local role",\n-        required=False)\n+        title=u"Permission required to manage this local role", required=False\n+    )\n \n     required_interface = schema.Object(\n         schema=Interface,\n         title=u"Context interface required to display this role",\n-        required=False)\n+        required=False,\n+    )\ndiff --git a/plone/app/workflow/localroles.py b/plone/app/workflow/localroles.py\nindex 4b13370..b7e02ff 100644\n--- a/plone/app/workflow/localroles.py\n+++ b/plone/app/workflow/localroles.py\n@@ -4,7 +4,7 @@\n from zope.interface import implementer\n \n \n-#from Products.CMFCore import permissions as core_permissions\n+# from Products.CMFCore import permissions as core_permissions\n \n \n """\n@@ -13,6 +13,7 @@\n \n # These are for everyone\n \n+\n @implementer(ISharingPageRole)\n class ReaderRole(object):\n \n@@ -44,9 +45,10 @@ class ReviewerRole(object):\n     required_permission = permissions.DelegateReviewerRole\n     required_interface = None\n \n+\n # Only managers can manage these\n \n-#class ManagerRole(object):\n+# class ManagerRole(object):\n #    implements(ISharingPageRole)\n #\n #    title = _(u"title_can_manage", default=u"Can manage")\n@@ -54,13 +56,13 @@ class ReviewerRole(object):\n \n # Low level role that should never be dispayed\n \n-#class OwnerRole(object):\n+# class OwnerRole(object):\n #    implements(ISharingPageRole)\n #\n #    title = _(u"title_can_own", default=u"Can own")\n #    required_permission = core_permissions.ManagePortal\n \n-#class MemberRole(object):\n+# class MemberRole(object):\n #    implements(ISharingPageRole)\n #\n #    title = _(u"title_can_subscribe", default=u"Can subscribe")\ndiff --git a/plone/app/workflow/permissions.py b/plone/app/workflow/permissions.py\nindex bbe1793..5d05f34 100644\n--- a/plone/app/workflow/permissions.py\n+++ b/plone/app/workflow/permissions.py\n@@ -10,7 +10,13 @@\n DelegateRoles = "Sharing page: Delegate roles"\n addPermission(\n     DelegateRoles,\n-    (\'Manager\', \'Site Administrator\', \'Owner\', \'Editor\', \'Reviewer\', ),\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+        "Editor",\n+        "Reviewer",\n+    ),\n )\n \n # Control the individual roles\n@@ -18,26 +24,34 @@\n DelegateReaderRole = "Sharing page: Delegate Reader role"\n addPermission(\n     DelegateReaderRole,\n-    (\'Manager\', \'Site Administrator\', \'Owner\', \'Editor\', \'Reviewer\'),\n+    ("Manager", "Site Administrator", "Owner", "Editor", "Reviewer"),\n )\n \n security.declarePublic("DelegateEditorRole")\n DelegateEditorRole = "Sharing page: Delegate Editor role"\n addPermission(\n     DelegateEditorRole,\n-    (\'Manager\', \'Site Administrator\', \'Owner\', \'Editor\'),\n+    ("Manager", "Site Administrator", "Owner", "Editor"),\n )\n \n security.declarePublic("DelegateContributorRole")\n DelegateContributorRole = "Sharing page: Delegate Contributor role"\n addPermission(\n     DelegateContributorRole,\n-    (\'Manager\', \'Site Administrator\', \'Owner\',),\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+    ),\n )\n \n security.declarePublic("DelegateReviewerRole")\n DelegateReviewerRole = "Sharing page: Delegate Reviewer role"\n addPermission(\n     DelegateReviewerRole,\n-    (\'Manager\', \'Site Administrator\', \'Reviewer\',),\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Reviewer",\n+    ),\n )\ndiff --git a/plone/app/workflow/remap.py b/plone/app/workflow/remap.py\nindex 0f9252f..fc29e5f 100644\n--- a/plone/app/workflow/remap.py\n+++ b/plone/app/workflow/remap.py\n@@ -1,11 +1,11 @@\n import transaction\n \n \n-SAVE_THRESHOLD = 100 # Do a savepoint every so often\n+SAVE_THRESHOLD = 100  # Do a savepoint every so often\n _marker = object()\n \n-#from Persistence import PersistentMapping\n-#from Acquisition import aq_base\n+# from Persistence import PersistentMapping\n+# from Acquisition import aq_base\n from DateTime import DateTime\n from Products.CMFCore.utils import getToolByName\n from Products.DCWorkflow.utils import modifyRolesForPermission\n@@ -19,9 +19,9 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     """\n \n     if chain is None:\n-        chain = \'(Default)\'\n+        chain = "(Default)"\n \n-    portal_workflow = getToolByName(context, \'portal_workflow\')\n+    portal_workflow = getToolByName(context, "portal_workflow")\n \n     default_chain = portal_workflow.getDefaultChain()\n     chains_by_type = dict(portal_workflow.listChainOverrides())\n@@ -35,7 +35,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     # Update the workflow chain in portal_workflows.\n \n     # XXX: There is no decent API for this it seems :-(\n-    if chain == \'(Default)\':\n+    if chain == "(Default)":\n         cbt = portal_workflow._chains_by_type\n         for type_id in type_ids:\n             if type_id in cbt:\n@@ -53,7 +53,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     new_chain_permissions = set()\n     permissions_to_reset = {}\n \n-    if chain == \'(Default)\':\n+    if chain == "(Default)":\n         chain = default_chain\n     for c in chain:\n         if c not in chain_workflows:\n@@ -62,7 +62,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n                 new_chain_permissions.add(permission)\n \n     for typeid, oc in old_chains.items():\n-        if oc == \'(Default)\':\n+        if oc == "(Default)":\n             oc = default_chain\n         permissions_to_reset[typeid] = set()\n         for c in oc:\n@@ -72,7 +72,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n                 if permission not in new_chain_permissions:\n                     permissions_to_reset[typeid].add(permission)\n \n-    portal_catalog = getToolByName(context, \'portal_catalog\')\n+    portal_catalog = getToolByName(context, "portal_catalog")\n \n     # Then update the state of each\n     remapped_count = 0\n@@ -98,26 +98,30 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n             if old_wf is not None:\n                 old_status = portal_workflow.getStatusOf(old_wf.getId(), obj)\n                 if old_status is not None:\n-                    old_state = old_status.get(\'review_state\', None)\n+                    old_state = old_status.get("review_state", None)\n \n             # Now add a transition\n             for new_wf_name in chain:\n                 new_wf = chain_workflows[new_wf_name]\n-                new_status = {\'action\': None,\n-                              \'actor\': None,\n-                              \'comments\': \'State remapped from control panel\',\n-                              \'review_state\': state_map.get(old_state, new_wf.initial_state),\n-                              \'time\': DateTime()}\n+                new_status = {\n+                    "action": None,\n+                    "actor": None,\n+                    "comments": "State remapped from control panel",\n+                    "review_state": state_map.get(old_state, new_wf.initial_state),\n+                    "time": DateTime(),\n+                }\n                 portal_workflow.setStatusOf(new_wf_name, obj, new_status)\n \n                 # Trigger any automatic transitions, or else just make sure the role mappings are right\n-                auto_transition = new_wf._findAutomaticTransition(obj, new_wf._getWorkflowStateOf(obj))\n+                auto_transition = new_wf._findAutomaticTransition(\n+                    obj, new_wf._getWorkflowStateOf(obj)\n+                )\n                 if auto_transition is not None:\n                     new_wf._changeStateOf(obj, auto_transition)\n                 else:\n                     new_wf.updateRoleMappingsFor(obj)\n \n-        obj.reindexObject(idxs=[\'allowedRolesAndUsers\', \'review_state\'])\n+        obj.reindexObject(idxs=["allowedRolesAndUsers", "review_state"])\n \n         remapped_count += 1\n         threshold_count += 1\ndiff --git a/plone/app/workflow/testing.py b/plone/app/workflow/testing.py\nindex 99bae91..c97ea87 100644\n--- a/plone/app/workflow/testing.py\n+++ b/plone/app/workflow/testing.py\n@@ -9,43 +9,111 @@\n \n \n class PloneAppWorkflowLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.app.workflow\n+\n         self.loadZCML(package=plone.app.workflow)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n \n-        acl_users.userFolderAddUser(\'manager\', \'secret\', [\'Manager\', ], [])\n-        acl_users.userFolderAddUser(\'member\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'owner\', \'secret\', [\'Owner\', ], [])\n-        acl_users.userFolderAddUser(\'reviewer\', \'secret\', [\'Reviewer\', ], [])\n-        acl_users.userFolderAddUser(\'editor\', \'secret\', [\'Editor\', ], [])\n-        acl_users.userFolderAddUser(\'reader\', \'secret\', [\'Reader\', ], [])\n+        acl_users.userFolderAddUser(\n+            "manager",\n+            "secret",\n+            [\n+                "Manager",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "member",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "owner",\n+            "secret",\n+            [\n+                "Owner",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "reviewer",\n+            "secret",\n+            [\n+                "Reviewer",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "editor",\n+            "secret",\n+            [\n+                "Editor",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "reader",\n+            "secret",\n+            [\n+                "Reader",\n+            ],\n+            [],\n+        )\n \n-        acl_users.userFolderAddUser(\'delegate_reader\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'delegate_editor\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'delegate_contributor\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'delegate_reviewer\', \'secret\', [\'Member\', ], [])\n+        acl_users.userFolderAddUser(\n+            "delegate_reader",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "delegate_editor",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "delegate_contributor",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "delegate_reviewer",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n \n \n PLONE_APP_WORKFLOW_FIXTURE = PloneAppWorkflowLayer()\n \n PLONE_APP_WORKFLOW_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),\n-    name=\'PloneAppWorkflowLayer:Integration\',\n+    bases=(PLONE_APP_WORKFLOW_FIXTURE,),\n+    name="PloneAppWorkflowLayer:Integration",\n )\n \n PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),\n-    name=\'PloneAppWorkflowLayer:Functional\',\n+    bases=(PLONE_APP_WORKFLOW_FIXTURE,),\n+    name="PloneAppWorkflowLayer:Functional",\n )\n \n optionflags = (\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-    | doctest.ELLIPSIS\n-    | doctest.NORMALIZE_WHITESPACE\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n )\ndiff --git a/plone/app/workflow/tests/test_exportimport.py b/plone/app/workflow/tests/test_exportimport.py\nindex 5c25525..37c8687 100644\n--- a/plone/app/workflow/tests/test_exportimport.py\n+++ b/plone/app/workflow/tests/test_exportimport.py\n@@ -26,9 +26,9 @@ class ExportImportTest(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def setUp(self):\n-        provideAdapter(SharingXMLAdapter, name=\'plone.app.workflow.sharing\')\n+        provideAdapter(SharingXMLAdapter, name="plone.app.workflow.sharing")\n \n-        site = Folder(\'plone\')\n+        site = Folder("plone")\n         make_objectmanager_site(site)\n         setHooks()\n         setSite(site)\n@@ -45,12 +45,11 @@ def tearDown(self):\n \n \n class TestImport(ExportImportTest):\n-\n     def test_empty_import_no_purge(self):\n \n         xml = "<sharing />"\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n \n@@ -67,16 +66,16 @@ def test_import_single_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n \n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n     def test_import_multiple_no_purge(self):\n \n@@ -91,17 +90,17 @@ def test_import_multiple_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n-        self.assertEqual(\'Can control\', roles[\'Controller\'].title)\n-        self.assertEqual(None, roles[\'Controller\'].required_permission)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n+        self.assertEqual("Can control", roles["Controller"].title)\n+        self.assertEqual(None, roles["Controller"].required_permission)\n \n     def test_import_multiple_times_no_purge(self):\n \n@@ -114,15 +113,15 @@ def test_import_multiple_times_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n         xml = """\\\n <sharing>\n@@ -131,17 +130,17 @@ def test_import_multiple_times_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n-        self.assertEqual(\'Can control\', roles[\'Controller\'].title)\n-        self.assertEqual(None, roles[\'Controller\'].required_permission)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n+        self.assertEqual("Can control", roles["Controller"].title)\n+        self.assertEqual(None, roles["Controller"].required_permission)\n \n     def test_import_multiples_times_purge(self):\n \n@@ -154,15 +153,15 @@ def test_import_multiples_times_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n         xml = """\\\n <sharing>\n@@ -171,14 +170,14 @@ def test_import_multiples_times_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=True)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can control\', roles[\'Controller\'].title)\n-        self.assertEqual(None, roles[\'Controller\'].required_permission)\n+        self.assertEqual("Can control", roles["Controller"].title)\n+        self.assertEqual(None, roles["Controller"].required_permission)\n \n     def test_import_multiples_times_no_purge_overwrite(self):\n \n@@ -191,15 +190,15 @@ def test_import_multiples_times_no_purge_overwrite(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n         xml = """\\\n <sharing>\n@@ -209,19 +208,25 @@ def test_import_multiples_times_no_purge_overwrite(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can edit copy\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate: CopyEditor\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(None, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can edit copy", roles["CopyEditor"].title)\n+        self.assertEqual(\n+            "Delegate: CopyEditor", roles["CopyEditor"].required_permission\n+        )\n+        self.assertEqual(None, roles["CopyEditor"].required_interface)\n \n     def test_import_override_global(self):\n \n-        provideUtility(PersistentSharingPageRole("Do stuff", "A permission"), ISharingPageRole, name="DoerOfStuff")\n+        provideUtility(\n+            PersistentSharingPageRole("Do stuff", "A permission"),\n+            ISharingPageRole,\n+            name="DoerOfStuff",\n+        )\n \n         xml = """\\\n <sharing>\n@@ -234,17 +239,19 @@ def test_import_override_global(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(None, roles[\'CopyEditor\'].required_interface)\n-        self.assertEqual(\'Can do stuff\', roles[\'DoerOfStuff\'].title)\n-        self.assertEqual(\'Delegate doing stuff\', roles[\'DoerOfStuff\'].required_permission)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(None, roles["CopyEditor"].required_interface)\n+        self.assertEqual("Can do stuff", roles["DoerOfStuff"].title)\n+        self.assertEqual(\n+            "Delegate doing stuff", roles["DoerOfStuff"].required_permission\n+        )\n \n     def test_remove_one(self):\n \n@@ -256,13 +263,13 @@ def test_remove_one(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n \n         xml = """\\\n <sharing>\n@@ -271,7 +278,7 @@ def test_remove_one(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n@@ -290,7 +297,7 @@ def test_remove_multiple(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n         import_sharing(context)\n \n         xml = """\\\n@@ -305,18 +312,17 @@ def test_remove_multiple(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can do stuff\', roles[\'DoerOfStuff\'].title)\n-        self.assertEqual(\'Can hack\', roles[\'Hacker\'].title)\n+        self.assertEqual("Can do stuff", roles["DoerOfStuff"].title)\n+        self.assertEqual("Can hack", roles["Hacker"].title)\n \n \n class TestExport(ExportImportTest):\n-\n     def test_export_empty(self):\n \n         xml = b"""\\\n@@ -326,17 +332,25 @@ def test_export_empty(self):\n         context = DummyExportContext(self.site)\n         export_sharing(context)\n \n-        self.assertEqual(u\'sharing.xml\', context._wrote[0][0])\n+        self.assertEqual(u"sharing.xml", context._wrote[0][0])\n         self.assertEqual(xml, context._wrote[0][1])\n \n     def test_export_multiple(self):\n         sm = self.site.getSiteManager()\n \n         # Will not be exported, as it\'s global\n-        provideUtility(PersistentSharingPageRole("Do stuff", "A permission"), ISharingPageRole, name="DoerOfStuff")\n+        provideUtility(\n+            PersistentSharingPageRole("Do stuff", "A permission"),\n+            ISharingPageRole,\n+            name="DoerOfStuff",\n+        )\n \n         # Will not be exported, as it wasn\'t imported with this handler\n-        sm.registerUtility(PersistentSharingPageRole("Do other Stuff"), ISharingPageRole, "DoerOfOtherStuff")\n+        sm.registerUtility(\n+            PersistentSharingPageRole("Do other Stuff"),\n+            ISharingPageRole,\n+            "DoerOfOtherStuff",\n+        )\n \n         import_xml = b"""\\\n <sharing>\n@@ -356,13 +370,13 @@ def test_export_multiple(self):\n """\n \n         import_context = DummyImportContext(self.site, purge=False)\n-        import_context._files = {\'sharing.xml\': import_xml}\n+        import_context._files = {"sharing.xml": import_xml}\n \n         import_sharing(import_context)\n \n         export_context = DummyExportContext(self.site)\n         export_sharing(export_context)\n \n-        self.assertEqual(\'sharing.xml\', export_context._wrote[0][0])\n+        self.assertEqual("sharing.xml", export_context._wrote[0][0])\n \n         self.assertEqual(export_xml, export_context._wrote[0][1])\ndiff --git a/plone/app/workflow/tests/test_folder_workflow.py b/plone/app/workflow/tests/test_folder_workflow.py\nindex 5a5944d..7fd0549 100644\n--- a/plone/app/workflow/tests/test_folder_workflow.py\n+++ b/plone/app/workflow/tests/test_folder_workflow.py\n@@ -18,232 +18,239 @@ class TestFolderWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n-        self.workflow.setChainForPortalTypes([\'Folder\'], \'folder_workflow\')\n+        login(self.portal, "manager")\n+        self.workflow.setChainForPortalTypes(["Folder"], "folder_workflow")\n \n-        self.portal.invokeFactory(\'Folder\', id=\'dir\')\n+        self.portal.invokeFactory("Folder", id="dir")\n         self.dir = self.portal.dir\n \n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     # Check allowed transitions\n \n     def testOwnerHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'private\'))\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.assertTrue(self.catalog(id="dir", review_state="private"))\n \n     def testOwnerShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.workflow.doActionFor(self.dir, \'show\')\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'visible\'))\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.workflow.doActionFor(self.dir, "show")\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.assertTrue(self.catalog(id="dir", review_state="visible"))\n \n     def testOwnerPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testOwnerPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testOwnerHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'private\'))\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.assertTrue(self.catalog(id="dir", review_state="private"))\n \n     def testOwnerRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.workflow.doActionFor(self.dir, \'retract\')\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'visible\'))\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.workflow.doActionFor(self.dir, "retract")\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.assertTrue(self.catalog(id="dir", review_state="visible"))\n \n     def testManagerPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testManagerPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testManagerRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'retract\')\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'visible\'))\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "retract")\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.assertTrue(self.catalog(id="dir", review_state="visible"))\n \n     # Check forbidden transitions\n \n     def testMemberHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'member\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testMemberShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'show\',\n+            "show",\n         )\n \n     def testMemberPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'member\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testMemberPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testMemberHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testMemberRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'retract\',\n+            "retract",\n         )\n \n     def testReviewerHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'reviewer\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testReviewerShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'show\',\n+            "show",\n         )\n \n     def testReviewerPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'reviewer\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testReviewerPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testReviewerHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testReviewerRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'retract\',\n+            "retract",\n         )\n \n     def testManagerHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "hide")\n \n     def testManagerShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'show\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "show")\n \n     def testManagerHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "hide")\n \n     # Check view permissions\n \n@@ -251,53 +258,53 @@ def testViewVisibleFolder(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.dir))\n \n     def testViewIsNotAcquiredInVisibleState(self):\n-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), \'\')\n+        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(View, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(View, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(View, self.dir))\n \n     def testViewIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.dir))\n \n     def testViewIsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), "")\n \n     # Check access contents info permission\n \n@@ -305,10 +312,10 @@ def testAccessVisibleFolderContents(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Anonymous is allowed\n         logout()\n@@ -317,49 +324,49 @@ def testAccessVisibleFolderContents(self):\n     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPrivateFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))\n \n     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPublishedFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     # Check modify contents permission\n@@ -368,10 +375,10 @@ def testModifyVisibleFolderContents(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Anonymous is denied\n         logout()\n@@ -380,49 +387,49 @@ def testModifyVisibleFolderContents(self):\n     def testModifyPortalContentIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPrivateFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n \n     def testModifyPortalContentIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPublishedFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     # Check list contents permission\n@@ -431,10 +438,10 @@ def testListVisibleFolderContents(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Anonymous is denied\n         logout()\n@@ -443,90 +450,90 @@ def testListVisibleFolderContents(self):\n     def testListFolderContentsIsAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ListFolderContents),\n-            \'CHECKED\',\n+            "CHECKED",\n         )\n \n     def testListPrivateFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n \n     def testListFolderContentsIsAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ListFolderContents),\n-            \'CHECKED\',\n+            "CHECKED",\n         )\n \n     def testListPublishedFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n \n     def testListFolderContentsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ListFolderContents),\n-            \'CHECKED\',\n+            "CHECKED",\n         )\n \n     # Check catalog search\n \n     def testFindVisibleFolder(self):\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n \n     def testFindPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n         # Member is denied\n-        login(self.portal, \'member\')\n-        self.assertFalse(self.catalog(id=\'dir\'))\n+        login(self.portal, "member")\n+        self.assertFalse(self.catalog(id="dir"))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n-        self.assertFalse(self.catalog(id=\'dir\'))\n+        login(self.portal, "reviewer")\n+        self.assertFalse(self.catalog(id="dir"))\n         # Anonymous is denied\n         logout()\n-        self.assertFalse(self.catalog(id=\'dir\'))\n+        self.assertFalse(self.catalog(id="dir"))\n \n     def testFindPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\ndiff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py\nindex c1dd11f..d258972 100644\n--- a/plone/app/workflow/tests/test_functional.py\n+++ b/plone/app/workflow/tests/test_functional.py\n@@ -15,26 +15,43 @@\n \n \n doctests = (\n-    \'onestateworkflow.rst\',\n-    \'sharingpage.rst\',\n+    "onestateworkflow.rst",\n+    "sharingpage.rst",\n )\n \n \n def setup(doctest):\n \n-    portal = doctest.globs[\'layer\'][\'portal\']\n-    login(portal, \'member\')\n-    setRoles(portal, \'member\', [\'Manager\', ])\n-    workflow = getToolByName(portal, \'portal_workflow\')\n+    portal = doctest.globs["layer"]["portal"]\n+    login(portal, "member")\n+    setRoles(\n+        portal,\n+        "member",\n+        [\n+            "Manager",\n+        ],\n+    )\n+    workflow = getToolByName(portal, "portal_workflow")\n     workflow.setChainForPortalTypes(\n-        (\'Folder\', \'Document\', \'News Item\', \'Event\', ),\n-        (\'one_state_workflow\', ),\n+        (\n+            "Folder",\n+            "Document",\n+            "News Item",\n+            "Event",\n+        ),\n+        ("one_state_workflow",),\n     )\n-    portal.invokeFactory(\'Folder\', \'folder1\')\n+    portal.invokeFactory("Folder", "folder1")\n     folder = portal.folder1\n-    folder.invokeFactory(\'Document\', \'document1\')\n-    folder.invokeFactory(\'News Item\', \'newsitem1\')\n-    setRoles(portal, \'member\', [\'Member\', ])\n+    folder.invokeFactory("Document", "document1")\n+    folder.invokeFactory("News Item", "newsitem1")\n+    setRoles(\n+        portal,\n+        "member",\n+        [\n+            "Member",\n+        ],\n+    )\n     logout()\n     transaction.commit()\n \n@@ -42,7 +59,9 @@ def setup(doctest):\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            want = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', want)  # noqa: E501\n+            want = re.sub(\n+                "zope.testbrowser.browser.LinkNotFoundError", "LinkNotFoundError", want\n+            )  # noqa: E501\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n@@ -51,8 +70,8 @@ def test_suite():\n     tests = [\n         layered(\n             doctest.DocFileSuite(\n-                \'tests/{0}\'.format(test_file),\n-                package=\'plone.app.workflow\',\n+                "tests/{0}".format(test_file),\n+                package="plone.app.workflow",\n                 optionflags=optionflags,\n                 setUp=setup,\n                 checker=Py23DocChecker(),\n@@ -63,4 +82,3 @@ def test_suite():\n     ]\n     suite.addTests(tests)\n     return suite\n-\ndiff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py\nindex e79b2b3..7cf01fd 100644\n--- a/plone/app/workflow/tests/test_one_state_workflow.py\n+++ b/plone/app/workflow/tests/test_one_state_workflow.py\n@@ -17,102 +17,113 @@ class TestOneStateWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n-        self.workflow.setChainForPortalTypes([\'Document\', \'News Item\'], \'one_state_workflow\')\n+        self.workflow.setChainForPortalTypes(\n+            ["Document", "News Item"], "one_state_workflow"\n+        )\n \n-        self.portal.invokeFactory(\'Document\', id=\'doc\')\n+        self.portal.invokeFactory("Document", id="doc")\n         self.doc = self.portal.doc\n-        self.portal.invokeFactory(\'News Item\', id=\'ni\')\n+        self.portal.invokeFactory("News Item", id="ni")\n         self.ni = self.portal.ni\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     # Check allowed transitions: none for one state workflow\n \n     def testInitialState(self):\n-        self.assertEqual(self._state(self.doc), \'published\')\n-        self.assertEqual(self._state(self.ni), \'published\')\n+        self.assertEqual(self._state(self.doc), "published")\n+        self.assertEqual(self._state(self.ni), "published")\n \n     # Check view permission\n \n     def testViewIsNotAcquiredInPublishedState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')  # not checked\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")  # not checked\n \n     def testViewPublishedDocument(self):\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.doc))\n \n     # Check access contents info permission\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), \'\')   # not checked\n+        self.assertEqual(\n+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), ""\n+        )  # not checked\n \n     def testAccessPublishedDocument(self):\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPublishedDocument(self):\n         # Owner is allowed\n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Reader is denied\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     # Check change events permission\n@@ -121,5 +132,5 @@ def testChangeEventsIsNotAcquiredInPublishedState(self):\n         # since r104169 event content doesn\'t use `ChangeEvents` anymore...\n         self.assertEqual(\n             self.ni.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\ndiff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py\nindex 21de51a..79c24e4 100644\n--- a/plone/app/workflow/tests/test_plone_workflow.py\n+++ b/plone/app/workflow/tests/test_plone_workflow.py\n@@ -18,151 +18,152 @@ class TestDefaultWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n         self.workflow.setChainForPortalTypes(\n-            [\'Document\', \'News Item\'],\n-            \'plone_workflow\',\n+            ["Document", "News Item"],\n+            "plone_workflow",\n         )\n \n-        self.portal.invokeFactory(\'Document\', id=\'doc\')\n+        self.portal.invokeFactory("Document", id="doc")\n         self.doc = self.portal.doc\n \n-        self.portal.invokeFactory(\'News Item\', id=\'ni\')\n+        self.portal.invokeFactory("News Item", id="ni")\n         self.ni = self.portal.ni\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     # Check allowed transitions\n \n     def testOwnerHidesVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n-        self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'private\')),\n-            1\n-        )\n+        self.assertEqual(self._state(self.doc), "visible")\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n+        self.assertEqual(len(self.catalog(id="doc", review_state="private")), 1)\n \n     def testOwnerShowsPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n-        self.workflow.doActionFor(self.doc, \'show\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n-            1\n-        )\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n+        self.workflow.doActionFor(self.doc, "show")\n+        self.assertEqual(self._state(self.doc), "visible")\n+        self.assertEqual(len(self.catalog(id="doc", review_state="visible")), 1)\n \n     def testOwnerSubmitsVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n+        self.assertEqual(self._state(self.doc), "visible")\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'pending\')),\n+            len(self.catalog(id="doc", review_state="pending")),\n             1,\n         )\n \n     def testOwnerRetractsPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n-        self.workflow.doActionFor(self.doc, \'retract\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n+        self.workflow.doActionFor(self.doc, "retract")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     def testOwnerRetractsPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.doc, \'retract\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.doc, "retract")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertTrue(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     def testReviewerPublishesPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'published\')),\n+            len(self.catalog(id="doc", review_state="published")),\n             1,\n         )\n \n     def testReviewerRejectsPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'reject\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "reject")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     def testReviewerPublishesVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n+        self.assertEqual(self._state(self.doc), "visible")\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'published\')),\n+            len(self.catalog(id="doc", review_state="published")),\n             1,\n         )\n \n     def testReviewerRejectsPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n-        self.workflow.doActionFor(self.doc, \'reject\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n+        self.workflow.doActionFor(self.doc, "reject")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     # Check some forbidden transitions\n \n     def testOwnerPublishesVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        self.assertEqual(self._state(self.doc), "visible")\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testOwnerSubmitsPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'submit\',\n+            "submit",\n         )\n \n     def testManagerPublishesPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'publish\',\n+            "publish",\n         )\n \n     # No way am I going to write tests for all impossible transitions ;-)\n@@ -173,74 +174,74 @@ def testViewVisibleDocument(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInVisibleState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed (TODO:?)\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed (TODO:?)\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPendingState(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPublishedState(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     # Check access contents info permission\n \n@@ -248,10 +249,10 @@ def testAccessVisibleDocument(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n@@ -260,73 +261,73 @@ def testAccessVisibleDocument(self):\n     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed (TODO:?)\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed (TODO:?)\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPendingState(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     # Check modify content permissions\n@@ -335,10 +336,10 @@ def testModifyVisibleDocument(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n@@ -347,154 +348,163 @@ def testModifyVisibleDocument(self):\n     def testModifyPortalContentIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is denied\n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPendingState(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is denied\n         login(self.portal, TEST_USER_NAME)\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     # Check catalog search\n \n     def testFindVisibleDocument(self):\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n \n     def testFindPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is denied\n-        login(self.portal, \'member\')\n-        self.assertFalse(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertFalse(self.catalog(id="doc"))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n-        self.assertFalse(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertFalse(self.catalog(id="doc"))\n         # Anonymous is denied\n         logout()\n-        self.assertFalse(self.catalog(id=\'doc\'))\n+        self.assertFalse(self.catalog(id="doc"))\n \n     def testFindPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is allowed (TODO:?)\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Anonymous is allowed (TODO:?)\n         logout()\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n \n     def testFindPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n \n     def testMyWorklist(self):\n         # When a member has the local Reviewer role, pending\n         # docs should show up in his worklist.\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.doc.manage_addLocalRoles(\'member\', [\'Reviewer\'])\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.doc.manage_addLocalRoles("member", ["Reviewer"])\n+        login(self.portal, "reviewer")\n         worklist = self.portal.portal_workflow.getWorklistsResults()\n         self.assertTrue(len(worklist) == 1)\n         self.assertTrue(worklist[0] == self.doc)\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         worklist = self.portal.portal_workflow.getWorklistsResults()\n         self.assertTrue(len(worklist) == 1)\n         self.assertTrue(worklist[0] == self.doc)\n \n     def testStateTitles(self):\n-        state_titles = {\'private\': \'Private\',\n-                        \'visible\': \'Public draft\',\n-                        \'pending\': \'Pending review\',\n-                        \'published\': \'Published\'}\n+        state_titles = {\n+            "private": "Private",\n+            "visible": "Public draft",\n+            "pending": "Pending review",\n+            "published": "Published",\n+        }\n \n         wf = self.workflow.plone_workflow\n \ndiff --git a/plone/app/workflow/tests/test_remap.py b/plone/app/workflow/tests/test_remap.py\nindex 3909f34..be80fb6 100644\n--- a/plone/app/workflow/tests/test_remap.py\n+++ b/plone/app/workflow/tests/test_remap.py\n@@ -11,33 +11,33 @@ class TestRemapWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n         self.workflow.setChainForPortalTypes(\n-            (\'Document\', ),\n-            (\'simple_publication_workflow\', ),\n+            ("Document",),\n+            ("simple_publication_workflow",),\n         )\n         self.workflow.setChainForPortalTypes(\n-            (\'News Item\', ),\n-            (\'one_state_workflow\', ),\n+            ("News Item",),\n+            ("one_state_workflow",),\n         )\n-        self.workflow.setChainForPortalTypes((\'Folder\', ), ())\n-        self.workflow.setChainForPortalTypes((\'Image\', ), None)\n+        self.workflow.setChainForPortalTypes(("Folder",), ())\n+        self.workflow.setChainForPortalTypes(("Image",), None)\n \n-        self.portal.invokeFactory(\'Document\', \'d1\')\n-        self.portal.invokeFactory(\'Document\', \'d2\')\n-        self.portal.invokeFactory(\'News Item\', \'n1\')\n-        self.portal.invokeFactory(\'Image\', \'i1\')\n+        self.portal.invokeFactory("Document", "d1")\n+        self.portal.invokeFactory("Document", "d2")\n+        self.portal.invokeFactory("News Item", "n1")\n+        self.portal.invokeFactory("Image", "i1")\n \n-        self.workflow.doActionFor(self.portal.d1, \'publish\')\n+        self.workflow.doActionFor(self.portal.d1, "publish")\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     def _chain(self, obj):\n         return self.workflow.getChainFor(obj)\n@@ -45,45 +45,52 @@ def _chain(self, obj):\n     def test_remap_multiple_no_state_map(self):\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Document\', \'News Item\', ),\n-            chain=(\'plone_workflow\', ),\n+            type_ids=(\n+                "Document",\n+                "News Item",\n+            ),\n+            chain=("plone_workflow",),\n         )\n \n-        self.assertEqual(self._chain(self.portal.d1), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.d2), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.n1), (\'plone_workflow\', ))\n+        self.assertEqual(self._chain(self.portal.d1), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.d2), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.n1), ("plone_workflow",))\n \n-        self.assertEqual(self._state(self.portal.d1), \'visible\')\n-        self.assertEqual(self._state(self.portal.d2), \'visible\')\n-        self.assertEqual(self._state(self.portal.n1), \'visible\')\n+        self.assertEqual(self._state(self.portal.d1), "visible")\n+        self.assertEqual(self._state(self.portal.d2), "visible")\n+        self.assertEqual(self._state(self.portal.n1), "visible")\n \n     def test_remap_with_partial_state_map(self):\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Document\', \'News Item\', ),\n-            chain=(\'plone_workflow\', ),\n-            state_map={\'published\': \'published\'},\n+            type_ids=(\n+                "Document",\n+                "News Item",\n+            ),\n+            chain=("plone_workflow",),\n+            state_map={"published": "published"},\n         )\n \n-        self.assertEqual(self._chain(self.portal.d1), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.d2), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.n1), (\'plone_workflow\', ))\n+        self.assertEqual(self._chain(self.portal.d1), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.d2), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.n1), ("plone_workflow",))\n \n-        self.assertEqual(self._state(self.portal.d1), \'published\')\n-        self.assertEqual(self._state(self.portal.d2), \'visible\')\n-        self.assertEqual(self._state(self.portal.n1), \'published\')\n+        self.assertEqual(self._state(self.portal.d1), "published")\n+        self.assertEqual(self._state(self.portal.d2), "visible")\n+        self.assertEqual(self._state(self.portal.n1), "published")\n \n     def test_remap_to_no_workflow(self):\n         view_at_d1 = [\n-            r[\'name\']\n-            for r in self.portal.d1.rolesOfPermission(\'View\')\n-            if r[\'selected\']\n+            r["name"] for r in self.portal.d1.rolesOfPermission("View") if r["selected"]\n         ]\n-        self.assertIn(\'Anonymous\', view_at_d1)\n+        self.assertIn("Anonymous", view_at_d1)\n \n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Document\', \'News Item\', ),\n+            type_ids=(\n+                "Document",\n+                "News Item",\n+            ),\n             chain=(),\n         )\n \n@@ -92,29 +99,27 @@ def test_remap_to_no_workflow(self):\n         self.assertEqual(self._chain(self.portal.n1), ())\n \n         view_at_d1 = [\n-            r[\'name\']\n-            for r in self.portal.d1.rolesOfPermission(\'View\')\n-            if r[\'selected\']\n+            r["name"] for r in self.portal.d1.rolesOfPermission("View") if r["selected"]\n         ]\n-        self.assertFalse(\'Anonymous\' in view_at_d1)\n-        self.assertTrue(self.portal.d1.acquiredRolesAreUsedBy(\'View\'))\n+        self.assertFalse("Anonymous" in view_at_d1)\n+        self.assertTrue(self.portal.d1.acquiredRolesAreUsedBy("View"))\n \n     def test_remap_from_no_workflow(self):\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Image\', ),\n-            chain=(\'plone_workflow\', ),\n+            type_ids=("Image",),\n+            chain=("plone_workflow",),\n         )\n \n-        self.assertEqual(self._chain(self.portal.i1), (\'plone_workflow\', ))\n-        self.assertEqual(self._state(self.portal.i1), \'visible\')\n+        self.assertEqual(self._chain(self.portal.i1), ("plone_workflow",))\n+        self.assertEqual(self._state(self.portal.i1), "visible")\n \n     def test_remap_to_default(self):\n-        self.workflow.setDefaultChain(\'plone_workflow\')\n+        self.workflow.setDefaultChain("plone_workflow")\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Image\', ),\n-            chain=\'(Default)\',\n+            type_ids=("Image",),\n+            chain="(Default)",\n         )\n \n-        self.assertEqual(self._chain(self.portal.i1), (\'plone_workflow\', ))\n+        self.assertEqual(self._chain(self.portal.i1), ("plone_workflow",))\ndiff --git a/plone/app/workflow/tests/test_sharing_view.py b/plone/app/workflow/tests/test_sharing_view.py\nindex 50ef580..1ba1625 100644\n--- a/plone/app/workflow/tests/test_sharing_view.py\n+++ b/plone/app/workflow/tests/test_sharing_view.py\n@@ -22,52 +22,54 @@ class TestSharingView(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-        self.portal.acl_users._doAddUser(\'testuser\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'testreviewer\', \'secret\', [\'Reviewer\'], [])\n-        self.portal.acl_users._doAddUser(\'nonasciiuser\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddGroup(\'testgroup\', [], title=\'Some meaningful title\')\n-        testuser = self.portal.portal_membership.getMemberById(\'testuser\')\n-        testuser.setMemberProperties(dict(email=\'testuser@plone.org\'))\n-        nonasciiuser = self.portal.portal_membership.getMemberById(\'nonasciiuser\')\n-        nonasciiuser.setMemberProperties(dict(fullname=u\'\\xc4\\xdc\\xdf\'))\n-        login(self.portal, \'manager\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.portal.acl_users._doAddUser("testuser", "secret", ["Member"], [])\n+        self.portal.acl_users._doAddUser("testreviewer", "secret", ["Reviewer"], [])\n+        self.portal.acl_users._doAddUser("nonasciiuser", "secret", ["Member"], [])\n+        self.portal.acl_users._doAddGroup(\n+            "testgroup", [], title="Some meaningful title"\n+        )\n+        testuser = self.portal.portal_membership.getMemberById("testuser")\n+        testuser.setMemberProperties(dict(email="testuser@plone.org"))\n+        nonasciiuser = self.portal.portal_membership.getMemberById("nonasciiuser")\n+        nonasciiuser.setMemberProperties(dict(fullname=u"\\xc4\\xdc\\xdf"))\n+        login(self.portal, "manager")\n \n     def test_search_by_login_name(self):\n         """Make sure we can search by login name on the Sharing tab.\n \n         Prevents regressions of #6853.\n         """\n-        self.request.form[\'search_term\'] = \'testuser\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        self.request.form["search_term"] = "testuser"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.user_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'id\'),\n-            \'testuser\',\n+            results[0].get("id"),\n+            "testuser",\n             msg="Didn\'t find testuser when I searched by login name.",\n         )\n         self.assertEqual(\n-            results[0].get(\'login\'),\n-            \'testuser\',\n+            results[0].get("login"),\n+            "testuser",\n             msg="Didn\'t display login when I searched by login name.",\n         )\n \n     def _search_by_email(self, term):\n-        self.request.form[\'search_term\'] = term\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        self.request.form["search_term"] = term\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.user_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'id\'),\n-            \'testuser\',\n+            results[0].get("id"),\n+            "testuser",\n             msg="Didn\'t find testuser when I searched for %s as email." % term,\n         )\n         self.assertEqual(\n-            results[0].get(\'login\'),\n-            \'testuser\',\n+            results[0].get("login"),\n+            "testuser",\n             msg="Didn\'t display login when I searched for %s as email." % term,\n         )\n \n@@ -76,57 +78,57 @@ def test_search_by_email(self):\n \n         Prevents regressions of #11631.\n         """\n-        self._search_by_email(\'testuser@plone.org\')\n-        self._search_by_email(\'plone.org\')\n-        self._search_by_email(\'plone\')\n+        self._search_by_email("testuser@plone.org")\n+        self._search_by_email("plone.org")\n+        self._search_by_email("plone")\n \n     def test_search_with_nonascii_users(self):\n         """Make sure we can search with users that have non-ascii-chars in their fullname.\n \n         Prevents regressions of #7576.\n         """\n-        self.request.form[\'search_term\'] = \'nonasciiuser\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        self.request.form["search_term"] = "nonasciiuser"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.role_settings()\n         self.assertTrue(len(results))\n-        expected = u\'\xc3\x84\xc3\x9c\xc3\x9f\'\n+        expected = u"\xc3\x84\xc3\x9c\xc3\x9f"\n         if six.PY2:\n-            expected = expected.encode(\'utf8\')\n+            expected = expected.encode("utf8")\n         self.assertEqual(\n-            results[-1].get(\'title\'),\n+            results[-1].get("title"),\n             expected,\n             msg="Umlaute",\n         )\n \n     def test_search_for_group_by_id(self):\n-        """ Make sure we can search for groups by id """\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure we can search for groups by id"""\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.group_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'id\'),\n-            \'testgroup\',\n+            results[0].get("id"),\n+            "testgroup",\n             msg="Didn\'t find testgroup when I searched by group id.",\n         )\n-        self.assertIsNone(results[0].get(\'login\'))\n+        self.assertIsNone(results[0].get("login"))\n \n     def test_search_for_group_by_title(self):\n-        """ Make sure we can search for groups by title """\n-        self.request.form[\'search_term\'] = \'meaningful\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure we can search for groups by title"""\n+        self.request.form["search_term"] = "meaningful"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.group_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'title\'),\n-            \'Some meaningful title\',\n+            results[0].get("title"),\n+            "Some meaningful title",\n             msg="Didn\'t find testuser when I searched by group title.",\n         )\n \n     def test_group_name_links_to_prefs_for_admin(self):\n-        """ Make sure that for admins  group name links to group prefs """\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure that for admins  group name links to group prefs"""\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         self.assertIn(\n             \'<a href="http://nohost/plone/@@usergroup-groupmembership?\'\n             \'groupname=testgroup">\',\n@@ -135,9 +137,9 @@ def test_group_name_links_to_prefs_for_admin(self):\n         )\n \n     def test_group_name_links_not_include_authusers(self):\n-        """ Make sure that for admins  group name links to group prefs """\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure that for admins  group name links to group prefs"""\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         self.assertNotIn(\n             \'<a href="http://nohost/plone/@@usergroup-groupmembership?\'\n             \'groupname=AuthenticatedUsers">\',\n@@ -146,10 +148,10 @@ def test_group_name_links_not_include_authusers(self):\n         )\n \n     def test_group_name_doesnt_link_to_prefs_for_reviewer(self):\n-        """ Make sure that for admins  group name links to group prefs """\n-        login(self.portal, \'testreviewer\')\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure that for admins  group name links to group prefs"""\n+        login(self.portal, "testreviewer")\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         self.assertNotIn(\n             \'<a href="http://nohost/plone/@@usergroup-groupmembership?\'\n             \'groupname=testgroup">\',\n@@ -163,17 +165,20 @@ def test_local_manager_removes_inheritance(self):\n         to avoid him to loose rights on the content itself\n         Refs #11945\n         """\n-        self.portal.acl_users._doAddUser(\'localmanager\', \'secret\', [\'Member\'], [])\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', \'folder\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', \'subfolder\')]\n-        folder.manage_setLocalRoles(\'localmanager\', (\'Manager\',))\n+        self.portal.acl_users._doAddUser("localmanager", "secret", ["Member"], [])\n+        folder = self.portal[self.portal.invokeFactory("Folder", "folder")]\n+        subfolder = folder[folder.invokeFactory("Folder", "subfolder")]\n+        folder.manage_setLocalRoles("localmanager", ("Manager",))\n \n-        login(self.portal, \'localmanager\')\n-        sharing = subfolder.restrictedTraverse(\'@@sharing\')\n+        login(self.portal, "localmanager")\n+        sharing = subfolder.restrictedTraverse("@@sharing")\n         sharing.update_inherit(status=False, reindex=True)\n \n         user = self.portal.portal_membership.getAuthenticatedMember()\n-        self.assertIn(\'Manager\', user.getRolesInContext(subfolder), )\n+        self.assertIn(\n+            "Manager",\n+            user.getRolesInContext(subfolder),\n+        )\n \n     def test_borg_localroles(self):\n         @adapter(ISiteRoot)\n@@ -183,29 +188,30 @@ def __init__(self, context):\n                 self.context = context\n \n             def getAllRoles(self):\n-                yield \'borguser\', (\'Contributor\',)\n+                yield "borguser", ("Contributor",)\n \n             def getRoles(self, user_id):\n-                if user_id == \'borguser\':\n-                    return (\'Contributor\',)\n+                if user_id == "borguser":\n+                    return ("Contributor",)\n                 return ()\n+\n         provideAdapter(LocalRoleProvider)\n \n-        self.portal.acl_users._doAddUser(\'borguser\', \'secret\', [\'Member\'], [])\n-        login(self.portal, \'manager\')\n-        sharing = self.portal.restrictedTraverse(\'@@sharing\')\n+        self.portal.acl_users._doAddUser("borguser", "secret", ["Member"], [])\n+        login(self.portal, "manager")\n+        sharing = self.portal.restrictedTraverse("@@sharing")\n         info = sharing.existing_role_settings()\n         self.assertEqual(2, len(info))\n-        self.assertEqual(\'borguser\', info[1][\'id\'])\n-        self.assertEqual(\'acquired\', info[1][\'roles\'][u\'Contributor\'])\n+        self.assertEqual("borguser", info[1]["id"])\n+        self.assertEqual("acquired", info[1]["roles"][u"Contributor"])\n \n         # check borg local roles works with non-heriting roles policy\n-        sharing = self.portal.restrictedTraverse(\'@@sharing\')\n-        setattr(sharing.context, \'__ac_local_roles_block__\', True)\n+        sharing = self.portal.restrictedTraverse("@@sharing")\n+        setattr(sharing.context, "__ac_local_roles_block__", True)\n         info = sharing.existing_role_settings()\n         self.assertEqual(2, len(info))\n-        self.assertEqual(\'borguser\', info[1][\'id\'])\n-        self.assertEqual(\'acquired\', info[1][\'roles\'][u\'Contributor\'])\n+        self.assertEqual("borguser", info[1]["id"])\n+        self.assertEqual("acquired", info[1]["roles"][u"Contributor"])\n \n     def test_localroles_modified_event(self):\n         # define local roles modified sensitive interface and class\n@@ -226,8 +232,7 @@ def lrme_handler(context, event):\n \n         # register handler\n         gsm = getGlobalSiteManager()\n-        gsm.registerHandler(\n-            lrme_handler, (ILRMEContext, ILocalrolesModifiedEvent))\n+        gsm.registerHandler(lrme_handler, (ILRMEContext, ILocalrolesModifiedEvent))\n         # create object and notify subscriber\n         context = LRMEContext()\n         event = LocalrolesModifiedEvent(context, self.request)\ndiff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py\nindex f259cf2..c40e6a4 100644\n--- a/plone/app/workflow/tests/test_simple_publication_workflow.py\n+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py\n@@ -11,7 +11,7 @@\n import unittest\n \n \n-SIMPLE = \'simple_publication_workflow\'\n+SIMPLE = "simple_publication_workflow"\n \n \n class TestSimplePublicationWorkflow(unittest.TestCase):\n@@ -19,213 +19,217 @@ class TestSimplePublicationWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n-        self._set_workflow_for_portal_type(SIMPLE, \'Document\')\n-        self.portal.invokeFactory(\'Document\', \'document1\')\n+        self._set_workflow_for_portal_type(SIMPLE, "Document")\n+        self.portal.invokeFactory("Document", "document1")\n         self.doc = self.portal.document1\n \n     def _set_workflow_for_portal_type(self, workflow_name, portal_type):\n         self.workflow.setChainForPortalTypes(\n-            (portal_type, ),\n-            (workflow_name, ),\n+            (portal_type,),\n+            (workflow_name,),\n         )\n \n     def _check_state(self, obj, expected_review_state):\n-        current_state = self.workflow.getInfoFor(obj, \'review_state\')\n+        current_state = self.workflow.getInfoFor(obj, "review_state")\n         self.assertEqual(\n             current_state,\n             expected_review_state,\n-            \'Object {0} should have review state {1} but has {2}\'.format(\n+            "Object {0} should have review state {1} but has {2}".format(\n                 obj,\n                 expected_review_state,\n                 current_state,\n-            )\n+            ),\n         )\n \n     # Check allowed transitions: two for simple publication workflow\n \n     def testOwnerSubmitAPrivateDocumentAndRetract(self):\n-        self._check_state(self.doc, \'private\')\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self._check_state(self.doc, \'pending\')\n-        self.workflow.doActionFor(self.doc, \'retract\')\n-        self._check_state(self.doc, \'private\')\n+        self._check_state(self.doc, "private")\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self._check_state(self.doc, "pending")\n+        self.workflow.doActionFor(self.doc, "retract")\n+        self._check_state(self.doc, "private")\n \n     # Check some forbidden transitions\n \n     def testOwnerCannotPublishDocument(self):\n-        login(self.portal, \'member\')\n-        self._check_state(self.doc, \'private\')\n+        login(self.portal, "member")\n+        self._check_state(self.doc, "private")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'publish\',\n+            "publish",\n         )\n \n     # Check view permission\n \n     def testViewIsNotAcquiredInPrivateState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')     # not checked\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")  # not checked\n \n     def testViewPrivateDocument(self):\n-        self._check_state(self.doc, \'private\')\n+        self._check_state(self.doc, "private")\n         # Owner is allowed\n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(View, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPublishedState(self):\n         # transition requires Review portal content\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')   # not checked\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")  # not checked\n \n     def testViewPublishedDocument(self):\n         # transition requires Review portal content\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is denied  but he acquires through Anonymous Role\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.doc))\n \n     # Check access contents info permission\n \n     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), \'\')     # not checked\n+        self.assertEqual(\n+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), ""\n+        )  # not checked\n \n     def testAccessContentsInformationPrivateDocument(self):\n-        self.assertEqual(self.workflow.getInfoFor(self.doc, \'review_state\'), \'private\')\n+        self.assertEqual(self.workflow.getInfoFor(self.doc, "review_state"), "private")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        self.workflow.doActionFor(self.doc, "publish")\n         # not checked\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessContentsInformationPublishedDocument(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is denied but he acquires through Anonymous Role\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     # Check modify content permissions\n \n     def testModifyPrivateDocumentIsNotAcquiredInPrivateState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), \'\') # not checked\n+        self.assertEqual(\n+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), ""\n+        )  # not checked\n \n     def testModifyPrivateDocument(self):\n-        self.assertEqual(self.workflow.getInfoFor(self.doc, \'review_state\'), \'private\')\n+        self.assertEqual(self.workflow.getInfoFor(self.doc, "review_state"), "private")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Reader is denied\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), \'\')\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), "")\n \n     def testModifyPublishedDocument(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Manager is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Reader is denied\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\ndiff --git a/plone/app/workflow/tests/utils.py b/plone/app/workflow/tests/utils.py\nindex baebe6e..deac197 100644\n--- a/plone/app/workflow/tests/utils.py\n+++ b/plone/app/workflow/tests/utils.py\n@@ -2,6 +2,6 @@\n \n \n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/setup.py b/setup.py\nindex 6a0ea67..9d0079c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'5.0.0a3.dev0\'\n+version = "5.0.0a3.dev0"\n \n setup(\n-    name=\'plone.app.workflow\',\n+    name="plone.app.workflow",\n     version=version,\n     description="workflow and security settings for Plone",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -24,40 +23,40 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'workflow sharing plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.workflow\',\n-    license=\'GPL version 2\',\n+    keywords="workflow sharing plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.workflow",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.memoize\',\n-        \'six\',\n-        \'transaction\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.testing\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Products.CMFCore>=2.4.0\',\n-        \'Products.DCWorkflow\',\n-        \'Products.GenericSetup >= 2.0\',\n-        \'Products.statusmessages\',\n-        \'Zope2\',\n+        "setuptools",\n+        "plone.memoize",\n+        "six",\n+        "transaction",\n+        "zope.component",\n+        "zope.dottedname",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.schema",\n+        "zope.site",\n+        "zope.testing",\n+        "Acquisition",\n+        "DateTime",\n+        "Products.CMFCore>=2.4.0",\n+        "Products.DCWorkflow",\n+        "Products.GenericSetup >= 2.0",\n+        "Products.statusmessages",\n+        "Zope2",\n     ],\n )\n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T21:02:50+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/ec4ef88e6bd7839c3e2cf7df7b6c3eb181c5b677

find . -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M plone/app/workflow/browser/sharing.py
M plone/app/workflow/exportimport.py
M plone/app/workflow/interfaces.py
M plone/app/workflow/localroles.py
M plone/app/workflow/permissions.py
M plone/app/workflow/remap.py
M plone/app/workflow/testing.py
M plone/app/workflow/tests/test_exportimport.py
M plone/app/workflow/tests/test_folder_workflow.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_remap.py
M plone/app/workflow/tests/test_sharing_view.py
M plone/app/workflow/tests/test_simple_publication_workflow.py

b'diff --git a/plone/app/workflow/browser/sharing.py b/plone/app/workflow/browser/sharing.py\nindex ca271bc..063d713 100644\n--- a/plone/app/workflow/browser/sharing.py\n+++ b/plone/app/workflow/browser/sharing.py\n@@ -108,7 +108,7 @@ def handle_form(self):\n                 self.context.reindexObjectSecurity()\n                 notify(LocalrolesModifiedEvent(self.context, self.request))\n             IStatusMessage(self.request).addStatusMessage(\n-                _(u"Changes saved."), type="info"\n+                _("Changes saved."), type="info"\n             )\n \n         # Other buttons return to the sharing page\n@@ -264,7 +264,7 @@ def existing_role_settings(self):\n         if AUTH_GROUP not in items:\n             items[AUTH_GROUP] = dict(\n                 id=AUTH_GROUP,\n-                name=_(u"Logged-in users"),\n+                name=_("Logged-in users"),\n                 type="group",\n                 sitewide=[],\n                 acquired=[],\n@@ -313,7 +313,7 @@ def existing_role_settings(self):\n \n                 # This isn\'t a proper group, so it needs special treatment :(\n                 if rid == AUTH_GROUP:\n-                    name = _(u"Logged-in users")\n+                    name = _("Logged-in users")\n \n             info_item = dict(\n                 id=item["id"],\n@@ -373,20 +373,18 @@ def _principal_search_results(\n         context = self.context\n \n         translated_message = translate(\n-            _(u"Search for user or group"), context=self.request\n+            _("Search for user or group"), context=self.request\n         )\n         search_term = safe_unicode(self.request.form.get("search_term", None))\n         if not search_term or search_term == translated_message:\n             return []\n \n-        existing_principals = set(\n-            [\n-                p["id"]\n-                for p in self.existing_role_settings()\n-                if p["type"] == principal_type\n-            ]\n-        )\n-        empty_roles = dict([(r["id"], False) for r in self.roles()])\n+        existing_principals = {\n+            p["id"]\n+            for p in self.existing_role_settings()\n+            if p["type"] == principal_type\n+        }\n+        empty_roles = {r["id"]: False for r in self.roles()}\n         info = []\n \n         hunter = getMultiAdapter((context, self.request), name="pas_search")\n@@ -612,7 +610,7 @@ def update_role_settings(self, new_settings, reindex=True):\n         changed = False\n         context = self.context\n \n-        managed_roles = frozenset([r["id"] for r in self.roles()])\n+        managed_roles = frozenset(r["id"] for r in self.roles())\n         member_ids_to_clear = []\n \n         for s in new_settings:\ndiff --git a/plone/app/workflow/exportimport.py b/plone/app/workflow/exportimport.py\nindex 5623e42..2cfb4bc 100644\n--- a/plone/app/workflow/exportimport.py\n+++ b/plone/app/workflow/exportimport.py\n@@ -23,11 +23,11 @@ class PersistentSharingPageRole(Persistent):\n     page roles.\n     """\n \n-    title = u""\n+    title = ""\n     required_permission = None\n     required_interface = None\n \n-    def __init__(self, title=u"", required_permission=None, required_interface=None):\n+    def __init__(self, title="", required_permission=None, required_interface=None):\n         self.title = PMF(title)\n         self.required_permission = required_permission\n         self.required_interface = required_interface\n@@ -39,7 +39,7 @@ class SharingXMLAdapter(XMLAdapterBase):\n     _LOGGER_ID = "plone.app.workflow"\n \n     name = "plone.app.workflow.sharing"\n-    info_tag = u"__sharing_gs__"\n+    info_tag = "__sharing_gs__"\n \n     def _importNode(self, node):\n \n@@ -68,7 +68,7 @@ def _iterRoleRegistrations(self):\n         for reg in tuple(self.context.registeredUtilities()):\n             if (\n                 reg.provided.isOrExtends(ISharingPageRole)\n-                and isinstance(reg.info, six.string_types)\n+                and isinstance(reg.info, str)\n                 and self.info_tag in reg.info\n             ):\n                 yield reg\n@@ -82,8 +82,8 @@ def _initRole(self, node):\n         if node.nodeName != "role":\n             return\n \n-        name = six.text_type(node.getAttribute("id"))\n-        title = six.text_type(node.getAttribute("title"))\n+        name = str(node.getAttribute("id"))\n+        title = str(node.getAttribute("title"))\n         required = node.getAttribute("permission") or None\n         iface = node.getAttribute("interface") or None\n         if iface is not None:\n@@ -136,7 +136,7 @@ def import_sharing(context):\n         return\n \n     importer = queryMultiAdapter(\n-        (sm, context), IBody, name=u"plone.app.workflow.sharing"\n+        (sm, context), IBody, name="plone.app.workflow.sharing"\n     )\n     if importer:\n         body = context.readDataFile("sharing.xml")\n@@ -154,7 +154,7 @@ def export_sharing(context):\n         return\n \n     exporter = queryMultiAdapter(\n-        (sm, context), IBody, name=u"plone.app.workflow.sharing"\n+        (sm, context), IBody, name="plone.app.workflow.sharing"\n     )\n     if exporter:\n         body = exporter.body\ndiff --git a/plone/app/workflow/interfaces.py b/plone/app/workflow/interfaces.py\nindex 1f2564d..6bd7a2b 100644\n--- a/plone/app/workflow/interfaces.py\n+++ b/plone/app/workflow/interfaces.py\n@@ -19,14 +19,14 @@ class ISharingPageRole(Interface):\n     and the user has the required_permission (or it\'s None).\n     """\n \n-    title = schema.TextLine(title=u"A friendly name for the role")\n+    title = schema.TextLine(title="A friendly name for the role")\n \n     required_permission = schema.TextLine(\n-        title=u"Permission required to manage this local role", required=False\n+        title="Permission required to manage this local role", required=False\n     )\n \n     required_interface = schema.Object(\n         schema=Interface,\n-        title=u"Context interface required to display this role",\n+        title="Context interface required to display this role",\n         required=False,\n     )\ndiff --git a/plone/app/workflow/localroles.py b/plone/app/workflow/localroles.py\nindex b7e02ff..6f3d6ad 100644\n--- a/plone/app/workflow/localroles.py\n+++ b/plone/app/workflow/localroles.py\n@@ -15,33 +15,33 @@\n \n \n @implementer(ISharingPageRole)\n-class ReaderRole(object):\n+class ReaderRole:\n \n-    title = _(u"title_can_view", default=u"Can view")\n+    title = _("title_can_view", default="Can view")\n     required_permission = permissions.DelegateReaderRole\n     required_interface = None\n \n \n @implementer(ISharingPageRole)\n-class EditorRole(object):\n+class EditorRole:\n \n-    title = _(u"title_can_edit", default=u"Can edit")\n+    title = _("title_can_edit", default="Can edit")\n     required_permission = permissions.DelegateEditorRole\n     required_interface = None\n \n \n @implementer(ISharingPageRole)\n-class ContributorRole(object):\n+class ContributorRole:\n \n-    title = _(u"title_can_add", default=u"Can add")\n+    title = _("title_can_add", default="Can add")\n     required_permission = permissions.DelegateContributorRole\n     required_interface = None\n \n \n @implementer(ISharingPageRole)\n-class ReviewerRole(object):\n+class ReviewerRole:\n \n-    title = _(u"title_can_review", default=u"Can review")\n+    title = _("title_can_review", default="Can review")\n     required_permission = permissions.DelegateReviewerRole\n     required_interface = None\n \ndiff --git a/plone/app/workflow/permissions.py b/plone/app/workflow/permissions.py\nindex 5d05f34..6b925d3 100644\n--- a/plone/app/workflow/permissions.py\n+++ b/plone/app/workflow/permissions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ModuleSecurityInfo\n from AccessControl.Permission import addPermission\n \ndiff --git a/plone/app/workflow/remap.py b/plone/app/workflow/remap.py\nindex fc29e5f..0a2d926 100644\n--- a/plone/app/workflow/remap.py\n+++ b/plone/app/workflow/remap.py\n@@ -27,7 +27,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     chains_by_type = dict(portal_workflow.listChainOverrides())\n \n     # Build a dictionary of type id -> chain before we made changes\n-    old_chains = dict([(t, chains_by_type.get(t, default_chain)) for t in type_ids])\n+    old_chains = {t: chains_by_type.get(t, default_chain) for t in type_ids}\n \n     # Work out which permissions were managed by the old chain, but not\n     # by the new chain. This may vary by type id.\ndiff --git a/plone/app/workflow/testing.py b/plone/app/workflow/testing.py\nindex c97ea87..94c8927 100644\n--- a/plone/app/workflow/testing.py\n+++ b/plone/app/workflow/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import FunctionalTesting\ndiff --git a/plone/app/workflow/tests/test_exportimport.py b/plone/app/workflow/tests/test_exportimport.py\nindex 37c8687..6a92c0e 100644\n--- a/plone/app/workflow/tests/test_exportimport.py\n+++ b/plone/app/workflow/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.localsitemanager import make_objectmanager_site\n from OFS.Folder import Folder\n from plone.app.workflow.exportimport import export_sharing\n@@ -332,7 +331,7 @@ def test_export_empty(self):\n         context = DummyExportContext(self.site)\n         export_sharing(context)\n \n-        self.assertEqual(u"sharing.xml", context._wrote[0][0])\n+        self.assertEqual("sharing.xml", context._wrote[0][0])\n         self.assertEqual(xml, context._wrote[0][1])\n \n     def test_export_multiple(self):\ndiff --git a/plone/app/workflow/tests/test_folder_workflow.py b/plone/app/workflow/tests/test_folder_workflow.py\nindex 7fd0549..d466426 100644\n--- a/plone/app/workflow/tests/test_folder_workflow.py\n+++ b/plone/app/workflow/tests/test_folder_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\ndiff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py\nindex d258972..5730e39 100644\n--- a/plone/app/workflow/tests/test_functional.py\n+++ b/plone/app/workflow/tests/test_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -70,7 +69,7 @@ def test_suite():\n     tests = [\n         layered(\n             doctest.DocFileSuite(\n-                "tests/{0}".format(test_file),\n+                f"tests/{test_file}",\n                 package="plone.app.workflow",\n                 optionflags=optionflags,\n                 setUp=setup,\ndiff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py\nindex 7cf01fd..d55074e 100644\n--- a/plone/app/workflow/tests/test_one_state_workflow.py\n+++ b/plone/app/workflow/tests/test_one_state_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\ndiff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py\nindex 79c24e4..8f34816 100644\n--- a/plone/app/workflow/tests/test_plone_workflow.py\n+++ b/plone/app/workflow/tests/test_plone_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\ndiff --git a/plone/app/workflow/tests/test_remap.py b/plone/app/workflow/tests/test_remap.py\nindex be80fb6..21e63ad 100644\n--- a/plone/app/workflow/tests/test_remap.py\n+++ b/plone/app/workflow/tests/test_remap.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.workflow.remap import remap_workflow\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\ndiff --git a/plone/app/workflow/tests/test_sharing_view.py b/plone/app/workflow/tests/test_sharing_view.py\nindex 1ba1625..226376a 100644\n--- a/plone/app/workflow/tests/test_sharing_view.py\n+++ b/plone/app/workflow/tests/test_sharing_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from borg.localrole.interfaces import ILocalRoleProvider\n from plone.app.testing import login\n from plone.app.workflow.events import LocalrolesModifiedEvent\n@@ -34,7 +33,7 @@ def setUp(self):\n         testuser = self.portal.portal_membership.getMemberById("testuser")\n         testuser.setMemberProperties(dict(email="testuser@plone.org"))\n         nonasciiuser = self.portal.portal_membership.getMemberById("nonasciiuser")\n-        nonasciiuser.setMemberProperties(dict(fullname=u"\\xc4\\xdc\\xdf"))\n+        nonasciiuser.setMemberProperties(dict(fullname="\\xc4\\xdc\\xdf"))\n         login(self.portal, "manager")\n \n     def test_search_by_login_name(self):\n@@ -91,7 +90,7 @@ def test_search_with_nonascii_users(self):\n         view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.role_settings()\n         self.assertTrue(len(results))\n-        expected = u"\xc3\x84\xc3\x9c\xc3\x9f"\n+        expected = "\xc3\x84\xc3\x9c\xc3\x9f"\n         if six.PY2:\n             expected = expected.encode("utf8")\n         self.assertEqual(\n@@ -183,7 +182,7 @@ def test_local_manager_removes_inheritance(self):\n     def test_borg_localroles(self):\n         @adapter(ISiteRoot)\n         @implementer(ILocalRoleProvider)\n-        class LocalRoleProvider(object):\n+        class LocalRoleProvider:\n             def __init__(self, context):\n                 self.context = context\n \n@@ -203,7 +202,7 @@ def getRoles(self, user_id):\n         info = sharing.existing_role_settings()\n         self.assertEqual(2, len(info))\n         self.assertEqual("borguser", info[1]["id"])\n-        self.assertEqual("acquired", info[1]["roles"][u"Contributor"])\n+        self.assertEqual("acquired", info[1]["roles"]["Contributor"])\n \n         # check borg local roles works with non-heriting roles policy\n         sharing = self.portal.restrictedTraverse("@@sharing")\n@@ -211,7 +210,7 @@ def getRoles(self, user_id):\n         info = sharing.existing_role_settings()\n         self.assertEqual(2, len(info))\n         self.assertEqual("borguser", info[1]["id"])\n-        self.assertEqual("acquired", info[1]["roles"][u"Contributor"])\n+        self.assertEqual("acquired", info[1]["roles"]["Contributor"])\n \n     def test_localroles_modified_event(self):\n         # define local roles modified sensitive interface and class\n@@ -219,7 +218,7 @@ class ILRMEContext(Interface):\n             pass\n \n         @implementer(ILRMEContext)\n-        class LRMEContext(object):\n+        class LRMEContext:\n             def __init__(self):\n                 # gets set by handler\n                 self.context = None\ndiff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py\nindex c40e6a4..af77721 100644\n--- a/plone/app/workflow/tests/test_simple_publication_workflow.py\n+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n@@ -40,7 +39,7 @@ def _check_state(self, obj, expected_review_state):\n         self.assertEqual(\n             current_state,\n             expected_review_state,\n-            "Object {0} should have review state {1} but has {2}".format(\n+            "Object {} should have review state {} but has {}".format(\n                 obj,\n                 expected_review_state,\n                 current_state,\n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T21:06:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/c6b5d4b583bbb488d58bcc26c6931686880a6d71

remove usage of six

Files changed:
M plone/app/workflow/exportimport.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_sharing_view.py
M setup.py

b'diff --git a/plone/app/workflow/exportimport.py b/plone/app/workflow/exportimport.py\nindex 2cfb4bc..fbd4537 100644\n--- a/plone/app/workflow/exportimport.py\n+++ b/plone/app/workflow/exportimport.py\n@@ -11,8 +11,6 @@\n from zope.interface import implementer\n from zope.interface.interfaces import IComponentRegistry\n \n-import six\n-\n \n PMF = MessageFactory("plone")\n \ndiff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py\nindex 5730e39..e380d3f 100644\n--- a/plone/app/workflow/tests/test_functional.py\n+++ b/plone/app/workflow/tests/test_functional.py\n@@ -8,7 +8,6 @@\n \n import doctest\n import re\n-import six\n import transaction\n import unittest\n \n@@ -55,15 +54,6 @@ def setup(doctest):\n     transaction.commit()\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub(\n-                "zope.testbrowser.browser.LinkNotFoundError", "LinkNotFoundError", want\n-            )  # noqa: E501\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     tests = [\n@@ -73,7 +63,6 @@ def test_suite():\n                 package="plone.app.workflow",\n                 optionflags=optionflags,\n                 setUp=setup,\n-                checker=Py23DocChecker(),\n             ),\n             layer=PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING,\n         )\ndiff --git a/plone/app/workflow/tests/test_sharing_view.py b/plone/app/workflow/tests/test_sharing_view.py\nindex 226376a..422cdc2 100644\n--- a/plone/app/workflow/tests/test_sharing_view.py\n+++ b/plone/app/workflow/tests/test_sharing_view.py\n@@ -12,7 +12,6 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n import unittest\n \n \n@@ -91,8 +90,6 @@ def test_search_with_nonascii_users(self):\n         results = view.role_settings()\n         self.assertTrue(len(results))\n         expected = "\xc3\x84\xc3\x9c\xc3\x9f"\n-        if six.PY2:\n-            expected = expected.encode("utf8")\n         self.assertEqual(\n             results[-1].get("title"),\n             expected,\ndiff --git a/setup.py b/setup.py\nindex 9d0079c..b69a6b2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,7 +26,7 @@\n     keywords="workflow sharing plone",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n-    url="https://pypi.org/project/plone.app.workflow",\n+    url="https://github.com/plone/plone.app.workflow",\n     license="GPL version 2",\n     packages=find_packages(),\n     namespace_packages=["plone", "plone.app"],\n@@ -38,25 +38,8 @@\n         ]\n     ),\n     install_requires=[\n-        "setuptools",\n-        "plone.memoize",\n-        "six",\n-        "transaction",\n-        "zope.component",\n-        "zope.dottedname",\n-        "zope.i18n",\n-        "zope.i18nmessageid",\n-        "zope.interface",\n-        "zope.lifecycleevent",\n-        "zope.schema",\n-        "zope.site",\n-        "zope.testing",\n-        "Acquisition",\n-        "DateTime",\n-        "Products.CMFCore>=2.4.0",\n-        "Products.DCWorkflow",\n-        "Products.GenericSetup >= 2.0",\n+        "plone.base" "plone.memoize",\n         "Products.statusmessages",\n-        "Zope2",\n+        "setuptools",\n     ],\n )\n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T21:24:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/aae950eab8b84b39406270dd0d407ea5dba94b4b

remove CMFPlone and cleanup

Files changed:
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/workflow/browser/sharing.py
M plone/app/workflow/localroles.py
M plone/app/workflow/remap.py

b'diff --git a/README.rst b/README.rst\nindex ca551b5..3326bcf 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -16,7 +16,7 @@ page. Local roles are defined in ``sharing.xml`` and looks as follows::\n           id="CopyEditor"\n           title="Can edit copy"\n           permission="Manage portal"\n-          interface="Products.CMFPlone.interfaces.ISiteRoot"\n+          interface="plone.base.interfaces.ISiteRoot"\n           i18n:attributes="title"\n           />\n   </sharing>\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 05f0beb..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__("pkg_resources").declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 05f0beb..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__("pkg_resources").declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/workflow/browser/sharing.py b/plone/app/workflow/browser/sharing.py\nindex 063d713..53e6a8f 100644\n--- a/plone/app/workflow/browser/sharing.py\n+++ b/plone/app/workflow/browser/sharing.py\n@@ -5,18 +5,19 @@\n from plone.app.workflow import PloneMessageFactory as _\n from plone.app.workflow.events import LocalrolesModifiedEvent\n from plone.app.workflow.interfaces import ISharingPageRole\n+from plone.base.utils import safe_text\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.instance import clearafter\n from plone.memoize.instance import memoize\n from Products.CMFCore import permissions\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import normalizeString\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from zExceptions import Forbidden\n from zope.component import getMultiAdapter\n from zope.component import getUtilitiesFor\n+from zope.component import getUtility\n from zope.event import notify\n from zope.i18n import translate\n \n@@ -144,8 +145,11 @@ def roles(self):\n                 continue\n             pairs.append(dict(id=name, title=utility.title))\n \n+        normalizer = getUtility(IIDNormalizer)\n         pairs.sort(\n-            key=lambda x: normalizeString(translate(x["title"], context=self.request))\n+            key=lambda x: normalizer.normalize(\n+                translate(x["title"], context=self.request)\n+            )\n         )\n         return pairs\n \n@@ -192,7 +196,7 @@ def role_settings(self):\n                         entry["roles"][role] = role in desired_roles\n \n         current_settings.sort(\n-            key=lambda x: safe_unicode(x["type"]) + safe_unicode(x["title"])\n+            key=lambda x: safe_text(x["type"]) + safe_text(x["title"])\n         )\n \n         return current_settings\n@@ -207,9 +211,7 @@ def inherited(self, context=None):\n         """Return True if local roles are inherited here."""\n         if context is None:\n             context = self.context\n-        if getattr(aq_base(context), "__ac_local_roles_block__", None):\n-            return False\n-        return True\n+        return not getattr(aq_base(context), "__ac_local_roles_block__", None)\n \n     # helper functions\n \n@@ -375,7 +377,7 @@ def _principal_search_results(\n         translated_message = translate(\n             _("Search for user or group"), context=self.request\n         )\n-        search_term = safe_unicode(self.request.form.get("search_term", None))\n+        search_term = safe_text(self.request.form.get("search_term", None))\n         if not search_term or search_term == translated_message:\n             return []\n \ndiff --git a/plone/app/workflow/localroles.py b/plone/app/workflow/localroles.py\nindex 6f3d6ad..7ecf9d2 100644\n--- a/plone/app/workflow/localroles.py\n+++ b/plone/app/workflow/localroles.py\n@@ -4,16 +4,6 @@\n from zope.interface import implementer\n \n \n-# from Products.CMFCore import permissions as core_permissions\n-\n-\n-"""\n-XXX: policy explanation\n-"""\n-\n-# These are for everyone\n-\n-\n @implementer(ISharingPageRole)\n class ReaderRole:\n \n@@ -44,26 +34,3 @@ class ReviewerRole:\n     title = _("title_can_review", default="Can review")\n     required_permission = permissions.DelegateReviewerRole\n     required_interface = None\n-\n-\n-# Only managers can manage these\n-\n-# class ManagerRole(object):\n-#    implements(ISharingPageRole)\n-#\n-#    title = _(u"title_can_manage", default=u"Can manage")\n-#    required_permission = core_permissions.ManagePortal\n-\n-# Low level role that should never be dispayed\n-\n-# class OwnerRole(object):\n-#    implements(ISharingPageRole)\n-#\n-#    title = _(u"title_can_own", default=u"Can own")\n-#    required_permission = core_permissions.ManagePortal\n-\n-# class MemberRole(object):\n-#    implements(ISharingPageRole)\n-#\n-#    title = _(u"title_can_subscribe", default=u"Can subscribe")\n-#    required_permission = core_permissions.ManagePortal\ndiff --git a/plone/app/workflow/remap.py b/plone/app/workflow/remap.py\nindex 0a2d926..bb561af 100644\n--- a/plone/app/workflow/remap.py\n+++ b/plone/app/workflow/remap.py\n@@ -1,15 +1,13 @@\n+from DateTime import DateTime\n+from Products.CMFCore.utils import getToolByName\n+from Products.DCWorkflow.utils import modifyRolesForPermission\n+\n import transaction\n \n \n SAVE_THRESHOLD = 100  # Do a savepoint every so often\n _marker = object()\n \n-# from Persistence import PersistentMapping\n-# from Acquisition import aq_base\n-from DateTime import DateTime\n-from Products.CMFCore.utils import getToolByName\n-from Products.DCWorkflow.utils import modifyRolesForPermission\n-\n \n def remap_workflow(context, type_ids, chain, state_map={}):\n     """Change the workflow for each type in type_ids to use the workflow\n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T21:28:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/d47598d53cff21fcaaf0c789c10753b2895946c1

add newsfile

Files changed:
A news/32.breaking

b'diff --git a/news/32.breaking b/news/32.breaking\nnew file mode 100644\nindex 0000000..16365e9\n--- /dev/null\n+++ b/news/32.breaking\n@@ -0,0 +1,2 @@\n+Isort, black, Pyupgrade, no six and use plone.base plus some minor manual cleanup.\n+[jensens]\n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-04T22:55:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/54365f30059f96ceca7ae53ffe03ace2b3a97e37

typo

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex b69a6b2..1d547c7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,7 +38,8 @@\n         ]\n     ),\n     install_requires=[\n-        "plone.base" "plone.memoize",\n+        "plone.base",\n+        "plone.memoize",\n         "Products.statusmessages",\n         "setuptools",\n     ],\n'

Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2022-05-05T09:13:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.workflow/commit/eaca180b1347e923a20512027f769bf78b16cae8

Merge pull request #32 from plone/plone-base-overhaul

Plone base overhaul

Files changed:
A news/32.breaking
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/workflow/__init__.py
M plone/app/workflow/browser/__init__.py
M plone/app/workflow/browser/sharing.py
M plone/app/workflow/events.py
M plone/app/workflow/exportimport.py
M plone/app/workflow/interfaces.py
M plone/app/workflow/localroles.py
M plone/app/workflow/permissions.py
M plone/app/workflow/remap.py
M plone/app/workflow/testing.py
M plone/app/workflow/tests/test_exportimport.py
M plone/app/workflow/tests/test_folder_workflow.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_remap.py
M plone/app/workflow/tests/test_sharing_view.py
M plone/app/workflow/tests/test_simple_publication_workflow.py
M plone/app/workflow/tests/utils.py
M setup.cfg
M setup.py

b'diff --git a/README.rst b/README.rst\nindex ca551b5..3326bcf 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -16,7 +16,7 @@ page. Local roles are defined in ``sharing.xml`` and looks as follows::\n           id="CopyEditor"\n           title="Can edit copy"\n           permission="Manage portal"\n-          interface="Products.CMFPlone.interfaces.ISiteRoot"\n+          interface="plone.base.interfaces.ISiteRoot"\n           i18n:attributes="title"\n           />\n   </sharing>\ndiff --git a/news/32.breaking b/news/32.breaking\nnew file mode 100644\nindex 0000000..16365e9\n--- /dev/null\n+++ b/news/32.breaking\n@@ -0,0 +1,2 @@\n+Isort, black, Pyupgrade, no six and use plone.base plus some minor manual cleanup.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/workflow/__init__.py b/plone/app/workflow/__init__.py\nindex 8fc4fb6..36ed231 100644\n--- a/plone/app/workflow/__init__.py\n+++ b/plone/app/workflow/__init__.py\n@@ -1,5 +1,7 @@\n # Register the permissions with Zope\n+from zope.i18nmessageid import MessageFactory\n+\n import plone.app.workflow.permissions\n \n-from zope.i18nmessageid import MessageFactory\n-PloneMessageFactory = MessageFactory(\'plone\')\n+\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/app/workflow/browser/__init__.py b/plone/app/workflow/browser/__init__.py\nindex 4287ca8..792d600 100644\n--- a/plone/app/workflow/browser/__init__.py\n+++ b/plone/app/workflow/browser/__init__.py\n@@ -1 +1 @@\n-#\n\\ No newline at end of file\n+#\ndiff --git a/plone/app/workflow/browser/sharing.py b/plone/app/workflow/browser/sharing.py\nindex 9bca505..53e6a8f 100644\n--- a/plone/app/workflow/browser/sharing.py\n+++ b/plone/app/workflow/browser/sharing.py\n@@ -1,29 +1,31 @@\n-from itertools import chain\n-\n-from plone.memoize.instance import memoize, clearafter\n-from zope.component import getUtilitiesFor, getMultiAdapter\n-from zope.i18n import translate\n-from zope.event import notify\n-\n-from Acquisition import aq_parent, aq_base\n from AccessControl import Unauthorized\n-from zExceptions import Forbidden\n-\n-from Products.CMFCore.utils import getToolByName\n+from Acquisition import aq_base\n+from Acquisition import aq_parent\n+from itertools import chain\n+from plone.app.workflow import PloneMessageFactory as _\n+from plone.app.workflow.events import LocalrolesModifiedEvent\n+from plone.app.workflow.interfaces import ISharingPageRole\n+from plone.base.utils import safe_text\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from plone.memoize.instance import clearafter\n+from plone.memoize.instance import memoize\n from Products.CMFCore import permissions\n-from Products.CMFPlone.utils import normalizeString, safe_unicode\n+from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-\n-from plone.app.workflow import PloneMessageFactory as _\n-from plone.app.workflow.interfaces import ISharingPageRole\n-from plone.app.workflow.events import LocalrolesModifiedEvent\n+from zExceptions import Forbidden\n+from zope.component import getMultiAdapter\n+from zope.component import getUtilitiesFor\n+from zope.component import getUtility\n+from zope.event import notify\n+from zope.i18n import translate\n \n import json\n \n-AUTH_GROUP = \'AuthenticatedUsers\'\n-STICKY = (AUTH_GROUP, )\n+\n+AUTH_GROUP = "AuthenticatedUsers"\n+STICKY = (AUTH_GROUP,)\n \n \n def merge_search_results(results, key):\n@@ -31,15 +33,15 @@ def merge_search_results(results, key):\n \n     Based on PlonePAS.browser.search.PASSearchView.merge.\n     """\n-    output={}\n+    output = {}\n     for entry in results:\n-        id=entry[key]\n+        id = entry[key]\n         if id not in output:\n-            output[id]=entry.copy()\n+            output[id] = entry.copy()\n         else:\n-            buf=entry.copy()\n+            buf = entry.copy()\n             buf.update(output[id])\n-            output[id]=buf\n+            output[id] = buf\n \n     return output.values()\n \n@@ -48,20 +50,18 @@ class SharingView(BrowserView):\n \n     # Actions\n \n-    template = ViewPageTemplateFile(\'sharing.pt\')\n-    macro_wrapper = ViewPageTemplateFile(\'macro_wrapper.pt\')\n+    template = ViewPageTemplateFile("sharing.pt")\n+    macro_wrapper = ViewPageTemplateFile("macro_wrapper.pt")\n \n     STICKY = STICKY\n \n     def __call__(self):\n-        """Perform the update and redirect if necessary, or render the page\n-        """\n+        """Perform the update and redirect if necessary, or render the page"""\n         postback = self.handle_form()\n         if postback:\n             return self.template()\n         else:\n-            context_state = self.context.restrictedTraverse(\n-                "@@plone_context_state")\n+            context_state = self.context.restrictedTraverse("@@plone_context_state")\n             url = context_state.view_url()\n             self.request.response.redirect(url)\n \n@@ -73,43 +73,44 @@ def handle_form(self):\n         postback = True\n \n         form = self.request.form\n-        submitted = form.get(\'form.submitted\', False)\n-        save_button = form.get(\'form.button.Save\', None) is not None\n-        cancel_button = form.get(\'form.button.Cancel\', None) is not None\n+        submitted = form.get("form.submitted", False)\n+        save_button = form.get("form.button.Save", None) is not None\n+        cancel_button = form.get("form.button.Cancel", None) is not None\n         if submitted and save_button and not cancel_button:\n-            if not self.request.get(\'REQUEST_METHOD\', \'GET\') == \'POST\':\n+            if not self.request.get("REQUEST_METHOD", "GET") == "POST":\n                 raise Forbidden\n \n-            authenticator = self.context.restrictedTraverse(\'@@authenticator\',\n-                                                            None)\n+            authenticator = self.context.restrictedTraverse("@@authenticator", None)\n             if not authenticator.verify():\n                 raise Forbidden\n \n             # Update the acquire-roles setting\n             if self.can_edit_inherit():\n-                inherit = bool(form.get(\'inherit\', False))\n+                inherit = bool(form.get("inherit", False))\n                 reindex = self.update_inherit(inherit, reindex=False)\n             else:\n                 reindex = False\n \n             # Update settings for users and groups\n-            entries = form.get(\'entries\', [])\n-            roles = [r[\'id\'] for r in self.roles()]\n+            entries = form.get("entries", [])\n+            roles = [r["id"] for r in self.roles()]\n             settings = []\n             for entry in entries:\n                 settings.append(\n-                    dict(id=entry[\'id\'],\n-                         type=entry[\'type\'],\n-                         roles=[r for r in roles\n-                            if entry.get(\'role_%s\' % r, False)]))\n+                    dict(\n+                        id=entry["id"],\n+                        type=entry["type"],\n+                        roles=[r for r in roles if entry.get("role_%s" % r, False)],\n+                    )\n+                )\n             if settings:\n-                reindex = self.update_role_settings(settings, reindex=False) \\\n-                            or reindex\n+                reindex = self.update_role_settings(settings, reindex=False) or reindex\n             if reindex:\n                 self.context.reindexObjectSecurity()\n                 notify(LocalrolesModifiedEvent(self.context, self.request))\n             IStatusMessage(self.request).addStatusMessage(\n-                _(u"Changes saved."), type=\'info\')\n+                _("Changes saved."), type="info"\n+            )\n \n         # Other buttons return to the sharing page\n         if cancel_button:\n@@ -129,7 +130,7 @@ def roles(self):\n             - title\n         """\n         context = self.context\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n \n         pairs = []\n \n@@ -139,12 +140,17 @@ def roles(self):\n                 if not portal_membership.checkPermission(permission, context):\n                     continue\n             # be friendly to utilities implemented without required_interface\n-            iface = getattr(utility, \'required_interface\', None)\n+            iface = getattr(utility, "required_interface", None)\n             if iface is not None and not iface.providedBy(context):\n                 continue\n-            pairs.append(dict(id = name, title = utility.title))\n-\n-        pairs.sort(key=lambda x: normalizeString(translate(x["title"], context=self.request)))\n+            pairs.append(dict(id=name, title=utility.title))\n+\n+        normalizer = getUtility(IIDNormalizer)\n+        pairs.sort(\n+            key=lambda x: normalizer.normalize(\n+                translate(x["title"], context=self.request)\n+            )\n+        )\n         return pairs\n \n     @memoize\n@@ -172,17 +178,16 @@ def role_settings(self):\n         # We may be called when the user does a search instead of an update.\n         # In that case we must not loose the changes the user made and\n         # merge those into the role settings.\n-        requested = self.request.form.get(\'entries\', None)\n+        requested = self.request.form.get("entries", None)\n         if requested is not None:\n-            knownroles = [r[\'id\'] for r in self.roles()]\n+            knownroles = [r["id"] for r in self.roles()]\n             settings = {}\n             for entry in requested:\n-                roles = [r for r in knownroles\n-                                if entry.get(\'role_%s\' % r, False)]\n-                settings[(entry[\'id\'], entry[\'type\'])] = roles\n+                roles = [r for r in knownroles if entry.get("role_%s" % r, False)]\n+                settings[(entry["id"], entry["type"])] = roles\n \n             for entry in current_settings:\n-                desired_roles = settings.get((entry[\'id\'], entry[\'type\']), None)\n+                desired_roles = settings.get((entry["id"], entry["type"]), None)\n \n                 if desired_roles is None:\n                     continue\n@@ -190,7 +195,9 @@ def role_settings(self):\n                     if entry["roles"][role] in [True, False]:\n                         entry["roles"][role] = role in desired_roles\n \n-        current_settings.sort(key=lambda x: safe_unicode(x["type"])+safe_unicode(x["title"]))\n+        current_settings.sort(\n+            key=lambda x: safe_text(x["type"]) + safe_text(x["title"])\n+        )\n \n         return current_settings\n \n@@ -201,13 +208,10 @@ def can_edit_inherit(self):\n         return True\n \n     def inherited(self, context=None):\n-        """Return True if local roles are inherited here.\n-        """\n+        """Return True if local roles are inherited here."""\n         if context is None:\n             context = self.context\n-        if getattr(aq_base(context), \'__ac_local_roles_block__\', None):\n-            return False\n-        return True\n+        return not getattr(aq_base(context), "__ac_local_roles_block__", None)\n \n     # helper functions\n \n@@ -220,9 +224,9 @@ def existing_role_settings(self):\n         """\n         context = self.context\n \n-        portal_membership = getToolByName(context, \'portal_membership\')\n-        portal_groups = getToolByName(context, \'portal_groups\')\n-        acl_users = getToolByName(context, \'acl_users\')\n+        portal_membership = getToolByName(context, "portal_membership")\n+        portal_groups = getToolByName(context, "portal_groups")\n+        acl_users = getToolByName(context, "acl_users")\n \n         info = []\n \n@@ -230,53 +234,59 @@ def existing_role_settings(self):\n \n         local_roles = acl_users._getLocalRolesForDisplay(context)\n         acquired_roles = self._inherited_roles() + self._borg_localroles()\n-        available_roles = [r[\'id\'] for r in self.roles()]\n+        available_roles = [r["id"] for r in self.roles()]\n \n         # first process acquired roles\n         items = {}\n         for name, roles, rtype, rid in acquired_roles:\n-            items[rid] = dict(id = rid,\n-                              name = name,\n-                              type = rtype,\n-                              sitewide = [],\n-                              acquired = roles,\n-                              local = [], )\n+            items[rid] = dict(\n+                id=rid,\n+                name=name,\n+                type=rtype,\n+                sitewide=[],\n+                acquired=roles,\n+                local=[],\n+            )\n \n         # second process local roles\n         for name, roles, rtype, rid in local_roles:\n             if rid in items:\n-                items[rid][\'local\'] = roles\n+                items[rid]["local"] = roles\n             else:\n-                items[rid] = dict(id = rid,\n-                                  name = name,\n-                                  type = rtype,\n-                                  sitewide = [],\n-                                  acquired = [],\n-                                  local = roles, )\n+                items[rid] = dict(\n+                    id=rid,\n+                    name=name,\n+                    type=rtype,\n+                    sitewide=[],\n+                    acquired=[],\n+                    local=roles,\n+                )\n \n         # Make sure we always get the authenticated users virtual group\n         if AUTH_GROUP not in items:\n-            items[AUTH_GROUP] = dict(id = AUTH_GROUP,\n-                                     name = _(u\'Logged-in users\'),\n-                                     type = \'group\',\n-                                     sitewide = [],\n-                                     acquired = [],\n-                                     local = [], )\n+            items[AUTH_GROUP] = dict(\n+                id=AUTH_GROUP,\n+                name=_("Logged-in users"),\n+                type="group",\n+                sitewide=[],\n+                acquired=[],\n+                local=[],\n+            )\n \n         # If the current user has been given roles, remove them so that he\n         # doesn\'t accidentally lock himself out.\n \n         member = portal_membership.getAuthenticatedMember()\n         if member.getId() in items:\n-            items[member.getId()][\'disabled\'] = True\n+            items[member.getId()]["disabled"] = True\n \n         # Sort the list: first the authenticated users virtual group, then\n         # all other groups and then all users, alphabetically\n \n-        dec_users = [(a[\'id\'] not in self.STICKY,\n-                       a[\'type\'],\n-                       a[\'name\'],\n-                       a) for a in items.values()]\n+        dec_users = [\n+            (a["id"] not in self.STICKY, a["type"], a["name"], a)\n+            for a in items.values()\n+        ]\n         dec_users.sort()\n \n         # Add the items to the info dict, assigning full name if possible.\n@@ -284,18 +294,20 @@ def existing_role_settings(self):\n \n         for d in dec_users:\n             item = d[-1]\n-            name = item[\'name\']\n-            rid = item[\'id\']\n+            name = item["name"]\n+            rid = item["id"]\n             login = rid\n             global_roles = set()\n \n-            if item[\'type\'] == \'user\':\n+            if item["type"] == "user":\n                 member = acl_users.getUserById(rid)\n                 if member is not None:\n-                    name = member.getProperty(\'fullname\') or member.getUserName() or name\n+                    name = (\n+                        member.getProperty("fullname") or member.getUserName() or name\n+                    )\n                     global_roles = set(member.getRoles())\n                     login = member.getUserName()\n-            elif item[\'type\'] == \'group\':\n+            elif item["type"] == "group":\n                 g = portal_groups.getGroupById(rid)\n                 name = g.getGroupTitleOrName()\n                 login = None\n@@ -303,41 +315,45 @@ def existing_role_settings(self):\n \n                 # This isn\'t a proper group, so it needs special treatment :(\n                 if rid == AUTH_GROUP:\n-                    name = _(u\'Logged-in users\')\n-\n-            info_item = dict(id = item[\'id\'],\n-                             type = item[\'type\'],\n-                             title = name,\n-                             disabled = item.get(\'disabled\', False),\n-                             roles = {})\n+                    name = _("Logged-in users")\n+\n+            info_item = dict(\n+                id=item["id"],\n+                type=item["type"],\n+                title=name,\n+                disabled=item.get("disabled", False),\n+                roles={},\n+            )\n             if login != name:\n-                info_item[\'login\'] = login\n+                info_item["login"] = login\n \n             # Record role settings\n             have_roles = False\n             for r in available_roles:\n                 if r in global_roles:\n-                    info_item[\'roles\'][r] = \'global\'\n-                elif r in item[\'acquired\']:\n-                    info_item[\'roles\'][r] = \'acquired\'\n-                    have_roles = True # we want to show acquired roles\n-                elif r in item[\'local\']:\n-                    info_item[\'roles\'][r] = True\n-                    have_roles = True # at least one role is set\n+                    info_item["roles"][r] = "global"\n+                elif r in item["acquired"]:\n+                    info_item["roles"][r] = "acquired"\n+                    have_roles = True  # we want to show acquired roles\n+                elif r in item["local"]:\n+                    info_item["roles"][r] = True\n+                    have_roles = True  # at least one role is set\n                 else:\n-                    info_item[\'roles\'][r] = False\n+                    info_item["roles"][r] = False\n \n             if have_roles or rid in self.STICKY:\n                 info.append(info_item)\n \n         return info\n \n-    def _principal_search_results(self,\n-                                  search_for_principal,\n-                                  get_principal_by_id,\n-                                  get_principal_title,\n-                                  principal_type,\n-                                  id_key):\n+    def _principal_search_results(\n+        self,\n+        search_for_principal,\n+        get_principal_by_id,\n+        get_principal_title,\n+        principal_type,\n+        id_key,\n+    ):\n         """Return search results for a query to add new users or groups.\n \n         Returns a list of dicts, as per role_settings().\n@@ -358,18 +374,22 @@ def _principal_search_results(self,\n         """\n         context = self.context\n \n-        translated_message = translate(_(u"Search for user or group"),\n-                context=self.request)\n-        search_term = safe_unicode(self.request.form.get(\'search_term\', None))\n+        translated_message = translate(\n+            _("Search for user or group"), context=self.request\n+        )\n+        search_term = safe_text(self.request.form.get("search_term", None))\n         if not search_term or search_term == translated_message:\n             return []\n \n-        existing_principals = set([p[\'id\'] for p in self.existing_role_settings()\n-                                if p[\'type\'] == principal_type])\n-        empty_roles = dict([(r[\'id\'], False) for r in self.roles()])\n+        existing_principals = {\n+            p["id"]\n+            for p in self.existing_role_settings()\n+            if p["type"] == principal_type\n+        }\n+        empty_roles = {r["id"]: False for r in self.roles()}\n         info = []\n \n-        hunter = getMultiAdapter((context, self.request), name=\'pas_search\')\n+        hunter = getMultiAdapter((context, self.request), name="pas_search")\n         for principal_info in search_for_principal(hunter, search_term):\n             principal_id = principal_info[id_key]\n             if principal_id not in existing_principals:\n@@ -380,16 +400,19 @@ def _principal_search_results(self,\n \n                 for r in principal.getRoles():\n                     if r in roles:\n-                        roles[r] = \'global\'\n+                        roles[r] = "global"\n                 login = principal.getUserName()\n-                if principal_type == \'group\':\n+                if principal_type == "group":\n                     login = None\n-                info.append(dict(id = principal_id,\n-                                 title = get_principal_title(principal,\n-                                                             principal_id),\n-                                 login = login,\n-                                 type = principal_type,\n-                                 roles = roles))\n+                info.append(\n+                    dict(\n+                        id=principal_id,\n+                        title=get_principal_title(principal, principal_id),\n+                        login=login,\n+                        type=principal_type,\n+                        roles=roles,\n+                    )\n+                )\n         return info\n \n     def user_search_results(self):\n@@ -399,18 +422,30 @@ def user_search_results(self):\n         """\n \n         def search_for_principal(hunter, search_term):\n-            return merge_search_results(chain(*[hunter.searchUsers(**{field: search_term})\n-                for field in [\'name\', \'fullname\', \'email\']]), \'userid\')\n+            return merge_search_results(\n+                chain(\n+                    *[\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    ]\n+                ),\n+                "userid",\n+            )\n \n         def get_principal_by_id(user_id):\n-            acl_users = getToolByName(self.context, \'acl_users\')\n+            acl_users = getToolByName(self.context, "acl_users")\n             return acl_users.getUserById(user_id)\n \n         def get_principal_title(user, default_title):\n-            return user.getProperty(\'fullname\') or user.getId() or default_title\n+            return user.getProperty("fullname") or user.getId() or default_title\n \n-        return self._principal_search_results(search_for_principal,\n-            get_principal_by_id, get_principal_title, \'user\', \'userid\')\n+        return self._principal_search_results(\n+            search_for_principal,\n+            get_principal_by_id,\n+            get_principal_title,\n+            "user",\n+            "userid",\n+        )\n \n     def group_search_results(self):\n         """Return search results for a query to add new groups.\n@@ -419,18 +454,30 @@ def group_search_results(self):\n         """\n \n         def search_for_principal(hunter, search_term):\n-            return merge_search_results(chain(*[hunter.searchGroups(**{field:search_term})\n-                for field in [\'id\', \'title\']]), \'groupid\')\n+            return merge_search_results(\n+                chain(\n+                    *[\n+                        hunter.searchGroups(**{field: search_term})\n+                        for field in ["id", "title"]\n+                    ]\n+                ),\n+                "groupid",\n+            )\n \n         def get_principal_by_id(group_id):\n-            portal_groups = getToolByName(self.context, \'portal_groups\')\n+            portal_groups = getToolByName(self.context, "portal_groups")\n             return portal_groups.getGroupById(group_id)\n \n         def get_principal_title(group, _):\n             return group.getGroupTitleOrName()\n \n-        return self._principal_search_results(search_for_principal,\n-            get_principal_by_id, get_principal_title, \'group\', \'groupid\')\n+        return self._principal_search_results(\n+            search_for_principal,\n+            get_principal_by_id,\n+            get_principal_title,\n+            "group",\n+            "groupid",\n+        )\n \n     def _inherited_roles(self):\n         """Returns a tuple with the acquired local roles."""\n@@ -439,13 +486,13 @@ def _inherited_roles(self):\n         if not self.inherited(context):\n             return ()\n \n-        portal = getToolByName(context, \'portal_url\').getPortalObject()\n+        portal = getToolByName(context, "portal_url").getPortalObject()\n         result = []\n         cont = True\n         if portal != context:\n             parent = aq_parent(context)\n             while cont:\n-                if not getattr(parent, \'acl_users\', False):\n+                if not getattr(parent, "acl_users", False):\n                     break\n                 userroles = parent.acl_users._getLocalRolesForDisplay(parent)\n                 for user, roles, role_type, name in userroles:\n@@ -472,7 +519,7 @@ def _inherited_roles(self):\n                     parent = aq_parent(parent)\n \n         # Tuplize all inner roles\n-        for pos in range(len(result)-1, -1, -1):\n+        for pos in range(len(result) - 1, -1, -1):\n             result[pos][1] = tuple(result[pos][1])\n             result[pos] = tuple(result[pos])\n \n@@ -492,8 +539,8 @@ def _borg_localroles(self):\n         borg_local_roles = pas._getAllLocalRoles(self.context)\n         for principal, roles in editable_local_roles.items():\n             borg_local_roles[principal] = [\n-                r for r in borg_local_roles.get(principal, ())\n-                if r not in roles]\n+                r for r in borg_local_roles.get(principal, ()) if r not in roles\n+            ]\n             if not borg_local_roles[principal]:\n                 del borg_local_roles[principal]\n \n@@ -501,9 +548,9 @@ def _borg_localroles(self):\n         result = []\n         for principal, roles in borg_local_roles.items():\n             username = principal\n-            userType = \'user\'\n+            userType = "user"\n             if pas.getGroup(principal):\n-                userType = \'group\'\n+                userType = "group"\n             else:\n                 user = pas.getUserById(principal)\n                 if user:\n@@ -520,15 +567,15 @@ def update_inherit(self, status=True, reindex=True):\n         are the same as the existing settings.\n         """\n         context = self.context\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n \n         if not portal_membership.checkPermission(\n-                                permissions.ModifyPortalContent, context):\n+            permissions.ModifyPortalContent, context\n+        ):\n             raise Unauthorized\n \n         block = not status\n-        oldblock = bool(getattr(aq_base(context),\n-                                \'__ac_local_roles_block__\', False))\n+        oldblock = bool(getattr(aq_base(context), "__ac_local_roles_block__", False))\n \n         if block == oldblock:\n             return False\n@@ -565,14 +612,16 @@ def update_role_settings(self, new_settings, reindex=True):\n         changed = False\n         context = self.context\n \n-        managed_roles = frozenset([r[\'id\'] for r in self.roles()])\n+        managed_roles = frozenset(r["id"] for r in self.roles())\n         member_ids_to_clear = []\n \n         for s in new_settings:\n-            user_id = s[\'id\']\n+            user_id = s["id"]\n \n-            existing_roles = frozenset(context.get_local_roles_for_userid(userid=user_id))\n-            selected_roles = frozenset(s[\'roles\'])\n+            existing_roles = frozenset(\n+                context.get_local_roles_for_userid(userid=user_id)\n+            )\n+            selected_roles = frozenset(s["roles"])\n \n             relevant_existing_roles = managed_roles & existing_roles\n \n@@ -607,15 +656,11 @@ def update_role_settings(self, new_settings, reindex=True):\n \n         return changed\n \n-    def updateSharingInfo(self, search_term=\'\'):\n+    def updateSharingInfo(self, search_term=""):\n         self.handle_form()\n-        the_id = \'user-group-sharing\'\n+        the_id = "user-group-sharing"\n         macro = self.template.macros[the_id]\n-        res = self.macro_wrapper(the_macro=macro, instance=self.context,\n-                                 view=self)\n-        messages = self.context.restrictedTraverse(\'global_statusmessage\')()\n-        self.request.response.setHeader("Content-type","application/json")\n-        return json.dumps({\n-            \'body\': res,\n-            \'messages\': messages\n-        })\n+        res = self.macro_wrapper(the_macro=macro, instance=self.context, view=self)\n+        messages = self.context.restrictedTraverse("global_statusmessage")()\n+        self.request.response.setHeader("Content-type", "application/json")\n+        return json.dumps({"body": res, "messages": messages})\ndiff --git a/plone/app/workflow/events.py b/plone/app/workflow/events.py\nindex 0185b55..b8b3133 100644\n--- a/plone/app/workflow/events.py\n+++ b/plone/app/workflow/events.py\n@@ -1,9 +1,8 @@\n+from plone.app.workflow.interfaces import ILocalrolesModifiedEvent\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectModifiedEvent\n-from plone.app.workflow.interfaces import ILocalrolesModifiedEvent\n \n \n @implementer(ILocalrolesModifiedEvent)\n class LocalrolesModifiedEvent(ObjectModifiedEvent):\n-    """Gets fired after local roles of an object has been changed.\n-    """\n+    """Gets fired after local roles of an object has been changed."""\ndiff --git a/plone/app/workflow/exportimport.py b/plone/app/workflow/exportimport.py\nindex 3cfca7a..fbd4537 100644\n--- a/plone/app/workflow/exportimport.py\n+++ b/plone/app/workflow/exportimport.py\n@@ -1,21 +1,18 @@\n-import six\n from persistent import Persistent\n-from zope.interface import implementer\n-\n from plone.app.workflow.interfaces import ISharingPageRole\n-\n+from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.interfaces import ISetupEnviron\n+from Products.GenericSetup.utils import XMLAdapterBase\n from zope.component import adapts\n from zope.component import getSiteManager\n from zope.component import queryMultiAdapter\n from zope.dottedname.resolve import resolve\n+from zope.i18nmessageid import MessageFactory\n+from zope.interface import implementer\n from zope.interface.interfaces import IComponentRegistry\n \n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.interfaces import ISetupEnviron\n-from Products.GenericSetup.utils import XMLAdapterBase\n \n-from zope.i18nmessageid import MessageFactory\n-PMF = MessageFactory(\'plone\')\n+PMF = MessageFactory("plone")\n \n \n @implementer(ISharingPageRole)\n@@ -24,12 +21,11 @@ class PersistentSharingPageRole(Persistent):\n     page roles.\n     """\n \n-    title = u""\n+    title = ""\n     required_permission = None\n     required_interface = None\n \n-    def __init__(self, title=u"",\n-                 required_permission=None, required_interface=None):\n+    def __init__(self, title="", required_permission=None, required_interface=None):\n         self.title = PMF(title)\n         self.required_permission = required_permission\n         self.required_interface = required_interface\n@@ -38,10 +34,10 @@ def __init__(self, title=u"",\n class SharingXMLAdapter(XMLAdapterBase):\n     adapts(IComponentRegistry, ISetupEnviron)\n \n-    _LOGGER_ID = \'plone.app.workflow\'\n+    _LOGGER_ID = "plone.app.workflow"\n \n-    name = \'plone.app.workflow.sharing\'\n-    info_tag = u"__sharing_gs__"\n+    name = "plone.app.workflow.sharing"\n+    info_tag = "__sharing_gs__"\n \n     def _importNode(self, node):\n \n@@ -56,9 +52,11 @@ def _exportNode(self):\n         for reg in self._iterRoleRegistrations():\n             regs.append(self._extractRole(reg))\n \n-        node = self._doc.createElement(\'sharing\')\n+        node = self._doc.createElement("sharing")\n+\n         def _sort(key):\n-            return (key.getAttribute(\'id\'), key.getAttribute(\'title\'))\n+            return (key.getAttribute("id"), key.getAttribute("title"))\n+\n         regs.sort(key=_sort)\n         for reg in regs:\n             node.appendChild(reg)\n@@ -66,9 +64,11 @@ def _sort(key):\n \n     def _iterRoleRegistrations(self):\n         for reg in tuple(self.context.registeredUtilities()):\n-            if reg.provided.isOrExtends(ISharingPageRole) \\\n-                    and isinstance(reg.info, six.string_types)  \\\n-                    and self.info_tag in reg.info:\n+            if (\n+                reg.provided.isOrExtends(ISharingPageRole)\n+                and isinstance(reg.info, str)\n+                and self.info_tag in reg.info\n+            ):\n                 yield reg\n \n     def _purgeRoles(self):\n@@ -77,17 +77,17 @@ def _purgeRoles(self):\n \n     def _initRole(self, node):\n \n-        if node.nodeName != \'role\':\n+        if node.nodeName != "role":\n             return\n \n-        name = six.text_type(node.getAttribute(\'id\'))\n-        title = six.text_type(node.getAttribute(\'title\'))\n-        required = node.getAttribute(\'permission\') or None\n-        iface = node.getAttribute(\'interface\') or None\n+        name = str(node.getAttribute("id"))\n+        title = str(node.getAttribute("title"))\n+        required = node.getAttribute("permission") or None\n+        iface = node.getAttribute("interface") or None\n         if iface is not None:\n             iface = resolve(iface)\n \n-        if node.hasAttribute(\'remove\'):\n+        if node.hasAttribute("remove"):\n             utility = self.context.queryUtility(ISharingPageRole, name)\n             if utility is not None:\n                 if name in self.context.objectIds():\n@@ -96,25 +96,28 @@ def _initRole(self, node):\n             return\n \n         component = PersistentSharingPageRole(\n-            title=title, required_permission=required, required_interface=iface)\n+            title=title, required_permission=required, required_interface=iface\n+        )\n \n-        self.context.registerUtility(component, ISharingPageRole, name, info=self.info_tag)\n+        self.context.registerUtility(\n+            component, ISharingPageRole, name, info=self.info_tag\n+        )\n \n     def _extractRole(self, reg):\n \n         component = reg.component\n \n-        node = self._doc.createElement(\'role\')\n-        node.setAttribute(\'id\', reg.name)\n-        node.setAttribute(\'title\', component.title)\n+        node = self._doc.createElement("role")\n+        node.setAttribute("id", reg.name)\n+        node.setAttribute("title", component.title)\n \n         if component.required_permission:\n-            node.setAttribute(\'permission\', component.required_permission)\n+            node.setAttribute("permission", component.required_permission)\n \n         if component.required_interface:\n             iface = component.required_interface\n-            iface = iface.__module__ + \'.\' + iface.__name__\n-            node.setAttribute(\'interface\', iface)\n+            iface = iface.__module__ + "." + iface.__name__\n+            node.setAttribute("interface", iface)\n \n         return node\n \n@@ -122,15 +125,19 @@ def _extractRole(self, reg):\n def import_sharing(context):\n \n     sm = getSiteManager(context.getSite())\n-    logger = context.getLogger(\'plone.app.workflow\')\n+    logger = context.getLogger("plone.app.workflow")\n \n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger.info("Can not register sharing page roles, as no component registry was found.")\n+        logger.info(\n+            "Can not register sharing page roles, as no component registry was found."\n+        )\n         return\n \n-    importer = queryMultiAdapter((sm, context), IBody, name=u"plone.app.workflow.sharing")\n+    importer = queryMultiAdapter(\n+        (sm, context), IBody, name="plone.app.workflow.sharing"\n+    )\n     if importer:\n-        body = context.readDataFile(\'sharing.xml\')\n+        body = context.readDataFile("sharing.xml")\n         if body is not None:\n             importer.body = body\n \n@@ -138,14 +145,16 @@ def import_sharing(context):\n def export_sharing(context):\n \n     sm = getSiteManager(context.getSite())\n-    logger = context.getLogger(\'plone.app.workflow\')\n+    logger = context.getLogger("plone.app.workflow")\n \n     if sm is None or not IComponentRegistry.providedBy(sm):\n         logger.debug("Nothing to export.")\n         return\n \n-    exporter = queryMultiAdapter((sm, context), IBody, name=u"plone.app.workflow.sharing")\n+    exporter = queryMultiAdapter(\n+        (sm, context), IBody, name="plone.app.workflow.sharing"\n+    )\n     if exporter:\n         body = exporter.body\n         if body is not None:\n-            context.writeDataFile(\'sharing.xml\', body, exporter.mime_type)\n+            context.writeDataFile("sharing.xml", body, exporter.mime_type)\ndiff --git a/plone/app/workflow/interfaces.py b/plone/app/workflow/interfaces.py\nindex 73ddac9..6bd7a2b 100644\n--- a/plone/app/workflow/interfaces.py\n+++ b/plone/app/workflow/interfaces.py\n@@ -1,6 +1,6 @@\n+from zope import schema\n from zope.interface import Interface\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-from zope import schema\n \n \n class ILocalrolesModifiedEvent(IObjectModifiedEvent):\n@@ -19,13 +19,14 @@ class ISharingPageRole(Interface):\n     and the user has the required_permission (or it\'s None).\n     """\n \n-    title = schema.TextLine(title=u"A friendly name for the role")\n+    title = schema.TextLine(title="A friendly name for the role")\n \n     required_permission = schema.TextLine(\n-        title=u"Permission required to manage this local role",\n-        required=False)\n+        title="Permission required to manage this local role", required=False\n+    )\n \n     required_interface = schema.Object(\n         schema=Interface,\n-        title=u"Context interface required to display this role",\n-        required=False)\n+        title="Context interface required to display this role",\n+        required=False,\n+    )\ndiff --git a/plone/app/workflow/localroles.py b/plone/app/workflow/localroles.py\nindex 15b83f8..7ecf9d2 100644\n--- a/plone/app/workflow/localroles.py\n+++ b/plone/app/workflow/localroles.py\n@@ -1,65 +1,36 @@\n-from zope.interface import implementer\n-from plone.app.workflow.interfaces import ISharingPageRole\n from plone.app.workflow import permissions\n-#from Products.CMFCore import permissions as core_permissions\n-\n from plone.app.workflow import PloneMessageFactory as _\n+from plone.app.workflow.interfaces import ISharingPageRole\n+from zope.interface import implementer\n \n-"""\n-XXX: policy explanation\n-"""\n-\n-# These are for everyone\n \n @implementer(ISharingPageRole)\n-class ReaderRole(object):\n+class ReaderRole:\n \n-    title = _(u"title_can_view", default=u"Can view")\n+    title = _("title_can_view", default="Can view")\n     required_permission = permissions.DelegateReaderRole\n     required_interface = None\n \n \n @implementer(ISharingPageRole)\n-class EditorRole(object):\n+class EditorRole:\n \n-    title = _(u"title_can_edit", default=u"Can edit")\n+    title = _("title_can_edit", default="Can edit")\n     required_permission = permissions.DelegateEditorRole\n     required_interface = None\n \n \n @implementer(ISharingPageRole)\n-class ContributorRole(object):\n+class ContributorRole:\n \n-    title = _(u"title_can_add", default=u"Can add")\n+    title = _("title_can_add", default="Can add")\n     required_permission = permissions.DelegateContributorRole\n     required_interface = None\n \n \n @implementer(ISharingPageRole)\n-class ReviewerRole(object):\n+class ReviewerRole:\n \n-    title = _(u"title_can_review", default=u"Can review")\n+    title = _("title_can_review", default="Can review")\n     required_permission = permissions.DelegateReviewerRole\n     required_interface = None\n-\n-# Only managers can manage these\n-\n-#class ManagerRole(object):\n-#    implements(ISharingPageRole)\n-#\n-#    title = _(u"title_can_manage", default=u"Can manage")\n-#    required_permission = core_permissions.ManagePortal\n-\n-# Low level role that should never be dispayed\n-\n-#class OwnerRole(object):\n-#    implements(ISharingPageRole)\n-#\n-#    title = _(u"title_can_own", default=u"Can own")\n-#    required_permission = core_permissions.ManagePortal\n-\n-#class MemberRole(object):\n-#    implements(ISharingPageRole)\n-#\n-#    title = _(u"title_can_subscribe", default=u"Can subscribe")\n-#    required_permission = core_permissions.ManagePortal\ndiff --git a/plone/app/workflow/permissions.py b/plone/app/workflow/permissions.py\nindex 6b489d4..6b925d3 100644\n--- a/plone/app/workflow/permissions.py\n+++ b/plone/app/workflow/permissions.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ModuleSecurityInfo\n from AccessControl.Permission import addPermission\n \n+\n security = ModuleSecurityInfo("plone.app.workflow.permissions")\n \n # Controls access to the "sharing" page\n@@ -9,7 +9,13 @@\n DelegateRoles = "Sharing page: Delegate roles"\n addPermission(\n     DelegateRoles,\n-    (\'Manager\', \'Site Administrator\', \'Owner\', \'Editor\', \'Reviewer\', ),\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+        "Editor",\n+        "Reviewer",\n+    ),\n )\n \n # Control the individual roles\n@@ -17,26 +23,34 @@\n DelegateReaderRole = "Sharing page: Delegate Reader role"\n addPermission(\n     DelegateReaderRole,\n-    (\'Manager\', \'Site Administrator\', \'Owner\', \'Editor\', \'Reviewer\'),\n+    ("Manager", "Site Administrator", "Owner", "Editor", "Reviewer"),\n )\n \n security.declarePublic("DelegateEditorRole")\n DelegateEditorRole = "Sharing page: Delegate Editor role"\n addPermission(\n     DelegateEditorRole,\n-    (\'Manager\', \'Site Administrator\', \'Owner\', \'Editor\'),\n+    ("Manager", "Site Administrator", "Owner", "Editor"),\n )\n \n security.declarePublic("DelegateContributorRole")\n DelegateContributorRole = "Sharing page: Delegate Contributor role"\n addPermission(\n     DelegateContributorRole,\n-    (\'Manager\', \'Site Administrator\', \'Owner\',),\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+    ),\n )\n \n security.declarePublic("DelegateReviewerRole")\n DelegateReviewerRole = "Sharing page: Delegate Reviewer role"\n addPermission(\n     DelegateReviewerRole,\n-    (\'Manager\', \'Site Administrator\', \'Reviewer\',),\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Reviewer",\n+    ),\n )\ndiff --git a/plone/app/workflow/remap.py b/plone/app/workflow/remap.py\nindex d4488fd..bb561af 100644\n--- a/plone/app/workflow/remap.py\n+++ b/plone/app/workflow/remap.py\n@@ -1,13 +1,12 @@\n+from DateTime import DateTime\n+from Products.CMFCore.utils import getToolByName\n+from Products.DCWorkflow.utils import modifyRolesForPermission\n+\n import transaction\n \n-SAVE_THRESHOLD = 100 # Do a savepoint every so often\n-_marker = object()\n \n-from Products.CMFCore.utils import getToolByName\n-from Products.DCWorkflow.utils import modifyRolesForPermission\n-#from Persistence import PersistentMapping\n-#from Acquisition import aq_base\n-from DateTime import DateTime\n+SAVE_THRESHOLD = 100  # Do a savepoint every so often\n+_marker = object()\n \n \n def remap_workflow(context, type_ids, chain, state_map={}):\n@@ -18,15 +17,15 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     """\n \n     if chain is None:\n-        chain = \'(Default)\'\n+        chain = "(Default)"\n \n-    portal_workflow = getToolByName(context, \'portal_workflow\')\n+    portal_workflow = getToolByName(context, "portal_workflow")\n \n     default_chain = portal_workflow.getDefaultChain()\n     chains_by_type = dict(portal_workflow.listChainOverrides())\n \n     # Build a dictionary of type id -> chain before we made changes\n-    old_chains = dict([(t, chains_by_type.get(t, default_chain)) for t in type_ids])\n+    old_chains = {t: chains_by_type.get(t, default_chain) for t in type_ids}\n \n     # Work out which permissions were managed by the old chain, but not\n     # by the new chain. This may vary by type id.\n@@ -34,7 +33,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     # Update the workflow chain in portal_workflows.\n \n     # XXX: There is no decent API for this it seems :-(\n-    if chain == \'(Default)\':\n+    if chain == "(Default)":\n         cbt = portal_workflow._chains_by_type\n         for type_id in type_ids:\n             if type_id in cbt:\n@@ -52,7 +51,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n     new_chain_permissions = set()\n     permissions_to_reset = {}\n \n-    if chain == \'(Default)\':\n+    if chain == "(Default)":\n         chain = default_chain\n     for c in chain:\n         if c not in chain_workflows:\n@@ -61,7 +60,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n                 new_chain_permissions.add(permission)\n \n     for typeid, oc in old_chains.items():\n-        if oc == \'(Default)\':\n+        if oc == "(Default)":\n             oc = default_chain\n         permissions_to_reset[typeid] = set()\n         for c in oc:\n@@ -71,7 +70,7 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n                 if permission not in new_chain_permissions:\n                     permissions_to_reset[typeid].add(permission)\n \n-    portal_catalog = getToolByName(context, \'portal_catalog\')\n+    portal_catalog = getToolByName(context, "portal_catalog")\n \n     # Then update the state of each\n     remapped_count = 0\n@@ -97,26 +96,30 @@ def remap_workflow(context, type_ids, chain, state_map={}):\n             if old_wf is not None:\n                 old_status = portal_workflow.getStatusOf(old_wf.getId(), obj)\n                 if old_status is not None:\n-                    old_state = old_status.get(\'review_state\', None)\n+                    old_state = old_status.get("review_state", None)\n \n             # Now add a transition\n             for new_wf_name in chain:\n                 new_wf = chain_workflows[new_wf_name]\n-                new_status = {\'action\': None,\n-                              \'actor\': None,\n-                              \'comments\': \'State remapped from control panel\',\n-                              \'review_state\': state_map.get(old_state, new_wf.initial_state),\n-                              \'time\': DateTime()}\n+                new_status = {\n+                    "action": None,\n+                    "actor": None,\n+                    "comments": "State remapped from control panel",\n+                    "review_state": state_map.get(old_state, new_wf.initial_state),\n+                    "time": DateTime(),\n+                }\n                 portal_workflow.setStatusOf(new_wf_name, obj, new_status)\n \n                 # Trigger any automatic transitions, or else just make sure the role mappings are right\n-                auto_transition = new_wf._findAutomaticTransition(obj, new_wf._getWorkflowStateOf(obj))\n+                auto_transition = new_wf._findAutomaticTransition(\n+                    obj, new_wf._getWorkflowStateOf(obj)\n+                )\n                 if auto_transition is not None:\n                     new_wf._changeStateOf(obj, auto_transition)\n                 else:\n                     new_wf.updateRoleMappingsFor(obj)\n \n-        obj.reindexObject(idxs=[\'allowedRolesAndUsers\', \'review_state\'])\n+        obj.reindexObject(idxs=["allowedRolesAndUsers", "review_state"])\n \n         remapped_count += 1\n         threshold_count += 1\ndiff --git a/plone/app/workflow/testing.py b/plone/app/workflow/testing.py\nindex 99bae91..94c8927 100644\n--- a/plone/app/workflow/testing.py\n+++ b/plone/app/workflow/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import FunctionalTesting\n@@ -9,43 +8,111 @@\n \n \n class PloneAppWorkflowLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.app.workflow\n+\n         self.loadZCML(package=plone.app.workflow)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n \n-        acl_users.userFolderAddUser(\'manager\', \'secret\', [\'Manager\', ], [])\n-        acl_users.userFolderAddUser(\'member\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'owner\', \'secret\', [\'Owner\', ], [])\n-        acl_users.userFolderAddUser(\'reviewer\', \'secret\', [\'Reviewer\', ], [])\n-        acl_users.userFolderAddUser(\'editor\', \'secret\', [\'Editor\', ], [])\n-        acl_users.userFolderAddUser(\'reader\', \'secret\', [\'Reader\', ], [])\n+        acl_users.userFolderAddUser(\n+            "manager",\n+            "secret",\n+            [\n+                "Manager",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "member",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "owner",\n+            "secret",\n+            [\n+                "Owner",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "reviewer",\n+            "secret",\n+            [\n+                "Reviewer",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "editor",\n+            "secret",\n+            [\n+                "Editor",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "reader",\n+            "secret",\n+            [\n+                "Reader",\n+            ],\n+            [],\n+        )\n \n-        acl_users.userFolderAddUser(\'delegate_reader\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'delegate_editor\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'delegate_contributor\', \'secret\', [\'Member\', ], [])\n-        acl_users.userFolderAddUser(\'delegate_reviewer\', \'secret\', [\'Member\', ], [])\n+        acl_users.userFolderAddUser(\n+            "delegate_reader",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "delegate_editor",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "delegate_contributor",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n+        acl_users.userFolderAddUser(\n+            "delegate_reviewer",\n+            "secret",\n+            [\n+                "Member",\n+            ],\n+            [],\n+        )\n \n \n PLONE_APP_WORKFLOW_FIXTURE = PloneAppWorkflowLayer()\n \n PLONE_APP_WORKFLOW_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),\n-    name=\'PloneAppWorkflowLayer:Integration\',\n+    bases=(PLONE_APP_WORKFLOW_FIXTURE,),\n+    name="PloneAppWorkflowLayer:Integration",\n )\n \n PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),\n-    name=\'PloneAppWorkflowLayer:Functional\',\n+    bases=(PLONE_APP_WORKFLOW_FIXTURE,),\n+    name="PloneAppWorkflowLayer:Functional",\n )\n \n optionflags = (\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-    | doctest.ELLIPSIS\n-    | doctest.NORMALIZE_WHITESPACE\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n )\ndiff --git a/plone/app/workflow/tests/test_exportimport.py b/plone/app/workflow/tests/test_exportimport.py\nindex 1082f38..6a92c0e 100644\n--- a/plone/app/workflow/tests/test_exportimport.py\n+++ b/plone/app/workflow/tests/test_exportimport.py\n@@ -1,22 +1,21 @@\n-# -*- coding: utf-8 -*-\n from five.localsitemanager import make_objectmanager_site\n from OFS.Folder import Folder\n from plone.app.workflow.exportimport import export_sharing\n from plone.app.workflow.exportimport import import_sharing\n-from plone.app.workflow.exportimport import SharingXMLAdapter\n from plone.app.workflow.exportimport import PersistentSharingPageRole\n+from plone.app.workflow.exportimport import SharingXMLAdapter\n from plone.app.workflow.interfaces import ISharingPageRole\n from plone.testing.zca import UNIT_TESTING\n-from Products.GenericSetup.tests.common import DummyImportContext\n from Products.GenericSetup.tests.common import DummyExportContext\n+from Products.GenericSetup.tests.common import DummyImportContext\n from zope.component import getSiteManager\n from zope.component import getUtilitiesFor\n from zope.component import provideAdapter\n from zope.component import provideUtility\n-from zope.interface import Interface\n from zope.component.hooks import clearSite\n from zope.component.hooks import setHooks\n from zope.component.hooks import setSite\n+from zope.interface import Interface\n \n import unittest\n \n@@ -26,9 +25,9 @@ class ExportImportTest(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def setUp(self):\n-        provideAdapter(SharingXMLAdapter, name=\'plone.app.workflow.sharing\')\n+        provideAdapter(SharingXMLAdapter, name="plone.app.workflow.sharing")\n \n-        site = Folder(\'plone\')\n+        site = Folder("plone")\n         make_objectmanager_site(site)\n         setHooks()\n         setSite(site)\n@@ -45,12 +44,11 @@ def tearDown(self):\n \n \n class TestImport(ExportImportTest):\n-\n     def test_empty_import_no_purge(self):\n \n         xml = "<sharing />"\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n \n@@ -67,16 +65,16 @@ def test_import_single_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n \n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n     def test_import_multiple_no_purge(self):\n \n@@ -91,17 +89,17 @@ def test_import_multiple_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n-        self.assertEqual(\'Can control\', roles[\'Controller\'].title)\n-        self.assertEqual(None, roles[\'Controller\'].required_permission)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n+        self.assertEqual("Can control", roles["Controller"].title)\n+        self.assertEqual(None, roles["Controller"].required_permission)\n \n     def test_import_multiple_times_no_purge(self):\n \n@@ -114,15 +112,15 @@ def test_import_multiple_times_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n         xml = """\\\n <sharing>\n@@ -131,17 +129,17 @@ def test_import_multiple_times_no_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n-        self.assertEqual(\'Can control\', roles[\'Controller\'].title)\n-        self.assertEqual(None, roles[\'Controller\'].required_permission)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n+        self.assertEqual("Can control", roles["Controller"].title)\n+        self.assertEqual(None, roles["Controller"].required_permission)\n \n     def test_import_multiples_times_purge(self):\n \n@@ -154,15 +152,15 @@ def test_import_multiples_times_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n         xml = """\\\n <sharing>\n@@ -171,14 +169,14 @@ def test_import_multiples_times_purge(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=True)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can control\', roles[\'Controller\'].title)\n-        self.assertEqual(None, roles[\'Controller\'].required_permission)\n+        self.assertEqual("Can control", roles["Controller"].title)\n+        self.assertEqual(None, roles["Controller"].required_permission)\n \n     def test_import_multiples_times_no_purge_overwrite(self):\n \n@@ -191,15 +189,15 @@ def test_import_multiples_times_no_purge_overwrite(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(Interface, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(Interface, roles["CopyEditor"].required_interface)\n \n         xml = """\\\n <sharing>\n@@ -209,19 +207,25 @@ def test_import_multiples_times_no_purge_overwrite(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can edit copy\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate: CopyEditor\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(None, roles[\'CopyEditor\'].required_interface)\n+        self.assertEqual("Can edit copy", roles["CopyEditor"].title)\n+        self.assertEqual(\n+            "Delegate: CopyEditor", roles["CopyEditor"].required_permission\n+        )\n+        self.assertEqual(None, roles["CopyEditor"].required_interface)\n \n     def test_import_override_global(self):\n \n-        provideUtility(PersistentSharingPageRole("Do stuff", "A permission"), ISharingPageRole, name="DoerOfStuff")\n+        provideUtility(\n+            PersistentSharingPageRole("Do stuff", "A permission"),\n+            ISharingPageRole,\n+            name="DoerOfStuff",\n+        )\n \n         xml = """\\\n <sharing>\n@@ -234,17 +238,19 @@ def test_import_override_global(self):\n </sharing>\n """\n         context = DummyImportContext(self.site, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n-        self.assertEqual(\'Delegate edit copy\', roles[\'CopyEditor\'].required_permission)\n-        self.assertEqual(None, roles[\'CopyEditor\'].required_interface)\n-        self.assertEqual(\'Can do stuff\', roles[\'DoerOfStuff\'].title)\n-        self.assertEqual(\'Delegate doing stuff\', roles[\'DoerOfStuff\'].required_permission)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n+        self.assertEqual("Delegate edit copy", roles["CopyEditor"].required_permission)\n+        self.assertEqual(None, roles["CopyEditor"].required_interface)\n+        self.assertEqual("Can do stuff", roles["DoerOfStuff"].title)\n+        self.assertEqual(\n+            "Delegate doing stuff", roles["DoerOfStuff"].required_permission\n+        )\n \n     def test_remove_one(self):\n \n@@ -256,13 +262,13 @@ def test_remove_one(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(1, len(roles))\n-        self.assertEqual(\'Can copyedit\', roles[\'CopyEditor\'].title)\n+        self.assertEqual("Can copyedit", roles["CopyEditor"].title)\n \n         xml = """\\\n <sharing>\n@@ -271,7 +277,7 @@ def test_remove_one(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n@@ -290,7 +296,7 @@ def test_remove_multiple(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n         import_sharing(context)\n \n         xml = """\\\n@@ -305,18 +311,17 @@ def test_remove_multiple(self):\n </sharing>\n """\n         context = DummyImportContext(self.sm, purge=False)\n-        context._files = {\'sharing.xml\': xml}\n+        context._files = {"sharing.xml": xml}\n \n         import_sharing(context)\n         roles = self.roles()\n \n         self.assertEqual(2, len(roles))\n-        self.assertEqual(\'Can do stuff\', roles[\'DoerOfStuff\'].title)\n-        self.assertEqual(\'Can hack\', roles[\'Hacker\'].title)\n+        self.assertEqual("Can do stuff", roles["DoerOfStuff"].title)\n+        self.assertEqual("Can hack", roles["Hacker"].title)\n \n \n class TestExport(ExportImportTest):\n-\n     def test_export_empty(self):\n \n         xml = b"""\\\n@@ -326,17 +331,25 @@ def test_export_empty(self):\n         context = DummyExportContext(self.site)\n         export_sharing(context)\n \n-        self.assertEqual(u\'sharing.xml\', context._wrote[0][0])\n+        self.assertEqual("sharing.xml", context._wrote[0][0])\n         self.assertEqual(xml, context._wrote[0][1])\n \n     def test_export_multiple(self):\n         sm = self.site.getSiteManager()\n \n         # Will not be exported, as it\'s global\n-        provideUtility(PersistentSharingPageRole("Do stuff", "A permission"), ISharingPageRole, name="DoerOfStuff")\n+        provideUtility(\n+            PersistentSharingPageRole("Do stuff", "A permission"),\n+            ISharingPageRole,\n+            name="DoerOfStuff",\n+        )\n \n         # Will not be exported, as it wasn\'t imported with this handler\n-        sm.registerUtility(PersistentSharingPageRole("Do other Stuff"), ISharingPageRole, "DoerOfOtherStuff")\n+        sm.registerUtility(\n+            PersistentSharingPageRole("Do other Stuff"),\n+            ISharingPageRole,\n+            "DoerOfOtherStuff",\n+        )\n \n         import_xml = b"""\\\n <sharing>\n@@ -356,13 +369,13 @@ def test_export_multiple(self):\n """\n \n         import_context = DummyImportContext(self.site, purge=False)\n-        import_context._files = {\'sharing.xml\': import_xml}\n+        import_context._files = {"sharing.xml": import_xml}\n \n         import_sharing(import_context)\n \n         export_context = DummyExportContext(self.site)\n         export_sharing(export_context)\n \n-        self.assertEqual(\'sharing.xml\', export_context._wrote[0][0])\n+        self.assertEqual("sharing.xml", export_context._wrote[0][0])\n \n         self.assertEqual(export_xml, export_context._wrote[0][1])\ndiff --git a/plone/app/workflow/tests/test_folder_workflow.py b/plone/app/workflow/tests/test_folder_workflow.py\nindex a9e5874..d466426 100644\n--- a/plone/app/workflow/tests/test_folder_workflow.py\n+++ b/plone/app/workflow/tests/test_folder_workflow.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ListFolderContents\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.WorkflowCore import WorkflowException\n \n import unittest\n@@ -18,232 +17,239 @@ class TestFolderWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n-        self.workflow.setChainForPortalTypes([\'Folder\'], \'folder_workflow\')\n+        login(self.portal, "manager")\n+        self.workflow.setChainForPortalTypes(["Folder"], "folder_workflow")\n \n-        self.portal.invokeFactory(\'Folder\', id=\'dir\')\n+        self.portal.invokeFactory("Folder", id="dir")\n         self.dir = self.portal.dir\n \n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     # Check allowed transitions\n \n     def testOwnerHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'private\'))\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.assertTrue(self.catalog(id="dir", review_state="private"))\n \n     def testOwnerShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.workflow.doActionFor(self.dir, \'show\')\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'visible\'))\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.workflow.doActionFor(self.dir, "show")\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.assertTrue(self.catalog(id="dir", review_state="visible"))\n \n     def testOwnerPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testOwnerPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testOwnerHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'private\'))\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        self.assertTrue(self.catalog(id="dir", review_state="private"))\n \n     def testOwnerRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.workflow.doActionFor(self.dir, \'retract\')\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'visible\'))\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.workflow.doActionFor(self.dir, "retract")\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.assertTrue(self.catalog(id="dir", review_state="visible"))\n \n     def testManagerPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testManagerPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'published\'))\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        self.assertTrue(self.catalog(id="dir", review_state="published"))\n \n     def testManagerRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'retract\')\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        self.assertTrue(self.catalog(id=\'dir\', review_state=\'visible\'))\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "retract")\n+        self.assertEqual(self._state(self.dir), "visible")\n+        self.assertTrue(self.catalog(id="dir", review_state="visible"))\n \n     # Check forbidden transitions\n \n     def testMemberHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'member\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testMemberShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'show\',\n+            "show",\n         )\n \n     def testMemberPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'member\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testMemberPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testMemberHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testMemberRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'member\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "member")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'retract\',\n+            "retract",\n         )\n \n     def testReviewerHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'reviewer\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testReviewerShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'show\',\n+            "show",\n         )\n \n     def testReviewerPublishesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'reviewer\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testReviewerPublishesPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testReviewerHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'hide\',\n+            "hide",\n         )\n \n     def testReviewerRetractsPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "reviewer")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.dir,\n-            \'retract\',\n+            "retract",\n         )\n \n     def testManagerHidesVisibleFolder(self):\n-        self.assertEqual(self._state(self.dir), \'visible\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.assertEqual(self._state(self.dir), "visible")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "hide")\n \n     def testManagerShowsPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self._state(self.dir), \'private\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'show\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self._state(self.dir), "private")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "show")\n \n     def testManagerHidesPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self._state(self.dir), \'published\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self._state(self.dir), "published")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.dir, "hide")\n \n     # Check view permissions\n \n@@ -251,53 +257,53 @@ def testViewVisibleFolder(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.dir))\n \n     def testViewIsNotAcquiredInVisibleState(self):\n-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), \'\')\n+        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(View, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(View, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(View, self.dir))\n \n     def testViewIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.dir, "hide")\n+        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.dir))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.dir))\n \n     def testViewIsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.dir, "publish")\n+        self.assertEqual(self.dir.acquiredRolesAreUsedBy(View), "")\n \n     # Check access contents info permission\n \n@@ -305,10 +311,10 @@ def testAccessVisibleFolderContents(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Anonymous is allowed\n         logout()\n@@ -317,49 +323,49 @@ def testAccessVisibleFolderContents(self):\n     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPrivateFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))\n \n     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPublishedFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     # Check modify contents permission\n@@ -368,10 +374,10 @@ def testModifyVisibleFolderContents(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Anonymous is denied\n         logout()\n@@ -380,49 +386,49 @@ def testModifyVisibleFolderContents(self):\n     def testModifyPortalContentIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPrivateFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n \n     def testModifyPortalContentIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPublishedFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     # Check list contents permission\n@@ -431,10 +437,10 @@ def testListVisibleFolderContents(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Anonymous is denied\n         logout()\n@@ -443,90 +449,90 @@ def testListVisibleFolderContents(self):\n     def testListFolderContentsIsAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ListFolderContents),\n-            \'CHECKED\',\n+            "CHECKED",\n         )\n \n     def testListPrivateFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n \n     def testListFolderContentsIsAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ListFolderContents),\n-            \'CHECKED\',\n+            "CHECKED",\n         )\n \n     def testListPublishedFolderContents(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ListFolderContents, self.dir))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ListFolderContents, self.dir))\n \n     def testListFolderContentsNotAcquiredInPublishedState(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         self.assertEqual(\n             self.dir.acquiredRolesAreUsedBy(ListFolderContents),\n-            \'CHECKED\',\n+            "CHECKED",\n         )\n \n     # Check catalog search\n \n     def testFindVisibleFolder(self):\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n \n     def testFindPrivateFolder(self):\n-        self.workflow.doActionFor(self.dir, \'hide\')\n+        self.workflow.doActionFor(self.dir, "hide")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n         # Member is denied\n-        login(self.portal, \'member\')\n-        self.assertFalse(self.catalog(id=\'dir\'))\n+        login(self.portal, "member")\n+        self.assertFalse(self.catalog(id="dir"))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n-        self.assertFalse(self.catalog(id=\'dir\'))\n+        login(self.portal, "reviewer")\n+        self.assertFalse(self.catalog(id="dir"))\n         # Anonymous is denied\n         logout()\n-        self.assertFalse(self.catalog(id=\'dir\'))\n+        self.assertFalse(self.catalog(id="dir"))\n \n     def testFindPublishedFolder(self):\n-        self.workflow.doActionFor(self.dir, \'publish\')\n+        self.workflow.doActionFor(self.dir, "publish")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="dir"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'dir\'))\n+        self.assertTrue(self.catalog(id="dir"))\ndiff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py\nindex b219a0c..e380d3f 100644\n--- a/plone/app/workflow/tests/test_functional.py\n+++ b/plone/app/workflow/tests/test_functional.py\n@@ -1,61 +1,68 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing import setRoles\n from plone.app.testing import login\n from plone.app.testing import logout\n-from plone.app.workflow.testing import PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING\n+from plone.app.testing import setRoles\n from plone.app.workflow.testing import optionflags\n+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING\n from plone.testing import layered\n from Products.CMFCore.utils import getToolByName\n \n import doctest\n import re\n-import six\n import transaction\n import unittest\n \n \n doctests = (\n-    \'onestateworkflow.rst\',\n-    \'sharingpage.rst\',\n+    "onestateworkflow.rst",\n+    "sharingpage.rst",\n )\n \n \n def setup(doctest):\n \n-    portal = doctest.globs[\'layer\'][\'portal\']\n-    login(portal, \'member\')\n-    setRoles(portal, \'member\', [\'Manager\', ])\n-    workflow = getToolByName(portal, \'portal_workflow\')\n+    portal = doctest.globs["layer"]["portal"]\n+    login(portal, "member")\n+    setRoles(\n+        portal,\n+        "member",\n+        [\n+            "Manager",\n+        ],\n+    )\n+    workflow = getToolByName(portal, "portal_workflow")\n     workflow.setChainForPortalTypes(\n-        (\'Folder\', \'Document\', \'News Item\', \'Event\', ),\n-        (\'one_state_workflow\', ),\n+        (\n+            "Folder",\n+            "Document",\n+            "News Item",\n+            "Event",\n+        ),\n+        ("one_state_workflow",),\n     )\n-    portal.invokeFactory(\'Folder\', \'folder1\')\n+    portal.invokeFactory("Folder", "folder1")\n     folder = portal.folder1\n-    folder.invokeFactory(\'Document\', \'document1\')\n-    folder.invokeFactory(\'News Item\', \'newsitem1\')\n-    setRoles(portal, \'member\', [\'Member\', ])\n+    folder.invokeFactory("Document", "document1")\n+    folder.invokeFactory("News Item", "newsitem1")\n+    setRoles(\n+        portal,\n+        "member",\n+        [\n+            "Member",\n+        ],\n+    )\n     logout()\n     transaction.commit()\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', want)  # noqa: E501\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     tests = [\n         layered(\n             doctest.DocFileSuite(\n-                \'tests/{0}\'.format(test_file),\n-                package=\'plone.app.workflow\',\n+                f"tests/{test_file}",\n+                package="plone.app.workflow",\n                 optionflags=optionflags,\n                 setUp=setup,\n-                checker=Py23DocChecker(),\n             ),\n             layer=PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING,\n         )\n@@ -63,4 +70,3 @@ def test_suite():\n     ]\n     suite.addTests(tests)\n     return suite\n-\ndiff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py\nindex 39b5892..d55074e 100644\n--- a/plone/app/workflow/tests/test_one_state_workflow.py\n+++ b/plone/app/workflow/tests/test_one_state_workflow.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_NAME\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n \n import unittest\n \n@@ -17,102 +16,113 @@ class TestOneStateWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n-        self.workflow.setChainForPortalTypes([\'Document\', \'News Item\'], \'one_state_workflow\')\n+        self.workflow.setChainForPortalTypes(\n+            ["Document", "News Item"], "one_state_workflow"\n+        )\n \n-        self.portal.invokeFactory(\'Document\', id=\'doc\')\n+        self.portal.invokeFactory("Document", id="doc")\n         self.doc = self.portal.doc\n-        self.portal.invokeFactory(\'News Item\', id=\'ni\')\n+        self.portal.invokeFactory("News Item", id="ni")\n         self.ni = self.portal.ni\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     # Check allowed transitions: none for one state workflow\n \n     def testInitialState(self):\n-        self.assertEqual(self._state(self.doc), \'published\')\n-        self.assertEqual(self._state(self.ni), \'published\')\n+        self.assertEqual(self._state(self.doc), "published")\n+        self.assertEqual(self._state(self.ni), "published")\n \n     # Check view permission\n \n     def testViewIsNotAcquiredInPublishedState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')  # not checked\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")  # not checked\n \n     def testViewPublishedDocument(self):\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.doc))\n \n     # Check access contents info permission\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), \'\')   # not checked\n+        self.assertEqual(\n+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), ""\n+        )  # not checked\n \n     def testAccessPublishedDocument(self):\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPublishedDocument(self):\n         # Owner is allowed\n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Reader is denied\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     # Check change events permission\n@@ -121,5 +131,5 @@ def testChangeEventsIsNotAcquiredInPublishedState(self):\n         # since r104169 event content doesn\'t use `ChangeEvents` anymore...\n         self.assertEqual(\n             self.ni.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\ndiff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py\nindex ffb7ddc..8f34816 100644\n--- a/plone/app/workflow/tests/test_plone_workflow.py\n+++ b/plone/app/workflow/tests/test_plone_workflow.py\n@@ -1,14 +1,13 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_NAME\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n+from Products.CMFCore.WorkflowCore import WorkflowException\n \n import unittest\n \n@@ -18,151 +17,152 @@ class TestDefaultWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n         self.workflow.setChainForPortalTypes(\n-            [\'Document\', \'News Item\'],\n-            \'plone_workflow\',\n+            ["Document", "News Item"],\n+            "plone_workflow",\n         )\n \n-        self.portal.invokeFactory(\'Document\', id=\'doc\')\n+        self.portal.invokeFactory("Document", id="doc")\n         self.doc = self.portal.doc\n \n-        self.portal.invokeFactory(\'News Item\', id=\'ni\')\n+        self.portal.invokeFactory("News Item", id="ni")\n         self.ni = self.portal.ni\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     # Check allowed transitions\n \n     def testOwnerHidesVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n-        self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'private\')),\n-            1\n-        )\n+        self.assertEqual(self._state(self.doc), "visible")\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n+        self.assertEqual(len(self.catalog(id="doc", review_state="private")), 1)\n \n     def testOwnerShowsPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n-        self.workflow.doActionFor(self.doc, \'show\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n-            1\n-        )\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n+        self.workflow.doActionFor(self.doc, "show")\n+        self.assertEqual(self._state(self.doc), "visible")\n+        self.assertEqual(len(self.catalog(id="doc", review_state="visible")), 1)\n \n     def testOwnerSubmitsVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n+        self.assertEqual(self._state(self.doc), "visible")\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'pending\')),\n+            len(self.catalog(id="doc", review_state="pending")),\n             1,\n         )\n \n     def testOwnerRetractsPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n-        self.workflow.doActionFor(self.doc, \'retract\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n+        self.workflow.doActionFor(self.doc, "retract")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     def testOwnerRetractsPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.doc, \'retract\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.doc, "retract")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertTrue(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     def testReviewerPublishesPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'published\')),\n+            len(self.catalog(id="doc", review_state="published")),\n             1,\n         )\n \n     def testReviewerRejectsPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self._state(self.doc), \'pending\')\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'reject\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self._state(self.doc), "pending")\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "reject")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     def testReviewerPublishesVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n+        self.assertEqual(self._state(self.doc), "visible")\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'published\')),\n+            len(self.catalog(id="doc", review_state="published")),\n             1,\n         )\n \n     def testReviewerRejectsPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self._state(self.doc), \'published\')\n-        self.workflow.doActionFor(self.doc, \'reject\')\n-        self.assertEqual(self._state(self.doc), \'visible\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self._state(self.doc), "published")\n+        self.workflow.doActionFor(self.doc, "reject")\n+        self.assertEqual(self._state(self.doc), "visible")\n         self.assertEqual(\n-            len(self.catalog(id=\'doc\', review_state=\'visible\')),\n+            len(self.catalog(id="doc", review_state="visible")),\n             1,\n         )\n \n     # Check some forbidden transitions\n \n     def testOwnerPublishesVisibleDocument(self):\n-        self.assertEqual(self._state(self.doc), \'visible\')\n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        self.assertEqual(self._state(self.doc), "visible")\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'publish\',\n+            "publish",\n         )\n \n     def testOwnerSubmitsPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'submit\',\n+            "submit",\n         )\n \n     def testManagerPublishesPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self._state(self.doc), \'private\')\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self._state(self.doc), "private")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'publish\',\n+            "publish",\n         )\n \n     # No way am I going to write tests for all impossible transitions ;-)\n@@ -173,74 +173,74 @@ def testViewVisibleDocument(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInVisibleState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.doc, "hide")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed (TODO:?)\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed (TODO:?)\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPendingState(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     def testViewPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPublishedState(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")\n \n     # Check access contents info permission\n \n@@ -248,10 +248,10 @@ def testAccessVisibleDocument(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n@@ -260,73 +260,73 @@ def testAccessVisibleDocument(self):\n     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed (TODO:?)\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed (TODO:?)\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPendingState(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     # Check modify content permissions\n@@ -335,10 +335,10 @@ def testModifyVisibleDocument(self):\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n@@ -347,154 +347,163 @@ def testModifyVisibleDocument(self):\n     def testModifyPortalContentIsNotAcquiredInVisibleState(self):\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPrivateState(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is denied\n-        setRoles(self.portal, \'manager\', [\'Owner\', \'Member\', ])\n+        setRoles(\n+            self.portal,\n+            "manager",\n+            [\n+                "Owner",\n+                "Member",\n+            ],\n+        )\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPendingState(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     def testModifyPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is denied\n         login(self.portal, TEST_USER_NAME)\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),\n-            \'\',\n+            "",\n         )\n \n     # Check catalog search\n \n     def testFindVisibleDocument(self):\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n \n     def testFindPrivateDocument(self):\n-        self.workflow.doActionFor(self.doc, \'hide\')\n+        self.workflow.doActionFor(self.doc, "hide")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is denied\n-        login(self.portal, \'member\')\n-        self.assertFalse(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertFalse(self.catalog(id="doc"))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n-        self.assertFalse(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertFalse(self.catalog(id="doc"))\n         # Anonymous is denied\n         logout()\n-        self.assertFalse(self.catalog(id=\'doc\'))\n+        self.assertFalse(self.catalog(id="doc"))\n \n     def testFindPendingDocument(self):\n-        self.workflow.doActionFor(self.doc, \'submit\')\n+        self.workflow.doActionFor(self.doc, "submit")\n         # Owner is allowed\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is allowed (TODO:?)\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Anonymous is allowed (TODO:?)\n         logout()\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n \n     def testFindPublishedDocument(self):\n-        login(self.portal, \'reviewer\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "reviewer")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         login(self.portal, TEST_USER_NAME)\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n         # Member is allowed\n-        login(self.portal, \'member\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "member")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        login(self.portal, "reviewer")\n+        self.assertTrue(self.catalog(id="doc"))\n         # Anonymous is allowed\n         logout()\n-        self.assertTrue(self.catalog(id=\'doc\'))\n+        self.assertTrue(self.catalog(id="doc"))\n \n     def testMyWorklist(self):\n         # When a member has the local Reviewer role, pending\n         # docs should show up in his worklist.\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self.doc.manage_addLocalRoles(\'member\', [\'Reviewer\'])\n-        login(self.portal, \'reviewer\')\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self.doc.manage_addLocalRoles("member", ["Reviewer"])\n+        login(self.portal, "reviewer")\n         worklist = self.portal.portal_workflow.getWorklistsResults()\n         self.assertTrue(len(worklist) == 1)\n         self.assertTrue(worklist[0] == self.doc)\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         worklist = self.portal.portal_workflow.getWorklistsResults()\n         self.assertTrue(len(worklist) == 1)\n         self.assertTrue(worklist[0] == self.doc)\n \n     def testStateTitles(self):\n-        state_titles = {\'private\': \'Private\',\n-                        \'visible\': \'Public draft\',\n-                        \'pending\': \'Pending review\',\n-                        \'published\': \'Published\'}\n+        state_titles = {\n+            "private": "Private",\n+            "visible": "Public draft",\n+            "pending": "Pending review",\n+            "published": "Published",\n+        }\n \n         wf = self.workflow.plone_workflow\n \ndiff --git a/plone/app/workflow/tests/test_remap.py b/plone/app/workflow/tests/test_remap.py\nindex 3909f34..21e63ad 100644\n--- a/plone/app/workflow/tests/test_remap.py\n+++ b/plone/app/workflow/tests/test_remap.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.workflow.remap import remap_workflow\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n@@ -11,33 +10,33 @@ class TestRemapWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n         self.workflow.setChainForPortalTypes(\n-            (\'Document\', ),\n-            (\'simple_publication_workflow\', ),\n+            ("Document",),\n+            ("simple_publication_workflow",),\n         )\n         self.workflow.setChainForPortalTypes(\n-            (\'News Item\', ),\n-            (\'one_state_workflow\', ),\n+            ("News Item",),\n+            ("one_state_workflow",),\n         )\n-        self.workflow.setChainForPortalTypes((\'Folder\', ), ())\n-        self.workflow.setChainForPortalTypes((\'Image\', ), None)\n+        self.workflow.setChainForPortalTypes(("Folder",), ())\n+        self.workflow.setChainForPortalTypes(("Image",), None)\n \n-        self.portal.invokeFactory(\'Document\', \'d1\')\n-        self.portal.invokeFactory(\'Document\', \'d2\')\n-        self.portal.invokeFactory(\'News Item\', \'n1\')\n-        self.portal.invokeFactory(\'Image\', \'i1\')\n+        self.portal.invokeFactory("Document", "d1")\n+        self.portal.invokeFactory("Document", "d2")\n+        self.portal.invokeFactory("News Item", "n1")\n+        self.portal.invokeFactory("Image", "i1")\n \n-        self.workflow.doActionFor(self.portal.d1, \'publish\')\n+        self.workflow.doActionFor(self.portal.d1, "publish")\n \n     def _state(self, obj):\n-        return self.workflow.getInfoFor(obj, \'review_state\')\n+        return self.workflow.getInfoFor(obj, "review_state")\n \n     def _chain(self, obj):\n         return self.workflow.getChainFor(obj)\n@@ -45,45 +44,52 @@ def _chain(self, obj):\n     def test_remap_multiple_no_state_map(self):\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Document\', \'News Item\', ),\n-            chain=(\'plone_workflow\', ),\n+            type_ids=(\n+                "Document",\n+                "News Item",\n+            ),\n+            chain=("plone_workflow",),\n         )\n \n-        self.assertEqual(self._chain(self.portal.d1), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.d2), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.n1), (\'plone_workflow\', ))\n+        self.assertEqual(self._chain(self.portal.d1), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.d2), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.n1), ("plone_workflow",))\n \n-        self.assertEqual(self._state(self.portal.d1), \'visible\')\n-        self.assertEqual(self._state(self.portal.d2), \'visible\')\n-        self.assertEqual(self._state(self.portal.n1), \'visible\')\n+        self.assertEqual(self._state(self.portal.d1), "visible")\n+        self.assertEqual(self._state(self.portal.d2), "visible")\n+        self.assertEqual(self._state(self.portal.n1), "visible")\n \n     def test_remap_with_partial_state_map(self):\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Document\', \'News Item\', ),\n-            chain=(\'plone_workflow\', ),\n-            state_map={\'published\': \'published\'},\n+            type_ids=(\n+                "Document",\n+                "News Item",\n+            ),\n+            chain=("plone_workflow",),\n+            state_map={"published": "published"},\n         )\n \n-        self.assertEqual(self._chain(self.portal.d1), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.d2), (\'plone_workflow\', ))\n-        self.assertEqual(self._chain(self.portal.n1), (\'plone_workflow\', ))\n+        self.assertEqual(self._chain(self.portal.d1), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.d2), ("plone_workflow",))\n+        self.assertEqual(self._chain(self.portal.n1), ("plone_workflow",))\n \n-        self.assertEqual(self._state(self.portal.d1), \'published\')\n-        self.assertEqual(self._state(self.portal.d2), \'visible\')\n-        self.assertEqual(self._state(self.portal.n1), \'published\')\n+        self.assertEqual(self._state(self.portal.d1), "published")\n+        self.assertEqual(self._state(self.portal.d2), "visible")\n+        self.assertEqual(self._state(self.portal.n1), "published")\n \n     def test_remap_to_no_workflow(self):\n         view_at_d1 = [\n-            r[\'name\']\n-            for r in self.portal.d1.rolesOfPermission(\'View\')\n-            if r[\'selected\']\n+            r["name"] for r in self.portal.d1.rolesOfPermission("View") if r["selected"]\n         ]\n-        self.assertIn(\'Anonymous\', view_at_d1)\n+        self.assertIn("Anonymous", view_at_d1)\n \n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Document\', \'News Item\', ),\n+            type_ids=(\n+                "Document",\n+                "News Item",\n+            ),\n             chain=(),\n         )\n \n@@ -92,29 +98,27 @@ def test_remap_to_no_workflow(self):\n         self.assertEqual(self._chain(self.portal.n1), ())\n \n         view_at_d1 = [\n-            r[\'name\']\n-            for r in self.portal.d1.rolesOfPermission(\'View\')\n-            if r[\'selected\']\n+            r["name"] for r in self.portal.d1.rolesOfPermission("View") if r["selected"]\n         ]\n-        self.assertFalse(\'Anonymous\' in view_at_d1)\n-        self.assertTrue(self.portal.d1.acquiredRolesAreUsedBy(\'View\'))\n+        self.assertFalse("Anonymous" in view_at_d1)\n+        self.assertTrue(self.portal.d1.acquiredRolesAreUsedBy("View"))\n \n     def test_remap_from_no_workflow(self):\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Image\', ),\n-            chain=(\'plone_workflow\', ),\n+            type_ids=("Image",),\n+            chain=("plone_workflow",),\n         )\n \n-        self.assertEqual(self._chain(self.portal.i1), (\'plone_workflow\', ))\n-        self.assertEqual(self._state(self.portal.i1), \'visible\')\n+        self.assertEqual(self._chain(self.portal.i1), ("plone_workflow",))\n+        self.assertEqual(self._state(self.portal.i1), "visible")\n \n     def test_remap_to_default(self):\n-        self.workflow.setDefaultChain(\'plone_workflow\')\n+        self.workflow.setDefaultChain("plone_workflow")\n         remap_workflow(\n             self.portal,\n-            type_ids=(\'Image\', ),\n-            chain=\'(Default)\',\n+            type_ids=("Image",),\n+            chain="(Default)",\n         )\n \n-        self.assertEqual(self._chain(self.portal.i1), (\'plone_workflow\', ))\n+        self.assertEqual(self._chain(self.portal.i1), ("plone_workflow",))\ndiff --git a/plone/app/workflow/tests/test_sharing_view.py b/plone/app/workflow/tests/test_sharing_view.py\nindex 50ef580..422cdc2 100644\n--- a/plone/app/workflow/tests/test_sharing_view.py\n+++ b/plone/app/workflow/tests/test_sharing_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from borg.localrole.interfaces import ILocalRoleProvider\n from plone.app.testing import login\n from plone.app.workflow.events import LocalrolesModifiedEvent\n@@ -13,7 +12,6 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n import unittest\n \n \n@@ -22,52 +20,54 @@ class TestSharingView(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-        self.portal.acl_users._doAddUser(\'testuser\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\'testreviewer\', \'secret\', [\'Reviewer\'], [])\n-        self.portal.acl_users._doAddUser(\'nonasciiuser\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddGroup(\'testgroup\', [], title=\'Some meaningful title\')\n-        testuser = self.portal.portal_membership.getMemberById(\'testuser\')\n-        testuser.setMemberProperties(dict(email=\'testuser@plone.org\'))\n-        nonasciiuser = self.portal.portal_membership.getMemberById(\'nonasciiuser\')\n-        nonasciiuser.setMemberProperties(dict(fullname=u\'\\xc4\\xdc\\xdf\'))\n-        login(self.portal, \'manager\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.portal.acl_users._doAddUser("testuser", "secret", ["Member"], [])\n+        self.portal.acl_users._doAddUser("testreviewer", "secret", ["Reviewer"], [])\n+        self.portal.acl_users._doAddUser("nonasciiuser", "secret", ["Member"], [])\n+        self.portal.acl_users._doAddGroup(\n+            "testgroup", [], title="Some meaningful title"\n+        )\n+        testuser = self.portal.portal_membership.getMemberById("testuser")\n+        testuser.setMemberProperties(dict(email="testuser@plone.org"))\n+        nonasciiuser = self.portal.portal_membership.getMemberById("nonasciiuser")\n+        nonasciiuser.setMemberProperties(dict(fullname="\\xc4\\xdc\\xdf"))\n+        login(self.portal, "manager")\n \n     def test_search_by_login_name(self):\n         """Make sure we can search by login name on the Sharing tab.\n \n         Prevents regressions of #6853.\n         """\n-        self.request.form[\'search_term\'] = \'testuser\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        self.request.form["search_term"] = "testuser"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.user_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'id\'),\n-            \'testuser\',\n+            results[0].get("id"),\n+            "testuser",\n             msg="Didn\'t find testuser when I searched by login name.",\n         )\n         self.assertEqual(\n-            results[0].get(\'login\'),\n-            \'testuser\',\n+            results[0].get("login"),\n+            "testuser",\n             msg="Didn\'t display login when I searched by login name.",\n         )\n \n     def _search_by_email(self, term):\n-        self.request.form[\'search_term\'] = term\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        self.request.form["search_term"] = term\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.user_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'id\'),\n-            \'testuser\',\n+            results[0].get("id"),\n+            "testuser",\n             msg="Didn\'t find testuser when I searched for %s as email." % term,\n         )\n         self.assertEqual(\n-            results[0].get(\'login\'),\n-            \'testuser\',\n+            results[0].get("login"),\n+            "testuser",\n             msg="Didn\'t display login when I searched for %s as email." % term,\n         )\n \n@@ -76,57 +76,55 @@ def test_search_by_email(self):\n \n         Prevents regressions of #11631.\n         """\n-        self._search_by_email(\'testuser@plone.org\')\n-        self._search_by_email(\'plone.org\')\n-        self._search_by_email(\'plone\')\n+        self._search_by_email("testuser@plone.org")\n+        self._search_by_email("plone.org")\n+        self._search_by_email("plone")\n \n     def test_search_with_nonascii_users(self):\n         """Make sure we can search with users that have non-ascii-chars in their fullname.\n \n         Prevents regressions of #7576.\n         """\n-        self.request.form[\'search_term\'] = \'nonasciiuser\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        self.request.form["search_term"] = "nonasciiuser"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.role_settings()\n         self.assertTrue(len(results))\n-        expected = u\'\xc3\x84\xc3\x9c\xc3\x9f\'\n-        if six.PY2:\n-            expected = expected.encode(\'utf8\')\n+        expected = "\xc3\x84\xc3\x9c\xc3\x9f"\n         self.assertEqual(\n-            results[-1].get(\'title\'),\n+            results[-1].get("title"),\n             expected,\n             msg="Umlaute",\n         )\n \n     def test_search_for_group_by_id(self):\n-        """ Make sure we can search for groups by id """\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure we can search for groups by id"""\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.group_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'id\'),\n-            \'testgroup\',\n+            results[0].get("id"),\n+            "testgroup",\n             msg="Didn\'t find testgroup when I searched by group id.",\n         )\n-        self.assertIsNone(results[0].get(\'login\'))\n+        self.assertIsNone(results[0].get("login"))\n \n     def test_search_for_group_by_title(self):\n-        """ Make sure we can search for groups by title """\n-        self.request.form[\'search_term\'] = \'meaningful\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure we can search for groups by title"""\n+        self.request.form["search_term"] = "meaningful"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         results = view.group_search_results()\n         self.assertTrue(len(results))\n         self.assertEqual(\n-            results[0].get(\'title\'),\n-            \'Some meaningful title\',\n+            results[0].get("title"),\n+            "Some meaningful title",\n             msg="Didn\'t find testuser when I searched by group title.",\n         )\n \n     def test_group_name_links_to_prefs_for_admin(self):\n-        """ Make sure that for admins  group name links to group prefs """\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure that for admins  group name links to group prefs"""\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         self.assertIn(\n             \'<a href="http://nohost/plone/@@usergroup-groupmembership?\'\n             \'groupname=testgroup">\',\n@@ -135,9 +133,9 @@ def test_group_name_links_to_prefs_for_admin(self):\n         )\n \n     def test_group_name_links_not_include_authusers(self):\n-        """ Make sure that for admins  group name links to group prefs """\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure that for admins  group name links to group prefs"""\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         self.assertNotIn(\n             \'<a href="http://nohost/plone/@@usergroup-groupmembership?\'\n             \'groupname=AuthenticatedUsers">\',\n@@ -146,10 +144,10 @@ def test_group_name_links_not_include_authusers(self):\n         )\n \n     def test_group_name_doesnt_link_to_prefs_for_reviewer(self):\n-        """ Make sure that for admins  group name links to group prefs """\n-        login(self.portal, \'testreviewer\')\n-        self.request.form[\'search_term\'] = \'testgroup\'\n-        view = getMultiAdapter((self.portal, self.request), name=\'sharing\')\n+        """Make sure that for admins  group name links to group prefs"""\n+        login(self.portal, "testreviewer")\n+        self.request.form["search_term"] = "testgroup"\n+        view = getMultiAdapter((self.portal, self.request), name="sharing")\n         self.assertNotIn(\n             \'<a href="http://nohost/plone/@@usergroup-groupmembership?\'\n             \'groupname=testgroup">\',\n@@ -163,49 +161,53 @@ def test_local_manager_removes_inheritance(self):\n         to avoid him to loose rights on the content itself\n         Refs #11945\n         """\n-        self.portal.acl_users._doAddUser(\'localmanager\', \'secret\', [\'Member\'], [])\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', \'folder\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', \'subfolder\')]\n-        folder.manage_setLocalRoles(\'localmanager\', (\'Manager\',))\n+        self.portal.acl_users._doAddUser("localmanager", "secret", ["Member"], [])\n+        folder = self.portal[self.portal.invokeFactory("Folder", "folder")]\n+        subfolder = folder[folder.invokeFactory("Folder", "subfolder")]\n+        folder.manage_setLocalRoles("localmanager", ("Manager",))\n \n-        login(self.portal, \'localmanager\')\n-        sharing = subfolder.restrictedTraverse(\'@@sharing\')\n+        login(self.portal, "localmanager")\n+        sharing = subfolder.restrictedTraverse("@@sharing")\n         sharing.update_inherit(status=False, reindex=True)\n \n         user = self.portal.portal_membership.getAuthenticatedMember()\n-        self.assertIn(\'Manager\', user.getRolesInContext(subfolder), )\n+        self.assertIn(\n+            "Manager",\n+            user.getRolesInContext(subfolder),\n+        )\n \n     def test_borg_localroles(self):\n         @adapter(ISiteRoot)\n         @implementer(ILocalRoleProvider)\n-        class LocalRoleProvider(object):\n+        class LocalRoleProvider:\n             def __init__(self, context):\n                 self.context = context\n \n             def getAllRoles(self):\n-                yield \'borguser\', (\'Contributor\',)\n+                yield "borguser", ("Contributor",)\n \n             def getRoles(self, user_id):\n-                if user_id == \'borguser\':\n-                    return (\'Contributor\',)\n+                if user_id == "borguser":\n+                    return ("Contributor",)\n                 return ()\n+\n         provideAdapter(LocalRoleProvider)\n \n-        self.portal.acl_users._doAddUser(\'borguser\', \'secret\', [\'Member\'], [])\n-        login(self.portal, \'manager\')\n-        sharing = self.portal.restrictedTraverse(\'@@sharing\')\n+        self.portal.acl_users._doAddUser("borguser", "secret", ["Member"], [])\n+        login(self.portal, "manager")\n+        sharing = self.portal.restrictedTraverse("@@sharing")\n         info = sharing.existing_role_settings()\n         self.assertEqual(2, len(info))\n-        self.assertEqual(\'borguser\', info[1][\'id\'])\n-        self.assertEqual(\'acquired\', info[1][\'roles\'][u\'Contributor\'])\n+        self.assertEqual("borguser", info[1]["id"])\n+        self.assertEqual("acquired", info[1]["roles"]["Contributor"])\n \n         # check borg local roles works with non-heriting roles policy\n-        sharing = self.portal.restrictedTraverse(\'@@sharing\')\n-        setattr(sharing.context, \'__ac_local_roles_block__\', True)\n+        sharing = self.portal.restrictedTraverse("@@sharing")\n+        setattr(sharing.context, "__ac_local_roles_block__", True)\n         info = sharing.existing_role_settings()\n         self.assertEqual(2, len(info))\n-        self.assertEqual(\'borguser\', info[1][\'id\'])\n-        self.assertEqual(\'acquired\', info[1][\'roles\'][u\'Contributor\'])\n+        self.assertEqual("borguser", info[1]["id"])\n+        self.assertEqual("acquired", info[1]["roles"]["Contributor"])\n \n     def test_localroles_modified_event(self):\n         # define local roles modified sensitive interface and class\n@@ -213,7 +215,7 @@ class ILRMEContext(Interface):\n             pass\n \n         @implementer(ILRMEContext)\n-        class LRMEContext(object):\n+        class LRMEContext:\n             def __init__(self):\n                 # gets set by handler\n                 self.context = None\n@@ -226,8 +228,7 @@ def lrme_handler(context, event):\n \n         # register handler\n         gsm = getGlobalSiteManager()\n-        gsm.registerHandler(\n-            lrme_handler, (ILRMEContext, ILocalrolesModifiedEvent))\n+        gsm.registerHandler(lrme_handler, (ILRMEContext, ILocalrolesModifiedEvent))\n         # create object and notify subscriber\n         context = LRMEContext()\n         event = LocalrolesModifiedEvent(context, self.request)\ndiff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py\nindex f42febf..af77721 100644\n--- a/plone/app/workflow/tests/test_simple_publication_workflow.py\n+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py\n@@ -1,17 +1,16 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n-from Products.CMFCore.WorkflowCore import WorkflowException\n-from Products.CMFCore.utils import _checkPermission as checkPerm\n from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import View\n from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.permissions import View\n+from Products.CMFCore.utils import _checkPermission as checkPerm\n+from Products.CMFCore.WorkflowCore import WorkflowException\n \n import unittest\n \n \n-SIMPLE = \'simple_publication_workflow\'\n+SIMPLE = "simple_publication_workflow"\n \n \n class TestSimplePublicationWorkflow(unittest.TestCase):\n@@ -19,213 +18,217 @@ class TestSimplePublicationWorkflow(unittest.TestCase):\n     layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n \n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n \n-        self._set_workflow_for_portal_type(SIMPLE, \'Document\')\n-        self.portal.invokeFactory(\'Document\', \'document1\')\n+        self._set_workflow_for_portal_type(SIMPLE, "Document")\n+        self.portal.invokeFactory("Document", "document1")\n         self.doc = self.portal.document1\n \n     def _set_workflow_for_portal_type(self, workflow_name, portal_type):\n         self.workflow.setChainForPortalTypes(\n-            (portal_type, ),\n-            (workflow_name, ),\n+            (portal_type,),\n+            (workflow_name,),\n         )\n \n     def _check_state(self, obj, expected_review_state):\n-        current_state = self.workflow.getInfoFor(obj, \'review_state\')\n+        current_state = self.workflow.getInfoFor(obj, "review_state")\n         self.assertEqual(\n             current_state,\n             expected_review_state,\n-            \'Object {0} should have review state {1} but has {2}\'.format(\n+            "Object {} should have review state {} but has {}".format(\n                 obj,\n                 expected_review_state,\n                 current_state,\n-            )\n+            ),\n         )\n \n     # Check allowed transitions: two for simple publication workflow\n \n     def testOwnerSubmitAPrivateDocumentAndRetract(self):\n-        self._check_state(self.doc, \'private\')\n-        self.workflow.doActionFor(self.doc, \'submit\')\n-        self._check_state(self.doc, \'pending\')\n-        self.workflow.doActionFor(self.doc, \'retract\')\n-        self._check_state(self.doc, \'private\')\n+        self._check_state(self.doc, "private")\n+        self.workflow.doActionFor(self.doc, "submit")\n+        self._check_state(self.doc, "pending")\n+        self.workflow.doActionFor(self.doc, "retract")\n+        self._check_state(self.doc, "private")\n \n     # Check some forbidden transitions\n \n     def testOwnerCannotPublishDocument(self):\n-        login(self.portal, \'member\')\n-        self._check_state(self.doc, \'private\')\n+        login(self.portal, "member")\n+        self._check_state(self.doc, "private")\n         self.assertRaises(\n             WorkflowException,\n             self.workflow.doActionFor,\n             self.doc,\n-            \'publish\',\n+            "publish",\n         )\n \n     # Check view permission\n \n     def testViewIsNotAcquiredInPrivateState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')     # not checked\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")  # not checked\n \n     def testViewPrivateDocument(self):\n-        self._check_state(self.doc, \'private\')\n+        self._check_state(self.doc, "private")\n         # Owner is allowed\n-        login(self.portal, \'manager\')\n+        login(self.portal, "manager")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(View, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(View, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.doc))\n \n     def testViewIsNotAcquiredInPublishedState(self):\n         # transition requires Review portal content\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), \'\')   # not checked\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), "")  # not checked\n \n     def testViewPublishedDocument(self):\n         # transition requires Review portal content\n-        login(self.portal, \'manager\')\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        login(self.portal, "manager")\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reviewer is denied  but he acquires through Anonymous Role\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.doc))\n \n     # Check access contents info permission\n \n     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), \'\')     # not checked\n+        self.assertEqual(\n+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), ""\n+        )  # not checked\n \n     def testAccessContentsInformationPrivateDocument(self):\n-        self.assertEqual(self.workflow.getInfoFor(self.doc, \'review_state\'), \'private\')\n+        self.assertEqual(self.workflow.getInfoFor(self.doc, "review_state"), "private")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        self.workflow.doActionFor(self.doc, "publish")\n         # not checked\n         self.assertEqual(\n             self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),\n-            \'\',\n+            "",\n         )\n \n     def testAccessContentsInformationPublishedDocument(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Owner is allowed\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Member is allowed\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reviewer is denied but he acquires through Anonymous Role\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))\n \n     # Check modify content permissions\n \n     def testModifyPrivateDocumentIsNotAcquiredInPrivateState(self):\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), \'\') # not checked\n+        self.assertEqual(\n+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), ""\n+        )  # not checked\n \n     def testModifyPrivateDocument(self):\n-        self.assertEqual(self.workflow.getInfoFor(self.doc, \'review_state\'), \'private\')\n+        self.assertEqual(self.workflow.getInfoFor(self.doc, "review_state"), "private")\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Reader is denied\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n \n     def testModifyPortalContentIsNotAcquiredInPublishedState(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), \'\')\n+        self.workflow.doActionFor(self.doc, "publish")\n+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), "")\n \n     def testModifyPublishedDocument(self):\n         # transition requires Review portal content\n-        self.workflow.doActionFor(self.doc, \'publish\')\n+        self.workflow.doActionFor(self.doc, "publish")\n         # Manager is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Owner is allowed\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Member is denied\n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Reviewer is denied\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Anonymous is denied\n         logout()\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))\n         # Reader is denied\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))\ndiff --git a/plone/app/workflow/tests/utils.py b/plone/app/workflow/tests/utils.py\nindex 0771e31..deac197 100644\n--- a/plone/app/workflow/tests/utils.py\n+++ b/plone/app/workflow/tests/utils.py\n@@ -1,6 +1,7 @@\n import doctest\n \n+\n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/setup.cfg b/setup.cfg\nindex fe15aba..0e598c7 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,3 +3,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 4d77c22..1d547c7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,13 +1,14 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'5.0.0a3.dev0\'\n+\n+version = "5.0.0a3.dev0"\n \n setup(\n-    name=\'plone.app.workflow\',\n+    name="plone.app.workflow",\n     version=version,\n     description="workflow and security settings for Plone",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -22,40 +23,24 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'workflow sharing plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.workflow\',\n-    license=\'GPL version 2\',\n+    keywords="workflow sharing plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.app.workflow",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.memoize\',\n-        \'six\',\n-        \'transaction\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.testing\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Products.CMFCore>=2.4.0\',\n-        \'Products.DCWorkflow\',\n-        \'Products.GenericSetup >= 2.0\',\n-        \'Products.statusmessages\',\n-        \'Zope2\',\n+        "plone.base",\n+        "plone.memoize",\n+        "Products.statusmessages",\n+        "setuptools",\n     ],\n )\n'

