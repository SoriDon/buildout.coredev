Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-06-29T07:18:12+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/49b6b84bd06536378d971e6b66ac5a33ae0e9c9d

Fix tests. check_id no longer raises Unauthorized raised by hook

Files changed:
M Products/CMFPlone/tests/testCheckId.py

b"diff --git a/Products/CMFPlone/tests/testCheckId.py b/Products/CMFPlone/tests/testCheckId.py\nindex c811b21c9..87c0fc9d9 100644\n--- a/Products/CMFPlone/tests/testCheckId.py\n+++ b/Products/CMFPlone/tests/testCheckId.py\n@@ -100,14 +100,6 @@ def testCollision(self):\n         self.assertEqual(r, u'There is already an item named bar in this '\n                             u'folder.')\n \n-    # def testTempObjectCollision(self):\n-    #     # foo = self.folder.restrictedTraverse('portal_factory/Document/foo')\n-    #     from plone.dexterity.utils import createContent\n-    #     foo = createContent('Document', id='foo')\n-    #     self.folder._setObject('bar', dummy.Item('bar'))\n-    #     r = check_id(foo, 'bar')\n-    #     self.assertEqual(r, u'bar is reserved.')\n-\n     def testReservedId(self):\n         self.folder._setObject('foo', dummy.Item('foo'))\n         r = check_id(self.folder.foo, 'portal_catalog')\n@@ -139,16 +131,18 @@ def testContainerHook(self):\n         self.assertEqual(r, u'whatever is reserved.')\n \n     def testContainerHookRaisesUnauthorized(self):\n-        # check_id should not swallow Unauthorized errors raised by hook\n+        # check_id does not raise Unauthorized errors raised by hook\n         self.folder._setObject('checkValidId', dummy.Raiser(Unauthorized))\n         self.folder._setObject('foo', dummy.Item('foo'))\n-        self.assertRaises(Unauthorized, check_id(self.folder.foo), 'whatever')\n+        r = check_id(self.folder.foo, 'whatever')\n+        self.assertEqual(r, u'whatever is reserved.')\n \n     def testContainerHookRaisesConflictError(self):\n         # check_id should not swallow ConflictErrors raised by hook\n         self.folder._setObject('checkValidId', dummy.Raiser(ConflictError))\n         self.folder._setObject('foo', dummy.Item('foo'))\n-        self.assertRaises(ConflictError, check_id(self.folder.foo), 'whatever')\n+        with self.assertRaises(ConflictError):\n+            check_id(self.folder.foo, 'whatever')\n \n     def testMissingUtils(self):\n         # check_id should not bomb out if the plone_utils tool is missing\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-06-29T07:20:13+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/3b0156c80965e8a811447266f8502ece2b924518

add changenote

Files changed:
A news/2903.bugfix

b'diff --git a/news/2903.bugfix b/news/2903.bugfix\nnew file mode 100644\nindex 000000000..1c7451a97\n--- /dev/null\n+++ b/news/2903.bugfix\n@@ -0,0 +1,2 @@\n+Fix test failures exposed in Python 3.8\n+[pbauer]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-06-29T08:11:37+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/a0e6d5e6d2f18ab7ae523797f18bb3da039c8907

Merge pull request #2903 from plone/fix_test_in_py38

Fix test failures exposed in Python 3.8

Files changed:
A news/2903.bugfix
M Products/CMFPlone/tests/testCheckId.py

b"diff --git a/Products/CMFPlone/tests/testCheckId.py b/Products/CMFPlone/tests/testCheckId.py\nindex c811b21c9..87c0fc9d9 100644\n--- a/Products/CMFPlone/tests/testCheckId.py\n+++ b/Products/CMFPlone/tests/testCheckId.py\n@@ -100,14 +100,6 @@ def testCollision(self):\n         self.assertEqual(r, u'There is already an item named bar in this '\n                             u'folder.')\n \n-    # def testTempObjectCollision(self):\n-    #     # foo = self.folder.restrictedTraverse('portal_factory/Document/foo')\n-    #     from plone.dexterity.utils import createContent\n-    #     foo = createContent('Document', id='foo')\n-    #     self.folder._setObject('bar', dummy.Item('bar'))\n-    #     r = check_id(foo, 'bar')\n-    #     self.assertEqual(r, u'bar is reserved.')\n-\n     def testReservedId(self):\n         self.folder._setObject('foo', dummy.Item('foo'))\n         r = check_id(self.folder.foo, 'portal_catalog')\n@@ -139,16 +131,18 @@ def testContainerHook(self):\n         self.assertEqual(r, u'whatever is reserved.')\n \n     def testContainerHookRaisesUnauthorized(self):\n-        # check_id should not swallow Unauthorized errors raised by hook\n+        # check_id does not raise Unauthorized errors raised by hook\n         self.folder._setObject('checkValidId', dummy.Raiser(Unauthorized))\n         self.folder._setObject('foo', dummy.Item('foo'))\n-        self.assertRaises(Unauthorized, check_id(self.folder.foo), 'whatever')\n+        r = check_id(self.folder.foo, 'whatever')\n+        self.assertEqual(r, u'whatever is reserved.')\n \n     def testContainerHookRaisesConflictError(self):\n         # check_id should not swallow ConflictErrors raised by hook\n         self.folder._setObject('checkValidId', dummy.Raiser(ConflictError))\n         self.folder._setObject('foo', dummy.Item('foo'))\n-        self.assertRaises(ConflictError, check_id(self.folder.foo), 'whatever')\n+        with self.assertRaises(ConflictError):\n+            check_id(self.folder.foo, 'whatever')\n \n     def testMissingUtils(self):\n         # check_id should not bomb out if the plone_utils tool is missing\ndiff --git a/news/2903.bugfix b/news/2903.bugfix\nnew file mode 100644\nindex 000000000..1c7451a97\n--- /dev/null\n+++ b/news/2903.bugfix\n@@ -0,0 +1,2 @@\n+Fix test failures exposed in Python 3.8\n+[pbauer]\n\\ No newline at end of file\n"

