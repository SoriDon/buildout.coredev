Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-03-02T09:54:13+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/c863d9121690029388e9b40cba747c0ca8af4301

add slateTable serializers / deserializers (#1589)

* add slateTable serializers

* tests

* changelog

Files changed:
A news/1590.bugfix
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_serializer.py

b'diff --git a/news/1590.bugfix b/news/1590.bugfix\nnew file mode 100644\nindex 000000000..fb30a01ab\n--- /dev/null\n+++ b/news/1590.bugfix\n@@ -0,0 +1 @@\n+Provide slateTable block serializer/deserializer to properly convert URLs to uids\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex 1459d8940..c9dd35f32 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -38,7 +38,8 @@ def _transform(self, blocks):\n             block_type = block_value.get("@type", "")\n             handlers = []\n             for h in subscribers(\n-                (self.context, self.request), IBlockFieldDeserializationTransformer\n+                (self.context, self.request),\n+                IBlockFieldDeserializationTransformer,\n             ):\n                 if h.block_type == block_type or h.block_type is None:\n                     h.blockid = id\n@@ -296,3 +297,44 @@ class SlateBlockDeserializer(SlateBlockDeserializerBase):\n @implementer(IBlockFieldDeserializationTransformer)\n class SlateBlockDeserializerRoot(SlateBlockDeserializerBase):\n     """Deserializer for site root"""\n+\n+\n+class SlateTableBlockTransformer(SlateBlockTransformer):\n+    def __call__(self, block):\n+\n+        rows = block.get("table", {}).get("rows", [])\n+        for row in rows:\n+            cells = row.get("cells", [])\n+\n+            for cell in cells:\n+                cellvalue = cell.get("value", [])\n+                children = iterate_children(cellvalue or [])\n+                for child in children:\n+                    node_type = child.get("type")\n+                    if node_type:\n+                        handler = getattr(self, f"handle_{node_type}", None)\n+                        if handler:\n+                            handler(child)\n+\n+        return block\n+\n+\n+class SlateTableBlockDeserializerBase(\n+    SlateTableBlockTransformer, SlateBlockDeserializerBase\n+):\n+    """SlateTableBlockDeserializerBase."""\n+\n+    order = 100\n+    block_type = "slateTable"\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class SlateTableBlockDeserializer(SlateTableBlockDeserializerBase):\n+    """Deserializer for content-types that implements IBlocks behavior"""\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class SlateTableBlockDeserializerRoot(SlateTableBlockDeserializerBase):\n+    """Deserializer for site root"""\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 9bf20d83a..e6a8bea9a 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -60,6 +60,14 @@\n       factory=".blocks.SlateBlockDeserializerRoot"\n       provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n       />\n+  <subscriber\n+      factory=".blocks.SlateTableBlockDeserializer"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+  <subscriber\n+      factory=".blocks.SlateTableBlockDeserializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n \n   <adapter\n       factory=".local_roles.DeserializeFromJson"\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex 8add46fda..8587bcce4 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -15,6 +15,7 @@\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n+from plone.restapi.deserializer.blocks import iterate_children\n \n import copy\n import os\n@@ -190,3 +191,40 @@ class SlateBlockSerializer(SlateBlockSerializerBase):\n @adapter(IPloneSiteRoot, IBrowserRequest)\n class SlateBlockSerializerRoot(SlateBlockSerializerBase):\n     """Serializer for site root"""\n+\n+\n+class SlateTableBlockSerializerBase(SlateBlockSerializerBase):\n+    """SlateBlockSerializerBase."""\n+\n+    order = 100\n+    block_type = "slateTable"\n+\n+    def __call__(self, block):\n+        """call"""\n+        rows = block.get("table", {}).get("rows", [])\n+        for row in rows:\n+            cells = row.get("cells", [])\n+\n+            for cell in cells:\n+                cellvalue = cell.get("value", [])\n+                children = iterate_children(cellvalue or [])\n+                for child in children:\n+                    node_type = child.get("type")\n+                    if node_type:\n+                        handler = getattr(self, f"handle_{node_type}", None)\n+                        if handler:\n+                            handler(child)\n+\n+        return block\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class SlateTableBlockSerializer(SlateTableBlockSerializerBase):\n+    """Serializer for content-types with IBlocks behavior"""\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+class SlateTableBlockSerializerRoot(SlateTableBlockSerializerBase):\n+    """Serializer for site root"""\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex f827730c1..7531f6aca 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -53,6 +53,16 @@\n       provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n       />\n \n+  <subscriber\n+      factory=".blocks.SlateTableBlockSerializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n+\n+  <subscriber\n+      factory=".blocks.SlateTableBlockSerializer"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n+\n \n   <adapter factory=".converters.date_converter" />\n   <adapter factory=".converters.decimal_converter" />\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex b926c90e0..36f7a72d1 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -241,7 +241,12 @@ def test_blocks_custom_block_resolve_standard_fields(self):\n         )\n \n         self.deserialize(\n-            blocks={"123": {"@type": "foo", "href": self.portal.doc1.absolute_url()}}\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "href": self.portal.doc1.absolute_url(),\n+                }\n+            }\n         )\n         doc_uid = IUUID(self.portal.doc1)\n \n@@ -251,11 +256,17 @@ def test_blocks_custom_block_resolve_standard_fields(self):\n \n     def test_blocks_custom_block_doesnt_resolve_non_standard_fields(self):\n         self.deserialize(\n-            blocks={"123": {"@type": "foo", "link": self.portal.doc1.absolute_url()}}\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "link": self.portal.doc1.absolute_url(),\n+                }\n+            }\n         )\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["link"], self.portal.doc1.absolute_url()\n+            self.portal.doc1.blocks["123"]["link"],\n+            self.portal.doc1.absolute_url(),\n         )\n \n     def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n@@ -276,7 +287,12 @@ def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n \n     def test_deserialize_blocks_smart_href_array(self):\n         self.deserialize(\n-            blocks={"123": {"@type": "foo", "href": [self.portal.doc1.absolute_url()]}}\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "href": [self.portal.doc1.absolute_url()],\n+                }\n+            }\n         )\n         doc_uid = IUUID(self.portal.doc1)\n \n@@ -437,3 +453,102 @@ def test_aquisition_messing_with_link_deserializer(self):\n             self.portal.doc1.blocks["123"]["href"][0]["@id"],\n             "../..",\n         )\n+\n+    def test_slate_table_block_deserializer(self):\n+        blocks = {\n+            "abc": {\n+                "@type": "slateTable",\n+                "table": {\n+                    "hideHeaders": False,\n+                    "fixed": True,\n+                    "compact": False,\n+                    "basic": False,\n+                    "celled": True,\n+                    "inverted": False,\n+                    "striped": False,\n+                    "rows": [\n+                        {\n+                            "key": "25k7t",\n+                            "cells": [\n+                                {\n+                                    "key": "ajes8",\n+                                    "type": "header",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [{"text": "Table with links"}],\n+                                        }\n+                                    ],\n+                                },\n+                                {\n+                                    "key": "cm2bj",\n+                                    "type": "header",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [{"text": "Table with links"}],\n+                                        }\n+                                    ],\n+                                },\n+                            ],\n+                        },\n+                        {\n+                            "key": "6gteb",\n+                            "cells": [\n+                                {\n+                                    "key": "1gs74",\n+                                    "type": "data",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [\n+                                                {"text": ""},\n+                                                {\n+                                                    "type": "link",\n+                                                    "data": {\n+                                                        "url": self.portal.doc1.absolute_url()\n+                                                    },\n+                                                    "children": [\n+                                                        {\n+                                                            "text": (\n+                                                                "This internal" " link"\n+                                                            )\n+                                                        }\n+                                                    ],\n+                                                },\n+                                                {"text": ""},\n+                                            ],\n+                                        }\n+                                    ],\n+                                },\n+                                {\n+                                    "key": "ab93b",\n+                                    "type": "data",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [\n+                                                {"text": "This "},\n+                                                {\n+                                                    "type": "link",\n+                                                    "data": {\n+                                                        "url": "https://google.com"\n+                                                    },\n+                                                    "children": [{"text": "external"}],\n+                                                },\n+                                                {"text": " link"},\n+                                            ],\n+                                        }\n+                                    ],\n+                                },\n+                            ],\n+                        },\n+                    ],\n+                },\n+            }\n+        }\n+        res = self.deserialize(blocks=blocks)\n+        rows = res.blocks["abc"]["table"]["rows"]\n+        cell = rows[1]["cells"][0]\n+        link = cell["value"][0]["children"][1]["data"]["url"]\n+        self.assertTrue(link.startswith("../resolveuid/"))\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex fbcf21d1f..1b197f923 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -274,3 +274,106 @@ def test_simple_link_serializer(self):\n         value = res["abc"]["value"]\n         link = value[0]["children"][1]["data"]["url"]\n         self.assertTrue(link, self.portal.absolute_url() + "/doc1")\n+\n+    def test_slate_table_block_link_serializer(self):\n+        doc_uid = IUUID(self.portal["doc1"])\n+        resolve_uid_link = f"../resolveuid/{doc_uid}"\n+        blocks = {\n+            "abc": {\n+                "@type": "slateTable",\n+                "table": {\n+                    "hideHeaders": False,\n+                    "fixed": True,\n+                    "compact": False,\n+                    "basic": False,\n+                    "celled": True,\n+                    "inverted": False,\n+                    "striped": False,\n+                    "rows": [\n+                        {\n+                            "key": "25k7t",\n+                            "cells": [\n+                                {\n+                                    "key": "ajes8",\n+                                    "type": "header",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [{"text": "Table with links"}],\n+                                        }\n+                                    ],\n+                                },\n+                                {\n+                                    "key": "cm2bj",\n+                                    "type": "header",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [{"text": "Table with links"}],\n+                                        }\n+                                    ],\n+                                },\n+                            ],\n+                        },\n+                        {\n+                            "key": "6gteb",\n+                            "cells": [\n+                                {\n+                                    "key": "1gs74",\n+                                    "type": "data",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [\n+                                                {"text": ""},\n+                                                {\n+                                                    "type": "link",\n+                                                    "data": {"url": resolve_uid_link},\n+                                                    "children": [\n+                                                        {\n+                                                            "text": (\n+                                                                "This internal" " link"\n+                                                            )\n+                                                        }\n+                                                    ],\n+                                                },\n+                                                {"text": ""},\n+                                            ],\n+                                        }\n+                                    ],\n+                                },\n+                                {\n+                                    "key": "ab93b",\n+                                    "type": "data",\n+                                    "value": [\n+                                        {\n+                                            "type": "p",\n+                                            "children": [\n+                                                {"text": "This "},\n+                                                {\n+                                                    "type": "link",\n+                                                    "data": {\n+                                                        "url": "https://google.com/"\n+                                                    },\n+                                                    "children": [{"text": "external"}],\n+                                                },\n+                                                {"text": " link"},\n+                                            ],\n+                                        }\n+                                    ],\n+                                },\n+                            ],\n+                        },\n+                    ],\n+                },\n+            }\n+        }\n+\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks=blocks,\n+        )\n+        rows = res["abc"]["table"]["rows"]\n+        cell = rows[1]["cells"][0]\n+        link = cell["value"][0]["children"][1]["data"]["url"]\n+        self.assertTrue(link, self.portal.absolute_url() + "/doc1")\n'

