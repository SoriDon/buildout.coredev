Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2017-04-03T23:39:46+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/2d13d4ff32f226e5cbd40a1434444490cbdcd728

pep8

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/linkintegrity/browser/configure.zcml
M plone/app/linkintegrity/browser/delete_confirmation_info.pt
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/browser/update.pt
M plone/app/linkintegrity/browser/update.py
M plone/app/linkintegrity/compat.py
M plone/app/linkintegrity/configure.zcml
M plone/app/linkintegrity/exceptions.py
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/interfaces.py
M plone/app/linkintegrity/parser.py
M plone/app/linkintegrity/retriever.py
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/upgrades.py
M plone/app/linkintegrity/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9c8184d..1c8c4fe 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- PEP8.
+  [thet]
 
 
 3.2.2 (2017-04-02)
@@ -54,8 +55,8 @@ New features:
 
 New features:
 
-- Information about contents within a selected folder for deletion. 
-  This information contains number of deleted objects, 
+- Information about contents within a selected folder for deletion.
+  This information contains number of deleted objects,
   number of subfolders and number of published objects.
   [karalics]
 
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index 85880ef..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/linkintegrity/browser/configure.zcml b/plone/app/linkintegrity/browser/configure.zcml
index 50a108b..77c5b30 100644
--- a/plone/app/linkintegrity/browser/configure.zcml
+++ b/plone/app/linkintegrity/browser/configure.zcml
@@ -2,14 +2,14 @@
     xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser">
 
-    <browser:page
+  <browser:page
        for="*"
        name="delete_confirmation_info"
        class=".info.DeleteConfirmationInfo"
        permission="zope2.Public"
        />
 
-    <browser:page
+  <browser:page
         name="updateLinkIntegrityInformation"
         for="Products.CMFPlone.interfaces.IPloneSiteRoot"
         template="update.pt"
@@ -17,5 +17,4 @@
         permission="cmf.ManagePortal"
         />
 
-
 </configure>
diff --git a/plone/app/linkintegrity/browser/delete_confirmation_info.pt b/plone/app/linkintegrity/browser/delete_confirmation_info.pt
index e2cf7fb..f85783e 100644
--- a/plone/app/linkintegrity/browser/delete_confirmation_info.pt
+++ b/plone/app/linkintegrity/browser/delete_confirmation_info.pt
@@ -1,80 +1,88 @@
-<tal:block
-  tal:define="breaches python:view.breaches;"
-  i18n:domain="plone">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+    xmlns:tal="http://xml.zope.org/namespaces/tal"
+    xmlns:metal="http://xml.zope.org/namespaces/metal"
+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+    lang="en"
+    i18n:domain="plone"
+    tal:omit-tag="">
+<body tal:omit-tag="" tal:define="breaches python:view.breaches">
 
+  <h2 tal:condition="breaches" i18n:translate="linkintegrity_breaches_title">Potential link breakage</h2>
 
-    <h2 tal:condition="breaches" i18n:translate="linkintegrity_breaches_title">Potential link breakage</h2>
+  <div id="content-core">
 
-    <div id="content-core">
+    <p tal:condition="breaches" i18n:translate="linkintegrity_instructions">
+      By deleting this item, you will break links that exist in the items listed
+      below. If this is indeed what you want to do, we recommend that you remove
+      these references first.
+    </p>
 
-        <p tal:condition="breaches" i18n:translate="linkintegrity_instructions">
-            By deleting this item, you will break links that exist in the items listed
-            below. If this is indeed what you want to do, we recommend that you remove
-            these references first.
-        </p>
-
-        <div tal:define="token context/@@authenticator/token">
-	<article tal:repeat="breach breaches" class="breach-container">
+    <div tal:define="token context/@@authenticator/token">
+      <article tal:repeat="breach breaches" class="breach-container">
 
-	  <tal:target  tal:define="target breach/target">
-	    <header><a href="${target/url}" tal:content="target/title" /></header>
-	    <p>
-		<span i18n:translate="linkintegrity_is_referenced">
-		    This <span i18n:name="portal_type" tal:content="target/type_title" />
-		    is referenced by the following items:
-		</span>
-	    </p>
-	  </tal:target>
+        <tal:target  tal:define="target breach/target">
+          <header><a href="${target/url}" tal:content="target/title" /></header>
+          <p>
+            <span i18n:translate="linkintegrity_is_referenced">
+              This <span i18n:name="portal_type" tal:content="target/type_title" />
+              is referenced by the following items:
+            </span>
+          </p>
+        </tal:target>
 
-	  <ul>
-	    <li tal:repeat="source python:breach['sources']" class="breach-item">
-	      <tal:visible condition="source/accessible">
-		<a tal:attributes="href source/url" tal:content="source/title" />
-		[<a tal:attributes="href string:${source/url}/edit?_authenticator=${token}"
-		  i18n:translate="linkintegrity_edit_in_new_window"
-		  target="_blank">Edit in new window</a>]
-	      </tal:visible>
-	      <tal:private condition="not: source/accessible"
-			   i18n:translate="linkintegrity_item_not_accessible">
-		The item is not accessible.
-	      </tal:private>
-	    </li>
-	  </ul>
+        <ul>
+          <li tal:repeat="source python:breach['sources']" class="breach-item">
+            <tal:visible condition="source/accessible">
+              <a tal:attributes="href source/url" tal:content="source/title" />
+              [<a
+                  tal:attributes="href string:${source/url}/edit?_authenticator=${token}"
+                  i18n:translate="linkintegrity_edit_in_new_window"
+                  target="_blank">Edit in new window</a>]
+            </tal:visible>
+            <tal:private
+                condition="not: source/accessible"
+                i18n:translate="linkintegrity_item_not_accessible">
+              The item is not accessible.
+            </tal:private>
+          </li>
+        </ul>
 
-	</article>
+      </article>
 
-        <div tal:define="breach_count view/breach_count" tal:condition="breach_count">
+      <div tal:define="breach_count view/breach_count" tal:condition="breach_count">
 
         <h2 i18n:translate="deleting_overview" >Deleting overview</h2>
-          <p>
-              <span  tal:define="refs python:len(breach_count)"
-                     i18n:translate="selected_folders_with_content">
-                     Number of selected, non-empty folders: <strong><span tal:replace="refs" i18n:name="refs" /></strong>
-                </span>
-          </p>
-          <ul>
-            <li tal:repeat="content python:breach_count">
-              <span i18n:translate="deleting_contents"> Following content within
-                  <strong><span tal:replace="content" i18n:name="content" /></strong>  will also be deleted:
-              </span><br>
-                <ul>
-                  <li tal:define="objects python:['Objects in all', 'Folders', 'Published objects'] "
-                      tal:repeat="item python:range(3) "
-                          i18n:translate="" >
-                      <span tal:replace="python: breach_count[content][item]" />
-                      <span i18n:translate="" tal:replace="python: objects[item]" />
-                  </li>
-                </ul>
-            </li>
-          </ul>
-
+        <p>
+          <span tal:define="refs python:len(breach_count)"
+              i18n:translate="selected_folders_with_content">
+            Number of selected, non-empty folders: <strong><span tal:replace="refs" i18n:name="refs" /></strong>
+          </span>
+        </p>
+        <ul>
+          <li tal:repeat="content python:breach_count">
+            <span i18n:translate="deleting_contents"> Following content within
+              <strong><span tal:replace="content" i18n:name="content" /></strong>  will also be deleted:
+            </span><br/>
+            <ul>
+              <li tal:define="objects python:['Objects in all', 'Folders', 'Published objects'] "
+                  tal:repeat="item python:range(3) "
+                  i18n:translate="">
+                <span tal:replace="python: breach_count[content][item]" />
+                <span i18n:translate="" tal:replace="python: objects[item]" />
+              </li>
+            </ul>
+          </li>
+        </ul>
 
+      </div>
 
-        </div>
+      <p i18n:translate="linkintegrity_delete_anyway">
+        Would you like to delete it anyway?
+      </p>
 
-        <p i18n:translate="linkintegrity_delete_anyway">
-            Would you like to delete it anyway?
-        </p>
-        </div>
     </div>
-</tal:block>
+
+  </div>
+
+</body>
+</html>
diff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py
index f391b0d..8916041 100644
--- a/plone/app/linkintegrity/browser/info.py
+++ b/plone/app/linkintegrity/browser/info.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from OFS.interfaces import IFolder
+from plone.app.linkintegrity.utils import getIncomingLinks
+from plone.app.linkintegrity.utils import linkintegrity_enabled
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.utils import _checkPermission
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.linkintegrity.utils import getIncomingLinks
-from plone.app.linkintegrity.utils import linkintegrity_enabled
-from plone.uuid.interfaces import IUUID
 from zope.i18n import translate
+
 import logging
 
 
@@ -60,9 +61,10 @@ def get_breaches(self, items=None):
             uids_to_ignore.extend([i.UID for i in brains_to_delete])
             for brain_to_delete in brains_to_delete:
                 try:
-                    obj_to_delete = brain_to_delete.getObject()
+                    obj_to_delete = brain_to_delete.getObject()  # noqa
                 except (AttributeError, KeyError):
-                    logger.exception('No object found for %s! Skipping', brain_to_delete)
+                    logger.exception(
+                        'No object found for %s! Skipping', brain_to_delete)
                     continue
                 for breach in self.get_breaches_for_item(obj):
                     add_breach = False
@@ -77,11 +79,23 @@ def get_breaches(self, items=None):
                     if add_breach:
                         results.append(breach)
             if IFolder.providedBy(obj):
-                count = len(catalog(path={'query': obj_path}))
-                count_dirs = len(catalog(path={'query': obj_path}, is_folderish=True))
-                count_public = len(catalog(path={'query': obj_path}, review_state='published'))
+                count = len(catalog(
+                    path={'query': obj_path}
+                ))
+                count_dirs = len(catalog(
+                    path={'query': obj_path},
+                    is_folderish=True
+                ))
+                count_public = len(catalog(
+                    path={'query': obj_path},
+                    review_state='published'
+                ))
                 if count:
-                    self.breach_count[obj_path]=[count, count_dirs, count_public]
+                    self.breach_count[obj_path] = [
+                        count,
+                        count_dirs,
+                        count_public
+                    ]
 
         # Cleanup: Some breaches where added before it was known
         # that their source will be deleted too.
@@ -97,7 +111,6 @@ def get_breaches(self, items=None):
                         results.remove(result)
         return results
 
-
     def get_breaches_for_item(self, obj=None):
         """Get breaches for one object and its children.
 
@@ -130,7 +143,6 @@ def get_breaches_for_item(self, obj=None):
 
     def check_object(self, obj, excluded_path=None):
         """Check one object for breaches.
-
         Breaches originating from excluded_path are ignored.
         """
         breaches = {}
@@ -165,7 +177,8 @@ def check_object(self, obj, excluded_path=None):
             return breaches
 
     def get_portal_type_title(self, obj):
-        """Get the portal type title of the object."""
+        """Get the portal type title of the object.
+        """
         context = aq_inner(self.context)
         portal_types = getToolByName(context, 'portal_types')
         fti = portal_types.get(obj.portal_type)
@@ -178,4 +191,3 @@ def get_portal_type_title(self, obj):
 
     def is_accessible(self, obj):
         return _checkPermission(AccessContentsInformation, obj)
-
diff --git a/plone/app/linkintegrity/browser/update.pt b/plone/app/linkintegrity/browser/update.pt
index 8a2d48b..483d6a2 100644
--- a/plone/app/linkintegrity/browser/update.pt
+++ b/plone/app/linkintegrity/browser/update.pt
@@ -1,37 +1,39 @@
- <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
-      lang="en"
-      metal:use-macro="here/main_template/macros/master"
-      i18n:domain="plone">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+    xmlns:tal="http://xml.zope.org/namespaces/tal"
+    xmlns:metal="http://xml.zope.org/namespaces/metal"
+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+    lang="en"
+    metal:use-macro="here/main_template/macros/master"
+    i18n:domain="plone"
+    tal:omit-tag="">
 
 <head>
-    <metal:block fill-slot="top_slot"
-                 tal:define="dummy python:request.set('disable_border',1)" />
+  <metal:block
+      fill-slot="top_slot"
+      tal:define="dummy python:request.set('disable_border',1)" />
 </head>
 
 <body>
-
 <metal:main fill-slot="main">
 
-    <h1 class="documentFirstHeading"
-        i18n:translate="linkintegrity_update_title">Update link integrity information</h1>
-
-    <div id="content-core">
-        <p i18n:translate="linkintegrity_update_instructions">
-            Clicking the below button will cause link integrity information to be
-            updated. This might take a while, especially for bigger sites...
-        </p>
+  <h1 class="documentFirstHeading"
+      i18n:translate="linkintegrity_update_title">Update link integrity information</h1>
 
-        <form method="post" action="updateLinkIntegrityInformation"
-              tal:attributes="action request/URL">
+  <div id="content-core">
 
-          <input class="destructive" type="submit" name="update" value="Update" />
+    <p i18n:translate="linkintegrity_update_instructions">
+      Clicking the below button will cause link integrity information to be
+      updated. This might take a while, especially for bigger sites...
+    </p>
 
-          <input class="standalone" type="submit" name="cancel" value="Cancel" />
+    <form method="post" action="updateLinkIntegrityInformation"
+        tal:attributes="action request/URL">
+      <input class="destructive" type="submit" name="update" value="Update" />
+      <input class="standalone" type="submit" name="cancel" value="Cancel" />
+    </form>
 
-        </form>
-    </div>
+  </div>
 
 </metal:main>
-
 </body>
 </html>
diff --git a/plone/app/linkintegrity/browser/update.py b/plone/app/linkintegrity/browser/update.py
index 0cd5323..7c693da 100644
--- a/plone/app/linkintegrity/browser/update.py
+++ b/plone/app/linkintegrity/browser/update.py
@@ -9,9 +9,11 @@
 from Products.statusmessages.interfaces import IStatusMessage
 from transaction import savepoint
 from zExceptions import NotFound
+
 import logging
 import pkg_resources
 
+
 # Is there a multilingual addon?
 try:
     pkg_resources.get_distribution('Products.LinguaPlone')
diff --git a/plone/app/linkintegrity/compat.py b/plone/app/linkintegrity/compat.py
index c19cf2f..1e07b81 100644
--- a/plone/app/linkintegrity/compat.py
+++ b/plone/app/linkintegrity/compat.py
@@ -1,6 +1,5 @@
 # If Archetypes is not installed, define dummy objects
 # to replace Archetypes imports.
-
 try:
     from Products.Archetypes.interfaces import IBaseObject
     from Products.Archetypes.Field import TextField
diff --git a/plone/app/linkintegrity/configure.zcml b/plone/app/linkintegrity/configure.zcml
index 4f3bdf4..cee6697 100644
--- a/plone/app/linkintegrity/configure.zcml
+++ b/plone/app/linkintegrity/configure.zcml
@@ -4,54 +4,54 @@
     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
     xmlns:zcml="http://namespaces.zope.org/zcml">
 
-    <includeDependencies package="." />
-
-    <include package="Products.CMFCore" file="permissions.zcml" />
-
-    <include package=".browser" />
-    <adapter factory=".retriever.ATGeneral" />
-    <adapter factory=".retriever.DXGeneral" />
-
-    <configure zcml:condition="installed Products.Archetypes">
-      <subscriber
-          for="Products.Archetypes.interfaces.IBaseObject
-               OFS.interfaces.IObjectClonedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="Products.Archetypes.interfaces.IBaseObject
-               zope.lifecycleevent.interfaces.IObjectCreatedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="Products.Archetypes.interfaces.IBaseObject
-               zope.lifecycleevent.interfaces.IObjectModifiedEvent"
-          handler=".handlers.modifiedContent" />
-    </configure>
-
-    <configure zcml:condition="installed plone.dexterity">
-      <subscriber
-          for="plone.app.relationfield.interfaces.IDexterityHasRelations
-               zope.lifecycleevent.interfaces.IObjectCopiedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="plone.app.relationfield.interfaces.IDexterityHasRelations
-               zope.lifecycleevent.interfaces.IObjectAddedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="plone.app.relationfield.interfaces.IDexterityHasRelations
-               zope.lifecycleevent.interfaces.IObjectModifiedEvent"
-          handler=".handlers.modifiedContent" />
-    </configure>
-
-    <genericsetup:registerProfile
-        name="default"
-        title="plone.app.linkintegrity"
-        directory="profiles/default"
-        description="Installs the plone.app.linkintegrity add-on."
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
+  <includeDependencies package="." />
+  <include package="Products.CMFCore" file="permissions.zcml" />
+
+  <include package=".browser" />
+
+  <adapter factory=".retriever.ATGeneral" />
+  <adapter factory=".retriever.DXGeneral" />
+
+  <configure zcml:condition="installed Products.Archetypes">
+    <subscriber
+        for="Products.Archetypes.interfaces.IBaseObject
+             OFS.interfaces.IObjectClonedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="Products.Archetypes.interfaces.IBaseObject
+             zope.lifecycleevent.interfaces.IObjectCreatedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="Products.Archetypes.interfaces.IBaseObject
+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"
+        handler=".handlers.modifiedContent" />
+  </configure>
+
+  <configure zcml:condition="installed plone.dexterity">
+    <subscriber
+        for="plone.app.relationfield.interfaces.IDexterityHasRelations
+             zope.lifecycleevent.interfaces.IObjectCopiedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="plone.app.relationfield.interfaces.IDexterityHasRelations
+             zope.lifecycleevent.interfaces.IObjectAddedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="plone.app.relationfield.interfaces.IDexterityHasRelations
+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"
+        handler=".handlers.modifiedContent" />
+  </configure>
+
+  <genericsetup:registerProfile
+      name="default"
+      title="plone.app.linkintegrity"
+      directory="profiles/default"
+      description="Installs the plone.app.linkintegrity add-on."
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      />
 
 </configure>
diff --git a/plone/app/linkintegrity/exceptions.py b/plone/app/linkintegrity/exceptions.py
index e9247a6..a0cf407 100644
--- a/plone/app/linkintegrity/exceptions.py
+++ b/plone/app/linkintegrity/exceptions.py
@@ -1,16 +1,18 @@
 # -*- coding: utf-8 -*-
 from OFS.ObjectManager import BeforeDeleteException
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 
 
 class ILinkIntegrityNotificationException(Interface):
-    """ an exception indicating a prevented link integrity breach """
+    """An exception indicating a prevented link integrity breach.
+    """
 
 
 @implementer(ILinkIntegrityNotificationException)
 class LinkIntegrityNotificationException(BeforeDeleteException):
-    """ an exception indicating a prevented link integrity breach """
+    """An exception indicating a prevented link integrity breach.
+    """
 
     def __str__(self):
         args = self.args
diff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py
index 4c9845f..3749765 100644
--- a/plone/app/linkintegrity/handlers.py
+++ b/plone/app/linkintegrity/handlers.py
@@ -1,26 +1,28 @@
 # -*- coding: utf-8 -*-
+from .compat import IBaseObject
 from Acquisition import aq_get
 from Acquisition import aq_parent
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from ZODB.POSException import ConflictError
 from plone.app.linkintegrity.interfaces import IRetriever
 from plone.app.uuid.utils import uuidToObject
 from plone.dexterity.interfaces import IDexterityContent
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IPloneSiteRoot
 from urllib import unquote
 from urlparse import urlsplit
 from z3c.relationfield import RelationValue
 from z3c.relationfield.event import _setRelation
-from zExceptions import NotFound
 from zc.relation.interfaces import ICatalog
+from zExceptions import NotFound
+from ZODB.POSException import ConflictError
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
 from zope.intid.interfaces import IIntIds
 from zope.keyreference.interfaces import NotYet
 from zope.publisher.interfaces import NotFound as ztkNotFound
-from .compat import IBaseObject
+
 import logging
 
+
 logger = logging.getLogger(__name__)
 referencedRelationship = 'isReferencing'
 
@@ -110,10 +112,12 @@ def modifiedContent(obj, event):
         refs = getObjectsFromLinks(obj, links)
         updateReferences(obj, refs)
 
+
 # BBB
 modifiedArchetype = modifiedContent
 modifiedDexterity = modifiedContent
 
+
 def updateReferences(obj, refs):
     """Renew all linkintegritry-references.
 
diff --git a/plone/app/linkintegrity/interfaces.py b/plone/app/linkintegrity/interfaces.py
index 6f36052..e7ee638 100644
--- a/plone/app/linkintegrity/interfaces.py
+++ b/plone/app/linkintegrity/interfaces.py
@@ -1,8 +1,10 @@
 # -*- coding: utf-8 -*-
 from zope.interface import Interface
 
+
 class IRetriever(Interface):
-    """ A retriever for links in a content type """
+    """A retriever for links in a content type.
+    """
 
     def retrieveLinks():
         """ retrieve links """
diff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py
index ebfcf14..5644cde 100644
--- a/plone/app/linkintegrity/parser.py
+++ b/plone/app/linkintegrity/parser.py
@@ -1,20 +1,24 @@
 # -*- coding: utf-8 -*-
-from HTMLParser import HTMLParser, HTMLParseError
+from HTMLParser import HTMLParseError
+from HTMLParser import HTMLParser
 
 
 class LinkParser(HTMLParser):
-    """ a simple html parser for link and image urls """
+    """A simple html parser for link and image urls.
+    """
 
     def __init__(self):
         HTMLParser.__init__(self)
         self.links = []
 
     def getLinks(self):
-        """ return all links found during parsing """
+        """Return all links found during parsing.
+        """
         return tuple(self.links)
 
     def handle_starttag(self, tag, attrs):
-        """ override the method to remember all links """
+        """Override the method to remember all links.
+        """
         if tag == 'a':
             self.links.extend(search_attr('href', attrs))
         if tag == 'img':
@@ -22,7 +26,8 @@ def handle_starttag(self, tag, attrs):
 
 
 def search_attr(name, attrs):
-    """ search named attribute in a list of attributes """
+    """Search named attribute in a list of attributes.
+    """
     for attr, value in attrs:
         if attr == name:
             return [value]
@@ -30,7 +35,8 @@ def search_attr(name, attrs):
 
 
 def extractLinks(data, encoding='utf-8'):
-    """ parse the given html and return all links """
+    """Parse the given html and return all links.
+    """
     if not data:
         return []
     parser = LinkParser()
diff --git a/plone/app/linkintegrity/retriever.py b/plone/app/linkintegrity/retriever.py
index afd6307..7768e11 100644
--- a/plone/app/linkintegrity/retriever.py
+++ b/plone/app/linkintegrity/retriever.py
@@ -1,18 +1,18 @@
 # -*- coding: utf-8 -*-
-""" Link Integrity - link retriever methods """
-
+"""Link Integrity - link retriever methods.
+"""
+from .compat import IBaseObject
+from .compat import TextField
 from plone.app.linkintegrity.interfaces import IRetriever
 from plone.app.linkintegrity.parser import extractLinks
-from zope.component import adapter
-from zope.interface import implementer
+from plone.app.textfield import RichText
 from plone.dexterity.interfaces import IDexterityContent
-from zope.component import getUtility
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import getAdditionalSchemata
+from zope.component import adapter
+from zope.component import getUtility
+from zope.interface import implementer
 from zope.schema import getFieldsInOrder
-from plone.app.textfield import RichText
-from .compat import IBaseObject
-from .compat import TextField
 
 
 @implementer(IRetriever)
@@ -25,7 +25,8 @@ def __init__(self, context):
         self.context = context
 
     def retrieveLinks(self):
-        """Finds all links from the object and return them."""
+        """Finds all links from the object and return them.
+        """
         links = set()
         for field in self.context.Schema().fields():
             if isinstance(field, TextField):
@@ -51,7 +52,8 @@ def __init__(self, context):
         self.context = context
 
     def retrieveLinks(self):
-        """Finds all links from the object and return them."""
+        """Finds all links from the object and return them.
+        """
         fti = getUtility(IDexterityFTI, name=self.context.portal_type)
         schema = fti.lookupSchema()
         additional_schema = getAdditionalSchemata(
diff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py
index c49540a..f037862 100644
--- a/plone/app/linkintegrity/testing.py
+++ b/plone/app/linkintegrity/testing.py
@@ -1,24 +1,23 @@
 # -*- coding: utf-8 -*-
-from Products.Archetypes.interfaces import IBaseObject
-from Products.CMFCore.utils import getToolByName
-from StringIO import StringIO
 from base64 import decodestring
-from plone.app.contenttypes.testing import (
-    PLONE_APP_CONTENTTYPES_FIXTURE,
-    PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE
-)
-from plone.app.testing import PLONE_FIXTURE
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE  # noqa
 from plone.app.testing import layers
 from plone.app.testing import login
+from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import ploneSite
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.namedfile.file import NamedImage
 from plone.testing import z2
+from Products.Archetypes.interfaces import IBaseObject
+from Products.CMFCore.utils import getToolByName
+from StringIO import StringIO
 from zope.configuration import xmlconfig
 
+
 B64_DATA = 'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs='
 GIF = StringIO(decodestring(B64_DATA))
 GIF.filename = 'sample.gif'
@@ -29,7 +28,7 @@
 
 def create(container, type_name, **kwargs):
     """A easy helper method to create some content since we do not have
-       plone.api in core.
+    plone.api in core.
     """
 
     new_id = container.invokeFactory(type_name, **kwargs)
@@ -44,7 +43,8 @@ def create(container, type_name, **kwargs):
 
 
 class LinkIntegrityLayer(z2.Layer):
-    """Base Layer for AT and Dexterity testing"""
+    """Base Layer for AT and Dexterity testing.
+    """
 
     defaultBases = (PLONE_FIXTURE, )
 
@@ -84,11 +84,13 @@ def tearDown(self):
         with z2.zopeApp() as app:
             z2.uninstallProduct(app, 'plone.app.linkintegrity')
 
+
 PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()
 
 
 class LinkIntegrityATLayer(LinkIntegrityLayer):
-    """Layer which targets testing with Archetypes and ATContentTypes"""
+    """Layer which targets testing with Archetypes and ATContentTypes.
+    """
 
     directory = 'at'
     defaultBases = (
@@ -105,11 +107,13 @@ def setUpContent(self):
         with ploneSite() as portal:
             create(portal, 'Image', id='image1', title='Image 1', image=GIF)
 
+
 PLONE_APP_LINKINTEGRITY_AT_FIXTURE = LinkIntegrityATLayer()
 
 
 class LinkIntegrityDXLayer(LinkIntegrityLayer):
-    """Layer which targets testing with Dexterity"""
+    """Layer which targets testing with Dexterity.
+    """
 
     directory = 'dx'
     defaultBases = (
diff --git a/plone/app/linkintegrity/upgrades.py b/plone/app/linkintegrity/upgrades.py
index f3ca67e..56d47bf 100644
--- a/plone/app/linkintegrity/upgrades.py
+++ b/plone/app/linkintegrity/upgrades.py
@@ -1,13 +1,14 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from Products.Archetypes.config import REFERENCE_CATALOG
 from plone.app.linkintegrity.handlers import referencedRelationship
 from plone.app.uuid.utils import uuidToObject
+from Products.Archetypes.config import REFERENCE_CATALOG
+from Products.CMFCore.utils import getToolByName
 from zope.lifecycleevent import modified
 
 
 def migrate_linkintegrity_relations(context):
-    """Migrate linkintegrity-relation from reference_catalog to zc.relation"""
+    """Migrate linkintegrity-relation from reference_catalog to zc.relation.
+    """
     reference_catalog = getToolByName(context, REFERENCE_CATALOG, None)
     if reference_catalog is not None:
         for brain in catalog_get_all(reference_catalog):
diff --git a/plone/app/linkintegrity/utils.py b/plone/app/linkintegrity/utils.py
index 789d9c0..3456918 100644
--- a/plone/app/linkintegrity/utils.py
+++ b/plone/app/linkintegrity/utils.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.interfaces import IEditingSchema
 from plone.app.linkintegrity.handlers import referencedRelationship
 from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import IEditingSchema
 from zc.relation.interfaces import ICatalog
 from zope.component import getUtility
 from zope.intid.interfaces import IIntIds
@@ -12,24 +12,19 @@ def getIncomingLinks(obj=None, intid=None):
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
-    if intid is not None:
-        return catalog.findRelations({
-            'to_id': intid,
-            'from_attribute': referencedRelationship})
-    else:
-        intids = getUtility(IIntIds)
-        return catalog.findRelations({
-            'to_id': intids.getId(obj),
-            'from_attribute': referencedRelationship})
+    intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
+    return catalog.findRelations({
+        'to_id': intid,
+        'from_attribute': referencedRelationship})
 
 
 def hasIncomingLinks(obj=None, intid=None):
     """Test if an object is linked to by other objects using
     plone.app.linkintegrity (Links in Richtext-Fields).
 
-    Way to give bool without loading generator into list
+    Way to give bool without loading generator into list.
     """
-    for i in getIncomingLinks(obj=obj, intid=intid):
+    for it in getIncomingLinks(obj=obj, intid=intid):
         return True
     return False
 
@@ -39,22 +34,17 @@ def getOutgoingLinks(obj=None, intid=None):
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
-    if intid is not None:
-        return catalog.findRelations({
-            'from_id': intid,
-            'from_attribute': referencedRelationship})
-    else:
-        intids = getUtility(IIntIds)
-        return catalog.findRelations({
-            'from_id': intids.getId(obj),
-            'from_attribute': referencedRelationship})
+    intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
+    return catalog.findRelations({
+        'from_id': intid,
+        'from_attribute': referencedRelationship})
 
 
 def hasOutgoingLinks(obj=None, intid=None):
     """Test if an object links to other objects using plone.app.linkintegrity
     (Links in Richtext-Fields).
     """
-    for i in getOutgoingLinks(obj=obj, intid=intid):
+    for it in getOutgoingLinks(obj=obj, intid=intid):
         return True
     return False
 
diff --git a/setup.py b/setup.py
index c20b246..1b03759 100644
--- a/setup.py
+++ b/setup.py
@@ -1,54 +1,57 @@
 # -*- coding: utf-8 -*-
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '3.2.3.dev0'
 
-setup(name='plone.app.linkintegrity',
-      version=version,
-      description='Manage link integrity in Plone.',
-      long_description='\n\n'.join([
-          open("README.rst").read(),
-          open('CHANGES.rst').read(),
-      ]),
-      classifiers=[
-          "Development Status :: 5 - Production/Stable",
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Framework :: Plone :: 5.1",
-          "Framework :: Zope2",
-          "Intended Audience :: Other Audience",
-          "Intended Audience :: System Administrators",
-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",
-      ],
-      keywords='link integrity plone',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.app.linkintegrity',
-      license='GPL version 2',
-      packages=find_packages(),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      install_requires=[
-          'setuptools',
-          'plone.app.intid',
-          'plone.app.relationfield',
-      ],
-      extras_require={
-          'test': [
-              'plone.app.testing',
-              'plone.app.contenttypes',
-              'plone.app.dexterity [relations]',  # related items in dx 2.0
-          ],
-      },
-      platforms='Any',
-      zip_safe=False,
-      entry_points='''
-        [z3c.autoinclude.plugin]
-        target = plone
-      ''',
-      )
+setup(
+    name='plone.app.linkintegrity',
+    version=version,
+    description='Manage link integrity in Plone.',
+    long_description='\n\n'.join([
+        open("README.rst").read(),
+        open('CHANGES.rst').read(),
+    ]),
+    classifiers=[
+        "Development Status :: 5 - Production/Stable",
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "Framework :: Plone :: 5.1",
+        "Framework :: Zope2",
+        "Intended Audience :: Other Audience",
+        "Intended Audience :: System Administrators",
+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+        "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",
+    ],
+    keywords='link integrity plone',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.app.linkintegrity',
+    license='GPL version 2',
+    packages=find_packages(),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    install_requires=[
+        'setuptools',
+        'plone.app.intid',
+        'plone.app.relationfield',
+    ],
+    extras_require={
+        'test': [
+            'plone.app.testing',
+            'plone.app.contenttypes',
+            'plone.app.dexterity [relations]',  # related items in dx 2.0
+        ],
+    },
+    platforms='Any',
+    zip_safe=False,
+    entry_points='''
+    [z3c.autoinclude.plugin]
+    target = plone
+    ''',
+)


Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2017-04-04T11:14:49+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/6d82b492bcd08c75fdb557f19f32c75ad08de2ef

Merge pull request #51 from plone/thet-upds

pep8

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/linkintegrity/browser/configure.zcml
M plone/app/linkintegrity/browser/delete_confirmation_info.pt
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/browser/update.pt
M plone/app/linkintegrity/browser/update.py
M plone/app/linkintegrity/compat.py
M plone/app/linkintegrity/configure.zcml
M plone/app/linkintegrity/exceptions.py
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/interfaces.py
M plone/app/linkintegrity/parser.py
M plone/app/linkintegrity/retriever.py
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/upgrades.py
M plone/app/linkintegrity/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9c8184d..1c8c4fe 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- PEP8.
+  [thet]
 
 
 3.2.2 (2017-04-02)
@@ -54,8 +55,8 @@ New features:
 
 New features:
 
-- Information about contents within a selected folder for deletion. 
-  This information contains number of deleted objects, 
+- Information about contents within a selected folder for deletion.
+  This information contains number of deleted objects,
   number of subfolders and number of published objects.
   [karalics]
 
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index 85880ef..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/linkintegrity/browser/configure.zcml b/plone/app/linkintegrity/browser/configure.zcml
index 50a108b..77c5b30 100644
--- a/plone/app/linkintegrity/browser/configure.zcml
+++ b/plone/app/linkintegrity/browser/configure.zcml
@@ -2,14 +2,14 @@
     xmlns="http://namespaces.zope.org/zope"
     xmlns:browser="http://namespaces.zope.org/browser">
 
-    <browser:page
+  <browser:page
        for="*"
        name="delete_confirmation_info"
        class=".info.DeleteConfirmationInfo"
        permission="zope2.Public"
        />
 
-    <browser:page
+  <browser:page
         name="updateLinkIntegrityInformation"
         for="Products.CMFPlone.interfaces.IPloneSiteRoot"
         template="update.pt"
@@ -17,5 +17,4 @@
         permission="cmf.ManagePortal"
         />
 
-
 </configure>
diff --git a/plone/app/linkintegrity/browser/delete_confirmation_info.pt b/plone/app/linkintegrity/browser/delete_confirmation_info.pt
index e2cf7fb..f85783e 100644
--- a/plone/app/linkintegrity/browser/delete_confirmation_info.pt
+++ b/plone/app/linkintegrity/browser/delete_confirmation_info.pt
@@ -1,80 +1,88 @@
-<tal:block
-  tal:define="breaches python:view.breaches;"
-  i18n:domain="plone">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+    xmlns:tal="http://xml.zope.org/namespaces/tal"
+    xmlns:metal="http://xml.zope.org/namespaces/metal"
+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+    lang="en"
+    i18n:domain="plone"
+    tal:omit-tag="">
+<body tal:omit-tag="" tal:define="breaches python:view.breaches">
 
+  <h2 tal:condition="breaches" i18n:translate="linkintegrity_breaches_title">Potential link breakage</h2>
 
-    <h2 tal:condition="breaches" i18n:translate="linkintegrity_breaches_title">Potential link breakage</h2>
+  <div id="content-core">
 
-    <div id="content-core">
+    <p tal:condition="breaches" i18n:translate="linkintegrity_instructions">
+      By deleting this item, you will break links that exist in the items listed
+      below. If this is indeed what you want to do, we recommend that you remove
+      these references first.
+    </p>
 
-        <p tal:condition="breaches" i18n:translate="linkintegrity_instructions">
-            By deleting this item, you will break links that exist in the items listed
-            below. If this is indeed what you want to do, we recommend that you remove
-            these references first.
-        </p>
-
-        <div tal:define="token context/@@authenticator/token">
-	<article tal:repeat="breach breaches" class="breach-container">
+    <div tal:define="token context/@@authenticator/token">
+      <article tal:repeat="breach breaches" class="breach-container">
 
-	  <tal:target  tal:define="target breach/target">
-	    <header><a href="${target/url}" tal:content="target/title" /></header>
-	    <p>
-		<span i18n:translate="linkintegrity_is_referenced">
-		    This <span i18n:name="portal_type" tal:content="target/type_title" />
-		    is referenced by the following items:
-		</span>
-	    </p>
-	  </tal:target>
+        <tal:target  tal:define="target breach/target">
+          <header><a href="${target/url}" tal:content="target/title" /></header>
+          <p>
+            <span i18n:translate="linkintegrity_is_referenced">
+              This <span i18n:name="portal_type" tal:content="target/type_title" />
+              is referenced by the following items:
+            </span>
+          </p>
+        </tal:target>
 
-	  <ul>
-	    <li tal:repeat="source python:breach['sources']" class="breach-item">
-	      <tal:visible condition="source/accessible">
-		<a tal:attributes="href source/url" tal:content="source/title" />
-		[<a tal:attributes="href string:${source/url}/edit?_authenticator=${token}"
-		  i18n:translate="linkintegrity_edit_in_new_window"
-		  target="_blank">Edit in new window</a>]
-	      </tal:visible>
-	      <tal:private condition="not: source/accessible"
-			   i18n:translate="linkintegrity_item_not_accessible">
-		The item is not accessible.
-	      </tal:private>
-	    </li>
-	  </ul>
+        <ul>
+          <li tal:repeat="source python:breach['sources']" class="breach-item">
+            <tal:visible condition="source/accessible">
+              <a tal:attributes="href source/url" tal:content="source/title" />
+              [<a
+                  tal:attributes="href string:${source/url}/edit?_authenticator=${token}"
+                  i18n:translate="linkintegrity_edit_in_new_window"
+                  target="_blank">Edit in new window</a>]
+            </tal:visible>
+            <tal:private
+                condition="not: source/accessible"
+                i18n:translate="linkintegrity_item_not_accessible">
+              The item is not accessible.
+            </tal:private>
+          </li>
+        </ul>
 
-	</article>
+      </article>
 
-        <div tal:define="breach_count view/breach_count" tal:condition="breach_count">
+      <div tal:define="breach_count view/breach_count" tal:condition="breach_count">
 
         <h2 i18n:translate="deleting_overview" >Deleting overview</h2>
-          <p>
-              <span  tal:define="refs python:len(breach_count)"
-                     i18n:translate="selected_folders_with_content">
-                     Number of selected, non-empty folders: <strong><span tal:replace="refs" i18n:name="refs" /></strong>
-                </span>
-          </p>
-          <ul>
-            <li tal:repeat="content python:breach_count">
-              <span i18n:translate="deleting_contents"> Following content within
-                  <strong><span tal:replace="content" i18n:name="content" /></strong>  will also be deleted:
-              </span><br>
-                <ul>
-                  <li tal:define="objects python:['Objects in all', 'Folders', 'Published objects'] "
-                      tal:repeat="item python:range(3) "
-                          i18n:translate="" >
-                      <span tal:replace="python: breach_count[content][item]" />
-                      <span i18n:translate="" tal:replace="python: objects[item]" />
-                  </li>
-                </ul>
-            </li>
-          </ul>
-
+        <p>
+          <span tal:define="refs python:len(breach_count)"
+              i18n:translate="selected_folders_with_content">
+            Number of selected, non-empty folders: <strong><span tal:replace="refs" i18n:name="refs" /></strong>
+          </span>
+        </p>
+        <ul>
+          <li tal:repeat="content python:breach_count">
+            <span i18n:translate="deleting_contents"> Following content within
+              <strong><span tal:replace="content" i18n:name="content" /></strong>  will also be deleted:
+            </span><br/>
+            <ul>
+              <li tal:define="objects python:['Objects in all', 'Folders', 'Published objects'] "
+                  tal:repeat="item python:range(3) "
+                  i18n:translate="">
+                <span tal:replace="python: breach_count[content][item]" />
+                <span i18n:translate="" tal:replace="python: objects[item]" />
+              </li>
+            </ul>
+          </li>
+        </ul>
 
+      </div>
 
-        </div>
+      <p i18n:translate="linkintegrity_delete_anyway">
+        Would you like to delete it anyway?
+      </p>
 
-        <p i18n:translate="linkintegrity_delete_anyway">
-            Would you like to delete it anyway?
-        </p>
-        </div>
     </div>
-</tal:block>
+
+  </div>
+
+</body>
+</html>
diff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py
index f391b0d..8916041 100644
--- a/plone/app/linkintegrity/browser/info.py
+++ b/plone/app/linkintegrity/browser/info.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_inner
 from OFS.interfaces import IFolder
+from plone.app.linkintegrity.utils import getIncomingLinks
+from plone.app.linkintegrity.utils import linkintegrity_enabled
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.utils import _checkPermission
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.linkintegrity.utils import getIncomingLinks
-from plone.app.linkintegrity.utils import linkintegrity_enabled
-from plone.uuid.interfaces import IUUID
 from zope.i18n import translate
+
 import logging
 
 
@@ -60,9 +61,10 @@ def get_breaches(self, items=None):
             uids_to_ignore.extend([i.UID for i in brains_to_delete])
             for brain_to_delete in brains_to_delete:
                 try:
-                    obj_to_delete = brain_to_delete.getObject()
+                    obj_to_delete = brain_to_delete.getObject()  # noqa
                 except (AttributeError, KeyError):
-                    logger.exception('No object found for %s! Skipping', brain_to_delete)
+                    logger.exception(
+                        'No object found for %s! Skipping', brain_to_delete)
                     continue
                 for breach in self.get_breaches_for_item(obj):
                     add_breach = False
@@ -77,11 +79,23 @@ def get_breaches(self, items=None):
                     if add_breach:
                         results.append(breach)
             if IFolder.providedBy(obj):
-                count = len(catalog(path={'query': obj_path}))
-                count_dirs = len(catalog(path={'query': obj_path}, is_folderish=True))
-                count_public = len(catalog(path={'query': obj_path}, review_state='published'))
+                count = len(catalog(
+                    path={'query': obj_path}
+                ))
+                count_dirs = len(catalog(
+                    path={'query': obj_path},
+                    is_folderish=True
+                ))
+                count_public = len(catalog(
+                    path={'query': obj_path},
+                    review_state='published'
+                ))
                 if count:
-                    self.breach_count[obj_path]=[count, count_dirs, count_public]
+                    self.breach_count[obj_path] = [
+                        count,
+                        count_dirs,
+                        count_public
+                    ]
 
         # Cleanup: Some breaches where added before it was known
         # that their source will be deleted too.
@@ -97,7 +111,6 @@ def get_breaches(self, items=None):
                         results.remove(result)
         return results
 
-
     def get_breaches_for_item(self, obj=None):
         """Get breaches for one object and its children.
 
@@ -130,7 +143,6 @@ def get_breaches_for_item(self, obj=None):
 
     def check_object(self, obj, excluded_path=None):
         """Check one object for breaches.
-
         Breaches originating from excluded_path are ignored.
         """
         breaches = {}
@@ -165,7 +177,8 @@ def check_object(self, obj, excluded_path=None):
             return breaches
 
     def get_portal_type_title(self, obj):
-        """Get the portal type title of the object."""
+        """Get the portal type title of the object.
+        """
         context = aq_inner(self.context)
         portal_types = getToolByName(context, 'portal_types')
         fti = portal_types.get(obj.portal_type)
@@ -178,4 +191,3 @@ def get_portal_type_title(self, obj):
 
     def is_accessible(self, obj):
         return _checkPermission(AccessContentsInformation, obj)
-
diff --git a/plone/app/linkintegrity/browser/update.pt b/plone/app/linkintegrity/browser/update.pt
index 8a2d48b..483d6a2 100644
--- a/plone/app/linkintegrity/browser/update.pt
+++ b/plone/app/linkintegrity/browser/update.pt
@@ -1,37 +1,39 @@
- <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
-      lang="en"
-      metal:use-macro="here/main_template/macros/master"
-      i18n:domain="plone">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+    xmlns:tal="http://xml.zope.org/namespaces/tal"
+    xmlns:metal="http://xml.zope.org/namespaces/metal"
+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+    lang="en"
+    metal:use-macro="here/main_template/macros/master"
+    i18n:domain="plone"
+    tal:omit-tag="">
 
 <head>
-    <metal:block fill-slot="top_slot"
-                 tal:define="dummy python:request.set('disable_border',1)" />
+  <metal:block
+      fill-slot="top_slot"
+      tal:define="dummy python:request.set('disable_border',1)" />
 </head>
 
 <body>
-
 <metal:main fill-slot="main">
 
-    <h1 class="documentFirstHeading"
-        i18n:translate="linkintegrity_update_title">Update link integrity information</h1>
-
-    <div id="content-core">
-        <p i18n:translate="linkintegrity_update_instructions">
-            Clicking the below button will cause link integrity information to be
-            updated. This might take a while, especially for bigger sites...
-        </p>
+  <h1 class="documentFirstHeading"
+      i18n:translate="linkintegrity_update_title">Update link integrity information</h1>
 
-        <form method="post" action="updateLinkIntegrityInformation"
-              tal:attributes="action request/URL">
+  <div id="content-core">
 
-          <input class="destructive" type="submit" name="update" value="Update" />
+    <p i18n:translate="linkintegrity_update_instructions">
+      Clicking the below button will cause link integrity information to be
+      updated. This might take a while, especially for bigger sites...
+    </p>
 
-          <input class="standalone" type="submit" name="cancel" value="Cancel" />
+    <form method="post" action="updateLinkIntegrityInformation"
+        tal:attributes="action request/URL">
+      <input class="destructive" type="submit" name="update" value="Update" />
+      <input class="standalone" type="submit" name="cancel" value="Cancel" />
+    </form>
 
-        </form>
-    </div>
+  </div>
 
 </metal:main>
-
 </body>
 </html>
diff --git a/plone/app/linkintegrity/browser/update.py b/plone/app/linkintegrity/browser/update.py
index 0cd5323..7c693da 100644
--- a/plone/app/linkintegrity/browser/update.py
+++ b/plone/app/linkintegrity/browser/update.py
@@ -9,9 +9,11 @@
 from Products.statusmessages.interfaces import IStatusMessage
 from transaction import savepoint
 from zExceptions import NotFound
+
 import logging
 import pkg_resources
 
+
 # Is there a multilingual addon?
 try:
     pkg_resources.get_distribution('Products.LinguaPlone')
diff --git a/plone/app/linkintegrity/compat.py b/plone/app/linkintegrity/compat.py
index c19cf2f..1e07b81 100644
--- a/plone/app/linkintegrity/compat.py
+++ b/plone/app/linkintegrity/compat.py
@@ -1,6 +1,5 @@
 # If Archetypes is not installed, define dummy objects
 # to replace Archetypes imports.
-
 try:
     from Products.Archetypes.interfaces import IBaseObject
     from Products.Archetypes.Field import TextField
diff --git a/plone/app/linkintegrity/configure.zcml b/plone/app/linkintegrity/configure.zcml
index 4f3bdf4..cee6697 100644
--- a/plone/app/linkintegrity/configure.zcml
+++ b/plone/app/linkintegrity/configure.zcml
@@ -4,54 +4,54 @@
     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
     xmlns:zcml="http://namespaces.zope.org/zcml">
 
-    <includeDependencies package="." />
-
-    <include package="Products.CMFCore" file="permissions.zcml" />
-
-    <include package=".browser" />
-    <adapter factory=".retriever.ATGeneral" />
-    <adapter factory=".retriever.DXGeneral" />
-
-    <configure zcml:condition="installed Products.Archetypes">
-      <subscriber
-          for="Products.Archetypes.interfaces.IBaseObject
-               OFS.interfaces.IObjectClonedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="Products.Archetypes.interfaces.IBaseObject
-               zope.lifecycleevent.interfaces.IObjectCreatedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="Products.Archetypes.interfaces.IBaseObject
-               zope.lifecycleevent.interfaces.IObjectModifiedEvent"
-          handler=".handlers.modifiedContent" />
-    </configure>
-
-    <configure zcml:condition="installed plone.dexterity">
-      <subscriber
-          for="plone.app.relationfield.interfaces.IDexterityHasRelations
-               zope.lifecycleevent.interfaces.IObjectCopiedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="plone.app.relationfield.interfaces.IDexterityHasRelations
-               zope.lifecycleevent.interfaces.IObjectAddedEvent"
-          handler=".handlers.modifiedContent" />
-
-      <subscriber
-          for="plone.app.relationfield.interfaces.IDexterityHasRelations
-               zope.lifecycleevent.interfaces.IObjectModifiedEvent"
-          handler=".handlers.modifiedContent" />
-    </configure>
-
-    <genericsetup:registerProfile
-        name="default"
-        title="plone.app.linkintegrity"
-        directory="profiles/default"
-        description="Installs the plone.app.linkintegrity add-on."
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
+  <includeDependencies package="." />
+  <include package="Products.CMFCore" file="permissions.zcml" />
+
+  <include package=".browser" />
+
+  <adapter factory=".retriever.ATGeneral" />
+  <adapter factory=".retriever.DXGeneral" />
+
+  <configure zcml:condition="installed Products.Archetypes">
+    <subscriber
+        for="Products.Archetypes.interfaces.IBaseObject
+             OFS.interfaces.IObjectClonedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="Products.Archetypes.interfaces.IBaseObject
+             zope.lifecycleevent.interfaces.IObjectCreatedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="Products.Archetypes.interfaces.IBaseObject
+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"
+        handler=".handlers.modifiedContent" />
+  </configure>
+
+  <configure zcml:condition="installed plone.dexterity">
+    <subscriber
+        for="plone.app.relationfield.interfaces.IDexterityHasRelations
+             zope.lifecycleevent.interfaces.IObjectCopiedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="plone.app.relationfield.interfaces.IDexterityHasRelations
+             zope.lifecycleevent.interfaces.IObjectAddedEvent"
+        handler=".handlers.modifiedContent" />
+
+    <subscriber
+        for="plone.app.relationfield.interfaces.IDexterityHasRelations
+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"
+        handler=".handlers.modifiedContent" />
+  </configure>
+
+  <genericsetup:registerProfile
+      name="default"
+      title="plone.app.linkintegrity"
+      directory="profiles/default"
+      description="Installs the plone.app.linkintegrity add-on."
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      />
 
 </configure>
diff --git a/plone/app/linkintegrity/exceptions.py b/plone/app/linkintegrity/exceptions.py
index e9247a6..a0cf407 100644
--- a/plone/app/linkintegrity/exceptions.py
+++ b/plone/app/linkintegrity/exceptions.py
@@ -1,16 +1,18 @@
 # -*- coding: utf-8 -*-
 from OFS.ObjectManager import BeforeDeleteException
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 
 
 class ILinkIntegrityNotificationException(Interface):
-    """ an exception indicating a prevented link integrity breach """
+    """An exception indicating a prevented link integrity breach.
+    """
 
 
 @implementer(ILinkIntegrityNotificationException)
 class LinkIntegrityNotificationException(BeforeDeleteException):
-    """ an exception indicating a prevented link integrity breach """
+    """An exception indicating a prevented link integrity breach.
+    """
 
     def __str__(self):
         args = self.args
diff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py
index 4c9845f..3749765 100644
--- a/plone/app/linkintegrity/handlers.py
+++ b/plone/app/linkintegrity/handlers.py
@@ -1,26 +1,28 @@
 # -*- coding: utf-8 -*-
+from .compat import IBaseObject
 from Acquisition import aq_get
 from Acquisition import aq_parent
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from ZODB.POSException import ConflictError
 from plone.app.linkintegrity.interfaces import IRetriever
 from plone.app.uuid.utils import uuidToObject
 from plone.dexterity.interfaces import IDexterityContent
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IPloneSiteRoot
 from urllib import unquote
 from urlparse import urlsplit
 from z3c.relationfield import RelationValue
 from z3c.relationfield.event import _setRelation
-from zExceptions import NotFound
 from zc.relation.interfaces import ICatalog
+from zExceptions import NotFound
+from ZODB.POSException import ConflictError
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
 from zope.intid.interfaces import IIntIds
 from zope.keyreference.interfaces import NotYet
 from zope.publisher.interfaces import NotFound as ztkNotFound
-from .compat import IBaseObject
+
 import logging
 
+
 logger = logging.getLogger(__name__)
 referencedRelationship = 'isReferencing'
 
@@ -110,10 +112,12 @@ def modifiedContent(obj, event):
         refs = getObjectsFromLinks(obj, links)
         updateReferences(obj, refs)
 
+
 # BBB
 modifiedArchetype = modifiedContent
 modifiedDexterity = modifiedContent
 
+
 def updateReferences(obj, refs):
     """Renew all linkintegritry-references.
 
diff --git a/plone/app/linkintegrity/interfaces.py b/plone/app/linkintegrity/interfaces.py
index 6f36052..e7ee638 100644
--- a/plone/app/linkintegrity/interfaces.py
+++ b/plone/app/linkintegrity/interfaces.py
@@ -1,8 +1,10 @@
 # -*- coding: utf-8 -*-
 from zope.interface import Interface
 
+
 class IRetriever(Interface):
-    """ A retriever for links in a content type """
+    """A retriever for links in a content type.
+    """
 
     def retrieveLinks():
         """ retrieve links """
diff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py
index ebfcf14..5644cde 100644
--- a/plone/app/linkintegrity/parser.py
+++ b/plone/app/linkintegrity/parser.py
@@ -1,20 +1,24 @@
 # -*- coding: utf-8 -*-
-from HTMLParser import HTMLParser, HTMLParseError
+from HTMLParser import HTMLParseError
+from HTMLParser import HTMLParser
 
 
 class LinkParser(HTMLParser):
-    """ a simple html parser for link and image urls """
+    """A simple html parser for link and image urls.
+    """
 
     def __init__(self):
         HTMLParser.__init__(self)
         self.links = []
 
     def getLinks(self):
-        """ return all links found during parsing """
+        """Return all links found during parsing.
+        """
         return tuple(self.links)
 
     def handle_starttag(self, tag, attrs):
-        """ override the method to remember all links """
+        """Override the method to remember all links.
+        """
         if tag == 'a':
             self.links.extend(search_attr('href', attrs))
         if tag == 'img':
@@ -22,7 +26,8 @@ def handle_starttag(self, tag, attrs):
 
 
 def search_attr(name, attrs):
-    """ search named attribute in a list of attributes """
+    """Search named attribute in a list of attributes.
+    """
     for attr, value in attrs:
         if attr == name:
             return [value]
@@ -30,7 +35,8 @@ def search_attr(name, attrs):
 
 
 def extractLinks(data, encoding='utf-8'):
-    """ parse the given html and return all links """
+    """Parse the given html and return all links.
+    """
     if not data:
         return []
     parser = LinkParser()
diff --git a/plone/app/linkintegrity/retriever.py b/plone/app/linkintegrity/retriever.py
index afd6307..7768e11 100644
--- a/plone/app/linkintegrity/retriever.py
+++ b/plone/app/linkintegrity/retriever.py
@@ -1,18 +1,18 @@
 # -*- coding: utf-8 -*-
-""" Link Integrity - link retriever methods """
-
+"""Link Integrity - link retriever methods.
+"""
+from .compat import IBaseObject
+from .compat import TextField
 from plone.app.linkintegrity.interfaces import IRetriever
 from plone.app.linkintegrity.parser import extractLinks
-from zope.component import adapter
-from zope.interface import implementer
+from plone.app.textfield import RichText
 from plone.dexterity.interfaces import IDexterityContent
-from zope.component import getUtility
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import getAdditionalSchemata
+from zope.component import adapter
+from zope.component import getUtility
+from zope.interface import implementer
 from zope.schema import getFieldsInOrder
-from plone.app.textfield import RichText
-from .compat import IBaseObject
-from .compat import TextField
 
 
 @implementer(IRetriever)
@@ -25,7 +25,8 @@ def __init__(self, context):
         self.context = context
 
     def retrieveLinks(self):
-        """Finds all links from the object and return them."""
+        """Finds all links from the object and return them.
+        """
         links = set()
         for field in self.context.Schema().fields():
             if isinstance(field, TextField):
@@ -51,7 +52,8 @@ def __init__(self, context):
         self.context = context
 
     def retrieveLinks(self):
-        """Finds all links from the object and return them."""
+        """Finds all links from the object and return them.
+        """
         fti = getUtility(IDexterityFTI, name=self.context.portal_type)
         schema = fti.lookupSchema()
         additional_schema = getAdditionalSchemata(
diff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py
index c49540a..f037862 100644
--- a/plone/app/linkintegrity/testing.py
+++ b/plone/app/linkintegrity/testing.py
@@ -1,24 +1,23 @@
 # -*- coding: utf-8 -*-
-from Products.Archetypes.interfaces import IBaseObject
-from Products.CMFCore.utils import getToolByName
-from StringIO import StringIO
 from base64 import decodestring
-from plone.app.contenttypes.testing import (
-    PLONE_APP_CONTENTTYPES_FIXTURE,
-    PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE
-)
-from plone.app.testing import PLONE_FIXTURE
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_MIGRATION_FIXTURE  # noqa
 from plone.app.testing import layers
 from plone.app.testing import login
+from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import ploneSite
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.namedfile.file import NamedImage
 from plone.testing import z2
+from Products.Archetypes.interfaces import IBaseObject
+from Products.CMFCore.utils import getToolByName
+from StringIO import StringIO
 from zope.configuration import xmlconfig
 
+
 B64_DATA = 'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs='
 GIF = StringIO(decodestring(B64_DATA))
 GIF.filename = 'sample.gif'
@@ -29,7 +28,7 @@
 
 def create(container, type_name, **kwargs):
     """A easy helper method to create some content since we do not have
-       plone.api in core.
+    plone.api in core.
     """
 
     new_id = container.invokeFactory(type_name, **kwargs)
@@ -44,7 +43,8 @@ def create(container, type_name, **kwargs):
 
 
 class LinkIntegrityLayer(z2.Layer):
-    """Base Layer for AT and Dexterity testing"""
+    """Base Layer for AT and Dexterity testing.
+    """
 
     defaultBases = (PLONE_FIXTURE, )
 
@@ -84,11 +84,13 @@ def tearDown(self):
         with z2.zopeApp() as app:
             z2.uninstallProduct(app, 'plone.app.linkintegrity')
 
+
 PLONE_APP_LINKINTEGRITY_FIXTURE = LinkIntegrityLayer()
 
 
 class LinkIntegrityATLayer(LinkIntegrityLayer):
-    """Layer which targets testing with Archetypes and ATContentTypes"""
+    """Layer which targets testing with Archetypes and ATContentTypes.
+    """
 
     directory = 'at'
     defaultBases = (
@@ -105,11 +107,13 @@ def setUpContent(self):
         with ploneSite() as portal:
             create(portal, 'Image', id='image1', title='Image 1', image=GIF)
 
+
 PLONE_APP_LINKINTEGRITY_AT_FIXTURE = LinkIntegrityATLayer()
 
 
 class LinkIntegrityDXLayer(LinkIntegrityLayer):
-    """Layer which targets testing with Dexterity"""
+    """Layer which targets testing with Dexterity.
+    """
 
     directory = 'dx'
     defaultBases = (
diff --git a/plone/app/linkintegrity/upgrades.py b/plone/app/linkintegrity/upgrades.py
index f3ca67e..56d47bf 100644
--- a/plone/app/linkintegrity/upgrades.py
+++ b/plone/app/linkintegrity/upgrades.py
@@ -1,13 +1,14 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from Products.Archetypes.config import REFERENCE_CATALOG
 from plone.app.linkintegrity.handlers import referencedRelationship
 from plone.app.uuid.utils import uuidToObject
+from Products.Archetypes.config import REFERENCE_CATALOG
+from Products.CMFCore.utils import getToolByName
 from zope.lifecycleevent import modified
 
 
 def migrate_linkintegrity_relations(context):
-    """Migrate linkintegrity-relation from reference_catalog to zc.relation"""
+    """Migrate linkintegrity-relation from reference_catalog to zc.relation.
+    """
     reference_catalog = getToolByName(context, REFERENCE_CATALOG, None)
     if reference_catalog is not None:
         for brain in catalog_get_all(reference_catalog):
diff --git a/plone/app/linkintegrity/utils.py b/plone/app/linkintegrity/utils.py
index 789d9c0..3456918 100644
--- a/plone/app/linkintegrity/utils.py
+++ b/plone/app/linkintegrity/utils.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.interfaces import IEditingSchema
 from plone.app.linkintegrity.handlers import referencedRelationship
 from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import IEditingSchema
 from zc.relation.interfaces import ICatalog
 from zope.component import getUtility
 from zope.intid.interfaces import IIntIds
@@ -12,24 +12,19 @@ def getIncomingLinks(obj=None, intid=None):
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
-    if intid is not None:
-        return catalog.findRelations({
-            'to_id': intid,
-            'from_attribute': referencedRelationship})
-    else:
-        intids = getUtility(IIntIds)
-        return catalog.findRelations({
-            'to_id': intids.getId(obj),
-            'from_attribute': referencedRelationship})
+    intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
+    return catalog.findRelations({
+        'to_id': intid,
+        'from_attribute': referencedRelationship})
 
 
 def hasIncomingLinks(obj=None, intid=None):
     """Test if an object is linked to by other objects using
     plone.app.linkintegrity (Links in Richtext-Fields).
 
-    Way to give bool without loading generator into list
+    Way to give bool without loading generator into list.
     """
-    for i in getIncomingLinks(obj=obj, intid=intid):
+    for it in getIncomingLinks(obj=obj, intid=intid):
         return True
     return False
 
@@ -39,22 +34,17 @@ def getOutgoingLinks(obj=None, intid=None):
     plone.app.linkintegrity (Links in Richtext-Fields).
     """
     catalog = getUtility(ICatalog)
-    if intid is not None:
-        return catalog.findRelations({
-            'from_id': intid,
-            'from_attribute': referencedRelationship})
-    else:
-        intids = getUtility(IIntIds)
-        return catalog.findRelations({
-            'from_id': intids.getId(obj),
-            'from_attribute': referencedRelationship})
+    intid = intid if intid is not None else getUtility(IIntIds).getId(obj)
+    return catalog.findRelations({
+        'from_id': intid,
+        'from_attribute': referencedRelationship})
 
 
 def hasOutgoingLinks(obj=None, intid=None):
     """Test if an object links to other objects using plone.app.linkintegrity
     (Links in Richtext-Fields).
     """
-    for i in getOutgoingLinks(obj=obj, intid=intid):
+    for it in getOutgoingLinks(obj=obj, intid=intid):
         return True
     return False
 
diff --git a/setup.py b/setup.py
index c20b246..1b03759 100644
--- a/setup.py
+++ b/setup.py
@@ -1,54 +1,57 @@
 # -*- coding: utf-8 -*-
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '3.2.3.dev0'
 
-setup(name='plone.app.linkintegrity',
-      version=version,
-      description='Manage link integrity in Plone.',
-      long_description='\n\n'.join([
-          open("README.rst").read(),
-          open('CHANGES.rst').read(),
-      ]),
-      classifiers=[
-          "Development Status :: 5 - Production/Stable",
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Framework :: Plone :: 5.1",
-          "Framework :: Zope2",
-          "Intended Audience :: Other Audience",
-          "Intended Audience :: System Administrators",
-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",
-      ],
-      keywords='link integrity plone',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.app.linkintegrity',
-      license='GPL version 2',
-      packages=find_packages(),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      install_requires=[
-          'setuptools',
-          'plone.app.intid',
-          'plone.app.relationfield',
-      ],
-      extras_require={
-          'test': [
-              'plone.app.testing',
-              'plone.app.contenttypes',
-              'plone.app.dexterity [relations]',  # related items in dx 2.0
-          ],
-      },
-      platforms='Any',
-      zip_safe=False,
-      entry_points='''
-        [z3c.autoinclude.plugin]
-        target = plone
-      ''',
-      )
+setup(
+    name='plone.app.linkintegrity',
+    version=version,
+    description='Manage link integrity in Plone.',
+    long_description='\n\n'.join([
+        open("README.rst").read(),
+        open('CHANGES.rst').read(),
+    ]),
+    classifiers=[
+        "Development Status :: 5 - Production/Stable",
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "Framework :: Plone :: 5.1",
+        "Framework :: Zope2",
+        "Intended Audience :: Other Audience",
+        "Intended Audience :: System Administrators",
+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+        "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",
+    ],
+    keywords='link integrity plone',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.app.linkintegrity',
+    license='GPL version 2',
+    packages=find_packages(),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    install_requires=[
+        'setuptools',
+        'plone.app.intid',
+        'plone.app.relationfield',
+    ],
+    extras_require={
+        'test': [
+            'plone.app.testing',
+            'plone.app.contenttypes',
+            'plone.app.dexterity [relations]',  # related items in dx 2.0
+        ],
+    },
+    platforms='Any',
+    zip_safe=False,
+    entry_points='''
+    [z3c.autoinclude.plugin]
+    target = plone
+    ''',
+)


