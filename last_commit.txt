Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-08-13T09:02:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/67c3e6787e13e2da45f1590508f93b5c25053d0d

fix #1811: Remove last legacy Javascript highlight-searchterms.js and its skins folder.

ref #1801

Files changed:
M CHANGES.rst
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/tests/testCSSandJSRegistry.py
D Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 18c9158e8..5850cbbd7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,6 +13,184 @@ Breaking changes:\n - Remove all dependencies on plone.app.controlpanel. \n   Third party code need either to depend on plone.app.controlpanel 4.0,\n   which is a backward compatibilit package only, or also update to not depend on it anymore.\n+- *add item here*\n+\n+New features:\n+\n+- Adapt code and tests to the new indexing operations queueing.\n+  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343\n+  [gforcada]\n+\n+Bug fixes:\n+\n+- Show version of products in Add-ons control panel configlet.\n+  This fixes https://github.com/plone/Products.CMFPlone/issues/1472.\n+  [hvelarde]\n+\n+- Resource registry legacy bundle cooking: Exit early with a warning, if preconditions to build are not given (no compilation paths).\n+  Allow cooking CSS, even if no JS is defined.\n+  Log all important steps of the cooking process.\n+  [thet]\n+\n+- Remove unused ``plone.css`` from static repository.\n+  [thet]\n+\n+- Check for ``AccessInactivePortalContent`` for each path in a catalog query.\n+  This solves a problem, where Editors couldn\'t see inactive content, even though they had the required permission on a subpath of the portal (e.g. a subsite).\n+  [thet]\n+\n+- Remove last legacy Javascript ``highlight-searchterms.js``. \n+  Removes also the skins folder ``plone_ecmascript``. \n+  It was broken for all (Google, other search engines, own live search);\n+  JS worked only when coming from Plone detailed search.\n+  [jensens]\n+\n+\n+5.1b2 (2017-02-20)\n+------------------\n+\n+Bug fixes:\n+\n+- Fix packaging error.\n+  [esteele]\n+\n+5.1b1 (2017-02-20)\n+------------------\n+\n+Breaking changes:\n+\n+- Add helper method to get all catalog entries from a given catalog: ``Products.CMFPlone.CatalogTool.catalog_get_all``.\n+  In Products.ZCatalog before 4.0 a catalog call without a query returned all catalog brains.\n+  This can be used as a replacement where it is needed, for exampe in tests.\n+  [thet, gogobd]\n+\n+- Remove ``query_request`` from CatalogTool\'s search method, as it isn\'t supported in Products.ZCatalog 4 anymore.\n+  [thet]\n+\n+- Removed our patch that added ``secureSend`` to the ``MailHost``.\n+  This was originally scheduled for removal in Plone 5.0.  See `issue\n+  965 <https://github.com/plone/Products.CMFPlone/issues/965>`_.\n+  [maurits]\n+\n+- The related items widget has changed a lot.\n+  See the Mockup changelog for 2.4.0 here: https://github.com/plone/mockup/blob/master/CHANGES.rst\n+\n+- All css classes named ``enableUnloadProtection`` were changed to ``pat-formunloadalert`` to trigger that pattern.\n+  Templates using ``enableUnloadProtection`` should change to ``pat-formunloadalert`` too.\n+  This change shouldn\'t impact too much, because the form unload protection didn\'t work at all in Plone 5 until now.\n+  [thet]\n+\n+- MimetypesRegistry icons are now a browser resource directory instead of skins folder.\n+  [jensens]\n+\n+- Remove unused ``plone_scripts`` (not used nor tested anywhere in coredev) [jensens, davisagli]\n+\n+    - ``add_ext_editor.py``\n+    - ``author_find_content.py``\n+    - ``canSelectDefaultPage.py`` with tests\n+    - ``create_query_string.py``\n+    - ``createMultiColumnList.py``\n+    - ``displayContentsTab.py``\n+    - ``formatColumns.py`` with tests\n+    - ``getAllowedTypes.py``\n+    - ``getGlobalPortalRoles.py``\n+    - ``getNotAddableTypes.py``\n+    - ``getPopupScript.py``\n+    - ``getPortalTypeList.py`` and metadata\n+    - ``getPortalTypes.py``\n+    - ``getSelectableViews.py`` with tests\n+    - ``hasIndexHtml.py`` with tests\n+    - ``navigationParent.py`` with test\n+    - ``plone_log.py``\n+    - ``plone.css.py``\n+    - ``returnNone.py`` with occurence refactored\n+    - ``reverseList.py`` with test\n+    - ``sort_modified_ascending.py``\n+\n+- Move scripts ``datecomponents.py`` and ``show_id.py`` to Archetypes\n+  [jensens, davisagli]\n+\n+- Remove methods of the ``@@plone`` view that were marked for deprecation:\n+  - ``showEditableBorder`` (use ``@@plone/showToolbar``)\n+  - ``mark_view`` (use ``@@plone_layout/mark_view``)\n+  - ``hide_columns`` (use ``@@plone_layout/hide_columns``)\n+  - ``icons_visible`` (use ``@@plone_layout/icons_visible``)\n+  - ``getIcon`` (use ``@@plone_layout/getIcon``)\n+  - ``have_portlets`` (use ``@@plone_layout/have_portlets``)\n+  - ``bodyClass`` (use ``@@plone_layout/bodyClass``)\n+  [davisagli]\n+\n+- Move plone_content skin templates into Products.ATContentTypes as browser views.\n+  [gforcada]\n+\n+New features:\n+\n+- Added ``ok`` view.  This is useful for automated checks, for example\n+  httpok, to see if the site is still available.  It returns the text\n+  ``OK`` and sets headers to avoid caching.\n+  [maurits]\n+\n+- Make contact form extensible. This fixes https://github.com/plone/Products.CMFPlone/issues/1879.\n+  [timo]\n+\n+- Don\'t minify CSS or JavaScript resources if they end with ``.min.css`` resp. ``.min.js``.\n+  [thet]\n+\n+- Add ``safe_encode`` utility function to ``utils`` to safely encode unicode to a specified encoding.\n+  The encoding defaults to ``utf-8``.\n+  [thet]\n+\n+- The password reset templates were changed to make use of ``content-core`` macros.\n+  [thet]\n+\n+- Add utility method to retrieve the top most parent request from a sub request.\n+  [thet]\n+\n+- Add ``mockup-patterns-relateditems-upload`` resource, which can be used in custom bundles to add the upload feature in the related items widget.\n+  [thet]\n+\n+- Move ``get_top_site_from_url`` from plone.app.content to ``utils.py`` and make it robust against unicode paths.\n+  This function allows in virtual hosting environments to acquire the top most visible portal object to operate on.\n+  It is used for example to calculate the correct virtual root objects for Mockup\'s related items and structure pattern.\n+  [thet]\n+\n+- Add sort_on field to search controlpanel.\n+  [rodfersou]\n+\n+- PLIP 1340: Deprecate portal_quickinstaller.\n+  You should no longer use CMFQuickInstallerTool methods, but GenericSetup profiles.\n+  See https://github.com/plone/Products.CMFPlone/issues/1340\n+  [maurits]\n+\n+- Include mockup 2.4.0.\n+  [thet]\n+\n+- PasswordResetTool moved from its own package to here (includes cleanup and removal of ``getStats``).\n+  [tomgross]\n+\n+- Prevent workflow menu overflowing in toolbar [MatthewWilkes]\n+\n+- Add default icon for top-level contentview and contentmenu toolbar entries [alecm]\n+\n+- Toolbar: Make menu hover background fit whole menu width. [thet]\n+\n+- Toolbar: Don\'t force scoll buttons to be left, when toolbar is right. [thet]\n+\n+- Toolbar: Make first level list items exand the whole toolbar width - also when scroll buttons are shown. [thet]\n+\n+- Toolbar: Make scroll buttons exand whole toolbar width. [thet]\n+\n+- Toolbar: Let the toolbar submenus be as wide as they need to be and do not break entries into multiple lines. [thet]\n+\n+- Resource Registry:\n+  In ``debug-mode`` (zope.conf, buildout) do not load cache the production bundle.\n+  [jensens]\n+\n+- Resource Registry:\n+  In ``debug-mode`` (zope.conf, buildout) do not ignore development mode for anonymous users.\n+  [jensens]\n+\n+- Resource Registry: If file system version is newer than ``last_compilation`` date of a bundle, use this as ``last_compilation`` date.\n   [jensens]\n \n - New browser view based login code - merged from plone.login (credits to esteele, pbauer, agitator, jensens, et al).\ndiff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml\nindex 5ac4748c4..b8be444ef 100644\n--- a/Products/CMFPlone/profiles/default/skins.xml\n+++ b/Products/CMFPlone/profiles/default/skins.xml\n@@ -3,8 +3,6 @@\n    cookie_persistence="False" default_skin="Plone Default"\n    request_varname="plone_skin">\n  <object name="custom" meta_type="Folder"/>\n- <object name="plone_ecmascript" meta_type="Filesystem Directory View"\n-    directory="Products.CMFPlone:skins/plone_ecmascript"/>\n  <object name="plone_form_scripts" meta_type="Filesystem Directory View"\n     directory="Products.CMFPlone:skins/plone_form_scripts"/>\n  <object name="plone_images" meta_type="Filesystem Directory View"\n@@ -19,7 +17,6 @@\n     directory="Products.CMFPlone:skins/plone_wysiwyg"/>\n  <skin-path name="Plone Default">\n   <layer name="custom"/>\n-  <layer name="plone_ecmascript"/>\n   <layer name="plone_wysiwyg"/>\n   <layer name="plone_prefs"/>\n   <layer name="plone_templates"/>\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 24fe2aa66..92f0f2128 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -1071,14 +1071,8 @@\n       <value key="js">++plone++static/components/jquery.recurrenceinput.js/lib/jquery.tmpl.js</value>\n       <value key="deps">jquery</value>\n   </records>\n-  <!-- legacy js -->\n-\n-\n-  <records prefix="plone.resources/jquery-highlightsearchterms"\n-            interface=\'Products.CMFPlone.interfaces.IResourceRegistry\'>\n-      <value key="js">jquery.highlightsearchterms.js</value>\n-  </records>\n-\n+  \n+<!-- legacy js -->\n   <record name="plone.resources.last_legacy_import">\n     <field type="plone.registry.field.Datetime">\n       <title>Last legacy js/css import date</title>\n@@ -1230,7 +1224,6 @@\n             interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n     <value key="merge_with">default</value>\n     <value key="resources" purge="false">\n-      <element>jquery-highlightsearchterms</element>\n     </value>\n     <value key="depends">plone</value>\n     <value key="jscompilation">++plone++static/plone-legacy-compiled.js</value>\ndiff --git a/Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js b/Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js\ndeleted file mode 100644\nindex e0ba2c36a..000000000\n--- a/Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js\n+++ /dev/null\n@@ -1,218 +0,0 @@\n-/*\n-  Provides $.fn.highlightSearchTerms\n-\n-  applies it to $(\'#region-content,#content\') on page load,\n-  but ignore referrals from our own domain\n-*/\n-\n-/*jslint nomen:false */\n-\n-\n-(function($) {\n-    var Highlighter,\n-        makeSearchKey,\n-        makeAddress,\n-        defaults;\n-\n-    Highlighter = function (options) {\n-        $.extend(this, options);\n-        this.terms = this.cleanTerms(this.terms.length ? this.terms : this.getSearchTerms());\n-    };\n-    Highlighter.prototype = {\n-        highlight: function(startnode) {\n-            // Starting at startnode, highlight the terms in the tree\n-            if (!this.terms.length || !startnode.length) {return;}\n-\n-            var self = this;\n-            $.each(this.terms, function(i, term) {\n-                startnode.find(\'*:not(textarea)\').andSelf().contents().each(function() {\n-                    if (this.nodeType === 3) {\n-                        self.highlightTermInNode(this, term);\n-                    }\n-                });\n-            });\n-        },\n-\n-        highlightTermInNode: function(node, word) {\n-            // wrap every occurance of word within node in a span with\n-            // options className.\n-            // word is a String, node a DOM TextNode\n-            var c = node.nodeValue,\n-                self = this,\n-                highlight,\n-                ci,\n-                index,\n-                next;\n-\n-            if ($(node).parent().hasClass(self.highlightClass)) {return;}\n-\n-            // Internet Explorer cannot create simple <span> tags without content\n-            // otherwise it\'d be $(\'<span>\').addClass(...).text(content)\n-            highlight = function(content) {\n-                return $(\'<span class="\' + self.highlightClass + \'">&nbsp;</span>\').text(content);\n-            };\n-\n-            ci = self.caseInsensitive;\n-            while (c && (index = (ci ? c.toLowerCase() : c).indexOf(word)) > -1) {\n-                // replace the node with [before]<span>word</span>[after]\n-                $(node)\n-                    .before(document.createTextNode(c.substr(0, index)))\n-                    .before(highlight(c.substr(index, word.length)))\n-                    .before(document.createTextNode(c.substr(index+word.length)));\n-                next = node.previousSibling; // text after the span\n-                $(node).remove();\n-                // wash, rinse and repeat\n-                node = next; c = node.nodeValue;\n-            }\n-        },\n-\n-        queryStringValue: function(uri, regexp) {\n-            // Return the decoded value of the key=value pair in the query string\n-            // uri is the full URI including qs, regexp is a /key=(.*)/ pattern\n-            var match, pair;\n-\n-            if (uri.indexOf(\'?\') < 0) {return \'\';}\n-            uri = uri.substr(uri.indexOf(\'?\') + 1);\n-            while (uri.indexOf(\'=\') >= 0) {\n-                uri = uri.replace(/^\\&*/, \'\');\n-                pair = uri.split(\'&\', 1)[0];\n-                uri = uri.substr(pair.length);\n-                match = pair.match(regexp);\n-                if (match) {\n-                    return decodeURIComponent(\n-                        match[match.length-1].replace(/\\+/g, \' \'));\n-                }\n-            }\n-            return \'\';\n-        },\n-\n-        termsFromReferrer: function() {\n-            // Find search terms from the referrer, if a recognized search engine\n-            var ref, i, se;\n-\n-            ref = $.fn.highlightSearchTerms._test_referrer !== null ?\n-                $.fn.highlightSearchTerms._test_referrer :\n-                document.referrer;\n-            if (!ref) {return \'\';}\n-\n-            for (i = 0; i < this.referrers.length; i+=1) {\n-                se = this.referrers[i];\n-                if (ref.match(se.address)) {return this.queryStringValue(ref, se.key);}\n-            }\n-            return \'\';\n-        },\n-\n-        cleanTerms: function(terms) {\n-            var self = this;\n-            return $.unique($.map(terms, function(term) {\n-                term = $.trim(self.caseInsensitive ? term.toLowerCase() : term);\n-                return (!term || self.filterTerms.test(term)) ? null : term;\n-            }));\n-        },\n-\n-        getSearchTerms: function() {\n-            var terms = [],\n-                uri = $.fn.highlightSearchTerms._test_location !== null ?\n-                $.fn.highlightSearchTerms._test_location :\n-                location.href;\n-            if (this.useReferrer) {\n-                $.merge(terms, this.termsFromReferrer().split(/\\s+/));\n-            }\n-            if (this.useLocation) {\n-                $.merge(terms, this.queryStringValue(uri, this.searchKey).split(/\\s+/));\n-            }\n-            return terms;\n-        }\n-    };\n-\n-    makeSearchKey = function(key) {\n-        return (typeof key === \'string\') ? new RegExp(\'^\' + key + \'=(.*)$\', \'i\') : key;\n-    };\n-    makeAddress = function(addr) {\n-        return (typeof addr === \'string\') ? new RegExp(\'^https?://(www\\\\.)?\' + addr, \'i\') : addr;\n-    };\n-\n-    $.fn.highlightSearchTerms = function(options) {\n-        // Wrap terms in a span with class highlightedSearchTerm.\n-        // See defaults for options\n-        options = $.extend({}, defaults, options);\n-        options = $.extend(options, {\n-            searchKey: makeSearchKey(options.searchKey),\n-            referrers: $.map(options.referrers, function(se) {\n-                return {\n-                    address: makeAddress(se.address),\n-                    key: makeSearchKey(se.key)\n-                };\n-            })\n-        });\n-        if (options.includeOwnDomain) {\n-            var hostname = $.fn.highlightSearchTerms._test_location !== null ?\n-                $.fn.highlightSearchTerms._test_location : location.hostname;\n-            options.referrers.push({\n-                address: makeAddress(hostname.replace(/\\./g, \'\\\\.\')),\n-                key: options.searchKey\n-            });\n-        }\n-        new Highlighter(options).highlight(this);\n-\n-        return this;\n-    };\n-\n-    // defaults referrers is public for easy copying (for extending the\n-    // list) or even inplace alteration if you are so inclined.\n-    $.fn.highlightSearchTerms.referrers = [ // List based on http://fucoder.com/code/se-hilite/\n-        { address: \'google\\\\.\',         key: \'q\' },         // Google\n-        { address: \'search\\\\.yahoo\\\\.\', key: \'p\' },         // Yahoo\n-        { address: \'search\\\\.msn\\\\.\',   key: \'q\' },         // MSN\n-        { address: \'search\\\\.live\\\\.\',  key: \'query\' },     // MSN\n-        { address: \'search\\\\.aol\\\\.\',   key: \'userQuery\' }, // AOL\n-        { address: \'ask\\\\.com\',         key: \'q\' },         // AOL\n-        { address: \'altavista\\\\.\',      key: \'q\' },         // AltaVista\n-        { address: \'feedster\\\\.\',       key: \'q\' }          // Feedster\n-    ];\n-\n-    defaults = {\n-        // array of terms to highlight; if empty we\'ll look up terms from the\n-        // location and referrer\n-        terms: [],\n-\n-        // Use the current location query string? If so, use searchKey to find\n-        // what query parameter to use; it\'s either a string or a regexp, the\n-        // former will be turned into a regexp matching /^[searchKey]=(.*)$/i.\n-        // Note that the last group in a match *must* contain the terms.\n-        useLocation: true,\n-        searchKey: \'(searchterm|SearchableText)\',\n-\n-        // Use the referrer to detect search engine queries? If so, use\n-        // referrers to detect these and their search keys. Is an\n-        // array of {address, key} entries; key is treated as searchKey\n-        // above, with address turned into \'^https?://(www\\.)?[address]\'\n-        // regular expressions, if not already a regexp.\n-        useReferrer: true,\n-        referrers: $.fn.highlightSearchTerms.referrers,\n-\n-        // Should the current domain name and searchKey be included in\n-        // the referrers?\n-        includeOwnDomain: true,\n-\n-        // Are terms matched case insensitive?\n-        caseInsensitive: true,\n-        // what terms are never to be highlighted (regexp)?\n-        filterTerms: /(not|and|or)/i,\n-        // What class is used to mark highlighted search terms?\n-        highlightClass: \'highlightedSearchTerm\'\n-    };\n-\n-    // Internal use only, test framework hooks.\n-    $.fn.highlightSearchTerms._test_location = null;\n-    $.fn.highlightSearchTerms._test_referrer = null;\n-    $.fn.highlightSearchTerms._highlighter = Highlighter;\n-}(jQuery));\n-\n-jQuery(function($) {\n-    // Highlight search results, but ignore referrals from our own domain\n-    // when displaying search results.\n-    $(\'#region-content,#content\').highlightSearchTerms({\n-        includeOwnDomain: $(\'dl.searchResults\').length === 0\n-    });\n-});\ndiff --git a/Products/CMFPlone/tests/testCSSandJSRegistry.py b/Products/CMFPlone/tests/testCSSandJSRegistry.py\nindex 11843cc8f..cfb8d4c55 100644\n--- a/Products/CMFPlone/tests/testCSSandJSRegistry.py\n+++ b/Products/CMFPlone/tests/testCSSandJSRegistry.py\n@@ -62,7 +62,6 @@ def testDefaultJSIsInstalled(self):\n         )\n         expected = [\n             \'++resource++plone.js\',\n-            \'jquery.highlightsearchterms.js\'\n         ]\n         js_files = {x.js for x in installedResources.values()}\n         for e in expected:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-08-13T09:02:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/e261d98f5f95c46c30ed6e296d8f5694dbaedf7c

fix merge mistake

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5850cbbd7..f6f162c0a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -25,6 +25,13 @@ Bug fixes:\n \n - Show version of products in Add-ons control panel configlet.\n   This fixes https://github.com/plone/Products.CMFPlone/issues/1472.\n+- Remove last legacy Javascript ``highlight-searchterms.js``. \n+  Removes also the skins folder ``plone_ecmascript``. \n+  It was broken for almost all use cases (Google, other search engines, own live search);\n+  JS worked only when coming from Plone detailed search page.\n+  [jensens]\n+\n+- Get rid of obsolete ``X-UA-Compatible`` header.\n   [hvelarde]\n \n - Resource registry legacy bundle cooking: Exit early with a warning, if preconditions to build are not given (no compilation paths).\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-09-06T14:36:28+02:00
Author: Sune Broendum Woeller (sunew) <sune@woeller.dk>
Commit: https://github.com/plone/Products.CMFPlone/commit/04d0862fa56ba01aa758e626c07ce5654d4ded92

Merge branch 'master' into remove-highlightsearchterms

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/exportimport/bundles.py
M Products/CMFPlone/tests/testUnicodeSplitter.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex f6f162c0a..eb506dc4a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -218,6 +218,16 @@ New features:\n \n Bug fixes:\n \n+- Fix an undefined variable in a test helper function\n+  [ale-rt]\n+\n+- Let the ``combine-bundles`` import step also work when the ``IBundleRegistry`` keyword is not in ``registry.xml``, but in a ``registry`` directory.\n+  `Issue 2520 <https://github.com/plone/Products.CMFPlone/issues/2502>`_.\n+  [maurits]\n+\n+- Get rid of obsolete ``X-UA-Compatible`` header.\n+  [hvelarde]\n+\n - Fix registration of ``robots.txt`` browser view to avoid ``AttributeError`` on Zope\'s root (fixes `#2052 <https://github.com/plone/Products.CMFPlone/issues/2052>`_).\n   [hvelarde]\n \ndiff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py\nindex 54e50f79f..c5c78cd33 100644\n--- a/Products/CMFPlone/resources/exportimport/bundles.py\n+++ b/Products/CMFPlone/resources/exportimport/bundles.py\n@@ -14,22 +14,37 @@ def combine(context):\n         logger.info("Cannot find registry")\n         return\n \n-    body = context.readDataFile(\'registry.xml\')\n-    if body and "IBundleRegistry" in body:\n-        # Calling combine_bundles will have as side effect that the\n-        # Content-Type header of the response is set to application/javascript,\n-        # which we do not want.  So we reset it to the original at the end.\n-        site = context.getSite()\n-        request = getattr(site, \'REQUEST\', getRequest())\n-        if request is not None:\n-            # Easily happens in tests.\n-            orig_header = request.response.getHeader(\'Content-Type\')\n-        combine_bundles(site)\n-        if request is not None:\n-            new_header = request.response.getHeader(\'Content-Type\')\n-            if new_header != orig_header:\n-                if orig_header is None:\n-                    # Setting it to None would result in the string \'None\'.\n-                    # So pick a saner one.\n-                    orig_header = \'text/html\'\n-                request.response.setHeader(\'Content-Type\', orig_header)\n+    # Look for a keyword in registry.xml or the registry directory.\n+    filepaths = [\'registry.xml\']\n+    if context.isDirectory(\'registry\'):\n+        for filename in context.listDirectory(\'registry\'):\n+            filepaths.append(\'registry/\' + filename)\n+    found = False\n+    for filepath in filepaths:\n+        body = context.readDataFile(filepath)\n+        if body is not None and \'IBundleRegistry\' in body:\n+            found = True\n+            break\n+    if not found:\n+        return\n+\n+    # Calling combine_bundles will have as side effect that the\n+    # Content-Type header of the response is set to application/javascript,\n+    # which we do not want.  So we reset it to the original at the end.\n+    site = context.getSite()\n+    request = getattr(site, \'REQUEST\', getRequest())\n+    # In tests the request can easily be None.\n+    if request is not None:\n+        orig_header = request.response.getHeader(\'Content-Type\')\n+    combine_bundles(site)\n+    if request is None:\n+        # we are done\n+        return\n+    new_header = request.response.getHeader(\'Content-Type\')\n+    if new_header == orig_header:\n+        return\n+    if orig_header is None:\n+        # Setting it to None would result in the string \'None\'.\n+        # So pick a saner one.\n+        orig_header = \'text/html\'\n+    request.response.setHeader(\'Content-Type\', orig_header)\ndiff --git a/Products/CMFPlone/tests/testUnicodeSplitter.py b/Products/CMFPlone/tests/testUnicodeSplitter.py\nindex 6fed189c0..804f6abb7 100644\n--- a/Products/CMFPlone/tests/testUnicodeSplitter.py\n+++ b/Products/CMFPlone/tests/testUnicodeSplitter.py\n@@ -3,12 +3,19 @@\n from Products.CMFCore.tests.base.dummy import DummyContent\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.tests import PloneTestCase\n+# adding UnicodeSplitterPatcth\n from Products.CMFPlone.UnicodeSplitter import CaseNormalizer\n+from Products.CMFPlone.UnicodeSplitter import process_str\n+from Products.CMFPlone.UnicodeSplitter import process_str_glob\n+from Products.CMFPlone.UnicodeSplitter import process_str_post\n+from Products.CMFPlone.UnicodeSplitter import process_unicode\n+from Products.CMFPlone.UnicodeSplitter import process_unicode_glob\n from Products.CMFPlone.UnicodeSplitter import Splitter\n \n import locale\n import unittest\n \n+\n LATIN1 = (\'en_US.ISO-8859-1\', \'en_US.ISO8859-15\', \'en_GB.ISO8859-15\',\n           \'de_DE@euro\', \'fr_FR@euro\', \'nl_NL@euro\')\n \n@@ -22,9 +29,11 @@ def _setlocale(*names):\n         except locale.Error as e:\n             pass\n     else:\n-        raise e.__class__("Unsupported locale. These tests need at least one "\n-                          "of the following locales available on your system",\n-                          str(LATIN1))\n+        raise ValueError(\n+            "Unsupported locale. "\n+            "These tests need at least one of the following locales "\n+            "available on your system: %s" % str(LATIN1)\n+        )\n     return saved\n \n \n@@ -76,6 +85,10 @@ def testProcessTurkish(self):\n         self.assertEqual(self.process(input), output)\n         self.assertEqual(self.processGlob(input), output)\n \n+    def testMissingLocaleRaises(self):\n+        with self.assertRaises(ValueError):\n+            _setlocale(\'TLH\')  # klingon locale code\n+\n     def testProcessLatin1(self):\n         #\n         # Test passes because plone_lexicon pipeline elements\n@@ -239,10 +252,6 @@ def testIndexUnicodeLower(self):\n         self.assertEqual(len(brains), 1)\n \n \n-# adding UnicodeSplitterPatcth\n-from Products.CMFPlone.UnicodeSplitter \\\n-    import process_str, process_str_post, process_str_glob,\\\n-    process_unicode, process_unicode_glob\n \n \n class TestBigramFunctions(unittest.TestCase):\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 3b29e6c63..038a4e2b9 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -10,6 +10,20 @@\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n )\n+from Products.GenericSetup.tests import common\n+\n+\n+class DummyImportContext(common.DummyImportContext):\n+    # Copied from plone.app.registry tests.\n+    # This expands the context with directories.\n+\n+    _directories = {}\n+\n+    def listDirectory(self, path):\n+        return self._directories.get(path, [])\n+\n+    def isDirectory(self, path):\n+        return path in self._directories\n \n \n class ProductsCMFPloneSetupTest(PloneTestCase):\n@@ -51,3 +65,76 @@ def test_overrides(self):\n             \'alert("Overrided legacy!");\',\n             self.production_folder.readFile(\'default.js\')\n         )\n+\n+    def test_import(self):\n+        # If IBundleRegistry is in registry.xml, the combine-bundles import step\n+        # will call combine_bundles.\n+        from Products.CMFPlone.resources.exportimport.bundles import combine\n+        # from Products.CMFPlone.resources.browser.combine import get_override_directory\n+        # from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+\n+        # Prepare some registry xml files with or without the key IBundleRegistry.\n+        xml_with = \'<registry>with IBundleRegistry</registry>\'\n+        xml_without = \'<registry>without bundle registry</registry>\'\n+        xml_without2 = \'<registry>without bundle registry</registry>\'\n+        context = DummyImportContext(self.portal, purge=False)\n+\n+        def get_timestamp():\n+            # If combine_bundles is run, a timestamp is updated.\n+            return self.production_folder.readFile(\'timestamp.txt\')\n+\n+        ts1 = get_timestamp()\n+        self.assertTrue(ts1)\n+\n+        # call the import step on a file without bundles\n+        context._files = {\'registry.xml\': xml_without}\n+        combine(context)\n+        ts2 = get_timestamp()\n+        self.assertEqual(ts1, ts2)\n+\n+        # call the import step on a file with bundles\n+        context._files = {\'registry.xml\': xml_with}\n+        combine(context)\n+        ts3 = get_timestamp()\n+        self.assertLess(ts2, ts3)\n+\n+        # call the import step on a file without bundles\n+        context._files = {\'registry.xml\': xml_without2}\n+        combine(context)\n+        ts4 = get_timestamp()\n+        self.assertEqual(ts3, ts4)\n+\n+        # Since Plone 5.1 the registry xml can also be a directory.\n+        # Set one file with bundles.\n+        context._files = {\n+            \'registry.xml\': xml_without,\n+            \'registry/foo2.xml\': xml_with,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        context._directories = {\n+            \'registry\': [\n+                \'foo2.xml\',\n+                \'foo3.xml\',\n+            ]\n+        }\n+        combine(context)\n+        ts10 = get_timestamp()\n+        self.assertLess(ts4, ts10)\n+\n+        # The registry.xml file itself may be missing.\n+        context._files = {\n+            \'registry/foo2.xml\': xml_with,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        combine(context)\n+        ts11 = get_timestamp()\n+        self.assertLess(ts10, ts11)\n+\n+        # Now without any bundle info.\n+        context._files = {\n+            \'registry/foo2.xml\': xml_without,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        combine(context)\n+        ts12 = get_timestamp()\n+        self.assertEqual(ts11, ts12)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-09-09T08:41:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/7cefb8f47585422c182e04ae15b08dd2ea456616

Merge pull request #1963 from plone/remove-highlightsearchterms

fix #1811: Remove last legacy Javascript highlight-searchterms.js

Files changed:
M CHANGES.rst
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/tests/testCSSandJSRegistry.py
D Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 7e698cfc2..eb506dc4a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,6 +13,191 @@ Breaking changes:\n - Remove all dependencies on plone.app.controlpanel. \n   Third party code need either to depend on plone.app.controlpanel 4.0,\n   which is a backward compatibilit package only, or also update to not depend on it anymore.\n+- *add item here*\n+\n+New features:\n+\n+- Adapt code and tests to the new indexing operations queueing.\n+  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343\n+  [gforcada]\n+\n+Bug fixes:\n+\n+- Show version of products in Add-ons control panel configlet.\n+  This fixes https://github.com/plone/Products.CMFPlone/issues/1472.\n+- Remove last legacy Javascript ``highlight-searchterms.js``. \n+  Removes also the skins folder ``plone_ecmascript``. \n+  It was broken for almost all use cases (Google, other search engines, own live search);\n+  JS worked only when coming from Plone detailed search page.\n+  [jensens]\n+\n+- Get rid of obsolete ``X-UA-Compatible`` header.\n+  [hvelarde]\n+\n+- Resource registry legacy bundle cooking: Exit early with a warning, if preconditions to build are not given (no compilation paths).\n+  Allow cooking CSS, even if no JS is defined.\n+  Log all important steps of the cooking process.\n+  [thet]\n+\n+- Remove unused ``plone.css`` from static repository.\n+  [thet]\n+\n+- Check for ``AccessInactivePortalContent`` for each path in a catalog query.\n+  This solves a problem, where Editors couldn\'t see inactive content, even though they had the required permission on a subpath of the portal (e.g. a subsite).\n+  [thet]\n+\n+- Remove last legacy Javascript ``highlight-searchterms.js``. \n+  Removes also the skins folder ``plone_ecmascript``. \n+  It was broken for all (Google, other search engines, own live search);\n+  JS worked only when coming from Plone detailed search.\n+  [jensens]\n+\n+\n+5.1b2 (2017-02-20)\n+------------------\n+\n+Bug fixes:\n+\n+- Fix packaging error.\n+  [esteele]\n+\n+5.1b1 (2017-02-20)\n+------------------\n+\n+Breaking changes:\n+\n+- Add helper method to get all catalog entries from a given catalog: ``Products.CMFPlone.CatalogTool.catalog_get_all``.\n+  In Products.ZCatalog before 4.0 a catalog call without a query returned all catalog brains.\n+  This can be used as a replacement where it is needed, for exampe in tests.\n+  [thet, gogobd]\n+\n+- Remove ``query_request`` from CatalogTool\'s search method, as it isn\'t supported in Products.ZCatalog 4 anymore.\n+  [thet]\n+\n+- Removed our patch that added ``secureSend`` to the ``MailHost``.\n+  This was originally scheduled for removal in Plone 5.0.  See `issue\n+  965 <https://github.com/plone/Products.CMFPlone/issues/965>`_.\n+  [maurits]\n+\n+- The related items widget has changed a lot.\n+  See the Mockup changelog for 2.4.0 here: https://github.com/plone/mockup/blob/master/CHANGES.rst\n+\n+- All css classes named ``enableUnloadProtection`` were changed to ``pat-formunloadalert`` to trigger that pattern.\n+  Templates using ``enableUnloadProtection`` should change to ``pat-formunloadalert`` too.\n+  This change shouldn\'t impact too much, because the form unload protection didn\'t work at all in Plone 5 until now.\n+  [thet]\n+\n+- MimetypesRegistry icons are now a browser resource directory instead of skins folder.\n+  [jensens]\n+\n+- Remove unused ``plone_scripts`` (not used nor tested anywhere in coredev) [jensens, davisagli]\n+\n+    - ``add_ext_editor.py``\n+    - ``author_find_content.py``\n+    - ``canSelectDefaultPage.py`` with tests\n+    - ``create_query_string.py``\n+    - ``createMultiColumnList.py``\n+    - ``displayContentsTab.py``\n+    - ``formatColumns.py`` with tests\n+    - ``getAllowedTypes.py``\n+    - ``getGlobalPortalRoles.py``\n+    - ``getNotAddableTypes.py``\n+    - ``getPopupScript.py``\n+    - ``getPortalTypeList.py`` and metadata\n+    - ``getPortalTypes.py``\n+    - ``getSelectableViews.py`` with tests\n+    - ``hasIndexHtml.py`` with tests\n+    - ``navigationParent.py`` with test\n+    - ``plone_log.py``\n+    - ``plone.css.py``\n+    - ``returnNone.py`` with occurence refactored\n+    - ``reverseList.py`` with test\n+    - ``sort_modified_ascending.py``\n+\n+- Move scripts ``datecomponents.py`` and ``show_id.py`` to Archetypes\n+  [jensens, davisagli]\n+\n+- Remove methods of the ``@@plone`` view that were marked for deprecation:\n+  - ``showEditableBorder`` (use ``@@plone/showToolbar``)\n+  - ``mark_view`` (use ``@@plone_layout/mark_view``)\n+  - ``hide_columns`` (use ``@@plone_layout/hide_columns``)\n+  - ``icons_visible`` (use ``@@plone_layout/icons_visible``)\n+  - ``getIcon`` (use ``@@plone_layout/getIcon``)\n+  - ``have_portlets`` (use ``@@plone_layout/have_portlets``)\n+  - ``bodyClass`` (use ``@@plone_layout/bodyClass``)\n+  [davisagli]\n+\n+- Move plone_content skin templates into Products.ATContentTypes as browser views.\n+  [gforcada]\n+\n+New features:\n+\n+- Added ``ok`` view.  This is useful for automated checks, for example\n+  httpok, to see if the site is still available.  It returns the text\n+  ``OK`` and sets headers to avoid caching.\n+  [maurits]\n+\n+- Make contact form extensible. This fixes https://github.com/plone/Products.CMFPlone/issues/1879.\n+  [timo]\n+\n+- Don\'t minify CSS or JavaScript resources if they end with ``.min.css`` resp. ``.min.js``.\n+  [thet]\n+\n+- Add ``safe_encode`` utility function to ``utils`` to safely encode unicode to a specified encoding.\n+  The encoding defaults to ``utf-8``.\n+  [thet]\n+\n+- The password reset templates were changed to make use of ``content-core`` macros.\n+  [thet]\n+\n+- Add utility method to retrieve the top most parent request from a sub request.\n+  [thet]\n+\n+- Add ``mockup-patterns-relateditems-upload`` resource, which can be used in custom bundles to add the upload feature in the related items widget.\n+  [thet]\n+\n+- Move ``get_top_site_from_url`` from plone.app.content to ``utils.py`` and make it robust against unicode paths.\n+  This function allows in virtual hosting environments to acquire the top most visible portal object to operate on.\n+  It is used for example to calculate the correct virtual root objects for Mockup\'s related items and structure pattern.\n+  [thet]\n+\n+- Add sort_on field to search controlpanel.\n+  [rodfersou]\n+\n+- PLIP 1340: Deprecate portal_quickinstaller.\n+  You should no longer use CMFQuickInstallerTool methods, but GenericSetup profiles.\n+  See https://github.com/plone/Products.CMFPlone/issues/1340\n+  [maurits]\n+\n+- Include mockup 2.4.0.\n+  [thet]\n+\n+- PasswordResetTool moved from its own package to here (includes cleanup and removal of ``getStats``).\n+  [tomgross]\n+\n+- Prevent workflow menu overflowing in toolbar [MatthewWilkes]\n+\n+- Add default icon for top-level contentview and contentmenu toolbar entries [alecm]\n+\n+- Toolbar: Make menu hover background fit whole menu width. [thet]\n+\n+- Toolbar: Don\'t force scoll buttons to be left, when toolbar is right. [thet]\n+\n+- Toolbar: Make first level list items exand the whole toolbar width - also when scroll buttons are shown. [thet]\n+\n+- Toolbar: Make scroll buttons exand whole toolbar width. [thet]\n+\n+- Toolbar: Let the toolbar submenus be as wide as they need to be and do not break entries into multiple lines. [thet]\n+\n+- Resource Registry:\n+  In ``debug-mode`` (zope.conf, buildout) do not load cache the production bundle.\n+  [jensens]\n+\n+- Resource Registry:\n+  In ``debug-mode`` (zope.conf, buildout) do not ignore development mode for anonymous users.\n+  [jensens]\n+\n+- Resource Registry: If file system version is newer than ``last_compilation`` date of a bundle, use this as ``last_compilation`` date.\n   [jensens]\n \n - New browser view based login code - merged from plone.login (credits to esteele, pbauer, agitator, jensens, et al).\ndiff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml\nindex 5ac4748c4..b8be444ef 100644\n--- a/Products/CMFPlone/profiles/default/skins.xml\n+++ b/Products/CMFPlone/profiles/default/skins.xml\n@@ -3,8 +3,6 @@\n    cookie_persistence="False" default_skin="Plone Default"\n    request_varname="plone_skin">\n  <object name="custom" meta_type="Folder"/>\n- <object name="plone_ecmascript" meta_type="Filesystem Directory View"\n-    directory="Products.CMFPlone:skins/plone_ecmascript"/>\n  <object name="plone_form_scripts" meta_type="Filesystem Directory View"\n     directory="Products.CMFPlone:skins/plone_form_scripts"/>\n  <object name="plone_images" meta_type="Filesystem Directory View"\n@@ -19,7 +17,6 @@\n     directory="Products.CMFPlone:skins/plone_wysiwyg"/>\n  <skin-path name="Plone Default">\n   <layer name="custom"/>\n-  <layer name="plone_ecmascript"/>\n   <layer name="plone_wysiwyg"/>\n   <layer name="plone_prefs"/>\n   <layer name="plone_templates"/>\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 24fe2aa66..92f0f2128 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -1071,14 +1071,8 @@\n       <value key="js">++plone++static/components/jquery.recurrenceinput.js/lib/jquery.tmpl.js</value>\n       <value key="deps">jquery</value>\n   </records>\n-  <!-- legacy js -->\n-\n-\n-  <records prefix="plone.resources/jquery-highlightsearchterms"\n-            interface=\'Products.CMFPlone.interfaces.IResourceRegistry\'>\n-      <value key="js">jquery.highlightsearchterms.js</value>\n-  </records>\n-\n+  \n+<!-- legacy js -->\n   <record name="plone.resources.last_legacy_import">\n     <field type="plone.registry.field.Datetime">\n       <title>Last legacy js/css import date</title>\n@@ -1230,7 +1224,6 @@\n             interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n     <value key="merge_with">default</value>\n     <value key="resources" purge="false">\n-      <element>jquery-highlightsearchterms</element>\n     </value>\n     <value key="depends">plone</value>\n     <value key="jscompilation">++plone++static/plone-legacy-compiled.js</value>\ndiff --git a/Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js b/Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js\ndeleted file mode 100644\nindex e0ba2c36a..000000000\n--- a/Products/CMFPlone/skins/plone_ecmascript/jquery.highlightsearchterms.js\n+++ /dev/null\n@@ -1,218 +0,0 @@\n-/*\n-  Provides $.fn.highlightSearchTerms\n-\n-  applies it to $(\'#region-content,#content\') on page load,\n-  but ignore referrals from our own domain\n-*/\n-\n-/*jslint nomen:false */\n-\n-\n-(function($) {\n-    var Highlighter,\n-        makeSearchKey,\n-        makeAddress,\n-        defaults;\n-\n-    Highlighter = function (options) {\n-        $.extend(this, options);\n-        this.terms = this.cleanTerms(this.terms.length ? this.terms : this.getSearchTerms());\n-    };\n-    Highlighter.prototype = {\n-        highlight: function(startnode) {\n-            // Starting at startnode, highlight the terms in the tree\n-            if (!this.terms.length || !startnode.length) {return;}\n-\n-            var self = this;\n-            $.each(this.terms, function(i, term) {\n-                startnode.find(\'*:not(textarea)\').andSelf().contents().each(function() {\n-                    if (this.nodeType === 3) {\n-                        self.highlightTermInNode(this, term);\n-                    }\n-                });\n-            });\n-        },\n-\n-        highlightTermInNode: function(node, word) {\n-            // wrap every occurance of word within node in a span with\n-            // options className.\n-            // word is a String, node a DOM TextNode\n-            var c = node.nodeValue,\n-                self = this,\n-                highlight,\n-                ci,\n-                index,\n-                next;\n-\n-            if ($(node).parent().hasClass(self.highlightClass)) {return;}\n-\n-            // Internet Explorer cannot create simple <span> tags without content\n-            // otherwise it\'d be $(\'<span>\').addClass(...).text(content)\n-            highlight = function(content) {\n-                return $(\'<span class="\' + self.highlightClass + \'">&nbsp;</span>\').text(content);\n-            };\n-\n-            ci = self.caseInsensitive;\n-            while (c && (index = (ci ? c.toLowerCase() : c).indexOf(word)) > -1) {\n-                // replace the node with [before]<span>word</span>[after]\n-                $(node)\n-                    .before(document.createTextNode(c.substr(0, index)))\n-                    .before(highlight(c.substr(index, word.length)))\n-                    .before(document.createTextNode(c.substr(index+word.length)));\n-                next = node.previousSibling; // text after the span\n-                $(node).remove();\n-                // wash, rinse and repeat\n-                node = next; c = node.nodeValue;\n-            }\n-        },\n-\n-        queryStringValue: function(uri, regexp) {\n-            // Return the decoded value of the key=value pair in the query string\n-            // uri is the full URI including qs, regexp is a /key=(.*)/ pattern\n-            var match, pair;\n-\n-            if (uri.indexOf(\'?\') < 0) {return \'\';}\n-            uri = uri.substr(uri.indexOf(\'?\') + 1);\n-            while (uri.indexOf(\'=\') >= 0) {\n-                uri = uri.replace(/^\\&*/, \'\');\n-                pair = uri.split(\'&\', 1)[0];\n-                uri = uri.substr(pair.length);\n-                match = pair.match(regexp);\n-                if (match) {\n-                    return decodeURIComponent(\n-                        match[match.length-1].replace(/\\+/g, \' \'));\n-                }\n-            }\n-            return \'\';\n-        },\n-\n-        termsFromReferrer: function() {\n-            // Find search terms from the referrer, if a recognized search engine\n-            var ref, i, se;\n-\n-            ref = $.fn.highlightSearchTerms._test_referrer !== null ?\n-                $.fn.highlightSearchTerms._test_referrer :\n-                document.referrer;\n-            if (!ref) {return \'\';}\n-\n-            for (i = 0; i < this.referrers.length; i+=1) {\n-                se = this.referrers[i];\n-                if (ref.match(se.address)) {return this.queryStringValue(ref, se.key);}\n-            }\n-            return \'\';\n-        },\n-\n-        cleanTerms: function(terms) {\n-            var self = this;\n-            return $.unique($.map(terms, function(term) {\n-                term = $.trim(self.caseInsensitive ? term.toLowerCase() : term);\n-                return (!term || self.filterTerms.test(term)) ? null : term;\n-            }));\n-        },\n-\n-        getSearchTerms: function() {\n-            var terms = [],\n-                uri = $.fn.highlightSearchTerms._test_location !== null ?\n-                $.fn.highlightSearchTerms._test_location :\n-                location.href;\n-            if (this.useReferrer) {\n-                $.merge(terms, this.termsFromReferrer().split(/\\s+/));\n-            }\n-            if (this.useLocation) {\n-                $.merge(terms, this.queryStringValue(uri, this.searchKey).split(/\\s+/));\n-            }\n-            return terms;\n-        }\n-    };\n-\n-    makeSearchKey = function(key) {\n-        return (typeof key === \'string\') ? new RegExp(\'^\' + key + \'=(.*)$\', \'i\') : key;\n-    };\n-    makeAddress = function(addr) {\n-        return (typeof addr === \'string\') ? new RegExp(\'^https?://(www\\\\.)?\' + addr, \'i\') : addr;\n-    };\n-\n-    $.fn.highlightSearchTerms = function(options) {\n-        // Wrap terms in a span with class highlightedSearchTerm.\n-        // See defaults for options\n-        options = $.extend({}, defaults, options);\n-        options = $.extend(options, {\n-            searchKey: makeSearchKey(options.searchKey),\n-            referrers: $.map(options.referrers, function(se) {\n-                return {\n-                    address: makeAddress(se.address),\n-                    key: makeSearchKey(se.key)\n-                };\n-            })\n-        });\n-        if (options.includeOwnDomain) {\n-            var hostname = $.fn.highlightSearchTerms._test_location !== null ?\n-                $.fn.highlightSearchTerms._test_location : location.hostname;\n-            options.referrers.push({\n-                address: makeAddress(hostname.replace(/\\./g, \'\\\\.\')),\n-                key: options.searchKey\n-            });\n-        }\n-        new Highlighter(options).highlight(this);\n-\n-        return this;\n-    };\n-\n-    // defaults referrers is public for easy copying (for extending the\n-    // list) or even inplace alteration if you are so inclined.\n-    $.fn.highlightSearchTerms.referrers = [ // List based on http://fucoder.com/code/se-hilite/\n-        { address: \'google\\\\.\',         key: \'q\' },         // Google\n-        { address: \'search\\\\.yahoo\\\\.\', key: \'p\' },         // Yahoo\n-        { address: \'search\\\\.msn\\\\.\',   key: \'q\' },         // MSN\n-        { address: \'search\\\\.live\\\\.\',  key: \'query\' },     // MSN\n-        { address: \'search\\\\.aol\\\\.\',   key: \'userQuery\' }, // AOL\n-        { address: \'ask\\\\.com\',         key: \'q\' },         // AOL\n-        { address: \'altavista\\\\.\',      key: \'q\' },         // AltaVista\n-        { address: \'feedster\\\\.\',       key: \'q\' }          // Feedster\n-    ];\n-\n-    defaults = {\n-        // array of terms to highlight; if empty we\'ll look up terms from the\n-        // location and referrer\n-        terms: [],\n-\n-        // Use the current location query string? If so, use searchKey to find\n-        // what query parameter to use; it\'s either a string or a regexp, the\n-        // former will be turned into a regexp matching /^[searchKey]=(.*)$/i.\n-        // Note that the last group in a match *must* contain the terms.\n-        useLocation: true,\n-        searchKey: \'(searchterm|SearchableText)\',\n-\n-        // Use the referrer to detect search engine queries? If so, use\n-        // referrers to detect these and their search keys. Is an\n-        // array of {address, key} entries; key is treated as searchKey\n-        // above, with address turned into \'^https?://(www\\.)?[address]\'\n-        // regular expressions, if not already a regexp.\n-        useReferrer: true,\n-        referrers: $.fn.highlightSearchTerms.referrers,\n-\n-        // Should the current domain name and searchKey be included in\n-        // the referrers?\n-        includeOwnDomain: true,\n-\n-        // Are terms matched case insensitive?\n-        caseInsensitive: true,\n-        // what terms are never to be highlighted (regexp)?\n-        filterTerms: /(not|and|or)/i,\n-        // What class is used to mark highlighted search terms?\n-        highlightClass: \'highlightedSearchTerm\'\n-    };\n-\n-    // Internal use only, test framework hooks.\n-    $.fn.highlightSearchTerms._test_location = null;\n-    $.fn.highlightSearchTerms._test_referrer = null;\n-    $.fn.highlightSearchTerms._highlighter = Highlighter;\n-}(jQuery));\n-\n-jQuery(function($) {\n-    // Highlight search results, but ignore referrals from our own domain\n-    // when displaying search results.\n-    $(\'#region-content,#content\').highlightSearchTerms({\n-        includeOwnDomain: $(\'dl.searchResults\').length === 0\n-    });\n-});\ndiff --git a/Products/CMFPlone/tests/testCSSandJSRegistry.py b/Products/CMFPlone/tests/testCSSandJSRegistry.py\nindex 11843cc8f..cfb8d4c55 100644\n--- a/Products/CMFPlone/tests/testCSSandJSRegistry.py\n+++ b/Products/CMFPlone/tests/testCSSandJSRegistry.py\n@@ -62,7 +62,6 @@ def testDefaultJSIsInstalled(self):\n         )\n         expected = [\n             \'++resource++plone.js\',\n-            \'jquery.highlightsearchterms.js\'\n         ]\n         js_files = {x.js for x in installedResources.values()}\n         for e in expected:\n'

