Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:36+01:00
Author: Stephan Klinger (staeff) <stephan.klinger@freitag.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/ad93b4f8e10695bae2dbf4fe8cd555f5cb07e6f1

Add redirection control panel

Files changed:
A Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
A Products/CMFPlone/controlpanel/browser/redirects-manage.pt
A Products/CMFPlone/controlpanel/browser/redirects.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/interfaces/controlpanel.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex 5115a526a..3d35108ce 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -291,4 +291,19 @@\n       permission="cmf.ManagePortal"\n       />\n \n+  <browser:page\n+      name="redirection-controlpanel"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".redirects.RedirectsControlPanel"\n+      permission="cmf.ManagePortal"\n+      />\n+\n+  <browser:page\n+      name="manage-aliases"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      class=".redirects.RedirectsView"\n+      permission="cmf.ModifyPortalContent"\n+      allowed_attributes="redirects view_url errors"\n+      />\n+\n </configure>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nnew file mode 100644\nindex 000000000..162c5b403\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -0,0 +1,174 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en" lang="en"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n+      i18n:domain="plone">\n+\n+  <body>\n+    <div metal:fill-slot="prefs_configlet_main">\n+      <dl\n+          tal:condition="view/errors"\n+          class="portalMessage error">\n+        <dt>Error</dt>\n+        <dd>\n+          <p i18n:translate="error_bulk_upload">\n+            No aliases were added. Please correct these errors in your CSV file and try again:\n+          </p>\n+          <table\n+              style="text-align: left; vertical-align: top"\n+              border="0"\n+              cellpadding="2"\n+              cellspacing="0">\n+            <tr tal:repeat="error view/errors"\n+                style="vertical-align: top">\n+              <td nowrap="nowrap">\n+                <tal:block i18n:translate="label_bulk_upload_line">\n+                  Line\n+                </tal:block>\n+                ${error/line_number}\n+                <tal:block i18n:translate="label_bulk_upload_line_suffix">\n+                  :\n+                </tal:block>\n+              </td>\n+              <td>\n+                ${error/line}\n+              </td>\n+              <td>\n+                ${error/message}\n+              </td>\n+            </tr>\n+          </table>\n+        </dd>\n+      </dl>\n+\n+      <h1 i18n:translate="heading_add_aliases">\n+        Manage aliases\n+      </h1>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="add_alias">\n+            Add a new alias\n+          </legend>\n+\n+          <label for="redirection">Alias Path</label>\n+          <input\n+              type="text"\n+              name="redirection">\n+\n+          <label for="target_path">Target Path</label>\n+          <input\n+              type="text"\n+              name="target_path">\n+\n+          <div class="formControls">\n+            <input class="context"\n+                   type="submit"\n+                   value="Add"\n+                   name="form.button.Add"\n+                   i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post"\n+          enctype="multipart/form-data">\n+        <fieldset>\n+          <legend i18n:translate="legend_bulk_upload">\n+            Bulk-upload aliases\n+          </legend>\n+\n+          <p i18n:translate="description_bulk_upload">\n+            Add many aliases at once by uploading a CSV file. The first column should be the path to\n+            redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative,\n+            starting with a slash (/).\n+          </p>\n+          <p>\n+            <tal:block i18n:translate="example_caption_bulk_upload">Example:</tal:block><br />\n+            <code i18n:translate="example_bulk_upload">\n+              /old-home-page.asp,/front-page<br />\n+              /people/JoeT,/Users/joe-thurston\n+            </code>\n+          </p>\n+\n+          <input\n+              type="file"\n+              name="file" />\n+\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Upload"\n+                name="form.button.Upload"\n+                i18n:attributes="value"\n+              />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+      <form\n+          action="${view/view_url}#manage-existing-aliases"\n+          method="post"\n+          id="manage-existing-aliases">\n+        <fieldset\n+          tal:define="batch view/redirects">\n+          <legend i18n:translate="legend_all_existing_aliases">\n+            All existing aliases for this site\n+          </legend>\n+\n+          <label for="filter-existing-aliases-q" i18n:translate="">Filter by prefix</label>\n+          <input\n+              type="text"\n+              name="q"\n+              value=""\n+              id="filter-existing-aliases-q"\n+               tal:attributes="value python:request.form.get(\'q\', \'/\')"/>\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Filter"\n+                name="form.button.filter"\n+                 i18n:attributes="value" />\n+          </div>\n+\n+          <tal:redirects repeat="redirect batch">\n+            <div>\n+              <label>\n+              <input\n+                  type="checkbox"\n+                  class="noborder"\n+                  name="redirects:tuple"\n+                  value="${redirect/redirect}" />\n+              ${redirect/path} &rarr; ${redirect/redirect-to}\n+              </label>\n+            </div>\n+          </tal:redirects>\n+\n+          <div tal:condition="python:batch.numpages > 1"\n+               tal:replace="structure view/batching">\n+          </div>\n+\n+          <div class="formControls">\n+            <input class="context"\n+                   type="submit"\n+                   value="Remove"\n+                   name="form.button.Remove"\n+                   i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+    </div>\n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nnew file mode 100644\nindex 000000000..558e9c44e\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -0,0 +1,130 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xml:lang="en-US" lang="en-US"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      metal:use-macro="here/main_template/macros/master"\n+      i18n:domain="plone">\n+\n+  <body>\n+    <div\n+        metal:fill-slot="main"\n+        tal:define="context_state context/@@plone_context_state">\n+      <h1\n+          class="documentFirstHeading"\n+          i18n:translate="heading_add_aliases">\n+        Manage aliases\n+      </h1>\n+\n+      <dl\n+          class="portalMessage info"\n+          tal:condition="context_state/is_default_page">\n+        <dt i18n:translate="">\n+          Info\n+        </dt>\n+        <dd i18n:translate="help_sharing_page_default_page">\n+          You are managing the aliases of a default view in a container.\n+          To manage them for the entire container,\n+          <a\n+              i18n:name="go_here"\n+              i18n:translate="help_aliases_go_here"\n+              tal:define="folder context_state/folder"\n+              tal:attributes="href string:${folder/absolute_url}/@@manage-aliases">\n+            go here\n+          </a>.\n+        </dd>\n+      </dl>\n+\n+      <p i18n:translate="description_adding_aliases">\n+        Using this form, you can manage aliases for an item. This\n+        is an easy way to make an item available under two different URLs.\n+      </p>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="legend_existing_aliases">\n+            Existing aliases for this item\n+          </legend>\n+\n+          <div class="field"\n+               tal:define="error options/errors/redirection|nothing;\n+                           redirection request/title | nothing;"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+            <label\n+                for="title"\n+                i18n:translate="label_alias">\n+              Alias\n+            </label>\n+\n+            <span\n+                class="fieldRequired"\n+                title="Required"\n+                i18n:attributes="title"\n+                i18n:translate="label_required">\n+              (Required)\n+            </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+            <div class="formHelp" i18n:translate="help_alias">\n+              Enter the absolute path where the alias should exist. The path must start with \'/\'.\n+            </div>\n+\n+            <input\n+                type="text"\n+                name="redirection"\n+                value="#"\n+                size="40"\n+                tal:attributes="value request/redirection | nothing;"/>\n+          </div>\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Add"\n+                name="form.button.Add"\n+                i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="legend_existing_aliases">\n+            Existing aliases for this item\n+          </legend>\n+\n+          <tal:redirects repeat="redirect view/redirects">\n+            <div>\n+              <label>\n+              <input\n+                  type="checkbox"\n+                  class="noborder"\n+                  name="redirects:tuple"\n+                  value="${redirect/redirect}" />\n+                ${redirect/path}\n+              </label>\n+            </div>\n+          </tal:redirects>\n+\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Remove"\n+                name="form.button.Remove"\n+                i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+    </div>\n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nnew file mode 100644\nindex 000000000..d1a1d6f25\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -0,0 +1,280 @@\n+# -*- coding: utf-8 -*-\n+from AccessControl import getSecurityManager\n+from cStringIO import StringIO\n+from plone import api\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.batching.browser import PloneBatchView\n+from plone.memoize.view import memoize\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.CMFCore.permissions import ManagePortal\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.statusmessages.interfaces import IStatusMessage\n+from zope.component import getUtility\n+from zope.i18nmessageid import MessageFactory\n+\n+import csv\n+\n+_ = MessageFactory(\'plone\')\n+\n+\n+def absolutize_path(path, context=None, is_alias=True):\n+    """Check whether object exist to the provided `path`.\n+       Assume relative paths are relative to `context`;\n+       reject relative paths if `context` is None.\n+       Return a 2-tuple: (absolute redirection path,\n+       an error message if something goes wrong and otherwise \'\').\n+    """\n+\n+    portal = getUtility(ISiteRoot)\n+    storage = getUtility(IRedirectionStorage)\n+    err = None\n+    if path is None or path == \'\':\n+        err = (is_source and _(u"You have to enter an alias.")\n+               or _(u"You have to enter a target."))\n+    else:\n+        if path.startswith(\'/\'):\n+            context_path = "/".join(portal.getPhysicalPath())\n+            path = "{0}{1}".format(context_path, path)\n+        else:\n+            if context is None:\n+                err = (is_alias and _(u"Alias path must start with a slash.")\n+                       or _(u"Target path must start with a slash."))\n+            else:\n+                # What case should this be?\n+                context_path = "/".join(context.getPhysicalPath()[:-1])\n+                path = "{0}/{1}".format(context_path, path)\n+        if not err and not is_alias:\n+            # Check whether obj exists at source path\n+            result = api.content.find(path={"query": path})\n+            if len(result) == 0:\n+                err = _(u"The provided target object does not exist.")\n+        if not err and is_alias:\n+            # Check whether already exists in storage\n+            if storage.get(path):\n+                err = _(u"The provided alias already exists!")\n+\n+    return path, err\n+\n+class RedirectsView(BrowserView):\n+    template = ViewPageTemplateFile(\'redirects-manage.pt\')\n+\n+    def redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal = getUtility(ISiteRoot)\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        portal_path = "/".join(portal.getPhysicalPath())\n+        redirects = storage.redirects(context_path)\n+        for redirect in redirects:\n+            path = redirect[len(portal_path):]\n+            yield {\n+                \'redirect\': redirect,\n+                \'path\': path,\n+            }\n+\n+    def __call__(self):\n+        storage = getUtility(IRedirectionStorage)\n+        request = self.request\n+        form = request.form\n+        status = IStatusMessage(self.request)\n+        errors = {}\n+\n+        if \'form.button.Add\' in form:\n+            redirection, err = absolutize_path(form.get(\'redirection\'), is_alias=True)\n+            if err:\n+                errors[\'redirection\'] = err\n+                status.addStatusMessage(err, type=\'error\')\n+            else:\n+                del form[\'redirection\']\n+                storage.add(redirection, "/".join(self.context.getPhysicalPath()))\n+                status.addStatusMessage(_(u"Alias added."), type=\'info\')\n+        elif \'form.button.Remove\' in form:\n+            redirects = form.get(\'redirects\', ())\n+            for redirect in redirects:\n+                storage.remove(redirect)\n+            if len(redirects) > 1:\n+                status.addStatusMessage(_(u"Aliases removed."), type=\'info\')\n+            else:\n+                status.addStatusMessage(_(u"Alias removed."), type=\'info\')\n+\n+        return self.template(errors=errors)\n+\n+    @memoize\n+    def view_url(self):\n+        return self.context.absolute_url() + \'/@@manage-aliases\'\n+\n+\n+class RedirectionSet(object):\n+    def __init__(self, query=\'\'):\n+        self.storage = getUtility(IRedirectionStorage)\n+\n+        portal = getUtility(ISiteRoot)\n+        self.portal_path = \'/\'.join(portal.getPhysicalPath())\n+        self.portal_path_len = len(self.portal_path)\n+\n+        # noinspection PyProtectedMember\n+        if query:\n+            min_k = u\'{0:s}/{1:s}\'.format(self.portal_path, query.strip(\'/\'))\n+            max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n+            self.data = list(self.storage._paths.keys(min=min_k, max=max_k))\n+        else:\n+            self.data = list(self.storage._paths.keys())  # maybe be costly\n+\n+    def __len__(self):\n+        return len(self.data)\n+\n+    def __getitem__(self, item):\n+        redirect = self.data[item]\n+        if redirect.startswith(self.portal_path):\n+            path = redirect[self.portal_path_len:]\n+        else:\n+            path = redirect\n+        redirect_to = self.storage.get(redirect)\n+        if redirect_to.startswith(self.portal_path):\n+            redirect_to = redirect_to[self.portal_path_len:]\n+        return {\n+            \'redirect\': redirect,\n+            \'path\': path,\n+            \'redirect-to\': redirect_to,\n+        }\n+\n+\n+class RedirectsBatchView(PloneBatchView):\n+    def make_link(self, pagenumber=None, omit_params=None):\n+        if omit_params is None:\n+            omit_params = [\'ajax_load\']\n+        url = super(RedirectsBatchView, self).make_link(pagenumber,\n+                                                        omit_params)\n+        return u\'{0:s}#manage-existing-aliases\'.format(url)\n+\n+\n+class RedirectsControlPanel(BrowserView):\n+\n+    template = ViewPageTemplateFile(\'redirects-controlpanel.pt\')\n+\n+    def __init__(self, context, request):\n+        super(RedirectsControlPanel, self).__init__(context, request)\n+        self.errors = []\n+        # list of tuples: (line_number, absolute_redirection_path, err_msg, target)\n+\n+    def batching(self):\n+        return RedirectsBatchView(self.context, self.request)(self.redirects())\n+\n+    @memoize\n+    def redirects(self):\n+        """ Get existing redirects from the redirection storage.\n+            Return dict with the strings redirect, path and redirect-to.\n+            Strip the id of the instance from path and redirect-to if\n+            it is present. (Seems to be always true)\n+            If id of instance is not present in path the var \'path\' and\n+            \'redirect\' are equal.\n+        """\n+        return Batch(\n+            RedirectionSet(self.request.form.get(\'q\', \'\')),\n+            15,\n+            int(self.request.form.get(\'b_start\', \'0\')),\n+            orphan=1\n+        )\n+\n+    def __call__(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal = getUtility(ISiteRoot)\n+        request = self.request\n+        form = request.form\n+        status = IStatusMessage(self.request)\n+\n+        if \'form.button.Remove\' in form:\n+            redirects = form.get(\'redirects\', ())\n+            for redirect in redirects:\n+                storage.remove(redirect)\n+            if len(redirects) == 0:\n+                status.addStatusMessage(_(u"No aliases selected for removal."), type=\'info\')\n+            elif len(redirects) > 1:\n+                status.addStatusMessage(_(u"Aliases removed."), type=\'info\')\n+            else:\n+                status.addStatusMessage(_(u"Alias removed."), type=\'info\')\n+        elif \'form.button.Add\' in form:\n+            self.add(form[\'redirection\'], form[\'target_path\'], portal, storage, status)\n+        elif \'form.button.Upload\' in form:\n+            self.upload(form[\'file\'], portal, storage, status)\n+\n+        return self.template()\n+\n+    def add(self, redirection, target, portal, storage, status):\n+        """Add the redirections from the form. If anything goes wrong, do nothing."""\n+        abs_target = \'\'\n+        target_err = \'\'\n+\n+        abs_redirection, err = absolutize_path(redirection, is_alias=True)\n+        if not err:\n+            abs_target, target_err = absolutize_path(target, is_alias=False)\n+\n+        if err and target_err:\n+            err = "{0} {1}".format(err, target_err)\n+        elif target_err:\n+            err = target_err\n+        else:\n+            if abs_redirection == abs_target:\n+                err = _(u"Aliases that point to themselves will cause"\n+                        u"an endless cycle of redirects.")\n+                # TODO: detect indirect recursion\n+\n+        if err:\n+            status.addStatusMessage(_(err), type=\'error\')\n+        else:\n+            storage.add(abs_redirection, abs_target)\n+            status.addStatusMessage(_(u"Alias {0} &rarr; {1} added.").format(abs_redirection, abs_target),\n+                                    type=\'info\')\n+\n+    def upload(self, file, portal, storage, status):\n+        """Add the redirections from the CSV file `file`. If anything goes wrong, do nothing."""\n+\n+        # No file picked. Theres gotta be a better way to handle this.\n+        if not file.filename:\n+            status.addStatusMessage(_(u"Please pick a file to upload."), type=\'info\')\n+            return\n+        # Turn all kinds of newlines into LF ones. The csv module doesn\'t do\n+        # its own newline sniffing and requires either \\n or \\r.\n+        file = StringIO(\'\\n\'.join(file.read().splitlines()))\n+\n+        # Use first two lines as a representative sample for guessing format,\n+        # in case one is a bunch of headers.\n+        dialect = csv.Sniffer().sniff(file.readline() + file.readline())\n+        file.seek(0)\n+\n+        successes = []  # list of tuples: (abs_redirection, target)\n+        had_errors = False\n+        for i, fields in enumerate(csv.reader(file, dialect)):\n+            if len(fields) == 2:\n+                redirection, target = fields\n+                abs_redirection, err = absolutize_path(redirection, is_alias=True)\n+                abs_target, target_err = absolutize_path(target, is_alias=False)\n+                if err and target_err:\n+                    err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n+                elif target_err:\n+                    err = target_err\n+                else:\n+                    if abs_redirection == abs_target:\n+                        # TODO: detect indirect recursion\n+                        err = _(u"Aliases that point to themselves will cause"\n+                                u"an endless cycle of redirects.")\n+            else:\n+                err = _(u"Each line must have 2 columns.")\n+\n+            if not err:\n+                if not had_errors:  # else don\'t bother\n+                    successes.append((abs_redirection, abs_target))\n+            else:\n+                had_errors = True\n+                self.errors.append(dict(line_number=i+1, line=dialect.delimiter.join(fields),\n+                                        message=err))\n+\n+        if not had_errors:\n+            for abs_redirection, abs_target in successes:\n+                storage.add(abs_redirection, abs_target)\n+            status.addStatusMessage(_(u"%i aliases added.") % len(successes), type=\'info\')\n+\n+    @memoize\n+    def view_url(self):\n+        return self.context.absolute_url() + \'/@@redirection-controlpanel\'\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nnew file mode 100644\nindex 000000000..1bc765fc1\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -0,0 +1,239 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.testing.z2 import Browser\n+\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n+from Products.CMFPlone.testing import \\\n+    PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+import math\n+import unittest\n+import transaction\n+\n+class RedirectionControlPanelFunctionalTest(unittest.TestCase):\n+    """Test that changes in the mail control panel are actually\n+    stored in the registry.\n+    """\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.browser = Browser(self.app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+        )\n+\n+    """\n+    def test_mail_controlpanel_link(self):\n+        self.browser.open(\n+            "%s/@@overview-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'Mail\').click()\n+\n+    def test_mail_controlpanel_backlink(self):\n+        self.browser.open(\n+            "%s/@@mail-controlpanel" % self.portal_url)\n+        self.assertTrue("General" in self.browser.contents)\n+\n+    def test_mail_controlpanel_sidebar(self):\n+        self.browser.open(\n+            "%s/@@mail-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'Site Setup\').click()\n+        self.assertTrue(\n+            self.browser.url.endswith(\'/plone/@@overview-controlpanel\')\n+        )\n+    """\n+\n+    def test_redirection_controlpanel_view(self):\n+        view = getMultiAdapter((self.portal, self.portal.REQUEST),\n+                               name="redirection-controlpanel")\n+        self.assertTrue(view())\n+\n+    def test_redirection_controlpanel_add_redirect(self):\n+        storage = getUtility(IRedirectionStorage)\n+        redirection_path = \'/alias-folder\'\n+        target_path = \'/test-folder\'\n+        storage_path = \'/plone/alias-folder\'\n+\n+        self.browser.open(\n+            "%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(\n+            name=\'redirection\').value = redirection_path\n+        self.browser.getControl(\n+            name=\'target_path\').value = target_path\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            storage.has_path(storage_path),\n+            u\'Redirection storage should have path "{0}"\'.format(storage_path)\n+        )\n+\n+    def test_redirection_controlpanel_set(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 1000)\n+        self.assertDictEqual(redirects[0], {\n+            \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+            \'path\': \'/foo/0\', \'redirect-to\': \'/bar/0\'\n+        })\n+        self.assertDictEqual(redirects[999], {\n+            \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n+            \'path\': \'/foo/999\', \'redirect-to\': \'/bar/999\'\n+        })\n+        self.assertEqual(len(list(iter(redirects))), 1000)\n+        self.assertDictEqual(list(iter(redirects))[0], {\n+            \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+            \'path\': \'/foo/0\', \'redirect-to\': \'/bar/0\'\n+        })\n+\n+    def test_redirection_controlpanel_batching(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+        view = getMultiAdapter((self.layer[\'portal\'], self.layer[\'request\']),\n+                               name=\'redirection-controlpanel\')\n+        # Test that view/redirects returns batch\n+        self.assertIsInstance(view.redirects(), Batch)\n+\n+        # Test that view/batching returns batching with anchor in urls\n+        batching = view.batching()\n+        self.assertIn(\'?b_start:int=990#manage-existing-aliases\', batching)\n+\n+    def test_redirection_controlpanel_redirect_alias_exists(self):\n+        path_alias = \'/alias\'\n+        path_target = \'/test-folder\'\n+        storage_alias = \'/plone{0}\'.format(path_alias)\n+        storage_target = \'/plone{0}\'.format(path_target)\n+        storage = getUtility(IRedirectionStorage)\n+        storage.add(storage_alias, storage_target)\n+        transaction.commit()\n+\n+        self.browser.open(\n+            "%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(\n+            name=\'redirection\').value = path_alias\n+        self.browser.getControl(\n+            name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            storage.get(storage_alias) == storage_target,\n+            \'{0} not target of alias!\'.format(storage_target)\n+        )\n+        self.assertTrue(\n+            \'The provided alias already exists!\' in self.browser.contents,\n+            u\'Message "alias already exists" not in page!\'\n+        )\n+\n+    def test_redirection_controlpanel_filtering(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\'{0:s}/foo1/{1:s}\'.format(portal_path, str(i)),\n+                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+        for i in range(1000):\n+            storage.add(\'{0:s}/foo2/{1:s}\'.format(portal_path, str(i)),\n+                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 2000)\n+        redirects = RedirectionSet(query=\'/foo\')\n+        self.assertEqual(len(redirects), 2000)\n+        redirects = RedirectionSet(query=\'/foo1\')\n+        self.assertEqual(len(redirects), 1000)\n+        redirects = RedirectionSet(query=\'/foo2\')\n+        self.assertEqual(len(redirects), 1000)\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo\'\n+        view = getMultiAdapter((self.layer[\'portal\'], request),\n+                               name=\'redirection-controlpanel\')\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo1\'\n+        view = getMultiAdapter((self.layer[\'portal\'], request),\n+                               name=\'redirection-controlpanel\')\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo2\'\n+        view = getMultiAdapter((self.layer[\'portal\'], request),\n+                               name=\'redirection-controlpanel\')\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.))\n+\n+        request = self.layer[\'request\'].clone()\n+        view = getMultiAdapter((self.layer[\'portal\'], request),\n+                               name=\'redirection-controlpanel\')\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.))\n+\n+        # Filtering without new request does not have effect because memoize\n+        request.form[\'q\'] = \'/foo2\'\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.))\n+\n+    def test_redirection_controlpanel_redirect_no_target(self):\n+        path_alias = \'/alias\'\n+        path_target = \'/not-existing\'\n+\n+        self.browser.open(\n+            "%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(\n+            name=\'redirection\').value = path_alias\n+        self.browser.getControl(\n+            name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'The provided target object does not exist.\' in self.browser.contents,\n+            u\'Message "target does not exist" not in page!\'\n+        )\n+\n+    def test_redirection_controlpanel_missing_slash_target(self):\n+        path_alias = \'/alias\'\n+        path_target = \'Members\'\n+\n+        self.browser.open(\n+            "%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(\n+            name=\'redirection\').value = path_alias\n+        self.browser.getControl(\n+            name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Target path must start with a slash.\' in self.browser.contents,\n+            u\'Errormessage for missing slash on target path missing\'\n+        )\n+\n+\n+    def test_redirection_controlpanel_missing_slash_alias(self):\n+        path_alias = \'alias\'\n+        path_target = \'/Members\'\n+\n+        self.browser.open(\n+            "%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(\n+            name=\'redirection\').value = path_alias\n+        self.browser.getControl(\n+            name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alias path must start with a slash.\' in self.browser.contents,\n+            u\'Errormessage for missing slash on alias path missing\'\n+        )\ndiff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py\nindex dd52e532a..24c1dcb85 100644\n--- a/Products/CMFPlone/interfaces/controlpanel.py\n+++ b/Products/CMFPlone/interfaces/controlpanel.py\n@@ -1426,6 +1426,25 @@ class ITypesSchema(Interface):\n         value_type=schema.TextLine()\n     )\n \n+    redirection_manageable_types = schema.Tuple(\n+        title=_(u"Manage redirects for types"),\n+        description=_(u"Select the types for which the "\n+                      "aliases can be managed"),\n+        required=False,\n+        default=(\n+            \'Image\',\n+            \'File\',\n+            \'Link\',\n+            \'News Item\',\n+            \'Folder\',\n+            \'Document\',\n+            \'Event\'\n+        ),\n+        missing_value=(),\n+        value_type=schema.Choice(\n+            source=\'plone.app.vocabularies.ReallyUserFriendlyTypes\')\n+    )\n+\n \n class IMailSchema(Interface):\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Stephan Klinger (staeff) <staeff@arcor.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/56feca0b1dd32100acf885cc0b56f9b13efb51bb

Update CHANGES

Files changed:
A news/1486.feature

b'diff --git a/news/1486.feature b/news/1486.feature\nnew file mode 100644\nindex 000000000..2cf99dbc6\n--- /dev/null\n+++ b/news/1486.feature\n@@ -0,0 +1,4 @@\n+PLIP 1486: Merge Products.RedirectionTool into core.\n+Allow users to manage redirects on their site and aliases to content.\n+See https://github.com/plone/Products.CMFPlone/issues/1486\n+[staeff, maurits]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/284405a27205ac47d8d8ad91ba003981b6840705

Fixed Python3 import

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex d1a1d6f25..6db462a1d 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n-from cStringIO import StringIO\n from plone import api\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n@@ -11,6 +10,7 @@\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n+from six import StringIO\n from zope.component import getUtility\n from zope.i18nmessageid import MessageFactory\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/434b99f905ebfaee8cdae00c4d014f0358abe788

Fixed undefined name 'is_source', and other QA on redirects controlpanel.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 6db462a1d..3ed429c68 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,11 +1,9 @@\n # -*- coding: utf-8 -*-\n-from AccessControl import getSecurityManager\n from plone import api\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n from plone.memoize.view import memoize\n from Products.CMFCore.interfaces import ISiteRoot\n-from Products.CMFCore.permissions import ManagePortal\n from Products.CMFPlone.PloneBatch import Batch\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -31,7 +29,7 @@ def absolutize_path(path, context=None, is_alias=True):\n     storage = getUtility(IRedirectionStorage)\n     err = None\n     if path is None or path == \'\':\n-        err = (is_source and _(u"You have to enter an alias.")\n+        err = (is_alias and _(u"You have to enter an alias.")\n                or _(u"You have to enter a target."))\n     else:\n         if path.startswith(\'/\'):\n@@ -57,6 +55,7 @@ def absolutize_path(path, context=None, is_alias=True):\n \n     return path, err\n \n+\n class RedirectsView(BrowserView):\n     template = ViewPageTemplateFile(\'redirects-manage.pt\')\n \n@@ -267,7 +266,7 @@ def upload(self, file, portal, storage, status):\n                     successes.append((abs_redirection, abs_target))\n             else:\n                 had_errors = True\n-                self.errors.append(dict(line_number=i+1, line=dialect.delimiter.join(fields),\n+                self.errors.append(dict(line_number=i + 1, line=dialect.delimiter.join(fields),\n                                         message=err))\n \n         if not had_errors:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/758b213bd28056206e20e511a9cf9eeeddd4e52f

Redirects: replaced plone.api call.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 3ed429c68..27d2fd5f2 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from plone import api\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n from plone.memoize.view import memoize\n from Products.CMFCore.interfaces import ISiteRoot\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.PloneBatch import Batch\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -45,7 +45,8 @@ def absolutize_path(path, context=None, is_alias=True):\n                 path = "{0}/{1}".format(context_path, path)\n         if not err and not is_alias:\n             # Check whether obj exists at source path\n-            result = api.content.find(path={"query": path})\n+            catalog = getToolByName(context, \'portal_catalog\')\n+            result = catalog.searchResults(path={"query": path})\n             if len(result) == 0:\n                 err = _(u"The provided target object does not exist.")\n         if not err and is_alias:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7251fc860dd95cfd7da9f8434adc99b8b1685d6a

Fixed security declaration in redirects for nonexistent method 'errors'.

Class Products.Five.browser.metaconfigure.RedirectsView has a security declaration for nonexistent method 'errors'

Files changed:
M Products/CMFPlone/controlpanel/browser/configure.zcml

b'diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex 3d35108ce..6d1d7d395 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -303,7 +303,7 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       class=".redirects.RedirectsView"\n       permission="cmf.ModifyPortalContent"\n-      allowed_attributes="redirects view_url errors"\n+      allowed_attributes="redirects view_url"\n       />\n \n </configure>\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/4e96d4bcc43c174231ea85c752a3a4552b2bc697

Redirects: moved templates to zcml.

Makes it easier to override just the template.

Files changed:
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex 6d1d7d395..2dea057a3 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -295,6 +295,7 @@\n       name="redirection-controlpanel"\n       for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n       class=".redirects.RedirectsControlPanel"\n+      template="redirects-controlpanel.pt"\n       permission="cmf.ManagePortal"\n       />\n \n@@ -302,6 +303,7 @@\n       name="manage-aliases"\n       for="Products.CMFCore.interfaces.IContentish"\n       class=".redirects.RedirectsView"\n+      template="redirects-manage.pt"\n       permission="cmf.ModifyPortalContent"\n       allowed_attributes="redirects view_url"\n       />\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 27d2fd5f2..d6acfb39b 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -6,7 +6,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.PloneBatch import Batch\n from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from six import StringIO\n from zope.component import getUtility\n@@ -58,7 +57,6 @@ def absolutize_path(path, context=None, is_alias=True):\n \n \n class RedirectsView(BrowserView):\n-    template = ViewPageTemplateFile(\'redirects-manage.pt\')\n \n     def redirects(self):\n         storage = getUtility(IRedirectionStorage)\n@@ -98,7 +96,7 @@ def __call__(self):\n             else:\n                 status.addStatusMessage(_(u"Alias removed."), type=\'info\')\n \n-        return self.template(errors=errors)\n+        return self.index(errors=errors)\n \n     @memoize\n     def view_url(self):\n@@ -151,8 +149,6 @@ def make_link(self, pagenumber=None, omit_params=None):\n \n class RedirectsControlPanel(BrowserView):\n \n-    template = ViewPageTemplateFile(\'redirects-controlpanel.pt\')\n-\n     def __init__(self, context, request):\n         super(RedirectsControlPanel, self).__init__(context, request)\n         self.errors = []\n@@ -199,7 +195,7 @@ def __call__(self):\n         elif \'form.button.Upload\' in form:\n             self.upload(form[\'file\'], portal, storage, status)\n \n-        return self.template()\n+        return self.index()\n \n     def add(self, redirection, target, portal, storage, status):\n         """Add the redirections from the form. If anything goes wrong, do nothing."""\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/200084e32dd61dcdfed1008049452ac3bfcf5fb7

Redirection: added hint about what min_k and max_k is.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b"diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex d6acfb39b..76e1b9660 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -113,6 +113,10 @@ def __init__(self, query=''):\n \n         # noinspection PyProtectedMember\n         if query:\n+            # with query path /Plone/news:\n+            # min_k is /Plone/news and\n+            # max_k is /Plone/newt\n+            # Apparently that is the way to minize the keys we ask.\n             min_k = u'{0:s}/{1:s}'.format(self.portal_path, query.strip('/'))\n             max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n             self.data = list(self.storage._paths.keys(min=min_k, max=max_k))\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/24581d2680ab1c67bb595828bbd743795ee0d7cd

Redirection: do not list the path keys.

That would take a few seconds when there are a million keys.
We still call len(self.data) at some point, but this does not actually list the keys,
but uses internal BTree optimizations.
So this plays nice with the batched navigation.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b"diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 76e1b9660..4d1adc3ed 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -119,9 +119,9 @@ def __init__(self, query=''):\n             # Apparently that is the way to minize the keys we ask.\n             min_k = u'{0:s}/{1:s}'.format(self.portal_path, query.strip('/'))\n             max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n-            self.data = list(self.storage._paths.keys(min=min_k, max=max_k))\n+            self.data = self.storage._paths.keys(min=min_k, max=max_k)\n         else:\n-            self.data = list(self.storage._paths.keys())  # maybe be costly\n+            self.data = self.storage._paths.keys()\n \n     def __len__(self):\n         return len(self.data)\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/af8adbae86693da17c8cfe1db0da83da9e821e7b

Redirection: added Collection to default types.

And sorted the list.

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

b'diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py\nindex 24c1dcb85..dcc0aecf0 100644\n--- a/Products/CMFPlone/interfaces/controlpanel.py\n+++ b/Products/CMFPlone/interfaces/controlpanel.py\n@@ -1432,13 +1432,14 @@ class ITypesSchema(Interface):\n                       "aliases can be managed"),\n         required=False,\n         default=(\n-            \'Image\',\n+            \'Collection\',\n+            \'Document\',\n+            \'Event\',\n             \'File\',\n+            \'Folder\',\n+            \'Image\',\n             \'Link\',\n             \'News Item\',\n-            \'Folder\',\n-            \'Document\',\n-            \'Event\'\n         ),\n         missing_value=(),\n         value_type=schema.Choice(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/75b6285ad010d72cdcc593d1146d5bacd71d8dfc

absolutize_path: renamed is_alias keyword arg to is_source.

This name makes the meaning clearer, I hope.
A previous commit already started this, but only in one place, where I reverted it.
Makes sense to rename it now.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 4d1adc3ed..113a22faa 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -16,7 +16,7 @@\n _ = MessageFactory(\'plone\')\n \n \n-def absolutize_path(path, context=None, is_alias=True):\n+def absolutize_path(path, context=None, is_source=True):\n     """Check whether object exist to the provided `path`.\n        Assume relative paths are relative to `context`;\n        reject relative paths if `context` is None.\n@@ -28,7 +28,7 @@ def absolutize_path(path, context=None, is_alias=True):\n     storage = getUtility(IRedirectionStorage)\n     err = None\n     if path is None or path == \'\':\n-        err = (is_alias and _(u"You have to enter an alias.")\n+        err = (is_source and _(u"You have to enter an alias.")\n                or _(u"You have to enter a target."))\n     else:\n         if path.startswith(\'/\'):\n@@ -36,19 +36,19 @@ def absolutize_path(path, context=None, is_alias=True):\n             path = "{0}{1}".format(context_path, path)\n         else:\n             if context is None:\n-                err = (is_alias and _(u"Alias path must start with a slash.")\n+                err = (is_source and _(u"Alias path must start with a slash.")\n                        or _(u"Target path must start with a slash."))\n             else:\n                 # What case should this be?\n                 context_path = "/".join(context.getPhysicalPath()[:-1])\n                 path = "{0}/{1}".format(context_path, path)\n-        if not err and not is_alias:\n+        if not err and not is_source:\n             # Check whether obj exists at source path\n             catalog = getToolByName(context, \'portal_catalog\')\n             result = catalog.searchResults(path={"query": path})\n             if len(result) == 0:\n                 err = _(u"The provided target object does not exist.")\n-        if not err and is_alias:\n+        if not err and is_source:\n             # Check whether already exists in storage\n             if storage.get(path):\n                 err = _(u"The provided alias already exists!")\n@@ -79,7 +79,7 @@ def __call__(self):\n         errors = {}\n \n         if \'form.button.Add\' in form:\n-            redirection, err = absolutize_path(form.get(\'redirection\'), is_alias=True)\n+            redirection, err = absolutize_path(form.get(\'redirection\'), is_source=True)\n             if err:\n                 errors[\'redirection\'] = err\n                 status.addStatusMessage(err, type=\'error\')\n@@ -206,9 +206,9 @@ def add(self, redirection, target, portal, storage, status):\n         abs_target = \'\'\n         target_err = \'\'\n \n-        abs_redirection, err = absolutize_path(redirection, is_alias=True)\n+        abs_redirection, err = absolutize_path(redirection, is_source=True)\n         if not err:\n-            abs_target, target_err = absolutize_path(target, is_alias=False)\n+            abs_target, target_err = absolutize_path(target, is_source=False)\n \n         if err and target_err:\n             err = "{0} {1}".format(err, target_err)\n@@ -248,8 +248,8 @@ def upload(self, file, portal, storage, status):\n         for i, fields in enumerate(csv.reader(file, dialect)):\n             if len(fields) == 2:\n                 redirection, target = fields\n-                abs_redirection, err = absolutize_path(redirection, is_alias=True)\n-                abs_target, target_err = absolutize_path(target, is_alias=False)\n+                abs_redirection, err = absolutize_path(redirection, is_source=True)\n+                abs_target, target_err = absolutize_path(target, is_source=False)\n                 if err and target_err:\n                     err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n                 elif target_err:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/fb962c82ce908577e03b0c636219585b881c051d

Added test_absolutize_path.

I want to change the absolutize_path function from redirection,
because it has unused code paths, making it too difficult.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b"diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 1bc765fc1..78f620673 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -237,3 +237,55 @@ def test_redirection_controlpanel_missing_slash_alias(self):\n             'Alias path must start with a slash.' in self.browser.contents,\n             u'Errormessage for missing slash on alias path missing'\n         )\n+\n+    def test_absolutize_path(self):\n+        # absolutize_path is a helper function that returns a tuple\n+        # of absolute path and error message.\n+        from Products.CMFPlone.controlpanel.browser.redirects import (\n+            absolutize_path as ap)\n+\n+        # A path is required.\n+        self.assertEqual(\n+            ap(''),\n+            ('', 'You have to enter an alias.'))\n+        self.assertEqual(\n+            ap('', is_source=False),\n+            ('', 'You have to enter a target.'))\n+\n+        # relative paths are not accepted\n+        self.assertEqual(\n+            ap('foo'),\n+            ('foo', 'Alias path must start with a slash.'))\n+        self.assertEqual(\n+            ap('foo', is_source=True),\n+            ('foo', 'Alias path must start with a slash.'))\n+        self.assertEqual(\n+            ap('foo', is_source=False),\n+            ('foo', 'Target path must start with a slash.'))\n+\n+        # absolute paths are good\n+        self.assertEqual(ap('/foo'), ('/plone/foo', None))\n+        self.assertEqual(ap('/foo', is_source=True), ('/plone/foo', None))\n+\n+        # for targets, an object must exist on the path\n+        self.assertEqual(\n+            ap('/foo', is_source=False),\n+            ('/plone/foo', 'The provided target object does not exist.'))\n+        self.assertEqual(\n+            ap('/test-folder', is_source=False),\n+            ('/plone/test-folder', None))\n+\n+        # sources do not need to exist, but if an object exists,\n+        # we currently have no problems with it.\n+        self.assertEqual(\n+            ap('/test-folder'),\n+            ('/plone/test-folder', None))\n+\n+        # A source must not already exist in the redirect list.\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer['portal'].absolute_url_path()\n+        storage.add('{0:s}/foo'.format(portal_path),\n+                    '{0:s}/test-folder'.format(portal_path))\n+        self.assertEqual(\n+            ap('/foo', is_source=True),\n+            ('/plone/foo', 'The provided alias already exists!'))\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/6a510f0a79d14a867bf2a04e6837f8ca28280904

Refactored absolutize_path to not accept a context keyword argument.

No code path used this.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 113a22faa..f3f01eb90 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -16,42 +16,49 @@\n _ = MessageFactory(\'plone\')\n \n \n-def absolutize_path(path, context=None, is_source=True):\n-    """Check whether object exist to the provided `path`.\n-       Assume relative paths are relative to `context`;\n-       reject relative paths if `context` is None.\n-       Return a 2-tuple: (absolute redirection path,\n-       an error message if something goes wrong and otherwise \'\').\n+def absolutize_path(path, is_source=True):\n+    """Create path including the path of the portal root.\n+\n+    The path must be absolute, so starting with a slash.\n+\n+    If is_source is true, this is an alternative url\n+    that will point to a target (unknown here).\n+\n+    If is_source is true, path is the path of a target.\n+    An object must exist at this path.\n+\n+    Return a 2-tuple: (absolute redirection path,\n+    an error message if something goes wrong and otherwise \'\').\n     """\n \n     portal = getUtility(ISiteRoot)\n-    storage = getUtility(IRedirectionStorage)\n     err = None\n-    if path is None or path == \'\':\n-        err = (is_source and _(u"You have to enter an alias.")\n-               or _(u"You have to enter a target."))\n+    if not path:\n+        if is_source:\n+            err = _(u"You have to enter an alias.")\n+        else:\n+            err = _(u"You have to enter a target.")\n     else:\n         if path.startswith(\'/\'):\n             context_path = "/".join(portal.getPhysicalPath())\n             path = "{0}{1}".format(context_path, path)\n         else:\n-            if context is None:\n-                err = (is_source and _(u"Alias path must start with a slash.")\n-                       or _(u"Target path must start with a slash."))\n+            if is_source:\n+                err = _(u"Alias path must start with a slash.")\n             else:\n-                # What case should this be?\n-                context_path = "/".join(context.getPhysicalPath()[:-1])\n-                path = "{0}/{1}".format(context_path, path)\n-        if not err and not is_source:\n-            # Check whether obj exists at source path\n-            catalog = getToolByName(context, \'portal_catalog\')\n-            result = catalog.searchResults(path={"query": path})\n-            if len(result) == 0:\n-                err = _(u"The provided target object does not exist.")\n-        if not err and is_source:\n+                err = _(u"Target path must start with a slash.")\n+    if not err:\n+        if is_source:\n             # Check whether already exists in storage\n+            storage = getUtility(IRedirectionStorage)\n             if storage.get(path):\n                 err = _(u"The provided alias already exists!")\n+        else:\n+            # Check whether obj exists at target path\n+            catalog = getToolByName(portal, \'portal_catalog\')\n+            result = catalog.searchResults(path={"query": path})\n+            if len(result) == 0:\n+                err = _(u"The provided target object does not exist.")\n \n     return path, err\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/1c68fb916c11a47cb7e061cac75ca0fd4cc06403

Redirection: source must not be an existing object.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex f3f01eb90..9a2ff5a2c 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -48,14 +48,20 @@ def absolutize_path(path, is_source=True):\n             else:\n                 err = _(u"Target path must start with a slash.")\n     if not err:\n+        catalog = getToolByName(portal, \'portal_catalog\')\n         if is_source:\n             # Check whether already exists in storage\n             storage = getUtility(IRedirectionStorage)\n             if storage.get(path):\n                 err = _(u"The provided alias already exists!")\n+            else:\n+                # Check whether obj exists at source path.\n+                # A redirect would be useless then.\n+                result = catalog.searchResults(path={"query": path})\n+                if len(result) > 0:\n+                    err = _(u"Cannot use an existing object as alias.")\n         else:\n             # Check whether obj exists at target path\n-            catalog = getToolByName(portal, \'portal_catalog\')\n             result = catalog.searchResults(path={"query": path})\n             if len(result) == 0:\n                 err = _(u"The provided target object does not exist.")\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 78f620673..b03dd3af2 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -275,11 +275,10 @@ def test_absolutize_path(self):\n             ap(\'/test-folder\', is_source=False),\n             (\'/plone/test-folder\', None))\n \n-        # sources do not need to exist, but if an object exists,\n-        # we currently have no problems with it.\n+        # sources must not exist\n         self.assertEqual(\n             ap(\'/test-folder\'),\n-            (\'/plone/test-folder\', None))\n+            (\'/plone/test-folder\', \'Cannot use an existing object as alias.\'))\n \n         # A source must not already exist in the redirect list.\n         storage = getUtility(IRedirectionStorage)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d7167e6619b7a9be97a128c1440edfc1c02b1993

Redirection: source must not be traversable.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 9a2ff5a2c..1c257a700 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -60,6 +60,9 @@ def absolutize_path(path, is_source=True):\n                 result = catalog.searchResults(path={"query": path})\n                 if len(result) > 0:\n                     err = _(u"Cannot use an existing object as alias.")\n+                else:\n+                    if portal.unrestrictedTraverse(path, None) is not None:\n+                        err = _(u"Cannot use a working path as alias.")\n         else:\n             # Check whether obj exists at target path\n             result = catalog.searchResults(path={"query": path})\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex b03dd3af2..323e6fece 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -275,10 +275,14 @@ def test_absolutize_path(self):\n             ap(\'/test-folder\', is_source=False),\n             (\'/plone/test-folder\', None))\n \n-        # sources must not exist\n+        # A source must not exist.\n         self.assertEqual(\n             ap(\'/test-folder\'),\n             (\'/plone/test-folder\', \'Cannot use an existing object as alias.\'))\n+        # More general: a source must not be traversable already.\n+        self.assertEqual(\n+            ap(\'/view\'),\n+            (\'/plone/view\', \'Cannot use a working path as alias.\'))\n \n         # A source must not already exist in the redirect list.\n         storage = getUtility(IRedirectionStorage)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T10:43:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/0134c5da4337a364890b884fe62603b59c1b89bd

Redirection: source and target must not be a view.

That is bound to lead to problems.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 1c257a700..465cd0963 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -38,15 +38,19 @@ def absolutize_path(path, is_source=True):\n             err = _(u"You have to enter an alias.")\n         else:\n             err = _(u"You have to enter a target.")\n-    else:\n-        if path.startswith(\'/\'):\n-            context_path = "/".join(portal.getPhysicalPath())\n-            path = "{0}{1}".format(context_path, path)\n+    elif not path.startswith(\'/\'):\n+        if is_source:\n+            err = _(u"Alias path must start with a slash.")\n         else:\n-            if is_source:\n-                err = _(u"Alias path must start with a slash.")\n-            else:\n-                err = _(u"Target path must start with a slash.")\n+            err = _(u"Target path must start with a slash.")\n+    elif \'@@\' in path:\n+        if is_source:\n+            err = _(u"Alias path must not be a view.")\n+        else:\n+            err = _(u"Target path must not be a view.")\n+    else:\n+        context_path = "/".join(portal.getPhysicalPath())\n+        path = "{0}{1}".format(context_path, path)\n     if not err:\n         catalog = getToolByName(portal, \'portal_catalog\')\n         if is_source:\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 323e6fece..394df203c 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -274,6 +274,9 @@ def test_absolutize_path(self):\n         self.assertEqual(\n             ap(\'/test-folder\', is_source=False),\n             (\'/plone/test-folder\', None))\n+        self.assertEqual(\n+            ap(\'/test-folder/@@sharing\', is_source=False),\n+            (\'/test-folder/@@sharing\', \'Target path must not be a view.\'))\n \n         # A source must not exist.\n         self.assertEqual(\n@@ -283,6 +286,9 @@ def test_absolutize_path(self):\n         self.assertEqual(\n             ap(\'/view\'),\n             (\'/plone/view\', \'Cannot use a working path as alias.\'))\n+        self.assertEqual(\n+            ap(\'/@@overview-controlpanel\'),\n+            (\'/@@overview-controlpanel\', \'Alias path must not be a view.\'))\n \n         # A source must not already exist in the redirect list.\n         storage = getUtility(IRedirectionStorage)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T11:08:15+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c9850fc061434d5dc7da3fab9a41072ba384af5c

Redirection: renamed alias to alternative url.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 162c5b403..11a447238 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -14,7 +14,7 @@\n         <dt>Error</dt>\n         <dd>\n           <p i18n:translate="error_bulk_upload">\n-            No aliases were added. Please correct these errors in your CSV file and try again:\n+            No alternative urls were added. Please correct these errors in your CSV file and try again:\n           </p>\n           <table\n               style="text-align: left; vertical-align: top"\n@@ -44,7 +44,7 @@\n       </dl>\n \n       <h1 i18n:translate="heading_add_aliases">\n-        Manage aliases\n+        Manage alternative urls\n       </h1>\n \n       <form\n@@ -52,10 +52,10 @@\n           method="post">\n         <fieldset>\n           <legend i18n:translate="add_alias">\n-            Add a new alias\n+            Add a new alternative url\n           </legend>\n \n-          <label for="redirection">Alias Path</label>\n+          <label for="redirection">Alternative Url Path</label>\n           <input\n               type="text"\n               name="redirection">\n@@ -83,11 +83,11 @@\n           enctype="multipart/form-data">\n         <fieldset>\n           <legend i18n:translate="legend_bulk_upload">\n-            Bulk-upload aliases\n+            Bulk-upload alternative urls\n           </legend>\n \n           <p i18n:translate="description_bulk_upload">\n-            Add many aliases at once by uploading a CSV file. The first column should be the path to\n+            Add many alternative urls at once by uploading a CSV file. The first column should be the path to\n             redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative,\n             starting with a slash (/).\n           </p>\n@@ -123,7 +123,7 @@\n         <fieldset\n           tal:define="batch view/redirects">\n           <legend i18n:translate="legend_all_existing_aliases">\n-            All existing aliases for this site\n+            All existing alternative urls for this site\n           </legend>\n \n           <label for="filter-existing-aliases-q" i18n:translate="">Filter by prefix</label>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex 558e9c44e..a1e23cf6d 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -13,7 +13,7 @@\n       <h1\n           class="documentFirstHeading"\n           i18n:translate="heading_add_aliases">\n-        Manage aliases\n+        Manage alternative urls\n       </h1>\n \n       <dl\n@@ -23,7 +23,7 @@\n           Info\n         </dt>\n         <dd i18n:translate="help_sharing_page_default_page">\n-          You are managing the aliases of a default view in a container.\n+          You are managing the alternative urls of a default view in a container.\n           To manage them for the entire container,\n           <a\n               i18n:name="go_here"\n@@ -36,7 +36,7 @@\n       </dl>\n \n       <p i18n:translate="description_adding_aliases">\n-        Using this form, you can manage aliases for an item. This\n+        Using this form, you can manage alternative urls for an item. This\n         is an easy way to make an item available under two different URLs.\n       </p>\n \n@@ -45,7 +45,7 @@\n           method="post">\n         <fieldset>\n           <legend i18n:translate="legend_existing_aliases">\n-            Existing aliases for this item\n+            Existing alternative urls for this item\n           </legend>\n \n           <div class="field"\n@@ -55,7 +55,7 @@\n             <label\n                 for="title"\n                 i18n:translate="label_alias">\n-              Alias\n+              Alternative url\n             </label>\n \n             <span\n@@ -71,7 +71,7 @@\n             </div>\n \n             <div class="formHelp" i18n:translate="help_alias">\n-              Enter the absolute path where the alias should exist. The path must start with \'/\'.\n+              Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n             </div>\n \n             <input\n@@ -98,7 +98,7 @@\n           method="post">\n         <fieldset>\n           <legend i18n:translate="legend_existing_aliases">\n-            Existing aliases for this item\n+            Existing alternative urls for this item\n           </legend>\n \n           <tal:redirects repeat="redirect view/redirects">\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 465cd0963..37f0ade78 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -35,17 +35,17 @@ def absolutize_path(path, is_source=True):\n     err = None\n     if not path:\n         if is_source:\n-            err = _(u"You have to enter an alias.")\n+            err = _(u"You have to enter an alternative url.")\n         else:\n             err = _(u"You have to enter a target.")\n     elif not path.startswith(\'/\'):\n         if is_source:\n-            err = _(u"Alias path must start with a slash.")\n+            err = _(u"Alternative url path must start with a slash.")\n         else:\n             err = _(u"Target path must start with a slash.")\n     elif \'@@\' in path:\n         if is_source:\n-            err = _(u"Alias path must not be a view.")\n+            err = _(u"Alternative url path must not be a view.")\n         else:\n             err = _(u"Target path must not be a view.")\n     else:\n@@ -57,16 +57,16 @@ def absolutize_path(path, is_source=True):\n             # Check whether already exists in storage\n             storage = getUtility(IRedirectionStorage)\n             if storage.get(path):\n-                err = _(u"The provided alias already exists!")\n+                err = _(u"The provided alternative url already exists!")\n             else:\n                 # Check whether obj exists at source path.\n                 # A redirect would be useless then.\n                 result = catalog.searchResults(path={"query": path})\n                 if len(result) > 0:\n-                    err = _(u"Cannot use an existing object as alias.")\n+                    err = _(u"Cannot use an existing object as alternative url.")\n                 else:\n                     if portal.unrestrictedTraverse(path, None) is not None:\n-                        err = _(u"Cannot use a working path as alias.")\n+                        err = _(u"Cannot use a working path as alternative url.")\n         else:\n             # Check whether obj exists at target path\n             result = catalog.searchResults(path={"query": path})\n@@ -106,15 +106,15 @@ def __call__(self):\n             else:\n                 del form[\'redirection\']\n                 storage.add(redirection, "/".join(self.context.getPhysicalPath()))\n-                status.addStatusMessage(_(u"Alias added."), type=\'info\')\n+                status.addStatusMessage(_(u"Alternative url added."), type=\'info\')\n         elif \'form.button.Remove\' in form:\n             redirects = form.get(\'redirects\', ())\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) > 1:\n-                status.addStatusMessage(_(u"Aliases removed."), type=\'info\')\n+                status.addStatusMessage(_(u"Alternative urls removed."), type=\'info\')\n             else:\n-                status.addStatusMessage(_(u"Alias removed."), type=\'info\')\n+                status.addStatusMessage(_(u"Alternative url removed."), type=\'info\')\n \n         return self.index(errors=errors)\n \n@@ -209,11 +209,11 @@ def __call__(self):\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) == 0:\n-                status.addStatusMessage(_(u"No aliases selected for removal."), type=\'info\')\n+                status.addStatusMessage(_(u"No alternative urls selected for removal."), type=\'info\')\n             elif len(redirects) > 1:\n-                status.addStatusMessage(_(u"Aliases removed."), type=\'info\')\n+                status.addStatusMessage(_(u"Alternative urls removed."), type=\'info\')\n             else:\n-                status.addStatusMessage(_(u"Alias removed."), type=\'info\')\n+                status.addStatusMessage(_(u"Alternative url removed."), type=\'info\')\n         elif \'form.button.Add\' in form:\n             self.add(form[\'redirection\'], form[\'target_path\'], portal, storage, status)\n         elif \'form.button.Upload\' in form:\n@@ -236,7 +236,7 @@ def add(self, redirection, target, portal, storage, status):\n             err = target_err\n         else:\n             if abs_redirection == abs_target:\n-                err = _(u"Aliases that point to themselves will cause"\n+                err = _(u"Alternative urls that point to themselves will cause"\n                         u"an endless cycle of redirects.")\n                 # TODO: detect indirect recursion\n \n@@ -244,7 +244,7 @@ def add(self, redirection, target, portal, storage, status):\n             status.addStatusMessage(_(err), type=\'error\')\n         else:\n             storage.add(abs_redirection, abs_target)\n-            status.addStatusMessage(_(u"Alias {0} &rarr; {1} added.").format(abs_redirection, abs_target),\n+            status.addStatusMessage(_(u"Alternative url {0} &rarr; {1} added.").format(abs_redirection, abs_target),\n                                     type=\'info\')\n \n     def upload(self, file, portal, storage, status):\n@@ -277,7 +277,7 @@ def upload(self, file, portal, storage, status):\n                 else:\n                     if abs_redirection == abs_target:\n                         # TODO: detect indirect recursion\n-                        err = _(u"Aliases that point to themselves will cause"\n+                        err = _(u"Alternative urls that point to themselves will cause"\n                                 u"an endless cycle of redirects.")\n             else:\n                 err = _(u"Each line must have 2 columns.")\n@@ -293,7 +293,7 @@ def upload(self, file, portal, storage, status):\n         if not had_errors:\n             for abs_redirection, abs_target in successes:\n                 storage.add(abs_redirection, abs_target)\n-            status.addStatusMessage(_(u"%i aliases added.") % len(successes), type=\'info\')\n+            status.addStatusMessage(_(u"%i alternative urls added.") % len(successes), type=\'info\')\n \n     @memoize\n     def view_url(self):\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 394df203c..154734f98 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -133,11 +133,11 @@ def test_redirection_controlpanel_redirect_alias_exists(self):\n \n         self.assertTrue(\n             storage.get(storage_alias) == storage_target,\n-            \'{0} not target of alias!\'.format(storage_target)\n+            \'{0} not target of alternative url!\'.format(storage_target)\n         )\n         self.assertTrue(\n-            \'The provided alias already exists!\' in self.browser.contents,\n-            u\'Message "alias already exists" not in page!\'\n+            \'The provided alternative url already exists!\' in self.browser.contents,\n+            u\'Message "alternative url already exists" not in page!\'\n         )\n \n     def test_redirection_controlpanel_filtering(self):\n@@ -234,8 +234,8 @@ def test_redirection_controlpanel_missing_slash_alias(self):\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n-            \'Alias path must start with a slash.\' in self.browser.contents,\n-            u\'Errormessage for missing slash on alias path missing\'\n+            \'Alternative url path must start with a slash.\' in self.browser.contents,\n+            u\'Errormessage for missing slash on alternative url missing\'\n         )\n \n     def test_absolutize_path(self):\n@@ -247,7 +247,7 @@ def test_absolutize_path(self):\n         # A path is required.\n         self.assertEqual(\n             ap(\'\'),\n-            (\'\', \'You have to enter an alias.\'))\n+            (\'\', \'You have to enter an alternative url.\'))\n         self.assertEqual(\n             ap(\'\', is_source=False),\n             (\'\', \'You have to enter a target.\'))\n@@ -255,10 +255,10 @@ def test_absolutize_path(self):\n         # relative paths are not accepted\n         self.assertEqual(\n             ap(\'foo\'),\n-            (\'foo\', \'Alias path must start with a slash.\'))\n+            (\'foo\', \'Alternative url path must start with a slash.\'))\n         self.assertEqual(\n             ap(\'foo\', is_source=True),\n-            (\'foo\', \'Alias path must start with a slash.\'))\n+            (\'foo\', \'Alternative url path must start with a slash.\'))\n         self.assertEqual(\n             ap(\'foo\', is_source=False),\n             (\'foo\', \'Target path must start with a slash.\'))\n@@ -281,14 +281,14 @@ def test_absolutize_path(self):\n         # A source must not exist.\n         self.assertEqual(\n             ap(\'/test-folder\'),\n-            (\'/plone/test-folder\', \'Cannot use an existing object as alias.\'))\n+            (\'/plone/test-folder\', \'Cannot use an existing object as alternative url.\'))\n         # More general: a source must not be traversable already.\n         self.assertEqual(\n             ap(\'/view\'),\n-            (\'/plone/view\', \'Cannot use a working path as alias.\'))\n+            (\'/plone/view\', \'Cannot use a working path as alternative url.\'))\n         self.assertEqual(\n             ap(\'/@@overview-controlpanel\'),\n-            (\'/@@overview-controlpanel\', \'Alias path must not be a view.\'))\n+            (\'/@@overview-controlpanel\', \'Alternative url path must not be a view.\'))\n \n         # A source must not already exist in the redirect list.\n         storage = getUtility(IRedirectionStorage)\n@@ -297,4 +297,4 @@ def test_absolutize_path(self):\n                     \'{0:s}/test-folder\'.format(portal_path))\n         self.assertEqual(\n             ap(\'/foo\', is_source=True),\n-            (\'/plone/foo\', \'The provided alias already exists!\'))\n+            (\'/plone/foo\', \'The provided alternative url already exists!\'))\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T11:12:37+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/81f8c91c23d4d99bb7a0bd1c8ebd690645c357ed

Redirection: ran isort and black over files.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 37f0ade78..d26480097 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -13,6 +13,7 @@\n \n import csv\n \n+\n _ = MessageFactory(\'plone\')\n \n \n@@ -63,10 +64,14 @@ def absolutize_path(path, is_source=True):\n                 # A redirect would be useless then.\n                 result = catalog.searchResults(path={"query": path})\n                 if len(result) > 0:\n-                    err = _(u"Cannot use an existing object as alternative url.")\n+                    err = _(\n+                        u"Cannot use an existing object as alternative url."\n+                    )\n                 else:\n                     if portal.unrestrictedTraverse(path, None) is not None:\n-                        err = _(u"Cannot use a working path as alternative url.")\n+                        err = _(\n+                            u"Cannot use a working path as alternative url."\n+                        )\n         else:\n             # Check whether obj exists at target path\n             result = catalog.searchResults(path={"query": path})\n@@ -77,7 +82,6 @@ def absolutize_path(path, is_source=True):\n \n \n class RedirectsView(BrowserView):\n-\n     def redirects(self):\n         storage = getUtility(IRedirectionStorage)\n         portal = getUtility(ISiteRoot)\n@@ -85,11 +89,8 @@ def redirects(self):\n         portal_path = "/".join(portal.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n         for redirect in redirects:\n-            path = redirect[len(portal_path):]\n-            yield {\n-                \'redirect\': redirect,\n-                \'path\': path,\n-            }\n+            path = redirect[len(portal_path) :]\n+            yield {\'redirect\': redirect, \'path\': path}\n \n     def __call__(self):\n         storage = getUtility(IRedirectionStorage)\n@@ -99,22 +100,32 @@ def __call__(self):\n         errors = {}\n \n         if \'form.button.Add\' in form:\n-            redirection, err = absolutize_path(form.get(\'redirection\'), is_source=True)\n+            redirection, err = absolutize_path(\n+                form.get(\'redirection\'), is_source=True\n+            )\n             if err:\n                 errors[\'redirection\'] = err\n                 status.addStatusMessage(err, type=\'error\')\n             else:\n                 del form[\'redirection\']\n-                storage.add(redirection, "/".join(self.context.getPhysicalPath()))\n-                status.addStatusMessage(_(u"Alternative url added."), type=\'info\')\n+                storage.add(\n+                    redirection, "/".join(self.context.getPhysicalPath())\n+                )\n+                status.addStatusMessage(\n+                    _(u"Alternative url added."), type=\'info\'\n+                )\n         elif \'form.button.Remove\' in form:\n             redirects = form.get(\'redirects\', ())\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) > 1:\n-                status.addStatusMessage(_(u"Alternative urls removed."), type=\'info\')\n+                status.addStatusMessage(\n+                    _(u"Alternative urls removed."), type=\'info\'\n+                )\n             else:\n-                status.addStatusMessage(_(u"Alternative url removed."), type=\'info\')\n+                status.addStatusMessage(\n+                    _(u"Alternative url removed."), type=\'info\'\n+                )\n \n         return self.index(errors=errors)\n \n@@ -149,30 +160,26 @@ def __len__(self):\n     def __getitem__(self, item):\n         redirect = self.data[item]\n         if redirect.startswith(self.portal_path):\n-            path = redirect[self.portal_path_len:]\n+            path = redirect[self.portal_path_len :]\n         else:\n             path = redirect\n         redirect_to = self.storage.get(redirect)\n         if redirect_to.startswith(self.portal_path):\n-            redirect_to = redirect_to[self.portal_path_len:]\n-        return {\n-            \'redirect\': redirect,\n-            \'path\': path,\n-            \'redirect-to\': redirect_to,\n-        }\n+            redirect_to = redirect_to[self.portal_path_len :]\n+        return {\'redirect\': redirect, \'path\': path, \'redirect-to\': redirect_to}\n \n \n class RedirectsBatchView(PloneBatchView):\n     def make_link(self, pagenumber=None, omit_params=None):\n         if omit_params is None:\n             omit_params = [\'ajax_load\']\n-        url = super(RedirectsBatchView, self).make_link(pagenumber,\n-                                                        omit_params)\n+        url = super(RedirectsBatchView, self).make_link(\n+            pagenumber, omit_params\n+        )\n         return u\'{0:s}#manage-existing-aliases\'.format(url)\n \n \n class RedirectsControlPanel(BrowserView):\n-\n     def __init__(self, context, request):\n         super(RedirectsControlPanel, self).__init__(context, request)\n         self.errors = []\n@@ -194,7 +201,7 @@ def redirects(self):\n             RedirectionSet(self.request.form.get(\'q\', \'\')),\n             15,\n             int(self.request.form.get(\'b_start\', \'0\')),\n-            orphan=1\n+            orphan=1,\n         )\n \n     def __call__(self):\n@@ -209,13 +216,26 @@ def __call__(self):\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) == 0:\n-                status.addStatusMessage(_(u"No alternative urls selected for removal."), type=\'info\')\n+                status.addStatusMessage(\n+                    _(u"No alternative urls selected for removal."),\n+                    type=\'info\',\n+                )\n             elif len(redirects) > 1:\n-                status.addStatusMessage(_(u"Alternative urls removed."), type=\'info\')\n+                status.addStatusMessage(\n+                    _(u"Alternative urls removed."), type=\'info\'\n+                )\n             else:\n-                status.addStatusMessage(_(u"Alternative url removed."), type=\'info\')\n+                status.addStatusMessage(\n+                    _(u"Alternative url removed."), type=\'info\'\n+                )\n         elif \'form.button.Add\' in form:\n-            self.add(form[\'redirection\'], form[\'target_path\'], portal, storage, status)\n+            self.add(\n+                form[\'redirection\'],\n+                form[\'target_path\'],\n+                portal,\n+                storage,\n+                status,\n+            )\n         elif \'form.button.Upload\' in form:\n             self.upload(form[\'file\'], portal, storage, status)\n \n@@ -236,23 +256,31 @@ def add(self, redirection, target, portal, storage, status):\n             err = target_err\n         else:\n             if abs_redirection == abs_target:\n-                err = _(u"Alternative urls that point to themselves will cause"\n-                        u"an endless cycle of redirects.")\n+                err = _(\n+                    u"Alternative urls that point to themselves will cause"\n+                    u"an endless cycle of redirects."\n+                )\n                 # TODO: detect indirect recursion\n \n         if err:\n             status.addStatusMessage(_(err), type=\'error\')\n         else:\n             storage.add(abs_redirection, abs_target)\n-            status.addStatusMessage(_(u"Alternative url {0} &rarr; {1} added.").format(abs_redirection, abs_target),\n-                                    type=\'info\')\n+            status.addStatusMessage(\n+                _(u"Alternative url {0} &rarr; {1} added.").format(\n+                    abs_redirection, abs_target\n+                ),\n+                type=\'info\',\n+            )\n \n     def upload(self, file, portal, storage, status):\n         """Add the redirections from the CSV file `file`. If anything goes wrong, do nothing."""\n \n         # No file picked. Theres gotta be a better way to handle this.\n         if not file.filename:\n-            status.addStatusMessage(_(u"Please pick a file to upload."), type=\'info\')\n+            status.addStatusMessage(\n+                _(u"Please pick a file to upload."), type=\'info\'\n+            )\n             return\n         # Turn all kinds of newlines into LF ones. The csv module doesn\'t do\n         # its own newline sniffing and requires either \\n or \\r.\n@@ -268,8 +296,12 @@ def upload(self, file, portal, storage, status):\n         for i, fields in enumerate(csv.reader(file, dialect)):\n             if len(fields) == 2:\n                 redirection, target = fields\n-                abs_redirection, err = absolutize_path(redirection, is_source=True)\n-                abs_target, target_err = absolutize_path(target, is_source=False)\n+                abs_redirection, err = absolutize_path(\n+                    redirection, is_source=True\n+                )\n+                abs_target, target_err = absolutize_path(\n+                    target, is_source=False\n+                )\n                 if err and target_err:\n                     err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n                 elif target_err:\n@@ -277,8 +309,10 @@ def upload(self, file, portal, storage, status):\n                 else:\n                     if abs_redirection == abs_target:\n                         # TODO: detect indirect recursion\n-                        err = _(u"Alternative urls that point to themselves will cause"\n-                                u"an endless cycle of redirects.")\n+                        err = _(\n+                            u"Alternative urls that point to themselves will cause"\n+                            u"an endless cycle of redirects."\n+                        )\n             else:\n                 err = _(u"Each line must have 2 columns.")\n \n@@ -287,13 +321,20 @@ def upload(self, file, portal, storage, status):\n                     successes.append((abs_redirection, abs_target))\n             else:\n                 had_errors = True\n-                self.errors.append(dict(line_number=i + 1, line=dialect.delimiter.join(fields),\n-                                        message=err))\n+                self.errors.append(\n+                    dict(\n+                        line_number=i + 1,\n+                        line=dialect.delimiter.join(fields),\n+                        message=err,\n+                    )\n+                )\n \n         if not had_errors:\n             for abs_redirection, abs_target in successes:\n                 storage.add(abs_redirection, abs_target)\n-            status.addStatusMessage(_(u"%i alternative urls added.") % len(successes), type=\'info\')\n+            status.addStatusMessage(\n+                _(u"%i alternative urls added.") % len(successes), type=\'info\'\n+            )\n \n     @memoize\n     def view_url(self):\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 154734f98..c614d13ef 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -1,19 +1,18 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.PloneBatch import Batch\n-from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n-from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing.z2 import Browser\n-\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n-from Products.CMFPlone.testing import \\\n-    PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n-\n import math\n-import unittest\n import transaction\n+import unittest\n+\n \n class RedirectionControlPanelFunctionalTest(unittest.TestCase):\n     """Test that changes in the mail control panel are actually\n@@ -30,7 +29,7 @@ def setUp(self):\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n     """\n@@ -54,8 +53,9 @@ def test_mail_controlpanel_sidebar(self):\n     """\n \n     def test_redirection_controlpanel_view(self):\n-        view = getMultiAdapter((self.portal, self.portal.REQUEST),\n-                               name="redirection-controlpanel")\n+        view = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="redirection-controlpanel"\n+        )\n         self.assertTrue(view())\n \n     def test_redirection_controlpanel_add_redirect(self):\n@@ -64,49 +64,64 @@ def test_redirection_controlpanel_add_redirect(self):\n         target_path = \'/test-folder\'\n         storage_path = \'/plone/alias-folder\'\n \n-        self.browser.open(\n-            "%s/@@redirection-controlpanel" % self.portal_url)\n-        self.browser.getControl(\n-            name=\'redirection\').value = redirection_path\n-        self.browser.getControl(\n-            name=\'target_path\').value = target_path\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = redirection_path\n+        self.browser.getControl(name=\'target_path\').value = target_path\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n             storage.has_path(storage_path),\n-            u\'Redirection storage should have path "{0}"\'.format(storage_path)\n+            u\'Redirection storage should have path "{0}"\'.format(storage_path),\n         )\n \n     def test_redirection_controlpanel_set(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n-            storage.add(\'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n-                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n         redirects = RedirectionSet()\n         self.assertEqual(len(redirects), 1000)\n-        self.assertDictEqual(redirects[0], {\n-            \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n-            \'path\': \'/foo/0\', \'redirect-to\': \'/bar/0\'\n-        })\n-        self.assertDictEqual(redirects[999], {\n-            \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n-            \'path\': \'/foo/999\', \'redirect-to\': \'/bar/999\'\n-        })\n+        self.assertDictEqual(\n+            redirects[0],\n+            {\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'path\': \'/foo/0\',\n+                \'redirect-to\': \'/bar/0\',\n+            },\n+        )\n+        self.assertDictEqual(\n+            redirects[999],\n+            {\n+                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n+                \'path\': \'/foo/999\',\n+                \'redirect-to\': \'/bar/999\',\n+            },\n+        )\n         self.assertEqual(len(list(iter(redirects))), 1000)\n-        self.assertDictEqual(list(iter(redirects))[0], {\n-            \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n-            \'path\': \'/foo/0\', \'redirect-to\': \'/bar/0\'\n-        })\n+        self.assertDictEqual(\n+            list(iter(redirects))[0],\n+            {\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'path\': \'/foo/0\',\n+                \'redirect-to\': \'/bar/0\',\n+            },\n+        )\n \n     def test_redirection_controlpanel_batching(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n-            storage.add(\'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n-                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n-        view = getMultiAdapter((self.layer[\'portal\'], self.layer[\'request\']),\n-                               name=\'redirection-controlpanel\')\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], self.layer[\'request\']),\n+            name=\'redirection-controlpanel\',\n+        )\n         # Test that view/redirects returns batch\n         self.assertIsInstance(view.redirects(), Batch)\n \n@@ -123,32 +138,34 @@ def test_redirection_controlpanel_redirect_alias_exists(self):\n         storage.add(storage_alias, storage_target)\n         transaction.commit()\n \n-        self.browser.open(\n-            "%s/@@redirection-controlpanel" % self.portal_url)\n-        self.browser.getControl(\n-            name=\'redirection\').value = path_alias\n-        self.browser.getControl(\n-            name=\'target_path\').value = path_target\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n             storage.get(storage_alias) == storage_target,\n-            \'{0} not target of alternative url!\'.format(storage_target)\n+            \'{0} not target of alternative url!\'.format(storage_target),\n         )\n         self.assertTrue(\n-            \'The provided alternative url already exists!\' in self.browser.contents,\n-            u\'Message "alternative url already exists" not in page!\'\n+            \'The provided alternative url already exists!\'\n+            in self.browser.contents,\n+            u\'Message "alternative url already exists" not in page!\',\n         )\n \n     def test_redirection_controlpanel_filtering(self):\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n-            storage.add(\'{0:s}/foo1/{1:s}\'.format(portal_path, str(i)),\n-                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+            storage.add(\n+                \'{0:s}/foo1/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n         for i in range(1000):\n-            storage.add(\'{0:s}/foo2/{1:s}\'.format(portal_path, str(i)),\n-                        \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)))\n+            storage.add(\n+                \'{0:s}/foo2/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n \n         redirects = RedirectionSet()\n         self.assertEqual(len(redirects), 2000)\n@@ -161,107 +178,104 @@ def test_redirection_controlpanel_filtering(self):\n \n         request = self.layer[\'request\'].clone()\n         request.form[\'q\'] = \'/foo\'\n-        view = getMultiAdapter((self.layer[\'portal\'], request),\n-                               name=\'redirection-controlpanel\')\n-        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.))\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n \n         request = self.layer[\'request\'].clone()\n         request.form[\'q\'] = \'/foo1\'\n-        view = getMultiAdapter((self.layer[\'portal\'], request),\n-                               name=\'redirection-controlpanel\')\n-        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.))\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.0))\n \n         request = self.layer[\'request\'].clone()\n         request.form[\'q\'] = \'/foo2\'\n-        view = getMultiAdapter((self.layer[\'portal\'], request),\n-                               name=\'redirection-controlpanel\')\n-        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.))\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.0))\n \n         request = self.layer[\'request\'].clone()\n-        view = getMultiAdapter((self.layer[\'portal\'], request),\n-                               name=\'redirection-controlpanel\')\n-        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.))\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n \n         # Filtering without new request does not have effect because memoize\n         request.form[\'q\'] = \'/foo2\'\n-        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.))\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n \n     def test_redirection_controlpanel_redirect_no_target(self):\n         path_alias = \'/alias\'\n         path_target = \'/not-existing\'\n \n-        self.browser.open(\n-            "%s/@@redirection-controlpanel" % self.portal_url)\n-        self.browser.getControl(\n-            name=\'redirection\').value = path_alias\n-        self.browser.getControl(\n-            name=\'target_path\').value = path_target\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n-            \'The provided target object does not exist.\' in self.browser.contents,\n-            u\'Message "target does not exist" not in page!\'\n+            \'The provided target object does not exist.\'\n+            in self.browser.contents,\n+            u\'Message "target does not exist" not in page!\',\n         )\n \n     def test_redirection_controlpanel_missing_slash_target(self):\n         path_alias = \'/alias\'\n         path_target = \'Members\'\n \n-        self.browser.open(\n-            "%s/@@redirection-controlpanel" % self.portal_url)\n-        self.browser.getControl(\n-            name=\'redirection\').value = path_alias\n-        self.browser.getControl(\n-            name=\'target_path\').value = path_target\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n             \'Target path must start with a slash.\' in self.browser.contents,\n-            u\'Errormessage for missing slash on target path missing\'\n+            u\'Errormessage for missing slash on target path missing\',\n         )\n \n-\n     def test_redirection_controlpanel_missing_slash_alias(self):\n         path_alias = \'alias\'\n         path_target = \'/Members\'\n \n-        self.browser.open(\n-            "%s/@@redirection-controlpanel" % self.portal_url)\n-        self.browser.getControl(\n-            name=\'redirection\').value = path_alias\n-        self.browser.getControl(\n-            name=\'target_path\').value = path_target\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n-            \'Alternative url path must start with a slash.\' in self.browser.contents,\n-            u\'Errormessage for missing slash on alternative url missing\'\n+            \'Alternative url path must start with a slash.\'\n+            in self.browser.contents,\n+            u\'Errormessage for missing slash on alternative url missing\',\n         )\n \n     def test_absolutize_path(self):\n         # absolutize_path is a helper function that returns a tuple\n         # of absolute path and error message.\n         from Products.CMFPlone.controlpanel.browser.redirects import (\n-            absolutize_path as ap)\n+            absolutize_path as ap,\n+        )\n \n         # A path is required.\n+        self.assertEqual(ap(\'\'), (\'\', \'You have to enter an alternative url.\'))\n         self.assertEqual(\n-            ap(\'\'),\n-            (\'\', \'You have to enter an alternative url.\'))\n-        self.assertEqual(\n-            ap(\'\', is_source=False),\n-            (\'\', \'You have to enter a target.\'))\n+            ap(\'\', is_source=False), (\'\', \'You have to enter a target.\')\n+        )\n \n         # relative paths are not accepted\n         self.assertEqual(\n-            ap(\'foo\'),\n-            (\'foo\', \'Alternative url path must start with a slash.\'))\n+            ap(\'foo\'), (\'foo\', \'Alternative url path must start with a slash.\')\n+        )\n         self.assertEqual(\n             ap(\'foo\', is_source=True),\n-            (\'foo\', \'Alternative url path must start with a slash.\'))\n+            (\'foo\', \'Alternative url path must start with a slash.\'),\n+        )\n         self.assertEqual(\n             ap(\'foo\', is_source=False),\n-            (\'foo\', \'Target path must start with a slash.\'))\n+            (\'foo\', \'Target path must start with a slash.\'),\n+        )\n \n         # absolute paths are good\n         self.assertEqual(ap(\'/foo\'), (\'/plone/foo\', None))\n@@ -270,31 +284,45 @@ def test_absolutize_path(self):\n         # for targets, an object must exist on the path\n         self.assertEqual(\n             ap(\'/foo\', is_source=False),\n-            (\'/plone/foo\', \'The provided target object does not exist.\'))\n+            (\'/plone/foo\', \'The provided target object does not exist.\'),\n+        )\n         self.assertEqual(\n-            ap(\'/test-folder\', is_source=False),\n-            (\'/plone/test-folder\', None))\n+            ap(\'/test-folder\', is_source=False), (\'/plone/test-folder\', None)\n+        )\n         self.assertEqual(\n             ap(\'/test-folder/@@sharing\', is_source=False),\n-            (\'/test-folder/@@sharing\', \'Target path must not be a view.\'))\n+            (\'/test-folder/@@sharing\', \'Target path must not be a view.\'),\n+        )\n \n         # A source must not exist.\n         self.assertEqual(\n             ap(\'/test-folder\'),\n-            (\'/plone/test-folder\', \'Cannot use an existing object as alternative url.\'))\n+            (\n+                \'/plone/test-folder\',\n+                \'Cannot use an existing object as alternative url.\',\n+            ),\n+        )\n         # More general: a source must not be traversable already.\n         self.assertEqual(\n             ap(\'/view\'),\n-            (\'/plone/view\', \'Cannot use a working path as alternative url.\'))\n+            (\'/plone/view\', \'Cannot use a working path as alternative url.\'),\n+        )\n         self.assertEqual(\n             ap(\'/@@overview-controlpanel\'),\n-            (\'/@@overview-controlpanel\', \'Alternative url path must not be a view.\'))\n+            (\n+                \'/@@overview-controlpanel\',\n+                \'Alternative url path must not be a view.\',\n+            ),\n+        )\n \n         # A source must not already exist in the redirect list.\n         storage = getUtility(IRedirectionStorage)\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n-        storage.add(\'{0:s}/foo\'.format(portal_path),\n-                    \'{0:s}/test-folder\'.format(portal_path))\n+        storage.add(\n+            \'{0:s}/foo\'.format(portal_path),\n+            \'{0:s}/test-folder\'.format(portal_path),\n+        )\n         self.assertEqual(\n             ap(\'/foo\', is_source=True),\n-            (\'/plone/foo\', \'The provided alternative url already exists!\'))\n+            (\'/plone/foo\', \'The provided alternative url already exists!\'),\n+        )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T11:18:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/757d93e9571088d8ec6b698dd8848b9719f3552b

Redirection: use 'URL Management' as title.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 11a447238..7631a1975 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -44,7 +44,7 @@\n       </dl>\n \n       <h1 i18n:translate="heading_add_aliases">\n-        Manage alternative urls\n+        URL Management\n       </h1>\n \n       <form\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex a1e23cf6d..d0a20d251 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -13,7 +13,7 @@\n       <h1\n           class="documentFirstHeading"\n           i18n:translate="heading_add_aliases">\n-        Manage alternative urls\n+        URL Management\n       </h1>\n \n       <dl\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T11:35:15+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/f341a3151a094e7e77a0c37ac62b8cf414520e45

Redirection: let both add alias forms look more like each other.

The view on the context had nice help text, which was missing in the controlpanel.
Use more same labels.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 7631a1975..915678054 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -55,15 +55,51 @@\n             Add a new alternative url\n           </legend>\n \n-          <label for="redirection">Alternative Url Path</label>\n+          <label\n+              for="redirection"\n+              i18n:translate="label_alias">\n+            Alternative url path\n+          </label>\n+\n+          <span\n+              class="fieldRequired"\n+              title="Required"\n+              i18n:attributes="title"\n+              i18n:translate="label_required">\n+            (Required)\n+          </span>\n+\n+          <div class="formHelp" i18n:translate="help_alias">\n+            Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+          </div>\n+\n           <input\n               type="text"\n-              name="redirection">\n+              name="redirection"\n+              value="#"\n+              size="40"\n+              tal:attributes="value request/redirection | nothing;"/>\n \n           <label for="target_path">Target Path</label>\n+\n+          <span\n+              class="fieldRequired"\n+              title="Required"\n+              i18n:attributes="title"\n+              i18n:translate="label_required">\n+            (Required)\n+          </span>\n+\n+          <div class="formHelp" i18n:translate="help_target_path">\n+            Enter the absolute path of the target. The path must start with \'/\'.\n+          </div>\n+\n           <input\n               type="text"\n-              name="target_path">\n+              name="target_path"\n+              value="#"\n+              size="40"\n+              tal:attributes="value request/target_path | nothing;"/>\n \n           <div class="formControls">\n             <input class="context"\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex d0a20d251..6c5027e08 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -44,8 +44,8 @@\n           action="${view/view_url}"\n           method="post">\n         <fieldset>\n-          <legend i18n:translate="legend_existing_aliases">\n-            Existing alternative urls for this item\n+          <legend i18n:translate="add_alias">\n+            Add a new alternative url\n           </legend>\n \n           <div class="field"\n@@ -53,9 +53,9 @@\n                            redirection request/title | nothing;"\n                tal:attributes="class python:error and \'field error\' or \'field\'">\n             <label\n-                for="title"\n+                for="redirection"\n                 i18n:translate="label_alias">\n-              Alternative url\n+              Alternative url path\n             </label>\n \n             <span\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex d26480097..d1c71a775 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -229,20 +229,27 @@ def __call__(self):\n                     _(u"Alternative url removed."), type=\'info\'\n                 )\n         elif \'form.button.Add\' in form:\n-            self.add(\n+            err = self.add(\n                 form[\'redirection\'],\n                 form[\'target_path\'],\n                 portal,\n                 storage,\n                 status,\n             )\n+            if not err:\n+                # clear our the form\n+                del form[\'redirection\']\n+                del form[\'target_path\']\n         elif \'form.button.Upload\' in form:\n             self.upload(form[\'file\'], portal, storage, status)\n \n         return self.index()\n \n     def add(self, redirection, target, portal, storage, status):\n-        """Add the redirections from the form. If anything goes wrong, do nothing."""\n+        """Add the redirections from the form. If anything goes wrong, do nothing.\n+\n+        Returns error message or nothing.\n+        """\n         abs_target = \'\'\n         target_err = \'\'\n \n@@ -272,6 +279,7 @@ def add(self, redirection, target, portal, storage, status):\n                 ),\n                 type=\'info\',\n             )\n+        return err\n \n     def upload(self, file, portal, storage, status):\n         """Add the redirections from the CSV file `file`. If anything goes wrong, do nothing."""\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T12:22:27+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7c5d1c5ae0f8e06a86146ba672d76f4942017d3a

Redirection: improved form error handling.

Show the errors in the form fields, instead of only at the top of the form.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 915678054..827b549a6 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -9,7 +9,7 @@\n   <body>\n     <div metal:fill-slot="prefs_configlet_main">\n       <dl\n-          tal:condition="view/errors"\n+          tal:condition="view/csv_errors|nothing"\n           class="portalMessage error">\n         <dt>Error</dt>\n         <dd>\n@@ -21,7 +21,7 @@\n               border="0"\n               cellpadding="2"\n               cellspacing="0">\n-            <tr tal:repeat="error view/errors"\n+            <tr tal:repeat="error view/csv_errors"\n                 style="vertical-align: top">\n               <td nowrap="nowrap">\n                 <tal:block i18n:translate="label_bulk_upload_line">\n@@ -55,6 +55,10 @@\n             Add a new alternative url\n           </legend>\n \n+          <div class="field"\n+               tal:define="error view/form_errors/redirection|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+\n           <label\n               for="redirection"\n               i18n:translate="label_alias">\n@@ -69,6 +73,10 @@\n             (Required)\n           </span>\n \n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n           <div class="formHelp" i18n:translate="help_alias">\n             Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n           </div>\n@@ -79,6 +87,11 @@\n               value="#"\n               size="40"\n               tal:attributes="value request/redirection | nothing;"/>\n+          </div>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/target_path|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n \n           <label for="target_path">Target Path</label>\n \n@@ -90,6 +103,10 @@\n             (Required)\n           </span>\n \n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n           <div class="formHelp" i18n:translate="help_target_path">\n             Enter the absolute path of the target. The path must start with \'/\'.\n           </div>\n@@ -100,6 +117,7 @@\n               value="#"\n               size="40"\n               tal:attributes="value request/target_path | nothing;"/>\n+          </div>\n \n           <div class="formControls">\n             <input class="context"\n@@ -135,9 +153,30 @@\n             </code>\n           </p>\n \n-          <input\n+          <div class="field"\n+               tal:define="error view/form_errors/file|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+            <label\n+                for="file"\n+                i18n:translate="label_file">\n+              CSV file\n+            </label>\n+\n+            <span\n+                class="fieldRequired"\n+                title="Required"\n+                i18n:attributes="title"\n+                i18n:translate="label_required">\n+              (Required)\n+            </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+            <input\n               type="file"\n               name="file" />\n+          </div>\n \n           <div class="formControls">\n             <input\n@@ -178,6 +217,11 @@\n                  i18n:attributes="value" />\n           </div>\n \n+          <div class="field"\n+               tal:define="error view/form_errors/remove_redirects|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'"\n+               tal:content="error" />\n+\n           <tal:redirects repeat="redirect batch">\n             <div>\n               <label>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex 6c5027e08..719d00d84 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -49,8 +49,7 @@\n           </legend>\n \n           <div class="field"\n-               tal:define="error options/errors/redirection|nothing;\n-                           redirection request/title | nothing;"\n+               tal:define="error options/errors/redirection|nothing"\n                tal:attributes="class python:error and \'field error\' or \'field\'">\n             <label\n                 for="redirection"\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex d1c71a775..b56b74f8e 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -180,11 +180,6 @@ def make_link(self, pagenumber=None, omit_params=None):\n \n \n class RedirectsControlPanel(BrowserView):\n-    def __init__(self, context, request):\n-        super(RedirectsControlPanel, self).__init__(context, request)\n-        self.errors = []\n-        # list of tuples: (line_number, absolute_redirection_path, err_msg, target)\n-\n     def batching(self):\n         return RedirectsBatchView(self.context, self.request)(self.redirects())\n \n@@ -210,16 +205,19 @@ def __call__(self):\n         request = self.request\n         form = request.form\n         status = IStatusMessage(self.request)\n+        # We make a difference between errors when uploading a csv,\n+        # and errors in form submit.\n+        self.csv_errors = []\n+        self.form_errors = {}\n \n         if \'form.button.Remove\' in form:\n             redirects = form.get(\'redirects\', ())\n             for redirect in redirects:\n                 storage.remove(redirect)\n             if len(redirects) == 0:\n-                status.addStatusMessage(\n-                    _(u"No alternative urls selected for removal."),\n-                    type=\'info\',\n-                )\n+                err = _(u"No alternative urls selected for removal.")\n+                status.addStatusMessage(err, type=\'error\')\n+                self.form_errors[\'remove_redirects\'] = err\n             elif len(redirects) > 1:\n                 status.addStatusMessage(\n                     _(u"Alternative urls removed."), type=\'info\'\n@@ -250,12 +248,12 @@ def add(self, redirection, target, portal, storage, status):\n \n         Returns error message or nothing.\n         """\n-        abs_target = \'\'\n-        target_err = \'\'\n-\n         abs_redirection, err = absolutize_path(redirection, is_source=True)\n-        if not err:\n-            abs_target, target_err = absolutize_path(target, is_source=False)\n+        if err:\n+            self.form_errors[\'redirection\'] = err\n+        abs_target, target_err = absolutize_path(target, is_source=False)\n+        if target_err:\n+            self.form_errors[\'target_path\'] = target_err\n \n         if err and target_err:\n             err = "{0} {1}".format(err, target_err)\n@@ -274,7 +272,7 @@ def add(self, redirection, target, portal, storage, status):\n         else:\n             storage.add(abs_redirection, abs_target)\n             status.addStatusMessage(\n-                _(u"Alternative url {0} &rarr; {1} added.").format(\n+                _(u"Alternative url from {0} to {1} added.").format(\n                     abs_redirection, abs_target\n                 ),\n                 type=\'info\',\n@@ -286,9 +284,9 @@ def upload(self, file, portal, storage, status):\n \n         # No file picked. Theres gotta be a better way to handle this.\n         if not file.filename:\n-            status.addStatusMessage(\n-                _(u"Please pick a file to upload."), type=\'info\'\n-            )\n+            err = _(u"Please pick a file to upload.")\n+            status.addStatusMessage(err, type=\'error\')\n+            self.form_errors[\'file\'] = err\n             return\n         # Turn all kinds of newlines into LF ones. The csv module doesn\'t do\n         # its own newline sniffing and requires either \\n or \\r.\n@@ -329,7 +327,7 @@ def upload(self, file, portal, storage, status):\n                     successes.append((abs_redirection, abs_target))\n             else:\n                 had_errors = True\n-                self.errors.append(\n+                self.csv_errors.append(\n                     dict(\n                         line_number=i + 1,\n                         line=dialect.delimiter.join(fields),\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T12:35:26+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/28e66d114fec9ff9a1e8561d3a198951dbd5014e

Redirection: improved i18n.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex 827b549a6..a4db6f6ef 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -11,7 +11,7 @@\n       <dl\n           tal:condition="view/csv_errors|nothing"\n           class="portalMessage error">\n-        <dt>Error</dt>\n+        <dt i18n:translate="">Error</dt>\n         <dd>\n           <p i18n:translate="error_bulk_upload">\n             No alternative urls were added. Please correct these errors in your CSV file and try again:\n@@ -93,7 +93,10 @@\n                tal:define="error view/form_errors/target_path|nothing"\n                tal:attributes="class python:error and \'field error\' or \'field\'">\n \n-          <label for="target_path">Target Path</label>\n+          <label for="target_path"\n+              i18n:translate="label_target_path">\n+              Target Path\n+          </label>\n \n           <span\n               class="fieldRequired"\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex b56b74f8e..46b9924b0 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -339,7 +339,11 @@ def upload(self, file, portal, storage, status):\n             for abs_redirection, abs_target in successes:\n                 storage.add(abs_redirection, abs_target)\n             status.addStatusMessage(\n-                _(u"%i alternative urls added.") % len(successes), type=\'info\'\n+                _(\n+                    u"${count} alternative urls added.",\n+                    mapping={\'count\': len(successes)},\n+                ),\n+                type=\'info\',\n             )\n \n     @memoize\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T12:48:42+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8c1ab3a69930ece7f81f7726cb84775103f6d610

Redirection: fixed CSV upload in Python 3.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py

b"diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 46b9924b0..e66896fb1 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -5,6 +5,7 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.utils import safe_text\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from six import StringIO\n@@ -290,7 +291,8 @@ def upload(self, file, portal, storage, status):\n             return\n         # Turn all kinds of newlines into LF ones. The csv module doesn't do\n         # its own newline sniffing and requires either \\n or \\r.\n-        file = StringIO('\\n'.join(file.read().splitlines()))\n+        contents = safe_text(file.read()).splitlines()\n+        file = StringIO('\\n'.join(contents))\n \n         # Use first two lines as a representative sample for guessing format,\n         # in case one is a bunch of headers.\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T14:32:44+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d5d4c8ab66b8c9f7d62b2cd4b6da2282eb106b42

Redirection: added controlpanel, object_button action, and permissions.

For the object_button action we have the 'Manage Context Aliases' permission.
For the controlpanel, we have the 'Manage Portal Aliases' permission.
Basically, in the context you need to be Editor, in the controlpanel you need to be Site Admin.

Files changed:
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
M Products/CMFPlone/controlpanel/browser/redirects-manage.pt
M Products/CMFPlone/profiles/default/actions.xml
M Products/CMFPlone/profiles/default/controlpanel.xml
M Products/CMFPlone/profiles/default/rolemap.xml

b'diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex 2dea057a3..ffab4c50d 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -291,12 +291,22 @@\n       permission="cmf.ManagePortal"\n       />\n \n+  <permission\n+      id="Products.CMFPlone.ManagePortalAliases"\n+      title="Manage Portal Aliases"\n+      />\n+\n+  <permission\n+      id="Products.CMFPlone.ManageContextAliases"\n+      title="Manage Context Aliases"\n+      />\n+\n   <browser:page\n       name="redirection-controlpanel"\n       for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n       class=".redirects.RedirectsControlPanel"\n       template="redirects-controlpanel.pt"\n-      permission="cmf.ManagePortal"\n+      permission="Products.CMFPlone.ManagePortalAliases"\n       />\n \n   <browser:page\n@@ -304,7 +314,7 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       class=".redirects.RedirectsView"\n       template="redirects-manage.pt"\n-      permission="cmf.ModifyPortalContent"\n+      permission="Products.CMFPlone.ManageContextAliases"\n       allowed_attributes="redirects view_url"\n       />\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nindex a4db6f6ef..e458585f8 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -43,7 +43,7 @@\n         </dd>\n       </dl>\n \n-      <h1 i18n:translate="heading_add_aliases">\n+      <h1 i18n:translate="">\n         URL Management\n       </h1>\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nindex 719d00d84..1ae3ba337 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -12,7 +12,7 @@\n         tal:define="context_state context/@@plone_context_state">\n       <h1\n           class="documentFirstHeading"\n-          i18n:translate="heading_add_aliases">\n+          i18n:translate="">\n         URL Management\n       </h1>\n \ndiff --git a/Products/CMFPlone/profiles/default/actions.xml b/Products/CMFPlone/profiles/default/actions.xml\nindex 4acce12ee..f0bce03ec 100644\n--- a/Products/CMFPlone/profiles/default/actions.xml\n+++ b/Products/CMFPlone/profiles/default/actions.xml\n@@ -204,6 +204,18 @@\n    </property>\n    <property name="visible">True</property>\n    <property name="modal" type="text">{}</property>\n+  </object>\n+    <object name="redirection" meta_type="CMF Action" i18n:domain="plone">\n+   <property name="title" i18n:translate="">URL Management</property>\n+   <property name="description" i18n:translate=""></property>\n+   <property\n+      name="url_expr">string: ${object_url}/@@manage-aliases</property>\n+   <property name="icon_expr"></property>\n+   <property name="available_expr"></property>\n+   <property name="permissions">\n+    <element value="Manage Context Aliases"/>\n+   </property>\n+   <property name="visible">True</property>\n   </object>\n  </object>\n  <object name="portal_tabs" meta_type="CMF Action Category">\ndiff --git a/Products/CMFPlone/profiles/default/controlpanel.xml b/Products/CMFPlone/profiles/default/controlpanel.xml\nindex 3f6b28269..ab20ff6ba 100644\n--- a/Products/CMFPlone/profiles/default/controlpanel.xml\n+++ b/Products/CMFPlone/profiles/default/controlpanel.xml\n@@ -187,4 +187,13 @@\n     i18n:attributes="title">\n   <permission>Manage portal</permission>\n  </configlet>\n+ <configlet title="URL Management" action_id="RedirectionTool"\n+    icon_expr="string:$portal_url/action_icon.png"\n+    appId="Plone" category="plone-general"\n+    condition_expr=""\n+    url_expr="string:${portal_url}/@@redirection-controlpanel"\n+    visible="True"\n+    i18n:attributes="title">\n+  <permission>Manage Portal Aliases</permission>\n+ </configlet>\n </object>\ndiff --git a/Products/CMFPlone/profiles/default/rolemap.xml b/Products/CMFPlone/profiles/default/rolemap.xml\nindex 54dd70182..04c4a4797 100644\n--- a/Products/CMFPlone/profiles/default/rolemap.xml\n+++ b/Products/CMFPlone/profiles/default/rolemap.xml\n@@ -203,5 +203,15 @@\n                 acquire="False">\n       <role name="Authenticated"/>\n     </permission>\n+    <permission name="Manage Context Aliases" acquire="True">\n+      <role name="Manager"/>\n+      <role name="Site Administrator"/>\n+      <role name="Owner"/>\n+      <role name="Editor"/>\n+    </permission>\n+    <permission name="Manage Portal Aliases" acquire="True">\n+      <role name="Manager"/>\n+      <role name="Site Administrator"/>\n+    </permission>\n   </permissions>\n </rolemap>\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T14:56:37+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/272439814aff7f006e28c082099877921c68affd

Redirection: removed redirection_manageable_types setting from Types controlpanel.

We either need this setting plus a boolean filter_redirection_types, default False,
which means we don't use the redirection_manageable_types setting.
Or we need a blacklist instead.
See https://github.com/plone/Products.CMFPlone/issues/1486#issuecomment-461402004

Files changed:
M Products/CMFPlone/interfaces/controlpanel.py

b'diff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py\nindex dcc0aecf0..dd52e532a 100644\n--- a/Products/CMFPlone/interfaces/controlpanel.py\n+++ b/Products/CMFPlone/interfaces/controlpanel.py\n@@ -1426,26 +1426,6 @@ class ITypesSchema(Interface):\n         value_type=schema.TextLine()\n     )\n \n-    redirection_manageable_types = schema.Tuple(\n-        title=_(u"Manage redirects for types"),\n-        description=_(u"Select the types for which the "\n-                      "aliases can be managed"),\n-        required=False,\n-        default=(\n-            \'Collection\',\n-            \'Document\',\n-            \'Event\',\n-            \'File\',\n-            \'Folder\',\n-            \'Image\',\n-            \'Link\',\n-            \'News Item\',\n-        ),\n-        missing_value=(),\n-        value_type=schema.Choice(\n-            source=\'plone.app.vocabularies.ReallyUserFriendlyTypes\')\n-    )\n-\n \n class IMailSchema(Interface):\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T16:58:34+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/29073a3a4a4696ce09bf0f73a7494ff61a3923ed

Redirection: for targets, accept external urls.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex e66896fb1..e7ebe6498 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -9,6 +9,7 @@\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from six import StringIO\n+from six.moves.urllib.parse import urlparse\n from zope.component import getUtility\n from zope.i18nmessageid import MessageFactory\n \n@@ -22,12 +23,13 @@ def absolutize_path(path, is_source=True):\n     """Create path including the path of the portal root.\n \n     The path must be absolute, so starting with a slash.\n+    Or it can be a full url.\n \n     If is_source is true, this is an alternative url\n     that will point to a target (unknown here).\n \n     If is_source is true, path is the path of a target.\n-    An object must exist at this path.\n+    An object must exist at this path, unless it is a full url.\n \n     Return a 2-tuple: (absolute redirection path,\n     an error message if something goes wrong and otherwise \'\').\n@@ -35,6 +37,7 @@ def absolutize_path(path, is_source=True):\n \n     portal = getUtility(ISiteRoot)\n     err = None\n+    is_external_url = False\n     if not path:\n         if is_source:\n             err = _(u"You have to enter an alternative url.")\n@@ -44,7 +47,13 @@ def absolutize_path(path, is_source=True):\n         if is_source:\n             err = _(u"Alternative url path must start with a slash.")\n         else:\n-            err = _(u"Target path must start with a slash.")\n+            # For targets, we accept external urls.\n+            # Do basic check.\n+            parsed = urlparse(path)\n+            if parsed.scheme in (\'https\', \'http\') and parsed.netloc:\n+                is_external_url = True\n+            else:\n+                err = _(u"Target path must start with a slash.")\n     elif \'@@\' in path:\n         if is_source:\n             err = _(u"Alternative url path must not be a view.")\n@@ -53,7 +62,7 @@ def absolutize_path(path, is_source=True):\n     else:\n         context_path = "/".join(portal.getPhysicalPath())\n         path = "{0}{1}".format(context_path, path)\n-    if not err:\n+    if not err and not is_external_url:\n         catalog = getToolByName(portal, \'portal_catalog\')\n         if is_source:\n             # Check whether already exists in storage\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex c614d13ef..fbb433379 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -326,3 +326,29 @@ def test_absolutize_path(self):\n             ap(\'/foo\', is_source=True),\n             (\'/plone/foo\', \'The provided alternative url already exists!\'),\n         )\n+\n+        # For targets, we now accept external urls.\n+        # Note that this can only be done on the control panel,\n+        # so by default only by Site Administrators or Managers.\n+        self.assertEqual(\n+            ap(\'https://example.org\', is_source=False),\n+            (\'https://example.org\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'http://example.org\', is_source=False),\n+            (\'http://example.org\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'https://example.org/some/path?foo=bar&bar=foo\', is_source=False),\n+            (\'https://example.org/some/path?foo=bar&bar=foo\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'http://\', is_source=False),\n+            (\'http://\', \'Target path must start with a slash.\'),\n+        )\n+        # Using \'//\' to ignore http/https differences seems useless,\n+        # as we don\'t include content but only link to it.\n+        self.assertEqual(\n+            ap(\'//example.org\', is_source=False),\n+            (\'/plone//example.org\', \'The provided target object does not exist.\'),\n+        )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T17:05:42+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/afb14ce5c13c8f7d942cb3d582d2683505593910

Redirection: hide URL Management action at portal root.

Files changed:
M Products/CMFPlone/profiles/default/actions.xml

b'diff --git a/Products/CMFPlone/profiles/default/actions.xml b/Products/CMFPlone/profiles/default/actions.xml\nindex f0bce03ec..103553962 100644\n--- a/Products/CMFPlone/profiles/default/actions.xml\n+++ b/Products/CMFPlone/profiles/default/actions.xml\n@@ -211,7 +211,7 @@\n    <property\n       name="url_expr">string: ${object_url}/@@manage-aliases</property>\n    <property name="icon_expr"></property>\n-   <property name="available_expr"></property>\n+   <property name="available_expr">python:not globals_view.isPortalOrPortalDefaultPage()</property>\n    <property name="permissions">\n     <element value="Manage Context Aliases"/>\n    </property>\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T17:20:34+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c7dab0db4a338c4cf183d27c9fbc766a817610ac

Redirection: fixed a few test failures due to the extra action.

Files changed:
M Products/CMFPlone/tests/testPortalCreation.py

b'diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 5aa1d6b1b..e617b2c17 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -560,7 +560,7 @@ def testObjectButtonActionsOnDefaultDocumentDoNotApplyToParent(self):\n         self.folder.invokeFactory(\'Document\', \'index_html\')\n         acts = self.actions.listFilteredActionsFor(self.folder.index_html)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 4)\n+        self.assertEqual(len(buttons), 5)\n         urls = [a[\'url\'] for a in buttons]\n         for url in urls:\n             self.assertFalse(\n@@ -574,10 +574,13 @@ def testObjectButtonActionsPerformCorrectAction(self):\n         self.folder.invokeFactory(\'Document\', \'index_html\')\n         acts = self.actions.listFilteredActionsFor(self.folder.index_html)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 4)\n-        # special case for delete which needs a confirmation form\n+        self.assertEqual(len(buttons), 5)\n+        # special case for delete which needs a confirmation form,\n+        # and for redirection which does not confirm to the url policy,\n+        # which apparently is that action id X should have url object_X.\n         urls = [\n-            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in (\'delete\',)\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in\n+            (\'delete\', \'redirection\')\n         ]\n         for url in urls:\n             # ensure that e.g. the \'copy\' url contains object_copy\n@@ -595,6 +598,11 @@ def testObjectButtonActionsPerformCorrectAction(self):\n             "object_delete does not use the confirmation form",\n         )\n \n+        redirection_action = [\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] == \'redirection\'\n+        ][0]\n+        self.assertIn(\'@@manage-aliases\', redirection_action[1])\n+\n     def testObjectButtonActionsInExpectedOrder(self):\n         # The object buttons need to be in a standardized order\n         self.setRoles([\'Manager\', \'Member\'])\n@@ -602,11 +610,14 @@ def testObjectButtonActionsInExpectedOrder(self):\n         self.folder.cb_dataValid = True\n         acts = self.actions.listFilteredActionsFor(self.folder)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 6)\n+        self.assertEqual(len(buttons), 7)\n         ids = [(a[\'id\']) for a in buttons]\n         self.assertEqual(\n             ids,\n-            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', \'ical_import_enable\'],\n+            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\',\n+             \'redirection\',\n+             \'ical_import_enable\',\n+             ],\n         )\n \n     def testCustomSkinFolderExists(self):\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-07T18:27:34+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/575b6d81d76819f8ff56d2c397fcbe4da612a172

Redirection: manage-aliases in navigation root adds navigation root path.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex e7ebe6498..176fb3422 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -10,6 +10,7 @@\n from Products.statusmessages.interfaces import IStatusMessage\n from six import StringIO\n from six.moves.urllib.parse import urlparse\n+from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.i18nmessageid import MessageFactory\n \n@@ -110,9 +111,22 @@ def __call__(self):\n         errors = {}\n \n         if \'form.button.Add\' in form:\n-            redirection, err = absolutize_path(\n-                form.get(\'redirection\'), is_source=True\n-            )\n+            redirection = form.get(\'redirection\')\n+            if redirection and redirection.startswith(\'/\'):\n+                # Check navigation root\n+                pps = getMultiAdapter(\n+                    (self.context, self.request), name=\'plone_portal_state\'\n+                )\n+                nav_url = pps.navigation_root_url()\n+                portal_url = pps.portal_url()\n+                if nav_url != portal_url:\n+                    # We are in a navigation root different from the portal root.\n+                    # Update the path accordingly, unless the user already did this.\n+                    extra = nav_url[len(portal_url) :]\n+                    if not redirection.startswith(extra):\n+                        redirection = \'{0}{1}\'.format(extra, redirection)\n+\n+            redirection, err = absolutize_path(redirection, is_source=True)\n             if err:\n                 errors[\'redirection\'] = err\n                 status.addStatusMessage(err, type=\'error\')\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex fbb433379..95801a44d 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -251,6 +251,56 @@ def test_redirection_controlpanel_missing_slash_alias(self):\n             u\'Errormessage for missing slash on alternative url missing\',\n         )\n \n+    def test_manage_aliases_standard(self):\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirection\').value = \'/alias\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/alias\'))\n+        self.assertEqual(storage.get(\'/plone/alias\'), \'/plone/test-folder\')\n+\n+    def test_manage_aliases_navigation_root(self):\n+        from zope.interface import alsoProvides\n+        from plone.app.layout.navigation.interfaces import INavigationRoot\n+\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+        alsoProvides(folder, INavigationRoot)\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirection\').value = \'/alias\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/test-folder/alias\'))\n+        self.assertEqual(\n+            storage.get(\'/plone/test-folder/alias\'), \'/plone/test-folder\'\n+        )\n+\n+        # Add the navigation root path explicitly.\n+        self.browser.getControl(name=\'redirection\').value = \'/test-folder/alias2\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/test-folder/alias2\'))\n+        self.assertEqual(\n+            storage.get(\'/plone/test-folder/alias2\'), \'/plone/test-folder\'\n+        )\n+\n     def test_absolutize_path(self):\n         # absolutize_path is a helper function that returns a tuple\n         # of absolute path and error message.\n@@ -339,7 +389,10 @@ def test_absolutize_path(self):\n             (\'http://example.org\', None),\n         )\n         self.assertEqual(\n-            ap(\'https://example.org/some/path?foo=bar&bar=foo\', is_source=False),\n+            ap(\n+                \'https://example.org/some/path?foo=bar&bar=foo\',\n+                is_source=False,\n+            ),\n             (\'https://example.org/some/path?foo=bar&bar=foo\', None),\n         )\n         self.assertEqual(\n@@ -350,5 +403,8 @@ def test_absolutize_path(self):\n         # as we don\'t include content but only link to it.\n         self.assertEqual(\n             ap(\'//example.org\', is_source=False),\n-            (\'/plone//example.org\', \'The provided target object does not exist.\'),\n+            (\n+                \'/plone//example.org\',\n+                \'The provided target object does not exist.\',\n+            ),\n         )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-11T10:50:19+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/eb365b322bc916de53dca8a74a8e1405f342a5d7

Redirectiontool: enabled general controlpanel tests.

Taken over from mail control panel.

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 95801a44d..a6bf73c02 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -15,7 +15,7 @@\n \n \n class RedirectionControlPanelFunctionalTest(unittest.TestCase):\n-    """Test that changes in the mail control panel are actually\n+    """Test that changes in the redirection control panel are actually\n     stored in the registry.\n     """\n \n@@ -32,25 +32,20 @@ def setUp(self):\n             \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n-    """\n-    def test_mail_controlpanel_link(self):\n-        self.browser.open(\n-            "%s/@@overview-controlpanel" % self.portal_url)\n-        self.browser.getLink(\'Mail\').click()\n-\n-    def test_mail_controlpanel_backlink(self):\n-        self.browser.open(\n-            "%s/@@mail-controlpanel" % self.portal_url)\n+    def test_redirection_controlpanel_link(self):\n+        self.browser.open("%s/@@overview-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'URL Management\').click()\n+\n+    def test_redirection_controlpanel_backlink(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         self.assertTrue("General" in self.browser.contents)\n \n-    def test_mail_controlpanel_sidebar(self):\n-        self.browser.open(\n-            "%s/@@mail-controlpanel" % self.portal_url)\n+    def test_redirection_controlpanel_sidebar(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n         self.browser.getLink(\'Site Setup\').click()\n         self.assertTrue(\n             self.browser.url.endswith(\'/plone/@@overview-controlpanel\')\n         )\n-    """\n \n     def test_redirection_controlpanel_view(self):\n         view = getMultiAdapter(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-11T10:50:19+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7aabb02cf18f7140706b78efca8dfc418ec4e3b8

Redirection: test that acquired source is not accepted.

A source must not exist via (implicit) acquisition.
We might *want* to allow this, but such a redirect would not have effect, because acquisition happens earlier.
See https://github.com/collective/Products.RedirectionTool/issues/12

Moved to using getSite() instead of getUtility(ISiteRoot),
because otherwise REQUEST is missing, and unrestrictedTraverse('/some/path', None) will always give None.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 176fb3422..2799b9be2 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -2,7 +2,6 @@\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.batching.browser import PloneBatchView\n from plone.memoize.view import memoize\n-from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.utils import safe_text\n@@ -12,6 +11,7 @@\n from six.moves.urllib.parse import urlparse\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.i18nmessageid import MessageFactory\n \n import csv\n@@ -36,7 +36,7 @@ def absolutize_path(path, is_source=True):\n     an error message if something goes wrong and otherwise \'\').\n     """\n \n-    portal = getUtility(ISiteRoot)\n+    portal = getSite()\n     err = None\n     is_external_url = False\n     if not path:\n@@ -95,7 +95,7 @@ def absolutize_path(path, is_source=True):\n class RedirectsView(BrowserView):\n     def redirects(self):\n         storage = getUtility(IRedirectionStorage)\n-        portal = getUtility(ISiteRoot)\n+        portal = getSite()\n         context_path = "/".join(self.context.getPhysicalPath())\n         portal_path = "/".join(portal.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n@@ -162,7 +162,7 @@ class RedirectionSet(object):\n     def __init__(self, query=\'\'):\n         self.storage = getUtility(IRedirectionStorage)\n \n-        portal = getUtility(ISiteRoot)\n+        portal = getSite()\n         self.portal_path = \'/\'.join(portal.getPhysicalPath())\n         self.portal_path_len = len(self.portal_path)\n \n@@ -225,7 +225,7 @@ def redirects(self):\n \n     def __call__(self):\n         storage = getUtility(IRedirectionStorage)\n-        portal = getUtility(ISiteRoot)\n+        portal = getSite()\n         request = self.request\n         form = request.form\n         status = IStatusMessage(self.request)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex a6bf73c02..998e42251 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -284,7 +284,9 @@ def test_manage_aliases_navigation_root(self):\n         )\n \n         # Add the navigation root path explicitly.\n-        self.browser.getControl(name=\'redirection\').value = \'/test-folder/alias2\'\n+        self.browser.getControl(\n+            name=\'redirection\'\n+        ).value = \'/test-folder/alias2\'\n         self.browser.getControl(name=\'form.button.Add\').click()\n \n         self.assertTrue(\n@@ -360,9 +362,22 @@ def test_absolutize_path(self):\n             ),\n         )\n \n+        # And a source must not exist via (implicit) acquisition.\n+        # We might *want* to allow this, but such a redirect would not have effect,\n+        # because acquisition happens earlier.\n+        # See https://github.com/collective/Products.RedirectionTool/issues/12\n+        self.portal.invokeFactory(\'Document\', \'doc\')\n+        self.assertEqual(\n+            ap(\'/test-folder/doc\'),\n+            (\n+                \'/plone/test-folder/doc\',\n+                \'Cannot use a working path as alternative url.\',\n+            ),\n+        )\n+\n         # A source must not already exist in the redirect list.\n         storage = getUtility(IRedirectionStorage)\n-        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        portal_path = self.portal.absolute_url_path()\n         storage.add(\n             \'{0:s}/foo\'.format(portal_path),\n             \'{0:s}/test-folder\'.format(portal_path),\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-11T10:50:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/977081538ef53fb407843f4861340c5bf6d3556a

Redirection: call unrestrictedTraverse instead of using catalog.

Since the previous commit we have a portal object that supports traversal,
so this check is enough.
And I guess that a single traversal is faster than a catalog lookup,
especially when we want to try the traversal anyway if we don't find anything in the catalog.

Files changed:
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 2799b9be2..2899ad1bf 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -73,16 +73,8 @@ def absolutize_path(path, is_source=True):\n             else:\n                 # Check whether obj exists at source path.\n                 # A redirect would be useless then.\n-                result = catalog.searchResults(path={"query": path})\n-                if len(result) > 0:\n-                    err = _(\n-                        u"Cannot use an existing object as alternative url."\n-                    )\n-                else:\n-                    if portal.unrestrictedTraverse(path, None) is not None:\n-                        err = _(\n-                            u"Cannot use a working path as alternative url."\n-                        )\n+                if portal.unrestrictedTraverse(path, None) is not None:\n+                    err = _(u"Cannot use a working path as alternative url.")\n         else:\n             # Check whether obj exists at target path\n             result = catalog.searchResults(path={"query": path})\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 998e42251..cd36ef3ed 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -346,7 +346,7 @@ def test_absolutize_path(self):\n             ap(\'/test-folder\'),\n             (\n                 \'/plone/test-folder\',\n-                \'Cannot use an existing object as alternative url.\',\n+                \'Cannot use a working path as alternative url.\',\n             ),\n         )\n         # More general: a source must not be traversable already.\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-12T11:32:48+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/7b3667e9a6ea287961710b0a8716fe25a1ba6422

Merge branch 'master' into plip-1486-redirection

Files changed:
A Products/CMFPlone/_scripts/__init__.py
A news/2736.feature
M CHANGES.rst
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/WorkflowTool.py
M Products/CMFPlone/_scripts/verifydb.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/setuphandlers.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/test_zmi.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 02d1afb6b..10c0db9c8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -79,7 +79,8 @@ Breaking changes:\n - Stop configuring \'View History\' permission which was removed from Zope.\n   [davisagli]\n \n-- Remove legacy resource registries portal_css and portal_javascripts\n+- Removed legacy resource registries portal_css and portal_javascripts;\n+  no conditional handling.\n   [ksuess]\n \n New features:\ndiff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py\nindex b34927f70..e00537577 100644\n--- a/Products/CMFPlone/SkinsTool.py\n+++ b/Products/CMFPlone/SkinsTool.py\n@@ -3,9 +3,6 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.SkinsTool import SkinsTool as BaseTool\n-from Products.ResourceRegistries.tools.BaseRegistry import \\\n-    cookWhenChangingSettings\n-\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n \n \n@@ -24,8 +21,6 @@ def addSkinSelection(self, skinname, skinpath, test=0, make_default=0):\n         # Adds a skin selection.\n         super(SkinsTool, self).addSkinSelection(skinname, skinpath,\n                                                 test=test, make_default=make_default)\n-        # when adding a new skin, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n \n     security.declareProtected(ManagePortal, \'manage_skinLayers\')\n \n@@ -36,8 +31,6 @@ def manage_skinLayers(self, chosen=(), add_skin=0, del_skin=0,\n         response = super(SkinsTool, self).manage_skinLayers(chosen=chosen,\n                                                             add_skin=add_skin, del_skin=del_skin, skinname=skinname,\n                                                             skinpath=skinpath, REQUEST=REQUEST)\n-        # when changing skins, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n         return response\n \n SkinsTool.__doc__ = BaseTool.__doc__\ndiff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py\nindex fda1d261d..ae8eebbab 100644\n--- a/Products/CMFPlone/WorkflowTool.py\n+++ b/Products/CMFPlone/WorkflowTool.py\n@@ -243,8 +243,9 @@ def getWorklistsResults(self):\n                     if \'Language\' not in catalog_vars:\n                         if has_new_lang_bypass:\n                             catalog_vars[\'path\'] = \'/\'\n-                        elif has_new_lang_bypass:\n-                            catalog_vars[\'Language\'] = \'all\'                    # Include inactive content in result list. This is\n+                        else:\n+                            catalog_vars[\'Language\'] = \'all\'\n+                    # Include inactive content in result list. This is\n                     # especially important for content scheduled to go public\n                     # in the future, but needs to be reviewed before this.\n                     catalog_vars[\'show_inactive\'] = True\ndiff --git a/Products/CMFPlone/_scripts/__init__.py b/Products/CMFPlone/_scripts/__init__.py\nnew file mode 100644\nindex 000000000..7c68785e9\n--- /dev/null\n+++ b/Products/CMFPlone/_scripts/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/_scripts/verifydb.py b/Products/CMFPlone/_scripts/verifydb.py\nindex 9f2766d96..704ee383f 100644\n--- a/Products/CMFPlone/_scripts/verifydb.py\n+++ b/Products/CMFPlone/_scripts/verifydb.py\n@@ -1,6 +1,8 @@\n+# -*- coding: utf-8 -*-\n from Zope2.Startup.run import make_wsgi_app\n from ZODB.interfaces import IStorageCurrentRecordIteration\n from ZODB.serialize import PersistentUnpickler\n+\n import argparse\n import io\n import logging\ndiff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py\nindex dd52e532a..e23ce4a46 100644\n--- a/Products/CMFPlone/interfaces/controlpanel.py\n+++ b/Products/CMFPlone/interfaces/controlpanel.py\n@@ -1723,7 +1723,7 @@ class ILinkSchema(Interface):\n     mark_special_links = schema.Bool(\n         title=_(u\'Mark special links\'),\n         description=_(u\'Marks external or special protocol links with class.\'),\n-        default=True,\n+        default=False,\n         required=False)\n \n \ndiff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml\nindex 4837d700e..4ae5e9446 100644\n--- a/Products/CMFPlone/profiles/default/toolset.xml\n+++ b/Products/CMFPlone/profiles/default/toolset.xml\n@@ -16,14 +16,10 @@\n            class="Products.CMFPlone.CatalogTool.CatalogTool"/>\n  <required tool_id="portal_controlpanel"\n            class="Products.CMFPlone.PloneControlPanel.PloneControlPanel"/>\n- <required tool_id="portal_css"\n-           class="Products.ResourceRegistries.tools.CSSRegistry.CSSRegistryTool"/>\n  <required tool_id="portal_groupdata"\n            class="Products.PlonePAS.tools.groupdata.GroupDataTool"/>\n  <required tool_id="portal_groups"\n            class="Products.PlonePAS.tools.groups.GroupsTool"/>\n- <required tool_id="portal_javascripts"\n-           class="Products.ResourceRegistries.tools.JSRegistry.JSRegistryTool"/>\n  <required tool_id="portal_memberdata"\n            class="Products.PlonePAS.tools.memberdata.MemberDataTool"/>\n  <required tool_id="portal_membership"\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 77608ff71..22580afb4 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -34,14 +34,6 @@\n            prefix="plone" />\n   <records interface="Products.CMFPlone.interfaces.ILinkSchema"\n            prefix="plone" />\n-  <record interface="Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings" field="resourceBundlesForThemes">\n-    <value purge="false">\n-      <element key="(default)">\n-        <element>jquery</element>\n-        <element>default</element>\n-      </element>\n-    </value>\n-  </record>\n   <record name="Products.CMFPlone.i18nl10n.override_dateformat.Enabled">\n     <field type="plone.registry.field.Bool">\n       <title>Enabled</title>\ndiff --git a/Products/CMFPlone/setuphandlers.py b/Products/CMFPlone/setuphandlers.py\nindex 1f3ea5d21..05c8a4c96 100644\n--- a/Products/CMFPlone/setuphandlers.py\n+++ b/Products/CMFPlone/setuphandlers.py\n@@ -36,30 +36,6 @@ def addCacheHandlers(portal):\n                 portal[mgr_id] = mgr_class(mgr_id)\n \n \n-def addCacheForResourceRegistry(portal):\n-    ram_cache_id = \'ResourceRegistryCache\'\n-    if ram_cache_id in portal:\n-        cache = getattr(portal, ram_cache_id)\n-        settings = cache.getSettings()\n-        settings[\'max_age\'] = 24 * 3600  # keep for up to 24 hours\n-        settings[\'request_vars\'] = (\'URL\', )\n-        cache.manage_editProps(\'Cache for saved ResourceRegistry files\',\n-                               settings)\n-    reg = getToolByName(portal, \'portal_css\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-    reg = getToolByName(portal, \'portal_javascripts\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-\n def purgeProfileVersions(portal):\n     """\n     Purge profile dependency versions.\n@@ -93,11 +69,9 @@ def assignTitles(portal):\n         \'portal_calendar\': \'Controls how events are shown\',\n         \'portal_catalog\': \'Indexes all content in the site\',\n         \'portal_controlpanel\': \'Registry of control panel screen\',\n-        \'portal_css\': \'Registry of CSS files\',\n         \'portal_diff\': \'Settings for content version comparisions\',\n         \'portal_groupdata\': \'Handles properties on groups\',\n         \'portal_groups\': \'Handles group related functionality\',\n-        \'portal_javascripts\': \'Registry of JavaScript files\',\n         \'portal_languages\': \'Language specific settings\',\n         \'portal_membership\': \'Handles membership policies\',\n         \'portal_memberdata\': \'Handles the available properties on members\',\n@@ -172,7 +146,6 @@ def importFinalSteps(context):\n     assignTitles(site)\n     replace_local_role_manager(site)\n     addCacheHandlers(site)\n-    addCacheForResourceRegistry(site)\n \n     first_weekday_setup(context)\n     timezone_setup(context)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex e617b2c17..faed08cac 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -49,7 +49,6 @@ def afterSetUp(self):\n         self.groups = self.portal.portal_groups\n         self.skins = self.portal.portal_skins\n         self.transforms = self.portal.portal_transforms\n-        self.javascripts = self.portal.portal_javascripts\n         self.setup = self.portal.portal_setup\n \n     def testInstanceVersion(self):\n@@ -198,11 +197,6 @@ def testSitemapAction(self):\n         else:\n             self.fail("Actions tool has no \'sitemap\' action")\n \n-    def testResourceRegistries(self):\n-        # We should have portal_css and portal_javascripts tools\n-        self.assertTrue(hasattr(self.portal, \'portal_css\'))\n-        self.assertTrue(hasattr(self.portal, \'portal_javascripts\'))\n-\n     def testUnfriendlyTypesProperty(self):\n         # We should have an types_not_searched property\n         registry = getUtility(IRegistry)\n@@ -676,10 +670,6 @@ def testConfigurableSafeHtmlTransform(self):\n         except (AttributeError, KeyError):\n             self.fail(\'Disabling of safe_html should be possible!\')\n \n-    def testvcXMLRPCRemoved(self):\n-        # vcXMLRPC.js should no longer be registered\n-        self.assertFalse(\'vcXMLRPC.js\' in self.javascripts.getResourceIds())\n-\n     def testCacheManagers(self):\n         # The cache and caching policy managers should exist\n         httpcache = self.portal._getOb(\'HTTPCache\', None)\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 393d24b60..cb0d88580 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -301,153 +301,6 @@ def test_bundle_defer_async_production(self):\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n \n \n-class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n-    """Test features of registry node importer"""\n-    _setup_fixture = 0  # No default fixture\n-\n-    def _get_importer(self, blacklist=set([])):\n-        reg = getToolByName(self.portal, \'portal_javascripts\')\n-        importer = ResourceRegistryNodeAdapter(reg, SetupEnviron())\n-        importer.resource_type = \'javascript\'\n-        importer.registry = getUtility(IRegistry)\n-        importer.resource_blacklist = blacklist\n-        return importer\n-\n-    def _get_resources(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IResourceRegistry, prefix="plone.resources"\n-        )\n-\n-    def _get_legacy_bundle(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IBundleRegistry,\n-            prefix="plone.bundles",\n-            check=False\n-        )[\'plone-legacy\']\n-\n-    def _get_resource_dom(self, name=\'++resource++/resource.js\',\n-                          remove=False, enabled=True):\n-        return parseString("""\n-            <object>\n-                <javascript id="%s" remove="%s" enabled="%s" />\n-            </object>\n-            """ % (name, str(remove), str(enabled).lower()))\n-\n-    def test_resource_blacklist(self):\n-        # Ensure that blacklisted resources aren\'t imported\n-        importer = self._get_importer({\'++resource++/bad_resource.js\'})\n-        dom = self._get_resource_dom("++resource++/bad_resource.js")\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertNotIn("++resource++/bad_resource.js", js_files)\n-        self.assertNotIn(\n-            "resource-bad_resource-js",\n-            self._get_legacy_bundle().resources,\n-        )\n-\n-    def test_resource_no_blacklist(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertTrue("++resource++/resource.js" in js_files)\n-        self.assertTrue(\n-            "resource-resource-js" in self._get_legacy_bundle().resources)\n-\n-    def test_insert_again(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        num_resources = self._get_legacy_bundle().resources[:]\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-\n-    def test_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(remove=True)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files) - 1,\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-    def test_insert_after(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-                <javascript id="foobar.js" insert-after="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') + 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_insert_before(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-              <javascript id="foobar.js" insert-before="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') - 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_be_able_to_disable_but_not_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(enabled=False)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files),\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-\n class TestConfigJs(PloneTestCase.PloneTestCase):\n \n     def test_init_shim_works_with_function(self):\ndiff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py\nindex b754ad725..622559b7c 100644\n--- a/Products/CMFPlone/tests/test_zmi.py\n+++ b/Products/CMFPlone/tests/test_zmi.py\n@@ -91,11 +91,6 @@ def test_portal_catalog(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_css(self):\n-        url = \'portal_css/manage_cssForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_diff(self):\n         url = \'portal_diff/manage_difftypes\'\n         view = self.portal.restrictedTraverse(url)\n@@ -116,11 +111,6 @@ def test_portal_historyidhandler(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_javascripts(self):\n-        url = \'portal_javascripts/manage_jsForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_memberdata(self):\n         url = \'portal_memberdata/manage_overview\'\n         view = self.portal.restrictedTraverse(url)\ndiff --git a/news/2736.feature b/news/2736.feature\nnew file mode 100644\nindex 000000000..341d8c24a\n--- /dev/null\n+++ b/news/2736.feature\n@@ -0,0 +1 @@\n+No longer mark special links by default. [pbauer]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex b3ffc5378..6c3118600 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -105,7 +105,6 @@\n         \'Products.PluggableAuthService\',\n         \'Products.PluginRegistry\',\n         \'Products.PortalTransforms\',\n-        \'Products.ResourceRegistries\',\n         \'Products.Sessions\',\n         \'Products.SiteErrorLog\',\n         \'Products.statusmessages\',\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-12T15:34:18+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/3950d2d84fe2f676ccf0c8833bd7067df110ec8e

Merge pull request #2256 from plone/plip-1486-redirection

Add redirection control panel

Files changed:
A Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt
A Products/CMFPlone/controlpanel/browser/redirects-manage.pt
A Products/CMFPlone/controlpanel/browser/redirects.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
A news/1486.feature
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/profiles/default/actions.xml
M Products/CMFPlone/profiles/default/controlpanel.xml
M Products/CMFPlone/profiles/default/rolemap.xml
M Products/CMFPlone/tests/testPortalCreation.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex 5115a526a..ffab4c50d 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -291,4 +291,31 @@\n       permission="cmf.ManagePortal"\n       />\n \n+  <permission\n+      id="Products.CMFPlone.ManagePortalAliases"\n+      title="Manage Portal Aliases"\n+      />\n+\n+  <permission\n+      id="Products.CMFPlone.ManageContextAliases"\n+      title="Manage Context Aliases"\n+      />\n+\n+  <browser:page\n+      name="redirection-controlpanel"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".redirects.RedirectsControlPanel"\n+      template="redirects-controlpanel.pt"\n+      permission="Products.CMFPlone.ManagePortalAliases"\n+      />\n+\n+  <browser:page\n+      name="manage-aliases"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      class=".redirects.RedirectsView"\n+      template="redirects-manage.pt"\n+      permission="Products.CMFPlone.ManageContextAliases"\n+      allowed_attributes="redirects view_url"\n+      />\n+\n </configure>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\nnew file mode 100644\nindex 000000000..e458585f8\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-controlpanel.pt\n@@ -0,0 +1,257 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en" lang="en"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n+      i18n:domain="plone">\n+\n+  <body>\n+    <div metal:fill-slot="prefs_configlet_main">\n+      <dl\n+          tal:condition="view/csv_errors|nothing"\n+          class="portalMessage error">\n+        <dt i18n:translate="">Error</dt>\n+        <dd>\n+          <p i18n:translate="error_bulk_upload">\n+            No alternative urls were added. Please correct these errors in your CSV file and try again:\n+          </p>\n+          <table\n+              style="text-align: left; vertical-align: top"\n+              border="0"\n+              cellpadding="2"\n+              cellspacing="0">\n+            <tr tal:repeat="error view/csv_errors"\n+                style="vertical-align: top">\n+              <td nowrap="nowrap">\n+                <tal:block i18n:translate="label_bulk_upload_line">\n+                  Line\n+                </tal:block>\n+                ${error/line_number}\n+                <tal:block i18n:translate="label_bulk_upload_line_suffix">\n+                  :\n+                </tal:block>\n+              </td>\n+              <td>\n+                ${error/line}\n+              </td>\n+              <td>\n+                ${error/message}\n+              </td>\n+            </tr>\n+          </table>\n+        </dd>\n+      </dl>\n+\n+      <h1 i18n:translate="">\n+        URL Management\n+      </h1>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="add_alias">\n+            Add a new alternative url\n+          </legend>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/redirection|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+\n+          <label\n+              for="redirection"\n+              i18n:translate="label_alias">\n+            Alternative url path\n+          </label>\n+\n+          <span\n+              class="fieldRequired"\n+              title="Required"\n+              i18n:attributes="title"\n+              i18n:translate="label_required">\n+            (Required)\n+          </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+          <div class="formHelp" i18n:translate="help_alias">\n+            Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+          </div>\n+\n+          <input\n+              type="text"\n+              name="redirection"\n+              value="#"\n+              size="40"\n+              tal:attributes="value request/redirection | nothing;"/>\n+          </div>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/target_path|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+\n+          <label for="target_path"\n+              i18n:translate="label_target_path">\n+              Target Path\n+          </label>\n+\n+          <span\n+              class="fieldRequired"\n+              title="Required"\n+              i18n:attributes="title"\n+              i18n:translate="label_required">\n+            (Required)\n+          </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+          <div class="formHelp" i18n:translate="help_target_path">\n+            Enter the absolute path of the target. The path must start with \'/\'.\n+          </div>\n+\n+          <input\n+              type="text"\n+              name="target_path"\n+              value="#"\n+              size="40"\n+              tal:attributes="value request/target_path | nothing;"/>\n+          </div>\n+\n+          <div class="formControls">\n+            <input class="context"\n+                   type="submit"\n+                   value="Add"\n+                   name="form.button.Add"\n+                   i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post"\n+          enctype="multipart/form-data">\n+        <fieldset>\n+          <legend i18n:translate="legend_bulk_upload">\n+            Bulk-upload alternative urls\n+          </legend>\n+\n+          <p i18n:translate="description_bulk_upload">\n+            Add many alternative urls at once by uploading a CSV file. The first column should be the path to\n+            redirect from; the second, the path to redirect to. Both paths must be Plone-site-relative,\n+            starting with a slash (/).\n+          </p>\n+          <p>\n+            <tal:block i18n:translate="example_caption_bulk_upload">Example:</tal:block><br />\n+            <code i18n:translate="example_bulk_upload">\n+              /old-home-page.asp,/front-page<br />\n+              /people/JoeT,/Users/joe-thurston\n+            </code>\n+          </p>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/file|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+            <label\n+                for="file"\n+                i18n:translate="label_file">\n+              CSV file\n+            </label>\n+\n+            <span\n+                class="fieldRequired"\n+                title="Required"\n+                i18n:attributes="title"\n+                i18n:translate="label_required">\n+              (Required)\n+            </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+            <input\n+              type="file"\n+              name="file" />\n+          </div>\n+\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Upload"\n+                name="form.button.Upload"\n+                i18n:attributes="value"\n+              />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+      <form\n+          action="${view/view_url}#manage-existing-aliases"\n+          method="post"\n+          id="manage-existing-aliases">\n+        <fieldset\n+          tal:define="batch view/redirects">\n+          <legend i18n:translate="legend_all_existing_aliases">\n+            All existing alternative urls for this site\n+          </legend>\n+\n+          <label for="filter-existing-aliases-q" i18n:translate="">Filter by prefix</label>\n+          <input\n+              type="text"\n+              name="q"\n+              value=""\n+              id="filter-existing-aliases-q"\n+               tal:attributes="value python:request.form.get(\'q\', \'/\')"/>\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Filter"\n+                name="form.button.filter"\n+                 i18n:attributes="value" />\n+          </div>\n+\n+          <div class="field"\n+               tal:define="error view/form_errors/remove_redirects|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'"\n+               tal:content="error" />\n+\n+          <tal:redirects repeat="redirect batch">\n+            <div>\n+              <label>\n+              <input\n+                  type="checkbox"\n+                  class="noborder"\n+                  name="redirects:tuple"\n+                  value="${redirect/redirect}" />\n+              ${redirect/path} &rarr; ${redirect/redirect-to}\n+              </label>\n+            </div>\n+          </tal:redirects>\n+\n+          <div tal:condition="python:batch.numpages > 1"\n+               tal:replace="structure view/batching">\n+          </div>\n+\n+          <div class="formControls">\n+            <input class="context"\n+                   type="submit"\n+                   value="Remove"\n+                   name="form.button.Remove"\n+                   i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+    </div>\n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects-manage.pt b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\nnew file mode 100644\nindex 000000000..1ae3ba337\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects-manage.pt\n@@ -0,0 +1,129 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xml:lang="en-US" lang="en-US"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      metal:use-macro="here/main_template/macros/master"\n+      i18n:domain="plone">\n+\n+  <body>\n+    <div\n+        metal:fill-slot="main"\n+        tal:define="context_state context/@@plone_context_state">\n+      <h1\n+          class="documentFirstHeading"\n+          i18n:translate="">\n+        URL Management\n+      </h1>\n+\n+      <dl\n+          class="portalMessage info"\n+          tal:condition="context_state/is_default_page">\n+        <dt i18n:translate="">\n+          Info\n+        </dt>\n+        <dd i18n:translate="help_sharing_page_default_page">\n+          You are managing the alternative urls of a default view in a container.\n+          To manage them for the entire container,\n+          <a\n+              i18n:name="go_here"\n+              i18n:translate="help_aliases_go_here"\n+              tal:define="folder context_state/folder"\n+              tal:attributes="href string:${folder/absolute_url}/@@manage-aliases">\n+            go here\n+          </a>.\n+        </dd>\n+      </dl>\n+\n+      <p i18n:translate="description_adding_aliases">\n+        Using this form, you can manage alternative urls for an item. This\n+        is an easy way to make an item available under two different URLs.\n+      </p>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="add_alias">\n+            Add a new alternative url\n+          </legend>\n+\n+          <div class="field"\n+               tal:define="error options/errors/redirection|nothing"\n+               tal:attributes="class python:error and \'field error\' or \'field\'">\n+            <label\n+                for="redirection"\n+                i18n:translate="label_alias">\n+              Alternative url path\n+            </label>\n+\n+            <span\n+                class="fieldRequired"\n+                title="Required"\n+                i18n:attributes="title"\n+                i18n:translate="label_required">\n+              (Required)\n+            </span>\n+\n+            <div tal:content="error">\n+              Validation error output\n+            </div>\n+\n+            <div class="formHelp" i18n:translate="help_alias">\n+              Enter the absolute path where the alternative url should exist. The path must start with \'/\'.\n+            </div>\n+\n+            <input\n+                type="text"\n+                name="redirection"\n+                value="#"\n+                size="40"\n+                tal:attributes="value request/redirection | nothing;"/>\n+          </div>\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Add"\n+                name="form.button.Add"\n+                i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+\n+      <form\n+          action="${view/view_url}"\n+          method="post">\n+        <fieldset>\n+          <legend i18n:translate="legend_existing_aliases">\n+            Existing alternative urls for this item\n+          </legend>\n+\n+          <tal:redirects repeat="redirect view/redirects">\n+            <div>\n+              <label>\n+              <input\n+                  type="checkbox"\n+                  class="noborder"\n+                  name="redirects:tuple"\n+                  value="${redirect/redirect}" />\n+                ${redirect/path}\n+              </label>\n+            </div>\n+          </tal:redirects>\n+\n+          <div class="formControls">\n+            <input\n+                class="context"\n+                type="submit"\n+                value="Remove"\n+                name="form.button.Remove"\n+                i18n:attributes="value" />\n+          </div>\n+\n+        </fieldset>\n+      </form>\n+    </div>\n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nnew file mode 100644\nindex 000000000..2899ad1bf\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -0,0 +1,368 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.batching.browser import PloneBatchView\n+from plone.memoize.view import memoize\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.utils import safe_text\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from six import StringIO\n+from six.moves.urllib.parse import urlparse\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+from zope.i18nmessageid import MessageFactory\n+\n+import csv\n+\n+\n+_ = MessageFactory(\'plone\')\n+\n+\n+def absolutize_path(path, is_source=True):\n+    """Create path including the path of the portal root.\n+\n+    The path must be absolute, so starting with a slash.\n+    Or it can be a full url.\n+\n+    If is_source is true, this is an alternative url\n+    that will point to a target (unknown here).\n+\n+    If is_source is true, path is the path of a target.\n+    An object must exist at this path, unless it is a full url.\n+\n+    Return a 2-tuple: (absolute redirection path,\n+    an error message if something goes wrong and otherwise \'\').\n+    """\n+\n+    portal = getSite()\n+    err = None\n+    is_external_url = False\n+    if not path:\n+        if is_source:\n+            err = _(u"You have to enter an alternative url.")\n+        else:\n+            err = _(u"You have to enter a target.")\n+    elif not path.startswith(\'/\'):\n+        if is_source:\n+            err = _(u"Alternative url path must start with a slash.")\n+        else:\n+            # For targets, we accept external urls.\n+            # Do basic check.\n+            parsed = urlparse(path)\n+            if parsed.scheme in (\'https\', \'http\') and parsed.netloc:\n+                is_external_url = True\n+            else:\n+                err = _(u"Target path must start with a slash.")\n+    elif \'@@\' in path:\n+        if is_source:\n+            err = _(u"Alternative url path must not be a view.")\n+        else:\n+            err = _(u"Target path must not be a view.")\n+    else:\n+        context_path = "/".join(portal.getPhysicalPath())\n+        path = "{0}{1}".format(context_path, path)\n+    if not err and not is_external_url:\n+        catalog = getToolByName(portal, \'portal_catalog\')\n+        if is_source:\n+            # Check whether already exists in storage\n+            storage = getUtility(IRedirectionStorage)\n+            if storage.get(path):\n+                err = _(u"The provided alternative url already exists!")\n+            else:\n+                # Check whether obj exists at source path.\n+                # A redirect would be useless then.\n+                if portal.unrestrictedTraverse(path, None) is not None:\n+                    err = _(u"Cannot use a working path as alternative url.")\n+        else:\n+            # Check whether obj exists at target path\n+            result = catalog.searchResults(path={"query": path})\n+            if len(result) == 0:\n+                err = _(u"The provided target object does not exist.")\n+\n+    return path, err\n+\n+\n+class RedirectsView(BrowserView):\n+    def redirects(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal = getSite()\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        portal_path = "/".join(portal.getPhysicalPath())\n+        redirects = storage.redirects(context_path)\n+        for redirect in redirects:\n+            path = redirect[len(portal_path) :]\n+            yield {\'redirect\': redirect, \'path\': path}\n+\n+    def __call__(self):\n+        storage = getUtility(IRedirectionStorage)\n+        request = self.request\n+        form = request.form\n+        status = IStatusMessage(self.request)\n+        errors = {}\n+\n+        if \'form.button.Add\' in form:\n+            redirection = form.get(\'redirection\')\n+            if redirection and redirection.startswith(\'/\'):\n+                # Check navigation root\n+                pps = getMultiAdapter(\n+                    (self.context, self.request), name=\'plone_portal_state\'\n+                )\n+                nav_url = pps.navigation_root_url()\n+                portal_url = pps.portal_url()\n+                if nav_url != portal_url:\n+                    # We are in a navigation root different from the portal root.\n+                    # Update the path accordingly, unless the user already did this.\n+                    extra = nav_url[len(portal_url) :]\n+                    if not redirection.startswith(extra):\n+                        redirection = \'{0}{1}\'.format(extra, redirection)\n+\n+            redirection, err = absolutize_path(redirection, is_source=True)\n+            if err:\n+                errors[\'redirection\'] = err\n+                status.addStatusMessage(err, type=\'error\')\n+            else:\n+                del form[\'redirection\']\n+                storage.add(\n+                    redirection, "/".join(self.context.getPhysicalPath())\n+                )\n+                status.addStatusMessage(\n+                    _(u"Alternative url added."), type=\'info\'\n+                )\n+        elif \'form.button.Remove\' in form:\n+            redirects = form.get(\'redirects\', ())\n+            for redirect in redirects:\n+                storage.remove(redirect)\n+            if len(redirects) > 1:\n+                status.addStatusMessage(\n+                    _(u"Alternative urls removed."), type=\'info\'\n+                )\n+            else:\n+                status.addStatusMessage(\n+                    _(u"Alternative url removed."), type=\'info\'\n+                )\n+\n+        return self.index(errors=errors)\n+\n+    @memoize\n+    def view_url(self):\n+        return self.context.absolute_url() + \'/@@manage-aliases\'\n+\n+\n+class RedirectionSet(object):\n+    def __init__(self, query=\'\'):\n+        self.storage = getUtility(IRedirectionStorage)\n+\n+        portal = getSite()\n+        self.portal_path = \'/\'.join(portal.getPhysicalPath())\n+        self.portal_path_len = len(self.portal_path)\n+\n+        # noinspection PyProtectedMember\n+        if query:\n+            # with query path /Plone/news:\n+            # min_k is /Plone/news and\n+            # max_k is /Plone/newt\n+            # Apparently that is the way to minize the keys we ask.\n+            min_k = u\'{0:s}/{1:s}\'.format(self.portal_path, query.strip(\'/\'))\n+            max_k = min_k[:-1] + chr(ord(min_k[-1]) + 1)\n+            self.data = self.storage._paths.keys(min=min_k, max=max_k)\n+        else:\n+            self.data = self.storage._paths.keys()\n+\n+    def __len__(self):\n+        return len(self.data)\n+\n+    def __getitem__(self, item):\n+        redirect = self.data[item]\n+        if redirect.startswith(self.portal_path):\n+            path = redirect[self.portal_path_len :]\n+        else:\n+            path = redirect\n+        redirect_to = self.storage.get(redirect)\n+        if redirect_to.startswith(self.portal_path):\n+            redirect_to = redirect_to[self.portal_path_len :]\n+        return {\'redirect\': redirect, \'path\': path, \'redirect-to\': redirect_to}\n+\n+\n+class RedirectsBatchView(PloneBatchView):\n+    def make_link(self, pagenumber=None, omit_params=None):\n+        if omit_params is None:\n+            omit_params = [\'ajax_load\']\n+        url = super(RedirectsBatchView, self).make_link(\n+            pagenumber, omit_params\n+        )\n+        return u\'{0:s}#manage-existing-aliases\'.format(url)\n+\n+\n+class RedirectsControlPanel(BrowserView):\n+    def batching(self):\n+        return RedirectsBatchView(self.context, self.request)(self.redirects())\n+\n+    @memoize\n+    def redirects(self):\n+        """ Get existing redirects from the redirection storage.\n+            Return dict with the strings redirect, path and redirect-to.\n+            Strip the id of the instance from path and redirect-to if\n+            it is present. (Seems to be always true)\n+            If id of instance is not present in path the var \'path\' and\n+            \'redirect\' are equal.\n+        """\n+        return Batch(\n+            RedirectionSet(self.request.form.get(\'q\', \'\')),\n+            15,\n+            int(self.request.form.get(\'b_start\', \'0\')),\n+            orphan=1,\n+        )\n+\n+    def __call__(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal = getSite()\n+        request = self.request\n+        form = request.form\n+        status = IStatusMessage(self.request)\n+        # We make a difference between errors when uploading a csv,\n+        # and errors in form submit.\n+        self.csv_errors = []\n+        self.form_errors = {}\n+\n+        if \'form.button.Remove\' in form:\n+            redirects = form.get(\'redirects\', ())\n+            for redirect in redirects:\n+                storage.remove(redirect)\n+            if len(redirects) == 0:\n+                err = _(u"No alternative urls selected for removal.")\n+                status.addStatusMessage(err, type=\'error\')\n+                self.form_errors[\'remove_redirects\'] = err\n+            elif len(redirects) > 1:\n+                status.addStatusMessage(\n+                    _(u"Alternative urls removed."), type=\'info\'\n+                )\n+            else:\n+                status.addStatusMessage(\n+                    _(u"Alternative url removed."), type=\'info\'\n+                )\n+        elif \'form.button.Add\' in form:\n+            err = self.add(\n+                form[\'redirection\'],\n+                form[\'target_path\'],\n+                portal,\n+                storage,\n+                status,\n+            )\n+            if not err:\n+                # clear our the form\n+                del form[\'redirection\']\n+                del form[\'target_path\']\n+        elif \'form.button.Upload\' in form:\n+            self.upload(form[\'file\'], portal, storage, status)\n+\n+        return self.index()\n+\n+    def add(self, redirection, target, portal, storage, status):\n+        """Add the redirections from the form. If anything goes wrong, do nothing.\n+\n+        Returns error message or nothing.\n+        """\n+        abs_redirection, err = absolutize_path(redirection, is_source=True)\n+        if err:\n+            self.form_errors[\'redirection\'] = err\n+        abs_target, target_err = absolutize_path(target, is_source=False)\n+        if target_err:\n+            self.form_errors[\'target_path\'] = target_err\n+\n+        if err and target_err:\n+            err = "{0} {1}".format(err, target_err)\n+        elif target_err:\n+            err = target_err\n+        else:\n+            if abs_redirection == abs_target:\n+                err = _(\n+                    u"Alternative urls that point to themselves will cause"\n+                    u"an endless cycle of redirects."\n+                )\n+                # TODO: detect indirect recursion\n+\n+        if err:\n+            status.addStatusMessage(_(err), type=\'error\')\n+        else:\n+            storage.add(abs_redirection, abs_target)\n+            status.addStatusMessage(\n+                _(u"Alternative url from {0} to {1} added.").format(\n+                    abs_redirection, abs_target\n+                ),\n+                type=\'info\',\n+            )\n+        return err\n+\n+    def upload(self, file, portal, storage, status):\n+        """Add the redirections from the CSV file `file`. If anything goes wrong, do nothing."""\n+\n+        # No file picked. Theres gotta be a better way to handle this.\n+        if not file.filename:\n+            err = _(u"Please pick a file to upload.")\n+            status.addStatusMessage(err, type=\'error\')\n+            self.form_errors[\'file\'] = err\n+            return\n+        # Turn all kinds of newlines into LF ones. The csv module doesn\'t do\n+        # its own newline sniffing and requires either \\n or \\r.\n+        contents = safe_text(file.read()).splitlines()\n+        file = StringIO(\'\\n\'.join(contents))\n+\n+        # Use first two lines as a representative sample for guessing format,\n+        # in case one is a bunch of headers.\n+        dialect = csv.Sniffer().sniff(file.readline() + file.readline())\n+        file.seek(0)\n+\n+        successes = []  # list of tuples: (abs_redirection, target)\n+        had_errors = False\n+        for i, fields in enumerate(csv.reader(file, dialect)):\n+            if len(fields) == 2:\n+                redirection, target = fields\n+                abs_redirection, err = absolutize_path(\n+                    redirection, is_source=True\n+                )\n+                abs_target, target_err = absolutize_path(\n+                    target, is_source=False\n+                )\n+                if err and target_err:\n+                    err = "%s %s" % (err, target_err)  # sloppy w.r.t. i18n\n+                elif target_err:\n+                    err = target_err\n+                else:\n+                    if abs_redirection == abs_target:\n+                        # TODO: detect indirect recursion\n+                        err = _(\n+                            u"Alternative urls that point to themselves will cause"\n+                            u"an endless cycle of redirects."\n+                        )\n+            else:\n+                err = _(u"Each line must have 2 columns.")\n+\n+            if not err:\n+                if not had_errors:  # else don\'t bother\n+                    successes.append((abs_redirection, abs_target))\n+            else:\n+                had_errors = True\n+                self.csv_errors.append(\n+                    dict(\n+                        line_number=i + 1,\n+                        line=dialect.delimiter.join(fields),\n+                        message=err,\n+                    )\n+                )\n+\n+        if not had_errors:\n+            for abs_redirection, abs_target in successes:\n+                storage.add(abs_redirection, abs_target)\n+            status.addStatusMessage(\n+                _(\n+                    u"${count} alternative urls added.",\n+                    mapping={\'count\': len(successes)},\n+                ),\n+                type=\'info\',\n+            )\n+\n+    @memoize\n+    def view_url(self):\n+        return self.context.absolute_url() + \'/@@redirection-controlpanel\'\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nnew file mode 100644\nindex 000000000..cd36ef3ed\n--- /dev/null\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -0,0 +1,420 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectionSet\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n+import math\n+import transaction\n+import unittest\n+\n+\n+class RedirectionControlPanelFunctionalTest(unittest.TestCase):\n+    """Test that changes in the redirection control panel are actually\n+    stored in the registry.\n+    """\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.browser = Browser(self.app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+    def test_redirection_controlpanel_link(self):\n+        self.browser.open("%s/@@overview-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'URL Management\').click()\n+\n+    def test_redirection_controlpanel_backlink(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.assertTrue("General" in self.browser.contents)\n+\n+    def test_redirection_controlpanel_sidebar(self):\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getLink(\'Site Setup\').click()\n+        self.assertTrue(\n+            self.browser.url.endswith(\'/plone/@@overview-controlpanel\')\n+        )\n+\n+    def test_redirection_controlpanel_view(self):\n+        view = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="redirection-controlpanel"\n+        )\n+        self.assertTrue(view())\n+\n+    def test_redirection_controlpanel_add_redirect(self):\n+        storage = getUtility(IRedirectionStorage)\n+        redirection_path = \'/alias-folder\'\n+        target_path = \'/test-folder\'\n+        storage_path = \'/plone/alias-folder\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = redirection_path\n+        self.browser.getControl(name=\'target_path\').value = target_path\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            storage.has_path(storage_path),\n+            u\'Redirection storage should have path "{0}"\'.format(storage_path),\n+        )\n+\n+    def test_redirection_controlpanel_set(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 1000)\n+        self.assertDictEqual(\n+            redirects[0],\n+            {\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'path\': \'/foo/0\',\n+                \'redirect-to\': \'/bar/0\',\n+            },\n+        )\n+        self.assertDictEqual(\n+            redirects[999],\n+            {\n+                \'redirect\': \'{0:s}/foo/999\'.format(portal_path),\n+                \'path\': \'/foo/999\',\n+                \'redirect-to\': \'/bar/999\',\n+            },\n+        )\n+        self.assertEqual(len(list(iter(redirects))), 1000)\n+        self.assertDictEqual(\n+            list(iter(redirects))[0],\n+            {\n+                \'redirect\': \'{0:s}/foo/0\'.format(portal_path),\n+                \'path\': \'/foo/0\',\n+                \'redirect-to\': \'/bar/0\',\n+            },\n+        )\n+\n+    def test_redirection_controlpanel_batching(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], self.layer[\'request\']),\n+            name=\'redirection-controlpanel\',\n+        )\n+        # Test that view/redirects returns batch\n+        self.assertIsInstance(view.redirects(), Batch)\n+\n+        # Test that view/batching returns batching with anchor in urls\n+        batching = view.batching()\n+        self.assertIn(\'?b_start:int=990#manage-existing-aliases\', batching)\n+\n+    def test_redirection_controlpanel_redirect_alias_exists(self):\n+        path_alias = \'/alias\'\n+        path_target = \'/test-folder\'\n+        storage_alias = \'/plone{0}\'.format(path_alias)\n+        storage_target = \'/plone{0}\'.format(path_target)\n+        storage = getUtility(IRedirectionStorage)\n+        storage.add(storage_alias, storage_target)\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            storage.get(storage_alias) == storage_target,\n+            \'{0} not target of alternative url!\'.format(storage_target),\n+        )\n+        self.assertTrue(\n+            \'The provided alternative url already exists!\'\n+            in self.browser.contents,\n+            u\'Message "alternative url already exists" not in page!\',\n+        )\n+\n+    def test_redirection_controlpanel_filtering(self):\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.layer[\'portal\'].absolute_url_path()\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo1/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+        for i in range(1000):\n+            storage.add(\n+                \'{0:s}/foo2/{1:s}\'.format(portal_path, str(i)),\n+                \'{0:s}/bar/{1:s}\'.format(portal_path, str(i)),\n+            )\n+\n+        redirects = RedirectionSet()\n+        self.assertEqual(len(redirects), 2000)\n+        redirects = RedirectionSet(query=\'/foo\')\n+        self.assertEqual(len(redirects), 2000)\n+        redirects = RedirectionSet(query=\'/foo1\')\n+        self.assertEqual(len(redirects), 1000)\n+        redirects = RedirectionSet(query=\'/foo2\')\n+        self.assertEqual(len(redirects), 1000)\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo1\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        request.form[\'q\'] = \'/foo2\'\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(1000 / 15.0))\n+\n+        request = self.layer[\'request\'].clone()\n+        view = getMultiAdapter(\n+            (self.layer[\'portal\'], request), name=\'redirection-controlpanel\'\n+        )\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n+\n+        # Filtering without new request does not have effect because memoize\n+        request.form[\'q\'] = \'/foo2\'\n+        self.assertEqual(view.redirects().numpages, math.ceil(2000 / 15.0))\n+\n+    def test_redirection_controlpanel_redirect_no_target(self):\n+        path_alias = \'/alias\'\n+        path_target = \'/not-existing\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'The provided target object does not exist.\'\n+            in self.browser.contents,\n+            u\'Message "target does not exist" not in page!\',\n+        )\n+\n+    def test_redirection_controlpanel_missing_slash_target(self):\n+        path_alias = \'/alias\'\n+        path_target = \'Members\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Target path must start with a slash.\' in self.browser.contents,\n+            u\'Errormessage for missing slash on target path missing\',\n+        )\n+\n+    def test_redirection_controlpanel_missing_slash_alias(self):\n+        path_alias = \'alias\'\n+        path_target = \'/Members\'\n+\n+        self.browser.open("%s/@@redirection-controlpanel" % self.portal_url)\n+        self.browser.getControl(name=\'redirection\').value = path_alias\n+        self.browser.getControl(name=\'target_path\').value = path_target\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url path must start with a slash.\'\n+            in self.browser.contents,\n+            u\'Errormessage for missing slash on alternative url missing\',\n+        )\n+\n+    def test_manage_aliases_standard(self):\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirection\').value = \'/alias\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/alias\'))\n+        self.assertEqual(storage.get(\'/plone/alias\'), \'/plone/test-folder\')\n+\n+    def test_manage_aliases_navigation_root(self):\n+        from zope.interface import alsoProvides\n+        from plone.app.layout.navigation.interfaces import INavigationRoot\n+\n+        storage = getUtility(IRedirectionStorage)\n+        folder = self.portal[\'test-folder\']\n+        alsoProvides(folder, INavigationRoot)\n+        transaction.commit()\n+\n+        self.browser.open("%s/@@manage-aliases" % folder.absolute_url())\n+        self.browser.getControl(name=\'redirection\').value = \'/alias\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/test-folder/alias\'))\n+        self.assertEqual(\n+            storage.get(\'/plone/test-folder/alias\'), \'/plone/test-folder\'\n+        )\n+\n+        # Add the navigation root path explicitly.\n+        self.browser.getControl(\n+            name=\'redirection\'\n+        ).value = \'/test-folder/alias2\'\n+        self.browser.getControl(name=\'form.button.Add\').click()\n+\n+        self.assertTrue(\n+            \'Alternative url added.\' in self.browser.contents,\n+            u\'Message for added alternative url missing\',\n+        )\n+        self.assertTrue(storage.has_path(\'/plone/test-folder/alias2\'))\n+        self.assertEqual(\n+            storage.get(\'/plone/test-folder/alias2\'), \'/plone/test-folder\'\n+        )\n+\n+    def test_absolutize_path(self):\n+        # absolutize_path is a helper function that returns a tuple\n+        # of absolute path and error message.\n+        from Products.CMFPlone.controlpanel.browser.redirects import (\n+            absolutize_path as ap,\n+        )\n+\n+        # A path is required.\n+        self.assertEqual(ap(\'\'), (\'\', \'You have to enter an alternative url.\'))\n+        self.assertEqual(\n+            ap(\'\', is_source=False), (\'\', \'You have to enter a target.\')\n+        )\n+\n+        # relative paths are not accepted\n+        self.assertEqual(\n+            ap(\'foo\'), (\'foo\', \'Alternative url path must start with a slash.\')\n+        )\n+        self.assertEqual(\n+            ap(\'foo\', is_source=True),\n+            (\'foo\', \'Alternative url path must start with a slash.\'),\n+        )\n+        self.assertEqual(\n+            ap(\'foo\', is_source=False),\n+            (\'foo\', \'Target path must start with a slash.\'),\n+        )\n+\n+        # absolute paths are good\n+        self.assertEqual(ap(\'/foo\'), (\'/plone/foo\', None))\n+        self.assertEqual(ap(\'/foo\', is_source=True), (\'/plone/foo\', None))\n+\n+        # for targets, an object must exist on the path\n+        self.assertEqual(\n+            ap(\'/foo\', is_source=False),\n+            (\'/plone/foo\', \'The provided target object does not exist.\'),\n+        )\n+        self.assertEqual(\n+            ap(\'/test-folder\', is_source=False), (\'/plone/test-folder\', None)\n+        )\n+        self.assertEqual(\n+            ap(\'/test-folder/@@sharing\', is_source=False),\n+            (\'/test-folder/@@sharing\', \'Target path must not be a view.\'),\n+        )\n+\n+        # A source must not exist.\n+        self.assertEqual(\n+            ap(\'/test-folder\'),\n+            (\n+                \'/plone/test-folder\',\n+                \'Cannot use a working path as alternative url.\',\n+            ),\n+        )\n+        # More general: a source must not be traversable already.\n+        self.assertEqual(\n+            ap(\'/view\'),\n+            (\'/plone/view\', \'Cannot use a working path as alternative url.\'),\n+        )\n+        self.assertEqual(\n+            ap(\'/@@overview-controlpanel\'),\n+            (\n+                \'/@@overview-controlpanel\',\n+                \'Alternative url path must not be a view.\',\n+            ),\n+        )\n+\n+        # And a source must not exist via (implicit) acquisition.\n+        # We might *want* to allow this, but such a redirect would not have effect,\n+        # because acquisition happens earlier.\n+        # See https://github.com/collective/Products.RedirectionTool/issues/12\n+        self.portal.invokeFactory(\'Document\', \'doc\')\n+        self.assertEqual(\n+            ap(\'/test-folder/doc\'),\n+            (\n+                \'/plone/test-folder/doc\',\n+                \'Cannot use a working path as alternative url.\',\n+            ),\n+        )\n+\n+        # A source must not already exist in the redirect list.\n+        storage = getUtility(IRedirectionStorage)\n+        portal_path = self.portal.absolute_url_path()\n+        storage.add(\n+            \'{0:s}/foo\'.format(portal_path),\n+            \'{0:s}/test-folder\'.format(portal_path),\n+        )\n+        self.assertEqual(\n+            ap(\'/foo\', is_source=True),\n+            (\'/plone/foo\', \'The provided alternative url already exists!\'),\n+        )\n+\n+        # For targets, we now accept external urls.\n+        # Note that this can only be done on the control panel,\n+        # so by default only by Site Administrators or Managers.\n+        self.assertEqual(\n+            ap(\'https://example.org\', is_source=False),\n+            (\'https://example.org\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'http://example.org\', is_source=False),\n+            (\'http://example.org\', None),\n+        )\n+        self.assertEqual(\n+            ap(\n+                \'https://example.org/some/path?foo=bar&bar=foo\',\n+                is_source=False,\n+            ),\n+            (\'https://example.org/some/path?foo=bar&bar=foo\', None),\n+        )\n+        self.assertEqual(\n+            ap(\'http://\', is_source=False),\n+            (\'http://\', \'Target path must start with a slash.\'),\n+        )\n+        # Using \'//\' to ignore http/https differences seems useless,\n+        # as we don\'t include content but only link to it.\n+        self.assertEqual(\n+            ap(\'//example.org\', is_source=False),\n+            (\n+                \'/plone//example.org\',\n+                \'The provided target object does not exist.\',\n+            ),\n+        )\ndiff --git a/Products/CMFPlone/profiles/default/actions.xml b/Products/CMFPlone/profiles/default/actions.xml\nindex 4acce12ee..103553962 100644\n--- a/Products/CMFPlone/profiles/default/actions.xml\n+++ b/Products/CMFPlone/profiles/default/actions.xml\n@@ -204,6 +204,18 @@\n    </property>\n    <property name="visible">True</property>\n    <property name="modal" type="text">{}</property>\n+  </object>\n+    <object name="redirection" meta_type="CMF Action" i18n:domain="plone">\n+   <property name="title" i18n:translate="">URL Management</property>\n+   <property name="description" i18n:translate=""></property>\n+   <property\n+      name="url_expr">string: ${object_url}/@@manage-aliases</property>\n+   <property name="icon_expr"></property>\n+   <property name="available_expr">python:not globals_view.isPortalOrPortalDefaultPage()</property>\n+   <property name="permissions">\n+    <element value="Manage Context Aliases"/>\n+   </property>\n+   <property name="visible">True</property>\n   </object>\n  </object>\n  <object name="portal_tabs" meta_type="CMF Action Category">\ndiff --git a/Products/CMFPlone/profiles/default/controlpanel.xml b/Products/CMFPlone/profiles/default/controlpanel.xml\nindex 3f6b28269..ab20ff6ba 100644\n--- a/Products/CMFPlone/profiles/default/controlpanel.xml\n+++ b/Products/CMFPlone/profiles/default/controlpanel.xml\n@@ -187,4 +187,13 @@\n     i18n:attributes="title">\n   <permission>Manage portal</permission>\n  </configlet>\n+ <configlet title="URL Management" action_id="RedirectionTool"\n+    icon_expr="string:$portal_url/action_icon.png"\n+    appId="Plone" category="plone-general"\n+    condition_expr=""\n+    url_expr="string:${portal_url}/@@redirection-controlpanel"\n+    visible="True"\n+    i18n:attributes="title">\n+  <permission>Manage Portal Aliases</permission>\n+ </configlet>\n </object>\ndiff --git a/Products/CMFPlone/profiles/default/rolemap.xml b/Products/CMFPlone/profiles/default/rolemap.xml\nindex 54dd70182..04c4a4797 100644\n--- a/Products/CMFPlone/profiles/default/rolemap.xml\n+++ b/Products/CMFPlone/profiles/default/rolemap.xml\n@@ -203,5 +203,15 @@\n                 acquire="False">\n       <role name="Authenticated"/>\n     </permission>\n+    <permission name="Manage Context Aliases" acquire="True">\n+      <role name="Manager"/>\n+      <role name="Site Administrator"/>\n+      <role name="Owner"/>\n+      <role name="Editor"/>\n+    </permission>\n+    <permission name="Manage Portal Aliases" acquire="True">\n+      <role name="Manager"/>\n+      <role name="Site Administrator"/>\n+    </permission>\n   </permissions>\n </rolemap>\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 02a1703ec..faed08cac 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -554,7 +554,7 @@ def testObjectButtonActionsOnDefaultDocumentDoNotApplyToParent(self):\n         self.folder.invokeFactory(\'Document\', \'index_html\')\n         acts = self.actions.listFilteredActionsFor(self.folder.index_html)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 4)\n+        self.assertEqual(len(buttons), 5)\n         urls = [a[\'url\'] for a in buttons]\n         for url in urls:\n             self.assertFalse(\n@@ -568,10 +568,13 @@ def testObjectButtonActionsPerformCorrectAction(self):\n         self.folder.invokeFactory(\'Document\', \'index_html\')\n         acts = self.actions.listFilteredActionsFor(self.folder.index_html)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 4)\n-        # special case for delete which needs a confirmation form\n+        self.assertEqual(len(buttons), 5)\n+        # special case for delete which needs a confirmation form,\n+        # and for redirection which does not confirm to the url policy,\n+        # which apparently is that action id X should have url object_X.\n         urls = [\n-            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in (\'delete\',)\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in\n+            (\'delete\', \'redirection\')\n         ]\n         for url in urls:\n             # ensure that e.g. the \'copy\' url contains object_copy\n@@ -589,6 +592,11 @@ def testObjectButtonActionsPerformCorrectAction(self):\n             "object_delete does not use the confirmation form",\n         )\n \n+        redirection_action = [\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] == \'redirection\'\n+        ][0]\n+        self.assertIn(\'@@manage-aliases\', redirection_action[1])\n+\n     def testObjectButtonActionsInExpectedOrder(self):\n         # The object buttons need to be in a standardized order\n         self.setRoles([\'Manager\', \'Member\'])\n@@ -596,11 +604,14 @@ def testObjectButtonActionsInExpectedOrder(self):\n         self.folder.cb_dataValid = True\n         acts = self.actions.listFilteredActionsFor(self.folder)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 6)\n+        self.assertEqual(len(buttons), 7)\n         ids = [(a[\'id\']) for a in buttons]\n         self.assertEqual(\n             ids,\n-            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', \'ical_import_enable\'],\n+            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\',\n+             \'redirection\',\n+             \'ical_import_enable\',\n+             ],\n         )\n \n     def testCustomSkinFolderExists(self):\ndiff --git a/news/1486.feature b/news/1486.feature\nnew file mode 100644\nindex 000000000..2cf99dbc6\n--- /dev/null\n+++ b/news/1486.feature\n@@ -0,0 +1,4 @@\n+PLIP 1486: Merge Products.RedirectionTool into core.\n+Allow users to manage redirects on their site and aliases to content.\n+See https://github.com/plone/Products.CMFPlone/issues/1486\n+[staeff, maurits]\n\\ No newline at end of file\n'

