Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:07:27+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/3a3528108c12de54853cbcfd927ec13e31b0a1ef

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/b2d5d4a5.internal
A tox.ini
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d4a62f1\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "b2d5d4a5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/b2d5d4a5.internal b/news/b2d5d4a5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/b2d5d4a5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 34577c8..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,7 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.py\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8b60bcc\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.versioningbehavior\n+extras =\n+    test\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:09:38+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/866a0dae4c2829f99a7f94fd15f703f655430aa0

chore: pyupgrade

Files changed:
M plone/app/versioningbehavior/__init__.py
M plone/app/versioningbehavior/behaviors.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/setuphandlers.py
M plone/app/versioningbehavior/subscribers.py
M plone/app/versioningbehavior/testing.py
M plone/app/versioningbehavior/tests/test_IntegrationTests.py
M plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/tests/test_functional.py
M plone/app/versioningbehavior/tests/test_modifiers.py
M plone/app/versioningbehavior/tests/test_subscribers.py
M plone/app/versioningbehavior/tests/tests.py
M plone/app/versioningbehavior/utils.py
M setup.py

b'diff --git a/plone/app/versioningbehavior/__init__.py b/plone/app/versioningbehavior/__init__.py\nindex d99c1ef..40a6c9a 100644\n--- a/plone/app/versioningbehavior/__init__.py\n+++ b/plone/app/versioningbehavior/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.interfaces import HAVE_BLOBS\n from Products.CMFCore.permissions import ManagePortal\n \ndiff --git a/plone/app/versioningbehavior/behaviors.py b/plone/app/versioningbehavior/behaviors.py\nindex 82638c1..b3f44f4 100644\n--- a/plone/app/versioningbehavior/behaviors.py\n+++ b/plone/app/versioningbehavior/behaviors.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior import _\n from plone.autoform import directives as form\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -22,21 +21,21 @@ class IVersionable(model.Schema):\n \n     model.fieldset(\n         \'settings\',\n-        label=_(u\'Settings\'),\n+        label=_(\'Settings\'),\n         fields=[\'versioning_enabled\']\n     )\n     changeNote = schema.TextLine(\n-        title=_(u\'label_change_note\', default=u\'Change Note\'),\n-        description=_(u\'help_change_note\',\n-                      default=u\'Enter a comment that describes the changes you made. \'\n-                              u\'If versioning is manual, you must set a change note \'\n-                              u\'to create the new version.\'),\n+        title=_(\'label_change_note\', default=\'Change Note\'),\n+        description=_(\'help_change_note\',\n+                      default=\'Enter a comment that describes the changes you made. \'\n+                              \'If versioning is manual, you must set a change note \'\n+                              \'to create the new version.\'),\n         required=False)\n \n     versioning_enabled = schema.Bool(\n-        title=_(u\'label_versioning_enabled\', default=u\'Versioning enabled\'),\n-        description=_(u\'help_versioning_enabled\',\n-                      default=u\'Enable/disable versioning for this document.\'),\n+        title=_(\'label_versioning_enabled\', default=\'Versioning enabled\'),\n+        description=_(\'help_versioning_enabled\',\n+                      default=\'Enable/disable versioning for this document.\'),\n         default=True,\n         required=False)\n \n@@ -56,7 +55,7 @@ class IVersioningSupport(Interface):\n \n @implementer(IVersionable)\n @adapter(IDexterityContent)\n-class Versionable(object):\n+class Versionable:\n     """ The Versionable adapter prohibits dexterity from saving the changeNote\n     on the context. It stores it in a request-annotation for later use in\n     event-handlers\ndiff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex 5568dc0..1cee7bc 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.utils import set_headers, stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n-from six.moves.urllib.parse import urlencode\n+from urllib.parse import urlencode\n from zope.component import getMultiAdapter\n from zope.publisher.interfaces import NotFound\n \n import re\n \n \n-class VersionView(object):\n+class VersionView:\n     """Renders the content-core slot of a version of a content item.\n \n     Currently it works by rendering the @@content-core view of the item and then converting the\n@@ -44,7 +43,7 @@ def __init__(self, context, request):\n     def __call__(self):\n         version_id = self.request.get(\'version_id\', None)\n         if not version_id:\n-            raise ValueError(u\'Missing parameter on the request: version_id\')\n+            raise ValueError(\'Missing parameter on the request: version_id\')\n \n         content_core_view = getMultiAdapter((self.context, self.request), name=\'content-core\')\n         html = content_core_view()\n@@ -78,10 +77,10 @@ def _get_download_version_link(self, version_id, field_id=None, filename=None):\n             parameters.append((\'filename\', filename))\n \n         query_string = urlencode(parameters)\n-        return \'{}/@@download-version?{}\'.format(self.context.absolute_url(), query_string)\n+        return f\'{self.context.absolute_url()}/@@download-version?{query_string}\'\n \n \n-class DownloadVersion(object):\n+class DownloadVersion:\n     """Downloads a file in a field of a content item at an specific version.\n \n \n@@ -102,7 +101,7 @@ def __init__(self, context, request):\n     def __call__(self):\n         version_id = self.request.get(\'version_id\', None)\n         if not version_id:\n-            raise ValueError(u\'Missing parameter on the request: version_id\')\n+            raise ValueError(\'Missing parameter on the request: version_id\')\n \n         field_id = self.request.get(\'field_id\') or IPrimaryFieldInfo(self.context).fieldname\n         filename = self.request.get(\'filename\')\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 9fa0318..0259c95 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from plone.behavior.registration import BehaviorRegistrationNotFound\n@@ -40,7 +39,7 @@ def getCallbacks(values):\n     # field value here because it may be a newly\n     # created object and we want to ensure that\n     # it\'s not garbage collected and "reused".\n-    mapping = dict((id(value), value) for value in values)\n+    mapping = {id(value): value for value in values}\n \n     def persistent_id(obj):\n         return mapping.get(id(obj), None)\ndiff --git a/plone/app/versioningbehavior/setuphandlers.py b/plone/app/versioningbehavior/setuphandlers.py\nindex 9614473..0d2eeba 100644\n--- a/plone/app/versioningbehavior/setuphandlers.py\n+++ b/plone/app/versioningbehavior/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior.modifiers import modifiers\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions.interfaces.IModifier import IConditionalTalesModifier\ndiff --git a/plone/app/versioningbehavior/subscribers.py b/plone/app/versioningbehavior/subscribers.py\nindex 11859e7..4dd86ae 100644\n--- a/plone/app/versioningbehavior/subscribers.py\n+++ b/plone/app/versioningbehavior/subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior import _\n from plone.app.versioningbehavior.utils import get_change_note\n from Products.CMFCore.utils import getToolByName\n@@ -86,8 +85,8 @@ def create_initial_version_after_adding(context, event):\n         return\n \n     # get the change not\n-    default_changeNote = _(u\'initial_version_changeNote\',\n-                           default=u\'Initial version\')\n+    default_changeNote = _(\'initial_version_changeNote\',\n+                           default=\'Initial version\')\n     if getattr(context, \'REQUEST\', None):\n         changeNote = get_change_note(context.REQUEST, default_changeNote)\n     else:\ndiff --git a/plone/app/versioningbehavior/testing.py b/plone/app/versioningbehavior/testing.py\nindex 144e25d..b6a5e6b 100644\n--- a/plone/app/versioningbehavior/testing.py\n+++ b/plone/app/versioningbehavior/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.app.testing import applyProfile\ndiff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\nindex 3506ec9..efd3b2d 100644\n--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\ndiff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py\nindex 9b31896..a963969 100644\n--- a/plone/app/versioningbehavior/tests/test_browser.py\n+++ b/plone/app/versioningbehavior/tests/test_browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Tests for the `browser` module."""\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -24,10 +23,10 @@ def setUp(self):\n         self.portal.invokeFactory(\n             type_name=TEST_CONTENT_TYPE_ID,\n             id=\'obj1\',\n-            title=u\'Object 1 Title\',\n-            description=u\'Description of obect number 1\',\n-            text=u\'Object 1 some footext.\',\n-            file=NamedBlobFile(filename=u\'object_1_file.txt\', data=\'Object 1 Data\'),\n+            title=\'Object 1 Title\',\n+            description=\'Description of obect number 1\',\n+            text=\'Object 1 some footext.\',\n+            file=NamedBlobFile(filename=\'object_1_file.txt\', data=\'Object 1 Data\'),\n         )\n         self.obj1 = self.portal[\'obj1\']\n \n@@ -53,7 +52,7 @@ def test_convert_download_links(self):\n         """Tests for the `_get_download_version_link` method."""\n         obj = self.obj1\n         view = browser.VersionView(obj, self.request)\n-        href_template = u\'<a href="{}" />\'\n+        href_template = \'<a href="{}" />\'\n \n         def _assert(old_path, version, field=None, filename=None):\n             old_url = obj.absolute_url() + old_path\ndiff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py\nindex 1fc8bdc..15d8fc3 100644\n--- a/plone/app/versioningbehavior/tests/test_functional.py\n+++ b/plone/app/versioningbehavior/tests/test_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n@@ -22,15 +21,15 @@ def setUp(self):\n         self.browser = Browser(self.layer[\'app\'])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n+            \'Authorization\', f\'Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}\')\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n         self.portal.invokeFactory(\n             type_name=TEST_CONTENT_TYPE_ID,\n             id=\'obj1\',\n-            title=u\'Object 1 Title\',\n-            description=u\'Description of obect number 1\',\n-            text=u\'Object 1 some footext.\',\n+            title=\'Object 1 Title\',\n+            description=\'Description of obect number 1\',\n+            text=\'Object 1 some footext.\',\n         )\n         self.obj1 = self.portal[\'obj1\']\n         transaction.commit()\n@@ -77,7 +76,7 @@ def _assert_versions_history_form(self, version_id, obj_id, title, text):\n \n         if version_id == 0:\n             self.assertIn(\n-                \'/%s/versions_history_form?version_id=%s\' % (obj_id, version_id),\n+                f\'/{obj_id}/versions_history_form?version_id={version_id}\',\n                 self.browser.contents)\n         self.assertIn(\'Current revision\', self.browser.contents)\n         self.assertIn(\'Revert to this revision\', self.browser.contents)\ndiff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py\nindex fd78cf1..67b4f69 100644\n--- a/plone/app/versioningbehavior/tests/test_modifiers.py\n+++ b/plone/app/versioningbehavior/tests/test_modifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs\n@@ -13,7 +12,7 @@\n from plone.namedfile import field\n from plone.namedfile.file import NamedBlobFile\n from plone.supermodel import model\n-from six import StringIO\n+from io import StringIO\n from z3c.relationfield.relation import RelationValue\n from z3c.relationfield.schema import RelationChoice\n from z3c.relationfield.schema import RelationList\n@@ -29,23 +28,23 @@\n \n \n class IBlobFile(model.Schema):\n-    file = field.NamedBlobFile(title=u\'File\')\n+    file = field.NamedBlobFile(title=\'File\')\n \n \n alsoProvides(IBlobFile, IFormFieldProvider)\n \n \n class IRelationsType(Interface):\n-    single = RelationChoice(title=u\'Single\',\n+    single = RelationChoice(title=\'Single\',\n                             required=False, values=[])\n-    multiple = RelationList(title=u\'Multiple (Relations field)\',\n+    multiple = RelationList(title=\'Multiple (Relations field)\',\n                             required=False)\n \n \n class IRelationsBehavior(model.Schema):\n-    single = RelationChoice(title=u\'Single\',\n+    single = RelationChoice(title=\'Single\',\n                             required=False, values=[])\n-    multiple = RelationList(title=u\'Multiple (Relations field)\',\n+    multiple = RelationList(title=\'Multiple (Relations field)\',\n                             required=False)\n \n \n@@ -80,7 +79,7 @@ def testCloneNamedFileBlobsInSchema(self):\n         self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n \n         file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n         modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n@@ -90,7 +89,7 @@ def testCloneNamedFileBlobsInSchema(self):\n         self.assertTrue(IBlob.providedBy(blob))\n \n         file2 = createContentInContainer(self.portal, \'BlobFile\')\n-        file2.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file2.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n         modifier.reattachReferencedAttributes(file2, attrs_dict)\n         self.assertTrue(file2.file._blob is blob)\n \n@@ -121,7 +120,7 @@ def testCloneNamedFileBlobsInBehavior(self):\n \n         file1 = createContentInContainer(self.portal, \'BlobFile\')\n         IBlobFile(file1).file = NamedBlobFile(\'dummy test data\',\n-                                              filename=u\'test.txt\')\n+                                              filename=\'test.txt\')\n         modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n@@ -132,7 +131,7 @@ def testCloneNamedFileBlobsInBehavior(self):\n \n         file2 = createContentInContainer(self.portal, \'BlobFile\')\n         IBlobFile(file2).file = NamedBlobFile(\'dummy test data\',\n-                                              filename=u\'test.txt\')\n+                                              filename=\'test.txt\')\n         modifier.reattachReferencedAttributes(file2, attrs_dict)\n         self.assertTrue(IBlobFile(file2).file._blob is blob)\n \n@@ -153,7 +152,7 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):\n         self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n \n         file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n         modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n@@ -190,7 +189,7 @@ def testCloneNamedFileBlobsWithNoFile(self):\n \n         # Previous version without file but working copy has a file.\n         self.portal.portal_repository.save(file1)\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n             \'plone.dexterity.schema.generated.plone_0_BlobFile.file\'\n@@ -343,7 +342,7 @@ def testRelationsInBehaviorsForMigratedDXObjects(self):\n         source = createContentInContainer(self.portal, \'RelationsType\')\n \n         # Test modifier when no relations are set\n-        class Dummy(object):\n+        class Dummy:\n             pass\n \n         repo_clone = Dummy()\n@@ -386,7 +385,7 @@ def testCloneNamedFileBlobsInUpdatedSchema(self):\n         transaction.commit()\n \n         file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n         modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         schema_name = portalTypeToSchemaName(\ndiff --git a/plone/app/versioningbehavior/tests/test_subscribers.py b/plone/app/versioningbehavior/tests/test_subscribers.py\nindex e150c74..0867810 100644\n--- a/plone/app/versioningbehavior/tests/test_subscribers.py\n+++ b/plone/app/versioningbehavior/tests/test_subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.versioningbehavior.testing import \\\ndiff --git a/plone/app/versioningbehavior/tests/tests.py b/plone/app/versioningbehavior/tests/tests.py\nindex ca074f6..f3ad03b 100644\n--- a/plone/app/versioningbehavior/tests/tests.py\n+++ b/plone/app/versioningbehavior/tests/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/versioningbehavior/utils.py b/plone/app/versioningbehavior/utils.py\nindex 2af0423..62e23c1 100644\n--- a/plone/app/versioningbehavior/utils.py\n+++ b/plone/app/versioningbehavior/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.annotation.interfaces import IAnnotations\n from zope.publisher.interfaces.browser import IBrowserRequest\n \ndiff --git a/setup.py b/setup.py\nindex 23de453..f0f4159 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:10:16+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/d48948658cd6c761cfad9046ef7fc0055bab8090

chore: isort

Files changed:
M plone/app/versioningbehavior/__init__.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/tests/test_IntegrationTests.py
M plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/tests/test_functional.py
M plone/app/versioningbehavior/tests/test_modifiers.py
M plone/app/versioningbehavior/tests/test_subscribers.py
M plone/app/versioningbehavior/tests/tests.py

b"diff --git a/plone/app/versioningbehavior/__init__.py b/plone/app/versioningbehavior/__init__.py\nindex 40a6c9a..b5881e9 100644\n--- a/plone/app/versioningbehavior/__init__.py\n+++ b/plone/app/versioningbehavior/__init__.py\n@@ -1,8 +1,8 @@\n from plone.namedfile.interfaces import HAVE_BLOBS\n from Products.CMFCore.permissions import ManagePortal\n-\n from zope.i18nmessageid import MessageFactory\n \n+\n _ = MessageFactory('plone')\n \n \ndiff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex 1cee7bc..48641e0 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -1,4 +1,5 @@\n-from plone.namedfile.utils import set_headers, stream_data\n+from plone.namedfile.utils import set_headers\n+from plone.namedfile.utils import stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n from urllib.parse import urlencode\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 0259c95..197d0fd 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -14,7 +14,8 @@\n from Products.CMFEditions.interfaces.IModifier import ISaveRetrieveModifier\n from Products.CMFEditions.Modifiers import ConditionalTalesModifier\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n+from z3c.relationfield.interfaces import IRelationChoice\n+from z3c.relationfield.interfaces import IRelationList\n from zope.interface import implementer\n from zope.schema import getFields\n \ndiff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\nindex efd3b2d..fc29833 100644\n--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n@@ -1,6 +1,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.utils import getToolByName\n \ndiff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py\nindex a963969..db17cab 100644\n--- a/plone/app/versioningbehavior/tests/test_browser.py\n+++ b/plone/app/versioningbehavior/tests/test_browser.py\n@@ -3,7 +3,9 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_ROLES\n from plone.app.versioningbehavior import browser\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING,\n+)\n from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID\n from plone.namedfile import NamedBlobFile\n from zope.component import getMultiAdapter\ndiff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py\nindex 15d8fc3..d626d4b 100644\n--- a/plone/app/versioningbehavior/tests/test_functional.py\n+++ b/plone/app/versioningbehavior/tests/test_functional.py\n@@ -2,7 +2,9 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID\n from plone.testing.z2 import Browser\n \ndiff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py\nindex 67b4f69..42f561f 100644\n--- a/plone/app/versioningbehavior/tests/test_modifiers.py\n+++ b/plone/app/versioningbehavior/tests/test_modifiers.py\n@@ -1,9 +1,14 @@\n+from io import StringIO\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs\n from plone.app.versioningbehavior.modifiers import SkipRelations\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING,\n+)\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.schema import portalTypeToSchemaName\n@@ -12,7 +17,6 @@\n from plone.namedfile import field\n from plone.namedfile.file import NamedBlobFile\n from plone.supermodel import model\n-from io import StringIO\n from z3c.relationfield.relation import RelationValue\n from z3c.relationfield.schema import RelationChoice\n from z3c.relationfield.schema import RelationList\n@@ -236,8 +240,8 @@ def testRelations(self):\n         source.multiple = [RelationValue(intids.getId(target))]\n \n         # Update relations\n-        from zope.lifecycleevent import ObjectModifiedEvent\n         from zope.event import notify\n+        from zope.lifecycleevent import ObjectModifiedEvent\n         notify(ObjectModifiedEvent(source))\n \n         modifier = SkipRelations('modifier', 'Modifier')\n@@ -312,8 +316,8 @@ def testRelationsInBehaviors(self):\n         ]\n \n         # Update relations\n-        from zope.lifecycleevent import ObjectModifiedEvent\n         from zope.event import notify\n+        from zope.lifecycleevent import ObjectModifiedEvent\n         notify(ObjectModifiedEvent(source))\n \n         modifier = SkipRelations('modifier', 'Modifier')\ndiff --git a/plone/app/versioningbehavior/tests/test_subscribers.py b/plone/app/versioningbehavior/tests/test_subscribers.py\nindex 0867810..17b165a 100644\n--- a/plone/app/versioningbehavior/tests/test_subscribers.py\n+++ b/plone/app/versioningbehavior/tests/test_subscribers.py\n@@ -1,7 +1,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.versioningbehavior.testing import \\\n-    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING,\n+)\n from Products.CMFCore.utils import getToolByName\n from zope.event import notify\n from zope.lifecycleevent import ObjectModifiedEvent\ndiff --git a/plone/app/versioningbehavior/tests/tests.py b/plone/app/versioningbehavior/tests/tests.py\nindex f3ad03b..62e1676 100644\n--- a/plone/app/versioningbehavior/tests/tests.py\n+++ b/plone/app/versioningbehavior/tests/tests.py\n@@ -1,4 +1,6 @@\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n from plone.testing import layered\n \n import doctest\n"

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:13:11+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/d0b802c45560358473f315261c70de023edf9e35

chore: black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/versioningbehavior/__init__.py
M plone/app/versioningbehavior/behaviors.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/setuphandlers.py
M plone/app/versioningbehavior/subscribers.py
M plone/app/versioningbehavior/testing.py
M plone/app/versioningbehavior/tests/test_IntegrationTests.py
M plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/tests/test_functional.py
M plone/app/versioningbehavior/tests/test_modifiers.py
M plone/app/versioningbehavior/tests/test_subscribers.py
M plone/app/versioningbehavior/tests/tests.py
M plone/app/versioningbehavior/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/versioningbehavior/__init__.py b/plone/app/versioningbehavior/__init__.py\nindex b5881e9..1c8f41e 100644\n--- a/plone/app/versioningbehavior/__init__.py\n+++ b/plone/app/versioningbehavior/__init__.py\n@@ -3,19 +3,19 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n def initialize(context):\n-    """Registers modifiers with zope (on zope startup).\n-    """\n+    """Registers modifiers with zope (on zope startup)."""\n     if HAVE_BLOBS:\n         from .modifiers import modifiers\n \n         for m in modifiers:\n             context.registerClass(\n-                m[\'wrapper\'], m[\'id\'],\n+                m["wrapper"],\n+                m["id"],\n                 permission=ManagePortal,\n-                constructors=(m[\'form\'], m[\'factory\']),\n-                icon=m[\'icon\'],\n+                constructors=(m["form"], m["factory"]),\n+                icon=m["icon"],\n             )\ndiff --git a/plone/app/versioningbehavior/behaviors.py b/plone/app/versioningbehavior/behaviors.py\nindex b3f44f4..8588539 100644\n--- a/plone/app/versioningbehavior/behaviors.py\n+++ b/plone/app/versioningbehavior/behaviors.py\n@@ -14,35 +14,38 @@\n \n \n class IVersionable(model.Schema):\n-    """ Behavior for enabling CMFEditions\'s versioning for dexterity\n+    """Behavior for enabling CMFEditions\'s versioning for dexterity\n     content types. Be shure to enable versioning in the plone types\n     control-panel for your content type.\n     """\n \n-    model.fieldset(\n-        \'settings\',\n-        label=_(\'Settings\'),\n-        fields=[\'versioning_enabled\']\n-    )\n+    model.fieldset("settings", label=_("Settings"), fields=["versioning_enabled"])\n     changeNote = schema.TextLine(\n-        title=_(\'label_change_note\', default=\'Change Note\'),\n-        description=_(\'help_change_note\',\n-                      default=\'Enter a comment that describes the changes you made. \'\n-                              \'If versioning is manual, you must set a change note \'\n-                              \'to create the new version.\'),\n-        required=False)\n+        title=_("label_change_note", default="Change Note"),\n+        description=_(\n+            "help_change_note",\n+            default="Enter a comment that describes the changes you made. "\n+            "If versioning is manual, you must set a change note "\n+            "to create the new version.",\n+        ),\n+        required=False,\n+    )\n \n     versioning_enabled = schema.Bool(\n-        title=_(\'label_versioning_enabled\', default=\'Versioning enabled\'),\n-        description=_(\'help_versioning_enabled\',\n-                      default=\'Enable/disable versioning for this document.\'),\n+        title=_("label_versioning_enabled", default="Versioning enabled"),\n+        description=_(\n+            "help_versioning_enabled",\n+            default="Enable/disable versioning for this document.",\n+        ),\n         default=True,\n-        required=False)\n+        required=False,\n+    )\n+\n+    form.order_after(changeNote="*")\n+    form.omitted("changeNote")\n+    form.no_omit(IEditForm, "changeNote")\n+    form.no_omit(IAddForm, "changeNote")\n \n-    form.order_after(changeNote=\'*\')\n-    form.omitted(\'changeNote\')\n-    form.no_omit(IEditForm, \'changeNote\')\n-    form.no_omit(IAddForm, \'changeNote\')\n \n alsoProvides(IVersionable, IFormFieldProvider)\n \n@@ -56,7 +59,7 @@ class IVersioningSupport(Interface):\n @implementer(IVersionable)\n @adapter(IDexterityContent)\n class Versionable:\n-    """ The Versionable adapter prohibits dexterity from saving the changeNote\n+    """The Versionable adapter prohibits dexterity from saving the changeNote\n     on the context. It stores it in a request-annotation for later use in\n     event-handlers\n \n@@ -68,13 +71,13 @@ def __init__(self, context):\n \n     @property\n     def changeNote(self):\n-        return \'\'\n+        return ""\n \n     @changeNote.setter\n     def changeNote(self, value):\n         # store the value for later use (see events.py)\n         annotation = IAnnotations(self.context.REQUEST)\n-        annotation[\'plone.app.versioningbehavior-changeNote\'] = value\n+        annotation["plone.app.versioningbehavior-changeNote"] = value\n \n     @property\n     def versioning_enabled(self):\n@@ -82,4 +85,4 @@ def versioning_enabled(self):\n \n     @versioning_enabled.setter\n     def versioning_enabled(self, value):\n-        setattr(self.context, \'versioning_enabled\', value)\n+        setattr(self.context, "versioning_enabled", value)\ndiff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex 48641e0..7beaecb 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -29,24 +29,24 @@ def __init__(self, context, request):\n         # Example: ++widget++form.widgets.my_interface.my_field/@@download/my_file.txt\n         # Example: view-name/++widget++form.widgets.my_field/@@download/my_file.txt\n         (\n-            r\'([@a-zA-Z0-9_-]+/)?\'\n-            r\'\\+\\+widget\\+\\+form\\.widgets\\.([a-zA-Z0-9_-]+\\.)?(?P<field_id>[a-zA-Z0-9_-]+)\'\n+            r"([@a-zA-Z0-9_-]+/)?"\n+            r"\\+\\+widget\\+\\+form\\.widgets\\.([a-zA-Z0-9_-]+\\.)?(?P<field_id>[a-zA-Z0-9_-]+)"\n             r\'/@@download/(?P<filename>[^"\\\']+)\'\n         ),\n-\n         # Example: @@download/my_field/my_file.txt\n         r\'@@download/(?P<field_id>[a-zA-Z0-9_-]+)/(?P<filename>[^"\\\']+)\',\n-\n         # Example: @@images/aedf-0123.png\n-        r\'@@images/[0-9a-f\\-]+\\.[a-z]+\',\n+        r"@@images/[0-9a-f\\-]+\\.[a-z]+",\n     )\n \n     def __call__(self):\n-        version_id = self.request.get(\'version_id\', None)\n+        version_id = self.request.get("version_id", None)\n         if not version_id:\n-            raise ValueError(\'Missing parameter on the request: version_id\')\n+            raise ValueError("Missing parameter on the request: version_id")\n \n-        content_core_view = getMultiAdapter((self.context, self.request), name=\'content-core\')\n+        content_core_view = getMultiAdapter(\n+            (self.context, self.request), name="content-core"\n+        )\n         html = content_core_view()\n         return self._convert_download_links(html, version_id)\n \n@@ -57,28 +57,28 @@ def repl(match):\n             groups = match.groupdict()\n             return self._get_download_version_link(\n                 version_id=version_id,\n-                field_id=groups.get(\'field_id\'),\n-                filename=groups.get(\'filename\'),\n+                field_id=groups.get("field_id"),\n+                filename=groups.get("filename"),\n             )\n \n         context_url = self.context.absolute_url()\n         for pattern in self._download_url_patterns:\n-            compiled_pattern = re.compile(context_url + \'/\' + pattern)\n+            compiled_pattern = re.compile(context_url + "/" + pattern)\n             transformed_html = compiled_pattern.sub(repl, transformed_html)\n \n         return transformed_html\n \n     def _get_download_version_link(self, version_id, field_id=None, filename=None):\n-        parameters = [(\'version_id\', version_id)]\n+        parameters = [("version_id", version_id)]\n \n         if field_id:\n-            parameters.append((\'field_id\', field_id))\n+            parameters.append(("field_id", field_id))\n \n         if filename:\n-            parameters.append((\'filename\', filename))\n+            parameters.append(("filename", filename))\n \n         query_string = urlencode(parameters)\n-        return f\'{self.context.absolute_url()}/@@download-version?{query_string}\'\n+        return f"{self.context.absolute_url()}/@@download-version?{query_string}"\n \n \n class DownloadVersion:\n@@ -100,15 +100,17 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-        version_id = self.request.get(\'version_id\', None)\n+        version_id = self.request.get("version_id", None)\n         if not version_id:\n-            raise ValueError(\'Missing parameter on the request: version_id\')\n+            raise ValueError("Missing parameter on the request: version_id")\n \n-        field_id = self.request.get(\'field_id\') or IPrimaryFieldInfo(self.context).fieldname\n-        filename = self.request.get(\'filename\')\n-        do_not_stream = self.request.get(\'do_not_stream\')\n+        field_id = (\n+            self.request.get("field_id") or IPrimaryFieldInfo(self.context).fieldname\n+        )\n+        filename = self.request.get("filename")\n+        do_not_stream = self.request.get("do_not_stream")\n \n-        repository = getToolByName(self.context, \'portal_repository\')\n+        repository = getToolByName(self.context, "portal_repository")\n         old_obj = repository.retrieve(self.context, version_id).object\n \n         # Will only work if the file is stored as an attribute with the same\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 197d0fd..1b053d2 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -20,12 +20,11 @@\n from zope.schema import getFields\n \n \n-manage_CloneNamedFileBlobsAddForm =  \\\n-    PageTemplateFile(\n-        \'www/CloneNamedFileBlobs.pt\',\n-        globals(),\n-        __name__=\'manage_CloneNamedFileBlobs\',\n-    )\n+manage_CloneNamedFileBlobsAddForm = PageTemplateFile(\n+    "www/CloneNamedFileBlobs.pt",\n+    globals(),\n+    __name__="manage_CloneNamedFileBlobs",\n+)\n \n \n def getCallbacks(values):\n@@ -63,31 +62,28 @@ def getFieldValues(obj, *ifaces):\n \n \n def manage_addCloneNamedFileBlobs(self, id, title=None, REQUEST=None):\n-    """Add a clone namedfile blobs modifier.\n-    """\n+    """Add a clone namedfile blobs modifier."""\n     modifier = CloneNamedFileBlobs(id, title)\n     self._setObject(id, modifier)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n+        REQUEST["RESPONSE"].redirect(self.absolute_url() + "/manage_main")\n \n \n-manage_SkipRelationsAddForm =  \\\n-    PageTemplateFile(\n-        \'www/SkipRelations.pt\',\n-        globals(),\n-        __name__=\'manage_SkipRelationsAddForm\',\n-    )\n+manage_SkipRelationsAddForm = PageTemplateFile(\n+    "www/SkipRelations.pt",\n+    globals(),\n+    __name__="manage_SkipRelationsAddForm",\n+)\n \n \n def manage_addSkipRelations(self, id, title=None, REQUEST=None):\n-    """Add a skip relations modifier.\n-    """\n+    """Add a skip relations modifier."""\n     modifier = SkipRelations(id, title)\n     self._setObject(id, modifier)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n+        REQUEST["RESPONSE"].redirect(self.absolute_url() + "/manage_main")\n \n \n @implementer(IAttributeModifier, ICloneModifier)\n@@ -112,8 +108,9 @@ def getReferencedAttributes(self, obj):\n         file_data = {}\n         for schemata in iterSchemata(obj):\n             for name, field in getFields(schemata).items():\n-                if (INamedBlobFileField.providedBy(field) or\n-                        INamedBlobImageField.providedBy(field)):\n+                if INamedBlobFileField.providedBy(\n+                    field\n+                ) or INamedBlobImageField.providedBy(field):\n                     try:\n                         # field.get may raise an AttributeError if the field\n                         # is provided by a behavior and hasn\'t been\n@@ -123,15 +120,15 @@ def getReferencedAttributes(self, obj):\n                         field_value = None\n                     if field_value is None:\n                         continue\n-                    dotted_name = \'.\'.join([schemata.__identifier__, name])\n+                    dotted_name = ".".join([schemata.__identifier__, name])\n                     file_data[dotted_name] = field_value._blob\n         return file_data\n \n     def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in attrs_dict.items():\n-            iface_name, f_name = name.rsplit(\'.\', 1)\n-            generated_prefix = \'plone.dexterity.schema.generated.\'\n+            iface_name, f_name = name.rsplit(".", 1)\n+            generated_prefix = "plone.dexterity.schema.generated."\n             # In case the field is provided via a behavior:\n             # Look up the behavior via dotted name.\n             # If the behavior\'s dotted name was changed, we might still have\n@@ -156,12 +153,11 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n                     adapted_field._blob = blob\n \n     def getOnCloneModifiers(self, obj):\n-        """Removes references to blobs in the cloned object.\n-        """\n+        """Removes references to blobs in the cloned object."""\n \n         persistent_id, persistent_load = getCallbacks(\n-            aq_base(value._blob) for value\n-            in getFieldValues(obj, INamedBlobFileField, INamedBlobImageField)\n+            aq_base(value._blob)\n+            for value in getFieldValues(obj, INamedBlobFileField, INamedBlobImageField)\n         )\n \n         return persistent_id, persistent_load, [], []\n@@ -181,12 +177,11 @@ def __init__(self, id_, title):\n         self.title = str(title)\n \n     def getOnCloneModifiers(self, obj):\n-        """Removes relations.\n-        """\n+        """Removes relations."""\n \n         persistent_id, persistent_load = getCallbacks(\n-            aq_base(value) for value\n-            in getFieldValues(obj, IRelationChoice, IRelationList)\n+            aq_base(value)\n+            for value in getFieldValues(obj, IRelationChoice, IRelationList)\n         )\n \n         return persistent_id, persistent_load, [], []\n@@ -197,16 +192,18 @@ def beforeSaveModifier(self, obj, clone):\n \n     def afterRetrieveModifier(self, obj, repo_clone, preserve=()):\n         """Restore relations from the working copy."""\n-        if (\n-            IDexterityContent.providedBy(obj) and\n-            IDexterityContent.providedBy(repo_clone)\n+        if IDexterityContent.providedBy(obj) and IDexterityContent.providedBy(\n+            repo_clone\n         ):\n             for schemata in iterSchemata(obj):\n                 for name, field in getFields(schemata).items():\n-                    if (IRelationChoice.providedBy(field) or\n-                            IRelationList.providedBy(field)):\n-                        field.set(field.interface(repo_clone),\n-                                  field.query(field.interface(obj)))\n+                    if IRelationChoice.providedBy(field) or IRelationList.providedBy(\n+                        field\n+                    ):\n+                        field.set(\n+                            field.interface(repo_clone),\n+                            field.query(field.interface(obj)),\n+                        )\n         return [], [], {}\n \n \n@@ -215,25 +212,25 @@ def afterRetrieveModifier(self, obj, repo_clone, preserve=()):\n \n modifiers = (\n     {\n-        \'id\': \'CloneNamedFileBlobs\',\n-        \'title\': "Store blobs by reference on content",\n-        \'enabled\': True,\n-        \'condition\': "python:True",\n-        \'wrapper\': ConditionalTalesModifier,\n-        \'modifier\': CloneNamedFileBlobs,\n-        \'form\': manage_CloneNamedFileBlobsAddForm,\n-        \'factory\': manage_addCloneNamedFileBlobs,\n-        \'icon\': \'www/modifier.gif\',\n+        "id": "CloneNamedFileBlobs",\n+        "title": "Store blobs by reference on content",\n+        "enabled": True,\n+        "condition": "python:True",\n+        "wrapper": ConditionalTalesModifier,\n+        "modifier": CloneNamedFileBlobs,\n+        "form": manage_CloneNamedFileBlobsAddForm,\n+        "factory": manage_addCloneNamedFileBlobs,\n+        "icon": "www/modifier.gif",\n     },\n     {\n-        \'id\': \'SkipRelations\',\n-        \'title\': "Skip saving of relations",\n-        \'enabled\': True,\n-        \'condition\': "python:True",\n-        \'wrapper\': ConditionalTalesModifier,\n-        \'modifier\': SkipRelations,\n-        \'form\': manage_SkipRelationsAddForm,\n-        \'factory\': manage_addSkipRelations,\n-        \'icon\': \'www/modifier.gif\',\n+        "id": "SkipRelations",\n+        "title": "Skip saving of relations",\n+        "enabled": True,\n+        "condition": "python:True",\n+        "wrapper": ConditionalTalesModifier,\n+        "modifier": SkipRelations,\n+        "form": manage_SkipRelationsAddForm,\n+        "factory": manage_addSkipRelations,\n+        "icon": "www/modifier.gif",\n     },\n )\ndiff --git a/plone/app/versioningbehavior/setuphandlers.py b/plone/app/versioningbehavior/setuphandlers.py\nindex 0d2eeba..2d29766 100644\n--- a/plone/app/versioningbehavior/setuphandlers.py\n+++ b/plone/app/versioningbehavior/setuphandlers.py\n@@ -4,37 +4,35 @@\n \n \n def install_modifiers(context, logger):\n-    portal_modifier = getToolByName(context, \'portal_modifier\')\n+    portal_modifier = getToolByName(context, "portal_modifier")\n     for m in modifiers:\n-        id_ = m[\'id\']\n+        id_ = m["id"]\n         if id_ in portal_modifier.objectIds():\n             continue\n-        title = m[\'title\']\n-        modifier = m[\'modifier\'](id_, title)\n-        wrapper = m[\'wrapper\'](id_, modifier, title)\n-        enabled = m[\'enabled\']\n+        title = m["title"]\n+        modifier = m["modifier"](id_, title)\n+        wrapper = m["wrapper"](id_, modifier, title)\n+        enabled = m["enabled"]\n         if IConditionalTalesModifier.providedBy(wrapper):\n-            wrapper.edit(enabled, m[\'condition\'])\n+            wrapper.edit(enabled, m["condition"])\n         else:\n             wrapper.edit(enabled)\n-        portal_modifier.register(m[\'id\'], wrapper)\n+        portal_modifier.register(m["id"], wrapper)\n \n \n def disable_skip_z3c_blobfile(context, logger):\n-    portal_modifier = getToolByName(context, \'portal_modifier\')\n-    if \'Skip_z3c_blobfile\' in portal_modifier.objectIds():\n-        modifier = portal_modifier.get(\'Skip_z3c_blobfile\')\n+    portal_modifier = getToolByName(context, "portal_modifier")\n+    if "Skip_z3c_blobfile" in portal_modifier.objectIds():\n+        modifier = portal_modifier.get("Skip_z3c_blobfile")\n         modifier.edit(enabled=False)\n \n \n def import_various(context):\n-    """Miscellanous steps import handle\n-    """\n-    if context.readDataFile(\n-            \'plone.app.versioningbehavior_various.txt\') is None:\n+    """Miscellanous steps import handle"""\n+    if context.readDataFile("plone.app.versioningbehavior_various.txt") is None:\n         return\n \n-    logger = context.getLogger(\'plone.app.versioningbehavior\')\n+    logger = context.getLogger("plone.app.versioningbehavior")\n     site = context.getSite()\n     install_modifiers(site, logger)\n     disable_skip_z3c_blobfile(site, logger)\ndiff --git a/plone/app/versioningbehavior/subscribers.py b/plone/app/versioningbehavior/subscribers.py\nindex 4dd86ae..95a00c4 100644\n--- a/plone/app/versioningbehavior/subscribers.py\n+++ b/plone/app/versioningbehavior/subscribers.py\n@@ -31,7 +31,7 @@ def create_version_on_save(context, event):\n \n     create_version = False\n \n-    if getattr(context, \'REQUEST\', None):\n+    if getattr(context, "REQUEST", None):\n         changeNote = get_change_note(context.REQUEST, None)\n     else:\n         changeNote = None\n@@ -41,10 +41,10 @@ def create_version_on_save(context, event):\n         # has changed.\n         create_version = True\n \n-    elif pr.supportsPolicy(context, \'at_edit_autoversion\'):\n+    elif pr.supportsPolicy(context, "at_edit_autoversion"):\n         # automatic versioning is enabled for this portal type\n \n-        if not base_hasattr(context, \'version_id\'):\n+        if not base_hasattr(context, "version_id"):\n             # we do not have a initial version\n             create_version = True\n         else:\n@@ -69,7 +69,7 @@ def create_initial_version_after_adding(context, event):\n     version. If a changeNote was entered it\'s used as comment.\n     """\n \n-    pr = getToolByName(context, \'portal_repository\', None)\n+    pr = getToolByName(context, "portal_repository", None)\n     if pr is None:\n         # This can happen, e.g., when adding a Plone Site with versioning\n         # and portal_repository is not yet created\n@@ -79,21 +79,20 @@ def create_initial_version_after_adding(context, event):\n         # object is not versionable\n         return\n \n-    if not pr.supportsPolicy(context, \'at_edit_autoversion\'):\n+    if not pr.supportsPolicy(context, "at_edit_autoversion"):\n         # automatic versioning disabled for this portal type, so we don\'t\n         # need to create an initial version\n         return\n \n     # get the change not\n-    default_changeNote = _(\'initial_version_changeNote\',\n-                           default=\'Initial version\')\n-    if getattr(context, \'REQUEST\', None):\n+    default_changeNote = _("initial_version_changeNote", default="Initial version")\n+    if getattr(context, "REQUEST", None):\n         changeNote = get_change_note(context.REQUEST, default_changeNote)\n     else:\n         changeNote = None\n \n     changed = False\n-    if not base_hasattr(context, \'version_id\'):\n+    if not base_hasattr(context, "version_id"):\n         # no initial version, let\'s create one..\n         changed = True\n \ndiff --git a/plone/app/versioningbehavior/testing.py b/plone/app/versioningbehavior/testing.py\nindex b6a5e6b..0f84cd9 100644\n--- a/plone/app/versioningbehavior/testing.py\n+++ b/plone/app/versioningbehavior/testing.py\n@@ -13,12 +13,14 @@\n import plone.app.versioningbehavior\n \n \n-TEST_CONTENT_TYPE_ID = \'TestContentType\'\n-DEFAULT_POLICIES = (\'at_edit_autoversion\', \'version_on_revert\',)\n+TEST_CONTENT_TYPE_ID = "TestContentType"\n+DEFAULT_POLICIES = (\n+    "at_edit_autoversion",\n+    "version_on_revert",\n+)\n \n \n class PloneAppVersioningbehaviorLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -28,17 +30,17 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.versioningbehavior)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.versioningbehavior:default\')\n+        applyProfile(portal, "plone.app.versioningbehavior:default")\n         self.registerVersionedDocumentFTI(portal)\n \n     def registerVersionedDocumentFTI(self, portal):\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        types_tool = getToolByName(portal, "portal_types")\n         fti = DexterityFTI(\n             TEST_CONTENT_TYPE_ID,\n             global_allow=True,\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n             ),\n             model_source="""\n                 <model xmlns="http://namespaces.plone.org/supermodel/schema"\n@@ -55,20 +57,22 @@ def registerVersionedDocumentFTI(self, portal):\n                         </field>\n                     </schema>\n                 </model>\n-                """)\n+                """,\n+        )\n         types_tool._setObject(TEST_CONTENT_TYPE_ID, fti)\n \n-        diff_tool = getToolByName(portal, \'portal_diff\')\n+        diff_tool = getToolByName(portal, "portal_diff")\n         diff_tool.setDiffForPortalType(\n-            TEST_CONTENT_TYPE_ID, {\'text\': TextDiff.meta_type})\n+            TEST_CONTENT_TYPE_ID, {"text": TextDiff.meta_type}\n+        )\n \n-        portal_repository = getToolByName(portal, \'portal_repository\')\n+        portal_repository = getToolByName(portal, "portal_repository")\n         portal_repository.setVersionableContentTypes(\n-            list(portal_repository.getVersionableContentTypes()) +\n-            [TEST_CONTENT_TYPE_ID])\n+            list(portal_repository.getVersionableContentTypes())\n+            + [TEST_CONTENT_TYPE_ID]\n+        )\n         for policy_id in DEFAULT_POLICIES:\n-            portal_repository.addPolicyForContentType(\n-                TEST_CONTENT_TYPE_ID, policy_id)\n+            portal_repository.addPolicyForContentType(TEST_CONTENT_TYPE_ID, policy_id)\n \n     def testSetUp(self):\n         self.CSRF_DISABLED_ORIGINAL = protect_auto.CSRF_DISABLED\n@@ -77,18 +81,19 @@ def testSetUp(self):\n     def testTearDown(self):\n         protect_auto.CSRF_DISABLED = self.CSRF_DISABLED_ORIGINAL\n \n+\n PLONE_APP_VERSIONINGBEHAVIOR_FIXTURE = PloneAppVersioningbehaviorLayer()\n \n \n PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_VERSIONINGBEHAVIOR_FIXTURE,),\n-    name=\'PloneAppVersioningbehaviorLayer:IntegrationTesting\',\n+    name="PloneAppVersioningbehaviorLayer:IntegrationTesting",\n )\n \n \n PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_VERSIONINGBEHAVIOR_FIXTURE,),\n-    name=\'PloneAppVersioningbehaviorLayer:FunctionalTesting\',\n+    name="PloneAppVersioningbehaviorLayer:FunctionalTesting",\n )\n \n \n@@ -98,5 +103,5 @@ def testTearDown(self):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         z2.ZSERVER_FIXTURE,\n     ),\n-    name=\'PloneAppVersioningbehaviorLayer:AcceptanceTesting\',\n+    name="PloneAppVersioningbehaviorLayer:AcceptanceTesting",\n )\ndiff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\nindex fc29833..dcf0776 100644\n--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n@@ -17,31 +17,30 @@ class TestDexterityIntegration(unittest.TestCase):\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         # get some tools\n-        types_tool = getToolByName(self.portal, \'portal_types\')\n-        repo_tool = getToolByName(self.portal, \'portal_repository\')\n-        acl_users = getToolByName(self.portal, \'acl_users\')\n+        types_tool = getToolByName(self.portal, "portal_types")\n+        repo_tool = getToolByName(self.portal, "portal_repository")\n+        acl_users = getToolByName(self.portal, "acl_users")\n \n         # we need to have the Manager role to be able to add things\n         # to the portal root\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # add an additional user\n-        acl_users.userFolderAddUser(\'reviewer\', \'reviewer\',\n-                                    [\'Manager\'], \'\')\n+        acl_users.userFolderAddUser("reviewer", "reviewer", ["Manager"], "")\n \n         # now create some dexterity FTIs...\n         # ... a document\n         document_fti = DexterityFTI(\n-            \'Document\',\n-            factory=\'Document\',\n+            "Document",\n+            factory="Document",\n             global_allow=True,\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-                \'plone.app.dexterity.behaviors.metadata.IRelatedItems\',\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n+                "plone.app.dexterity.behaviors.metadata.IRelatedItems",\n             ),\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n@@ -52,26 +51,28 @@ def setUp(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        if \'Document\' in types_tool.objectIds():\n-            types_tool._delObject(\'Document\')\n-        types_tool._setObject(\'Document\', document_fti)\n+        """,\n+        )\n+        if "Document" in types_tool.objectIds():\n+            types_tool._delObject("Document")\n+        types_tool._setObject("Document", document_fti)\n \n         # ... and a folder\n         folder_fti = DexterityFTI(\n-            \'Folder\',\n-            factory=\'Folder\',\n-            klass=\'plone.dexterity.content.Container\',\n+            "Folder",\n+            factory="Folder",\n+            klass="plone.dexterity.content.Container",\n             global_allow=True,\n-            allowed_content_types=(\'Document\',),\n+            allowed_content_types=("Document",),\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-                \'plone.app.dexterity.behaviors.metadata.IRelatedItems\',\n-            ))\n-        if \'Folder\' in types_tool.objectIds():\n-            types_tool._delObject(\'Folder\')\n-        types_tool._setObject(\'Folder\', folder_fti)\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n+                "plone.app.dexterity.behaviors.metadata.IRelatedItems",\n+            ),\n+        )\n+        if "Folder" in types_tool.objectIds():\n+            types_tool._delObject("Folder")\n+        types_tool._setObject("Folder", folder_fti)\n \n         # lets disable versioning while creating, otherwise we\'d have to\n         # change all tests because we\'d have an initial versions and the\n@@ -80,24 +81,24 @@ def setUp(self):\n         # zope events..\n \n         vtypes = repo_tool.getVersionableContentTypes()\n-        vtypes.remove(\'Document\')\n+        vtypes.remove("Document")\n         repo_tool.setVersionableContentTypes(vtypes)\n \n         # now add a document\n-        self.portal.invokeFactory(\'Document\', \'doc\')\n+        self.portal.invokeFactory("Document", "doc")\n \n         # and add a folder with two documents in it\n-        self.portal.invokeFactory(\'Folder\', \'fol\')\n-        self.portal.fol.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.fol.invokeFactory(\'Document\', \'doc2\')\n+        self.portal.invokeFactory("Folder", "fol")\n+        self.portal.fol.invokeFactory("Document", "doc1")\n+        self.portal.fol.invokeFactory("Document", "doc2")\n \n         # re-enable versioning\n-        vtypes.append(\'Dpcument\')\n+        vtypes.append("Dpcument")\n         repo_tool.setVersionableContentTypes(vtypes)\n \n         # We have a test that fails without workflow.\n-        wf_tool = getToolByName(self.portal, \'portal_workflow\')\n-        wf_tool.setChainForPortalTypes((\'Document\',), (\'simple_publication_workflow\',))\n+        wf_tool = getToolByName(self.portal, "portal_workflow")\n+        wf_tool.setChainForPortalTypes(("Document",), ("simple_publication_workflow",))\n \n     def test13_revertUpdatesCatalog(self):\n         # This test in CMFEditions uses doc.edit, but we have no archetypes\ndiff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py\nindex db17cab..bc22f1f 100644\n--- a/plone/app/versioningbehavior/tests/test_browser.py\n+++ b/plone/app/versioningbehavior/tests/test_browser.py\n@@ -15,27 +15,26 @@\n \n \n class BaseViewTestCase(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES + [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES + ["Manager"])\n         self.portal.invokeFactory(\n             type_name=TEST_CONTENT_TYPE_ID,\n-            id=\'obj1\',\n-            title=\'Object 1 Title\',\n-            description=\'Description of obect number 1\',\n-            text=\'Object 1 some footext.\',\n-            file=NamedBlobFile(filename=\'object_1_file.txt\', data=\'Object 1 Data\'),\n+            id="obj1",\n+            title="Object 1 Title",\n+            description="Description of obect number 1",\n+            text="Object 1 some footext.",\n+            file=NamedBlobFile(filename="object_1_file.txt", data="Object 1 Data"),\n         )\n-        self.obj1 = self.portal[\'obj1\']\n+        self.obj1 = self.portal["obj1"]\n \n     def _render_view(self, view, url=None, params=None):\n         if url:\n-            self.request.set(\'ACTUAL_URL\', url)\n-            self.request.set(\'URL\', url)\n+            self.request.set("ACTUAL_URL", url)\n+            self.request.set("URL", url)\n \n         self.request.form.clear()\n         self.request.form.update(params or {})\n@@ -47,7 +46,7 @@ class VersionViewTestCase(BaseViewTestCase):\n \n     def test_version_view_is_registered(self):\n         obj = self.obj1\n-        view = getMultiAdapter((obj, self.request), name=\'version-view\')\n+        view = getMultiAdapter((obj, self.request), name="version-view")\n         self.assertIsInstance(view, browser.VersionView)\n \n     def test_convert_download_links(self):\n@@ -69,75 +68,63 @@ def _assert(old_path, version, field=None, filename=None):\n             self.assertEqual(new, correct)\n \n         _assert(\n-            \'/@@download/my_field/my_file.txt\',\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            "/@@download/my_field/my_file.txt",\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n             (\n-                \'/versions_history_form/++widget++form.widgets.my_interface.my_field\'\n-                \'/@@download/my_file.txt\'\n+                "/versions_history_form/++widget++form.widgets.my_interface.my_field"\n+                "/@@download/my_file.txt"\n             ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n             (\n-                \'/versions_history_form/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n+                "/versions_history_form/++widget++form.widgets.my_field"\n+                "/@@download/my_file.txt"\n             ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/++widget++form.widgets.my_interface.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/++widget++form.widgets.my_interface.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/++widget++form.widgets.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/my-view/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/my-view/++widget++form.widgets.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/@@my-view/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/@@my-view/++widget++form.widgets.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            \'/@@images/abde-01fa.png\',\n-            version=\'my_version\',\n+            "/@@images/abde-01fa.png",\n+            version="my_version",\n         )\n \n     def test_get_download_version_link(self):\n@@ -151,31 +138,31 @@ def _assert(version, correct_path, field=None, filename=None):\n                 field_id=field,\n                 filename=filename,\n             )\n-            correct_url = obj.absolute_url() + \'/\' + correct_path\n+            correct_url = obj.absolute_url() + "/" + correct_path\n             self.assertEqual(actual, correct_url)\n \n         _assert(\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n             correct_path=(\n-                \'@@download-version?\'\n-                \'version_id=my_version&field_id=my_field&filename=my_file.txt\'\n+                "@@download-version?"\n+                "version_id=my_version&field_id=my_field&filename=my_file.txt"\n             ),\n         )\n         _assert(\n-            version=\'my_version\',\n-            filename=\'my_file.txt\',\n-            correct_path=\'@@download-version?version_id=my_version&filename=my_file.txt\',\n+            version="my_version",\n+            filename="my_file.txt",\n+            correct_path="@@download-version?version_id=my_version&filename=my_file.txt",\n         )\n         _assert(\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            correct_path=\'@@download-version?version_id=my_version&field_id=my_field\',\n+            version="my_version",\n+            field="my_field",\n+            correct_path="@@download-version?version_id=my_version&field_id=my_field",\n         )\n         _assert(\n-            version=\'my_version\',\n-            correct_path=\'@@download-version?version_id=my_version\',\n+            version="my_version",\n+            correct_path="@@download-version?version_id=my_version",\n         )\n \n     def test_call(self):\n@@ -185,17 +172,21 @@ def test_call(self):\n \n         html = self._render_view(view=obj, url=obj.absolute_url())\n         download_url_pattern = re.compile(\n-            obj.absolute_url() +\n-            r\'(/[@A-Za-z0-9-_]+)?/\' +  # View name can be present or not.\n-            r\'\\+\\+widget\\+\\+form\\.widgets\\.file/@@download/\' +\n-            obj.file.filename\n+            obj.absolute_url()\n+            + r"(/[@A-Za-z0-9-_]+)?/"\n+            + r"\\+\\+widget\\+\\+form\\.widgets\\.file/@@download/"  # View name can be present or not.\n+            + obj.file.filename\n         )\n         self.assertTrue(download_url_pattern.search(html))\n \n-        html = self._render_view(view=view, url=obj.absolute_url(), params={\'version_id\': \'0\'})\n-        download_url = \'{}/@@download-version?version_id=0&field_id=file&filename={}\'.format(\n-            obj.absolute_url(),\n-            obj.file.filename,\n+        html = self._render_view(\n+            view=view, url=obj.absolute_url(), params={"version_id": "0"}\n+        )\n+        download_url = (\n+            "{}/@@download-version?version_id=0&field_id=file&filename={}".format(\n+                obj.absolute_url(),\n+                obj.file.filename,\n+            )\n         )\n         self.assertTrue(download_url in html)\n \n@@ -211,7 +202,8 @@ def test_should_download_file_correctly(self):\n         data = self._render_view(\n             view,\n             url=obj.absolute_url(),\n-            params={\'version_id\': \'0\', \'do_not_stream\': \'1\'})\n+            params={"version_id": "0", "do_not_stream": "1"},\n+        )\n         self.assertTrue(data)\n         self.assertEqual(obj.file.data, data)\n \n@@ -220,14 +212,14 @@ def test_should_download_file_correctly(self):\n             view,\n             url=obj.absolute_url(),\n             params={\n-                \'version_id\': \'0\',\n-                \'do_not_stream\': \'1\',\n-                \'field\': \'file\',\n-                \'filename\': \'some_file_name.bin\',\n-            }\n+                "version_id": "0",\n+                "do_not_stream": "1",\n+                "field": "file",\n+                "filename": "some_file_name.bin",\n+            },\n         )\n         self.assertTrue(data)\n         self.assertEqual(obj.file.data, data)\n         self.assertTrue(\n-            \'some_file_name.bin\' in self.request.response.headers[\'content-disposition\']\n+            "some_file_name.bin" in self.request.response.headers["content-disposition"]\n         )\ndiff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py\nindex d626d4b..aa89821 100644\n--- a/plone/app/versioningbehavior/tests/test_functional.py\n+++ b/plone/app/versioningbehavior/tests/test_functional.py\n@@ -13,31 +13,31 @@\n \n \n class FunctionalTestCase(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', f\'Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}\')\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n         self.portal.invokeFactory(\n             type_name=TEST_CONTENT_TYPE_ID,\n-            id=\'obj1\',\n-            title=\'Object 1 Title\',\n-            description=\'Description of obect number 1\',\n-            text=\'Object 1 some footext.\',\n+            id="obj1",\n+            title="Object 1 Title",\n+            description="Description of obect number 1",\n+            text="Object 1 some footext.",\n         )\n-        self.obj1 = self.portal[\'obj1\']\n+        self.obj1 = self.portal["obj1"]\n         transaction.commit()\n \n     def test_content_core_view(self):\n-        self.browser.open(self.obj1.absolute_url() + \'/@@content-core\')\n+        self.browser.open(self.obj1.absolute_url() + "/@@content-core")\n \n         # Title and description are metadata, not in content-core.\n         self.assertFalse(self.obj1.title in self.browser.contents)\n@@ -45,8 +45,7 @@ def test_content_core_view(self):\n         self.assertIn(self.obj1.text, self.browser.contents)\n \n     def test_version_view(self):\n-        self.browser.open(\n-            self.obj1.absolute_url() + \'/@@version-view?version_id=0\')\n+        self.browser.open(self.obj1.absolute_url() + "/@@version-view?version_id=0")\n \n         # Title and description are metadata, not in content-core.\n         self.assertFalse(self.obj1.title in self.browser.contents)\n@@ -57,35 +56,35 @@ def test_versions_history_form_should_work_with_dexterity_content(self):\n         old_text = self.obj1.text\n         old_title = self.obj1.title\n \n-        new_text = \'Some other text for object 1.\'\n-        new_title = \'My special new title for object 1\'\n+        new_text = "Some other text for object 1."\n+        new_title = "My special new title for object 1"\n \n-        self.browser.open(self.obj1.absolute_url() + \'/edit\')\n-        self.browser.getControl(label=\'Title\').value = new_title\n-        self.browser.getControl(label=\'Text\').value = new_text\n-        self.browser.getControl(name=\'form.buttons.save\').click()\n+        self.browser.open(self.obj1.absolute_url() + "/edit")\n+        self.browser.getControl(label="Title").value = new_title\n+        self.browser.getControl(label="Text").value = new_text\n+        self.browser.getControl(name="form.buttons.save").click()\n \n-        self._assert_versions_history_form(\n-            0, self.obj1.getId(), old_title, old_text)\n-        self._assert_versions_history_form(\n-            1, self.obj1.getId(), new_title, new_text)\n+        self._assert_versions_history_form(0, self.obj1.getId(), old_title, old_text)\n+        self._assert_versions_history_form(1, self.obj1.getId(), new_title, new_text)\n \n     def _assert_versions_history_form(self, version_id, obj_id, title, text):\n         self.browser.open(\n-            \'%s/%s/versions_history_form?version_id=%s\'\n-            % (self.portal_url, obj_id, version_id))\n-        self.assertIn(\'Current revision\', self.browser.contents)\n+            "%s/%s/versions_history_form?version_id=%s"\n+            % (self.portal_url, obj_id, version_id)\n+        )\n+        self.assertIn("Current revision", self.browser.contents)\n \n         if version_id == 0:\n             self.assertIn(\n-                f\'/{obj_id}/versions_history_form?version_id={version_id}\',\n-                self.browser.contents)\n-        self.assertIn(\'Current revision\', self.browser.contents)\n-        self.assertIn(\'Revert to this revision\', self.browser.contents)\n+                f"/{obj_id}/versions_history_form?version_id={version_id}",\n+                self.browser.contents,\n+            )\n+        self.assertIn("Current revision", self.browser.contents)\n+        self.assertIn("Revert to this revision", self.browser.contents)\n+        self.assertIn("/%s/@@history?one" % obj_id, self.browser.contents)\n+        self.assertIn("Preview of Revision %s" % version_id, self.browser.contents)\n         self.assertIn(\n-            \'/%s/@@history?one\' % obj_id, self.browser.contents)\n-        self.assertIn(\'Preview of Revision %s\' % version_id,\n-                      self.browser.contents)\n-        self.assertIn(\'<h1 class="documentFirstHeading">%s</h1>\' % str(title),\n-                      self.browser.contents)\n+            \'<h1 class="documentFirstHeading">%s</h1>\' % str(title),\n+            self.browser.contents,\n+        )\n         self.assertIn(str(text), self.browser.contents)\ndiff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py\nindex 42f561f..83d5bd5 100644\n--- a/plone/app/versioningbehavior/tests/test_modifiers.py\n+++ b/plone/app/versioningbehavior/tests/test_modifiers.py\n@@ -32,43 +32,38 @@\n \n \n class IBlobFile(model.Schema):\n-    file = field.NamedBlobFile(title=\'File\')\n+    file = field.NamedBlobFile(title="File")\n \n \n alsoProvides(IBlobFile, IFormFieldProvider)\n \n \n class IRelationsType(Interface):\n-    single = RelationChoice(title=\'Single\',\n-                            required=False, values=[])\n-    multiple = RelationList(title=\'Multiple (Relations field)\',\n-                            required=False)\n+    single = RelationChoice(title="Single", required=False, values=[])\n+    multiple = RelationList(title="Multiple (Relations field)", required=False)\n \n \n class IRelationsBehavior(model.Schema):\n-    single = RelationChoice(title=\'Single\',\n-                            required=False, values=[])\n-    multiple = RelationList(title=\'Multiple (Relations field)\',\n-                            required=False)\n+    single = RelationChoice(title="Single", required=False, values=[])\n+    multiple = RelationList(title="Multiple (Relations field)", required=False)\n \n \n alsoProvides(IRelationsBehavior, IFormFieldProvider)\n \n \n class TestModifiers(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # we need to have the Manager role to be able to add things\n         # to the portal root\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testCloneNamedFileBlobsInSchema(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -79,21 +74,22 @@ def testCloneNamedFileBlobsInSchema(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n \n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n-            \'plone.dexterity.schema.generated.plone_0_BlobFile.file\'\n-            in attrs_dict)\n+            "plone.dexterity.schema.generated.plone_0_BlobFile.file" in attrs_dict\n+        )\n         blob = list(attrs_dict.values())[0]\n         self.assertTrue(IBlob.providedBy(blob))\n \n-        file2 = createContentInContainer(self.portal, \'BlobFile\')\n-        file2.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n+        file2 = createContentInContainer(self.portal, "BlobFile")\n+        file2.file = NamedBlobFile("dummy test data", filename="test.txt")\n         modifier.reattachReferencedAttributes(file2, attrs_dict)\n         self.assertTrue(file2.file._blob is blob)\n \n@@ -117,31 +113,28 @@ def testCloneNamedFileBlobsInBehavior(self):\n         """\n         xmlconfig.xmlconfig(StringIO(configuration))\n \n-        file_fti = DexterityFTI(\n-            \'BlobFile\',\n-            behaviors=[IBlobFile.__identifier__])\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n-\n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        IBlobFile(file1).file = NamedBlobFile(\'dummy test data\',\n-                                              filename=\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file_fti = DexterityFTI("BlobFile", behaviors=[IBlobFile.__identifier__])\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n+\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        IBlobFile(file1).file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n-            \'plone.app.versioningbehavior.tests.test_modifiers.IBlobFile.file\'\n-            in attrs_dict)\n+            "plone.app.versioningbehavior.tests.test_modifiers.IBlobFile.file"\n+            in attrs_dict\n+        )\n         blob = list(attrs_dict.values())[0]\n         self.assertTrue(IBlob.providedBy(blob))\n \n-        file2 = createContentInContainer(self.portal, \'BlobFile\')\n-        IBlobFile(file2).file = NamedBlobFile(\'dummy test data\',\n-                                              filename=\'test.txt\')\n+        file2 = createContentInContainer(self.portal, "BlobFile")\n+        IBlobFile(file2).file = NamedBlobFile("dummy test data", filename="test.txt")\n         modifier.reattachReferencedAttributes(file2, attrs_dict)\n         self.assertTrue(IBlobFile(file2).file._blob is blob)\n \n     def testCloneNamedFileBlobsOnCloneModifiers(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -152,12 +145,13 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n \n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(file1.file._blob))\n@@ -167,7 +161,7 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):\n \n     def testCloneNamedFileBlobsWithNoFile(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -178,10 +172,11 @@ def testCloneNamedFileBlobsWithNoFile(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(attrs_dict == {})\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n@@ -193,11 +188,11 @@ def testCloneNamedFileBlobsWithNoFile(self):\n \n         # Previous version without file but working copy has a file.\n         self.portal.portal_repository.save(file1)\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n-            \'plone.dexterity.schema.generated.plone_0_BlobFile.file\'\n-            in attrs_dict)\n+            "plone.dexterity.schema.generated.plone_0_BlobFile.file" in attrs_dict\n+        )\n         blob = list(attrs_dict.values())[0]\n         self.assertTrue(IBlob.providedBy(blob))\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n@@ -208,19 +203,16 @@ def testCloneNamedFileBlobsWithNoFile(self):\n         self.assertTrue(empty2 == [])\n \n     def testRelations(self):\n-        rel_fti = DexterityFTI(\n-            \'RelationsType\',\n-            schema=IRelationsType.__identifier__\n-        )\n-        self.portal.portal_types._setObject(\'RelationsType\', rel_fti)\n+        rel_fti = DexterityFTI("RelationsType", schema=IRelationsType.__identifier__)\n+        self.portal.portal_types._setObject("RelationsType", rel_fti)\n \n         intids = getUtility(IIntIds)\n \n-        source = createContentInContainer(self.portal, \'RelationsType\')\n-        target = createContentInContainer(self.portal, \'RelationsType\')\n+        source = createContentInContainer(self.portal, "RelationsType")\n+        target = createContentInContainer(self.portal, "RelationsType")\n \n         # Test modifier when no relations are set\n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(None) is None)\n@@ -230,7 +222,7 @@ def testRelations(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n         self.assertTrue(repo_clone.single is source.single)\n         self.assertTrue(repo_clone.multiple is source.multiple)\n@@ -242,9 +234,10 @@ def testRelations(self):\n         # Update relations\n         from zope.event import notify\n         from zope.lifecycleevent import ObjectModifiedEvent\n+\n         notify(ObjectModifiedEvent(source))\n \n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(source.single))\n@@ -254,14 +247,15 @@ def testRelations(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n         self.assertTrue(repo_clone.single is source.single)\n         self.assertTrue(repo_clone.multiple is source.multiple)\n \n     def register_RelationsType(self):\n-        xmlconfig.xmlconfig(StringIO(\n-            \'\'\'\n+        xmlconfig.xmlconfig(\n+            StringIO(\n+                """\n             <configure\n                  package="plone.behavior"\n                  xmlns="http://namespaces.zope.org/zope"\n@@ -276,23 +270,23 @@ def register_RelationsType(self):\n                     provides="plone.app.versioningbehavior.tests.test_modifiers.IRelationsBehavior"\n                     />\n             </configure>\n-            \'\'\'\n-        ))\n+            """\n+            )\n+        )\n         rel_fti = DexterityFTI(\n-            \'RelationsType\',\n-            behaviors=[IRelationsBehavior.__identifier__]\n+            "RelationsType", behaviors=[IRelationsBehavior.__identifier__]\n         )\n-        self.portal.portal_types._setObject(\'RelationsType\', rel_fti)\n+        self.portal.portal_types._setObject("RelationsType", rel_fti)\n \n     def testRelationsInBehaviors(self):\n         self.register_RelationsType()\n         intids = getUtility(IIntIds)\n \n-        source = createContentInContainer(self.portal, \'RelationsType\')\n-        target = createContentInContainer(self.portal, \'RelationsType\')\n+        source = createContentInContainer(self.portal, "RelationsType")\n+        target = createContentInContainer(self.portal, "RelationsType")\n \n         # Test modifier when no relations are set\n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(None) is None)\n@@ -302,25 +296,22 @@ def testRelationsInBehaviors(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n         self.assertTrue(repo_clone.single is None)\n         self.assertTrue(repo_clone.multiple is None)\n \n         # Add some relations\n-        IRelationsBehavior(source).single = RelationValue(\n-            intids.getId(target)\n-        )\n-        IRelationsBehavior(source).multiple = [\n-            RelationValue(intids.getId(target))\n-        ]\n+        IRelationsBehavior(source).single = RelationValue(intids.getId(target))\n+        IRelationsBehavior(source).multiple = [RelationValue(intids.getId(target))]\n \n         # Update relations\n         from zope.event import notify\n         from zope.lifecycleevent import ObjectModifiedEvent\n+\n         notify(ObjectModifiedEvent(source))\n \n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(IRelationsBehavior(source).single))\n@@ -330,20 +321,23 @@ def testRelationsInBehaviors(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n-        self.assertTrue(IRelationsBehavior(repo_clone).single\n-                        is IRelationsBehavior(source).single)\n-        self.assertTrue(IRelationsBehavior(repo_clone).multiple\n-                        is IRelationsBehavior(source).multiple)\n+        self.assertTrue(\n+            IRelationsBehavior(repo_clone).single is IRelationsBehavior(source).single\n+        )\n+        self.assertTrue(\n+            IRelationsBehavior(repo_clone).multiple\n+            is IRelationsBehavior(source).multiple\n+        )\n \n     def testRelationsInBehaviorsForMigratedDXObjects(self):\n-        \'\'\' Do not break in the case of\n+        """Do not break in the case of\n         dexterity objects with relations migrated from something else\n         (e.g. Archetypes)\n-        \'\'\'\n+        """\n         self.register_RelationsType()\n-        source = createContentInContainer(self.portal, \'RelationsType\')\n+        source = createContentInContainer(self.portal, "RelationsType")\n \n         # Test modifier when no relations are set\n         class Dummy:\n@@ -351,27 +345,26 @@ class Dummy:\n \n         repo_clone = Dummy()\n \n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         modifier.afterRetrieveModifier(source, repo_clone)\n \n-        self.assertFalse(hasattr(repo_clone, \'single\'))\n-        self.assertFalse(hasattr(repo_clone, \'multiple\'))\n+        self.assertFalse(hasattr(repo_clone, "single"))\n+        self.assertFalse(hasattr(repo_clone, "multiple"))\n \n \n class TestModifiersFunctional(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # we need to have the Manager role to be able to add things\n         # to the portal root\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testCloneNamedFileBlobsInUpdatedSchema(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -382,19 +375,19 @@ def testCloneNamedFileBlobsInUpdatedSchema(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n \n         # Sets _p_mtime on FTI used in schema suffix in p.dexterity >= 2.10.0\n         transaction.commit()\n \n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         schema_name = portalTypeToSchemaName(\n-            \'BlobFile\',\n-            suffix=repr(self.portal.portal_types.BlobFile._p_mtime)\n+            "BlobFile", suffix=repr(self.portal.portal_types.BlobFile._p_mtime)\n         )\n         attr = "plone.dexterity.schema.generated." + schema_name + ".file"\n         self.assertTrue(attr in attrs_dict)\ndiff --git a/plone/app/versioningbehavior/tests/test_subscribers.py b/plone/app/versioningbehavior/tests/test_subscribers.py\nindex 17b165a..ba44eb6 100644\n--- a/plone/app/versioningbehavior/tests/test_subscribers.py\n+++ b/plone/app/versioningbehavior/tests/test_subscribers.py\n@@ -11,7 +11,6 @@\n \n \n class TestSubscribers(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/versioningbehavior/tests/tests.py b/plone/app/versioningbehavior/tests/tests.py\nindex 62e1676..66404c2 100644\n--- a/plone/app/versioningbehavior/tests/tests.py\n+++ b/plone/app/versioningbehavior/tests/tests.py\n@@ -9,10 +9,12 @@\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\'doctest_behavior.txt\'),\n-            layer=PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n-        ),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite("doctest_behavior.txt"),\n+                layer=PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/versioningbehavior/utils.py b/plone/app/versioningbehavior/utils.py\nindex 62e23c1..6cfa786 100644\n--- a/plone/app/versioningbehavior/utils.py\n+++ b/plone/app/versioningbehavior/utils.py\n@@ -12,8 +12,7 @@ def get_change_note(request, default=None):\n     value = _marker\n     if IBrowserRequest.providedBy(request):\n         annotations = IAnnotations(request)\n-        value = annotations.get(\n-            \'plone.app.versioningbehavior-changeNote\', _marker)\n+        value = annotations.get("plone.app.versioningbehavior-changeNote", _marker)\n \n     if not value or value == _marker:\n         return default\ndiff --git a/setup.py b/setup.py\nindex f0f4159..1b60917 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,60 +4,62 @@\n import os\n \n \n-version = \'2.0.1.dev0\'\n+version = "2.0.1.dev0"\n \n tests_require = [\n-    \'plone.app.testing\',\n-    \'Products.CMFDiffTool\',\n-    \'Products.CMFEditions [test]\',\n-    \'Products.CMFPlone\',\n+    "plone.app.testing",\n+    "Products.CMFDiffTool",\n+    "Products.CMFEditions [test]",\n+    "Products.CMFPlone",\n ]\n \n setup(\n-    name=\'plone.app.versioningbehavior\',\n+    name="plone.app.versioningbehavior",\n     version=version,\n-    description=(\'Provides a behavior for using CMFEditions with \'\n-                 \'dexterity content types\'),\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(os.path.join(\'CHANGES.rst\')).read()),\n+    description=(\n+        "Provides a behavior for using CMFEditions with " "dexterity content types"\n+    ),\n+    long_description=(\n+        open("README.rst").read() + "\\n" + open(os.path.join("CHANGES.rst")).read()\n+    ),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope :: 5\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n-        \'Programming Language :: Python :: 3.10\',\n-        \'Programming Language :: Python :: 3.11\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone dexterity behavior versioning CMFEditions\',\n-    author=\'Jonas Baumann, 4teamwork GmbH\',\n-    author_email=\'mailto:dexterity-development@googlegroups.com\',\n-    url=\'http://plone.org/products/dexterity\',\n-    license=\'GPL version 2\',\n+    keywords="plone dexterity behavior versioning CMFEditions",\n+    author="Jonas Baumann, 4teamwork GmbH",\n+    author_email="mailto:dexterity-development@googlegroups.com",\n+    url="http://plone.org/products/dexterity",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'plone.app.dexterity[relations]\',\n-        \'plone.autoform\',\n-        \'plone.behavior>=1.1\',\n-        \'plone.dexterity\',\n-        \'plone.namedfile\',\n-        \'plone.rfc822\',\n-        \'Products.CMFEditions>2.2.9\',\n-        \'setuptools\',\n-        \'zope.container\',\n+        "plone.app.dexterity[relations]",\n+        "plone.autoform",\n+        "plone.behavior>=1.1",\n+        "plone.dexterity",\n+        "plone.namedfile",\n+        "plone.rfc822",\n+        "Products.CMFEditions>2.2.9",\n+        "setuptools",\n+        "zope.container",\n     ],\n     tests_require=tests_require,\n     extras_require=dict(tests=tests_require),\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:13:51+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/f08b745d26c4903708063f2cf06d8b47e3145e00

chore: zpretty ZCML/XML

Files changed:
M plone/app/versioningbehavior/configure.zcml
M plone/app/versioningbehavior/profiles/default/metadata.xml

b'diff --git a/plone/app/versioningbehavior/configure.zcml b/plone/app/versioningbehavior/configure.zcml\nindex ba6176e..8462967 100644\n--- a/plone/app/versioningbehavior/configure.zcml\n+++ b/plone/app/versioningbehavior/configure.zcml\n@@ -4,65 +4,72 @@\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <include package="plone.behavior" file="meta.zcml" />\n+  <include\n+      package="plone.behavior"\n+      file="meta.zcml"\n+      />\n \n-    <include package="plone.rfc822" />\n+  <include package="plone.rfc822" />\n \n-    <five:registerPackage package="." initialize=".initialize" />\n+  <five:registerPackage\n+      package="."\n+      initialize=".initialize"\n+      />\n \n-    <include package="plone.app.dexterity" />\n+  <include package="plone.app.dexterity" />\n \n-    <plone:behavior\n-        name="plone.versioning"\n-        title="Versioning"\n-        description="Versioning support with CMFEditions"\n-        provides=".behaviors.IVersionable"\n-        factory=".behaviors.Versionable"\n-        marker=".behaviors.IVersioningSupport"\n-        for="plone.dexterity.interfaces.IDexterityContent"\n-        />\n+  <plone:behavior\n+      name="plone.versioning"\n+      title="Versioning"\n+      description="Versioning support with CMFEditions"\n+      factory=".behaviors.Versionable"\n+      provides=".behaviors.IVersionable"\n+      for="plone.dexterity.interfaces.IDexterityContent"\n+      marker=".behaviors.IVersioningSupport"\n+      />\n \n-    <subscriber\n-        for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".subscribers.create_version_on_save"\n-        />\n+  <subscriber\n+      for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".subscribers.create_version_on_save"\n+      />\n \n-    <subscriber\n-        for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n-             zope.lifecycleevent.interfaces.IObjectAddedEvent"\n-        handler=".subscribers.create_initial_version_after_adding"\n-        />\n+  <subscriber\n+      for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n+           zope.lifecycleevent.interfaces.IObjectAddedEvent"\n+      handler=".subscribers.create_initial_version_after_adding"\n+      />\n \n-    <browser:page\n-          for="plone.dexterity.interfaces.IDexterityContent"\n-          name="version-view"\n-          permission="zope2.View"\n-          class=".browser.VersionView"\n-          />\n+  <browser:page\n+      name="version-view"\n+      for="plone.dexterity.interfaces.IDexterityContent"\n+      class=".browser.VersionView"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-          for="plone.dexterity.interfaces.IDexterityContent"\n-          name="download-version"\n-          permission="zope2.View"\n-          class=".browser.DownloadVersion"\n-          />\n+  <browser:page\n+      name="download-version"\n+      for="plone.dexterity.interfaces.IDexterityContent"\n+      class=".browser.DownloadVersion"\n+      permission="zope2.View"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="Dexterity versioning support"\n-        directory="profiles/default"\n-        description="Adds CMFEditions support for Dexterity."\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="Dexterity versioning support"\n+      description="Adds CMFEditions support for Dexterity."\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n+      />\n \n-    <genericsetup:importStep\n-        name="plone.app.versioningbehavior"\n-        title="plone.app.versioningbehavior custom import handlers"\n-        description=""\n-        handler="plone.app.versioningbehavior.setuphandlers.import_various"\n-        />\n+  <genericsetup:importStep\n+      name="plone.app.versioningbehavior"\n+      title="plone.app.versioningbehavior custom import handlers"\n+      description=""\n+      handler="plone.app.versioningbehavior.setuphandlers.import_various"\n+      />\n \n </configure>\ndiff --git a/plone/app/versioningbehavior/profiles/default/metadata.xml b/plone/app/versioningbehavior/profiles/default/metadata.xml\nindex 3c0f850..9820946 100644\n--- a/plone/app/versioningbehavior/profiles/default/metadata.xml\n+++ b/plone/app/versioningbehavior/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1001</version>\n </metadata>\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:14:10+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/e36da00178724cdef778cc7d4fd79f948a347fe1

chore: zpretty PT

Files changed:
M plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt
M plone/app/versioningbehavior/www/SkipRelations.pt

b'diff --git a/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt b/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt\nindex 236d4ff..65a0976 100644\n--- a/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt\n+++ b/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt\n@@ -1,10 +1,16 @@\n-<p tal:replace="structure here/manage_page_header" omit-tag="">Header</p>\n-<p tal:replace="structure here/manage_tabs" omit-tag="">tabs</p>\n+<p tal:replace="structure here/manage_page_header"\n+   omit-tag=""\n+>Header</p>\n+<p tal:replace="structure here/manage_tabs"\n+   omit-tag=""\n+>tabs</p>\n \n \n <h2>Add Clone Blobs Modifier</h2>\n \n-<form action="manage_addCloneNamedFileBlobs" method="post">\n+<form action="manage_addCloneNamedFileBlobs"\n+      method="post"\n+>\n \n   <table border="0">\n \n@@ -13,7 +19,11 @@\n         Id\n       </th>\n       <td>\n-        <input type="text" name="id" value="" size="40"/>\n+        <input name="id"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n@@ -22,13 +32,20 @@\n         Title\n       </th>\n       <td>\n-        <input type="text" name="title" value="" size="40"/>\n+        <input name="title"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n     <tr>\n       <td colspan="2">\n-        <input type="submit" name="submit" value="Add"/>\n+        <input name="submit"\n+               type="submit"\n+               value="Add"\n+        />\n       </td>\n     </tr>\n \n@@ -36,4 +53,6 @@\n \n </form>\n \n-<p tal:replace="structure here/manage_page_footer" omit-tag="">Footer</p>\n+<p tal:replace="structure here/manage_page_footer"\n+   omit-tag=""\n+>Footer</p>\ndiff --git a/plone/app/versioningbehavior/www/SkipRelations.pt b/plone/app/versioningbehavior/www/SkipRelations.pt\nindex 081c6e3..0d7e421 100644\n--- a/plone/app/versioningbehavior/www/SkipRelations.pt\n+++ b/plone/app/versioningbehavior/www/SkipRelations.pt\n@@ -1,10 +1,16 @@\n-<p tal:replace="structure here/manage_page_header" omit-tag="">Header</p>\n-<p tal:replace="structure here/manage_tabs" omit-tag="">tabs</p>\n+<p tal:replace="structure here/manage_page_header"\n+   omit-tag=""\n+>Header</p>\n+<p tal:replace="structure here/manage_tabs"\n+   omit-tag=""\n+>tabs</p>\n \n \n <h2>Add Skip Relations</h2>\n \n-<form action="manage_addSkipRelations" method="post">\n+<form action="manage_addSkipRelations"\n+      method="post"\n+>\n \n   <table border="0">\n \n@@ -13,7 +19,11 @@\n         Id\n       </th>\n       <td>\n-        <input type="text" name="id" value="" size="40"/>\n+        <input name="id"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n@@ -22,13 +32,20 @@\n         Title\n       </th>\n       <td>\n-        <input type="text" name="title" value="" size="40"/>\n+        <input name="title"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n     <tr>\n       <td colspan="2">\n-        <input type="submit" name="submit" value="Add"/>\n+        <input name="submit"\n+               type="submit"\n+               value="Add"\n+        />\n       </td>\n     </tr>\n \n@@ -36,4 +53,6 @@\n \n </form>\n \n-<p tal:replace="structure here/manage_page_footer" omit-tag="">Footer</p>\n+<p tal:replace="structure here/manage_page_footer"\n+   omit-tag=""\n+>Footer</p>\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:17:39+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/071cd9374d86f9bdacd416638c951adeebf378a2

feat: codespell

Files changed:
M plone/app/versioningbehavior/behaviors.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/setuphandlers.py
M plone/app/versioningbehavior/tests/doctest_behavior.txt
M plone/app/versioningbehavior/tests/test_IntegrationTests.py
M plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/tests/test_functional.py

b'diff --git a/plone/app/versioningbehavior/behaviors.py b/plone/app/versioningbehavior/behaviors.py\nindex 8588539..f075016 100644\n--- a/plone/app/versioningbehavior/behaviors.py\n+++ b/plone/app/versioningbehavior/behaviors.py\n@@ -15,7 +15,7 @@\n \n class IVersionable(model.Schema):\n     """Behavior for enabling CMFEditions\'s versioning for dexterity\n-    content types. Be shure to enable versioning in the plone types\n+    content types. Be sure to enable versioning in the plone types\n     control-panel for your content type.\n     """\n \ndiff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex 7beaecb..d0bac7e 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -88,9 +88,9 @@ class DownloadVersion:\n     Request parameters:\n \n     version_id -- Version ID.\n-    field_id -- (optional) ID of the field (eg.: "file" or "image"). If ommited then the\n+    field_id -- (optional) ID of the field (eg.: "file" or "image"). If omitted then the\n                 primary field will be used.\n-    filename -- (optional) Filename. If ommited then the filename HTTP header won\'t be set on the\n+    filename -- (optional) Filename. If omitted then the filename HTTP header won\'t be set on the\n                 response, but the download will occur normally.\n     do_not_stream -- (optional) Do not stream the file.\n     """\ndiff --git a/plone/app/versioningbehavior/setuphandlers.py b/plone/app/versioningbehavior/setuphandlers.py\nindex 2d29766..f2a1fce 100644\n--- a/plone/app/versioningbehavior/setuphandlers.py\n+++ b/plone/app/versioningbehavior/setuphandlers.py\n@@ -28,7 +28,7 @@ def disable_skip_z3c_blobfile(context, logger):\n \n \n def import_various(context):\n-    """Miscellanous steps import handle"""\n+    """Miscellaneous steps import handle"""\n     if context.readDataFile("plone.app.versioningbehavior_various.txt") is None:\n         return\n \ndiff --git a/plone/app/versioningbehavior/tests/doctest_behavior.txt b/plone/app/versioningbehavior/tests/doctest_behavior.txt\nindex 32d7dbc..cae4a1f 100644\n--- a/plone/app/versioningbehavior/tests/doctest_behavior.txt\n+++ b/plone/app/versioningbehavior/tests/doctest_behavior.txt\n@@ -80,7 +80,7 @@ interface ``plone.app.versioningbehavior.behaviors.IVersioningSupport``::\n     True\n \n \n-After creating the object we wan\'t to create a new version by simply editing it::\n+After creating the object we want to create a new version by simply editing it::\n \n     >>> browser.open(\'http://nohost/plone/testingtype/edit\')\n     >>> browser.getControl(\'Title\').value = \'Blubb2\'\ndiff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\nindex dcf0776..e24b2f7 100644\n--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n@@ -76,7 +76,7 @@ def setUp(self):\n \n         # lets disable versioning while creating, otherwise we\'d have to\n         # change all tests because we\'d have an initial versions and the\n-        # archetypes tests wouldnt have one after just calling\n+        # archetypes tests wouldn\'t have one after just calling\n         # invokeFactory - that\'s the difference between archetypes and\n         # zope events..\n \ndiff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py\nindex bc22f1f..0f6c6fb 100644\n--- a/plone/app/versioningbehavior/tests/test_browser.py\n+++ b/plone/app/versioningbehavior/tests/test_browser.py\n@@ -25,7 +25,7 @@ def setUp(self):\n             type_name=TEST_CONTENT_TYPE_ID,\n             id="obj1",\n             title="Object 1 Title",\n-            description="Description of obect number 1",\n+            description="Description of object number 1",\n             text="Object 1 some footext.",\n             file=NamedBlobFile(filename="object_1_file.txt", data="Object 1 Data"),\n         )\ndiff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py\nindex aa89821..438bc83 100644\n--- a/plone/app/versioningbehavior/tests/test_functional.py\n+++ b/plone/app/versioningbehavior/tests/test_functional.py\n@@ -30,7 +30,7 @@ def setUp(self):\n             type_name=TEST_CONTENT_TYPE_ID,\n             id="obj1",\n             title="Object 1 Title",\n-            description="Description of obect number 1",\n+            description="Description of object number 1",\n             text="Object 1 some footext.",\n         )\n         self.obj1 = self.portal["obj1"]\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:21:47+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/a5611b7decf4dada56804f956b44919949834594

feat: drop CMFPlone dependency

Files changed:
M plone/app/versioningbehavior/subscribers.py

b'diff --git a/plone/app/versioningbehavior/subscribers.py b/plone/app/versioningbehavior/subscribers.py\nindex 95a00c4..24963c4 100644\n--- a/plone/app/versioningbehavior/subscribers.py\n+++ b/plone/app/versioningbehavior/subscribers.py\n@@ -1,9 +1,9 @@\n from plone.app.versioningbehavior import _\n from plone.app.versioningbehavior.utils import get_change_note\n+from plone.base.utils import base_hasattr\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions.interfaces.IArchivist import ArchivistUnregisteredError\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError\n-from Products.CMFPlone.utils import base_hasattr\n from zope.container.interfaces import IContainerModifiedEvent\n \n \n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:25:17+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/429ecfdb727e4f117e2307074a5792fa632d09ca

chore: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 1b60917..3309060 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -7,10 +7,14 @@\n version = "2.0.1.dev0"\n \n tests_require = [\n+    "plone.app.contenttypes[test]",\n+    "plone.app.robotframework",\n     "plone.app.testing",\n+    "plone.protect",\n+    "plone.testing",\n     "Products.CMFDiffTool",\n     "Products.CMFEditions [test]",\n-    "Products.CMFPlone",\n+    "zope.intid",\n ]\n \n setup(\n@@ -53,12 +57,18 @@\n     install_requires=[\n         "plone.app.dexterity[relations]",\n         "plone.autoform",\n+        "plone.base",\n         "plone.behavior>=1.1",\n         "plone.dexterity",\n         "plone.namedfile",\n         "plone.rfc822",\n+        "plone.supermodel",\n         "Products.CMFEditions>2.2.9",\n+        "Products.GenericSetup",\n         "setuptools",\n+        "z3c.form",\n+        "z3c.relationfield",\n+        "zope.annotation",\n         "zope.container",\n     ],\n     tests_require=tests_require,\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-18T00:30:11+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/74122b94ba239f290dfa1f96d0b9d028c44595a6

fix: adapt test extra name

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 8b60bcc..e012931 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -47,4 +47,4 @@ deps =\n commands =\n     zope-testrunner --test-path={toxinidir} -s plone.app.versioningbehavior\n extras =\n-    test\n+    tests\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2023-03-21T14:57:42+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/8df1b8b81881b877d176a449ec5ceb38dc783a13

Merge pull request #68 from plone/config-with-default-template-f957082c

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/b2d5d4a5.internal
A tox.ini
M plone/__init__.py
M plone/app/__init__.py
M plone/app/versioningbehavior/__init__.py
M plone/app/versioningbehavior/behaviors.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/configure.zcml
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/profiles/default/metadata.xml
M plone/app/versioningbehavior/setuphandlers.py
M plone/app/versioningbehavior/subscribers.py
M plone/app/versioningbehavior/testing.py
M plone/app/versioningbehavior/tests/doctest_behavior.txt
M plone/app/versioningbehavior/tests/test_IntegrationTests.py
M plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/tests/test_functional.py
M plone/app/versioningbehavior/tests/test_modifiers.py
M plone/app/versioningbehavior/tests/test_subscribers.py
M plone/app/versioningbehavior/tests/tests.py
M plone/app/versioningbehavior/utils.py
M plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt
M plone/app/versioningbehavior/www/SkipRelations.pt
M pyproject.toml
M setup.cfg
M setup.py
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d4a62f1\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "b2d5d4a5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/b2d5d4a5.internal b/news/b2d5d4a5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/b2d5d4a5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/versioningbehavior/__init__.py b/plone/app/versioningbehavior/__init__.py\nindex d99c1ef..1c8f41e 100644\n--- a/plone/app/versioningbehavior/__init__.py\n+++ b/plone/app/versioningbehavior/__init__.py\n@@ -1,22 +1,21 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.interfaces import HAVE_BLOBS\n from Products.CMFCore.permissions import ManagePortal\n-\n from zope.i18nmessageid import MessageFactory\n \n-_ = MessageFactory(\'plone\')\n+\n+_ = MessageFactory("plone")\n \n \n def initialize(context):\n-    """Registers modifiers with zope (on zope startup).\n-    """\n+    """Registers modifiers with zope (on zope startup)."""\n     if HAVE_BLOBS:\n         from .modifiers import modifiers\n \n         for m in modifiers:\n             context.registerClass(\n-                m[\'wrapper\'], m[\'id\'],\n+                m["wrapper"],\n+                m["id"],\n                 permission=ManagePortal,\n-                constructors=(m[\'form\'], m[\'factory\']),\n-                icon=m[\'icon\'],\n+                constructors=(m["form"], m["factory"]),\n+                icon=m["icon"],\n             )\ndiff --git a/plone/app/versioningbehavior/behaviors.py b/plone/app/versioningbehavior/behaviors.py\nindex 82638c1..f075016 100644\n--- a/plone/app/versioningbehavior/behaviors.py\n+++ b/plone/app/versioningbehavior/behaviors.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior import _\n from plone.autoform import directives as form\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -15,35 +14,38 @@\n \n \n class IVersionable(model.Schema):\n-    """ Behavior for enabling CMFEditions\'s versioning for dexterity\n-    content types. Be shure to enable versioning in the plone types\n+    """Behavior for enabling CMFEditions\'s versioning for dexterity\n+    content types. Be sure to enable versioning in the plone types\n     control-panel for your content type.\n     """\n \n-    model.fieldset(\n-        \'settings\',\n-        label=_(u\'Settings\'),\n-        fields=[\'versioning_enabled\']\n-    )\n+    model.fieldset("settings", label=_("Settings"), fields=["versioning_enabled"])\n     changeNote = schema.TextLine(\n-        title=_(u\'label_change_note\', default=u\'Change Note\'),\n-        description=_(u\'help_change_note\',\n-                      default=u\'Enter a comment that describes the changes you made. \'\n-                              u\'If versioning is manual, you must set a change note \'\n-                              u\'to create the new version.\'),\n-        required=False)\n+        title=_("label_change_note", default="Change Note"),\n+        description=_(\n+            "help_change_note",\n+            default="Enter a comment that describes the changes you made. "\n+            "If versioning is manual, you must set a change note "\n+            "to create the new version.",\n+        ),\n+        required=False,\n+    )\n \n     versioning_enabled = schema.Bool(\n-        title=_(u\'label_versioning_enabled\', default=u\'Versioning enabled\'),\n-        description=_(u\'help_versioning_enabled\',\n-                      default=u\'Enable/disable versioning for this document.\'),\n+        title=_("label_versioning_enabled", default="Versioning enabled"),\n+        description=_(\n+            "help_versioning_enabled",\n+            default="Enable/disable versioning for this document.",\n+        ),\n         default=True,\n-        required=False)\n+        required=False,\n+    )\n+\n+    form.order_after(changeNote="*")\n+    form.omitted("changeNote")\n+    form.no_omit(IEditForm, "changeNote")\n+    form.no_omit(IAddForm, "changeNote")\n \n-    form.order_after(changeNote=\'*\')\n-    form.omitted(\'changeNote\')\n-    form.no_omit(IEditForm, \'changeNote\')\n-    form.no_omit(IAddForm, \'changeNote\')\n \n alsoProvides(IVersionable, IFormFieldProvider)\n \n@@ -56,8 +58,8 @@ class IVersioningSupport(Interface):\n \n @implementer(IVersionable)\n @adapter(IDexterityContent)\n-class Versionable(object):\n-    """ The Versionable adapter prohibits dexterity from saving the changeNote\n+class Versionable:\n+    """The Versionable adapter prohibits dexterity from saving the changeNote\n     on the context. It stores it in a request-annotation for later use in\n     event-handlers\n \n@@ -69,13 +71,13 @@ def __init__(self, context):\n \n     @property\n     def changeNote(self):\n-        return \'\'\n+        return ""\n \n     @changeNote.setter\n     def changeNote(self, value):\n         # store the value for later use (see events.py)\n         annotation = IAnnotations(self.context.REQUEST)\n-        annotation[\'plone.app.versioningbehavior-changeNote\'] = value\n+        annotation["plone.app.versioningbehavior-changeNote"] = value\n \n     @property\n     def versioning_enabled(self):\n@@ -83,4 +85,4 @@ def versioning_enabled(self):\n \n     @versioning_enabled.setter\n     def versioning_enabled(self, value):\n-        setattr(self.context, \'versioning_enabled\', value)\n+        setattr(self.context, "versioning_enabled", value)\ndiff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex 5568dc0..d0bac7e 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -1,15 +1,15 @@\n-# -*- coding: utf-8 -*-\n-from plone.namedfile.utils import set_headers, stream_data\n+from plone.namedfile.utils import set_headers\n+from plone.namedfile.utils import stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n-from six.moves.urllib.parse import urlencode\n+from urllib.parse import urlencode\n from zope.component import getMultiAdapter\n from zope.publisher.interfaces import NotFound\n \n import re\n \n \n-class VersionView(object):\n+class VersionView:\n     """Renders the content-core slot of a version of a content item.\n \n     Currently it works by rendering the @@content-core view of the item and then converting the\n@@ -29,24 +29,24 @@ def __init__(self, context, request):\n         # Example: ++widget++form.widgets.my_interface.my_field/@@download/my_file.txt\n         # Example: view-name/++widget++form.widgets.my_field/@@download/my_file.txt\n         (\n-            r\'([@a-zA-Z0-9_-]+/)?\'\n-            r\'\\+\\+widget\\+\\+form\\.widgets\\.([a-zA-Z0-9_-]+\\.)?(?P<field_id>[a-zA-Z0-9_-]+)\'\n+            r"([@a-zA-Z0-9_-]+/)?"\n+            r"\\+\\+widget\\+\\+form\\.widgets\\.([a-zA-Z0-9_-]+\\.)?(?P<field_id>[a-zA-Z0-9_-]+)"\n             r\'/@@download/(?P<filename>[^"\\\']+)\'\n         ),\n-\n         # Example: @@download/my_field/my_file.txt\n         r\'@@download/(?P<field_id>[a-zA-Z0-9_-]+)/(?P<filename>[^"\\\']+)\',\n-\n         # Example: @@images/aedf-0123.png\n-        r\'@@images/[0-9a-f\\-]+\\.[a-z]+\',\n+        r"@@images/[0-9a-f\\-]+\\.[a-z]+",\n     )\n \n     def __call__(self):\n-        version_id = self.request.get(\'version_id\', None)\n+        version_id = self.request.get("version_id", None)\n         if not version_id:\n-            raise ValueError(u\'Missing parameter on the request: version_id\')\n+            raise ValueError("Missing parameter on the request: version_id")\n \n-        content_core_view = getMultiAdapter((self.context, self.request), name=\'content-core\')\n+        content_core_view = getMultiAdapter(\n+            (self.context, self.request), name="content-core"\n+        )\n         html = content_core_view()\n         return self._convert_download_links(html, version_id)\n \n@@ -57,40 +57,40 @@ def repl(match):\n             groups = match.groupdict()\n             return self._get_download_version_link(\n                 version_id=version_id,\n-                field_id=groups.get(\'field_id\'),\n-                filename=groups.get(\'filename\'),\n+                field_id=groups.get("field_id"),\n+                filename=groups.get("filename"),\n             )\n \n         context_url = self.context.absolute_url()\n         for pattern in self._download_url_patterns:\n-            compiled_pattern = re.compile(context_url + \'/\' + pattern)\n+            compiled_pattern = re.compile(context_url + "/" + pattern)\n             transformed_html = compiled_pattern.sub(repl, transformed_html)\n \n         return transformed_html\n \n     def _get_download_version_link(self, version_id, field_id=None, filename=None):\n-        parameters = [(\'version_id\', version_id)]\n+        parameters = [("version_id", version_id)]\n \n         if field_id:\n-            parameters.append((\'field_id\', field_id))\n+            parameters.append(("field_id", field_id))\n \n         if filename:\n-            parameters.append((\'filename\', filename))\n+            parameters.append(("filename", filename))\n \n         query_string = urlencode(parameters)\n-        return \'{}/@@download-version?{}\'.format(self.context.absolute_url(), query_string)\n+        return f"{self.context.absolute_url()}/@@download-version?{query_string}"\n \n \n-class DownloadVersion(object):\n+class DownloadVersion:\n     """Downloads a file in a field of a content item at an specific version.\n \n \n     Request parameters:\n \n     version_id -- Version ID.\n-    field_id -- (optional) ID of the field (eg.: "file" or "image"). If ommited then the\n+    field_id -- (optional) ID of the field (eg.: "file" or "image"). If omitted then the\n                 primary field will be used.\n-    filename -- (optional) Filename. If ommited then the filename HTTP header won\'t be set on the\n+    filename -- (optional) Filename. If omitted then the filename HTTP header won\'t be set on the\n                 response, but the download will occur normally.\n     do_not_stream -- (optional) Do not stream the file.\n     """\n@@ -100,15 +100,17 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-        version_id = self.request.get(\'version_id\', None)\n+        version_id = self.request.get("version_id", None)\n         if not version_id:\n-            raise ValueError(u\'Missing parameter on the request: version_id\')\n+            raise ValueError("Missing parameter on the request: version_id")\n \n-        field_id = self.request.get(\'field_id\') or IPrimaryFieldInfo(self.context).fieldname\n-        filename = self.request.get(\'filename\')\n-        do_not_stream = self.request.get(\'do_not_stream\')\n+        field_id = (\n+            self.request.get("field_id") or IPrimaryFieldInfo(self.context).fieldname\n+        )\n+        filename = self.request.get("filename")\n+        do_not_stream = self.request.get("do_not_stream")\n \n-        repository = getToolByName(self.context, \'portal_repository\')\n+        repository = getToolByName(self.context, "portal_repository")\n         old_obj = repository.retrieve(self.context, version_id).object\n \n         # Will only work if the file is stored as an attribute with the same\ndiff --git a/plone/app/versioningbehavior/configure.zcml b/plone/app/versioningbehavior/configure.zcml\nindex ba6176e..8462967 100644\n--- a/plone/app/versioningbehavior/configure.zcml\n+++ b/plone/app/versioningbehavior/configure.zcml\n@@ -4,65 +4,72 @@\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <include package="plone.behavior" file="meta.zcml" />\n+  <include\n+      package="plone.behavior"\n+      file="meta.zcml"\n+      />\n \n-    <include package="plone.rfc822" />\n+  <include package="plone.rfc822" />\n \n-    <five:registerPackage package="." initialize=".initialize" />\n+  <five:registerPackage\n+      package="."\n+      initialize=".initialize"\n+      />\n \n-    <include package="plone.app.dexterity" />\n+  <include package="plone.app.dexterity" />\n \n-    <plone:behavior\n-        name="plone.versioning"\n-        title="Versioning"\n-        description="Versioning support with CMFEditions"\n-        provides=".behaviors.IVersionable"\n-        factory=".behaviors.Versionable"\n-        marker=".behaviors.IVersioningSupport"\n-        for="plone.dexterity.interfaces.IDexterityContent"\n-        />\n+  <plone:behavior\n+      name="plone.versioning"\n+      title="Versioning"\n+      description="Versioning support with CMFEditions"\n+      factory=".behaviors.Versionable"\n+      provides=".behaviors.IVersionable"\n+      for="plone.dexterity.interfaces.IDexterityContent"\n+      marker=".behaviors.IVersioningSupport"\n+      />\n \n-    <subscriber\n-        for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".subscribers.create_version_on_save"\n-        />\n+  <subscriber\n+      for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".subscribers.create_version_on_save"\n+      />\n \n-    <subscriber\n-        for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n-             zope.lifecycleevent.interfaces.IObjectAddedEvent"\n-        handler=".subscribers.create_initial_version_after_adding"\n-        />\n+  <subscriber\n+      for="plone.app.versioningbehavior.behaviors.IVersioningSupport\n+           zope.lifecycleevent.interfaces.IObjectAddedEvent"\n+      handler=".subscribers.create_initial_version_after_adding"\n+      />\n \n-    <browser:page\n-          for="plone.dexterity.interfaces.IDexterityContent"\n-          name="version-view"\n-          permission="zope2.View"\n-          class=".browser.VersionView"\n-          />\n+  <browser:page\n+      name="version-view"\n+      for="plone.dexterity.interfaces.IDexterityContent"\n+      class=".browser.VersionView"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-          for="plone.dexterity.interfaces.IDexterityContent"\n-          name="download-version"\n-          permission="zope2.View"\n-          class=".browser.DownloadVersion"\n-          />\n+  <browser:page\n+      name="download-version"\n+      for="plone.dexterity.interfaces.IDexterityContent"\n+      class=".browser.DownloadVersion"\n+      permission="zope2.View"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="Dexterity versioning support"\n-        directory="profiles/default"\n-        description="Adds CMFEditions support for Dexterity."\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="Dexterity versioning support"\n+      description="Adds CMFEditions support for Dexterity."\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n+      />\n \n-    <genericsetup:importStep\n-        name="plone.app.versioningbehavior"\n-        title="plone.app.versioningbehavior custom import handlers"\n-        description=""\n-        handler="plone.app.versioningbehavior.setuphandlers.import_various"\n-        />\n+  <genericsetup:importStep\n+      name="plone.app.versioningbehavior"\n+      title="plone.app.versioningbehavior custom import handlers"\n+      description=""\n+      handler="plone.app.versioningbehavior.setuphandlers.import_various"\n+      />\n \n </configure>\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 9fa0318..1b053d2 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from plone.behavior.registration import BehaviorRegistrationNotFound\n@@ -15,17 +14,17 @@\n from Products.CMFEditions.interfaces.IModifier import ISaveRetrieveModifier\n from Products.CMFEditions.Modifiers import ConditionalTalesModifier\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n+from z3c.relationfield.interfaces import IRelationChoice\n+from z3c.relationfield.interfaces import IRelationList\n from zope.interface import implementer\n from zope.schema import getFields\n \n \n-manage_CloneNamedFileBlobsAddForm =  \\\n-    PageTemplateFile(\n-        \'www/CloneNamedFileBlobs.pt\',\n-        globals(),\n-        __name__=\'manage_CloneNamedFileBlobs\',\n-    )\n+manage_CloneNamedFileBlobsAddForm = PageTemplateFile(\n+    "www/CloneNamedFileBlobs.pt",\n+    globals(),\n+    __name__="manage_CloneNamedFileBlobs",\n+)\n \n \n def getCallbacks(values):\n@@ -40,7 +39,7 @@ def getCallbacks(values):\n     # field value here because it may be a newly\n     # created object and we want to ensure that\n     # it\'s not garbage collected and "reused".\n-    mapping = dict((id(value), value) for value in values)\n+    mapping = {id(value): value for value in values}\n \n     def persistent_id(obj):\n         return mapping.get(id(obj), None)\n@@ -63,31 +62,28 @@ def getFieldValues(obj, *ifaces):\n \n \n def manage_addCloneNamedFileBlobs(self, id, title=None, REQUEST=None):\n-    """Add a clone namedfile blobs modifier.\n-    """\n+    """Add a clone namedfile blobs modifier."""\n     modifier = CloneNamedFileBlobs(id, title)\n     self._setObject(id, modifier)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n+        REQUEST["RESPONSE"].redirect(self.absolute_url() + "/manage_main")\n \n \n-manage_SkipRelationsAddForm =  \\\n-    PageTemplateFile(\n-        \'www/SkipRelations.pt\',\n-        globals(),\n-        __name__=\'manage_SkipRelationsAddForm\',\n-    )\n+manage_SkipRelationsAddForm = PageTemplateFile(\n+    "www/SkipRelations.pt",\n+    globals(),\n+    __name__="manage_SkipRelationsAddForm",\n+)\n \n \n def manage_addSkipRelations(self, id, title=None, REQUEST=None):\n-    """Add a skip relations modifier.\n-    """\n+    """Add a skip relations modifier."""\n     modifier = SkipRelations(id, title)\n     self._setObject(id, modifier)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n+        REQUEST["RESPONSE"].redirect(self.absolute_url() + "/manage_main")\n \n \n @implementer(IAttributeModifier, ICloneModifier)\n@@ -112,8 +108,9 @@ def getReferencedAttributes(self, obj):\n         file_data = {}\n         for schemata in iterSchemata(obj):\n             for name, field in getFields(schemata).items():\n-                if (INamedBlobFileField.providedBy(field) or\n-                        INamedBlobImageField.providedBy(field)):\n+                if INamedBlobFileField.providedBy(\n+                    field\n+                ) or INamedBlobImageField.providedBy(field):\n                     try:\n                         # field.get may raise an AttributeError if the field\n                         # is provided by a behavior and hasn\'t been\n@@ -123,15 +120,15 @@ def getReferencedAttributes(self, obj):\n                         field_value = None\n                     if field_value is None:\n                         continue\n-                    dotted_name = \'.\'.join([schemata.__identifier__, name])\n+                    dotted_name = ".".join([schemata.__identifier__, name])\n                     file_data[dotted_name] = field_value._blob\n         return file_data\n \n     def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in attrs_dict.items():\n-            iface_name, f_name = name.rsplit(\'.\', 1)\n-            generated_prefix = \'plone.dexterity.schema.generated.\'\n+            iface_name, f_name = name.rsplit(".", 1)\n+            generated_prefix = "plone.dexterity.schema.generated."\n             # In case the field is provided via a behavior:\n             # Look up the behavior via dotted name.\n             # If the behavior\'s dotted name was changed, we might still have\n@@ -156,12 +153,11 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n                     adapted_field._blob = blob\n \n     def getOnCloneModifiers(self, obj):\n-        """Removes references to blobs in the cloned object.\n-        """\n+        """Removes references to blobs in the cloned object."""\n \n         persistent_id, persistent_load = getCallbacks(\n-            aq_base(value._blob) for value\n-            in getFieldValues(obj, INamedBlobFileField, INamedBlobImageField)\n+            aq_base(value._blob)\n+            for value in getFieldValues(obj, INamedBlobFileField, INamedBlobImageField)\n         )\n \n         return persistent_id, persistent_load, [], []\n@@ -181,12 +177,11 @@ def __init__(self, id_, title):\n         self.title = str(title)\n \n     def getOnCloneModifiers(self, obj):\n-        """Removes relations.\n-        """\n+        """Removes relations."""\n \n         persistent_id, persistent_load = getCallbacks(\n-            aq_base(value) for value\n-            in getFieldValues(obj, IRelationChoice, IRelationList)\n+            aq_base(value)\n+            for value in getFieldValues(obj, IRelationChoice, IRelationList)\n         )\n \n         return persistent_id, persistent_load, [], []\n@@ -197,16 +192,18 @@ def beforeSaveModifier(self, obj, clone):\n \n     def afterRetrieveModifier(self, obj, repo_clone, preserve=()):\n         """Restore relations from the working copy."""\n-        if (\n-            IDexterityContent.providedBy(obj) and\n-            IDexterityContent.providedBy(repo_clone)\n+        if IDexterityContent.providedBy(obj) and IDexterityContent.providedBy(\n+            repo_clone\n         ):\n             for schemata in iterSchemata(obj):\n                 for name, field in getFields(schemata).items():\n-                    if (IRelationChoice.providedBy(field) or\n-                            IRelationList.providedBy(field)):\n-                        field.set(field.interface(repo_clone),\n-                                  field.query(field.interface(obj)))\n+                    if IRelationChoice.providedBy(field) or IRelationList.providedBy(\n+                        field\n+                    ):\n+                        field.set(\n+                            field.interface(repo_clone),\n+                            field.query(field.interface(obj)),\n+                        )\n         return [], [], {}\n \n \n@@ -215,25 +212,25 @@ def afterRetrieveModifier(self, obj, repo_clone, preserve=()):\n \n modifiers = (\n     {\n-        \'id\': \'CloneNamedFileBlobs\',\n-        \'title\': "Store blobs by reference on content",\n-        \'enabled\': True,\n-        \'condition\': "python:True",\n-        \'wrapper\': ConditionalTalesModifier,\n-        \'modifier\': CloneNamedFileBlobs,\n-        \'form\': manage_CloneNamedFileBlobsAddForm,\n-        \'factory\': manage_addCloneNamedFileBlobs,\n-        \'icon\': \'www/modifier.gif\',\n+        "id": "CloneNamedFileBlobs",\n+        "title": "Store blobs by reference on content",\n+        "enabled": True,\n+        "condition": "python:True",\n+        "wrapper": ConditionalTalesModifier,\n+        "modifier": CloneNamedFileBlobs,\n+        "form": manage_CloneNamedFileBlobsAddForm,\n+        "factory": manage_addCloneNamedFileBlobs,\n+        "icon": "www/modifier.gif",\n     },\n     {\n-        \'id\': \'SkipRelations\',\n-        \'title\': "Skip saving of relations",\n-        \'enabled\': True,\n-        \'condition\': "python:True",\n-        \'wrapper\': ConditionalTalesModifier,\n-        \'modifier\': SkipRelations,\n-        \'form\': manage_SkipRelationsAddForm,\n-        \'factory\': manage_addSkipRelations,\n-        \'icon\': \'www/modifier.gif\',\n+        "id": "SkipRelations",\n+        "title": "Skip saving of relations",\n+        "enabled": True,\n+        "condition": "python:True",\n+        "wrapper": ConditionalTalesModifier,\n+        "modifier": SkipRelations,\n+        "form": manage_SkipRelationsAddForm,\n+        "factory": manage_addSkipRelations,\n+        "icon": "www/modifier.gif",\n     },\n )\ndiff --git a/plone/app/versioningbehavior/profiles/default/metadata.xml b/plone/app/versioningbehavior/profiles/default/metadata.xml\nindex 3c0f850..9820946 100644\n--- a/plone/app/versioningbehavior/profiles/default/metadata.xml\n+++ b/plone/app/versioningbehavior/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1001</version>\n </metadata>\ndiff --git a/plone/app/versioningbehavior/setuphandlers.py b/plone/app/versioningbehavior/setuphandlers.py\nindex 9614473..f2a1fce 100644\n--- a/plone/app/versioningbehavior/setuphandlers.py\n+++ b/plone/app/versioningbehavior/setuphandlers.py\n@@ -1,41 +1,38 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior.modifiers import modifiers\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions.interfaces.IModifier import IConditionalTalesModifier\n \n \n def install_modifiers(context, logger):\n-    portal_modifier = getToolByName(context, \'portal_modifier\')\n+    portal_modifier = getToolByName(context, "portal_modifier")\n     for m in modifiers:\n-        id_ = m[\'id\']\n+        id_ = m["id"]\n         if id_ in portal_modifier.objectIds():\n             continue\n-        title = m[\'title\']\n-        modifier = m[\'modifier\'](id_, title)\n-        wrapper = m[\'wrapper\'](id_, modifier, title)\n-        enabled = m[\'enabled\']\n+        title = m["title"]\n+        modifier = m["modifier"](id_, title)\n+        wrapper = m["wrapper"](id_, modifier, title)\n+        enabled = m["enabled"]\n         if IConditionalTalesModifier.providedBy(wrapper):\n-            wrapper.edit(enabled, m[\'condition\'])\n+            wrapper.edit(enabled, m["condition"])\n         else:\n             wrapper.edit(enabled)\n-        portal_modifier.register(m[\'id\'], wrapper)\n+        portal_modifier.register(m["id"], wrapper)\n \n \n def disable_skip_z3c_blobfile(context, logger):\n-    portal_modifier = getToolByName(context, \'portal_modifier\')\n-    if \'Skip_z3c_blobfile\' in portal_modifier.objectIds():\n-        modifier = portal_modifier.get(\'Skip_z3c_blobfile\')\n+    portal_modifier = getToolByName(context, "portal_modifier")\n+    if "Skip_z3c_blobfile" in portal_modifier.objectIds():\n+        modifier = portal_modifier.get("Skip_z3c_blobfile")\n         modifier.edit(enabled=False)\n \n \n def import_various(context):\n-    """Miscellanous steps import handle\n-    """\n-    if context.readDataFile(\n-            \'plone.app.versioningbehavior_various.txt\') is None:\n+    """Miscellaneous steps import handle"""\n+    if context.readDataFile("plone.app.versioningbehavior_various.txt") is None:\n         return\n \n-    logger = context.getLogger(\'plone.app.versioningbehavior\')\n+    logger = context.getLogger("plone.app.versioningbehavior")\n     site = context.getSite()\n     install_modifiers(site, logger)\n     disable_skip_z3c_blobfile(site, logger)\ndiff --git a/plone/app/versioningbehavior/subscribers.py b/plone/app/versioningbehavior/subscribers.py\nindex 11859e7..24963c4 100644\n--- a/plone/app/versioningbehavior/subscribers.py\n+++ b/plone/app/versioningbehavior/subscribers.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.versioningbehavior import _\n from plone.app.versioningbehavior.utils import get_change_note\n+from plone.base.utils import base_hasattr\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions.interfaces.IArchivist import ArchivistUnregisteredError\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError\n-from Products.CMFPlone.utils import base_hasattr\n from zope.container.interfaces import IContainerModifiedEvent\n \n \n@@ -32,7 +31,7 @@ def create_version_on_save(context, event):\n \n     create_version = False\n \n-    if getattr(context, \'REQUEST\', None):\n+    if getattr(context, "REQUEST", None):\n         changeNote = get_change_note(context.REQUEST, None)\n     else:\n         changeNote = None\n@@ -42,10 +41,10 @@ def create_version_on_save(context, event):\n         # has changed.\n         create_version = True\n \n-    elif pr.supportsPolicy(context, \'at_edit_autoversion\'):\n+    elif pr.supportsPolicy(context, "at_edit_autoversion"):\n         # automatic versioning is enabled for this portal type\n \n-        if not base_hasattr(context, \'version_id\'):\n+        if not base_hasattr(context, "version_id"):\n             # we do not have a initial version\n             create_version = True\n         else:\n@@ -70,7 +69,7 @@ def create_initial_version_after_adding(context, event):\n     version. If a changeNote was entered it\'s used as comment.\n     """\n \n-    pr = getToolByName(context, \'portal_repository\', None)\n+    pr = getToolByName(context, "portal_repository", None)\n     if pr is None:\n         # This can happen, e.g., when adding a Plone Site with versioning\n         # and portal_repository is not yet created\n@@ -80,21 +79,20 @@ def create_initial_version_after_adding(context, event):\n         # object is not versionable\n         return\n \n-    if not pr.supportsPolicy(context, \'at_edit_autoversion\'):\n+    if not pr.supportsPolicy(context, "at_edit_autoversion"):\n         # automatic versioning disabled for this portal type, so we don\'t\n         # need to create an initial version\n         return\n \n     # get the change not\n-    default_changeNote = _(u\'initial_version_changeNote\',\n-                           default=u\'Initial version\')\n-    if getattr(context, \'REQUEST\', None):\n+    default_changeNote = _("initial_version_changeNote", default="Initial version")\n+    if getattr(context, "REQUEST", None):\n         changeNote = get_change_note(context.REQUEST, default_changeNote)\n     else:\n         changeNote = None\n \n     changed = False\n-    if not base_hasattr(context, \'version_id\'):\n+    if not base_hasattr(context, "version_id"):\n         # no initial version, let\'s create one..\n         changed = True\n \ndiff --git a/plone/app/versioningbehavior/testing.py b/plone/app/versioningbehavior/testing.py\nindex 144e25d..0f84cd9 100644\n--- a/plone/app/versioningbehavior/testing.py\n+++ b/plone/app/versioningbehavior/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.app.testing import applyProfile\n@@ -14,12 +13,14 @@\n import plone.app.versioningbehavior\n \n \n-TEST_CONTENT_TYPE_ID = \'TestContentType\'\n-DEFAULT_POLICIES = (\'at_edit_autoversion\', \'version_on_revert\',)\n+TEST_CONTENT_TYPE_ID = "TestContentType"\n+DEFAULT_POLICIES = (\n+    "at_edit_autoversion",\n+    "version_on_revert",\n+)\n \n \n class PloneAppVersioningbehaviorLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -29,17 +30,17 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.versioningbehavior)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.versioningbehavior:default\')\n+        applyProfile(portal, "plone.app.versioningbehavior:default")\n         self.registerVersionedDocumentFTI(portal)\n \n     def registerVersionedDocumentFTI(self, portal):\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        types_tool = getToolByName(portal, "portal_types")\n         fti = DexterityFTI(\n             TEST_CONTENT_TYPE_ID,\n             global_allow=True,\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n             ),\n             model_source="""\n                 <model xmlns="http://namespaces.plone.org/supermodel/schema"\n@@ -56,20 +57,22 @@ def registerVersionedDocumentFTI(self, portal):\n                         </field>\n                     </schema>\n                 </model>\n-                """)\n+                """,\n+        )\n         types_tool._setObject(TEST_CONTENT_TYPE_ID, fti)\n \n-        diff_tool = getToolByName(portal, \'portal_diff\')\n+        diff_tool = getToolByName(portal, "portal_diff")\n         diff_tool.setDiffForPortalType(\n-            TEST_CONTENT_TYPE_ID, {\'text\': TextDiff.meta_type})\n+            TEST_CONTENT_TYPE_ID, {"text": TextDiff.meta_type}\n+        )\n \n-        portal_repository = getToolByName(portal, \'portal_repository\')\n+        portal_repository = getToolByName(portal, "portal_repository")\n         portal_repository.setVersionableContentTypes(\n-            list(portal_repository.getVersionableContentTypes()) +\n-            [TEST_CONTENT_TYPE_ID])\n+            list(portal_repository.getVersionableContentTypes())\n+            + [TEST_CONTENT_TYPE_ID]\n+        )\n         for policy_id in DEFAULT_POLICIES:\n-            portal_repository.addPolicyForContentType(\n-                TEST_CONTENT_TYPE_ID, policy_id)\n+            portal_repository.addPolicyForContentType(TEST_CONTENT_TYPE_ID, policy_id)\n \n     def testSetUp(self):\n         self.CSRF_DISABLED_ORIGINAL = protect_auto.CSRF_DISABLED\n@@ -78,18 +81,19 @@ def testSetUp(self):\n     def testTearDown(self):\n         protect_auto.CSRF_DISABLED = self.CSRF_DISABLED_ORIGINAL\n \n+\n PLONE_APP_VERSIONINGBEHAVIOR_FIXTURE = PloneAppVersioningbehaviorLayer()\n \n \n PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_VERSIONINGBEHAVIOR_FIXTURE,),\n-    name=\'PloneAppVersioningbehaviorLayer:IntegrationTesting\',\n+    name="PloneAppVersioningbehaviorLayer:IntegrationTesting",\n )\n \n \n PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_VERSIONINGBEHAVIOR_FIXTURE,),\n-    name=\'PloneAppVersioningbehaviorLayer:FunctionalTesting\',\n+    name="PloneAppVersioningbehaviorLayer:FunctionalTesting",\n )\n \n \n@@ -99,5 +103,5 @@ def testTearDown(self):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         z2.ZSERVER_FIXTURE,\n     ),\n-    name=\'PloneAppVersioningbehaviorLayer:AcceptanceTesting\',\n+    name="PloneAppVersioningbehaviorLayer:AcceptanceTesting",\n )\ndiff --git a/plone/app/versioningbehavior/tests/doctest_behavior.txt b/plone/app/versioningbehavior/tests/doctest_behavior.txt\nindex 32d7dbc..cae4a1f 100644\n--- a/plone/app/versioningbehavior/tests/doctest_behavior.txt\n+++ b/plone/app/versioningbehavior/tests/doctest_behavior.txt\n@@ -80,7 +80,7 @@ interface ``plone.app.versioningbehavior.behaviors.IVersioningSupport``::\n     True\n \n \n-After creating the object we wan\'t to create a new version by simply editing it::\n+After creating the object we want to create a new version by simply editing it::\n \n     >>> browser.open(\'http://nohost/plone/testingtype/edit\')\n     >>> browser.getControl(\'Title\').value = \'Blubb2\'\ndiff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\nindex 3506ec9..e24b2f7 100644\n--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py\n@@ -1,7 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.utils import getToolByName\n \n@@ -16,31 +17,30 @@ class TestDexterityIntegration(unittest.TestCase):\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         # get some tools\n-        types_tool = getToolByName(self.portal, \'portal_types\')\n-        repo_tool = getToolByName(self.portal, \'portal_repository\')\n-        acl_users = getToolByName(self.portal, \'acl_users\')\n+        types_tool = getToolByName(self.portal, "portal_types")\n+        repo_tool = getToolByName(self.portal, "portal_repository")\n+        acl_users = getToolByName(self.portal, "acl_users")\n \n         # we need to have the Manager role to be able to add things\n         # to the portal root\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # add an additional user\n-        acl_users.userFolderAddUser(\'reviewer\', \'reviewer\',\n-                                    [\'Manager\'], \'\')\n+        acl_users.userFolderAddUser("reviewer", "reviewer", ["Manager"], "")\n \n         # now create some dexterity FTIs...\n         # ... a document\n         document_fti = DexterityFTI(\n-            \'Document\',\n-            factory=\'Document\',\n+            "Document",\n+            factory="Document",\n             global_allow=True,\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-                \'plone.app.dexterity.behaviors.metadata.IRelatedItems\',\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n+                "plone.app.dexterity.behaviors.metadata.IRelatedItems",\n             ),\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n@@ -51,52 +51,54 @@ def setUp(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        if \'Document\' in types_tool.objectIds():\n-            types_tool._delObject(\'Document\')\n-        types_tool._setObject(\'Document\', document_fti)\n+        """,\n+        )\n+        if "Document" in types_tool.objectIds():\n+            types_tool._delObject("Document")\n+        types_tool._setObject("Document", document_fti)\n \n         # ... and a folder\n         folder_fti = DexterityFTI(\n-            \'Folder\',\n-            factory=\'Folder\',\n-            klass=\'plone.dexterity.content.Container\',\n+            "Folder",\n+            factory="Folder",\n+            klass="plone.dexterity.content.Container",\n             global_allow=True,\n-            allowed_content_types=(\'Document\',),\n+            allowed_content_types=("Document",),\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-                \'plone.app.dexterity.behaviors.metadata.IRelatedItems\',\n-            ))\n-        if \'Folder\' in types_tool.objectIds():\n-            types_tool._delObject(\'Folder\')\n-        types_tool._setObject(\'Folder\', folder_fti)\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n+                "plone.app.dexterity.behaviors.metadata.IRelatedItems",\n+            ),\n+        )\n+        if "Folder" in types_tool.objectIds():\n+            types_tool._delObject("Folder")\n+        types_tool._setObject("Folder", folder_fti)\n \n         # lets disable versioning while creating, otherwise we\'d have to\n         # change all tests because we\'d have an initial versions and the\n-        # archetypes tests wouldnt have one after just calling\n+        # archetypes tests wouldn\'t have one after just calling\n         # invokeFactory - that\'s the difference between archetypes and\n         # zope events..\n \n         vtypes = repo_tool.getVersionableContentTypes()\n-        vtypes.remove(\'Document\')\n+        vtypes.remove("Document")\n         repo_tool.setVersionableContentTypes(vtypes)\n \n         # now add a document\n-        self.portal.invokeFactory(\'Document\', \'doc\')\n+        self.portal.invokeFactory("Document", "doc")\n \n         # and add a folder with two documents in it\n-        self.portal.invokeFactory(\'Folder\', \'fol\')\n-        self.portal.fol.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.fol.invokeFactory(\'Document\', \'doc2\')\n+        self.portal.invokeFactory("Folder", "fol")\n+        self.portal.fol.invokeFactory("Document", "doc1")\n+        self.portal.fol.invokeFactory("Document", "doc2")\n \n         # re-enable versioning\n-        vtypes.append(\'Dpcument\')\n+        vtypes.append("Dpcument")\n         repo_tool.setVersionableContentTypes(vtypes)\n \n         # We have a test that fails without workflow.\n-        wf_tool = getToolByName(self.portal, \'portal_workflow\')\n-        wf_tool.setChainForPortalTypes((\'Document\',), (\'simple_publication_workflow\',))\n+        wf_tool = getToolByName(self.portal, "portal_workflow")\n+        wf_tool.setChainForPortalTypes(("Document",), ("simple_publication_workflow",))\n \n     def test13_revertUpdatesCatalog(self):\n         # This test in CMFEditions uses doc.edit, but we have no archetypes\ndiff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py\nindex 9b31896..0f6c6fb 100644\n--- a/plone/app/versioningbehavior/tests/test_browser.py\n+++ b/plone/app/versioningbehavior/tests/test_browser.py\n@@ -1,10 +1,11 @@\n-# -*- coding: utf-8 -*-\n """Tests for the `browser` module."""\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_ROLES\n from plone.app.versioningbehavior import browser\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING,\n+)\n from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID\n from plone.namedfile import NamedBlobFile\n from zope.component import getMultiAdapter\n@@ -14,27 +15,26 @@\n \n \n class BaseViewTestCase(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES + [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES + ["Manager"])\n         self.portal.invokeFactory(\n             type_name=TEST_CONTENT_TYPE_ID,\n-            id=\'obj1\',\n-            title=u\'Object 1 Title\',\n-            description=u\'Description of obect number 1\',\n-            text=u\'Object 1 some footext.\',\n-            file=NamedBlobFile(filename=u\'object_1_file.txt\', data=\'Object 1 Data\'),\n+            id="obj1",\n+            title="Object 1 Title",\n+            description="Description of object number 1",\n+            text="Object 1 some footext.",\n+            file=NamedBlobFile(filename="object_1_file.txt", data="Object 1 Data"),\n         )\n-        self.obj1 = self.portal[\'obj1\']\n+        self.obj1 = self.portal["obj1"]\n \n     def _render_view(self, view, url=None, params=None):\n         if url:\n-            self.request.set(\'ACTUAL_URL\', url)\n-            self.request.set(\'URL\', url)\n+            self.request.set("ACTUAL_URL", url)\n+            self.request.set("URL", url)\n \n         self.request.form.clear()\n         self.request.form.update(params or {})\n@@ -46,14 +46,14 @@ class VersionViewTestCase(BaseViewTestCase):\n \n     def test_version_view_is_registered(self):\n         obj = self.obj1\n-        view = getMultiAdapter((obj, self.request), name=\'version-view\')\n+        view = getMultiAdapter((obj, self.request), name="version-view")\n         self.assertIsInstance(view, browser.VersionView)\n \n     def test_convert_download_links(self):\n         """Tests for the `_get_download_version_link` method."""\n         obj = self.obj1\n         view = browser.VersionView(obj, self.request)\n-        href_template = u\'<a href="{}" />\'\n+        href_template = \'<a href="{}" />\'\n \n         def _assert(old_path, version, field=None, filename=None):\n             old_url = obj.absolute_url() + old_path\n@@ -68,75 +68,63 @@ def _assert(old_path, version, field=None, filename=None):\n             self.assertEqual(new, correct)\n \n         _assert(\n-            \'/@@download/my_field/my_file.txt\',\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            "/@@download/my_field/my_file.txt",\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n             (\n-                \'/versions_history_form/++widget++form.widgets.my_interface.my_field\'\n-                \'/@@download/my_file.txt\'\n+                "/versions_history_form/++widget++form.widgets.my_interface.my_field"\n+                "/@@download/my_file.txt"\n             ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n             (\n-                \'/versions_history_form/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n+                "/versions_history_form/++widget++form.widgets.my_field"\n+                "/@@download/my_file.txt"\n             ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/++widget++form.widgets.my_interface.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/++widget++form.widgets.my_interface.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/++widget++form.widgets.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/my-view/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/my-view/++widget++form.widgets.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            (\n-                \'/@@my-view/++widget++form.widgets.my_field\'\n-                \'/@@download/my_file.txt\'\n-            ),\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            ("/@@my-view/++widget++form.widgets.my_field" "/@@download/my_file.txt"),\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n         )\n \n         _assert(\n-            \'/@@images/abde-01fa.png\',\n-            version=\'my_version\',\n+            "/@@images/abde-01fa.png",\n+            version="my_version",\n         )\n \n     def test_get_download_version_link(self):\n@@ -150,31 +138,31 @@ def _assert(version, correct_path, field=None, filename=None):\n                 field_id=field,\n                 filename=filename,\n             )\n-            correct_url = obj.absolute_url() + \'/\' + correct_path\n+            correct_url = obj.absolute_url() + "/" + correct_path\n             self.assertEqual(actual, correct_url)\n \n         _assert(\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            filename=\'my_file.txt\',\n+            version="my_version",\n+            field="my_field",\n+            filename="my_file.txt",\n             correct_path=(\n-                \'@@download-version?\'\n-                \'version_id=my_version&field_id=my_field&filename=my_file.txt\'\n+                "@@download-version?"\n+                "version_id=my_version&field_id=my_field&filename=my_file.txt"\n             ),\n         )\n         _assert(\n-            version=\'my_version\',\n-            filename=\'my_file.txt\',\n-            correct_path=\'@@download-version?version_id=my_version&filename=my_file.txt\',\n+            version="my_version",\n+            filename="my_file.txt",\n+            correct_path="@@download-version?version_id=my_version&filename=my_file.txt",\n         )\n         _assert(\n-            version=\'my_version\',\n-            field=\'my_field\',\n-            correct_path=\'@@download-version?version_id=my_version&field_id=my_field\',\n+            version="my_version",\n+            field="my_field",\n+            correct_path="@@download-version?version_id=my_version&field_id=my_field",\n         )\n         _assert(\n-            version=\'my_version\',\n-            correct_path=\'@@download-version?version_id=my_version\',\n+            version="my_version",\n+            correct_path="@@download-version?version_id=my_version",\n         )\n \n     def test_call(self):\n@@ -184,17 +172,21 @@ def test_call(self):\n \n         html = self._render_view(view=obj, url=obj.absolute_url())\n         download_url_pattern = re.compile(\n-            obj.absolute_url() +\n-            r\'(/[@A-Za-z0-9-_]+)?/\' +  # View name can be present or not.\n-            r\'\\+\\+widget\\+\\+form\\.widgets\\.file/@@download/\' +\n-            obj.file.filename\n+            obj.absolute_url()\n+            + r"(/[@A-Za-z0-9-_]+)?/"\n+            + r"\\+\\+widget\\+\\+form\\.widgets\\.file/@@download/"  # View name can be present or not.\n+            + obj.file.filename\n         )\n         self.assertTrue(download_url_pattern.search(html))\n \n-        html = self._render_view(view=view, url=obj.absolute_url(), params={\'version_id\': \'0\'})\n-        download_url = \'{}/@@download-version?version_id=0&field_id=file&filename={}\'.format(\n-            obj.absolute_url(),\n-            obj.file.filename,\n+        html = self._render_view(\n+            view=view, url=obj.absolute_url(), params={"version_id": "0"}\n+        )\n+        download_url = (\n+            "{}/@@download-version?version_id=0&field_id=file&filename={}".format(\n+                obj.absolute_url(),\n+                obj.file.filename,\n+            )\n         )\n         self.assertTrue(download_url in html)\n \n@@ -210,7 +202,8 @@ def test_should_download_file_correctly(self):\n         data = self._render_view(\n             view,\n             url=obj.absolute_url(),\n-            params={\'version_id\': \'0\', \'do_not_stream\': \'1\'})\n+            params={"version_id": "0", "do_not_stream": "1"},\n+        )\n         self.assertTrue(data)\n         self.assertEqual(obj.file.data, data)\n \n@@ -219,14 +212,14 @@ def test_should_download_file_correctly(self):\n             view,\n             url=obj.absolute_url(),\n             params={\n-                \'version_id\': \'0\',\n-                \'do_not_stream\': \'1\',\n-                \'field\': \'file\',\n-                \'filename\': \'some_file_name.bin\',\n-            }\n+                "version_id": "0",\n+                "do_not_stream": "1",\n+                "field": "file",\n+                "filename": "some_file_name.bin",\n+            },\n         )\n         self.assertTrue(data)\n         self.assertEqual(obj.file.data, data)\n         self.assertTrue(\n-            \'some_file_name.bin\' in self.request.response.headers[\'content-disposition\']\n+            "some_file_name.bin" in self.request.response.headers["content-disposition"]\n         )\ndiff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py\nindex 1fc8bdc..438bc83 100644\n--- a/plone/app/versioningbehavior/tests/test_functional.py\n+++ b/plone/app/versioningbehavior/tests/test_functional.py\n@@ -1,9 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID\n from plone.testing.z2 import Browser\n \n@@ -12,31 +13,31 @@\n \n \n class FunctionalTestCase(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n         self.portal.invokeFactory(\n             type_name=TEST_CONTENT_TYPE_ID,\n-            id=\'obj1\',\n-            title=u\'Object 1 Title\',\n-            description=u\'Description of obect number 1\',\n-            text=u\'Object 1 some footext.\',\n+            id="obj1",\n+            title="Object 1 Title",\n+            description="Description of object number 1",\n+            text="Object 1 some footext.",\n         )\n-        self.obj1 = self.portal[\'obj1\']\n+        self.obj1 = self.portal["obj1"]\n         transaction.commit()\n \n     def test_content_core_view(self):\n-        self.browser.open(self.obj1.absolute_url() + \'/@@content-core\')\n+        self.browser.open(self.obj1.absolute_url() + "/@@content-core")\n \n         # Title and description are metadata, not in content-core.\n         self.assertFalse(self.obj1.title in self.browser.contents)\n@@ -44,8 +45,7 @@ def test_content_core_view(self):\n         self.assertIn(self.obj1.text, self.browser.contents)\n \n     def test_version_view(self):\n-        self.browser.open(\n-            self.obj1.absolute_url() + \'/@@version-view?version_id=0\')\n+        self.browser.open(self.obj1.absolute_url() + "/@@version-view?version_id=0")\n \n         # Title and description are metadata, not in content-core.\n         self.assertFalse(self.obj1.title in self.browser.contents)\n@@ -56,35 +56,35 @@ def test_versions_history_form_should_work_with_dexterity_content(self):\n         old_text = self.obj1.text\n         old_title = self.obj1.title\n \n-        new_text = \'Some other text for object 1.\'\n-        new_title = \'My special new title for object 1\'\n+        new_text = "Some other text for object 1."\n+        new_title = "My special new title for object 1"\n \n-        self.browser.open(self.obj1.absolute_url() + \'/edit\')\n-        self.browser.getControl(label=\'Title\').value = new_title\n-        self.browser.getControl(label=\'Text\').value = new_text\n-        self.browser.getControl(name=\'form.buttons.save\').click()\n+        self.browser.open(self.obj1.absolute_url() + "/edit")\n+        self.browser.getControl(label="Title").value = new_title\n+        self.browser.getControl(label="Text").value = new_text\n+        self.browser.getControl(name="form.buttons.save").click()\n \n-        self._assert_versions_history_form(\n-            0, self.obj1.getId(), old_title, old_text)\n-        self._assert_versions_history_form(\n-            1, self.obj1.getId(), new_title, new_text)\n+        self._assert_versions_history_form(0, self.obj1.getId(), old_title, old_text)\n+        self._assert_versions_history_form(1, self.obj1.getId(), new_title, new_text)\n \n     def _assert_versions_history_form(self, version_id, obj_id, title, text):\n         self.browser.open(\n-            \'%s/%s/versions_history_form?version_id=%s\'\n-            % (self.portal_url, obj_id, version_id))\n-        self.assertIn(\'Current revision\', self.browser.contents)\n+            "%s/%s/versions_history_form?version_id=%s"\n+            % (self.portal_url, obj_id, version_id)\n+        )\n+        self.assertIn("Current revision", self.browser.contents)\n \n         if version_id == 0:\n             self.assertIn(\n-                \'/%s/versions_history_form?version_id=%s\' % (obj_id, version_id),\n-                self.browser.contents)\n-        self.assertIn(\'Current revision\', self.browser.contents)\n-        self.assertIn(\'Revert to this revision\', self.browser.contents)\n+                f"/{obj_id}/versions_history_form?version_id={version_id}",\n+                self.browser.contents,\n+            )\n+        self.assertIn("Current revision", self.browser.contents)\n+        self.assertIn("Revert to this revision", self.browser.contents)\n+        self.assertIn("/%s/@@history?one" % obj_id, self.browser.contents)\n+        self.assertIn("Preview of Revision %s" % version_id, self.browser.contents)\n         self.assertIn(\n-            \'/%s/@@history?one\' % obj_id, self.browser.contents)\n-        self.assertIn(\'Preview of Revision %s\' % version_id,\n-                      self.browser.contents)\n-        self.assertIn(\'<h1 class="documentFirstHeading">%s</h1>\' % str(title),\n-                      self.browser.contents)\n+            \'<h1 class="documentFirstHeading">%s</h1>\' % str(title),\n+            self.browser.contents,\n+        )\n         self.assertIn(str(text), self.browser.contents)\ndiff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py\nindex fd78cf1..83d5bd5 100644\n--- a/plone/app/versioningbehavior/tests/test_modifiers.py\n+++ b/plone/app/versioningbehavior/tests/test_modifiers.py\n@@ -1,10 +1,14 @@\n-# -*- coding: utf-8 -*-\n+from io import StringIO\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs\n from plone.app.versioningbehavior.modifiers import SkipRelations\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING,\n+)\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.schema import portalTypeToSchemaName\n@@ -13,7 +17,6 @@\n from plone.namedfile import field\n from plone.namedfile.file import NamedBlobFile\n from plone.supermodel import model\n-from six import StringIO\n from z3c.relationfield.relation import RelationValue\n from z3c.relationfield.schema import RelationChoice\n from z3c.relationfield.schema import RelationList\n@@ -29,43 +32,38 @@\n \n \n class IBlobFile(model.Schema):\n-    file = field.NamedBlobFile(title=u\'File\')\n+    file = field.NamedBlobFile(title="File")\n \n \n alsoProvides(IBlobFile, IFormFieldProvider)\n \n \n class IRelationsType(Interface):\n-    single = RelationChoice(title=u\'Single\',\n-                            required=False, values=[])\n-    multiple = RelationList(title=u\'Multiple (Relations field)\',\n-                            required=False)\n+    single = RelationChoice(title="Single", required=False, values=[])\n+    multiple = RelationList(title="Multiple (Relations field)", required=False)\n \n \n class IRelationsBehavior(model.Schema):\n-    single = RelationChoice(title=u\'Single\',\n-                            required=False, values=[])\n-    multiple = RelationList(title=u\'Multiple (Relations field)\',\n-                            required=False)\n+    single = RelationChoice(title="Single", required=False, values=[])\n+    multiple = RelationList(title="Multiple (Relations field)", required=False)\n \n \n alsoProvides(IRelationsBehavior, IFormFieldProvider)\n \n \n class TestModifiers(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # we need to have the Manager role to be able to add things\n         # to the portal root\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testCloneNamedFileBlobsInSchema(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -76,21 +74,22 @@ def testCloneNamedFileBlobsInSchema(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n \n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n-            \'plone.dexterity.schema.generated.plone_0_BlobFile.file\'\n-            in attrs_dict)\n+            "plone.dexterity.schema.generated.plone_0_BlobFile.file" in attrs_dict\n+        )\n         blob = list(attrs_dict.values())[0]\n         self.assertTrue(IBlob.providedBy(blob))\n \n-        file2 = createContentInContainer(self.portal, \'BlobFile\')\n-        file2.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file2 = createContentInContainer(self.portal, "BlobFile")\n+        file2.file = NamedBlobFile("dummy test data", filename="test.txt")\n         modifier.reattachReferencedAttributes(file2, attrs_dict)\n         self.assertTrue(file2.file._blob is blob)\n \n@@ -114,31 +113,28 @@ def testCloneNamedFileBlobsInBehavior(self):\n         """\n         xmlconfig.xmlconfig(StringIO(configuration))\n \n-        file_fti = DexterityFTI(\n-            \'BlobFile\',\n-            behaviors=[IBlobFile.__identifier__])\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n-\n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        IBlobFile(file1).file = NamedBlobFile(\'dummy test data\',\n-                                              filename=u\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file_fti = DexterityFTI("BlobFile", behaviors=[IBlobFile.__identifier__])\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n+\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        IBlobFile(file1).file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n-            \'plone.app.versioningbehavior.tests.test_modifiers.IBlobFile.file\'\n-            in attrs_dict)\n+            "plone.app.versioningbehavior.tests.test_modifiers.IBlobFile.file"\n+            in attrs_dict\n+        )\n         blob = list(attrs_dict.values())[0]\n         self.assertTrue(IBlob.providedBy(blob))\n \n-        file2 = createContentInContainer(self.portal, \'BlobFile\')\n-        IBlobFile(file2).file = NamedBlobFile(\'dummy test data\',\n-                                              filename=u\'test.txt\')\n+        file2 = createContentInContainer(self.portal, "BlobFile")\n+        IBlobFile(file2).file = NamedBlobFile("dummy test data", filename="test.txt")\n         modifier.reattachReferencedAttributes(file2, attrs_dict)\n         self.assertTrue(IBlobFile(file2).file._blob is blob)\n \n     def testCloneNamedFileBlobsOnCloneModifiers(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -149,12 +145,13 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n \n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(file1.file._blob))\n@@ -164,7 +161,7 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):\n \n     def testCloneNamedFileBlobsWithNoFile(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -175,10 +172,11 @@ def testCloneNamedFileBlobsWithNoFile(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(attrs_dict == {})\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n@@ -190,11 +188,11 @@ def testCloneNamedFileBlobsWithNoFile(self):\n \n         # Previous version without file but working copy has a file.\n         self.portal.portal_repository.save(file1)\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         self.assertTrue(\n-            \'plone.dexterity.schema.generated.plone_0_BlobFile.file\'\n-            in attrs_dict)\n+            "plone.dexterity.schema.generated.plone_0_BlobFile.file" in attrs_dict\n+        )\n         blob = list(attrs_dict.values())[0]\n         self.assertTrue(IBlob.providedBy(blob))\n         on_clone_modifiers = modifier.getOnCloneModifiers(file1)\n@@ -205,19 +203,16 @@ def testCloneNamedFileBlobsWithNoFile(self):\n         self.assertTrue(empty2 == [])\n \n     def testRelations(self):\n-        rel_fti = DexterityFTI(\n-            \'RelationsType\',\n-            schema=IRelationsType.__identifier__\n-        )\n-        self.portal.portal_types._setObject(\'RelationsType\', rel_fti)\n+        rel_fti = DexterityFTI("RelationsType", schema=IRelationsType.__identifier__)\n+        self.portal.portal_types._setObject("RelationsType", rel_fti)\n \n         intids = getUtility(IIntIds)\n \n-        source = createContentInContainer(self.portal, \'RelationsType\')\n-        target = createContentInContainer(self.portal, \'RelationsType\')\n+        source = createContentInContainer(self.portal, "RelationsType")\n+        target = createContentInContainer(self.portal, "RelationsType")\n \n         # Test modifier when no relations are set\n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(None) is None)\n@@ -227,7 +222,7 @@ def testRelations(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n         self.assertTrue(repo_clone.single is source.single)\n         self.assertTrue(repo_clone.multiple is source.multiple)\n@@ -237,11 +232,12 @@ def testRelations(self):\n         source.multiple = [RelationValue(intids.getId(target))]\n \n         # Update relations\n-        from zope.lifecycleevent import ObjectModifiedEvent\n         from zope.event import notify\n+        from zope.lifecycleevent import ObjectModifiedEvent\n+\n         notify(ObjectModifiedEvent(source))\n \n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(source.single))\n@@ -251,14 +247,15 @@ def testRelations(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n         self.assertTrue(repo_clone.single is source.single)\n         self.assertTrue(repo_clone.multiple is source.multiple)\n \n     def register_RelationsType(self):\n-        xmlconfig.xmlconfig(StringIO(\n-            \'\'\'\n+        xmlconfig.xmlconfig(\n+            StringIO(\n+                """\n             <configure\n                  package="plone.behavior"\n                  xmlns="http://namespaces.zope.org/zope"\n@@ -273,23 +270,23 @@ def register_RelationsType(self):\n                     provides="plone.app.versioningbehavior.tests.test_modifiers.IRelationsBehavior"\n                     />\n             </configure>\n-            \'\'\'\n-        ))\n+            """\n+            )\n+        )\n         rel_fti = DexterityFTI(\n-            \'RelationsType\',\n-            behaviors=[IRelationsBehavior.__identifier__]\n+            "RelationsType", behaviors=[IRelationsBehavior.__identifier__]\n         )\n-        self.portal.portal_types._setObject(\'RelationsType\', rel_fti)\n+        self.portal.portal_types._setObject("RelationsType", rel_fti)\n \n     def testRelationsInBehaviors(self):\n         self.register_RelationsType()\n         intids = getUtility(IIntIds)\n \n-        source = createContentInContainer(self.portal, \'RelationsType\')\n-        target = createContentInContainer(self.portal, \'RelationsType\')\n+        source = createContentInContainer(self.portal, "RelationsType")\n+        target = createContentInContainer(self.portal, "RelationsType")\n \n         # Test modifier when no relations are set\n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(None) is None)\n@@ -299,25 +296,22 @@ def testRelationsInBehaviors(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n         self.assertTrue(repo_clone.single is None)\n         self.assertTrue(repo_clone.multiple is None)\n \n         # Add some relations\n-        IRelationsBehavior(source).single = RelationValue(\n-            intids.getId(target)\n-        )\n-        IRelationsBehavior(source).multiple = [\n-            RelationValue(intids.getId(target))\n-        ]\n+        IRelationsBehavior(source).single = RelationValue(intids.getId(target))\n+        IRelationsBehavior(source).multiple = [RelationValue(intids.getId(target))]\n \n         # Update relations\n-        from zope.lifecycleevent import ObjectModifiedEvent\n         from zope.event import notify\n+        from zope.lifecycleevent import ObjectModifiedEvent\n+\n         notify(ObjectModifiedEvent(source))\n \n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         on_clone_modifiers = modifier.getOnCloneModifiers(source)\n         pers_id, pers_load, empty1, empty2 = on_clone_modifiers\n         self.assertTrue(pers_id(IRelationsBehavior(source).single))\n@@ -327,48 +321,50 @@ def testRelationsInBehaviors(self):\n         self.assertTrue(empty1 == [])\n         self.assertTrue(empty2 == [])\n \n-        repo_clone = createContent(\'RelationsType\')\n+        repo_clone = createContent("RelationsType")\n         modifier.afterRetrieveModifier(source, repo_clone)\n-        self.assertTrue(IRelationsBehavior(repo_clone).single\n-                        is IRelationsBehavior(source).single)\n-        self.assertTrue(IRelationsBehavior(repo_clone).multiple\n-                        is IRelationsBehavior(source).multiple)\n+        self.assertTrue(\n+            IRelationsBehavior(repo_clone).single is IRelationsBehavior(source).single\n+        )\n+        self.assertTrue(\n+            IRelationsBehavior(repo_clone).multiple\n+            is IRelationsBehavior(source).multiple\n+        )\n \n     def testRelationsInBehaviorsForMigratedDXObjects(self):\n-        \'\'\' Do not break in the case of\n+        """Do not break in the case of\n         dexterity objects with relations migrated from something else\n         (e.g. Archetypes)\n-        \'\'\'\n+        """\n         self.register_RelationsType()\n-        source = createContentInContainer(self.portal, \'RelationsType\')\n+        source = createContentInContainer(self.portal, "RelationsType")\n \n         # Test modifier when no relations are set\n-        class Dummy(object):\n+        class Dummy:\n             pass\n \n         repo_clone = Dummy()\n \n-        modifier = SkipRelations(\'modifier\', \'Modifier\')\n+        modifier = SkipRelations("modifier", "Modifier")\n         modifier.afterRetrieveModifier(source, repo_clone)\n \n-        self.assertFalse(hasattr(repo_clone, \'single\'))\n-        self.assertFalse(hasattr(repo_clone, \'multiple\'))\n+        self.assertFalse(hasattr(repo_clone, "single"))\n+        self.assertFalse(hasattr(repo_clone, "multiple"))\n \n \n class TestModifiersFunctional(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         # we need to have the Manager role to be able to add things\n         # to the portal root\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testCloneNamedFileBlobsInUpdatedSchema(self):\n         file_fti = DexterityFTI(\n-            \'BlobFile\',\n+            "BlobFile",\n             model_source="""\n             <model xmlns="http://namespaces.plone.org/supermodel/schema">\n                 <schema>\n@@ -379,19 +375,19 @@ def testCloneNamedFileBlobsInUpdatedSchema(self):\n                     </field>\n                 </schema>\n             </model>\n-        """)\n-        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+        """,\n+        )\n+        self.portal.portal_types._setObject("BlobFile", file_fti)\n \n         # Sets _p_mtime on FTI used in schema suffix in p.dexterity >= 2.10.0\n         transaction.commit()\n \n-        file1 = createContentInContainer(self.portal, \'BlobFile\')\n-        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n-        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        file1 = createContentInContainer(self.portal, "BlobFile")\n+        file1.file = NamedBlobFile("dummy test data", filename="test.txt")\n+        modifier = CloneNamedFileBlobs("modifier", "Modifier")\n         attrs_dict = modifier.getReferencedAttributes(file1)\n         schema_name = portalTypeToSchemaName(\n-            \'BlobFile\',\n-            suffix=repr(self.portal.portal_types.BlobFile._p_mtime)\n+            "BlobFile", suffix=repr(self.portal.portal_types.BlobFile._p_mtime)\n         )\n         attr = "plone.dexterity.schema.generated." + schema_name + ".file"\n         self.assertTrue(attr in attrs_dict)\ndiff --git a/plone/app/versioningbehavior/tests/test_subscribers.py b/plone/app/versioningbehavior/tests/test_subscribers.py\nindex e150c74..ba44eb6 100644\n--- a/plone/app/versioningbehavior/tests/test_subscribers.py\n+++ b/plone/app/versioningbehavior/tests/test_subscribers.py\n@@ -1,8 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.versioningbehavior.testing import \\\n-    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING,\n+)\n from Products.CMFCore.utils import getToolByName\n from zope.event import notify\n from zope.lifecycleevent import ObjectModifiedEvent\n@@ -11,7 +11,6 @@\n \n \n class TestSubscribers(unittest.TestCase):\n-\n     layer = PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/versioningbehavior/tests/tests.py b/plone/app/versioningbehavior/tests/tests.py\nindex ca074f6..66404c2 100644\n--- a/plone/app/versioningbehavior/tests/tests.py\n+++ b/plone/app/versioningbehavior/tests/tests.py\n@@ -1,5 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+from plone.app.versioningbehavior.testing import (\n+    PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+)\n from plone.testing import layered\n \n import doctest\n@@ -8,10 +9,12 @@\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\'doctest_behavior.txt\'),\n-            layer=PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n-        ),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite("doctest_behavior.txt"),\n+                layer=PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/versioningbehavior/utils.py b/plone/app/versioningbehavior/utils.py\nindex 2af0423..6cfa786 100644\n--- a/plone/app/versioningbehavior/utils.py\n+++ b/plone/app/versioningbehavior/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.annotation.interfaces import IAnnotations\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n@@ -13,8 +12,7 @@ def get_change_note(request, default=None):\n     value = _marker\n     if IBrowserRequest.providedBy(request):\n         annotations = IAnnotations(request)\n-        value = annotations.get(\n-            \'plone.app.versioningbehavior-changeNote\', _marker)\n+        value = annotations.get("plone.app.versioningbehavior-changeNote", _marker)\n \n     if not value or value == _marker:\n         return default\ndiff --git a/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt b/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt\nindex 236d4ff..65a0976 100644\n--- a/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt\n+++ b/plone/app/versioningbehavior/www/CloneNamedFileBlobs.pt\n@@ -1,10 +1,16 @@\n-<p tal:replace="structure here/manage_page_header" omit-tag="">Header</p>\n-<p tal:replace="structure here/manage_tabs" omit-tag="">tabs</p>\n+<p tal:replace="structure here/manage_page_header"\n+   omit-tag=""\n+>Header</p>\n+<p tal:replace="structure here/manage_tabs"\n+   omit-tag=""\n+>tabs</p>\n \n \n <h2>Add Clone Blobs Modifier</h2>\n \n-<form action="manage_addCloneNamedFileBlobs" method="post">\n+<form action="manage_addCloneNamedFileBlobs"\n+      method="post"\n+>\n \n   <table border="0">\n \n@@ -13,7 +19,11 @@\n         Id\n       </th>\n       <td>\n-        <input type="text" name="id" value="" size="40"/>\n+        <input name="id"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n@@ -22,13 +32,20 @@\n         Title\n       </th>\n       <td>\n-        <input type="text" name="title" value="" size="40"/>\n+        <input name="title"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n     <tr>\n       <td colspan="2">\n-        <input type="submit" name="submit" value="Add"/>\n+        <input name="submit"\n+               type="submit"\n+               value="Add"\n+        />\n       </td>\n     </tr>\n \n@@ -36,4 +53,6 @@\n \n </form>\n \n-<p tal:replace="structure here/manage_page_footer" omit-tag="">Footer</p>\n+<p tal:replace="structure here/manage_page_footer"\n+   omit-tag=""\n+>Footer</p>\ndiff --git a/plone/app/versioningbehavior/www/SkipRelations.pt b/plone/app/versioningbehavior/www/SkipRelations.pt\nindex 081c6e3..0d7e421 100644\n--- a/plone/app/versioningbehavior/www/SkipRelations.pt\n+++ b/plone/app/versioningbehavior/www/SkipRelations.pt\n@@ -1,10 +1,16 @@\n-<p tal:replace="structure here/manage_page_header" omit-tag="">Header</p>\n-<p tal:replace="structure here/manage_tabs" omit-tag="">tabs</p>\n+<p tal:replace="structure here/manage_page_header"\n+   omit-tag=""\n+>Header</p>\n+<p tal:replace="structure here/manage_tabs"\n+   omit-tag=""\n+>tabs</p>\n \n \n <h2>Add Skip Relations</h2>\n \n-<form action="manage_addSkipRelations" method="post">\n+<form action="manage_addSkipRelations"\n+      method="post"\n+>\n \n   <table border="0">\n \n@@ -13,7 +19,11 @@\n         Id\n       </th>\n       <td>\n-        <input type="text" name="id" value="" size="40"/>\n+        <input name="id"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n@@ -22,13 +32,20 @@\n         Title\n       </th>\n       <td>\n-        <input type="text" name="title" value="" size="40"/>\n+        <input name="title"\n+               size="40"\n+               type="text"\n+               value=""\n+        />\n       </td>\n     </tr>\n \n     <tr>\n       <td colspan="2">\n-        <input type="submit" name="submit" value="Add"/>\n+        <input name="submit"\n+               type="submit"\n+               value="Add"\n+        />\n       </td>\n     </tr>\n \n@@ -36,4 +53,6 @@\n \n </form>\n \n-<p tal:replace="structure here/manage_page_footer" omit-tag="">Footer</p>\n+<p tal:replace="structure here/manage_page_footer"\n+   omit-tag=""\n+>Footer</p>\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 34577c8..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,7 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.py\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 23de453..3309060 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,64 +1,75 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'2.0.1.dev0\'\n+version = "2.0.1.dev0"\n \n tests_require = [\n-    \'plone.app.testing\',\n-    \'Products.CMFDiffTool\',\n-    \'Products.CMFEditions [test]\',\n-    \'Products.CMFPlone\',\n+    "plone.app.contenttypes[test]",\n+    "plone.app.robotframework",\n+    "plone.app.testing",\n+    "plone.protect",\n+    "plone.testing",\n+    "Products.CMFDiffTool",\n+    "Products.CMFEditions [test]",\n+    "zope.intid",\n ]\n \n setup(\n-    name=\'plone.app.versioningbehavior\',\n+    name="plone.app.versioningbehavior",\n     version=version,\n-    description=(\'Provides a behavior for using CMFEditions with \'\n-                 \'dexterity content types\'),\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(os.path.join(\'CHANGES.rst\')).read()),\n+    description=(\n+        "Provides a behavior for using CMFEditions with " "dexterity content types"\n+    ),\n+    long_description=(\n+        open("README.rst").read() + "\\n" + open(os.path.join("CHANGES.rst")).read()\n+    ),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope :: 5\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n-        \'Programming Language :: Python :: 3.10\',\n-        \'Programming Language :: Python :: 3.11\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone dexterity behavior versioning CMFEditions\',\n-    author=\'Jonas Baumann, 4teamwork GmbH\',\n-    author_email=\'mailto:dexterity-development@googlegroups.com\',\n-    url=\'http://plone.org/products/dexterity\',\n-    license=\'GPL version 2\',\n+    keywords="plone dexterity behavior versioning CMFEditions",\n+    author="Jonas Baumann, 4teamwork GmbH",\n+    author_email="mailto:dexterity-development@googlegroups.com",\n+    url="http://plone.org/products/dexterity",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'plone.app.dexterity[relations]\',\n-        \'plone.autoform\',\n-        \'plone.behavior>=1.1\',\n-        \'plone.dexterity\',\n-        \'plone.namedfile\',\n-        \'plone.rfc822\',\n-        \'Products.CMFEditions>2.2.9\',\n-        \'setuptools\',\n-        \'zope.container\',\n+        "plone.app.dexterity[relations]",\n+        "plone.autoform",\n+        "plone.base",\n+        "plone.behavior>=1.1",\n+        "plone.dexterity",\n+        "plone.namedfile",\n+        "plone.rfc822",\n+        "plone.supermodel",\n+        "Products.CMFEditions>2.2.9",\n+        "Products.GenericSetup",\n+        "setuptools",\n+        "z3c.form",\n+        "z3c.relationfield",\n+        "zope.annotation",\n+        "zope.container",\n     ],\n     tests_require=tests_require,\n     extras_require=dict(tests=tests_require),\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..e012931\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.versioningbehavior\n+extras =\n+    tests\n'

