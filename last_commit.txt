Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-24T01:09:23+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/70bd6c1b98bf1434e7d48bc5bb2050bd22393f58

Fix GenericSetup bundle compile error with missing resources
Don't fail, when combining bundles and the target resource files (``BUNLDE-compiled.[min.js|css]``) do not yet exist on the filesystem.
Fixes GenericSetup failing silently on import with when a to-be-compiled bundle which exists only as registry entry is processed in the ``combine-bundle`` step.

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/combine.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f4bc389..2c32bd2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -65,7 +65,11 @@ New features:
 
 Bug fixes:
 
-- Workaround a test problem with outdated Firefox 34 used at jenkins.plone.org. 
+- Don't fail, when combining bundles and the target resource files (``BUNLDE-compiled.[min.js|css]``) do not yet exist on the filesystem.
+  Fixes GenericSetup failing silently on import with when a to-be-compiled bundle which exists only as registry entry is processed in the ``combine-bundle`` step.
+  [thet]
+
+- Workaround a test problem with outdated Firefox 34 used at jenkins.plone.org.
   This Workaround can be removed once https://github.com/plone/jenkins.plone.org/issues/179 was solved.
   [jensens]
 
diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py
index 1a799f6..1ff66c5 100644
--- a/Products/CMFPlone/resources/browser/combine.py
+++ b/Products/CMFPlone/resources/browser/combine.py
@@ -1,19 +1,20 @@
-import re
-from zExceptions import NotFound
 from Acquisition import aq_base
 from datetime import datetime
 from plone.registry.interfaces import IRegistry
 from plone.resource.file import FilesystemFile
 from plone.resource.interfaces import IResourceDirectory
 from Products.CMFPlone.interfaces import IBundleRegistry
-from Products.CMFPlone.interfaces.resources import (
-    OVERRIDE_RESOURCE_DIRECTORY_NAME,
-)
+from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
 from StringIO import StringIO
+from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component import queryUtility
 
+import logging
+import re
+
 PRODUCTION_RESOURCE_DIRECTORY = "production"
+logger = logging.getLogger(__name__)
 
 
 def get_production_resource_directory():
@@ -39,7 +40,12 @@ def get_resource(context, path):
         if overrides.isFile(filepath):
             return overrides.readFile(filepath)
 
-    resource = context.unrestrictedTraverse(path)
+    try:
+        resource = context.unrestrictedTraverse(path)
+    except NotFound:
+        logger.warn(u"Could not find resource {0}. You may have to create it first.".format(path))  # noqa
+        return
+
     if isinstance(resource, FilesystemFile):
         (directory, sep, filename) = path.rpartition('/')
         return context.unrestrictedTraverse(directory).readFile(filename)
@@ -72,7 +78,10 @@ def write_js(context, folder, meta_bundle):
         IBundleRegistry, prefix="plone.bundles", check=False)
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.jscompilation:
-            resources.append(get_resource(context, bundle.jscompilation))
+            resource = get_resource(context, bundle.jscompilation)
+            if not resource:
+                continue
+            resources.append(resource)
 
     fi = StringIO()
     for script in resources:
@@ -89,6 +98,8 @@ def write_css(context, folder, meta_bundle):
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.csscompilation:
             css = get_resource(context, bundle.csscompilation)
+            if not css:
+                continue
             (path, sep, filename) = bundle.csscompilation.rpartition('/')
             # Process relative urls:
             # we prefix with current resource path any url not starting with


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-06-27T08:30:47+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/cdfbc12dbbc1cf4283a7e305de3c3c87fee9fd9c

Merge pull request #1647 from plone/thet-fixgsbundlecompile

Fix GenericSetup bundle compile error with missing resources

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/combine.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f4bc389..2c32bd2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -65,7 +65,11 @@ New features:
 
 Bug fixes:
 
-- Workaround a test problem with outdated Firefox 34 used at jenkins.plone.org. 
+- Don't fail, when combining bundles and the target resource files (``BUNLDE-compiled.[min.js|css]``) do not yet exist on the filesystem.
+  Fixes GenericSetup failing silently on import with when a to-be-compiled bundle which exists only as registry entry is processed in the ``combine-bundle`` step.
+  [thet]
+
+- Workaround a test problem with outdated Firefox 34 used at jenkins.plone.org.
   This Workaround can be removed once https://github.com/plone/jenkins.plone.org/issues/179 was solved.
   [jensens]
 
diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py
index 1a799f6..1ff66c5 100644
--- a/Products/CMFPlone/resources/browser/combine.py
+++ b/Products/CMFPlone/resources/browser/combine.py
@@ -1,19 +1,20 @@
-import re
-from zExceptions import NotFound
 from Acquisition import aq_base
 from datetime import datetime
 from plone.registry.interfaces import IRegistry
 from plone.resource.file import FilesystemFile
 from plone.resource.interfaces import IResourceDirectory
 from Products.CMFPlone.interfaces import IBundleRegistry
-from Products.CMFPlone.interfaces.resources import (
-    OVERRIDE_RESOURCE_DIRECTORY_NAME,
-)
+from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
 from StringIO import StringIO
+from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component import queryUtility
 
+import logging
+import re
+
 PRODUCTION_RESOURCE_DIRECTORY = "production"
+logger = logging.getLogger(__name__)
 
 
 def get_production_resource_directory():
@@ -39,7 +40,12 @@ def get_resource(context, path):
         if overrides.isFile(filepath):
             return overrides.readFile(filepath)
 
-    resource = context.unrestrictedTraverse(path)
+    try:
+        resource = context.unrestrictedTraverse(path)
+    except NotFound:
+        logger.warn(u"Could not find resource {0}. You may have to create it first.".format(path))  # noqa
+        return
+
     if isinstance(resource, FilesystemFile):
         (directory, sep, filename) = path.rpartition('/')
         return context.unrestrictedTraverse(directory).readFile(filename)
@@ -72,7 +78,10 @@ def write_js(context, folder, meta_bundle):
         IBundleRegistry, prefix="plone.bundles", check=False)
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.jscompilation:
-            resources.append(get_resource(context, bundle.jscompilation))
+            resource = get_resource(context, bundle.jscompilation)
+            if not resource:
+                continue
+            resources.append(resource)
 
     fi = StringIO()
     for script in resources:
@@ -89,6 +98,8 @@ def write_css(context, folder, meta_bundle):
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.csscompilation:
             css = get_resource(context, bundle.csscompilation)
+            if not css:
+                continue
             (path, sep, filename) = bundle.csscompilation.rpartition('/')
             # Process relative urls:
             # we prefix with current resource path any url not starting with


