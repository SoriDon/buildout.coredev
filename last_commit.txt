Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T16:08:54+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/58aa39e1e10d33a73185d396162d5a8a8b6b3243

Configuring with plone/meta

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A .meta.toml
A lint-requirements.txt
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 0000000..a2139a8\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..91690d5\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "78307cdf"\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..d2b64ff\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,10 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+check-manifest==0.49\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pyroma==4.1\n+pyupgrade==3.3.1\n+z3c.dependencychecker==2.10\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0f96c85 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,24 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 9d91dba..8849fbc 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,17 +1,23 @@\n-[build_sphinx]\n-source-dir = docs/source\n-build-dir  = docs\n-all_files  = 1\n-\n-[upload_sphinx]\n-upload-dir = docs/html\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c4810c9\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = git ls-files "*.py"\n+text_files = git ls-files "*.rst" "*.md"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n+    sh -c \'{[testenv]py_files} | xargs isort\'\n+    sh -c \'{[testenv]py_files} | xargs black\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    tomli  # needed for codespell to read pyproject.toml\n+    check-manifest\n+    pyroma\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8\'\n+    sh -c \'{[testenv]py_files} | xargs codespell\'\n+    sh -c \'{[testenv]text_files} | xargs codespell\'\n+    check-manifest\n+    pyroma -n 10 .\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+deps =\n+    z3c.dependencychecker\n+    -c lint-requirements.txt\n+commands =\n+    dependencychecker\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T16:08:54+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/c800abb5e5b3fbda6bb70dfc0c9b0565890661a0

feat: flake8 fixes

Files changed:
M docs/conf.py
M plone/app/caching/operations/etags.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 4683c7e..9a199de 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -10,10 +10,6 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import os\n-import sys\n-\n-\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n@@ -172,11 +168,11 @@\n \n latex_elements = {\n     # The paper size (\'letterpaper\' or \'a4paper\').\n-    #\'papersize\': \'letterpaper\',\n+    # \'papersize\': \'letterpaper\',\n     # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-    #\'pointsize\': \'10pt\',\n+    # \'pointsize\': \'10pt\',\n     # Additional stuff for the LaTeX preamble.\n-    #\'preamble\': \'\',\n+    # \'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex cc504e2..8187172 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -3,17 +3,17 @@\n from plone.app.caching.interfaces import IETagValue\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n+from plone.base.utils import safe_hasattr\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n-from plone.base.utils import safe_hasattr\n+from Products.CMFPlone.resources.utils import get_override_directory\n+from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n from zope.interface import implementer\n from zope.interface import Interface\n-from Products.CMFPlone.resources.utils import get_override_directory\n-from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n \n import random\n import time\ndiff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py\nindex 4546a5c..f474824 100644\n--- a/plone/app/caching/testing.py\n+++ b/plone/app/caching/testing.py\n@@ -6,7 +6,6 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.cachepurging.interfaces import IPurger\n from plone.protect.authenticator import _getKeyring\n-from plone.testing import z2\n from zope.component import getUtility\n from zope.component import provideUtility\n from zope.interface import implementer\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 4eeef45..ca724c3 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -106,9 +106,6 @@ def test_composite_viewsxx(self):\n         # - set skin?  Maybe\n         # - leave status unlocked\n         #\n-\n-        import transaction\n-\n         transaction.commit()\n \n         # Request the authenticated folder\n@@ -290,8 +287,6 @@ def test_composite_viewsxx(self):\n         )\n         self.portal["f1"]["d1"].reindexObject()\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the anonymous page again -- to test expiration of 304 and\n@@ -319,8 +314,6 @@ def test_content_feeds(self):\n         self.syndication.editProperties(isAllowed=True)\n         self.syndication.enableSyndication(self.portal)\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the rss feed\n@@ -427,8 +420,6 @@ def test_content_files(self):\n         self.portal["f1"]["i1"].image = test_image()\n         self.portal["f1"]["i1"].reindexObject()\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the image with Manager role\n@@ -477,8 +468,6 @@ def test_content_files(self):\n         # Publish the folder\n         self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the image\n@@ -534,8 +523,6 @@ def test_resources(self):\n         # This is a clone of the same test for \'without-caching-proxy\'\n         # Can we just call that test from this context?\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request a skin image\n@@ -581,8 +568,6 @@ def test_resources(self):\n             "bigfile", file=BytesIO(s), content_type="application/octet-stream"\n         )\n \n-        import transaction\n-\n         transaction.commit()\n \n         browser = Browser(self.app)\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 256b7ab..4ce78dd 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -13,7 +13,6 @@\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n@@ -22,7 +21,6 @@\n import dateutil.parser\n import dateutil.tz\n import io\n-import os\n import transaction\n import unittest\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T16:08:54+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/858a7036d3c3ab9e30fff4516f18943bd88e4205

fix: codespell typos

Files changed:
M CHANGES.rst
M docs/README.rst
M docs/composite-views.rst
M plone/app/caching/interfaces.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/setuphandlers.py
M plone/app/caching/tests/test_operation_utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 32ccd40..32ac7bf 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -245,7 +245,7 @@ New features:\n   [jensens] (66-1)\n - Support for *plone.restapi*.\n   Define `cache:ruleset` assignments for anonymous accessible endpoints.\n-  Attention: Relies on *Vary* header unless *plone.restapi* gives up content negotation.\n+  Attention: Relies on *Vary* header unless *plone.restapi* gives up content negotiation.\n   Latter may conflict with edge side cache not supporting the Vary header.\n   [jensens] (66-2)\n \n@@ -317,7 +317,7 @@ Bug fixes:\n Bug fixes:\n \n \n-- fix typo "Purging is" and not "Purging ist" [vincentfretin] (#47)\n+- fix typo [vincentfretin] (#47)\n - Fix controlpanel for Python 3\n   [petschki] (#48)\n \ndiff --git a/docs/README.rst b/docs/README.rst\nindex 361804a..cec3091 100644\n--- a/docs/README.rst\n+++ b/docs/README.rst\n@@ -14,7 +14,7 @@ Introduction\n Installation\n ============\n \n-From Plone 4.1 onwards, ``plone.app.caching`` is shipped as a dependancy of Plone. It is available from the Control Panel, but not enabled by default. You can enable it from the "add-ons" menu option.\n+From Plone 4.1 onwards, ``plone.app.caching`` is shipped as a dependency of Plone. It is available from the Control Panel, but not enabled by default. You can enable it from the "add-ons" menu option.\n \n Installation on Plone 4.0\n =========================\ndiff --git a/docs/composite-views.rst b/docs/composite-views.rst\nindex 1035502..e72a537 100644\n--- a/docs/composite-views.rst\n+++ b/docs/composite-views.rst\n@@ -4,7 +4,7 @@ Composite views\n A ``composite view`` is just a general term for most page views you see when you visit a Plone site.\n It includes all content item views, content folder views, and many template views.\n For our purposes, the distinguishing characteristic of composite views is the difficulty inherent in keeping track of all changes that might affect the final composited view.\n-Because of the difficulty of dependancy tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n+Because of the difficulty of dependency tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n \n However, most of the inline resources linked to from the composite view (css, javascript, images, etc.) can be cached very well in proxy so the overall speed of most composite views will always be better with a caching proxy in front despite the page itself not being cached.\n \n@@ -15,5 +15,5 @@ value set to some tolerable value but first make sure you understand the\n issues regarding "split view" caching (see below).\n \n A way to speedup a site with lots of composite view is to use "Terse" caching.\n-It caches a page for just a small time (be default 10s in broser and 60s in the caching proxy).\n+It caches a page for just a small time (be default 10s in browser and 60s in the caching proxy).\n Thus the content is almost up to date, but on high load visitors are getting pages served from the cache.\ndiff --git a/plone/app/caching/interfaces.py b/plone/app/caching/interfaces.py\nindex 96aab91..d503418 100644\n--- a/plone/app/caching/interfaces.py\n+++ b/plone/app/caching/interfaces.py\n@@ -76,7 +76,7 @@ class IETagValue(Interface):\n     """ETag component builder\n \n     Register a named multi-adapter from ``(published, request)`` to this\n-    interface to provide the values for ETag compnents. Various caching\n+    interface to provide the values for ETag components. Various caching\n     operations will look up such adapters to compose an ETag value. The\n     adapter name is used in options configuring those components.\n     """\ndiff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex 1c25c41..c5a6091 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -393,7 +393,7 @@ def isModified(request, etag=None, lastModified=None):\n     # served will return an If-None-Match header, but the site will not be\n     # configured for etags. In this case, force a refresh to load the\n     # latest headers. I interpret this as the spec rule that the\n-    # etags do NOT match, and therefor we must not return a 304.\n+    # etags do NOT match, and therefore we must not return a 304.\n     if ifNoneMatch and etag is None:\n         return True\n \n@@ -821,7 +821,7 @@ def fetchFromRAMCache(\n \n     ``lastModified`` is the last modified date for the content, which can\n     potentially be used instead of etag if sufficient to ensure freshness.\n-    Perhaps a rare occurance but it\'s here in case someone needs it.\n+    Perhaps a rare occurrence but it\'s here in case someone needs it.\n     Do not use this to cache binary responses (like images and file downloads)\n     as Zope already caches most of the payload of these.\n \ndiff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 850aeb0..40d8154 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -153,7 +153,7 @@ def getAbsolutePaths(self):\n             return\n \n         for _name, pathProvider in getAdapters((root,), IPurgePaths):\n-            # add absoute paths, which are not\n+            # add absolute paths, which are not\n             absolutePaths = pathProvider.getAbsolutePaths()\n             if absolutePaths:\n                 yield from absolutePaths\ndiff --git a/plone/app/caching/setuphandlers.py b/plone/app/caching/setuphandlers.py\nindex 00efe9f..0ef14b5 100644\n--- a/plone/app/caching/setuphandlers.py\n+++ b/plone/app/caching/setuphandlers.py\n@@ -2,7 +2,7 @@\n \n \n def enableExplicitMode():\n-    """ZCML startup hook to put the ruleset registry into explict mode.\n+    """ZCML startup hook to put the ruleset registry into explicit mode.\n     This means we require people to declare ruleset types before using them.\n     """\n     from z3c.caching.registry import getGlobalRulesetRegistry\ndiff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py\nindex 9e2a657..ff5ce36 100644\n--- a/plone/app/caching/tests/test_operation_utils.py\n+++ b/plone/app/caching/tests/test_operation_utils.py\n@@ -720,7 +720,7 @@ def test_isModified_inm_match_update(self):\n         headers need to be updated with the new config. Additionally,\n         last modified may be attached to the request header, but\n         If-None-Match always takes precedence over these headers and\n-        therefor they should be ignored.\n+        therefore they should be ignored.\n         """\n         from plone.app.caching.operations.utils import isModified\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T20:28:43+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/40bd1a3a29004a80d70321d2b504aa1e33c7e9b8

chore: configure z3c.dependencychecker

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex 91690d5..f584127 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,10 @@\n [meta]\n template = "default"\n commit-id = "78307cdf"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'OFS\', \'Products.Five\', \'Products.PageTemplates\', \'ZPublisher\']",\n+    "python-dateutil = [\'dateutil\']",\n+    ]\n+ignores = "[\'zope.dublincore\']"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0f96c85..9a3db87 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -41,3 +41,8 @@ profile = "plone"\n \n [tool.black]\n target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+ignore-packages = [\'zope.dublincore\']\n+Zope = [\'OFS\', \'Products.Five\', \'Products.PageTemplates\', \'ZPublisher\']\n+python-dateutil = [\'dateutil\']\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T20:29:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/1bb81ac33a1ebf4994b16d36484ebf02a8687eae

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex cd2d058..262d39a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,17 +35,52 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "AccessControl",\n+        "Acquisition",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.CMFPlone",\n+        "Products.GenericSetup",\n+        "Products.statusmessages",\n         "setuptools",\n         "python-dateutil",\n+        "plone.app.registry",\n+        "plone.base",\n         "plone.caching",\n+        "plone.dexterity",\n         "plone.cachepurging",\n+        "plone.memoize",\n+        "plone.namedfile",\n+        "plone.protect",\n+        "plone.registry",\n+        "plone.transformchain",\n+        "plone.z3cform",\n+        "z3c.caching",\n+        "z3c.form",\n         "z3c.zcmlhook",\n-        "Products.CMFPlone",\n+        "zope.annotation",\n+        "zope.browserresource",\n+        "zope.component",\n+        "zope.event",\n+        "zope.globalrequest",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.pagetemplate",\n+        "zope.publisher",\n+        "zope.ramcache",\n+        "zope.schema",\n     ],\n     extras_require={\n         "test": [\n+            "persistent",\n             "plone.app.contenttypes[test]",\n             "plone.app.testing",\n+            "plone.app.textfield",\n+            "plone.behavior",\n+            "plone.testing",\n+            "pytz",\n+            "transaction",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T20:29:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/521a9c97d661c1911d0bb5882ca3fdfb97dfc451

chore(gha): delete superseded workflows

Files changed:
D .github/workflows/black.yml
D .github/workflows/pyroma.yml

b"diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\ndeleted file mode 100644\nindex 61a8597..0000000\n--- a/.github/workflows/black.yml\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-name: Black\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install black\n-      - name: install black\n-        run: pip install black\n-\n-      # run black\n-      - name: run black\n-        run: black plone/ --check --diff\ndiff --git a/.github/workflows/pyroma.yml b/.github/workflows/pyroma.yml\ndeleted file mode 100644\nindex bbad3c2..0000000\n--- a/.github/workflows/pyroma.yml\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-name: Pyroma\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install pyroma\n-      - name: install pyroma\n-        run: pip install pyroma\n-\n-      # run pyroma\n-      - name: run pyroma\n-        run: pyroma -n 10 -d .\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T20:29:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/6f19d66508b1a191812e20eb8e2f39dbb4e1c7c7

feat: configure zpretty

Files changed:
M .meta.toml
M lint-requirements.txt
M tox.ini
D .github/workflows/zpretty.yml

b'diff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\ndeleted file mode 100644\nindex 7370f55..0000000\n--- a/.github/workflows/zpretty.yml\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-name: zpretty\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install zpretty\n-      - name: install zpretty\n-        run: pip install zpretty\n-\n-      - name: run zpretty for zcml\n-        run: find plone -name \'*.zcml\' | xargs zpretty -z --check\n-\n-      - name: run zpretty for xml\n-        run: find plone -name \'*.xml\' | xargs zpretty -x --check\ndiff --git a/.meta.toml b/.meta.toml\nindex f584127..6323538 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,7 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "78307cdf"\n+commit-id = "0e4e67b6"\n \n [dependencies]\n mappings = [\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nindex d2b64ff..4f29e10 100644\n--- a/lint-requirements.txt\n+++ b/lint-requirements.txt\n@@ -8,3 +8,4 @@ isort==5.11.4\n pyroma==4.1\n pyupgrade==3.3.1\n z3c.dependencychecker==2.10\n+zpretty==2.4.1\ndiff --git a/tox.ini b/tox.ini\nindex c4810c9..5cad975 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -8,6 +8,8 @@ envlist =\n [testenv]\n py_files = git ls-files "*.py"\n text_files = git ls-files "*.rst" "*.md"\n+xml_files = git ls-files "*.xml"\n+zcml_files = git ls-files "*.zcml"\n allowlist_externals =\n     sh\n \n@@ -18,11 +20,14 @@ deps =\n     pyupgrade\n     isort\n     black\n+    zpretty\n     -c lint-requirements.txt\n commands =\n     sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n     sh -c \'{[testenv]py_files} | xargs isort\'\n     sh -c \'{[testenv]py_files} | xargs black\'\n+    sh -c \'{[testenv]xml_files} | xargs zpretty -x -i\'\n+    sh -c \'{[testenv]zcml_files} | xargs zpretty -z -i\'\n \n [testenv:lint]\n description = run linters that will help improve the code style\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-05T20:29:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/be3d8b1c031ca2d5fd0e082be67e7f65487ebe72

Add news entry

Files changed:
A news/1.bugfix

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..2229bed\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Declare dependencies.\n+[gforcada]\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-08T21:25:56+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/56685dd0832268d174fbe8a407dd1361a8728290

Use a global workflow

Files changed:
D .github/workflows/linting.yml

b'diff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\ndeleted file mode 100644\nindex a2139a8..0000000\n--- a/.github/workflows/linting.yml\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-# Generated from:\n-# https://github.com/plone/meta/tree/master/config/default\n-name: Linting\n-on:\n-  push:\n-    branches: [master]\n-  pull_request:\n-    branches: [master]\n-  workflow_dispatch:\n-\n-jobs:\n-  test:\n-    name: Lint code\n-    runs-on: ${{ matrix.os }}\n-    strategy:\n-      matrix:\n-        python-version: ["3.8"]\n-        os: ["ubuntu-22.04"]\n-    steps:\n-      - uses: actions/checkout@v3\n-      - name: Set up Python\n-        uses: actions/setup-python@v4\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-      - name: Cache packages\n-        uses: actions/cache@v3\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n-            ${{ runner.os }}-pip-\n-      - name: Install dependencies\n-        run: python -m pip install tox\n-      - name: Run formatters\n-        run: tox -e format\n-      # linters\n-      - name: QA\n-        run: tox -e lint\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-09T15:24:18+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/62ca0aeb11cf377bf6ce35a76c856e741cda5bc9

Put back sphinx config in setup.cfg.

Used in the Plone 5.2 docs as https://docs.plone.org/external/plone.app.caching/docs/index.html.
We will need a way to keep some parts of setup.cfg when updating with plone/meta, instead of completely overriding it.

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 8849fbc..28522d5 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,3 +1,11 @@\n+[build_sphinx]\n+source-dir = docs/source\n+build-dir  = docs\n+all_files  = 1\n+\n+[upload_sphinx]\n+upload-dir = docs/html\n+\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-09T16:23:50+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/2e5ff797c10d207f8fa66e81797daa6c5943589a

Merge pull request #113 from plone/config-with-default-template-858a7036

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A lint-requirements.txt
A news/1.bugfix
A tox.ini
M CHANGES.rst
M docs/README.rst
M docs/composite-views.rst
M docs/conf.py
M plone/app/caching/interfaces.py
M plone/app/caching/operations/etags.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/setuphandlers.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M pyproject.toml
M setup.cfg
M setup.py
D .github/workflows/black.yml
D .github/workflows/pyroma.yml
D .github/workflows/zpretty.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\ndeleted file mode 100644\nindex 61a8597..0000000\n--- a/.github/workflows/black.yml\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-name: Black\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install black\n-      - name: install black\n-        run: pip install black\n-\n-      # run black\n-      - name: run black\n-        run: black plone/ --check --diff\ndiff --git a/.github/workflows/pyroma.yml b/.github/workflows/pyroma.yml\ndeleted file mode 100644\nindex bbad3c2..0000000\n--- a/.github/workflows/pyroma.yml\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-name: Pyroma\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install pyroma\n-      - name: install pyroma\n-        run: pip install pyroma\n-\n-      # run pyroma\n-      - name: run pyroma\n-        run: pyroma -n 10 -d .\ndiff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\ndeleted file mode 100644\nindex 7370f55..0000000\n--- a/.github/workflows/zpretty.yml\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-name: zpretty\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.8]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v2\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v1\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-\n-      # python cache\n-      - uses: actions/cache@v1\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-          restore-keys: |\n-            ${{ runner.os }}-pip-\n-\n-      # install zpretty\n-      - name: install zpretty\n-        run: pip install zpretty\n-\n-      - name: run zpretty for zcml\n-        run: find plone -name \'*.zcml\' | xargs zpretty -z --check\n-\n-      - name: run zpretty for xml\n-        run: find plone -name \'*.xml\' | xargs zpretty -x --check\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..6323538\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "0e4e67b6"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'OFS\', \'Products.Five\', \'Products.PageTemplates\', \'ZPublisher\']",\n+    "python-dateutil = [\'dateutil\']",\n+    ]\n+ignores = "[\'zope.dublincore\']"\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 32ccd40..32ac7bf 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -245,7 +245,7 @@ New features:\n   [jensens] (66-1)\n - Support for *plone.restapi*.\n   Define `cache:ruleset` assignments for anonymous accessible endpoints.\n-  Attention: Relies on *Vary* header unless *plone.restapi* gives up content negotation.\n+  Attention: Relies on *Vary* header unless *plone.restapi* gives up content negotiation.\n   Latter may conflict with edge side cache not supporting the Vary header.\n   [jensens] (66-2)\n \n@@ -317,7 +317,7 @@ Bug fixes:\n Bug fixes:\n \n \n-- fix typo "Purging is" and not "Purging ist" [vincentfretin] (#47)\n+- fix typo [vincentfretin] (#47)\n - Fix controlpanel for Python 3\n   [petschki] (#48)\n \ndiff --git a/docs/README.rst b/docs/README.rst\nindex 361804a..cec3091 100644\n--- a/docs/README.rst\n+++ b/docs/README.rst\n@@ -14,7 +14,7 @@ Introduction\n Installation\n ============\n \n-From Plone 4.1 onwards, ``plone.app.caching`` is shipped as a dependancy of Plone. It is available from the Control Panel, but not enabled by default. You can enable it from the "add-ons" menu option.\n+From Plone 4.1 onwards, ``plone.app.caching`` is shipped as a dependency of Plone. It is available from the Control Panel, but not enabled by default. You can enable it from the "add-ons" menu option.\n \n Installation on Plone 4.0\n =========================\ndiff --git a/docs/composite-views.rst b/docs/composite-views.rst\nindex 1035502..e72a537 100644\n--- a/docs/composite-views.rst\n+++ b/docs/composite-views.rst\n@@ -4,7 +4,7 @@ Composite views\n A ``composite view`` is just a general term for most page views you see when you visit a Plone site.\n It includes all content item views, content folder views, and many template views.\n For our purposes, the distinguishing characteristic of composite views is the difficulty inherent in keeping track of all changes that might affect the final composited view.\n-Because of the difficulty of dependancy tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n+Because of the difficulty of dependency tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n \n However, most of the inline resources linked to from the composite view (css, javascript, images, etc.) can be cached very well in proxy so the overall speed of most composite views will always be better with a caching proxy in front despite the page itself not being cached.\n \n@@ -15,5 +15,5 @@ value set to some tolerable value but first make sure you understand the\n issues regarding "split view" caching (see below).\n \n A way to speedup a site with lots of composite view is to use "Terse" caching.\n-It caches a page for just a small time (be default 10s in broser and 60s in the caching proxy).\n+It caches a page for just a small time (be default 10s in browser and 60s in the caching proxy).\n Thus the content is almost up to date, but on high load visitors are getting pages served from the cache.\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 4683c7e..9a199de 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -10,10 +10,6 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import os\n-import sys\n-\n-\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n@@ -172,11 +168,11 @@\n \n latex_elements = {\n     # The paper size (\'letterpaper\' or \'a4paper\').\n-    #\'papersize\': \'letterpaper\',\n+    # \'papersize\': \'letterpaper\',\n     # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-    #\'pointsize\': \'10pt\',\n+    # \'pointsize\': \'10pt\',\n     # Additional stuff for the LaTeX preamble.\n-    #\'preamble\': \'\',\n+    # \'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..4f29e10\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,11 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+check-manifest==0.49\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pyroma==4.1\n+pyupgrade==3.3.1\n+z3c.dependencychecker==2.10\n+zpretty==2.4.1\ndiff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..2229bed\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Declare dependencies.\n+[gforcada]\ndiff --git a/plone/app/caching/interfaces.py b/plone/app/caching/interfaces.py\nindex 96aab91..d503418 100644\n--- a/plone/app/caching/interfaces.py\n+++ b/plone/app/caching/interfaces.py\n@@ -76,7 +76,7 @@ class IETagValue(Interface):\n     """ETag component builder\n \n     Register a named multi-adapter from ``(published, request)`` to this\n-    interface to provide the values for ETag compnents. Various caching\n+    interface to provide the values for ETag components. Various caching\n     operations will look up such adapters to compose an ETag value. The\n     adapter name is used in options configuring those components.\n     """\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex cc504e2..8187172 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -3,17 +3,17 @@\n from plone.app.caching.interfaces import IETagValue\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n+from plone.base.utils import safe_hasattr\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n-from plone.base.utils import safe_hasattr\n+from Products.CMFPlone.resources.utils import get_override_directory\n+from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n from zope.interface import implementer\n from zope.interface import Interface\n-from Products.CMFPlone.resources.utils import get_override_directory\n-from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n \n import random\n import time\ndiff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex 1c25c41..c5a6091 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -393,7 +393,7 @@ def isModified(request, etag=None, lastModified=None):\n     # served will return an If-None-Match header, but the site will not be\n     # configured for etags. In this case, force a refresh to load the\n     # latest headers. I interpret this as the spec rule that the\n-    # etags do NOT match, and therefor we must not return a 304.\n+    # etags do NOT match, and therefore we must not return a 304.\n     if ifNoneMatch and etag is None:\n         return True\n \n@@ -821,7 +821,7 @@ def fetchFromRAMCache(\n \n     ``lastModified`` is the last modified date for the content, which can\n     potentially be used instead of etag if sufficient to ensure freshness.\n-    Perhaps a rare occurance but it\'s here in case someone needs it.\n+    Perhaps a rare occurrence but it\'s here in case someone needs it.\n     Do not use this to cache binary responses (like images and file downloads)\n     as Zope already caches most of the payload of these.\n \ndiff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 850aeb0..40d8154 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -153,7 +153,7 @@ def getAbsolutePaths(self):\n             return\n \n         for _name, pathProvider in getAdapters((root,), IPurgePaths):\n-            # add absoute paths, which are not\n+            # add absolute paths, which are not\n             absolutePaths = pathProvider.getAbsolutePaths()\n             if absolutePaths:\n                 yield from absolutePaths\ndiff --git a/plone/app/caching/setuphandlers.py b/plone/app/caching/setuphandlers.py\nindex 00efe9f..0ef14b5 100644\n--- a/plone/app/caching/setuphandlers.py\n+++ b/plone/app/caching/setuphandlers.py\n@@ -2,7 +2,7 @@\n \n \n def enableExplicitMode():\n-    """ZCML startup hook to put the ruleset registry into explict mode.\n+    """ZCML startup hook to put the ruleset registry into explicit mode.\n     This means we require people to declare ruleset types before using them.\n     """\n     from z3c.caching.registry import getGlobalRulesetRegistry\ndiff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py\nindex 4546a5c..f474824 100644\n--- a/plone/app/caching/testing.py\n+++ b/plone/app/caching/testing.py\n@@ -6,7 +6,6 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.cachepurging.interfaces import IPurger\n from plone.protect.authenticator import _getKeyring\n-from plone.testing import z2\n from zope.component import getUtility\n from zope.component import provideUtility\n from zope.interface import implementer\ndiff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py\nindex 9e2a657..ff5ce36 100644\n--- a/plone/app/caching/tests/test_operation_utils.py\n+++ b/plone/app/caching/tests/test_operation_utils.py\n@@ -720,7 +720,7 @@ def test_isModified_inm_match_update(self):\n         headers need to be updated with the new config. Additionally,\n         last modified may be attached to the request header, but\n         If-None-Match always takes precedence over these headers and\n-        therefor they should be ignored.\n+        therefore they should be ignored.\n         """\n         from plone.app.caching.operations.utils import isModified\n \ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 4eeef45..ca724c3 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -106,9 +106,6 @@ def test_composite_viewsxx(self):\n         # - set skin?  Maybe\n         # - leave status unlocked\n         #\n-\n-        import transaction\n-\n         transaction.commit()\n \n         # Request the authenticated folder\n@@ -290,8 +287,6 @@ def test_composite_viewsxx(self):\n         )\n         self.portal["f1"]["d1"].reindexObject()\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the anonymous page again -- to test expiration of 304 and\n@@ -319,8 +314,6 @@ def test_content_feeds(self):\n         self.syndication.editProperties(isAllowed=True)\n         self.syndication.enableSyndication(self.portal)\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the rss feed\n@@ -427,8 +420,6 @@ def test_content_files(self):\n         self.portal["f1"]["i1"].image = test_image()\n         self.portal["f1"]["i1"].reindexObject()\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the image with Manager role\n@@ -477,8 +468,6 @@ def test_content_files(self):\n         # Publish the folder\n         self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request the image\n@@ -534,8 +523,6 @@ def test_resources(self):\n         # This is a clone of the same test for \'without-caching-proxy\'\n         # Can we just call that test from this context?\n \n-        import transaction\n-\n         transaction.commit()\n \n         # Request a skin image\n@@ -581,8 +568,6 @@ def test_resources(self):\n             "bigfile", file=BytesIO(s), content_type="application/octet-stream"\n         )\n \n-        import transaction\n-\n         transaction.commit()\n \n         browser = Browser(self.app)\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 256b7ab..4ce78dd 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -13,7 +13,6 @@\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n@@ -22,7 +21,6 @@\n import dateutil.parser\n import dateutil.tz\n import io\n-import os\n import transaction\n import unittest\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9a3db87 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,29 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+ignore-packages = [\'zope.dublincore\']\n+Zope = [\'OFS\', \'Products.Five\', \'Products.PageTemplates\', \'ZPublisher\']\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 9d91dba..28522d5 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -6,12 +6,26 @@ all_files  = 1\n [upload_sphinx]\n upload-dir = docs/html\n \n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/setup.py b/setup.py\nindex cd2d058..262d39a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,17 +35,52 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "AccessControl",\n+        "Acquisition",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.CMFPlone",\n+        "Products.GenericSetup",\n+        "Products.statusmessages",\n         "setuptools",\n         "python-dateutil",\n+        "plone.app.registry",\n+        "plone.base",\n         "plone.caching",\n+        "plone.dexterity",\n         "plone.cachepurging",\n+        "plone.memoize",\n+        "plone.namedfile",\n+        "plone.protect",\n+        "plone.registry",\n+        "plone.transformchain",\n+        "plone.z3cform",\n+        "z3c.caching",\n+        "z3c.form",\n         "z3c.zcmlhook",\n-        "Products.CMFPlone",\n+        "zope.annotation",\n+        "zope.browserresource",\n+        "zope.component",\n+        "zope.event",\n+        "zope.globalrequest",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.pagetemplate",\n+        "zope.publisher",\n+        "zope.ramcache",\n+        "zope.schema",\n     ],\n     extras_require={\n         "test": [\n+            "persistent",\n             "plone.app.contenttypes[test]",\n             "plone.app.testing",\n+            "plone.app.textfield",\n+            "plone.behavior",\n+            "plone.testing",\n+            "pytz",\n+            "transaction",\n         ]\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..5cad975\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,55 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = git ls-files "*.py"\n+text_files = git ls-files "*.rst" "*.md"\n+xml_files = git ls-files "*.xml"\n+zcml_files = git ls-files "*.zcml"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    zpretty\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n+    sh -c \'{[testenv]py_files} | xargs isort\'\n+    sh -c \'{[testenv]py_files} | xargs black\'\n+    sh -c \'{[testenv]xml_files} | xargs zpretty -x -i\'\n+    sh -c \'{[testenv]zcml_files} | xargs zpretty -z -i\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    tomli  # needed for codespell to read pyproject.toml\n+    check-manifest\n+    pyroma\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8\'\n+    sh -c \'{[testenv]py_files} | xargs codespell\'\n+    sh -c \'{[testenv]text_files} | xargs codespell\'\n+    check-manifest\n+    pyroma -n 10 .\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+deps =\n+    z3c.dependencychecker\n+    -c lint-requirements.txt\n+commands =\n+    dependencychecker\n'

