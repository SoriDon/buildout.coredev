Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-09T08:55:01+02:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ae90f0e56e50e81c344fb3d0c84bc6cfc8310cab

Remove Plone &lt; 5.2 and Python &lt; 3 code. (#1171)

* WIP: Remove Plone &lt; 5.2 and Python &lt; 3 code.

* Apply black.

* Update changelog.

Files changed:
A news/1140.feature
M Makefile
M src/plone/restapi/batching.py
M src/plone/restapi/controlpanels/types.py
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/search/handler.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/contextnavigation/get.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/test_addons.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_contextnavigation.py
M src/plone/restapi/tests/test_services_controlpanels.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_querystringsearch.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py

b'diff --git a/Makefile b/Makefile\nindex 451e93f80..3380300a4 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -24,8 +24,6 @@ help: ## This help message\n update: ## Update Make and Buildout\n \twget -O Makefile https://raw.githubusercontent.com/kitconcept/buildout/master/Makefile\n \twget -O requirements.txt https://raw.githubusercontent.com/kitconcept/buildout/master/requirements.txt\n-\twget -O plone-4.3.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-4.3.x.cfg\n-\twget -O plone-5.1.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.1.x.cfg\n \twget -O plone-5.2.x.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/plone-5.2.x.cfg\n \twget -O ci.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/ci.cfg\n \twget -O versions.cfg https://raw.githubusercontent.com/kitconcept/buildout/master/versions.cfg\n@@ -42,35 +40,6 @@ bin/buildout: bin/pip\n bin/python bin/pip:\n \tpython$(version) -m venv . || virtualenv --python=python$(version) .\n \n-py2:\n-\tvirtualenv --python=python2 .\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\n-.PHONY: Build Plone 4.3\n-build-plone-4.3: py2 ## Build Plone 4.3\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout -c plone-4.3.x.cfg\n-\n-.PHONY: Build Plone 5.0\n-build-plone-5.0: py2 ## Build Plone 5.0\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout -c plone-5.0.x.cfg\n-\n-.PHONY: Build Plone 5.1\n-build-plone-5.1: py2  ## Build Plone 5.1\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout -c plone-5.1.x.cfg\n-\n-.PHONY: Build Plone 5.2 with Python 2\n-build-plone-5.2-py: py2  ## Build Plone 5.2 with Python 2\n-\tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n-\tbin/buildout -c plone-5.2.x.cfg\n-\n .PHONY: Build Plone 5.2\n build-plone-5.2: .installed.cfg  ## Build Plone 5.2\n \tbin/pip install --upgrade pip\ndiff --git a/news/1140.feature b/news/1140.feature\nnew file mode 100644\nindex 000000000..a39d17044\n--- /dev/null\n+++ b/news/1140.feature\n@@ -0,0 +1,2 @@\n+Remove Python 2, Plone 4.3, and 5.1 code.\n+[ericof]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 8a79bf4c2..7b0b814ee 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -1,7 +1,7 @@\n from plone.batching.batch import Batch\n from plone.restapi.deserializer import json_body\n-from six.moves.urllib.parse import parse_qsl\n-from six.moves.urllib.parse import urlencode\n+from urllib.parse import parse_qsl\n+from urllib.parse import urlencode\n \n \n DEFAULT_BATCH_SIZE = 25\ndiff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nindex c83c3cc19..dcc7b24d2 100644\n--- a/src/plone/restapi/controlpanels/types.py\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -13,9 +13,6 @@\n import plone.protect.interfaces\n from zope.interface import noLongerProvides\n from plone.restapi.interfaces import IPloneRestapiLayer\n-from Products.CMFPlone.utils import getFSVersionTuple\n-\n-PLONE5 = getFSVersionTuple()[0] >= 5\n \n \n @adapter(Interface, IPloneRestapiLayer)\n@@ -23,7 +20,7 @@\n class DexterityTypesControlpanel(RegistryConfigletPanel):\n     schema = Interface\n     configlet_id = "dexterity-types"\n-    configlet_category_id = "plone-content" if PLONE5 else "Plone"\n+    configlet_category_id = "plone-content"\n \n     def add(self, names):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 63d571632..c769f307d 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -3,7 +3,7 @@\n \n class InternalServerErrorView(BrowserView):  # pragma: no cover\n     def __call__(self):\n-        from six.moves.urllib.error import HTTPError\n+        from urllib.error import HTTPError\n \n         raise HTTPError(\n             "http://nohost/plone/internal_server_error",\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 838d5672c..5aa122f28 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -27,7 +27,6 @@\n \n import codecs\n import dateutil\n-import six\n \n import html as html_parser\n \n@@ -264,8 +263,6 @@ def __call__(self, value):\n \n         # Convert if we have data\n         if data:\n-            if six.PY2:\n-                content_type = content_type.encode("utf8")\n             value = self.field._type(\n                 data=data, contentType=content_type, filename=filename\n             )\ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex 899bd414a..dcd0e5829 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -3,8 +3,6 @@\n from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n from zExceptions import BadRequest\n \n-import six\n-\n \n class OrderingMixin:\n     def handle_ordering(self, data):\n@@ -41,16 +39,6 @@ def reorderItems(self, obj_id, delta, subset_ids):\n             if subset_ids != [i for position, i in position_id]:\n                 raise BadRequest("Client/server ordering mismatch")\n \n-        # Make sure we use bytestring ids for PY2.\n-        if six.PY2:\n-            if isinstance(obj_id, str):\n-                obj_id = obj_id.encode("utf-8")\n-            if subset_ids:\n-                subset_ids = [\n-                    id_.encode("utf-8") if isinstance(id_, str) else id_\n-                    for id_ in subset_ids\n-                ]\n-\n         # All movement is relative to the subset of ids, if passed in.\n         if delta == "top":\n             ordering.moveObjectsToTop([obj_id], subset_ids=subset_ids)\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex 33102b895..1317fd3e8 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -10,8 +10,6 @@\n from zope.intid.interfaces import IIntIds\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n-import six\n-\n \n @implementer(IFieldDeserializer)\n @adapter(IRelationChoice, IDexterityContent, IBrowserRequest)\n@@ -30,8 +28,6 @@ def __call__(self, value):\n             obj = intids.queryObject(value)\n             resolved_by = "intid"\n         elif isinstance(value, str):\n-            if six.PY2 and isinstance(value, str):\n-                value = value.encode("utf8")\n             portal = getMultiAdapter(\n                 (self.context, self.request), name="plone_portal_state"\n             ).portal()\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 183076ddd..e244bde96 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -18,7 +18,6 @@\n from zope.interface import implementer\n \n import jwt\n-import six\n import time\n \n \n@@ -119,8 +118,6 @@ def authenticateCredentials(self, credentials):\n             return\n \n         userid = payload["sub"]\n-        if six.PY2:\n-            userid = userid.encode("utf8")\n \n         if self.store_tokens:\n             if userid not in self._tokens:\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex ca9367501..042ef3a2b 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -3,19 +3,11 @@\n from plone.restapi.interfaces import IZCatalogCompatibleQuery\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.navtree import getNavigationRoot\n+from Products.CMFPlone.interfaces import ISearchSchema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-    from Products.CMFPlone.interfaces import ISearchSchema\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n class SearchHandler:\n     """Executes a catalog search based on a query dict, and returns\n     JSON compatible results.\n@@ -91,7 +83,7 @@ def search(self, query=None):\n             use_site_search_settings = True\n             del query["use_site_search_settings"]\n \n-        if PLONE5 and use_site_search_settings:\n+        if use_site_search_settings:\n             query = self.filter_query(query)\n \n         self._constrain_query_by_path(query)\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex bab21c8f4..47813440d 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -8,7 +8,6 @@\n from zope import component\n \n import plone.protect.interfaces\n-import six\n \n \n class Login(Service):\n@@ -31,9 +30,6 @@ def reply(self):\n \n         userid = data["login"]\n         password = data["password"]\n-        if six.PY2:\n-            userid = userid.encode("utf8")\n-            password = password.encode("utf8")\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 1f1a52e97..889d6a25d 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -1,5 +1,7 @@\n from Acquisition import aq_base\n from Acquisition.interfaces import IAcquirer\n+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITranslationManager\n from plone.restapi.deserializer import json_body\n from plone.restapi.exceptions import DeserializationError\n from plone.restapi.interfaces import IDeserializeFromJson\n@@ -7,7 +9,6 @@\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from Products.CMFPlone.utils import getFSVersionTuple\n from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n from zExceptions import Unauthorized\n@@ -19,17 +20,6 @@\n from Products.CMFCore.utils import getToolByName\n \n import plone.protect.interfaces\n-import pkg_resources\n-import six\n-\n-\n-try:\n-    pkg_resources.get_distribution("plone.app.multilingual")\n-    PAM_INSTALLED = True\n-except pkg_resources.DistributionNotFound:\n-    PAM_INSTALLED = False\n-\n-PLONE5 = getFSVersionTuple()[0] >= 5\n \n \n class FolderPost(Service):\n@@ -90,21 +80,15 @@ def reply(self):\n         obj = add(self.context, obj, rename=not bool(id_))\n \n         # Link translation given the translation_of property\n-        if PAM_INSTALLED and PLONE5:\n-            from plone.app.multilingual.interfaces import (\n-                IPloneAppMultilingualInstalled,\n-            )  # noqa\n-            from plone.app.multilingual.interfaces import ITranslationManager\n-\n-            if (\n-                IPloneAppMultilingualInstalled.providedBy(self.request)\n-                and translation_of\n-                and language\n-            ):\n-                source = self.get_object(translation_of)\n-                if source:\n-                    manager = ITranslationManager(source)\n-                    manager.register_translation(language, obj)\n+        if (\n+            IPloneAppMultilingualInstalled.providedBy(self.request)\n+            and translation_of\n+            and language\n+        ):\n+            source = self.get_object(translation_of)\n+            if source:\n+                manager = ITranslationManager(source)\n+                manager.register_translation(language, obj)\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader("Location", obj.absolute_url())\n@@ -129,12 +113,8 @@ def get_object(self, key):\n         if key.startswith(portal.absolute_url()):\n             # Resolve by URL\n             key = key[len(portal.absolute_url()) + 1 :]\n-            if six.PY2:\n-                key = key.encode("utf8")\n             return portal.restrictedTraverse(key, None)\n         elif key.startswith("/"):\n-            if six.PY2:\n-                key = key.encode("utf8")\n             # Resolve by path\n             return portal.restrictedTraverse(key.lstrip("/"), None)\n         else:\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex eff6cacdc..c5147c85e 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -14,8 +14,6 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n-import six\n-\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -30,10 +28,7 @@ def create(container, type_, id_=None, title=None):\n             randint(0, 9999),\n         )\n     else:\n-        if six.PY2 and isinstance(id_, str):\n-            new_id = id_.encode("utf8")\n-        else:\n-            new_id = id_\n+        new_id = id_\n \n     portal_types = getToolByName(container, "portal_types")\n     type_info = portal_types.getTypeInfo(type_)\ndiff --git a/src/plone/restapi/services/contextnavigation/get.py b/src/plone/restapi/services/contextnavigation/get.py\nindex 048aa4f38..ceb234f04 100644\n--- a/src/plone/restapi/services/contextnavigation/get.py\n+++ b/src/plone/restapi/services/contextnavigation/get.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from collections import UserDict\n from plone import api\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.navtree import buildFolderTree\n@@ -18,9 +19,11 @@\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n from Products.CMFPlone import utils\n from Products.CMFPlone.browser.navtree import SitemapNavtreeStrategy\n+from Products.CMFPlone.defaultpage import is_default_page\n+from Products.CMFPlone.interfaces import INavigationSchema\n from Products.CMFPlone.interfaces import INonStructuralFolder\n+from Products.CMFPlone.interfaces import ISiteSchema\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n-from six.moves import UserDict\n from zExceptions import NotFound\n from zope import schema\n from zope.component import adapter\n@@ -33,18 +36,8 @@\n from zope.schema.interfaces import IFromUnicode\n \n import os\n-import six\n \n \n-IS_PLONE4 = False\n-\n-try:\n-    from Products.CMFPlone.defaultpage import is_default_page\n-    from Products.CMFPlone.interfaces import INavigationSchema\n-    from Products.CMFPlone.interfaces import ISiteSchema\n-except ImportError:\n-    IS_PLONE4 = True\n-\n _ = MessageFactory("plone.restapi")\n \n \n@@ -263,11 +256,7 @@ def root_item_class(self):\n         context = aq_inner(self.context)\n         root = self.getNavRoot()\n         container = aq_parent(context)\n-        is_default = False\n-        if IS_PLONE4:\n-            is_default = _is_default_page(container, context)\n-        else:\n-            is_default = is_default_page(container, context)\n+        is_default = is_default_page(container, context)\n         if aq_base(root) is aq_base(context) or (\n             aq_base(root) is aq_base(container) and is_default\n         ):\n@@ -350,15 +339,12 @@ def thumb_scale(self):\n         if thsize:\n             return thsize\n \n-        if IS_PLONE4:\n-            return  # no support in Plone 4 to override the thumb scale\n-        else:\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-            if settings.no_thumbs_portlet:\n-                return "none"\n-            thumb_scale_portlet = settings.thumb_scale_portlet\n-            return thumb_scale_portlet\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n+        if settings.no_thumbs_portlet:\n+            return "none"\n+        thumb_scale_portlet = settings.thumb_scale_portlet\n+        return thumb_scale_portlet\n \n     def getMimeTypeIcon(self, node):\n         try:\n@@ -605,9 +591,6 @@ def extract_data(schema, raw_data, prefix):\n         field = schema[name]\n         raw_value = raw_data.get(prefix + name, field.default)\n \n-        if isinstance(raw_value, str):\n-            raw_value = six.ensure_text(raw_value)\n-\n         value = IFromUnicode(field).fromUnicode(raw_value)\n         data[name] = value  # convert(raw_value, field)\n \n@@ -687,19 +670,10 @@ def __init__(self, context, data):\n                 query["sort_order"] = sortOrder\n \n         # Filter on workflow states, if enabled\n-        if IS_PLONE4:\n-            # code copied from plone.app.portlets 2.5.2\n-            if navtree_properties.getProperty("enable_wf_state_filtering", False):\n-                query["review_state"] = navtree_properties.getProperty(\n-                    "wf_states_to_show", ()\n-                )\n-        else:\n-            registry = getUtility(IRegistry)\n-            navigation_settings = registry.forInterface(\n-                INavigationSchema, prefix="plone"\n-            )\n-            if navigation_settings.filter_on_workflow:\n-                query["review_state"] = navigation_settings.workflow_states_to_show\n+        registry = getUtility(IRegistry)\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n+        if navigation_settings.filter_on_workflow:\n+            query["review_state"] = navigation_settings.workflow_states_to_show\n \n         self.query = query\n \ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex d1303b43d..4cec2ff69 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -8,7 +8,6 @@\n from zope.security import checkPermission\n \n import plone\n-import six\n \n \n class BaseCopyMove(Service):\n@@ -27,12 +26,8 @@ def get_object(self, key):\n         if key.startswith(self.portal_url):\n             # Resolve by URL\n             key = key[len(self.portal_url) + 1 :]\n-            if six.PY2:\n-                key = key.encode("utf8")\n             return self.portal.restrictedTraverse(key, None)\n         elif key.startswith("/"):\n-            if six.PY2:\n-                key = key.encode("utf8")\n             # Resolve by path\n             return self.portal.restrictedTraverse(key.lstrip("/"), None)\n         else:\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex a665ee8b0..ae4561cc1 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -8,7 +8,6 @@\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n-import six\n \n \n class GroupsPost(Service):\n@@ -63,10 +62,6 @@ def reply(self):\n             group.addMember(userid)\n \n         self.request.response.setStatus(201)\n-        # Note: to please Zope 4.5.2+ we make sure the header is a string,\n-        # and not unicode on Python 2.\n-        if six.PY2 and not isinstance(groupname, str):\n-            groupname = groupname.encode("utf-8")\n         self.request.response.setHeader(\n             "Location", portal.absolute_url() + "/@groups/" + groupname\n         )\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 1b2baaf9a..33ec616d6 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -12,7 +12,6 @@\n from zope.interface import Interface\n \n import plone.protect.interfaces\n-import six\n \n \n @implementer(IExpandableElement)\n@@ -101,12 +100,8 @@ def get_object(self, key):\n         if key.startswith(self.portal_url):\n             # Resolve by URL\n             key = key[len(self.portal_url) + 1 :]\n-            if six.PY2:\n-                key = key.encode("utf8")\n             return self.portal.restrictedTraverse(key, None)\n         elif key.startswith("/"):\n-            if six.PY2:\n-                key = key.encode("utf8")\n             # Resolve by path\n             return self.portal.restrictedTraverse(key.lstrip("/"), None)\n         else:\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex 8d3d2ca5d..2557df589 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -8,7 +8,7 @@\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import getFSVersionTuple\n+from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n from Products.CMFPlone.utils import safe_unicode\n from zope.component import adapter\n from zope.component import getMultiAdapter\n@@ -18,14 +18,6 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-PLONE5 = getFSVersionTuple()[0] >= 5\n-\n-try:\n-    from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n-except ImportError:\n-    # BBB for Plone 4.x, remove with plone.restapi 8 / Plone 6\n-    from plone.app.controlpanel.navigation import INavigationSchema\n-\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n@@ -51,34 +43,15 @@ def __call__(self, expand=False):\n     @property\n     @memoize_contextless\n     def settings(self):\n-        if PLONE5:\n-            # TODO: Simplify this when Plone 4.3 is deprecated\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(INavigationSchema, prefix="plone")\n-            return {\n-                "displayed_types": settings.displayed_types,\n-                "nonfolderish_tabs": settings.nonfolderish_tabs,\n-                "filter_on_workflow": settings.filter_on_workflow,\n-                "workflow_states_to_show": settings.workflow_states_to_show,\n-                "show_excluded_items": settings.show_excluded_items,\n-            }\n-        else:\n-            pprop = getToolByName(self.context, "portal_properties")\n-            ttool = getToolByName(self.context, "portal_types")\n-            siteProps = pprop.site_properties\n-            navProps = pprop.navtree_properties\n-            allTypes = ttool.listContentTypes()\n-            blacklist = navProps.metaTypesNotToList\n-\n-            return {\n-                "displayed_types": [t for t in allTypes if t not in blacklist],\n-                "nonfolderish_tabs": not siteProps.getProperty(\n-                    "disable_nonfolderish_sections"\n-                ),\n-                "filter_on_workflow": navProps.getProperty("enable_wf_state_filtering"),\n-                "workflow_states_to_show": navProps.getProperty("wf_states_to_show"),\n-                "show_excluded_items": navProps.getProperty("showAllParents"),\n-            }\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(INavigationSchema, prefix="plone")\n+        return {\n+            "displayed_types": settings.displayed_types,\n+            "nonfolderish_tabs": settings.nonfolderish_tabs,\n+            "filter_on_workflow": settings.filter_on_workflow,\n+            "workflow_states_to_show": settings.workflow_states_to_show,\n+            "show_excluded_items": settings.show_excluded_items,\n+        }\n \n     @property\n     def default_language(self):\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 447a79f8d..8709e47dc 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -5,8 +5,10 @@\n from Products.CMFCore.permissions import AddPortalMember\n from Products.CMFCore.permissions import SetOwnPassword\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n+from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n from Products.CMFPlone.RegistrationTool import get_member_by_login_name\n-from Products.CMFPlone.utils import getFSVersionTuple\n from zope.component import getAdapter\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n@@ -16,24 +18,6 @@\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone.protect.interfaces\n-import six\n-\n-\n-try:  # pragma: no cover\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:  # pragma: no cover\n-    from plone.app.controlpanel.security import ISecuritySchema\n-\n-try:  # pragma: no cover\n-    # Plone 5.1+\n-    from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n-    from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n-except ImportError:  # pragma: no cover\n-    # Plone 5.0 and earlier\n-    from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n-    from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n-\n-PLONE5 = getFSVersionTuple()[0] >= 5\n \n \n @implementer(IPublishTraverse)\n@@ -152,36 +136,22 @@ def reply(self):\n         send_password_reset = data.pop("sendPasswordReset", None)\n         properties = data\n \n-        if PLONE5:\n-            # We are improving the way the userid/login_name is generated using\n-            # Plone\'s plone.app.users utilities directly. Plone 4 lacks of the\n-            # login_name one, so we leave it as it is, improving the Plone 5\n-            # story\n-            user_id_login_name_data = {\n-                "username": username,\n-                "email": email,\n-                "fullname": data.get("fullname", ""),\n-            }\n-\n-            register_view = getMultiAdapter(\n-                (self.context, self.request), name="register"\n-            )\n+        user_id_login_name_data = {\n+            "username": username,\n+            "email": email,\n+            "fullname": data.get("fullname", ""),\n+        }\n \n-            register_view.generate_user_id(user_id_login_name_data)\n-            register_view.generate_login_name(user_id_login_name_data)\n+        register_view = getMultiAdapter((self.context, self.request), name="register")\n \n-            user_id = user_id_login_name_data.get("user_id", data.get("username"))\n-            login_name = user_id_login_name_data.get("login_name", data.get("username"))\n+        register_view.generate_user_id(user_id_login_name_data)\n+        register_view.generate_login_name(user_id_login_name_data)\n \n-            username = user_id\n-            properties["username"] = user_id\n-        else:\n-            # set username based on the login settings (username or email)\n-            if security.use_email_as_login:\n-                username = email\n-                properties["username"] = email\n-            else:\n-                properties["username"] = username\n+        user_id = user_id_login_name_data.get("user_id", data.get("username"))\n+        login_name = user_id_login_name_data.get("login_name", data.get("username"))\n+\n+        username = user_id\n+        properties["username"] = user_id\n \n         properties["email"] = email\n \n@@ -199,23 +169,15 @@ def reply(self):\n             self.request.response.setStatus(400)\n             return dict(error=dict(type="MissingParameterError", message=str(e)))\n \n-        if PLONE5:\n-            # After user creation, we have to fix the login_name if it differs.\n-            # That happens when the email login is enabled and we are using\n-            # UUID as user ID security settings.\n-            if user_id != login_name:\n-                # The user id differs from the login name.  Set the login\n-                # name correctly.\n-                pas = getToolByName(self.context, "acl_users")\n-                pas.updateLoginName(user_id, login_name)\n+        if user_id != login_name:\n+            # The user id differs from the login name.  Set the login\n+            # name correctly.\n+            pas = getToolByName(self.context, "acl_users")\n+            pas.updateLoginName(user_id, login_name)\n \n         if send_password_reset:\n             registration.registeredNotify(username)\n         self.request.response.setStatus(201)\n-        # Note: to please Zope 4.5.2+ we make sure the header is a string,\n-        # and not unicode on Python 2.\n-        if six.PY2 and not isinstance(username, str):\n-            username = username.encode("utf-8")\n         self.request.response.setHeader(\n             "Location", portal.absolute_url() + "/@users/" + username\n         )\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex e12f3bfca..f209bfeb3 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -1,9 +1,11 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n+from io import BytesIO\n from OFS.Image import Image\n from plone.restapi.services import Service\n from Products.CMFCore.permissions import SetOwnPassword\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import set_own_login_name\n from Products.PlonePAS.tools.membership import default_portrait\n from Products.PlonePAS.utils import scale_image\n@@ -16,13 +18,6 @@\n import codecs\n import json\n import plone\n-import six\n-\n-\n-try:  # pragma: no cover\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:  # pragma: no cover\n-    from plone.app.controlpanel.security import ISecuritySchema\n \n \n @implementer(IPublishTraverse)\n@@ -174,7 +169,7 @@ def set_member_portrait(self, user, portrait):\n         if portrait.get("scale", False):\n             # Only scale if the scale (default Plone behavior) boolean is set\n             # This should be handled by the core in the future\n-            scaled, mimetype = scale_image(six.BytesIO(data))\n+            scaled, mimetype = scale_image(BytesIO(data))\n         else:\n             # Normally, the scale and cropping is going to be handled in the\n             # frontend\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 203a7fd99..446610146 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -1,7 +1,5 @@\n # pylint: disable=E1002\n # E1002: Use of super on an old style class\n-\n-from plone import api\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.i18n.locales.interfaces import IContentLanguages\n from plone.app.i18n.locales.interfaces import IMetadataLanguages\n@@ -25,8 +23,8 @@\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n from requests.exceptions import ConnectionError\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlparse\n+from urllib.parse import urljoin\n+from urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.configuration import xmlconfig\n@@ -34,22 +32,11 @@\n \n import collective.MockMailHost\n import os\n-import pkg_resources\n import re\n import requests\n import time\n \n \n-PLONE_VERSION = pkg_resources.parse_version(api.env.plone_version())\n-\n-\n-try:\n-    pkg_resources.get_distribution("plone.app.multilingual")\n-    PAM_INSTALLED = True\n-except pkg_resources.DistributionNotFound:\n-    PAM_INSTALLED = False\n-\n-\n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex 4eb2e5eb1..5e6e64f92 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,5 +1,5 @@\n from Products.CMFCore.utils import getToolByName\n-from six.moves.urllib.parse import urlparse\n+from urllib.parse import urlparse\n \n import quopri\n \ndiff --git a/src/plone/restapi/tests/test_addons.py b/src/plone/restapi/tests/test_addons.py\nindex d607bd49a..47149a491 100644\n--- a/src/plone/restapi/tests/test_addons.py\n+++ b/src/plone/restapi/tests/test_addons.py\n@@ -1,5 +1,3 @@\n-from pkg_resources import parse_version\n-from plone import api\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -13,17 +11,6 @@\n import unittest\n \n \n-PLONE_VERSION = parse_version(api.env.plone_version())\n-\n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n-@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n class TestAddons(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 83bc9a89f..b6be9c552 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -7,8 +7,8 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from six.moves.urllib.parse import parse_qsl\n-from six.moves.urllib.parse import urlparse\n+from urllib.parse import parse_qsl\n+from urllib.parse import urlparse\n \n import transaction\n import unittest\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex fed9c4ac6..36fbb2cfd 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,12 +1,12 @@\n from base64 import b64encode\n from datetime import datetime\n from unittest.mock import patch\n-from pkg_resources import parse_version\n from pkg_resources import resource_filename\n from plone import api\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n+from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.testing import applyProfile\n from plone.app.testing import popGlobalRegistry\n from plone.app.testing import pushGlobalRegistry\n@@ -20,7 +20,6 @@\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n from plone.registry.interfaces import IRegistry\n-from plone.restapi.testing import PAM_INSTALLED  # noqa\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n@@ -42,10 +41,6 @@\n import unittest\n \n \n-if PAM_INSTALLED:\n-    from plone.app.multilingual.interfaces import ITranslationManager\n-\n-\n TUS_HEADERS = [\n     "upload-offset",\n     "upload-length",\n@@ -77,15 +72,6 @@\n UPLOAD_PDF_MIMETYPE = "application/pdf"\n UPLOAD_PDF_FILENAME = "file.pdf"\n \n-PLONE_VERSION = parse_version(api.env.plone_version())\n-\n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n \n def pretty_json(data):\n     return json.dumps(data, sort_keys=True, indent=4, separators=(",", ": "))\n@@ -1740,7 +1726,6 @@ def test_documentation_expansion(self):\n         save_request_and_response_for_docs("expansion", response)\n \n \n-@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n class TestControlPanelDocumentation(TestDocumentationBase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -1799,9 +1784,6 @@ def test_controlpanels_crud_dexterity(self):\n         )\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestPAMDocumentation(TestDocumentationBase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 680c700ca..e789be04d 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -13,7 +13,6 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.restapi.testing import PLONE_VERSION\n from plone.scale import storage\n from unittest import TestCase\n from z3c.form.interfaces import IDataManager\n@@ -21,7 +20,6 @@\n from zope.interface.verify import verifyClass\n \n import os\n-import unittest\n \n \n class TestDexterityFieldSerializing(TestCase):\n@@ -344,456 +342,6 @@ def test_remoteurl_field_in_links_get_converted(self):\n         self.assertEqual(serializer(), "/doc2")\n \n \n-@unittest.skipUnless(\n-    PLONE_VERSION.base_version < "5.1",\n-    "Plone < 5.1: original image url is a scaled image in JPEG format because we test with a GIF image",\n-)\n-class TestDexterityImageFieldsSerializingOriginalScaledInJPEG(TestCase):\n-    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-    maxDiff = None\n-\n-    def setUp(self):\n-        self.portal = self.layer["portal"]\n-        self.request = self.layer["request"]\n-\n-        self.doc1 = self.portal[\n-            self.portal.invokeFactory(\n-                "DXTestDocument", id="doc1", title="Test Document"\n-            )\n-        ]\n-\n-    def serialize(self, fieldname, value):\n-        for schema in iterSchemata(self.doc1):\n-            if fieldname in schema:\n-                field = schema.get(fieldname)\n-                break\n-        dm = getMultiAdapter((self.doc1, field), IDataManager)\n-        dm.set(value)\n-        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n-        return serializer()\n-\n-    def test_namedimage_field_serialization_returns_dict(self):\n-        """In Plone < 5.1 the image returned when requesting an image\n-        scale with the same width and height of the original image is\n-        a Pillow-generated image scale in JPEG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n-        with open(image_file, "rb") as f:\n-            image_data = f.read()\n-        fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-\n-            scale_url_uuid = "uuid_1"\n-            obj_url = self.doc1.absolute_url()\n-\n-            # Original image is still a "scale"\n-            # scaled images are converted to JPEG in Plone < 5.1\n-            original_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "jpeg"\n-            )\n-\n-            scale_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "jpeg"\n-            )\n-            scales = {\n-                "listing": {\n-                    "download": scale_download_url,\n-                    "width": 16,\n-                    "height": 12,\n-                },\n-                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n-                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n-                "thumb": {\n-                    "download": scale_download_url,\n-                    "width": 128,\n-                    "height": 96,\n-                },\n-                "mini": {\n-                    "download": scale_download_url,\n-                    "width": 200,\n-                    "height": 150,\n-                },\n-                "preview": {\n-                    "download": scale_download_url,\n-                    "width": 400,\n-                    "height": 300,\n-                },\n-                "large": {\n-                    "download": scale_download_url,\n-                    "width": 768,\n-                    "height": 576,\n-                },\n-            }\n-            self.assertEqual(\n-                {\n-                    "filename": "1024x768.gif",\n-                    "content-type": "image/gif",\n-                    "size": 1514,\n-                    "download": original_download_url,\n-                    "width": 1024,\n-                    "height": 768,\n-                    "scales": scales,\n-                },\n-                value,\n-            )\n-\n-    def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """Original image url will be None because the original image is corrupted\n-        and the created url should be an image scale"""\n-        image_data = b"INVALID IMAGE DATA"\n-        fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-\n-        self.assertEqual(\n-            {\n-                "content-type": "image/gif",\n-                "download": None,\n-                "filename": "1024x768.gif",\n-                "height": -1,\n-                "scales": {},\n-                "size": 18,\n-                "width": -1,\n-            },\n-            value,\n-        )\n-\n-    def test_namedblobimage_field_serialization_returns_dict(self):\n-        """In Plone < 5.1 the image returned when requesting an image\n-        scale with the same width and height of the original image is\n-        a Pillow-generated image scale in JPEG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n-        with open(image_file, "rb") as f:\n-            image_data = f.read()\n-        fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedBlobImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-\n-            scale_url_uuid = "uuid_1"\n-            obj_url = self.doc1.absolute_url()\n-\n-            # Original image is still a "scale"\n-            # scaled images are converted to JPEG in Plone < 5.1\n-            original_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "jpeg"\n-            )\n-\n-            scale_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "jpeg"\n-            )\n-            scales = {\n-                "listing": {\n-                    "download": scale_download_url,\n-                    "width": 16,\n-                    "height": 12,\n-                },\n-                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n-                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n-                "thumb": {\n-                    "download": scale_download_url,\n-                    "width": 128,\n-                    "height": 96,\n-                },\n-                "mini": {\n-                    "download": scale_download_url,\n-                    "width": 200,\n-                    "height": 150,\n-                },\n-                "preview": {\n-                    "download": scale_download_url,\n-                    "width": 400,\n-                    "height": 300,\n-                },\n-                "large": {\n-                    "download": scale_download_url,\n-                    "width": 768,\n-                    "height": 576,\n-                },\n-            }\n-            self.assertEqual(\n-                {\n-                    "filename": "1024x768.gif",\n-                    "content-type": "image/gif",\n-                    "size": 1514,\n-                    "download": original_download_url,\n-                    "width": 1024,\n-                    "height": 768,\n-                    "scales": scales,\n-                },\n-                value,\n-            )\n-\n-    def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """Original image url will be None because the original image is corrupted\n-        and the created url should be an image scale"""\n-        image_data = b"INVALID IMAGE DATA"\n-        fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedBlobImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-\n-        self.assertEqual(\n-            {\n-                "content-type": "image/gif",\n-                "download": None,\n-                "filename": "1024x768.gif",\n-                "height": -1,\n-                "scales": {},\n-                "size": 18,\n-                "width": -1,\n-            },\n-            value,\n-        )\n-\n-\n-@unittest.skipUnless(\n-    PLONE_VERSION.base_version == "5.1",\n-    "Plone 5.1: original image url is a scaled image in PNG format because we test with a GIF image",\n-)\n-class TestDexterityImageFieldSerializingOriginalScaledInPNG(TestCase):\n-    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-    maxDiff = None\n-\n-    def setUp(self):\n-        self.portal = self.layer["portal"]\n-        self.request = self.layer["request"]\n-\n-        self.doc1 = self.portal[\n-            self.portal.invokeFactory(\n-                "DXTestDocument", id="doc1", title="Test Document"\n-            )\n-        ]\n-\n-    def serialize(self, fieldname, value):\n-        for schema in iterSchemata(self.doc1):\n-            if fieldname in schema:\n-                field = schema.get(fieldname)\n-                break\n-        dm = getMultiAdapter((self.doc1, field), IDataManager)\n-        dm.set(value)\n-        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n-        return serializer()\n-\n-    def test_namedimage_field_serialization_returns_dict(self):\n-        """In Plone == 5.1 the image returned when requesting an image\n-        scale with the same width and height of the original image is\n-        a Pillow-generated image scale in PNG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n-        with open(image_file, "rb") as f:\n-            image_data = f.read()\n-        fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-\n-            scale_url_uuid = "uuid_1"\n-            obj_url = self.doc1.absolute_url()\n-\n-            # Original image is still a "scale"\n-            # scaled images are converted to PNG in Plone = 5.1\n-            original_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "png"\n-            )\n-\n-            scale_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "jpeg"\n-            )\n-            scales = {\n-                "listing": {\n-                    "download": scale_download_url,\n-                    "width": 16,\n-                    "height": 12,\n-                },\n-                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n-                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n-                "thumb": {\n-                    "download": scale_download_url,\n-                    "width": 128,\n-                    "height": 96,\n-                },\n-                "mini": {\n-                    "download": scale_download_url,\n-                    "width": 200,\n-                    "height": 150,\n-                },\n-                "preview": {\n-                    "download": scale_download_url,\n-                    "width": 400,\n-                    "height": 300,\n-                },\n-                "large": {\n-                    "download": scale_download_url,\n-                    "width": 768,\n-                    "height": 576,\n-                },\n-            }\n-            self.assertEqual(\n-                {\n-                    "filename": "1024x768.gif",\n-                    "content-type": "image/gif",\n-                    "size": 1514,\n-                    "download": original_download_url,\n-                    "width": 1024,\n-                    "height": 768,\n-                    "scales": scales,\n-                },\n-                value,\n-            )\n-\n-    def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """Original image url will be None because the original image is corrupted\n-        and the created url should be an image scale"""\n-        image_data = b"INVALID IMAGE DATA"\n-        fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-\n-        self.assertEqual(\n-            {\n-                "content-type": "image/gif",\n-                "download": None,\n-                "filename": "1024x768.gif",\n-                "height": -1,\n-                "scales": {},\n-                "size": 18,\n-                "width": -1,\n-            },\n-            value,\n-        )\n-\n-    def test_namedblobimage_field_serialization_returns_dict(self):\n-        """In Plone = 5.1 the image returned when requesting an image\n-        scale with the same width and height of the original image is\n-        a Pillow-generated image scale in PNG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n-        with open(image_file, "rb") as f:\n-            image_data = f.read()\n-        fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedBlobImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-\n-            scale_url_uuid = "uuid_1"\n-            obj_url = self.doc1.absolute_url()\n-\n-            # Original image is still a "scale"\n-            # scaled images are converted to PNG in Plone = 5.1\n-            original_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "png"\n-            )\n-\n-            scale_download_url = "{}/@@images/{}.{}".format(\n-                obj_url, scale_url_uuid, "jpeg"\n-            )\n-            scales = {\n-                "listing": {\n-                    "download": scale_download_url,\n-                    "width": 16,\n-                    "height": 12,\n-                },\n-                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n-                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n-                "thumb": {\n-                    "download": scale_download_url,\n-                    "width": 128,\n-                    "height": 96,\n-                },\n-                "mini": {\n-                    "download": scale_download_url,\n-                    "width": 200,\n-                    "height": 150,\n-                },\n-                "preview": {\n-                    "download": scale_download_url,\n-                    "width": 400,\n-                    "height": 300,\n-                },\n-                "large": {\n-                    "download": scale_download_url,\n-                    "width": 768,\n-                    "height": 576,\n-                },\n-            }\n-            self.assertEqual(\n-                {\n-                    "filename": "1024x768.gif",\n-                    "content-type": "image/gif",\n-                    "size": 1514,\n-                    "download": original_download_url,\n-                    "width": 1024,\n-                    "height": 768,\n-                    "scales": scales,\n-                },\n-                value,\n-            )\n-\n-    def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """Original image url will be None because the original image is corrupted\n-        and the created url should be an image scale"""\n-        image_data = b"INVALID IMAGE DATA"\n-        fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n-            value = self.serialize(\n-                fn,\n-                NamedBlobImage(\n-                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n-                ),\n-            )\n-\n-        self.assertEqual(\n-            {\n-                "content-type": "image/gif",\n-                "download": None,\n-                "filename": "1024x768.gif",\n-                "height": -1,\n-                "scales": {},\n-                "size": 18,\n-                "width": -1,\n-            },\n-            value,\n-        )\n-\n-\n-@unittest.skipUnless(\n-    PLONE_VERSION.base_version >= "5.2",\n-    "Plone 5.2: original image url is the original image",\n-)\n class TestDexterityImageFieldSerializingOriginalAndPNGScales(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n     maxDiff = None\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex 3abbd8147..ee6fd80dd 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -16,7 +16,7 @@\n \n class InternalServerErrorView(BrowserView):\n     def __call__(self):  # pragma: no cover\n-        from six.moves.urllib.error import HTTPError\n+        from urllib.error import HTTPError\n \n         raise HTTPError(\n             "http://nohost/plone/internal_server_error",\n@@ -25,7 +25,6 @@ def __call__(self):  # pragma: no cover\n             {},\n             None,\n         )\n-        raise HTTPError\n \n \n class TestErrorHandling(unittest.TestCase):\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 166082009..f633ed0dd 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -1,3 +1,5 @@\n+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -6,7 +8,6 @@\n from plone.dexterity.utils import createContentInContainer\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.serializer.expansion import expandable_elements\n-from plone.restapi.testing import PAM_INSTALLED\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n@@ -20,17 +21,6 @@\n import transaction\n import unittest\n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-if PAM_INSTALLED:\n-    from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled  # noqa\n-    from plone.app.multilingual.interfaces import ITranslationManager\n-\n \n class ExpandableElementFoo:\n     def __init__(self, context, request):\n@@ -152,9 +142,6 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn("navigation", list(response.json().get("@components")))\n \n-    @unittest.skipIf(\n-        not PLONE5, "Just Plone 5 currently, tabs in plone 4 does not have review_state"\n-    )\n     def test_navigation_expanded(self):\n         response = self.api_session.get("/folder", params={"expand": "navigation"})\n \n@@ -346,9 +333,6 @@ def test_types_expanded(self):\n         )\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestTranslationExpansionFunctional(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 9eecdb48b..e68d65bfe 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -2,6 +2,7 @@\n from DateTime import DateTime\n from plone import api\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.textfield.value import RichTextValue\n@@ -16,20 +17,10 @@\n from zope.interface import alsoProvides\n from zope.interface import noLongerProvides\n \n-import six\n import transaction\n import unittest\n \n \n-try:\n-    from plone.app.layout.navigation.interfaces import INavigationRoot\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n class TestSearchFunctional(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -392,17 +383,6 @@ def test_keyword_index_str_query_and(self):\n \n         self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n-    @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n-    def test_keyword_index_int_query(self):\n-        self.doc.test_list_field = [42, 23]\n-        self.doc.reindexObject()\n-        transaction.commit()\n-\n-        query = {"test_list_field:int": 42}\n-        response = self.api_session.get("/@search", params=query)\n-\n-        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n-\n     # BooleanIndex\n \n     def test_boolean_index_query(self):\n@@ -610,9 +590,6 @@ def test_uuid_index_query(self):\n         response = self.api_session.get("/@search", params=query)\n         self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n-    @unittest.skipIf(\n-        not PLONE5, "searchResults in Plone 4 does not handle correctly that permission"\n-    )\n     def test_respect_access_inactive_permission(self):\n         # admin can see everything\n         response = self.api_session.get("/@search", params={}).json()\n@@ -665,7 +642,6 @@ def test_respect_access_inactive_permission(self):\n         ).json()\n         self.assertEqual(response["items_total"], 1)\n \n-    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n     def test_search_use_site_search_settings_for_types(self):\n         response = self.api_session.get(\n             "/@search", params={"use_site_search_settings": 1}\n@@ -691,7 +667,6 @@ def test_search_use_site_search_settings_for_types(self):\n         search_settings.types_not_searched = old\n         transaction.commit()\n \n-    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n     def test_search_use_site_search_settings_for_default_sort_order(self):\n         response = self.api_session.get(\n             "/@search", params={"use_site_search_settings": 1}\n@@ -714,7 +689,6 @@ def test_search_use_site_search_settings_for_default_sort_order(self):\n             "Other Document",\n         )\n \n-    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n     def test_search_use_site_search_settings_with_navigation_root(self):\n \n         alsoProvides(self.folder, INavigationRoot)\n@@ -729,7 +703,6 @@ def test_search_use_site_search_settings_with_navigation_root(self):\n         noLongerProvides(self.folder, INavigationRoot)\n         transaction.commit()\n \n-    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n     def test_search_use_site_search_settings_with_navigation_root_and_vhm(self):\n \n         if "virtual_hosting" not in self.app.objectIds():\n@@ -756,7 +729,6 @@ def test_search_use_site_search_settings_with_navigation_root_and_vhm(self):\n         noLongerProvides(self.folder, INavigationRoot)\n         transaction.commit()\n \n-    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n     def test_search_use_site_search_settings_with_vhm(self):\n \n         if "virtual_hosting" not in self.app.objectIds():\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex 0f4e9a951..8d775f8b4 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -1,3 +1,5 @@\n+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -7,17 +9,12 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n from zope.interface import alsoProvides\n-from plone.restapi.testing import PAM_INSTALLED\n from plone.app.testing import login\n \n \n import transaction\n import unittest\n \n-if PAM_INSTALLED:\n-    from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled  # noqa\n-    from plone.app.multilingual.interfaces import ITranslationManager\n-\n \n class TestServicesBreadcrumbs(unittest.TestCase):\n \n@@ -65,9 +62,6 @@ def test_breadcrumbs(self):\n         )\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestServicesMultilingualBreadcrumbs(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_services_contextnavigation.py b/src/plone/restapi/tests/test_services_contextnavigation.py\nindex 33103baf9..d016131af 100644\n--- a/src/plone/restapi/tests/test_services_contextnavigation.py\n+++ b/src/plone/restapi/tests/test_services_contextnavigation.py\n@@ -8,7 +8,7 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n from Products.CMFPlone.tests import dummy\n-from six.moves.urllib.parse import urlencode\n+from urllib.parse import urlencode\n from zope.component import getUtility\n from zope.interface import directlyProvides\n from zope.interface import noLongerProvides\n@@ -734,11 +734,6 @@ def testRootDoesNotExist(self):\n \n     def testAboveRoot(self):\n         base = self.portal.absolute_url()\n-        try:\n-            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n-        except ImportError:\n-            return  # skip test in Plone 4\n-\n         registry = getUtility(IRegistry)\n         registry["plone.root"] = "/folder2"\n         view = self.renderer(self.portal, opts(topLevel=0))\n@@ -810,11 +805,7 @@ def testCustomQuery(self):\n \n     def testStateFiltering(self):\n         # Test Navtree workflow state filtering\n-\n-        try:\n-            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n-        except ImportError:\n-            return  # skip test in Plone 4\n+        from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n@@ -841,11 +832,6 @@ def testStateFiltering(self):\n         self.assertEqual(len(tree["items"]), 2)\n \n     def testPrunedRootNode(self):\n-        try:\n-            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n-        except ImportError:\n-            return  # skip test in Plone 4\n-\n         # This test has been changed to conform to reality\n         registry = self.portal.portal_registry\n         registry["plone.parent_types_not_to_query"] = ["Folder"]\n@@ -856,11 +842,6 @@ def testPrunedRootNode(self):\n         self.assertEqual(len(tree["items"][4]["items"]), 0)\n \n     def testPrunedRootNodeShowsAllParents(self):\n-        try:\n-            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n-        except ImportError:\n-            return  # skip test in Plone 4\n-\n         registry = self.portal.portal_registry\n         registry["plone.parent_types_not_to_query"] = ["Folder"]\n \ndiff --git a/src/plone/restapi/tests/test_services_controlpanels.py b/src/plone/restapi/tests/test_services_controlpanels.py\nindex f60d64fa1..8b5411b9f 100644\n--- a/src/plone/restapi/tests/test_services_controlpanels.py\n+++ b/src/plone/restapi/tests/test_services_controlpanels.py\n@@ -8,15 +8,6 @@\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n-@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n class TestControlpanelsEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 6a27dd950..879837cc8 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -12,17 +12,6 @@\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n-@unittest.skipIf(\n-    not PLONE5, "email notification not implemented for Plone < 5."\n-)  # noqa\n class EmailNotificationEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex d3039f9d1..7c8706f9a 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -12,15 +12,6 @@\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n-@unittest.skipIf(not PLONE5, "email send not implemented for Plone < 5.")  # noqa\n class EmailSendEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 89092d17f..95ee1c9b2 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -13,14 +13,6 @@\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n class TestServicesNavigation(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -65,44 +57,6 @@ def setUp(self):\n     def tearDown(self):\n         self.api_session.close()\n \n-    @unittest.skipIf(\n-        not PLONE5,\n-        "Just Plone 5 currently, tabs in plone 4 does not have review_state",\n-    )\n-    def test_navigation_with_no_params_gets_only_top_level(self):\n-        response = self.api_session.get("/folder/@navigation")\n-\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            response.json(),\n-            {\n-                "@id": self.portal_url + "/folder/@navigation",\n-                "items": [\n-                    {\n-                        "@id": self.portal_url,\n-                        "description": "",\n-                        "items": [],\n-                        "review_state": None,\n-                        "title": "Home",\n-                    },\n-                    {\n-                        "@id": self.portal_url + "/folder",\n-                        "description": "",\n-                        "items": [],\n-                        "review_state": "private",\n-                        "title": "Some Folder",\n-                    },\n-                    {\n-                        "@id": self.portal_url + "/folder2",\n-                        "description": "",\n-                        "items": [],\n-                        "review_state": "private",\n-                        "title": "Some Folder 2",\n-                    },\n-                ],\n-            },\n-        )\n-\n     def test_navigation_service(self):\n         response = self.api_session.get(\n             "/folder/@navigation", params={"expand.navigation.depth": 2}\ndiff --git a/src/plone/restapi/tests/test_services_querystringsearch.py b/src/plone/restapi/tests/test_services_querystringsearch.py\nindex c2468f70e..83df6426b 100644\n--- a/src/plone/restapi/tests/test_services_querystringsearch.py\n+++ b/src/plone/restapi/tests/test_services_querystringsearch.py\n@@ -1,5 +1,3 @@\n-from pkg_resources import get_distribution\n-from pkg_resources import parse_version\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -10,12 +8,6 @@\n import transaction\n import unittest\n \n-zcatalog_version = get_distribution("Products.ZCatalog").version\n-if parse_version(zcatalog_version) >= parse_version("5.1"):\n-    SUPPORT_NOT_UUID_QUERIES = True\n-else:\n-    SUPPORT_NOT_UUID_QUERIES = False\n-\n \n class TestQuerystringSearchEndpoint(unittest.TestCase):\n \n@@ -137,10 +129,6 @@ def test_querystringsearch_complex(self):\n         self.assertNotIn("effective", response.json()["items"][0])\n         self.assertEqual(response.json()["items"][4]["title"], "Test Document 9")\n \n-    @unittest.skipIf(\n-        not SUPPORT_NOT_UUID_QUERIES,\n-        "Skipping because ZCatalog allows not queries on UUIDIndex from >=5.1",\n-    )\n     def test_querystringsearch_do_not_return_context(self):\n         self.portal.invokeFactory("Document", "testdocument2", title="Test Document 2")\n         self.doc = self.portal.testdocument\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 4e1a4751f..55d9edd34 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -7,6 +7,7 @@\n from plone.restapi.testing import RelativeSession\n from Products.CMFCore.permissions import SetOwnPassword\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.MailHost.interfaces import IMailHost\n from zope.component import getAdapter\n from zope.component import getUtility\n@@ -15,12 +16,6 @@\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:\n-    from plone.app.controlpanel.security import ISecuritySchema\n-\n-\n class TestUsersEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex ea0dc0fc1..c2b5a1efe 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -3,9 +3,12 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.dexterity.utils import createContentInContainer\n-from plone.restapi.testing import PAM_INSTALLED\n+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITranslationManager\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING\n+from Products.CMFPlone.interfaces import ILanguage\n+\n from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\n \n@@ -14,15 +17,6 @@\n import unittest\n \n \n-if PAM_INSTALLED:\n-    from Products.CMFPlone.interfaces import ILanguage\n-    from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled  # noqa\n-    from plone.app.multilingual.interfaces import ITranslationManager\n-\n-\n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestTranslationInfo(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING\n@@ -62,9 +56,6 @@ def test_correct_translation_information(self):\n         )\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestLinkContentsAsTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n@@ -173,9 +164,6 @@ def test_get_translations_on_content_with_no_permissions(self):\n         self.assertTrue(len(response["items"]) == 0)\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestUnLinkContentTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n@@ -228,9 +216,6 @@ def test_calling_with_an_untranslated_content_gives_400(self):\n         self.assertEqual(400, response.status_code)\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestCreateContentsAsTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n@@ -270,9 +255,6 @@ def test_post_to_folder_creates_document_translated(self):\n         self.assertEqual("My Document DE", response.json().get("title"))\n \n \n-@unittest.skipUnless(\n-    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n-)  # NOQA\n class TestTranslationLocator(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 92f6099ba..3ecfe07a5 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -1,5 +1,6 @@\n from base64 import b64encode\n from DateTime import DateTime\n+from io import BytesIO\n from OFS.interfaces import IObjectWillBeAddedEvent\n from plone import api\n from plone.app.testing import login\n@@ -10,7 +11,6 @@\n from plone.restapi.services.content.tus import TUSUpload\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-from six import BytesIO\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import Interface\n'

