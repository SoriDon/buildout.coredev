Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-12-30T12:55:27+01:00
Author: talarias (talarias) <talarias@live.de>
Commit: https://github.com/plone/plone.app.layout/commit/0a46cd0d1eec9be8f814e7792e040bfd1f1c2d29

add favicon

Files changed:
A news/plip-favicon.feature
A plone/app/layout/favicon_handler.py
A plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/configure.zcml
M plone/app/layout/links/favicon.pt
M plone/app/layout/links/viewlets.py

b'diff --git a/news/plip-favicon.feature b/news/plip-favicon.feature\nnew file mode 100644\nindex 00000000..f034ef31\n--- /dev/null\n+++ b/news/plip-favicon.feature\n@@ -0,0 +1,2 @@\n+add favicon\n+[talarias]\ndiff --git a/plone/app/layout/configure.zcml b/plone/app/layout/configure.zcml\nindex 7ef16a7e..5b267460 100644\n--- a/plone/app/layout/configure.zcml\n+++ b/plone/app/layout/configure.zcml\n@@ -14,4 +14,8 @@\n \n     <include file="permissions.zcml" />\n \n+    <subscriber\n+        handler=".favicon_handler.updateMimetype"\n+    />\n+\n </configure>\ndiff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nnew file mode 100644\nindex 00000000..329d29b8\n--- /dev/null\n+++ b/plone/app/layout/favicon_handler.py\n@@ -0,0 +1,19 @@\n+from zope.component import adapter\n+from plone.registry.interfaces import IRecordModifiedEvent\n+from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.formwidget.namedfile.converter import b64decode_file\n+import mimetypes\n+from zope.component import getUtility\n+from plone.registry.interfaces import IRegistry\n+from plone.registry.recordsproxy import RecordsProxy\n+\n+\n+@adapter(ISiteSchema, IRecordModifiedEvent)\n+def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n+\n+    if event.record.fieldName != \'site_favicon\' or not event.record.value:\n+        return\n+\n+    filename, data = b64decode_file(event.newValue)\n+    mimetype = mimetypes.guess_type(filename)[0] if filename else \'image/x-icon\'\n+    settings.__registry__[\'plone.site_favicon_mimetype\'] = mimetype\ndiff --git a/plone/app/layout/links/favicon.pt b/plone/app/layout/links/favicon.pt\nindex 9fd38791..0f45640f 100644\n--- a/plone/app/layout/links/favicon.pt\n+++ b/plone/app/layout/links/favicon.pt\n@@ -1,4 +1,6 @@\n <tal:favicon define="portal_url view/site_url">\n-    <link rel="shortcut icon" type="image/x-icon" tal:attributes="href string:$portal_url/favicon.ico" />\n-    <link rel="apple-touch-icon" tal:attributes="href string:$portal_url/touch_icon.png" />\n-</tal:favicon>\n+    <link rel="preload icon" type="${python: view.mimetype}"\n+          tal:attributes="href python: view.favicon_path" />\n+    <link rel="alternate icon" type="image/x-icon">\n+    <link rel="mask-icon" tal:attributes="href python: view.favicon_path" />\n+</tal:favicon>\n\\ No newline at end of file\ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nnew file mode 100644\nindex 00000000..eb5d7494\n--- /dev/null\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -0,0 +1,70 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n+from zope.component import getUtility\n+from plone.namedfile.file import NamedBlobFile\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n+from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.links.viewlets import FaviconViewlet\n+from plone.formwidget.namedfile.converter import b64encode_file\n+\n+\n+class TestFaviconViewletView(ViewletsTestCase, FaviconViewlet):\n+    layer = FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = \'\'\n+        self.site_url = \'\'\n+\n+    def test_FaviconViewlet_get_mimetype_svg(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.svg\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/svg+xml\')\n+\n+    def test_FaviconViewlet_get_mimetype_jpg(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.jpg\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/jpeg\')\n+\n+    def test_FaviconViewlet_get_mimetype_png(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.png\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/png\')\n+\n+    def test_FaviconViewlet_get_mimetype_ico(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.ico\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/x-icon\')\n+\n+    def test_FaviconViewlet_get_mimetype_none(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        settings.site_favicon = None\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/x-icon\')\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex dff7624b..3948ca77 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -6,7 +6,7 @@\n from plone.memoize import view\n from plone.memoize.compress import xhtml_compress\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n from Products.CMFPlone.interfaces.syndication import IFeedSettings\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from Products.CMFPlone.utils import safe_bytes\n@@ -14,6 +14,9 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.schema.interfaces import IVocabularyFactory\n+from plone.formwidget.namedfile.converter import b64decode_file\n+import mimetypes\n+from typing import NoReturn\n \n \n def get_language(context, request):\n@@ -36,9 +39,28 @@ def render_cachekey(fun, self):\n class FaviconViewlet(ViewletBase):\n \n     _template = ViewPageTemplateFile("favicon.pt")\n+    mimetype: str\n+    favicon_path: str\n \n-    @ram.cache(render_cachekey)\n-    def render(self):\n+    def init_favicon(self) -> NoReturn:\n+        registry = getUtility(IRegistry)\n+        settings: ISiteSchema = registry.forInterface(ISiteSchema, prefix="plone")\n+\n+        self.mimetype: str = settings.site_favicon_mimetype\n+        filename: str = self.get_filename(settings)\n+        self.favicon_path: str = str(self.site_url) + \'/favicon\'\n+        if not filename:\n+            self.favicon_path += \'.ico\'\n+\n+    @staticmethod\n+    def get_filename(settings: ISiteSchema) -> str:\n+        if getattr(settings, \'site_favicon\', False):\n+            filename, data = b64decode_file(settings.site_favicon)\n+            return filename\n+        return None\n+\n+    def render(self) -> ViewPageTemplateFile:\n+        self.init_favicon()\n         return xhtml_compress(self._template())\n \n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-13T10:18:52+01:00
Author: Florian Danzmann (talarias) <53948891+talarias@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.layout/commit/9cfcf937b1bb32007f99e96db31e52083221b8db

Update plip-favicon.feature

Files changed:
M news/plip-favicon.feature

b'diff --git a/news/plip-favicon.feature b/news/plip-favicon.feature\nindex f034ef31..e5cc15a7 100644\n--- a/news/plip-favicon.feature\n+++ b/news/plip-favicon.feature\n@@ -1,2 +1,2 @@\n-add favicon\n+Add viewlet to display customizable favicon with handler to update its MIME-type\n [talarias]\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-13T12:14:37+01:00
Author: Florian Danzmann (talarias) <talarias@live.de>
Commit: https://github.com/plone/plone.app.layout/commit/e32b4f5ffd56b77c91e3120943924e74e13c22a4

Merge branch 'master' into plip-barceloneta_lts_favicon

Files changed:
A news/280.fix
M CHANGES.rst
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py
M setup.py
D news/273-1.feature
D news/273-2.feature
D news/273-3.feature
D news/275.feature

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 29d1523c..cde6b87e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,32 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.0a6 (2022-01-07)\n+--------------------\n+\n+New features:\n+\n+\n+- Global section viewlet: Catalog based navigation.\n+  Show the global sections also if navigation contains items but tabs are empty.\n+  This allows for disabling portal tabs rendering and constructing the navigation only from the catalog query.\n+  [thet] (273-1)\n+- Global sections viewlet: Customize entries and query.\n+  Also allow customizing the tabs entries and the navigation query along with the other navigation entries.\n+  [thet] (273-2)\n+- Global sections viewlet: Factor out types_using_view.\n+  Factor out types_using_view so that this method can be re-used, e.g. in a subclass with a customize_entry method.\n+  [thet] (273-3)\n+- Global sections viewlet performance optimizations:\n+\n+  - Remove pointless caching on types_using_view,\n+  - Store settings in variable for multiple access, bypassing cache checks,\n+  - Remove now pointless caching on settings property,\n+  - Deprecate now unused navtree_depth property.\n+\n+  [thet] (#275)\n+\n+\n 4.0.0a5 (2021-11-23)\n --------------------\n \ndiff --git a/news/273-1.feature b/news/273-1.feature\ndeleted file mode 100644\nindex 8439c2aa..00000000\n--- a/news/273-1.feature\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-Global section viewlet: Catalog based navigation.\n-Show the global sections also if navigation contains items but tabs are empty.\n-This allows for disabling portal tabs rendering and constructing the navigation only from the catalog query.\n-[thet]\ndiff --git a/news/273-2.feature b/news/273-2.feature\ndeleted file mode 100644\nindex 0453b4f0..00000000\n--- a/news/273-2.feature\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Global sections viewlet: Customize entries and query.\n-Also allow customizing the tabs entries and the navigation query along with the other navigation entries.\n-[thet]\ndiff --git a/news/273-3.feature b/news/273-3.feature\ndeleted file mode 100644\nindex ce4b019f..00000000\n--- a/news/273-3.feature\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Global sections viewlet: Factor out types_using_view.\n-Factor out types_using_view so that this method can be re-used, e.g. in a subclass with a customize_entry method.\n-[thet]\ndiff --git a/news/275.feature b/news/275.feature\ndeleted file mode 100644\nindex dd427e5b..00000000\n--- a/news/275.feature\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-Global sections viewlet performance optimizations:\n-\n-- Remove pointless caching on types_using_view,\n-- Store settings in variable for multiple access, bypassing cache checks,\n-- Remove now pointless caching on settings property,\n-- Deprecate now unused navtree_depth property.\n-[thet]\ndiff --git a/news/280.fix b/news/280.fix\nnew file mode 100644\nindex 00000000..408c622e\n--- /dev/null\n+++ b/news/280.fix\n@@ -0,0 +1,2 @@\n+Escape navigation titles only once.\n+[thomasmassmann]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex e436eeda..d3b56803 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -301,7 +301,9 @@ def navtree(self):\n                     entry["title"], domain="plone", context=self.request\n                 )\n \n-            entry["title"] = safe_unicode(entry["title"])\n+            entry["title"] = escape(safe_unicode(entry["title"]))\n+            if "name" in entry and entry["name"]:\n+                entry["name"] = escape(safe_unicode(entry["name"]))\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n@@ -354,7 +356,7 @@ def navtree(self):\n                 "path": brain_path,\n                 "uid": brain.UID,\n                 "url": url,\n-                "title": safe_unicode(brain.Title),\n+                "title": escape(safe_unicode(brain.Title)),\n                 "review_state": brain.review_state,\n             }\n             self.customize_entry(entry, brain)\n@@ -394,10 +396,6 @@ def render_item(self, item, path):\n                     "has_sub_class": "",\n                 }\n             )\n-        if "title" in item and item["title"]:\n-            item["title"] = escape(item["title"])\n-        if "name" in item and item["name"]:\n-            item["name"] = escape(item["name"])\n         return self._item_markup_template.format(**item)\n \n     def build_tree(self, path, first_run=True):\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 3915e73a..4630391d 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -616,6 +616,27 @@ class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n             navtree["/plone"][1]["url"], "http://nohost/plone/folder1/view"\n         )\n \n+    def test_escaping_twice_does_not_double_escape_items(self):\n+        """Test for https://github.com/plone/plone.app.layout/issues/280."""\n+\n+        self.portal.invokeFactory(\n+            "Document", "test-doc-1", title=u"Document 1 & 2",\n+        )\n+\n+        request = self.layer["request"]\n+        gsv = GlobalSectionsViewlet(self.portal, request, None)\n+        gsv.update()\n+        html = gsv.render()\n+        self.assertIn("Document 1 &amp; 2", html)\n+\n+        # Render again, as this is what happens when an error view is rendered\n+        # Before the fix this test will fail, as it produces a title with\n+        # \'Document 1 &amp;amp; 2\'.\n+        html = gsv.render()\n+        self.assertNotIn("Document 1 &amp;amp; 2", html)\n+        self.assertIn("Document 1 &amp; 2", html)\n+\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\ndiff --git a/setup.py b/setup.py\nindex be6c00be..da1a5684 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "4.0.0a6.dev0"\n+version = "4.0.0a7.dev0"\n \n long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-20T09:47:52+01:00
Author: Florian Danzmann (talarias) <talarias@live.de>
Commit: https://github.com/plone/plone.app.layout/commit/b2dee1fb038bc0b7c36a2e70dbf544b589f80162

Merge branch 'master' into plip-barceloneta_lts_favicon

Files changed:
M CHANGES.rst
M setup.py
D news/280.fix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex cde6b87e..4858a80d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.0a7 (2022-01-19)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Escape navigation titles only once.\n+  [thomasmassmann] (#280)\n+\n+\n 4.0.0a6 (2022-01-07)\n --------------------\n \ndiff --git a/news/280.fix b/news/280.fix\ndeleted file mode 100644\nindex 408c622e..00000000\n--- a/news/280.fix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Escape navigation titles only once.\n-[thomasmassmann]\ndiff --git a/setup.py b/setup.py\nindex da1a5684..2f951a38 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "4.0.0a7.dev0"\n+version = "4.0.0a8.dev0"\n \n long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-27T12:01:41+02:00
Author: Maik Derstappen (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.layout/commit/aadcc12d5b956f91253b6402a6f73262cb89116c

Merge branch 'master' into plip-barceloneta_lts_favicon

Files changed:
M CHANGES.rst
M plone/app/layout/viewlets/common.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4858a80d..5b810432 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,21 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.0a8 (2022-01-25)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Remove (marked for removal im Plone 6) deprecated methods. [jensens] (#285)\n+\n+\n+Bug fixes:\n+\n+\n+- In global sections viewlet fetch registry only one time. Also: Code style black and minor code cleanup. [jensens] (#285)\n+\n+\n 4.0.0a7 (2022-01-19)\n --------------------\n \ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex d3b56803..2c56a5db 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -38,8 +38,8 @@\n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from plone.app.portlets.browser.viewlets instead",\n-    ManagePortletsFallbackViewlet=\'plone.app.portlets.browser.viewlets:ManagePortletsFallbackViewlet\',\n-    FooterViewlet=\'plone.app.portlets.browser.viewlets:FooterViewlet\',\n+    ManagePortletsFallbackViewlet="plone.app.portlets.browser.viewlets:ManagePortletsFallbackViewlet",\n+    FooterViewlet="plone.app.portlets.browser.viewlets:FooterViewlet",\n )\n \n \n@@ -68,7 +68,7 @@ def portal_url(self):\n \n     def update(self):\n         self.portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         self.site_url = self.portal_state.portal_url()\n         self.navigation_root_url = self.portal_state.navigation_root_url()\n@@ -94,7 +94,7 @@ class TitleViewlet(ViewletBase):\n     index = ViewPageTemplateFile("title.pt")\n \n     # seperator of page- and portal-title\n-    sep = u" &mdash; "\n+    sep = " &mdash; "\n \n     @property\n     @memoize\n@@ -133,7 +133,7 @@ def page_title(self):\n             return self.site_title_setting\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return escape(safe_unicode(context_state.object_title()))\n \n@@ -142,7 +142,7 @@ def update(self):\n             self.site_title = self.site_title_setting\n             return\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n@@ -187,7 +187,7 @@ class SiteActionsViewlet(ViewletBase):\n \n     def update(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.site_actions = context_state.actions("site_actions")\n \n@@ -199,7 +199,7 @@ def update(self):\n         super(SearchBoxViewlet, self).update()\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n \n         registry = getUtility(IRegistry)\n@@ -229,57 +229,50 @@ class GlobalSectionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("sections.pt")\n \n     _opener_markup_template = (\n-        u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n-        u\'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n+        \'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n+        \'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n     )\n     _item_markup_template = (\n-        u\'<li class="{id}{has_sub_class} nav-item">\'\n-        u\'<a href="{url}" class="state-{review_state} nav-link"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n-        u"{sub}"\n-        u"</li>"\n+        \'<li class="{id}{has_sub_class} nav-item">\'\n+        \'<a href="{url}" class="state-{review_state} nav-link"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n+        "{sub}"\n+        "</li>"\n     )\n-    _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+    _subtree_markup_wrapper = \'<ul class="has_subtree dropdown">{out}</ul>\'\n+\n+    def __init__(self, *args):\n+        super().__init__(*args)\n+        self.registry = getUtility(IRegistry)\n \n     @property\n     def settings(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(INavigationSchema, prefix="plone")\n-        return settings\n+        return self.registry.forInterface(INavigationSchema, prefix="plone")\n \n     @property\n     def language_settings(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n-        return settings\n+        return self.registry.forInterface(ILanguageSchema, prefix="plone")\n \n     @property\n     def navtree_path(self):\n         return getNavigationRoot(self.context)\n \n-    @property\n-    @deprecate("This property will be removed in Plone 6")\n-    def navtree_depth(self):\n-        return self.settings.navigation_depth\n-\n     @property\n     def current_language(self):\n+        language_settings = self.registry.forInterface(ILanguageSchema, prefix="plone")\n         return (\n             self.request.get("LANGUAGE", None)\n             or (self.context and aq_inner(self.context).Language())\n-            or self.language_settings.default_language\n+            or language_settings.default_language\n         )\n \n     @property\n     def types_using_view(self):\n-        registry = getUtility(IRegistry)\n-        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n-        return types_using_view\n+        return self.registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     @memoize\n     def navtree(self):\n         ret = defaultdict(list)\n-        settings = self.settings\n         navtree_path = self.navtree_path\n         portal_tabs = self.portal_tabs\n         for tab in portal_tabs:\n@@ -307,6 +300,7 @@ def navtree(self):\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n+        settings = self.settings\n         if not settings.generate_tabs:\n             return ret\n \n@@ -338,7 +332,7 @@ def navtree(self):\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n-        types_using_view = self.types_using_view\n+        types_using_view = set(self.types_using_view)\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\n@@ -402,7 +396,7 @@ def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n         """\n-        out = u""\n+        out = ""\n         for item in self.navtree.get(path, []):\n             out += self.render_item(item, path)\n \n@@ -421,54 +415,6 @@ def portal_tabs(self):\n         )\n         return portal_tabs_view.topLevelTabs()\n \n-    @deprecate("This method will be removed in Plone 6")\n-    def selectedTabs(self, default_tab="index_html", portal_tabs=()):\n-        portal = getToolByName(self.context, "portal_url").getPortalObject()\n-        plone_url = getNavigationRootObject(self.context, portal).absolute_url()\n-        plone_url_len = len(plone_url)\n-        request = self.request\n-        valid_actions = []\n-\n-        url = request["URL"]\n-        path = url[plone_url_len:]\n-        path_list = path.split("/")\n-        if len(path_list) <= 1:\n-            return {"portal": default_tab}\n-\n-        for action in portal_tabs:\n-            if not action["url"].startswith(plone_url):\n-                # In this case the action url is an external link. Then, we\n-                # avoid issues (bad portal_tab selection) continuing with next\n-                # action.\n-                continue\n-            action_path = action["url"][plone_url_len:]\n-            if not action_path.startswith("/"):\n-                action_path = "/" + action_path\n-            action_path_list = action_path.split("/")\n-            if action_path_list[1] == path_list[1]:\n-                # Make a list of the action ids, along with the path length\n-                # for choosing the longest (most relevant) path.\n-                valid_actions.append((len(action_path_list), action["id"]))\n-\n-        # Sort by path length, the longest matching path wins\n-        valid_actions.sort()\n-        if valid_actions:\n-            return {"portal": valid_actions[-1][1]}\n-\n-        return {"portal": default_tab}\n-\n-    @property\n-    @memoize\n-    @deprecate("This method will be removed in Plone 6")\n-    def selected_tabs(self):\n-        return self.selectedTabs(portal_tabs=self.portal_tabs)\n-\n-    @property\n-    @memoize\n-    @deprecate("This method will be removed in Plone 6")\n-    def selected_portal_tab(self):\n-        return self.selected_tabs["portal"]\n-\n \n class PersonalBarViewlet(ViewletBase):\n \n@@ -480,7 +426,7 @@ def update(self):\n         context = aq_inner(self.context)\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_context_state"\n+            (context, self.request), name="plone_context_state"\n         )\n \n         user_actions = context_state.actions("user")\n@@ -510,7 +456,7 @@ def update(self):\n             member = self.portal_state.member()\n             userid = member.getId()\n \n-            self.homelink_url = "%s/useractions" % self.navigation_root_url\n+            self.homelink_url = f"{self.navigation_root_url}/useractions"\n \n             membership = getToolByName(context, "portal_membership")\n             member_info = membership.getMemberInfo(userid)\n@@ -551,7 +497,7 @@ def getTabSets(self):\n         context_fti = context.getTypeInfo()\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_context_state"\n+            (context, self.request), name="plone_context_state"\n         )\n         actions = context_state.actions\n \n@@ -666,5 +612,3 @@ def update(self):\n \n class TinyLogoViewlet(ViewletBase):\n     index = ViewPageTemplateFile("tiny_logo.pt")\n-\n-\ndiff --git a/setup.py b/setup.py\nindex 2f951a38..5f2db40e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "4.0.0a8.dev0"\n+version = "4.0.0a9.dev0"\n \n long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-27T13:28:29+02:00
Author: Maik Derstappen (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.layout/commit/9ca2e3e6685800e2109df734824213ba2671f856

Merge pull request #282 from plone/plip-barceloneta_lts_favicon

add favicon

Files changed:
A news/plip-favicon.feature
A plone/app/layout/favicon_handler.py
A plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/configure.zcml
M plone/app/layout/links/favicon.pt
M plone/app/layout/links/viewlets.py

b'diff --git a/news/plip-favicon.feature b/news/plip-favicon.feature\nnew file mode 100644\nindex 00000000..e5cc15a7\n--- /dev/null\n+++ b/news/plip-favicon.feature\n@@ -0,0 +1,2 @@\n+Add viewlet to display customizable favicon with handler to update its MIME-type\n+[talarias]\ndiff --git a/plone/app/layout/configure.zcml b/plone/app/layout/configure.zcml\nindex 7ef16a7e..5b267460 100644\n--- a/plone/app/layout/configure.zcml\n+++ b/plone/app/layout/configure.zcml\n@@ -14,4 +14,8 @@\n \n     <include file="permissions.zcml" />\n \n+    <subscriber\n+        handler=".favicon_handler.updateMimetype"\n+    />\n+\n </configure>\ndiff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nnew file mode 100644\nindex 00000000..329d29b8\n--- /dev/null\n+++ b/plone/app/layout/favicon_handler.py\n@@ -0,0 +1,19 @@\n+from zope.component import adapter\n+from plone.registry.interfaces import IRecordModifiedEvent\n+from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.formwidget.namedfile.converter import b64decode_file\n+import mimetypes\n+from zope.component import getUtility\n+from plone.registry.interfaces import IRegistry\n+from plone.registry.recordsproxy import RecordsProxy\n+\n+\n+@adapter(ISiteSchema, IRecordModifiedEvent)\n+def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n+\n+    if event.record.fieldName != \'site_favicon\' or not event.record.value:\n+        return\n+\n+    filename, data = b64decode_file(event.newValue)\n+    mimetype = mimetypes.guess_type(filename)[0] if filename else \'image/x-icon\'\n+    settings.__registry__[\'plone.site_favicon_mimetype\'] = mimetype\ndiff --git a/plone/app/layout/links/favicon.pt b/plone/app/layout/links/favicon.pt\nindex 9fd38791..0f45640f 100644\n--- a/plone/app/layout/links/favicon.pt\n+++ b/plone/app/layout/links/favicon.pt\n@@ -1,4 +1,6 @@\n <tal:favicon define="portal_url view/site_url">\n-    <link rel="shortcut icon" type="image/x-icon" tal:attributes="href string:$portal_url/favicon.ico" />\n-    <link rel="apple-touch-icon" tal:attributes="href string:$portal_url/touch_icon.png" />\n-</tal:favicon>\n+    <link rel="preload icon" type="${python: view.mimetype}"\n+          tal:attributes="href python: view.favicon_path" />\n+    <link rel="alternate icon" type="image/x-icon">\n+    <link rel="mask-icon" tal:attributes="href python: view.favicon_path" />\n+</tal:favicon>\n\\ No newline at end of file\ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nnew file mode 100644\nindex 00000000..eb5d7494\n--- /dev/null\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -0,0 +1,70 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n+from zope.component import getUtility\n+from plone.namedfile.file import NamedBlobFile\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n+from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.links.viewlets import FaviconViewlet\n+from plone.formwidget.namedfile.converter import b64encode_file\n+\n+\n+class TestFaviconViewletView(ViewletsTestCase, FaviconViewlet):\n+    layer = FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = \'\'\n+        self.site_url = \'\'\n+\n+    def test_FaviconViewlet_get_mimetype_svg(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.svg\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/svg+xml\')\n+\n+    def test_FaviconViewlet_get_mimetype_jpg(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.jpg\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/jpeg\')\n+\n+    def test_FaviconViewlet_get_mimetype_png(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.png\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/png\')\n+\n+    def test_FaviconViewlet_get_mimetype_ico(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        filename = \'test.ico\'\n+        file_data = \'Hello World\'.encode()\n+        encoded_data = b64encode_file(filename=filename, data=file_data)\n+        settings.site_favicon = encoded_data\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/x-icon\')\n+\n+    def test_FaviconViewlet_get_mimetype_none(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n+        settings.site_favicon = None\n+        mimetype = settings.site_favicon_mimetype\n+        self.assertEqual(mimetype, \'image/x-icon\')\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex dff7624b..3948ca77 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -6,7 +6,7 @@\n from plone.memoize import view\n from plone.memoize.compress import xhtml_compress\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n from Products.CMFPlone.interfaces.syndication import IFeedSettings\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from Products.CMFPlone.utils import safe_bytes\n@@ -14,6 +14,9 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.schema.interfaces import IVocabularyFactory\n+from plone.formwidget.namedfile.converter import b64decode_file\n+import mimetypes\n+from typing import NoReturn\n \n \n def get_language(context, request):\n@@ -36,9 +39,28 @@ def render_cachekey(fun, self):\n class FaviconViewlet(ViewletBase):\n \n     _template = ViewPageTemplateFile("favicon.pt")\n+    mimetype: str\n+    favicon_path: str\n \n-    @ram.cache(render_cachekey)\n-    def render(self):\n+    def init_favicon(self) -> NoReturn:\n+        registry = getUtility(IRegistry)\n+        settings: ISiteSchema = registry.forInterface(ISiteSchema, prefix="plone")\n+\n+        self.mimetype: str = settings.site_favicon_mimetype\n+        filename: str = self.get_filename(settings)\n+        self.favicon_path: str = str(self.site_url) + \'/favicon\'\n+        if not filename:\n+            self.favicon_path += \'.ico\'\n+\n+    @staticmethod\n+    def get_filename(settings: ISiteSchema) -> str:\n+        if getattr(settings, \'site_favicon\', False):\n+            filename, data = b64decode_file(settings.site_favicon)\n+            return filename\n+        return None\n+\n+    def render(self) -> ViewPageTemplateFile:\n+        self.init_favicon()\n         return xhtml_compress(self._template())\n \n \n'

