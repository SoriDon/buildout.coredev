Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-03-31T19:56:07+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/5b8d9d85b0276731f869bc93499ac683d7054ad3

Simpler generate gruntfile/ compile resources

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/compile_resources.py
M Products/CMFPlone/_scripts/generate_gruntfile.py

diff --git a/CHANGES.rst b/CHANGES.rst
index db5bfba..f84bf06 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -33,6 +33,11 @@ Incompatibilities:
 
 New:
 
+- Deprecated Gruntfile generation script ``plone-generate-gruntfile``. 
+  Modified the ``plone-compile-resources`` script to support more parameters in order to take over that single task too. 
+  Also clean up of parameters, better help and refactored parts of the code.
+  [jensens]
+
 - Upgrade to tinymce to 4.3.4
   [vangheem]
 
@@ -46,8 +51,7 @@ New:
 - Control panel to mange portal actions
   [ebrehault]
 
-- new less variable to configure the width of the toolbars submenu called
-  ``plone-toolbar-submenu-width``.
+- new less variable to configure the width of the toolbars submenu called ``plone-toolbar-submenu-width``.
   [jensens]
 
 - new zcml feature "plone-51" added. Profile version set to 5101.
diff --git a/Products/CMFPlone/_scripts/compile_resources.py b/Products/CMFPlone/_scripts/compile_resources.py
index 323fffd..470f6b8 100644
--- a/Products/CMFPlone/_scripts/compile_resources.py
+++ b/Products/CMFPlone/_scripts/compile_resources.py
@@ -1,49 +1,134 @@
+# -*- coding: utf-8 -*-
 import argparse
 import os
 import sys
-from Products.CMFPlone._scripts import generate_gruntfile
 import subprocess
 
-parser = argparse.ArgumentParser(
-    description='Compile plone bundle JS/LESS')
-parser.add_argument('--site-id', dest='site_id',
-                    default='Plone', help='ID for the plone site id')
-parser.add_argument('--grunt', dest='grunt',
-                    help='path to grunt executable. If not provided, '
-                         'will look in path')
-parser.add_argument('--instance', dest='instance',
-                    help='path to instance executable. If not provided, '
-                         'will look in bin this was executed from for '
-                         'instance or client1')
-parser.add_argument('--bundle', dest='bundle', default='all',
-                    help='Name of bundle to compile. Defaults to all of them.')
-parser.add_argument('--compile-dir', dest='compile_dir', default='',
-                    help='Output directory for the compiled bundle files.')
-
 this_dir = os.path.dirname(os.path.realpath(__file__))
 
-
 package_json_contents = """{
   "name": "gruntrunner",
-  "version": "1.0.0",
+  "version": "1.0.1",
   "private": true,
   "devDependencies": {
-    "grunt": "~0.4.4",
-    "grunt-contrib-less": "1.0.1",
-    "less-plugin-inline-urls": "^1.1.0",
-    "grunt-contrib-requirejs": "~0.4.3",
-    "grunt-contrib-uglify": "",
-    "grunt-contrib-watch": "~0.5.3",
-    "grunt-sed": "",
-    "grunt-debug-task": "~0.1.5"
+    "grunt": "~0.4.5",
+    "grunt-contrib-less": "1.2.0",
+    "grunt-contrib-requirejs": "~1.0.0",
+    "grunt-contrib-uglify": "~1.0.1",
+    "grunt-contrib-watch": "~1.0.0",
+    "grunt-debug-task": "~0.1.8",
+    "grunt-sed": "~0.1.1",
+    "less-plugin-inline-urls": "^1.1.0"
   }
 }"""
 
 
+def generate_package_json(base_path):
+    # generate package.json file here if not exists...
+    package_json = os.path.join(base_path, 'package.json')
+    if not os.path.exists(package_json):
+        with open(package_json, 'w') as fi:
+            fi.write(package_json_contents)
+
+
+def generate_gruntfile(base_path, instance, site_id, compile_dir):
+    if not instance:
+        # look for it, get bin directory, search for plone instance
+        bin_path = os.path.join(base_path, 'bin')
+        files = os.listdir(bin_path)
+        if 'instance' in files:
+            instance = os.path.join(bin_path, 'instance')
+        elif 'client1' in files:
+            instance = os.path.join(bin_path, 'client1')
+    if not instance:
+        print("Could not find plone instance to run command against.")
+        sys.exit()
+    script_path = os.path.join(this_dir, '_generate_gruntfile.py')
+    cmd = [instance, 'run', script_path]
+    os.environ['SITE_ID'] = site_id
+    os.environ['COMPILE_DIR'] = compile_dir
+    print('Running command: %s' % ' '.join(cmd))
+    subprocess.check_call(cmd, env=os.environ)
+    print('Grunfile generated.')
+
+
 def main(argv=sys.argv):
+    parser = argparse.ArgumentParser(
+        description='Generate and setup Grunt infrastructure, '
+                    'then compile JS/LESS bundles for Plone.',
+        formatter_class=argparse.ArgumentDefaultsHelpFormatter
+    )
+    parser.add_argument(
+        '-i',
+        '--instance',
+        dest='instance',
+        help='path to instance executable. If not provided, '
+             'will look in bin this was executed from for '
+             'instance or client1'
+        )
+    parser.add_argument(
+        '-s',
+        '--site-id',
+        dest='site_id',
+        default='Plone',
+        help='ID of the Plone site to fetch the configuration from. '
+             'Used only while Gruntfile generation.'
+    )
+    parser.add_argument(
+        '-b',
+        '--bundle',
+        dest='bundle',
+        default='all',
+        help='Name of bundle to compile. Used while compile step.'
+    )
+    parser.add_argument(
+        '--compile-dir',
+        dest='compile_dir',
+        default='',
+        help='Output directory for the compiled bundle files. '
+             'Used only while Gruntfile generation. '
+             'If not given the directory is looked up from Plone registry. '
+    )
+    parser.add_argument(
+        '-g',
+        '--grunt',
+        dest='grunt_bin',
+        help='path to grunt executable. If not provided, '
+             'will look in system path.'
+    )
+    parser.add_argument(
+        '-d',
+        '--base-dir',
+        dest='base_dir',
+        default='.',
+        help='Base directory for this script '
+             '(by default current working directory).'
+    )
+    parser.add_argument(
+        '-G',
+        '--skip-generate-gruntfile',
+        dest='skip_gruntfile',
+        action='store_true',
+        help='Skip generation of Gruntfile.js'
+    )
+    parser.add_argument(
+        '-I',
+        '--skip-npm-install',
+        dest='skip_npminstall',
+        action='store_true',
+        help='Skip npm install step',
+    )
+    parser.add_argument(
+        '-C',
+        '--skip-compile',
+        dest='skip_compile',
+        action='store_true',
+        help='Skip compile step (running grunt)',
+    )
+
     args = parser.parse_args()
 
-    grunt = args.grunt
+    grunt = args.grunt_bin
 
     if not grunt:
         if 'PATH' in os.environ:
@@ -62,28 +147,44 @@ def main(argv=sys.argv):
         print('Error: no grunt executable found. Exiting')
         sys.exit(0)
 
-    generate_gruntfile.main(args)
+    base_path = args.base_dir
+    if base_path == '.':
+        base_path = os.getcwd()
+
+    if not args.skip_gruntfile:
+        generate_gruntfile(
+            base_path,
+            args.instance,
+            args.site_id,
+            args.compile_dir
+        )
 
-    # XXX is this a good way to do it?
-    base_path = os.path.sep.join(
-        os.path.abspath(sys.argv[0]).split(os.path.sep)[:-2])
     gruntfile = os.path.join(base_path, 'Gruntfile.js')
 
     if not os.path.exists(gruntfile):
-        print("Error, no Gruntfile.js generated at %s where expected" % gruntfile)
-
-    # generate package.json file here if not exists...
-    package_json = os.path.join(base_path, 'package.json')
-    if not os.path.exists(package_json):
-        fi = open(package_json, 'w')
-        fi.write(package_json_contents)
-        fi.close()
-
-    cmd = ['npm', 'install']
-    print('Setup npm env')
-    print('Running command: %s' % ' '.join(cmd))
-    subprocess.check_call(cmd)
-
-    cmd = [grunt, '--gruntfile=%s' % gruntfile, 'compile-%s' % args.bundle]
-    print('Running command: %s' % ' '.join(cmd))
-    subprocess.check_call(cmd)
+        print(
+            "Error, no Gruntfile.js generated at {0} where expected".format(
+                gruntfile
+            )
+        )
+
+    # generates only if not already there
+    generate_package_json(base_path)
+
+    if not args.skip_npminstall:
+        cmd = ['npm', 'install']
+        print('Setup npm env')
+        print('Running command: %s' % ' '.join(cmd))
+        subprocess.check_call(cmd)
+
+    if not args.skip_compile:
+        print('Compile {0}'.format(args.bundle))
+        cmd = [
+            grunt,
+            '--gruntfile={0}'.format(gruntfile),
+            'compile-{0}'.format(args.bundle)
+        ]
+        print('Running command: %s' % ' '.join(cmd))
+        subprocess.check_call(cmd)
+
+    print('Done.')
diff --git a/Products/CMFPlone/_scripts/generate_gruntfile.py b/Products/CMFPlone/_scripts/generate_gruntfile.py
index a83cb11..a7bde25 100644
--- a/Products/CMFPlone/_scripts/generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/generate_gruntfile.py
@@ -1,11 +1,12 @@
-#
+# -*- coding: utf-8 -*-
+# DEPRECATED
 # This is more of a script runner for the _generate_gruntfile.py
 # script. Just a wrapper so that script can be simply called
 # from the bin directory
-import os
+from Products.CMFPlone._scripts.compile_resources import generate_gruntfile
 import argparse
+import os
 import sys
-import subprocess
 
 parser = argparse.ArgumentParser(
     description='Generate Gruntfile.js from a Plone site configuration')
@@ -18,29 +19,26 @@
 parser.add_argument('--compile-dir', dest='compile_dir', default='',
                     help='Output directory for the compiled bundle files.')
 
-this_dir = os.path.dirname(os.path.realpath(__file__))
-
 
 def main(argv=sys.argv):
+    print ('-' * 80)
+    print(
+        'DEPRECATED: {0}\n'
+        'Use "bin/plone-compile-resources -IC [other params]" instead.\n'
+        'For more information use "bin/plone-compile-resources --help"'.format(
+            argv[0]
+        )
+    )
+    print ('-' * 80)
     args, _ = parser.parse_known_args()
-    instance = args.instance
-    if not instance:
-        # look for it, get bin directory, search for plone instance
-        bin_path = os.path.sep.join(
-            os.path.abspath(sys.argv[0]).split(os.path.sep)[:-1])
-        files = os.listdir(bin_path)
-        if 'instance' in files:
-            instance = os.path.join(bin_path, 'instance')
-        elif 'client1' in files:
-            instance = os.path.join(bin_path, 'client1')
-    if not instance:
-        print("Could not find plone instance to run command against.")
-        sys.exit()
-    script_path = os.path.join(this_dir, '_generate_gruntfile.py')
-    cmd = [instance, 'run', script_path]
-    os.environ['SITE_ID'] = args.site_id
-    os.environ['COMPILE_DIR'] = args.compile_dir
+    # XXX is this a good way to do it?
+    base_path = os.path.sep.join(
+        os.path.abspath(sys.argv[0]).split(os.path.sep)[:-2])
 
-    print('Running command: %s' % ' '.join(cmd))
-    subprocess.check_call(cmd, env=os.environ)
-    print('Grunfile generated.')
+    generate_gruntfile(
+        base_path,
+        args.instance,
+        args.site_id,
+        args.compile_dir
+    )
+    print('DONE DEPRECATED {0} (see above)'.format(argv[0]))


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-03-31T19:57:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/ab06f0c92df2571de45a2d9405546975638c0f93

Gruntfile failed if only css or only js was registered.

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/_generate_gruntfile.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f84bf06..a2ab3da 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,11 +14,15 @@ Incompatibilities:
 
 New:
 
-- *add item here*
+- Deprecated Gruntfile generation script ``plone-generate-gruntfile``. 
+  Modified the ``plone-compile-resources`` script to support more parameters in order to take over that single task too. 
+  Also clean up of parameters, better help and refactored parts of the code.
+  [jensens]
 
 Fixes:
 
-- *add item here*
+- Gruntfile failed if only css or only javascripts were registered.
+  [jensens]
 
 
 5.1a1 (2016-03-31)
@@ -33,11 +37,6 @@ Incompatibilities:
 
 New:
 
-- Deprecated Gruntfile generation script ``plone-generate-gruntfile``. 
-  Modified the ``plone-compile-resources`` script to support more parameters in order to take over that single task too. 
-  Also clean up of parameters, better help and refactored parts of the code.
-  [jensens]
-
 - Upgrade to tinymce to 4.3.4
   [vangheem]
 
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 4558e13..bfa3e38 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -40,7 +40,7 @@
     IResourceRegistry, prefix="plone.resources", check=False)  # noqa
 lessvariables = registry.records['plone.lessvariables'].value
 
-gruntfile_template = """
+GRUNTFILE_TEMPLATE = """
 module.exports = function(grunt) {{
     'use strict';
     grunt.initConfig({{
@@ -73,11 +73,12 @@
 
     grunt.registerTask('default', ['watch']);
     grunt.registerTask('compile-all', ['requirejs', 'less', 'sed', 'uglify']);
-    {bundleTasks}
+
+{bundleTasks}
 }}
 """
 
-sed_config = """
+SED_CONFIG_TEMPLATE = """
     {name}: {{
       path: '{path}',
       pattern: '{pattern}',
@@ -85,7 +86,7 @@
     }},
 """
 
-requirejs_config = """
+REQUIREJS_CONFIG_TEMPLATE = """
             "{bkey}": {{
                 options: {{
                     baseUrl: '/',
@@ -101,7 +102,7 @@
                 }}
             }},
 """
-uglify_config = """
+UGLIFY_CONFIG_TEMPLATE = """
         "{bkey}": {{
           options: {{
             sourceMap: true,
@@ -114,7 +115,7 @@
         }},
 """
 
-less_config = """
+LESS_CONFIG_TEMPLATE = """
             "{name}": {{
                 files: [
                     {files}
@@ -139,6 +140,8 @@
             }}
 """
 
+COMPILE_TASK_TEMPLATE = "    grunt.registerTask('compile-{name}', {tasks})\n"
+
 
 def resource_to_dir(resource, file_type='.js'):
     if resource.__module__ == 'Products.Five.metaclass':
@@ -323,10 +326,10 @@ def resource_to_dir(resource, file_type='.js'):
 # BUNDLE LOOP
 
 require_configs = ""
-uglify_configs = ""
-less_configs = []
+uglify_cfgs_final = ""
+less_cfgs_final = []
 sourceMap_url = ""
-sed_config_final = ""
+sed_cfg_final = ""
 watch_files = []
 sed_count = 0
 bundle_grunt_tasks = ""
@@ -379,7 +382,7 @@ def resource_to_dir(resource, file_type='.js'):
                     if bundle.stub_js_modules:
                         for stub in bundle.stub_js_modules:
                             rjs_paths[stub] = 'empty:'
-                    rc = requirejs_config.format(
+                    rc = REQUIREJS_CONFIG_TEMPLATE.format(
                         bkey=resource,
                         paths=json.dumps(rjs_paths),
                         shims=json.dumps(shims),
@@ -399,45 +402,44 @@ def resource_to_dir(resource, file_type='.js'):
 
                 for css_file in res_obj.css:
                     css = portal.unrestrictedTraverse(css_file, None)
-                    if css:
-                        # We count how many folders to bundle to plone
-                        elements = len(css_file.split('/'))
-                        relative_paths = '../' * (elements - 1)
-
-                        main_css_path = resource_to_dir(css)
-                        dest_path = '{}/{}'.format(
-                            css_target_path, css_target_name)
-                        less_files.setdefault(dest_path, [])
-                        less_files[dest_path].append(main_css_path)
-                        sourceMap_url = css_target_name + '.map'
-                        watch_files.append(main_css_path)
-                        # replace urls
-
-                        for webpath, direc in less_directories.items():
-                            sed_id = 'sed' + str(sed_count)
-                            sed_task_ids.append("'sed:%s'" % sed_id)
-                            sed_config_final += sed_config.format(
-                                path=css_target_path + '/' + css_target_name,
-                                name=sed_id,
-                                pattern=direc,
-                                destination=relative_paths + webpath)
-                            sed_count += 1
-
-                        # replace the final missing paths
+                    if not css:
+                        print "No file found: " + css_file
+                        continue
+                    # We count how many folders to bundle to plone
+                    elements = len(css_file.split('/'))
+                    relative_paths = '../' * (elements - 1)
+
+                    main_css_path = resource_to_dir(css)
+                    dest_path = '{}/{}'.format(
+                        css_target_path, css_target_name)
+                    less_files.setdefault(dest_path, [])
+                    less_files[dest_path].append(main_css_path)
+                    sourceMap_url = css_target_name + '.map'
+                    watch_files.append(main_css_path)
+                    # replace urls
+
+                    for webpath, direc in less_directories.items():
                         sed_id = 'sed' + str(sed_count)
-                        sed_task_ids.append("'sed:%s'" % sed_id)
-                        sed_config_final += sed_config.format(
+                        sed_task_ids.append('sed:{0}'.format(sed_id))
+                        sed_cfg_final += SED_CONFIG_TEMPLATE.format(
                             path=css_target_path + '/' + css_target_name,
                             name=sed_id,
-                            pattern=os.getcwd(),
-                            destination='')
+                            pattern=direc,
+                            destination=relative_paths + webpath)
                         sed_count += 1
 
-                    else:
-                        print "No file found: " + script.js
+                    # replace the final missing paths
+                    sed_id = 'sed' + str(sed_count)
+                    sed_task_ids.append('sed:{0}'.format(sed_id))
+                    sed_cfg_final += SED_CONFIG_TEMPLATE.format(
+                        path=css_target_path + '/' + css_target_name,
+                        name=sed_id,
+                        pattern=os.getcwd(),
+                        destination='')
+                    sed_count += 1
 
         if less_files:
-            less_configs.append(less_config.format(
+            less_cfgs_final.append(LESS_CONFIG_TEMPLATE.format(
                 name=bkey,
                 globalVars=globalVars_string,
                 files=json.dumps(less_files),
@@ -451,30 +453,40 @@ def resource_to_dir(resource, file_type='.js'):
                     'Missing or empty <value key="jscompilation" /> '
                     'in {}'.format(bundle.__prefix__))
 
-            uc = uglify_config.format(
+            uc = UGLIFY_CONFIG_TEMPLATE.format(
                 bkey=bkey,
                 destination=js_target_path + '/' + js_target_name,
                 files=json.dumps(js_files)
             )
-            uglify_configs += uc
+            uglify_cfgs_final += uc
 
         requirejs_tasks = ''
         if js_resources:
             requirejs_tasks = ','.join(
-                ['"requirejs:' + r + '"' for r in js_resources]) + ','
-        bundle_grunt_tasks += (
-            "\ngrunt.registerTask('compile-%s',"
-            "[%s 'less:%s', %s, 'uglify:%s']);"
-        ) % (bkey, requirejs_tasks, bkey, ', '.join(sed_task_ids), bkey)
+                ['"requirejs:' + r + '"' for r in js_resources]
+            )
 
+        # collect tasks in order
+        tasks = []
+        for js_res in js_resources:
+            tasks.append('requirejs:{0}'.format(js_res))
+        if less_files:
+            tasks.append('less:{0}'.format(bkey))
+        tasks += sed_task_ids
+        if js_files:
+            tasks.append('uglify:{0}'.format(bkey))
+        bundle_grunt_tasks += COMPILE_TASK_TEMPLATE.format(
+            name=bkey,
+            tasks=json.dumps(tasks)
+        )
 
 with open('Gruntfile.js', 'w') as gruntfile:
     gruntfile.write(
-        gruntfile_template.format(
-            less=','.join(less_configs),
+        GRUNTFILE_TEMPLATE.format(
+            less=','.join(less_cfgs_final),
             requirejs=require_configs,
-            uglify=uglify_configs,
-            sed=sed_config_final,
+            uglify=uglify_cfgs_final,
+            sed=sed_cfg_final,
             files=json.dumps(watch_files),
             bundleTasks=bundle_grunt_tasks
         )


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-03-31T21:15:48+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/47038e8cd230becfafea6b941c90bcd0bab4c98f

Merge pull request #1500 from plone/jensens/compile-resources-overhaul

Simpler generate gruntfile/ compile resources

Files changed:
M CHANGES.rst
M Products/CMFPlone/_scripts/_generate_gruntfile.py
M Products/CMFPlone/_scripts/compile_resources.py
M Products/CMFPlone/_scripts/generate_gruntfile.py

diff --git a/CHANGES.rst b/CHANGES.rst
index db5bfba..a2ab3da 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,11 +14,15 @@ Incompatibilities:
 
 New:
 
-- *add item here*
+- Deprecated Gruntfile generation script ``plone-generate-gruntfile``. 
+  Modified the ``plone-compile-resources`` script to support more parameters in order to take over that single task too. 
+  Also clean up of parameters, better help and refactored parts of the code.
+  [jensens]
 
 Fixes:
 
-- *add item here*
+- Gruntfile failed if only css or only javascripts were registered.
+  [jensens]
 
 
 5.1a1 (2016-03-31)
@@ -46,8 +50,7 @@ New:
 - Control panel to mange portal actions
   [ebrehault]
 
-- new less variable to configure the width of the toolbars submenu called
-  ``plone-toolbar-submenu-width``.
+- new less variable to configure the width of the toolbars submenu called ``plone-toolbar-submenu-width``.
   [jensens]
 
 - new zcml feature "plone-51" added. Profile version set to 5101.
diff --git a/Products/CMFPlone/_scripts/_generate_gruntfile.py b/Products/CMFPlone/_scripts/_generate_gruntfile.py
index 4558e13..bfa3e38 100644
--- a/Products/CMFPlone/_scripts/_generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/_generate_gruntfile.py
@@ -40,7 +40,7 @@
     IResourceRegistry, prefix="plone.resources", check=False)  # noqa
 lessvariables = registry.records['plone.lessvariables'].value
 
-gruntfile_template = """
+GRUNTFILE_TEMPLATE = """
 module.exports = function(grunt) {{
     'use strict';
     grunt.initConfig({{
@@ -73,11 +73,12 @@
 
     grunt.registerTask('default', ['watch']);
     grunt.registerTask('compile-all', ['requirejs', 'less', 'sed', 'uglify']);
-    {bundleTasks}
+
+{bundleTasks}
 }}
 """
 
-sed_config = """
+SED_CONFIG_TEMPLATE = """
     {name}: {{
       path: '{path}',
       pattern: '{pattern}',
@@ -85,7 +86,7 @@
     }},
 """
 
-requirejs_config = """
+REQUIREJS_CONFIG_TEMPLATE = """
             "{bkey}": {{
                 options: {{
                     baseUrl: '/',
@@ -101,7 +102,7 @@
                 }}
             }},
 """
-uglify_config = """
+UGLIFY_CONFIG_TEMPLATE = """
         "{bkey}": {{
           options: {{
             sourceMap: true,
@@ -114,7 +115,7 @@
         }},
 """
 
-less_config = """
+LESS_CONFIG_TEMPLATE = """
             "{name}": {{
                 files: [
                     {files}
@@ -139,6 +140,8 @@
             }}
 """
 
+COMPILE_TASK_TEMPLATE = "    grunt.registerTask('compile-{name}', {tasks})\n"
+
 
 def resource_to_dir(resource, file_type='.js'):
     if resource.__module__ == 'Products.Five.metaclass':
@@ -323,10 +326,10 @@ def resource_to_dir(resource, file_type='.js'):
 # BUNDLE LOOP
 
 require_configs = ""
-uglify_configs = ""
-less_configs = []
+uglify_cfgs_final = ""
+less_cfgs_final = []
 sourceMap_url = ""
-sed_config_final = ""
+sed_cfg_final = ""
 watch_files = []
 sed_count = 0
 bundle_grunt_tasks = ""
@@ -379,7 +382,7 @@ def resource_to_dir(resource, file_type='.js'):
                     if bundle.stub_js_modules:
                         for stub in bundle.stub_js_modules:
                             rjs_paths[stub] = 'empty:'
-                    rc = requirejs_config.format(
+                    rc = REQUIREJS_CONFIG_TEMPLATE.format(
                         bkey=resource,
                         paths=json.dumps(rjs_paths),
                         shims=json.dumps(shims),
@@ -399,45 +402,44 @@ def resource_to_dir(resource, file_type='.js'):
 
                 for css_file in res_obj.css:
                     css = portal.unrestrictedTraverse(css_file, None)
-                    if css:
-                        # We count how many folders to bundle to plone
-                        elements = len(css_file.split('/'))
-                        relative_paths = '../' * (elements - 1)
-
-                        main_css_path = resource_to_dir(css)
-                        dest_path = '{}/{}'.format(
-                            css_target_path, css_target_name)
-                        less_files.setdefault(dest_path, [])
-                        less_files[dest_path].append(main_css_path)
-                        sourceMap_url = css_target_name + '.map'
-                        watch_files.append(main_css_path)
-                        # replace urls
-
-                        for webpath, direc in less_directories.items():
-                            sed_id = 'sed' + str(sed_count)
-                            sed_task_ids.append("'sed:%s'" % sed_id)
-                            sed_config_final += sed_config.format(
-                                path=css_target_path + '/' + css_target_name,
-                                name=sed_id,
-                                pattern=direc,
-                                destination=relative_paths + webpath)
-                            sed_count += 1
-
-                        # replace the final missing paths
+                    if not css:
+                        print "No file found: " + css_file
+                        continue
+                    # We count how many folders to bundle to plone
+                    elements = len(css_file.split('/'))
+                    relative_paths = '../' * (elements - 1)
+
+                    main_css_path = resource_to_dir(css)
+                    dest_path = '{}/{}'.format(
+                        css_target_path, css_target_name)
+                    less_files.setdefault(dest_path, [])
+                    less_files[dest_path].append(main_css_path)
+                    sourceMap_url = css_target_name + '.map'
+                    watch_files.append(main_css_path)
+                    # replace urls
+
+                    for webpath, direc in less_directories.items():
                         sed_id = 'sed' + str(sed_count)
-                        sed_task_ids.append("'sed:%s'" % sed_id)
-                        sed_config_final += sed_config.format(
+                        sed_task_ids.append('sed:{0}'.format(sed_id))
+                        sed_cfg_final += SED_CONFIG_TEMPLATE.format(
                             path=css_target_path + '/' + css_target_name,
                             name=sed_id,
-                            pattern=os.getcwd(),
-                            destination='')
+                            pattern=direc,
+                            destination=relative_paths + webpath)
                         sed_count += 1
 
-                    else:
-                        print "No file found: " + script.js
+                    # replace the final missing paths
+                    sed_id = 'sed' + str(sed_count)
+                    sed_task_ids.append('sed:{0}'.format(sed_id))
+                    sed_cfg_final += SED_CONFIG_TEMPLATE.format(
+                        path=css_target_path + '/' + css_target_name,
+                        name=sed_id,
+                        pattern=os.getcwd(),
+                        destination='')
+                    sed_count += 1
 
         if less_files:
-            less_configs.append(less_config.format(
+            less_cfgs_final.append(LESS_CONFIG_TEMPLATE.format(
                 name=bkey,
                 globalVars=globalVars_string,
                 files=json.dumps(less_files),
@@ -451,30 +453,40 @@ def resource_to_dir(resource, file_type='.js'):
                     'Missing or empty <value key="jscompilation" /> '
                     'in {}'.format(bundle.__prefix__))
 
-            uc = uglify_config.format(
+            uc = UGLIFY_CONFIG_TEMPLATE.format(
                 bkey=bkey,
                 destination=js_target_path + '/' + js_target_name,
                 files=json.dumps(js_files)
             )
-            uglify_configs += uc
+            uglify_cfgs_final += uc
 
         requirejs_tasks = ''
         if js_resources:
             requirejs_tasks = ','.join(
-                ['"requirejs:' + r + '"' for r in js_resources]) + ','
-        bundle_grunt_tasks += (
-            "\ngrunt.registerTask('compile-%s',"
-            "[%s 'less:%s', %s, 'uglify:%s']);"
-        ) % (bkey, requirejs_tasks, bkey, ', '.join(sed_task_ids), bkey)
+                ['"requirejs:' + r + '"' for r in js_resources]
+            )
 
+        # collect tasks in order
+        tasks = []
+        for js_res in js_resources:
+            tasks.append('requirejs:{0}'.format(js_res))
+        if less_files:
+            tasks.append('less:{0}'.format(bkey))
+        tasks += sed_task_ids
+        if js_files:
+            tasks.append('uglify:{0}'.format(bkey))
+        bundle_grunt_tasks += COMPILE_TASK_TEMPLATE.format(
+            name=bkey,
+            tasks=json.dumps(tasks)
+        )
 
 with open('Gruntfile.js', 'w') as gruntfile:
     gruntfile.write(
-        gruntfile_template.format(
-            less=','.join(less_configs),
+        GRUNTFILE_TEMPLATE.format(
+            less=','.join(less_cfgs_final),
             requirejs=require_configs,
-            uglify=uglify_configs,
-            sed=sed_config_final,
+            uglify=uglify_cfgs_final,
+            sed=sed_cfg_final,
             files=json.dumps(watch_files),
             bundleTasks=bundle_grunt_tasks
         )
diff --git a/Products/CMFPlone/_scripts/compile_resources.py b/Products/CMFPlone/_scripts/compile_resources.py
index 323fffd..470f6b8 100644
--- a/Products/CMFPlone/_scripts/compile_resources.py
+++ b/Products/CMFPlone/_scripts/compile_resources.py
@@ -1,49 +1,134 @@
+# -*- coding: utf-8 -*-
 import argparse
 import os
 import sys
-from Products.CMFPlone._scripts import generate_gruntfile
 import subprocess
 
-parser = argparse.ArgumentParser(
-    description='Compile plone bundle JS/LESS')
-parser.add_argument('--site-id', dest='site_id',
-                    default='Plone', help='ID for the plone site id')
-parser.add_argument('--grunt', dest='grunt',
-                    help='path to grunt executable. If not provided, '
-                         'will look in path')
-parser.add_argument('--instance', dest='instance',
-                    help='path to instance executable. If not provided, '
-                         'will look in bin this was executed from for '
-                         'instance or client1')
-parser.add_argument('--bundle', dest='bundle', default='all',
-                    help='Name of bundle to compile. Defaults to all of them.')
-parser.add_argument('--compile-dir', dest='compile_dir', default='',
-                    help='Output directory for the compiled bundle files.')
-
 this_dir = os.path.dirname(os.path.realpath(__file__))
 
-
 package_json_contents = """{
   "name": "gruntrunner",
-  "version": "1.0.0",
+  "version": "1.0.1",
   "private": true,
   "devDependencies": {
-    "grunt": "~0.4.4",
-    "grunt-contrib-less": "1.0.1",
-    "less-plugin-inline-urls": "^1.1.0",
-    "grunt-contrib-requirejs": "~0.4.3",
-    "grunt-contrib-uglify": "",
-    "grunt-contrib-watch": "~0.5.3",
-    "grunt-sed": "",
-    "grunt-debug-task": "~0.1.5"
+    "grunt": "~0.4.5",
+    "grunt-contrib-less": "1.2.0",
+    "grunt-contrib-requirejs": "~1.0.0",
+    "grunt-contrib-uglify": "~1.0.1",
+    "grunt-contrib-watch": "~1.0.0",
+    "grunt-debug-task": "~0.1.8",
+    "grunt-sed": "~0.1.1",
+    "less-plugin-inline-urls": "^1.1.0"
   }
 }"""
 
 
+def generate_package_json(base_path):
+    # generate package.json file here if not exists...
+    package_json = os.path.join(base_path, 'package.json')
+    if not os.path.exists(package_json):
+        with open(package_json, 'w') as fi:
+            fi.write(package_json_contents)
+
+
+def generate_gruntfile(base_path, instance, site_id, compile_dir):
+    if not instance:
+        # look for it, get bin directory, search for plone instance
+        bin_path = os.path.join(base_path, 'bin')
+        files = os.listdir(bin_path)
+        if 'instance' in files:
+            instance = os.path.join(bin_path, 'instance')
+        elif 'client1' in files:
+            instance = os.path.join(bin_path, 'client1')
+    if not instance:
+        print("Could not find plone instance to run command against.")
+        sys.exit()
+    script_path = os.path.join(this_dir, '_generate_gruntfile.py')
+    cmd = [instance, 'run', script_path]
+    os.environ['SITE_ID'] = site_id
+    os.environ['COMPILE_DIR'] = compile_dir
+    print('Running command: %s' % ' '.join(cmd))
+    subprocess.check_call(cmd, env=os.environ)
+    print('Grunfile generated.')
+
+
 def main(argv=sys.argv):
+    parser = argparse.ArgumentParser(
+        description='Generate and setup Grunt infrastructure, '
+                    'then compile JS/LESS bundles for Plone.',
+        formatter_class=argparse.ArgumentDefaultsHelpFormatter
+    )
+    parser.add_argument(
+        '-i',
+        '--instance',
+        dest='instance',
+        help='path to instance executable. If not provided, '
+             'will look in bin this was executed from for '
+             'instance or client1'
+        )
+    parser.add_argument(
+        '-s',
+        '--site-id',
+        dest='site_id',
+        default='Plone',
+        help='ID of the Plone site to fetch the configuration from. '
+             'Used only while Gruntfile generation.'
+    )
+    parser.add_argument(
+        '-b',
+        '--bundle',
+        dest='bundle',
+        default='all',
+        help='Name of bundle to compile. Used while compile step.'
+    )
+    parser.add_argument(
+        '--compile-dir',
+        dest='compile_dir',
+        default='',
+        help='Output directory for the compiled bundle files. '
+             'Used only while Gruntfile generation. '
+             'If not given the directory is looked up from Plone registry. '
+    )
+    parser.add_argument(
+        '-g',
+        '--grunt',
+        dest='grunt_bin',
+        help='path to grunt executable. If not provided, '
+             'will look in system path.'
+    )
+    parser.add_argument(
+        '-d',
+        '--base-dir',
+        dest='base_dir',
+        default='.',
+        help='Base directory for this script '
+             '(by default current working directory).'
+    )
+    parser.add_argument(
+        '-G',
+        '--skip-generate-gruntfile',
+        dest='skip_gruntfile',
+        action='store_true',
+        help='Skip generation of Gruntfile.js'
+    )
+    parser.add_argument(
+        '-I',
+        '--skip-npm-install',
+        dest='skip_npminstall',
+        action='store_true',
+        help='Skip npm install step',
+    )
+    parser.add_argument(
+        '-C',
+        '--skip-compile',
+        dest='skip_compile',
+        action='store_true',
+        help='Skip compile step (running grunt)',
+    )
+
     args = parser.parse_args()
 
-    grunt = args.grunt
+    grunt = args.grunt_bin
 
     if not grunt:
         if 'PATH' in os.environ:
@@ -62,28 +147,44 @@ def main(argv=sys.argv):
         print('Error: no grunt executable found. Exiting')
         sys.exit(0)
 
-    generate_gruntfile.main(args)
+    base_path = args.base_dir
+    if base_path == '.':
+        base_path = os.getcwd()
+
+    if not args.skip_gruntfile:
+        generate_gruntfile(
+            base_path,
+            args.instance,
+            args.site_id,
+            args.compile_dir
+        )
 
-    # XXX is this a good way to do it?
-    base_path = os.path.sep.join(
-        os.path.abspath(sys.argv[0]).split(os.path.sep)[:-2])
     gruntfile = os.path.join(base_path, 'Gruntfile.js')
 
     if not os.path.exists(gruntfile):
-        print("Error, no Gruntfile.js generated at %s where expected" % gruntfile)
-
-    # generate package.json file here if not exists...
-    package_json = os.path.join(base_path, 'package.json')
-    if not os.path.exists(package_json):
-        fi = open(package_json, 'w')
-        fi.write(package_json_contents)
-        fi.close()
-
-    cmd = ['npm', 'install']
-    print('Setup npm env')
-    print('Running command: %s' % ' '.join(cmd))
-    subprocess.check_call(cmd)
-
-    cmd = [grunt, '--gruntfile=%s' % gruntfile, 'compile-%s' % args.bundle]
-    print('Running command: %s' % ' '.join(cmd))
-    subprocess.check_call(cmd)
+        print(
+            "Error, no Gruntfile.js generated at {0} where expected".format(
+                gruntfile
+            )
+        )
+
+    # generates only if not already there
+    generate_package_json(base_path)
+
+    if not args.skip_npminstall:
+        cmd = ['npm', 'install']
+        print('Setup npm env')
+        print('Running command: %s' % ' '.join(cmd))
+        subprocess.check_call(cmd)
+
+    if not args.skip_compile:
+        print('Compile {0}'.format(args.bundle))
+        cmd = [
+            grunt,
+            '--gruntfile={0}'.format(gruntfile),
+            'compile-{0}'.format(args.bundle)
+        ]
+        print('Running command: %s' % ' '.join(cmd))
+        subprocess.check_call(cmd)
+
+    print('Done.')
diff --git a/Products/CMFPlone/_scripts/generate_gruntfile.py b/Products/CMFPlone/_scripts/generate_gruntfile.py
index a83cb11..a7bde25 100644
--- a/Products/CMFPlone/_scripts/generate_gruntfile.py
+++ b/Products/CMFPlone/_scripts/generate_gruntfile.py
@@ -1,11 +1,12 @@
-#
+# -*- coding: utf-8 -*-
+# DEPRECATED
 # This is more of a script runner for the _generate_gruntfile.py
 # script. Just a wrapper so that script can be simply called
 # from the bin directory
-import os
+from Products.CMFPlone._scripts.compile_resources import generate_gruntfile
 import argparse
+import os
 import sys
-import subprocess
 
 parser = argparse.ArgumentParser(
     description='Generate Gruntfile.js from a Plone site configuration')
@@ -18,29 +19,26 @@
 parser.add_argument('--compile-dir', dest='compile_dir', default='',
                     help='Output directory for the compiled bundle files.')
 
-this_dir = os.path.dirname(os.path.realpath(__file__))
-
 
 def main(argv=sys.argv):
+    print ('-' * 80)
+    print(
+        'DEPRECATED: {0}\n'
+        'Use "bin/plone-compile-resources -IC [other params]" instead.\n'
+        'For more information use "bin/plone-compile-resources --help"'.format(
+            argv[0]
+        )
+    )
+    print ('-' * 80)
     args, _ = parser.parse_known_args()
-    instance = args.instance
-    if not instance:
-        # look for it, get bin directory, search for plone instance
-        bin_path = os.path.sep.join(
-            os.path.abspath(sys.argv[0]).split(os.path.sep)[:-1])
-        files = os.listdir(bin_path)
-        if 'instance' in files:
-            instance = os.path.join(bin_path, 'instance')
-        elif 'client1' in files:
-            instance = os.path.join(bin_path, 'client1')
-    if not instance:
-        print("Could not find plone instance to run command against.")
-        sys.exit()
-    script_path = os.path.join(this_dir, '_generate_gruntfile.py')
-    cmd = [instance, 'run', script_path]
-    os.environ['SITE_ID'] = args.site_id
-    os.environ['COMPILE_DIR'] = args.compile_dir
+    # XXX is this a good way to do it?
+    base_path = os.path.sep.join(
+        os.path.abspath(sys.argv[0]).split(os.path.sep)[:-2])
 
-    print('Running command: %s' % ' '.join(cmd))
-    subprocess.check_call(cmd, env=os.environ)
-    print('Grunfile generated.')
+    generate_gruntfile(
+        base_path,
+        args.instance,
+        args.site_id,
+        args.compile_dir
+    )
+    print('DONE DEPRECATED {0} (see above)'.format(argv[0]))


