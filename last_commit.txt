Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/39992ccb1bea13a736ab8a0eab977b46fe6aeb08

added new NavTreeProvider

Files changed:
M plone/app/layout/navigation/configure.zcml
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/configure.zcml b/plone/app/layout/navigation/configure.zcml\nindex 3dad49e..2164884 100644\n--- a/plone/app/layout/navigation/configure.zcml\n+++ b/plone/app/layout/navigation/configure.zcml\n@@ -6,4 +6,14 @@\n         <allow interface=".interfaces.INavtreeStrategy" />\n     </class>\n \n+    <!-- a contentprovider -->\n+    <adapter\n+        factory=".navtree.NavTreeProvider"\n+        for="*\n+             *\n+             *"\n+        name="plone.navtree"\n+        provides="zope.contentprovider.interfaces.IContentProvider"\n+    />\n+\n </configure>\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex fb45964..e482c28 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -6,6 +6,11 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n from zope.interface import implementer\n+from zope.contentprovider.provider import ContentProviderBase\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from zope.component import getUtility\n+import plone.api\n+from plone.app.layout.navigation.root import getNavigationRoot\n \n import six\n \n@@ -354,3 +359,94 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n     # Return the tree starting at rootPath as the root node.\n     return itemPaths[rootPath]\n+\n+\n+class NavTreeProvider(ContentProviderBase):\n+\n+    _navtree = None\n+    _navtree_path = None\n+    _navtree_context = None\n+\n+    @property\n+    def navtree_path(self):\n+        if self._navtree_path is None:\n+            self._navtree_path = getNavigationRoot(self.context)\n+        return self._navtree_path\n+\n+    @property\n+    def navtree_depth(self):\n+        return 10\n+\n+    @property\n+    def enableDesc(self):\n+        return True\n+\n+    @property\n+    def navtree(self):\n+\n+        if self._navtree is not None:\n+            return self._navtree\n+\n+        types = plone.api.portal.get_registry_record(\'plone.displayed_types\')\n+        lang_current = plone.api.portal.get_current_language()\n+\n+        query = {\n+            \'path\': {\'query\': self.navtree_path, \'depth\': self.navtree_depth},\n+            \'portal_type\': {\'query\': types},\n+            \'exclude_from_nav\': False,\n+            \'Language\': lang_current,\n+            \'sort_on\': \'getObjPositionInParent\',\n+        }\n+        res = plone.api.content.find(**query)\n+\n+        ret = {}\n+        for it in res:\n+            pathkey = \'/\'.join(it.getPath().split(\'/\')[:-1])\n+            entry = {\n+                \'id\': it.id,\n+                \'uid\': it.UID,\n+                \'url\': it.getURL(),\n+                \'title\': it.Title,\n+                \'review_state\': it.review_state,\n+            }\n+            if pathkey in ret:\n+                ret[pathkey].append(entry)\n+            else:\n+                ret[pathkey] = [entry]\n+\n+        self._navtree = ret\n+        return ret\n+\n+    def build_tree(self, path, first_run=True):\n+        """Non-template based recursive tree building.\n+        3-4 times faster than template based.\n+        See figures below.\n+        """\n+        normalizer = getUtility(IIDNormalizer)\n+        out = u\'\'\n+        for it in self.navtree.get(path, []):\n+            sub = self.build_tree(path + \'/\' + it[\'id\'], first_run=False)\n+            opener = u"""<input id="navitem-{uid}" type="checkbox" class="opener">\n+                         </input><label for="navitem-{uid}"></label>""".format(\n+                uid=it[\'uid\']\n+            ) if sub else \'\'\n+            out += u\'<li class="{id}{has_sub_class}">\'.format(\n+                id=normalizer.normalize(it[\'id\']),\n+                has_sub_class=\' has_subtree\' if sub else \'\',\n+            )\n+            out += u\'<a href="{url}" class="state-{review_state}">{title}</a>{opener}\'.format(  # noqa\n+                url=it[\'url\'],\n+                review_state=it[\'review_state\'],\n+                title=it[\'title\'],\n+                opener=opener if sub else \'\'\n+            )\n+            out += sub\n+            out += u\'</li>\'\n+\n+        if not first_run:\n+            out = u\'<ul class="has_subtree dropdown">\' + out + u\'</ul>\' if out else \'\'\n+        return out\n+\n+    def render(self):\n+\n+        return self.build_tree(self.navtree_path)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/e8bb00a93f862eeb4e41607e16055d5b2e21b87b

place new structure along with existing

Files changed:
M plone/app/layout/viewlets/sections.pt

b'diff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex 5045941..edfb161 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -7,7 +7,7 @@\n      i18n:domain="plone">\n \n   <p class="hiddenStructure" i18n:translate="heading_sections">Navigation</p>\n-  <nav class="plone-navbar" id="portal-globalnav-wrapper">\n+  <nav class="plone-navbar pat-navigationmarker" id="portal-globalnav-wrapper">\n     <div class="container">\n       <div class="plone-navbar-header">\n         <button type="button" class="plone-navbar-toggle" data-toggle="collapse" data-target="#portal-globalnav-collapse">\n@@ -35,6 +35,7 @@\n                   </a>\n               </li>\n             </tal:tabs>\n+          <navtree tal:replace="structure provider:plone.navtree" />\n         </ul>\n       </div>\n     </div>\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/1e32c1a7ff568e122483e164a0abf6adf1499fb1

use navigation_depth from controlpanel

Files changed:
M plone/app/layout/navigation/navtree.py

b"diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex e482c28..f07a8a0 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -3,14 +3,16 @@\n # from catalog queries.\n \n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n+from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n-from zope.interface import implementer\n-from zope.contentprovider.provider import ContentProviderBase\n-from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n from zope.component import getUtility\n+from zope.contentprovider.provider import ContentProviderBase\n+from zope.interface import implementer\n import plone.api\n-from plone.app.layout.navigation.root import getNavigationRoot\n \n import six\n \n@@ -367,6 +369,12 @@ class NavTreeProvider(ContentProviderBase):\n     _navtree_path = None\n     _navtree_context = None\n \n+    @property\n+    def settings(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(INavigationSchema, prefix='plone')\n+        return settings\n+\n     @property\n     def navtree_path(self):\n         if self._navtree_path is None:\n@@ -375,7 +383,7 @@ def navtree_path(self):\n \n     @property\n     def navtree_depth(self):\n-        return 10\n+        return self.settings.navigation_depth\n \n     @property\n     def enableDesc(self):\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/e0bda5570a639bcc3ea65dbf04a5a4141aa7c891

portal_actions

Files changed:
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex f07a8a0..bfc90dd 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -2,15 +2,19 @@\n # This module contains a function to help build navigation-tree-like structures\n # from catalog queries.\n \n+from Acquisition import aq_inner\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n+from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.contentprovider.provider import ContentProviderBase\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n import plone.api\n \n@@ -375,6 +379,12 @@ def settings(self):\n         settings = registry.forInterface(INavigationSchema, prefix=\'plone\')\n         return settings\n \n+    @property\n+    def language_settings(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        return settings\n+\n     @property\n     def navtree_path(self):\n         if self._navtree_path is None:\n@@ -395,36 +405,70 @@ def navtree(self):\n         if self._navtree is not None:\n             return self._navtree\n \n-        types = plone.api.portal.get_registry_record(\'plone.displayed_types\')\n-        lang_current = plone.api.portal.get_current_language()\n+        generate_tabs = self.settings.generate_tabs\n+        types = self.settings.displayed_types\n+        default_language = self.language_settings.default_language\n \n-        query = {\n-            \'path\': {\'query\': self.navtree_path, \'depth\': self.navtree_depth},\n-            \'portal_type\': {\'query\': types},\n-            \'exclude_from_nav\': False,\n-            \'Language\': lang_current,\n-            \'sort_on\': \'getObjPositionInParent\',\n-        }\n-        res = plone.api.content.find(**query)\n+        request = getRequest()\n+        lang_current = request.get(\'LANGUAGE\', None) or \\\n+            (self.context and aq_inner(self.context).Language()) \\\n+            or default_language\n \n         ret = {}\n-        for it in res:\n-            pathkey = \'/\'.join(it.getPath().split(\'/\')[:-1])\n-            entry = {\n-                \'id\': it.id,\n-                \'uid\': it.UID,\n-                \'url\': it.getURL(),\n-                \'title\': it.Title,\n-                \'review_state\': it.review_state,\n+\n+        if generate_tabs:\n+            query = {\n+                \'path\': {\'query\': self.navtree_path, \'depth\': self.navtree_depth},\n+                \'portal_type\': {\'query\': types},\n+                \'exclude_from_nav\': False,\n+                \'Language\': lang_current,\n+                \'sort_on\': \'getObjPositionInParent\',\n             }\n-            if pathkey in ret:\n-                ret[pathkey].append(entry)\n-            else:\n-                ret[pathkey] = [entry]\n+            res = plone.api.content.find(**query)\n+\n+            for it in res:\n+                pathkey = \'/\'.join(it.getPath().split(\'/\')[:-1])\n+                entry = {\n+                    \'id\': it.id,\n+                    \'uid\': it.UID,\n+                    \'url\': it.getURL(),\n+                    \'title\': it.Title,\n+                    \'review_state\': it.review_state,\n+                }\n+                if pathkey in ret:\n+                    ret[pathkey].append(entry)\n+                else:\n+                    ret[pathkey] = [entry]\n+\n+            self._navtree = ret\n+        else:\n+            portal_tabs_view = getMultiAdapter((self.context, self.request),\n+                                               name=\'portal_tabs_view\')\n+            self.portal_tabs = portal_tabs_view.topLevelTabs()\n+            res = self.portal_tabs\n+\n+            import pdb; pdb.set_trace()\n+\n+            for it in res:\n+                # pathkey = \'/\'.join(it.getPath().split(\'/\')[:-1])\n+                entry = {\n+                    \'id\': it[\'id\'],\n+                    \'uid\': None,\n+                    \'url\': it[\'url\'],\n+                    \'title\': it[\'title\'],\n+                    \'review_state\': None,\n+                }\n+                # if pathkey in ret:\n+                #     ret[pathkey].append(entry)\n+                # else:\n+                ret[\'/\'] = [entry]\n+\n+            self._navtree = ret\n+\n \n-        self._navtree = ret\n         return ret\n \n+\n     def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/2c008104df7321d2e5328e156928542cf213e1b5

PLIP 2516 - fix tab generation option

Files changed:
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex bfc90dd..d360e17 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -447,10 +447,8 @@ def navtree(self):\n             self.portal_tabs = portal_tabs_view.topLevelTabs()\n             res = self.portal_tabs\n \n-            import pdb; pdb.set_trace()\n-\n             for it in res:\n-                # pathkey = \'/\'.join(it.getPath().split(\'/\')[:-1])\n+                pathkey = self.navtree_path\n                 entry = {\n                     \'id\': it[\'id\'],\n                     \'uid\': None,\n@@ -458,17 +456,15 @@ def navtree(self):\n                     \'title\': it[\'title\'],\n                     \'review_state\': None,\n                 }\n-                # if pathkey in ret:\n-                #     ret[pathkey].append(entry)\n-                # else:\n-                ret[\'/\'] = [entry]\n+                if pathkey in ret:\n+                    ret[pathkey].append(entry)\n+                else:\n+                    ret[pathkey] = [entry]\n \n             self._navtree = ret\n \n-\n         return ret\n \n-\n     def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n@@ -500,5 +496,4 @@ def build_tree(self, path, first_run=True):\n         return out\n \n     def render(self):\n-\n         return self.build_tree(self.navtree_path)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/733f991650b047c263f5adfb68d4db67319133bf

remove old markup

Files changed:
M plone/app/layout/viewlets/sections.pt

b'diff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex edfb161..d96bcae 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -22,19 +22,6 @@\n         <ul class="plone-nav plone-navbar-nav"\n             id="portal-globalnav"\n             tal:define="selected_tab python:view.selected_portal_tab">\n-            <tal:tabs tal:repeat="tab portal_tabs">\n-              <li tal:define="tid tab/id"\n-                  tal:attributes="id string:portaltab-${tid};\n-                                  class python:selected_tab==tid and \'selected\' or nothing">\n-                  <a href=""\n-                     tal:content="tab/name"\n-                     tal:attributes="href tab/url;\n-                                     title tab/description|nothing;\n-                                     target tab/link_target|nothing;">\n-                    Tab Name\n-                  </a>\n-              </li>\n-            </tal:tabs>\n           <navtree tal:replace="structure provider:plone.navtree" />\n         </ul>\n       </div>\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/40921d78ff29895acc9c6c268884ba912d8e05e0

remove plone.api

Files changed:
M plone/app/layout/navigation/navtree.py

b"diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex d360e17..afa06b4 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -16,7 +16,6 @@\n from zope.contentprovider.provider import ContentProviderBase\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n-import plone.api\n \n import six\n \n@@ -418,13 +417,16 @@ def navtree(self):\n \n         if generate_tabs:\n             query = {\n-                'path': {'query': self.navtree_path, 'depth': self.navtree_depth},\n+                'path': {'query': self.navtree_path,\n+                         'depth': self.navtree_depth},\n                 'portal_type': {'query': types},\n                 'exclude_from_nav': False,\n                 'Language': lang_current,\n                 'sort_on': 'getObjPositionInParent',\n             }\n-            res = plone.api.content.find(**query)\n+            portal_catalog = getToolByName(self.context, 'portal_catalog')\n+\n+            res = portal_catalog.searchResults(**query)\n \n             for it in res:\n                 pathkey = '/'.join(it.getPath().split('/')[:-1])\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/79df2ef01406126093c1b603f6489dd4e17d9a16

update changes

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 725a67c..819af74 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Added multilevel dropdown navigation\n+  [agitator]\n \n Bug fixes:\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/896ed50d643c54a19b5b680d07b4ebac8048748a

add aria labels

Files changed:
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex afa06b4..4006e65 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -477,8 +477,9 @@ def build_tree(self, path, first_run=True):\n         for it in self.navtree.get(path, []):\n             sub = self.build_tree(path + \'/\' + it[\'id\'], first_run=False)\n             opener = u"""<input id="navitem-{uid}" type="checkbox" class="opener">\n-                         </input><label for="navitem-{uid}"></label>""".format(\n-                uid=it[\'uid\']\n+                         </input><label for="navitem-{uid}" role="button" aria-label="{title}"></label>""".format(\n+                uid=it[\'uid\'],\n+                title=it[\'title\']\n             ) if sub else \'\'\n             out += u\'<li class="{id}{has_sub_class}">\'.format(\n                 id=normalizer.normalize(it[\'id\']),\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/4dd53dce06710e47f1a829f4d383951f04f60489

remove old style hiddenStructure

Files changed:
M plone/app/layout/viewlets/sections.pt

b'diff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex d96bcae..e05e8a0 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -6,7 +6,6 @@\n      tal:condition="portal_tabs"\n      i18n:domain="plone">\n \n-  <p class="hiddenStructure" i18n:translate="heading_sections">Navigation</p>\n   <nav class="plone-navbar pat-navigationmarker" id="portal-globalnav-wrapper">\n     <div class="container">\n       <div class="plone-navbar-header">\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:23:38+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/027b20452c03988132e56ecf877d40e1e6d722f1

add aria_haspopup

Files changed:
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex 4006e65..e55f1c5 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -485,11 +485,12 @@ def build_tree(self, path, first_run=True):\n                 id=normalizer.normalize(it[\'id\']),\n                 has_sub_class=\' has_subtree\' if sub else \'\',\n             )\n-            out += u\'<a href="{url}" class="state-{review_state}">{title}</a>{opener}\'.format(  # noqa\n+            out += u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'.format(  # noqa\n                 url=it[\'url\'],\n                 review_state=it[\'review_state\'],\n                 title=it[\'title\'],\n-                opener=opener if sub else \'\'\n+                opener=opener if sub else \'\',\n+                aria_haspopup=\' aria-haspopup="true"\' if sub else \'\',\n             )\n             out += sub\n             out += u\'</li>\'\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T18:24:07+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.layout/commit/48aa0f269682b1dfd2219f964186570a7dcf0767

update gitignore

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex 851e457..562df3e 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -24,3 +24,4 @@ docs/Makefile\n docs/make.bat\n docs/doctrees\n docs/html\n+.DS_Store\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T20:53:34+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/295c8dc3f1425a7a157cde94f5be7fb4414b993b

navtree provider: use plone.memoize instead of class variables

Files changed:
M plone/app/layout/navigation/navtree.py

b"diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex e55f1c5..30eb44d 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -6,6 +6,7 @@\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from plone.memoize.instance import memoize\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n@@ -17,6 +18,7 @@\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n \n+\n import six\n \n \n@@ -368,10 +370,7 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n class NavTreeProvider(ContentProviderBase):\n \n-    _navtree = None\n-    _navtree_path = None\n-    _navtree_context = None\n-\n+    @memoize\n     @property\n     def settings(self):\n         registry = getUtility(IRegistry)\n@@ -384,11 +383,10 @@ def language_settings(self):\n         settings = registry.forInterface(ILanguageSchema, prefix='plone')\n         return settings\n \n+    @memoize\n     @property\n     def navtree_path(self):\n-        if self._navtree_path is None:\n-            self._navtree_path = getNavigationRoot(self.context)\n-        return self._navtree_path\n+        return getNavigationRoot(self.context)\n \n     @property\n     def navtree_depth(self):\n@@ -398,12 +396,9 @@ def navtree_depth(self):\n     def enableDesc(self):\n         return True\n \n+    @memoize\n     @property\n     def navtree(self):\n-\n-        if self._navtree is not None:\n-            return self._navtree\n-\n         generate_tabs = self.settings.generate_tabs\n         types = self.settings.displayed_types\n         default_language = self.language_settings.default_language\n@@ -442,7 +437,6 @@ def navtree(self):\n                 else:\n                     ret[pathkey] = [entry]\n \n-            self._navtree = ret\n         else:\n             portal_tabs_view = getMultiAdapter((self.context, self.request),\n                                                name='portal_tabs_view')\n@@ -463,8 +457,6 @@ def navtree(self):\n                 else:\n                     ret[pathkey] = [entry]\n \n-            self._navtree = ret\n-\n         return ret\n \n     def build_tree(self, path, first_run=True):\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-05T21:00:15+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/d55f7a73b8c454c021e10d88119bd45517a20fa0

fix

Files changed:
M plone/app/layout/navigation/navtree.py

b"diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex 30eb44d..f1a7a23 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -6,7 +6,7 @@\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n-from plone.memoize.instance import memoize\n+from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n@@ -370,8 +370,8 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n class NavTreeProvider(ContentProviderBase):\n \n-    @memoize\n     @property\n+    @memoize\n     def settings(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(INavigationSchema, prefix='plone')\n@@ -383,7 +383,6 @@ def language_settings(self):\n         settings = registry.forInterface(ILanguageSchema, prefix='plone')\n         return settings\n \n-    @memoize\n     @property\n     def navtree_path(self):\n         return getNavigationRoot(self.context)\n@@ -396,8 +395,8 @@ def navtree_depth(self):\n     def enableDesc(self):\n         return True\n \n-    @memoize\n     @property\n+    @memoize\n     def navtree(self):\n         generate_tabs = self.settings.generate_tabs\n         types = self.settings.displayed_types\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-06T10:05:09+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/b141fe2d901b99aa4532465cbbf75720d236fc4c

Make customization of the navigation markup customization easier

Files changed:
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex f1a7a23..e391a4d 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -15,7 +15,6 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.contentprovider.provider import ContentProviderBase\n-from zope.globalrequest import getRequest\n from zope.interface import implementer\n \n \n@@ -370,6 +369,21 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n class NavTreeProvider(ContentProviderBase):\n \n+    _opener_markup_template = (\n+        u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n+        u\'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n+    )\n+    _item_markup_template = (\n+        u\'<li class="{id}{has_sub_class}">\'\n+        u\'{opener}\'\n+        u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n+        u\'{sub}\'\n+        u\'</li>\'\n+    )\n+    _subtree_markup_wrapper = (\n+        u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+    )\n+\n     @property\n     @memoize\n     def settings(self):\n@@ -399,13 +413,9 @@ def enableDesc(self):\n     @memoize\n     def navtree(self):\n         generate_tabs = self.settings.generate_tabs\n-        types = self.settings.displayed_types\n-        default_language = self.language_settings.default_language\n-\n-        request = getRequest()\n-        lang_current = request.get(\'LANGUAGE\', None) or \\\n+        lang_current = self.request.get(\'LANGUAGE\', None) or \\\n             (self.context and aq_inner(self.context).Language()) \\\n-            or default_language\n+            or self.language_settings.default_language\n \n         ret = {}\n \n@@ -413,7 +423,7 @@ def navtree(self):\n             query = {\n                 \'path\': {\'query\': self.navtree_path,\n                          \'depth\': self.navtree_depth},\n-                \'portal_type\': {\'query\': types},\n+                \'portal_type\': {\'query\': self.settings.displayed_types},\n                 \'exclude_from_nav\': False,\n                 \'Language\': lang_current,\n                 \'sort_on\': \'getObjPositionInParent\',\n@@ -431,63 +441,57 @@ def navtree(self):\n                     \'title\': it.Title,\n                     \'review_state\': it.review_state,\n                 }\n-                if pathkey in ret:\n-                    ret[pathkey].append(entry)\n-                else:\n-                    ret[pathkey] = [entry]\n-\n-        else:\n-            portal_tabs_view = getMultiAdapter((self.context, self.request),\n-                                               name=\'portal_tabs_view\')\n-            self.portal_tabs = portal_tabs_view.topLevelTabs()\n-            res = self.portal_tabs\n-\n-            for it in res:\n-                pathkey = self.navtree_path\n-                entry = {\n-                    \'id\': it[\'id\'],\n-                    \'uid\': None,\n-                    \'url\': it[\'url\'],\n-                    \'title\': it[\'title\'],\n-                    \'review_state\': None,\n-                }\n-                if pathkey in ret:\n-                    ret[pathkey].append(entry)\n-                else:\n-                    ret[pathkey] = [entry]\n+                ret.setdefault(pathkey, []).append(entry)\n+            return ret\n+\n+        portal_tabs_view = getMultiAdapter((self.context, self.request),\n+                                           name=\'portal_tabs_view\')\n+        res = portal_tabs_view.topLevelTabs()\n+\n+        for it in res:\n+            pathkey = self.navtree_path\n+            entry = {\n+                \'id\': it[\'id\'],\n+                \'uid\': None,\n+                \'url\': it[\'url\'],\n+                \'title\': it[\'title\'],\n+                \'review_state\': None,\n+            }\n+            ret.setdefault(pathkey, []).append(entry)\n \n         return ret\n \n+    def render_item(self, item, path):\n+        normalizer = getUtility(IIDNormalizer)\n+        item[\'normalizedid\'] = normalizer.normalize(item[\'id\'])\n+        sub = self.build_tree(path + \'/\' + item[\'id\'], first_run=False)\n+        if sub:\n+            item.update({\n+                \'sub\': sub,\n+                \'opener\':  self._opener_markup_template.format(**item),\n+                \'aria_haspopup\': \' aria-haspopup="true"\',\n+                \'has_sub_class\': \' has_subtree\',\n+            })\n+        else:\n+            item.update({\n+                \'sub\': sub,\n+                \'opener\':  \'\',\n+                \'aria_haspopup\': \'\',\n+                \'has_sub_class\': \'\',\n+            })\n+        return self._item_markup_template.format(**item)\n+\n     def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n-        See figures below.\n         """\n-        normalizer = getUtility(IIDNormalizer)\n         out = u\'\'\n-        for it in self.navtree.get(path, []):\n-            sub = self.build_tree(path + \'/\' + it[\'id\'], first_run=False)\n-            opener = u"""<input id="navitem-{uid}" type="checkbox" class="opener">\n-                         </input><label for="navitem-{uid}" role="button" aria-label="{title}"></label>""".format(\n-                uid=it[\'uid\'],\n-                title=it[\'title\']\n-            ) if sub else \'\'\n-            out += u\'<li class="{id}{has_sub_class}">\'.format(\n-                id=normalizer.normalize(it[\'id\']),\n-                has_sub_class=\' has_subtree\' if sub else \'\',\n-            )\n-            out += u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'.format(  # noqa\n-                url=it[\'url\'],\n-                review_state=it[\'review_state\'],\n-                title=it[\'title\'],\n-                opener=opener if sub else \'\',\n-                aria_haspopup=\' aria-haspopup="true"\' if sub else \'\',\n-            )\n-            out += sub\n-            out += u\'</li>\'\n-\n-        if not first_run:\n-            out = u\'<ul class="has_subtree dropdown">\' + out + u\'</ul>\' if out else \'\'\n+        for item in self.navtree.get(path, []):\n+            out += self.render_item(item, path)\n+            self._item_markup_template.format(**item)\n+\n+        if not first_run and out:\n+            out = self._subtree_markup_wrapper.format(out=out)\n         return out\n \n     def render(self):\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-02-06T11:21:55+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/dcdf6a7fcc4acbf81146ba5f31216b7dd61afead

Merge pull request #172 from plone/plip-2516-navigation

Plip 2516 navigation

Files changed:
M .gitignore
M CHANGES.rst
M plone/app/layout/navigation/configure.zcml
M plone/app/layout/navigation/navtree.py
M plone/app/layout/viewlets/sections.pt

b'diff --git a/.gitignore b/.gitignore\nindex 851e457..562df3e 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -24,3 +24,4 @@ docs/Makefile\n docs/make.bat\n docs/doctrees\n docs/html\n+.DS_Store\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 725a67c..819af74 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Added multilevel dropdown navigation\n+  [agitator]\n \n Bug fixes:\n \ndiff --git a/plone/app/layout/navigation/configure.zcml b/plone/app/layout/navigation/configure.zcml\nindex 3dad49e..2164884 100644\n--- a/plone/app/layout/navigation/configure.zcml\n+++ b/plone/app/layout/navigation/configure.zcml\n@@ -6,4 +6,14 @@\n         <allow interface=".interfaces.INavtreeStrategy" />\n     </class>\n \n+    <!-- a contentprovider -->\n+    <adapter\n+        factory=".navtree.NavTreeProvider"\n+        for="*\n+             *\n+             *"\n+        name="plone.navtree"\n+        provides="zope.contentprovider.interfaces.IContentProvider"\n+    />\n+\n </configure>\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex fb45964..e391a4d 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -2,11 +2,22 @@\n # This module contains a function to help build navigation-tree-like structures\n # from catalog queries.\n \n+from Acquisition import aq_inner\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n+from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from plone.memoize.view import memoize\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import utils\n+from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n+from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.contentprovider.provider import ContentProviderBase\n from zope.interface import implementer\n \n+\n import six\n \n \n@@ -354,3 +365,134 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n     # Return the tree starting at rootPath as the root node.\n     return itemPaths[rootPath]\n+\n+\n+class NavTreeProvider(ContentProviderBase):\n+\n+    _opener_markup_template = (\n+        u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n+        u\'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n+    )\n+    _item_markup_template = (\n+        u\'<li class="{id}{has_sub_class}">\'\n+        u\'{opener}\'\n+        u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n+        u\'{sub}\'\n+        u\'</li>\'\n+    )\n+    _subtree_markup_wrapper = (\n+        u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+    )\n+\n+    @property\n+    @memoize\n+    def settings(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(INavigationSchema, prefix=\'plone\')\n+        return settings\n+\n+    @property\n+    def language_settings(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        return settings\n+\n+    @property\n+    def navtree_path(self):\n+        return getNavigationRoot(self.context)\n+\n+    @property\n+    def navtree_depth(self):\n+        return self.settings.navigation_depth\n+\n+    @property\n+    def enableDesc(self):\n+        return True\n+\n+    @property\n+    @memoize\n+    def navtree(self):\n+        generate_tabs = self.settings.generate_tabs\n+        lang_current = self.request.get(\'LANGUAGE\', None) or \\\n+            (self.context and aq_inner(self.context).Language()) \\\n+            or self.language_settings.default_language\n+\n+        ret = {}\n+\n+        if generate_tabs:\n+            query = {\n+                \'path\': {\'query\': self.navtree_path,\n+                         \'depth\': self.navtree_depth},\n+                \'portal_type\': {\'query\': self.settings.displayed_types},\n+                \'exclude_from_nav\': False,\n+                \'Language\': lang_current,\n+                \'sort_on\': \'getObjPositionInParent\',\n+            }\n+            portal_catalog = getToolByName(self.context, \'portal_catalog\')\n+\n+            res = portal_catalog.searchResults(**query)\n+\n+            for it in res:\n+                pathkey = \'/\'.join(it.getPath().split(\'/\')[:-1])\n+                entry = {\n+                    \'id\': it.id,\n+                    \'uid\': it.UID,\n+                    \'url\': it.getURL(),\n+                    \'title\': it.Title,\n+                    \'review_state\': it.review_state,\n+                }\n+                ret.setdefault(pathkey, []).append(entry)\n+            return ret\n+\n+        portal_tabs_view = getMultiAdapter((self.context, self.request),\n+                                           name=\'portal_tabs_view\')\n+        res = portal_tabs_view.topLevelTabs()\n+\n+        for it in res:\n+            pathkey = self.navtree_path\n+            entry = {\n+                \'id\': it[\'id\'],\n+                \'uid\': None,\n+                \'url\': it[\'url\'],\n+                \'title\': it[\'title\'],\n+                \'review_state\': None,\n+            }\n+            ret.setdefault(pathkey, []).append(entry)\n+\n+        return ret\n+\n+    def render_item(self, item, path):\n+        normalizer = getUtility(IIDNormalizer)\n+        item[\'normalizedid\'] = normalizer.normalize(item[\'id\'])\n+        sub = self.build_tree(path + \'/\' + item[\'id\'], first_run=False)\n+        if sub:\n+            item.update({\n+                \'sub\': sub,\n+                \'opener\':  self._opener_markup_template.format(**item),\n+                \'aria_haspopup\': \' aria-haspopup="true"\',\n+                \'has_sub_class\': \' has_subtree\',\n+            })\n+        else:\n+            item.update({\n+                \'sub\': sub,\n+                \'opener\':  \'\',\n+                \'aria_haspopup\': \'\',\n+                \'has_sub_class\': \'\',\n+            })\n+        return self._item_markup_template.format(**item)\n+\n+    def build_tree(self, path, first_run=True):\n+        """Non-template based recursive tree building.\n+        3-4 times faster than template based.\n+        """\n+        out = u\'\'\n+        for item in self.navtree.get(path, []):\n+            out += self.render_item(item, path)\n+            self._item_markup_template.format(**item)\n+\n+        if not first_run and out:\n+            out = self._subtree_markup_wrapper.format(out=out)\n+        return out\n+\n+    def render(self):\n+        return self.build_tree(self.navtree_path)\ndiff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex 5045941..e05e8a0 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -6,8 +6,7 @@\n      tal:condition="portal_tabs"\n      i18n:domain="plone">\n \n-  <p class="hiddenStructure" i18n:translate="heading_sections">Navigation</p>\n-  <nav class="plone-navbar" id="portal-globalnav-wrapper">\n+  <nav class="plone-navbar pat-navigationmarker" id="portal-globalnav-wrapper">\n     <div class="container">\n       <div class="plone-navbar-header">\n         <button type="button" class="plone-navbar-toggle" data-toggle="collapse" data-target="#portal-globalnav-collapse">\n@@ -22,19 +21,7 @@\n         <ul class="plone-nav plone-navbar-nav"\n             id="portal-globalnav"\n             tal:define="selected_tab python:view.selected_portal_tab">\n-            <tal:tabs tal:repeat="tab portal_tabs">\n-              <li tal:define="tid tab/id"\n-                  tal:attributes="id string:portaltab-${tid};\n-                                  class python:selected_tab==tid and \'selected\' or nothing">\n-                  <a href=""\n-                     tal:content="tab/name"\n-                     tal:attributes="href tab/url;\n-                                     title tab/description|nothing;\n-                                     target tab/link_target|nothing;">\n-                    Tab Name\n-                  </a>\n-              </li>\n-            </tal:tabs>\n+          <navtree tal:replace="structure provider:plone.navtree" />\n         </ul>\n       </div>\n     </div>\n'

