Repository: plone.scale


Branch: refs/heads/master
Date: 2022-03-03T12:38:58+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/8ecaa0a2dcb9a2485506bb9f04f074e4a0a87381

Removed deprecated factory argument from scale method.

This is in the `AnnotationStorage` class and the `IImageScaleStorage` interface.
This was already scheduled for removal in `plone.scale` 3.0, but was kept longer.
Fixes `issue 47 &lt;https://github.com/plone/plone.scale/issues/47&gt;`_.

Files changed:
A news/47.breaking
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/47.breaking b/news/47.breaking\nnew file mode 100644\nindex 0000000..5ae2ee3\n--- /dev/null\n+++ b/news/47.breaking\n@@ -0,0 +1,5 @@\n+Removed deprecated ``factory`` argument from ``scale`` method.\n+This is in the ``AnnotationStorage`` class and the ``IImageScaleStorage`` interface.\n+This was already scheduled for removal in ``plone.scale`` 3.0, but was kept longer.\n+Fixes `issue 47 <https://github.com/plone/plone.scale/issues/47>`_.\n+[maurits]\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 6e0cbc9..6cab18a 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -9,7 +9,6 @@\n \n import logging\n import pprint\n-import warnings\n \n \n logger = logging.getLogger("plone.scale")\n@@ -34,10 +33,11 @@ def __init__(context, modified=None):\n         to return a representation of the last modification date, which\n         can be used to invalidate stored scale data on update."""\n \n-    def scale(factory=None, **parameters):\n-        """Find image scale data for the given parameters or create it if\n-        a factory was provided.  The parameters will be passed back to\n-        the factory method, which is expected to return a tuple\n+    def scale(**parameters):\n+        """Find image scale data for the given parameters or create it.\n+\n+        We will look for an IImageScaleFactory for the context, and pass\n+        the parameters.  This factory is expected to return a tuple\n         containing a representation of the actual image scale data (i.e.\n         a string or file-like object) as well as the image\'s format and\n         dimensions.  For convenience, this happens to match the return\n@@ -166,55 +166,29 @@ def get_info_by_hash(self, hash):\n             if value["key"] == hash:\n                 return value\n \n-    def scale(self, factory=None, **parameters):\n+    def scale(self, **parameters):\n         key = self.hash(**parameters)\n         storage = self.storage\n         info = self.get_info_by_hash(key)\n         scaling_factory = IImageScaleFactory(self.context, None)\n-        if (\n-            info is not None\n-            and (scaling_factory is not None or factory is not None)\n-            and self._modified_since(info["modified"])\n-        ):\n-            del self[info["uid"]]\n-            # invalidate when the image was updated\n-            info = None\n-        elif info is not None:\n+        if scaling_factory is None:\n+            # There is nothing more we can do.\n+            # If we have info, return it, even if it is outdated.\n             return info\n-\n-        # BBB/Deprecation handling\n-        if factory is not None:\n-            if scaling_factory is not None:\n-                warnings.warn(\n-                    "Deprecated usage of factory in plone.scale. "\n-                    "Factory is passed to plone.scale but also an adapter "\n-                    "was found. No way to really decide which one to execute."\n-                    "To be nice and with a look at backward compatibility the "\n-                    "passed one is used.",\n-                    DeprecationWarning,\n-                )\n+        # Do we have info and is it up to date?\n+        outdated_uid = None\n+        if info is not None:\n+            if self._modified_since(info["modified"]):\n+                # We want to remove this outdated scale info,\n+                # but let\'s keep it until we have calculated the new info.\n+                # The assumption here is that it is better to have a slightly\n+                # outdated image than no image at all.\n+                outdated_uid = info["uid"]\n             else:\n-                warnings.warn(\n-                    "Deprecated usage of factory in plone.scale. Provide an "\n-                    "adapter for the factory instead. The kwarg will be "\n-                    "dropped with plone.scale 3.0",\n-                    DeprecationWarning,\n-                )\n-            result = factory(**parameters)\n-        elif scaling_factory is not None:\n-            # this is what we want, keep this after deprecaton phase\n-            result = scaling_factory(**parameters)\n-        else:\n-            # adaption error, nor a factory was passed.\n-            # BBB behavior here is to return None\n-            # nevertheless we warn!\n-            warnings.warn(\n-                "Could not adapt context to IImageScaleFactory nor a "\n-                "deprecated BBB factory callable was provided."\n-                "Assume None return value as it was before."\n-            )\n-            return None\n+                return info\n \n+        # There is no info, or it is outdated.  Recreate the scale.\n+        result = scaling_factory(**parameters)\n         if result is not None:\n             # storage will be modified:\n             # good time to also cleanup\n@@ -231,6 +205,8 @@ def scale(self, factory=None, **parameters):\n                 key=key,\n                 modified=self.modified_time,\n             )\n+            if outdated_uid:\n+                del self[outdated_uid]\n             storage[uid] = info\n         return info\n \ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex c1cf001..17c2f2b 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -56,16 +56,6 @@ def testInterface(self):\n         storage = self.storage\n         self.assertTrue(IImageScaleStorage.providedBy(storage))\n \n-    def testScaleForNonExistingScaleWithCreationBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertIn("uid", scale)\n-        self.assertIn("key", scale)\n-        self.assertEqual(scale["data"], "some data")\n-        self.assertEqual(scale["width"], 42)\n-        self.assertEqual(scale["height"], 23)\n-        self.assertEqual(scale["mimetype"], "image/png")\n-\n     def testScaleForNonExistingScaleWithCreation(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -78,23 +68,12 @@ def testScaleForNonExistingScaleWithCreation(self):\n         self.assertEqual(scale["height"], 23)\n         self.assertEqual(scale["mimetype"], "image/png")\n \n-    def testScaleForNonExistingScaleWithoutCreationBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(foo=23, bar=42)\n-        self.assertEqual(scale, None)\n-\n     def testScaleForNonExistingScaleWithoutCreation(self):\n         self._provide_dummy_scale_adapter(result=None)\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n         self.assertEqual(scale, None)\n \n-    def testScaleForExistingScaleBBB(self):\n-        storage = self.storage\n-        scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n-        scale2 = storage.scale(factory=self.factory, bar=42, foo=23)\n-        self.assertTrue(scale1 is scale2)\n-\n     def testScaleForExistingScale(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -102,12 +81,6 @@ def testScaleForExistingScale(self):\n         scale2 = storage.scale(bar=42, foo=23)\n         self.assertIs(scale1, scale2)\n \n-    def testScaleForSimilarScalesBBB(self):\n-        storage = self.storage\n-        scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n-        scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz="!")\n-        self.assertIsNot(scale1, scale2)\n-\n     def testScaleForSimilarScales(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -115,18 +88,6 @@ def testScaleForSimilarScales(self):\n         scale2 = storage.scale(bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n-    def testGetItemBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        uid = scale["uid"]\n-        scale = storage[uid]\n-        self.assertTrue("uid" in scale)\n-        self.assertTrue("key" in scale)\n-        self.assertEqual(scale["data"], "some data")\n-        self.assertEqual(scale["width"], 42)\n-        self.assertEqual(scale["height"], 23)\n-        self.assertEqual(scale["mimetype"], "image/png")\n-\n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -179,13 +140,6 @@ def testDeleteNonExistingItem(self):\n         # See https://github.com/plone/plone.scale/issues/15\n         delitem(storage, "foo")\n \n-    def testDeleteRemovesItemAndIndexBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertEqual(len(storage), 1)\n-        del storage[scale["uid"]]\n-        self.assertEqual(len(storage), 0)\n-\n     def testDeleteRemovesItemAndIndex(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -194,28 +148,6 @@ def testDeleteRemovesItemAndIndex(self):\n         del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n-    def testCleanUpOldItemsBBB(self):\n-        storage = self.storage\n-        scale_old = storage.scale(factory=self.factory, foo=23, bar=42)\n-        next_modified = storage.modified() + 1\n-        storage.modified = lambda: next_modified\n-        scale_new = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertEqual(len(storage), 1)\n-        self.assertEqual(scale_new["uid"] in storage, True)\n-        self.assertEqual(scale_old["uid"] in storage, False)\n-\n-        # When modification time is older than a day, too old scales\n-        # get purged.\n-        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1\n-        storage.modified = lambda: next_modified\n-        scale_newer = storage.scale(factory=self.factory, foo=23, bar=42)\n-\n-        self.assertEqual(scale_newer["uid"] in storage, True)\n-        self.assertEqual(scale_new["uid"] in storage, False)\n-        self.assertEqual(scale_old["uid"] in storage, False)\n-        del storage[scale_newer["uid"]]\n-        self.assertEqual(len(storage), 0)\n-\n     def testCleanUpOldItems(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -239,13 +171,6 @@ def testCleanUpOldItems(self):\n         del storage[scale_newer["uid"]]\n         self.assertEqual(len(storage), 0)\n \n-    def testClearBBB(self):\n-        storage = self.storage\n-        storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertEqual(len(storage), 1)\n-        storage.clear()\n-        self.assertEqual(len(storage), 0)\n-\n     def testClear(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-03-04T18:02:13+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.scale/commit/b88d8f6c30dc5f84f7efa25e7f4c8323272df136

Merge pull request #48 from plone/maurits-remove-deprecated-factory-argument

Removed deprecated factory argument from scale method.

Files changed:
A news/47.breaking
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/47.breaking b/news/47.breaking\nnew file mode 100644\nindex 0000000..5ae2ee3\n--- /dev/null\n+++ b/news/47.breaking\n@@ -0,0 +1,5 @@\n+Removed deprecated ``factory`` argument from ``scale`` method.\n+This is in the ``AnnotationStorage`` class and the ``IImageScaleStorage`` interface.\n+This was already scheduled for removal in ``plone.scale`` 3.0, but was kept longer.\n+Fixes `issue 47 <https://github.com/plone/plone.scale/issues/47>`_.\n+[maurits]\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 6e0cbc9..6cab18a 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -9,7 +9,6 @@\n \n import logging\n import pprint\n-import warnings\n \n \n logger = logging.getLogger("plone.scale")\n@@ -34,10 +33,11 @@ def __init__(context, modified=None):\n         to return a representation of the last modification date, which\n         can be used to invalidate stored scale data on update."""\n \n-    def scale(factory=None, **parameters):\n-        """Find image scale data for the given parameters or create it if\n-        a factory was provided.  The parameters will be passed back to\n-        the factory method, which is expected to return a tuple\n+    def scale(**parameters):\n+        """Find image scale data for the given parameters or create it.\n+\n+        We will look for an IImageScaleFactory for the context, and pass\n+        the parameters.  This factory is expected to return a tuple\n         containing a representation of the actual image scale data (i.e.\n         a string or file-like object) as well as the image\'s format and\n         dimensions.  For convenience, this happens to match the return\n@@ -166,55 +166,29 @@ def get_info_by_hash(self, hash):\n             if value["key"] == hash:\n                 return value\n \n-    def scale(self, factory=None, **parameters):\n+    def scale(self, **parameters):\n         key = self.hash(**parameters)\n         storage = self.storage\n         info = self.get_info_by_hash(key)\n         scaling_factory = IImageScaleFactory(self.context, None)\n-        if (\n-            info is not None\n-            and (scaling_factory is not None or factory is not None)\n-            and self._modified_since(info["modified"])\n-        ):\n-            del self[info["uid"]]\n-            # invalidate when the image was updated\n-            info = None\n-        elif info is not None:\n+        if scaling_factory is None:\n+            # There is nothing more we can do.\n+            # If we have info, return it, even if it is outdated.\n             return info\n-\n-        # BBB/Deprecation handling\n-        if factory is not None:\n-            if scaling_factory is not None:\n-                warnings.warn(\n-                    "Deprecated usage of factory in plone.scale. "\n-                    "Factory is passed to plone.scale but also an adapter "\n-                    "was found. No way to really decide which one to execute."\n-                    "To be nice and with a look at backward compatibility the "\n-                    "passed one is used.",\n-                    DeprecationWarning,\n-                )\n+        # Do we have info and is it up to date?\n+        outdated_uid = None\n+        if info is not None:\n+            if self._modified_since(info["modified"]):\n+                # We want to remove this outdated scale info,\n+                # but let\'s keep it until we have calculated the new info.\n+                # The assumption here is that it is better to have a slightly\n+                # outdated image than no image at all.\n+                outdated_uid = info["uid"]\n             else:\n-                warnings.warn(\n-                    "Deprecated usage of factory in plone.scale. Provide an "\n-                    "adapter for the factory instead. The kwarg will be "\n-                    "dropped with plone.scale 3.0",\n-                    DeprecationWarning,\n-                )\n-            result = factory(**parameters)\n-        elif scaling_factory is not None:\n-            # this is what we want, keep this after deprecaton phase\n-            result = scaling_factory(**parameters)\n-        else:\n-            # adaption error, nor a factory was passed.\n-            # BBB behavior here is to return None\n-            # nevertheless we warn!\n-            warnings.warn(\n-                "Could not adapt context to IImageScaleFactory nor a "\n-                "deprecated BBB factory callable was provided."\n-                "Assume None return value as it was before."\n-            )\n-            return None\n+                return info\n \n+        # There is no info, or it is outdated.  Recreate the scale.\n+        result = scaling_factory(**parameters)\n         if result is not None:\n             # storage will be modified:\n             # good time to also cleanup\n@@ -231,6 +205,8 @@ def scale(self, factory=None, **parameters):\n                 key=key,\n                 modified=self.modified_time,\n             )\n+            if outdated_uid:\n+                del self[outdated_uid]\n             storage[uid] = info\n         return info\n \ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex c1cf001..17c2f2b 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -56,16 +56,6 @@ def testInterface(self):\n         storage = self.storage\n         self.assertTrue(IImageScaleStorage.providedBy(storage))\n \n-    def testScaleForNonExistingScaleWithCreationBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertIn("uid", scale)\n-        self.assertIn("key", scale)\n-        self.assertEqual(scale["data"], "some data")\n-        self.assertEqual(scale["width"], 42)\n-        self.assertEqual(scale["height"], 23)\n-        self.assertEqual(scale["mimetype"], "image/png")\n-\n     def testScaleForNonExistingScaleWithCreation(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -78,23 +68,12 @@ def testScaleForNonExistingScaleWithCreation(self):\n         self.assertEqual(scale["height"], 23)\n         self.assertEqual(scale["mimetype"], "image/png")\n \n-    def testScaleForNonExistingScaleWithoutCreationBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(foo=23, bar=42)\n-        self.assertEqual(scale, None)\n-\n     def testScaleForNonExistingScaleWithoutCreation(self):\n         self._provide_dummy_scale_adapter(result=None)\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n         self.assertEqual(scale, None)\n \n-    def testScaleForExistingScaleBBB(self):\n-        storage = self.storage\n-        scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n-        scale2 = storage.scale(factory=self.factory, bar=42, foo=23)\n-        self.assertTrue(scale1 is scale2)\n-\n     def testScaleForExistingScale(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -102,12 +81,6 @@ def testScaleForExistingScale(self):\n         scale2 = storage.scale(bar=42, foo=23)\n         self.assertIs(scale1, scale2)\n \n-    def testScaleForSimilarScalesBBB(self):\n-        storage = self.storage\n-        scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n-        scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz="!")\n-        self.assertIsNot(scale1, scale2)\n-\n     def testScaleForSimilarScales(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -115,18 +88,6 @@ def testScaleForSimilarScales(self):\n         scale2 = storage.scale(bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n-    def testGetItemBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        uid = scale["uid"]\n-        scale = storage[uid]\n-        self.assertTrue("uid" in scale)\n-        self.assertTrue("key" in scale)\n-        self.assertEqual(scale["data"], "some data")\n-        self.assertEqual(scale["width"], 42)\n-        self.assertEqual(scale["height"], 23)\n-        self.assertEqual(scale["mimetype"], "image/png")\n-\n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -179,13 +140,6 @@ def testDeleteNonExistingItem(self):\n         # See https://github.com/plone/plone.scale/issues/15\n         delitem(storage, "foo")\n \n-    def testDeleteRemovesItemAndIndexBBB(self):\n-        storage = self.storage\n-        scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertEqual(len(storage), 1)\n-        del storage[scale["uid"]]\n-        self.assertEqual(len(storage), 0)\n-\n     def testDeleteRemovesItemAndIndex(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -194,28 +148,6 @@ def testDeleteRemovesItemAndIndex(self):\n         del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n-    def testCleanUpOldItemsBBB(self):\n-        storage = self.storage\n-        scale_old = storage.scale(factory=self.factory, foo=23, bar=42)\n-        next_modified = storage.modified() + 1\n-        storage.modified = lambda: next_modified\n-        scale_new = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertEqual(len(storage), 1)\n-        self.assertEqual(scale_new["uid"] in storage, True)\n-        self.assertEqual(scale_old["uid"] in storage, False)\n-\n-        # When modification time is older than a day, too old scales\n-        # get purged.\n-        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1\n-        storage.modified = lambda: next_modified\n-        scale_newer = storage.scale(factory=self.factory, foo=23, bar=42)\n-\n-        self.assertEqual(scale_newer["uid"] in storage, True)\n-        self.assertEqual(scale_new["uid"] in storage, False)\n-        self.assertEqual(scale_old["uid"] in storage, False)\n-        del storage[scale_newer["uid"]]\n-        self.assertEqual(len(storage), 0)\n-\n     def testCleanUpOldItems(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n@@ -239,13 +171,6 @@ def testCleanUpOldItems(self):\n         del storage[scale_newer["uid"]]\n         self.assertEqual(len(storage), 0)\n \n-    def testClearBBB(self):\n-        storage = self.storage\n-        storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.assertEqual(len(storage), 1)\n-        storage.clear()\n-        self.assertEqual(len(storage), 0)\n-\n     def testClear(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

