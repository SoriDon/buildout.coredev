Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-11T23:49:35+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/2f50cb61b8b641299517ab4fbc767d6611b2a536

Configuring with plone/meta

Files changed:
A news/a533099d.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/news/a533099d.internal b/news/a533099d.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a533099d.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9d0c563 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 885f48a..65446f0 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,27 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n     *.cfg\n \n [zest.releaser]\n python-file-with-version = setup.py\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8ae5366\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.z3cform\n+extras =\n+    test\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-11T23:53:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/e126876cab535abaff0c87e420deb5e47d6d268a

chore: pyupgrade

Files changed:
M src/plone/z3cform/converter.py
M src/plone/z3cform/crud/crud.py
M src/plone/z3cform/fieldsets/extensible.py
M src/plone/z3cform/fieldsets/group.py
M src/plone/z3cform/fieldsets/interfaces.py
M src/plone/z3cform/fieldsets/utils.py
M src/plone/z3cform/interfaces.py
M src/plone/z3cform/layout.py
M src/plone/z3cform/subform.py
M src/plone/z3cform/tests.py
M src/plone/z3cform/textlines/textlines.py
M src/plone/z3cform/traversal.py
M src/plone/z3cform/widget.py
M src/plone/z3cform/z2.py

b'diff --git a/src/plone/z3cform/converter.py b/src/plone/z3cform/converter.py\nindex 3a1698c..fe2cffe 100644\n--- a/src/plone/z3cform/converter.py\n+++ b/src/plone/z3cform/converter.py\n@@ -24,4 +24,4 @@ def toFieldValue(self, value):\n             fieldstorage.filename = value.filename\n             value = zope.publisher.browser.FileUpload(fieldstorage)\n \n-        return super(FileUploadDataConverter, self).toFieldValue(value)\n+        return super().toFieldValue(value)\ndiff --git a/src/plone/z3cform/crud/crud.py b/src/plone/z3cform/crud/crud.py\nindex 5e062ad..b69523a 100644\n--- a/src/plone/z3cform/crud/crud.py\n+++ b/src/plone/z3cform/crud/crud.py\n@@ -72,7 +72,7 @@ def link(item, field):\n \n \n @interface.implementer(ICrudForm)\n-class AbstractCrudForm(object):\n+class AbstractCrudForm:\n     """The AbstractCrudForm is not a form but implements methods\n     necessary to comply with the ``ICrudForm`` interface:\n \n@@ -111,7 +111,7 @@ class CrudBatchView(BatchView):\n \n     def make_link(self, pagenumber):\n         start = max(pagenumber - 1, 0)\n-        return "%s?%spage=%s" % (self.request.getURL(), self.prefix, start)\n+        return f"{self.request.getURL()}?{self.prefix}page={start}"\n \n \n class EditSubForm(form.EditForm):\n@@ -155,7 +155,7 @@ def _select_field(self):\n         select_field = field.Field(\n             zope.schema.Bool(__name__=\'select\',\n                              required=False,\n-                             title=_(u\'select\')))\n+                             title=_(\'select\')))\n         select_field.widgetFactory[INPUT_MODE] = singlecheckboxwidget_factory\n         return select_field\n \n@@ -194,7 +194,7 @@ def getNiceTitles(self):\n \n \n class EditForm(form.Form):\n-    label = _(u"Edit")\n+    label = _("Edit")\n     template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-table.pt\')\n \n     # exposes the edit sub form for your own derivatives\n@@ -207,7 +207,7 @@ def prefix(self):\n \n     def update(self):\n         self._update_subforms()\n-        super(EditForm, self).update()\n+        super().update()\n \n     def _update_subforms(self):\n         self.subforms = []\n@@ -234,9 +234,9 @@ def render_batch_navigation(self):\n                              name=\'edit\',\n                              condition=lambda form: form.context.update_schema)\n     def handle_edit(self, action):\n-        success = _(u"Successfully updated")\n-        partly_success = _(u"Some of your changes could not be applied.")\n-        status = no_changes = _(u"No changes made.")\n+        success = _("Successfully updated")\n+        partly_success = _("Some of your changes could not be applied.")\n+        status = no_changes = _("No changes made.")\n         for subform in self.subforms:\n             # With the ``extractData()`` call, validation will occur,\n             # and errors will be stored on the widgets amongst other\n@@ -274,7 +274,7 @@ def handle_edit(self, action):\n     def handle_delete(self, action):\n         selected = self.selected_items()\n         if selected:\n-            self.status = _(u"Successfully deleted items.")\n+            self.status = _("Successfully deleted items.")\n             for id, item in selected:\n                 try:\n                     self.context.remove((id, item))\n@@ -284,14 +284,14 @@ def handle_delete(self, action):\n                     # In case an exception is raised, we\'ll catch it\n                     # and notify the user; in general, this is\n                     # unexpected behavior:\n-                    self.status = _(u\'Unable to remove one or more items.\')\n+                    self.status = _(\'Unable to remove one or more items.\')\n                     break\n \n             # We changed the amount of entries, so we update the subforms\n             # again.\n             self._update_subforms()\n         else:\n-            self.status = _(u"Please select items to delete.")\n+            self.status = _("Please select items to delete.")\n \n     def selected_items(self):\n         tuples = []\n@@ -328,7 +328,7 @@ def getURL(self):\n class AddForm(form.Form):\n     template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-add.pt\')\n \n-    label = _(u"Add")\n+    label = _("Add")\n     ignoreContext = True\n     ignoreRequest = True\n \n@@ -353,10 +353,10 @@ def handle_add(self, action):\n             self.status = e\n         else:\n             zope.event.notify(zope.lifecycleevent.ObjectCreatedEvent(item))\n-            self.status = _(u"Item added successfully.")\n+            self.status = _("Item added successfully.")\n \n \n-class NullForm(object):\n+class NullForm:\n \n     def __init__(self, context, request):\n         self.context = context\n@@ -372,13 +372,13 @@ def render(self):\n \n class CrudForm(AbstractCrudForm, form.Form):\n     template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-master.pt\')\n-    description = u\'\'\n+    description = \'\'\n \n     editform_factory = EditForm\n     addform_factory = AddForm\n \n     def update(self):\n-        super(CrudForm, self).update()\n+        super().update()\n \n         addform = self.addform_factory(self, self.request)\n         editform = self.editform_factory(self, self.request)\ndiff --git a/src/plone/z3cform/fieldsets/extensible.py b/src/plone/z3cform/fieldsets/extensible.py\nindex 6de98db..60ab0cf 100644\n--- a/src/plone/z3cform/fieldsets/extensible.py\n+++ b/src/plone/z3cform/fieldsets/extensible.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.z3cform import MessageFactory as _\n from plone.z3cform.fieldsets import utils\n from plone.z3cform.fieldsets.interfaces import IExtensibleForm\n@@ -13,7 +12,7 @@ def order_key(adapter_tuple):\n \n \n @implementer(IFormExtender)\n-class FormExtender(object):\n+class FormExtender:\n     """Base class for IFormExtender adapters with convenience APIs\n     """\n \n@@ -58,11 +57,11 @@ def move(\n class ExtensibleForm(GroupForm):\n \n     groups = []\n-    default_fieldset_label = _(u"Default")\n+    default_fieldset_label = _("Default")\n \n     def update(self):\n         self.updateFields()\n-        super(ExtensibleForm, self).update()\n+        super().update()\n \n     def updateFields(self):\n         extenders = getAdapters(\ndiff --git a/src/plone/z3cform/fieldsets/group.py b/src/plone/z3cform/fieldsets/group.py\nindex 16ca647..b1b36a6 100644\n--- a/src/plone/z3cform/fieldsets/group.py\n+++ b/src/plone/z3cform/fieldsets/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.z3cform.fieldsets.interfaces import IDescriptiveGroup\n from plone.z3cform.fieldsets.interfaces import IGroupFactory\n from z3c.form import group\n@@ -7,9 +6,9 @@\n \n @implementer(IDescriptiveGroup)\n class Group(group.Group):\n-    __name__ = u""\n-    label = u""\n-    description = u""\n+    __name__ = ""\n+    label = ""\n+    description = ""\n     order = 0\n \n     def getContent(self):\n@@ -18,7 +17,7 @@ def getContent(self):\n \n \n @implementer(IGroupFactory)\n-class GroupFactory(object):\n+class GroupFactory:\n \n     def __init__(\n         self,\ndiff --git a/src/plone/z3cform/fieldsets/interfaces.py b/src/plone/z3cform/fieldsets/interfaces.py\nindex dc521ae..de584c6 100644\n--- a/src/plone/z3cform/fieldsets/interfaces.py\n+++ b/src/plone/z3cform/fieldsets/interfaces.py\n@@ -11,9 +11,9 @@ class IFormExtender(Interface):\n     """\n \n     order = schema.Int(\n-        title=u"Order",\n-        description=u"Use this property to order the sorter. " +\n-        u"Low numbers are executed before high ones.",\n+        title="Order",\n+        description="Use this property to order the sorter. " +\n+        "Low numbers are executed before high ones.",\n         required=True)\n \n     def update():\n@@ -30,14 +30,14 @@ class IDescriptiveGroup(IGroup):\n     a label and a description.\n     """\n \n-    __name__ = schema.TextLine(title=u"Name of this group")\n+    __name__ = schema.TextLine(title="Name of this group")\n \n     label = schema.TextLine(\n-        title=u"Fieldset title",\n-        description=u"The __name__ will be used if this is not given",\n+        title="Fieldset title",\n+        description="The __name__ will be used if this is not given",\n         required=False)\n \n-    description = schema.Text(title=u"Fieldset description",\n+    description = schema.Text(title="Fieldset description",\n                               required=False)\n \n \n@@ -45,17 +45,17 @@ class IGroupFactory(Interface):\n     """An object that can be used to create a z3c.form.group.Group.\n     """\n \n-    __name__ = schema.TextLine(title=u"Name of this group")\n+    __name__ = schema.TextLine(title="Name of this group")\n \n     label = schema.TextLine(\n-        title=u"Fieldset title",\n-        description=u"The __name__ will be used if this is not given",\n+        title="Fieldset title",\n+        description="The __name__ will be used if this is not given",\n         required=False)\n \n-    description = schema.Text(title=u"Fieldset description",\n+    description = schema.Text(title="Fieldset description",\n                               required=False)\n \n-    fields = schema.Object(title=u"Fields in this form", schema=IFields)\n+    fields = schema.Object(title="Fields in this form", schema=IFields)\n \n \n class IExtensibleForm(Interface):\n@@ -64,13 +64,13 @@ class IExtensibleForm(Interface):\n     """\n \n     groups = schema.List(\n-        title=u\'Groups\',\n+        title=\'Groups\',\n         value_type=schema.Object(\n-            title=u"Group",\n+            title="Group",\n             schema=IGroupFactory))\n \n     default_fieldset_label = schema.TextLine(\n-        title=u"Label of the default fieldset")\n+        title="Label of the default fieldset")\n \n     def updateFields():\n         """Called during form update to allow updating of self.fields\ndiff --git a/src/plone/z3cform/fieldsets/utils.py b/src/plone/z3cform/fieldsets/utils.py\nindex db3a50a..f099985 100644\n--- a/src/plone/z3cform/fieldsets/utils.py\n+++ b/src/plone/z3cform/fieldsets/utils.py\n@@ -17,7 +17,7 @@ def add(form, *args, **kwargs):\n \n     new_fields = Fields(*args, **kwargs)\n \n-    if not group or isinstance(group, six.string_types):\n+    if not group or isinstance(group, str):\n         source = find_source(form, group=group)\n     else:\n         source = group\n@@ -67,7 +67,7 @@ def move(\n         field_name = expandPrefix(prefix) + field_name\n \n     if before and after:\n-        raise ValueError(u"Only one of \'before\' or \'after\' is allowed")\n+        raise ValueError("Only one of \'before\' or \'after\' is allowed")\n \n     offset = 0\n     if after:\ndiff --git a/src/plone/z3cform/interfaces.py b/src/plone/z3cform/interfaces.py\nindex b05ac9b..8181ec3 100644\n--- a/src/plone/z3cform/interfaces.py\n+++ b/src/plone/z3cform/interfaces.py\n@@ -29,16 +29,16 @@ def render():\n     form = Attribute("The form class. Should be set at class level")\n \n     form_instance = schema.Object(\n-        title=u"Instance of the form being rendered",\n-        description=u"Set by the wrapper code during __init__()",\n+        title="Instance of the form being rendered",\n+        description="Set by the wrapper code during __init__()",\n         readonly=True,\n         schema=IForm\n     )\n \n     index = schema.Object(\n-        title=u"Page template instance",\n-        description=(u"If not set, a template will be found "\n-                     u"via an adapter lookup"),\n+        title="Page template instance",\n+        description=("If not set, a template will be found "\n+                     "via an adapter lookup"),\n         required=False,\n         schema=IPageTemplate\n     )\ndiff --git a/src/plone/z3cform/layout.py b/src/plone/z3cform/layout.py\nindex 1fe1bdd..1414179 100644\n--- a/src/plone/z3cform/layout.py\n+++ b/src/plone/z3cform/layout.py\n@@ -25,7 +25,7 @@ class FormWrapper(BrowserView):\n     request_layer = z3c.form.interfaces.IFormLayer\n \n     def __init__(self, context, request):\n-        super(FormWrapper, self).__init__(context, request)\n+        super().__init__(context, request)\n         if self.form is not None:\n             self.form_instance = self.form(\n                 aq_inner(self.context), self.request)\n@@ -73,7 +73,7 @@ def render(self):\n         (self, request) to IPageTemplate and use that instead.\n         """\n         if self.request.response.getStatus() in (302, 303):\n-            return u""\n+            return ""\n         if self.index is None:\n             template = zope.component.getMultiAdapter(\n                 (self, self.request), IPageTemplate)\ndiff --git a/src/plone/z3cform/subform.py b/src/plone/z3cform/subform.py\nindex 20fc3a1..71aae09 100644\n--- a/src/plone/z3cform/subform.py\n+++ b/src/plone/z3cform/subform.py\n@@ -55,14 +55,14 @@ def update(self):\n \n         self.setupFields()\n \n-        super(ObjectSubForm, self).update()\n+        super().update()\n \n     def getContent(self):\n         return self.__parent__._value\n \n \n @zope.interface.implementer(ISubformFactory)\n-class SubformAdapter(object):\n+class SubformAdapter:\n     """Most basic-default subform factory adapter"""\n     zope.component.adapts(zope.interface.Interface, #widget value\n                           interfaces.IFormLayer,    #request\ndiff --git a/src/plone/z3cform/tests.py b/src/plone/z3cform/tests.py\nindex 69e60d2..b854bc8 100644\n--- a/src/plone/z3cform/tests.py\n+++ b/src/plone/z3cform/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import layered\n from plone.testing import z2\n@@ -192,22 +191,22 @@ def test_recursive_decode(self):\n             },\n             "utf-8",\n         )\n-        self.assertIsInstance(form["foo"], six.text_type)\n-        self.assertEqual(form["foo"], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo"], str)\n+        self.assertEqual(form["foo"], "fo\xc3\xb8")\n         self.assertIsInstance(form["foo_list"], list)\n-        self.assertIsInstance(form["foo_list"][0], six.text_type)\n-        self.assertIsInstance(form["foo_list"][1], six.text_type)\n-        self.assertEqual(form["foo_list"][0], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo_list"][0], str)\n+        self.assertIsInstance(form["foo_list"][1], str)\n+        self.assertEqual(form["foo_list"][0], "fo\xc3\xb8")\n         self.assertEqual(form["foo_list"][1], "SPAM")\n         self.assertIsInstance(form["foo_tuple"], tuple)\n-        self.assertIsInstance(form["foo_tuple"][0], six.text_type)\n-        self.assertIsInstance(form["foo_tuple"][1], six.text_type)\n-        self.assertEqual(form["foo_tuple"][0], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo_tuple"][0], str)\n+        self.assertIsInstance(form["foo_tuple"][1], str)\n+        self.assertEqual(form["foo_tuple"][0], "fo\xc3\xb8")\n         self.assertEqual(form["foo_tuple"][1], "HAM")\n         self.assertIsInstance(form["foo_dict"], dict)\n-        self.assertIsInstance(form["foo_dict"]["foo"], six.text_type)\n-        self.assertIsInstance(form["foo_dict"]["bar"], six.text_type)\n-        self.assertEqual(form["foo_dict"]["foo"], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo_dict"]["foo"], str)\n+        self.assertIsInstance(form["foo_dict"]["bar"], str)\n+        self.assertEqual(form["foo_dict"]["foo"], "fo\xc3\xb8")\n         self.assertEqual(form["foo_dict"]["bar"], "EGGS")\n \n \ndiff --git a/src/plone/z3cform/textlines/textlines.py b/src/plone/z3cform/textlines/textlines.py\nindex 2075146..567d929 100644\n--- a/src/plone/z3cform/textlines/textlines.py\n+++ b/src/plone/z3cform/textlines/textlines.py\n@@ -67,8 +67,8 @@ def toWidgetValue(self, value):\n             # if the value is the missing value, then an empty list is\n             # produced.\n             if value is self.field.missing_value:\n-                return u\'\'\n-            return u\'\\n\'.join(six.text_type(v) for v in value)\n+                return \'\'\n+            return \'\\n\'.join(str(v) for v in value)\n \n         def toFieldValue(self, value):\n             """See interfaces.IDataConverter"""\n@@ -96,8 +96,8 @@ def toWidgetValue(self, value):\n         """Convert from text lines to HTML representation."""\n         # if the value is the missing value, then an empty list is produced.\n         if value is self.field.missing_value:\n-            return u\'\'\n-        return u\'\\n\'.join(six.text_type(v) for v in sorted(value))\n+            return \'\'\n+        return \'\\n\'.join(str(v) for v in sorted(value))\n \n \n @zope.component.adapter(\n@@ -111,5 +111,5 @@ def toWidgetValue(self, value):\n         """Convert from text lines to HTML representation."""\n         # if the value is the missing value, then an empty list is produced.\n         if value is self.field.missing_value:\n-            return u\'\'\n-        return u\'\\n\'.join(six.text_type(v) for v in sorted(value))\n+            return \'\'\n+        return \'\\n\'.join(str(v) for v in sorted(value))\ndiff --git a/src/plone/z3cform/traversal.py b/src/plone/z3cform/traversal.py\nindex e9b2adb..a3f632b 100644\n--- a/src/plone/z3cform/traversal.py\n+++ b/src/plone/z3cform/traversal.py\n@@ -16,7 +16,7 @@\n \n @adapter(IForm, IBrowserRequest)\n @implementer(ITraversable)\n-class FormWidgetTraversal(object):\n+class FormWidgetTraversal:\n     """Allow traversal to widgets via the ++widget++ namespace. The context\n     is the from itself (used when the layout wrapper view is not used).\n \ndiff --git a/src/plone/z3cform/widget.py b/src/plone/z3cform/widget.py\nindex d34ce60..dde9868 100644\n--- a/src/plone/z3cform/widget.py\n+++ b/src/plone/z3cform/widget.py\n@@ -11,7 +11,7 @@ class SingleCheckBoxWidget(z3c.form.browser.checkbox.SingleCheckBoxWidget):\n \n     def update(self):\n         self.ignoreContext = True\n-        super(SingleCheckBoxWidget, self).update()\n+        super().update()\n \n     def updateTerms(self):\n         # The default implementation would render "selected" as a\n@@ -19,7 +19,7 @@ def updateTerms(self):\n         if self.terms is None:\n             self.terms = z3c.form.term.Terms()\n             self.terms.terms = vocabulary.SimpleVocabulary((\n-                vocabulary.SimpleTerm(True, \'selected\', u\'\'),\n+                vocabulary.SimpleTerm(True, \'selected\', \'\'),\n             ))\n         return self.terms\n \n@@ -30,14 +30,12 @@ def extract(self, default=z3c.form.interfaces.NOVALUE, setErrors=True):\n             return default\n         else:\n             try:\n-                return super(\n-                    SingleCheckBoxWidget,\n-                    self).extract(\n+                return super().extract(\n                     default,\n                     setErrors=setErrors)\n             except TypeError:\n                 # for z3c.form <= 1.9.0\n-                return super(SingleCheckBoxWidget, self).extract(default)\n+                return super().extract(default)\n \n \n @zope.component.adapter(\ndiff --git a/src/plone/z3cform/z2.py b/src/plone/z3cform/z2.py\nindex abe9db8..a8c58fd 100644\n--- a/src/plone/z3cform/z2.py\n+++ b/src/plone/z3cform/z2.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from ZPublisher import HTTPRequest\n from zope import interface\n from zope.i18n.interfaces import IUserPreferredCharsets\n@@ -40,12 +39,12 @@ def processInputs(request, charsets=None):\n \n     for name, value in request.form.items():\n         if not (isCGI_NAME(name) or name.startswith(\'HTTP_\')):\n-            if isinstance(value, six.binary_type):\n+            if isinstance(value, bytes):\n                 request.form[name] = _decode(value, charsets)\n             elif isinstance(value, (list, tuple,)):\n                 newValue = []\n                 for val in value:\n-                    if isinstance(val, six.binary_type):\n+                    if isinstance(val, bytes):\n                         val = _decode(val, charsets)\n                     newValue.append(val)\n \n@@ -71,8 +70,8 @@ def _recursive_decode(value, charset):\n         return tuple(_recursive_decode(v, charset) for v in value)\n     elif isinstance(value, dict):\n         return {k: _recursive_decode(v, charset) for k, v in value.items()}\n-    elif isinstance(value, six.binary_type):\n-        return six.text_type(value, charset, \'replace\')\n+    elif isinstance(value, bytes):\n+        return str(value, charset, \'replace\')\n     return value\n \n \n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-11T23:53:32+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/dc95aee2ab3297cf4745927b1935813b676b587b

chore: isort

Files changed:
M setup.py
M src/plone/z3cform/__init__.py
M src/plone/z3cform/converter.py
M src/plone/z3cform/crud/crud.py
M src/plone/z3cform/layout.py
M src/plone/z3cform/patch.py
M src/plone/z3cform/templates.py
M src/plone/z3cform/tests.py
M src/plone/z3cform/textlines/textlines.py
M src/plone/z3cform/widget.py
M src/plone/z3cform/z2.py

b"diff --git a/setup.py b/setup.py\nindex e196016..3429f97 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,9 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n import os\n \n+\n __version__ = '2.0.1.dev0'\n \n \ndiff --git a/src/plone/z3cform/__init__.py b/src/plone/z3cform/__init__.py\nindex f02f849..a24619d 100644\n--- a/src/plone/z3cform/__init__.py\n+++ b/src/plone/z3cform/__init__.py\n@@ -1,5 +1,9 @@\n import zope.i18nmessageid\n+\n+\n MessageFactory = zope.i18nmessageid.MessageFactory('plone.z3cform')\n \n from plone.z3cform.patch import apply_patch\n+\n+\n apply_patch()\ndiff --git a/src/plone/z3cform/converter.py b/src/plone/z3cform/converter.py\nindex fe2cffe..e9b353d 100644\n--- a/src/plone/z3cform/converter.py\n+++ b/src/plone/z3cform/converter.py\n@@ -1,8 +1,8 @@\n-import ZPublisher.HTTPRequest\n import cgi\n import z3c.form.converter\n import z3c.form.interfaces\n import zope.publisher.browser\n+import ZPublisher.HTTPRequest\n \n \n class FileUploadDataConverter(z3c.form.converter.FileUploadDataConverter):\ndiff --git a/src/plone/z3cform/crud/crud.py b/src/plone/z3cform/crud/crud.py\nindex b69523a..2237f2d 100644\n--- a/src/plone/z3cform/crud/crud.py\n+++ b/src/plone/z3cform/crud/crud.py\n@@ -1,4 +1,3 @@\n-from ZODB.POSException import ConflictError\n from plone.batching import Batch\n from plone.batching.browser import BatchView\n from plone.z3cform import MessageFactory as _\n@@ -6,9 +5,13 @@\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n-from z3c.form.interfaces import DISPLAY_MODE, INPUT_MODE, NOVALUE\n+from z3c.form.interfaces import DISPLAY_MODE\n+from z3c.form.interfaces import INPUT_MODE\n+from z3c.form.interfaces import NOVALUE\n+from ZODB.POSException import ConflictError\n from zope import interface\n from zope.browserpage import viewpagetemplatefile\n+\n import sys\n import z3c.form.widget\n import zope.event\ndiff --git a/src/plone/z3cform/layout.py b/src/plone/z3cform/layout.py\nindex 1414179..a638e39 100644\n--- a/src/plone/z3cform/layout.py\n+++ b/src/plone/z3cform/layout.py\n@@ -1,9 +1,10 @@\n from Acquisition import aq_inner\n-from Products.Five import BrowserView\n-from Products.Five.browser.pagetemplatefile import BoundPageTemplate\n from plone.z3cform import interfaces\n from plone.z3cform import z2\n+from Products.Five import BrowserView\n+from Products.Five.browser.pagetemplatefile import BoundPageTemplate\n from zope.pagetemplate.interfaces import IPageTemplate\n+\n import z3c.form.interfaces\n import zope.component\n import zope.interface\ndiff --git a/src/plone/z3cform/patch.py b/src/plone/z3cform/patch.py\nindex 300d810..f142fd9 100644\n--- a/src/plone/z3cform/patch.py\n+++ b/src/plone/z3cform/patch.py\n@@ -6,6 +6,7 @@\n from z3c.form.form import BaseForm\n from z3c.form.group import GroupForm\n \n+\n _original_BaseForm_update = BaseForm.update\n _original_GroupForm_update = GroupForm.update\n \ndiff --git a/src/plone/z3cform/templates.py b/src/plone/z3cform/templates.py\nindex b72a9c3..467bb8e 100644\n--- a/src/plone/z3cform/templates.py\n+++ b/src/plone/z3cform/templates.py\n@@ -7,7 +7,7 @@\n from Acquisition import IAcquirer\n from Acquisition import ImplicitAcquisitionWrapper\n from Products.Five.browser.pagetemplatefile import (\n-    ViewPageTemplateFile as ZopeTwoPageTemplateFile\n+    ViewPageTemplateFile as ZopeTwoPageTemplateFile,\n )\n from z3c.form import util\n from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\ndiff --git a/src/plone/z3cform/tests.py b/src/plone/z3cform/tests.py\nindex b854bc8..a95ed76 100644\n--- a/src/plone/z3cform/tests.py\n+++ b/src/plone/z3cform/tests.py\n@@ -35,10 +35,18 @@ def log(event):\n \n def setup_defaults():\n     # Set up z3c.form defaults\n-    from z3c.form import browser, button, converter, datamanager, error, field\n-    from z3c.form import interfaces, validator, widget\n+    from z3c.form import browser\n+    from z3c.form import button\n+    from z3c.form import converter\n+    from z3c.form import datamanager\n+    from z3c.form import error\n+    from z3c.form import field\n+    from z3c.form import interfaces\n+    from z3c.form import validator\n+    from z3c.form import widget\n     from z3c.form.browser import text\n     from zope.pagetemplate.interfaces import IPageTemplate\n+\n     import os.path\n     import zope.schema\n \ndiff --git a/src/plone/z3cform/textlines/textlines.py b/src/plone/z3cform/textlines/textlines.py\nindex 567d929..e7dabc4 100644\n--- a/src/plone/z3cform/textlines/textlines.py\n+++ b/src/plone/z3cform/textlines/textlines.py\n@@ -34,9 +34,9 @@\n \n     # backport for z3c.form 1.9\n \n+    from z3c.form import converter\n     from z3c.form import interfaces\n     from z3c.form import widget\n-    from z3c.form import converter\n     from z3c.form.browser import textarea\n \n     class ITextLinesWidget(interfaces.IWidget):\ndiff --git a/src/plone/z3cform/widget.py b/src/plone/z3cform/widget.py\nindex dde9868..3912b04 100644\n--- a/src/plone/z3cform/widget.py\n+++ b/src/plone/z3cform/widget.py\n@@ -1,4 +1,5 @@\n from zope.schema import vocabulary\n+\n import z3c.form.browser.checkbox\n import z3c.form.interfaces\n import z3c.form.term\ndiff --git a/src/plone/z3cform/z2.py b/src/plone/z3cform/z2.py\nindex a8c58fd..f154d86 100644\n--- a/src/plone/z3cform/z2.py\n+++ b/src/plone/z3cform/z2.py\n@@ -1,8 +1,8 @@\n-from ZPublisher import HTTPRequest\n from zope import interface\n from zope.i18n.interfaces import IUserPreferredCharsets\n from zope.publisher.browser import isCGI_NAME\n from zope.publisher.interfaces.browser import IBrowserApplicationRequest\n+from ZPublisher import HTTPRequest\n \n import six\n import z3c.form.interfaces\n"

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-11T23:56:12+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/09de6bedbf04dfda3aba077402cc8bb4c35f544d

chore: black

Files changed:
M setup.py
M src/plone/__init__.py
M src/plone/z3cform/__init__.py
M src/plone/z3cform/crud/crud.py
M src/plone/z3cform/fieldsets/extensible.py
M src/plone/z3cform/fieldsets/group.py
M src/plone/z3cform/fieldsets/interfaces.py
M src/plone/z3cform/fieldsets/utils.py
M src/plone/z3cform/interfaces.py
M src/plone/z3cform/layout.py
M src/plone/z3cform/subform.py
M src/plone/z3cform/templates.py
M src/plone/z3cform/tests.py
M src/plone/z3cform/textlines/textlines.py
M src/plone/z3cform/traversal.py
M src/plone/z3cform/widget.py
M src/plone/z3cform/z2.py

b'diff --git a/setup.py b/setup.py\nindex 3429f97..12773b0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,28 +4,28 @@\n import os\n \n \n-__version__ = \'2.0.1.dev0\'\n+__version__ = "2.0.1.dev0"\n \n \n def description():\n-    join = lambda *paths: os.path.join(\'src\', \'plone\', \'z3cform\', *paths)\n+    join = lambda *paths: os.path.join("src", "plone", "z3cform", *paths)\n     return (\n-        open(\'README.rst\').read()\n-        + \'\\n\'\n-        + open(join(\'fieldsets\', \'README.rst\')).read()\n-        + \'\\n\'\n-        + open(join(\'crud\', \'README.txt\')).read()\n-        + \'\\n\'\n-        + open(\'CHANGES.rst\').read()\n-        + \'\\n\'\n+        open("README.rst").read()\n+        + "\\n"\n+        + open(join("fieldsets", "README.rst")).read()\n+        + "\\n"\n+        + open(join("crud", "README.txt")).read()\n+        + "\\n"\n+        + open("CHANGES.rst").read()\n+        + "\\n"\n     )\n \n \n setup(\n-    name=\'plone.z3cform\',\n+    name="plone.z3cform",\n     version=__version__,\n-    description=\'plone.z3cform is a library that allows use of z3c.form \'\n-    \'with Zope and the CMF.\',\n+    description="plone.z3cform is a library that allows use of z3c.form "\n+    "with Zope and the CMF.",\n     long_description=description(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n@@ -42,25 +42,25 @@ def description():\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone CMF Python Zope CMS Webapplication\',\n-    author=\'Plone Foundation\',\n-    author_email=\'releasemanager@plone.org\',\n-    url=\'https://github.com/plone/plone.z3cform\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    keywords="Plone CMF Python Zope CMS Webapplication",\n+    author="Plone Foundation",\n+    author_email="releasemanager@plone.org",\n+    url="https://github.com/plone/plone.z3cform",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.batching\',\n-        \'six\',\n-        \'z3c.form>=4.0\',\n-        \'zope.i18n>=3.4\',\n-        \'zope.browserpage\',\n-        \'zope.component\',\n-        \'Zope\',\n+        "setuptools",\n+        "plone.batching",\n+        "six",\n+        "z3c.form>=4.0",\n+        "zope.i18n>=3.4",\n+        "zope.browserpage",\n+        "zope.component",\n+        "Zope",\n     ],\n-    extras_require={\'test\': [\'lxml\', \'plone.testing[z2]\']},\n+    extras_require={"test": ["lxml", "plone.testing[z2]"]},\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/z3cform/__init__.py b/src/plone/z3cform/__init__.py\nindex a24619d..742a33a 100644\n--- a/src/plone/z3cform/__init__.py\n+++ b/src/plone/z3cform/__init__.py\n@@ -1,7 +1,7 @@\n import zope.i18nmessageid\n \n \n-MessageFactory = zope.i18nmessageid.MessageFactory(\'plone.z3cform\')\n+MessageFactory = zope.i18nmessageid.MessageFactory("plone.z3cform")\n \n from plone.z3cform.patch import apply_patch\n \ndiff --git a/src/plone/z3cform/crud/crud.py b/src/plone/z3cform/crud/crud.py\nindex 2237f2d..703cee2 100644\n--- a/src/plone/z3cform/crud/crud.py\n+++ b/src/plone/z3cform/crud/crud.py\n@@ -20,22 +20,25 @@\n \n \n class ICrudForm(interface.Interface):\n-\n     update_schema = interface.Attribute(\n-        "Editable part of the schema for use in the update form.")\n+        "Editable part of the schema for use in the update form."\n+    )\n \n     view_schema = interface.Attribute(\n-        "Viewable (only) part of the schema for use in the update form.")\n+        "Viewable (only) part of the schema for use in the update form."\n+    )\n \n     add_schema = interface.Attribute(\n-        "Schema for use in the add form; defaults to ``update_schema``.")\n+        "Schema for use in the add form; defaults to ``update_schema``."\n+    )\n \n     editform_factory = interface.Attribute("Factory used for the edit form.")\n \n     addform_factory = interface.Attribute("Factory used for the add form.")\n \n     batch_size = interface.Attribute(\n-        "Set this to a value greater than 0 to display n items per page.")\n+        "Set this to a value greater than 0 to display n items per page."\n+    )\n \n     def get_items():\n         """Subclasses must a list of all items to edit.\n@@ -66,12 +69,10 @@ def remove(id_item):\n         """\n \n     def before_update(item, data):\n-        """A hook that gets called before an item is updated.\n-        """\n+        """A hook that gets called before an item is updated."""\n \n     def link(item, field):\n-        """Return a URL for this item\'s field or None.\n-        """\n+        """Return a URL for this item\'s field or None."""\n \n \n @interface.implementer(ICrudForm)\n@@ -110,7 +111,7 @@ def link(self, item, field):\n \n \n class CrudBatchView(BatchView):\n-    prefix = \'\'\n+    prefix = ""\n \n     def make_link(self, pagenumber):\n         start = max(pagenumber - 1, 0)\n@@ -118,11 +119,11 @@ def make_link(self, pagenumber):\n \n \n class EditSubForm(form.EditForm):\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-row.pt\')\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-row.pt")\n \n     @property\n     def prefix(self):\n-        return \'crud-edit.%s.\' % self.content_id\n+        return "crud-edit.%s." % self.content_id\n \n     # These are set by the parent form\n     content = None\n@@ -145,8 +146,8 @@ def fields(self):\n                 f.mode = DISPLAY_MODE\n                 # This is to allow a field to appear in both view\n                 # and edit mode at the same time:\n-                if not f.__name__.startswith(\'view_\'):\n-                    f.__name__ = \'view_\' + f.__name__\n+                if not f.__name__.startswith("view_"):\n+                    f.__name__ = "view_" + f.__name__\n             fields += view_fields\n \n         return fields\n@@ -156,9 +157,8 @@ def getContent(self):\n \n     def _select_field(self):\n         select_field = field.Field(\n-            zope.schema.Bool(__name__=\'select\',\n-                             required=False,\n-                             title=_(\'select\')))\n+            zope.schema.Bool(__name__="select", required=False, title=_("select"))\n+        )\n         select_field.widgetFactory[INPUT_MODE] = singlecheckboxwidget_factory\n         return select_field\n \n@@ -172,7 +172,7 @@ def getCombinedWidgets(self):\n         seen = set()\n         for name, widget in list(widgets):\n             if widget.mode == INPUT_MODE:\n-                view_widget = self.widgets.get(\'view_%s\' % name)\n+                view_widget = self.widgets.get("view_%s" % name)\n                 if view_widget is not None:\n                     combined.append((widget, view_widget))\n                     seen.add(view_widget)\n@@ -198,15 +198,15 @@ def getNiceTitles(self):\n \n class EditForm(form.Form):\n     label = _("Edit")\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-table.pt\')\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-table.pt")\n \n     # exposes the edit sub form for your own derivatives\n     editsubform_factory = EditSubForm\n \n     @property\n     def prefix(self):\n-        parent_prefix = getattr(self.context, \'prefix\', \'\')\n-        return \'crud-edit.\' + parent_prefix\n+        parent_prefix = getattr(self.context, "prefix", "")\n+        return "crud-edit." + parent_prefix\n \n     def update(self):\n         self._update_subforms()\n@@ -225,7 +225,7 @@ def _update_subforms(self):\n     def batch(self):\n         items = self.context.get_items()\n         batch_size = self.context.batch_size or sys.maxsize\n-        page = int(self.request.get(\'%spage\' % self.prefix, 0))\n+        page = int(self.request.get("%spage" % self.prefix, 0))\n         return Batch.fromPagenumber(items, batch_size, page + 1)\n \n     def render_batch_navigation(self):\n@@ -233,9 +233,11 @@ def render_batch_navigation(self):\n         bv.prefix = self.prefix\n         return bv(self.batch)\n \n-    @button.buttonAndHandler(_(\'Apply changes\'),\n-                             name=\'edit\',\n-                             condition=lambda form: form.context.update_schema)\n+    @button.buttonAndHandler(\n+        _("Apply changes"),\n+        name="edit",\n+        condition=lambda form: form.context.update_schema,\n+    )\n     def handle_edit(self, action):\n         success = _("Successfully updated")\n         partly_success = _("Some of your changes could not be applied.")\n@@ -255,7 +257,7 @@ def handle_edit(self, action):\n                 elif status is success:\n                     status = partly_success\n                 continue\n-            del data[\'select\']\n+            del data["select"]\n             self.context.before_update(subform.content, data)\n             changes = subform.applyChanges(data)\n             if changes:\n@@ -270,10 +272,11 @@ def handle_edit(self, action):\n                     if widget.mode == DISPLAY_MODE:\n                         widget.update()\n                         zope.event.notify(\n-                            z3c.form.widget.AfterWidgetUpdateEvent(widget))\n+                            z3c.form.widget.AfterWidgetUpdateEvent(widget)\n+                        )\n         self.status = status\n \n-    @button.buttonAndHandler(_(\'Delete\'), name=\'delete\')\n+    @button.buttonAndHandler(_("Delete"), name="delete")\n     def handle_delete(self, action):\n         selected = self.selected_items()\n         if selected:\n@@ -287,7 +290,7 @@ def handle_delete(self, action):\n                     # In case an exception is raised, we\'ll catch it\n                     # and notify the user; in general, this is\n                     # unexpected behavior:\n-                    self.status = _(\'Unable to remove one or more items.\')\n+                    self.status = _("Unable to remove one or more items.")\n                     break\n \n             # We changed the amount of entries, so we update the subforms\n@@ -299,7 +302,7 @@ def handle_delete(self, action):\n     def selected_items(self):\n         tuples = []\n         for subform in self.subforms:\n-            data = subform.widgets[\'select\'].extract()\n+            data = subform.widgets["select"].extract()\n             if not data or data is NOVALUE:\n                 continue\n             else:\n@@ -313,23 +316,20 @@ def getURL(self):\n         to not need plone stack in testing-setup\n         """\n         current_base_url = self.request.get(\n-            \'ACTUAL_URL\',\n+            "ACTUAL_URL",\n             self.request.get(\n-                \'VIRTUAL_URL\',\n-                self.request.get(\n-                    \'URL\',\n-                    self.context.context.absolute_url()\n-                )\n-            )\n+                "VIRTUAL_URL",\n+                self.request.get("URL", self.context.context.absolute_url()),\n+            ),\n         )\n-        query = self.request.get(\'QUERY_STRING\', None)\n+        query = self.request.get("QUERY_STRING", None)\n         if query:\n-            return current_base_url + \'?\' + query\n+            return current_base_url + "?" + query\n         return current_base_url\n \n \n class AddForm(form.Form):\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-add.pt\')\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-add.pt")\n \n     label = _("Add")\n     ignoreContext = True\n@@ -337,14 +337,14 @@ class AddForm(form.Form):\n \n     @property\n     def prefix(self):\n-        parent_prefix = getattr(self.context, \'prefix\', \'\')\n-        return \'crud-add.\' + parent_prefix\n+        parent_prefix = getattr(self.context, "prefix", "")\n+        return "crud-add." + parent_prefix\n \n     @property\n     def fields(self):\n         return field.Fields(self.context.add_schema)\n \n-    @button.buttonAndHandler(_(\'Add\'), name=\'add\')\n+    @button.buttonAndHandler(_("Add"), name="add")\n     def handle_add(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -360,7 +360,6 @@ def handle_add(self, action):\n \n \n class NullForm:\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -369,13 +368,14 @@ def update(self):\n         pass\n \n     def render(self):\n-        return \'\'\n+        return ""\n+\n     __call__ = render\n \n \n class CrudForm(AbstractCrudForm, form.Form):\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-master.pt\')\n-    description = \'\'\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-master.pt")\n+    description = ""\n \n     editform_factory = EditForm\n     addform_factory = AddForm\ndiff --git a/src/plone/z3cform/fieldsets/extensible.py b/src/plone/z3cform/fieldsets/extensible.py\nindex 60ab0cf..0ecdaf5 100644\n--- a/src/plone/z3cform/fieldsets/extensible.py\n+++ b/src/plone/z3cform/fieldsets/extensible.py\n@@ -13,8 +13,7 @@ def order_key(adapter_tuple):\n \n @implementer(IFormExtender)\n class FormExtender:\n-    """Base class for IFormExtender adapters with convenience APIs\n-    """\n+    """Base class for IFormExtender adapters with convenience APIs"""\n \n     # Change this to prioritise\n     order = 0\n@@ -34,28 +33,27 @@ def add(self, *args, **kwargs):\n         utils.add(self.form, *args, **kwargs)\n \n     def remove(self, field_name, prefix=None):\n-        """Get rid of a field. The omitted field will be returned.\n-        """\n+        """Get rid of a field. The omitted field will be returned."""\n \n         return utils.remove(self.form, field_name, prefix=prefix)\n \n     def move(\n-            self,\n-            field_name,\n-            before=None,\n-            after=None,\n-            prefix=None,\n-            relative_prefix=None):\n-        """Move the field with the given name before or after another field.\n-        """\n+        self, field_name, before=None, after=None, prefix=None, relative_prefix=None\n+    ):\n+        """Move the field with the given name before or after another field."""\n \n-        utils.move(self.form, field_name, before=before, after=after,\n-                   prefix=prefix, relative_prefix=relative_prefix)\n+        utils.move(\n+            self.form,\n+            field_name,\n+            before=before,\n+            after=after,\n+            prefix=prefix,\n+            relative_prefix=relative_prefix,\n+        )\n \n \n @implementer(IExtensibleForm)\n class ExtensibleForm(GroupForm):\n-\n     groups = []\n     default_fieldset_label = _("Default")\n \n@@ -64,9 +62,6 @@ def update(self):\n         super().update()\n \n     def updateFields(self):\n-        extenders = getAdapters(\n-            (self.context, self.request, self),\n-            IFormExtender\n-        )\n+        extenders = getAdapters((self.context, self.request, self), IFormExtender)\n         for name, extender in sorted(extenders, key=order_key):\n             extender.update()\ndiff --git a/src/plone/z3cform/fieldsets/group.py b/src/plone/z3cform/fieldsets/group.py\nindex b1b36a6..73f8e7e 100644\n--- a/src/plone/z3cform/fieldsets/group.py\n+++ b/src/plone/z3cform/fieldsets/group.py\n@@ -18,15 +18,7 @@ def getContent(self):\n \n @implementer(IGroupFactory)\n class GroupFactory:\n-\n-    def __init__(\n-        self,\n-        __name__,\n-        fields,\n-        label=None,\n-        description=None,\n-        order=None\n-    ):\n+    def __init__(self, __name__, fields, label=None, description=None, order=None):\n         self.__name__ = __name__\n         self.fields = fields\n         self.label = label or __name__\n@@ -34,7 +26,7 @@ def __init__(\n         self.order = order\n \n     def __call__(self, context, request, parentForm):\n-        groupclass = getattr(parentForm, \'group_class\', Group)\n+        groupclass = getattr(parentForm, "group_class", Group)\n         group = groupclass(context, request, parentForm)\n         group.__name__ = self.__name__\n         group.label = self.label\ndiff --git a/src/plone/z3cform/fieldsets/interfaces.py b/src/plone/z3cform/fieldsets/interfaces.py\nindex de584c6..0ff2e0c 100644\n--- a/src/plone/z3cform/fieldsets/interfaces.py\n+++ b/src/plone/z3cform/fieldsets/interfaces.py\n@@ -12,16 +12,17 @@ class IFormExtender(Interface):\n \n     order = schema.Int(\n         title="Order",\n-        description="Use this property to order the sorter. " +\n-        "Low numbers are executed before high ones.",\n-        required=True)\n+        description="Use this property to order the sorter. "\n+        + "Low numbers are executed before high ones.",\n+        required=True,\n+    )\n \n     def update():\n         """Modify the form in place. Supported operations include:\n \n-         - modify the \'fields\' object to change the default fieldset\n-         - modify the \'groups\' list to add, remove or reorder fieldsets\n-         - modify the \'fields\' property of a given group\n+        - modify the \'fields\' object to change the default fieldset\n+        - modify the \'groups\' list to add, remove or reorder fieldsets\n+        - modify the \'fields\' property of a given group\n         """\n \n \n@@ -35,25 +36,24 @@ class IDescriptiveGroup(IGroup):\n     label = schema.TextLine(\n         title="Fieldset title",\n         description="The __name__ will be used if this is not given",\n-        required=False)\n+        required=False,\n+    )\n \n-    description = schema.Text(title="Fieldset description",\n-                              required=False)\n+    description = schema.Text(title="Fieldset description", required=False)\n \n \n class IGroupFactory(Interface):\n-    """An object that can be used to create a z3c.form.group.Group.\n-    """\n+    """An object that can be used to create a z3c.form.group.Group."""\n \n     __name__ = schema.TextLine(title="Name of this group")\n \n     label = schema.TextLine(\n         title="Fieldset title",\n         description="The __name__ will be used if this is not given",\n-        required=False)\n+        required=False,\n+    )\n \n-    description = schema.Text(title="Fieldset description",\n-                              required=False)\n+    description = schema.Text(title="Fieldset description", required=False)\n \n     fields = schema.Object(title="Fields in this form", schema=IFields)\n \n@@ -64,13 +64,10 @@ class IExtensibleForm(Interface):\n     """\n \n     groups = schema.List(\n-        title=\'Groups\',\n-        value_type=schema.Object(\n-            title="Group",\n-            schema=IGroupFactory))\n+        title="Groups", value_type=schema.Object(title="Group", schema=IGroupFactory)\n+    )\n \n-    default_fieldset_label = schema.TextLine(\n-        title="Label of the default fieldset")\n+    default_fieldset_label = schema.TextLine(title="Label of the default fieldset")\n \n     def updateFields():\n         """Called during form update to allow updating of self.fields\ndiff --git a/src/plone/z3cform/fieldsets/utils.py b/src/plone/z3cform/fieldsets/utils.py\nindex f099985..b25f02f 100644\n--- a/src/plone/z3cform/fieldsets/utils.py\n+++ b/src/plone/z3cform/fieldsets/utils.py\n@@ -12,8 +12,8 @@ def add(form, *args, **kwargs):\n     created if it doesn\'t exist.\n     """\n \n-    index = kwargs.pop(\'index\', None)\n-    group = kwargs.pop(\'group\', None)\n+    index = kwargs.pop("index", None)\n+    group = kwargs.pop("group", None)\n \n     new_fields = Fields(*args, **kwargs)\n \n@@ -30,14 +30,15 @@ def add(form, *args, **kwargs):\n             source.fields += new_fields\n         else:\n             field_names = list(source.fields.keys())\n-            source.fields = source.fields.select(*field_names[:index]) + \\\n-                new_fields + \\\n-                source.fields.select(*field_names[index:])\n+            source.fields = (\n+                source.fields.select(*field_names[:index])\n+                + new_fields\n+                + source.fields.select(*field_names[index:])\n+            )\n \n \n def remove(form, field_name, prefix=None):\n-    """Get rid of a field. The omitted field will be returned.\n-    """\n+    """Get rid of a field. The omitted field will be returned."""\n \n     if prefix:\n         field_name = expandPrefix(prefix) + field_name\n@@ -54,15 +55,8 @@ def remove(form, field_name, prefix=None):\n                 return field\n \n \n-def move(\n-        form,\n-        field_name,\n-        before=None,\n-        after=None,\n-        prefix=None,\n-        relative_prefix=None):\n-    """Move the field with the given name before or after another field.\n-    """\n+def move(form, field_name, before=None, after=None, prefix=None, relative_prefix=None):\n+    """Move the field with the given name before or after another field."""\n     if prefix:\n         field_name = expandPrefix(prefix) + field_name\n \n@@ -79,14 +73,14 @@ def move(\n \n     if field_name not in form.fields:\n         found = False\n-        for group in getattr(form, \'groups\', []):\n+        for group in getattr(form, "groups", []):\n             if field_name in group.fields:\n                 found = True\n                 break\n         if not found:\n             raise KeyError("Field %s not found" % field_name)\n \n-    if relative != \'*\' and relative not in form.fields:\n+    if relative != "*" and relative not in form.fields:\n         found = False\n         for group in form.groups:\n             if relative in group.fields:\n@@ -102,7 +96,7 @@ def move(\n \n     if relative in form.fields:\n         index = list(form.fields.keys()).index(relative)\n-    elif orig_relative == \'*\' and relative_prefix is None:\n+    elif orig_relative == "*" and relative_prefix is None:\n         if before:\n             index = 0\n         else:\n@@ -112,7 +106,7 @@ def move(\n             if relative in group.fields:\n                 index = list(group.fields.keys()).index(relative)\n                 break\n-            elif orig_relative == \'*\' and relative_prefix == group.prefix:\n+            elif orig_relative == "*" and relative_prefix == group.prefix:\n                 if before:\n                     index = 0\n                 else:\ndiff --git a/src/plone/z3cform/interfaces.py b/src/plone/z3cform/interfaces.py\nindex 8181ec3..cc34c7b 100644\n--- a/src/plone/z3cform/interfaces.py\n+++ b/src/plone/z3cform/interfaces.py\n@@ -19,12 +19,10 @@ class IFormWrapper(Interface):\n     """\n \n     def update():\n-        """We use the content provider update/render couple.\n-        """\n+        """We use the content provider update/render couple."""\n \n     def render():\n-        """We use the content provider update/render couple.\n-        """\n+        """We use the content provider update/render couple."""\n \n     form = Attribute("The form class. Should be set at class level")\n \n@@ -32,15 +30,14 @@ def render():\n         title="Instance of the form being rendered",\n         description="Set by the wrapper code during __init__()",\n         readonly=True,\n-        schema=IForm\n+        schema=IForm,\n     )\n \n     index = schema.Object(\n         title="Page template instance",\n-        description=("If not set, a template will be found "\n-                     "via an adapter lookup"),\n+        description=("If not set, a template will be found " "via an adapter lookup"),\n         required=False,\n-        schema=IPageTemplate\n+        schema=IPageTemplate,\n     )\n \n \n@@ -61,9 +58,8 @@ class IDeferSecurityCheck(Interface):\n \n class ISubformFactory(Interface):\n     """Factory that will instantiate our subforms for ObjectWidget.\n-       BBB: backported from z3c.form 3.6.x\n+    BBB: backported from z3c.form 3.6.x\n     """\n \n     def __call__():\n-        """Return a default object created to be populated.\n-        """\n+        """Return a default object created to be populated."""\ndiff --git a/src/plone/z3cform/layout.py b/src/plone/z3cform/layout.py\nindex a638e39..61668d7 100644\n--- a/src/plone/z3cform/layout.py\n+++ b/src/plone/z3cform/layout.py\n@@ -28,8 +28,7 @@ class FormWrapper(BrowserView):\n     def __init__(self, context, request):\n         super().__init__(context, request)\n         if self.form is not None:\n-            self.form_instance = self.form(\n-                aq_inner(self.context), self.request)\n+            self.form_instance = self.form(aq_inner(self.context), self.request)\n             self.form_instance.__name__ = self.__name__\n \n     def update(self):\n@@ -40,9 +39,7 @@ def update(self):\n         """\n \n         if not z3c.form.interfaces.ISubForm.providedBy(self.form_instance):\n-            zope.interface.alsoProvides(\n-                self.form_instance,\n-                interfaces.IWrappedForm)\n+            zope.interface.alsoProvides(self.form_instance, interfaces.IWrappedForm)\n \n         z2.switch_on(self, request_layer=self.request_layer)\n         self.form_instance.update()\n@@ -77,7 +74,8 @@ def render(self):\n             return ""\n         if self.index is None:\n             template = zope.component.getMultiAdapter(\n-                (self, self.request), IPageTemplate)\n+                (self, self.request), IPageTemplate\n+            )\n             return BoundPageTemplate(template, self)()\n         return self.index()\n \n@@ -94,12 +92,13 @@ def description(self):\n         description for your page.  Overriding this with a simple\n         attribute works as well.\n         """\n-        return getattr(self.form_instance, \'description\', "")\n+        return getattr(self.form_instance, "description", "")\n \n \n def wrap_form(form, __wrapper_class=FormWrapper, **kwargs):\n     class MyFormWrapper(__wrapper_class):\n         pass\n+\n     assert z3c.form.interfaces.IForm.implementedBy(form)\n     MyFormWrapper.form = form\n     for name, value in kwargs.items():\ndiff --git a/src/plone/z3cform/subform.py b/src/plone/z3cform/subform.py\nindex 71aae09..26fd7b1 100644\n--- a/src/plone/z3cform/subform.py\n+++ b/src/plone/z3cform/subform.py\n@@ -9,7 +9,6 @@\n \n @zope.interface.implementer(interfaces.ISubForm)\n class ObjectSubForm(form.BaseForm):\n-\n     def __init__(self, context, request, parentWidget):\n         self.context = context\n         self.request = request\n@@ -29,18 +28,28 @@ def _validate(self):\n                 value = converter.toFieldValue(widget.value)\n                 # validate field value\n                 zope.component.getMultiAdapter(\n-                    (self.context,\n-                     self.request,\n-                     self.parentForm,\n-                     getattr(widget, \'field\', None),\n-                     widget),\n-                    interfaces.IValidator).validate(value, force=True)\n+                    (\n+                        self.context,\n+                        self.request,\n+                        self.parentForm,\n+                        getattr(widget, "field", None),\n+                        widget,\n+                    ),\n+                    interfaces.IValidator,\n+                ).validate(value, force=True)\n             except (zope.schema.ValidationError, ValueError) as error:\n                 # on exception, setup the widget error message\n                 view = zope.component.getMultiAdapter(\n-                    (error, self.request, widget, widget.field,\n-                     self.parentForm, self.context),\n-                    interfaces.IErrorViewSnippet)\n+                    (\n+                        error,\n+                        self.request,\n+                        widget,\n+                        widget.field,\n+                        self.parentForm,\n+                        self.context,\n+                    ),\n+                    interfaces.IErrorViewSnippet,\n+                )\n                 view.update()\n                 widget.error = view\n \n@@ -49,8 +58,10 @@ def setupFields(self):\n \n     def update(self):\n         if self.__parent__.field is None:\n-            raise ValueError("%r .field is None, that\'s a blocking point" % self.__parent__)\n-        #update stuff from parent to be sure\n+            raise ValueError(\n+                "%r .field is None, that\'s a blocking point" % self.__parent__\n+            )\n+        # update stuff from parent to be sure\n         self.mode = self.__parent__.mode\n \n         self.setupFields()\n@@ -64,18 +75,20 @@ def getContent(self):\n @zope.interface.implementer(ISubformFactory)\n class SubformAdapter:\n     """Most basic-default subform factory adapter"""\n-    zope.component.adapts(zope.interface.Interface, #widget value\n-                          interfaces.IFormLayer,    #request\n-                          zope.interface.Interface, #widget context\n-                          zope.interface.Interface, #form\n-                          interfaces.IObjectWidget, #widget\n-                          zope.interface.Interface, #field\n-                          zope.interface.Interface) #field.schema\n+\n+    zope.component.adapts(\n+        zope.interface.Interface,  # widget value\n+        interfaces.IFormLayer,  # request\n+        zope.interface.Interface,  # widget context\n+        zope.interface.Interface,  # form\n+        interfaces.IObjectWidget,  # widget\n+        zope.interface.Interface,  # field\n+        zope.interface.Interface,\n+    )  # field.schema\n \n     factory = ObjectSubForm\n \n-    def __init__(self, context, request, widgetContext, form,\n-                 widget, field, schema):\n+    def __init__(self, context, request, widgetContext, form, widget, field, schema):\n         self.context = context\n         self.request = request\n         self.widgetContext = widgetContext\ndiff --git a/src/plone/z3cform/templates.py b/src/plone/z3cform/templates.py\nindex 467bb8e..1d9f169 100644\n--- a/src/plone/z3cform/templates.py\n+++ b/src/plone/z3cform/templates.py\n@@ -24,7 +24,7 @@\n \n def path(filename):\n     return os.path.join(\n-        os.path.dirname(plone.z3cform.__file__), \'pagetemplates\', filename\n+        os.path.dirname(plone.z3cform.__file__), "pagetemplates", filename\n     )\n \n \n@@ -40,12 +40,8 @@ class FormTemplateFactory(z3c.form.form.FormTemplateFactory):\n     that instead.\n     """\n \n-    def __init__(\n-        self, filename, contentType=\'text/html\', form=None, request=None\n-    ):\n-        self.template = ViewPageTemplateFile(\n-            filename, content_type=contentType\n-        )\n+    def __init__(self, filename, contentType="text/html", form=None, request=None):\n+        self.template = ViewPageTemplateFile(filename, content_type=contentType)\n         zope.component.adapter(\n             util.getSpecification(form), util.getSpecification(request)\n         )(self)\n@@ -59,12 +55,8 @@ class ZopeTwoFormTemplateFactory(z3c.form.form.FormTemplateFactory):\n     form wrapper view.\n     """\n \n-    def __init__(\n-        self, filename, contentType=\'text/html\', form=None, request=None\n-    ):\n-        self.template = ZopeTwoPageTemplateFile(\n-            filename, content_type=contentType\n-        )\n+    def __init__(self, filename, contentType="text/html", form=None, request=None):\n+        self.template = ZopeTwoPageTemplateFile(filename, content_type=contentType)\n         zope.component.adapter(\n             util.getSpecification(form), util.getSpecification(request)\n         )(self)\n@@ -86,16 +78,14 @@ class ZopeTwoWidgetTemplateFactory(z3c.form.widget.WidgetTemplateFactory):\n     def __init__(\n         self,\n         filename,\n-        contentType=\'text/html\',\n+        contentType="text/html",\n         context=None,\n         request=None,\n         view=None,\n         field=None,\n         widget=None,\n     ):\n-        self.template = ViewPageTemplateFile(\n-            filename, content_type=contentType\n-        )\n+        self.template = ViewPageTemplateFile(filename, content_type=contentType)\n         zope.component.adapter(\n             util.getSpecification(context),\n             util.getSpecification(request),\n@@ -117,21 +107,21 @@ def __getitem__(self, key):\n # Default templates for the wrapped layout view use case\n \n layout_factory = ZopeTwoFormTemplateFactory(\n-    path(\'layout.pt\'), form=plone.z3cform.interfaces.IFormWrapper\n+    path("layout.pt"), form=plone.z3cform.interfaces.IFormWrapper\n )\n \n wrapped_form_factory = FormTemplateFactory(\n-    path(\'wrappedform.pt\'), form=plone.z3cform.interfaces.IWrappedForm\n+    path("wrappedform.pt"), form=plone.z3cform.interfaces.IWrappedForm\n )\n \n # Default templates for the standalone form use case\n \n standalone_form_factory = ZopeTwoFormTemplateFactory(\n-    path(\'form.pt\'), form=z3c.form.interfaces.IForm\n+    path("form.pt"), form=z3c.form.interfaces.IForm\n )\n \n # Default templates for subforms\n \n subform_factory = FormTemplateFactory(\n-    path(\'subform.pt\'), form=z3c.form.interfaces.ISubForm\n+    path("subform.pt"), form=z3c.form.interfaces.ISubForm\n )\ndiff --git a/src/plone/z3cform/tests.py b/src/plone/z3cform/tests.py\nindex a95ed76..9264584 100644\n--- a/src/plone/z3cform/tests.py\n+++ b/src/plone/z3cform/tests.py\n@@ -68,37 +68,33 @@ def getPath(filename):\n     )\n \n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(getPath(\'text_input.pt\'), \'text/html\'),\n+        widget.WidgetTemplateFactory(getPath("text_input.pt"), "text/html"),\n         (None, None, None, None, interfaces.ITextWidget),\n         IPageTemplate,\n         name=interfaces.INPUT_MODE,\n     )\n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(getPath(\'text_display.pt\'), \'text/html\'),\n+        widget.WidgetTemplateFactory(getPath("text_display.pt"), "text/html"),\n         (None, None, None, None, interfaces.ITextWidget),\n         IPageTemplate,\n         name=interfaces.DISPLAY_MODE,\n     )\n \n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(\n-            getPath(\'checkbox_input.pt\'), \'text/html\'\n-        ),\n+        widget.WidgetTemplateFactory(getPath("checkbox_input.pt"), "text/html"),\n         (None, None, None, None, interfaces.ICheckBoxWidget),\n         IPageTemplate,\n         name=interfaces.INPUT_MODE,\n     )\n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(\n-            getPath(\'checkbox_display.pt\'), \'text/html\'\n-        ),\n+        widget.WidgetTemplateFactory(getPath("checkbox_display.pt"), "text/html"),\n         (None, None, None, None, interfaces.ICheckBoxWidget),\n         IPageTemplate,\n         name=interfaces.DISPLAY_MODE,\n     )\n     # Submit Field Widget\n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(getPath(\'submit_input.pt\'), \'text/html\'),\n+        widget.WidgetTemplateFactory(getPath("submit_input.pt"), "text/html"),\n         (None, None, None, None, interfaces.ISubmitWidget),\n         IPageTemplate,\n         name=interfaces.INPUT_MODE,\n@@ -106,32 +102,26 @@ def getPath(filename):\n \n     component.provideAdapter(converter.FieldDataConverter)\n     component.provideAdapter(converter.FieldWidgetDataConverter)\n-    component.provideAdapter(\n-        button.ButtonAction, provides=interfaces.IButtonAction\n-    )\n+    component.provideAdapter(button.ButtonAction, provides=interfaces.IButtonAction)\n     component.provideAdapter(button.ButtonActions)\n     component.provideAdapter(button.ButtonActionHandler)\n     component.provideAdapter(error.StandardErrorViewTemplate)\n \n     # Make traversal work; register both the default traversable\n     # adapter and the ++view++ namespace adapter\n-    component.provideAdapter(\n-        zope.traversing.adapters.DefaultTraversable, [None]\n-    )\n-    component.provideAdapter(\n-        zope.traversing.namespace.view, (None, None), name=\'view\'\n-    )\n+    component.provideAdapter(zope.traversing.adapters.DefaultTraversable, [None])\n+    component.provideAdapter(zope.traversing.namespace.view, (None, None), name="view")\n \n     # Setup ploneform macros, simlulating the ZCML directive\n     plone.z3cform.templates.Macros.index = ViewPageTemplateFile(\n-        plone.z3cform.templates.path(\'macros.pt\')\n+        plone.z3cform.templates.path("macros.pt")\n     )\n \n     component.provideAdapter(\n         plone.z3cform.templates.Macros,\n         (None, None),\n         zope.publisher.interfaces.browser.IBrowserView,\n-        name=\'ploneform-macros\',\n+        name="ploneform-macros",\n     )\n \n     # setup plone.z3cform templates\n@@ -156,18 +146,18 @@ class P3FLayer(Layer):\n     defaultBases = (z2.STARTUP,)\n \n     def setUp(self):\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n         import plone.z3cform\n \n-        xmlconfig.file(\'testing.zcml\', plone.z3cform, context=context)\n+        xmlconfig.file("testing.zcml", plone.z3cform, context=context)\n         import z3c.form\n \n-        xmlconfig.file(\'configure.zcml\', z3c.form, context=context)\n+        xmlconfig.file("configure.zcml", z3c.form, context=context)\n \n     def tearDown(self):\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n \n P3F_FIXTURE = P3FLayer()\n@@ -179,9 +169,7 @@ def tearDown(self):\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\n-                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n-            )\n+            got = re.sub("LocationError", "zope.location.interfaces.LocationError", got)\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n@@ -218,31 +206,30 @@ def test_recursive_decode(self):\n         self.assertEqual(form["foo_dict"]["bar"], "EGGS")\n \n \n-\n def test_suite():\n     layout_txt = layered(\n-        doctest.DocFileSuite(\'layout.rst\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("layout.rst", checker=Py23DocChecker()),\n         layer=FUNCTIONAL_TESTING,\n     )\n     inputs_txt = layered(\n-        doctest.DocFileSuite(\'inputs.txt\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("inputs.txt", checker=Py23DocChecker()),\n         layer=FUNCTIONAL_TESTING,\n     )\n     fieldsets_txt = layered(\n-        doctest.DocFileSuite(\'fieldsets/README.rst\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("fieldsets/README.rst", checker=Py23DocChecker()),\n         layer=FUNCTIONAL_TESTING,\n     )\n     traversal_txt = layered(\n-        doctest.DocFileSuite(\'traversal.txt\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("traversal.txt", checker=Py23DocChecker()),\n         layer=FUNCTIONAL_TESTING,\n     )\n     crud_readme_txt = layered(\n-        doctest.DocFileSuite(\'crud/README.txt\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("crud/README.txt", checker=Py23DocChecker()),\n         layer=zca.UNIT_TESTING,\n     )\n     crud_py = layered(\n         doctest.DocTestSuite(\n-            \'plone.z3cform.crud.crud\',\n+            "plone.z3cform.crud.crud",\n             setUp=testing.setUp,\n             tearDown=testing.tearDown,\n             checker=Py23DocChecker(),\ndiff --git a/src/plone/z3cform/textlines/textlines.py b/src/plone/z3cform/textlines/textlines.py\nindex e7dabc4..60a24db 100644\n--- a/src/plone/z3cform/textlines/textlines.py\n+++ b/src/plone/z3cform/textlines/textlines.py\n@@ -31,7 +31,6 @@\n     from z3c.form.interfaces import ITextLinesWidget\n \n except ImportError:\n-\n     # backport for z3c.form 1.9\n \n     from z3c.form import converter\n@@ -44,6 +43,7 @@ class ITextLinesWidget(interfaces.IWidget):\n \n     class TextLinesWidget(textarea.TextAreaWidget):\n         """Input type sequence widget implementation."""\n+\n         zope.interface.implementsOnly(ITextLinesWidget)\n \n     def TextLinesFieldWidget(field, request):\n@@ -67,8 +67,8 @@ def toWidgetValue(self, value):\n             # if the value is the missing value, then an empty list is\n             # produced.\n             if value is self.field.missing_value:\n-                return \'\'\n-            return \'\\n\'.join(str(v) for v in value)\n+                return ""\n+            return "\\n".join(str(v) for v in value)\n \n         def toFieldValue(self, value):\n             """See interfaces.IDataConverter"""\n@@ -82,6 +82,7 @@ def toFieldValue(self, value):\n                 valueType = valueType[0]\n             return collectionType(valueType(v) for v in value.split())\n \n+\n # additional\n \n \n@@ -96,8 +97,8 @@ def toWidgetValue(self, value):\n         """Convert from text lines to HTML representation."""\n         # if the value is the missing value, then an empty list is produced.\n         if value is self.field.missing_value:\n-            return \'\'\n-        return \'\\n\'.join(str(v) for v in sorted(value))\n+            return ""\n+        return "\\n".join(str(v) for v in sorted(value))\n \n \n @zope.component.adapter(\n@@ -111,5 +112,5 @@ def toWidgetValue(self, value):\n         """Convert from text lines to HTML representation."""\n         # if the value is the missing value, then an empty list is produced.\n         if value is self.field.missing_value:\n-            return \'\'\n-        return \'\\n\'.join(str(v) for v in sorted(value))\n+            return ""\n+        return "\\n".join(str(v) for v in sorted(value))\ndiff --git a/src/plone/z3cform/traversal.py b/src/plone/z3cform/traversal.py\nindex a3f632b..54668f8 100644\n--- a/src/plone/z3cform/traversal.py\n+++ b/src/plone/z3cform/traversal.py\n@@ -45,7 +45,6 @@ def _prepareForm(self):\n         return self.context\n \n     def traverse(self, name, ignored):\n-\n         form = self._prepareForm()\n \n         # Since we cannot check security during traversal,\n@@ -55,18 +54,19 @@ def traverse(self, name, ignored):\n         noLongerProvides(self.request, IDeferSecurityCheck)\n \n         # If name begins with form.widgets., remove it\n-        form_widgets_prefix = util.expandPrefix(\n-            form.prefix) + util.expandPrefix(form.widgets.prefix)\n+        form_widgets_prefix = util.expandPrefix(form.prefix) + util.expandPrefix(\n+            form.widgets.prefix\n+        )\n         if name.startswith(form_widgets_prefix):\n-            name = name[len(form_widgets_prefix):]\n+            name = name[len(form_widgets_prefix) :]\n \n         # Split string up into dotted segments and work through\n         target = aq_base(form)\n-        parts = name.split(\'.\')\n+        parts = name.split(".")\n         while len(parts) > 0:\n             part = parts.pop(0)\n             # i.e. a z3c.form.widget.MultiWidget\n-            if isinstance(getattr(target, \'widgets\', None), list):\n+            if isinstance(getattr(target, "widgets", None), list):\n                 try:\n                     # part should be integer index in list, look it up\n                     target = target.widgets[int(part)]\n@@ -78,8 +78,7 @@ def traverse(self, name, ignored):\n                     # DataGridField, which appends \'AA\' and \'TT\' rows to\n                     # it\'s widget list.\n                     full_name = util.expandPrefix(target.prefix) + part\n-                    filtered = [w for w in target.widgets\n-                                if w.name == full_name]\n+                    filtered = [w for w in target.widgets if w.name == full_name]\n                     if len(filtered) == 1:\n                         target = filtered[0]\n                         # we have to pop "widgets" from parts here\n@@ -87,15 +86,11 @@ def traverse(self, name, ignored):\n                         parts.remove("widgets")\n                     else:\n                         raise TraversalError("\'" + part + "\' not valid index")\n-            elif hasattr(target, \'widgets\'):  # Either base form, or subform\n+            elif hasattr(target, "widgets"):  # Either base form, or subform\n                 # Check to see if we can find a "Behaviour.widget"\n                 new_target = None\n                 if len(parts) > 0:\n-                    new_target = self._form_traverse(\n-                        target,\n-                        part +\n-                        \'.\' +\n-                        parts[0])\n+                    new_target = self._form_traverse(target, part + "." + parts[0])\n \n                 if new_target is not None:\n                     # Remove widget name from stack too\n@@ -106,15 +101,13 @@ def traverse(self, name, ignored):\n \n                 target = new_target\n             # subform-containing widget, only option is to go into subform\n-            elif hasattr(target, \'subform\'):\n-                if part == \'widgets\':\n+            elif hasattr(target, "subform"):\n+                if part == "widgets":\n                     target = target.subform\n                 else:\n                     target = None\n             else:\n-                raise TraversalError(\n-                    \'Cannot traverse through \' +\n-                    target.__repr__())\n+                raise TraversalError("Cannot traverse through " + target.__repr__())\n \n             # Could not traverse from target to part\n             if target is None:\n@@ -132,7 +125,7 @@ def _form_traverse(self, form, name):\n         if name in form.widgets:\n             return form.widgets.get(name)\n         # If there are no groups, give up now\n-        if getattr(aq_base(form), \'groups\', None) is None:\n+        if getattr(aq_base(form), "groups", None) is None:\n             return None\n         for group in form.groups:\n             if group.widgets and name in group.widgets:\ndiff --git a/src/plone/z3cform/widget.py b/src/plone/z3cform/widget.py\nindex 3912b04..4894366 100644\n--- a/src/plone/z3cform/widget.py\n+++ b/src/plone/z3cform/widget.py\n@@ -9,7 +9,6 @@\n \n \n class SingleCheckBoxWidget(z3c.form.browser.checkbox.SingleCheckBoxWidget):\n-\n     def update(self):\n         self.ignoreContext = True\n         super().update()\n@@ -19,32 +18,31 @@ def updateTerms(self):\n         # lebel for the single checkbox.  We use no label instead.\n         if self.terms is None:\n             self.terms = z3c.form.term.Terms()\n-            self.terms.terms = vocabulary.SimpleVocabulary((\n-                vocabulary.SimpleTerm(True, \'selected\', \'\'),\n-            ))\n+            self.terms.terms = vocabulary.SimpleVocabulary(\n+                (vocabulary.SimpleTerm(True, "selected", ""),)\n+            )\n         return self.terms\n \n     def extract(self, default=z3c.form.interfaces.NOVALUE, setErrors=True):\n         # The default implementation returns [] here.\n-        if (self.name not in self.request and\n-                self.name + \'-empty-marker\' in self.request):\n+        if (\n+            self.name not in self.request\n+            and self.name + "-empty-marker" in self.request\n+        ):\n             return default\n         else:\n             try:\n-                return super().extract(\n-                    default,\n-                    setErrors=setErrors)\n+                return super().extract(default, setErrors=setErrors)\n             except TypeError:\n                 # for z3c.form <= 1.9.0\n                 return super().extract(default)\n \n \n-@zope.component.adapter(\n-    zope.schema.interfaces.IBool,\n-    z3c.form.interfaces.IFormLayer)\n+@zope.component.adapter(zope.schema.interfaces.IBool, z3c.form.interfaces.IFormLayer)\n @zope.interface.implementer(z3c.form.interfaces.IFieldWidget)\n def SingleCheckBoxFieldWidget(field, request):\n     return z3c.form.widget.FieldWidget(field, SingleCheckBoxWidget(request))\n \n+\n # BBB:\n singlecheckboxwidget_factory = SingleCheckBoxFieldWidget\ndiff --git a/src/plone/z3cform/z2.py b/src/plone/z3cform/z2.py\nindex f154d86..5233dfd 100644\n--- a/src/plone/z3cform/z2.py\n+++ b/src/plone/z3cform/z2.py\n@@ -9,8 +9,7 @@\n \n \n class IFixedUpRequest(interface.Interface):\n-    """Marker interface used to ensure we don\'t fix up the request twice\n-    """\n+    """Marker interface used to ensure we don\'t fix up the request twice"""\n \n \n class IProcessedRequest(interface.Interface):\n@@ -18,6 +17,7 @@ class IProcessedRequest(interface.Interface):\n     twice.\n     """\n \n+\n # Safer versions of the functions in Products.Five.browser.decode\n \n \n@@ -33,15 +33,21 @@ def processInputs(request, charsets=None):\n     if charsets is None:\n         envadapter = IUserPreferredCharsets(request, None)\n         if envadapter is None:\n-            charsets = [\'utf-8\']\n+            charsets = ["utf-8"]\n         else:\n-            charsets = envadapter.getPreferredCharsets() or [\'utf-8\']\n+            charsets = envadapter.getPreferredCharsets() or ["utf-8"]\n \n     for name, value in request.form.items():\n-        if not (isCGI_NAME(name) or name.startswith(\'HTTP_\')):\n+        if not (isCGI_NAME(name) or name.startswith("HTTP_")):\n             if isinstance(value, bytes):\n                 request.form[name] = _decode(value, charsets)\n-            elif isinstance(value, (list, tuple,)):\n+            elif isinstance(\n+                value,\n+                (\n+                    list,\n+                    tuple,\n+                ),\n+            ):\n                 newValue = []\n                 for val in value:\n                     if isinstance(val, bytes):\n@@ -62,8 +68,7 @@ def processInputs(request, charsets=None):\n \n \n def _recursive_decode(value, charset):\n-    """Recursively look for string values and decode.\n-    """\n+    """Recursively look for string values and decode."""\n     if isinstance(value, list):\n         return [_recursive_decode(v, charset) for v in value]\n     elif isinstance(value, tuple):\n@@ -71,7 +76,7 @@ def _recursive_decode(value, charset):\n     elif isinstance(value, dict):\n         return {k: _recursive_decode(v, charset) for k, v in value.items()}\n     elif isinstance(value, bytes):\n-        return str(value, charset, \'replace\')\n+        return str(value, charset, "replace")\n     return value\n \n \n@@ -92,9 +97,8 @@ def switch_on(view, request_layer=z3c.form.interfaces.IFormLayer):\n \n     request = view.request\n \n-    if (\n-        not IFixedUpRequest.providedBy(request) and\n-        not IBrowserApplicationRequest.providedBy(request)\n-    ):\n+    if not IFixedUpRequest.providedBy(\n+        request\n+    ) and not IBrowserApplicationRequest.providedBy(request):\n         interface.alsoProvides(request, IFixedUpRequest)\n         interface.alsoProvides(request, request_layer)\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-11T23:57:00+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/b013d704866f04c0284383136b3d714c5a771c04

chore: zpretty

Files changed:
M src/plone/z3cform/configure.zcml
M src/plone/z3cform/crud/crud-master.pt
M src/plone/z3cform/crud/crud-row.pt
M src/plone/z3cform/crud/crud-table.pt
M src/plone/z3cform/overrides.zcml
M src/plone/z3cform/pagetemplates/form.pt
M src/plone/z3cform/pagetemplates/layout.pt
M src/plone/z3cform/pagetemplates/macros.pt
M src/plone/z3cform/pagetemplates/subform.pt
M src/plone/z3cform/pagetemplates/wrappedsubform.pt
M src/plone/z3cform/templates.zcml
M src/plone/z3cform/testing.zcml
M src/plone/z3cform/textlines/textlines.zcml
M src/plone/z3cform/textlines/textlines_display.pt
M src/plone/z3cform/textlines/textlines_input.pt

b'diff --git a/src/plone/z3cform/configure.zcml b/src/plone/z3cform/configure.zcml\nindex 46b5cd5..8f51421 100644\n--- a/src/plone/z3cform/configure.zcml\n+++ b/src/plone/z3cform/configure.zcml\n@@ -1,17 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:monkey="http://namespaces.plone.org/monkey"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone.z3cform">\n+    xmlns:monkey="http://namespaces.plone.org/monkey"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.z3cform"\n+    >\n \n   <include file="templates.zcml" />\n \n-  <include package="z3c.form" file="meta.zcml" />\n+  <include\n+      package="z3c.form"\n+      file="meta.zcml"\n+      />\n   <include package="z3c.form" />\n \n-  <i18n:registerTranslations directory="locales"/>\n+  <i18n:registerTranslations directory="locales" />\n \n   <!-- Override the FileUploadDataConverter from z3c.form.\n        We register it for the class so that it is more specific than the one\n@@ -19,21 +23,31 @@\n        overrides.zcml.\n      -->\n   <adapter\n-      for="zope.schema.Bytes z3c.form.interfaces.IFileWidget"\n       factory=".converter.FileUploadDataConverter"\n+      for="zope.schema.Bytes\n+           z3c.form.interfaces.IFileWidget"\n       />\n \n   <!-- Backported from z3c.from trunk -->\n-  <include package=".textlines" file="textlines.zcml"\n-    zcml:condition="not-installed z3c.form.browser.textlines"/>\n+  <include\n+      package=".textlines"\n+      file="textlines.zcml"\n+      zcml:condition="not-installed z3c.form.browser.textlines"\n+      />\n \n   <!-- These are not backported, but represent useful policy -->\n   <adapter factory=".textlines.textlines.TextLinesSetConverter" />\n   <adapter factory=".textlines.textlines.TextLinesFrozenSetConverter" />\n \n   <!-- ++widget++ namespace -->\n-  <adapter factory=".traversal.FormWidgetTraversal" name="widget" />\n-  <adapter factory=".traversal.WrapperWidgetTraversal" name="widget" />\n+  <adapter\n+      factory=".traversal.FormWidgetTraversal"\n+      name="widget"\n+      />\n+  <adapter\n+      factory=".traversal.WrapperWidgetTraversal"\n+      name="widget"\n+      />\n \n   <!-- subform adapter backport -->\n   <adapter factory=".subform.SubformAdapter" />\ndiff --git a/src/plone/z3cform/crud/crud-master.pt b/src/plone/z3cform/crud/crud-master.pt\nindex 7b9b5bf..ef1d891 100644\n--- a/src/plone/z3cform/crud/crud-master.pt\n+++ b/src/plone/z3cform/crud/crud-master.pt\n@@ -1,26 +1,35 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      tal:omit-tag=""\n       i18n:domain="plone.z3cform"\n-      tal:omit-tag="">\n+>\n \n   <div class="portalMessage"\n-       tal:condition="view/status" tal:content="view/status">\n+       tal:condition="view/status"\n+       tal:content="view/status"\n+  >\n   </div>\n \n   <p class="crud-description"\n-       tal:condition="view/description"\n-       tal:content="view/description">\n+     tal:condition="view/description"\n+     tal:content="view/description"\n+  >\n   </p>\n \n-  <div tal:repeat="form view/subforms"\n+  <div class="crud-form"\n+       tal:repeat="form view/subforms"\n        tal:content="structure form/render"\n-       class="crud-form">\n+  >\n   </div>\n \n-  <div class="action" tal:repeat="action view/actions/values">\n-    <input type="submit" tal:replace="structure action/render" />\n+  <div class="action"\n+       tal:repeat="action view/actions/values"\n+  >\n+    <input type="submit"\n+           tal:replace="structure action/render"\n+    />\n   </div>\n \n </html>\ndiff --git a/src/plone/z3cform/crud/crud-row.pt b/src/plone/z3cform/crud/crud-row.pt\nindex f555649..c3862bf 100644\n--- a/src/plone/z3cform/crud/crud-row.pt\n+++ b/src/plone/z3cform/crud/crud-row.pt\n@@ -1,24 +1,43 @@\n-<tal:block define="tups view/getCombinedWidgets;\n-                   niceTitles view/getNiceTitles"\n-           repeat="tup tups">\n+<tal:block define="\n+             tups view/getCombinedWidgets;\n+             niceTitles view/getNiceTitles;\n+           "\n+           repeat="tup tups"\n+>\n \n-  <td tal:define="error python:tup[0].error;\n-                  idx repeat/tup/index"\n-      tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+  <td tal:define="\n+        error python:tup[0].error;\n+        idx repeat/tup/index;\n+      "\n+      tal:attributes="\n+        class python:\'field\' + (error and \' error\' or \'\');\n+      "\n+  >\n     <tal:block repeat="widget tup">\n \n-    <a href=""\n-       tal:define="link python:view.context.context.link(view.getContent(), widget.field.__name__)"\n-       tal:omit-tag="python:widget.mode == \'input\' or link is None"\n-       tal:attributes="href link">\n+      <a href=""\n+         tal:define="\n+           link python:view.context.context.link(view.getContent(), widget.field.__name__);\n+         "\n+         tal:omit-tag="python:widget.mode == \'input\' or link is None"\n+         tal:attributes="\n+           href link;\n+         "\n+      >\n \n-      <span class="border border-warning" tal:omit-tag="not:error">\n-        <div tal:condition="error" tal:replace="structure error/render" />\n-        <input type="text" tal:replace="structure widget/render" />\n-      </span>\n+        <span class="border border-warning"\n+              tal:omit-tag="not:error"\n+        >\n+          <div tal:condition="error"\n+               tal:replace="structure error/render"\n+          ></div>\n+          <input type="text"\n+                 tal:replace="structure widget/render"\n+          />\n+        </span>\n \n-    </a>\n-    <br/>\n+      </a>\n+      <br />\n     </tal:block>\n \n   </td>\ndiff --git a/src/plone/z3cform/crud/crud-table.pt b/src/plone/z3cform/crud/crud-table.pt\nindex 960ba68..7a4e3fb 100644\n--- a/src/plone/z3cform/crud/crud-table.pt\n+++ b/src/plone/z3cform/crud/crud-table.pt\n@@ -1,54 +1,84 @@\n- <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      i18n:domain="plone.z3cform"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:condition="view/subforms"\n       tal:omit-tag=""\n-      tal:condition="view/subforms">\n+      i18n:domain="plone.z3cform"\n+>\n \n   <h2 tal:condition="view/label | nothing"\n-      tal:content="view/label">Form title</h2>\n+      tal:content="view/label"\n+  >Form title</h2>\n \n-  <div class="alert alert-info" tal:condition="view/status">\n-      <span tal:content="view/status"></span>\n+  <div class="alert alert-info"\n+       tal:condition="view/status"\n+  >\n+    <span tal:content="view/status"></span>\n   </div>\n \n-  <form action="." method="post" tal:attributes="action view/getURL">\n+  <form action="."\n+        method="post"\n+        tal:attributes="\n+          action view/getURL;\n+        "\n+  >\n \n     <tal:batch tal:replace="structure view/render_batch_navigation" />\n \n-    <table class="table table-striped table-bordered" tal:define="rows view/subforms">\n-        <thead tal:define="row1 python:len(rows) and rows[0] or None"\n-               tal:condition="python:row1 is not None">\n-          <tr>\n-            <th tal:define="widgetsForTitles row1/getTitleWidgets;\n-                            niceTitles row1/getNiceTitles"\n-                tal:repeat="widget widgetsForTitles">\n-\n-              <span tal:define="idx repeat/widget/index"\n-                    tal:content="python: niceTitles[idx]"\n-                    tal:attributes="title widget/field/description;\n-                                    class python: \'header-\' + niceTitles[idx]">\n+    <table class="table table-striped table-bordered"\n+           tal:define="\n+             rows view/subforms;\n+           "\n+    >\n+      <thead tal:define="\n+               row1 python:len(rows) and rows[0] or None;\n+             "\n+             tal:condition="python:row1 is not None"\n+      >\n+        <tr>\n+          <th tal:define="\n+                widgetsForTitles row1/getTitleWidgets;\n+                niceTitles row1/getNiceTitles;\n+              "\n+              tal:repeat="widget widgetsForTitles"\n+          >\n+\n+            <span tal:define="\n+                    idx repeat/widget/index;\n+                  "\n+                  tal:content="python: niceTitles[idx]"\n+                  tal:attributes="\n+                    title widget/field/description;\n+                    class python: \'header-\' + niceTitles[idx];\n+                  "\n+            >\n                 Field\n-              </span>\n+            </span>\n \n-              <span class="fieldRequired"\n-                    tal:condition="python:widget.required and widget.mode == \'input\'">\n+            <span class="fieldRequired"\n+                  tal:condition="python:widget.required and widget.mode == \'input\'"\n+            >\n                 *\n-              </span>\n-            </th>\n+            </span>\n+          </th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        <tal:block repeat="row view/subforms">\n+          <tr tal:content="structure row/render">\n+            <td></td>\n           </tr>\n-        </thead>\n-        <tbody>\n-          <tal:block repeat="row view/subforms">\n-            <tr tal:content="structure row/render">\n-              <td></td>\n-            </tr>\n-          </tal:block>\n-        </tbody>\n+        </tal:block>\n+      </tbody>\n     </table>\n \n-    <span class="action" tal:repeat="action view/actions/values">\n-      <input type="submit" tal:replace="structure action/render" />\n+    <span class="action"\n+          tal:repeat="action view/actions/values"\n+    >\n+      <input type="submit"\n+             tal:replace="structure action/render"\n+      />\n     </span>\n \n   </form>\ndiff --git a/src/plone/z3cform/overrides.zcml b/src/plone/z3cform/overrides.zcml\nindex 02f82b3..b5e89df 100644\n--- a/src/plone/z3cform/overrides.zcml\n+++ b/src/plone/z3cform/overrides.zcml\n@@ -1,6 +1,6 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <!-- This file is no longer necessary, but left here in case people\n+  <!-- This file is no longer necessary, but left here in case people\n          reference it\n       -->\n \ndiff --git a/src/plone/z3cform/pagetemplates/form.pt b/src/plone/z3cform/pagetemplates/form.pt\nindex 00007f6..12d5421 100644\n--- a/src/plone/z3cform/pagetemplates/form.pt\n+++ b/src/plone/z3cform/pagetemplates/form.pt\n@@ -1,22 +1,27 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      metal:use-macro="context/@@standard_macros/page"\n       i18n:domain="plone.z3cform"\n-      metal:use-macro="context/@@standard_macros/page">\n+>\n \n-    <body metal:fill-slot="body">\n+  <body metal:fill-slot="body">\n \n-        <h1 tal:define="label view/label|nothing"\n-            tal:omit-tag="not:label"\n-            tal:content="label" />\n+    <h1 tal:define="\n+          label view/label|nothing;\n+        "\n+        tal:content="label"\n+        tal:omit-tag="not:label"\n+    ></h1>\n \n-        <div class="description"\n-           tal:condition="view/description | nothing"\n-           tal:content="structure view/description">Form description</div>\n+    <div class="description"\n+         tal:condition="view/description | nothing"\n+         tal:content="structure view/description"\n+    >Form description</div>\n \n-        <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n+    <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n \n-    </body>\n+  </body>\n \n </html>\ndiff --git a/src/plone/z3cform/pagetemplates/layout.pt b/src/plone/z3cform/pagetemplates/layout.pt\nindex d9a54af..f9ccb77 100644\n--- a/src/plone/z3cform/pagetemplates/layout.pt\n+++ b/src/plone/z3cform/pagetemplates/layout.pt\n@@ -1,18 +1,23 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master">\n-<body>\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      metal:use-macro="context/main_template/macros/master"\n+>\n+  <body>\n \n-<metal:slot metal:fill-slot="header" i18n:domain="cmf_default">\n-  <h1 tal:content="view/label">View Title</h1>\n-</metal:slot>\n+    <metal:slot metal:fill-slot="header"\n+                i18n:domain="cmf_default"\n+    >\n+      <h1 tal:content="view/label">View Title</h1>\n+    </metal:slot>\n \n-<metal:slot metal:fill-slot="main" i18n:domain="cmf_default">\n-  <div id="layout-contents">\n-    <span tal:replace="structure view/contents" />\n-  </div>\n-</metal:slot>\n-</body>\n+    <metal:slot metal:fill-slot="main"\n+                i18n:domain="cmf_default"\n+    >\n+      <div id="layout-contents">\n+        <span tal:replace="structure view/contents"></span>\n+      </div>\n+    </metal:slot>\n+  </body>\n </html>\ndiff --git a/src/plone/z3cform/pagetemplates/macros.pt b/src/plone/z3cform/pagetemplates/macros.pt\nindex 622a294..19aaab1 100644\n--- a/src/plone/z3cform/pagetemplates/macros.pt\n+++ b/src/plone/z3cform/pagetemplates/macros.pt\n@@ -1,34 +1,45 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      tal:omit-tag=""\n       i18n:domain="plone.z3cform"\n-      tal:omit-tag="">\n+>\n \n   <head></head>\n \n   <body>\n \n-    <div class="form" metal:define-macro="form">\n+    <div class="form"\n+         metal:define-macro="form"\n+    >\n \n       <metal:title-slot define-slot="title">\n         <h3 tal:condition="view/label | nothing">\n-            <span tal:replace="view/label">Form title</span>:</h3>\n+          <span tal:replace="view/label">Form title</span>:</h3>\n       </metal:title-slot>\n \n       <metal:description-slot define-slot="description">\n         <div class="description"\n              tal:condition="view/description | nothing"\n-             tal:content="structure view/description">Form description</div>\n+             tal:content="structure view/description"\n+        >Form description</div>\n       </metal:description-slot>\n \n       <metal:define define-macro="titlelessform">\n         <div class="portalMessage"\n-             tal:condition="view/status" tal:content="view/status">\n+             tal:condition="view/status"\n+             tal:content="view/status"\n+        >\n         </div>\n \n-        <form action="." method="post"\n-              tal:attributes="action view/action; enctype view/enctype">\n+        <form action="."\n+              method="post"\n+              tal:attributes="\n+                action view/action;\n+                enctype view/enctype;\n+              "\n+        >\n \n           <metal:block define-slot="formtop" />\n \n@@ -37,43 +48,62 @@\n \n               <tal:widgets repeat="widget python:view.widgets.values()">\n                 <div class="row"\n-                     tal:define="hidden python:widget.mode == \'hidden\'"\n-                     tal:omit-tag="hidden">\n+                     tal:define="\n+                       hidden python:widget.mode == \'hidden\';\n+                     "\n+                     tal:omit-tag="hidden"\n+                >\n \n                   <metal:field-slot define-slot="field">\n                     <metal:field define-macro="field">\n                       <div class="field"\n-                           tal:define="error widget/error;\n-                                       hidden python:widget.mode == \'hidden\';"\n-                           tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+                           tal:define="\n+                             error widget/error;\n+                             hidden python:widget.mode == \'hidden\';\n+                           "\n+                           tal:attributes="\n+                             class python:\'field\' + (error and \' error\' or \'\');\n+                           "\n+                      >\n                         <label for=""\n-                               tal:attributes="for widget/id"\n-                               tal:condition="not:hidden">\n-                          <span i18n:translate=""\n-                                tal:content="widget/label">label</span>\n+                               tal:condition="not:hidden"\n+                               tal:attributes="\n+                                 for widget/id;\n+                               "\n+                        >\n+                          <span tal:content="widget/label"\n+                                i18n:translate=""\n+                          >label</span>\n                         </label>\n \n-                        <span class="fieldRequired" title="Required"\n+                        <span class="fieldRequired"\n+                              title="Required"\n                               tal:condition="python:widget.required and not hidden"\n+                              i18n:attributes="title title_required;"\n                               i18n:translate="label_required"\n-                              i18n:attributes="title title_required;">\n+                        >\n                           (Required)\n                         </span>\n \n                         <div class="formHelp"\n-                             tal:define="description widget/field/description"\n-                             i18n:translate=""\n-                             tal:content="description"\n+                             tal:define="\n+                               description widget/field/description;\n+                             "\n                              tal:condition="python:description and not hidden"\n-                             >field description</div>\n+                             tal:content="description"\n+                             i18n:translate=""\n+                        >field description</div>\n \n                         <div tal:condition="error"\n-                             tal:content="structure error/render">\n+                             tal:content="structure error/render"\n+                        >\n                           Error\n                         </div>\n \n                         <div class="widget">\n-                          <input type="text" tal:replace="structure widget/render" />\n+                          <input type="text"\n+                                 tal:replace="structure widget/render"\n+                          />\n                         </div>\n                       </div>\n                     </metal:field>\n@@ -87,8 +117,12 @@\n \n           <metal:actions-slot define-slot="actions">\n             <metal:define define-macro="actions">\n-              <div class="action" tal:repeat="action view/actions/values|nothing">\n-                <input type="submit" tal:replace="structure action/render" />\n+              <div class="action"\n+                   tal:repeat="action view/actions/values|nothing"\n+              >\n+                <input type="submit"\n+                       tal:replace="structure action/render"\n+                />\n               </div>\n             </metal:define>\n           </metal:actions-slot>\n@@ -97,7 +131,7 @@\n \n         </form>\n       </metal:define>\n-      </div>\n+    </div>\n \n \n   </body>\ndiff --git a/src/plone/z3cform/pagetemplates/subform.pt b/src/plone/z3cform/pagetemplates/subform.pt\nindex d2f9f6f..ed26cf8 100644\n--- a/src/plone/z3cform/pagetemplates/subform.pt\n+++ b/src/plone/z3cform/pagetemplates/subform.pt\n@@ -1,10 +1,13 @@\n <div xmlns="http://www.w3.org/1999/xhtml"\n-     xmlns:tal="http://xml.zope.org/namespaces/tal"\n      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-     tal:attributes="class view/css_class|nothing">\n-  <h3 tal:replace="structure view/heading|nothing" />\n-  <div tal:replace="structure view/contents_top|nothing" />\n+     xmlns:tal="http://xml.zope.org/namespaces/tal"\n+     tal:attributes="\n+       class view/css_class|nothing;\n+     "\n+>\n+  <h3 tal:replace="structure view/heading|nothing"></h3>\n+  <div tal:replace="structure view/contents_top|nothing"></div>\n   <metal:use use-macro="context/@@ploneform-macros/fields" />\n   <metal:use use-macro="context/@@ploneform-macros/actions" />\n-  <div tal:replace="structure view/contents_bottom|nothing" />\n+  <div tal:replace="structure view/contents_bottom|nothing"></div>\n </div>\ndiff --git a/src/plone/z3cform/pagetemplates/wrappedsubform.pt b/src/plone/z3cform/pagetemplates/wrappedsubform.pt\nindex d2f9f6f..ed26cf8 100644\n--- a/src/plone/z3cform/pagetemplates/wrappedsubform.pt\n+++ b/src/plone/z3cform/pagetemplates/wrappedsubform.pt\n@@ -1,10 +1,13 @@\n <div xmlns="http://www.w3.org/1999/xhtml"\n-     xmlns:tal="http://xml.zope.org/namespaces/tal"\n      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-     tal:attributes="class view/css_class|nothing">\n-  <h3 tal:replace="structure view/heading|nothing" />\n-  <div tal:replace="structure view/contents_top|nothing" />\n+     xmlns:tal="http://xml.zope.org/namespaces/tal"\n+     tal:attributes="\n+       class view/css_class|nothing;\n+     "\n+>\n+  <h3 tal:replace="structure view/heading|nothing"></h3>\n+  <div tal:replace="structure view/contents_top|nothing"></div>\n   <metal:use use-macro="context/@@ploneform-macros/fields" />\n   <metal:use use-macro="context/@@ploneform-macros/actions" />\n-  <div tal:replace="structure view/contents_bottom|nothing" />\n+  <div tal:replace="structure view/contents_bottom|nothing"></div>\n </div>\ndiff --git a/src/plone/z3cform/templates.zcml b/src/plone/z3cform/templates.zcml\nindex cd4aba4..af9af38 100644\n--- a/src/plone/z3cform/templates.zcml\n+++ b/src/plone/z3cform/templates.zcml\n@@ -1,24 +1,25 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone.z3cform">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.z3cform"\n+    >\n \n   <!-- configure chameleon templates if available -->\n   <configure zcml:condition="installed five.pt">\n-      <include package="five.pt"/>\n+    <include package="five.pt" />\n   </configure>\n \n   <configure zcml:condition="installed Products.PageTemplates">\n-      <include package="Products.PageTemplates" />\n+    <include package="Products.PageTemplates" />\n   </configure>\n \n   <browser:page\n       name="ploneform-macros"\n       for="*"\n       class=".templates.Macros"\n-      template="pagetemplates/macros.pt"\n       allowed_interface="zope.interface.common.mapping.IItemMapping"\n+      template="pagetemplates/macros.pt"\n       permission="zope.Public"\n       />\n \ndiff --git a/src/plone/z3cform/testing.zcml b/src/plone/z3cform/testing.zcml\nindex e85099c..1a6cd75 100644\n--- a/src/plone/z3cform/testing.zcml\n+++ b/src/plone/z3cform/testing.zcml\n@@ -1,13 +1,27 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:browser="http://namespaces.zope.org/browser"\n-           xmlns:five="http://namespaces.zope.org/five"\n-           xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-           xmlns:plone="http://namespaces.plone.org/plone"\n-           i18n_domain="plone.z3cform">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    i18n_domain="plone.z3cform"\n+    >\n \n-  <include file="configure.zcml" package="Products.Five"/>\n-  <include file="meta.zcml" package="z3c.form"/>\n-  <include file="configure.zcml" package="z3c.form"/>\n-  <include file="configure.zcml" package="plone.z3cform"/>\n+  <include\n+      package="Products.Five"\n+      file="configure.zcml"\n+      />\n+  <include\n+      package="z3c.form"\n+      file="meta.zcml"\n+      />\n+  <include\n+      package="z3c.form"\n+      file="configure.zcml"\n+      />\n+  <include\n+      package="plone.z3cform"\n+      file="configure.zcml"\n+      />\n \n </configure>\ndiff --git a/src/plone/z3cform/textlines/textlines.zcml b/src/plone/z3cform/textlines/textlines.zcml\nindex 387b441..b1f9ff3 100644\n--- a/src/plone/z3cform/textlines/textlines.zcml\n+++ b/src/plone/z3cform/textlines/textlines.zcml\n@@ -1,7 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:z3c="http://namespaces.zope.org/z3c"\n-    i18n_domain="z3c.form">\n+    i18n_domain="z3c.form"\n+    >\n \n   <class class=".textlines.TextLinesWidget">\n     <require\n@@ -13,21 +14,19 @@\n   <!-- this widget is not configured for any field by default -->\n \n   <z3c:widgetTemplate\n-      mode="display"\n       widget="plone.z3cform.textlines.textlines.ITextLinesWidget"\n-      layer="z3c.form.interfaces.IFormLayer"\n       template="textlines_display.pt"\n+      layer="z3c.form.interfaces.IFormLayer"\n+      mode="display"\n       />\n \n   <z3c:widgetTemplate\n-      mode="input"\n       widget="plone.z3cform.textlines.textlines.ITextLinesWidget"\n-      layer="z3c.form.interfaces.IFormLayer"\n       template="textlines_input.pt"\n+      layer="z3c.form.interfaces.IFormLayer"\n+      mode="input"\n       />\n \n-  <adapter\n-      factory=".textlines.TextLinesConverter"\n-      />\n+  <adapter factory=".textlines.TextLinesConverter" />\n \n </configure>\ndiff --git a/src/plone/z3cform/textlines/textlines_display.pt b/src/plone/z3cform/textlines/textlines_display.pt\nindex 657acbf..0d53b88 100644\n--- a/src/plone/z3cform/textlines/textlines_display.pt\n+++ b/src/plone/z3cform/textlines/textlines_display.pt\n@@ -1,22 +1,27 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      tal:omit-tag="">\n-<span id="" class=""\n-      tal:attributes="id view/id;\n-                      class view/klass;\n-                      style view/style;\n-                      title view/title;\n-                      lang view/lang;\n-                      onclick view/onclick;\n-                      ondblclick view/ondblclick;\n-                      onmousedown view/onmousedown;\n-                      onmouseup view/onmouseup;\n-                      onmouseover view/onmouseover;\n-                      onmousemove view/onmousemove;\n-                      onmouseout view/onmouseout;\n-                      onkeypress view/onkeypress;\n-                      onkeydown view/onkeydown;\n-                      onkeyup view/onkeyup"><tal:block\n-      condition="view/value" content="view/value"\n-/></span>\n+      tal:omit-tag=""\n+>\n+  <span class=""\n+        id=""\n+        tal:attributes="\n+          id view/id;\n+          class view/klass;\n+          style view/style;\n+          title view/title;\n+          lang view/lang;\n+          onclick view/onclick;\n+          ondblclick view/ondblclick;\n+          onmousedown view/onmousedown;\n+          onmouseup view/onmouseup;\n+          onmouseover view/onmouseover;\n+          onmousemove view/onmousemove;\n+          onmouseout view/onmouseout;\n+          onkeypress view/onkeypress;\n+          onkeydown view/onkeydown;\n+          onkeyup view/onkeyup;\n+        "\n+  ><tal:block condition="view/value"\n+               content="view/value"\n+    /></span>\n </html>\ndiff --git a/src/plone/z3cform/textlines/textlines_input.pt b/src/plone/z3cform/textlines/textlines_input.pt\nindex ac1a3c3..73219d5 100644\n--- a/src/plone/z3cform/textlines/textlines_input.pt\n+++ b/src/plone/z3cform/textlines/textlines_input.pt\n@@ -1,34 +1,44 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      tal:omit-tag="">\n-<textarea\n-    id="" name="" class="" cols="" rows=""\n-    tabindex="" disabled="" readonly="" accesskey=""\n-    tal:attributes="id view/id;\n-                    name view/name;\n-                    class view/klass;\n-                    style view/style;\n-                    title view/title;\n-                    lang view/lang;\n-                    onclick view/onclick;\n-                    ondblclick view/ondblclick;\n-                    onmousedown view/onmousedown;\n-                    onmouseup view/onmouseup;\n-                    onmouseover view/onmouseover;\n-                    onmousemove view/onmousemove;\n-                    onmouseout view/onmouseout;\n-                    onkeypress view/onkeypress;\n-                    onkeydown view/onkeydown;\n-                    onkeyup view/onkeyup;\n-                    disabled view/disabled;\n-                    tabindex view/tabindex;\n-                    onfocus view/onfocus;\n-                    onblur view/onblur;\n-                    onchange view/onchange;\n-                    cols view/cols;\n-                    rows view/rows;\n-                    readonly view/readonly;\n-                    accesskey view/accesskey;\n-                    onselect view/onselect"\n-    tal:content="structure view/value" />\n+      tal:omit-tag=""\n+>\n+  <textarea class=""\n+            id=""\n+            accesskey=""\n+            cols=""\n+            disabled\n+            name=""\n+            readonly\n+            rows=""\n+            tabindex=""\n+            tal:content="structure view/value"\n+            tal:attributes="\n+              id view/id;\n+              name view/name;\n+              class view/klass;\n+              style view/style;\n+              title view/title;\n+              lang view/lang;\n+              onclick view/onclick;\n+              ondblclick view/ondblclick;\n+              onmousedown view/onmousedown;\n+              onmouseup view/onmouseup;\n+              onmouseover view/onmouseover;\n+              onmousemove view/onmousemove;\n+              onmouseout view/onmouseout;\n+              onkeypress view/onkeypress;\n+              onkeydown view/onkeydown;\n+              onkeyup view/onkeyup;\n+              disabled view/disabled;\n+              tabindex view/tabindex;\n+              onfocus view/onfocus;\n+              onblur view/onblur;\n+              onchange view/onchange;\n+              cols view/cols;\n+              rows view/rows;\n+              readonly view/readonly;\n+              accesskey view/accesskey;\n+              onselect view/onselect;\n+            "\n+  ></textarea>\n </html>\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-11T23:57:50+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/28682a808a5eb48a95bdbd68f3998cdbdbf29648

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 12773b0..2be89ca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -52,6 +52,7 @@ def description():\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "plone.batching",\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:08:47+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/9fe356f36f35ea5f6b0fda5ec8620303c3a0ec55

feat: flake8

Files changed:
M setup.py
M src/plone/z3cform/__init__.py
M src/plone/z3cform/crud/crud.py
M src/plone/z3cform/fieldsets/utils.py
M src/plone/z3cform/textlines/textlines.py
M src/plone/z3cform/z2.py

b'diff --git a/setup.py b/setup.py\nindex 2be89ca..0930d0e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,22 +1,26 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n-import os\n-\n \n __version__ = "2.0.1.dev0"\n \n \n+def read(path):\n+    with open(path) as file_handle:\n+        return file_handle.read()\n+\n+\n def description():\n-    join = lambda *paths: os.path.join("src", "plone", "z3cform", *paths)\n+    base_path = Path(".") / "src" / "plone" / "z3cform"\n     return (\n-        open("README.rst").read()\n+        read("README.rst")\n         + "\\n"\n-        + open(join("fieldsets", "README.rst")).read()\n+        + read(base_path / "fieldsets" / "README.rst")\n         + "\\n"\n-        + open(join("crud", "README.txt")).read()\n+        + read(base_path / "crud" / "README.txt")\n         + "\\n"\n-        + open("CHANGES.rst").read()\n+        + read("CHANGES.rst")\n         + "\\n"\n     )\n \ndiff --git a/src/plone/z3cform/__init__.py b/src/plone/z3cform/__init__.py\nindex 742a33a..d84e339 100644\n--- a/src/plone/z3cform/__init__.py\n+++ b/src/plone/z3cform/__init__.py\n@@ -1,9 +1,9 @@\n+from plone.z3cform.patch import apply_patch\n+\n import zope.i18nmessageid\n \n \n MessageFactory = zope.i18nmessageid.MessageFactory("plone.z3cform")\n \n-from plone.z3cform.patch import apply_patch\n-\n \n apply_patch()\ndiff --git a/src/plone/z3cform/crud/crud.py b/src/plone/z3cform/crud/crud.py\nindex 703cee2..b47a288 100644\n--- a/src/plone/z3cform/crud/crud.py\n+++ b/src/plone/z3cform/crud/crud.py\n@@ -286,7 +286,7 @@ def handle_delete(self, action):\n                     self.context.remove((id, item))\n                 except ConflictError:\n                     raise\n-                except:\n+                except Exception:\n                     # In case an exception is raised, we\'ll catch it\n                     # and notify the user; in general, this is\n                     # unexpected behavior:\ndiff --git a/src/plone/z3cform/fieldsets/utils.py b/src/plone/z3cform/fieldsets/utils.py\nindex b25f02f..ca8aaea 100644\n--- a/src/plone/z3cform/fieldsets/utils.py\n+++ b/src/plone/z3cform/fieldsets/utils.py\n@@ -2,8 +2,6 @@\n from z3c.form.field import Fields\n from z3c.form.util import expandPrefix\n \n-import six\n-\n \n def add(form, *args, **kwargs):\n     """Add one or more fields. Keyword argument \'index\' can be used to\ndiff --git a/src/plone/z3cform/textlines/textlines.py b/src/plone/z3cform/textlines/textlines.py\nindex 60a24db..2e1e30b 100644\n--- a/src/plone/z3cform/textlines/textlines.py\n+++ b/src/plone/z3cform/textlines/textlines.py\n@@ -16,7 +16,6 @@\n """\n __docformat__ = "reStructuredText"\n \n-import six\n import zope.component\n import zope.interface\n import zope.schema.interfaces\ndiff --git a/src/plone/z3cform/z2.py b/src/plone/z3cform/z2.py\nindex 5233dfd..893501e 100644\n--- a/src/plone/z3cform/z2.py\n+++ b/src/plone/z3cform/z2.py\n@@ -4,7 +4,6 @@\n from zope.publisher.interfaces.browser import IBrowserApplicationRequest\n from ZPublisher import HTTPRequest\n \n-import six\n import z3c.form.interfaces\n \n \n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:22:58+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/edecab2d628f82ae9b3155f1d14f76205e5b840c

feat: configure codespell

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 9d0c563..e260216 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,7 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+\n+[tool.codespell]\n+skip = "*.po"\n+ignore-words-list = "fo"\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:22:58+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/032a06788fa7dc30928513d6d00dbfaa6ac65fbc

feat: codespell

Files changed:
M CHANGES.rst
M src/plone/z3cform/crud/README.txt
M src/plone/z3cform/traversal.py
M src/plone/z3cform/traversal.txt

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 162ccff..1aa395e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -407,7 +407,7 @@ Fixes:\n   now look like plone tables.\n \n * Copy translation files to an english folder, so if your browser\n-  negociate to ``en,nl``, you will get english translations instead of\n+  negotiate to ``en,nl``, you will get english translations instead of\n   dutch ones (like expected).\n   [thefunny42]\n \ndiff --git a/src/plone/z3cform/crud/README.txt b/src/plone/z3cform/crud/README.txt\nindex 40dbd12..8049079 100644\n--- a/src/plone/z3cform/crud/README.txt\n+++ b/src/plone/z3cform/crud/README.txt\n@@ -353,7 +353,7 @@ Don't render one part\n What if we wanted our form to display only one part, that is, only the\n add *or* the edit form.  Our CrudForm can implement\n ``editform_factory`` and ``addform_factory`` to override one or both\n-forms.  Seeting one of these to ``crud.NullForm`` will make them\n+forms.  Setting one of these to ``crud.NullForm`` will make them\n disappear:\n \n   >>> class OnlyEditForm(MyForm):\n@@ -434,7 +434,7 @@ We *cannot* use any of the other buttons:\n Customizing sub forms\n ---------------------\n \n-The EditForm class allows you to specify an editsubform_factory-a classs\n+The EditForm class allows you to specify an editsubform_factory-a class\n inherits from EditSubForm.  This allows you to say, override the crud-row.pt\n page template and customize the look of the fields.\n \ndiff --git a/src/plone/z3cform/traversal.py b/src/plone/z3cform/traversal.py\nindex 54668f8..93e72ea 100644\n--- a/src/plone/z3cform/traversal.py\n+++ b/src/plone/z3cform/traversal.py\n@@ -31,7 +31,7 @@ class FormWidgetTraversal:\n     Unfortunately, if you mix in Acquisition.Explicit in Zope 2.12 *and* the\n     class implements IAcquirer, Zope may complain because the view probably\n     does *not* implement acquisition (in Zope 2.12, views no longer mix in\n-    Acquisiton.Explicit). To support both Zope 2.10 and Zope 2.12, you will\n+    Acquisition.Explicit). To support both Zope 2.10 and Zope 2.12, you will\n     need to cheat and mix in Acquisition.Explicit, but use implementsOnly()\n     or some other mechanism to make sure the instance does not provide\n     IAcquirer.\ndiff --git a/src/plone/z3cform/traversal.txt b/src/plone/z3cform/traversal.txt\nindex e9c412a..20689d5 100644\n--- a/src/plone/z3cform/traversal.txt\n+++ b/src/plone/z3cform/traversal.txt\n@@ -12,7 +12,7 @@ the case. To be compatible with both Zope 2.10 and 2.12, you'll need to\n mix in Acquisition.Explicit, but make sure the widget does *not* provide the\n IAcquirer interface. One way to do that is by using implementsOnly(), e.g.::\n \n-    class MyWidget(Aquisition.Explicit):\n+    class MyWidget(Acquisition.Explicit):\n         implementsOnly(IMyWidget)\n \n         ...\n"

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:24:24+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/faa7ac4d07ebdb03039fbe0168011eaa7e757c50

fix(tox): patch test runner invocation

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 8ae5366..2aec6e6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -45,6 +45,6 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.z3cform\n+    zope-testrunner --test-path={toxinidir}/src -s plone.z3cform\n extras =\n     test\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:30:10+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/d6da30849c769ad5b6aa0cc790c432f607a8fb2c

feat: remove six usage

Files changed:
M src/plone/z3cform/inputs.txt
M src/plone/z3cform/tests.py

b'diff --git a/src/plone/z3cform/inputs.txt b/src/plone/z3cform/inputs.txt\nindex 720d641..a90a8a1 100644\n--- a/src/plone/z3cform/inputs.txt\n+++ b/src/plone/z3cform/inputs.txt\n@@ -80,11 +80,7 @@ Let\'s now try with some encoded data. The default encoding is utf-8.\n     >>> testForm = getMultiAdapter((context, request), name=u"test-form")\n     >>> testForm.update()\n     >>> data, errors = testForm.extractData()\n-    >>> import six\n-    >>> if six.PY2:\n-    ...     data == {\'text\': u\'fo\\xf8\'}\n-    ... else:\n-    ...     data == {\'text\': \'fo\xc3\xb8\'}\n+    >>> data == {\'text\': \'fo\xc3\xb8\'}\n     True\n     >>> errors\n     ()\ndiff --git a/src/plone/z3cform/tests.py b/src/plone/z3cform/tests.py\nindex 9264584..23d1815 100644\n--- a/src/plone/z3cform/tests.py\n+++ b/src/plone/z3cform/tests.py\n@@ -12,8 +12,6 @@\n \n import doctest\n import plone.z3cform.templates\n-import re\n-import six\n import unittest\n \n \n@@ -166,14 +164,6 @@ def tearDown(self):\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("LocationError", "zope.location.interfaces.LocationError", got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n class Z2TestCase(unittest.TestCase):\n     def test_recursive_decode(self):\n         from plone.z3cform.z2 import _recursive_decode\n@@ -208,23 +198,23 @@ def test_recursive_decode(self):\n \n def test_suite():\n     layout_txt = layered(\n-        doctest.DocFileSuite("layout.rst", checker=Py23DocChecker()),\n+        doctest.DocFileSuite("layout.rst"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     inputs_txt = layered(\n-        doctest.DocFileSuite("inputs.txt", checker=Py23DocChecker()),\n+        doctest.DocFileSuite("inputs.txt"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     fieldsets_txt = layered(\n-        doctest.DocFileSuite("fieldsets/README.rst", checker=Py23DocChecker()),\n+        doctest.DocFileSuite("fieldsets/README.rst"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     traversal_txt = layered(\n-        doctest.DocFileSuite("traversal.txt", checker=Py23DocChecker()),\n+        doctest.DocFileSuite("traversal.txt"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     crud_readme_txt = layered(\n-        doctest.DocFileSuite("crud/README.txt", checker=Py23DocChecker()),\n+        doctest.DocFileSuite("crud/README.txt"),\n         layer=zca.UNIT_TESTING,\n     )\n     crud_py = layered(\n@@ -232,7 +222,6 @@ def test_suite():\n             "plone.z3cform.crud.crud",\n             setUp=testing.setUp,\n             tearDown=testing.tearDown,\n-            checker=Py23DocChecker(),\n         ),\n         layer=zca.UNIT_TESTING,\n     )\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:46:18+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/496a36a9ca8e1ff775a9423565560811d3874dd8

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex e260216..e98ac8a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,6 +60,7 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+ignore-packages = [\'five.pt\']\n \n [tool.codespell]\n skip = "*.po"\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T00:46:18+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/81bd1f4a8e7efb92f93dc7cdf732b0e8be3f3296

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 0930d0e..a4eefbf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,14 +58,11 @@ def description():\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        "setuptools",\n         "plone.batching",\n-        "six",\n         "z3c.form>=4.0",\n-        "zope.i18n>=3.4",\n         "zope.browserpage",\n-        "zope.component",\n+        "zope.pagetemplate",\n         "Zope",\n     ],\n-    extras_require={"test": ["lxml", "plone.testing[z2]"]},\n+    extras_require={"test": ["persistent", "plone.testing[z2]", "zope.annotation"]},\n )\n'

Repository: plone.z3cform


Branch: refs/heads/master
Date: 2023-03-12T22:13:41+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.z3cform/commit/e2a443faefd149860dfc07e3b02815a5c749d663

Merge pull request #24 from plone/config-with-default-template-ec48e2c2

Config with default template

Files changed:
A news/a533099d.internal
A tox.ini
M CHANGES.rst
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/z3cform/__init__.py
M src/plone/z3cform/configure.zcml
M src/plone/z3cform/converter.py
M src/plone/z3cform/crud/README.txt
M src/plone/z3cform/crud/crud-master.pt
M src/plone/z3cform/crud/crud-row.pt
M src/plone/z3cform/crud/crud-table.pt
M src/plone/z3cform/crud/crud.py
M src/plone/z3cform/fieldsets/extensible.py
M src/plone/z3cform/fieldsets/group.py
M src/plone/z3cform/fieldsets/interfaces.py
M src/plone/z3cform/fieldsets/utils.py
M src/plone/z3cform/inputs.txt
M src/plone/z3cform/interfaces.py
M src/plone/z3cform/layout.py
M src/plone/z3cform/overrides.zcml
M src/plone/z3cform/pagetemplates/form.pt
M src/plone/z3cform/pagetemplates/layout.pt
M src/plone/z3cform/pagetemplates/macros.pt
M src/plone/z3cform/pagetemplates/subform.pt
M src/plone/z3cform/pagetemplates/wrappedsubform.pt
M src/plone/z3cform/patch.py
M src/plone/z3cform/subform.py
M src/plone/z3cform/templates.py
M src/plone/z3cform/templates.zcml
M src/plone/z3cform/testing.zcml
M src/plone/z3cform/tests.py
M src/plone/z3cform/textlines/textlines.py
M src/plone/z3cform/textlines/textlines.zcml
M src/plone/z3cform/textlines/textlines_display.pt
M src/plone/z3cform/textlines/textlines_input.pt
M src/plone/z3cform/traversal.py
M src/plone/z3cform/traversal.txt
M src/plone/z3cform/widget.py
M src/plone/z3cform/z2.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 162ccff..1aa395e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -407,7 +407,7 @@ Fixes:\n   now look like plone tables.\n \n * Copy translation files to an english folder, so if your browser\n-  negociate to ``en,nl``, you will get english translations instead of\n+  negotiate to ``en,nl``, you will get english translations instead of\n   dutch ones (like expected).\n   [thefunny42]\n \ndiff --git a/news/a533099d.internal b/news/a533099d.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a533099d.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..e98ac8a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,48 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'five.pt\']\n+\n+[tool.codespell]\n+skip = "*.po"\n+ignore-words-list = "fo"\ndiff --git a/setup.cfg b/setup.cfg\nindex 885f48a..65446f0 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,27 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n     *.cfg\n \n [zest.releaser]\n python-file-with-version = setup.py\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/setup.py b/setup.py\nindex e196016..a4eefbf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,29 +1,35 @@\n-from setuptools import setup, find_packages\n+from pathlib import Path\n+from setuptools import find_packages\n+from setuptools import setup\n \n-import os\n \n-__version__ = \'2.0.1.dev0\'\n+__version__ = "2.0.1.dev0"\n+\n+\n+def read(path):\n+    with open(path) as file_handle:\n+        return file_handle.read()\n \n \n def description():\n-    join = lambda *paths: os.path.join(\'src\', \'plone\', \'z3cform\', *paths)\n+    base_path = Path(".") / "src" / "plone" / "z3cform"\n     return (\n-        open(\'README.rst\').read()\n-        + \'\\n\'\n-        + open(join(\'fieldsets\', \'README.rst\')).read()\n-        + \'\\n\'\n-        + open(join(\'crud\', \'README.txt\')).read()\n-        + \'\\n\'\n-        + open(\'CHANGES.rst\').read()\n-        + \'\\n\'\n+        read("README.rst")\n+        + "\\n"\n+        + read(base_path / "fieldsets" / "README.rst")\n+        + "\\n"\n+        + read(base_path / "crud" / "README.txt")\n+        + "\\n"\n+        + read("CHANGES.rst")\n+        + "\\n"\n     )\n \n \n setup(\n-    name=\'plone.z3cform\',\n+    name="plone.z3cform",\n     version=__version__,\n-    description=\'plone.z3cform is a library that allows use of z3c.form \'\n-    \'with Zope and the CMF.\',\n+    description="plone.z3cform is a library that allows use of z3c.form "\n+    "with Zope and the CMF.",\n     long_description=description(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n@@ -40,25 +46,23 @@ def description():\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone CMF Python Zope CMS Webapplication\',\n-    author=\'Plone Foundation\',\n-    author_email=\'releasemanager@plone.org\',\n-    url=\'https://github.com/plone/plone.z3cform\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    keywords="Plone CMF Python Zope CMS Webapplication",\n+    author="Plone Foundation",\n+    author_email="releasemanager@plone.org",\n+    url="https://github.com/plone/plone.z3cform",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.batching\',\n-        \'six\',\n-        \'z3c.form>=4.0\',\n-        \'zope.i18n>=3.4\',\n-        \'zope.browserpage\',\n-        \'zope.component\',\n-        \'Zope\',\n+        "plone.batching",\n+        "z3c.form>=4.0",\n+        "zope.browserpage",\n+        "zope.pagetemplate",\n+        "Zope",\n     ],\n-    extras_require={\'test\': [\'lxml\', \'plone.testing[z2]\']},\n+    extras_require={"test": ["persistent", "plone.testing[z2]", "zope.annotation"]},\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/z3cform/__init__.py b/src/plone/z3cform/__init__.py\nindex f02f849..d84e339 100644\n--- a/src/plone/z3cform/__init__.py\n+++ b/src/plone/z3cform/__init__.py\n@@ -1,5 +1,9 @@\n+from plone.z3cform.patch import apply_patch\n+\n import zope.i18nmessageid\n-MessageFactory = zope.i18nmessageid.MessageFactory(\'plone.z3cform\')\n \n-from plone.z3cform.patch import apply_patch\n+\n+MessageFactory = zope.i18nmessageid.MessageFactory("plone.z3cform")\n+\n+\n apply_patch()\ndiff --git a/src/plone/z3cform/configure.zcml b/src/plone/z3cform/configure.zcml\nindex 46b5cd5..8f51421 100644\n--- a/src/plone/z3cform/configure.zcml\n+++ b/src/plone/z3cform/configure.zcml\n@@ -1,17 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:monkey="http://namespaces.plone.org/monkey"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone.z3cform">\n+    xmlns:monkey="http://namespaces.plone.org/monkey"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.z3cform"\n+    >\n \n   <include file="templates.zcml" />\n \n-  <include package="z3c.form" file="meta.zcml" />\n+  <include\n+      package="z3c.form"\n+      file="meta.zcml"\n+      />\n   <include package="z3c.form" />\n \n-  <i18n:registerTranslations directory="locales"/>\n+  <i18n:registerTranslations directory="locales" />\n \n   <!-- Override the FileUploadDataConverter from z3c.form.\n        We register it for the class so that it is more specific than the one\n@@ -19,21 +23,31 @@\n        overrides.zcml.\n      -->\n   <adapter\n-      for="zope.schema.Bytes z3c.form.interfaces.IFileWidget"\n       factory=".converter.FileUploadDataConverter"\n+      for="zope.schema.Bytes\n+           z3c.form.interfaces.IFileWidget"\n       />\n \n   <!-- Backported from z3c.from trunk -->\n-  <include package=".textlines" file="textlines.zcml"\n-    zcml:condition="not-installed z3c.form.browser.textlines"/>\n+  <include\n+      package=".textlines"\n+      file="textlines.zcml"\n+      zcml:condition="not-installed z3c.form.browser.textlines"\n+      />\n \n   <!-- These are not backported, but represent useful policy -->\n   <adapter factory=".textlines.textlines.TextLinesSetConverter" />\n   <adapter factory=".textlines.textlines.TextLinesFrozenSetConverter" />\n \n   <!-- ++widget++ namespace -->\n-  <adapter factory=".traversal.FormWidgetTraversal" name="widget" />\n-  <adapter factory=".traversal.WrapperWidgetTraversal" name="widget" />\n+  <adapter\n+      factory=".traversal.FormWidgetTraversal"\n+      name="widget"\n+      />\n+  <adapter\n+      factory=".traversal.WrapperWidgetTraversal"\n+      name="widget"\n+      />\n \n   <!-- subform adapter backport -->\n   <adapter factory=".subform.SubformAdapter" />\ndiff --git a/src/plone/z3cform/converter.py b/src/plone/z3cform/converter.py\nindex 3a1698c..e9b353d 100644\n--- a/src/plone/z3cform/converter.py\n+++ b/src/plone/z3cform/converter.py\n@@ -1,8 +1,8 @@\n-import ZPublisher.HTTPRequest\n import cgi\n import z3c.form.converter\n import z3c.form.interfaces\n import zope.publisher.browser\n+import ZPublisher.HTTPRequest\n \n \n class FileUploadDataConverter(z3c.form.converter.FileUploadDataConverter):\n@@ -24,4 +24,4 @@ def toFieldValue(self, value):\n             fieldstorage.filename = value.filename\n             value = zope.publisher.browser.FileUpload(fieldstorage)\n \n-        return super(FileUploadDataConverter, self).toFieldValue(value)\n+        return super().toFieldValue(value)\ndiff --git a/src/plone/z3cform/crud/README.txt b/src/plone/z3cform/crud/README.txt\nindex 40dbd12..8049079 100644\n--- a/src/plone/z3cform/crud/README.txt\n+++ b/src/plone/z3cform/crud/README.txt\n@@ -353,7 +353,7 @@ Don\'t render one part\n What if we wanted our form to display only one part, that is, only the\n add *or* the edit form.  Our CrudForm can implement\n ``editform_factory`` and ``addform_factory`` to override one or both\n-forms.  Seeting one of these to ``crud.NullForm`` will make them\n+forms.  Setting one of these to ``crud.NullForm`` will make them\n disappear:\n \n   >>> class OnlyEditForm(MyForm):\n@@ -434,7 +434,7 @@ We *cannot* use any of the other buttons:\n Customizing sub forms\n ---------------------\n \n-The EditForm class allows you to specify an editsubform_factory-a classs\n+The EditForm class allows you to specify an editsubform_factory-a class\n inherits from EditSubForm.  This allows you to say, override the crud-row.pt\n page template and customize the look of the fields.\n \ndiff --git a/src/plone/z3cform/crud/crud-master.pt b/src/plone/z3cform/crud/crud-master.pt\nindex 7b9b5bf..ef1d891 100644\n--- a/src/plone/z3cform/crud/crud-master.pt\n+++ b/src/plone/z3cform/crud/crud-master.pt\n@@ -1,26 +1,35 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      tal:omit-tag=""\n       i18n:domain="plone.z3cform"\n-      tal:omit-tag="">\n+>\n \n   <div class="portalMessage"\n-       tal:condition="view/status" tal:content="view/status">\n+       tal:condition="view/status"\n+       tal:content="view/status"\n+  >\n   </div>\n \n   <p class="crud-description"\n-       tal:condition="view/description"\n-       tal:content="view/description">\n+     tal:condition="view/description"\n+     tal:content="view/description"\n+  >\n   </p>\n \n-  <div tal:repeat="form view/subforms"\n+  <div class="crud-form"\n+       tal:repeat="form view/subforms"\n        tal:content="structure form/render"\n-       class="crud-form">\n+  >\n   </div>\n \n-  <div class="action" tal:repeat="action view/actions/values">\n-    <input type="submit" tal:replace="structure action/render" />\n+  <div class="action"\n+       tal:repeat="action view/actions/values"\n+  >\n+    <input type="submit"\n+           tal:replace="structure action/render"\n+    />\n   </div>\n \n </html>\ndiff --git a/src/plone/z3cform/crud/crud-row.pt b/src/plone/z3cform/crud/crud-row.pt\nindex f555649..c3862bf 100644\n--- a/src/plone/z3cform/crud/crud-row.pt\n+++ b/src/plone/z3cform/crud/crud-row.pt\n@@ -1,24 +1,43 @@\n-<tal:block define="tups view/getCombinedWidgets;\n-                   niceTitles view/getNiceTitles"\n-           repeat="tup tups">\n+<tal:block define="\n+             tups view/getCombinedWidgets;\n+             niceTitles view/getNiceTitles;\n+           "\n+           repeat="tup tups"\n+>\n \n-  <td tal:define="error python:tup[0].error;\n-                  idx repeat/tup/index"\n-      tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+  <td tal:define="\n+        error python:tup[0].error;\n+        idx repeat/tup/index;\n+      "\n+      tal:attributes="\n+        class python:\'field\' + (error and \' error\' or \'\');\n+      "\n+  >\n     <tal:block repeat="widget tup">\n \n-    <a href=""\n-       tal:define="link python:view.context.context.link(view.getContent(), widget.field.__name__)"\n-       tal:omit-tag="python:widget.mode == \'input\' or link is None"\n-       tal:attributes="href link">\n+      <a href=""\n+         tal:define="\n+           link python:view.context.context.link(view.getContent(), widget.field.__name__);\n+         "\n+         tal:omit-tag="python:widget.mode == \'input\' or link is None"\n+         tal:attributes="\n+           href link;\n+         "\n+      >\n \n-      <span class="border border-warning" tal:omit-tag="not:error">\n-        <div tal:condition="error" tal:replace="structure error/render" />\n-        <input type="text" tal:replace="structure widget/render" />\n-      </span>\n+        <span class="border border-warning"\n+              tal:omit-tag="not:error"\n+        >\n+          <div tal:condition="error"\n+               tal:replace="structure error/render"\n+          ></div>\n+          <input type="text"\n+                 tal:replace="structure widget/render"\n+          />\n+        </span>\n \n-    </a>\n-    <br/>\n+      </a>\n+      <br />\n     </tal:block>\n \n   </td>\ndiff --git a/src/plone/z3cform/crud/crud-table.pt b/src/plone/z3cform/crud/crud-table.pt\nindex 960ba68..7a4e3fb 100644\n--- a/src/plone/z3cform/crud/crud-table.pt\n+++ b/src/plone/z3cform/crud/crud-table.pt\n@@ -1,54 +1,84 @@\n- <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      i18n:domain="plone.z3cform"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:condition="view/subforms"\n       tal:omit-tag=""\n-      tal:condition="view/subforms">\n+      i18n:domain="plone.z3cform"\n+>\n \n   <h2 tal:condition="view/label | nothing"\n-      tal:content="view/label">Form title</h2>\n+      tal:content="view/label"\n+  >Form title</h2>\n \n-  <div class="alert alert-info" tal:condition="view/status">\n-      <span tal:content="view/status"></span>\n+  <div class="alert alert-info"\n+       tal:condition="view/status"\n+  >\n+    <span tal:content="view/status"></span>\n   </div>\n \n-  <form action="." method="post" tal:attributes="action view/getURL">\n+  <form action="."\n+        method="post"\n+        tal:attributes="\n+          action view/getURL;\n+        "\n+  >\n \n     <tal:batch tal:replace="structure view/render_batch_navigation" />\n \n-    <table class="table table-striped table-bordered" tal:define="rows view/subforms">\n-        <thead tal:define="row1 python:len(rows) and rows[0] or None"\n-               tal:condition="python:row1 is not None">\n-          <tr>\n-            <th tal:define="widgetsForTitles row1/getTitleWidgets;\n-                            niceTitles row1/getNiceTitles"\n-                tal:repeat="widget widgetsForTitles">\n-\n-              <span tal:define="idx repeat/widget/index"\n-                    tal:content="python: niceTitles[idx]"\n-                    tal:attributes="title widget/field/description;\n-                                    class python: \'header-\' + niceTitles[idx]">\n+    <table class="table table-striped table-bordered"\n+           tal:define="\n+             rows view/subforms;\n+           "\n+    >\n+      <thead tal:define="\n+               row1 python:len(rows) and rows[0] or None;\n+             "\n+             tal:condition="python:row1 is not None"\n+      >\n+        <tr>\n+          <th tal:define="\n+                widgetsForTitles row1/getTitleWidgets;\n+                niceTitles row1/getNiceTitles;\n+              "\n+              tal:repeat="widget widgetsForTitles"\n+          >\n+\n+            <span tal:define="\n+                    idx repeat/widget/index;\n+                  "\n+                  tal:content="python: niceTitles[idx]"\n+                  tal:attributes="\n+                    title widget/field/description;\n+                    class python: \'header-\' + niceTitles[idx];\n+                  "\n+            >\n                 Field\n-              </span>\n+            </span>\n \n-              <span class="fieldRequired"\n-                    tal:condition="python:widget.required and widget.mode == \'input\'">\n+            <span class="fieldRequired"\n+                  tal:condition="python:widget.required and widget.mode == \'input\'"\n+            >\n                 *\n-              </span>\n-            </th>\n+            </span>\n+          </th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        <tal:block repeat="row view/subforms">\n+          <tr tal:content="structure row/render">\n+            <td></td>\n           </tr>\n-        </thead>\n-        <tbody>\n-          <tal:block repeat="row view/subforms">\n-            <tr tal:content="structure row/render">\n-              <td></td>\n-            </tr>\n-          </tal:block>\n-        </tbody>\n+        </tal:block>\n+      </tbody>\n     </table>\n \n-    <span class="action" tal:repeat="action view/actions/values">\n-      <input type="submit" tal:replace="structure action/render" />\n+    <span class="action"\n+          tal:repeat="action view/actions/values"\n+    >\n+      <input type="submit"\n+             tal:replace="structure action/render"\n+      />\n     </span>\n \n   </form>\ndiff --git a/src/plone/z3cform/crud/crud.py b/src/plone/z3cform/crud/crud.py\nindex 5e062ad..b47a288 100644\n--- a/src/plone/z3cform/crud/crud.py\n+++ b/src/plone/z3cform/crud/crud.py\n@@ -1,4 +1,3 @@\n-from ZODB.POSException import ConflictError\n from plone.batching import Batch\n from plone.batching.browser import BatchView\n from plone.z3cform import MessageFactory as _\n@@ -6,9 +5,13 @@\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n-from z3c.form.interfaces import DISPLAY_MODE, INPUT_MODE, NOVALUE\n+from z3c.form.interfaces import DISPLAY_MODE\n+from z3c.form.interfaces import INPUT_MODE\n+from z3c.form.interfaces import NOVALUE\n+from ZODB.POSException import ConflictError\n from zope import interface\n from zope.browserpage import viewpagetemplatefile\n+\n import sys\n import z3c.form.widget\n import zope.event\n@@ -17,22 +20,25 @@\n \n \n class ICrudForm(interface.Interface):\n-\n     update_schema = interface.Attribute(\n-        "Editable part of the schema for use in the update form.")\n+        "Editable part of the schema for use in the update form."\n+    )\n \n     view_schema = interface.Attribute(\n-        "Viewable (only) part of the schema for use in the update form.")\n+        "Viewable (only) part of the schema for use in the update form."\n+    )\n \n     add_schema = interface.Attribute(\n-        "Schema for use in the add form; defaults to ``update_schema``.")\n+        "Schema for use in the add form; defaults to ``update_schema``."\n+    )\n \n     editform_factory = interface.Attribute("Factory used for the edit form.")\n \n     addform_factory = interface.Attribute("Factory used for the add form.")\n \n     batch_size = interface.Attribute(\n-        "Set this to a value greater than 0 to display n items per page.")\n+        "Set this to a value greater than 0 to display n items per page."\n+    )\n \n     def get_items():\n         """Subclasses must a list of all items to edit.\n@@ -63,16 +69,14 @@ def remove(id_item):\n         """\n \n     def before_update(item, data):\n-        """A hook that gets called before an item is updated.\n-        """\n+        """A hook that gets called before an item is updated."""\n \n     def link(item, field):\n-        """Return a URL for this item\'s field or None.\n-        """\n+        """Return a URL for this item\'s field or None."""\n \n \n @interface.implementer(ICrudForm)\n-class AbstractCrudForm(object):\n+class AbstractCrudForm:\n     """The AbstractCrudForm is not a form but implements methods\n     necessary to comply with the ``ICrudForm`` interface:\n \n@@ -107,19 +111,19 @@ def link(self, item, field):\n \n \n class CrudBatchView(BatchView):\n-    prefix = \'\'\n+    prefix = ""\n \n     def make_link(self, pagenumber):\n         start = max(pagenumber - 1, 0)\n-        return "%s?%spage=%s" % (self.request.getURL(), self.prefix, start)\n+        return f"{self.request.getURL()}?{self.prefix}page={start}"\n \n \n class EditSubForm(form.EditForm):\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-row.pt\')\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-row.pt")\n \n     @property\n     def prefix(self):\n-        return \'crud-edit.%s.\' % self.content_id\n+        return "crud-edit.%s." % self.content_id\n \n     # These are set by the parent form\n     content = None\n@@ -142,8 +146,8 @@ def fields(self):\n                 f.mode = DISPLAY_MODE\n                 # This is to allow a field to appear in both view\n                 # and edit mode at the same time:\n-                if not f.__name__.startswith(\'view_\'):\n-                    f.__name__ = \'view_\' + f.__name__\n+                if not f.__name__.startswith("view_"):\n+                    f.__name__ = "view_" + f.__name__\n             fields += view_fields\n \n         return fields\n@@ -153,9 +157,8 @@ def getContent(self):\n \n     def _select_field(self):\n         select_field = field.Field(\n-            zope.schema.Bool(__name__=\'select\',\n-                             required=False,\n-                             title=_(u\'select\')))\n+            zope.schema.Bool(__name__="select", required=False, title=_("select"))\n+        )\n         select_field.widgetFactory[INPUT_MODE] = singlecheckboxwidget_factory\n         return select_field\n \n@@ -169,7 +172,7 @@ def getCombinedWidgets(self):\n         seen = set()\n         for name, widget in list(widgets):\n             if widget.mode == INPUT_MODE:\n-                view_widget = self.widgets.get(\'view_%s\' % name)\n+                view_widget = self.widgets.get("view_%s" % name)\n                 if view_widget is not None:\n                     combined.append((widget, view_widget))\n                     seen.add(view_widget)\n@@ -194,20 +197,20 @@ def getNiceTitles(self):\n \n \n class EditForm(form.Form):\n-    label = _(u"Edit")\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-table.pt\')\n+    label = _("Edit")\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-table.pt")\n \n     # exposes the edit sub form for your own derivatives\n     editsubform_factory = EditSubForm\n \n     @property\n     def prefix(self):\n-        parent_prefix = getattr(self.context, \'prefix\', \'\')\n-        return \'crud-edit.\' + parent_prefix\n+        parent_prefix = getattr(self.context, "prefix", "")\n+        return "crud-edit." + parent_prefix\n \n     def update(self):\n         self._update_subforms()\n-        super(EditForm, self).update()\n+        super().update()\n \n     def _update_subforms(self):\n         self.subforms = []\n@@ -222,7 +225,7 @@ def _update_subforms(self):\n     def batch(self):\n         items = self.context.get_items()\n         batch_size = self.context.batch_size or sys.maxsize\n-        page = int(self.request.get(\'%spage\' % self.prefix, 0))\n+        page = int(self.request.get("%spage" % self.prefix, 0))\n         return Batch.fromPagenumber(items, batch_size, page + 1)\n \n     def render_batch_navigation(self):\n@@ -230,13 +233,15 @@ def render_batch_navigation(self):\n         bv.prefix = self.prefix\n         return bv(self.batch)\n \n-    @button.buttonAndHandler(_(\'Apply changes\'),\n-                             name=\'edit\',\n-                             condition=lambda form: form.context.update_schema)\n+    @button.buttonAndHandler(\n+        _("Apply changes"),\n+        name="edit",\n+        condition=lambda form: form.context.update_schema,\n+    )\n     def handle_edit(self, action):\n-        success = _(u"Successfully updated")\n-        partly_success = _(u"Some of your changes could not be applied.")\n-        status = no_changes = _(u"No changes made.")\n+        success = _("Successfully updated")\n+        partly_success = _("Some of your changes could not be applied.")\n+        status = no_changes = _("No changes made.")\n         for subform in self.subforms:\n             # With the ``extractData()`` call, validation will occur,\n             # and errors will be stored on the widgets amongst other\n@@ -252,7 +257,7 @@ def handle_edit(self, action):\n                 elif status is success:\n                     status = partly_success\n                 continue\n-            del data[\'select\']\n+            del data["select"]\n             self.context.before_update(subform.content, data)\n             changes = subform.applyChanges(data)\n             if changes:\n@@ -267,36 +272,37 @@ def handle_edit(self, action):\n                     if widget.mode == DISPLAY_MODE:\n                         widget.update()\n                         zope.event.notify(\n-                            z3c.form.widget.AfterWidgetUpdateEvent(widget))\n+                            z3c.form.widget.AfterWidgetUpdateEvent(widget)\n+                        )\n         self.status = status\n \n-    @button.buttonAndHandler(_(\'Delete\'), name=\'delete\')\n+    @button.buttonAndHandler(_("Delete"), name="delete")\n     def handle_delete(self, action):\n         selected = self.selected_items()\n         if selected:\n-            self.status = _(u"Successfully deleted items.")\n+            self.status = _("Successfully deleted items.")\n             for id, item in selected:\n                 try:\n                     self.context.remove((id, item))\n                 except ConflictError:\n                     raise\n-                except:\n+                except Exception:\n                     # In case an exception is raised, we\'ll catch it\n                     # and notify the user; in general, this is\n                     # unexpected behavior:\n-                    self.status = _(u\'Unable to remove one or more items.\')\n+                    self.status = _("Unable to remove one or more items.")\n                     break\n \n             # We changed the amount of entries, so we update the subforms\n             # again.\n             self._update_subforms()\n         else:\n-            self.status = _(u"Please select items to delete.")\n+            self.status = _("Please select items to delete.")\n \n     def selected_items(self):\n         tuples = []\n         for subform in self.subforms:\n-            data = subform.widgets[\'select\'].extract()\n+            data = subform.widgets["select"].extract()\n             if not data or data is NOVALUE:\n                 continue\n             else:\n@@ -310,38 +316,35 @@ def getURL(self):\n         to not need plone stack in testing-setup\n         """\n         current_base_url = self.request.get(\n-            \'ACTUAL_URL\',\n+            "ACTUAL_URL",\n             self.request.get(\n-                \'VIRTUAL_URL\',\n-                self.request.get(\n-                    \'URL\',\n-                    self.context.context.absolute_url()\n-                )\n-            )\n+                "VIRTUAL_URL",\n+                self.request.get("URL", self.context.context.absolute_url()),\n+            ),\n         )\n-        query = self.request.get(\'QUERY_STRING\', None)\n+        query = self.request.get("QUERY_STRING", None)\n         if query:\n-            return current_base_url + \'?\' + query\n+            return current_base_url + "?" + query\n         return current_base_url\n \n \n class AddForm(form.Form):\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-add.pt\')\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-add.pt")\n \n-    label = _(u"Add")\n+    label = _("Add")\n     ignoreContext = True\n     ignoreRequest = True\n \n     @property\n     def prefix(self):\n-        parent_prefix = getattr(self.context, \'prefix\', \'\')\n-        return \'crud-add.\' + parent_prefix\n+        parent_prefix = getattr(self.context, "prefix", "")\n+        return "crud-add." + parent_prefix\n \n     @property\n     def fields(self):\n         return field.Fields(self.context.add_schema)\n \n-    @button.buttonAndHandler(_(\'Add\'), name=\'add\')\n+    @button.buttonAndHandler(_("Add"), name="add")\n     def handle_add(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -353,11 +356,10 @@ def handle_add(self, action):\n             self.status = e\n         else:\n             zope.event.notify(zope.lifecycleevent.ObjectCreatedEvent(item))\n-            self.status = _(u"Item added successfully.")\n+            self.status = _("Item added successfully.")\n \n \n-class NullForm(object):\n-\n+class NullForm:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -366,19 +368,20 @@ def update(self):\n         pass\n \n     def render(self):\n-        return \'\'\n+        return ""\n+\n     __call__ = render\n \n \n class CrudForm(AbstractCrudForm, form.Form):\n-    template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-master.pt\')\n-    description = u\'\'\n+    template = viewpagetemplatefile.ViewPageTemplateFile("crud-master.pt")\n+    description = ""\n \n     editform_factory = EditForm\n     addform_factory = AddForm\n \n     def update(self):\n-        super(CrudForm, self).update()\n+        super().update()\n \n         addform = self.addform_factory(self, self.request)\n         editform = self.editform_factory(self, self.request)\ndiff --git a/src/plone/z3cform/fieldsets/extensible.py b/src/plone/z3cform/fieldsets/extensible.py\nindex 6de98db..0ecdaf5 100644\n--- a/src/plone/z3cform/fieldsets/extensible.py\n+++ b/src/plone/z3cform/fieldsets/extensible.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.z3cform import MessageFactory as _\n from plone.z3cform.fieldsets import utils\n from plone.z3cform.fieldsets.interfaces import IExtensibleForm\n@@ -13,9 +12,8 @@ def order_key(adapter_tuple):\n \n \n @implementer(IFormExtender)\n-class FormExtender(object):\n-    """Base class for IFormExtender adapters with convenience APIs\n-    """\n+class FormExtender:\n+    """Base class for IFormExtender adapters with convenience APIs"""\n \n     # Change this to prioritise\n     order = 0\n@@ -35,39 +33,35 @@ def add(self, *args, **kwargs):\n         utils.add(self.form, *args, **kwargs)\n \n     def remove(self, field_name, prefix=None):\n-        """Get rid of a field. The omitted field will be returned.\n-        """\n+        """Get rid of a field. The omitted field will be returned."""\n \n         return utils.remove(self.form, field_name, prefix=prefix)\n \n     def move(\n-            self,\n-            field_name,\n-            before=None,\n-            after=None,\n-            prefix=None,\n-            relative_prefix=None):\n-        """Move the field with the given name before or after another field.\n-        """\n+        self, field_name, before=None, after=None, prefix=None, relative_prefix=None\n+    ):\n+        """Move the field with the given name before or after another field."""\n \n-        utils.move(self.form, field_name, before=before, after=after,\n-                   prefix=prefix, relative_prefix=relative_prefix)\n+        utils.move(\n+            self.form,\n+            field_name,\n+            before=before,\n+            after=after,\n+            prefix=prefix,\n+            relative_prefix=relative_prefix,\n+        )\n \n \n @implementer(IExtensibleForm)\n class ExtensibleForm(GroupForm):\n-\n     groups = []\n-    default_fieldset_label = _(u"Default")\n+    default_fieldset_label = _("Default")\n \n     def update(self):\n         self.updateFields()\n-        super(ExtensibleForm, self).update()\n+        super().update()\n \n     def updateFields(self):\n-        extenders = getAdapters(\n-            (self.context, self.request, self),\n-            IFormExtender\n-        )\n+        extenders = getAdapters((self.context, self.request, self), IFormExtender)\n         for name, extender in sorted(extenders, key=order_key):\n             extender.update()\ndiff --git a/src/plone/z3cform/fieldsets/group.py b/src/plone/z3cform/fieldsets/group.py\nindex 16ca647..73f8e7e 100644\n--- a/src/plone/z3cform/fieldsets/group.py\n+++ b/src/plone/z3cform/fieldsets/group.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.z3cform.fieldsets.interfaces import IDescriptiveGroup\n from plone.z3cform.fieldsets.interfaces import IGroupFactory\n from z3c.form import group\n@@ -7,9 +6,9 @@\n \n @implementer(IDescriptiveGroup)\n class Group(group.Group):\n-    __name__ = u""\n-    label = u""\n-    description = u""\n+    __name__ = ""\n+    label = ""\n+    description = ""\n     order = 0\n \n     def getContent(self):\n@@ -18,16 +17,8 @@ def getContent(self):\n \n \n @implementer(IGroupFactory)\n-class GroupFactory(object):\n-\n-    def __init__(\n-        self,\n-        __name__,\n-        fields,\n-        label=None,\n-        description=None,\n-        order=None\n-    ):\n+class GroupFactory:\n+    def __init__(self, __name__, fields, label=None, description=None, order=None):\n         self.__name__ = __name__\n         self.fields = fields\n         self.label = label or __name__\n@@ -35,7 +26,7 @@ def __init__(\n         self.order = order\n \n     def __call__(self, context, request, parentForm):\n-        groupclass = getattr(parentForm, \'group_class\', Group)\n+        groupclass = getattr(parentForm, "group_class", Group)\n         group = groupclass(context, request, parentForm)\n         group.__name__ = self.__name__\n         group.label = self.label\ndiff --git a/src/plone/z3cform/fieldsets/interfaces.py b/src/plone/z3cform/fieldsets/interfaces.py\nindex dc521ae..0ff2e0c 100644\n--- a/src/plone/z3cform/fieldsets/interfaces.py\n+++ b/src/plone/z3cform/fieldsets/interfaces.py\n@@ -11,17 +11,18 @@ class IFormExtender(Interface):\n     """\n \n     order = schema.Int(\n-        title=u"Order",\n-        description=u"Use this property to order the sorter. " +\n-        u"Low numbers are executed before high ones.",\n-        required=True)\n+        title="Order",\n+        description="Use this property to order the sorter. "\n+        + "Low numbers are executed before high ones.",\n+        required=True,\n+    )\n \n     def update():\n         """Modify the form in place. Supported operations include:\n \n-         - modify the \'fields\' object to change the default fieldset\n-         - modify the \'groups\' list to add, remove or reorder fieldsets\n-         - modify the \'fields\' property of a given group\n+        - modify the \'fields\' object to change the default fieldset\n+        - modify the \'groups\' list to add, remove or reorder fieldsets\n+        - modify the \'fields\' property of a given group\n         """\n \n \n@@ -30,32 +31,31 @@ class IDescriptiveGroup(IGroup):\n     a label and a description.\n     """\n \n-    __name__ = schema.TextLine(title=u"Name of this group")\n+    __name__ = schema.TextLine(title="Name of this group")\n \n     label = schema.TextLine(\n-        title=u"Fieldset title",\n-        description=u"The __name__ will be used if this is not given",\n-        required=False)\n+        title="Fieldset title",\n+        description="The __name__ will be used if this is not given",\n+        required=False,\n+    )\n \n-    description = schema.Text(title=u"Fieldset description",\n-                              required=False)\n+    description = schema.Text(title="Fieldset description", required=False)\n \n \n class IGroupFactory(Interface):\n-    """An object that can be used to create a z3c.form.group.Group.\n-    """\n+    """An object that can be used to create a z3c.form.group.Group."""\n \n-    __name__ = schema.TextLine(title=u"Name of this group")\n+    __name__ = schema.TextLine(title="Name of this group")\n \n     label = schema.TextLine(\n-        title=u"Fieldset title",\n-        description=u"The __name__ will be used if this is not given",\n-        required=False)\n+        title="Fieldset title",\n+        description="The __name__ will be used if this is not given",\n+        required=False,\n+    )\n \n-    description = schema.Text(title=u"Fieldset description",\n-                              required=False)\n+    description = schema.Text(title="Fieldset description", required=False)\n \n-    fields = schema.Object(title=u"Fields in this form", schema=IFields)\n+    fields = schema.Object(title="Fields in this form", schema=IFields)\n \n \n class IExtensibleForm(Interface):\n@@ -64,13 +64,10 @@ class IExtensibleForm(Interface):\n     """\n \n     groups = schema.List(\n-        title=u\'Groups\',\n-        value_type=schema.Object(\n-            title=u"Group",\n-            schema=IGroupFactory))\n+        title="Groups", value_type=schema.Object(title="Group", schema=IGroupFactory)\n+    )\n \n-    default_fieldset_label = schema.TextLine(\n-        title=u"Label of the default fieldset")\n+    default_fieldset_label = schema.TextLine(title="Label of the default fieldset")\n \n     def updateFields():\n         """Called during form update to allow updating of self.fields\ndiff --git a/src/plone/z3cform/fieldsets/utils.py b/src/plone/z3cform/fieldsets/utils.py\nindex db3a50a..ca8aaea 100644\n--- a/src/plone/z3cform/fieldsets/utils.py\n+++ b/src/plone/z3cform/fieldsets/utils.py\n@@ -2,8 +2,6 @@\n from z3c.form.field import Fields\n from z3c.form.util import expandPrefix\n \n-import six\n-\n \n def add(form, *args, **kwargs):\n     """Add one or more fields. Keyword argument \'index\' can be used to\n@@ -12,12 +10,12 @@ def add(form, *args, **kwargs):\n     created if it doesn\'t exist.\n     """\n \n-    index = kwargs.pop(\'index\', None)\n-    group = kwargs.pop(\'group\', None)\n+    index = kwargs.pop("index", None)\n+    group = kwargs.pop("group", None)\n \n     new_fields = Fields(*args, **kwargs)\n \n-    if not group or isinstance(group, six.string_types):\n+    if not group or isinstance(group, str):\n         source = find_source(form, group=group)\n     else:\n         source = group\n@@ -30,14 +28,15 @@ def add(form, *args, **kwargs):\n             source.fields += new_fields\n         else:\n             field_names = list(source.fields.keys())\n-            source.fields = source.fields.select(*field_names[:index]) + \\\n-                new_fields + \\\n-                source.fields.select(*field_names[index:])\n+            source.fields = (\n+                source.fields.select(*field_names[:index])\n+                + new_fields\n+                + source.fields.select(*field_names[index:])\n+            )\n \n \n def remove(form, field_name, prefix=None):\n-    """Get rid of a field. The omitted field will be returned.\n-    """\n+    """Get rid of a field. The omitted field will be returned."""\n \n     if prefix:\n         field_name = expandPrefix(prefix) + field_name\n@@ -54,20 +53,13 @@ def remove(form, field_name, prefix=None):\n                 return field\n \n \n-def move(\n-        form,\n-        field_name,\n-        before=None,\n-        after=None,\n-        prefix=None,\n-        relative_prefix=None):\n-    """Move the field with the given name before or after another field.\n-    """\n+def move(form, field_name, before=None, after=None, prefix=None, relative_prefix=None):\n+    """Move the field with the given name before or after another field."""\n     if prefix:\n         field_name = expandPrefix(prefix) + field_name\n \n     if before and after:\n-        raise ValueError(u"Only one of \'before\' or \'after\' is allowed")\n+        raise ValueError("Only one of \'before\' or \'after\' is allowed")\n \n     offset = 0\n     if after:\n@@ -79,14 +71,14 @@ def move(\n \n     if field_name not in form.fields:\n         found = False\n-        for group in getattr(form, \'groups\', []):\n+        for group in getattr(form, "groups", []):\n             if field_name in group.fields:\n                 found = True\n                 break\n         if not found:\n             raise KeyError("Field %s not found" % field_name)\n \n-    if relative != \'*\' and relative not in form.fields:\n+    if relative != "*" and relative not in form.fields:\n         found = False\n         for group in form.groups:\n             if relative in group.fields:\n@@ -102,7 +94,7 @@ def move(\n \n     if relative in form.fields:\n         index = list(form.fields.keys()).index(relative)\n-    elif orig_relative == \'*\' and relative_prefix is None:\n+    elif orig_relative == "*" and relative_prefix is None:\n         if before:\n             index = 0\n         else:\n@@ -112,7 +104,7 @@ def move(\n             if relative in group.fields:\n                 index = list(group.fields.keys()).index(relative)\n                 break\n-            elif orig_relative == \'*\' and relative_prefix == group.prefix:\n+            elif orig_relative == "*" and relative_prefix == group.prefix:\n                 if before:\n                     index = 0\n                 else:\ndiff --git a/src/plone/z3cform/inputs.txt b/src/plone/z3cform/inputs.txt\nindex 720d641..a90a8a1 100644\n--- a/src/plone/z3cform/inputs.txt\n+++ b/src/plone/z3cform/inputs.txt\n@@ -80,11 +80,7 @@ Let\'s now try with some encoded data. The default encoding is utf-8.\n     >>> testForm = getMultiAdapter((context, request), name=u"test-form")\n     >>> testForm.update()\n     >>> data, errors = testForm.extractData()\n-    >>> import six\n-    >>> if six.PY2:\n-    ...     data == {\'text\': u\'fo\\xf8\'}\n-    ... else:\n-    ...     data == {\'text\': \'fo\xc3\xb8\'}\n+    >>> data == {\'text\': \'fo\xc3\xb8\'}\n     True\n     >>> errors\n     ()\ndiff --git a/src/plone/z3cform/interfaces.py b/src/plone/z3cform/interfaces.py\nindex b05ac9b..cc34c7b 100644\n--- a/src/plone/z3cform/interfaces.py\n+++ b/src/plone/z3cform/interfaces.py\n@@ -19,28 +19,25 @@ class IFormWrapper(Interface):\n     """\n \n     def update():\n-        """We use the content provider update/render couple.\n-        """\n+        """We use the content provider update/render couple."""\n \n     def render():\n-        """We use the content provider update/render couple.\n-        """\n+        """We use the content provider update/render couple."""\n \n     form = Attribute("The form class. Should be set at class level")\n \n     form_instance = schema.Object(\n-        title=u"Instance of the form being rendered",\n-        description=u"Set by the wrapper code during __init__()",\n+        title="Instance of the form being rendered",\n+        description="Set by the wrapper code during __init__()",\n         readonly=True,\n-        schema=IForm\n+        schema=IForm,\n     )\n \n     index = schema.Object(\n-        title=u"Page template instance",\n-        description=(u"If not set, a template will be found "\n-                     u"via an adapter lookup"),\n+        title="Page template instance",\n+        description=("If not set, a template will be found " "via an adapter lookup"),\n         required=False,\n-        schema=IPageTemplate\n+        schema=IPageTemplate,\n     )\n \n \n@@ -61,9 +58,8 @@ class IDeferSecurityCheck(Interface):\n \n class ISubformFactory(Interface):\n     """Factory that will instantiate our subforms for ObjectWidget.\n-       BBB: backported from z3c.form 3.6.x\n+    BBB: backported from z3c.form 3.6.x\n     """\n \n     def __call__():\n-        """Return a default object created to be populated.\n-        """\n+        """Return a default object created to be populated."""\ndiff --git a/src/plone/z3cform/layout.py b/src/plone/z3cform/layout.py\nindex 1fe1bdd..61668d7 100644\n--- a/src/plone/z3cform/layout.py\n+++ b/src/plone/z3cform/layout.py\n@@ -1,9 +1,10 @@\n from Acquisition import aq_inner\n-from Products.Five import BrowserView\n-from Products.Five.browser.pagetemplatefile import BoundPageTemplate\n from plone.z3cform import interfaces\n from plone.z3cform import z2\n+from Products.Five import BrowserView\n+from Products.Five.browser.pagetemplatefile import BoundPageTemplate\n from zope.pagetemplate.interfaces import IPageTemplate\n+\n import z3c.form.interfaces\n import zope.component\n import zope.interface\n@@ -25,10 +26,9 @@ class FormWrapper(BrowserView):\n     request_layer = z3c.form.interfaces.IFormLayer\n \n     def __init__(self, context, request):\n-        super(FormWrapper, self).__init__(context, request)\n+        super().__init__(context, request)\n         if self.form is not None:\n-            self.form_instance = self.form(\n-                aq_inner(self.context), self.request)\n+            self.form_instance = self.form(aq_inner(self.context), self.request)\n             self.form_instance.__name__ = self.__name__\n \n     def update(self):\n@@ -39,9 +39,7 @@ def update(self):\n         """\n \n         if not z3c.form.interfaces.ISubForm.providedBy(self.form_instance):\n-            zope.interface.alsoProvides(\n-                self.form_instance,\n-                interfaces.IWrappedForm)\n+            zope.interface.alsoProvides(self.form_instance, interfaces.IWrappedForm)\n \n         z2.switch_on(self, request_layer=self.request_layer)\n         self.form_instance.update()\n@@ -73,10 +71,11 @@ def render(self):\n         (self, request) to IPageTemplate and use that instead.\n         """\n         if self.request.response.getStatus() in (302, 303):\n-            return u""\n+            return ""\n         if self.index is None:\n             template = zope.component.getMultiAdapter(\n-                (self, self.request), IPageTemplate)\n+                (self, self.request), IPageTemplate\n+            )\n             return BoundPageTemplate(template, self)()\n         return self.index()\n \n@@ -93,12 +92,13 @@ def description(self):\n         description for your page.  Overriding this with a simple\n         attribute works as well.\n         """\n-        return getattr(self.form_instance, \'description\', "")\n+        return getattr(self.form_instance, "description", "")\n \n \n def wrap_form(form, __wrapper_class=FormWrapper, **kwargs):\n     class MyFormWrapper(__wrapper_class):\n         pass\n+\n     assert z3c.form.interfaces.IForm.implementedBy(form)\n     MyFormWrapper.form = form\n     for name, value in kwargs.items():\ndiff --git a/src/plone/z3cform/overrides.zcml b/src/plone/z3cform/overrides.zcml\nindex 02f82b3..b5e89df 100644\n--- a/src/plone/z3cform/overrides.zcml\n+++ b/src/plone/z3cform/overrides.zcml\n@@ -1,6 +1,6 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <!-- This file is no longer necessary, but left here in case people\n+  <!-- This file is no longer necessary, but left here in case people\n          reference it\n       -->\n \ndiff --git a/src/plone/z3cform/pagetemplates/form.pt b/src/plone/z3cform/pagetemplates/form.pt\nindex 00007f6..12d5421 100644\n--- a/src/plone/z3cform/pagetemplates/form.pt\n+++ b/src/plone/z3cform/pagetemplates/form.pt\n@@ -1,22 +1,27 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      metal:use-macro="context/@@standard_macros/page"\n       i18n:domain="plone.z3cform"\n-      metal:use-macro="context/@@standard_macros/page">\n+>\n \n-    <body metal:fill-slot="body">\n+  <body metal:fill-slot="body">\n \n-        <h1 tal:define="label view/label|nothing"\n-            tal:omit-tag="not:label"\n-            tal:content="label" />\n+    <h1 tal:define="\n+          label view/label|nothing;\n+        "\n+        tal:content="label"\n+        tal:omit-tag="not:label"\n+    ></h1>\n \n-        <div class="description"\n-           tal:condition="view/description | nothing"\n-           tal:content="structure view/description">Form description</div>\n+    <div class="description"\n+         tal:condition="view/description | nothing"\n+         tal:content="structure view/description"\n+    >Form description</div>\n \n-        <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n+    <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n \n-    </body>\n+  </body>\n \n </html>\ndiff --git a/src/plone/z3cform/pagetemplates/layout.pt b/src/plone/z3cform/pagetemplates/layout.pt\nindex d9a54af..f9ccb77 100644\n--- a/src/plone/z3cform/pagetemplates/layout.pt\n+++ b/src/plone/z3cform/pagetemplates/layout.pt\n@@ -1,18 +1,23 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master">\n-<body>\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      metal:use-macro="context/main_template/macros/master"\n+>\n+  <body>\n \n-<metal:slot metal:fill-slot="header" i18n:domain="cmf_default">\n-  <h1 tal:content="view/label">View Title</h1>\n-</metal:slot>\n+    <metal:slot metal:fill-slot="header"\n+                i18n:domain="cmf_default"\n+    >\n+      <h1 tal:content="view/label">View Title</h1>\n+    </metal:slot>\n \n-<metal:slot metal:fill-slot="main" i18n:domain="cmf_default">\n-  <div id="layout-contents">\n-    <span tal:replace="structure view/contents" />\n-  </div>\n-</metal:slot>\n-</body>\n+    <metal:slot metal:fill-slot="main"\n+                i18n:domain="cmf_default"\n+    >\n+      <div id="layout-contents">\n+        <span tal:replace="structure view/contents"></span>\n+      </div>\n+    </metal:slot>\n+  </body>\n </html>\ndiff --git a/src/plone/z3cform/pagetemplates/macros.pt b/src/plone/z3cform/pagetemplates/macros.pt\nindex 622a294..19aaab1 100644\n--- a/src/plone/z3cform/pagetemplates/macros.pt\n+++ b/src/plone/z3cform/pagetemplates/macros.pt\n@@ -1,34 +1,45 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      tal:omit-tag=""\n       i18n:domain="plone.z3cform"\n-      tal:omit-tag="">\n+>\n \n   <head></head>\n \n   <body>\n \n-    <div class="form" metal:define-macro="form">\n+    <div class="form"\n+         metal:define-macro="form"\n+    >\n \n       <metal:title-slot define-slot="title">\n         <h3 tal:condition="view/label | nothing">\n-            <span tal:replace="view/label">Form title</span>:</h3>\n+          <span tal:replace="view/label">Form title</span>:</h3>\n       </metal:title-slot>\n \n       <metal:description-slot define-slot="description">\n         <div class="description"\n              tal:condition="view/description | nothing"\n-             tal:content="structure view/description">Form description</div>\n+             tal:content="structure view/description"\n+        >Form description</div>\n       </metal:description-slot>\n \n       <metal:define define-macro="titlelessform">\n         <div class="portalMessage"\n-             tal:condition="view/status" tal:content="view/status">\n+             tal:condition="view/status"\n+             tal:content="view/status"\n+        >\n         </div>\n \n-        <form action="." method="post"\n-              tal:attributes="action view/action; enctype view/enctype">\n+        <form action="."\n+              method="post"\n+              tal:attributes="\n+                action view/action;\n+                enctype view/enctype;\n+              "\n+        >\n \n           <metal:block define-slot="formtop" />\n \n@@ -37,43 +48,62 @@\n \n               <tal:widgets repeat="widget python:view.widgets.values()">\n                 <div class="row"\n-                     tal:define="hidden python:widget.mode == \'hidden\'"\n-                     tal:omit-tag="hidden">\n+                     tal:define="\n+                       hidden python:widget.mode == \'hidden\';\n+                     "\n+                     tal:omit-tag="hidden"\n+                >\n \n                   <metal:field-slot define-slot="field">\n                     <metal:field define-macro="field">\n                       <div class="field"\n-                           tal:define="error widget/error;\n-                                       hidden python:widget.mode == \'hidden\';"\n-                           tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+                           tal:define="\n+                             error widget/error;\n+                             hidden python:widget.mode == \'hidden\';\n+                           "\n+                           tal:attributes="\n+                             class python:\'field\' + (error and \' error\' or \'\');\n+                           "\n+                      >\n                         <label for=""\n-                               tal:attributes="for widget/id"\n-                               tal:condition="not:hidden">\n-                          <span i18n:translate=""\n-                                tal:content="widget/label">label</span>\n+                               tal:condition="not:hidden"\n+                               tal:attributes="\n+                                 for widget/id;\n+                               "\n+                        >\n+                          <span tal:content="widget/label"\n+                                i18n:translate=""\n+                          >label</span>\n                         </label>\n \n-                        <span class="fieldRequired" title="Required"\n+                        <span class="fieldRequired"\n+                              title="Required"\n                               tal:condition="python:widget.required and not hidden"\n+                              i18n:attributes="title title_required;"\n                               i18n:translate="label_required"\n-                              i18n:attributes="title title_required;">\n+                        >\n                           (Required)\n                         </span>\n \n                         <div class="formHelp"\n-                             tal:define="description widget/field/description"\n-                             i18n:translate=""\n-                             tal:content="description"\n+                             tal:define="\n+                               description widget/field/description;\n+                             "\n                              tal:condition="python:description and not hidden"\n-                             >field description</div>\n+                             tal:content="description"\n+                             i18n:translate=""\n+                        >field description</div>\n \n                         <div tal:condition="error"\n-                             tal:content="structure error/render">\n+                             tal:content="structure error/render"\n+                        >\n                           Error\n                         </div>\n \n                         <div class="widget">\n-                          <input type="text" tal:replace="structure widget/render" />\n+                          <input type="text"\n+                                 tal:replace="structure widget/render"\n+                          />\n                         </div>\n                       </div>\n                     </metal:field>\n@@ -87,8 +117,12 @@\n \n           <metal:actions-slot define-slot="actions">\n             <metal:define define-macro="actions">\n-              <div class="action" tal:repeat="action view/actions/values|nothing">\n-                <input type="submit" tal:replace="structure action/render" />\n+              <div class="action"\n+                   tal:repeat="action view/actions/values|nothing"\n+              >\n+                <input type="submit"\n+                       tal:replace="structure action/render"\n+                />\n               </div>\n             </metal:define>\n           </metal:actions-slot>\n@@ -97,7 +131,7 @@\n \n         </form>\n       </metal:define>\n-      </div>\n+    </div>\n \n \n   </body>\ndiff --git a/src/plone/z3cform/pagetemplates/subform.pt b/src/plone/z3cform/pagetemplates/subform.pt\nindex d2f9f6f..ed26cf8 100644\n--- a/src/plone/z3cform/pagetemplates/subform.pt\n+++ b/src/plone/z3cform/pagetemplates/subform.pt\n@@ -1,10 +1,13 @@\n <div xmlns="http://www.w3.org/1999/xhtml"\n-     xmlns:tal="http://xml.zope.org/namespaces/tal"\n      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-     tal:attributes="class view/css_class|nothing">\n-  <h3 tal:replace="structure view/heading|nothing" />\n-  <div tal:replace="structure view/contents_top|nothing" />\n+     xmlns:tal="http://xml.zope.org/namespaces/tal"\n+     tal:attributes="\n+       class view/css_class|nothing;\n+     "\n+>\n+  <h3 tal:replace="structure view/heading|nothing"></h3>\n+  <div tal:replace="structure view/contents_top|nothing"></div>\n   <metal:use use-macro="context/@@ploneform-macros/fields" />\n   <metal:use use-macro="context/@@ploneform-macros/actions" />\n-  <div tal:replace="structure view/contents_bottom|nothing" />\n+  <div tal:replace="structure view/contents_bottom|nothing"></div>\n </div>\ndiff --git a/src/plone/z3cform/pagetemplates/wrappedsubform.pt b/src/plone/z3cform/pagetemplates/wrappedsubform.pt\nindex d2f9f6f..ed26cf8 100644\n--- a/src/plone/z3cform/pagetemplates/wrappedsubform.pt\n+++ b/src/plone/z3cform/pagetemplates/wrappedsubform.pt\n@@ -1,10 +1,13 @@\n <div xmlns="http://www.w3.org/1999/xhtml"\n-     xmlns:tal="http://xml.zope.org/namespaces/tal"\n      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-     tal:attributes="class view/css_class|nothing">\n-  <h3 tal:replace="structure view/heading|nothing" />\n-  <div tal:replace="structure view/contents_top|nothing" />\n+     xmlns:tal="http://xml.zope.org/namespaces/tal"\n+     tal:attributes="\n+       class view/css_class|nothing;\n+     "\n+>\n+  <h3 tal:replace="structure view/heading|nothing"></h3>\n+  <div tal:replace="structure view/contents_top|nothing"></div>\n   <metal:use use-macro="context/@@ploneform-macros/fields" />\n   <metal:use use-macro="context/@@ploneform-macros/actions" />\n-  <div tal:replace="structure view/contents_bottom|nothing" />\n+  <div tal:replace="structure view/contents_bottom|nothing"></div>\n </div>\ndiff --git a/src/plone/z3cform/patch.py b/src/plone/z3cform/patch.py\nindex 300d810..f142fd9 100644\n--- a/src/plone/z3cform/patch.py\n+++ b/src/plone/z3cform/patch.py\n@@ -6,6 +6,7 @@\n from z3c.form.form import BaseForm\n from z3c.form.group import GroupForm\n \n+\n _original_BaseForm_update = BaseForm.update\n _original_GroupForm_update = GroupForm.update\n \ndiff --git a/src/plone/z3cform/subform.py b/src/plone/z3cform/subform.py\nindex 20fc3a1..26fd7b1 100644\n--- a/src/plone/z3cform/subform.py\n+++ b/src/plone/z3cform/subform.py\n@@ -9,7 +9,6 @@\n \n @zope.interface.implementer(interfaces.ISubForm)\n class ObjectSubForm(form.BaseForm):\n-\n     def __init__(self, context, request, parentWidget):\n         self.context = context\n         self.request = request\n@@ -29,18 +28,28 @@ def _validate(self):\n                 value = converter.toFieldValue(widget.value)\n                 # validate field value\n                 zope.component.getMultiAdapter(\n-                    (self.context,\n-                     self.request,\n-                     self.parentForm,\n-                     getattr(widget, \'field\', None),\n-                     widget),\n-                    interfaces.IValidator).validate(value, force=True)\n+                    (\n+                        self.context,\n+                        self.request,\n+                        self.parentForm,\n+                        getattr(widget, "field", None),\n+                        widget,\n+                    ),\n+                    interfaces.IValidator,\n+                ).validate(value, force=True)\n             except (zope.schema.ValidationError, ValueError) as error:\n                 # on exception, setup the widget error message\n                 view = zope.component.getMultiAdapter(\n-                    (error, self.request, widget, widget.field,\n-                     self.parentForm, self.context),\n-                    interfaces.IErrorViewSnippet)\n+                    (\n+                        error,\n+                        self.request,\n+                        widget,\n+                        widget.field,\n+                        self.parentForm,\n+                        self.context,\n+                    ),\n+                    interfaces.IErrorViewSnippet,\n+                )\n                 view.update()\n                 widget.error = view\n \n@@ -49,33 +58,37 @@ def setupFields(self):\n \n     def update(self):\n         if self.__parent__.field is None:\n-            raise ValueError("%r .field is None, that\'s a blocking point" % self.__parent__)\n-        #update stuff from parent to be sure\n+            raise ValueError(\n+                "%r .field is None, that\'s a blocking point" % self.__parent__\n+            )\n+        # update stuff from parent to be sure\n         self.mode = self.__parent__.mode\n \n         self.setupFields()\n \n-        super(ObjectSubForm, self).update()\n+        super().update()\n \n     def getContent(self):\n         return self.__parent__._value\n \n \n @zope.interface.implementer(ISubformFactory)\n-class SubformAdapter(object):\n+class SubformAdapter:\n     """Most basic-default subform factory adapter"""\n-    zope.component.adapts(zope.interface.Interface, #widget value\n-                          interfaces.IFormLayer,    #request\n-                          zope.interface.Interface, #widget context\n-                          zope.interface.Interface, #form\n-                          interfaces.IObjectWidget, #widget\n-                          zope.interface.Interface, #field\n-                          zope.interface.Interface) #field.schema\n+\n+    zope.component.adapts(\n+        zope.interface.Interface,  # widget value\n+        interfaces.IFormLayer,  # request\n+        zope.interface.Interface,  # widget context\n+        zope.interface.Interface,  # form\n+        interfaces.IObjectWidget,  # widget\n+        zope.interface.Interface,  # field\n+        zope.interface.Interface,\n+    )  # field.schema\n \n     factory = ObjectSubForm\n \n-    def __init__(self, context, request, widgetContext, form,\n-                 widget, field, schema):\n+    def __init__(self, context, request, widgetContext, form, widget, field, schema):\n         self.context = context\n         self.request = request\n         self.widgetContext = widgetContext\ndiff --git a/src/plone/z3cform/templates.py b/src/plone/z3cform/templates.py\nindex b72a9c3..1d9f169 100644\n--- a/src/plone/z3cform/templates.py\n+++ b/src/plone/z3cform/templates.py\n@@ -7,7 +7,7 @@\n from Acquisition import IAcquirer\n from Acquisition import ImplicitAcquisitionWrapper\n from Products.Five.browser.pagetemplatefile import (\n-    ViewPageTemplateFile as ZopeTwoPageTemplateFile\n+    ViewPageTemplateFile as ZopeTwoPageTemplateFile,\n )\n from z3c.form import util\n from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile\n@@ -24,7 +24,7 @@\n \n def path(filename):\n     return os.path.join(\n-        os.path.dirname(plone.z3cform.__file__), \'pagetemplates\', filename\n+        os.path.dirname(plone.z3cform.__file__), "pagetemplates", filename\n     )\n \n \n@@ -40,12 +40,8 @@ class FormTemplateFactory(z3c.form.form.FormTemplateFactory):\n     that instead.\n     """\n \n-    def __init__(\n-        self, filename, contentType=\'text/html\', form=None, request=None\n-    ):\n-        self.template = ViewPageTemplateFile(\n-            filename, content_type=contentType\n-        )\n+    def __init__(self, filename, contentType="text/html", form=None, request=None):\n+        self.template = ViewPageTemplateFile(filename, content_type=contentType)\n         zope.component.adapter(\n             util.getSpecification(form), util.getSpecification(request)\n         )(self)\n@@ -59,12 +55,8 @@ class ZopeTwoFormTemplateFactory(z3c.form.form.FormTemplateFactory):\n     form wrapper view.\n     """\n \n-    def __init__(\n-        self, filename, contentType=\'text/html\', form=None, request=None\n-    ):\n-        self.template = ZopeTwoPageTemplateFile(\n-            filename, content_type=contentType\n-        )\n+    def __init__(self, filename, contentType="text/html", form=None, request=None):\n+        self.template = ZopeTwoPageTemplateFile(filename, content_type=contentType)\n         zope.component.adapter(\n             util.getSpecification(form), util.getSpecification(request)\n         )(self)\n@@ -86,16 +78,14 @@ class ZopeTwoWidgetTemplateFactory(z3c.form.widget.WidgetTemplateFactory):\n     def __init__(\n         self,\n         filename,\n-        contentType=\'text/html\',\n+        contentType="text/html",\n         context=None,\n         request=None,\n         view=None,\n         field=None,\n         widget=None,\n     ):\n-        self.template = ViewPageTemplateFile(\n-            filename, content_type=contentType\n-        )\n+        self.template = ViewPageTemplateFile(filename, content_type=contentType)\n         zope.component.adapter(\n             util.getSpecification(context),\n             util.getSpecification(request),\n@@ -117,21 +107,21 @@ def __getitem__(self, key):\n # Default templates for the wrapped layout view use case\n \n layout_factory = ZopeTwoFormTemplateFactory(\n-    path(\'layout.pt\'), form=plone.z3cform.interfaces.IFormWrapper\n+    path("layout.pt"), form=plone.z3cform.interfaces.IFormWrapper\n )\n \n wrapped_form_factory = FormTemplateFactory(\n-    path(\'wrappedform.pt\'), form=plone.z3cform.interfaces.IWrappedForm\n+    path("wrappedform.pt"), form=plone.z3cform.interfaces.IWrappedForm\n )\n \n # Default templates for the standalone form use case\n \n standalone_form_factory = ZopeTwoFormTemplateFactory(\n-    path(\'form.pt\'), form=z3c.form.interfaces.IForm\n+    path("form.pt"), form=z3c.form.interfaces.IForm\n )\n \n # Default templates for subforms\n \n subform_factory = FormTemplateFactory(\n-    path(\'subform.pt\'), form=z3c.form.interfaces.ISubForm\n+    path("subform.pt"), form=z3c.form.interfaces.ISubForm\n )\ndiff --git a/src/plone/z3cform/templates.zcml b/src/plone/z3cform/templates.zcml\nindex cd4aba4..af9af38 100644\n--- a/src/plone/z3cform/templates.zcml\n+++ b/src/plone/z3cform/templates.zcml\n@@ -1,24 +1,25 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone.z3cform">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.z3cform"\n+    >\n \n   <!-- configure chameleon templates if available -->\n   <configure zcml:condition="installed five.pt">\n-      <include package="five.pt"/>\n+    <include package="five.pt" />\n   </configure>\n \n   <configure zcml:condition="installed Products.PageTemplates">\n-      <include package="Products.PageTemplates" />\n+    <include package="Products.PageTemplates" />\n   </configure>\n \n   <browser:page\n       name="ploneform-macros"\n       for="*"\n       class=".templates.Macros"\n-      template="pagetemplates/macros.pt"\n       allowed_interface="zope.interface.common.mapping.IItemMapping"\n+      template="pagetemplates/macros.pt"\n       permission="zope.Public"\n       />\n \ndiff --git a/src/plone/z3cform/testing.zcml b/src/plone/z3cform/testing.zcml\nindex e85099c..1a6cd75 100644\n--- a/src/plone/z3cform/testing.zcml\n+++ b/src/plone/z3cform/testing.zcml\n@@ -1,13 +1,27 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:browser="http://namespaces.zope.org/browser"\n-           xmlns:five="http://namespaces.zope.org/five"\n-           xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-           xmlns:plone="http://namespaces.plone.org/plone"\n-           i18n_domain="plone.z3cform">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    i18n_domain="plone.z3cform"\n+    >\n \n-  <include file="configure.zcml" package="Products.Five"/>\n-  <include file="meta.zcml" package="z3c.form"/>\n-  <include file="configure.zcml" package="z3c.form"/>\n-  <include file="configure.zcml" package="plone.z3cform"/>\n+  <include\n+      package="Products.Five"\n+      file="configure.zcml"\n+      />\n+  <include\n+      package="z3c.form"\n+      file="meta.zcml"\n+      />\n+  <include\n+      package="z3c.form"\n+      file="configure.zcml"\n+      />\n+  <include\n+      package="plone.z3cform"\n+      file="configure.zcml"\n+      />\n \n </configure>\ndiff --git a/src/plone/z3cform/tests.py b/src/plone/z3cform/tests.py\nindex 69e60d2..23d1815 100644\n--- a/src/plone/z3cform/tests.py\n+++ b/src/plone/z3cform/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import layered\n from plone.testing import z2\n@@ -13,8 +12,6 @@\n \n import doctest\n import plone.z3cform.templates\n-import re\n-import six\n import unittest\n \n \n@@ -36,10 +33,18 @@ def log(event):\n \n def setup_defaults():\n     # Set up z3c.form defaults\n-    from z3c.form import browser, button, converter, datamanager, error, field\n-    from z3c.form import interfaces, validator, widget\n+    from z3c.form import browser\n+    from z3c.form import button\n+    from z3c.form import converter\n+    from z3c.form import datamanager\n+    from z3c.form import error\n+    from z3c.form import field\n+    from z3c.form import interfaces\n+    from z3c.form import validator\n+    from z3c.form import widget\n     from z3c.form.browser import text\n     from zope.pagetemplate.interfaces import IPageTemplate\n+\n     import os.path\n     import zope.schema\n \n@@ -61,37 +66,33 @@ def getPath(filename):\n     )\n \n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(getPath(\'text_input.pt\'), \'text/html\'),\n+        widget.WidgetTemplateFactory(getPath("text_input.pt"), "text/html"),\n         (None, None, None, None, interfaces.ITextWidget),\n         IPageTemplate,\n         name=interfaces.INPUT_MODE,\n     )\n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(getPath(\'text_display.pt\'), \'text/html\'),\n+        widget.WidgetTemplateFactory(getPath("text_display.pt"), "text/html"),\n         (None, None, None, None, interfaces.ITextWidget),\n         IPageTemplate,\n         name=interfaces.DISPLAY_MODE,\n     )\n \n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(\n-            getPath(\'checkbox_input.pt\'), \'text/html\'\n-        ),\n+        widget.WidgetTemplateFactory(getPath("checkbox_input.pt"), "text/html"),\n         (None, None, None, None, interfaces.ICheckBoxWidget),\n         IPageTemplate,\n         name=interfaces.INPUT_MODE,\n     )\n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(\n-            getPath(\'checkbox_display.pt\'), \'text/html\'\n-        ),\n+        widget.WidgetTemplateFactory(getPath("checkbox_display.pt"), "text/html"),\n         (None, None, None, None, interfaces.ICheckBoxWidget),\n         IPageTemplate,\n         name=interfaces.DISPLAY_MODE,\n     )\n     # Submit Field Widget\n     component.provideAdapter(\n-        widget.WidgetTemplateFactory(getPath(\'submit_input.pt\'), \'text/html\'),\n+        widget.WidgetTemplateFactory(getPath("submit_input.pt"), "text/html"),\n         (None, None, None, None, interfaces.ISubmitWidget),\n         IPageTemplate,\n         name=interfaces.INPUT_MODE,\n@@ -99,32 +100,26 @@ def getPath(filename):\n \n     component.provideAdapter(converter.FieldDataConverter)\n     component.provideAdapter(converter.FieldWidgetDataConverter)\n-    component.provideAdapter(\n-        button.ButtonAction, provides=interfaces.IButtonAction\n-    )\n+    component.provideAdapter(button.ButtonAction, provides=interfaces.IButtonAction)\n     component.provideAdapter(button.ButtonActions)\n     component.provideAdapter(button.ButtonActionHandler)\n     component.provideAdapter(error.StandardErrorViewTemplate)\n \n     # Make traversal work; register both the default traversable\n     # adapter and the ++view++ namespace adapter\n-    component.provideAdapter(\n-        zope.traversing.adapters.DefaultTraversable, [None]\n-    )\n-    component.provideAdapter(\n-        zope.traversing.namespace.view, (None, None), name=\'view\'\n-    )\n+    component.provideAdapter(zope.traversing.adapters.DefaultTraversable, [None])\n+    component.provideAdapter(zope.traversing.namespace.view, (None, None), name="view")\n \n     # Setup ploneform macros, simlulating the ZCML directive\n     plone.z3cform.templates.Macros.index = ViewPageTemplateFile(\n-        plone.z3cform.templates.path(\'macros.pt\')\n+        plone.z3cform.templates.path("macros.pt")\n     )\n \n     component.provideAdapter(\n         plone.z3cform.templates.Macros,\n         (None, None),\n         zope.publisher.interfaces.browser.IBrowserView,\n-        name=\'ploneform-macros\',\n+        name="ploneform-macros",\n     )\n \n     # setup plone.z3cform templates\n@@ -149,18 +144,18 @@ class P3FLayer(Layer):\n     defaultBases = (z2.STARTUP,)\n \n     def setUp(self):\n-        self[\'configurationContext\'] = context = zca.stackConfigurationContext(\n-            self.get(\'configurationContext\')\n+        self["configurationContext"] = context = zca.stackConfigurationContext(\n+            self.get("configurationContext")\n         )\n         import plone.z3cform\n \n-        xmlconfig.file(\'testing.zcml\', plone.z3cform, context=context)\n+        xmlconfig.file("testing.zcml", plone.z3cform, context=context)\n         import z3c.form\n \n-        xmlconfig.file(\'configure.zcml\', z3c.form, context=context)\n+        xmlconfig.file("configure.zcml", z3c.form, context=context)\n \n     def tearDown(self):\n-        del self[\'configurationContext\']\n+        del self["configurationContext"]\n \n \n P3F_FIXTURE = P3FLayer()\n@@ -169,16 +164,6 @@ def tearDown(self):\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub(\n-                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n-            )\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n class Z2TestCase(unittest.TestCase):\n     def test_recursive_decode(self):\n         from plone.z3cform.z2 import _recursive_decode\n@@ -192,53 +177,51 @@ def test_recursive_decode(self):\n             },\n             "utf-8",\n         )\n-        self.assertIsInstance(form["foo"], six.text_type)\n-        self.assertEqual(form["foo"], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo"], str)\n+        self.assertEqual(form["foo"], "fo\xc3\xb8")\n         self.assertIsInstance(form["foo_list"], list)\n-        self.assertIsInstance(form["foo_list"][0], six.text_type)\n-        self.assertIsInstance(form["foo_list"][1], six.text_type)\n-        self.assertEqual(form["foo_list"][0], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo_list"][0], str)\n+        self.assertIsInstance(form["foo_list"][1], str)\n+        self.assertEqual(form["foo_list"][0], "fo\xc3\xb8")\n         self.assertEqual(form["foo_list"][1], "SPAM")\n         self.assertIsInstance(form["foo_tuple"], tuple)\n-        self.assertIsInstance(form["foo_tuple"][0], six.text_type)\n-        self.assertIsInstance(form["foo_tuple"][1], six.text_type)\n-        self.assertEqual(form["foo_tuple"][0], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo_tuple"][0], str)\n+        self.assertIsInstance(form["foo_tuple"][1], str)\n+        self.assertEqual(form["foo_tuple"][0], "fo\xc3\xb8")\n         self.assertEqual(form["foo_tuple"][1], "HAM")\n         self.assertIsInstance(form["foo_dict"], dict)\n-        self.assertIsInstance(form["foo_dict"]["foo"], six.text_type)\n-        self.assertIsInstance(form["foo_dict"]["bar"], six.text_type)\n-        self.assertEqual(form["foo_dict"]["foo"], u"fo\xc3\xb8")\n+        self.assertIsInstance(form["foo_dict"]["foo"], str)\n+        self.assertIsInstance(form["foo_dict"]["bar"], str)\n+        self.assertEqual(form["foo_dict"]["foo"], "fo\xc3\xb8")\n         self.assertEqual(form["foo_dict"]["bar"], "EGGS")\n \n \n-\n def test_suite():\n     layout_txt = layered(\n-        doctest.DocFileSuite(\'layout.rst\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("layout.rst"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     inputs_txt = layered(\n-        doctest.DocFileSuite(\'inputs.txt\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("inputs.txt"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     fieldsets_txt = layered(\n-        doctest.DocFileSuite(\'fieldsets/README.rst\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("fieldsets/README.rst"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     traversal_txt = layered(\n-        doctest.DocFileSuite(\'traversal.txt\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("traversal.txt"),\n         layer=FUNCTIONAL_TESTING,\n     )\n     crud_readme_txt = layered(\n-        doctest.DocFileSuite(\'crud/README.txt\', checker=Py23DocChecker()),\n+        doctest.DocFileSuite("crud/README.txt"),\n         layer=zca.UNIT_TESTING,\n     )\n     crud_py = layered(\n         doctest.DocTestSuite(\n-            \'plone.z3cform.crud.crud\',\n+            "plone.z3cform.crud.crud",\n             setUp=testing.setUp,\n             tearDown=testing.tearDown,\n-            checker=Py23DocChecker(),\n         ),\n         layer=zca.UNIT_TESTING,\n     )\ndiff --git a/src/plone/z3cform/textlines/textlines.py b/src/plone/z3cform/textlines/textlines.py\nindex 2075146..2e1e30b 100644\n--- a/src/plone/z3cform/textlines/textlines.py\n+++ b/src/plone/z3cform/textlines/textlines.py\n@@ -16,7 +16,6 @@\n """\n __docformat__ = "reStructuredText"\n \n-import six\n import zope.component\n import zope.interface\n import zope.schema.interfaces\n@@ -31,12 +30,11 @@\n     from z3c.form.interfaces import ITextLinesWidget\n \n except ImportError:\n-\n     # backport for z3c.form 1.9\n \n+    from z3c.form import converter\n     from z3c.form import interfaces\n     from z3c.form import widget\n-    from z3c.form import converter\n     from z3c.form.browser import textarea\n \n     class ITextLinesWidget(interfaces.IWidget):\n@@ -44,6 +42,7 @@ class ITextLinesWidget(interfaces.IWidget):\n \n     class TextLinesWidget(textarea.TextAreaWidget):\n         """Input type sequence widget implementation."""\n+\n         zope.interface.implementsOnly(ITextLinesWidget)\n \n     def TextLinesFieldWidget(field, request):\n@@ -67,8 +66,8 @@ def toWidgetValue(self, value):\n             # if the value is the missing value, then an empty list is\n             # produced.\n             if value is self.field.missing_value:\n-                return u\'\'\n-            return u\'\\n\'.join(six.text_type(v) for v in value)\n+                return ""\n+            return "\\n".join(str(v) for v in value)\n \n         def toFieldValue(self, value):\n             """See interfaces.IDataConverter"""\n@@ -82,6 +81,7 @@ def toFieldValue(self, value):\n                 valueType = valueType[0]\n             return collectionType(valueType(v) for v in value.split())\n \n+\n # additional\n \n \n@@ -96,8 +96,8 @@ def toWidgetValue(self, value):\n         """Convert from text lines to HTML representation."""\n         # if the value is the missing value, then an empty list is produced.\n         if value is self.field.missing_value:\n-            return u\'\'\n-        return u\'\\n\'.join(six.text_type(v) for v in sorted(value))\n+            return ""\n+        return "\\n".join(str(v) for v in sorted(value))\n \n \n @zope.component.adapter(\n@@ -111,5 +111,5 @@ def toWidgetValue(self, value):\n         """Convert from text lines to HTML representation."""\n         # if the value is the missing value, then an empty list is produced.\n         if value is self.field.missing_value:\n-            return u\'\'\n-        return u\'\\n\'.join(six.text_type(v) for v in sorted(value))\n+            return ""\n+        return "\\n".join(str(v) for v in sorted(value))\ndiff --git a/src/plone/z3cform/textlines/textlines.zcml b/src/plone/z3cform/textlines/textlines.zcml\nindex 387b441..b1f9ff3 100644\n--- a/src/plone/z3cform/textlines/textlines.zcml\n+++ b/src/plone/z3cform/textlines/textlines.zcml\n@@ -1,7 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:z3c="http://namespaces.zope.org/z3c"\n-    i18n_domain="z3c.form">\n+    i18n_domain="z3c.form"\n+    >\n \n   <class class=".textlines.TextLinesWidget">\n     <require\n@@ -13,21 +14,19 @@\n   <!-- this widget is not configured for any field by default -->\n \n   <z3c:widgetTemplate\n-      mode="display"\n       widget="plone.z3cform.textlines.textlines.ITextLinesWidget"\n-      layer="z3c.form.interfaces.IFormLayer"\n       template="textlines_display.pt"\n+      layer="z3c.form.interfaces.IFormLayer"\n+      mode="display"\n       />\n \n   <z3c:widgetTemplate\n-      mode="input"\n       widget="plone.z3cform.textlines.textlines.ITextLinesWidget"\n-      layer="z3c.form.interfaces.IFormLayer"\n       template="textlines_input.pt"\n+      layer="z3c.form.interfaces.IFormLayer"\n+      mode="input"\n       />\n \n-  <adapter\n-      factory=".textlines.TextLinesConverter"\n-      />\n+  <adapter factory=".textlines.TextLinesConverter" />\n \n </configure>\ndiff --git a/src/plone/z3cform/textlines/textlines_display.pt b/src/plone/z3cform/textlines/textlines_display.pt\nindex 657acbf..0d53b88 100644\n--- a/src/plone/z3cform/textlines/textlines_display.pt\n+++ b/src/plone/z3cform/textlines/textlines_display.pt\n@@ -1,22 +1,27 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      tal:omit-tag="">\n-<span id="" class=""\n-      tal:attributes="id view/id;\n-                      class view/klass;\n-                      style view/style;\n-                      title view/title;\n-                      lang view/lang;\n-                      onclick view/onclick;\n-                      ondblclick view/ondblclick;\n-                      onmousedown view/onmousedown;\n-                      onmouseup view/onmouseup;\n-                      onmouseover view/onmouseover;\n-                      onmousemove view/onmousemove;\n-                      onmouseout view/onmouseout;\n-                      onkeypress view/onkeypress;\n-                      onkeydown view/onkeydown;\n-                      onkeyup view/onkeyup"><tal:block\n-      condition="view/value" content="view/value"\n-/></span>\n+      tal:omit-tag=""\n+>\n+  <span class=""\n+        id=""\n+        tal:attributes="\n+          id view/id;\n+          class view/klass;\n+          style view/style;\n+          title view/title;\n+          lang view/lang;\n+          onclick view/onclick;\n+          ondblclick view/ondblclick;\n+          onmousedown view/onmousedown;\n+          onmouseup view/onmouseup;\n+          onmouseover view/onmouseover;\n+          onmousemove view/onmousemove;\n+          onmouseout view/onmouseout;\n+          onkeypress view/onkeypress;\n+          onkeydown view/onkeydown;\n+          onkeyup view/onkeyup;\n+        "\n+  ><tal:block condition="view/value"\n+               content="view/value"\n+    /></span>\n </html>\ndiff --git a/src/plone/z3cform/textlines/textlines_input.pt b/src/plone/z3cform/textlines/textlines_input.pt\nindex ac1a3c3..73219d5 100644\n--- a/src/plone/z3cform/textlines/textlines_input.pt\n+++ b/src/plone/z3cform/textlines/textlines_input.pt\n@@ -1,34 +1,44 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      tal:omit-tag="">\n-<textarea\n-    id="" name="" class="" cols="" rows=""\n-    tabindex="" disabled="" readonly="" accesskey=""\n-    tal:attributes="id view/id;\n-                    name view/name;\n-                    class view/klass;\n-                    style view/style;\n-                    title view/title;\n-                    lang view/lang;\n-                    onclick view/onclick;\n-                    ondblclick view/ondblclick;\n-                    onmousedown view/onmousedown;\n-                    onmouseup view/onmouseup;\n-                    onmouseover view/onmouseover;\n-                    onmousemove view/onmousemove;\n-                    onmouseout view/onmouseout;\n-                    onkeypress view/onkeypress;\n-                    onkeydown view/onkeydown;\n-                    onkeyup view/onkeyup;\n-                    disabled view/disabled;\n-                    tabindex view/tabindex;\n-                    onfocus view/onfocus;\n-                    onblur view/onblur;\n-                    onchange view/onchange;\n-                    cols view/cols;\n-                    rows view/rows;\n-                    readonly view/readonly;\n-                    accesskey view/accesskey;\n-                    onselect view/onselect"\n-    tal:content="structure view/value" />\n+      tal:omit-tag=""\n+>\n+  <textarea class=""\n+            id=""\n+            accesskey=""\n+            cols=""\n+            disabled\n+            name=""\n+            readonly\n+            rows=""\n+            tabindex=""\n+            tal:content="structure view/value"\n+            tal:attributes="\n+              id view/id;\n+              name view/name;\n+              class view/klass;\n+              style view/style;\n+              title view/title;\n+              lang view/lang;\n+              onclick view/onclick;\n+              ondblclick view/ondblclick;\n+              onmousedown view/onmousedown;\n+              onmouseup view/onmouseup;\n+              onmouseover view/onmouseover;\n+              onmousemove view/onmousemove;\n+              onmouseout view/onmouseout;\n+              onkeypress view/onkeypress;\n+              onkeydown view/onkeydown;\n+              onkeyup view/onkeyup;\n+              disabled view/disabled;\n+              tabindex view/tabindex;\n+              onfocus view/onfocus;\n+              onblur view/onblur;\n+              onchange view/onchange;\n+              cols view/cols;\n+              rows view/rows;\n+              readonly view/readonly;\n+              accesskey view/accesskey;\n+              onselect view/onselect;\n+            "\n+  ></textarea>\n </html>\ndiff --git a/src/plone/z3cform/traversal.py b/src/plone/z3cform/traversal.py\nindex e9b2adb..93e72ea 100644\n--- a/src/plone/z3cform/traversal.py\n+++ b/src/plone/z3cform/traversal.py\n@@ -16,7 +16,7 @@\n \n @adapter(IForm, IBrowserRequest)\n @implementer(ITraversable)\n-class FormWidgetTraversal(object):\n+class FormWidgetTraversal:\n     """Allow traversal to widgets via the ++widget++ namespace. The context\n     is the from itself (used when the layout wrapper view is not used).\n \n@@ -31,7 +31,7 @@ class FormWidgetTraversal(object):\n     Unfortunately, if you mix in Acquisition.Explicit in Zope 2.12 *and* the\n     class implements IAcquirer, Zope may complain because the view probably\n     does *not* implement acquisition (in Zope 2.12, views no longer mix in\n-    Acquisiton.Explicit). To support both Zope 2.10 and Zope 2.12, you will\n+    Acquisition.Explicit). To support both Zope 2.10 and Zope 2.12, you will\n     need to cheat and mix in Acquisition.Explicit, but use implementsOnly()\n     or some other mechanism to make sure the instance does not provide\n     IAcquirer.\n@@ -45,7 +45,6 @@ def _prepareForm(self):\n         return self.context\n \n     def traverse(self, name, ignored):\n-\n         form = self._prepareForm()\n \n         # Since we cannot check security during traversal,\n@@ -55,18 +54,19 @@ def traverse(self, name, ignored):\n         noLongerProvides(self.request, IDeferSecurityCheck)\n \n         # If name begins with form.widgets., remove it\n-        form_widgets_prefix = util.expandPrefix(\n-            form.prefix) + util.expandPrefix(form.widgets.prefix)\n+        form_widgets_prefix = util.expandPrefix(form.prefix) + util.expandPrefix(\n+            form.widgets.prefix\n+        )\n         if name.startswith(form_widgets_prefix):\n-            name = name[len(form_widgets_prefix):]\n+            name = name[len(form_widgets_prefix) :]\n \n         # Split string up into dotted segments and work through\n         target = aq_base(form)\n-        parts = name.split(\'.\')\n+        parts = name.split(".")\n         while len(parts) > 0:\n             part = parts.pop(0)\n             # i.e. a z3c.form.widget.MultiWidget\n-            if isinstance(getattr(target, \'widgets\', None), list):\n+            if isinstance(getattr(target, "widgets", None), list):\n                 try:\n                     # part should be integer index in list, look it up\n                     target = target.widgets[int(part)]\n@@ -78,8 +78,7 @@ def traverse(self, name, ignored):\n                     # DataGridField, which appends \'AA\' and \'TT\' rows to\n                     # it\'s widget list.\n                     full_name = util.expandPrefix(target.prefix) + part\n-                    filtered = [w for w in target.widgets\n-                                if w.name == full_name]\n+                    filtered = [w for w in target.widgets if w.name == full_name]\n                     if len(filtered) == 1:\n                         target = filtered[0]\n                         # we have to pop "widgets" from parts here\n@@ -87,15 +86,11 @@ def traverse(self, name, ignored):\n                         parts.remove("widgets")\n                     else:\n                         raise TraversalError("\'" + part + "\' not valid index")\n-            elif hasattr(target, \'widgets\'):  # Either base form, or subform\n+            elif hasattr(target, "widgets"):  # Either base form, or subform\n                 # Check to see if we can find a "Behaviour.widget"\n                 new_target = None\n                 if len(parts) > 0:\n-                    new_target = self._form_traverse(\n-                        target,\n-                        part +\n-                        \'.\' +\n-                        parts[0])\n+                    new_target = self._form_traverse(target, part + "." + parts[0])\n \n                 if new_target is not None:\n                     # Remove widget name from stack too\n@@ -106,15 +101,13 @@ def traverse(self, name, ignored):\n \n                 target = new_target\n             # subform-containing widget, only option is to go into subform\n-            elif hasattr(target, \'subform\'):\n-                if part == \'widgets\':\n+            elif hasattr(target, "subform"):\n+                if part == "widgets":\n                     target = target.subform\n                 else:\n                     target = None\n             else:\n-                raise TraversalError(\n-                    \'Cannot traverse through \' +\n-                    target.__repr__())\n+                raise TraversalError("Cannot traverse through " + target.__repr__())\n \n             # Could not traverse from target to part\n             if target is None:\n@@ -132,7 +125,7 @@ def _form_traverse(self, form, name):\n         if name in form.widgets:\n             return form.widgets.get(name)\n         # If there are no groups, give up now\n-        if getattr(aq_base(form), \'groups\', None) is None:\n+        if getattr(aq_base(form), "groups", None) is None:\n             return None\n         for group in form.groups:\n             if group.widgets and name in group.widgets:\ndiff --git a/src/plone/z3cform/traversal.txt b/src/plone/z3cform/traversal.txt\nindex e9c412a..20689d5 100644\n--- a/src/plone/z3cform/traversal.txt\n+++ b/src/plone/z3cform/traversal.txt\n@@ -12,7 +12,7 @@ the case. To be compatible with both Zope 2.10 and 2.12, you\'ll need to\n mix in Acquisition.Explicit, but make sure the widget does *not* provide the\n IAcquirer interface. One way to do that is by using implementsOnly(), e.g.::\n \n-    class MyWidget(Aquisition.Explicit):\n+    class MyWidget(Acquisition.Explicit):\n         implementsOnly(IMyWidget)\n \n         ...\ndiff --git a/src/plone/z3cform/widget.py b/src/plone/z3cform/widget.py\nindex d34ce60..4894366 100644\n--- a/src/plone/z3cform/widget.py\n+++ b/src/plone/z3cform/widget.py\n@@ -1,4 +1,5 @@\n from zope.schema import vocabulary\n+\n import z3c.form.browser.checkbox\n import z3c.form.interfaces\n import z3c.form.term\n@@ -8,44 +9,40 @@\n \n \n class SingleCheckBoxWidget(z3c.form.browser.checkbox.SingleCheckBoxWidget):\n-\n     def update(self):\n         self.ignoreContext = True\n-        super(SingleCheckBoxWidget, self).update()\n+        super().update()\n \n     def updateTerms(self):\n         # The default implementation would render "selected" as a\n         # lebel for the single checkbox.  We use no label instead.\n         if self.terms is None:\n             self.terms = z3c.form.term.Terms()\n-            self.terms.terms = vocabulary.SimpleVocabulary((\n-                vocabulary.SimpleTerm(True, \'selected\', u\'\'),\n-            ))\n+            self.terms.terms = vocabulary.SimpleVocabulary(\n+                (vocabulary.SimpleTerm(True, "selected", ""),)\n+            )\n         return self.terms\n \n     def extract(self, default=z3c.form.interfaces.NOVALUE, setErrors=True):\n         # The default implementation returns [] here.\n-        if (self.name not in self.request and\n-                self.name + \'-empty-marker\' in self.request):\n+        if (\n+            self.name not in self.request\n+            and self.name + "-empty-marker" in self.request\n+        ):\n             return default\n         else:\n             try:\n-                return super(\n-                    SingleCheckBoxWidget,\n-                    self).extract(\n-                    default,\n-                    setErrors=setErrors)\n+                return super().extract(default, setErrors=setErrors)\n             except TypeError:\n                 # for z3c.form <= 1.9.0\n-                return super(SingleCheckBoxWidget, self).extract(default)\n+                return super().extract(default)\n \n \n-@zope.component.adapter(\n-    zope.schema.interfaces.IBool,\n-    z3c.form.interfaces.IFormLayer)\n+@zope.component.adapter(zope.schema.interfaces.IBool, z3c.form.interfaces.IFormLayer)\n @zope.interface.implementer(z3c.form.interfaces.IFieldWidget)\n def SingleCheckBoxFieldWidget(field, request):\n     return z3c.form.widget.FieldWidget(field, SingleCheckBoxWidget(request))\n \n+\n # BBB:\n singlecheckboxwidget_factory = SingleCheckBoxFieldWidget\ndiff --git a/src/plone/z3cform/z2.py b/src/plone/z3cform/z2.py\nindex abe9db8..893501e 100644\n--- a/src/plone/z3cform/z2.py\n+++ b/src/plone/z3cform/z2.py\n@@ -1,17 +1,14 @@\n-# -*- coding: utf-8 -*-\n-from ZPublisher import HTTPRequest\n from zope import interface\n from zope.i18n.interfaces import IUserPreferredCharsets\n from zope.publisher.browser import isCGI_NAME\n from zope.publisher.interfaces.browser import IBrowserApplicationRequest\n+from ZPublisher import HTTPRequest\n \n-import six\n import z3c.form.interfaces\n \n \n class IFixedUpRequest(interface.Interface):\n-    """Marker interface used to ensure we don\'t fix up the request twice\n-    """\n+    """Marker interface used to ensure we don\'t fix up the request twice"""\n \n \n class IProcessedRequest(interface.Interface):\n@@ -19,6 +16,7 @@ class IProcessedRequest(interface.Interface):\n     twice.\n     """\n \n+\n # Safer versions of the functions in Products.Five.browser.decode\n \n \n@@ -34,18 +32,24 @@ def processInputs(request, charsets=None):\n     if charsets is None:\n         envadapter = IUserPreferredCharsets(request, None)\n         if envadapter is None:\n-            charsets = [\'utf-8\']\n+            charsets = ["utf-8"]\n         else:\n-            charsets = envadapter.getPreferredCharsets() or [\'utf-8\']\n+            charsets = envadapter.getPreferredCharsets() or ["utf-8"]\n \n     for name, value in request.form.items():\n-        if not (isCGI_NAME(name) or name.startswith(\'HTTP_\')):\n-            if isinstance(value, six.binary_type):\n+        if not (isCGI_NAME(name) or name.startswith("HTTP_")):\n+            if isinstance(value, bytes):\n                 request.form[name] = _decode(value, charsets)\n-            elif isinstance(value, (list, tuple,)):\n+            elif isinstance(\n+                value,\n+                (\n+                    list,\n+                    tuple,\n+                ),\n+            ):\n                 newValue = []\n                 for val in value:\n-                    if isinstance(val, six.binary_type):\n+                    if isinstance(val, bytes):\n                         val = _decode(val, charsets)\n                     newValue.append(val)\n \n@@ -63,16 +67,15 @@ def processInputs(request, charsets=None):\n \n \n def _recursive_decode(value, charset):\n-    """Recursively look for string values and decode.\n-    """\n+    """Recursively look for string values and decode."""\n     if isinstance(value, list):\n         return [_recursive_decode(v, charset) for v in value]\n     elif isinstance(value, tuple):\n         return tuple(_recursive_decode(v, charset) for v in value)\n     elif isinstance(value, dict):\n         return {k: _recursive_decode(v, charset) for k, v in value.items()}\n-    elif isinstance(value, six.binary_type):\n-        return six.text_type(value, charset, \'replace\')\n+    elif isinstance(value, bytes):\n+        return str(value, charset, "replace")\n     return value\n \n \n@@ -93,9 +96,8 @@ def switch_on(view, request_layer=z3c.form.interfaces.IFormLayer):\n \n     request = view.request\n \n-    if (\n-        not IFixedUpRequest.providedBy(request) and\n-        not IBrowserApplicationRequest.providedBy(request)\n-    ):\n+    if not IFixedUpRequest.providedBy(\n+        request\n+    ) and not IBrowserApplicationRequest.providedBy(request):\n         interface.alsoProvides(request, IFixedUpRequest)\n         interface.alsoProvides(request, request_layer)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..2aec6e6\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir}/src -s plone.z3cform\n+extras =\n+    test\n'

