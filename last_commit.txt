Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-14T20:44:13+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/54b2845667edff79c572ff873bade96b73b43174

Move imports at top

Files changed:
M plone/resource/tests/test_directory.py

b"diff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex f727e7d..90bbe62 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -1,12 +1,21 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from OFS.Image import File\n+from plone.resource.directory import FilesystemResourceDirectory\n+from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.events import PloneResourceCreatedEvent\n from plone.resource.events import PloneResourceModifiedEvent\n from plone.resource.interfaces import IPloneResourceCreatedEvent\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n+from StringIO import StringIO\n+from zExceptions import NotFound\n+from zipfile import ZipFile\n from zope.component import adapter\n from zope.component import provideHandler\n+from zope.site.testing import createSiteManager\n+from zope.site.testing import siteSetUp\n+from zope.site.testing import siteTearDown\n \n import os.path\n import unittest\n@@ -18,20 +27,15 @@ def _makeOne(self):\n         root = BTreeFolder2('portal_resources')\n         root._setOb('demo', BTreeFolder2('demo'))\n         root.demo._setOb('foo', BTreeFolder2('foo'))\n-\n-        from StringIO import StringIO\n-        from OFS.Image import File\n         file = File('test.html', 'test.html', StringIO('asdf'))\n         root.demo.foo._setOb('test.html', file)\n \n-        from plone.resource.directory import PersistentResourceDirectory\n         return PersistentResourceDirectory(root)\n \n     def _assertSameUnwrapped(self, a, b):\n         self.assertTrue(aq_base(a) is aq_base(b))\n \n     def test_ctor_implicit_context(self):\n-        from zope.site.testing import siteSetUp, createSiteManager, siteTearDown\n         siteSetUp()\n \n         site = BTreeFolder2('site')\n@@ -39,7 +43,6 @@ def test_ctor_implicit_context(self):\n         root = self._makeOne().context\n         site._setOb('portal_resources', root)\n \n-        from plone.resource.directory import PersistentResourceDirectory\n         try:\n             dir = PersistentResourceDirectory()\n             # context should be stored unwrapped\n@@ -68,7 +71,6 @@ def test_publishTraverse_file(self):\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        from zExceptions import NotFound\n         self.assertRaises(NotFound, dir.publishTraverse, None, 'baz')\n \n     def test_getitem(self):\n@@ -138,7 +140,6 @@ def test_importZip(self):\n \n     def test_importZip_takes_ZipFile(self):\n         dir = self._makeOne()\n-        from zipfile import ZipFile\n         f = ZipFile(os.path.join(os.path.dirname(__file__), 'resources.zip'))\n         dir.importZip(f)\n         self.assertEqual('from zip', dir.readFile('demo/foo/test.html'))\n@@ -227,7 +228,6 @@ def _handleFileModified(event):\n class TestFilesystemResourceDirectory(unittest.TestCase):\n \n     def _makeOne(self, name=None):\n-        from plone.resource.directory import FilesystemResourceDirectory\n         path = os.path.join(os.path.dirname(__file__), 'resources')\n         return FilesystemResourceDirectory(path, name=name)\n \n@@ -255,7 +255,6 @@ def test_publishTraverse_file(self):\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        from zExceptions import NotFound\n         self.assertRaises(NotFound, dir.publishTraverse, None, 'baz')\n \n     def test_getitem(self):\n"

Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-14T20:44:13+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/df1ed48a837900bc7ad497d92295638be7c8db1c

Make tests run on Python3

Files changed:
M plone/resource/directory.py
M plone/resource/download.py
M plone/resource/file.py
M plone/resource/manifest.py
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_file.py
M plone/resource/tests/test_utils.py
M plone/resource/tests/test_zip_download.py

b'diff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex d97b8ec..00b0c48 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from io import BytesIO\n from OFS.Image import File\n from OFS.interfaces import IObjectManager\n from plone.resource.events import PloneResourceCreatedEvent\n@@ -10,7 +11,6 @@\n from plone.resource.interfaces import IWritableResourceDirectory\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from Products.CMFCore.utils import getToolByName\n-from six import StringIO\n from zExceptions import Forbidden\n from zExceptions import NotFound\n from zope.event import notify\n@@ -89,7 +89,7 @@ def __contains__(self, name):\n         return name in self.context\n \n     def openFile(self, path):\n-        return StringIO(self.readFile(path))\n+        return BytesIO(self.readFile(path))\n \n     def readFile(self, path):\n         try:\n@@ -97,7 +97,7 @@ def readFile(self, path):\n         except Exception as e:\n             raise IOError(str(e))\n \n-        return str(f.data)\n+        return six.binary_type(f.data)\n \n     def listDirectory(self):\n         return [n for n in self.context.objectIds()\n@@ -245,13 +245,11 @@ def __getitem__(self, name):\n \n     def openFile(self, path):\n         filepath = self._resolveSubpath(path)\n-        mode = u\'r\'\n-        if six.PY2:\n-            mode += u\'b\'\n-        return open(filepath, mode)\n+        return open(filepath, \'rb\')\n \n     def readFile(self, path):\n-        return self.openFile(path).read()\n+        with self.openFile(path) as f:\n+            return f.read()\n \n     def listDirectory(self):\n         names = os.listdir(self.directory)\n@@ -265,23 +263,21 @@ def isFile(self, path):\n         return os.path.isfile(self._resolveSubpath(path))\n \n     def exportZip(self, out):\n-        zf = zipfile.ZipFile(out, \'w\')\n-\n-        toStrip = len(self.directory.replace(os.path.sep, \'/\')) + 1\n+        with zipfile.ZipFile(out, \'w\') as zf:\n+            toStrip = len(self.directory.replace(os.path.sep, \'/\')) + 1\n \n-        for (dirpath, dirnames, filenames) in os.walk(self.directory):\n-            subpath = dirpath.replace(os.path.sep, \'/\')[toStrip:].strip(\'/\')\n+            for (dirpath, dirnames, filenames) in os.walk(self.directory):\n+                subpath = dirpath.replace(os.path.sep, \'/\')[toStrip:].strip(\'/\')\n \n-            for filename in filenames:\n-                path = \'/\'.join([subpath, filename]).strip(\'/\')\n+                for filename in filenames:\n+                    path = \'/\'.join([subpath, filename]).strip(\'/\')\n \n-                if any(any(filter.match(n) for filter in FILTERS)\n-                       for n in path.split(\'/\')\n-                       ):\n-                    continue\n+                    if any(any(filter.match(n) for filter in FILTERS)\n+                           for n in path.split(\'/\')\n+                           ):\n+                        continue\n \n-                zf.writestr(\n-                    \'/\'.join([self.__name__, path, ]),\n-                    self.readFile(path)\n-                )\n-        zf.close()\n+                    zf.writestr(\n+                        \'/\'.join([self.__name__, path, ]),\n+                        self.readFile(path),\n+                    )\ndiff --git a/plone/resource/download.py b/plone/resource/download.py\nindex f5c255d..917b90b 100644\n--- a/plone/resource/download.py\n+++ b/plone/resource/download.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from six import StringIO\n+from io import BytesIO\n from zope.publisher.browser import BrowserView\n \n \n@@ -14,7 +14,7 @@ def __call__(self):\n         # the output stream, but this is awkward with the ZPublisher response\n         # interface. For now, we write the zipfile to a stream in memory.\n \n-        out = StringIO()\n+        out = BytesIO()\n         self.context.exportZip(out)\n \n         response.setHeader(\'Content-Type\', \'application/zip\')\n@@ -23,5 +23,4 @@ def __call__(self):\n             \'attachment; filename="%s.zip"\' % name\n         )\n         response.setHeader(\'Content-Length\', len(out.getvalue()))\n-\n         response.write(out.getvalue())\ndiff --git a/plone/resource/file.py b/plone/resource/file.py\nindex 09e6704..bdc30be 100644\n--- a/plone/resource/file.py\n+++ b/plone/resource/file.py\n@@ -4,10 +4,10 @@\n from email.utils import formatdate\n from z3c.caching.interfaces import ILastModified\n from zope.component import adapter\n+from zope.component import queryUtility\n from zope.filerepresentation.interfaces import IRawReadFile\n from zope.interface import implementer\n from ZPublisher.Iterators import filestream_iterator\n-from zope.component import queryUtility\n \n import datetime\n import mimetypes\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 9211a5e..f869070 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -28,14 +28,15 @@\n ``bar``. ``title`` and ``description`` will be ``None`` if not found in the\n manifest. ``bar`` will be ``baz`` if not found.\n """\n-import logging\n-\n from plone.resource.directory import FILTERS\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.utils import iterDirectoriesOfType\n from six.moves.configparser import SafeConfigParser\n from zope.component import getUtility\n \n+import logging\n+import six\n+\n \n MANIFEST_FILENAME = \'manifest.cfg\'\n \n@@ -79,7 +80,13 @@ def getManifest(fp, format, defaults=None):\n         defaults = format.defaults\n \n     parser = SafeConfigParser()\n-    parser.readfp(fp)\n+    if six.PY2:\n+        parser.readfp(fp)\n+    else:\n+        data = fp.read()\n+        if isinstance(data, six.binary_type):\n+            data = data.decode()\n+        parser.read_string(data)\n \n     results = {}\n     for key in format.keys:\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex 90bbe62..695ae26 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from io import BytesIO\n from OFS.Image import File\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n@@ -8,7 +9,6 @@\n from plone.resource.interfaces import IPloneResourceCreatedEvent\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n-from StringIO import StringIO\n from zExceptions import NotFound\n from zipfile import ZipFile\n from zope.component import adapter\n@@ -27,7 +27,7 @@ def _makeOne(self):\n         root = BTreeFolder2(\'portal_resources\')\n         root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n         root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        file = File(\'test.html\', \'test.html\', StringIO(\'asdf\'))\n+        file = File(\'test.html\', \'test.html\', BytesIO(b\'asdf\'))\n         root.demo.foo._setOb(\'test.html\', file)\n \n         return PersistentResourceDirectory(root)\n@@ -80,11 +80,11 @@ def test_getitem(self):\n     def test_openFile(self):\n         dir = self._makeOne()\n         file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(\'asdf\', file.read())\n+        self.assertEqual(b\'asdf\', file.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\n@@ -113,48 +113,60 @@ def test_makeDirectory_extra_slashes(self):\n \n     def test_writeFile(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', \'qux\')\n-        self.assertEqual(\'qux\', dir.readFile(\'qux\'))\n+        dir.writeFile(\'qux\', b\'qux\')\n+        self.assertEqual(b\'qux\', dir.readFile(\'qux\'))\n \n     def test_writeFile_does_not_create_empty_directory(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', \'qux\')\n+        dir.writeFile(\'qux\', b\'qux\')\n         self.assertFalse(\'\' in dir)\n         self.assertTrue(\'qux\' in dir)\n \n     def test_writeFile_directory_missing(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'baz/qux\', \'qux\')\n-        self.assertEqual(\'qux\', dir.readFile(\'baz/qux\'))\n+        dir.writeFile(\'baz/qux\', b\'qux\')\n+        self.assertEqual(b\'qux\', dir.readFile(\'baz/qux\'))\n \n     def test_writeFile_file_already_exists(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'demo/foo/test.html\', \'changed\')\n-        self.assertEqual(\'changed\', dir.readFile(\'demo/foo/test.html\'))\n+        dir.writeFile(\'demo/foo/test.html\', b\'changed\')\n+        self.assertEqual(b\'changed\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_importZip(self):\n         dir = self._makeOne()\n-        f = open(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertEqual(\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_importZip_takes_ZipFile(self):\n         dir = self._makeOne()\n-        f = ZipFile(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertEqual(\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_importZip_filters_resource_forks(self):\n         dir = self._makeOne()\n-        f = open(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertFalse(\'__MACOSX\' in dir.context.objectIds())\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertFalse(\'__MACOSX\' in dir.context.objectIds())\n \n     def test_importZip_filters_hidden_directories(self):\n         dir = self._makeOne()\n-        f = open(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertFalse(\'.svn\' in dir)\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertFalse(\'.svn\' in dir)\n \n     def test_delitem(self):\n         dir = self._makeOne()\n@@ -211,18 +223,12 @@ def _handleFileModified(event):\n         provideHandler(_handleFileModified)\n \n         dir = self._makeOne()\n-        dir.writeFile(\'test\', \'my test\')\n-        dir.writeFile(\'test\', \'my test is modified\')\n+        dir.writeFile(\'test\', b\'my test\')\n+        dir.writeFile(\'test\', b\'my test is modified\')\n         self.assertTrue(isinstance(events[0], PloneResourceCreatedEvent))\n-        self.assertEqual(\n-            str(events[0].object),\n-            \'my test\'\n-        )\n+        self.assertEqual(events[0].object.data, b\'my test\')\n         self.assertTrue(isinstance(events[1], PloneResourceModifiedEvent))\n-        self.assertEqual(\n-            str(events[1].object),\n-            \'my test is modified\'\n-        )\n+        self.assertEqual(events[1].object.data, b\'my test is modified\')\n \n \n class TestFilesystemResourceDirectory(unittest.TestCase):\n@@ -269,11 +275,11 @@ def test_contains(self):\n     def test_openFile(self):\n         dir = self._makeOne()\n         file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(\'asdf\', file.read())\n+        self.assertEqual(b\'asdf\', file.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\ndiff --git a/plone/resource/tests/test_file.py b/plone/resource/tests/test_file.py\nindex baee728..c44eed8 100644\n--- a/plone/resource/tests/test_file.py\n+++ b/plone/resource/tests/test_file.py\n@@ -1,6 +1,19 @@\n # -*- coding: utf-8 -*-\n+from dateutil.tz import tzlocal\n+from email.utils import formatdate\n+from plone.resource.file import FileLastModified\n+from plone.resource.file import FilesystemFile\n+from plone.resource.file import rawReadFile\n from plone.testing.zca import UNIT_TESTING\n-\n+from z3c.caching.interfaces import ILastModified\n+from zope.component import provideAdapter\n+from zope.filerepresentation.interfaces import IRawReadFile\n+from zope.publisher.browser import TestRequest\n+\n+import datetime\n+import io\n+import os.path\n+import six\n import unittest\n \n \n@@ -9,11 +22,6 @@ class TestFilesystemResourceDirectory(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def test_render(self):\n-        import os.path\n-        from email.utils import formatdate\n-        from plone.resource.file import FilesystemFile\n-        from zope.publisher.browser import TestRequest\n-\n         name = \'test.html\'\n         path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n         mtime = os.path.getmtime(path)\n@@ -23,26 +31,13 @@ def test_render(self):\n         f = FilesystemFile(None, request, path, name)\n         iterator = f()\n \n-        data = \'\'.join(iterator)\n-        self.assertEqual(data, \'asdf\')\n+        data = b\'\'.join(iterator)\n+        self.assertEqual(data, b\'asdf\')\n         self.assertEqual(request.response.getHeader(\'Content-Type\'), \'text/html\')\n         self.assertEqual(request.response.getHeader(\'Content-Length\'), \'4\')\n         self.assertEqual(request.response.getHeader(\'Last-Modified\'), formatdate(mtime, usegmt=True))\n \n     def test_last_modified(self):\n-        import os.path\n-        import datetime\n-\n-        from dateutil.tz import tzlocal\n-\n-        from zope.component import provideAdapter\n-        from zope.publisher.browser import TestRequest\n-\n-        from plone.resource.file import FilesystemFile\n-        from plone.resource.file import FileLastModified\n-\n-        from z3c.caching.interfaces import ILastModified\n-\n         provideAdapter(FileLastModified)\n \n         name = \'test.html\'\n@@ -59,16 +54,6 @@ def test_last_modified(self):\n         self.assertEqual(lastModified(), mdate)\n \n     def test_raw_read_file(self):\n-        import os.path\n-\n-        from zope.component import provideAdapter\n-        from zope.publisher.browser import TestRequest\n-\n-        from plone.resource.file import FilesystemFile\n-        from plone.resource.file import rawReadFile\n-\n-        from zope.filerepresentation.interfaces import IRawReadFile\n-\n         provideAdapter(rawReadFile)\n \n         name = \'test.html\'\n@@ -80,7 +65,10 @@ def test_raw_read_file(self):\n \n         rf = IRawReadFile(f)\n \n-        self.assertTrue(isinstance(rf, file))\n-        self.assertEqual(rf.read(), \'asdf\')\n+        if six.PY2:\n+            self.assertTrue(isinstance(rf, file))\n+        else:\n+            self.assertTrue(isinstance(rf, io.IOBase))\n+        self.assertEqual(rf.read(), b\'asdf\')\n \n         rf.close()\ndiff --git a/plone/resource/tests/test_utils.py b/plone/resource/tests/test_utils.py\nindex dff82b6..46f9c70 100644\n--- a/plone/resource/tests/test_utils.py\n+++ b/plone/resource/tests/test_utils.py\n@@ -79,8 +79,8 @@ def test_cloneDirectory(self):\n         source = PersistentResourceDirectory(root[\'demo\'][\'foo\'])\n         target = PersistentResourceDirectory(root[\'demo\'][\'bar\'])\n \n-        source.writeFile(\'file1.txt\', \'file1\')\n-        source.writeFile(\'subdir1/file2.txt\', \'file2\')\n+        source.writeFile(\'file1.txt\', b\'file1\')\n+        source.writeFile(\'subdir1/file2.txt\', b\'file2\')\n         source.makeDirectory(\'subdir2\')\n \n         cloneResourceDirectory(source, target)\ndiff --git a/plone/resource/tests/test_zip_download.py b/plone/resource/tests/test_zip_download.py\nindex cb5b9e6..e4a7229 100644\n--- a/plone/resource/tests/test_zip_download.py\n+++ b/plone/resource/tests/test_zip_download.py\n@@ -1,8 +1,5 @@\n # -*- coding: utf-8 -*-\n-import os.path\n-import unittest\n-import zipfile\n-\n+from io import BytesIO\n from OFS.Image import File\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n@@ -10,9 +7,12 @@\n from plone.resource.testing import DEMO_TRAVERSER_INTEGRATION_TESTING\n from plone.testing import zca\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n-from six import StringIO\n from zope.component import provideUtility\n \n+import os.path\n+import unittest\n+import zipfile\n+\n \n base_path = os.path.dirname(__file__)\n test_dir_path = os.path.join(base_path, \'resources\')\n@@ -32,7 +32,7 @@ def test_traverse_packaged_type_specific_directory(self):\n         dir = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n         provideUtility(dir, provides=IResourceDirectory, name=u\'++demo++foo\')\n \n-        out = StringIO()\n+        out = BytesIO()\n         request = self.layer[\'request\']\n         response = request.response\n         response.stdout = out\n@@ -43,13 +43,13 @@ def test_traverse_packaged_type_specific_directory(self):\n         zf = zipfile.ZipFile(out)\n \n         self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n \n     def test_traverse_global_directory(self):\n         dir = FilesystemResourceDirectory(test_dir_path)\n         provideUtility(dir, provides=IResourceDirectory, name=u\'\')\n \n-        out = StringIO()\n+        out = BytesIO()\n         request = self.layer[\'request\']\n         response = request.response\n         response.stdout = out\n@@ -60,19 +60,22 @@ def test_traverse_global_directory(self):\n         zf = zipfile.ZipFile(out)\n \n         self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n \n     def test_traverse_persistent_directory(self):\n         root = BTreeFolder2(\'portal_resources\')\n         self.app._setOb(\'portal_resources\', root)\n         root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n         root[\'demo\']._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        root[\'demo\'][\'foo\']._setOb(\'test.html\', File(\'test.html\', \'test.html\', \'asdf\'))\n+        root[\'demo\'][\'foo\']._setOb(\n+            \'test.html\',\n+            File(\'test.html\', \'test.html\', b\'asdf\'),\n+        )\n \n         dir = PersistentResourceDirectory(root)\n         provideUtility(dir, provides=IResourceDirectory, name=u\'persistent\')\n \n-        out = StringIO()\n+        out = BytesIO()\n         request = self.layer[\'request\']\n         response = request.response\n         response.stdout = out\n@@ -83,4 +86,4 @@ def test_traverse_persistent_directory(self):\n         zf = zipfile.ZipFile(out)\n \n         self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-14T20:44:13+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resource/commit/0e564e607c9f92426f78a136943830800e051346

more py3 fixes

Files changed:
M plone/resource/directory.py

b"diff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex 00b0c48..fb841ab 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from io import BytesIO\n from OFS.Image import File\n from OFS.interfaces import IObjectManager\n from plone.resource.events import PloneResourceCreatedEvent\n@@ -89,15 +88,14 @@ def __contains__(self, name):\n         return name in self.context\n \n     def openFile(self, path):\n-        return BytesIO(self.readFile(path))\n+        return six.BytesIO(self.readFile(path))\n \n     def readFile(self, path):\n         try:\n             f = self.context.unrestrictedTraverse(path)\n         except Exception as e:\n             raise IOError(str(e))\n-\n-        return six.binary_type(f.data)\n+        return f.data\n \n     def listDirectory(self):\n         return [n for n in self.context.objectIds()\n@@ -142,17 +140,20 @@ def write(dir, prefix, zf):\n         zf.close()\n \n     def makeDirectory(self, path):\n+        if six.PY2:\n+            path = path.encode('utf-8')\n+\n         parent = self.context\n         names = path.strip('/').split('/')\n         for name in names:\n             if name not in parent:\n-                if six.PY2 and isinstance(name, six.text_type):\n-                    name = name.encode('utf-8')\n                 f = BTreeFolder2(name)\n                 parent._setOb(name, f)\n             parent = parent[name]\n \n     def writeFile(self, path, data):\n+        if isinstance(data, six.text_type):\n+            data = data.encode('utf8')\n         basepath = '/'.join(path.split('/')[:-1])\n         if basepath:\n             self.makeDirectory(basepath)\n"

Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-14T20:44:13+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resource/commit/63b4f5eba726b9310db7d496c89d167ebe842659

fix reading OFS.Image objects (use interal api call __bytes__)

Files changed:
M plone/resource/directory.py

b'diff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex fb841ab..f9c1ac5 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -95,7 +95,9 @@ def readFile(self, path):\n             f = self.context.unrestrictedTraverse(path)\n         except Exception as e:\n             raise IOError(str(e))\n-        return f.data\n+        if isinstance(f.data, six.binary_type):\n+            return f.data\n+        return f.data.__bytes__()\n \n     def listDirectory(self):\n         return [n for n in self.context.objectIds()\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-14T20:44:13+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resource/commit/913cfab9987ef8b25167ec7cc9575e73c1ab77ff

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e6b3917..41f4dd7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -22,7 +22,7 @@ Bug fixes:\n \n Bug fixes:\n \n-- More Python 3 fixes\n+- More Python 3 fixes. Fix tests in py3.\n   [ale, pbauer]\n \n \ndiff --git a/setup.py b/setup.py\nindex 32c97f0..bbb4776 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,6 +26,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'plone resource\',\n     author=\'David Glick, Plone Foundation\',\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-14T20:50:48+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resource/commit/6a97e029a6ad617c9c4f626ebe90222160afeef7

prepare for 2.1.0

Files changed:
M CHANGES.rst
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 41f4dd7..0c74201 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,7 @@\n Changelog\n =========\n \n-2.0.3 (unreleased)\n+2.1.0 (unreleased)\n ------------------\n \n Breaking changes:\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix tests in py3.\n+  [pbauer]\n \n \n 2.0.2 (2018-06-04)\n@@ -22,7 +23,7 @@ Bug fixes:\n \n Bug fixes:\n \n-- More Python 3 fixes. Fix tests in py3.\n+- More Python 3 fixes.\n   [ale, pbauer]\n \n \ndiff --git a/setup.py b/setup.py\nindex bbb4776..57984a2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = '2.0.3.dev0'\n+version = '2.1.0.dev0'\n \n test_requires = [\n     'plone.app.testing',\n"

Repository: plone.resource


Branch: refs/heads/master
Date: 2018-09-15T12:04:49+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resource/commit/e766c8b401dd7c3d1352132097cf3fcc37003e8c

Merge pull request #25 from plone/python3

More Python 3 fixes

Files changed:
M CHANGES.rst
M plone/resource/directory.py
M plone/resource/download.py
M plone/resource/file.py
M plone/resource/manifest.py
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_file.py
M plone/resource/tests/test_utils.py
M plone/resource/tests/test_zip_download.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e6b3917..0c74201 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,7 @@\n Changelog\n =========\n \n-2.0.3 (unreleased)\n+2.1.0 (unreleased)\n ------------------\n \n Breaking changes:\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix tests in py3.\n+  [pbauer]\n \n \n 2.0.2 (2018-06-04)\n@@ -22,7 +23,7 @@ Bug fixes:\n \n Bug fixes:\n \n-- More Python 3 fixes\n+- More Python 3 fixes.\n   [ale, pbauer]\n \n \ndiff --git a/plone/resource/directory.py b/plone/resource/directory.py\nindex d97b8ec..f9c1ac5 100644\n--- a/plone/resource/directory.py\n+++ b/plone/resource/directory.py\n@@ -10,7 +10,6 @@\n from plone.resource.interfaces import IWritableResourceDirectory\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from Products.CMFCore.utils import getToolByName\n-from six import StringIO\n from zExceptions import Forbidden\n from zExceptions import NotFound\n from zope.event import notify\n@@ -89,15 +88,16 @@ def __contains__(self, name):\n         return name in self.context\n \n     def openFile(self, path):\n-        return StringIO(self.readFile(path))\n+        return six.BytesIO(self.readFile(path))\n \n     def readFile(self, path):\n         try:\n             f = self.context.unrestrictedTraverse(path)\n         except Exception as e:\n             raise IOError(str(e))\n-\n-        return str(f.data)\n+        if isinstance(f.data, six.binary_type):\n+            return f.data\n+        return f.data.__bytes__()\n \n     def listDirectory(self):\n         return [n for n in self.context.objectIds()\n@@ -142,17 +142,20 @@ def write(dir, prefix, zf):\n         zf.close()\n \n     def makeDirectory(self, path):\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+\n         parent = self.context\n         names = path.strip(\'/\').split(\'/\')\n         for name in names:\n             if name not in parent:\n-                if six.PY2 and isinstance(name, six.text_type):\n-                    name = name.encode(\'utf-8\')\n                 f = BTreeFolder2(name)\n                 parent._setOb(name, f)\n             parent = parent[name]\n \n     def writeFile(self, path, data):\n+        if isinstance(data, six.text_type):\n+            data = data.encode(\'utf8\')\n         basepath = \'/\'.join(path.split(\'/\')[:-1])\n         if basepath:\n             self.makeDirectory(basepath)\n@@ -245,13 +248,11 @@ def __getitem__(self, name):\n \n     def openFile(self, path):\n         filepath = self._resolveSubpath(path)\n-        mode = u\'r\'\n-        if six.PY2:\n-            mode += u\'b\'\n-        return open(filepath, mode)\n+        return open(filepath, \'rb\')\n \n     def readFile(self, path):\n-        return self.openFile(path).read()\n+        with self.openFile(path) as f:\n+            return f.read()\n \n     def listDirectory(self):\n         names = os.listdir(self.directory)\n@@ -265,23 +266,21 @@ def isFile(self, path):\n         return os.path.isfile(self._resolveSubpath(path))\n \n     def exportZip(self, out):\n-        zf = zipfile.ZipFile(out, \'w\')\n-\n-        toStrip = len(self.directory.replace(os.path.sep, \'/\')) + 1\n+        with zipfile.ZipFile(out, \'w\') as zf:\n+            toStrip = len(self.directory.replace(os.path.sep, \'/\')) + 1\n \n-        for (dirpath, dirnames, filenames) in os.walk(self.directory):\n-            subpath = dirpath.replace(os.path.sep, \'/\')[toStrip:].strip(\'/\')\n+            for (dirpath, dirnames, filenames) in os.walk(self.directory):\n+                subpath = dirpath.replace(os.path.sep, \'/\')[toStrip:].strip(\'/\')\n \n-            for filename in filenames:\n-                path = \'/\'.join([subpath, filename]).strip(\'/\')\n+                for filename in filenames:\n+                    path = \'/\'.join([subpath, filename]).strip(\'/\')\n \n-                if any(any(filter.match(n) for filter in FILTERS)\n-                       for n in path.split(\'/\')\n-                       ):\n-                    continue\n+                    if any(any(filter.match(n) for filter in FILTERS)\n+                           for n in path.split(\'/\')\n+                           ):\n+                        continue\n \n-                zf.writestr(\n-                    \'/\'.join([self.__name__, path, ]),\n-                    self.readFile(path)\n-                )\n-        zf.close()\n+                    zf.writestr(\n+                        \'/\'.join([self.__name__, path, ]),\n+                        self.readFile(path),\n+                    )\ndiff --git a/plone/resource/download.py b/plone/resource/download.py\nindex f5c255d..917b90b 100644\n--- a/plone/resource/download.py\n+++ b/plone/resource/download.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from six import StringIO\n+from io import BytesIO\n from zope.publisher.browser import BrowserView\n \n \n@@ -14,7 +14,7 @@ def __call__(self):\n         # the output stream, but this is awkward with the ZPublisher response\n         # interface. For now, we write the zipfile to a stream in memory.\n \n-        out = StringIO()\n+        out = BytesIO()\n         self.context.exportZip(out)\n \n         response.setHeader(\'Content-Type\', \'application/zip\')\n@@ -23,5 +23,4 @@ def __call__(self):\n             \'attachment; filename="%s.zip"\' % name\n         )\n         response.setHeader(\'Content-Length\', len(out.getvalue()))\n-\n         response.write(out.getvalue())\ndiff --git a/plone/resource/file.py b/plone/resource/file.py\nindex 09e6704..bdc30be 100644\n--- a/plone/resource/file.py\n+++ b/plone/resource/file.py\n@@ -4,10 +4,10 @@\n from email.utils import formatdate\n from z3c.caching.interfaces import ILastModified\n from zope.component import adapter\n+from zope.component import queryUtility\n from zope.filerepresentation.interfaces import IRawReadFile\n from zope.interface import implementer\n from ZPublisher.Iterators import filestream_iterator\n-from zope.component import queryUtility\n \n import datetime\n import mimetypes\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 9211a5e..f869070 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -28,14 +28,15 @@\n ``bar``. ``title`` and ``description`` will be ``None`` if not found in the\n manifest. ``bar`` will be ``baz`` if not found.\n """\n-import logging\n-\n from plone.resource.directory import FILTERS\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.utils import iterDirectoriesOfType\n from six.moves.configparser import SafeConfigParser\n from zope.component import getUtility\n \n+import logging\n+import six\n+\n \n MANIFEST_FILENAME = \'manifest.cfg\'\n \n@@ -79,7 +80,13 @@ def getManifest(fp, format, defaults=None):\n         defaults = format.defaults\n \n     parser = SafeConfigParser()\n-    parser.readfp(fp)\n+    if six.PY2:\n+        parser.readfp(fp)\n+    else:\n+        data = fp.read()\n+        if isinstance(data, six.binary_type):\n+            data = data.decode()\n+        parser.read_string(data)\n \n     results = {}\n     for key in format.keys:\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex f727e7d..695ae26 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -1,12 +1,21 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from io import BytesIO\n+from OFS.Image import File\n+from plone.resource.directory import FilesystemResourceDirectory\n+from plone.resource.directory import PersistentResourceDirectory\n from plone.resource.events import PloneResourceCreatedEvent\n from plone.resource.events import PloneResourceModifiedEvent\n from plone.resource.interfaces import IPloneResourceCreatedEvent\n from plone.resource.interfaces import IPloneResourceModifiedEvent\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n+from zExceptions import NotFound\n+from zipfile import ZipFile\n from zope.component import adapter\n from zope.component import provideHandler\n+from zope.site.testing import createSiteManager\n+from zope.site.testing import siteSetUp\n+from zope.site.testing import siteTearDown\n \n import os.path\n import unittest\n@@ -18,20 +27,15 @@ def _makeOne(self):\n         root = BTreeFolder2(\'portal_resources\')\n         root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n         root.demo._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-\n-        from StringIO import StringIO\n-        from OFS.Image import File\n-        file = File(\'test.html\', \'test.html\', StringIO(\'asdf\'))\n+        file = File(\'test.html\', \'test.html\', BytesIO(b\'asdf\'))\n         root.demo.foo._setOb(\'test.html\', file)\n \n-        from plone.resource.directory import PersistentResourceDirectory\n         return PersistentResourceDirectory(root)\n \n     def _assertSameUnwrapped(self, a, b):\n         self.assertTrue(aq_base(a) is aq_base(b))\n \n     def test_ctor_implicit_context(self):\n-        from zope.site.testing import siteSetUp, createSiteManager, siteTearDown\n         siteSetUp()\n \n         site = BTreeFolder2(\'site\')\n@@ -39,7 +43,6 @@ def test_ctor_implicit_context(self):\n         root = self._makeOne().context\n         site._setOb(\'portal_resources\', root)\n \n-        from plone.resource.directory import PersistentResourceDirectory\n         try:\n             dir = PersistentResourceDirectory()\n             # context should be stored unwrapped\n@@ -68,7 +71,6 @@ def test_publishTraverse_file(self):\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        from zExceptions import NotFound\n         self.assertRaises(NotFound, dir.publishTraverse, None, \'baz\')\n \n     def test_getitem(self):\n@@ -78,11 +80,11 @@ def test_getitem(self):\n     def test_openFile(self):\n         dir = self._makeOne()\n         file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(\'asdf\', file.read())\n+        self.assertEqual(b\'asdf\', file.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\n@@ -111,49 +113,60 @@ def test_makeDirectory_extra_slashes(self):\n \n     def test_writeFile(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', \'qux\')\n-        self.assertEqual(\'qux\', dir.readFile(\'qux\'))\n+        dir.writeFile(\'qux\', b\'qux\')\n+        self.assertEqual(b\'qux\', dir.readFile(\'qux\'))\n \n     def test_writeFile_does_not_create_empty_directory(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'qux\', \'qux\')\n+        dir.writeFile(\'qux\', b\'qux\')\n         self.assertFalse(\'\' in dir)\n         self.assertTrue(\'qux\' in dir)\n \n     def test_writeFile_directory_missing(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'baz/qux\', \'qux\')\n-        self.assertEqual(\'qux\', dir.readFile(\'baz/qux\'))\n+        dir.writeFile(\'baz/qux\', b\'qux\')\n+        self.assertEqual(b\'qux\', dir.readFile(\'baz/qux\'))\n \n     def test_writeFile_file_already_exists(self):\n         dir = self._makeOne()\n-        dir.writeFile(\'demo/foo/test.html\', \'changed\')\n-        self.assertEqual(\'changed\', dir.readFile(\'demo/foo/test.html\'))\n+        dir.writeFile(\'demo/foo/test.html\', b\'changed\')\n+        self.assertEqual(b\'changed\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_importZip(self):\n         dir = self._makeOne()\n-        f = open(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertEqual(\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_importZip_takes_ZipFile(self):\n         dir = self._makeOne()\n-        from zipfile import ZipFile\n-        f = ZipFile(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertEqual(\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertEqual(b\'from zip\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_importZip_filters_resource_forks(self):\n         dir = self._makeOne()\n-        f = open(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertFalse(\'__MACOSX\' in dir.context.objectIds())\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertFalse(\'__MACOSX\' in dir.context.objectIds())\n \n     def test_importZip_filters_hidden_directories(self):\n         dir = self._makeOne()\n-        f = open(os.path.join(os.path.dirname(__file__), \'resources.zip\'))\n-        dir.importZip(f)\n-        self.assertFalse(\'.svn\' in dir)\n+        with open(\n+            os.path.join(os.path.dirname(__file__), \'resources.zip\'),\n+            \'rb\',\n+        ) as f:\n+            dir.importZip(f)\n+            self.assertFalse(\'.svn\' in dir)\n \n     def test_delitem(self):\n         dir = self._makeOne()\n@@ -210,24 +223,17 @@ def _handleFileModified(event):\n         provideHandler(_handleFileModified)\n \n         dir = self._makeOne()\n-        dir.writeFile(\'test\', \'my test\')\n-        dir.writeFile(\'test\', \'my test is modified\')\n+        dir.writeFile(\'test\', b\'my test\')\n+        dir.writeFile(\'test\', b\'my test is modified\')\n         self.assertTrue(isinstance(events[0], PloneResourceCreatedEvent))\n-        self.assertEqual(\n-            str(events[0].object),\n-            \'my test\'\n-        )\n+        self.assertEqual(events[0].object.data, b\'my test\')\n         self.assertTrue(isinstance(events[1], PloneResourceModifiedEvent))\n-        self.assertEqual(\n-            str(events[1].object),\n-            \'my test is modified\'\n-        )\n+        self.assertEqual(events[1].object.data, b\'my test is modified\')\n \n \n class TestFilesystemResourceDirectory(unittest.TestCase):\n \n     def _makeOne(self, name=None):\n-        from plone.resource.directory import FilesystemResourceDirectory\n         path = os.path.join(os.path.dirname(__file__), \'resources\')\n         return FilesystemResourceDirectory(path, name=name)\n \n@@ -255,7 +261,6 @@ def test_publishTraverse_file(self):\n \n     def test_publishTraverse_not_found(self):\n         dir = self._makeOne()\n-        from zExceptions import NotFound\n         self.assertRaises(NotFound, dir.publishTraverse, None, \'baz\')\n \n     def test_getitem(self):\n@@ -270,11 +275,11 @@ def test_contains(self):\n     def test_openFile(self):\n         dir = self._makeOne()\n         file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(\'asdf\', file.read())\n+        self.assertEqual(b\'asdf\', file.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n-        self.assertEqual(\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n+        self.assertEqual(b\'asdf\', dir.readFile(\'demo/foo/test.html\'))\n \n     def test_readFile_not_found(self):\n         dir = self._makeOne()\ndiff --git a/plone/resource/tests/test_file.py b/plone/resource/tests/test_file.py\nindex baee728..c44eed8 100644\n--- a/plone/resource/tests/test_file.py\n+++ b/plone/resource/tests/test_file.py\n@@ -1,6 +1,19 @@\n # -*- coding: utf-8 -*-\n+from dateutil.tz import tzlocal\n+from email.utils import formatdate\n+from plone.resource.file import FileLastModified\n+from plone.resource.file import FilesystemFile\n+from plone.resource.file import rawReadFile\n from plone.testing.zca import UNIT_TESTING\n-\n+from z3c.caching.interfaces import ILastModified\n+from zope.component import provideAdapter\n+from zope.filerepresentation.interfaces import IRawReadFile\n+from zope.publisher.browser import TestRequest\n+\n+import datetime\n+import io\n+import os.path\n+import six\n import unittest\n \n \n@@ -9,11 +22,6 @@ class TestFilesystemResourceDirectory(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def test_render(self):\n-        import os.path\n-        from email.utils import formatdate\n-        from plone.resource.file import FilesystemFile\n-        from zope.publisher.browser import TestRequest\n-\n         name = \'test.html\'\n         path = os.path.join(os.path.dirname(__file__), \'resources\', \'demo\', \'foo\', name)\n         mtime = os.path.getmtime(path)\n@@ -23,26 +31,13 @@ def test_render(self):\n         f = FilesystemFile(None, request, path, name)\n         iterator = f()\n \n-        data = \'\'.join(iterator)\n-        self.assertEqual(data, \'asdf\')\n+        data = b\'\'.join(iterator)\n+        self.assertEqual(data, b\'asdf\')\n         self.assertEqual(request.response.getHeader(\'Content-Type\'), \'text/html\')\n         self.assertEqual(request.response.getHeader(\'Content-Length\'), \'4\')\n         self.assertEqual(request.response.getHeader(\'Last-Modified\'), formatdate(mtime, usegmt=True))\n \n     def test_last_modified(self):\n-        import os.path\n-        import datetime\n-\n-        from dateutil.tz import tzlocal\n-\n-        from zope.component import provideAdapter\n-        from zope.publisher.browser import TestRequest\n-\n-        from plone.resource.file import FilesystemFile\n-        from plone.resource.file import FileLastModified\n-\n-        from z3c.caching.interfaces import ILastModified\n-\n         provideAdapter(FileLastModified)\n \n         name = \'test.html\'\n@@ -59,16 +54,6 @@ def test_last_modified(self):\n         self.assertEqual(lastModified(), mdate)\n \n     def test_raw_read_file(self):\n-        import os.path\n-\n-        from zope.component import provideAdapter\n-        from zope.publisher.browser import TestRequest\n-\n-        from plone.resource.file import FilesystemFile\n-        from plone.resource.file import rawReadFile\n-\n-        from zope.filerepresentation.interfaces import IRawReadFile\n-\n         provideAdapter(rawReadFile)\n \n         name = \'test.html\'\n@@ -80,7 +65,10 @@ def test_raw_read_file(self):\n \n         rf = IRawReadFile(f)\n \n-        self.assertTrue(isinstance(rf, file))\n-        self.assertEqual(rf.read(), \'asdf\')\n+        if six.PY2:\n+            self.assertTrue(isinstance(rf, file))\n+        else:\n+            self.assertTrue(isinstance(rf, io.IOBase))\n+        self.assertEqual(rf.read(), b\'asdf\')\n \n         rf.close()\ndiff --git a/plone/resource/tests/test_utils.py b/plone/resource/tests/test_utils.py\nindex dff82b6..46f9c70 100644\n--- a/plone/resource/tests/test_utils.py\n+++ b/plone/resource/tests/test_utils.py\n@@ -79,8 +79,8 @@ def test_cloneDirectory(self):\n         source = PersistentResourceDirectory(root[\'demo\'][\'foo\'])\n         target = PersistentResourceDirectory(root[\'demo\'][\'bar\'])\n \n-        source.writeFile(\'file1.txt\', \'file1\')\n-        source.writeFile(\'subdir1/file2.txt\', \'file2\')\n+        source.writeFile(\'file1.txt\', b\'file1\')\n+        source.writeFile(\'subdir1/file2.txt\', b\'file2\')\n         source.makeDirectory(\'subdir2\')\n \n         cloneResourceDirectory(source, target)\ndiff --git a/plone/resource/tests/test_zip_download.py b/plone/resource/tests/test_zip_download.py\nindex cb5b9e6..e4a7229 100644\n--- a/plone/resource/tests/test_zip_download.py\n+++ b/plone/resource/tests/test_zip_download.py\n@@ -1,8 +1,5 @@\n # -*- coding: utf-8 -*-\n-import os.path\n-import unittest\n-import zipfile\n-\n+from io import BytesIO\n from OFS.Image import File\n from plone.resource.directory import FilesystemResourceDirectory\n from plone.resource.directory import PersistentResourceDirectory\n@@ -10,9 +7,12 @@\n from plone.resource.testing import DEMO_TRAVERSER_INTEGRATION_TESTING\n from plone.testing import zca\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n-from six import StringIO\n from zope.component import provideUtility\n \n+import os.path\n+import unittest\n+import zipfile\n+\n \n base_path = os.path.dirname(__file__)\n test_dir_path = os.path.join(base_path, \'resources\')\n@@ -32,7 +32,7 @@ def test_traverse_packaged_type_specific_directory(self):\n         dir = FilesystemResourceDirectory(os.path.join(test_dir_path, \'demo\', \'foo\'))\n         provideUtility(dir, provides=IResourceDirectory, name=u\'++demo++foo\')\n \n-        out = StringIO()\n+        out = BytesIO()\n         request = self.layer[\'request\']\n         response = request.response\n         response.stdout = out\n@@ -43,13 +43,13 @@ def test_traverse_packaged_type_specific_directory(self):\n         zf = zipfile.ZipFile(out)\n \n         self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n \n     def test_traverse_global_directory(self):\n         dir = FilesystemResourceDirectory(test_dir_path)\n         provideUtility(dir, provides=IResourceDirectory, name=u\'\')\n \n-        out = StringIO()\n+        out = BytesIO()\n         request = self.layer[\'request\']\n         response = request.response\n         response.stdout = out\n@@ -60,19 +60,22 @@ def test_traverse_global_directory(self):\n         zf = zipfile.ZipFile(out)\n \n         self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\n \n     def test_traverse_persistent_directory(self):\n         root = BTreeFolder2(\'portal_resources\')\n         self.app._setOb(\'portal_resources\', root)\n         root._setOb(\'demo\', BTreeFolder2(\'demo\'))\n         root[\'demo\']._setOb(\'foo\', BTreeFolder2(\'foo\'))\n-        root[\'demo\'][\'foo\']._setOb(\'test.html\', File(\'test.html\', \'test.html\', \'asdf\'))\n+        root[\'demo\'][\'foo\']._setOb(\n+            \'test.html\',\n+            File(\'test.html\', \'test.html\', b\'asdf\'),\n+        )\n \n         dir = PersistentResourceDirectory(root)\n         provideUtility(dir, provides=IResourceDirectory, name=u\'persistent\')\n \n-        out = StringIO()\n+        out = BytesIO()\n         request = self.layer[\'request\']\n         response = request.response\n         response.stdout = out\n@@ -83,4 +86,4 @@ def test_traverse_persistent_directory(self):\n         zf = zipfile.ZipFile(out)\n \n         self.assertTrue(\'foo/test.html\' in zf.namelist())\n-        self.assertEqual(\'asdf\', zf.open(\'foo/test.html\').read())\n+        self.assertEqual(b\'asdf\', zf.open(\'foo/test.html\').read())\ndiff --git a/setup.py b/setup.py\nindex 32c97f0..57984a2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.0.3.dev0\'\n+version = \'2.1.0.dev0\'\n \n test_requires = [\n     \'plone.app.testing\',\n@@ -26,6 +26,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'plone resource\',\n     author=\'David Glick, Plone Foundation\',\n'

