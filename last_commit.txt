Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-09-26T11:52:42+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/91fbe71141849b20cd678cb522c9dc200d2c067e

Extract CMFDefault specific config from 'meta.zcml' into 'meta-bbb.zcml' plone/Products.CMFPlone#2141

Files changed:
A Products/CMFPlone/meta-bbb.zcml
M CHANGES.rst
M Products/CMFPlone/meta.zcml

diff --git a/CHANGES.rst b/CHANGES.rst
index 59077fa5e..67e18fc00 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -30,6 +30,9 @@ Bug fixes:
 - Bump metadata.xml version.
   [thet]
 
+- Extract CMFDefault specific config from `meta.zcml` into `meta-bbb.zcml`
+  to allow AT free and AT included sites.
+  [tomgross]
 
 5.1rc1 (2017-09-10)
 -------------------
diff --git a/Products/CMFPlone/meta-bbb.zcml b/Products/CMFPlone/meta-bbb.zcml
new file mode 100644
index 000000000..67d7ca3cf
--- /dev/null
+++ b/Products/CMFPlone/meta-bbb.zcml
@@ -0,0 +1,13 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:zcml="http://namespaces.zope.org/zcml"
+    xmlns:meta="http://namespaces.zope.org/meta">
+
+    <configure zcml:condition="installed Products.CMFDefault.browser">
+        <exclude package="Products.CMFDefault.browser" file="configure.zcml" />
+        <exclude package="Products.CMFDefault.formlib" file="configure.zcml" />
+        <exclude package="Products.CMFDefault.upgrade" file="configure.zcml" />
+    </configure>
+
+</configure>
+
diff --git a/Products/CMFPlone/meta.zcml b/Products/CMFPlone/meta.zcml
index a4542c655..a317b7399 100644
--- a/Products/CMFPlone/meta.zcml
+++ b/Products/CMFPlone/meta.zcml
@@ -18,12 +18,6 @@
     <meta:provides feature="plone-5" />
     <meta:provides feature="plone-51" />
 
-    <configure zcml:condition="installed Products.CMFDefault">
-        <exclude package="Products.CMFDefault.browser" file="configure.zcml" />
-        <exclude package="Products.CMFDefault.formlib" file="configure.zcml" />
-        <exclude package="Products.CMFDefault.upgrade" file="configure.zcml" />
-    </configure>
-
     <include package="Products.CMFCore" file="meta.zcml" />
     <include package="Products.GenericSetup" file="meta.zcml" />
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-09-26T20:59:47+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/d0f4d9d69d27f109953387a7ff46b73c41d47ed2

Merge branch 'master' into tg_meta_bbb_zcml

Files changed:
A Products/CMFPlone/tests/test_zmi.py
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 67e18fc00..f44020629 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -34,6 +34,9 @@ Bug fixes:
   to allow AT free and AT included sites.
   [tomgross]
 
+- Add basic tests for all main zmi management screens.
+  [pbauer]
+
 5.1rc1 (2017-09-10)
 -------------------
 
diff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py
new file mode 100644
index 000000000..59626634e
--- /dev/null
+++ b/Products/CMFPlone/tests/test_zmi.py
@@ -0,0 +1,281 @@
+# -*- coding: utf-8 -*-
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa: E501
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+
+import unittest
+
+
+class ZMITests(unittest.TestCase):
+    """Basic tests of ZMI management screens
+    """
+
+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+    def test_manage(self):
+        url = 'manage'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_main(self):
+        url = 'manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_components(self):
+        url = 'manage_components'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_propertiesForm(self):
+        url = 'manage_propertiesForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_UndoForm(self):
+        url = 'manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_owner(self):
+        url = 'manage_owner'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_interfaces(self):
+        url = 'manage_interfaces'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_findForm(self):
+        url = 'manage_findForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_acl_users(self):
+        url = 'acl_users/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_caching_policy_manager(self):
+        url = 'caching_policy_manager/manage_cachingPolicies'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_content_type_registry(self):
+        url = 'content_type_registry/manage_predicates'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_error_log(self):
+        url = 'error_log/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_HTTPCache(self):
+        url = 'HTTPCache/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_MailHost(self):
+        url = 'MailHost/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_mimetypes_registry(self):
+        url = 'mimetypes_registry/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_plone_utils(self):
+        url = 'plone_utils/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_actions(self):
+        url = 'portal_actions/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_archivist(self):
+        url = 'portal_archivist/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_catalog(self):
+        url = 'portal_catalog/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_css(self):
+        url = 'portal_css/manage_cssForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_diff(self):
+        url = 'portal_diff/manage_difftypes'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_form_controller(self):
+        url = 'portal_form_controller/manage_overview'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_groupdata(self):
+        url = 'portal_groupdata/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_groups(self):
+        url = 'portal_groups/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_historiesstorage(self):
+        url = 'portal_historiesstorage/storageStatistics'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_historyidhandler(self):
+        url = 'portal_historyidhandler/manage_queryObject'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_javascripts(self):
+        url = 'portal_javascripts/manage_jsForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_memberdata(self):
+        url = 'portal_memberdata/manage_overview'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_membership(self):
+        url = 'portal_membership/manage_mapRoles'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_modifier(self):
+        url = 'portal_modifier/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_password_reset(self):
+        url = 'portal_password_reset/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_properties(self):
+        url = 'portal_properties/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_purgepolicy(self):
+        url = 'portal_purgepolicy/manage_propertiesForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_quickinstaller(self):
+        url = 'portal_quickinstaller/manage_installProductsForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_referencefactories(self):
+        url = 'portal_referencefactories/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_registration(self):
+        url = 'portal_registration/manage_overview'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_registry(self):
+        url = 'portal_registry/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_repository(self):
+        url = 'portal_repository/manage_owner'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_resources(self):
+        url = 'portal_resources/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_setup(self):
+        url = 'portal_setup/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_skins(self):
+        url = 'portal_skins/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_transforms(self):
+        url = 'portal_transforms/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_types(self):
+        url = 'portal_types/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_uidannotation(self):
+        url = 'portal_uidannotation/manage_propertiesForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_uidgenerator(self):
+        url = 'portal_uidgenerator/manage_UndoForm'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_uidhandler(self):
+        url = 'portal_uidhandler/manage_queryObject'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_view_customizations(self):
+        url = 'portal_view_customizations/registrations.html'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_portal_workflow(self):
+        url = 'portal_workflow/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_RAMCache(self):
+        url = 'RAMCache/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_ResourceRegistryCache(self):
+        url = 'ResourceRegistryCache/manage_main'
+        view = self.portal.restrictedTraverse(url)
+        self.assertTrue(view(), msg='{0} is broken'.format(url))
+
+    def test_manage_access(self):
+        """manage_access cannot be travesed to directly
+        """
+        view = getattr(self.portal, '_normal_manage_access')
+        self.assertTrue(view(), msg='manage_access is broken')
+
+    def test_portal_controlpanel(self):
+        # portal_controlpanel/manage_editActionsForm
+        controlpanel = self.portal.restrictedTraverse('portal_controlpanel')
+        view = controlpanel._actions_form
+        self.assertTrue(
+            view(),
+            msg='portal_controlpanel/manage_editActionsForm is broken')


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-09-27T01:46:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/4eea0f700bedb125c4bcde831e13710f3acad0cd

Merge pull request #2160 from plone/tg_meta_bbb_zcml

Extract CMFDefault specific config from 'meta.zcml' into 'meta-bbb.zcml

Files changed:
A Products/CMFPlone/meta-bbb.zcml
M CHANGES.rst
M Products/CMFPlone/meta.zcml

diff --git a/CHANGES.rst b/CHANGES.rst
index 72cf00463..f44020629 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -30,10 +30,13 @@ Bug fixes:
 - Bump metadata.xml version.
   [thet]
 
+- Extract CMFDefault specific config from `meta.zcml` into `meta-bbb.zcml`
+  to allow AT free and AT included sites.
+  [tomgross]
+
 - Add basic tests for all main zmi management screens.
   [pbauer]
 
-
 5.1rc1 (2017-09-10)
 -------------------
 
diff --git a/Products/CMFPlone/meta-bbb.zcml b/Products/CMFPlone/meta-bbb.zcml
new file mode 100644
index 000000000..67d7ca3cf
--- /dev/null
+++ b/Products/CMFPlone/meta-bbb.zcml
@@ -0,0 +1,13 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:zcml="http://namespaces.zope.org/zcml"
+    xmlns:meta="http://namespaces.zope.org/meta">
+
+    <configure zcml:condition="installed Products.CMFDefault.browser">
+        <exclude package="Products.CMFDefault.browser" file="configure.zcml" />
+        <exclude package="Products.CMFDefault.formlib" file="configure.zcml" />
+        <exclude package="Products.CMFDefault.upgrade" file="configure.zcml" />
+    </configure>
+
+</configure>
+
diff --git a/Products/CMFPlone/meta.zcml b/Products/CMFPlone/meta.zcml
index a4542c655..a317b7399 100644
--- a/Products/CMFPlone/meta.zcml
+++ b/Products/CMFPlone/meta.zcml
@@ -18,12 +18,6 @@
     <meta:provides feature="plone-5" />
     <meta:provides feature="plone-51" />
 
-    <configure zcml:condition="installed Products.CMFDefault">
-        <exclude package="Products.CMFDefault.browser" file="configure.zcml" />
-        <exclude package="Products.CMFDefault.formlib" file="configure.zcml" />
-        <exclude package="Products.CMFDefault.upgrade" file="configure.zcml" />
-    </configure>
-
     <include package="Products.CMFCore" file="meta.zcml" />
     <include package="Products.GenericSetup" file="meta.zcml" />
 


