Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-01T00:27:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/f59022fd7275bd85f17e7eee9727b556d254af2e

black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/test_menu.py
M plone/app/contentmenu/view.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py\nindex cad1a5e..8f2bc34 100644\n--- a/plone/app/contentmenu/__init__.py\n+++ b/plone/app/contentmenu/__init__.py\n@@ -2,4 +2,4 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py\nindex 1bfe624..108c6c8 100644\n--- a/plone/app/contentmenu/displayviewsmenu.py\n+++ b/plone/app/contentmenu/displayviewsmenu.py\n@@ -7,19 +7,17 @@\n \n @implementer(IDisplayViewsMenu)\n class DisplayViewsMenu(BrowserMenu):\n-\n     def getMenuItemByAction(self, context, request, action):\n         # Normalize actions; strip view prefix\n-        if action.startswith(\'@@\'):\n+        if action.startswith("@@"):\n             action = action[2:]\n-        if action.startswith(\'++view++\'):\n+        if action.startswith("++view++"):\n             action = action[8:]\n \n-        for name, item in getAdapters((context, request),\n-                                      self.getMenuItemType()):\n+        for name, item in getAdapters((context, request), self.getMenuItemType()):\n             item_action = item.action\n             # Normalize menu item action; never uses ++view++\n-            if item_action.startswith(\'@@\'):\n+            if item_action.startswith("@@"):\n                 item_action = item_action[2:]\n \n             if item_action == action:\ndiff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py\nindex 40344c4..42c5eeb 100644\n--- a/plone/app/contentmenu/interfaces.py\n+++ b/plone/app/contentmenu/interfaces.py\n@@ -14,8 +14,7 @@ class IContentMenuView(IContentProvider):\n     """\n \n     def available():\n-        """Determine whether the menu should be displayed at all.\n-        """\n+        """Determine whether the menu should be displayed at all."""\n \n     def menu():\n         """Create a list of dicts that can be used to render a menu.\n@@ -25,6 +24,7 @@ def menu():\n         submenu\n         """\n \n+\n # The content menu itself - menu items are registered as adapters to this\n # interface (this is signalled by marking the interface itself with the\n # IInterface IMenuItemType)\n@@ -57,8 +57,7 @@ class IContentMenuItem(Interface):\n \n \n class IActionsSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the actions menu.\n-    """\n+    """The menu item linking to the actions menu."""\n \n \n class IActionsMenu(IBrowserMenu):\n@@ -69,8 +68,7 @@ class IActionsMenu(IBrowserMenu):\n \n \n class IDisplaySubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the display menu.\n-    """\n+    """The menu item linking to the display menu."""\n \n     def disabled(self):\n         """Find out if the menu is visible but disabled."""\n@@ -84,8 +82,7 @@ class IDisplayMenu(IBrowserMenu):\n \n \n class IFactoriesSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the factories menu.\n-    """\n+    """The menu item linking to the factories menu."""\n \n \n class IFactoriesMenu(IBrowserMenu):\n@@ -97,8 +94,7 @@ class IFactoriesMenu(IBrowserMenu):\n \n \n class IWorkflowSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the workflow menu.\n-    """\n+    """The menu item linking to the workflow menu."""\n \n \n class IWorkflowMenu(IBrowserMenu):\n@@ -110,8 +106,7 @@ class IWorkflowMenu(IBrowserMenu):\n \n \n class IPortletManagerSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the portlet manager menu.\n-    """\n+    """The menu item linking to the portlet manager menu."""\n \n \n class IPortletManagerMenu(IBrowserMenu):\ndiff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py\nindex 7fe16d6..f856f73 100644\n--- a/plone/app/contentmenu/menu.py\n+++ b/plone/app/contentmenu/menu.py\n@@ -36,6 +36,7 @@\n \n import pkg_resources\n \n+\n PMF = _  # used for dynamic messages we don\'t want to extract\n \n \n@@ -45,31 +46,33 @@\n     from cgi import escape\n \n try:\n-    pkg_resources.get_distribution(\'Products.CMFPlacefulWorkflow\')\n+    pkg_resources.get_distribution("Products.CMFPlacefulWorkflow")\n     from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n except pkg_resources.DistributionNotFound:\n-    from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies  # noqa\n+    from Products.CMFCore.permissions import (\n+        ManagePortal as ManageWorkflowPolicies,\n+    )  # noqa\n \n \n @implementer(IActionsSubMenuItem)\n class ActionsSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u\'label_actions_menu\', default=u\'Actions\')\n-    description = _(u\'title_actions_menu\',\n-                    default=u\'Actions for the current content item\')\n-    submenuId = \'plone_contentmenu_actions\'\n+    title = _(u"label_actions_menu", default=u"Actions")\n+    description = _(\n+        u"title_actions_menu", default=u"Actions for the current content item"\n+    )\n+    submenuId = "plone_contentmenu_actions"\n     icon = "toolbar-action/actions"\n     order = 30\n     extra = {\n-        \'id\': \'plone-contentmenu-actions\',\n-        \'li_class\': \'plonetoolbar-content-action\'\n+        "id": "plone-contentmenu-actions",\n+        "li_class": "plonetoolbar-content-action",\n     }\n \n     def __init__(self, context, request):\n         super(ActionsSubMenuItem, self).__init__(context, request)\n         self.context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n+            (context, request), name="plone_context_state"\n         )\n \n     @property\n@@ -77,13 +80,14 @@ def action(self):\n         folder = self.context\n         if not self.context_state.is_structural_folder():\n             folder = utils.parent(self.context)\n-        return folder.absolute_url() + \'/folder_contents\'\n+        return folder.absolute_url() + "/folder_contents"\n \n     @memoize\n     def available(self):\n-        actions_tool = getToolByName(self.context, \'portal_actions\')\n+        actions_tool = getToolByName(self.context, "portal_actions")\n         editActions = actions_tool.listActionInfos(\n-            object=self.context, categories=(\'object_buttons\',), max=1)\n+            object=self.context, categories=("object_buttons",), max=1\n+        )\n         return len(editActions) > 0\n \n     def selected(self):\n@@ -92,86 +96,88 @@ def selected(self):\n \n @implementer(IActionsMenu)\n class ActionsMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n         results = []\n \n-        context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n-        )\n-        editActions = context_state.actions(\'object_buttons\')\n+        context_state = getMultiAdapter((context, request), name="plone_context_state")\n+        editActions = context_state.actions("object_buttons")\n         if not editActions:\n             return results\n \n         for action in editActions:\n-            if not action[\'allowed\']:\n+            if not action["allowed"]:\n                 continue\n-            aid = action[\'id\']\n-            cssClass = \'actionicon-object_buttons-{0}\'.format(aid)\n-            icon = action.get(\'icon\', None)\n-            modal = action.get(\'modal\', None)\n+            aid = action["id"]\n+            cssClass = "actionicon-object_buttons-{0}".format(aid)\n+            icon = action.get("icon", None)\n+            modal = action.get("modal", None)\n             if modal:\n-                cssClass += \' pat-plone-modal\'\n-\n-            results.append({\n-                \'title\': action[\'title\'],\n-                \'description\': \'\',\n-                \'action\': addTokenToUrl(action[\'url\'], request),\n-                \'selected\': False,\n-                \'icon\': icon,\n-                \'extra\': {\'id\': \'plone-contentmenu-actions-\' + aid,\n-                          \'separator\': None,\n-                          \'class\': cssClass,\n-                          \'modal\': modal},\n-                \'submenu\': None,\n-            })\n+                cssClass += " pat-plone-modal"\n+\n+            results.append(\n+                {\n+                    "title": action["title"],\n+                    "description": "",\n+                    "action": addTokenToUrl(action["url"], request),\n+                    "selected": False,\n+                    "icon": icon,\n+                    "extra": {\n+                        "id": "plone-contentmenu-actions-" + aid,\n+                        "separator": None,\n+                        "class": cssClass,\n+                        "modal": modal,\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n         return results\n \n \n @implementer(IDisplaySubMenuItem)\n class DisplaySubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u\'label_choose_template\', default=u\'Display\')\n-    submenuId = \'plone_contentmenu_display\'\n+    title = _(u"label_choose_template", default=u"Display")\n+    submenuId = "plone_contentmenu_display"\n     icon = "toolbar-action/display"\n     order = 40\n \n     def __init__(self, context, request):\n         super(DisplaySubMenuItem, self).__init__(context, request)\n         self.context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n+            (context, request), name="plone_context_state"\n         )\n \n     @property\n     def extra(self):\n         return {\n-            \'id\': \'plone-contentmenu-display\',\n-            \'disabled\': self.disabled(),\n-            \'li_class\': \'plonetoolbar-display-view\'\n+            "id": "plone-contentmenu-display",\n+            "disabled": self.disabled(),\n+            "li_class": "plonetoolbar-display-view",\n         }\n \n     @property\n     def description(self):\n         if self.disabled():\n-            return _(u\'title_remove_index_html_for_display_control\',\n-                     default=u\'Delete or rename the index_html item to gain \'\n-                             u\'full control over how this folder is \'\n-                             u\'displayed.\')\n-        return _(u\'title_choose_default_view\',\n-                 default=u\'Select the view mode for this folder, or set a \'\n-                         u\'content item as its default view.\')\n+            return _(\n+                u"title_remove_index_html_for_display_control",\n+                default=u"Delete or rename the index_html item to gain "\n+                u"full control over how this folder is "\n+                u"displayed.",\n+            )\n+        return _(\n+            u"title_choose_default_view",\n+            default=u"Select the view mode for this folder, or set a "\n+            u"content item as its default view.",\n+        )\n \n     @property\n     def action(self):\n         if self.disabled():\n-            return \'\'\n+            return ""\n         if self.context_state.is_default_page():\n-            return self.context_state.parent().absolute_url() + \\\n-                \'/select_default_view\'\n-        return self.context.absolute_url() + \'/select_default_view\'\n+            return self.context_state.parent().absolute_url() + "/select_default_view"\n+        return self.context.absolute_url() + "/select_default_view"\n \n     @memoize\n     def available(self):\n@@ -189,10 +195,7 @@ def available(self):\n \n         # If this is a default page, also get menu items relative to the parent\n         if isDefaultPage:\n-            folder = ISelectableBrowserDefault(\n-                utils.parent(self.context),\n-                None\n-            )\n+            folder = ISelectableBrowserDefault(utils.parent(self.context), None)\n \n         if folder is not None:\n             if folder.canSetDefaultPage():\n@@ -213,9 +216,9 @@ def available(self):\n \n         # we have more than one layout to choose from?\n         return (\n-            (folderCanSetLayout and len(folderLayouts) > 1) or\n-            (folder is None and contextCanSetDefaultPage) or\n-            (contextCanSetLayout and len(contextLayouts) > 1)\n+            (folderCanSetLayout and len(folderLayouts) > 1)\n+            or (folder is None and contextCanSetDefaultPage)\n+            or (contextCanSetLayout and len(contextLayouts) > 1)\n         )\n \n     def selected(self):\n@@ -228,9 +231,9 @@ def disabled(self):\n         context = self.context\n         if self.context_state.is_default_page():\n             context = utils.parent(context)\n-        if not getattr(context, \'isPrincipiaFolderish\', False):\n+        if not getattr(context, "isPrincipiaFolderish", False):\n             return False\n-        elif \'index_html\' not in context:\n+        elif "index_html" not in context:\n             return False\n         else:\n             return True\n@@ -238,14 +241,11 @@ def disabled(self):\n \n @implementer(IDisplayMenu)\n class DisplayMenu(BrowserMenu):\n-\n     def getMenuItems(self, obj, request):\n         """Return menu item entries in a TAL-friendly form."""\n         results = []\n \n-        context_state = getMultiAdapter(\n-            (obj, request), name=\'plone_context_state\'\n-        )\n+        context_state = getMultiAdapter((obj, request), name="plone_context_state")\n         isDefaultPage = context_state.is_default_page()\n \n         parent = None\n@@ -276,16 +276,21 @@ def getMenuItems(self, obj, request):\n \n         # Short circuit if neither folder nor object will provide us with\n         # items\n-        if not (folderCanSetLayout or folderCanSetDefaultPage or\n-                contextCanSetLayout or contextCanSetDefaultPage):\n+        if not (\n+            folderCanSetLayout\n+            or folderCanSetDefaultPage\n+            or contextCanSetLayout\n+            or contextCanSetDefaultPage\n+        ):\n             return []\n \n         # Only show the block \'Folder display\' and \'Item display\' separators if\n         # they are necessars\n         useSeparators = False\n         if folderCanSetLayout or folderCanSetDefaultPage:\n-            if (contextCanSetLayout and len(contextLayouts) > 1) or \\\n-                    contextCanSetDefaultPage:\n+            if (\n+                contextCanSetLayout and len(contextLayouts) > 1\n+            ) or contextCanSetDefaultPage:\n                 useSeparators = True\n \n         folder_index = 0\n@@ -294,75 +299,96 @@ def getMenuItems(self, obj, request):\n             folderUrl = parent.absolute_url()\n \n             if useSeparators:\n-                results.append({\n-                    \'title\': _(u\'label_current_folder_views\',\n-                               default=u\'Folder display\'),\n-                    \'description\': \'\',\n-                    \'action\': None,\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\'id\': \'folderHeader\',\n-                              \'separator\': \'actionSeparator\',\n-                              \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(\n+                            u"label_current_folder_views", default=u"Folder display"\n+                        ),\n+                        "description": "",\n+                        "action": None,\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "folderHeader",\n+                            "separator": "actionSeparator",\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n                 folder_index = len(results)\n \n             # Display the selected item (i.e. the context)\n-            results.insert(folder_index, {\n-                \'title\': _(u\'label_item_selected\',\n-                           default=u\'Item: ${contentitem}\',\n-                           mapping={\'contentitem\': escape(\n-                               utils.safe_unicode(obj.Title()))}),\n-                \'description\': \'\',\n-                \'action\': None,\n-                \'selected\': True,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'folderDefaultPageDisplay\',\n-                    \'separator\': None,\n-                    \'class\': \'active\'},\n-                \'submenu\': None,\n-            })\n+            results.insert(\n+                folder_index,\n+                {\n+                    "title": _(\n+                        u"label_item_selected",\n+                        default=u"Item: ${contentitem}",\n+                        mapping={\n+                            "contentitem": escape(utils.safe_unicode(obj.Title()))\n+                        },\n+                    ),\n+                    "description": "",\n+                    "action": None,\n+                    "selected": True,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "folderDefaultPageDisplay",\n+                        "separator": None,\n+                        "class": "active",\n+                    },\n+                    "submenu": None,\n+                },\n+            )\n \n             if folderCanSetLayout:\n                 for id, title in folderLayouts:\n-                    results.append({\n-                        \'title\': title,\n-                        \'description\': \'\',\n-                        \'action\': addTokenToUrl(\n-                            \'{0}/selectViewTemplate?templateId={1}\'.format(\n-                                folderUrl,\n-                                id,\n+                    results.append(\n+                        {\n+                            "title": title,\n+                            "description": "",\n+                            "action": addTokenToUrl(\n+                                "{0}/selectViewTemplate?templateId={1}".format(\n+                                    folderUrl,\n+                                    id,\n+                                ),\n+                                request,\n                             ),\n-                            request\n-                        ),\n-                        \'selected\': False,\n-                        \'icon\': None,\n-                        \'extra\': {\n-                            \'id\': \'folder-\' + id,\n-                            \'separator\': None,\n-                            \'class\': \'\'},\n-                        \'submenu\': None,\n-                    })\n+                            "selected": False,\n+                            "icon": None,\n+                            "extra": {\n+                                "id": "folder-" + id,\n+                                "separator": None,\n+                                "class": "",\n+                            },\n+                            "submenu": None,\n+                        }\n+                    )\n             # Let the user change the selection\n             if folderCanSetDefaultPage:\n-                results.append({\n-                    \'title\': _(u\'label_change_default_item\',\n-                               default=u\'Change content item as default \'\n-                                       u\'view...\'),\n-                    \'description\': _(u\'title_change_default_view_item\',\n-                                     default=u\'Change the item used as default\'\n-                                             u\' view in this folder\'),\n-                    \'action\': \'{0}/select_default_page\'.format(folderUrl),\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'folderChangeDefaultPage\',\n-                        \'separator\': None,\n-                        \'class\': \'pat-plone-modal\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(\n+                            u"label_change_default_item",\n+                            default=u"Change content item as default " u"view...",\n+                        ),\n+                        "description": _(\n+                            u"title_change_default_view_item",\n+                            default=u"Change the item used as default"\n+                            u" view in this folder",\n+                        ),\n+                        "action": "{0}/select_default_page".format(folderUrl),\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "folderChangeDefaultPage",\n+                            "separator": None,\n+                            "class": "pat-plone-modal",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         # 2. Render context options\n         item_index = 0\n@@ -373,19 +399,23 @@ def getMenuItems(self, obj, request):\n             layouts = context.getAvailableLayouts()\n \n             if useSeparators:\n-                results.append({\n-                    \'title\': _(u\'label_current_item_views\',\n-                               default=u\'Item display\'),\n-                    \'description\': \'\',\n-                    \'action\': None,\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'contextHeader\',\n-                        \'separator\': \'actionSeparator\',\n-                        \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(\n+                            u"label_current_item_views", default=u"Item display"\n+                        ),\n+                        "description": "",\n+                        "action": None,\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "contextHeader",\n+                            "separator": "actionSeparator",\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n                 item_index = len(results)\n \n             # If context is a default-page in a folder, that folder\'s views\n@@ -395,99 +425,123 @@ def getMenuItems(self, obj, request):\n \n             if showLayouts and contextCanSetLayout:\n                 for id, title in contextLayouts:\n-                    is_selected = (defaultPage is None and id == selected)\n+                    is_selected = defaultPage is None and id == selected\n                     # Selected item on top\n                     index = item_index if is_selected else len(results)\n-                    results.insert(index, {\n-                        \'title\': title,\n-                        \'description\': \'\',\n-                        \'action\': addTokenToUrl(\n-                            \'{0}/selectViewTemplate?templateId={1}\'.format(\n-                                contextUrl,\n-                                id,\n+                    results.insert(\n+                        index,\n+                        {\n+                            "title": title,\n+                            "description": "",\n+                            "action": addTokenToUrl(\n+                                "{0}/selectViewTemplate?templateId={1}".format(\n+                                    contextUrl,\n+                                    id,\n+                                ),\n+                                request,\n                             ),\n-                            request\n-                        ),\n-                        \'selected\': is_selected,\n-                        \'icon\': None,\n-                        \'extra\': {\n-                            \'id\': \'plone-contentmenu-display-\' + id,\n-                            \'separator\': None,\n-                            \'class\': is_selected and \'active\' or \'\'\n+                            "selected": is_selected,\n+                            "icon": None,\n+                            "extra": {\n+                                "id": "plone-contentmenu-display-" + id,\n+                                "separator": None,\n+                                "class": is_selected and "active" or "",\n+                            },\n+                            "submenu": None,\n                         },\n-                        \'submenu\': None,\n-                    })\n+                    )\n \n             # Allow setting / changing the default-page, unless this is a\n             # default-page in a parent folder.\n             if not INonStructuralFolder.providedBy(obj):\n                 if defaultPage is None:\n                     if contextCanSetDefaultPage:\n-                        results.append({\n-                            \'title\': _(u\'label_choose_item\',\n-                                       default=u\'Select a content item\\n\'\n-                                               u\'as default view...\'),\n-                            \'description\': _(\n-                                u\'title_select_default_view_item\',\n-                                default=u\'Select an item to be used as \'\n-                                        u\'default view in this folder...\'),\n-                            \'action\': addTokenToUrl(\n-                                \'{0}/select_default_page\'.format(contextUrl),\n-                                request),\n-                            \'selected\': False,\n-                            \'icon\': None,\n-                            \'extra\': {\n-                                \'id\': \'contextSetDefaultPage\',\n-                                \'separator\': None,\n-                                \'class\': \'pat-plone-modal\'},\n-                            \'submenu\': None,\n-                        })\n+                        results.append(\n+                            {\n+                                "title": _(\n+                                    u"label_choose_item",\n+                                    default=u"Select a content item\\n"\n+                                    u"as default view...",\n+                                ),\n+                                "description": _(\n+                                    u"title_select_default_view_item",\n+                                    default=u"Select an item to be used as "\n+                                    u"default view in this folder...",\n+                                ),\n+                                "action": addTokenToUrl(\n+                                    "{0}/select_default_page".format(contextUrl),\n+                                    request,\n+                                ),\n+                                "selected": False,\n+                                "icon": None,\n+                                "extra": {\n+                                    "id": "contextSetDefaultPage",\n+                                    "separator": None,\n+                                    "class": "pat-plone-modal",\n+                                },\n+                                "submenu": None,\n+                            }\n+                        )\n                 else:\n                     defaultPageObj = getattr(obj, defaultPage, None)\n-                    defaultPageTitle = u\'\'\n+                    defaultPageTitle = u""\n                     if defaultPageObj is not None:\n-                        if getattr(aq_base(defaultPageObj), \'Title\'):\n+                        if getattr(aq_base(defaultPageObj), "Title"):\n                             defaultPageTitle = defaultPageObj.Title()\n                         else:\n-                            defaultPageTitle = getattr(aq_base(defaultPageObj),\n-                                                       \'title\', u\'\')\n+                            defaultPageTitle = getattr(\n+                                aq_base(defaultPageObj), "title", u""\n+                            )\n \n                     # Selected item on top\n-                    results.insert(item_index, {\n-                        \'title\': _(u\'label_item_selected\',\n-                                   default=u\'Item: ${contentitem}\',\n-                                   mapping={\'contentitem\': escape(\n-                                       utils.safe_unicode(defaultPageTitle))}),\n-                        \'description\': \'\',\n-                        \'action\': None,\n-                        \'selected\': True,\n-                        \'icon\': None,\n-                        \'extra\': {\n-                            \'id\': \'contextDefaultPageDisplay\',\n-                            \'separator\': None,\n-                            \'class\': \'\'},\n-                        \'submenu\': None,\n-                    })\n-                    if contextCanSetDefaultPage:\n-                        results.append({\n-                            \'title\': _(u\'label_change_item\',\n-                                       default=u\'Change content item\\nas \'\n-                                               u\'default view...\'),\n-                            \'description\': _(\n-                                u\'title_change_default_view_item\',\n-                                default=u\'Change the item used as default \'\n-                                        u\'view in this folder\'),\n-                            \'action\': \'{0}/select_default_page\'.format(\n-                                contextUrl\n+                    results.insert(\n+                        item_index,\n+                        {\n+                            "title": _(\n+                                u"label_item_selected",\n+                                default=u"Item: ${contentitem}",\n+                                mapping={\n+                                    "contentitem": escape(\n+                                        utils.safe_unicode(defaultPageTitle)\n+                                    )\n+                                },\n                             ),\n-                            \'selected\': False,\n-                            \'icon\': None,\n-                            \'extra\': {\n-                                \'id\': \'contextChangeDefaultPage\',\n-                                \'separator\': None,\n-                                \'class\': \'pat-plone-modal\'},\n-                            \'submenu\': None,\n-                        })\n+                            "description": "",\n+                            "action": None,\n+                            "selected": True,\n+                            "icon": None,\n+                            "extra": {\n+                                "id": "contextDefaultPageDisplay",\n+                                "separator": None,\n+                                "class": "",\n+                            },\n+                            "submenu": None,\n+                        },\n+                    )\n+                    if contextCanSetDefaultPage:\n+                        results.append(\n+                            {\n+                                "title": _(\n+                                    u"label_change_item",\n+                                    default=u"Change content item\\nas "\n+                                    u"default view...",\n+                                ),\n+                                "description": _(\n+                                    u"title_change_default_view_item",\n+                                    default=u"Change the item used as default "\n+                                    u"view in this folder",\n+                                ),\n+                                "action": "{0}/select_default_page".format(contextUrl),\n+                                "selected": False,\n+                                "icon": None,\n+                                "extra": {\n+                                    "id": "contextChangeDefaultPage",\n+                                    "separator": None,\n+                                    "class": "pat-plone-modal",\n+                                },\n+                                "submenu": None,\n+                            }\n+                        )\n \n         return results\n \n@@ -495,30 +549,32 @@ def getMenuItems(self, obj, request):\n @implementer(IFactoriesSubMenuItem)\n class FactoriesSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u\'label_add_new_item\', default=u\'Add new\\u2026\')\n-    submenuId = \'plone_contentmenu_factory\'\n+    title = _(u"label_add_new_item", default=u"Add new\\u2026")\n+    submenuId = "plone_contentmenu_factory"\n     icon = "toolbar-action/factories"\n     order = 10\n-    description = _(u\'title_add_new_items_inside_item\',\n-                    default=u\'Add new items inside this item\')\n+    description = _(\n+        u"title_add_new_items_inside_item", default=u"Add new items inside this item"\n+    )\n \n     def __init__(self, context, request):\n         super(FactoriesSubMenuItem, self).__init__(context, request)\n         self.context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n+            (context, request), name="plone_context_state"\n         )\n \n     @property\n     def extra(self):\n-        return {\'id\': \'plone-contentmenu-factories\',\n-                \'li_class\': \'plonetoolbar-contenttype\'}\n+        return {\n+            "id": "plone-contentmenu-factories",\n+            "li_class": "plonetoolbar-contenttype",\n+        }\n \n     @property\n     def action(self):\n         return addTokenToUrl(\n-            \'{0}/folder_factories\'.format(self._addContext().absolute_url()),\n-            self.request\n+            "{0}/folder_factories".format(self._addContext().absolute_url()),\n+            self.request,\n         )\n \n     def available(self):\n@@ -526,7 +582,7 @@ def available(self):\n         showConstrainOptions = self._showConstrainOptions()\n         if self._addingToParent() and not self.context_state.is_default_page():\n             return False\n-        return (len(itemsToAdd) > 0 or showConstrainOptions)\n+        return len(itemsToAdd) > 0 or showConstrainOptions\n \n     def selected(self):\n         return False\n@@ -553,7 +609,7 @@ def _addableTypesInContext(self, addContext):\n     @memoize\n     def _addingToParent(self):\n         add_context_url = self._addContext().absolute_url()\n-        return (add_context_url != self.context.absolute_url())\n+        return add_context_url != self.context.absolute_url()\n \n     @memoize\n     def _showConstrainOptions(self):\n@@ -561,21 +617,19 @@ def _showConstrainOptions(self):\n         constrain = ISelectableConstrainTypes(addContext, None)\n         if constrain is None:\n             return False\n-        elif constrain.canSetConstrainTypes() and \\\n-                constrain.getDefaultAddableTypes():\n+        elif constrain.canSetConstrainTypes() and constrain.getDefaultAddableTypes():\n             return True\n-        elif len(constrain.getLocallyAllowedTypes()) < \\\n-                len(constrain.getImmediatelyAddableTypes()):\n+        elif len(constrain.getLocallyAllowedTypes()) < len(\n+            constrain.getImmediatelyAddableTypes()\n+        ):\n             return True\n \n \n @implementer(IFactoriesMenu)\n class FactoriesMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n-        factories_view = getMultiAdapter((context, request),\n-                                         name=\'folder_factories\')\n+        factories_view = getMultiAdapter((context, request), name="folder_factories")\n \n         haveMore = False\n         include = None\n@@ -592,66 +646,82 @@ def getMenuItems(self, context, request):\n         results = factories_view.addable_types(include=include)\n \n         if haveMore:\n-            url = \'{0}/folder_factories\'.format(addContext.absolute_url())\n-            results.append({\n-                \'title\': _(u\'folder_add_more\', default=u\'More\\u2026\'),\n-                \'description\': _(u\'Show all available content types\'),\n-                \'action\': url,\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'plone-contentmenu-more\',\n-                    \'separator\': None,\n-                    \'class\': \'\'},\n-                \'submenu\': None,\n-            })\n+            url = "{0}/folder_factories".format(addContext.absolute_url())\n+            results.append(\n+                {\n+                    "title": _(u"folder_add_more", default=u"More\\u2026"),\n+                    "description": _(u"Show all available content types"),\n+                    "action": url,\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "plone-contentmenu-more",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n \n         constraints = ISelectableConstrainTypes(addContext, None)\n         if constraints is not None:\n-            if constraints.canSetConstrainTypes() and \\\n-                    constraints.getDefaultAddableTypes():\n-                url = \'{0}/folder_constraintypes_form\'.format(\n+            if (\n+                constraints.canSetConstrainTypes()\n+                and constraints.getDefaultAddableTypes()\n+            ):\n+                url = "{0}/folder_constraintypes_form".format(\n                     addContext.absolute_url(),\n                 )\n-                results.append({\n-                    \'title\': _(u\'folder_add_settings\',\n-                               default=u\'Restrictions\\u2026\'),\n-                    \'description\': _(\n-                        u\'title_configure_addable_content_types\',\n-                        default=u\'Configure which content types can be \'\n-                                u\'added here\'),\n-                    \'action\': url,\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'plone-contentmenu-settings\',\n-                        \'separator\': None,\n-                        \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(\n+                            u"folder_add_settings", default=u"Restrictions\\u2026"\n+                        ),\n+                        "description": _(\n+                            u"title_configure_addable_content_types",\n+                            default=u"Configure which content types can be "\n+                            u"added here",\n+                        ),\n+                        "action": url,\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "plone-contentmenu-settings",\n+                            "separator": None,\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         # Also add a menu item to add items to the default page\n-        context_state = getMultiAdapter((context, request),\n-                                        name=\'plone_context_state\')\n-        if context_state.is_structural_folder() and \\\n-                context_state.is_default_page() and \\\n-                self._contentCanBeAdded(context, request):\n-            results.append({\n-                \'title\': _(u\'default_page_folder\',\n-                           default=u\'Add item to default page\'),\n-                \'description\': _(\n-                    u\'desc_default_page_folder\',\n-                    default=u\'If the default page is also a folder, \'\n-                            u\'add items to it from here.\'),\n-                \'action\': context.absolute_url() + \'/@@folder_factories\',\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'plone-contentmenu-add-to-default-page\',\n-                    \'separator\': None,\n-                    \'class\': \'pat-plone-modal\'},\n-                \'submenu\': None,\n-            })\n+        context_state = getMultiAdapter((context, request), name="plone_context_state")\n+        if (\n+            context_state.is_structural_folder()\n+            and context_state.is_default_page()\n+            and self._contentCanBeAdded(context, request)\n+        ):\n+            results.append(\n+                {\n+                    "title": _(\n+                        u"default_page_folder", default=u"Add item to default page"\n+                    ),\n+                    "description": _(\n+                        u"desc_default_page_folder",\n+                        default=u"If the default page is also a folder, "\n+                        u"add items to it from here.",\n+                    ),\n+                    "action": context.absolute_url() + "/@@folder_factories",\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "plone-contentmenu-add-to-default-page",\n+                        "separator": None,\n+                        "class": "pat-plone-modal",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n \n         return results\n \n@@ -668,48 +738,52 @@ def _contentCanBeAdded(self, addContext, request):\n @implementer(IWorkflowSubMenuItem)\n class WorkflowSubMenuItem(BrowserSubMenuItem):\n \n-    MANAGE_SETTINGS_PERMISSION = \'Manage portal\'\n+    MANAGE_SETTINGS_PERMISSION = "Manage portal"\n \n-    title = _(u\'label_state\', default=u\'State:\')\n-    short_title = _(u\'State\')\n+    title = _(u"label_state", default=u"State:")\n+    short_title = _(u"State")\n     icon = "toolbar-action/workflow"\n-    submenuId = \'plone_contentmenu_workflow\'\n+    submenuId = "plone_contentmenu_workflow"\n     order = 20\n \n     def __init__(self, context, request):\n         BrowserSubMenuItem.__init__(self, context, request)\n-        self.tools = getMultiAdapter((context, request), name=\'plone_tools\')\n+        self.tools = getMultiAdapter((context, request), name="plone_tools")\n         self.context = context\n-        self.context_state = getMultiAdapter((context, request),\n-                                             name=\'plone_context_state\')\n+        self.context_state = getMultiAdapter(\n+            (context, request), name="plone_context_state"\n+        )\n \n     @property\n     def extra(self):\n         state = self.context_state.workflow_state()\n         stateTitle = self._currentStateTitle()\n-        return {\'id\': \'plone-contentmenu-workflow\',\n-                \'class\': \'state-{0}\'.format(state),\n-                \'state\': state,\n-                \'stateTitle\': stateTitle,\n-                \'shortTitle\': self.short_title,\n-                \'li_class\': \'plonetoolbar-workfow-transition\'}\n+        return {\n+            "id": "plone-contentmenu-workflow",\n+            "class": "state-{0}".format(state),\n+            "state": state,\n+            "stateTitle": stateTitle,\n+            "shortTitle": self.short_title,\n+            "li_class": "plonetoolbar-workfow-transition",\n+        }\n \n     @property\n     def description(self):\n         if self._manageSettings() or len(self._transitions()) > 0:\n-            return _(u\'title_change_state_of_item\',\n-                     default=u\'Change the state of this item\')\n-        return u\'\'\n+            return _(\n+                u"title_change_state_of_item", default=u"Change the state of this item"\n+            )\n+        return u""\n \n     @property\n     def action(self):\n         if self._manageSettings() or len(self._transitions()) > 0:\n-            return self.context.absolute_url() + \'/content_status_history\'\n-        return \'\'\n+            return self.context.absolute_url() + "/content_status_history"\n+        return ""\n \n     @memoize\n     def available(self):\n-        return (self.context_state.workflow_state() is not None)\n+        return self.context_state.workflow_state() is not None\n \n     def selected(self):\n         return False\n@@ -717,11 +791,12 @@ def selected(self):\n     @memoize\n     def _manageSettings(self):\n         return self.tools.membership().checkPermission(\n-            WorkflowSubMenuItem.MANAGE_SETTINGS_PERMISSION, self.context)\n+            WorkflowSubMenuItem.MANAGE_SETTINGS_PERMISSION, self.context\n+        )\n \n     @memoize\n     def _transitions(self):\n-        wf_tool = getToolByName(self.context, \'portal_workflow\')\n+        wf_tool = getToolByName(self.context, "portal_workflow")\n         return wf_tool.listActionInfos(object=self.context, max=1)\n \n     @memoize\n@@ -743,102 +818,110 @@ class WorkflowMenu(BrowserMenu):\n     # if these are encountered.\n \n     BOGUS_WORKFLOW_ACTIONS = (\n-        \'content_hide_form\',\n-        \'content_publish_form\',\n-        \'content_reject_form\',\n-        \'content_retract_form\',\n-        \'content_show_form\',\n-        \'content_submit_form\',\n+        "content_hide_form",\n+        "content_publish_form",\n+        "content_reject_form",\n+        "content_retract_form",\n+        "content_show_form",\n+        "content_submit_form",\n     )\n \n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n         results = []\n \n-        locking_info = queryMultiAdapter((context, request),\n-                                         name=\'plone_lock_info\')\n+        locking_info = queryMultiAdapter((context, request), name="plone_lock_info")\n         if locking_info and locking_info.is_locked_for_current_user():\n             return []\n \n-        wf_tool = getToolByName(context, \'portal_workflow\')\n+        wf_tool = getToolByName(context, "portal_workflow")\n         workflowActions = wf_tool.listActionInfos(object=context)\n \n         for action in workflowActions:\n-            if action[\'category\'] != \'workflow\':\n+            if action["category"] != "workflow":\n                 continue\n \n-            cssClass = \'\'\n-            actionUrl = action[\'url\']\n-            if actionUrl == \'\':\n-                actionUrl = \'{0}/content_status_modify?workflow_action={1}\'\n+            cssClass = ""\n+            actionUrl = action["url"]\n+            if actionUrl == "":\n+                actionUrl = "{0}/content_status_modify?workflow_action={1}"\n                 actionUrl = actionUrl.format(\n                     context.absolute_url(),\n-                    action[\'id\'],\n+                    action["id"],\n                 )\n-                cssClass = \'\'\n+                cssClass = ""\n \n-            description = \'\'\n+            description = ""\n \n-            transition = action.get(\'transition\', None)\n+            transition = action.get("transition", None)\n             if transition is not None:\n                 description = transition.description\n \n-            baseUrl = \'{0}/content_status_modify?workflow_action={1}\'\n+            baseUrl = "{0}/content_status_modify?workflow_action={1}"\n             for bogus in self.BOGUS_WORKFLOW_ACTIONS:\n                 if actionUrl.endswith(bogus):\n                     if getattr(context, bogus, None) is None:\n                         actionUrl = baseUrl.format(\n                             context.absolute_url(),\n-                            action[\'id\'],\n+                            action["id"],\n                         )\n-                        cssClass = \'\'\n+                        cssClass = ""\n                     break\n \n-            if action[\'allowed\']:\n-                results.append({\n-                    \'title\': action[\'title\'],\n-                    \'description\': description,\n-                    \'action\': addTokenToUrl(actionUrl, request),\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'workflow-transition-{0}\'.format(action[\'id\']),\n-                        \'separator\': None,\n-                        \'class\': cssClass},\n-                    \'submenu\': None,\n-                })\n+            if action["allowed"]:\n+                results.append(\n+                    {\n+                        "title": action["title"],\n+                        "description": description,\n+                        "action": addTokenToUrl(actionUrl, request),\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "workflow-transition-{0}".format(action["id"]),\n+                            "separator": None,\n+                            "class": cssClass,\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         url = context.absolute_url()\n \n         if len(results) > 0:\n-            results.append({\n-                \'title\': _(u\'label_advanced\', default=u\'Advanced...\'),\n-                \'description\': \'\',\n-                \'action\': url + \'/content_status_history\',\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'workflow-transition-advanced\',\n-                    \'separator\': \'actionSeparator\',\n-                    \'class\': \'pat-plone-modal\'},\n-                \'submenu\': None,\n-            })\n-\n-        pw = getToolByName(context, \'portal_placeful_workflow\', None)\n+            results.append(\n+                {\n+                    "title": _(u"label_advanced", default=u"Advanced..."),\n+                    "description": "",\n+                    "action": url + "/content_status_history",\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "workflow-transition-advanced",\n+                        "separator": "actionSeparator",\n+                        "class": "pat-plone-modal",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n+\n+        pw = getToolByName(context, "portal_placeful_workflow", None)\n         if pw is not None:\n             if _checkPermission(ManageWorkflowPolicies, context):\n-                results.append({\n-                    \'title\': _(u\'workflow_policy\',\n-                               default=u\'Policy...\'),\n-                    \'description\': \'\',\n-                    \'action\': url + \'/placeful_workflow_configuration\',\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\'id\': \'workflow-transition-policy\',\n-                              \'separator\': None,\n-                              \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(u"workflow_policy", default=u"Policy..."),\n+                        "description": "",\n+                        "action": url + "/placeful_workflow_configuration",\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "workflow-transition-policy",\n+                            "separator": None,\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         return results\n \n@@ -846,44 +929,45 @@ def getMenuItems(self, context, request):\n @implementer(IPortletManagerSubMenuItem)\n class PortletManagerSubMenuItem(BrowserSubMenuItem):\n \n-    MANAGE_SETTINGS_PERMISSION = \'Portlets: Manage portlets\'\n+    MANAGE_SETTINGS_PERMISSION = "Portlets: Manage portlets"\n \n-    title = _(u\'manage_portlets_link\', default=u\'Manage portlets\')\n-    submenuId = \'plone_contentmenu_portletmanager\'\n+    title = _(u"manage_portlets_link", default=u"Manage portlets")\n+    submenuId = "plone_contentmenu_portletmanager"\n     icon = "toolbar-action/portlets"\n     order = 50\n \n     def __init__(self, context, request):\n         BrowserSubMenuItem.__init__(self, context, request)\n         self.context = context\n-        self.context_state = getMultiAdapter((context, request),\n-                                             name=\'plone_context_state\')\n+        self.context_state = getMultiAdapter(\n+            (context, request), name="plone_context_state"\n+        )\n \n     @property\n     def extra(self):\n-        return {\'id\': \'plone-contentmenu-portletmanager\',\n-                \'li_class\': \'plonetoolbar-portlet-manager\'}\n+        return {\n+            "id": "plone-contentmenu-portletmanager",\n+            "li_class": "plonetoolbar-portlet-manager",\n+        }\n \n     @property\n     def description(self):\n         if self._manageSettings():\n             return _(\n-                u\'title_change_portlets\',\n-                default=u\'Change the portlets of this item\'\n+                u"title_change_portlets", default=u"Change the portlets of this item"\n             )\n         else:\n-            return u\'\'\n+            return u""\n \n     @property\n     def action(self):\n-        return self.context.absolute_url() + \'/manage-portlets\'\n+        return self.context.absolute_url() + "/manage-portlets"\n \n     @memoize\n     def available(self):\n         secman = getSecurityManager()\n         has_manage_portlets_permission = secman.checkPermission(\n-            \'Portlets: Manage portlets\',\n-            self.context\n+            "Portlets: Manage portlets", self.context\n         )\n         if not has_manage_portlets_permission:\n             return False\n@@ -897,44 +981,41 @@ def selected(self):\n     def _manageSettings(self):\n         secman = getSecurityManager()\n         has_manage_portlets_permission = secman.checkPermission(\n-            self.MANAGE_SETTINGS_PERMISSION,\n-            self.context\n+            self.MANAGE_SETTINGS_PERMISSION, self.context\n         )\n         return has_manage_portlets_permission\n \n \n @implementer(IPortletManagerMenu)\n class PortletManagerMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n         items = []\n         sm = getSecurityManager()\n         # Bail out if the user can\'t manage portlets\n         if not sm.checkPermission(\n-                PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION,\n-                context\n+            PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION, context\n         ):\n             return items\n         blacklist = getUtility(IRegistry).get(\n-            \'plone.app.portlets.PortletManagerBlacklist\', [])\n+            "plone.app.portlets.PortletManagerBlacklist", []\n+        )\n         managers = getUtilitiesFor(IPortletManager)\n         current_url = context.absolute_url()\n \n-        items.append({\n-            \'title\': _(u\'manage_all_portlets\', default=u\'All\xe2\x80\xa6\'),\n-            \'description\': \'Manage all portlets\',\n-            \'action\': addTokenToUrl(\n-                \'{0}/manage-portlets\'.format(\n-                    current_url),\n-                request),\n-            \'selected\': False,\n-            \'icon\': None,\n-            \'extra\': {\n-                \'id\': \'portlet-manager-all\',\n-                \'separator\': None},\n-            \'submenu\': None,\n-        })\n+        items.append(\n+            {\n+                "title": _(u"manage_all_portlets", default=u"All\xe2\x80\xa6"),\n+                "description": "Manage all portlets",\n+                "action": addTokenToUrl(\n+                    "{0}/manage-portlets".format(current_url), request\n+                ),\n+                "selected": False,\n+                "icon": None,\n+                "extra": {"id": "portlet-manager-all", "separator": None},\n+                "submenu": None,\n+            }\n+        )\n \n         for manager in managers:\n             manager_name = manager[0]\n@@ -942,21 +1023,24 @@ def getMenuItems(self, context, request):\n             if manager_name in blacklist:\n                 continue\n             item = {\n-                \'title\': PMF(manager_name,\n-                           default=u\' \'.join(manager_name.split(u\'.\')).title()),\n-                \'description\': manager_name,\n-                \'action\': addTokenToUrl(\n-                    \'{0}/@@topbar-manage-portlets/{1}\'.format(\n-                        current_url,\n-                        manager_name),\n-                    request),\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'portlet-manager-{0}\'.format(manager_name),\n-                    \'separator\': None},\n-                \'submenu\': None,\n+                "title": PMF(\n+                    manager_name, default=u" ".join(manager_name.split(u".")).title()\n+                ),\n+                "description": manager_name,\n+                "action": addTokenToUrl(\n+                    "{0}/@@topbar-manage-portlets/{1}".format(\n+                        current_url, manager_name\n+                    ),\n+                    request,\n+                ),\n+                "selected": False,\n+                "icon": None,\n+                "extra": {\n+                    "id": "portlet-manager-{0}".format(manager_name),\n+                    "separator": None,\n+                },\n+                "submenu": None,\n             }\n \n             items.append(item)\n-        return sorted(items, key=itemgetter(\'title\'))\n+        return sorted(items, key=itemgetter("title"))\ndiff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py\nindex a143298..2f4bf95 100644\n--- a/plone/app/contentmenu/testing.py\n+++ b/plone/app/contentmenu/testing.py\n@@ -14,24 +14,25 @@ class PloneAppContentmenu(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.contentmenu\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.contentmenu,\n-                       context=configurationContext)\n+\n+        xmlconfig.file(\n+            "configure.zcml", plone.app.contentmenu, context=configurationContext\n+        )\n \n \n PLONE_APP_CONTENTMENU_FIXTURE = PloneAppContentmenu()\n PLONE_APP_CONTENTMENU_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),\n-    name=\'PloneAppContentmenu:Integration\')\n+    bases=(PLONE_APP_CONTENTMENU_FIXTURE,), name="PloneAppContentmenu:Integration"\n+)\n PLONE_APP_CONTENTMENU_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),\n-    name=\'PloneAppContentmenu:Functional\')\n+    bases=(PLONE_APP_CONTENTMENU_FIXTURE,), name="PloneAppContentmenu:Functional"\n+)\n \n \n # Dexterity test layers\n PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name=\'PloneAppContentmenuDX:Integration\')\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentmenuDX:Integration"\n+)\n PLONE_APP_CONTENTMENU_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name=\'PloneAppContentmenuDX:Functional\')\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentmenuDX:Functional"\n+)\ndiff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py\nindex 085ede4..5817e74 100644\n--- a/plone/app/contentmenu/tests/test_menu.py\n+++ b/plone/app/contentmenu/tests/test_menu.py\n@@ -4,7 +4,9 @@\n from plone.app.contentmenu.interfaces import IFactoriesMenu\n from plone.app.contentmenu.interfaces import IPortletManagerMenu\n from plone.app.contentmenu.interfaces import IWorkflowMenu\n-from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING  # noqa\n+from plone.app.contentmenu.testing import (\n+    PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING,\n+)  # noqa\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n@@ -24,8 +26,8 @@\n from zope.interface import directlyProvides\n \n import pkg_resources\n-import unittest\n import six\n+import unittest\n \n \n class TestActionsMenu(unittest.TestCase):\n@@ -33,14 +35,14 @@ class TestActionsMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_actions\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n+            IBrowserMenu, name="plone_contentmenu_actions", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     def test_actionsMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -51,8 +53,7 @@ def test_actionsMenuImplementsIActionsMenu(self):\n     def test_actionsMenuFindsActions(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertTrue(\n-            \'plone-contentmenu-actions-copy\'\n-            in [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-actions-copy" in [a["extra"]["id"] for a in actions]\n         )\n \n \n@@ -60,15 +61,15 @@ class TestDisplayMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_display\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_display", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n+        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testActionsMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -80,208 +81,199 @@ def testActionsMenuImplementsIActionsMenu(self):\n \n     def testTemplatesIncluded(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        templates = [a[\'extra\'][\'id\'] for a in actions]\n+        templates = [a["extra"]["id"] for a in actions]\n         self.assertTrue(\n-            \'plone-contentmenu-display-folder_listing\' in templates or\n-            \'plone-contentmenu-display-listing_view\' in templates\n+            "plone-contentmenu-display-folder_listing" in templates\n+            or "plone-contentmenu-display-listing_view" in templates\n             # plone.app.contenttypes has unified views\n         )\n \n     def testSingleTemplateIncluded(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n         if self.is_dx:\n             set_browserlayer(self.request)\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertEqual(len(actions), 1)\n         self.assertEqual(\n-            actions[0][\'extra\'][\'id\'],\n-            \'plone-contentmenu-display-document_view\'\n+            actions[0]["extra"]["id"], "plone-contentmenu-display-document_view"\n         )\n \n     def testNonBrowserDefaultReturnsNothing(self):\n         f = dummy.Folder()\n-        self.folder._setObject(\'f1\', f)\n+        self.folder._setObject("f1", f)\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n         self.assertEqual(len(actions), 0)\n \n     def testDefaultPageIncludesParentOnlyWhenItemHasSingleView(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertIn(\n-            \'folderDefaultPageDisplay\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "folderDefaultPageDisplay",\n+            [a["extra"]["id"] for a in actions],\n         )\n         self.assertNotIn(\n-            \'document_view\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "document_view",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n     def testDefaultPageIncludesParentAndItemViewsWhenItemHasMultipleViews(self):  # noqa\n-        fti = self.portal.portal_types[\'Document\']\n+        fti = self.portal.portal_types["Document"]\n         if self.is_dx:\n-            documentViews = fti.view_methods + (\'content-core\',)\n+            documentViews = fti.view_methods + ("content-core",)\n             set_browserlayer(self.request)\n         else:\n-            documentViews = fti.view_methods + (\'base_view\',)\n+            documentViews = fti.view_methods + ("base_view",)\n         fti.manage_changeProperties(view_methods=documentViews)\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n+        self.assertIn("folderDefaultPageDisplay", [a["extra"]["id"] for a in actions])\n         self.assertIn(\n-            \'folderDefaultPageDisplay\',\n-            [a[\'extra\'][\'id\'] for a in actions]\n-        )\n-        self.assertIn(\n-            \'plone-contentmenu-display-document_view\',\n-            [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-display-document_view",\n+            [a["extra"]["id"] for a in actions],\n         )\n         if self.is_dx:\n             self.assertIn(\n-                \'plone-contentmenu-display-content-core\',\n-                [a[\'extra\'][\'id\'] for a in actions]\n+                "plone-contentmenu-display-content-core",\n+                [a["extra"]["id"] for a in actions],\n             )\n         else:\n             self.assertIn(\n-                \'plone-contentmenu-display-base_view\',\n-                [a[\'extra\'][\'id\'] for a in actions]\n+                "plone-contentmenu-display-base_view",\n+                [a["extra"]["id"] for a in actions],\n             )\n \n     def testCurrentTemplateSelected(self):\n         self.folder.getLayout()\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        selected = [a[\'extra\'][\'id\'] for a in actions if a[\'selected\']]\n+        selected = [a["extra"]["id"] for a in actions if a["selected"]]\n         self.assertTrue(\n-            selected == [\'plone-contentmenu-display-folder_listing\'] or\n-            selected == [\'plone-contentmenu-display-listing_view\']\n+            selected == ["plone-contentmenu-display-folder_listing"]\n+            or selected == ["plone-contentmenu-display-listing_view"]\n             # plone.app.contenttypes has unified views\n         )\n \n     # Default-page selection\n \n     def testFolderCanSetDefaultPage(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.folder.invokeFactory("Folder", "f1")\n         self.assertTrue(self.folder.f1.canSetDefaultPage())\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n-        self.assertTrue(\'contextSetDefaultPage\' in\n-                        [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertTrue("contextSetDefaultPage" in [a["extra"]["id"] for a in actions])\n \n     def testWithCanSetDefaultPageFalse(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n-        self.folder.f1.manage_permission(\'Modify view template\', (\'Manager\',))\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.folder.invokeFactory("Folder", "f1")\n+        self.folder.f1.manage_permission("Modify view template", ("Manager",))\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n         self.assertFalse(self.folder.f1.canSetDefaultPage())\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n-        self.assertNotIn(\n-            \'contextSetDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions]\n-        )\n+        self.assertNotIn("contextSetDefaultPage", [a["extra"]["id"] for a in actions])\n \n     def testSelectItemNotIncludedInNonStructuralFolder(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.folder.invokeFactory("Folder", "f1")\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n         self.assertNotIn(\n-            \'contextSetDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "contextSetDefaultPage",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n     def testDefaultPageSelectedAndOverridesLayout(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        selected = [a[\'extra\'][\'id\'] for a in actions if a[\'selected\']]\n-        self.assertEqual(selected, [\'contextDefaultPageDisplay\'])\n+        selected = [a["extra"]["id"] for a in actions if a["selected"]]\n+        self.assertEqual(selected, ["contextDefaultPageDisplay"])\n \n     def testDefaultPageCanBeChangedInContext(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertTrue(\'contextChangeDefaultPage\' in\n-                        [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertTrue(\n+            "contextChangeDefaultPage" in [a["extra"]["id"] for a in actions]\n+        )\n \n     def testDefaultPageCanBeChangedInFolder(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertIn(\n-            \'folderChangeDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "folderChangeDefaultPage",\n+            [a["extra"]["id"] for a in actions],\n         )\n         self.assertNotIn(\n-            \'contextChangeDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "contextChangeDefaultPage",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n     # Headers/separators\n \n     def testSeparatorsIncludedWhenViewingDefaultPageWithViews(self):\n-        fti = self.portal.portal_types[\'Document\']\n+        fti = self.portal.portal_types["Document"]\n         if self.is_dx:\n-            documentViews = fti.view_methods + (\'content-core\',)\n+            documentViews = fti.view_methods + ("content-core",)\n             set_browserlayer(self.request)\n         else:\n-            documentViews = fti.view_methods + (\'base_view\',)\n+            documentViews = fti.view_methods + ("base_view",)\n         fti.manage_changeProperties(view_methods=documentViews)\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertTrue(\'folderHeader\' in ids)\n-        self.assertTrue(\'contextHeader\' in ids)\n+        ids = [a["extra"]["id"] for a in actions]\n+        self.assertTrue("folderHeader" in ids)\n+        self.assertTrue("contextHeader" in ids)\n \n     def testSeparatorsNotIncludedWhenViewingDefaultPageWithoutViews(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         if self.is_dx:\n             set_browserlayer(self.request)\n         self.assertEqual(len(self.folder.doc1.getAvailableLayouts()), 1)\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertFalse(\'folderHeader\' in ids)\n-        self.assertFalse(\'contextHeader\' in ids)\n+        ids = [a["extra"]["id"] for a in actions]\n+        self.assertFalse("folderHeader" in ids)\n+        self.assertFalse("contextHeader" in ids)\n \n     def testSeparatorsNotDisplayedWhenViewingFolder(self):\n-        fti = self.portal.portal_types[\'Document\']\n-        documentViews = fti.view_methods + (\'base_view\',)\n+        fti = self.portal.portal_types["Document"]\n+        documentViews = fti.view_methods + ("base_view",)\n         fti.manage_changeProperties(view_methods=documentViews)\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertFalse(\'folderHeader\' in ids)\n-        self.assertFalse(\'contextHeader\' in ids)\n+        ids = [a["extra"]["id"] for a in actions]\n+        self.assertFalse("folderHeader" in ids)\n+        self.assertFalse("contextHeader" in ids)\n \n     # Regressions\n \n     def testDefaultPageTemplateTitle(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.doc1.setTitle(\'New Document\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.doc1.setTitle("New Document")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        changeAction = [x for x in actions if\n-                        x[\'extra\'][\'id\'] == \'contextDefaultPageDisplay\'][0]\n-        changeAction[\'title\'].default\n-        self.assertEqual(\n-            u\'New Document\',\n-            changeAction[\'title\'].mapping[\'contentitem\']\n-        )\n+        changeAction = [\n+            x for x in actions if x["extra"]["id"] == "contextDefaultPageDisplay"\n+        ][0]\n+        changeAction["title"].default\n+        self.assertEqual(u"New Document", changeAction["title"].mapping["contentitem"])\n \n \n class TestFactoriesMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.folder.invokeFactory("Document", "doc1")\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_factory\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_factory", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n+        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -291,23 +283,24 @@ def testMenuImplementsIFactoriesMenu(self):\n \n     def testMenuIncludesFactories(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertIn(\'image\', [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertIn("image", [a["extra"]["id"] for a in actions])\n \n     def testAddViewExpressionUsedInMenu(self):\n         self.folder\n-        self.portal.portal_types[\'Image\']._setPropValue(\n-            \'add_view_expr\', \'string:custom_expr\')\n+        self.portal.portal_types["Image"]._setPropValue(\n+            "add_view_expr", "string:custom_expr"\n+        )\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        urls = [a[\'action\'] for a in actions]\n-        self.assertIn(\'custom_expr\', urls)\n+        urls = [a["action"] for a in actions]\n+        self.assertIn("custom_expr", urls)\n         if self.is_dx:\n             self.assertIn(\n-                \'{0}/++add++File\'.format(self.folder.absolute_url()),\n+                "{0}/++add++File".format(self.folder.absolute_url()),\n                 urls,\n             )\n         else:\n             found = False\n-            create_url = \'{0}/createObject?type_name=File\'\n+            create_url = "{0}/createObject?type_name=File"\n             create_url = create_url.format(self.folder.absolute_url())\n             for url in urls:\n                 if create_url in url:\n@@ -318,19 +311,20 @@ def testFrontPageExpressionContext(self):\n         # If the expression context uses the front-page instead of the\n         # folder using the front-page, then the expression values will\n         # be incorrect.\n-        self.portal.portal_types[\'Event\']._setPropValue(\n-            \'add_view_expr\', \'string:${folder_url}/+/addATEvent\')\n-        self.folder.invokeFactory(\'Collection\', \'aggregator\')\n-        aggregator = self.folder[\'aggregator\']\n-        self.folder.setDefaultPage(\'aggregator\')\n+        self.portal.portal_types["Event"]._setPropValue(\n+            "add_view_expr", "string:${folder_url}/+/addATEvent"\n+        )\n+        self.folder.invokeFactory("Collection", "aggregator")\n+        aggregator = self.folder["aggregator"]\n+        self.folder.setDefaultPage("aggregator")\n         actions = self.menu.getMenuItems(aggregator, self.request)\n         self.assertTrue(\n-            \'http://nohost/plone/folder/+/addATEvent\' in\n-            [a[\'action\'] for a in actions]\n+            "http://nohost/plone/folder/+/addATEvent" in [a["action"] for a in actions]\n         )\n         self.assertFalse(\n-            \'http://nohost/plone/folder/aggregator/+/addATEvent\' in\n-            [a[\'action\'] for a in actions])\n+            "http://nohost/plone/folder/aggregator/+/addATEvent"\n+            in [a["action"] for a in actions]\n+        )\n \n     def testTypeNameIsURLQuoted(self):\n         if self.is_dx:\n@@ -338,8 +332,10 @@ def testTypeNameIsURLQuoted(self):\n             return\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         found = False\n-        for url in [a[\'action\'] for a in actions]:\n-            if self.folder.absolute_url() + \'/createObject?type_name=News+Item\' in url:  # noqa\n+        for url in [a["action"] for a in actions]:\n+            if (\n+                self.folder.absolute_url() + "/createObject?type_name=News+Item" in url\n+            ):  # noqa\n                 found = True\n         self.assertTrue(found)\n \n@@ -347,11 +343,11 @@ def testMenuIncludesFactoriesOnNonFolderishContext(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         img = None\n         for a in actions:\n-            if a[\'extra\'][\'id\'] == \'image\':\n+            if a["extra"]["id"] == "image":\n                 img = a\n                 break\n         self.assertFalse(img is None)\n-        action = img[\'action\']\n+        action = img["action"]\n         url = self.folder.absolute_url()\n         self.assertTrue(action.startswith(url))\n         url = self.folder.doc1.absolute_url()\n@@ -365,159 +361,165 @@ def testNoAddableTypes(self):\n             self.assertEqual(len(actions), 9)\n \n         # set no types for folders and check the menu is not shown\n-        folder_fti = self.portal.portal_types[\'Folder\']\n+        folder_fti = self.portal.portal_types["Folder"]\n         folder_fti.manage_changeProperties(\n-            filter_content_types=True, allowed_content_types=[])\n+            filter_content_types=True, allowed_content_types=[]\n+        )\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(len(actions), 0)\n \n     def testMenuForFolderishDefaultPages(self):\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        self.portal.invokeFactory(\'Folder\', \'folder3\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        folder1 = self.portal[\'folder1\']\n-        folder2 = self.portal[\'folder2\']\n-        folder3 = self.portal[\'folder3\']\n-        doc1 = self.portal[\'doc1\']\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Folder", "folder2")\n+        self.portal.invokeFactory("Folder", "folder3")\n+        self.portal.invokeFactory("Document", "doc1")\n+        folder1 = self.portal["folder1"]\n+        folder2 = self.portal["folder2"]\n+        folder3 = self.portal["folder3"]\n+        doc1 = self.portal["doc1"]\n \n         # test normal folder\n         actions = self.menu.getMenuItems(folder1, self.request)\n         self.assertEqual(\n-            \'http://nohost/plone/folder1/folder_constraintypes_form\',\n-            actions[-1][\'action\'])\n+            "http://nohost/plone/folder1/folder_constraintypes_form",\n+            actions[-1]["action"],\n+        )\n         if self.is_dx:\n             # DX has no Topics\n             self.assertEqual(len(actions), 9)\n             self.assertEqual(\n-                \'http://nohost/plone/folder1/++add++Document\',\n-                actions[-2][\'action\'])\n+                "http://nohost/plone/folder1/++add++Document", actions[-2]["action"]\n+            )\n         else:\n             self.assertEqual(len(actions), 10)\n             self.assertTrue(\n-                \'http://nohost/plone/folder1/createObject?type_name=Document\' in actions[-2][\'action\'])  # noqa\n+                "http://nohost/plone/folder1/createObject?type_name=Document"\n+                in actions[-2]["action"]\n+            )  # noqa\n \n         # test non-folderish default_page\n-        self.portal.setDefaultPage(\'doc1\')\n+        self.portal.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(doc1, self.request)\n         if self.is_dx:\n             self.assertEqual(\n-                \'http://nohost/plone/++add++Document\',\n-                actions[-1][\'action\'])\n+                "http://nohost/plone/++add++Document", actions[-1]["action"]\n+            )\n         else:\n             self.assertTrue(\n-                \'http://nohost/plone/createObject?type_name=Document\' in actions[-1][\'action\'])  # noqa\n+                "http://nohost/plone/createObject?type_name=Document"\n+                in actions[-1]["action"]\n+            )  # noqa\n \n         # test folderish default_page\n         # We need to test a different folder than folder1 to beat memoize.\n-        self.portal.setDefaultPage(\'folder2\')\n+        self.portal.setDefaultPage("folder2")\n         actions = self.menu.getMenuItems(folder2, self.request)\n         self.assertEqual(\n-            \'http://nohost/plone/folder2/@@folder_factories\',\n-            actions[-1][\'action\'])\n+            "http://nohost/plone/folder2/@@folder_factories", actions[-1]["action"]\n+        )\n \n         # test folderish default_page to which no content can be added\n         # set no types for folders and check the link to factories menu-item\n         # is not shown\n-        folder_fti = self.portal.portal_types[\'Folder\']\n+        folder_fti = self.portal.portal_types["Folder"]\n         folder_fti.manage_changeProperties(\n-            filter_content_types=True, allowed_content_types=[])\n-        self.portal.setDefaultPage(\'folder3\')\n+            filter_content_types=True, allowed_content_types=[]\n+        )\n+        self.portal.setDefaultPage("folder3")\n         actions = self.menu.getMenuItems(folder3, self.request)\n         if self.is_dx:\n             self.assertEqual(\n-                \'http://nohost/plone/++add++Document\',\n-                actions[-1][\'action\'])\n+                "http://nohost/plone/++add++Document", actions[-1]["action"]\n+            )\n         else:\n             self.assertTrue(\n-                \'http://nohost/plone/createObject?type_name=Document\' in actions[-1][\'action\'])  # noqa\n+                "http://nohost/plone/createObject?type_name=Document"\n+                in actions[-1]["action"]\n+            )  # noqa\n \n     def testConstrainTypes(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(len(actions), 2)\n-        self.assertEqual(actions[0][\'extra\'][\'id\'], \'document\')\n-        self.assertEqual(\n-            actions[1][\'extra\'][\'id\'], \'plone-contentmenu-settings\'\n-        )\n+        self.assertEqual(actions[0]["extra"]["id"], "document")\n+        self.assertEqual(actions[1]["extra"]["id"], "plone-contentmenu-settings")\n \n     def testSettingsIncluded(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertEqual(\n-            actions[-1][\'extra\'][\'id\'], \'plone-contentmenu-settings\'\n-        )\n+        self.assertEqual(actions[-1]["extra"]["id"], "plone-contentmenu-settings")\n \n     def testSettingsNotIncludedWhereNotSupported(self):\n-        self.folder.manage_permission(\'Modify constrain types\', (\'Manager\',))\n+        self.folder.manage_permission("Modify constrain types", ("Manager",))\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertFalse(\'_settings\' in [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertFalse("_settings" in [a["extra"]["id"] for a in actions])\n \n     def testMoreIncluded(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\', \'Image\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n-        actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertFalse(\'image\' in [a[\'extra\'][\'id\'] for a in actions])\n-        self.assertTrue(\'document\' in [a[\'extra\'][\'id\'] for a in actions])\n-        self.assertTrue(\n-            \'plone-contentmenu-more\' in [a[\'extra\'][\'id\'] for a in actions]\n+        constraints.setLocallyAllowedTypes(\n+            (\n+                "Document",\n+                "Image",\n+            )\n         )\n+        constraints.setImmediatelyAddableTypes(("Document",))\n+        actions = self.menu.getMenuItems(self.folder, self.request)\n+        self.assertFalse("image" in [a["extra"]["id"] for a in actions])\n+        self.assertTrue("document" in [a["extra"]["id"] for a in actions])\n+        self.assertTrue("plone-contentmenu-more" in [a["extra"]["id"] for a in actions])\n         self.assertTrue(\n-            \'plone-contentmenu-settings\' in [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-settings" in [a["extra"]["id"] for a in actions]\n         )\n \n     def testMoreNotIncludedWhenNotNecessary(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(len(actions), 2)\n-        self.assertEqual(actions[0][\'extra\'][\'id\'], \'document\')\n-        self.assertEqual(\n-            actions[1][\'extra\'][\'id\'], \'plone-contentmenu-settings\'\n-        )\n+        self.assertEqual(actions[0]["extra"]["id"], "document")\n+        self.assertEqual(actions[1]["extra"]["id"], "plone-contentmenu-settings")\n \n     def testNonStructualFolderShowsParent(self):\n-        self.folder.invokeFactory(\'Folder\', \'folder1\')\n+        self.folder.invokeFactory("Folder", "folder1")\n         directlyProvides(self.folder.folder1, INonStructuralFolder)\n         constraints = ISelectableConstrainTypes(self.folder.folder1)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n         actions = self.menu.getMenuItems(self.folder.folder1, self.request)\n-        action_ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertTrue(\'event\' in action_ids)\n+        action_ids = [a["extra"]["id"] for a in actions]\n+        self.assertTrue("event" in action_ids)\n \n     def testImgConditionalOnTypeIcon(self):\n         """The <img> element should not render if the content type has\n         no icon expression"""\n-        folder_fti = self.portal.portal_types[\'Folder\']\n-        folder_fti.manage_changeProperties(icon_expr=\'\')\n+        folder_fti = self.portal.portal_types["Folder"]\n+        folder_fti.manage_changeProperties(icon_expr="")\n         for item in self.menu.getMenuItems(self.folder, self.request):\n-            if item[\'id\'] == folder_fti.getId():\n+            if item["id"] == folder_fti.getId():\n                 break\n-        self.assertFalse(item[\'icon\'])\n+        self.assertFalse(item["icon"])\n \n \n class TestWorkflowMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.folder.invokeFactory("Document", "doc1")\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_workflow\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_workflow", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n+        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -527,13 +529,14 @@ def testMenuImplementsIActionsMenu(self):\n \n     def testMenuIncludesActions(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertIn(\'workflow-transition-submit\',\n-                      [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertIn("workflow-transition-submit", [a["extra"]["id"] for a in actions])\n         found = False\n         for item in actions:\n-            if (\'http://nohost/plone/folder/doc1/\'\n-                    \'content_status_modify?\'\n-                    \'workflow_action=submit\') in item[\'action\']:\n+            if (\n+                "http://nohost/plone/folder/doc1/"\n+                "content_status_modify?"\n+                "workflow_action=submit"\n+            ) in item["action"]:\n                 found = True\n                 break\n         self.assertTrue(found)\n@@ -542,17 +545,20 @@ def testMenuIncludesActions(self):\n         # usual in older workflows, and which is nice to keep\n         # supporting.\n         context = self.folder.doc1\n-        wf_tool = getToolByName(context, \'portal_workflow\')\n-        submit = wf_tool.plone_workflow.transitions[\'submit\']\n-        submit.actbox_url = \'\'\n+        wf_tool = getToolByName(context, "portal_workflow")\n+        submit = wf_tool.plone_workflow.transitions["submit"]\n+        submit.actbox_url = ""\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertTrue(\'workflow-transition-submit\' in\n-                        [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertTrue(\n+            "workflow-transition-submit" in [a["extra"]["id"] for a in actions]\n+        )\n         found = False\n         for item in actions:\n-            if (\'http://nohost/plone/folder/doc1/\'\n-                    \'content_status_modify?\'\n-                    \'workflow_action=submit\') in item[\'action\']:\n+            if (\n+                "http://nohost/plone/folder/doc1/"\n+                "content_status_modify?"\n+                "workflow_action=submit"\n+            ) in item["action"]:\n                 found = True\n                 break\n         self.assertTrue(found)\n@@ -567,49 +573,48 @@ def testLockedItem(self):\n             # dexterity has no locking ootb\n             # see https://github.com/plone/plone.app.contenttypes/issues/140\n             return\n-        membership_tool = getToolByName(self.folder, \'portal_membership\')\n-        membership_tool.addMember(\'anotherMember\', \'secret\', [\'Member\'], [])\n+        membership_tool = getToolByName(self.folder, "portal_membership")\n+        membership_tool.addMember("anotherMember", "secret", ["Member"], [])\n         locking = ILockable(self.folder.doc1)\n         locking.lock()\n-        login(self.portal, \'anotherMember\')\n+        login(self.portal, "anotherMember")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertEqual(len(actions), 0)\n \n     def testAdvancedIncluded(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        url = self.folder.doc1.absolute_url() + \'/content_status_history\'\n-        self.assertIn(url, [a[\'action\'] for a in actions])\n+        url = self.folder.doc1.absolute_url() + "/content_status_history"\n+        self.assertIn(url, [a["action"] for a in actions])\n \n     def testPolicyIncludedIfCMFPWIsInstalled(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        url = self.folder.doc1.absolute_url()\\\n-            + \'/placeful_workflow_configuration\'\n-        self.assertFalse(url in [a[\'action\'] for a in actions])\n+        url = self.folder.doc1.absolute_url() + "/placeful_workflow_configuration"\n+        self.assertFalse(url in [a["action"] for a in actions])\n         qi = get_installer(self.portal)\n-        qi.install_product(\'Products.CMFPlacefulWorkflow\')\n+        qi.install_product("Products.CMFPlacefulWorkflow")\n \n         # item needs permission\n         logout()\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertNotIn(url, [a[\'action\'] for a in actions])\n+        self.assertNotIn(url, [a["action"] for a in actions])\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertNotIn(url, [a[\'action\'] for a in actions])\n+        self.assertNotIn(url, [a["action"] for a in actions])\n \n \n class TestManagePortletsMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.folder.invokeFactory("Document", "doc1")\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_portletmanager\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_portletmanager", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n+        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -619,13 +624,16 @@ def testMenuImplementsIActionsMenu(self):\n \n     def testMenuIncludesActions(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        extra_ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertIn(\'portlet-manager-plone.leftcolumn\', extra_ids)\n-        urls = [a[\'action\'].split(\'?_authenticator\')[0] for a in actions]\n+        extra_ids = [a["extra"]["id"] for a in actions]\n+        self.assertIn("portlet-manager-plone.leftcolumn", extra_ids)\n+        urls = [a["action"].split("?_authenticator")[0] for a in actions]\n         self.assertIn(\n-            (\'http://nohost/plone/folder/doc1\'\n-             \'/@@topbar-manage-portlets/plone.leftcolumn\'),\n-            urls)\n+            (\n+                "http://nohost/plone/folder/doc1"\n+                "/@@topbar-manage-portlets/plone.leftcolumn"\n+            ),\n+            urls,\n+        )\n \n     def testNoTransitions(self):\n         logout()\n@@ -635,10 +643,10 @@ def testNoTransitions(self):\n     def testAdvancedIncluded(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         base_url = self.folder.doc1.absolute_url()\n-        url_plone5 = \'{0}/@@topbar-manage-portlets/plone.leftcolumn\'\n+        url_plone5 = "{0}/@@topbar-manage-portlets/plone.leftcolumn"\n         url_plone5 = url_plone5.format(base_url)\n-        url_plone4 = \'{0}/manage-portlets\'.format(base_url)\n-        urls = [a[\'action\'].split(\'?_authenticator\')[0] for a in actions]\n+        url_plone4 = "{0}/manage-portlets".format(base_url)\n+        urls = [a["action"].split("?_authenticator")[0] for a in actions]\n         self.assertIn(url_plone5, urls)\n         self.assertIn(url_plone4, urls)\n \n@@ -647,35 +655,41 @@ class TestContentMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n         # self.folder.invokeFactory(\'Document\', \'doc1\')\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu\', context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n+        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     # Actions sub-menu\n \n     def testActionsSubMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n-        actionsMenuItem = [i for i in items if\n-                           i[\'extra\'][\'id\'] == \'plone-contentmenu-actions\'][0]\n-        self.assertEqual(actionsMenuItem[\'action\'],\n-                         self.folder.absolute_url() + \'/folder_contents\')\n-        self.assertTrue(len(actionsMenuItem[\'submenu\']) > 0)\n+        actionsMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-actions"\n+        ][0]\n+        self.assertEqual(\n+            actionsMenuItem["action"], self.folder.absolute_url() + "/folder_contents"\n+        )\n+        self.assertTrue(len(actionsMenuItem["submenu"]) > 0)\n \n     # Display sub-menu\n \n     def testDisplayMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n-        displayMenuItem = [i for i in items if\n-                           i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'][0]\n-        self.assertEqual(displayMenuItem[\'action\'],\n-                         self.folder.absolute_url() + \'/select_default_view\')\n-        self.assertTrue(len(displayMenuItem[\'submenu\']) > 0)\n+        displayMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ][0]\n+        self.assertEqual(\n+            displayMenuItem["action"],\n+            self.folder.absolute_url() + "/select_default_view",\n+        )\n+        self.assertTrue(len(displayMenuItem["submenu"]) > 0)\n \n     def testDisplayMenuNotIncludedIfContextDoesNotSupportBrowserDefault(self):\n         if self.is_dx:\n@@ -683,10 +697,11 @@ def testDisplayMenuNotIncludedIfContextDoesNotSupportBrowserDefault(self):\n             return\n         # We need to create an object that does not have\n         # IBrowserDefault enabled\n-        _createObjectByType(\'ATListCriterion\', self.folder, \'c1\')\n+        _createObjectByType("ATListCriterion", self.folder, "c1")\n         items = self.menu.getMenuItems(self.folder.c1, self.request)\n-        self.assertEqual([i for i in items if\n-                          i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'], [])\n+        self.assertEqual(\n+            [i for i in items if i["extra"]["id"] == "plone-contentmenu-display"], []\n+        )\n \n     def testWhenContextDoesNotSupportSelectableBrowserDefault(self):\n         """Display Menu Show Folder Default Page When Context Does Not\n@@ -696,70 +711,75 @@ def testWhenContextDoesNotSupportSelectableBrowserDefault(self):\n             return\n         # We need to create an object that is not\n         # ISelectableBrowserDefault aware\n-        _createObjectByType(\'ATListCriterion\', self.folder, \'c1\')\n-        self.folder.c1.setTitle(\'Foo\')\n-        self.folder.setDefaultPage(\'c1\')\n+        _createObjectByType("ATListCriterion", self.folder, "c1")\n+        self.folder.c1.setTitle("Foo")\n+        self.folder.setDefaultPage("c1")\n         items = self.menu.getMenuItems(self.folder.c1, self.request)\n-        displayMenuItem = [i for i in items if\n-                           i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'][0]\n-        selected = [a for a in displayMenuItem[\'submenu\']\n-                    if a[\'selected\']][0]\n-        self.assertEqual(u\'Foo\', selected[\'title\'].mapping[\'contentitem\'])\n+        displayMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ][0]\n+        selected = [a for a in displayMenuItem["submenu"] if a["selected"]][0]\n+        self.assertEqual(u"Foo", selected["title"].mapping["contentitem"])\n \n     def testDisplayMenuNotIncludedIfNoActionsAvailable(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n         items = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertEqual([i for i in items if\n-                          i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'], [])\n+        self.assertEqual(\n+            [i for i in items if i["extra"]["id"] == "plone-contentmenu-display"], []\n+        )\n \n     def testDisplayMenuDisabledIfIndexHtmlInFolder(self):\n-        self.folder.invokeFactory(\'Document\', \'index_html\')\n+        self.folder.invokeFactory("Document", "index_html")\n         items = self.menu.getMenuItems(self.folder, self.request)\n-        displayMenuItems = [i for i in items if\n-                            i[\'extra\'][\'id\'] == \'plone-contentmenu-display\']\n+        displayMenuItems = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ]\n         self.assertEqual(len(displayMenuItems), 0)\n \n     def testDisplayMenuDisabledIfIndexHtmlInFolderAndContextIsIndexHtml(self):\n-        self.folder.invokeFactory(\'Document\', \'index_html\')\n+        self.folder.invokeFactory("Document", "index_html")\n         items = self.menu.getMenuItems(self.folder.index_html, self.request)\n-        displayMenuItems = [i for i in items if\n-                            i[\'extra\'][\'id\'] == \'plone-contentmenu-display\']\n+        displayMenuItems = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ]\n         self.assertEqual(len(displayMenuItems), 0)\n \n     def testDisplayMenuAddPrefixFolderForContainerPart(self):\n-        prefix = \'folder-\'\n-        self.folder.invokeFactory(\'Folder\', \'subfolder1\')\n-        self.folder.setDefaultPage(\'subfolder1\')\n+        prefix = "folder-"\n+        self.folder.invokeFactory("Folder", "subfolder1")\n+        self.folder.setDefaultPage("subfolder1")\n         items = self.menu.getMenuItems(self.folder.subfolder1, self.request)\n-        displayMenuItems = [i for i in items if\n-                            i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'][0]\n-        extras = [i[\'extra\'] for i in displayMenuItems[\'submenu\']]\n+        displayMenuItems = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ][0]\n+        extras = [i["extra"] for i in displayMenuItems["submenu"]]\n         for extra in extras[1:]:\n-            if not extra[\'separator\'] is None:\n+            if not extra["separator"] is None:\n                 break\n-            if extra[\'id\'] in (\'folderDefaultPageDisplay\',\n-                               \'folderChangeDefaultPage\'):\n+            if extra["id"] in ("folderDefaultPageDisplay", "folderChangeDefaultPage"):\n                 break\n             else:\n-                self.assertEqual(extra[\'id\'][0:len(prefix)], prefix)\n+                self.assertEqual(extra["id"][0 : len(prefix)], prefix)\n \n     # Add sub-menu\n \n     def testAddMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'][0]\n-        self.assertIn(self.folder.absolute_url() + \'/folder_factories\',\n-                      factoriesMenuItem[\'action\'])\n-        self.assertTrue(len(factoriesMenuItem[\'submenu\']) > 0)\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ][0]\n+        self.assertIn(\n+            self.folder.absolute_url() + "/folder_factories",\n+            factoriesMenuItem["action"],\n+        )\n+        self.assertTrue(len(factoriesMenuItem["submenu"]) > 0)\n \n     def testAddMenuNotIncludedIfNothingToAdd(self):\n         logout()\n         items = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(\n-            [i for i in items if\n-             i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'], [])\n+            [i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"], []\n+        )\n \n     def testAddMenuWithNothingToAddButWithAvailableConstrainSettings(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n@@ -768,34 +788,36 @@ def testAddMenuWithNothingToAddButWithAvailableConstrainSettings(self):\n         constraints.setImmediatelyAddableTypes(())\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'][0]\n-        self.assertEqual(len(factoriesMenuItem[\'submenu\']), 1)\n-        self.assertEqual(factoriesMenuItem[\'submenu\'][0][\'extra\'][\'id\'],\n-                         \'plone-contentmenu-settings\')\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ][0]\n+        self.assertEqual(len(factoriesMenuItem["submenu"]), 1)\n+        self.assertEqual(\n+            factoriesMenuItem["submenu"][0]["extra"]["id"], "plone-contentmenu-settings"\n+        )\n \n     def testAddMenuWithNothingToAddButWithAvailableMorePage(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n         constraints.setImmediatelyAddableTypes(())\n-        self.folder.manage_permission(\'Modify constrain types\', (\'Manager\',))\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.folder.manage_permission("Modify constrain types", ("Manager",))\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items\n-            if i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n         ][0]\n-        self.assertEqual(len(factoriesMenuItem[\'submenu\']), 1)\n-        self.assertEqual(factoriesMenuItem[\'submenu\'][0][\'extra\'][\'id\'],\n-                         \'plone-contentmenu-more\')\n+        self.assertEqual(len(factoriesMenuItem["submenu"]), 1)\n+        self.assertEqual(\n+            factoriesMenuItem["submenu"][0]["extra"]["id"], "plone-contentmenu-more"\n+        )\n \n     def testAddMenuRelativeToNonStructuralFolder(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.folder.invokeFactory("Folder", "f1")\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n         items = self.menu.getMenuItems(self.folder.f1, self.request)\n-        factoriesMenuItem = [i for i in items if\n-                             i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\']\n+        factoriesMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ]\n         self.assertFalse(factoriesMenuItem)\n \n     def testAddMenuWithAddViewExpr(self):\n@@ -803,67 +825,68 @@ def testAddMenuWithAddViewExpr(self):\n         # support constrain types and there is\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n-        self.folder.manage_permission(\'Modify constrain types\', (\'Manager\',))\n-        self.portal.portal_types[\'Document\']._setPropValue(\n-            \'add_view_expr\', \'string:custom_expr\')\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n+        self.folder.manage_permission("Modify constrain types", ("Manager",))\n+        self.portal.portal_types["Document"]._setPropValue(\n+            "add_view_expr", "string:custom_expr"\n+        )\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'][0]\n-        self.assertEqual(factoriesMenuItem[\'submenu\'][0][\'action\'],\n-                         \'custom_expr\')\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ][0]\n+        self.assertEqual(factoriesMenuItem["submenu"][0]["action"], "custom_expr")\n \n     # Workflow sub-menu\n \n     def testWorkflowMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n         workflowMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-workflow\'][0]\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-workflow"\n+        ][0]\n         self.assertEqual(\n-            workflowMenuItem[\'action\'],\n-            self.folder.absolute_url() + \'/content_status_history\')\n-        self.assertTrue(len(workflowMenuItem[\'submenu\']) > 0)\n+            workflowMenuItem["action"],\n+            self.folder.absolute_url() + "/content_status_history",\n+        )\n+        self.assertTrue(len(workflowMenuItem["submenu"]) > 0)\n \n     def testWorkflowMenuWithNoTransitionsDisabled(self):\n         logout()\n         items = self.menu.getMenuItems(self.folder, self.request)\n         workflowMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-workflow\'][0]\n-        self.assertEqual(workflowMenuItem[\'action\'], \'\')\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-workflow"\n+        ][0]\n+        self.assertEqual(workflowMenuItem["action"], "")\n \n-    @unittest.skip(\'Unable to write a proper test so far\')\n+    @unittest.skip("Unable to write a proper test so far")\n     def testWorkflowMenuWithNoTransitionsEnabledAsManager(self):\n         # set workflow guard condition that fails, so there are no transitions.\n         # then show that manager will get a drop-down with settings whilst\n         # regular users won\'t\n \n-        self.portal.portal_workflow.doActionFor(self.folder, \'hide\')\n-        wf = self.portal.portal_workflow[\'folder_workflow\']\n-        wf.transitions[\'show\'].guard.expr = Expression(\'python: False\')\n-        wf.transitions[\'publish\'].guard.expr = Expression(\'python: False\')\n+        self.portal.portal_workflow.doActionFor(self.folder, "hide")\n+        wf = self.portal.portal_workflow["folder_workflow"]\n+        wf.transitions["show"].guard.expr = Expression("python: False")\n+        wf.transitions["publish"].guard.expr = Expression("python: False")\n \n         items = self.menu.getMenuItems(self.folder, self.request)\n         workflowMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-workflow\'][0]\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-workflow"\n+        ][0]\n \n         # A regular user doesn\'t see any actions\n-        self.assertTrue(workflowMenuItem[\'action\'] == \'\')\n-        self.assertTrue(workflowMenuItem[\'submenu\'] is None)\n+        self.assertTrue(workflowMenuItem["action"] == "")\n+        self.assertTrue(workflowMenuItem["submenu"] is None)\n \n-        self.fail(\'Unable to write a proper test so far\')\n+        self.fail("Unable to write a proper test so far")\n \n     def testWorkflowMenuWithNoWorkflowNotIncluded(self):\n-        self.portal.portal_workflow.setChainForPortalTypes((\'Document\',), ())\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal.portal_workflow.setChainForPortalTypes(("Document",), ())\n+        self.folder.invokeFactory("Document", "doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertNotIn(\n-            \'plone_contentmenu_workflow\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "plone_contentmenu_workflow",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n \n@@ -871,13 +894,13 @@ class TestDisplayViewsMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.request = self.layer["request"]\n         set_browserlayer(self.request)\n-        self.menu = getUtility(IBrowserMenu, \'plone_displayviews\')\n+        self.menu = getUtility(IBrowserMenu, "plone_displayviews")\n \n     def _getMenuItemByAction(self, action):\n         context = self.folder\n@@ -887,47 +910,48 @@ def _getMenuItemByAction(self, action):\n     def testInterface(self):\n         """A DisplayViewsMenu implements an extended interface"""\n         from plone.app.contentmenu.interfaces import IDisplayViewsMenu\n+\n         self.assertTrue(IDisplayViewsMenu.providedBy(self.menu))\n \n     def testSimpleAction(self):\n         """Retrieve a registered IBrowserMenuItem"""\n-        if self.folder.meta_type == \'ATFolder\':\n+        if self.folder.meta_type == "ATFolder":\n             # With AT and the current setup the test fails.\n             # The menuitem is there in \'real life\' though.\n-            raise unittest.SkipTest(\'Fails with AT and this setup\')\n-        item = self._getMenuItemByAction(\'summary_view\')\n+            raise unittest.SkipTest("Fails with AT and this setup")\n+        item = self._getMenuItemByAction("summary_view")\n         if item is None:\n             # Pre Plone 5\n-            item = self._getMenuItemByAction(\'folder_summary_view\')\n+            item = self._getMenuItemByAction("folder_summary_view")\n         self.assertFalse(item is None)\n-        self.assertEqual(item.title, u\'Summary view\')\n+        self.assertEqual(item.title, u"Summary view")\n \n     def testViewAction(self):\n         """Retrieve a registered IBrowserMenuItem"""\n-        if self.folder.meta_type == \'ATFolder\':\n+        if self.folder.meta_type == "ATFolder":\n             # With AT and the current setup the test fails.\n             # The menuitem is there in \'real life\' though.\n-            raise unittest.SkipTest(\'Fails with AT and this setup\')\n-        item = self._getMenuItemByAction(\'listing_view\')\n+            raise unittest.SkipTest("Fails with AT and this setup")\n+        item = self._getMenuItemByAction("listing_view")\n         if item is None:\n             # Pre Plone 5\n-            item = self._getMenuItemByAction(\'folder_listing\')\n+            item = self._getMenuItemByAction("folder_listing")\n         self.assertFalse(item is None)\n-        self.assertEqual(item.title, \'Standard view\')\n-        item = self._getMenuItemByAction(\'@@listing_view\')\n+        self.assertEqual(item.title, "Standard view")\n+        item = self._getMenuItemByAction("@@listing_view")\n         if item is None:\n             # Pre Plone 5\n-            item = self._getMenuItemByAction(\'@@folder_listing\')\n-        self.assertEqual(item.title, \'Standard view\')\n-        item = self._getMenuItemByAction(\'++view++listing_view\')\n+            item = self._getMenuItemByAction("@@folder_listing")\n+        self.assertEqual(item.title, "Standard view")\n+        item = self._getMenuItemByAction("++view++listing_view")\n         if item is None:\n             # Pre Plone 5\n-            item = self._getMenuItemByAction(\'++view++folder_listing\')\n-        self.assertEqual(item.title, \'Standard view\')\n+            item = self._getMenuItemByAction("++view++folder_listing")\n+        self.assertEqual(item.title, "Standard view")\n \n     def testNonExisting(self):\n         """Attempt to retrieve a non-registered IBrowserMenuItem"""\n-        item = self._getMenuItemByAction(\'nonesuch.html\')\n+        item = self._getMenuItemByAction("nonesuch.html")\n         self.assertTrue(item is None)\n \n \n@@ -938,54 +962,55 @@ def testNonExisting(self):\n     from plone.testing import z2\n \n     class PloneAppContentmenuAT(PloneAppContentmenu):\n-\n         def setUpZope(self, app, configurationContext):\n             # prepare installing Products.ATContentTypes\n             import Products.ATContentTypes\n+\n             self.loadZCML(package=Products.ATContentTypes)\n \n-            z2.installProduct(app, \'Products.Archetypes\')\n-            z2.installProduct(app, \'Products.ATContentTypes\')\n-            z2.installProduct(app, \'plone.app.blob\')\n+            z2.installProduct(app, "Products.Archetypes")\n+            z2.installProduct(app, "Products.ATContentTypes")\n+            z2.installProduct(app, "plone.app.blob")\n             # prepare installing plone.app.collection\n             try:\n-                pkg_resources.get_distribution(\'plone.app.collection\')\n-                z2.installProduct(app, \'plone.app.collection\')\n+                pkg_resources.get_distribution("plone.app.collection")\n+                z2.installProduct(app, "plone.app.collection")\n             except pkg_resources.DistributionNotFound:\n                 pass\n \n         def tearDownZope(self, app):\n             try:\n-                pkg_resources.get_distribution(\'plone.app.collection\')\n-                z2.uninstallProduct(app, \'plone.app.collection\')\n+                pkg_resources.get_distribution("plone.app.collection")\n+                z2.uninstallProduct(app, "plone.app.collection")\n             except pkg_resources.DistributionNotFound:\n                 pass\n-            z2.uninstallProduct(app, \'plone.app.blob\')\n-            z2.uninstallProduct(app, \'Products.ATContentTypes\')\n-            z2.uninstallProduct(app, \'Products.Archetypes\')\n+            z2.uninstallProduct(app, "plone.app.blob")\n+            z2.uninstallProduct(app, "Products.ATContentTypes")\n+            z2.uninstallProduct(app, "Products.Archetypes")\n \n         def setUpPloneSite(self, portal):\n-            portal.portal_workflow.setDefaultChain(\n-                \'simple_publication_workflow\')\n+            portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n             # install Products.ATContentTypes manually if profile is available\n             # (this is only needed for Plone >= 5)\n-            profiles = [x[\'id\'] for x in portal.portal_setup.listProfileInfo()]\n-            if \'Products.ATContentTypes:default\' in profiles:\n-                applyProfile(portal, \'Products.ATContentTypes:default\')\n+            profiles = [x["id"] for x in portal.portal_setup.listProfileInfo()]\n+            if "Products.ATContentTypes:default" in profiles:\n+                applyProfile(portal, "Products.ATContentTypes:default")\n \n             # install plone.app.collections manually if profile is available\n             # (this is only needed for Plone >= 5)\n-            if \'plone.app.collection:default\' in profiles:\n-                applyProfile(portal, \'plone.app.collection:default\')\n+            if "plone.app.collection:default" in profiles:\n+                applyProfile(portal, "plone.app.collection:default")\n \n     # AT test layers\n     PLONE_APP_CONTENTMENU_AT_FIXTURE = PloneAppContentmenuAT()\n     PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING = IntegrationTesting(\n-        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),\n-        name=\'PloneAppContentmenuAT:Integration\')\n+        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE,),\n+        name="PloneAppContentmenuAT:Integration",\n+    )\n     PLONE_APP_CONTENTMENU_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),\n-        name=\'PloneAppContentmenuAT:Functional\')\n+        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE,),\n+        name="PloneAppContentmenuAT:Functional",\n+    )\n \n     class TestDisplayViewsMenuAT(TestDisplayViewsMenu):\n         layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\ndiff --git a/plone/app/contentmenu/view.py b/plone/app/contentmenu/view.py\nindex eff3754..e310aa4 100644\n--- a/plone/app/contentmenu/view.py\n+++ b/plone/app/contentmenu/view.py\n@@ -9,10 +9,9 @@\n \n @implementer(IContentMenuView)\n class ContentMenuProvider(ContentProviderBase):\n-    """Content menu provider for the "view" tab: displays the menu\n-    """\n+    """Content menu provider for the "view" tab: displays the menu"""\n \n-    index = ViewPageTemplateFile(\'contentmenu.pt\')\n+    index = ViewPageTemplateFile("contentmenu.pt")\n \n     def render(self):\n         return self.index()\n@@ -23,6 +22,6 @@ def available(self):\n         return True\n \n     def menu(self):\n-        menu = getUtility(IBrowserMenu, name=\'plone_contentmenu\')\n+        menu = getUtility(IBrowserMenu, name="plone_contentmenu")\n         items = menu.getMenuItems(self.context, self.request)\n         return items\ndiff --git a/setup.py b/setup.py\nindex 88b927f..6fe97ad 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,61 +2,62 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'3.0.0a2.dev0\'\n-long_description = open(\'README.rst\').read() + \'\\n\'\n-long_description += open(\'CHANGES.rst\').read()\n+\n+version = "3.0.0a2.dev0"\n+long_description = open("README.rst").read() + "\\n"\n+long_description += open("CHANGES.rst").read()\n \n setup(\n-    name=\'plone.app.contentmenu\',\n+    name="plone.app.contentmenu",\n     version=version,\n-    description=\'Plone\\\'s content menu implementation\',\n+    description="Plone\'s content menu implementation",\n     long_description=long_description,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope :: 5\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone contentmenu menu\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.contentmenu\',\n-    license=\'GPL version 2\',\n+    keywords="plone contentmenu menu",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.contentmenu",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.app.contenttypes\',\n-            \'six\',\n+            "plone.app.testing",\n+            "plone.app.contenttypes",\n+            "six",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.locking\',\n-        \'plone.memoize\',\n-        \'plone.app.content >=2.0a3\',\n-        \'zope.browsermenu\',\n-        \'zope.component\',\n-        \'zope.contentprovider\',\n-        \'zope.interface\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.publisher\',\n-        \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'plone.protect >= 3.0.0a1\',\n-        \'Zope2\',\n+        "setuptools",\n+        "plone.locking",\n+        "plone.memoize",\n+        "plone.app.content >=2.0a3",\n+        "zope.browsermenu",\n+        "zope.component",\n+        "zope.contentprovider",\n+        "zope.interface",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.publisher",\n+        "Acquisition",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "plone.protect >= 3.0.0a1",\n+        "Zope2",\n     ],\n )\n'

Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-01T00:28:27+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/dd054d297a028f4b7e8aa7784d2c73f6148b81ad

find  -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/__init__.py
M plone/app/contentmenu/tests/test_menu.py
M plone/app/contentmenu/view.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py\nindex 8f2bc34..0f4e045 100644\n--- a/plone/app/contentmenu/__init__.py\n+++ b/plone/app/contentmenu/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory\n \n \ndiff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py\nindex 108c6c8..e1af54b 100644\n--- a/plone/app/contentmenu/displayviewsmenu.py\n+++ b/plone/app/contentmenu/displayviewsmenu.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentmenu.interfaces import IDisplayViewsMenu\n from zope.browsermenu.menu import BrowserMenu\n from zope.component import getAdapters\ndiff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py\nindex 42c5eeb..5b61457 100644\n--- a/plone/app/contentmenu/interfaces.py\n+++ b/plone/app/contentmenu/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.browsermenu.interfaces import IBrowserMenu\n from zope.browsermenu.interfaces import IBrowserSubMenuItem\n from zope.browsermenu.interfaces import IMenuItemType\ndiff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py\nindex f856f73..bb2ecc3 100644\n--- a/plone/app/contentmenu/menu.py\n+++ b/plone/app/contentmenu/menu.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from operator import itemgetter\n@@ -57,9 +56,9 @@\n @implementer(IActionsSubMenuItem)\n class ActionsSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u"label_actions_menu", default=u"Actions")\n+    title = _("label_actions_menu", default="Actions")\n     description = _(\n-        u"title_actions_menu", default=u"Actions for the current content item"\n+        "title_actions_menu", default="Actions for the current content item"\n     )\n     submenuId = "plone_contentmenu_actions"\n     icon = "toolbar-action/actions"\n@@ -70,7 +69,7 @@ class ActionsSubMenuItem(BrowserSubMenuItem):\n     }\n \n     def __init__(self, context, request):\n-        super(ActionsSubMenuItem, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context_state = getMultiAdapter(\n             (context, request), name="plone_context_state"\n         )\n@@ -109,7 +108,7 @@ def getMenuItems(self, context, request):\n             if not action["allowed"]:\n                 continue\n             aid = action["id"]\n-            cssClass = "actionicon-object_buttons-{0}".format(aid)\n+            cssClass = f"actionicon-object_buttons-{aid}"\n             icon = action.get("icon", None)\n             modal = action.get("modal", None)\n             if modal:\n@@ -137,13 +136,13 @@ def getMenuItems(self, context, request):\n @implementer(IDisplaySubMenuItem)\n class DisplaySubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u"label_choose_template", default=u"Display")\n+    title = _("label_choose_template", default="Display")\n     submenuId = "plone_contentmenu_display"\n     icon = "toolbar-action/display"\n     order = 40\n \n     def __init__(self, context, request):\n-        super(DisplaySubMenuItem, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context_state = getMultiAdapter(\n             (context, request), name="plone_context_state"\n         )\n@@ -160,15 +159,15 @@ def extra(self):\n     def description(self):\n         if self.disabled():\n             return _(\n-                u"title_remove_index_html_for_display_control",\n-                default=u"Delete or rename the index_html item to gain "\n-                u"full control over how this folder is "\n-                u"displayed.",\n+                "title_remove_index_html_for_display_control",\n+                default="Delete or rename the index_html item to gain "\n+                "full control over how this folder is "\n+                "displayed.",\n             )\n         return _(\n-            u"title_choose_default_view",\n-            default=u"Select the view mode for this folder, or set a "\n-            u"content item as its default view.",\n+            "title_choose_default_view",\n+            default="Select the view mode for this folder, or set a "\n+            "content item as its default view.",\n         )\n \n     @property\n@@ -302,7 +301,7 @@ def getMenuItems(self, obj, request):\n                 results.append(\n                     {\n                         "title": _(\n-                            u"label_current_folder_views", default=u"Folder display"\n+                            "label_current_folder_views", default="Folder display"\n                         ),\n                         "description": "",\n                         "action": None,\n@@ -323,8 +322,8 @@ def getMenuItems(self, obj, request):\n                 folder_index,\n                 {\n                     "title": _(\n-                        u"label_item_selected",\n-                        default=u"Item: ${contentitem}",\n+                        "label_item_selected",\n+                        default="Item: ${contentitem}",\n                         mapping={\n                             "contentitem": escape(utils.safe_unicode(obj.Title()))\n                         },\n@@ -349,7 +348,7 @@ def getMenuItems(self, obj, request):\n                             "title": title,\n                             "description": "",\n                             "action": addTokenToUrl(\n-                                "{0}/selectViewTemplate?templateId={1}".format(\n+                                "{}/selectViewTemplate?templateId={}".format(\n                                     folderUrl,\n                                     id,\n                                 ),\n@@ -370,15 +369,15 @@ def getMenuItems(self, obj, request):\n                 results.append(\n                     {\n                         "title": _(\n-                            u"label_change_default_item",\n-                            default=u"Change content item as default " u"view...",\n+                            "label_change_default_item",\n+                            default="Change content item as default " "view...",\n                         ),\n                         "description": _(\n-                            u"title_change_default_view_item",\n-                            default=u"Change the item used as default"\n-                            u" view in this folder",\n+                            "title_change_default_view_item",\n+                            default="Change the item used as default"\n+                            " view in this folder",\n                         ),\n-                        "action": "{0}/select_default_page".format(folderUrl),\n+                        "action": f"{folderUrl}/select_default_page",\n                         "selected": False,\n                         "icon": None,\n                         "extra": {\n@@ -401,9 +400,7 @@ def getMenuItems(self, obj, request):\n             if useSeparators:\n                 results.append(\n                     {\n-                        "title": _(\n-                            u"label_current_item_views", default=u"Item display"\n-                        ),\n+                        "title": _("label_current_item_views", default="Item display"),\n                         "description": "",\n                         "action": None,\n                         "selected": False,\n@@ -434,7 +431,7 @@ def getMenuItems(self, obj, request):\n                             "title": title,\n                             "description": "",\n                             "action": addTokenToUrl(\n-                                "{0}/selectViewTemplate?templateId={1}".format(\n+                                "{}/selectViewTemplate?templateId={}".format(\n                                     contextUrl,\n                                     id,\n                                 ),\n@@ -459,17 +456,17 @@ def getMenuItems(self, obj, request):\n                         results.append(\n                             {\n                                 "title": _(\n-                                    u"label_choose_item",\n-                                    default=u"Select a content item\\n"\n-                                    u"as default view...",\n+                                    "label_choose_item",\n+                                    default="Select a content item\\n"\n+                                    "as default view...",\n                                 ),\n                                 "description": _(\n-                                    u"title_select_default_view_item",\n-                                    default=u"Select an item to be used as "\n-                                    u"default view in this folder...",\n+                                    "title_select_default_view_item",\n+                                    default="Select an item to be used as "\n+                                    "default view in this folder...",\n                                 ),\n                                 "action": addTokenToUrl(\n-                                    "{0}/select_default_page".format(contextUrl),\n+                                    f"{contextUrl}/select_default_page",\n                                     request,\n                                 ),\n                                 "selected": False,\n@@ -484,13 +481,13 @@ def getMenuItems(self, obj, request):\n                         )\n                 else:\n                     defaultPageObj = getattr(obj, defaultPage, None)\n-                    defaultPageTitle = u""\n+                    defaultPageTitle = ""\n                     if defaultPageObj is not None:\n                         if getattr(aq_base(defaultPageObj), "Title"):\n                             defaultPageTitle = defaultPageObj.Title()\n                         else:\n                             defaultPageTitle = getattr(\n-                                aq_base(defaultPageObj), "title", u""\n+                                aq_base(defaultPageObj), "title", ""\n                             )\n \n                     # Selected item on top\n@@ -498,8 +495,8 @@ def getMenuItems(self, obj, request):\n                         item_index,\n                         {\n                             "title": _(\n-                                u"label_item_selected",\n-                                default=u"Item: ${contentitem}",\n+                                "label_item_selected",\n+                                default="Item: ${contentitem}",\n                                 mapping={\n                                     "contentitem": escape(\n                                         utils.safe_unicode(defaultPageTitle)\n@@ -522,16 +519,16 @@ def getMenuItems(self, obj, request):\n                         results.append(\n                             {\n                                 "title": _(\n-                                    u"label_change_item",\n-                                    default=u"Change content item\\nas "\n-                                    u"default view...",\n+                                    "label_change_item",\n+                                    default="Change content item\\nas "\n+                                    "default view...",\n                                 ),\n                                 "description": _(\n-                                    u"title_change_default_view_item",\n-                                    default=u"Change the item used as default "\n-                                    u"view in this folder",\n+                                    "title_change_default_view_item",\n+                                    default="Change the item used as default "\n+                                    "view in this folder",\n                                 ),\n-                                "action": "{0}/select_default_page".format(contextUrl),\n+                                "action": f"{contextUrl}/select_default_page",\n                                 "selected": False,\n                                 "icon": None,\n                                 "extra": {\n@@ -549,16 +546,16 @@ def getMenuItems(self, obj, request):\n @implementer(IFactoriesSubMenuItem)\n class FactoriesSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u"label_add_new_item", default=u"Add new\\u2026")\n+    title = _("label_add_new_item", default="Add new\\u2026")\n     submenuId = "plone_contentmenu_factory"\n     icon = "toolbar-action/factories"\n     order = 10\n     description = _(\n-        u"title_add_new_items_inside_item", default=u"Add new items inside this item"\n+        "title_add_new_items_inside_item", default="Add new items inside this item"\n     )\n \n     def __init__(self, context, request):\n-        super(FactoriesSubMenuItem, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context_state = getMultiAdapter(\n             (context, request), name="plone_context_state"\n         )\n@@ -573,7 +570,7 @@ def extra(self):\n     @property\n     def action(self):\n         return addTokenToUrl(\n-            "{0}/folder_factories".format(self._addContext().absolute_url()),\n+            f"{self._addContext().absolute_url()}/folder_factories",\n             self.request,\n         )\n \n@@ -646,11 +643,11 @@ def getMenuItems(self, context, request):\n         results = factories_view.addable_types(include=include)\n \n         if haveMore:\n-            url = "{0}/folder_factories".format(addContext.absolute_url())\n+            url = f"{addContext.absolute_url()}/folder_factories"\n             results.append(\n                 {\n-                    "title": _(u"folder_add_more", default=u"More\\u2026"),\n-                    "description": _(u"Show all available content types"),\n+                    "title": _("folder_add_more", default="More\\u2026"),\n+                    "description": _("Show all available content types"),\n                     "action": url,\n                     "selected": False,\n                     "icon": None,\n@@ -669,18 +666,16 @@ def getMenuItems(self, context, request):\n                 constraints.canSetConstrainTypes()\n                 and constraints.getDefaultAddableTypes()\n             ):\n-                url = "{0}/folder_constraintypes_form".format(\n+                url = "{}/folder_constraintypes_form".format(\n                     addContext.absolute_url(),\n                 )\n                 results.append(\n                     {\n-                        "title": _(\n-                            u"folder_add_settings", default=u"Restrictions\\u2026"\n-                        ),\n+                        "title": _("folder_add_settings", default="Restrictions\\u2026"),\n                         "description": _(\n-                            u"title_configure_addable_content_types",\n-                            default=u"Configure which content types can be "\n-                            u"added here",\n+                            "title_configure_addable_content_types",\n+                            default="Configure which content types can be "\n+                            "added here",\n                         ),\n                         "action": url,\n                         "selected": False,\n@@ -704,12 +699,12 @@ def getMenuItems(self, context, request):\n             results.append(\n                 {\n                     "title": _(\n-                        u"default_page_folder", default=u"Add item to default page"\n+                        "default_page_folder", default="Add item to default page"\n                     ),\n                     "description": _(\n-                        u"desc_default_page_folder",\n-                        default=u"If the default page is also a folder, "\n-                        u"add items to it from here.",\n+                        "desc_default_page_folder",\n+                        default="If the default page is also a folder, "\n+                        "add items to it from here.",\n                     ),\n                     "action": context.absolute_url() + "/@@folder_factories",\n                     "selected": False,\n@@ -740,8 +735,8 @@ class WorkflowSubMenuItem(BrowserSubMenuItem):\n \n     MANAGE_SETTINGS_PERMISSION = "Manage portal"\n \n-    title = _(u"label_state", default=u"State:")\n-    short_title = _(u"State")\n+    title = _("label_state", default="State:")\n+    short_title = _("State")\n     icon = "toolbar-action/workflow"\n     submenuId = "plone_contentmenu_workflow"\n     order = 20\n@@ -760,7 +755,7 @@ def extra(self):\n         stateTitle = self._currentStateTitle()\n         return {\n             "id": "plone-contentmenu-workflow",\n-            "class": "state-{0}".format(state),\n+            "class": f"state-{state}",\n             "state": state,\n             "stateTitle": stateTitle,\n             "shortTitle": self.short_title,\n@@ -771,9 +766,9 @@ def extra(self):\n     def description(self):\n         if self._manageSettings() or len(self._transitions()) > 0:\n             return _(\n-                u"title_change_state_of_item", default=u"Change the state of this item"\n+                "title_change_state_of_item", default="Change the state of this item"\n             )\n-        return u""\n+        return ""\n \n     @property\n     def action(self):\n@@ -877,7 +872,7 @@ def getMenuItems(self, context, request):\n                         "selected": False,\n                         "icon": None,\n                         "extra": {\n-                            "id": "workflow-transition-{0}".format(action["id"]),\n+                            "id": "workflow-transition-{}".format(action["id"]),\n                             "separator": None,\n                             "class": cssClass,\n                         },\n@@ -890,7 +885,7 @@ def getMenuItems(self, context, request):\n         if len(results) > 0:\n             results.append(\n                 {\n-                    "title": _(u"label_advanced", default=u"Advanced..."),\n+                    "title": _("label_advanced", default="Advanced..."),\n                     "description": "",\n                     "action": url + "/content_status_history",\n                     "selected": False,\n@@ -909,7 +904,7 @@ def getMenuItems(self, context, request):\n             if _checkPermission(ManageWorkflowPolicies, context):\n                 results.append(\n                     {\n-                        "title": _(u"workflow_policy", default=u"Policy..."),\n+                        "title": _("workflow_policy", default="Policy..."),\n                         "description": "",\n                         "action": url + "/placeful_workflow_configuration",\n                         "selected": False,\n@@ -931,7 +926,7 @@ class PortletManagerSubMenuItem(BrowserSubMenuItem):\n \n     MANAGE_SETTINGS_PERMISSION = "Portlets: Manage portlets"\n \n-    title = _(u"manage_portlets_link", default=u"Manage portlets")\n+    title = _("manage_portlets_link", default="Manage portlets")\n     submenuId = "plone_contentmenu_portletmanager"\n     icon = "toolbar-action/portlets"\n     order = 50\n@@ -954,10 +949,10 @@ def extra(self):\n     def description(self):\n         if self._manageSettings():\n             return _(\n-                u"title_change_portlets", default=u"Change the portlets of this item"\n+                "title_change_portlets", default="Change the portlets of this item"\n             )\n         else:\n-            return u""\n+            return ""\n \n     @property\n     def action(self):\n@@ -1005,11 +1000,9 @@ def getMenuItems(self, context, request):\n \n         items.append(\n             {\n-                "title": _(u"manage_all_portlets", default=u"All\xe2\x80\xa6"),\n+                "title": _("manage_all_portlets", default="All\xe2\x80\xa6"),\n                 "description": "Manage all portlets",\n-                "action": addTokenToUrl(\n-                    "{0}/manage-portlets".format(current_url), request\n-                ),\n+                "action": addTokenToUrl(f"{current_url}/manage-portlets", request),\n                 "selected": False,\n                 "icon": None,\n                 "extra": {"id": "portlet-manager-all", "separator": None},\n@@ -1024,19 +1017,17 @@ def getMenuItems(self, context, request):\n                 continue\n             item = {\n                 "title": PMF(\n-                    manager_name, default=u" ".join(manager_name.split(u".")).title()\n+                    manager_name, default=" ".join(manager_name.split(".")).title()\n                 ),\n                 "description": manager_name,\n                 "action": addTokenToUrl(\n-                    "{0}/@@topbar-manage-portlets/{1}".format(\n-                        current_url, manager_name\n-                    ),\n+                    "{}/@@topbar-manage-portlets/{}".format(current_url, manager_name),\n                     request,\n                 ),\n                 "selected": False,\n                 "icon": None,\n                 "extra": {\n-                    "id": "portlet-manager-{0}".format(manager_name),\n+                    "id": f"portlet-manager-{manager_name}",\n                     "separator": None,\n                 },\n                 "submenu": None,\ndiff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py\nindex 2f4bf95..4887140 100644\n--- a/plone/app/contentmenu/testing.py\n+++ b/plone/app/contentmenu/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\ndiff --git a/plone/app/contentmenu/tests/__init__.py b/plone/app/contentmenu/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentmenu/tests/__init__.py\n+++ b/plone/app/contentmenu/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py\nindex 5817e74..135e956 100644\n--- a/plone/app/contentmenu/tests/test_menu.py\n+++ b/plone/app/contentmenu/tests/test_menu.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentmenu.interfaces import IActionsMenu\n from plone.app.contentmenu.interfaces import IDisplayMenu\n from plone.app.contentmenu.interfaces import IFactoriesMenu\n@@ -257,7 +256,7 @@ def testDefaultPageTemplateTitle(self):\n             x for x in actions if x["extra"]["id"] == "contextDefaultPageDisplay"\n         ][0]\n         changeAction["title"].default\n-        self.assertEqual(u"New Document", changeAction["title"].mapping["contentitem"])\n+        self.assertEqual("New Document", changeAction["title"].mapping["contentitem"])\n \n \n class TestFactoriesMenu(unittest.TestCase):\n@@ -295,7 +294,7 @@ def testAddViewExpressionUsedInMenu(self):\n         self.assertIn("custom_expr", urls)\n         if self.is_dx:\n             self.assertIn(\n-                "{0}/++add++File".format(self.folder.absolute_url()),\n+                f"{self.folder.absolute_url()}/++add++File",\n                 urls,\n             )\n         else:\n@@ -645,7 +644,7 @@ def testAdvancedIncluded(self):\n         base_url = self.folder.doc1.absolute_url()\n         url_plone5 = "{0}/@@topbar-manage-portlets/plone.leftcolumn"\n         url_plone5 = url_plone5.format(base_url)\n-        url_plone4 = "{0}/manage-portlets".format(base_url)\n+        url_plone4 = f"{base_url}/manage-portlets"\n         urls = [a["action"].split("?_authenticator")[0] for a in actions]\n         self.assertIn(url_plone5, urls)\n         self.assertIn(url_plone4, urls)\n@@ -719,7 +718,7 @@ def testWhenContextDoesNotSupportSelectableBrowserDefault(self):\n             i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n         ][0]\n         selected = [a for a in displayMenuItem["submenu"] if a["selected"]][0]\n-        self.assertEqual(u"Foo", selected["title"].mapping["contentitem"])\n+        self.assertEqual("Foo", selected["title"].mapping["contentitem"])\n \n     def testDisplayMenuNotIncludedIfNoActionsAvailable(self):\n         self.folder.invokeFactory("Document", "doc1")\n@@ -924,7 +923,7 @@ def testSimpleAction(self):\n             # Pre Plone 5\n             item = self._getMenuItemByAction("folder_summary_view")\n         self.assertFalse(item is None)\n-        self.assertEqual(item.title, u"Summary view")\n+        self.assertEqual(item.title, "Summary view")\n \n     def testViewAction(self):\n         """Retrieve a registered IBrowserMenuItem"""\ndiff --git a/plone/app/contentmenu/view.py b/plone/app/contentmenu/view.py\nindex e310aa4..e68666c 100644\n--- a/plone/app/contentmenu/view.py\n+++ b/plone/app/contentmenu/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentmenu.interfaces import IContentMenuView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.browsermenu.interfaces import IBrowserMenu\ndiff --git a/setup.py b/setup.py\nindex 6fe97ad..ee914af 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-01T00:43:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/e2d3829a830b49c2190086d765561d4d80517aec

use plone.base

Files changed:
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/tests/test_menu.py
M setup.cfg
M setup.py

b'diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py\nindex bb2ecc3..5b4fba3 100644\n--- a/plone/app/contentmenu/menu.py\n+++ b/plone/app/contentmenu/menu.py\n@@ -1,5 +1,6 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n+from html import escape\n from operator import itemgetter\n from plone.app.content.browser.folderfactories import _allowedTypes\n from plone.app.contentmenu import PloneMessageFactory as _\n@@ -13,6 +14,10 @@\n from plone.app.contentmenu.interfaces import IPortletManagerSubMenuItem\n from plone.app.contentmenu.interfaces import IWorkflowMenu\n from plone.app.contentmenu.interfaces import IWorkflowSubMenuItem\n+from plone.base import utils\n+from plone.base.interfaces.constrains import IConstrainTypes\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.interfaces.structure import INonStructuralFolder\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import IPortletManager\n@@ -21,10 +26,6 @@\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault\n-from Products.CMFPlone import utils\n-from Products.CMFPlone.interfaces.constrains import IConstrainTypes\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from Products.CMFPlone.interfaces.structure import INonStructuralFolder\n from zope.browsermenu.menu import BrowserMenu\n from zope.browsermenu.menu import BrowserSubMenuItem\n from zope.component import getMultiAdapter\n@@ -38,19 +39,11 @@\n \n PMF = _  # used for dynamic messages we don\'t want to extract\n \n-\n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n-\n try:\n     pkg_resources.get_distribution("Products.CMFPlacefulWorkflow")\n     from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n except pkg_resources.DistributionNotFound:\n-    from Products.CMFCore.permissions import (\n-        ManagePortal as ManageWorkflowPolicies,\n-    )  # noqa\n+    from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies\n \n \n @implementer(IActionsSubMenuItem)\n@@ -324,9 +317,7 @@ def getMenuItems(self, obj, request):\n                     "title": _(\n                         "label_item_selected",\n                         default="Item: ${contentitem}",\n-                        mapping={\n-                            "contentitem": escape(utils.safe_unicode(obj.Title()))\n-                        },\n+                        mapping={"contentitem": escape(utils.safe_text(obj.Title()))},\n                     ),\n                     "description": "",\n                     "action": None,\n@@ -499,7 +490,7 @@ def getMenuItems(self, obj, request):\n                                 default="Item: ${contentitem}",\n                                 mapping={\n                                     "contentitem": escape(\n-                                        utils.safe_unicode(defaultPageTitle)\n+                                        utils.safe_text(defaultPageTitle)\n                                     )\n                                 },\n                             ),\ndiff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py\nindex 135e956..16889f2 100644\n--- a/plone/app/contentmenu/tests/test_menu.py\n+++ b/plone/app/contentmenu/tests/test_menu.py\n@@ -1,34 +1,47 @@\n+from OFS.Folder import Folder\n from plone.app.contentmenu.interfaces import IActionsMenu\n from plone.app.contentmenu.interfaces import IDisplayMenu\n from plone.app.contentmenu.interfaces import IFactoriesMenu\n from plone.app.contentmenu.interfaces import IPortletManagerMenu\n from plone.app.contentmenu.interfaces import IWorkflowMenu\n-from plone.app.contentmenu.testing import (\n-    PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING,\n-)  # noqa\n+from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import ISelectableConstrainTypes\n+from plone.base.utils import get_installer\n+from plone.base.utils import unrestricted_construct_instance\n from plone.locking.interfaces import ILockable\n from Products.CMFCore.Expression import Expression\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n-from Products.CMFPlone.tests import dummy\n-from Products.CMFPlone.utils import _createObjectByType\n-from Products.CMFPlone.utils import get_installer\n from zope.browsermenu.interfaces import IBrowserMenu\n from zope.component import getUtility\n from zope.interface import directlyProvides\n \n import pkg_resources\n-import six\n import unittest\n \n \n+class DummyFolder(Folder):\n+    """Dummy Folder\n+    First-class Zope object. Can be _setObject\'ed.\n+    """\n+\n+    id = "dummy_folder"\n+    meta_type = "Dummy Folder"\n+\n+    def __init__(self, id=None, title=None, **kw):\n+        self.__dict__.update(kw)\n+        if id is not None:\n+            self.id = id\n+        if title is not None:\n+            self.title = title\n+\n+\n class TestActionsMenu(unittest.TestCase):\n \n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n@@ -98,7 +111,7 @@ def testSingleTemplateIncluded(self):\n         )\n \n     def testNonBrowserDefaultReturnsNothing(self):\n-        f = dummy.Folder()\n+        f = DummyFolder()\n         self.folder._setObject("f1", f)\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n         self.assertEqual(len(actions), 0)\n@@ -696,7 +709,7 @@ def testDisplayMenuNotIncludedIfContextDoesNotSupportBrowserDefault(self):\n             return\n         # We need to create an object that does not have\n         # IBrowserDefault enabled\n-        _createObjectByType("ATListCriterion", self.folder, "c1")\n+        unrestricted_construct_instance("ATListCriterion", self.folder, "c1")\n         items = self.menu.getMenuItems(self.folder.c1, self.request)\n         self.assertEqual(\n             [i for i in items if i["extra"]["id"] == "plone-contentmenu-display"], []\n@@ -710,7 +723,7 @@ def testWhenContextDoesNotSupportSelectableBrowserDefault(self):\n             return\n         # We need to create an object that is not\n         # ISelectableBrowserDefault aware\n-        _createObjectByType("ATListCriterion", self.folder, "c1")\n+        unrestricted_construct_instance("ATListCriterion", self.folder, "c1")\n         self.folder.c1.setTitle("Foo")\n         self.folder.setDefaultPage("c1")\n         items = self.menu.getMenuItems(self.folder.c1, self.request)\ndiff --git a/setup.cfg b/setup.cfg\nindex 6786f91..913f961 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,15 +7,11 @@ ignore =\n     bootstrap-buildout.py\n \n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n-not_skip = __init__.py\n-\n-\n \n [bdist_wheel]\n universal = 1\ndiff --git a/setup.py b/setup.py\nindex ee914af..def1c8d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,25 +38,13 @@\n         test=[\n             "plone.app.testing",\n             "plone.app.contenttypes",\n-            "six",\n         ]\n     ),\n     install_requires=[\n         "setuptools",\n-        "plone.locking",\n+        "plone.base" "plone.locking",\n         "plone.memoize",\n         "plone.app.content >=2.0a3",\n-        "zope.browsermenu",\n-        "zope.component",\n-        "zope.contentprovider",\n-        "zope.interface",\n-        "zope.i18n",\n-        "zope.i18nmessageid",\n-        "zope.publisher",\n-        "Acquisition",\n-        "Products.CMFCore",\n-        "Products.CMFDynamicViewFTI",\n         "plone.protect >= 3.0.0a1",\n-        "Zope2",\n     ],\n )\n'

Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-01T00:57:29+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/330d85c56159cdb61d0747a3d6a0c9af9829b725

remove archetypes specific code from tests

Files changed:
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/tests/test_menu.py

b'diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py\nindex 5b4fba3..3dad84b 100644\n--- a/plone/app/contentmenu/menu.py\n+++ b/plone/app/contentmenu/menu.py\n@@ -1,5 +1,7 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from html import escape\n from operator import itemgetter\n from plone.app.content.browser.folderfactories import _allowedTypes\n@@ -71,7 +73,7 @@ def __init__(self, context, request):\n     def action(self):\n         folder = self.context\n         if not self.context_state.is_structural_folder():\n-            folder = utils.parent(self.context)\n+            folder = aq_parent(aq_inner(self.context))\n         return folder.absolute_url() + "/folder_contents"\n \n     @memoize\n@@ -187,7 +189,7 @@ def available(self):\n \n         # If this is a default page, also get menu items relative to the parent\n         if isDefaultPage:\n-            folder = ISelectableBrowserDefault(utils.parent(self.context), None)\n+            folder = ISelectableBrowserDefault(aq_parent(aq_inner(self.context)), None)\n \n         if folder is not None:\n             if folder.canSetDefaultPage():\n@@ -222,7 +224,7 @@ def disabled(self):\n         # if its folder_contents\n         context = self.context\n         if self.context_state.is_default_page():\n-            context = utils.parent(context)\n+            context = aq_parent(aq_inner(context))\n         if not getattr(context, "isPrincipiaFolderish", False):\n             return False\n         elif "index_html" not in context:\n@@ -245,7 +247,7 @@ def getMenuItems(self, obj, request):\n         if isDefaultPage:\n             # If this is a default page, also get menu items relative to thr\n             # parent\n-            parent = utils.parent(obj)\n+            parent = aq_parent(aq_inner(obj))\n             folder = ISelectableBrowserDefault(parent, None)\n \n         folderLayouts = []\ndiff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py\nindex 16889f2..e58bd56 100644\n--- a/plone/app/contentmenu/tests/test_menu.py\n+++ b/plone/app/contentmenu/tests/test_menu.py\n@@ -81,7 +81,6 @@ def setUp(self):\n             IBrowserMenu, name="plone_contentmenu_display", context=self.folder\n         )\n         self.request = self.layer["request"]\n-        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testActionsMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -102,8 +101,7 @@ def testTemplatesIncluded(self):\n \n     def testSingleTemplateIncluded(self):\n         self.folder.invokeFactory("Document", "doc1")\n-        if self.is_dx:\n-            set_browserlayer(self.request)\n+        set_browserlayer(self.request)\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertEqual(len(actions), 1)\n         self.assertEqual(\n@@ -131,11 +129,8 @@ def testDefaultPageIncludesParentOnlyWhenItemHasSingleView(self):\n \n     def testDefaultPageIncludesParentAndItemViewsWhenItemHasMultipleViews(self):  # noqa\n         fti = self.portal.portal_types["Document"]\n-        if self.is_dx:\n-            documentViews = fti.view_methods + ("content-core",)\n-            set_browserlayer(self.request)\n-        else:\n-            documentViews = fti.view_methods + ("base_view",)\n+        documentViews = fti.view_methods + ("content-core",)\n+        set_browserlayer(self.request)\n         fti.manage_changeProperties(view_methods=documentViews)\n         self.folder.invokeFactory("Document", "doc1")\n         self.folder.setDefaultPage("doc1")\n@@ -145,16 +140,10 @@ def testDefaultPageIncludesParentAndItemViewsWhenItemHasMultipleViews(self):  #\n             "plone-contentmenu-display-document_view",\n             [a["extra"]["id"] for a in actions],\n         )\n-        if self.is_dx:\n-            self.assertIn(\n-                "plone-contentmenu-display-content-core",\n-                [a["extra"]["id"] for a in actions],\n-            )\n-        else:\n-            self.assertIn(\n-                "plone-contentmenu-display-base_view",\n-                [a["extra"]["id"] for a in actions],\n-            )\n+        self.assertIn(\n+            "plone-contentmenu-display-content-core",\n+            [a["extra"]["id"] for a in actions],\n+        )\n \n     def testCurrentTemplateSelected(self):\n         self.folder.getLayout()\n@@ -223,11 +212,8 @@ def testDefaultPageCanBeChangedInFolder(self):\n \n     def testSeparatorsIncludedWhenViewingDefaultPageWithViews(self):\n         fti = self.portal.portal_types["Document"]\n-        if self.is_dx:\n-            documentViews = fti.view_methods + ("content-core",)\n-            set_browserlayer(self.request)\n-        else:\n-            documentViews = fti.view_methods + ("base_view",)\n+        documentViews = fti.view_methods + ("content-core",)\n+        set_browserlayer(self.request)\n         fti.manage_changeProperties(view_methods=documentViews)\n         self.folder.invokeFactory("Document", "doc1")\n         self.folder.setDefaultPage("doc1")\n@@ -239,8 +225,7 @@ def testSeparatorsIncludedWhenViewingDefaultPageWithViews(self):\n     def testSeparatorsNotIncludedWhenViewingDefaultPageWithoutViews(self):\n         self.folder.invokeFactory("Document", "doc1")\n         self.folder.setDefaultPage("doc1")\n-        if self.is_dx:\n-            set_browserlayer(self.request)\n+        set_browserlayer(self.request)\n         self.assertEqual(len(self.folder.doc1.getAvailableLayouts()), 1)\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         ids = [a["extra"]["id"] for a in actions]\n@@ -285,7 +270,6 @@ def setUp(self):\n             IBrowserMenu, name="plone_contentmenu_factory", context=self.folder\n         )\n         self.request = self.layer["request"]\n-        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -305,19 +289,10 @@ def testAddViewExpressionUsedInMenu(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         urls = [a["action"] for a in actions]\n         self.assertIn("custom_expr", urls)\n-        if self.is_dx:\n-            self.assertIn(\n-                f"{self.folder.absolute_url()}/++add++File",\n-                urls,\n-            )\n-        else:\n-            found = False\n-            create_url = "{0}/createObject?type_name=File"\n-            create_url = create_url.format(self.folder.absolute_url())\n-            for url in urls:\n-                if create_url in url:\n-                    found = True\n-            self.assertTrue(found)\n+        self.assertIn(\n+            f"{self.folder.absolute_url()}/++add++File",\n+            urls,\n+        )\n \n     def testFrontPageExpressionContext(self):\n         # If the expression context uses the front-page instead of the\n@@ -338,19 +313,6 @@ def testFrontPageExpressionContext(self):\n             in [a["action"] for a in actions]\n         )\n \n-    def testTypeNameIsURLQuoted(self):\n-        if self.is_dx:\n-            # DX does not use plusquote\n-            return\n-        actions = self.menu.getMenuItems(self.folder, self.request)\n-        found = False\n-        for url in [a["action"] for a in actions]:\n-            if (\n-                self.folder.absolute_url() + "/createObject?type_name=News+Item" in url\n-            ):  # noqa\n-                found = True\n-        self.assertTrue(found)\n-\n     def testMenuIncludesFactoriesOnNonFolderishContext(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         img = None\n@@ -367,10 +329,7 @@ def testMenuIncludesFactoriesOnNonFolderishContext(self):\n \n     def testNoAddableTypes(self):\n         actions = self.menu.getMenuItems(self.portal, self.request)\n-        if self.is_dx:\n-            self.assertEqual(len(actions), 8)\n-        else:\n-            self.assertEqual(len(actions), 9)\n+        self.assertEqual(len(actions), 8)\n \n         # set no types for folders and check the menu is not shown\n         folder_fti = self.portal.portal_types["Folder"]\n@@ -396,31 +355,15 @@ def testMenuForFolderishDefaultPages(self):\n             "http://nohost/plone/folder1/folder_constraintypes_form",\n             actions[-1]["action"],\n         )\n-        if self.is_dx:\n-            # DX has no Topics\n-            self.assertEqual(len(actions), 9)\n-            self.assertEqual(\n-                "http://nohost/plone/folder1/++add++Document", actions[-2]["action"]\n-            )\n-        else:\n-            self.assertEqual(len(actions), 10)\n-            self.assertTrue(\n-                "http://nohost/plone/folder1/createObject?type_name=Document"\n-                in actions[-2]["action"]\n-            )  # noqa\n+        self.assertEqual(len(actions), 9)\n+        self.assertEqual(\n+            "http://nohost/plone/folder1/++add++Document", actions[-2]["action"]\n+        )\n \n         # test non-folderish default_page\n         self.portal.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(doc1, self.request)\n-        if self.is_dx:\n-            self.assertEqual(\n-                "http://nohost/plone/++add++Document", actions[-1]["action"]\n-            )\n-        else:\n-            self.assertTrue(\n-                "http://nohost/plone/createObject?type_name=Document"\n-                in actions[-1]["action"]\n-            )  # noqa\n+        self.assertEqual("http://nohost/plone/++add++Document", actions[-1]["action"])\n \n         # test folderish default_page\n         # We need to test a different folder than folder1 to beat memoize.\n@@ -439,15 +382,7 @@ def testMenuForFolderishDefaultPages(self):\n         )\n         self.portal.setDefaultPage("folder3")\n         actions = self.menu.getMenuItems(folder3, self.request)\n-        if self.is_dx:\n-            self.assertEqual(\n-                "http://nohost/plone/++add++Document", actions[-1]["action"]\n-            )\n-        else:\n-            self.assertTrue(\n-                "http://nohost/plone/createObject?type_name=Document"\n-                in actions[-1]["action"]\n-            )  # noqa\n+        self.assertEqual("http://nohost/plone/++add++Document", actions[-1]["action"])\n \n     def testConstrainTypes(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n@@ -531,7 +466,6 @@ def setUp(self):\n             IBrowserMenu, name="plone_contentmenu_workflow", context=self.folder\n         )\n         self.request = self.layer["request"]\n-        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -580,19 +514,6 @@ def testNoTransitions(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertEqual(len(actions), 0)\n \n-    def testLockedItem(self):\n-        if self.is_dx:\n-            # dexterity has no locking ootb\n-            # see https://github.com/plone/plone.app.contenttypes/issues/140\n-            return\n-        membership_tool = getToolByName(self.folder, "portal_membership")\n-        membership_tool.addMember("anotherMember", "secret", ["Member"], [])\n-        locking = ILockable(self.folder.doc1)\n-        locking.lock()\n-        login(self.portal, "anotherMember")\n-        actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertEqual(len(actions), 0)\n-\n     def testAdvancedIncluded(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         url = self.folder.doc1.absolute_url() + "/content_status_history"\n@@ -626,7 +547,6 @@ def setUp(self):\n             IBrowserMenu, name="plone_contentmenu_portletmanager", context=self.folder\n         )\n         self.request = self.layer["request"]\n-        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -676,7 +596,6 @@ def setUp(self):\n             IBrowserMenu, name="plone_contentmenu", context=self.folder\n         )\n         self.request = self.layer["request"]\n-        self.is_dx = self.folder.meta_type == "Dexterity Container"\n \n     # Actions sub-menu\n \n@@ -703,36 +622,6 @@ def testDisplayMenuIncluded(self):\n         )\n         self.assertTrue(len(displayMenuItem["submenu"]) > 0)\n \n-    def testDisplayMenuNotIncludedIfContextDoesNotSupportBrowserDefault(self):\n-        if self.is_dx:\n-            # DX has no ATListCriterion\n-            return\n-        # We need to create an object that does not have\n-        # IBrowserDefault enabled\n-        unrestricted_construct_instance("ATListCriterion", self.folder, "c1")\n-        items = self.menu.getMenuItems(self.folder.c1, self.request)\n-        self.assertEqual(\n-            [i for i in items if i["extra"]["id"] == "plone-contentmenu-display"], []\n-        )\n-\n-    def testWhenContextDoesNotSupportSelectableBrowserDefault(self):\n-        """Display Menu Show Folder Default Page When Context Does Not\n-        Support Selectable Browser Default"""\n-        if self.is_dx:\n-            # DX has no ATListCriterion\n-            return\n-        # We need to create an object that is not\n-        # ISelectableBrowserDefault aware\n-        unrestricted_construct_instance("ATListCriterion", self.folder, "c1")\n-        self.folder.c1.setTitle("Foo")\n-        self.folder.setDefaultPage("c1")\n-        items = self.menu.getMenuItems(self.folder.c1, self.request)\n-        displayMenuItem = [\n-            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n-        ][0]\n-        selected = [a for a in displayMenuItem["submenu"] if a["selected"]][0]\n-        self.assertEqual("Foo", selected["title"].mapping["contentitem"])\n-\n     def testDisplayMenuNotIncludedIfNoActionsAvailable(self):\n         self.folder.invokeFactory("Document", "doc1")\n         items = self.menu.getMenuItems(self.folder.doc1, self.request)\n@@ -932,9 +821,6 @@ def testSimpleAction(self):\n             # The menuitem is there in \'real life\' though.\n             raise unittest.SkipTest("Fails with AT and this setup")\n         item = self._getMenuItemByAction("summary_view")\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction("folder_summary_view")\n         self.assertFalse(item is None)\n         self.assertEqual(item.title, "Summary view")\n \n@@ -945,102 +831,14 @@ def testViewAction(self):\n             # The menuitem is there in \'real life\' though.\n             raise unittest.SkipTest("Fails with AT and this setup")\n         item = self._getMenuItemByAction("listing_view")\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction("folder_listing")\n         self.assertFalse(item is None)\n         self.assertEqual(item.title, "Standard view")\n         item = self._getMenuItemByAction("@@listing_view")\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction("@@folder_listing")\n         self.assertEqual(item.title, "Standard view")\n         item = self._getMenuItemByAction("++view++listing_view")\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction("++view++folder_listing")\n         self.assertEqual(item.title, "Standard view")\n \n     def testNonExisting(self):\n         """Attempt to retrieve a non-registered IBrowserMenuItem"""\n         item = self._getMenuItemByAction("nonesuch.html")\n         self.assertTrue(item is None)\n-\n-\n-if six.PY2:\n-    from plone.app.contentmenu.testing import PloneAppContentmenu\n-    from plone.app.testing import FunctionalTesting\n-    from plone.app.testing import IntegrationTesting\n-    from plone.testing import z2\n-\n-    class PloneAppContentmenuAT(PloneAppContentmenu):\n-        def setUpZope(self, app, configurationContext):\n-            # prepare installing Products.ATContentTypes\n-            import Products.ATContentTypes\n-\n-            self.loadZCML(package=Products.ATContentTypes)\n-\n-            z2.installProduct(app, "Products.Archetypes")\n-            z2.installProduct(app, "Products.ATContentTypes")\n-            z2.installProduct(app, "plone.app.blob")\n-            # prepare installing plone.app.collection\n-            try:\n-                pkg_resources.get_distribution("plone.app.collection")\n-                z2.installProduct(app, "plone.app.collection")\n-            except pkg_resources.DistributionNotFound:\n-                pass\n-\n-        def tearDownZope(self, app):\n-            try:\n-                pkg_resources.get_distribution("plone.app.collection")\n-                z2.uninstallProduct(app, "plone.app.collection")\n-            except pkg_resources.DistributionNotFound:\n-                pass\n-            z2.uninstallProduct(app, "plone.app.blob")\n-            z2.uninstallProduct(app, "Products.ATContentTypes")\n-            z2.uninstallProduct(app, "Products.Archetypes")\n-\n-        def setUpPloneSite(self, portal):\n-            portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-            # install Products.ATContentTypes manually if profile is available\n-            # (this is only needed for Plone >= 5)\n-            profiles = [x["id"] for x in portal.portal_setup.listProfileInfo()]\n-            if "Products.ATContentTypes:default" in profiles:\n-                applyProfile(portal, "Products.ATContentTypes:default")\n-\n-            # install plone.app.collections manually if profile is available\n-            # (this is only needed for Plone >= 5)\n-            if "plone.app.collection:default" in profiles:\n-                applyProfile(portal, "plone.app.collection:default")\n-\n-    # AT test layers\n-    PLONE_APP_CONTENTMENU_AT_FIXTURE = PloneAppContentmenuAT()\n-    PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING = IntegrationTesting(\n-        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE,),\n-        name="PloneAppContentmenuAT:Integration",\n-    )\n-    PLONE_APP_CONTENTMENU_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE,),\n-        name="PloneAppContentmenuAT:Functional",\n-    )\n-\n-    class TestDisplayViewsMenuAT(TestDisplayViewsMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestActionsMenuAT(TestActionsMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestDisplayMenuAT(TestDisplayMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestContentMenuAT(TestContentMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestManagePortletsMenuAT(TestManagePortletsMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestWorkflowMenuAT(TestWorkflowMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestFactoriesMenuAT(TestFactoriesMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n'

Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-01T00:59:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/40a14b9c0b2d7fc81d49f415abf2836519b12670

add news file

Files changed:
A news/34.breaking

b'diff --git a/news/34.breaking b/news/34.breaking\nnew file mode 100644\nindex 0000000..2447868\n--- /dev/null\n+++ b/news/34.breaking\n@@ -0,0 +1,2 @@\n+Use plone.base. Remove six and Archetypes specific code.\n+[jensens]\n'

Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-01T02:26:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/84ad838f1924275307f90b8fa6664a0ae2556851

typo in setup.py

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex def1c8d..4fd66f1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,7 +42,8 @@\n     ),\n     install_requires=[\n         "setuptools",\n-        "plone.base" "plone.locking",\n+        "plone.base",\n+        "plone.locking",\n         "plone.memoize",\n         "plone.app.content >=2.0a3",\n         "plone.protect >= 3.0.0a1",\n'

Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2022-05-03T17:31:16+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contentmenu/commit/7c5f17b4dc0aa927bb77cc9b0e94f26e586b38fa

Merge pull request #34 from plone/plone-base-overhault

Plone base overhault

Files changed:
A news/34.breaking
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/__init__.py
M plone/app/contentmenu/tests/test_menu.py
M plone/app/contentmenu/view.py
M setup.cfg
M setup.py

b'diff --git a/news/34.breaking b/news/34.breaking\nnew file mode 100644\nindex 0000000..2447868\n--- /dev/null\n+++ b/news/34.breaking\n@@ -0,0 +1,2 @@\n+Use plone.base. Remove six and Archetypes specific code.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py\nindex cad1a5e..0f4e045 100644\n--- a/plone/app/contentmenu/__init__.py\n+++ b/plone/app/contentmenu/__init__.py\n@@ -1,5 +1,4 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py\nindex 1bfe624..e1af54b 100644\n--- a/plone/app/contentmenu/displayviewsmenu.py\n+++ b/plone/app/contentmenu/displayviewsmenu.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentmenu.interfaces import IDisplayViewsMenu\n from zope.browsermenu.menu import BrowserMenu\n from zope.component import getAdapters\n@@ -7,19 +6,17 @@\n \n @implementer(IDisplayViewsMenu)\n class DisplayViewsMenu(BrowserMenu):\n-\n     def getMenuItemByAction(self, context, request, action):\n         # Normalize actions; strip view prefix\n-        if action.startswith(\'@@\'):\n+        if action.startswith("@@"):\n             action = action[2:]\n-        if action.startswith(\'++view++\'):\n+        if action.startswith("++view++"):\n             action = action[8:]\n \n-        for name, item in getAdapters((context, request),\n-                                      self.getMenuItemType()):\n+        for name, item in getAdapters((context, request), self.getMenuItemType()):\n             item_action = item.action\n             # Normalize menu item action; never uses ++view++\n-            if item_action.startswith(\'@@\'):\n+            if item_action.startswith("@@"):\n                 item_action = item_action[2:]\n \n             if item_action == action:\ndiff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py\nindex 40344c4..5b61457 100644\n--- a/plone/app/contentmenu/interfaces.py\n+++ b/plone/app/contentmenu/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.browsermenu.interfaces import IBrowserMenu\n from zope.browsermenu.interfaces import IBrowserSubMenuItem\n from zope.browsermenu.interfaces import IMenuItemType\n@@ -14,8 +13,7 @@ class IContentMenuView(IContentProvider):\n     """\n \n     def available():\n-        """Determine whether the menu should be displayed at all.\n-        """\n+        """Determine whether the menu should be displayed at all."""\n \n     def menu():\n         """Create a list of dicts that can be used to render a menu.\n@@ -25,6 +23,7 @@ def menu():\n         submenu\n         """\n \n+\n # The content menu itself - menu items are registered as adapters to this\n # interface (this is signalled by marking the interface itself with the\n # IInterface IMenuItemType)\n@@ -57,8 +56,7 @@ class IContentMenuItem(Interface):\n \n \n class IActionsSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the actions menu.\n-    """\n+    """The menu item linking to the actions menu."""\n \n \n class IActionsMenu(IBrowserMenu):\n@@ -69,8 +67,7 @@ class IActionsMenu(IBrowserMenu):\n \n \n class IDisplaySubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the display menu.\n-    """\n+    """The menu item linking to the display menu."""\n \n     def disabled(self):\n         """Find out if the menu is visible but disabled."""\n@@ -84,8 +81,7 @@ class IDisplayMenu(IBrowserMenu):\n \n \n class IFactoriesSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the factories menu.\n-    """\n+    """The menu item linking to the factories menu."""\n \n \n class IFactoriesMenu(IBrowserMenu):\n@@ -97,8 +93,7 @@ class IFactoriesMenu(IBrowserMenu):\n \n \n class IWorkflowSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the workflow menu.\n-    """\n+    """The menu item linking to the workflow menu."""\n \n \n class IWorkflowMenu(IBrowserMenu):\n@@ -110,8 +105,7 @@ class IWorkflowMenu(IBrowserMenu):\n \n \n class IPortletManagerSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the portlet manager menu.\n-    """\n+    """The menu item linking to the portlet manager menu."""\n \n \n class IPortletManagerMenu(IBrowserMenu):\ndiff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py\nindex 7fe16d6..3dad84b 100644\n--- a/plone/app/contentmenu/menu.py\n+++ b/plone/app/contentmenu/menu.py\n@@ -1,6 +1,8 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from html import escape\n from operator import itemgetter\n from plone.app.content.browser.folderfactories import _allowedTypes\n from plone.app.contentmenu import PloneMessageFactory as _\n@@ -14,6 +16,10 @@\n from plone.app.contentmenu.interfaces import IPortletManagerSubMenuItem\n from plone.app.contentmenu.interfaces import IWorkflowMenu\n from plone.app.contentmenu.interfaces import IWorkflowSubMenuItem\n+from plone.base import utils\n+from plone.base.interfaces.constrains import IConstrainTypes\n+from plone.base.interfaces.constrains import ISelectableConstrainTypes\n+from plone.base.interfaces.structure import INonStructuralFolder\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import IPortletManager\n@@ -22,10 +28,6 @@\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault\n-from Products.CMFPlone import utils\n-from Products.CMFPlone.interfaces.constrains import IConstrainTypes\n-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n-from Products.CMFPlone.interfaces.structure import INonStructuralFolder\n from zope.browsermenu.menu import BrowserMenu\n from zope.browsermenu.menu import BrowserSubMenuItem\n from zope.component import getMultiAdapter\n@@ -36,54 +38,50 @@\n \n import pkg_resources\n \n-PMF = _  # used for dynamic messages we don\'t want to extract\n-\n \n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n+PMF = _  # used for dynamic messages we don\'t want to extract\n \n try:\n-    pkg_resources.get_distribution(\'Products.CMFPlacefulWorkflow\')\n+    pkg_resources.get_distribution("Products.CMFPlacefulWorkflow")\n     from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n except pkg_resources.DistributionNotFound:\n-    from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies  # noqa\n+    from Products.CMFCore.permissions import ManagePortal as ManageWorkflowPolicies\n \n \n @implementer(IActionsSubMenuItem)\n class ActionsSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u\'label_actions_menu\', default=u\'Actions\')\n-    description = _(u\'title_actions_menu\',\n-                    default=u\'Actions for the current content item\')\n-    submenuId = \'plone_contentmenu_actions\'\n+    title = _("label_actions_menu", default="Actions")\n+    description = _(\n+        "title_actions_menu", default="Actions for the current content item"\n+    )\n+    submenuId = "plone_contentmenu_actions"\n     icon = "toolbar-action/actions"\n     order = 30\n     extra = {\n-        \'id\': \'plone-contentmenu-actions\',\n-        \'li_class\': \'plonetoolbar-content-action\'\n+        "id": "plone-contentmenu-actions",\n+        "li_class": "plonetoolbar-content-action",\n     }\n \n     def __init__(self, context, request):\n-        super(ActionsSubMenuItem, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n+            (context, request), name="plone_context_state"\n         )\n \n     @property\n     def action(self):\n         folder = self.context\n         if not self.context_state.is_structural_folder():\n-            folder = utils.parent(self.context)\n-        return folder.absolute_url() + \'/folder_contents\'\n+            folder = aq_parent(aq_inner(self.context))\n+        return folder.absolute_url() + "/folder_contents"\n \n     @memoize\n     def available(self):\n-        actions_tool = getToolByName(self.context, \'portal_actions\')\n+        actions_tool = getToolByName(self.context, "portal_actions")\n         editActions = actions_tool.listActionInfos(\n-            object=self.context, categories=(\'object_buttons\',), max=1)\n+            object=self.context, categories=("object_buttons",), max=1\n+        )\n         return len(editActions) > 0\n \n     def selected(self):\n@@ -92,86 +90,88 @@ def selected(self):\n \n @implementer(IActionsMenu)\n class ActionsMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n         results = []\n \n-        context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n-        )\n-        editActions = context_state.actions(\'object_buttons\')\n+        context_state = getMultiAdapter((context, request), name="plone_context_state")\n+        editActions = context_state.actions("object_buttons")\n         if not editActions:\n             return results\n \n         for action in editActions:\n-            if not action[\'allowed\']:\n+            if not action["allowed"]:\n                 continue\n-            aid = action[\'id\']\n-            cssClass = \'actionicon-object_buttons-{0}\'.format(aid)\n-            icon = action.get(\'icon\', None)\n-            modal = action.get(\'modal\', None)\n+            aid = action["id"]\n+            cssClass = f"actionicon-object_buttons-{aid}"\n+            icon = action.get("icon", None)\n+            modal = action.get("modal", None)\n             if modal:\n-                cssClass += \' pat-plone-modal\'\n-\n-            results.append({\n-                \'title\': action[\'title\'],\n-                \'description\': \'\',\n-                \'action\': addTokenToUrl(action[\'url\'], request),\n-                \'selected\': False,\n-                \'icon\': icon,\n-                \'extra\': {\'id\': \'plone-contentmenu-actions-\' + aid,\n-                          \'separator\': None,\n-                          \'class\': cssClass,\n-                          \'modal\': modal},\n-                \'submenu\': None,\n-            })\n+                cssClass += " pat-plone-modal"\n+\n+            results.append(\n+                {\n+                    "title": action["title"],\n+                    "description": "",\n+                    "action": addTokenToUrl(action["url"], request),\n+                    "selected": False,\n+                    "icon": icon,\n+                    "extra": {\n+                        "id": "plone-contentmenu-actions-" + aid,\n+                        "separator": None,\n+                        "class": cssClass,\n+                        "modal": modal,\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n         return results\n \n \n @implementer(IDisplaySubMenuItem)\n class DisplaySubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u\'label_choose_template\', default=u\'Display\')\n-    submenuId = \'plone_contentmenu_display\'\n+    title = _("label_choose_template", default="Display")\n+    submenuId = "plone_contentmenu_display"\n     icon = "toolbar-action/display"\n     order = 40\n \n     def __init__(self, context, request):\n-        super(DisplaySubMenuItem, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n+            (context, request), name="plone_context_state"\n         )\n \n     @property\n     def extra(self):\n         return {\n-            \'id\': \'plone-contentmenu-display\',\n-            \'disabled\': self.disabled(),\n-            \'li_class\': \'plonetoolbar-display-view\'\n+            "id": "plone-contentmenu-display",\n+            "disabled": self.disabled(),\n+            "li_class": "plonetoolbar-display-view",\n         }\n \n     @property\n     def description(self):\n         if self.disabled():\n-            return _(u\'title_remove_index_html_for_display_control\',\n-                     default=u\'Delete or rename the index_html item to gain \'\n-                             u\'full control over how this folder is \'\n-                             u\'displayed.\')\n-        return _(u\'title_choose_default_view\',\n-                 default=u\'Select the view mode for this folder, or set a \'\n-                         u\'content item as its default view.\')\n+            return _(\n+                "title_remove_index_html_for_display_control",\n+                default="Delete or rename the index_html item to gain "\n+                "full control over how this folder is "\n+                "displayed.",\n+            )\n+        return _(\n+            "title_choose_default_view",\n+            default="Select the view mode for this folder, or set a "\n+            "content item as its default view.",\n+        )\n \n     @property\n     def action(self):\n         if self.disabled():\n-            return \'\'\n+            return ""\n         if self.context_state.is_default_page():\n-            return self.context_state.parent().absolute_url() + \\\n-                \'/select_default_view\'\n-        return self.context.absolute_url() + \'/select_default_view\'\n+            return self.context_state.parent().absolute_url() + "/select_default_view"\n+        return self.context.absolute_url() + "/select_default_view"\n \n     @memoize\n     def available(self):\n@@ -189,10 +189,7 @@ def available(self):\n \n         # If this is a default page, also get menu items relative to the parent\n         if isDefaultPage:\n-            folder = ISelectableBrowserDefault(\n-                utils.parent(self.context),\n-                None\n-            )\n+            folder = ISelectableBrowserDefault(aq_parent(aq_inner(self.context)), None)\n \n         if folder is not None:\n             if folder.canSetDefaultPage():\n@@ -213,9 +210,9 @@ def available(self):\n \n         # we have more than one layout to choose from?\n         return (\n-            (folderCanSetLayout and len(folderLayouts) > 1) or\n-            (folder is None and contextCanSetDefaultPage) or\n-            (contextCanSetLayout and len(contextLayouts) > 1)\n+            (folderCanSetLayout and len(folderLayouts) > 1)\n+            or (folder is None and contextCanSetDefaultPage)\n+            or (contextCanSetLayout and len(contextLayouts) > 1)\n         )\n \n     def selected(self):\n@@ -227,10 +224,10 @@ def disabled(self):\n         # if its folder_contents\n         context = self.context\n         if self.context_state.is_default_page():\n-            context = utils.parent(context)\n-        if not getattr(context, \'isPrincipiaFolderish\', False):\n+            context = aq_parent(aq_inner(context))\n+        if not getattr(context, "isPrincipiaFolderish", False):\n             return False\n-        elif \'index_html\' not in context:\n+        elif "index_html" not in context:\n             return False\n         else:\n             return True\n@@ -238,14 +235,11 @@ def disabled(self):\n \n @implementer(IDisplayMenu)\n class DisplayMenu(BrowserMenu):\n-\n     def getMenuItems(self, obj, request):\n         """Return menu item entries in a TAL-friendly form."""\n         results = []\n \n-        context_state = getMultiAdapter(\n-            (obj, request), name=\'plone_context_state\'\n-        )\n+        context_state = getMultiAdapter((obj, request), name="plone_context_state")\n         isDefaultPage = context_state.is_default_page()\n \n         parent = None\n@@ -253,7 +247,7 @@ def getMenuItems(self, obj, request):\n         if isDefaultPage:\n             # If this is a default page, also get menu items relative to thr\n             # parent\n-            parent = utils.parent(obj)\n+            parent = aq_parent(aq_inner(obj))\n             folder = ISelectableBrowserDefault(parent, None)\n \n         folderLayouts = []\n@@ -276,16 +270,21 @@ def getMenuItems(self, obj, request):\n \n         # Short circuit if neither folder nor object will provide us with\n         # items\n-        if not (folderCanSetLayout or folderCanSetDefaultPage or\n-                contextCanSetLayout or contextCanSetDefaultPage):\n+        if not (\n+            folderCanSetLayout\n+            or folderCanSetDefaultPage\n+            or contextCanSetLayout\n+            or contextCanSetDefaultPage\n+        ):\n             return []\n \n         # Only show the block \'Folder display\' and \'Item display\' separators if\n         # they are necessars\n         useSeparators = False\n         if folderCanSetLayout or folderCanSetDefaultPage:\n-            if (contextCanSetLayout and len(contextLayouts) > 1) or \\\n-                    contextCanSetDefaultPage:\n+            if (\n+                contextCanSetLayout and len(contextLayouts) > 1\n+            ) or contextCanSetDefaultPage:\n                 useSeparators = True\n \n         folder_index = 0\n@@ -294,75 +293,94 @@ def getMenuItems(self, obj, request):\n             folderUrl = parent.absolute_url()\n \n             if useSeparators:\n-                results.append({\n-                    \'title\': _(u\'label_current_folder_views\',\n-                               default=u\'Folder display\'),\n-                    \'description\': \'\',\n-                    \'action\': None,\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\'id\': \'folderHeader\',\n-                              \'separator\': \'actionSeparator\',\n-                              \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(\n+                            "label_current_folder_views", default="Folder display"\n+                        ),\n+                        "description": "",\n+                        "action": None,\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "folderHeader",\n+                            "separator": "actionSeparator",\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n                 folder_index = len(results)\n \n             # Display the selected item (i.e. the context)\n-            results.insert(folder_index, {\n-                \'title\': _(u\'label_item_selected\',\n-                           default=u\'Item: ${contentitem}\',\n-                           mapping={\'contentitem\': escape(\n-                               utils.safe_unicode(obj.Title()))}),\n-                \'description\': \'\',\n-                \'action\': None,\n-                \'selected\': True,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'folderDefaultPageDisplay\',\n-                    \'separator\': None,\n-                    \'class\': \'active\'},\n-                \'submenu\': None,\n-            })\n+            results.insert(\n+                folder_index,\n+                {\n+                    "title": _(\n+                        "label_item_selected",\n+                        default="Item: ${contentitem}",\n+                        mapping={"contentitem": escape(utils.safe_text(obj.Title()))},\n+                    ),\n+                    "description": "",\n+                    "action": None,\n+                    "selected": True,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "folderDefaultPageDisplay",\n+                        "separator": None,\n+                        "class": "active",\n+                    },\n+                    "submenu": None,\n+                },\n+            )\n \n             if folderCanSetLayout:\n                 for id, title in folderLayouts:\n-                    results.append({\n-                        \'title\': title,\n-                        \'description\': \'\',\n-                        \'action\': addTokenToUrl(\n-                            \'{0}/selectViewTemplate?templateId={1}\'.format(\n-                                folderUrl,\n-                                id,\n+                    results.append(\n+                        {\n+                            "title": title,\n+                            "description": "",\n+                            "action": addTokenToUrl(\n+                                "{}/selectViewTemplate?templateId={}".format(\n+                                    folderUrl,\n+                                    id,\n+                                ),\n+                                request,\n                             ),\n-                            request\n-                        ),\n-                        \'selected\': False,\n-                        \'icon\': None,\n-                        \'extra\': {\n-                            \'id\': \'folder-\' + id,\n-                            \'separator\': None,\n-                            \'class\': \'\'},\n-                        \'submenu\': None,\n-                    })\n+                            "selected": False,\n+                            "icon": None,\n+                            "extra": {\n+                                "id": "folder-" + id,\n+                                "separator": None,\n+                                "class": "",\n+                            },\n+                            "submenu": None,\n+                        }\n+                    )\n             # Let the user change the selection\n             if folderCanSetDefaultPage:\n-                results.append({\n-                    \'title\': _(u\'label_change_default_item\',\n-                               default=u\'Change content item as default \'\n-                                       u\'view...\'),\n-                    \'description\': _(u\'title_change_default_view_item\',\n-                                     default=u\'Change the item used as default\'\n-                                             u\' view in this folder\'),\n-                    \'action\': \'{0}/select_default_page\'.format(folderUrl),\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'folderChangeDefaultPage\',\n-                        \'separator\': None,\n-                        \'class\': \'pat-plone-modal\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _(\n+                            "label_change_default_item",\n+                            default="Change content item as default " "view...",\n+                        ),\n+                        "description": _(\n+                            "title_change_default_view_item",\n+                            default="Change the item used as default"\n+                            " view in this folder",\n+                        ),\n+                        "action": f"{folderUrl}/select_default_page",\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "folderChangeDefaultPage",\n+                            "separator": None,\n+                            "class": "pat-plone-modal",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         # 2. Render context options\n         item_index = 0\n@@ -373,19 +391,21 @@ def getMenuItems(self, obj, request):\n             layouts = context.getAvailableLayouts()\n \n             if useSeparators:\n-                results.append({\n-                    \'title\': _(u\'label_current_item_views\',\n-                               default=u\'Item display\'),\n-                    \'description\': \'\',\n-                    \'action\': None,\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'contextHeader\',\n-                        \'separator\': \'actionSeparator\',\n-                        \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _("label_current_item_views", default="Item display"),\n+                        "description": "",\n+                        "action": None,\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "contextHeader",\n+                            "separator": "actionSeparator",\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n                 item_index = len(results)\n \n             # If context is a default-page in a folder, that folder\'s views\n@@ -395,99 +415,123 @@ def getMenuItems(self, obj, request):\n \n             if showLayouts and contextCanSetLayout:\n                 for id, title in contextLayouts:\n-                    is_selected = (defaultPage is None and id == selected)\n+                    is_selected = defaultPage is None and id == selected\n                     # Selected item on top\n                     index = item_index if is_selected else len(results)\n-                    results.insert(index, {\n-                        \'title\': title,\n-                        \'description\': \'\',\n-                        \'action\': addTokenToUrl(\n-                            \'{0}/selectViewTemplate?templateId={1}\'.format(\n-                                contextUrl,\n-                                id,\n+                    results.insert(\n+                        index,\n+                        {\n+                            "title": title,\n+                            "description": "",\n+                            "action": addTokenToUrl(\n+                                "{}/selectViewTemplate?templateId={}".format(\n+                                    contextUrl,\n+                                    id,\n+                                ),\n+                                request,\n                             ),\n-                            request\n-                        ),\n-                        \'selected\': is_selected,\n-                        \'icon\': None,\n-                        \'extra\': {\n-                            \'id\': \'plone-contentmenu-display-\' + id,\n-                            \'separator\': None,\n-                            \'class\': is_selected and \'active\' or \'\'\n+                            "selected": is_selected,\n+                            "icon": None,\n+                            "extra": {\n+                                "id": "plone-contentmenu-display-" + id,\n+                                "separator": None,\n+                                "class": is_selected and "active" or "",\n+                            },\n+                            "submenu": None,\n                         },\n-                        \'submenu\': None,\n-                    })\n+                    )\n \n             # Allow setting / changing the default-page, unless this is a\n             # default-page in a parent folder.\n             if not INonStructuralFolder.providedBy(obj):\n                 if defaultPage is None:\n                     if contextCanSetDefaultPage:\n-                        results.append({\n-                            \'title\': _(u\'label_choose_item\',\n-                                       default=u\'Select a content item\\n\'\n-                                               u\'as default view...\'),\n-                            \'description\': _(\n-                                u\'title_select_default_view_item\',\n-                                default=u\'Select an item to be used as \'\n-                                        u\'default view in this folder...\'),\n-                            \'action\': addTokenToUrl(\n-                                \'{0}/select_default_page\'.format(contextUrl),\n-                                request),\n-                            \'selected\': False,\n-                            \'icon\': None,\n-                            \'extra\': {\n-                                \'id\': \'contextSetDefaultPage\',\n-                                \'separator\': None,\n-                                \'class\': \'pat-plone-modal\'},\n-                            \'submenu\': None,\n-                        })\n+                        results.append(\n+                            {\n+                                "title": _(\n+                                    "label_choose_item",\n+                                    default="Select a content item\\n"\n+                                    "as default view...",\n+                                ),\n+                                "description": _(\n+                                    "title_select_default_view_item",\n+                                    default="Select an item to be used as "\n+                                    "default view in this folder...",\n+                                ),\n+                                "action": addTokenToUrl(\n+                                    f"{contextUrl}/select_default_page",\n+                                    request,\n+                                ),\n+                                "selected": False,\n+                                "icon": None,\n+                                "extra": {\n+                                    "id": "contextSetDefaultPage",\n+                                    "separator": None,\n+                                    "class": "pat-plone-modal",\n+                                },\n+                                "submenu": None,\n+                            }\n+                        )\n                 else:\n                     defaultPageObj = getattr(obj, defaultPage, None)\n-                    defaultPageTitle = u\'\'\n+                    defaultPageTitle = ""\n                     if defaultPageObj is not None:\n-                        if getattr(aq_base(defaultPageObj), \'Title\'):\n+                        if getattr(aq_base(defaultPageObj), "Title"):\n                             defaultPageTitle = defaultPageObj.Title()\n                         else:\n-                            defaultPageTitle = getattr(aq_base(defaultPageObj),\n-                                                       \'title\', u\'\')\n+                            defaultPageTitle = getattr(\n+                                aq_base(defaultPageObj), "title", ""\n+                            )\n \n                     # Selected item on top\n-                    results.insert(item_index, {\n-                        \'title\': _(u\'label_item_selected\',\n-                                   default=u\'Item: ${contentitem}\',\n-                                   mapping={\'contentitem\': escape(\n-                                       utils.safe_unicode(defaultPageTitle))}),\n-                        \'description\': \'\',\n-                        \'action\': None,\n-                        \'selected\': True,\n-                        \'icon\': None,\n-                        \'extra\': {\n-                            \'id\': \'contextDefaultPageDisplay\',\n-                            \'separator\': None,\n-                            \'class\': \'\'},\n-                        \'submenu\': None,\n-                    })\n-                    if contextCanSetDefaultPage:\n-                        results.append({\n-                            \'title\': _(u\'label_change_item\',\n-                                       default=u\'Change content item\\nas \'\n-                                               u\'default view...\'),\n-                            \'description\': _(\n-                                u\'title_change_default_view_item\',\n-                                default=u\'Change the item used as default \'\n-                                        u\'view in this folder\'),\n-                            \'action\': \'{0}/select_default_page\'.format(\n-                                contextUrl\n+                    results.insert(\n+                        item_index,\n+                        {\n+                            "title": _(\n+                                "label_item_selected",\n+                                default="Item: ${contentitem}",\n+                                mapping={\n+                                    "contentitem": escape(\n+                                        utils.safe_text(defaultPageTitle)\n+                                    )\n+                                },\n                             ),\n-                            \'selected\': False,\n-                            \'icon\': None,\n-                            \'extra\': {\n-                                \'id\': \'contextChangeDefaultPage\',\n-                                \'separator\': None,\n-                                \'class\': \'pat-plone-modal\'},\n-                            \'submenu\': None,\n-                        })\n+                            "description": "",\n+                            "action": None,\n+                            "selected": True,\n+                            "icon": None,\n+                            "extra": {\n+                                "id": "contextDefaultPageDisplay",\n+                                "separator": None,\n+                                "class": "",\n+                            },\n+                            "submenu": None,\n+                        },\n+                    )\n+                    if contextCanSetDefaultPage:\n+                        results.append(\n+                            {\n+                                "title": _(\n+                                    "label_change_item",\n+                                    default="Change content item\\nas "\n+                                    "default view...",\n+                                ),\n+                                "description": _(\n+                                    "title_change_default_view_item",\n+                                    default="Change the item used as default "\n+                                    "view in this folder",\n+                                ),\n+                                "action": f"{contextUrl}/select_default_page",\n+                                "selected": False,\n+                                "icon": None,\n+                                "extra": {\n+                                    "id": "contextChangeDefaultPage",\n+                                    "separator": None,\n+                                    "class": "pat-plone-modal",\n+                                },\n+                                "submenu": None,\n+                            }\n+                        )\n \n         return results\n \n@@ -495,30 +539,32 @@ def getMenuItems(self, obj, request):\n @implementer(IFactoriesSubMenuItem)\n class FactoriesSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u\'label_add_new_item\', default=u\'Add new\\u2026\')\n-    submenuId = \'plone_contentmenu_factory\'\n+    title = _("label_add_new_item", default="Add new\\u2026")\n+    submenuId = "plone_contentmenu_factory"\n     icon = "toolbar-action/factories"\n     order = 10\n-    description = _(u\'title_add_new_items_inside_item\',\n-                    default=u\'Add new items inside this item\')\n+    description = _(\n+        "title_add_new_items_inside_item", default="Add new items inside this item"\n+    )\n \n     def __init__(self, context, request):\n-        super(FactoriesSubMenuItem, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.context_state = getMultiAdapter(\n-            (context, request),\n-            name=\'plone_context_state\'\n+            (context, request), name="plone_context_state"\n         )\n \n     @property\n     def extra(self):\n-        return {\'id\': \'plone-contentmenu-factories\',\n-                \'li_class\': \'plonetoolbar-contenttype\'}\n+        return {\n+            "id": "plone-contentmenu-factories",\n+            "li_class": "plonetoolbar-contenttype",\n+        }\n \n     @property\n     def action(self):\n         return addTokenToUrl(\n-            \'{0}/folder_factories\'.format(self._addContext().absolute_url()),\n-            self.request\n+            f"{self._addContext().absolute_url()}/folder_factories",\n+            self.request,\n         )\n \n     def available(self):\n@@ -526,7 +572,7 @@ def available(self):\n         showConstrainOptions = self._showConstrainOptions()\n         if self._addingToParent() and not self.context_state.is_default_page():\n             return False\n-        return (len(itemsToAdd) > 0 or showConstrainOptions)\n+        return len(itemsToAdd) > 0 or showConstrainOptions\n \n     def selected(self):\n         return False\n@@ -553,7 +599,7 @@ def _addableTypesInContext(self, addContext):\n     @memoize\n     def _addingToParent(self):\n         add_context_url = self._addContext().absolute_url()\n-        return (add_context_url != self.context.absolute_url())\n+        return add_context_url != self.context.absolute_url()\n \n     @memoize\n     def _showConstrainOptions(self):\n@@ -561,21 +607,19 @@ def _showConstrainOptions(self):\n         constrain = ISelectableConstrainTypes(addContext, None)\n         if constrain is None:\n             return False\n-        elif constrain.canSetConstrainTypes() and \\\n-                constrain.getDefaultAddableTypes():\n+        elif constrain.canSetConstrainTypes() and constrain.getDefaultAddableTypes():\n             return True\n-        elif len(constrain.getLocallyAllowedTypes()) < \\\n-                len(constrain.getImmediatelyAddableTypes()):\n+        elif len(constrain.getLocallyAllowedTypes()) < len(\n+            constrain.getImmediatelyAddableTypes()\n+        ):\n             return True\n \n \n @implementer(IFactoriesMenu)\n class FactoriesMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n-        factories_view = getMultiAdapter((context, request),\n-                                         name=\'folder_factories\')\n+        factories_view = getMultiAdapter((context, request), name="folder_factories")\n \n         haveMore = False\n         include = None\n@@ -592,66 +636,80 @@ def getMenuItems(self, context, request):\n         results = factories_view.addable_types(include=include)\n \n         if haveMore:\n-            url = \'{0}/folder_factories\'.format(addContext.absolute_url())\n-            results.append({\n-                \'title\': _(u\'folder_add_more\', default=u\'More\\u2026\'),\n-                \'description\': _(u\'Show all available content types\'),\n-                \'action\': url,\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'plone-contentmenu-more\',\n-                    \'separator\': None,\n-                    \'class\': \'\'},\n-                \'submenu\': None,\n-            })\n+            url = f"{addContext.absolute_url()}/folder_factories"\n+            results.append(\n+                {\n+                    "title": _("folder_add_more", default="More\\u2026"),\n+                    "description": _("Show all available content types"),\n+                    "action": url,\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "plone-contentmenu-more",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n \n         constraints = ISelectableConstrainTypes(addContext, None)\n         if constraints is not None:\n-            if constraints.canSetConstrainTypes() and \\\n-                    constraints.getDefaultAddableTypes():\n-                url = \'{0}/folder_constraintypes_form\'.format(\n+            if (\n+                constraints.canSetConstrainTypes()\n+                and constraints.getDefaultAddableTypes()\n+            ):\n+                url = "{}/folder_constraintypes_form".format(\n                     addContext.absolute_url(),\n                 )\n-                results.append({\n-                    \'title\': _(u\'folder_add_settings\',\n-                               default=u\'Restrictions\\u2026\'),\n-                    \'description\': _(\n-                        u\'title_configure_addable_content_types\',\n-                        default=u\'Configure which content types can be \'\n-                                u\'added here\'),\n-                    \'action\': url,\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'plone-contentmenu-settings\',\n-                        \'separator\': None,\n-                        \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _("folder_add_settings", default="Restrictions\\u2026"),\n+                        "description": _(\n+                            "title_configure_addable_content_types",\n+                            default="Configure which content types can be "\n+                            "added here",\n+                        ),\n+                        "action": url,\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "plone-contentmenu-settings",\n+                            "separator": None,\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         # Also add a menu item to add items to the default page\n-        context_state = getMultiAdapter((context, request),\n-                                        name=\'plone_context_state\')\n-        if context_state.is_structural_folder() and \\\n-                context_state.is_default_page() and \\\n-                self._contentCanBeAdded(context, request):\n-            results.append({\n-                \'title\': _(u\'default_page_folder\',\n-                           default=u\'Add item to default page\'),\n-                \'description\': _(\n-                    u\'desc_default_page_folder\',\n-                    default=u\'If the default page is also a folder, \'\n-                            u\'add items to it from here.\'),\n-                \'action\': context.absolute_url() + \'/@@folder_factories\',\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'plone-contentmenu-add-to-default-page\',\n-                    \'separator\': None,\n-                    \'class\': \'pat-plone-modal\'},\n-                \'submenu\': None,\n-            })\n+        context_state = getMultiAdapter((context, request), name="plone_context_state")\n+        if (\n+            context_state.is_structural_folder()\n+            and context_state.is_default_page()\n+            and self._contentCanBeAdded(context, request)\n+        ):\n+            results.append(\n+                {\n+                    "title": _(\n+                        "default_page_folder", default="Add item to default page"\n+                    ),\n+                    "description": _(\n+                        "desc_default_page_folder",\n+                        default="If the default page is also a folder, "\n+                        "add items to it from here.",\n+                    ),\n+                    "action": context.absolute_url() + "/@@folder_factories",\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "plone-contentmenu-add-to-default-page",\n+                        "separator": None,\n+                        "class": "pat-plone-modal",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n \n         return results\n \n@@ -668,48 +726,52 @@ def _contentCanBeAdded(self, addContext, request):\n @implementer(IWorkflowSubMenuItem)\n class WorkflowSubMenuItem(BrowserSubMenuItem):\n \n-    MANAGE_SETTINGS_PERMISSION = \'Manage portal\'\n+    MANAGE_SETTINGS_PERMISSION = "Manage portal"\n \n-    title = _(u\'label_state\', default=u\'State:\')\n-    short_title = _(u\'State\')\n+    title = _("label_state", default="State:")\n+    short_title = _("State")\n     icon = "toolbar-action/workflow"\n-    submenuId = \'plone_contentmenu_workflow\'\n+    submenuId = "plone_contentmenu_workflow"\n     order = 20\n \n     def __init__(self, context, request):\n         BrowserSubMenuItem.__init__(self, context, request)\n-        self.tools = getMultiAdapter((context, request), name=\'plone_tools\')\n+        self.tools = getMultiAdapter((context, request), name="plone_tools")\n         self.context = context\n-        self.context_state = getMultiAdapter((context, request),\n-                                             name=\'plone_context_state\')\n+        self.context_state = getMultiAdapter(\n+            (context, request), name="plone_context_state"\n+        )\n \n     @property\n     def extra(self):\n         state = self.context_state.workflow_state()\n         stateTitle = self._currentStateTitle()\n-        return {\'id\': \'plone-contentmenu-workflow\',\n-                \'class\': \'state-{0}\'.format(state),\n-                \'state\': state,\n-                \'stateTitle\': stateTitle,\n-                \'shortTitle\': self.short_title,\n-                \'li_class\': \'plonetoolbar-workfow-transition\'}\n+        return {\n+            "id": "plone-contentmenu-workflow",\n+            "class": f"state-{state}",\n+            "state": state,\n+            "stateTitle": stateTitle,\n+            "shortTitle": self.short_title,\n+            "li_class": "plonetoolbar-workfow-transition",\n+        }\n \n     @property\n     def description(self):\n         if self._manageSettings() or len(self._transitions()) > 0:\n-            return _(u\'title_change_state_of_item\',\n-                     default=u\'Change the state of this item\')\n-        return u\'\'\n+            return _(\n+                "title_change_state_of_item", default="Change the state of this item"\n+            )\n+        return ""\n \n     @property\n     def action(self):\n         if self._manageSettings() or len(self._transitions()) > 0:\n-            return self.context.absolute_url() + \'/content_status_history\'\n-        return \'\'\n+            return self.context.absolute_url() + "/content_status_history"\n+        return ""\n \n     @memoize\n     def available(self):\n-        return (self.context_state.workflow_state() is not None)\n+        return self.context_state.workflow_state() is not None\n \n     def selected(self):\n         return False\n@@ -717,11 +779,12 @@ def selected(self):\n     @memoize\n     def _manageSettings(self):\n         return self.tools.membership().checkPermission(\n-            WorkflowSubMenuItem.MANAGE_SETTINGS_PERMISSION, self.context)\n+            WorkflowSubMenuItem.MANAGE_SETTINGS_PERMISSION, self.context\n+        )\n \n     @memoize\n     def _transitions(self):\n-        wf_tool = getToolByName(self.context, \'portal_workflow\')\n+        wf_tool = getToolByName(self.context, "portal_workflow")\n         return wf_tool.listActionInfos(object=self.context, max=1)\n \n     @memoize\n@@ -743,102 +806,110 @@ class WorkflowMenu(BrowserMenu):\n     # if these are encountered.\n \n     BOGUS_WORKFLOW_ACTIONS = (\n-        \'content_hide_form\',\n-        \'content_publish_form\',\n-        \'content_reject_form\',\n-        \'content_retract_form\',\n-        \'content_show_form\',\n-        \'content_submit_form\',\n+        "content_hide_form",\n+        "content_publish_form",\n+        "content_reject_form",\n+        "content_retract_form",\n+        "content_show_form",\n+        "content_submit_form",\n     )\n \n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n         results = []\n \n-        locking_info = queryMultiAdapter((context, request),\n-                                         name=\'plone_lock_info\')\n+        locking_info = queryMultiAdapter((context, request), name="plone_lock_info")\n         if locking_info and locking_info.is_locked_for_current_user():\n             return []\n \n-        wf_tool = getToolByName(context, \'portal_workflow\')\n+        wf_tool = getToolByName(context, "portal_workflow")\n         workflowActions = wf_tool.listActionInfos(object=context)\n \n         for action in workflowActions:\n-            if action[\'category\'] != \'workflow\':\n+            if action["category"] != "workflow":\n                 continue\n \n-            cssClass = \'\'\n-            actionUrl = action[\'url\']\n-            if actionUrl == \'\':\n-                actionUrl = \'{0}/content_status_modify?workflow_action={1}\'\n+            cssClass = ""\n+            actionUrl = action["url"]\n+            if actionUrl == "":\n+                actionUrl = "{0}/content_status_modify?workflow_action={1}"\n                 actionUrl = actionUrl.format(\n                     context.absolute_url(),\n-                    action[\'id\'],\n+                    action["id"],\n                 )\n-                cssClass = \'\'\n+                cssClass = ""\n \n-            description = \'\'\n+            description = ""\n \n-            transition = action.get(\'transition\', None)\n+            transition = action.get("transition", None)\n             if transition is not None:\n                 description = transition.description\n \n-            baseUrl = \'{0}/content_status_modify?workflow_action={1}\'\n+            baseUrl = "{0}/content_status_modify?workflow_action={1}"\n             for bogus in self.BOGUS_WORKFLOW_ACTIONS:\n                 if actionUrl.endswith(bogus):\n                     if getattr(context, bogus, None) is None:\n                         actionUrl = baseUrl.format(\n                             context.absolute_url(),\n-                            action[\'id\'],\n+                            action["id"],\n                         )\n-                        cssClass = \'\'\n+                        cssClass = ""\n                     break\n \n-            if action[\'allowed\']:\n-                results.append({\n-                    \'title\': action[\'title\'],\n-                    \'description\': description,\n-                    \'action\': addTokenToUrl(actionUrl, request),\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\n-                        \'id\': \'workflow-transition-{0}\'.format(action[\'id\']),\n-                        \'separator\': None,\n-                        \'class\': cssClass},\n-                    \'submenu\': None,\n-                })\n+            if action["allowed"]:\n+                results.append(\n+                    {\n+                        "title": action["title"],\n+                        "description": description,\n+                        "action": addTokenToUrl(actionUrl, request),\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "workflow-transition-{}".format(action["id"]),\n+                            "separator": None,\n+                            "class": cssClass,\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         url = context.absolute_url()\n \n         if len(results) > 0:\n-            results.append({\n-                \'title\': _(u\'label_advanced\', default=u\'Advanced...\'),\n-                \'description\': \'\',\n-                \'action\': url + \'/content_status_history\',\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'workflow-transition-advanced\',\n-                    \'separator\': \'actionSeparator\',\n-                    \'class\': \'pat-plone-modal\'},\n-                \'submenu\': None,\n-            })\n-\n-        pw = getToolByName(context, \'portal_placeful_workflow\', None)\n+            results.append(\n+                {\n+                    "title": _("label_advanced", default="Advanced..."),\n+                    "description": "",\n+                    "action": url + "/content_status_history",\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "workflow-transition-advanced",\n+                        "separator": "actionSeparator",\n+                        "class": "pat-plone-modal",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n+\n+        pw = getToolByName(context, "portal_placeful_workflow", None)\n         if pw is not None:\n             if _checkPermission(ManageWorkflowPolicies, context):\n-                results.append({\n-                    \'title\': _(u\'workflow_policy\',\n-                               default=u\'Policy...\'),\n-                    \'description\': \'\',\n-                    \'action\': url + \'/placeful_workflow_configuration\',\n-                    \'selected\': False,\n-                    \'icon\': None,\n-                    \'extra\': {\'id\': \'workflow-transition-policy\',\n-                              \'separator\': None,\n-                              \'class\': \'\'},\n-                    \'submenu\': None,\n-                })\n+                results.append(\n+                    {\n+                        "title": _("workflow_policy", default="Policy..."),\n+                        "description": "",\n+                        "action": url + "/placeful_workflow_configuration",\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "workflow-transition-policy",\n+                            "separator": None,\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n \n         return results\n \n@@ -846,44 +917,45 @@ def getMenuItems(self, context, request):\n @implementer(IPortletManagerSubMenuItem)\n class PortletManagerSubMenuItem(BrowserSubMenuItem):\n \n-    MANAGE_SETTINGS_PERMISSION = \'Portlets: Manage portlets\'\n+    MANAGE_SETTINGS_PERMISSION = "Portlets: Manage portlets"\n \n-    title = _(u\'manage_portlets_link\', default=u\'Manage portlets\')\n-    submenuId = \'plone_contentmenu_portletmanager\'\n+    title = _("manage_portlets_link", default="Manage portlets")\n+    submenuId = "plone_contentmenu_portletmanager"\n     icon = "toolbar-action/portlets"\n     order = 50\n \n     def __init__(self, context, request):\n         BrowserSubMenuItem.__init__(self, context, request)\n         self.context = context\n-        self.context_state = getMultiAdapter((context, request),\n-                                             name=\'plone_context_state\')\n+        self.context_state = getMultiAdapter(\n+            (context, request), name="plone_context_state"\n+        )\n \n     @property\n     def extra(self):\n-        return {\'id\': \'plone-contentmenu-portletmanager\',\n-                \'li_class\': \'plonetoolbar-portlet-manager\'}\n+        return {\n+            "id": "plone-contentmenu-portletmanager",\n+            "li_class": "plonetoolbar-portlet-manager",\n+        }\n \n     @property\n     def description(self):\n         if self._manageSettings():\n             return _(\n-                u\'title_change_portlets\',\n-                default=u\'Change the portlets of this item\'\n+                "title_change_portlets", default="Change the portlets of this item"\n             )\n         else:\n-            return u\'\'\n+            return ""\n \n     @property\n     def action(self):\n-        return self.context.absolute_url() + \'/manage-portlets\'\n+        return self.context.absolute_url() + "/manage-portlets"\n \n     @memoize\n     def available(self):\n         secman = getSecurityManager()\n         has_manage_portlets_permission = secman.checkPermission(\n-            \'Portlets: Manage portlets\',\n-            self.context\n+            "Portlets: Manage portlets", self.context\n         )\n         if not has_manage_portlets_permission:\n             return False\n@@ -897,44 +969,39 @@ def selected(self):\n     def _manageSettings(self):\n         secman = getSecurityManager()\n         has_manage_portlets_permission = secman.checkPermission(\n-            self.MANAGE_SETTINGS_PERMISSION,\n-            self.context\n+            self.MANAGE_SETTINGS_PERMISSION, self.context\n         )\n         return has_manage_portlets_permission\n \n \n @implementer(IPortletManagerMenu)\n class PortletManagerMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n         """Return menu item entries in a TAL-friendly form."""\n         items = []\n         sm = getSecurityManager()\n         # Bail out if the user can\'t manage portlets\n         if not sm.checkPermission(\n-                PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION,\n-                context\n+            PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION, context\n         ):\n             return items\n         blacklist = getUtility(IRegistry).get(\n-            \'plone.app.portlets.PortletManagerBlacklist\', [])\n+            "plone.app.portlets.PortletManagerBlacklist", []\n+        )\n         managers = getUtilitiesFor(IPortletManager)\n         current_url = context.absolute_url()\n \n-        items.append({\n-            \'title\': _(u\'manage_all_portlets\', default=u\'All\xe2\x80\xa6\'),\n-            \'description\': \'Manage all portlets\',\n-            \'action\': addTokenToUrl(\n-                \'{0}/manage-portlets\'.format(\n-                    current_url),\n-                request),\n-            \'selected\': False,\n-            \'icon\': None,\n-            \'extra\': {\n-                \'id\': \'portlet-manager-all\',\n-                \'separator\': None},\n-            \'submenu\': None,\n-        })\n+        items.append(\n+            {\n+                "title": _("manage_all_portlets", default="All\xe2\x80\xa6"),\n+                "description": "Manage all portlets",\n+                "action": addTokenToUrl(f"{current_url}/manage-portlets", request),\n+                "selected": False,\n+                "icon": None,\n+                "extra": {"id": "portlet-manager-all", "separator": None},\n+                "submenu": None,\n+            }\n+        )\n \n         for manager in managers:\n             manager_name = manager[0]\n@@ -942,21 +1009,22 @@ def getMenuItems(self, context, request):\n             if manager_name in blacklist:\n                 continue\n             item = {\n-                \'title\': PMF(manager_name,\n-                           default=u\' \'.join(manager_name.split(u\'.\')).title()),\n-                \'description\': manager_name,\n-                \'action\': addTokenToUrl(\n-                    \'{0}/@@topbar-manage-portlets/{1}\'.format(\n-                        current_url,\n-                        manager_name),\n-                    request),\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\n-                    \'id\': \'portlet-manager-{0}\'.format(manager_name),\n-                    \'separator\': None},\n-                \'submenu\': None,\n+                "title": PMF(\n+                    manager_name, default=" ".join(manager_name.split(".")).title()\n+                ),\n+                "description": manager_name,\n+                "action": addTokenToUrl(\n+                    "{}/@@topbar-manage-portlets/{}".format(current_url, manager_name),\n+                    request,\n+                ),\n+                "selected": False,\n+                "icon": None,\n+                "extra": {\n+                    "id": f"portlet-manager-{manager_name}",\n+                    "separator": None,\n+                },\n+                "submenu": None,\n             }\n \n             items.append(item)\n-        return sorted(items, key=itemgetter(\'title\'))\n+        return sorted(items, key=itemgetter("title"))\ndiff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py\nindex a143298..4887140 100644\n--- a/plone/app/contentmenu/testing.py\n+++ b/plone/app/contentmenu/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -14,24 +13,25 @@ class PloneAppContentmenu(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.contentmenu\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.contentmenu,\n-                       context=configurationContext)\n+\n+        xmlconfig.file(\n+            "configure.zcml", plone.app.contentmenu, context=configurationContext\n+        )\n \n \n PLONE_APP_CONTENTMENU_FIXTURE = PloneAppContentmenu()\n PLONE_APP_CONTENTMENU_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),\n-    name=\'PloneAppContentmenu:Integration\')\n+    bases=(PLONE_APP_CONTENTMENU_FIXTURE,), name="PloneAppContentmenu:Integration"\n+)\n PLONE_APP_CONTENTMENU_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),\n-    name=\'PloneAppContentmenu:Functional\')\n+    bases=(PLONE_APP_CONTENTMENU_FIXTURE,), name="PloneAppContentmenu:Functional"\n+)\n \n \n # Dexterity test layers\n PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name=\'PloneAppContentmenuDX:Integration\')\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentmenuDX:Integration"\n+)\n PLONE_APP_CONTENTMENU_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),\n-    name=\'PloneAppContentmenuDX:Functional\')\n+    bases=(PLONE_APP_CONTENTTYPES_FIXTURE,), name="PloneAppContentmenuDX:Functional"\n+)\ndiff --git a/plone/app/contentmenu/tests/__init__.py b/plone/app/contentmenu/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentmenu/tests/__init__.py\n+++ b/plone/app/contentmenu/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py\nindex 085ede4..e58bd56 100644\n--- a/plone/app/contentmenu/tests/test_menu.py\n+++ b/plone/app/contentmenu/tests/test_menu.py\n@@ -1,31 +1,45 @@\n-# -*- coding: utf-8 -*-\n+from OFS.Folder import Folder\n from plone.app.contentmenu.interfaces import IActionsMenu\n from plone.app.contentmenu.interfaces import IDisplayMenu\n from plone.app.contentmenu.interfaces import IFactoriesMenu\n from plone.app.contentmenu.interfaces import IPortletManagerMenu\n from plone.app.contentmenu.interfaces import IWorkflowMenu\n-from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING  # noqa\n+from plone.app.contentmenu.testing import PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n from plone.app.contenttypes.testing import set_browserlayer\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import ISelectableConstrainTypes\n+from plone.base.utils import get_installer\n+from plone.base.utils import unrestricted_construct_instance\n from plone.locking.interfaces import ILockable\n from Products.CMFCore.Expression import Expression\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n-from Products.CMFPlone.tests import dummy\n-from Products.CMFPlone.utils import _createObjectByType\n-from Products.CMFPlone.utils import get_installer\n from zope.browsermenu.interfaces import IBrowserMenu\n from zope.component import getUtility\n from zope.interface import directlyProvides\n \n import pkg_resources\n import unittest\n-import six\n+\n+\n+class DummyFolder(Folder):\n+    """Dummy Folder\n+    First-class Zope object. Can be _setObject\'ed.\n+    """\n+\n+    id = "dummy_folder"\n+    meta_type = "Dummy Folder"\n+\n+    def __init__(self, id=None, title=None, **kw):\n+        self.__dict__.update(kw)\n+        if id is not None:\n+            self.id = id\n+        if title is not None:\n+            self.title = title\n \n \n class TestActionsMenu(unittest.TestCase):\n@@ -33,14 +47,14 @@ class TestActionsMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_actions\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n+            IBrowserMenu, name="plone_contentmenu_actions", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     def test_actionsMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -51,8 +65,7 @@ def test_actionsMenuImplementsIActionsMenu(self):\n     def test_actionsMenuFindsActions(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertTrue(\n-            \'plone-contentmenu-actions-copy\'\n-            in [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-actions-copy" in [a["extra"]["id"] for a in actions]\n         )\n \n \n@@ -60,15 +73,14 @@ class TestDisplayMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_display\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_display", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     def testActionsMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -80,208 +92,184 @@ def testActionsMenuImplementsIActionsMenu(self):\n \n     def testTemplatesIncluded(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        templates = [a[\'extra\'][\'id\'] for a in actions]\n+        templates = [a["extra"]["id"] for a in actions]\n         self.assertTrue(\n-            \'plone-contentmenu-display-folder_listing\' in templates or\n-            \'plone-contentmenu-display-listing_view\' in templates\n+            "plone-contentmenu-display-folder_listing" in templates\n+            or "plone-contentmenu-display-listing_view" in templates\n             # plone.app.contenttypes has unified views\n         )\n \n     def testSingleTemplateIncluded(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        if self.is_dx:\n-            set_browserlayer(self.request)\n+        self.folder.invokeFactory("Document", "doc1")\n+        set_browserlayer(self.request)\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertEqual(len(actions), 1)\n         self.assertEqual(\n-            actions[0][\'extra\'][\'id\'],\n-            \'plone-contentmenu-display-document_view\'\n+            actions[0]["extra"]["id"], "plone-contentmenu-display-document_view"\n         )\n \n     def testNonBrowserDefaultReturnsNothing(self):\n-        f = dummy.Folder()\n-        self.folder._setObject(\'f1\', f)\n+        f = DummyFolder()\n+        self.folder._setObject("f1", f)\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n         self.assertEqual(len(actions), 0)\n \n     def testDefaultPageIncludesParentOnlyWhenItemHasSingleView(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertIn(\n-            \'folderDefaultPageDisplay\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "folderDefaultPageDisplay",\n+            [a["extra"]["id"] for a in actions],\n         )\n         self.assertNotIn(\n-            \'document_view\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "document_view",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n     def testDefaultPageIncludesParentAndItemViewsWhenItemHasMultipleViews(self):  # noqa\n-        fti = self.portal.portal_types[\'Document\']\n-        if self.is_dx:\n-            documentViews = fti.view_methods + (\'content-core\',)\n-            set_browserlayer(self.request)\n-        else:\n-            documentViews = fti.view_methods + (\'base_view\',)\n+        fti = self.portal.portal_types["Document"]\n+        documentViews = fti.view_methods + ("content-core",)\n+        set_browserlayer(self.request)\n         fti.manage_changeProperties(view_methods=documentViews)\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n+        self.assertIn("folderDefaultPageDisplay", [a["extra"]["id"] for a in actions])\n         self.assertIn(\n-            \'folderDefaultPageDisplay\',\n-            [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-display-document_view",\n+            [a["extra"]["id"] for a in actions],\n         )\n         self.assertIn(\n-            \'plone-contentmenu-display-document_view\',\n-            [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-display-content-core",\n+            [a["extra"]["id"] for a in actions],\n         )\n-        if self.is_dx:\n-            self.assertIn(\n-                \'plone-contentmenu-display-content-core\',\n-                [a[\'extra\'][\'id\'] for a in actions]\n-            )\n-        else:\n-            self.assertIn(\n-                \'plone-contentmenu-display-base_view\',\n-                [a[\'extra\'][\'id\'] for a in actions]\n-            )\n \n     def testCurrentTemplateSelected(self):\n         self.folder.getLayout()\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        selected = [a[\'extra\'][\'id\'] for a in actions if a[\'selected\']]\n+        selected = [a["extra"]["id"] for a in actions if a["selected"]]\n         self.assertTrue(\n-            selected == [\'plone-contentmenu-display-folder_listing\'] or\n-            selected == [\'plone-contentmenu-display-listing_view\']\n+            selected == ["plone-contentmenu-display-folder_listing"]\n+            or selected == ["plone-contentmenu-display-listing_view"]\n             # plone.app.contenttypes has unified views\n         )\n \n     # Default-page selection\n \n     def testFolderCanSetDefaultPage(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.folder.invokeFactory("Folder", "f1")\n         self.assertTrue(self.folder.f1.canSetDefaultPage())\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n-        self.assertTrue(\'contextSetDefaultPage\' in\n-                        [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertTrue("contextSetDefaultPage" in [a["extra"]["id"] for a in actions])\n \n     def testWithCanSetDefaultPageFalse(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n-        self.folder.f1.manage_permission(\'Modify view template\', (\'Manager\',))\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.folder.invokeFactory("Folder", "f1")\n+        self.folder.f1.manage_permission("Modify view template", ("Manager",))\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n         self.assertFalse(self.folder.f1.canSetDefaultPage())\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n-        self.assertNotIn(\n-            \'contextSetDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions]\n-        )\n+        self.assertNotIn("contextSetDefaultPage", [a["extra"]["id"] for a in actions])\n \n     def testSelectItemNotIncludedInNonStructuralFolder(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.folder.invokeFactory("Folder", "f1")\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n         actions = self.menu.getMenuItems(self.folder.f1, self.request)\n         self.assertNotIn(\n-            \'contextSetDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "contextSetDefaultPage",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n     def testDefaultPageSelectedAndOverridesLayout(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        selected = [a[\'extra\'][\'id\'] for a in actions if a[\'selected\']]\n-        self.assertEqual(selected, [\'contextDefaultPageDisplay\'])\n+        selected = [a["extra"]["id"] for a in actions if a["selected"]]\n+        self.assertEqual(selected, ["contextDefaultPageDisplay"])\n \n     def testDefaultPageCanBeChangedInContext(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertTrue(\'contextChangeDefaultPage\' in\n-                        [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertTrue(\n+            "contextChangeDefaultPage" in [a["extra"]["id"] for a in actions]\n+        )\n \n     def testDefaultPageCanBeChangedInFolder(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertIn(\n-            \'folderChangeDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "folderChangeDefaultPage",\n+            [a["extra"]["id"] for a in actions],\n         )\n         self.assertNotIn(\n-            \'contextChangeDefaultPage\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "contextChangeDefaultPage",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n     # Headers/separators\n \n     def testSeparatorsIncludedWhenViewingDefaultPageWithViews(self):\n-        fti = self.portal.portal_types[\'Document\']\n-        if self.is_dx:\n-            documentViews = fti.view_methods + (\'content-core\',)\n-            set_browserlayer(self.request)\n-        else:\n-            documentViews = fti.view_methods + (\'base_view\',)\n+        fti = self.portal.portal_types["Document"]\n+        documentViews = fti.view_methods + ("content-core",)\n+        set_browserlayer(self.request)\n         fti.manage_changeProperties(view_methods=documentViews)\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertTrue(\'folderHeader\' in ids)\n-        self.assertTrue(\'contextHeader\' in ids)\n+        ids = [a["extra"]["id"] for a in actions]\n+        self.assertTrue("folderHeader" in ids)\n+        self.assertTrue("contextHeader" in ids)\n \n     def testSeparatorsNotIncludedWhenViewingDefaultPageWithoutViews(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n-        if self.is_dx:\n-            set_browserlayer(self.request)\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n+        set_browserlayer(self.request)\n         self.assertEqual(len(self.folder.doc1.getAvailableLayouts()), 1)\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertFalse(\'folderHeader\' in ids)\n-        self.assertFalse(\'contextHeader\' in ids)\n+        ids = [a["extra"]["id"] for a in actions]\n+        self.assertFalse("folderHeader" in ids)\n+        self.assertFalse("contextHeader" in ids)\n \n     def testSeparatorsNotDisplayedWhenViewingFolder(self):\n-        fti = self.portal.portal_types[\'Document\']\n-        documentViews = fti.view_methods + (\'base_view\',)\n+        fti = self.portal.portal_types["Document"]\n+        documentViews = fti.view_methods + ("base_view",)\n         fti.manage_changeProperties(view_methods=documentViews)\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertFalse(\'folderHeader\' in ids)\n-        self.assertFalse(\'contextHeader\' in ids)\n+        ids = [a["extra"]["id"] for a in actions]\n+        self.assertFalse("folderHeader" in ids)\n+        self.assertFalse("contextHeader" in ids)\n \n     # Regressions\n \n     def testDefaultPageTemplateTitle(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n-        self.folder.doc1.setTitle(\'New Document\')\n-        self.folder.setDefaultPage(\'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n+        self.folder.doc1.setTitle("New Document")\n+        self.folder.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        changeAction = [x for x in actions if\n-                        x[\'extra\'][\'id\'] == \'contextDefaultPageDisplay\'][0]\n-        changeAction[\'title\'].default\n-        self.assertEqual(\n-            u\'New Document\',\n-            changeAction[\'title\'].mapping[\'contentitem\']\n-        )\n+        changeAction = [\n+            x for x in actions if x["extra"]["id"] == "contextDefaultPageDisplay"\n+        ][0]\n+        changeAction["title"].default\n+        self.assertEqual("New Document", changeAction["title"].mapping["contentitem"])\n \n \n class TestFactoriesMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.folder.invokeFactory("Document", "doc1")\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_factory\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_factory", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -291,67 +279,49 @@ def testMenuImplementsIFactoriesMenu(self):\n \n     def testMenuIncludesFactories(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertIn(\'image\', [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertIn("image", [a["extra"]["id"] for a in actions])\n \n     def testAddViewExpressionUsedInMenu(self):\n         self.folder\n-        self.portal.portal_types[\'Image\']._setPropValue(\n-            \'add_view_expr\', \'string:custom_expr\')\n+        self.portal.portal_types["Image"]._setPropValue(\n+            "add_view_expr", "string:custom_expr"\n+        )\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        urls = [a[\'action\'] for a in actions]\n-        self.assertIn(\'custom_expr\', urls)\n-        if self.is_dx:\n-            self.assertIn(\n-                \'{0}/++add++File\'.format(self.folder.absolute_url()),\n-                urls,\n-            )\n-        else:\n-            found = False\n-            create_url = \'{0}/createObject?type_name=File\'\n-            create_url = create_url.format(self.folder.absolute_url())\n-            for url in urls:\n-                if create_url in url:\n-                    found = True\n-            self.assertTrue(found)\n+        urls = [a["action"] for a in actions]\n+        self.assertIn("custom_expr", urls)\n+        self.assertIn(\n+            f"{self.folder.absolute_url()}/++add++File",\n+            urls,\n+        )\n \n     def testFrontPageExpressionContext(self):\n         # If the expression context uses the front-page instead of the\n         # folder using the front-page, then the expression values will\n         # be incorrect.\n-        self.portal.portal_types[\'Event\']._setPropValue(\n-            \'add_view_expr\', \'string:${folder_url}/+/addATEvent\')\n-        self.folder.invokeFactory(\'Collection\', \'aggregator\')\n-        aggregator = self.folder[\'aggregator\']\n-        self.folder.setDefaultPage(\'aggregator\')\n+        self.portal.portal_types["Event"]._setPropValue(\n+            "add_view_expr", "string:${folder_url}/+/addATEvent"\n+        )\n+        self.folder.invokeFactory("Collection", "aggregator")\n+        aggregator = self.folder["aggregator"]\n+        self.folder.setDefaultPage("aggregator")\n         actions = self.menu.getMenuItems(aggregator, self.request)\n         self.assertTrue(\n-            \'http://nohost/plone/folder/+/addATEvent\' in\n-            [a[\'action\'] for a in actions]\n+            "http://nohost/plone/folder/+/addATEvent" in [a["action"] for a in actions]\n         )\n         self.assertFalse(\n-            \'http://nohost/plone/folder/aggregator/+/addATEvent\' in\n-            [a[\'action\'] for a in actions])\n-\n-    def testTypeNameIsURLQuoted(self):\n-        if self.is_dx:\n-            # DX does not use plusquote\n-            return\n-        actions = self.menu.getMenuItems(self.folder, self.request)\n-        found = False\n-        for url in [a[\'action\'] for a in actions]:\n-            if self.folder.absolute_url() + \'/createObject?type_name=News+Item\' in url:  # noqa\n-                found = True\n-        self.assertTrue(found)\n+            "http://nohost/plone/folder/aggregator/+/addATEvent"\n+            in [a["action"] for a in actions]\n+        )\n \n     def testMenuIncludesFactoriesOnNonFolderishContext(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         img = None\n         for a in actions:\n-            if a[\'extra\'][\'id\'] == \'image\':\n+            if a["extra"]["id"] == "image":\n                 img = a\n                 break\n         self.assertFalse(img is None)\n-        action = img[\'action\']\n+        action = img["action"]\n         url = self.folder.absolute_url()\n         self.assertTrue(action.startswith(url))\n         url = self.folder.doc1.absolute_url()\n@@ -359,165 +329,143 @@ def testMenuIncludesFactoriesOnNonFolderishContext(self):\n \n     def testNoAddableTypes(self):\n         actions = self.menu.getMenuItems(self.portal, self.request)\n-        if self.is_dx:\n-            self.assertEqual(len(actions), 8)\n-        else:\n-            self.assertEqual(len(actions), 9)\n+        self.assertEqual(len(actions), 8)\n \n         # set no types for folders and check the menu is not shown\n-        folder_fti = self.portal.portal_types[\'Folder\']\n+        folder_fti = self.portal.portal_types["Folder"]\n         folder_fti.manage_changeProperties(\n-            filter_content_types=True, allowed_content_types=[])\n+            filter_content_types=True, allowed_content_types=[]\n+        )\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(len(actions), 0)\n \n     def testMenuForFolderishDefaultPages(self):\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        self.portal.invokeFactory(\'Folder\', \'folder3\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        folder1 = self.portal[\'folder1\']\n-        folder2 = self.portal[\'folder2\']\n-        folder3 = self.portal[\'folder3\']\n-        doc1 = self.portal[\'doc1\']\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Folder", "folder2")\n+        self.portal.invokeFactory("Folder", "folder3")\n+        self.portal.invokeFactory("Document", "doc1")\n+        folder1 = self.portal["folder1"]\n+        folder2 = self.portal["folder2"]\n+        folder3 = self.portal["folder3"]\n+        doc1 = self.portal["doc1"]\n \n         # test normal folder\n         actions = self.menu.getMenuItems(folder1, self.request)\n         self.assertEqual(\n-            \'http://nohost/plone/folder1/folder_constraintypes_form\',\n-            actions[-1][\'action\'])\n-        if self.is_dx:\n-            # DX has no Topics\n-            self.assertEqual(len(actions), 9)\n-            self.assertEqual(\n-                \'http://nohost/plone/folder1/++add++Document\',\n-                actions[-2][\'action\'])\n-        else:\n-            self.assertEqual(len(actions), 10)\n-            self.assertTrue(\n-                \'http://nohost/plone/folder1/createObject?type_name=Document\' in actions[-2][\'action\'])  # noqa\n+            "http://nohost/plone/folder1/folder_constraintypes_form",\n+            actions[-1]["action"],\n+        )\n+        self.assertEqual(len(actions), 9)\n+        self.assertEqual(\n+            "http://nohost/plone/folder1/++add++Document", actions[-2]["action"]\n+        )\n \n         # test non-folderish default_page\n-        self.portal.setDefaultPage(\'doc1\')\n+        self.portal.setDefaultPage("doc1")\n         actions = self.menu.getMenuItems(doc1, self.request)\n-        if self.is_dx:\n-            self.assertEqual(\n-                \'http://nohost/plone/++add++Document\',\n-                actions[-1][\'action\'])\n-        else:\n-            self.assertTrue(\n-                \'http://nohost/plone/createObject?type_name=Document\' in actions[-1][\'action\'])  # noqa\n+        self.assertEqual("http://nohost/plone/++add++Document", actions[-1]["action"])\n \n         # test folderish default_page\n         # We need to test a different folder than folder1 to beat memoize.\n-        self.portal.setDefaultPage(\'folder2\')\n+        self.portal.setDefaultPage("folder2")\n         actions = self.menu.getMenuItems(folder2, self.request)\n         self.assertEqual(\n-            \'http://nohost/plone/folder2/@@folder_factories\',\n-            actions[-1][\'action\'])\n+            "http://nohost/plone/folder2/@@folder_factories", actions[-1]["action"]\n+        )\n \n         # test folderish default_page to which no content can be added\n         # set no types for folders and check the link to factories menu-item\n         # is not shown\n-        folder_fti = self.portal.portal_types[\'Folder\']\n+        folder_fti = self.portal.portal_types["Folder"]\n         folder_fti.manage_changeProperties(\n-            filter_content_types=True, allowed_content_types=[])\n-        self.portal.setDefaultPage(\'folder3\')\n+            filter_content_types=True, allowed_content_types=[]\n+        )\n+        self.portal.setDefaultPage("folder3")\n         actions = self.menu.getMenuItems(folder3, self.request)\n-        if self.is_dx:\n-            self.assertEqual(\n-                \'http://nohost/plone/++add++Document\',\n-                actions[-1][\'action\'])\n-        else:\n-            self.assertTrue(\n-                \'http://nohost/plone/createObject?type_name=Document\' in actions[-1][\'action\'])  # noqa\n+        self.assertEqual("http://nohost/plone/++add++Document", actions[-1]["action"])\n \n     def testConstrainTypes(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(len(actions), 2)\n-        self.assertEqual(actions[0][\'extra\'][\'id\'], \'document\')\n-        self.assertEqual(\n-            actions[1][\'extra\'][\'id\'], \'plone-contentmenu-settings\'\n-        )\n+        self.assertEqual(actions[0]["extra"]["id"], "document")\n+        self.assertEqual(actions[1]["extra"]["id"], "plone-contentmenu-settings")\n \n     def testSettingsIncluded(self):\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertEqual(\n-            actions[-1][\'extra\'][\'id\'], \'plone-contentmenu-settings\'\n-        )\n+        self.assertEqual(actions[-1]["extra"]["id"], "plone-contentmenu-settings")\n \n     def testSettingsNotIncludedWhereNotSupported(self):\n-        self.folder.manage_permission(\'Modify constrain types\', (\'Manager\',))\n+        self.folder.manage_permission("Modify constrain types", ("Manager",))\n         actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertFalse(\'_settings\' in [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertFalse("_settings" in [a["extra"]["id"] for a in actions])\n \n     def testMoreIncluded(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\', \'Image\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n-        actions = self.menu.getMenuItems(self.folder, self.request)\n-        self.assertFalse(\'image\' in [a[\'extra\'][\'id\'] for a in actions])\n-        self.assertTrue(\'document\' in [a[\'extra\'][\'id\'] for a in actions])\n-        self.assertTrue(\n-            \'plone-contentmenu-more\' in [a[\'extra\'][\'id\'] for a in actions]\n+        constraints.setLocallyAllowedTypes(\n+            (\n+                "Document",\n+                "Image",\n+            )\n         )\n+        constraints.setImmediatelyAddableTypes(("Document",))\n+        actions = self.menu.getMenuItems(self.folder, self.request)\n+        self.assertFalse("image" in [a["extra"]["id"] for a in actions])\n+        self.assertTrue("document" in [a["extra"]["id"] for a in actions])\n+        self.assertTrue("plone-contentmenu-more" in [a["extra"]["id"] for a in actions])\n         self.assertTrue(\n-            \'plone-contentmenu-settings\' in [a[\'extra\'][\'id\'] for a in actions]\n+            "plone-contentmenu-settings" in [a["extra"]["id"] for a in actions]\n         )\n \n     def testMoreNotIncludedWhenNotNecessary(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n         actions = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(len(actions), 2)\n-        self.assertEqual(actions[0][\'extra\'][\'id\'], \'document\')\n-        self.assertEqual(\n-            actions[1][\'extra\'][\'id\'], \'plone-contentmenu-settings\'\n-        )\n+        self.assertEqual(actions[0]["extra"]["id"], "document")\n+        self.assertEqual(actions[1]["extra"]["id"], "plone-contentmenu-settings")\n \n     def testNonStructualFolderShowsParent(self):\n-        self.folder.invokeFactory(\'Folder\', \'folder1\')\n+        self.folder.invokeFactory("Folder", "folder1")\n         directlyProvides(self.folder.folder1, INonStructuralFolder)\n         constraints = ISelectableConstrainTypes(self.folder.folder1)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n         actions = self.menu.getMenuItems(self.folder.folder1, self.request)\n-        action_ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertTrue(\'event\' in action_ids)\n+        action_ids = [a["extra"]["id"] for a in actions]\n+        self.assertTrue("event" in action_ids)\n \n     def testImgConditionalOnTypeIcon(self):\n         """The <img> element should not render if the content type has\n         no icon expression"""\n-        folder_fti = self.portal.portal_types[\'Folder\']\n-        folder_fti.manage_changeProperties(icon_expr=\'\')\n+        folder_fti = self.portal.portal_types["Folder"]\n+        folder_fti.manage_changeProperties(icon_expr="")\n         for item in self.menu.getMenuItems(self.folder, self.request):\n-            if item[\'id\'] == folder_fti.getId():\n+            if item["id"] == folder_fti.getId():\n                 break\n-        self.assertFalse(item[\'icon\'])\n+        self.assertFalse(item["icon"])\n \n \n class TestWorkflowMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.folder.invokeFactory("Document", "doc1")\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_workflow\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_workflow", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -527,13 +475,14 @@ def testMenuImplementsIActionsMenu(self):\n \n     def testMenuIncludesActions(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertIn(\'workflow-transition-submit\',\n-                      [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertIn("workflow-transition-submit", [a["extra"]["id"] for a in actions])\n         found = False\n         for item in actions:\n-            if (\'http://nohost/plone/folder/doc1/\'\n-                    \'content_status_modify?\'\n-                    \'workflow_action=submit\') in item[\'action\']:\n+            if (\n+                "http://nohost/plone/folder/doc1/"\n+                "content_status_modify?"\n+                "workflow_action=submit"\n+            ) in item["action"]:\n                 found = True\n                 break\n         self.assertTrue(found)\n@@ -542,17 +491,20 @@ def testMenuIncludesActions(self):\n         # usual in older workflows, and which is nice to keep\n         # supporting.\n         context = self.folder.doc1\n-        wf_tool = getToolByName(context, \'portal_workflow\')\n-        submit = wf_tool.plone_workflow.transitions[\'submit\']\n-        submit.actbox_url = \'\'\n+        wf_tool = getToolByName(context, "portal_workflow")\n+        submit = wf_tool.plone_workflow.transitions["submit"]\n+        submit.actbox_url = ""\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertTrue(\'workflow-transition-submit\' in\n-                        [a[\'extra\'][\'id\'] for a in actions])\n+        self.assertTrue(\n+            "workflow-transition-submit" in [a["extra"]["id"] for a in actions]\n+        )\n         found = False\n         for item in actions:\n-            if (\'http://nohost/plone/folder/doc1/\'\n-                    \'content_status_modify?\'\n-                    \'workflow_action=submit\') in item[\'action\']:\n+            if (\n+                "http://nohost/plone/folder/doc1/"\n+                "content_status_modify?"\n+                "workflow_action=submit"\n+            ) in item["action"]:\n                 found = True\n                 break\n         self.assertTrue(found)\n@@ -562,54 +514,39 @@ def testNoTransitions(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertEqual(len(actions), 0)\n \n-    def testLockedItem(self):\n-        if self.is_dx:\n-            # dexterity has no locking ootb\n-            # see https://github.com/plone/plone.app.contenttypes/issues/140\n-            return\n-        membership_tool = getToolByName(self.folder, \'portal_membership\')\n-        membership_tool.addMember(\'anotherMember\', \'secret\', [\'Member\'], [])\n-        locking = ILockable(self.folder.doc1)\n-        locking.lock()\n-        login(self.portal, \'anotherMember\')\n-        actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertEqual(len(actions), 0)\n-\n     def testAdvancedIncluded(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        url = self.folder.doc1.absolute_url() + \'/content_status_history\'\n-        self.assertIn(url, [a[\'action\'] for a in actions])\n+        url = self.folder.doc1.absolute_url() + "/content_status_history"\n+        self.assertIn(url, [a["action"] for a in actions])\n \n     def testPolicyIncludedIfCMFPWIsInstalled(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        url = self.folder.doc1.absolute_url()\\\n-            + \'/placeful_workflow_configuration\'\n-        self.assertFalse(url in [a[\'action\'] for a in actions])\n+        url = self.folder.doc1.absolute_url() + "/placeful_workflow_configuration"\n+        self.assertFalse(url in [a["action"] for a in actions])\n         qi = get_installer(self.portal)\n-        qi.install_product(\'Products.CMFPlacefulWorkflow\')\n+        qi.install_product("Products.CMFPlacefulWorkflow")\n \n         # item needs permission\n         logout()\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertNotIn(url, [a[\'action\'] for a in actions])\n+        self.assertNotIn(url, [a["action"] for a in actions])\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertNotIn(url, [a[\'action\'] for a in actions])\n+        self.assertNotIn(url, [a["action"] for a in actions])\n \n \n class TestManagePortletsMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.folder.invokeFactory("Document", "doc1")\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu_portletmanager\',\n-            context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu_portletmanager", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     def testMenuImplementsIBrowserMenu(self):\n         self.assertTrue(IBrowserMenu.providedBy(self.menu))\n@@ -619,13 +556,16 @@ def testMenuImplementsIActionsMenu(self):\n \n     def testMenuIncludesActions(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        extra_ids = [a[\'extra\'][\'id\'] for a in actions]\n-        self.assertIn(\'portlet-manager-plone.leftcolumn\', extra_ids)\n-        urls = [a[\'action\'].split(\'?_authenticator\')[0] for a in actions]\n+        extra_ids = [a["extra"]["id"] for a in actions]\n+        self.assertIn("portlet-manager-plone.leftcolumn", extra_ids)\n+        urls = [a["action"].split("?_authenticator")[0] for a in actions]\n         self.assertIn(\n-            (\'http://nohost/plone/folder/doc1\'\n-             \'/@@topbar-manage-portlets/plone.leftcolumn\'),\n-            urls)\n+            (\n+                "http://nohost/plone/folder/doc1"\n+                "/@@topbar-manage-portlets/plone.leftcolumn"\n+            ),\n+            urls,\n+        )\n \n     def testNoTransitions(self):\n         logout()\n@@ -635,10 +575,10 @@ def testNoTransitions(self):\n     def testAdvancedIncluded(self):\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         base_url = self.folder.doc1.absolute_url()\n-        url_plone5 = \'{0}/@@topbar-manage-portlets/plone.leftcolumn\'\n+        url_plone5 = "{0}/@@topbar-manage-portlets/plone.leftcolumn"\n         url_plone5 = url_plone5.format(base_url)\n-        url_plone4 = \'{0}/manage-portlets\'.format(base_url)\n-        urls = [a[\'action\'].split(\'?_authenticator\')[0] for a in actions]\n+        url_plone4 = f"{base_url}/manage-portlets"\n+        urls = [a["action"].split("?_authenticator")[0] for a in actions]\n         self.assertIn(url_plone5, urls)\n         self.assertIn(url_plone4, urls)\n \n@@ -647,119 +587,100 @@ class TestContentMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n         # self.folder.invokeFactory(\'Document\', \'doc1\')\n         self.menu = getUtility(\n-            IBrowserMenu, name=\'plone_contentmenu\', context=self.folder)\n-        self.request = self.layer[\'request\']\n-        self.is_dx = self.folder.meta_type == \'Dexterity Container\'\n+            IBrowserMenu, name="plone_contentmenu", context=self.folder\n+        )\n+        self.request = self.layer["request"]\n \n     # Actions sub-menu\n \n     def testActionsSubMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n-        actionsMenuItem = [i for i in items if\n-                           i[\'extra\'][\'id\'] == \'plone-contentmenu-actions\'][0]\n-        self.assertEqual(actionsMenuItem[\'action\'],\n-                         self.folder.absolute_url() + \'/folder_contents\')\n-        self.assertTrue(len(actionsMenuItem[\'submenu\']) > 0)\n+        actionsMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-actions"\n+        ][0]\n+        self.assertEqual(\n+            actionsMenuItem["action"], self.folder.absolute_url() + "/folder_contents"\n+        )\n+        self.assertTrue(len(actionsMenuItem["submenu"]) > 0)\n \n     # Display sub-menu\n \n     def testDisplayMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n-        displayMenuItem = [i for i in items if\n-                           i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'][0]\n-        self.assertEqual(displayMenuItem[\'action\'],\n-                         self.folder.absolute_url() + \'/select_default_view\')\n-        self.assertTrue(len(displayMenuItem[\'submenu\']) > 0)\n-\n-    def testDisplayMenuNotIncludedIfContextDoesNotSupportBrowserDefault(self):\n-        if self.is_dx:\n-            # DX has no ATListCriterion\n-            return\n-        # We need to create an object that does not have\n-        # IBrowserDefault enabled\n-        _createObjectByType(\'ATListCriterion\', self.folder, \'c1\')\n-        items = self.menu.getMenuItems(self.folder.c1, self.request)\n-        self.assertEqual([i for i in items if\n-                          i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'], [])\n-\n-    def testWhenContextDoesNotSupportSelectableBrowserDefault(self):\n-        """Display Menu Show Folder Default Page When Context Does Not\n-        Support Selectable Browser Default"""\n-        if self.is_dx:\n-            # DX has no ATListCriterion\n-            return\n-        # We need to create an object that is not\n-        # ISelectableBrowserDefault aware\n-        _createObjectByType(\'ATListCriterion\', self.folder, \'c1\')\n-        self.folder.c1.setTitle(\'Foo\')\n-        self.folder.setDefaultPage(\'c1\')\n-        items = self.menu.getMenuItems(self.folder.c1, self.request)\n-        displayMenuItem = [i for i in items if\n-                           i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'][0]\n-        selected = [a for a in displayMenuItem[\'submenu\']\n-                    if a[\'selected\']][0]\n-        self.assertEqual(u\'Foo\', selected[\'title\'].mapping[\'contentitem\'])\n+        displayMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ][0]\n+        self.assertEqual(\n+            displayMenuItem["action"],\n+            self.folder.absolute_url() + "/select_default_view",\n+        )\n+        self.assertTrue(len(displayMenuItem["submenu"]) > 0)\n \n     def testDisplayMenuNotIncludedIfNoActionsAvailable(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n         items = self.menu.getMenuItems(self.folder.doc1, self.request)\n-        self.assertEqual([i for i in items if\n-                          i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'], [])\n+        self.assertEqual(\n+            [i for i in items if i["extra"]["id"] == "plone-contentmenu-display"], []\n+        )\n \n     def testDisplayMenuDisabledIfIndexHtmlInFolder(self):\n-        self.folder.invokeFactory(\'Document\', \'index_html\')\n+        self.folder.invokeFactory("Document", "index_html")\n         items = self.menu.getMenuItems(self.folder, self.request)\n-        displayMenuItems = [i for i in items if\n-                            i[\'extra\'][\'id\'] == \'plone-contentmenu-display\']\n+        displayMenuItems = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ]\n         self.assertEqual(len(displayMenuItems), 0)\n \n     def testDisplayMenuDisabledIfIndexHtmlInFolderAndContextIsIndexHtml(self):\n-        self.folder.invokeFactory(\'Document\', \'index_html\')\n+        self.folder.invokeFactory("Document", "index_html")\n         items = self.menu.getMenuItems(self.folder.index_html, self.request)\n-        displayMenuItems = [i for i in items if\n-                            i[\'extra\'][\'id\'] == \'plone-contentmenu-display\']\n+        displayMenuItems = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ]\n         self.assertEqual(len(displayMenuItems), 0)\n \n     def testDisplayMenuAddPrefixFolderForContainerPart(self):\n-        prefix = \'folder-\'\n-        self.folder.invokeFactory(\'Folder\', \'subfolder1\')\n-        self.folder.setDefaultPage(\'subfolder1\')\n+        prefix = "folder-"\n+        self.folder.invokeFactory("Folder", "subfolder1")\n+        self.folder.setDefaultPage("subfolder1")\n         items = self.menu.getMenuItems(self.folder.subfolder1, self.request)\n-        displayMenuItems = [i for i in items if\n-                            i[\'extra\'][\'id\'] == \'plone-contentmenu-display\'][0]\n-        extras = [i[\'extra\'] for i in displayMenuItems[\'submenu\']]\n+        displayMenuItems = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-display"\n+        ][0]\n+        extras = [i["extra"] for i in displayMenuItems["submenu"]]\n         for extra in extras[1:]:\n-            if not extra[\'separator\'] is None:\n+            if not extra["separator"] is None:\n                 break\n-            if extra[\'id\'] in (\'folderDefaultPageDisplay\',\n-                               \'folderChangeDefaultPage\'):\n+            if extra["id"] in ("folderDefaultPageDisplay", "folderChangeDefaultPage"):\n                 break\n             else:\n-                self.assertEqual(extra[\'id\'][0:len(prefix)], prefix)\n+                self.assertEqual(extra["id"][0 : len(prefix)], prefix)\n \n     # Add sub-menu\n \n     def testAddMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'][0]\n-        self.assertIn(self.folder.absolute_url() + \'/folder_factories\',\n-                      factoriesMenuItem[\'action\'])\n-        self.assertTrue(len(factoriesMenuItem[\'submenu\']) > 0)\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ][0]\n+        self.assertIn(\n+            self.folder.absolute_url() + "/folder_factories",\n+            factoriesMenuItem["action"],\n+        )\n+        self.assertTrue(len(factoriesMenuItem["submenu"]) > 0)\n \n     def testAddMenuNotIncludedIfNothingToAdd(self):\n         logout()\n         items = self.menu.getMenuItems(self.folder, self.request)\n         self.assertEqual(\n-            [i for i in items if\n-             i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'], [])\n+            [i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"], []\n+        )\n \n     def testAddMenuWithNothingToAddButWithAvailableConstrainSettings(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n@@ -768,34 +689,36 @@ def testAddMenuWithNothingToAddButWithAvailableConstrainSettings(self):\n         constraints.setImmediatelyAddableTypes(())\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'][0]\n-        self.assertEqual(len(factoriesMenuItem[\'submenu\']), 1)\n-        self.assertEqual(factoriesMenuItem[\'submenu\'][0][\'extra\'][\'id\'],\n-                         \'plone-contentmenu-settings\')\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ][0]\n+        self.assertEqual(len(factoriesMenuItem["submenu"]), 1)\n+        self.assertEqual(\n+            factoriesMenuItem["submenu"][0]["extra"]["id"], "plone-contentmenu-settings"\n+        )\n \n     def testAddMenuWithNothingToAddButWithAvailableMorePage(self):\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n+        constraints.setLocallyAllowedTypes(("Document",))\n         constraints.setImmediatelyAddableTypes(())\n-        self.folder.manage_permission(\'Modify constrain types\', (\'Manager\',))\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        self.folder.manage_permission("Modify constrain types", ("Manager",))\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items\n-            if i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n         ][0]\n-        self.assertEqual(len(factoriesMenuItem[\'submenu\']), 1)\n-        self.assertEqual(factoriesMenuItem[\'submenu\'][0][\'extra\'][\'id\'],\n-                         \'plone-contentmenu-more\')\n+        self.assertEqual(len(factoriesMenuItem["submenu"]), 1)\n+        self.assertEqual(\n+            factoriesMenuItem["submenu"][0]["extra"]["id"], "plone-contentmenu-more"\n+        )\n \n     def testAddMenuRelativeToNonStructuralFolder(self):\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.folder.invokeFactory("Folder", "f1")\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n         items = self.menu.getMenuItems(self.folder.f1, self.request)\n-        factoriesMenuItem = [i for i in items if\n-                             i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\']\n+        factoriesMenuItem = [\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ]\n         self.assertFalse(factoriesMenuItem)\n \n     def testAddMenuWithAddViewExpr(self):\n@@ -803,67 +726,68 @@ def testAddMenuWithAddViewExpr(self):\n         # support constrain types and there is\n         constraints = ISelectableConstrainTypes(self.folder)\n         constraints.setConstrainTypesMode(1)\n-        constraints.setLocallyAllowedTypes((\'Document\',))\n-        constraints.setImmediatelyAddableTypes((\'Document\',))\n-        self.folder.manage_permission(\'Modify constrain types\', (\'Manager\',))\n-        self.portal.portal_types[\'Document\']._setPropValue(\n-            \'add_view_expr\', \'string:custom_expr\')\n+        constraints.setLocallyAllowedTypes(("Document",))\n+        constraints.setImmediatelyAddableTypes(("Document",))\n+        self.folder.manage_permission("Modify constrain types", ("Manager",))\n+        self.portal.portal_types["Document"]._setPropValue(\n+            "add_view_expr", "string:custom_expr"\n+        )\n         items = self.menu.getMenuItems(self.folder, self.request)\n         factoriesMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-factories\'][0]\n-        self.assertEqual(factoriesMenuItem[\'submenu\'][0][\'action\'],\n-                         \'custom_expr\')\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-factories"\n+        ][0]\n+        self.assertEqual(factoriesMenuItem["submenu"][0]["action"], "custom_expr")\n \n     # Workflow sub-menu\n \n     def testWorkflowMenuIncluded(self):\n         items = self.menu.getMenuItems(self.folder, self.request)\n         workflowMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-workflow\'][0]\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-workflow"\n+        ][0]\n         self.assertEqual(\n-            workflowMenuItem[\'action\'],\n-            self.folder.absolute_url() + \'/content_status_history\')\n-        self.assertTrue(len(workflowMenuItem[\'submenu\']) > 0)\n+            workflowMenuItem["action"],\n+            self.folder.absolute_url() + "/content_status_history",\n+        )\n+        self.assertTrue(len(workflowMenuItem["submenu"]) > 0)\n \n     def testWorkflowMenuWithNoTransitionsDisabled(self):\n         logout()\n         items = self.menu.getMenuItems(self.folder, self.request)\n         workflowMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-workflow\'][0]\n-        self.assertEqual(workflowMenuItem[\'action\'], \'\')\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-workflow"\n+        ][0]\n+        self.assertEqual(workflowMenuItem["action"], "")\n \n-    @unittest.skip(\'Unable to write a proper test so far\')\n+    @unittest.skip("Unable to write a proper test so far")\n     def testWorkflowMenuWithNoTransitionsEnabledAsManager(self):\n         # set workflow guard condition that fails, so there are no transitions.\n         # then show that manager will get a drop-down with settings whilst\n         # regular users won\'t\n \n-        self.portal.portal_workflow.doActionFor(self.folder, \'hide\')\n-        wf = self.portal.portal_workflow[\'folder_workflow\']\n-        wf.transitions[\'show\'].guard.expr = Expression(\'python: False\')\n-        wf.transitions[\'publish\'].guard.expr = Expression(\'python: False\')\n+        self.portal.portal_workflow.doActionFor(self.folder, "hide")\n+        wf = self.portal.portal_workflow["folder_workflow"]\n+        wf.transitions["show"].guard.expr = Expression("python: False")\n+        wf.transitions["publish"].guard.expr = Expression("python: False")\n \n         items = self.menu.getMenuItems(self.folder, self.request)\n         workflowMenuItem = [\n-            i for i in items if\n-            i[\'extra\'][\'id\'] == \'plone-contentmenu-workflow\'][0]\n+            i for i in items if i["extra"]["id"] == "plone-contentmenu-workflow"\n+        ][0]\n \n         # A regular user doesn\'t see any actions\n-        self.assertTrue(workflowMenuItem[\'action\'] == \'\')\n-        self.assertTrue(workflowMenuItem[\'submenu\'] is None)\n+        self.assertTrue(workflowMenuItem["action"] == "")\n+        self.assertTrue(workflowMenuItem["submenu"] is None)\n \n-        self.fail(\'Unable to write a proper test so far\')\n+        self.fail("Unable to write a proper test so far")\n \n     def testWorkflowMenuWithNoWorkflowNotIncluded(self):\n-        self.portal.portal_workflow.setChainForPortalTypes((\'Document\',), ())\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal.portal_workflow.setChainForPortalTypes(("Document",), ())\n+        self.folder.invokeFactory("Document", "doc1")\n         actions = self.menu.getMenuItems(self.folder.doc1, self.request)\n         self.assertNotIn(\n-            \'plone_contentmenu_workflow\',\n-            [a[\'extra\'][\'id\'] for a in actions],\n+            "plone_contentmenu_workflow",\n+            [a["extra"]["id"] for a in actions],\n         )\n \n \n@@ -871,13 +795,13 @@ class TestDisplayViewsMenu(unittest.TestCase):\n     layer = PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n-        self.folder = self.portal[\'folder\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n+        self.folder = self.portal["folder"]\n+        self.request = self.layer["request"]\n         set_browserlayer(self.request)\n-        self.menu = getUtility(IBrowserMenu, \'plone_displayviews\')\n+        self.menu = getUtility(IBrowserMenu, "plone_displayviews")\n \n     def _getMenuItemByAction(self, action):\n         context = self.folder\n@@ -887,123 +811,34 @@ def _getMenuItemByAction(self, action):\n     def testInterface(self):\n         """A DisplayViewsMenu implements an extended interface"""\n         from plone.app.contentmenu.interfaces import IDisplayViewsMenu\n+\n         self.assertTrue(IDisplayViewsMenu.providedBy(self.menu))\n \n     def testSimpleAction(self):\n         """Retrieve a registered IBrowserMenuItem"""\n-        if self.folder.meta_type == \'ATFolder\':\n+        if self.folder.meta_type == "ATFolder":\n             # With AT and the current setup the test fails.\n             # The menuitem is there in \'real life\' though.\n-            raise unittest.SkipTest(\'Fails with AT and this setup\')\n-        item = self._getMenuItemByAction(\'summary_view\')\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction(\'folder_summary_view\')\n+            raise unittest.SkipTest("Fails with AT and this setup")\n+        item = self._getMenuItemByAction("summary_view")\n         self.assertFalse(item is None)\n-        self.assertEqual(item.title, u\'Summary view\')\n+        self.assertEqual(item.title, "Summary view")\n \n     def testViewAction(self):\n         """Retrieve a registered IBrowserMenuItem"""\n-        if self.folder.meta_type == \'ATFolder\':\n+        if self.folder.meta_type == "ATFolder":\n             # With AT and the current setup the test fails.\n             # The menuitem is there in \'real life\' though.\n-            raise unittest.SkipTest(\'Fails with AT and this setup\')\n-        item = self._getMenuItemByAction(\'listing_view\')\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction(\'folder_listing\')\n+            raise unittest.SkipTest("Fails with AT and this setup")\n+        item = self._getMenuItemByAction("listing_view")\n         self.assertFalse(item is None)\n-        self.assertEqual(item.title, \'Standard view\')\n-        item = self._getMenuItemByAction(\'@@listing_view\')\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction(\'@@folder_listing\')\n-        self.assertEqual(item.title, \'Standard view\')\n-        item = self._getMenuItemByAction(\'++view++listing_view\')\n-        if item is None:\n-            # Pre Plone 5\n-            item = self._getMenuItemByAction(\'++view++folder_listing\')\n-        self.assertEqual(item.title, \'Standard view\')\n+        self.assertEqual(item.title, "Standard view")\n+        item = self._getMenuItemByAction("@@listing_view")\n+        self.assertEqual(item.title, "Standard view")\n+        item = self._getMenuItemByAction("++view++listing_view")\n+        self.assertEqual(item.title, "Standard view")\n \n     def testNonExisting(self):\n         """Attempt to retrieve a non-registered IBrowserMenuItem"""\n-        item = self._getMenuItemByAction(\'nonesuch.html\')\n+        item = self._getMenuItemByAction("nonesuch.html")\n         self.assertTrue(item is None)\n-\n-\n-if six.PY2:\n-    from plone.app.contentmenu.testing import PloneAppContentmenu\n-    from plone.app.testing import FunctionalTesting\n-    from plone.app.testing import IntegrationTesting\n-    from plone.testing import z2\n-\n-    class PloneAppContentmenuAT(PloneAppContentmenu):\n-\n-        def setUpZope(self, app, configurationContext):\n-            # prepare installing Products.ATContentTypes\n-            import Products.ATContentTypes\n-            self.loadZCML(package=Products.ATContentTypes)\n-\n-            z2.installProduct(app, \'Products.Archetypes\')\n-            z2.installProduct(app, \'Products.ATContentTypes\')\n-            z2.installProduct(app, \'plone.app.blob\')\n-            # prepare installing plone.app.collection\n-            try:\n-                pkg_resources.get_distribution(\'plone.app.collection\')\n-                z2.installProduct(app, \'plone.app.collection\')\n-            except pkg_resources.DistributionNotFound:\n-                pass\n-\n-        def tearDownZope(self, app):\n-            try:\n-                pkg_resources.get_distribution(\'plone.app.collection\')\n-                z2.uninstallProduct(app, \'plone.app.collection\')\n-            except pkg_resources.DistributionNotFound:\n-                pass\n-            z2.uninstallProduct(app, \'plone.app.blob\')\n-            z2.uninstallProduct(app, \'Products.ATContentTypes\')\n-            z2.uninstallProduct(app, \'Products.Archetypes\')\n-\n-        def setUpPloneSite(self, portal):\n-            portal.portal_workflow.setDefaultChain(\n-                \'simple_publication_workflow\')\n-            # install Products.ATContentTypes manually if profile is available\n-            # (this is only needed for Plone >= 5)\n-            profiles = [x[\'id\'] for x in portal.portal_setup.listProfileInfo()]\n-            if \'Products.ATContentTypes:default\' in profiles:\n-                applyProfile(portal, \'Products.ATContentTypes:default\')\n-\n-            # install plone.app.collections manually if profile is available\n-            # (this is only needed for Plone >= 5)\n-            if \'plone.app.collection:default\' in profiles:\n-                applyProfile(portal, \'plone.app.collection:default\')\n-\n-    # AT test layers\n-    PLONE_APP_CONTENTMENU_AT_FIXTURE = PloneAppContentmenuAT()\n-    PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING = IntegrationTesting(\n-        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),\n-        name=\'PloneAppContentmenuAT:Integration\')\n-    PLONE_APP_CONTENTMENU_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-        bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),\n-        name=\'PloneAppContentmenuAT:Functional\')\n-\n-    class TestDisplayViewsMenuAT(TestDisplayViewsMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestActionsMenuAT(TestActionsMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestDisplayMenuAT(TestDisplayMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestContentMenuAT(TestContentMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestManagePortletsMenuAT(TestManagePortletsMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestWorkflowMenuAT(TestWorkflowMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\n-\n-    class TestFactoriesMenuAT(TestFactoriesMenu):\n-        layer = PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING\ndiff --git a/plone/app/contentmenu/view.py b/plone/app/contentmenu/view.py\nindex eff3754..e68666c 100644\n--- a/plone/app/contentmenu/view.py\n+++ b/plone/app/contentmenu/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentmenu.interfaces import IContentMenuView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.browsermenu.interfaces import IBrowserMenu\n@@ -9,10 +8,9 @@\n \n @implementer(IContentMenuView)\n class ContentMenuProvider(ContentProviderBase):\n-    """Content menu provider for the "view" tab: displays the menu\n-    """\n+    """Content menu provider for the "view" tab: displays the menu"""\n \n-    index = ViewPageTemplateFile(\'contentmenu.pt\')\n+    index = ViewPageTemplateFile("contentmenu.pt")\n \n     def render(self):\n         return self.index()\n@@ -23,6 +21,6 @@ def available(self):\n         return True\n \n     def menu(self):\n-        menu = getUtility(IBrowserMenu, name=\'plone_contentmenu\')\n+        menu = getUtility(IBrowserMenu, name="plone_contentmenu")\n         items = menu.getMenuItems(self.context, self.request)\n         return items\ndiff --git a/setup.cfg b/setup.cfg\nindex 6786f91..913f961 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,15 +7,11 @@ ignore =\n     bootstrap-buildout.py\n \n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n-not_skip = __init__.py\n-\n-\n \n [bdist_wheel]\n universal = 1\ndiff --git a/setup.py b/setup.py\nindex 88b927f..4fd66f1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,62 +1,51 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'3.0.0a2.dev0\'\n-long_description = open(\'README.rst\').read() + \'\\n\'\n-long_description += open(\'CHANGES.rst\').read()\n+\n+version = "3.0.0a2.dev0"\n+long_description = open("README.rst").read() + "\\n"\n+long_description += open("CHANGES.rst").read()\n \n setup(\n-    name=\'plone.app.contentmenu\',\n+    name="plone.app.contentmenu",\n     version=version,\n-    description=\'Plone\\\'s content menu implementation\',\n+    description="Plone\'s content menu implementation",\n     long_description=long_description,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope :: 5\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone contentmenu menu\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.contentmenu\',\n-    license=\'GPL version 2\',\n+    keywords="plone contentmenu menu",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.contentmenu",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.app.contenttypes\',\n-            \'six\',\n+            "plone.app.testing",\n+            "plone.app.contenttypes",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.locking\',\n-        \'plone.memoize\',\n-        \'plone.app.content >=2.0a3\',\n-        \'zope.browsermenu\',\n-        \'zope.component\',\n-        \'zope.contentprovider\',\n-        \'zope.interface\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.publisher\',\n-        \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'plone.protect >= 3.0.0a1\',\n-        \'Zope2\',\n+        "setuptools",\n+        "plone.base",\n+        "plone.locking",\n+        "plone.memoize",\n+        "plone.app.content >=2.0a3",\n+        "plone.protect >= 3.0.0a1",\n     ],\n )\n'

