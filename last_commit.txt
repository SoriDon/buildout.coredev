Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2019-06-21T14:26:46+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.outputfilters/commit/dd289093f76683f9fce238afbc3166a5b843a49e

Donâ€™t check for hardcoded image size

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex bf55244..0ddcef3 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -267,7 +267,7 @@ def test_image_captioning_in_news_item(self):\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n+<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>\n </span>"""\n@@ -281,7 +281,7 @@ def test_image_captioning_absolutizes_uncaptioned_image(self):\n     def test_image_captioning_absolute_path(self):\n         text_in = """<img class="captioned" src="/image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n+<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -289,7 +289,7 @@ def test_image_captioning_absolute_path(self):\n     def test_image_captioning_relative_path(self):\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n+<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -310,7 +310,7 @@ def test_image_captioning_relative_path_private_folder(self):\n \n         text_in = """<img class="captioned" src="private/image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n+<dt><img alt="My private image caption" height="..." src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My private image caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -318,7 +318,7 @@ def test_image_captioning_relative_path_private_folder(self):\n     def test_image_captioning_relative_path_scale(self):\n         text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""\n         text_out = """<dl class="captioned">\n-<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a></dt>\n+<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -326,7 +326,7 @@ def test_image_captioning_relative_path_scale(self):\n     def test_image_captioning_resolveuid(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n+<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -334,7 +334,7 @@ def test_image_captioning_resolveuid(self):\n     def test_image_captioning_resolveuid_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n         text_out = """<dl class="captioned">\n-<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a></dt>\n+<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -342,7 +342,7 @@ def test_image_captioning_resolveuid_scale(self):\n     def test_image_captioning_resolveuid_new_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n         text_out = """<dl class="captioned">\n-<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a></dt>\n+<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -368,7 +368,7 @@ def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n-        text_in = """<img alt="Duncan\'s picture" class="image-left captioned" height="144" loop="1" src="resolveuid/notauid" start="fileopen" width="120"/>"""\n+        text_in = """<img alt="Duncan\'s picture" class="image-left captioned" height="..." loop="1" src="resolveuid/notauid" start="fileopen" width="..."/>"""\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_image_captioning_unknown_scale(self):\n@@ -384,17 +384,17 @@ def test_image_captioning_external_url(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_image_captioning_preserves_custom_attributes(self):\n-        text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""\n+        text_in = """<img class="captioned" width="..." height="..." foo="bar" src="image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/></dt>\n+<dt><img alt="My caption" foo="bar" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_unquoted_attributes(self):\n-        text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID\n+        text_in = """<img class=captioned height=... alt="picture alt text" src="resolveuid/%s" width=... />""" % self.UID\n         text_out = """<dl class="captioned">\n-<dt><img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/></dt>\n+<dt><img alt="picture alt text" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -402,7 +402,7 @@ def test_image_captioning_handles_unquoted_attributes(self):\n     def test_image_captioning_preserves_existing_links(self):\n         text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""\n         text_out = """<a class="link" href="/xyzzy"><dl class="image-left captioned">\n-<dt><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></dt>\n+<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>\n </a>"""\n@@ -414,7 +414,7 @@ def test_image_captioning_handles_non_ascii(self):\n             u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = u"""<dl class="captioned">\n-<dt><img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/></dt>\n+<dt><img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="..."/></dt>\n <dd class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2019-06-21T14:29:41+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.outputfilters/commit/e02cc0140a56593e2d7256eba02960fb00e3690a

update changelog

Files changed:
M CHANGES.rst

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex b62aeff..d31e118 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Don't check for hard coded image size in test.\n+  [agitator]\n \n \n 3.1.2 (2019-03-21)\n"

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2019-06-21T19:37:06+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.outputfilters/commit/4bcb5d113bc393b5a27399c0b738492ad6728d65

fewer ellipsis

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 0ddcef3..23e7b71 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -267,7 +267,7 @@ def test_image_captioning_in_news_item(self):\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><dl class="captioned">\n-<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>\n </span>"""\n@@ -281,7 +281,7 @@ def test_image_captioning_absolutizes_uncaptioned_image(self):\n     def test_image_captioning_absolute_path(self):\n         text_in = """<img class="captioned" src="/image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -289,7 +289,7 @@ def test_image_captioning_absolute_path(self):\n     def test_image_captioning_relative_path(self):\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -310,7 +310,7 @@ def test_image_captioning_relative_path_private_folder(self):\n \n         text_in = """<img class="captioned" src="private/image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My private image caption" height="..." src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n <dd class="image-caption">My private image caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -326,7 +326,7 @@ def test_image_captioning_relative_path_scale(self):\n     def test_image_captioning_resolveuid(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -368,7 +368,7 @@ def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n-        text_in = """<img alt="Duncan\'s picture" class="image-left captioned" height="..." loop="1" src="resolveuid/notauid" start="fileopen" width="..."/>"""\n+        text_in = """<img alt="Duncan\'s picture" class="image-left captioned" height="144" loop="1" src="resolveuid/notauid" start="fileopen" width="120"/>"""\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_image_captioning_unknown_scale(self):\n@@ -384,17 +384,17 @@ def test_image_captioning_external_url(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_image_captioning_preserves_custom_attributes(self):\n-        text_in = """<img class="captioned" width="..." height="..." foo="bar" src="image.jpg"/>"""\n+        text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""\n         text_out = """<dl class="captioned">\n-<dt><img alt="My caption" foo="bar" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_unquoted_attributes(self):\n-        text_in = """<img class=captioned height=... alt="picture alt text" src="resolveuid/%s" width=... />""" % self.UID\n+        text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID\n         text_out = """<dl class="captioned">\n-<dt><img alt="picture alt text" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n+<dt><img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/></dt>\n <dd class="image-caption">My caption</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -414,7 +414,7 @@ def test_image_captioning_handles_non_ascii(self):\n             u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = u"""<dl class="captioned">\n-<dt><img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="..."/></dt>\n+<dt><img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/></dt>\n <dd class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</dd>\n </dl>"""\n         self._assertTransformsTo(text_in, text_out)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2020-05-12T10:55:19+02:00
Author: Fred van Dijk (fredvd) <fredvd@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/beb7eb719dd3abf480eac5d307dd956176187f6f

Merge branch 'master' into nofixedsizecheck

Files changed:
A news/.gitkeep
A pyproject.toml
M CHANGES.rst
M MANIFEST.in
M plone/outputfilters/browser/captioned_image.pt
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M setup.py
D .gitattributes

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff67..0000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex d31e118..f9d0d31 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,22 +1,44 @@\n Changelog\n =========\n \n-3.1.3 (unreleased)\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+\n+.. towncrier release notes start\n+\n+4.0.1 (2020-04-21)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Minor packaging updates. (#1)\n+\n+\n+4.0.0 (2020-03-13)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+- Change the image caption template to use ``<figure>`` and ``<figcaption>``.\n+  [thet]\n \n New features:\n \n-- *add item here*\n+- Add an ``ImageCaptioningEnabler`` utility which can be enabled via the portal registry setting ``plone.image_captioning``.\n+  [thet]\n \n Bug fixes:\n \n - Don\'t check for hard coded image size in test.\n   [agitator]\n \n+- Fixed possible package install error with Python 3.6 when no system locale is set.\n+  See `coredev issue 642 <https://github.com/plone/buildout.coredev/issues/642#issuecomment-597008272>`_.\n+  [maurits]\n+\n \n 3.1.2 (2019-03-21)\n ------------------\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex fb5c151..d8df050 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -6,3 +6,6 @@ graft plone\n global-exclude *pyc\n exclude bootstrap.py\n exclude buildout.cfg\n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..8b13789\n--- /dev/null\n+++ b/news/.gitkeep\n@@ -0,0 +1 @@\n+\ndiff --git a/plone/outputfilters/browser/captioned_image.pt b/plone/outputfilters/browser/captioned_image.pt\nindex 3807e38..8f4a9a8 100644\n--- a/plone/outputfilters/browser/captioned_image.pt\n+++ b/plone/outputfilters/browser/captioned_image.pt\n@@ -1,8 +1,6 @@\n-<dl tal:attributes="class options/class;">\n-<dt><a tal:omit-tag="options/isfullsize" rel="lightbox"\n-   tal:attributes="href options/url_path;"\n-   tal:content="structure options/tag">[image goes here]</a></dt>\n- <dd class="image-caption"\n-     tal:content="options/caption|nothing">\n- </dd>\n-</dl>\n+<figure tal:attributes="class options/class;">\n+  <a tal:omit-tag="options/isfullsize" rel="lightbox"\n+      tal:attributes="href options/url_path;"\n+      tal:content="structure options/tag">[image goes here]</a>\n+  <figcaption class="image-caption" tal:content="options/caption|nothing"></figcaption>\n+</figure>\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 2e1a6c5..19ef066 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -15,4 +15,7 @@\n            name="plone5-always-enabled"\n            zcml:condition="have plone-5" />\n \n+  <utility factory=".resolveuid_and_caption.ImageCaptioningEnabler"\n+           name="image-captioning-enabler" />\n+\n </configure>\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 8904a92..957c12f 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -7,6 +7,7 @@\n from DocumentTemplate.DT_Var import newline_to_br\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFPlone.utils import safe_unicode\n from six.moves.urllib.parse import unquote\n@@ -17,6 +18,7 @@\n from ZODB.POSException import ConflictError\n from zope.cachedescriptors.property import Lazy as lazy_property\n from zope.component import getAllUtilitiesRegisteredFor\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.interface import Attribute\n from zope.interface import implementer\n@@ -48,9 +50,20 @@ class IResolveUidsEnabler(Interface):\n         "Boolean indicating whether UID links should be resolved.")\n \n \n+@implementer(IImageCaptioningEnabler)\n+class ImageCaptioningEnabler(object):\n+\n+    @property\n+    def available(self):\n+        name = \'plone.image_captioning\'\n+        registry = getUtility(IRegistry)\n+        if name in registry:\n+            return registry[name]\n+        return False\n+\n+\n @implementer(IResolveUidsEnabler)\n class ResolveUidsAlwaysEnabled(object):\n-\n     available = True\n \n \n@@ -295,9 +308,9 @@ def handle_captioned_image(self, attributes, image, fullimage,\n         klass = \' \'.join(attributes[\'class\'])\n         del attributes[\'class\']\n         del attributes[\'src\']\n-        if \'width\' in attributes:\n+        if \'width\' in attributes and attributes[\'width\']:\n             attributes[\'width\'] = int(attributes[\'width\'])\n-        if \'height\' in attributes:\n+        if \'height\' in attributes and attributes[\'height\']:\n             attributes[\'height\'] = int(attributes[\'height\'])\n         view = fullimage.unrestrictedTraverse(\'@@images\', None)\n         if view is not None:\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 23e7b71..4913ced 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -266,10 +266,10 @@ def test_image_captioning_in_news_item(self):\n \n         # Test captioning\n         output = news_item.text.output\n-        text_out = """<span><dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>\n+        text_out = """<span><figure class="captioned">\n+<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>\n </span>"""\n         self._assertTransformsTo(output, text_out)\n \n@@ -280,18 +280,18 @@ def test_image_captioning_absolutizes_uncaptioned_image(self):\n \n     def test_image_captioning_absolute_path(self):\n         text_in = """<img class="captioned" src="/image.jpg"/>"""\n-        text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_relative_path(self):\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n-        text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_relative_path_private_folder(self):\n@@ -309,42 +309,42 @@ def test_image_captioning_relative_path_private_folder(self):\n         self.logout()\n \n         text_in = """<img class="captioned" src="private/image.jpg"/>"""\n-        text_out = """<dl class="captioned">\n-<dt><img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n-<dd class="image-caption">My private image caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<figcaption class="image-caption">My private image caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_relative_path_scale(self):\n         text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""\n-        text_out = """<dl class="captioned">\n-<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n-        text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n-        text_out = """<dl class="captioned">\n-<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_new_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n-        text_out = """<dl class="captioned">\n-<dt><a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n@@ -355,10 +355,10 @@ def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n \n     def test_image_captioning_resolveuid_no_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n-        text_out = """<dl class="captioned">\n-<dt><img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n@@ -385,26 +385,26 @@ def test_image_captioning_external_url(self):\n \n     def test_image_captioning_preserves_custom_attributes(self):\n         text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""\n-        text_out = """<dl class="captioned">\n-<dt><img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_unquoted_attributes(self):\n         text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID\n-        text_out = """<dl class="captioned">\n-<dt><img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>"""\n+        text_out = """<figure class="captioned">\n+<img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_preserves_existing_links(self):\n         text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""\n-        text_out = """<a class="link" href="/xyzzy"><dl class="image-left captioned">\n-<dt><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></dt>\n-<dd class="image-caption">My caption</dd>\n-</dl>\n+        text_out = """<a class="link" href="/xyzzy"><figure class="image-left captioned">\n+<img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>\n </a>"""\n         self._assertTransformsTo(text_in, text_out)\n \n@@ -413,10 +413,10 @@ def test_image_captioning_handles_non_ascii(self):\n         self.portal[\'image.jpg\'].setDescription(\n             u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n-        text_out = u"""<dl class="captioned">\n-<dt><img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/></dt>\n-<dd class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</dd>\n-</dl>"""\n+        text_out = u"""<figure class="captioned">\n+<img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n+<figcaption class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</figcaption>\n+</figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_resolve_uids_with_bigU(self):\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/setup.py b/setup.py\nindex 782c9ad..07e2701 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,30 @@\n import os\n \n \n-version = \'3.1.3.dev0\'\n+version = \'4.0.2.dev0\'\n+\n+\n+def read(filename):\n+    with open(filename) as myfile:\n+        try:\n+            return myfile.read()\n+        except UnicodeDecodeError:\n+            # Happens on one Jenkins node on Python 3.6,\n+            # so maybe it happens for users too.\n+            pass\n+    # Opening and reading as text failed, so retry opening as bytes.\n+    with open(filename, "rb") as myfile:\n+        contents = myfile.read()\n+        return contents.decode("utf-8")\n+\n+\n+long_description = "\\n".join(\n+    [\n+        read("README.rst"),\n+        read(os.path.join("plone", "outputfilters", "README.rst")),\n+        read("CHANGES.rst"),\n+    ]\n+)\n \n setup(\n     name=\'plone.outputfilters\',\n@@ -14,22 +37,19 @@\n         "Transformations applied to HTML in "\n         "Plone text fields as they are rendered"\n     ),\n-    long_description=(\n-        open("README.rst").read()\n-        + "\\n"\n-        + open(os.path.join("plone", "outputfilters", "README.rst")).read()\n-        + "\\n"\n-        + open("CHANGES.rst").read()\n-    ),\n+    long_description=long_description,\n     # Get more strings from https://pypi.org/classifiers/\n     classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n     ],\n     keywords=\'plone transform filter uid caption\',\n     author=\'David Glick, Plone Foundation\',\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T23:04:23+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/bca60f2d5e20b325d4c60156375f31f65c0d5e39

Merge branch 'master' into nofixedsizecheck

Files changed:
A news/53.bgfix
A plone/outputfilters/filters/picture_variants.py
A plone/outputfilters/tests/test_picture_variants.py
M CHANGES.rst
M bootstrap.py
M plone/__init__.py
M plone/outputfilters/README.rst
M plone/outputfilters/__init__.py
M plone/outputfilters/browser/captioned_image.pt
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M setup.cfg
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex f9d0d31..7b67a41 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,35 @@ Changelog\n \n .. towncrier release notes start\n \n+5.0.0b1 (2022-06-23)\n+--------------------\n+\n+New features:\n+\n+\n+- Add image_srcset output filter, to convert IMG tags into PICTURE tags with multiple source definitions as define in imaging control panel [MrTango] (#49)\n+\n+\n+4.1.0 (2022-02-23)\n+------------------\n+\n+New features:\n+\n+\n+- Resolve UIDs in SRC= attribute of of SOURCE and IFRAME elements. (#47)\n+\n+\n+4.0.2 (2020-09-28)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- fix AttributeError: \'NoneType\' object has no attribute \'unwrap\' exception when a fullsize image is wrapped in an <a> tag. [flipmcf] (#39)\n+- Fixed deprecation warning for html_quote.\n+  [maurits] (#3130)\n+\n+\n 4.0.1 (2020-04-21)\n ------------------\n \ndiff --git a/bootstrap.py b/bootstrap.py\nindex 1f59b21..85111f9 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,19 +18,20 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n-__version__ = \'2015-07-01\'\n+__version__ = "2015-07-01"\n # See zc.buildout\'s changelog if this version is up to date.\n \n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n+tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -40,36 +41,50 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --buildout-version, "\n-                        "the bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n+parser.add_option(\n+    "--version",\n+    action="store_true",\n+    default=False,\n+    help=("Return bootstrap.py version."),\n+)\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --buildout-version, "\n+        "the bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n+parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n+parser.add_option(\n+    "--setuptools-to-dir",\n+    help=("Allow for re-use of existing directory of " "setuptools versions"),\n+)\n \n options, args = parser.parse_args()\n if options.version:\n@@ -86,37 +101,38 @@\n     from urllib2 import urlopen\n \n ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n+if os.path.exists("ez_setup.py"):\n+    exec(open("ez_setup.py").read(), ez)\n else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             # Strip all site-packages directories from sys.path that\n             # are not sys.prefix; this is because on Windows\n             # sys.prefix is a site-package directory.\n             if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n+                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n+    setup_args["to_dir"] = options.setuptools_to_dir\n \n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -129,30 +145,37 @@\n \n ws = pkg_resources.working_set\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n # Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n+    + "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.buildout_version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -160,12 +183,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -184,13 +206,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -199,12 +222,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/news/53.bgfix b/news/53.bgfix\nnew file mode 100644\nindex 0000000..837334f\n--- /dev/null\n+++ b/news/53.bgfix\n@@ -0,0 +1,2 @@\n+isort, black, pyupgrade, manual six removal. \n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst\nindex 454b166..31342f9 100644\n--- a/plone/outputfilters/README.rst\n+++ b/plone/outputfilters/README.rst\n@@ -62,7 +62,7 @@ be applied::\n     >>> portal = layer[\'portal\']\n     >>> str(portal.portal_transforms.convertTo(\'text/x-html-safe\',\n     ...     \'test--test\', mimetype=\'text/html\', context=portal))\n-    \'test\xe2\x80\x94test\'\n+    \'test\xe2\x80\x94test\\n\'\n \n \n How it works\ndiff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py\nindex 5dda827..aa75185 100644\n--- a/plone/outputfilters/__init__.py\n+++ b/plone/outputfilters/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n def apply_filters(filters, data):\n     by_order = lambda x: x.order\n     filters = sorted(filters, key=by_order)\ndiff --git a/plone/outputfilters/browser/captioned_image.pt b/plone/outputfilters/browser/captioned_image.pt\nindex 8f4a9a8..637ba2a 100644\n--- a/plone/outputfilters/browser/captioned_image.pt\n+++ b/plone/outputfilters/browser/captioned_image.pt\n@@ -1,6 +1,4 @@\n <figure tal:attributes="class options/class;">\n-  <a tal:omit-tag="options/isfullsize" rel="lightbox"\n-      tal:attributes="href options/url_path;"\n-      tal:content="structure options/tag">[image goes here]</a>\n+  <picture tal:replace="structure options/tag"></picture>\n   <figcaption class="image-caption" tal:content="options/caption|nothing"></figcaption>\n </figure>\ndiff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py\nindex 2e08478..72c05c4 100644\n--- a/plone/outputfilters/browser/captioned_image.py\n+++ b/plone/outputfilters/browser/captioned_image.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from zope.cachedescriptors.property import Lazy as lazy_property\n \n \n class CaptionedImageView(BrowserView):\n-    """Captioned image template.\n-    """\n+    """Captioned image template."""\n \n     @lazy_property\n     def template(self):\ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex e774de2..8c1e05b 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n+from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n@@ -13,19 +13,22 @@\n     from zope.app.component.hooks import getSite\n \n \n+@deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n def uuidToURL(uuid):\n-    """Resolves a UUID to a URL via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    """Resolves a UUID to a URL via the UID index of portal_catalog."""\n+    catalog = getToolByName(getSite(), "portal_catalog")\n     res = catalog.unrestrictedSearchResults(UID=uuid)\n     if res:\n         return res[0].getURL()\n \n \n+@deprecate(\n+    "Please use plone.app.uuid.utils.uuidToObject instead. "\n+    "But be aware that this does an extra security check."\n+)\n def uuidToObject(uuid):\n-    """Resolves a UUID to an object via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    """Resolves a UUID to an object via the UID index of portal_catalog."""\n+    catalog = getToolByName(getSite(), "portal_catalog")\n     res = catalog.unrestrictedSearchResults(UID=uuid)\n     if res:\n         return res[0]._unrestrictedGetObject()\n@@ -34,31 +37,33 @@ def uuidToObject(uuid):\n try:\n     from plone.uuid.interfaces import IUUID\n except ImportError:\n+\n     def uuidFor(obj):\n         return obj.UID()\n+\n else:\n+\n     def uuidFor(obj):\n         uuid = IUUID(obj, None)\n-        if uuid is None and hasattr(aq_base(obj), \'UID\'):\n+        if uuid is None and hasattr(aq_base(obj), "UID"):\n             uuid = obj.UID()\n         return uuid\n \n \n @implementer(IPublishTraverse)\n class ResolveUIDView(BrowserView):\n-    """Resolve a URL like /resolveuid/<uuid> to a normalized URL.\n-    """\n+    """Resolve a URL like /resolveuid/<uuid> to a normalized URL."""\n \n     subpath = None\n \n     def publishTraverse(self, request, name):\n         self.uuid = name\n-        traverse_subpath = self.request[\'TraversalRequestNameStack\']\n+        traverse_subpath = self.request["TraversalRequestNameStack"]\n         if traverse_subpath:\n             traverse_subpath = list(traverse_subpath)\n             traverse_subpath.reverse()\n             self.subpath = traverse_subpath\n-            self.request[\'TraversalRequestNameStack\'] = []\n+            self.request["TraversalRequestNameStack"] = []\n         return self\n \n     def __call__(self):\n@@ -68,11 +73,11 @@ def __call__(self):\n             raise NotFound("The link you followed is broken")\n \n         if self.subpath:\n-            url = \'/\'.join([url] + self.subpath)\n+            url = "/".join([url] + self.subpath)\n \n         if self.request.QUERY_STRING:\n-            url += \'?\' + self.request.QUERY_STRING\n+            url += "?" + self.request.QUERY_STRING\n \n         self.request.response.redirect(url, status=301)\n \n-        return \'\'\n+        return ""\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 19ef066..4376517 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -3,6 +3,13 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n \n+  <adapter\n+    provides="..interfaces.IFilter"\n+    name="picture_variants"\n+    for="* *"\n+    factory=".picture_variants.PictureVariantsFilter"\n+    />\n+\n   <adapter\n     provides="..interfaces.IFilter"\n     name="resolveuid_and_caption"\ndiff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py\nindex 9a79ff0..db105ad 100644\n--- a/plone/outputfilters/filters/example.py\n+++ b/plone/outputfilters/filters/example.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.interfaces import IFilter\n from zope.interface import implementer\n \n@@ -6,7 +5,7 @@\n \n \n @implementer(IFilter)\n-class EmDashAdder(object):\n+class EmDashAdder:\n     order = 1000\n \n     def __init__(self, context, request):\n@@ -15,7 +14,7 @@ def __init__(self, context, request):\n     def is_enabled(self):\n         return True\n \n-    pattern = re.compile(r\'--\')\n+    pattern = re.compile(r"--")\n \n     def __call__(self, data):\n-        return self.pattern.sub(u\'\xe2\x80\x94\', data)\n+        return self.pattern.sub("\xe2\x80\x94", data)\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nnew file mode 100644\nindex 0000000..552f684\n--- /dev/null\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -0,0 +1,50 @@\n+from bs4 import BeautifulSoup\n+from plone.base.utils import safe_text\n+from plone.namedfile.picture import get_picture_variants\n+from plone.namedfile.picture import Img2PictureTag\n+from plone.outputfilters.interfaces import IFilter\n+from zope.interface import implementer\n+\n+import logging\n+\n+\n+logger = logging.getLogger("plone.outputfilter.picture_variants")\n+\n+\n+@implementer(IFilter)\n+class PictureVariantsFilter:\n+    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions."""\n+\n+    order = 700\n+\n+    def is_enabled(self):\n+        return self.context is not None\n+\n+    def __init__(self, context=None, request=None):\n+        self.current_status = None\n+        self.context = context\n+        self.request = request\n+        self.img2picturetag = Img2PictureTag()\n+\n+    def __call__(self, data):\n+        soup = BeautifulSoup(safe_text(data), "html.parser")\n+\n+        for elem in soup.find_all("img"):\n+            picture_variant_name = elem.attrs.get("data-picturevariant", "")\n+            if not picture_variant_name:\n+                continue\n+            picture_variants_config = get_picture_variants().get(picture_variant_name)\n+            if not picture_variants_config:\n+                logger.warn(\n+                    "Could not find the given picture_variant_name {}, leave tag untouched!".format(\n+                        picture_variant_name\n+                    )\n+                )\n+                continue\n+            sourceset = picture_variants_config.get("sourceset")\n+            if not sourceset:\n+                continue\n+            elem.replace_with(\n+                self.img2picturetag.create_picture_tag(sourceset, elem.attrs)\n+            )\n+        return soup.prettify()\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 957c12f..fc2b411 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,19 +1,19 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n-from DocumentTemplate.DT_Util import html_quote\n from DocumentTemplate.DT_Var import newline_to_br\n+from DocumentTemplate.html_quote import html_quote\n+from plone.base.utils import safe_text\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFPlone.utils import safe_unicode\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n-from six.moves.urllib.parse import urlunsplit\n+from urllib.parse import unquote\n+from urllib.parse import urljoin\n+from urllib.parse import urlsplit\n+from urllib.parse import urlunsplit\n from zExceptions import NotFound\n from ZODB.POSException import ConflictError\n from zope.cachedescriptors.property import Lazy as lazy_property\n@@ -26,36 +26,27 @@\n from zope.publisher.interfaces import NotFound as ztkNotFound\n \n import re\n-import six\n \n \n-HAS_LINGUAPLONE = True\n-try:\n-    from Products.LinguaPlone.utils import translated_references\n-except ImportError:\n-    HAS_LINGUAPLONE = False\n-\n-\n-appendix_re = re.compile(\'^(.*)([?#].*)$\')\n-resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n+appendix_re = re.compile("^(.*)([?#].*)$")\n+resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n \n \n class IImageCaptioningEnabler(Interface):\n     available = Attribute(\n-        "Boolean indicating whether image captioning should be performed.")\n+        "Boolean indicating whether image captioning should be performed."\n+    )\n \n \n class IResolveUidsEnabler(Interface):\n-    available = Attribute(\n-        "Boolean indicating whether UID links should be resolved.")\n+    available = Attribute("Boolean indicating whether UID links should be resolved.")\n \n \n @implementer(IImageCaptioningEnabler)\n-class ImageCaptioningEnabler(object):\n-\n+class ImageCaptioningEnabler:\n     @property\n     def available(self):\n-        name = \'plone.image_captioning\'\n+        name = "plone.image_captioning"\n         registry = getUtility(IRegistry)\n         if name in registry:\n             return registry[name]\n@@ -63,23 +54,40 @@ def available(self):\n \n \n @implementer(IResolveUidsEnabler)\n-class ResolveUidsAlwaysEnabled(object):\n+class ResolveUidsAlwaysEnabled:\n     available = True\n \n \n def tag(img, **attributes):\n-    if hasattr(aq_base(img), \'tag\'):\n+    if hasattr(aq_base(img), "tag"):\n         return img.tag(**attributes)\n \n \n @implementer(IFilter)\n-class ResolveUIDAndCaptionFilter(object):\n-    """ Parser to convert UUID links and captioned images """\n-\n-    singleton_tags = set([\n-        \'area\', \'base\', \'basefont\', \'br\', \'col\', \'command\', \'embed\', \'frame\',\n-        \'hr\', \'img\', \'input\', \'isindex\', \'keygen\', \'link\', \'meta\', \'param\',\n-        \'source\', \'track\', \'wbr\'])\n+class ResolveUIDAndCaptionFilter:\n+    """Parser to convert UUID links and captioned images"""\n+\n+    singleton_tags = {\n+        "area",\n+        "base",\n+        "basefont",\n+        "br",\n+        "col",\n+        "command",\n+        "embed",\n+        "frame",\n+        "hr",\n+        "img",\n+        "input",\n+        "isindex",\n+        "keygen",\n+        "link",\n+        "meta",\n+        "param",\n+        "source",\n+        "track",\n+        "wbr",\n+    }\n \n     def __init__(self, context=None, request=None):\n         self.current_status = None\n@@ -91,8 +99,7 @@ def __init__(self, context=None, request=None):\n \n     @lazy_property\n     def captioned_image_template(self):\n-        return self.context.restrictedTraverse(\n-            \'plone.outputfilters_captioned_image\')\n+        return self.context.restrictedTraverse("plone.outputfilters_captioned_image")\n \n     @lazy_property\n     def captioned_images(self):\n@@ -117,87 +124,146 @@ def is_enabled(self):\n     def _shorttag_replace(self, match):\n         tag = match.group(1)\n         if tag in self.singleton_tags:\n-            return \'<\' + tag + \' />\'\n+            return "<" + tag + " />"\n         else:\n-            return \'<\' + tag + \'></\' + tag + \'>\'\n+            return "<" + tag + "></" + tag + ">"\n \n-    def __call__(self, data):\n-        data = re.sub(r\'<([^<>\\s]+?)\\s*/>\', self._shorttag_replace, data)\n-        soup = BeautifulSoup(safe_unicode(data), \'html.parser\')\n+    def _render_resolveuid(self, href):\n+        url_parts = urlsplit(href)\n+        scheme = url_parts[0]\n+        path_parts = urlunsplit(["", ""] + list(url_parts[2:]))\n+        obj, subpath, appendix = self.resolve_link(path_parts)\n+        if obj is not None:\n+            href = obj.absolute_url()\n+            if subpath:\n+                href += "/" + subpath\n+            href += appendix\n+        elif (\n+            resolveuid_re.match(href) is None\n+            and not scheme\n+            and not href.startswith("/")\n+        ):\n+            # absolutize relative URIs; this text isn\'t necessarily\n+            # being rendered in the context where it was stored\n+            relative_root = self.context\n+            if not getattr(self.context, "isPrincipiaFolderish", False):\n+                relative_root = aq_parent(self.context)\n+            actual_url = relative_root.absolute_url()\n+            href = urljoin(actual_url + "/", subpath) + appendix\n+        return href\n \n-        for elem in soup.find_all([\'a\', \'area\']):\n+    def __call__(self, data):\n+        data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n+        soup = BeautifulSoup(safe_text(data), "html.parser")\n+        for elem in soup.find_all(["a", "area"]):\n             attributes = elem.attrs\n-            href = attributes.get(\'href\')\n+            href = attributes.get("href")\n             # an \'a\' anchor element has no href\n             if not href:\n                 continue\n-            url_parts = urlsplit(href)\n-            scheme = url_parts[0]\n-            # we are only interested in path and beyond /foo/bar?x=2#abc\n-            path_parts = urlunsplit([\'\', \'\'] + list(url_parts[2:]))\n-            if not href.startswith(\'mailto<\') \\\n-                    and not href.startswith(\'mailto:\') \\\n-                    and not href.startswith(\'tel:\') \\\n-                    and not href.startswith(\'#\'):\n-                obj, subpath, appendix = self.resolve_link(path_parts)\n-                if obj is not None:\n-                    href = obj.absolute_url()\n-                    if subpath:\n-                        href += \'/\' + subpath\n-                    href += appendix\n-                elif resolveuid_re.match(href) is None \\\n-                        and not scheme \\\n-                        and not href.startswith(\'/\'):\n-                    # absolutize relative URIs; this text isn\'t necessarily\n-                    # being rendered in the context where it was stored\n-                    relative_root = self.context\n-                    if not getattr(\n-                            self.context, \'isPrincipiaFolderish\', False):\n-                        relative_root = aq_parent(self.context)\n-                    actual_url = relative_root.absolute_url()\n-                    href = urljoin(actual_url + \'/\', subpath) + appendix\n-                attributes[\'href\'] = href\n-        for elem in soup.find_all(\'img\'):\n+            if (\n+                not href.startswith("mailto<")\n+                and not href.startswith("mailto:")\n+                and not href.startswith("tel:")\n+                and not href.startswith("#")\n+            ):\n+                attributes["href"] = self._render_resolveuid(href)\n+        for elem in soup.find_all(["source", "img"]):\n+            # handles srcset attributes, not src\n+            # parent of SOURCE is picture here.\n+            # SRCSET on source/img specifies one or more images (see below).\n+            attributes = elem.attrs\n+            srcset = attributes.get("srcset")\n+            if not srcset:\n+                continue\n+            # https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\n+            # [(src1, 480w), (src2, 360w)]\n+            srcs = [\n+                src.strip().split() for src in srcset.strip().split(",") if src.strip()\n+            ]\n+            for idx, elm in enumerate(srcs):\n+                image_url = elm[0]\n+                image, fullimage, src, description = self.resolve_image(image_url)\n+                srcs[idx][0] = src\n+            attributes["srcset"] = ",".join(" ".join(src) for src in srcs)\n+        for elem in soup.find_all(["source", "iframe", "audio", "video"]):\n+            # parent of SOURCE is video or audio here.\n+            # AUDIO/VIDEO can also have src attribute.\n+            # IFRAME is used to embed PDFs.\n             attributes = elem.attrs\n-            src = attributes.get(\'src\', \'\')\n+            src = attributes.get("src")\n+            if not src:\n+                continue\n+            attributes["src"] = self._render_resolveuid(src)\n+        for elem in soup.find_all(["img", "picture"]):\n+            if elem.name == "picture":\n+                img_elem = elem.find("img")\n+            else:\n+                img_elem = elem\n+            # handle src attribute\n+            attributes = img_elem.attrs\n+            src = attributes.get("src", "")\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n-\n+            if image and hasattr(image, "width"):\n+                if "width" not in attributes:\n+                    attributes["width"] = image.width\n+                if "height" not in attributes:\n+                    attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n-                title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n-                if not attributes.get(\'alt\'):\n-                    # XXX alt attribute contains *alternate* text\n-                    attributes[\'alt\'] = description or title\n-                if \'title\' not in attributes:\n-                    attributes[\'title\'] = title\n-\n-            caption = description\n-            # Check if the image needs to be captioned\n-            if (\n-                self.captioned_images and\n-                image is not None and\n-                caption and\n-                \'captioned\' in attributes.get(\'class\', [])\n-            ):\n-                self.handle_captioned_image(\n-                    attributes, image, fullimage, elem, caption)\n-        return six.text_type(soup)\n-\n-    def lookup_uid(self, uid):\n-        context = self.context\n-        if HAS_LINGUAPLONE:\n-            # If we have LinguaPlone installed, add support for language-aware\n-            # references\n-            uids = translated_references(context, context.Language(), uid)\n-            if len(uids) > 0:\n-                uid = uids[0]\n-        return uuidToObject(uid)\n+                title = safe_text(aq_acquire(fullimage, "Title")())\n+                if not attributes.get("alt"):\n+                    # bettr an emty alt tag than none. This avoid\'s screen readers\n+                    # to read the file name instead. A better fallback would be\n+                    # a fallback alt text comming from the img object.\n+                    attributes["alt"] = ""\n+                if "title" not in attributes:\n+                    attributes["title"] = title\n+\n+            # handle captions\n+            if "captioned" in elem.attrs.get("class", []):\n+                caption = description\n+                caption_manual_override = attributes.get("data-captiontext", "")\n+                if caption_manual_override:\n+                    caption = caption_manual_override\n+                # Check if the image needs to be captioned\n+                if self.captioned_images and caption:\n+                    options = {}\n+                    options["tag"] = elem.prettify()\n+                    options["caption"] = newline_to_br(html_quote(caption))\n+                    options["class"] = " ".join(attributes["class"])\n+                    del attributes["class"]\n+                    if elem.name == "picture":\n+                        elem.append(img_elem)\n+                    captioned = BeautifulSoup(\n+                        self.captioned_image_template(**options), "html.parser"\n+                    )\n+\n+                    # if we are a captioned image within a link, remove and occurrences\n+                    # of a tags inside caption template to preserve the outer link\n+                    if bool(elem.find_parent("a")) and bool(captioned.find("a")):\n+                        captioned.a.unwrap()\n+                    if elem.name == "picture":\n+                        del captioned.picture.img["class"]\n+                    else:\n+                        del captioned.img["class"]\n+                    elem.replace_with(captioned)\n+        return str(soup)\n+\n+    def resolve_scale_data(self, url):\n+        """return scale url, width and height"""\n+        url_parts = url.split("/")\n+        field_name = url_parts[-2]\n+        scale_name = url_parts[-1]\n+        obj, subpath, appendix = self.resolve_link(url)\n+        scale_view = obj.unrestrictedTraverse("@@images", None)\n+        return scale_view.scale(field_name, scale_name, pre=True)\n \n     def resolve_link(self, href):\n         obj = None\n         subpath = href\n-        appendix = \'\'\n+        appendix = ""\n \n         # preserve querystring and/or appendix\n         match = appendix_re.match(href)\n@@ -208,37 +274,37 @@ def resolve_link(self, href):\n             match = resolveuid_re.match(subpath)\n             if match is not None:\n                 uid, _subpath = match.groups()\n-                obj = self.lookup_uid(uid)\n+                obj = uuidToObject(uid)\n                 if obj is not None:\n                     subpath = _subpath\n \n         return obj, subpath, appendix\n \n     def resolve_image(self, src):\n-        description = \'\'\n+        description = ""\n         if urlsplit(src)[0]:\n             # We have a scheme\n             return None, None, src, description\n-\n         base = self.context\n         subpath = src\n-        appendix = \'\'\n+        appendix = ""\n \n         def traversal_stack(base, path):\n-            if path.startswith(\'/\'):\n+            if path.startswith("/"):\n                 base = getSite()\n                 path = path[1:]\n             obj = base\n             stack = [obj]\n-            components = path.split(\'/\')\n+            components = path.split("/")\n+            # print("components: {}".format(components))\n             while components:\n                 child_id = unquote(components.pop(0))\n                 try:\n-                    if hasattr(aq_base(obj), \'scale\'):\n+                    if hasattr(aq_base(obj), "scale"):\n                         if components:\n-                            child = obj.scale(child_id, components.pop())\n+                            child = obj.scale(child_id, components.pop(), pre=True)\n                         else:\n-                            child = obj.scale(child_id)\n+                            child = obj.scale(child_id, pre=True)\n                     else:\n                         # Do not use restrictedTraverse here; the path to the\n                         # image may lead over containers that lack the View\n@@ -253,6 +319,7 @@ def traversal_stack(base, path):\n                     return\n                 obj = child\n                 stack.append(obj)\n+            # print(f"traversal_stack: {stack}")\n             return stack\n \n         def traverse_path(base, path):\n@@ -265,14 +332,18 @@ def traverse_path(base, path):\n         if obj is not None:\n             # resolved uid\n             fullimage = obj\n-            image = traverse_path(fullimage, subpath)\n-        elif \'/@@\' in subpath:\n+            image = None\n+            if not subpath:\n+                image = traverse_path(fullimage, "@@images/image")\n+            if image is None:\n+                image = traverse_path(fullimage, subpath)\n+        elif "/@@" in subpath:\n             # split on view\n-            pos = subpath.find(\'/@@\')\n+            pos = subpath.find("/@@")\n             fullimage = traverse_path(base, subpath[:pos])\n             if fullimage is None:\n                 return None, None, src, description\n-            image = traverse_path(fullimage, subpath[pos + 1:])\n+            image = traverse_path(fullimage, subpath[pos + 1 :])\n         else:\n             stack = traversal_stack(base, subpath)\n             if stack is None:\n@@ -283,71 +354,20 @@ def traverse_path(base, path):\n             if not IContentish.providedBy(fullimage):\n                 stack.reverse()\n                 for parent in stack:\n-                    if hasattr(aq_base(parent), \'tag\'):\n+                    if hasattr(aq_base(parent), "tag"):\n                         fullimage = parent\n                         break\n+            if not hasattr(image, "width"):\n+                image_scale = traverse_path(image, "@@images/image")\n+                if image_scale:\n+                    image = image_scale\n \n         if image is None:\n             return None, None, src, description\n-\n         try:\n             url = image.absolute_url()\n         except AttributeError:\n             return None, None, src, description\n         src = url + appendix\n-        description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n+        description = safe_text(aq_acquire(fullimage, "Description")())\n         return image, fullimage, src, description\n-\n-    def handle_captioned_image(self, attributes, image, fullimage,\n-                               elem, caption):\n-        """Handle captioned image.\n-\n-        The img element is replaced by a definition list\n-        as created by the template ../browser/captioned_image.pt\n-        """\n-        klass = \' \'.join(attributes[\'class\'])\n-        del attributes[\'class\']\n-        del attributes[\'src\']\n-        if \'width\' in attributes and attributes[\'width\']:\n-            attributes[\'width\'] = int(attributes[\'width\'])\n-        if \'height\' in attributes and attributes[\'height\']:\n-            attributes[\'height\'] = int(attributes[\'height\'])\n-        view = fullimage.unrestrictedTraverse(\'@@images\', None)\n-        if view is not None:\n-            original_width, original_height = view.getImageSize()\n-        else:\n-            original_width, original_height = fullimage.width, fullimage.height\n-        if image is not fullimage:\n-            # image is a scale object\n-            tag = image.tag\n-            width = image.width\n-        else:\n-            if hasattr(aq_base(image), \'tag\'):\n-                tag = image.tag\n-            else:\n-                tag = view.scale().tag\n-            width = original_width\n-        options = {\n-            \'class\': klass,\n-            \'originalwidth\': attributes.get(\'width\', None),\n-            \'originalalt\': attributes.get(\'alt\', None),\n-            \'url_path\': fullimage.absolute_url_path(),\n-            \'caption\': newline_to_br(html_quote(caption)),\n-            \'image\': image,\n-            \'fullimage\': fullimage,\n-            \'tag\': tag(**attributes),\n-            \'isfullsize\': image is fullimage or (\n-                image.width == original_width and\n-                image.height == original_height),\n-            \'width\': attributes.get(\'width\', width),\n-        }\n-\n-        captioned = BeautifulSoup(\n-            self.captioned_image_template(**options), \'html.parser\')\n-\n-        # if we are a captioned image within a link, remove and occurrences\n-        # of a tags inside caption template to preserve the outer link\n-        if bool(elem.find_parent(\'a\')):\n-            captioned.a.unwrap()\n-\n-        elem.replace_with(captioned)\ndiff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py\nindex 2b109bc..69f50f9 100644\n--- a/plone/outputfilters/interfaces.py\n+++ b/plone/outputfilters/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \n@@ -12,7 +11,7 @@ class IFilter(Interface):\n     To control the order of filters, use the \'order\' attribute. It may be\n     positive or negative."""\n \n-    order = schema.Int(title=u"Order")\n+    order = schema.Int(title="Order")\n \n     def is_enabled():\n         """Returns a boolean indicating whether the filter should be\ndiff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py\nindex 8298444..e6d7de2 100644\n--- a/plone/outputfilters/mimetype.py\n+++ b/plone/outputfilters/mimetype.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n \n \n class text_plone_outputfilters_html(MimeTypeItem):\n \n     __name__ = "Plone Output Filters HTML"\n-    mimetypes = (\'text/x-plone-outputfilters-html\',)\n+    mimetypes = ("text/x-plone-outputfilters-html",)\n     binary = 0\ndiff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py\nindex 1582428..1d54c03 100644\n--- a/plone/outputfilters/setuphandlers.py\n+++ b/plone/outputfilters/setuphandlers.py\n@@ -1,7 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.mimetype import text_plone_outputfilters_html\n-from plone.outputfilters.transforms.html_to_plone_outputfilters_html import html_to_plone_outputfilters_html\n-from plone.outputfilters.transforms.plone_outputfilters_html_to_html import plone_outputfilters_html_to_html\n+from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n+    html_to_plone_outputfilters_html,\n+)\n+from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n+    plone_outputfilters_html_to_html,\n+)\n from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool\n from Products.PortalTransforms.interfaces import IPortalTransformsTool\n from zope.component import getUtility\n@@ -39,33 +42,36 @@ def register_transform_policy(context, output_mimetype, required_transform):\n \n def unregister_transform_policy(context, output_mimetype):\n     transform_tool = getUtility(IPortalTransformsTool)\n-    policies = [mimetype for (mimetype, required)\n-                in transform_tool.listPolicies()\n-                if mimetype == output_mimetype]\n+    policies = [\n+        mimetype\n+        for (mimetype, required) in transform_tool.listPolicies()\n+        if mimetype == output_mimetype\n+    ]\n     if policies:\n         # There is a policy, remove it!\n         transform_tool.manage_delPolicies([output_mimetype])\n \n \n def install_mimetype_and_transforms(context):\n-    """ register mimetype and transformations for captioned images """\n+    """register mimetype and transformations for captioned images"""\n     register_mimetype(context, text_plone_outputfilters_html)\n     register_transform(context, plone_outputfilters_html_to_html)\n     register_transform(context, html_to_plone_outputfilters_html)\n-    register_transform_policy(context, "text/x-html-safe",\n-                              "html_to_plone_outputfilters_html")\n+    register_transform_policy(\n+        context, "text/x-html-safe", "html_to_plone_outputfilters_html"\n+    )\n \n \n def uninstall_mimetype_and_transforms(context):\n-    """ unregister mimetype and transformations for captioned images """\n+    """unregister mimetype and transformations for captioned images"""\n     unregister_transform(context, "plone_outputfilters_html_to_html")\n     unregister_transform(context, "html_to_plone_outputfilters_html")\n-    unregister_mimetype(context, \'text/x-plone-outputfilters-html\')\n+    unregister_mimetype(context, "text/x-plone-outputfilters-html")\n     unregister_transform_policy(context, "text/x-html-safe")\n \n \n def importVarious(context):\n-    if context.readDataFile(\'plone.outputfilters.txt\') is None:\n+    if context.readDataFile("plone.outputfilters.txt") is None:\n         return\n     site = context.getSite()\n     install_mimetype_and_transforms(site)\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex 05b945b..d8bc86d 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -1,17 +1,18 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler  # noqa\n+from plone.outputfilters.filters.resolveuid_and_caption import (  # noqa\n+    IImageCaptioningEnabler,\n+)\n from zope.interface import implementer\n \n import zope.component\n \n \n @implementer(IImageCaptioningEnabler)\n-class DummyImageCaptioningEnabler(object):\n+class DummyImageCaptioningEnabler:\n \n     available = True\n \n@@ -22,30 +23,28 @@ class PloneOutputfilters(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.outputfilters\n+\n         self.loadZCML(package=plone.outputfilters)\n         gsm = zope.component.getGlobalSiteManager()\n         gsm.registerUtility(\n             DummyImageCaptioningEnabler(),\n             IImageCaptioningEnabler,\n-            \'outputfiltertest\',\n-            event=False\n+            "outputfiltertest",\n+            event=False,\n         )\n \n     def tearDownZope(self, app):\n         gsm = zope.component.getGlobalSiteManager()\n-        gsm.unregisterUtility(\n-            provided=IImageCaptioningEnabler,\n-            name=\'outputfiltertest\'\n-        )\n+        gsm.unregisterUtility(provided=IImageCaptioningEnabler, name="outputfiltertest")\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.outputfilters:default\')\n+        applyProfile(portal, "plone.outputfilters:default")\n \n \n PLONE_OUTPUTFILTERS_FIXTURE = PloneOutputfilters()\n PLONE_OUTPUTFILTERS_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),\n-    name="PloneOutputfilters:Integration")\n+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,), name="PloneOutputfilters:Integration"\n+)\n PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),\n-    name="PloneOutputfilters:Functional")\n+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,), name="PloneOutputfilters:Functional"\n+)\ndiff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py\nindex f6800a7..07ea2a0 100644\n--- a/plone/outputfilters/tests/test_apply_filters.py\n+++ b/plone/outputfilters/tests/test_apply_filters.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters import apply_filters\n \n import unittest\n \n \n-class DummyFilter(object):\n+class DummyFilter:\n     order = 500\n \n     def is_enabled(self):\n@@ -18,14 +17,13 @@ def __call__(self, data):\n \n \n class FilterTestCase(unittest.TestCase):\n-\n     def setUp(self):\n         DummyFilter.called = []\n \n     def test_apply_filters(self):\n         filters = [DummyFilter()]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([filters[0]], DummyFilter.called)\n \n     def test_apply_filters_ordering(self):\n@@ -34,7 +32,7 @@ def test_apply_filters_ordering(self):\n         filter2.order = 100\n         filters = [filter1, filter2]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([filters[1], filters[0]], DummyFilter.called)\n \n     def test_apply_filters_checks_is_enabled(self):\n@@ -42,18 +40,18 @@ def test_apply_filters_checks_is_enabled(self):\n         filter.is_enabled = lambda: False\n         filters = [filter]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([], DummyFilter.called)\n \n     def test_apply_filters_handles_return_none(self):\n         class DummyFilterReturningNone(DummyFilter):\n-\n             def __call__(self, data):\n                 return None\n+\n         filter = DummyFilterReturningNone()\n \n-        res = apply_filters([filter], \'\')\n-        self.assertEqual(\'\', res)\n+        res = apply_filters([filter], "")\n+        self.assertEqual("", res)\n \n \n def test_suite():\ndiff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py\nindex df7327e..e8d6406 100644\n--- a/plone/outputfilters/tests/test_docs.py\n+++ b/plone/outputfilters/tests/test_docs.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n import pprint\n-import six\n import unittest\n \n+\n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n-if six.PY3:\n-    normal_testfiles = [\n-        \'../README.rst\'\n-    ]\n-else:\n-    normal_testfiles = [\n-        \'./README_py2.rst\',\n-    ]\n+normal_testfiles = ["../README.rst"]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            },\n-                                     ),\n-                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nnew file mode 100644\nindex 0000000..01515d9\n--- /dev/null\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -0,0 +1,255 @@\n+from doctest import _ellipsis_match\n+from doctest import OutputChecker\n+from doctest import REPORT_NDIFF\n+from os.path import abspath\n+from os.path import dirname\n+from os.path import join\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.bbb import PloneTestCase\n+from plone.namedfile.file import NamedBlobImage\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n+from plone.outputfilters.filters.picture_variants import PictureVariantsFilter\n+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n+from Products.PortalTransforms.tests.utils import normalize_html\n+\n+\n+PREFIX = abspath(dirname(__file__))\n+\n+\n+def dummy_image():\n+    filename = join(PREFIX, "image.jpg")\n+    data = None\n+    with open(filename, "rb") as fd:\n+        data = fd.read()\n+        fd.close()\n+    return NamedBlobImage(data=data, filename=filename)\n+\n+\n+class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n+\n+    layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n+\n+    image_id = "image.jpg"\n+\n+    def _makeParser(self, **kw):\n+        parser = PictureVariantsFilter(context=self.portal)\n+        for k, v in kw.items():\n+            setattr(parser, k, v)\n+        return parser\n+\n+    def _makeDummyContent(self):\n+        from OFS.SimpleItem import SimpleItem\n+\n+        class DummyContent(SimpleItem):\n+            def __init__(self, id):\n+                self.id = id\n+\n+            def UID(self):\n+                return "foo"\n+\n+            allowedRolesAndUsers = ("Anonymous",)\n+\n+        class DummyContent2(NFDummyContent):\n+            id = __name__ = "foo2"\n+            title = "Sch\xc3\xb6nes Bild"\n+\n+            def UID(self):\n+                return "foo2"\n+\n+        dummy = DummyContent("foo")\n+        self.portal._setObject("foo", dummy)\n+        self.portal.portal_catalog.catalog_object(self.portal.foo)\n+\n+        dummy2 = DummyContent2("foo2")\n+        with open(join(PREFIX, self.image_id), "rb") as fd:\n+            data = fd.read()\n+            fd.close()\n+        dummy2.image = NamedImage(data, "image/jpeg", "image.jpeg")\n+        self.portal._setObject("foo2", dummy2)\n+        self.portal.portal_catalog.catalog_object(self.portal.foo2)\n+\n+    def _assertTransformsTo(self, input, expected):\n+        # compare two chunks of HTML ignoring whitespace differences,\n+        # and with a useful diff on failure\n+        out = self.parser(input)\n+        normalized_out = normalize_html(out)\n+        normalized_expected = normalize_html(expected)\n+        # print("\\n e: {}".format(expected))\n+        # print("\\n o: {}".format(out))\n+        try:\n+            self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n+        except AssertionError:\n+\n+            class wrapper:\n+                want = expected\n+\n+            raise AssertionError(\n+                self.outputchecker.output_difference(wrapper, out, REPORT_NDIFF)\n+            )\n+\n+    def afterSetUp(self):\n+        # create an image and record its UID\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        if self.image_id not in self.portal:\n+            self.portal.invokeFactory("Image", id=self.image_id, title="Image")\n+        image = self.portal[self.image_id]\n+        image.setDescription("My caption")\n+        image.image = dummy_image()\n+        image.reindexObject()\n+        self.UID = image.UID()\n+        self.parser = self._makeParser(captioned_images=True, resolve_uids=True)\n+        assert self.parser.is_enabled()\n+\n+        self.outputchecker = OutputChecker()\n+\n+    def beforeTearDown(self):\n+        self.login()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        del self.portal[self.image_id]\n+\n+    def test_parsing_minimal(self):\n+        text = """<div>\n+ Some simple text.\n+</div>"""\n+        res = self.parser(text)\n+        self.assertEqual(text, str(res))\n+\n+    def test_parsing_long_doc(self):\n+        text = """<h1>Welcome!</h1>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n+    just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small"\n+        src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-picturevariant="small"\n+        data-scale="preview" data-val="{uid}" /></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+    <li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry\n+            in the user menu)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable"\n+        src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-picturevariant="medium"\n+        data-scale="larger" data-val="{uid}" /></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company\n+    that delivers Plone-based solutions?</p>\n+<h2>Find out more about Plone</h2>\n+<p class="discreet"><img class="image-richtext image-right image-size-large" src="resolveuid/{uid}/@@images/image/huge"\n+        alt="" data-linktype="image" data-picturevariant="large" data-scale="huge" data-val="{uid}" /></p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n+    programming language. More about these technologies:</p>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt=""\n+        data-linktype="image" data-picturevariant="large" data-scale="huge" data-val="{uid}" /></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n+    Plone Foundation:</p>\n+<ul>\n+    <li>\xe2\x80\xa6protects and promotes Plone.</li>\n+    <li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+    <li>\xe2\x80\xa6donations are tax-deductible.</li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(\n+            uid=self.UID\n+        )\n+        import time\n+\n+        startTime = time.time()\n+        res = self.parser(text)\n+        executionTime = time.time() - startTime\n+        print(f"\\n\\nimage srcset parsing time: {executionTime}\\n")\n+        self.assertTrue(res)\n+\n+        text_out = """<h1>Welcome!</h1>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n+    just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet">\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w"/>\n+        <img alt="" class="image-richtext image-inline image-size-small" data-linktype="image"\n+            data-picturevariant="small" data-scale="preview" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/preview"/>\n+    </picture>\n+</p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+    <li>Make sure you are logged in as an admin/manager user.<span class="discreet">(You should have a Site Setup entry\n+            in the user menu)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<p>\n+    <picture class="captioned">\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/great 1200w"/>\n+        <img alt="" class="image-richtext image-left image-size-medium captioned zoomable" data-linktype="image"\n+            data-picturevariant="medium" data-scale="larger" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/teaser"/>\n+    </picture>\n+</p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company\n+    that delivers Plone-based solutions?</p>\n+<h2>Find out more about Plone</h2>\n+<p class="discreet">\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w"/>\n+        <img alt="" class="image-richtext image-right image-size-large" data-linktype="image"\n+            data-picturevariant="large" data-scale="huge" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger"/>\n+    </picture>\n+</p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n+    programming language. More about these technologies:</p>\n+<h2>\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w"/>\n+        <img alt="" class="image-richtext image-inline image-size-large" data-linktype="image"\n+            data-picturevariant="large" data-scale="huge" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger"/>\n+    </picture>\n+</h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n+    Plone Foundation:</p>\n+<ul>\n+    <li>\xe2\x80\xa6protects and promotes Plone.</li>\n+    <li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+    <li>\xe2\x80\xa6donations are tax-deductible.</li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(\n+            uid=self.UID\n+        )\n+        self._assertTransformsTo(text, text_out)\n+\n+    def test_parsing_with_nonexisting_srcset(self):\n+        text = """\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+        """.format(\n+            uid=self.UID\n+        )\n+        res = self.parser(text)\n+        self.assertTrue(res)\n+        text_out = """\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+        """.format(\n+            uid=self.UID\n+        )\n+        # verify that tag was not converted:\n+        self.assertTrue("data-picturevariant" in res)\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 4913ced..7f1ff28 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from doctest import _ellipsis_match\n from doctest import OutputChecker\n from doctest import REPORT_NDIFF\n@@ -11,7 +10,9 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n-from plone.outputfilters.filters.resolveuid_and_caption import ResolveUIDAndCaptionFilter  # noqa\n+from plone.outputfilters.filters.resolveuid_and_caption import (  # noqa\n+    ResolveUIDAndCaptionFilter,\n+)\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from Products.PortalTransforms.tests.utils import normalize_html\n \n@@ -20,9 +21,9 @@\n \n \n def dummy_image():\n-    filename = join(PREFIX, u\'image.jpg\')\n+    filename = join(PREFIX, "image.jpg")\n     data = None\n-    with open(filename, \'rb\') as fd:\n+    with open(filename, "rb") as fd:\n         data = fd.read()\n         fd.close()\n     return NamedBlobImage(data=data, filename=filename)\n@@ -32,7 +33,7 @@ class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):\n \n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n-    image_id = \'image.jpg\'\n+    image_id = "image.jpg"\n \n     def _makeParser(self, **kw):\n         parser = ResolveUIDAndCaptionFilter(context=self.portal)\n@@ -44,77 +45,149 @@ def _makeDummyContent(self):\n         from OFS.SimpleItem import SimpleItem\n \n         class DummyContent(SimpleItem):\n-\n             def __init__(self, id):\n                 self.id = id\n \n             def UID(self):\n-                return \'foo\'\n+                return "foo"\n \n-            allowedRolesAndUsers = (\'Anonymous\',)\n+            allowedRolesAndUsers = ("Anonymous",)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = \'foo2\'\n-            title = u\'Sch\xc3\xb6nes Bild\'\n+            id = __name__ = "foo2"\n+            title = "Sch\xc3\xb6nes Bild"\n \n             def UID(self):\n-                return \'foo2\'\n+                return "foo2"\n \n-        dummy = DummyContent(\'foo\')\n-        self.portal._setObject(\'foo\', dummy)\n+        dummy = DummyContent("foo")\n+        self.portal._setObject("foo", dummy)\n         self.portal.portal_catalog.catalog_object(self.portal.foo)\n \n-        dummy2 = DummyContent2(\'foo2\')\n-        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+        dummy2 = DummyContent2("foo2")\n+        with open(join(PREFIX, self.image_id), "rb") as fd:\n             data = fd.read()\n             fd.close()\n-        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n-        self.portal._setObject(\'foo2\', dummy2)\n+        dummy2.image = NamedImage(data, "image/jpeg", "image.jpeg")\n+        self.portal._setObject("foo2", dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n-    def _assertTransformsTo(self, input, expected):\n+    def _assertTransformsTo(self, input, expected, parsing=True):\n         # compare two chunks of HTML ignoring whitespace differences,\n         # and with a useful diff on failure\n-        out = self.parser(input)\n+        if parsing:\n+            out = self.parser(input)\n+        else:\n+            out = input\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n+        # print("e: {}".format(normalized_expected))\n+        # print("o: {}".format(normalized_out))\n         try:\n-            self.assertTrue(_ellipsis_match(normalized_expected,\n-                                            normalized_out))\n+            self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n-            class wrapper(object):\n+\n+            class wrapper:\n                 want = expected\n-            raise AssertionError(self.outputchecker.output_difference(\n-                wrapper, out, REPORT_NDIFF))\n+\n+            raise AssertionError(\n+                self.outputchecker.output_difference(wrapper, out, REPORT_NDIFF)\n+            )\n \n     def afterSetUp(self):\n         # create an image and record its UID\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         if self.image_id not in self.portal:\n-            self.portal.invokeFactory(\n-                \'Image\', id=self.image_id, title=\'Image\')\n+            self.portal.invokeFactory("Image", id=self.image_id, title="Image")\n         image = self.portal[self.image_id]\n-        image.setDescription(\'My caption\')\n+        image.setDescription("My caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.UID = image.UID()\n-        self.parser = self._makeParser(captioned_images=True,\n-                                       resolve_uids=True)\n+        self.parser = self._makeParser(captioned_images=True, resolve_uids=True)\n         assert self.parser.is_enabled()\n \n         self.outputchecker = OutputChecker()\n \n     def beforeTearDown(self):\n         self.login()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         del self.portal[self.image_id]\n \n     def test_parsing_minimal(self):\n-        text = \'<div>Some simple text.</div>\'\n+        text = "<div>Some simple text.</div>"\n         res = self.parser(text)\n         self.assertEqual(text, str(res))\n \n+    def test_parsing_long_doc(self):\n+        text = """<div class="hero">\n+<h1>Welcome!</h1>\n+<p><a href="https://plone.com" class="btn btn-primary" target="_blank" rel="noopener">Learn more about Plone</a></p>\n+</div>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small" src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small" data-scale="preview" data-val="{uid}" /></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+<li><a href="@@mail-controlpanel" target="_blank" rel="noopener">Set up your mail server</a>. <span class="discreet">(Plone needs a valid SMTP server to verify users and send out password reminders)</span></li>\n+<li><a href="@@security-controlpanel" target="_blank" rel="noopener">Decide what security level you want on your site</a>. <span class="discreet">(Allow self registration, password policies, etc)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<ul>\n+<li>Find out <a href="https://plone.com/features/" class="link-plain" target="_blank" rel="noopener">What\'s new in Plone</a>.</li>\n+<li>Read the <a href="https://docs.plone.org" class="link-plain" target="_blank" rel="noopener">documentation</a>.</li>\n+<li>Follow a <a href="https://training.plone.org" class="link-plain" target="_blank" rel="noopener">training</a>.</li>\n+<li>Explore the <a href="https://plone.org/download/add-ons" class="link-plain" target="_blank" rel="noopener">available add-ons</a> for Plone.</li>\n+<li>Read and/or subscribe to the <a href="https://plone.org/support" class="link-plain" target="_blank" rel="noopener">support channels</a>.</li>\n+<li>Find out <a href="https://plone.com/success-stories/" class="link-plain" target="_blank" rel="noopener">how others are using Plone</a>.</li>\n+</ul>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable" src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium" data-scale="larger" data-val="{uid}" /></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<ul>\n+<li>Try out a different theme, either pick from <a href="@@theming-controlpanel" target="_blank" rel="noopener">the included ones</a>, or one of the <a href="https://plone.org/download/add-ons" class="link-plain" target="_blank" rel="noopener">available themes from plone.org</a>. <span class="discreet">(Make sure the theme is compatible with the version of Plone you are currently using)</span></li>\n+<li><a href="@@content-controlpanel" target="_blank" rel="noopener"> Decide what kind of workflow you want in your site.</a> <span class="discreet">(The default is typical for a public web site; if you want to use Plone as a closed intranet or extranet, you can choose a different workflow.)</span></li>\n+<li>By default, Plone uses a visual editor for content. <span class="discreet">(If you prefer text-based syntax and/or wiki syntax, you can change this in the <a href="@@markup-controlpanel" target="_blank" rel="noopener">markup control panel</a>)</span></li>\n+<li>\xe2\x80\xa6and many more settings are available in the <a href="@@overview-controlpanel" target="_blank" rel="noopener">Site Setup</a>.</li>\n+</ul>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<ul>\n+<li>Add your company as a <a href="https://plone.com/providers/" class="link-plain" target="_blank" rel="noopener">Plone provider</a>.</li>\n+<li>Add a <a href="https://plone.com/success-stories/" class="link-plain" target="_blank" rel="noopener">success story</a> describing your deployed project and customer.</li>\n+</ul>\n+<h2>Find out more about Plone</h2>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n+<ul>\n+<li>The <a href="https://plone.com" class="link-plain" target="_blank" rel="noopener">Plone open source Content Management System</a> web site for evaluators and decision makers.</li>\n+<li>The <a href="https://plone.org" class="link-plain" target="_blank" rel="noopener">Plone community </a> web site for developers.</li>\n+<li>The <a href="https://www.python.org" class="link-plain" target="_blank" rel="noopener">Python programming language</a> web site.</li>\n+</ul>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<ul>\n+<li>\xe2\x80\xa6protects and promotes Plone.</li>\n+<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+<li><a href="https://plone.org/sponsors/be-a-hero" target="_blank" rel="noopener">Support the Foundation and help make Plone better!</a></li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(\n+            uid=self.UID\n+        )\n+        import time\n+\n+        startTime = time.time()\n+        res = self.parser(text)\n+        executionTime = time.time() - startTime\n+        print(f"\\n\\nresolve_uid_and_caption parsing time: {executionTime}\\n")\n+        self.assertTrue(res)\n+\n     def test_parsing_preserves_newlines(self):\n         # Test if it preserves newlines which should not be filtered out\n         text = """<pre>This is line 1\n@@ -138,10 +211,13 @@ def test_resolve_uids_in_links(self):\n         text = """<html>\n   <head></head>\n   <body>\n-    <a class="internal-link" href="resolveuid/%s">Some link</a>\n-    <a class="internal-link" href="resolveuid/%s#named-anchor">Some anchored link</a>\n+    <a class="internal-link" href="resolveuid/{}">Some link</a>\n+    <a class="internal-link" href="resolveuid/{}#named-anchor">Some anchored link</a>\n   </body>\n-</html>""" % (self.UID, self.UID)\n+</html>""".format(\n+            self.UID,\n+            self.UID,\n+        )\n         res = str(self.parser(text))\n         self.assertIn(\'href="http://nohost/plone/image.jpg"\', res)\n         self.assertIn(\'href="http://nohost/plone/image.jpg#named-anchor"\', res)\n@@ -181,15 +257,17 @@ def test_resolve_uids_non_AT_content(self):\n \n     def test_resolve_uids_fragment(self):\n         self._makeDummyContent()\n-        self.parser = self._makeParser(resolve_uids=True,\n-                                       context=self.portal.foo)\n+        self.parser = self._makeParser(resolve_uids=True, context=self.portal.foo)\n         text_in = """<a href="#a">anchor</a>"""\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolve_uids_in_image_maps(self):\n-        text_in = """<map id="the_map" name="the_map">\n+        text_in = (\n+            """<map id="the_map" name="the_map">\n <area alt="alpha" href="resolveuid/%s" coords="1,2,3,4" shape="rect" />\n-</map>""" % self.UID\n+</map>"""\n+            % self.UID\n+        )\n         text_out = """<map id="the_map" name="the_map">\n <area alt="alpha" coords="1,2,3,4" href="http://nohost/plone/image.jpg" shape="rect"/>\n </map>"""\n@@ -212,62 +290,64 @@ def test_resolve_uids_entities(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolveuid_view(self):\n-        res = self.publish(\'/plone/resolveuid/%s\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         res.headers[\'location\'])\n+        self.assertEqual("http://nohost/plone/image.jpg", res.headers["location"])\n \n     def test_resolveuid_view_bad_uuid(self):\n-        res = self.publish(\'/plone/resolveuid/BOGUS\')\n+        res = self.publish("/plone/resolveuid/BOGUS")\n         self.assertEqual(404, res.status)\n \n     def test_resolveuid_view_subpath(self):\n-        res = self.publish(\'/plone/resolveuid/%s/image_thumb\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s/image_thumb" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg/image_thumb\',\n-                         res.headers[\'location\'])\n+        self.assertEqual(\n+            "http://nohost/plone/image.jpg/image_thumb", res.headers["location"]\n+        )\n \n     def test_resolveuid_view_querystring(self):\n-        res = self.publish(\'/plone/resolveuid/%s?qs\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s?qs" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg?qs\',\n-                         res.headers[\'location\'])\n+        self.assertEqual("http://nohost/plone/image.jpg?qs", res.headers["location"])\n \n     def test_uuidToURL(self):\n         from plone.outputfilters.browser.resolveuid import uuidToURL\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         uuidToURL(self.UID))\n+\n+        self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n \n     def test_uuidToObject(self):\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.assertTrue(self.portal[\'image.jpg\'].aq_base\n-                        is uuidToObject(self.UID).aq_base)\n+\n+        self.assertTrue(\n+            self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n+        )\n \n     def test_uuidToURL_permission(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.portal.invokeFactory(\'Document\', id=\'page\', title=\'Page\')\n-        page = self.portal[\'page\']\n+        from plone.outputfilters.browser.resolveuid import uuidToURL\n+\n+        self.portal.invokeFactory("Document", id="page", title="Page")\n+        page = self.portal["page"]\n         self.logout()\n-        self.assertEqual(\'http://nohost/plone/page\',\n-                         uuidToURL(page.UID()))\n-        self.assertTrue(page.aq_base\n-                        is uuidToObject(page.UID()).aq_base)\n+        self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n+        self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n \n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\n-        self.portal.invokeFactory(\'News Item\', id=\'a-news-item\', title=\'Title\')\n-        news_item = self.portal[\'a-news-item\']\n+        self.portal.invokeFactory("News Item", id="a-news-item", title="Title")\n+        news_item = self.portal["a-news-item"]\n         from plone.app.textfield.value import RichTextValue\n+\n         news_item.text = RichTextValue(\n             \'<span><img class="captioned" src="image.jpg"/></span>\',\n-            \'text/html\', \'text/x-html-safe\')\n+            "text/html",\n+            "text/html",\n+        )\n         news_item.setDescription("Description.")\n-\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </span>"""\n@@ -275,13 +355,13 @@ def test_image_captioning_in_news_item(self):\n \n     def test_image_captioning_absolutizes_uncaptioned_image(self):\n         text_in = """<img src="/image.jpg" />"""\n-        text_out = """<img alt="My caption" src="http://nohost/plone/image.jpg" title="Image"/>"""\n+        text_out = """<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/....jpeg" title="Image" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_absolute_path(self):\n         text_in = """<img class="captioned" src="/image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -289,7 +369,7 @@ def test_image_captioning_absolute_path(self):\n     def test_image_captioning_relative_path(self):\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -298,19 +378,17 @@ def test_image_captioning_relative_path_private_folder(self):\n         # Images in a private folder may or may not still be renderable, but\n         # traversal to them must not raise an error!\n         self.loginAsPortalOwner()\n-        self.portal.invokeFactory(\'Folder\', id=\'private\',\n-                                  title=\'Private Folder\')\n-        self.portal.private.invokeFactory(\'Image\', id=\'image.jpg\',\n-                                          title=\'Image\')\n-        image = getattr(self.portal.private, \'image.jpg\')\n-        image.setDescription(\'My private image caption\')\n+        self.portal.invokeFactory("Folder", id="private", title="Private Folder")\n+        self.portal.private.invokeFactory("Image", id="image.jpg", title="Image")\n+        image = getattr(self.portal.private, "image.jpg")\n+        image.setDescription("My private image caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.logout()\n \n         text_in = """<img class="captioned" src="private/image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My private image caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -318,53 +396,89 @@ def test_image_captioning_relative_path_private_folder(self):\n     def test_image_captioning_relative_path_scale(self):\n         text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n-    def test_image_captioning_resolveuid(self):\n+    def test_image_captioning_resolveuid_bare(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_new_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/></a>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n-        text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n+        )\n+        text_out = """<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n+        )\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n+    def test_image_captioning_resolveuid_with_srcset_and_src(self):\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>"""\n+            % (self.UID, self.UID, self.UID)\n+        )\n+        text_out = """<figure class="captioned">\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n+<figcaption class="image-caption">My caption</figcaption>\n+</figure>"""\n+        self._assertTransformsTo(text_in, text_out)\n+\n+    def test_iframe_resolveuid(self):\n+        text_in = """<iframe src="resolveuid/%s"/>""" % self.UID\n+        text_out = """<iframe src="http://nohost/plone/image.jpg"></iframe>"""\n+        self._assertTransformsTo(text_in, text_out)\n+\n+    def test_video_resolveuid(self):\n+        text_in = """<video src="resolveuid/%s"/>""" % self.UID\n+        text_out = """<video src="http://nohost/plone/image.jpg"></video>"""\n+        self._assertTransformsTo(text_in, text_out)\n+\n+    def test_audio_resolveuid(self):\n+        text_in = """<audio src="resolveuid/%s"/>""" % self.UID\n+        text_out = """<audio src="http://nohost/plone/image.jpg"></audio>"""\n+        self._assertTransformsTo(text_in, text_out)\n+\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n+        text_out = """<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n@@ -386,13 +500,16 @@ def test_image_captioning_external_url(self):\n     def test_image_captioning_preserves_custom_attributes(self):\n         text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n+<img alt="" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_unquoted_attributes(self):\n-        text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID\n+        text_in = (\n+            """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -402,19 +519,18 @@ def test_image_captioning_handles_unquoted_attributes(self):\n     def test_image_captioning_preserves_existing_links(self):\n         text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""\n         text_out = """<a class="link" href="/xyzzy"><figure class="image-left captioned">\n-<img alt="My caption" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </a>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_non_ascii(self):\n-        self.portal[\'image.jpg\'].setTitle(u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n-        self.portal[\'image.jpg\'].setDescription(\n-            u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n+        self.portal["image.jpg"].setTitle("Kupu Test Image \\xe5\\xe4\\xf6")\n+        self.portal["image.jpg"].setDescription("Kupu Test Image \\xe5\\xe4\\xf6")\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n-        text_out = u"""<figure class="captioned">\n-<img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n+        text_out = """<figure class="captioned">\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n <figcaption class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -425,8 +541,7 @@ def test_resolve_uids_with_bigU(self):\n         self.assertTrue(\'href="http://nohost/plone/image.jpg"\' in str(res))\n \n     def test_singleton_elements(self):\n-        self._assertTransformsTo(\n-            \'<hr/>\\r\\n<p>foo</p><br/>\', \'<hr/>\\r\\n<p>foo</p><br/>\')\n+        self._assertTransformsTo("<hr/>\\r\\n<p>foo</p><br/>", "<hr/>\\r\\n<p>foo</p><br/>")\n \n     def test_no_change_when_a_in_script(self):\n         text_in = """<script>a=\'<a href="">test</a>\';</script>"""\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex 8bdfe77..e148af4 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n@@ -11,41 +10,48 @@ class TransformsTestCase(unittest.TestCase):\n     layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        from zope.component import getUtility\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         from Products.PortalTransforms.interfaces import IPortalTransformsTool\n+        from zope.component import getUtility\n+\n         self.transforms = getUtility(IPortalTransformsTool)\n \n     def test_instantiate_html_to_plone_outputfilters_html_transform(self):\n-        from plone.outputfilters.transforms.html_to_plone_outputfilters_html \\\n-            import html_to_plone_outputfilters_html\n-        transform = html_to_plone_outputfilters_html(name=\'transform\')\n-        self.assertEqual(\'transform\', transform.name())\n+        from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n+            html_to_plone_outputfilters_html,\n+        )\n+\n+        transform = html_to_plone_outputfilters_html(name="transform")\n+        self.assertEqual("transform", transform.name())\n \n     def test_instantiate_plone_outputfilters_html_to_html_transform(self):\n-        from plone.outputfilters.transforms.plone_outputfilters_html_to_html \\\n-            import plone_outputfilters_html_to_html\n-        transform = plone_outputfilters_html_to_html(name=\'transform\')\n-        self.assertEqual(\'transform\', transform.name())\n+        from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n+            plone_outputfilters_html_to_html,\n+        )\n+\n+        transform = plone_outputfilters_html_to_html(name="transform")\n+        self.assertEqual("transform", transform.name())\n \n     def test_transform_policy_installed(self):\n         policies = self.transforms.listPolicies()\n         policies = [\n-            mimetype for (mimetype, required) in policies\n+            mimetype\n+            for (mimetype, required) in policies\n             if mimetype == "text/x-html-safe"\n         ]\n         self.assertEqual(1, len(policies))\n \n     def test_uninstallation(self):\n-        from plone.outputfilters.setuphandlers import \\\n-            uninstall_mimetype_and_transforms\n+        from plone.outputfilters.setuphandlers import uninstall_mimetype_and_transforms\n+\n         uninstall_mimetype_and_transforms(self.portal)\n \n         policies = self.transforms.listPolicies()\n         policies = [\n-            mimetype for (mimetype, required) in policies\n+            mimetype\n+            for (mimetype, required) in policies\n             if mimetype == "text/x-html-safe"\n         ]\n         self.assertEqual(0, len(policies))\ndiff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\nindex 0cb3426..0936f6b 100644\n--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters import apply_filters\n from plone.outputfilters.interfaces import IFilter\n from Products.PortalTransforms.interfaces import ITransform\n@@ -9,15 +8,15 @@\n \n @implementer(ITransform)\n class html_to_plone_outputfilters_html:\n-    """ transform which applies output filters"""\n+    """transform which applies output filters"""\n+\n     __name__ = "html_to_plone_outputfilters_html"\n-    inputs = (\'text/html\',)\n+    inputs = ("text/html",)\n     output = "text/x-plone-outputfilters-html"\n \n     def __init__(self, name=None):\n         self.config_metadata = {\n-            \'inputs\': (\'list\', \'Inputs\',\n-                       \'Input(s) MIME type. Change with care.\'),\n+            "inputs": ("list", "Inputs", "Input(s) MIME type. Change with care."),\n         }\n         if name:\n             self.__name__ = name\n@@ -26,8 +25,8 @@ def name(self):\n         return self.__name__\n \n     def convert(self, orig, data, **kwargs):\n-        context = kwargs.get(\'context\')\n-        request = getattr(getSite(), \'REQUEST\', None)\n+        context = kwargs.get("context")\n+        request = getattr(getSite(), "REQUEST", None)\n         filters = [f for _, f in getAdapters((context, request), IFilter)]\n \n         res = apply_filters(filters, orig)\ndiff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\nindex b1a10e9..22e98bd 100644\n--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n@@ -1,22 +1,17 @@\n-# -*- coding: utf-8 -*-\n from Products.PortalTransforms.interfaces import ITransform\n from zope.interface import implementer\n \n \n @implementer(ITransform)\n-class plone_outputfilters_html_to_html(object):\n+class plone_outputfilters_html_to_html:\n \n     __name__ = "plone_outputfilters_html_to_html"\n-    inputs = (\'text/x-plone-outputfilters-html\',)\n+    inputs = ("text/x-plone-outputfilters-html",)\n     output = "text/html"\n \n     def __init__(self, name=None):\n         self.config_metadata = {\n-            \'inputs\': (\n-                \'list\',\n-                \'Inputs\',\n-                \'Input(s) MIME type. Change with care.\'\n-            ),\n+            "inputs": ("list", "Inputs", "Input(s) MIME type. Change with care."),\n         }\n         if name:\n             self.__name__ = name\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..3e076fd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 07e2701..2e00618 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'4.0.2.dev0\'\n+version = "5.0.0b2.dev0"\n \n \n def read(filename):\n@@ -31,57 +30,55 @@ def read(filename):\n )\n \n setup(\n-    name=\'plone.outputfilters\',\n+    name="plone.outputfilters",\n     version=version,\n     description=(\n-        "Transformations applied to HTML in "\n-        "Plone text fields as they are rendered"\n+        "Transformations applied to HTML in " "Plone text fields as they are rendered"\n     ),\n     long_description=long_description,\n     # Get more strings from https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone transform filter uid caption\',\n-    author=\'David Glick, Plone Foundation\',\n-    author_email=\'davidglick@groundwire.org\',\n-    url=\'http://github.com/plone/plone.outputfilters\',\n-    license=\'GPL\',\n+    keywords="plone transform filter uid caption",\n+    author="David Glick, Plone Foundation",\n+    author_email="davidglick@groundwire.org",\n+    url="http://github.com/plone/plone.outputfilters",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.MimetypesRegistry\',\n-        \'Products.PortalTransforms>=2.0a1\',\n-        \'setuptools\',\n-        \'six\',\n-        \'unidecode\',\n-        \'beautifulsoup4\',\n-        \'lxml\',\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Products.MimetypesRegistry",\n+        "Products.PortalTransforms>=2.0",\n+        "plone.namedfile",\n+        "plone.app.uuid",\n+        "setuptools",\n+        "unidecode",\n+        "zope.deprecation",\n+        "beautifulsoup4",\n+        "lxml",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.app.robotframework\',\n-            \'plone.namedfile\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.app.robotframework",\n+            "plone.namedfile",\n         ]\n     },\n     entry_points="""\n-      # -*- Entry points: -*-\n-\n       [z3c.autoinclude.plugin]\n       target = plone\n       """,\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-26T00:37:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/a1649256d25a8ed9eaf16614302d2e51832f71d0

Merge pull request #35 from plone/nofixedsizecheck

Donâ€™t check for hardcoded image size

Files changed:
M CHANGES.rst
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3da3676..7b67a41 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -61,6 +61,9 @@ New features:\n \n Bug fixes:\n \n+- Don\'t check for hard coded image size in test.\n+  [agitator]\n+\n - Fixed possible package install error with Python 3.6 when no system locale is set.\n   See `coredev issue 642 <https://github.com/plone/buildout.coredev/issues/642#issuecomment-597008272>`_.\n   [maurits]\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 41b227f..7f1ff28 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -396,7 +396,7 @@ def test_image_captioning_relative_path_private_folder(self):\n     def test_image_captioning_relative_path_scale(self):\n         text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -415,7 +415,7 @@ def test_image_captioning_resolveuid_scale(self):\n             % self.UID\n         )\n         text_out = """<figure class="captioned">\n-<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -426,7 +426,7 @@ def test_image_captioning_resolveuid_new_scale(self):\n             % self.UID\n         )\n         text_out = """<figure class="captioned">\n-<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -519,7 +519,7 @@ def test_image_captioning_handles_unquoted_attributes(self):\n     def test_image_captioning_preserves_existing_links(self):\n         text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""\n         text_out = """<a class="link" href="/xyzzy"><figure class="image-left captioned">\n-<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n+<img alt="" height="..." src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="..."/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </a>"""\n'

