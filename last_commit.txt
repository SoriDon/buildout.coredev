Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-05-15T15:31:23+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.vocabularies/commit/42556a36a712634ad7ff538bc0fd1082b6fd9305

Fix a circular dependency to plone.app.querystring

Files changed:
A news/fix-circular-dep-paquerstring.bugfix
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/configure.zcml
M plone/app/vocabularies/utils.py
M setup.py

b'diff --git a/news/fix-circular-dep-paquerstring.bugfix b/news/fix-circular-dep-paquerstring.bugfix\nnew file mode 100644\nindex 0000000..07b1391\n--- /dev/null\n+++ b/news/fix-circular-dep-paquerstring.bugfix\n@@ -0,0 +1,4 @@\n+Fix a circular dependency to `plone.app.querystring`.\n+Move `.catalog.CatalogVocabularyFactory` to `plone.app.querystring.vocabularies`, move the ZCML to register the factory, move the the test and put BBB code with deprecation wanring into place.\n+Move `.utils.parse_query` with new name `parseAndModifyFormquery` to `plone.app.querystring.queryparser` and put BBB code with deprecation wanring into place.\n+[@jensens]\ndiff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex 706c479..6c16a45 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -2,7 +2,6 @@\n from plone.app.vocabularies import SlicableVocabulary\n from plone.app.vocabularies.terms import BrowsableTerm\n from plone.app.vocabularies.terms import safe_simplevocabulary_from_values\n-from plone.app.vocabularies.utils import parseQueryString\n from plone.base.navigationroot import get_navigation_root_object\n from plone.base.utils import safe_text\n from plone.memoize import request\n@@ -16,6 +15,7 @@\n from zope.browser.interfaces import ITerms\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n+from zope.deferredimport import deprecated\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import provider\n@@ -40,6 +40,12 @@ class ISourceQueryView(Interface):\n         pass\n \n \n+deprecated(\n+    "Import CatalogVocabularyFactory from plone.app.querystring.vocabularies instead (will be removed in Plone 7)",\n+    CatalogVocabularyFactory="plone.app.querystring.vocabularies:CatalogVocabularyFactory",\n+)\n+\n+\n def parse_query(query, path_prefix=""):\n     """Parse the query string and turn it into a dictionary for querying the\n     catalog.\n@@ -599,64 +605,6 @@ def getTerm(self, value):\n     getTermByToken = getTerm\n \n \n-@implementer(IVocabularyFactory)\n-class CatalogVocabularyFactory:\n-    """\n-    Test application of Navigation Root:\n-\n-      >>> from plone.app.vocabularies.tests.base import create_context\n-      >>> from plone.app.vocabularies.tests.base import DummyUrlTool\n-      >>> from plone.app.vocabularies.tests.base import DummyCatalog\n-      >>> class DummyPathCatalog(DummyCatalog):\n-      ...     def __call__(self, **query):\n-      ...         if \'path\' in query and \'query\' in query[\'path\']:\n-      ...             return [v for v in self.values() if\n-      ...                     v.getPath().startswith(query[\'path\'][\'query\'])]\n-      ...         return self.values()\n-      >>> catalog = DummyPathCatalog([\'/abcd\', \'/defg\', \'/dummy/sub-site\',\n-      ...                             \'/dummy/sub-site/ghij\'])\n-      >>> context = create_context()\n-      >>> context.portal_catalog = catalog\n-      >>> context.portal_url = DummyUrlTool(context)\n-      >>> factory = CatalogVocabularyFactory()\n-\n-      >>> sorted(t.token for t in factory(context))\n-      [\'/abcd\', \'/defg\', \'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n-\n-      >>> from plone.app.vocabularies.tests.base import DummyNavRoot\n-      >>> nav_root = DummyNavRoot(\'sub-site\', parent=context)\n-      >>> [t.token for t in factory(nav_root)]\n-      [\'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n-\n-    """\n-\n-    # We want to get rid of this and use CatalogSource instead,\n-    # but we can\'t in Plone versions that support\n-    # plone.app.widgets < 1.6.0\n-\n-    def __call__(self, context, query=None):\n-        parsed = {}\n-        if query:\n-            parsed = parseQueryString(context, query["criteria"])\n-            if "sort_on" in query:\n-                parsed["sort_on"] = query["sort_on"]\n-            if "sort_order" in query:\n-                parsed["sort_order"] = str(query["sort_order"])\n-\n-        # If no path is specified check if we are in a sub-site and use that\n-        # as the path root for catalog searches\n-        if "path" not in parsed:\n-            site = getSite()\n-            nav_root = get_navigation_root_object(context, site)\n-            site_path = site.getPhysicalPath()\n-            if nav_root and nav_root.getPhysicalPath() != site_path:\n-                parsed["path"] = {\n-                    "query": "/".join(nav_root.getPhysicalPath()),\n-                    "depth": -1,\n-                }\n-        return CatalogVocabulary.fromItems(parsed, context)\n-\n-\n def request_query_cache_key(func, vocab):\n     return json.dumps([vocab.query, vocab.text_search_index, vocab.title_template])\n \ndiff --git a/plone/app/vocabularies/configure.zcml b/plone/app/vocabularies/configure.zcml\nindex cad71f7..5aec5f5 100644\n--- a/plone/app/vocabularies/configure.zcml\n+++ b/plone/app/vocabularies/configure.zcml\n@@ -101,11 +101,6 @@\n       name="plone.app.vocabularies.Principals"\n       />\n \n-  <utility\n-      factory=".catalog.CatalogVocabularyFactory"\n-      name="plone.app.vocabularies.Catalog"\n-      />\n-\n   <utility\n       name="plone.app.vocabularies.Actions"\n       component=".actions.ActionCategoriesVocabularyFactory"\ndiff --git a/plone/app/vocabularies/utils.py b/plone/app/vocabularies/utils.py\nindex ffd8e77..afb978b 100644\n--- a/plone/app/vocabularies/utils.py\n+++ b/plone/app/vocabularies/utils.py\n@@ -1,20 +1,7 @@\n-from plone.app.querystring import queryparser\n-from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n-from zope.component import getUtilitiesFor\n+from zope.deferredimport import deprecated\n \n \n-def parseQueryString(context, query):\n-    parsedquery = queryparser.parseFormquery(context, query)\n-\n-    index_modifiers = getUtilitiesFor(IParsedQueryIndexModifier)\n-    for name, modifier in index_modifiers:\n-        if name in parsedquery:\n-            new_name, query = modifier(parsedquery[name])\n-            parsedquery[name] = query\n-            # if a new index name has been returned, we need to replace\n-            # the native ones\n-            if name != new_name:\n-                del parsedquery[name]\n-                parsedquery[new_name] = query\n-\n-    return parsedquery\n+deprecated(\n+    "Import parseQueryString as parseAndModifyFormquery from plone.app.querystring.queryparser instead (will be removed in Plone 7)",\n+    parseQueryString="plone.app.querystring.queryparser:parseAndModifyFormquery",\n+)\ndiff --git a/setup.py b/setup.py\nindex eebf023..0c5ea4e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,9 +37,11 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        # be very careful adding dependencies here, as this package is used\n+        # by many many other packages in plone.app.* namespace\n+        # it is very easy to add transitive circular dependencies\n         "BTrees",\n         "Products.ZCatalog",\n-        "plone.app.querystring",\n         "plone.base",\n         "plone.memoize",\n         "plone.namedfile",\n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-05-15T15:35:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/fceef852ca9268500993fe8f342dc8186b4f8890

fix: adapt tests

Files changed:
M plone/app/vocabularies/catalog.py

b'diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex 6c16a45..2bb8c0f 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -331,7 +331,7 @@ class QuerySearchableTextSourceView:\n \n     Titles need to be unicode:\n     >>> view.getTerm(list(view.results(\'t\'))[0]).title\n-    u\'/foo\'\n+    \'/foo\'\n     """\n \n     template = ViewPageTemplateFile("searchabletextsource.pt")\n@@ -703,7 +703,7 @@ def my_vocab_factory(context):\n       <zope.schema.vocabulary.SimpleVocabulary object at ...>\n \n       >>> [(t.title, t.value) for t in vocab.search(\'foo\')]\n-      [(u\'BrainTitle (/1234)\', \'/1234\'), (u\'BrainTitle (/2345)\', \'/2345\')]\n+      [(\'BrainTitle (/1234)\', \'/1234\'), (\'BrainTitle (/2345)\', \'/2345\')]\n \n     We strip out the site path from the rendered path in the title template:\n \n@@ -711,21 +711,21 @@ def my_vocab_factory(context):\n       >>> context.portal_catalog = catalog\n       >>> vocab = StaticCatalogVocabulary({\'portal_type\': [\'Document\']})\n       >>> [(t.title, t.value) for t in vocab.search(\'bar\')]\n-      [(u\'BrainTitle (/site/1234)\', \'/site/1234\'),\n-       (u\'BrainTitle (/site/2345)\', \'/site/2345\')]\n+      [(\'BrainTitle (/site/1234)\', \'/site/1234\'),\n+       (\'BrainTitle (/site/2345)\', \'/site/2345\')]\n \n       >>> context.__name__ = \'site\'\n       >>> vocab = StaticCatalogVocabulary({\'portal_type\': [\'Document\']})\n       >>> [(t.title, t.value) for t in vocab.search(\'bar\')]\n-      [(u\'BrainTitle (/1234)\', \'/site/1234\'),\n-       (u\'BrainTitle (/2345)\', \'/site/2345\')]\n+      [(\'BrainTitle (/1234)\', \'/site/1234\'),\n+       (\'BrainTitle (/2345)\', \'/site/2345\')]\n \n     The title template can be customized:\n \n       >>> vocab.title_template = "{url} {brain.UID} - {brain.Title} {path}"\n       >>> [(t.title, t.value) for t in vocab.search(\'bar\')]\n-      [(u\'proto:/site/1234 /site/1234 - BrainTitle /1234\', \'/site/1234\'),\n-       (u\'proto:/site/2345 /site/2345 - BrainTitle /2345\', \'/site/2345\')]\n+      [(\'proto:/site/1234 /site/1234 - BrainTitle /1234\', \'/site/1234\'),\n+       (\'proto:/site/2345 /site/2345 - BrainTitle /2345\', \'/site/2345\')]\n \n     """\n \n'

Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2023-05-17T11:43:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.vocabularies/commit/91060e27b5d8ef8c00a2704bf4a1949227aff04f

Merge pull request #76 from plone/fix-circular-dep-paquerstring

Fix a circular dependency to plone.app.querystring

Files changed:
A news/fix-circular-dep-paquerstring.bugfix
M plone/app/vocabularies/catalog.py
M plone/app/vocabularies/configure.zcml
M plone/app/vocabularies/utils.py
M setup.py

b'diff --git a/news/fix-circular-dep-paquerstring.bugfix b/news/fix-circular-dep-paquerstring.bugfix\nnew file mode 100644\nindex 0000000..07b1391\n--- /dev/null\n+++ b/news/fix-circular-dep-paquerstring.bugfix\n@@ -0,0 +1,4 @@\n+Fix a circular dependency to `plone.app.querystring`.\n+Move `.catalog.CatalogVocabularyFactory` to `plone.app.querystring.vocabularies`, move the ZCML to register the factory, move the the test and put BBB code with deprecation wanring into place.\n+Move `.utils.parse_query` with new name `parseAndModifyFormquery` to `plone.app.querystring.queryparser` and put BBB code with deprecation wanring into place.\n+[@jensens]\ndiff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py\nindex 706c479..2bb8c0f 100644\n--- a/plone/app/vocabularies/catalog.py\n+++ b/plone/app/vocabularies/catalog.py\n@@ -2,7 +2,6 @@\n from plone.app.vocabularies import SlicableVocabulary\n from plone.app.vocabularies.terms import BrowsableTerm\n from plone.app.vocabularies.terms import safe_simplevocabulary_from_values\n-from plone.app.vocabularies.utils import parseQueryString\n from plone.base.navigationroot import get_navigation_root_object\n from plone.base.utils import safe_text\n from plone.memoize import request\n@@ -16,6 +15,7 @@\n from zope.browser.interfaces import ITerms\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n+from zope.deferredimport import deprecated\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import provider\n@@ -40,6 +40,12 @@ class ISourceQueryView(Interface):\n         pass\n \n \n+deprecated(\n+    "Import CatalogVocabularyFactory from plone.app.querystring.vocabularies instead (will be removed in Plone 7)",\n+    CatalogVocabularyFactory="plone.app.querystring.vocabularies:CatalogVocabularyFactory",\n+)\n+\n+\n def parse_query(query, path_prefix=""):\n     """Parse the query string and turn it into a dictionary for querying the\n     catalog.\n@@ -325,7 +331,7 @@ class QuerySearchableTextSourceView:\n \n     Titles need to be unicode:\n     >>> view.getTerm(list(view.results(\'t\'))[0]).title\n-    u\'/foo\'\n+    \'/foo\'\n     """\n \n     template = ViewPageTemplateFile("searchabletextsource.pt")\n@@ -599,64 +605,6 @@ def getTerm(self, value):\n     getTermByToken = getTerm\n \n \n-@implementer(IVocabularyFactory)\n-class CatalogVocabularyFactory:\n-    """\n-    Test application of Navigation Root:\n-\n-      >>> from plone.app.vocabularies.tests.base import create_context\n-      >>> from plone.app.vocabularies.tests.base import DummyUrlTool\n-      >>> from plone.app.vocabularies.tests.base import DummyCatalog\n-      >>> class DummyPathCatalog(DummyCatalog):\n-      ...     def __call__(self, **query):\n-      ...         if \'path\' in query and \'query\' in query[\'path\']:\n-      ...             return [v for v in self.values() if\n-      ...                     v.getPath().startswith(query[\'path\'][\'query\'])]\n-      ...         return self.values()\n-      >>> catalog = DummyPathCatalog([\'/abcd\', \'/defg\', \'/dummy/sub-site\',\n-      ...                             \'/dummy/sub-site/ghij\'])\n-      >>> context = create_context()\n-      >>> context.portal_catalog = catalog\n-      >>> context.portal_url = DummyUrlTool(context)\n-      >>> factory = CatalogVocabularyFactory()\n-\n-      >>> sorted(t.token for t in factory(context))\n-      [\'/abcd\', \'/defg\', \'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n-\n-      >>> from plone.app.vocabularies.tests.base import DummyNavRoot\n-      >>> nav_root = DummyNavRoot(\'sub-site\', parent=context)\n-      >>> [t.token for t in factory(nav_root)]\n-      [\'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n-\n-    """\n-\n-    # We want to get rid of this and use CatalogSource instead,\n-    # but we can\'t in Plone versions that support\n-    # plone.app.widgets < 1.6.0\n-\n-    def __call__(self, context, query=None):\n-        parsed = {}\n-        if query:\n-            parsed = parseQueryString(context, query["criteria"])\n-            if "sort_on" in query:\n-                parsed["sort_on"] = query["sort_on"]\n-            if "sort_order" in query:\n-                parsed["sort_order"] = str(query["sort_order"])\n-\n-        # If no path is specified check if we are in a sub-site and use that\n-        # as the path root for catalog searches\n-        if "path" not in parsed:\n-            site = getSite()\n-            nav_root = get_navigation_root_object(context, site)\n-            site_path = site.getPhysicalPath()\n-            if nav_root and nav_root.getPhysicalPath() != site_path:\n-                parsed["path"] = {\n-                    "query": "/".join(nav_root.getPhysicalPath()),\n-                    "depth": -1,\n-                }\n-        return CatalogVocabulary.fromItems(parsed, context)\n-\n-\n def request_query_cache_key(func, vocab):\n     return json.dumps([vocab.query, vocab.text_search_index, vocab.title_template])\n \n@@ -755,7 +703,7 @@ def my_vocab_factory(context):\n       <zope.schema.vocabulary.SimpleVocabulary object at ...>\n \n       >>> [(t.title, t.value) for t in vocab.search(\'foo\')]\n-      [(u\'BrainTitle (/1234)\', \'/1234\'), (u\'BrainTitle (/2345)\', \'/2345\')]\n+      [(\'BrainTitle (/1234)\', \'/1234\'), (\'BrainTitle (/2345)\', \'/2345\')]\n \n     We strip out the site path from the rendered path in the title template:\n \n@@ -763,21 +711,21 @@ def my_vocab_factory(context):\n       >>> context.portal_catalog = catalog\n       >>> vocab = StaticCatalogVocabulary({\'portal_type\': [\'Document\']})\n       >>> [(t.title, t.value) for t in vocab.search(\'bar\')]\n-      [(u\'BrainTitle (/site/1234)\', \'/site/1234\'),\n-       (u\'BrainTitle (/site/2345)\', \'/site/2345\')]\n+      [(\'BrainTitle (/site/1234)\', \'/site/1234\'),\n+       (\'BrainTitle (/site/2345)\', \'/site/2345\')]\n \n       >>> context.__name__ = \'site\'\n       >>> vocab = StaticCatalogVocabulary({\'portal_type\': [\'Document\']})\n       >>> [(t.title, t.value) for t in vocab.search(\'bar\')]\n-      [(u\'BrainTitle (/1234)\', \'/site/1234\'),\n-       (u\'BrainTitle (/2345)\', \'/site/2345\')]\n+      [(\'BrainTitle (/1234)\', \'/site/1234\'),\n+       (\'BrainTitle (/2345)\', \'/site/2345\')]\n \n     The title template can be customized:\n \n       >>> vocab.title_template = "{url} {brain.UID} - {brain.Title} {path}"\n       >>> [(t.title, t.value) for t in vocab.search(\'bar\')]\n-      [(u\'proto:/site/1234 /site/1234 - BrainTitle /1234\', \'/site/1234\'),\n-       (u\'proto:/site/2345 /site/2345 - BrainTitle /2345\', \'/site/2345\')]\n+      [(\'proto:/site/1234 /site/1234 - BrainTitle /1234\', \'/site/1234\'),\n+       (\'proto:/site/2345 /site/2345 - BrainTitle /2345\', \'/site/2345\')]\n \n     """\n \ndiff --git a/plone/app/vocabularies/configure.zcml b/plone/app/vocabularies/configure.zcml\nindex cad71f7..5aec5f5 100644\n--- a/plone/app/vocabularies/configure.zcml\n+++ b/plone/app/vocabularies/configure.zcml\n@@ -101,11 +101,6 @@\n       name="plone.app.vocabularies.Principals"\n       />\n \n-  <utility\n-      factory=".catalog.CatalogVocabularyFactory"\n-      name="plone.app.vocabularies.Catalog"\n-      />\n-\n   <utility\n       name="plone.app.vocabularies.Actions"\n       component=".actions.ActionCategoriesVocabularyFactory"\ndiff --git a/plone/app/vocabularies/utils.py b/plone/app/vocabularies/utils.py\nindex ffd8e77..afb978b 100644\n--- a/plone/app/vocabularies/utils.py\n+++ b/plone/app/vocabularies/utils.py\n@@ -1,20 +1,7 @@\n-from plone.app.querystring import queryparser\n-from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n-from zope.component import getUtilitiesFor\n+from zope.deferredimport import deprecated\n \n \n-def parseQueryString(context, query):\n-    parsedquery = queryparser.parseFormquery(context, query)\n-\n-    index_modifiers = getUtilitiesFor(IParsedQueryIndexModifier)\n-    for name, modifier in index_modifiers:\n-        if name in parsedquery:\n-            new_name, query = modifier(parsedquery[name])\n-            parsedquery[name] = query\n-            # if a new index name has been returned, we need to replace\n-            # the native ones\n-            if name != new_name:\n-                del parsedquery[name]\n-                parsedquery[new_name] = query\n-\n-    return parsedquery\n+deprecated(\n+    "Import parseQueryString as parseAndModifyFormquery from plone.app.querystring.queryparser instead (will be removed in Plone 7)",\n+    parseQueryString="plone.app.querystring.queryparser:parseAndModifyFormquery",\n+)\ndiff --git a/setup.py b/setup.py\nindex eebf023..0c5ea4e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,9 +37,11 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        # be very careful adding dependencies here, as this package is used\n+        # by many many other packages in plone.app.* namespace\n+        # it is very easy to add transitive circular dependencies\n         "BTrees",\n         "Products.ZCatalog",\n-        "plone.app.querystring",\n         "plone.base",\n         "plone.memoize",\n         "plone.namedfile",\n'

