Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-27T12:11:44+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/2e887422d597486154369baccb28901bd8ad6633

purge transform cache if referenced images get updated

Files changed:
M CHANGES.rst
M plone/app/textfield/transform.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 19aa364..e743655 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- purge transform cache when a uid referenced image\n+  gets updated. this fixes `issue CMFPLone#2465 <https://github.com/plone/Products.CMFPlone/issues/2465>`_\n+  [petschki]\n \n \n 1.2.11 (2018-04-08)\ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 5bbc1d6..21869f2 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n-from plone.app.textfield.interfaces import ITransformer\n-from plone.app.textfield.interfaces import TransformError\n from Products.CMFCore.utils import getToolByName\n+from Products.PortalTransforms.cache import Cache\n from ZODB.POSException import ConflictError\n+from plone.app.linkintegrity.utils import getOutgoingLinks\n+from plone.app.textfield.interfaces import ITransformer\n+from plone.app.textfield.interfaces import TransformError\n from zope.component.hooks import getSite\n from zope.interface import implementer\n \n@@ -36,6 +38,9 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n+        # check for changed scales for referenced images\n+        self.check_referenced_images(mimeType, value._raw_holder)\n+\n         try:\n             data = transforms.convertTo(mimeType,\n                                         value.raw_encoded,\n@@ -67,3 +72,22 @@ def __call__(self, value, mimeType):\n             # log the traceback of the original exception\n             LOG.error("Transform exception", exc_info=True)\n             raise TransformError(\'Error during transformation\', e)\n+\n+    def check_referenced_images(self, target_mimetype, cache_obj):\n+        # referenced image scale urls get outdated if the images are modified.\n+        # purging the transform cache updates those urls.\n+        cache = Cache(cache_obj, context=self.context)\n+        data = cache.getCache(target_mimetype)\n+        if data is None:\n+            # not cached ... return\n+            return\n+        # get the original save time from the cached data dict\n+        orig_time = getattr(cache_obj, cache._id).values()[0][0]\n+        # lookup referenced images and check modification time\n+        for ref_img in getOutgoingLinks(self.context):\n+            # XXX: not sure if it is a potential performance problem\n+            # looking up the image object\n+            if ref_img.to_object.modified() > orig_time:\n+                # found an updated image: purge the cache\n+                cache.purgeCache()\n+                return\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-27T12:18:39+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/a9e8a6ea59039c3fcf01119ddba7949d25ad6c8e

sane comment

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 21869f2..d9e64b6 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -38,7 +38,7 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n-        # check for changed scales for referenced images\n+        # check for modified referenced images\n         self.check_referenced_images(mimeType, value._raw_holder)\n \n         try:\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-27T12:38:36+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/4c5a0d73e83c992627c1f869e1506a660ee593a5

only check IImage references for modification

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex d9e64b6..17c236e 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -10,6 +10,11 @@\n \n import logging\n \n+try:\n+    from plone.app.contenttypes.interfaces import IImage\n+    HAS_PAC_IMAGE = True\n+except ImportError:\n+    HAS_PAC_IMAGE = False\n \n LOG = logging.getLogger(\'plone.app.textfield\')\n \n@@ -38,8 +43,9 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n-        # check for modified referenced images\n-        self.check_referenced_images(mimeType, value._raw_holder)\n+        if HAS_PAC_IMAGE:\n+            # check for modified referenced images\n+            self.check_referenced_images(mimeType, value._raw_holder)\n \n         try:\n             data = transforms.convertTo(mimeType,\n@@ -84,10 +90,13 @@ def check_referenced_images(self, target_mimetype, cache_obj):\n         # get the original save time from the cached data dict\n         orig_time = getattr(cache_obj, cache._id).values()[0][0]\n         # lookup referenced images and check modification time\n-        for ref_img in getOutgoingLinks(self.context):\n+        for ref_link in getOutgoingLinks(self.context):\n+            # only lookup image references\n+            if IImage not in ref_link.to_interfaces_flattened:\n+                continue\n             # XXX: not sure if it is a potential performance problem\n             # looking up the image object\n-            if ref_img.to_object.modified() > orig_time:\n+            if ref_link.to_object.modified() > orig_time:  # noqa\n                 # found an updated image: purge the cache\n                 cache.purgeCache()\n                 return\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-27T12:41:45+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/fb18b54e959f65ba4e33fb0a3b10973c1b7eea68

unneeded comment

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 17c236e..a2b37e6 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -96,7 +96,7 @@ def check_referenced_images(self, target_mimetype, cache_obj):\n                 continue\n             # XXX: not sure if it is a potential performance problem\n             # looking up the image object\n-            if ref_link.to_object.modified() > orig_time:  # noqa\n+            if ref_link.to_object.modified() > orig_time:\n                 # found an updated image: purge the cache\n                 cache.purgeCache()\n                 return\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-30T10:03:55+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/9308c0dfb565dec86e5a3565141cd6ea1b5654b0

fix error when context does not implement IIntIds

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex a2b37e6..3448c34 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -3,6 +3,7 @@\n from Products.PortalTransforms.cache import Cache\n from ZODB.POSException import ConflictError\n from plone.app.linkintegrity.utils import getOutgoingLinks\n+from plone.app.linkintegrity.utils import hasOutgoingLinks\n from plone.app.textfield.interfaces import ITransformer\n from plone.app.textfield.interfaces import TransformError\n from zope.component.hooks import getSite\n@@ -84,13 +85,22 @@ def check_referenced_images(self, target_mimetype, cache_obj):\n         # purging the transform cache updates those urls.\n         cache = Cache(cache_obj, context=self.context)\n         data = cache.getCache(target_mimetype)\n+\n         if data is None:\n             # not cached ... return\n             return\n+\n+        # lookup referenced images and check modification time\n+        try:\n+            ol = getOutgoingLinks(self.context)\n+        except KeyError:\n+            # context might not implement IIntId (eg. portal)\n+            return\n+\n         # get the original save time from the cached data dict\n         orig_time = getattr(cache_obj, cache._id).values()[0][0]\n-        # lookup referenced images and check modification time\n-        for ref_link in getOutgoingLinks(self.context):\n+\n+        for ref_link in ol:\n             # only lookup image references\n             if IImage not in ref_link.to_interfaces_flattened:\n                 continue\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-30T12:57:54+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/b46e228b84821a3636e5aa40e839b86df4805af7

refactor lookup of modified image

remove dependency to p.a.linkintegrity and use catalog query instead

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 3448c34..26a9b02 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -2,20 +2,13 @@\n from Products.CMFCore.utils import getToolByName\n from Products.PortalTransforms.cache import Cache\n from ZODB.POSException import ConflictError\n-from plone.app.linkintegrity.utils import getOutgoingLinks\n-from plone.app.linkintegrity.utils import hasOutgoingLinks\n from plone.app.textfield.interfaces import ITransformer\n from plone.app.textfield.interfaces import TransformError\n from zope.component.hooks import getSite\n from zope.interface import implementer\n \n import logging\n-\n-try:\n-    from plone.app.contenttypes.interfaces import IImage\n-    HAS_PAC_IMAGE = True\n-except ImportError:\n-    HAS_PAC_IMAGE = False\n+import re\n \n LOG = logging.getLogger(\'plone.app.textfield\')\n \n@@ -28,6 +21,7 @@ class PortalTransformsTransformer(object):\n \n     def __init__(self, context):\n         self.context = context\n+        self.catalog = getToolByName(getSite(), \'portal_catalog\')\n \n     def __call__(self, value, mimeType):\n         # shortcut it we have no data\n@@ -44,9 +38,8 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n-        if HAS_PAC_IMAGE:\n-            # check for modified referenced images\n-            self.check_referenced_images(mimeType, value._raw_holder)\n+        # check for modified referenced images\n+        self.check_referenced_images(mimeType, value._raw_holder)\n \n         try:\n             data = transforms.convertTo(mimeType,\n@@ -87,26 +80,14 @@ def check_referenced_images(self, target_mimetype, cache_obj):\n         data = cache.getCache(target_mimetype)\n \n         if data is None:\n-            # not cached ... return\n-            return\n-\n-        # lookup referenced images and check modification time\n-        try:\n-            ol = getOutgoingLinks(self.context)\n-        except KeyError:\n-            # context might not implement IIntId (eg. portal)\n             return\n \n         # get the original save time from the cached data dict\n         orig_time = getattr(cache_obj, cache._id).values()[0][0]\n+        # extract all uuids\n+        uids = re.findall(r\'resolve[uU]id/([^/]*)/@@images\', cache_obj.value)\n+        modified_imgs = self.catalog(\n+            UID=uids, modified=dict(query=orig_time, range="min"))\n \n-        for ref_link in ol:\n-            # only lookup image references\n-            if IImage not in ref_link.to_interfaces_flattened:\n-                continue\n-            # XXX: not sure if it is a potential performance problem\n-            # looking up the image object\n-            if ref_link.to_object.modified() > orig_time:\n-                # found an updated image: purge the cache\n-                cache.purgeCache()\n-                return\n+        if len(modified_imgs) > 0:\n+            cache.purgeCache()\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-30T13:15:27+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/14cd1864c6b5144522351e3d6fca55fd56d535e0

fix 'original' scale images

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 26a9b02..7e9f3c0 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -85,7 +85,7 @@ def check_referenced_images(self, target_mimetype, cache_obj):\n         # get the original save time from the cached data dict\n         orig_time = getattr(cache_obj, cache._id).values()[0][0]\n         # extract all uuids\n-        uids = re.findall(r\'resolve[uU]id/([^/]*)/@@images\', cache_obj.value)\n+        uids = re.findall(\'src="[^/]*/resolve[uU]id/([^/"]*)\', cache_obj.value)\n         modified_imgs = self.catalog(\n             UID=uids, modified=dict(query=orig_time, range="min"))\n \n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-30T13:31:17+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/faf7aca228e54f8ba297c7a7d7c4537c09686f0b

fix check, when no image uuid is available

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 7e9f3c0..94d287b 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -74,18 +74,22 @@ def __call__(self, value, mimeType):\n             raise TransformError(\'Error during transformation\', e)\n \n     def check_referenced_images(self, target_mimetype, cache_obj):\n+        # extract all image src uuids\n+        uids = re.findall(\'src="[^/]*/resolve[uU]id/([^/"]*)\', cache_obj.value)\n+        if len(uids) == 0:\n+            # no uuid here at all\n+            return\n+\n         # referenced image scale urls get outdated if the images are modified.\n         # purging the transform cache updates those urls.\n         cache = Cache(cache_obj, context=self.context)\n         data = cache.getCache(target_mimetype)\n-\n         if data is None:\n+            # data is not cached\n             return\n \n         # get the original save time from the cached data dict\n         orig_time = getattr(cache_obj, cache._id).values()[0][0]\n-        # extract all uuids\n-        uids = re.findall(\'src="[^/]*/resolve[uU]id/([^/"]*)\', cache_obj.value)\n         modified_imgs = self.catalog(\n             UID=uids, modified=dict(query=orig_time, range="min"))\n \n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-31T11:11:33+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/ccc0e4586ceb4f4825c90a66045ef51a3ab06c34

performance improvement

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 94d287b..4ab558c 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -11,6 +11,7 @@\n import re\n \n LOG = logging.getLogger(\'plone.app.textfield\')\n+imguid_re = re.compile(r\'src="[^/]*/resolve[uU]id/([^/"]*)\')\n \n \n @implementer(ITransformer)\n@@ -19,6 +20,8 @@ class PortalTransformsTransformer(object):\n     """Invoke portal_transforms to perform a conversion\n     """\n \n+    _ccounter_id = \'_v_catalog_counter\'\n+\n     def __init__(self, context):\n         self.context = context\n         self.catalog = getToolByName(getSite(), \'portal_catalog\')\n@@ -74,8 +77,17 @@ def __call__(self, value, mimeType):\n             raise TransformError(\'Error during transformation\', e)\n \n     def check_referenced_images(self, target_mimetype, cache_obj):\n+        # check catalog counter for changes first.\n+        counter = self.catalog.getCounter()\n+        cached_counter = getattr(cache_obj, self._ccounter_id, -1)\n+        if cached_counter == counter:\n+            # no changes made since last visit\n+            return\n+        # safe counter state\n+        setattr(cache_obj, self._ccounter_id, counter)\n+\n         # extract all image src uuids\n-        uids = re.findall(\'src="[^/]*/resolve[uU]id/([^/"]*)\', cache_obj.value)\n+        uids = set(imguid_re.findall(cache_obj.value))\n         if len(uids) == 0:\n             # no uuid here at all\n             return\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-31T11:25:22+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.textfield/commit/0681b38b1ac0dcab57c3cbe1f8aaea7b1a508725

don't query with set()

Files changed:
M plone/app/textfield/transform.py

b'diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 4ab558c..2ccc61c 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -87,7 +87,7 @@ def check_referenced_images(self, target_mimetype, cache_obj):\n         setattr(cache_obj, self._ccounter_id, counter)\n \n         # extract all image src uuids\n-        uids = set(imguid_re.findall(cache_obj.value))\n+        uids = imguid_re.findall(cache_obj.value)\n         if len(uids) == 0:\n             # no uuid here at all\n             return\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2018-07-31T12:51:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.textfield/commit/7615c1c4ea04695333c1a872b8a3e81c3fe84730

Merge pull request #30 from plone/petschki-imagescale-cache-fix

UID resolved image scale url fix

Files changed:
M CHANGES.rst
M plone/app/textfield/transform.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 19aa364..e743655 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- purge transform cache when a uid referenced image\n+  gets updated. this fixes `issue CMFPLone#2465 <https://github.com/plone/Products.CMFPlone/issues/2465>`_\n+  [petschki]\n \n \n 1.2.11 (2018-04-08)\ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex 5bbc1d6..2ccc61c 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -1,15 +1,17 @@\n # -*- coding: utf-8 -*-\n-from plone.app.textfield.interfaces import ITransformer\n-from plone.app.textfield.interfaces import TransformError\n from Products.CMFCore.utils import getToolByName\n+from Products.PortalTransforms.cache import Cache\n from ZODB.POSException import ConflictError\n+from plone.app.textfield.interfaces import ITransformer\n+from plone.app.textfield.interfaces import TransformError\n from zope.component.hooks import getSite\n from zope.interface import implementer\n \n import logging\n-\n+import re\n \n LOG = logging.getLogger(\'plone.app.textfield\')\n+imguid_re = re.compile(r\'src="[^/]*/resolve[uU]id/([^/"]*)\')\n \n \n @implementer(ITransformer)\n@@ -18,8 +20,11 @@ class PortalTransformsTransformer(object):\n     """Invoke portal_transforms to perform a conversion\n     """\n \n+    _ccounter_id = \'_v_catalog_counter\'\n+\n     def __init__(self, context):\n         self.context = context\n+        self.catalog = getToolByName(getSite(), \'portal_catalog\')\n \n     def __call__(self, value, mimeType):\n         # shortcut it we have no data\n@@ -36,6 +41,9 @@ def __call__(self, value, mimeType):\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n+        # check for modified referenced images\n+        self.check_referenced_images(mimeType, value._raw_holder)\n+\n         try:\n             data = transforms.convertTo(mimeType,\n                                         value.raw_encoded,\n@@ -67,3 +75,35 @@ def __call__(self, value, mimeType):\n             # log the traceback of the original exception\n             LOG.error("Transform exception", exc_info=True)\n             raise TransformError(\'Error during transformation\', e)\n+\n+    def check_referenced_images(self, target_mimetype, cache_obj):\n+        # check catalog counter for changes first.\n+        counter = self.catalog.getCounter()\n+        cached_counter = getattr(cache_obj, self._ccounter_id, -1)\n+        if cached_counter == counter:\n+            # no changes made since last visit\n+            return\n+        # safe counter state\n+        setattr(cache_obj, self._ccounter_id, counter)\n+\n+        # extract all image src uuids\n+        uids = imguid_re.findall(cache_obj.value)\n+        if len(uids) == 0:\n+            # no uuid here at all\n+            return\n+\n+        # referenced image scale urls get outdated if the images are modified.\n+        # purging the transform cache updates those urls.\n+        cache = Cache(cache_obj, context=self.context)\n+        data = cache.getCache(target_mimetype)\n+        if data is None:\n+            # data is not cached\n+            return\n+\n+        # get the original save time from the cached data dict\n+        orig_time = getattr(cache_obj, cache._id).values()[0][0]\n+        modified_imgs = self.catalog(\n+            UID=uids, modified=dict(query=orig_time, range="min"))\n+\n+        if len(modified_imgs) > 0:\n+            cache.purgeCache()\n'

