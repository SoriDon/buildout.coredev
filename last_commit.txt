Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-03-23T21:12:12+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/001b1e09269d851226ba42da90e0eb5caad14cae

Move types_listing.js to Mockup controlpanels.

Files changed:
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/types_listing.pt
D plone/app/dexterity/browser/types_listing.js

b'diff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml\nindex db8fa7d..4dcb84f 100644\n--- a/plone/app/dexterity/browser/configure.zcml\n+++ b/plone/app/dexterity/browser/configure.zcml\n@@ -127,11 +127,6 @@\n       permission="plone.schemaeditor.ManageSchemata"\n       />\n \n-  <browser:resource\n-      name="plone.app.dexterity.types_listing.js"\n-      file="types_listing.js"\n-      />\n-\n   <configure zcml:condition="installed plone.resourceeditor">\n     <browser:page\n         name="modeleditor"\ndiff --git a/plone/app/dexterity/browser/types_listing.js b/plone/app/dexterity/browser/types_listing.js\ndeleted file mode 100644\nindex 2e4d55a..0000000\n--- a/plone/app/dexterity/browser/types_listing.js\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-/* globals require, define */\n-require([\'jquery\', \'mockup-patterns-modal\'], function($, Modal) {\n-    \'use strict\';\n-\n-    $(\'.action\').css(\'display\', \'inline\');\n-\n-    // clone type form\n-    $(\'#crud-edit-form-buttons-clone\').click(function(e) {\n-        var selected = $(\'input[id$=-widgets-select-0]:checked\');\n-        if (selected.length === 1) {\n-            e.preventDefault();\n-            $(this).removeClass(\'submitting\');\n-            var type_link = $(\'a\', selected.closest(\'tr\'));\n-            var $el = $(\n-                \'<\' + \'a href="\' + type_link.attr(\'href\') + \'/@@clone"><\' + \'/a>\'\n-            ).appendTo(\'body\');\n-            var modal = new Modal($el, {\n-                actionOptions: {\n-                    displayInModal: false\n-                }\n-            });\n-            $el.click();\n-        }\n-    });\n-\n-    // delete type confirmation\n-    $(\'#crud-edit-form-buttons-delete\').click(function(e) {\n-        var items = 0,\n-            msg;\n-        $(\'td.count\').closest(\'tr\').has(\'input:checked\').each(function() {\n-            items += parseInt($(\'td.count .int-field\', this).html().trim());\n-        });\n-        if (items) {\n-            msg =\n-                \'WARNING: There are existing instances of these content types which will break.\\n\\nAre you sure you want to delete these types?\';\n-        } else {\n-            msg = \'Are you sure you want to delete these types?\';\n-        }\n-        if (!window.confirm(msg)) {\n-            $(this).removeClass(\'submitting\');\n-            e.preventDefault();\n-        }\n-    });\n-\n-    // set id from title\n-    $(\'body\').on(\'change\', \'#form-widgets-title\', function() {\n-        var id = $.plone_schemaeditor_normalize_string($(this).val());\n-        $(\'#form-widgets-id\').val(id);\n-    });\n-\n-});\ndiff --git a/plone/app/dexterity/browser/types_listing.pt b/plone/app/dexterity/browser/types_listing.pt\nindex d7bddb2..02866ce 100644\n--- a/plone/app/dexterity/browser/types_listing.pt\n+++ b/plone/app/dexterity/browser/types_listing.pt\n@@ -1,9 +1,5 @@\n <tal:root\n     i18n:domain="plone">\n-  <script type="text/javascript"\n-          tal:attributes="src context/++resource++schemaeditor.js"></script>\n-  <script type="text/javascript"\n-          tal:attributes="src context/++resource++plone.app.dexterity.types_listing.js"></script>\n \n   <div class="alert alert-info" role="alert"\n        tal:condition="view/status">\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-03-23T21:12:12+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/71e735d0d97dcb1804c3f5bbe87279eb4200342e

Modeleditor: Use pat-code-editor instead of ACE. Make the form usable without JavaScript. On error return the form with the erronous model to be able to make modifications.

Files changed:
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/modeleditor.pt
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/tests/editing.rst
D plone/app/dexterity/browser/modeleditor.css
D plone/app/dexterity/browser/modeleditor.js

b'diff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml\nindex 4dcb84f..8069d11 100644\n--- a/plone/app/dexterity/browser/configure.zcml\n+++ b/plone/app/dexterity/browser/configure.zcml\n@@ -135,23 +135,6 @@\n         permission="plone.schemaeditor.ManageSchemata"\n         template="modeleditor.pt"\n         />\n-\n-    <browser:page\n-        name="model-edit-save"\n-        for="plone.schemaeditor.interfaces.ISchemaContext"\n-        class=".modeleditor.AjaxSaveHandler"\n-        permission="plone.schemaeditor.ManageSchemata"\n-        />\n-\n-    <browser:resource\n-      name="plone.app.dexterity.modeleditor.css"\n-      file="modeleditor.css"\n-      />\n-\n-    <browser:resource\n-      name="plone.app.dexterity.modeleditor.js"\n-      file="modeleditor.js"\n-      />\n   </configure>\n \n </configure>\ndiff --git a/plone/app/dexterity/browser/modeleditor.css b/plone/app/dexterity/browser/modeleditor.css\ndeleted file mode 100644\nindex edcc396..0000000\n--- a/plone/app/dexterity/browser/modeleditor.css\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-#content {\n-    margin-bottom: 20px;\n-}\n-#modelEditor {\n-    right: 1px;\n-    left: 1px;\n-    z-index: 1;\n-    border: 1px solid #ccc;\n-}\n-.formControls {\n-    text-align: left;\n-    font-size: 175%;\n-}\n-.formControls input {\n-    font-size: 100%;\n-}\n-.portalMessage {\n-    float: right;\n-    font-size: 200%;\n-    color: #fff;\n-}\n-.portalMessage span {\n-    background-color: #0a0;\n-    padding: 0.5em;\n-}\ndiff --git a/plone/app/dexterity/browser/modeleditor.js b/plone/app/dexterity/browser/modeleditor.js\ndeleted file mode 100644\nindex dcb22c7..0000000\n--- a/plone/app/dexterity/browser/modeleditor.js\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-/* globals require, define, form_modified_message, ajax_noresponse_message */\n-// global message strings are from jsvariables.py in CMFPlone.\n-require([\'jquery\'], function($) {\n-    \'use strict\';\n-    var init = function() {\n-\n-        if (!window.ace){\n-            // XXX hack...\n-            // wait, try loading later\n-            setTimeout(function() {\n-                init();\n-            }, 200);\n-            return;\n-        }\n-\n-        var editor = window.ace.edit(\'modelEditor\'),\n-            session = editor.getSession(),\n-            myform = $(\'#saveform\'),\n-            doc_changed = false;\n-\n-        // editor tuneup\n-        editor.setTheme(\'ace/theme/monokai\');\n-        session.setMode(\'ace/mode/xml\');\n-        session.setTabSize(4);\n-        session.setUseSoftTabs(true);\n-        session.setUseWrapMode(true);\n-        editor.setHighlightActiveLine(false);\n-        // Make save keystroke trigger save-form submit\n-        editor.commands.addCommand({\n-            name: \'save\',\n-            bindKey: {\n-                win: \'Ctrl-S\',\n-                mac: \'Command-S\'\n-            },\n-            exec: function() {\n-                myform.submit();\n-            }\n-        });\n-\n-        // enable save submit button on change\n-        session.on(\'change\', function (e) {\n-            $(\'#saveform :submit\').removeAttr(\'disabled\');\n-            doc_changed = true;\n-        });\n-\n-        // unload protection\n-        // See http://dev.w3.org/html5/spec-LC/history.html#unloading-documents\n-        $(window).on(\'beforeunload\', function(event) {\n-            if (doc_changed) {\n-                return form_modified_message;\n-            } else {\n-                event.returnValue = \'\';\n-            }\n-        });\n-\n-        // form submit handler; ajax posts data\n-        myform.on(\'submit\', function(event) {\n-            var action = myform.attr(\'action\');\n-\n-            // prevent real submit\n-            event.preventDefault();\n-\n-            // stuff the editor contents into the form\n-            // for easy serialization\n-            $(\'#savesource\').val(editor.getValue());\n-\n-            $.post(\n-                action,\n-                myform.serialize(),\n-                function(rez) {\n-                    if (rez.success) {\n-                        var messagespan = $(\'#messagespan\');\n-\n-                        doc_changed = false;\n-                        // disable save button\n-                        $(\'#saveform :submit\')\n-                            .attr(\'disabled\', \'disabled\')\n-                            .removeClass(\'submitting\');\n-                        messagespan.html(rez.message);\n-                        messagespan.show().fadeOut(1000);\n-                    } else {\n-                        alert(rez.message);\n-                    }\n-                },\n-                \'json\'\n-            ).fail(function() {\n-                alert(ajax_noresponse_message);\n-            });\n-        });\n-\n-        function setEditorSize() {\n-            var wheight = $(window).height();\n-            $(\'#rules-editor\').height(wheight);\n-            $(\'#modelEditor\').height(wheight - 80);\n-        }\n-        $(window).resize(function() {\n-            setEditorSize();\n-        });\n-        setEditorSize();\n-    };\n-\n-    $().ready(function() {\n-        init();\n-    });\n-});\ndiff --git a/plone/app/dexterity/browser/modeleditor.pt b/plone/app/dexterity/browser/modeleditor.pt\nindex dcb7a29..f9256da 100644\n--- a/plone/app/dexterity/browser/modeleditor.pt\n+++ b/plone/app/dexterity/browser/modeleditor.pt\n@@ -9,12 +9,6 @@\n <body>\n <article metal:fill-slot="prefs_configlet_main">\n <tal:main-macro metal:define-macro="main">\n-  <tal:comment tal:condition="python:False">\n-    prefs_main_template doesn\'t have the style_slot\n-  </tal:comment>\n-  <style type="text/css"\n-      tal:content="string:@import url(${portal_url}/++resource++plone.app.dexterity.modeleditor.css);"\n-      />\n \n   <header id="page-intro">\n    <a href=""\n@@ -23,6 +17,7 @@\n         i18n:translate="label_back_to_schemaeditor">\n             Back to the schema editor\n     </a>\n+\n     <h1 class="documentFirstHeading"\n         i18n:translate="heading_model_edit">Edit field model for\n       <span i18n:name="name" tal:content="context/Title">name</span>\n@@ -38,40 +33,31 @@\n    </header>\n \n   <div id="rules-editor">\n-    <div class="portalMessage info">\n-      <span id="messagespan" style="display:none">\n-        &nbsp;\n-      </span>&nbsp;\n-    </div>\n \n-    <form id="saveform"\n-        tal:attributes="action string:${context/absolute_url}/@@model-edit-save"\n+    <form\n+        class="modeleditor__form"\n+        action="${context/absolute_url}/@@modeleditor"\n+        method="POST"\n         tal:define="authenticator context/@@authenticator/authenticator | nothing">\n+      \n       <input tal:replace="structure authenticator" />\n-      <input type="hidden" id="savesource" name="source" value="" />\n-      <div class="mb-3">\n-         <button class="btn btn-primary" type="submit" name="form.button.save" disabled="disabled" i18n:translate="">Save</button>\n \n-      </div>\n-    </form>\n+      <textarea\n+          name="source"\n+          class="modeleditor__source pat-code-editor--"\n+          data-pat-code-editor="language: xml; theme: dark">${view/model_source}</textarea>\n \n-    <div id="modelEditor" tal:content="view/modelSource" />\n-  </div>\n+      <br />\n+      \n+      <button\n+          class="btn btn-primary"\n+          type="submit"\n+          name="form.button.save" \n+          i18n:translate="">Save</button>\n \n-  <tal:comment tal:condition="python:False">\n-      prefs_main_template doesn\'t have the head_javascript_slot\n-  </tal:comment>\n+    </form>\n \n-  <script src="++plone++static/components/ace-builds/src/ace.js"\n-      type="text/javascript"\n-      charset="utf-8"\n-      tal:attributes="src string:${portal_url}/++plone++static/components/ace-builds/src/ace.js"\n-      ></script>\n-  <script src="++resource++plone.schemaeditor/modeleditor.js"\n-      type="text/javascript"\n-      charset="utf-8"\n-      tal:attributes="src string:${portal_url}/++resource++plone.app.dexterity.modeleditor.js"\n-      ></script>\n+  </div>\n \n </tal:main-macro>\n </article>\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex c132a7a..c9caddf 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -3,95 +3,98 @@\n from lxml import etree\n from plone.app.dexterity import _\n from plone.supermodel.parser import SupermodelParseError\n+from Products.CMFPlone.utils import safe_bytes\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import queryMultiAdapter\n \n-import json\n+import html\n import plone.supermodel\n \n \n-NAMESPACE = \'{http://namespaces.plone.org/supermodel/schema}\'\n+NAMESPACE = "{http://namespaces.plone.org/supermodel/schema}"\n \n \n class ModelEditorView(BrowserView):\n-    """Editor view.\n-    """\n+    """Editor view."""\n \n-    def modelSource(self):\n-        return self.context.fti.model_source\n+    @property\n+    def model_source(self):\n+        # Return modified source from textarea or the original FTI source.\n+        return self.request.form.get("source") or self.context.fti.model_source\n \n-\n-def authorized(context, request):\n-    authenticator = queryMultiAdapter((context, request),\n-                                      name=u\'authenticator\')\n-    return authenticator and authenticator.verify()\n-\n-\n-class AjaxSaveHandler(BrowserView):\n-    """Handle AJAX save posts.\n-    """\n+    def authorized(self, context, request):\n+        authenticator = queryMultiAdapter((context, request), name=u"authenticator")\n+        return authenticator and authenticator.verify()\n \n     def __call__(self):\n-        """Handle AJAX save post.\n-        """\n+        """View and eventually save the form."""\n \n-        if not authorized(self.context, self.request):\n-            raise Unauthorized\n+        save = "form.button.save" in self.request.form\n+        source = self.request.form.get("source")\n+        if save and source:\n+\n+            # First, check for authenticator\n+            if not self.authorized(self.context, self.request):\n+                raise Unauthorized\n \n-        source = self.request.form.get(\'source\')\n-        if source:\n             # Is it valid XML?\n             # Some safety measures.\n             # We do not want to load entities, especially file:/// entities.\n             # Also discard processing instructions.\n+            #\n+            source = safe_bytes(source)\n             parser = etree.XMLParser(resolve_entities=False, remove_pis=True)\n             try:\n                 root = etree.fromstring(source, parser=parser)\n             except etree.XMLSyntaxError as e:\n-                return json.dumps({\n-                    \'success\': False,\n-                    \'message\': \'XMLSyntaxError: {0}\'.format(\n-                        safe_unicode(e.args[0])\n-                    )\n-                })\n+                IStatusMessage(self.request).addStatusMessage(\n+                    "XMLSyntaxError: {0}".format(html.escape(safe_unicode(e.args[0]))),\n+                    "error",\n+                )\n+                return super().__call__()\n \n             # a little more sanity checking, look at first two element levels\n-            if root.tag != NAMESPACE + \'model\':\n-                return json.dumps({\n-                    \'success\': False,\n-                    \'message\': _(u"Error: root tag must be \'model\'")\n-                })\n+            if root.tag != NAMESPACE + "model":\n+                IStatusMessage(self.request).addStatusMessage(\n+                    _(u"Error: root tag must be \'model\'"),\n+                    "error",\n+                )\n+                return super().__call__()\n+\n             for element in root.getchildren():\n-                if element.tag != NAMESPACE + \'schema\':\n-                    return json.dumps({\n-                        \'success\': False,\n-                        \'message\': _(\n-                            u"Error: all model elements must be \'schema\'"\n-                        )\n-                    })\n+                if element.tag != NAMESPACE + "schema":\n+                    IStatusMessage(self.request).addStatusMessage(\n+                        _(u"Error: all model elements must be \'schema\'"),\n+                        "error",\n+                    )\n+                    return super().__call__()\n \n             # can supermodel parse it?\n             # This is mainly good for catching bad dotted names.\n             try:\n-                plone.supermodel.loadString(source, policy=u\'dexterity\')\n+                plone.supermodel.loadString(source, policy=u"dexterity")\n             except SupermodelParseError as e:\n-                message = e.args[0].replace(\'\\n  File "<unknown>"\', \'\')\n-                return json.dumps({\n-                    \'success\': False,\n-                    \'message\': u\'SuperModelParseError: {0}\'.format(message)\n-                })\n+                message = e.args[0].replace(\'\\n  File "<unknown>"\', "")\n+                IStatusMessage(self.request).addStatusMessage(\n+                    u"SuperModelParseError: {0}".format(html.escape(message)),\n+                    "error",\n+                )\n+                return super().__call__()\n \n             # clean up formatting sins\n             source = etree.tostring(\n-                root,\n-                pretty_print=True,\n-                xml_declaration=True,\n-                encoding=\'utf8\'\n+                root, pretty_print=True, xml_declaration=True, encoding="utf8"\n             )\n-            # and save to FTI\n+\n+            # Save to FTI and also allow to clear the source\n             fti = self.context.fti\n             fti.manage_changeProperties(model_source=source)\n \n-            self.request.response.setHeader(\'Content-Type\', \'application/json\')\n-            return json.dumps({\'success\': True, \'message\': _(u\'Saved\')})\n+            IStatusMessage(self.request).addStatusMessage(\n+                _("Changes saved."),\n+                "info",\n+            )\n+\n+        return super().__call__()\ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex f740fe9..c86cce1 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -169,23 +169,11 @@ button on the field list form::\n   >>> browser.url\n   \'http://nohost/plone/dexterity-types/plonista/@@modeleditor\'\n \n-We should be telling the browser to load our keys resources::\n-\n-  >>> browser.contents\n-  \'...<script...src="http://nohost/plone/++plone++static/components/ace-builds/src/ace.js"...\'\n-\n-  >>> browser.contents\n-  \'...<script...src="http://nohost/plone/++resource++plone.app.dexterity.modeleditor.js"...\'\n-\n-Both of those should be available::\n-\n-  browser.open(\'http://nohost/plone/++plone++static/components/ace-builds/src/ace.js\')\n-  browser.open(\'http://nohost/plone/++resource++plone.app.dexterity.modeleditor.js\')\n-\n-Return to our view and find the XML model source in a div, ready for the Ace editor::\n+Go there and find the XML model source in a textarea, ready to be edited\n+(with JavaScript enabled, this should show pat-code-editor instead of the textarea)::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor\')\n-  >>> \'<div id="modelEditor">\' in browser.contents\n+  >>> \'<textarea...name="source">\' in browser.contents\n   True\n \n   >>> \'&lt;schema&gt;\' in browser.contents\n@@ -200,52 +188,50 @@ There should be an authenticator in the `save` form::\n \n   >>> authenticator = browser.getControl(name="_authenticator", index=0).value\n \n-Save is via AJAX. Let\'s check the save view\'s functionality.\n+\n \n First, prove this won\'t work without an authenticator\n \n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something\')\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=something\')\n   Traceback (most recent call last):\n   ...\n   AccessControl.unauthorized.Unauthorized: ...\n \n Check rejection of bad XML "something"::\n \n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something&_authenticator=%s\' % authenticator)\n-  >>> import json\n-  >>> result = json.loads(browser.contents)\n-  >>> u"XMLSyntaxError: Start tag expected" in result[\'message\']\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=something&_authenticator=%s\' % authenticator)\n+  >>> u"statusmessage-error" in browser.contents\n+  True\n+  >>> u"XMLSyntaxError: Start tag expected" in browser.contents\n   True\n \n We should refuse source that doesn\'t have `model` for the root tag::\n \n   >>> bad_source = model_source.replace(\'model\', \'mode\')\n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> from pprint import pprint\n-  >>> result = json.loads(browser.contents)\n-  >>> u"Error: root tag must be \'model\'" in result[\'message\']\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n+  >>> u"statusmessage-error" in browser.contents\n+  True\n+  >>> u"Error: root tag must be \'model\'" in browser.contents\n   True\n \n Likewise, only `schema` tags are allowed inside the model::\n \n   >>> bad_source = model_source.replace(\'schema>\', \'scheme>\')\n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> result = json.loads(browser.contents)\n-  >>> u"Error: all model elements must be \'schema\'" in result[\'message\']\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n+  >>> u"statusmessage-error" in browser.contents\n+  True\n+  >>> u"Error: all model elements must be \'schema\'" in browser.contents\n   True\n \n Should work with real XML\n \n ::\n \n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n-  >>> pprint(json.loads(browser.contents))\n-  {\'message\': \'Saved\', \'success\': True}\n-\n-That response should have a JSON content type::\n-\n-  >>> browser.headers[\'content-type\']\n-  \'application/json\'\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n \n We should be providing a link back to the fields editor::\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-03-23T21:12:12+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/4dc69d1cf620958c9795c10b8bb8e7f17b9aff61

Modeleditor: Fix usage of modeleditor, HTML-escape initialization value.

Files changed:
M plone/app/dexterity/browser/modeleditor.pt
M plone/app/dexterity/browser/modeleditor.py

b'diff --git a/plone/app/dexterity/browser/modeleditor.pt b/plone/app/dexterity/browser/modeleditor.pt\nindex f9256da..fa191af 100644\n--- a/plone/app/dexterity/browser/modeleditor.pt\n+++ b/plone/app/dexterity/browser/modeleditor.pt\n@@ -44,8 +44,8 @@\n \n       <textarea\n           name="source"\n-          class="modeleditor__source pat-code-editor--"\n-          data-pat-code-editor="language: xml; theme: dark">${view/model_source}</textarea>\n+          class="modeleditor__source pat-code-editor"\n+          data-pat-code-editor="language: xml; theme: okaidia">${view/escaped_model_source}</textarea>\n \n       <br />\n       \ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex c9caddf..0b6ab27 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -19,6 +19,11 @@\n class ModelEditorView(BrowserView):\n     """Editor view."""\n \n+    @property\n+    def escaped_model_source(self):\n+        # Return the HTML escaped model source.\n+        return html.escape(self.model_source, False)\n+\n     @property\n     def model_source(self):\n         # Return modified source from textarea or the original FTI source.\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-03-23T21:12:12+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/53f53b7b4932a691337968fc18fc7040b953cf85

fix tests and deprecation-warnings

Files changed:
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/discussion.txt
M plone/app/dexterity/tests/editing.rst
M plone/app/dexterity/tests/test_constrains.py

b'diff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py\nindex e5ccbb0..701b809 100644\n--- a/plone/app/dexterity/behaviors/tests/test_id.py\n+++ b/plone/app/dexterity/behaviors/tests/test_id.py\n@@ -3,7 +3,7 @@\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone.testing import z2\n+from plone.testing.zope import Browser\n \n import transaction\n import unittest\n@@ -21,7 +21,7 @@ def setUp(self):\n         transaction.commit()\n \n         # prepare browser\n-        self.browser = z2.Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer[\'app\'])\n         self.browser.addHeader(\n             \'Authorization\',\n             \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\ndiff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py\nindex 9bf5eaa..ec1e980 100644\n--- a/plone/app/dexterity/testing.py\n+++ b/plone/app/dexterity/testing.py\n@@ -3,7 +3,7 @@\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.testing import z2\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n \n class DexterityFixture(PloneSandboxLayer):\n@@ -29,6 +29,6 @@ def setUpPloneSite(self, portal):\n     name=\'dexterity:Functional\'\n )\n DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(\n-    bases=(DEXTERITY_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(DEXTERITY_FIXTURE, WSGI_SERVER_FIXTURE),\n     name=\'dexterity:Acceptance\'\n )\ndiff --git a/plone/app/dexterity/tests/discussion.txt b/plone/app/dexterity/tests/discussion.txt\nindex 66a78e6..6b247cf 100644\n--- a/plone/app/dexterity/tests/discussion.txt\n+++ b/plone/app/dexterity/tests/discussion.txt\n@@ -18,7 +18,7 @@ Set up a test browser::\n     >>> from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD, setRoles\n     >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n     >>> import transaction; transaction.commit()\n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> browser = Browser(layer[\'app\'])\n     >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n \ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex c86cce1..1498a67 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -10,7 +10,7 @@ To demonstrate this, we\'ll need a logged in test browser::\n   >>> portal = layer[\'portal\']\n   >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n   >>> import transaction; transaction.commit()\n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.handleErrors = False\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n@@ -155,11 +155,8 @@ still test the Zope side.\n \n Get some tools::\n \n-  >>> try:\n-  ...     from html import escape\n-  ... except ImportError:\n-  ...     from cgi import escape\n-  >>> from six.moves.urllib.parse import quote_plus\n+  >>> from html import escape\n+  >>> from urllib.parse import quote_plus\n \n We should be able to navigate to the modeleditor view by clicking a\n button on the field list form::\n@@ -173,15 +170,16 @@ Go there and find the XML model source in a textarea, ready to be edited\n (with JavaScript enabled, this should show pat-code-editor instead of the textarea)::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor\')\n-  >>> \'<textarea...name="source">\' in browser.contents\n+  >>> \'<textarea name="source"\' in browser.contents\n   True\n \n-  >>> \'&lt;schema&gt;\' in browser.contents\n+  >>> \'&amp;lt;schema&amp;gt;\' in browser.contents\n   True\n \n   >>> model_source = portal.portal_types.plonista.model_source\n   >>> escaped_model_source = escape(model_source, quote=False)\n-  >>> escaped_model_source in browser.contents\n+  >>> again_escaped_model_source = escape(escaped_model_source, quote=False)\n+  >>> again_escaped_model_source in browser.contents\n   True\n \n There should be an authenticator in the `save` form::\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex c4a959e..43cb573 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -9,7 +9,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.fti import DexterityFTI\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from zope.interface.exceptions import Invalid\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-03-24T12:36:04+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/ff06fd4a8b1c8fb8cb49ddb842f8c4e3e94fa54a

Add news file.

Files changed:
A news/334.breaking

b'diff --git a/news/334.breaking b/news/334.breaking\nnew file mode 100644\nindex 0000000..412fa57\n--- /dev/null\n+++ b/news/334.breaking\n@@ -0,0 +1,7 @@\n+Remove JavaScript from this package and move it to Mockup.\n+[thet]\n+\n+Modeleditor: Use pat-code-editor from Patternslib instead ACE.\n+Make the model editing form usable without JavaScript.\n+Allow editing the form even with XML errors to be able to fix the problem.\n+[thet]\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-03-24T15:25:44+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/802def4d6a306b048b82a6afff3926c57121753b

Merge pull request #334 from plone/es6

Mockup ES6: Remove JavaScript from this package.

Files changed:
A news/334.breaking
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/browser/configure.zcml
M plone/app/dexterity/browser/modeleditor.pt
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/types_listing.pt
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/discussion.txt
M plone/app/dexterity/tests/editing.rst
M plone/app/dexterity/tests/test_constrains.py
D plone/app/dexterity/browser/modeleditor.css
D plone/app/dexterity/browser/modeleditor.js
D plone/app/dexterity/browser/types_listing.js

b'diff --git a/news/334.breaking b/news/334.breaking\nnew file mode 100644\nindex 0000000..412fa57\n--- /dev/null\n+++ b/news/334.breaking\n@@ -0,0 +1,7 @@\n+Remove JavaScript from this package and move it to Mockup.\n+[thet]\n+\n+Modeleditor: Use pat-code-editor from Patternslib instead ACE.\n+Make the model editing form usable without JavaScript.\n+Allow editing the form even with XML errors to be able to fix the problem.\n+[thet]\ndiff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py\nindex e5ccbb0..701b809 100644\n--- a/plone/app/dexterity/behaviors/tests/test_id.py\n+++ b/plone/app/dexterity/behaviors/tests/test_id.py\n@@ -3,7 +3,7 @@\n from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone.testing import z2\n+from plone.testing.zope import Browser\n \n import transaction\n import unittest\n@@ -21,7 +21,7 @@ def setUp(self):\n         transaction.commit()\n \n         # prepare browser\n-        self.browser = z2.Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer[\'app\'])\n         self.browser.addHeader(\n             \'Authorization\',\n             \'Basic {0}:{1}\'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )\ndiff --git a/plone/app/dexterity/browser/configure.zcml b/plone/app/dexterity/browser/configure.zcml\nindex db8fa7d..8069d11 100644\n--- a/plone/app/dexterity/browser/configure.zcml\n+++ b/plone/app/dexterity/browser/configure.zcml\n@@ -127,11 +127,6 @@\n       permission="plone.schemaeditor.ManageSchemata"\n       />\n \n-  <browser:resource\n-      name="plone.app.dexterity.types_listing.js"\n-      file="types_listing.js"\n-      />\n-\n   <configure zcml:condition="installed plone.resourceeditor">\n     <browser:page\n         name="modeleditor"\n@@ -140,23 +135,6 @@\n         permission="plone.schemaeditor.ManageSchemata"\n         template="modeleditor.pt"\n         />\n-\n-    <browser:page\n-        name="model-edit-save"\n-        for="plone.schemaeditor.interfaces.ISchemaContext"\n-        class=".modeleditor.AjaxSaveHandler"\n-        permission="plone.schemaeditor.ManageSchemata"\n-        />\n-\n-    <browser:resource\n-      name="plone.app.dexterity.modeleditor.css"\n-      file="modeleditor.css"\n-      />\n-\n-    <browser:resource\n-      name="plone.app.dexterity.modeleditor.js"\n-      file="modeleditor.js"\n-      />\n   </configure>\n \n </configure>\ndiff --git a/plone/app/dexterity/browser/modeleditor.css b/plone/app/dexterity/browser/modeleditor.css\ndeleted file mode 100644\nindex edcc396..0000000\n--- a/plone/app/dexterity/browser/modeleditor.css\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-#content {\n-    margin-bottom: 20px;\n-}\n-#modelEditor {\n-    right: 1px;\n-    left: 1px;\n-    z-index: 1;\n-    border: 1px solid #ccc;\n-}\n-.formControls {\n-    text-align: left;\n-    font-size: 175%;\n-}\n-.formControls input {\n-    font-size: 100%;\n-}\n-.portalMessage {\n-    float: right;\n-    font-size: 200%;\n-    color: #fff;\n-}\n-.portalMessage span {\n-    background-color: #0a0;\n-    padding: 0.5em;\n-}\ndiff --git a/plone/app/dexterity/browser/modeleditor.js b/plone/app/dexterity/browser/modeleditor.js\ndeleted file mode 100644\nindex dcb22c7..0000000\n--- a/plone/app/dexterity/browser/modeleditor.js\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-/* globals require, define, form_modified_message, ajax_noresponse_message */\n-// global message strings are from jsvariables.py in CMFPlone.\n-require([\'jquery\'], function($) {\n-    \'use strict\';\n-    var init = function() {\n-\n-        if (!window.ace){\n-            // XXX hack...\n-            // wait, try loading later\n-            setTimeout(function() {\n-                init();\n-            }, 200);\n-            return;\n-        }\n-\n-        var editor = window.ace.edit(\'modelEditor\'),\n-            session = editor.getSession(),\n-            myform = $(\'#saveform\'),\n-            doc_changed = false;\n-\n-        // editor tuneup\n-        editor.setTheme(\'ace/theme/monokai\');\n-        session.setMode(\'ace/mode/xml\');\n-        session.setTabSize(4);\n-        session.setUseSoftTabs(true);\n-        session.setUseWrapMode(true);\n-        editor.setHighlightActiveLine(false);\n-        // Make save keystroke trigger save-form submit\n-        editor.commands.addCommand({\n-            name: \'save\',\n-            bindKey: {\n-                win: \'Ctrl-S\',\n-                mac: \'Command-S\'\n-            },\n-            exec: function() {\n-                myform.submit();\n-            }\n-        });\n-\n-        // enable save submit button on change\n-        session.on(\'change\', function (e) {\n-            $(\'#saveform :submit\').removeAttr(\'disabled\');\n-            doc_changed = true;\n-        });\n-\n-        // unload protection\n-        // See http://dev.w3.org/html5/spec-LC/history.html#unloading-documents\n-        $(window).on(\'beforeunload\', function(event) {\n-            if (doc_changed) {\n-                return form_modified_message;\n-            } else {\n-                event.returnValue = \'\';\n-            }\n-        });\n-\n-        // form submit handler; ajax posts data\n-        myform.on(\'submit\', function(event) {\n-            var action = myform.attr(\'action\');\n-\n-            // prevent real submit\n-            event.preventDefault();\n-\n-            // stuff the editor contents into the form\n-            // for easy serialization\n-            $(\'#savesource\').val(editor.getValue());\n-\n-            $.post(\n-                action,\n-                myform.serialize(),\n-                function(rez) {\n-                    if (rez.success) {\n-                        var messagespan = $(\'#messagespan\');\n-\n-                        doc_changed = false;\n-                        // disable save button\n-                        $(\'#saveform :submit\')\n-                            .attr(\'disabled\', \'disabled\')\n-                            .removeClass(\'submitting\');\n-                        messagespan.html(rez.message);\n-                        messagespan.show().fadeOut(1000);\n-                    } else {\n-                        alert(rez.message);\n-                    }\n-                },\n-                \'json\'\n-            ).fail(function() {\n-                alert(ajax_noresponse_message);\n-            });\n-        });\n-\n-        function setEditorSize() {\n-            var wheight = $(window).height();\n-            $(\'#rules-editor\').height(wheight);\n-            $(\'#modelEditor\').height(wheight - 80);\n-        }\n-        $(window).resize(function() {\n-            setEditorSize();\n-        });\n-        setEditorSize();\n-    };\n-\n-    $().ready(function() {\n-        init();\n-    });\n-});\ndiff --git a/plone/app/dexterity/browser/modeleditor.pt b/plone/app/dexterity/browser/modeleditor.pt\nindex dcb7a29..fa191af 100644\n--- a/plone/app/dexterity/browser/modeleditor.pt\n+++ b/plone/app/dexterity/browser/modeleditor.pt\n@@ -9,12 +9,6 @@\n <body>\n <article metal:fill-slot="prefs_configlet_main">\n <tal:main-macro metal:define-macro="main">\n-  <tal:comment tal:condition="python:False">\n-    prefs_main_template doesn\'t have the style_slot\n-  </tal:comment>\n-  <style type="text/css"\n-      tal:content="string:@import url(${portal_url}/++resource++plone.app.dexterity.modeleditor.css);"\n-      />\n \n   <header id="page-intro">\n    <a href=""\n@@ -23,6 +17,7 @@\n         i18n:translate="label_back_to_schemaeditor">\n             Back to the schema editor\n     </a>\n+\n     <h1 class="documentFirstHeading"\n         i18n:translate="heading_model_edit">Edit field model for\n       <span i18n:name="name" tal:content="context/Title">name</span>\n@@ -38,40 +33,31 @@\n    </header>\n \n   <div id="rules-editor">\n-    <div class="portalMessage info">\n-      <span id="messagespan" style="display:none">\n-        &nbsp;\n-      </span>&nbsp;\n-    </div>\n \n-    <form id="saveform"\n-        tal:attributes="action string:${context/absolute_url}/@@model-edit-save"\n+    <form\n+        class="modeleditor__form"\n+        action="${context/absolute_url}/@@modeleditor"\n+        method="POST"\n         tal:define="authenticator context/@@authenticator/authenticator | nothing">\n+      \n       <input tal:replace="structure authenticator" />\n-      <input type="hidden" id="savesource" name="source" value="" />\n-      <div class="mb-3">\n-         <button class="btn btn-primary" type="submit" name="form.button.save" disabled="disabled" i18n:translate="">Save</button>\n \n-      </div>\n-    </form>\n+      <textarea\n+          name="source"\n+          class="modeleditor__source pat-code-editor"\n+          data-pat-code-editor="language: xml; theme: okaidia">${view/escaped_model_source}</textarea>\n \n-    <div id="modelEditor" tal:content="view/modelSource" />\n-  </div>\n+      <br />\n+      \n+      <button\n+          class="btn btn-primary"\n+          type="submit"\n+          name="form.button.save" \n+          i18n:translate="">Save</button>\n \n-  <tal:comment tal:condition="python:False">\n-      prefs_main_template doesn\'t have the head_javascript_slot\n-  </tal:comment>\n+    </form>\n \n-  <script src="++plone++static/components/ace-builds/src/ace.js"\n-      type="text/javascript"\n-      charset="utf-8"\n-      tal:attributes="src string:${portal_url}/++plone++static/components/ace-builds/src/ace.js"\n-      ></script>\n-  <script src="++resource++plone.schemaeditor/modeleditor.js"\n-      type="text/javascript"\n-      charset="utf-8"\n-      tal:attributes="src string:${portal_url}/++resource++plone.app.dexterity.modeleditor.js"\n-      ></script>\n+  </div>\n \n </tal:main-macro>\n </article>\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex c132a7a..0b6ab27 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -3,95 +3,103 @@\n from lxml import etree\n from plone.app.dexterity import _\n from plone.supermodel.parser import SupermodelParseError\n+from Products.CMFPlone.utils import safe_bytes\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import queryMultiAdapter\n \n-import json\n+import html\n import plone.supermodel\n \n \n-NAMESPACE = \'{http://namespaces.plone.org/supermodel/schema}\'\n+NAMESPACE = "{http://namespaces.plone.org/supermodel/schema}"\n \n \n class ModelEditorView(BrowserView):\n-    """Editor view.\n-    """\n+    """Editor view."""\n \n-    def modelSource(self):\n-        return self.context.fti.model_source\n+    @property\n+    def escaped_model_source(self):\n+        # Return the HTML escaped model source.\n+        return html.escape(self.model_source, False)\n \n+    @property\n+    def model_source(self):\n+        # Return modified source from textarea or the original FTI source.\n+        return self.request.form.get("source") or self.context.fti.model_source\n \n-def authorized(context, request):\n-    authenticator = queryMultiAdapter((context, request),\n-                                      name=u\'authenticator\')\n-    return authenticator and authenticator.verify()\n-\n-\n-class AjaxSaveHandler(BrowserView):\n-    """Handle AJAX save posts.\n-    """\n+    def authorized(self, context, request):\n+        authenticator = queryMultiAdapter((context, request), name=u"authenticator")\n+        return authenticator and authenticator.verify()\n \n     def __call__(self):\n-        """Handle AJAX save post.\n-        """\n+        """View and eventually save the form."""\n+\n+        save = "form.button.save" in self.request.form\n+        source = self.request.form.get("source")\n+        if save and source:\n \n-        if not authorized(self.context, self.request):\n-            raise Unauthorized\n+            # First, check for authenticator\n+            if not self.authorized(self.context, self.request):\n+                raise Unauthorized\n \n-        source = self.request.form.get(\'source\')\n-        if source:\n             # Is it valid XML?\n             # Some safety measures.\n             # We do not want to load entities, especially file:/// entities.\n             # Also discard processing instructions.\n+            #\n+            source = safe_bytes(source)\n             parser = etree.XMLParser(resolve_entities=False, remove_pis=True)\n             try:\n                 root = etree.fromstring(source, parser=parser)\n             except etree.XMLSyntaxError as e:\n-                return json.dumps({\n-                    \'success\': False,\n-                    \'message\': \'XMLSyntaxError: {0}\'.format(\n-                        safe_unicode(e.args[0])\n-                    )\n-                })\n+                IStatusMessage(self.request).addStatusMessage(\n+                    "XMLSyntaxError: {0}".format(html.escape(safe_unicode(e.args[0]))),\n+                    "error",\n+                )\n+                return super().__call__()\n \n             # a little more sanity checking, look at first two element levels\n-            if root.tag != NAMESPACE + \'model\':\n-                return json.dumps({\n-                    \'success\': False,\n-                    \'message\': _(u"Error: root tag must be \'model\'")\n-                })\n+            if root.tag != NAMESPACE + "model":\n+                IStatusMessage(self.request).addStatusMessage(\n+                    _(u"Error: root tag must be \'model\'"),\n+                    "error",\n+                )\n+                return super().__call__()\n+\n             for element in root.getchildren():\n-                if element.tag != NAMESPACE + \'schema\':\n-                    return json.dumps({\n-                        \'success\': False,\n-                        \'message\': _(\n-                            u"Error: all model elements must be \'schema\'"\n-                        )\n-                    })\n+                if element.tag != NAMESPACE + "schema":\n+                    IStatusMessage(self.request).addStatusMessage(\n+                        _(u"Error: all model elements must be \'schema\'"),\n+                        "error",\n+                    )\n+                    return super().__call__()\n \n             # can supermodel parse it?\n             # This is mainly good for catching bad dotted names.\n             try:\n-                plone.supermodel.loadString(source, policy=u\'dexterity\')\n+                plone.supermodel.loadString(source, policy=u"dexterity")\n             except SupermodelParseError as e:\n-                message = e.args[0].replace(\'\\n  File "<unknown>"\', \'\')\n-                return json.dumps({\n-                    \'success\': False,\n-                    \'message\': u\'SuperModelParseError: {0}\'.format(message)\n-                })\n+                message = e.args[0].replace(\'\\n  File "<unknown>"\', "")\n+                IStatusMessage(self.request).addStatusMessage(\n+                    u"SuperModelParseError: {0}".format(html.escape(message)),\n+                    "error",\n+                )\n+                return super().__call__()\n \n             # clean up formatting sins\n             source = etree.tostring(\n-                root,\n-                pretty_print=True,\n-                xml_declaration=True,\n-                encoding=\'utf8\'\n+                root, pretty_print=True, xml_declaration=True, encoding="utf8"\n             )\n-            # and save to FTI\n+\n+            # Save to FTI and also allow to clear the source\n             fti = self.context.fti\n             fti.manage_changeProperties(model_source=source)\n \n-            self.request.response.setHeader(\'Content-Type\', \'application/json\')\n-            return json.dumps({\'success\': True, \'message\': _(u\'Saved\')})\n+            IStatusMessage(self.request).addStatusMessage(\n+                _("Changes saved."),\n+                "info",\n+            )\n+\n+        return super().__call__()\ndiff --git a/plone/app/dexterity/browser/types_listing.js b/plone/app/dexterity/browser/types_listing.js\ndeleted file mode 100644\nindex 2e4d55a..0000000\n--- a/plone/app/dexterity/browser/types_listing.js\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-/* globals require, define */\n-require([\'jquery\', \'mockup-patterns-modal\'], function($, Modal) {\n-    \'use strict\';\n-\n-    $(\'.action\').css(\'display\', \'inline\');\n-\n-    // clone type form\n-    $(\'#crud-edit-form-buttons-clone\').click(function(e) {\n-        var selected = $(\'input[id$=-widgets-select-0]:checked\');\n-        if (selected.length === 1) {\n-            e.preventDefault();\n-            $(this).removeClass(\'submitting\');\n-            var type_link = $(\'a\', selected.closest(\'tr\'));\n-            var $el = $(\n-                \'<\' + \'a href="\' + type_link.attr(\'href\') + \'/@@clone"><\' + \'/a>\'\n-            ).appendTo(\'body\');\n-            var modal = new Modal($el, {\n-                actionOptions: {\n-                    displayInModal: false\n-                }\n-            });\n-            $el.click();\n-        }\n-    });\n-\n-    // delete type confirmation\n-    $(\'#crud-edit-form-buttons-delete\').click(function(e) {\n-        var items = 0,\n-            msg;\n-        $(\'td.count\').closest(\'tr\').has(\'input:checked\').each(function() {\n-            items += parseInt($(\'td.count .int-field\', this).html().trim());\n-        });\n-        if (items) {\n-            msg =\n-                \'WARNING: There are existing instances of these content types which will break.\\n\\nAre you sure you want to delete these types?\';\n-        } else {\n-            msg = \'Are you sure you want to delete these types?\';\n-        }\n-        if (!window.confirm(msg)) {\n-            $(this).removeClass(\'submitting\');\n-            e.preventDefault();\n-        }\n-    });\n-\n-    // set id from title\n-    $(\'body\').on(\'change\', \'#form-widgets-title\', function() {\n-        var id = $.plone_schemaeditor_normalize_string($(this).val());\n-        $(\'#form-widgets-id\').val(id);\n-    });\n-\n-});\ndiff --git a/plone/app/dexterity/browser/types_listing.pt b/plone/app/dexterity/browser/types_listing.pt\nindex d7bddb2..02866ce 100644\n--- a/plone/app/dexterity/browser/types_listing.pt\n+++ b/plone/app/dexterity/browser/types_listing.pt\n@@ -1,9 +1,5 @@\n <tal:root\n     i18n:domain="plone">\n-  <script type="text/javascript"\n-          tal:attributes="src context/++resource++schemaeditor.js"></script>\n-  <script type="text/javascript"\n-          tal:attributes="src context/++resource++plone.app.dexterity.types_listing.js"></script>\n \n   <div class="alert alert-info" role="alert"\n        tal:condition="view/status">\ndiff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py\nindex 9bf5eaa..ec1e980 100644\n--- a/plone/app/dexterity/testing.py\n+++ b/plone/app/dexterity/testing.py\n@@ -3,7 +3,7 @@\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.testing import z2\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n \n \n class DexterityFixture(PloneSandboxLayer):\n@@ -29,6 +29,6 @@ def setUpPloneSite(self, portal):\n     name=\'dexterity:Functional\'\n )\n DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(\n-    bases=(DEXTERITY_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(DEXTERITY_FIXTURE, WSGI_SERVER_FIXTURE),\n     name=\'dexterity:Acceptance\'\n )\ndiff --git a/plone/app/dexterity/tests/discussion.txt b/plone/app/dexterity/tests/discussion.txt\nindex 66a78e6..6b247cf 100644\n--- a/plone/app/dexterity/tests/discussion.txt\n+++ b/plone/app/dexterity/tests/discussion.txt\n@@ -18,7 +18,7 @@ Set up a test browser::\n     >>> from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD, setRoles\n     >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n     >>> import transaction; transaction.commit()\n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> browser = Browser(layer[\'app\'])\n     >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n \ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex f740fe9..1498a67 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -10,7 +10,7 @@ To demonstrate this, we\'ll need a logged in test browser::\n   >>> portal = layer[\'portal\']\n   >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n   >>> import transaction; transaction.commit()\n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.handleErrors = False\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n@@ -155,11 +155,8 @@ still test the Zope side.\n \n Get some tools::\n \n-  >>> try:\n-  ...     from html import escape\n-  ... except ImportError:\n-  ...     from cgi import escape\n-  >>> from six.moves.urllib.parse import quote_plus\n+  >>> from html import escape\n+  >>> from urllib.parse import quote_plus\n \n We should be able to navigate to the modeleditor view by clicking a\n button on the field list form::\n@@ -169,83 +166,70 @@ button on the field list form::\n   >>> browser.url\n   \'http://nohost/plone/dexterity-types/plonista/@@modeleditor\'\n \n-We should be telling the browser to load our keys resources::\n-\n-  >>> browser.contents\n-  \'...<script...src="http://nohost/plone/++plone++static/components/ace-builds/src/ace.js"...\'\n-\n-  >>> browser.contents\n-  \'...<script...src="http://nohost/plone/++resource++plone.app.dexterity.modeleditor.js"...\'\n-\n-Both of those should be available::\n-\n-  browser.open(\'http://nohost/plone/++plone++static/components/ace-builds/src/ace.js\')\n-  browser.open(\'http://nohost/plone/++resource++plone.app.dexterity.modeleditor.js\')\n-\n-Return to our view and find the XML model source in a div, ready for the Ace editor::\n+Go there and find the XML model source in a textarea, ready to be edited\n+(with JavaScript enabled, this should show pat-code-editor instead of the textarea)::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor\')\n-  >>> \'<div id="modelEditor">\' in browser.contents\n+  >>> \'<textarea name="source"\' in browser.contents\n   True\n \n-  >>> \'&lt;schema&gt;\' in browser.contents\n+  >>> \'&amp;lt;schema&amp;gt;\' in browser.contents\n   True\n \n   >>> model_source = portal.portal_types.plonista.model_source\n   >>> escaped_model_source = escape(model_source, quote=False)\n-  >>> escaped_model_source in browser.contents\n+  >>> again_escaped_model_source = escape(escaped_model_source, quote=False)\n+  >>> again_escaped_model_source in browser.contents\n   True\n \n There should be an authenticator in the `save` form::\n \n   >>> authenticator = browser.getControl(name="_authenticator", index=0).value\n \n-Save is via AJAX. Let\'s check the save view\'s functionality.\n+\n \n First, prove this won\'t work without an authenticator\n \n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something\')\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=something\')\n   Traceback (most recent call last):\n   ...\n   AccessControl.unauthorized.Unauthorized: ...\n \n Check rejection of bad XML "something"::\n \n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something&_authenticator=%s\' % authenticator)\n-  >>> import json\n-  >>> result = json.loads(browser.contents)\n-  >>> u"XMLSyntaxError: Start tag expected" in result[\'message\']\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=something&_authenticator=%s\' % authenticator)\n+  >>> u"statusmessage-error" in browser.contents\n+  True\n+  >>> u"XMLSyntaxError: Start tag expected" in browser.contents\n   True\n \n We should refuse source that doesn\'t have `model` for the root tag::\n \n   >>> bad_source = model_source.replace(\'model\', \'mode\')\n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> from pprint import pprint\n-  >>> result = json.loads(browser.contents)\n-  >>> u"Error: root tag must be \'model\'" in result[\'message\']\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n+  >>> u"statusmessage-error" in browser.contents\n+  True\n+  >>> u"Error: root tag must be \'model\'" in browser.contents\n   True\n \n Likewise, only `schema` tags are allowed inside the model::\n \n   >>> bad_source = model_source.replace(\'schema>\', \'scheme>\')\n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> result = json.loads(browser.contents)\n-  >>> u"Error: all model elements must be \'schema\'" in result[\'message\']\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n+  >>> u"statusmessage-error" in browser.contents\n+  True\n+  >>> u"Error: all model elements must be \'schema\'" in browser.contents\n   True\n \n Should work with real XML\n \n ::\n \n-  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n-  >>> pprint(json.loads(browser.contents))\n-  {\'message\': \'Saved\', \'success\': True}\n-\n-That response should have a JSON content type::\n-\n-  >>> browser.headers[\'content-type\']\n-  \'application/json\'\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n \n We should be providing a link back to the fields editor::\n \ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex c4a959e..43cb573 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -9,7 +9,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.fti import DexterityFTI\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from zope.interface.exceptions import Invalid\n'

