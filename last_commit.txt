Repository: plone.app.event


Branch: refs/heads/master
Date: 2023-03-30T12:36:31+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.event/commit/c552a3e01271f7401ee4a8e42358666fb862d2c9

Fix date display for recurring `open_end` events and multi day `whole_day` events (#370)

Files changed:
A news/362.bugfix
M plone/app/event/recurrence.py

b'diff --git a/news/362.bugfix b/news/362.bugfix\nnew file mode 100644\nindex 00000000..9321de11\n--- /dev/null\n+++ b/news/362.bugfix\n@@ -0,0 +1,2 @@\n+Fix date display for recurring `open_end` events and multi day `whole_day` events by correcting duration.\n+[ksuess, petschki]\ndiff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py\nindex d6bfc216..2311a9a6 100644\n--- a/plone/app/event/recurrence.py\n+++ b/plone/app/event/recurrence.py\n@@ -1,5 +1,6 @@\n from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n+from plone.app.event.base import dt_end_of_day\n from plone.app.event.base import dt_start_of_day\n from plone.app.event.base import guess_date_from\n from plone.base.utils import safe_text\n@@ -18,8 +19,6 @@\n from zope.publisher.interfaces.browser import IBrowserRequest\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-import datetime\n-\n \n @adapter(IEventRecurrence)\n @implementer(IRecurrenceSupport)\n@@ -62,11 +61,14 @@ def occurrences(self, range_start=None, range_end=None):\n         # We get event ends by adding a duration to the start. This way, we\n         # prevent that the start and end lists are of different size if an\n         # event starts before range_start but ends afterwards.\n-        if getattr(event, "whole_day", None) or getattr(event, "open_end", None):\n-            duration = datetime.timedelta(hours=23, minutes=59, seconds=59)\n+        if getattr(event, "open_end", None):\n+            event_end = dt_end_of_day(event_start)\n+        elif getattr(event, "whole_day", None):\n+            event_end = dt_end_of_day(getattr(self.context, "end", None))\n         else:\n             event_end = getattr(self.context, "end", None)\n-            duration = event_end - event_start\n+\n+        duration = event_end - event_start\n \n         starts = recurrence_sequence_ical(\n             event_start,\n'

