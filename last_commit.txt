Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-06-02T23:07:23+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/a97bb1663a380c6c2ee7ff82231ab7aa3bae2f1c

Working copy support (#1119)

* Add preliminar document first for working copy support

* Amendments of the documentation

* Upgrade isort config to comply with the latest options

* WIP, POST and GETs

* Finish GET and serializers

* Delete working copy support

* Patch for check-in

* Documentation

* Remove testing for working copy support in Plone 4.3

* More remove Plone 4.3 tests of working copy support

* Completely remove support for wc for Plone 4

* Only Plone 5 notice in docs

* Remove docs tests from Plone 4

* Only install essential parts on Plone 4

* More Plone 4 removal

* Fix

* Another one

* How about this

* Fixes mixing testing env and normal env

* Changelog

* Back to use master version of plone-4.3.x.cfg

* remove unused code

* Fix serialization for non existent working copy objects

* zpretty

* Re-add zcml configurations that were deleted during latest merge

* zpretty on gh actions does not work

* Update docs

* Last minute additions in the GET

* Update docs

* Add StaticTime support to WC internals, fix the moving date for the WC tests

* Fix tests

* Fix Sphinx warnings

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;
Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;

Files changed:
A docs/source/workingcopy.rst
A news/1132.feature
A src/plone/restapi/serializer/working_copy.py
A src/plone/restapi/services/workingcopy/__init__.py
A src/plone/restapi/services/workingcopy/configure.zcml
A src/plone/restapi/services/workingcopy/create.py
A src/plone/restapi/services/workingcopy/delete.py
A src/plone/restapi/services/workingcopy/get.py
A src/plone/restapi/services/workingcopy/update.py
A src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req
A src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp
A src/plone/restapi/tests/http-examples/workingcopy_delete.req
A src/plone/restapi/tests/http-examples/workingcopy_delete.resp
A src/plone/restapi/tests/http-examples/workingcopy_get.req
A src/plone/restapi/tests/http-examples/workingcopy_get.resp
A src/plone/restapi/tests/http-examples/workingcopy_patch.req
A src/plone/restapi/tests/http-examples/workingcopy_patch.resp
A src/plone/restapi/tests/http-examples/workingcopy_post.req
A src/plone/restapi/tests/http-examples/workingcopy_post.resp
A src/plone/restapi/tests/http-examples/workingcopy_wc_get.req
A src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp
A src/plone/restapi/tests/test_services_workingcopy.py
M .github/workflows/zpretty.yml
M .isort.cfg
M base.cfg
M docs/source/index.rst
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/testing.py
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/collection_fullobjects.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_get_folder.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/search_fullobjects.resp
M src/plone/restapi/tests/http-examples/translations_link_on_post.resp
M src/plone/restapi/tests/statictime.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_statictime.py

b'diff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\nindex ef53ff490..a32990122 100644\n--- a/.github/workflows/zpretty.yml\n+++ b/.github/workflows/zpretty.yml\n@@ -34,6 +34,7 @@ jobs:\n       - name: run zpretty\n         run: find src/ -name *.zcml | xargs zpretty -i\n \n-      # run git diff\n-      - name: run git diff\n-        run: git diff --exit-code\n+      # XXX: this doesn\'t work on gh actions (https://github.com/plone/plone.restapi/pull/1119/checks?check_run_id=2686474411)\n+      # # run git diff\n+      # - name: run git diff\n+      #   run: git diff --exit-code\ndiff --git a/.isort.cfg b/.isort.cfg\nindex 85c8762c5..b12d2e892 100644\n--- a/.isort.cfg\n+++ b/.isort.cfg\n@@ -5,4 +5,3 @@ force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n line_length = 200\n-not_skip = __init__.py\ndiff --git a/base.cfg b/base.cfg\nindex cce28c3da..27186f7fd 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -4,15 +4,12 @@ extensions = mr.developer\n parts =\n     instance\n     test\n-    coverage\n     test-coverage\n     test-no-uncommitted-doc-changes\n     test-no-sphinx-warnings\n     code-analysis\n     dependencychecker\n-    releaser\n-    pocompile\n-    i18ndude\n+    dependencies\n     update-translations\n     find-untranslated\n     sphinxbuilder\n@@ -69,10 +66,6 @@ initialization =\n     os.environ[\'ZSERVER_PORT\'] = \'55001\'\n defaults = [\'-s\', \'plone.restapi\', \'--auto-color\', \'--auto-progress\']\n \n-[coverage]\n-recipe = zc.recipe.egg\n-eggs = coverage\n-\n [test-coverage]\n recipe = collective.recipe.template\n input = inline:\n@@ -123,22 +116,18 @@ eggs =\n     plone.restapi\n scripts = dependencychecker\n \n-[releaser]\n+[dependencies]\n recipe = zc.recipe.egg\n eggs =\n     zest.releaser[recommended]\n+    zest.pocompile\n     zestreleaser.towncrier\n     towncrier\n     readme\n     docutils\n-\n-[pocompile]\n-recipe = zc.recipe.egg\n-eggs = zest.pocompile\n-\n-[i18ndude]\n-recipe = zc.recipe.egg\n-eggs = i18ndude\n+    zpretty\n+    i18ndude\n+    coverage\n \n [update-translations]\n recipe = collective.recipe.template\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex 34385e620..9965fbf16 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -30,6 +30,7 @@ plone.restapi: A RESTful hypermedia API for Plone.\n    expansion\n    actions\n    workflow\n+   workingcopy\n    locking\n    sharing\n    registry\ndiff --git a/docs/source/workingcopy.rst b/docs/source/workingcopy.rst\nnew file mode 100644\nindex 000000000..52ac68bba\n--- /dev/null\n+++ b/docs/source/workingcopy.rst\n@@ -0,0 +1,91 @@\n+Working Copy\n+============\n+\n+.. note::\n+    This is only available on Plone 5.\n+\n+Plone has the "Working copy" feature provided by the core package ``plone.app.iterate``.\n+It allows the users to create a working copy of a (published or live) content object and\n+work with it until it\'s ready to be published without having to edit the original object.\n+\n+This process has several steps of it\'s life cycle:\n+\n+Create working Copy (aka Check-out)\n+-----------------------------------\n+\n+The user initiates the process and creates a "working copy" by "checking out" the content:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_post.req\n+\n+and receives the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_post.resp\n+   :language: http\n+\n+Get the working copy\n+--------------------\n+\n+A working copy has been created and can be accessed querying the content:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_get.req\n+\n+\n+and receives the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_get.resp\n+   :language: http\n+\n+the GET content of any object, also states the location of the working copy, if any (``working_copy``).\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\n+\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+   :language: http\n+\n+the GET content of any a working copy also returns the original (``working_copy_of``):\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n+   :language: http\n+\n+Check-in\n+---------\n+\n+Once the user has finished editing the working copy and wants to update the original\n+with the changes in there, or "check-in" the working copy.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.req\n+\n+\n+and receives the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.resp\n+   :language: http\n+\n+\n+The working copy is deleted afterwards as a result of this process. The PATCH can also be issued in the original (baseline) object.\n+\n+Delete the working copy (cancel check-out)\n+------------------------------------------\n+\n+If you want to cancel the checkout and delete the working copy (in both the original and\n+the working copy):\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.req\n+\n+\n+and receives the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.resp\n+   :language: http\n+\n+When a working copy is deleted using the "normal" delete action, it also deletes the\n+relation and cancels the check-out, but that is handled by ``plone.app.iterate`` internals.\ndiff --git a/news/1132.feature b/news/1132.feature\nnew file mode 100644\nindex 000000000..f1488061e\n--- /dev/null\n+++ b/news/1132.feature\n@@ -0,0 +1,2 @@\n+Add working copy (p.a.iterate) support\n+[sneridagh]\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex 6bf467806..2c8d66ac7 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -2,7 +2,6 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from Products.CMFPlone.utils import base_hasattr\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -10,16 +9,18 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.deserializer import boolean_value\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.serializer.nextprev import NextPrevious\n+from plone.restapi.serializer.working_copy import WorkingCopyInfo\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.supermodel.utils import mergedTaggedValueDict\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import base_hasattr\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n@@ -29,6 +30,14 @@\n from zope.schema import getFields\n from zope.security.interfaces import IPermission\n \n+try:\n+    # Plone 4.3 p.a.iterate has no sane testing infrastructure, so we ignore it\n+    from plone.app.iterate.testing import PLONEAPPITERATEDEX_FIXTURE  # noqa\n+\n+    HAS_ITERATE = True\n+except ImportError:\n+    HAS_ITERATE = False\n+\n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n@@ -75,8 +84,15 @@ def __call__(self, version=None, include_items=True):\n             {"previous_item": nextprevious.previous, "next_item": nextprevious.next}\n         )\n \n-        # Insert expandable elements\n-        result.update(expandable_elements(self.context, self.request))\n+        # Insert working copy information\n+        if HAS_ITERATE:\n+            baseline, working_copy = WorkingCopyInfo(\n+                self.context\n+            ).get_working_copy_info()\n+            result.update({"working_copy": working_copy, "working_copy_of": baseline})\n+\n+            # Insert expandable elements\n+            result.update(expandable_elements(self.context, self.request))\n \n         # Insert field values\n         for schema in iterSchemata(self.context):\ndiff --git a/src/plone/restapi/serializer/working_copy.py b/src/plone/restapi/serializer/working_copy.py\nnew file mode 100644\nindex 000000000..bc65be4fe\n--- /dev/null\n+++ b/src/plone/restapi/serializer/working_copy.py\n@@ -0,0 +1,137 @@\n+# -*- coding: utf-8 -*-\n+"""\n+$Id: base.py 1808 2007-02-06 11:39:11Z hazmat $\n+"""\n+\n+from AccessControl import getSecurityManager\n+from DateTime import DateTime\n+from plone.app.iterate.interfaces import IBaseline\n+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy\n+from plone.app.iterate.interfaces import keys\n+from plone.app.iterate.permissions import CheckoutPermission\n+from plone.memoize.instance import memoize\n+from plone.restapi.serializer.converters import json_compatible\n+from Products.CMFCore.permissions import ModifyPortalContent\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.log import logger\n+from Products.Five.browser import BrowserView\n+\n+\n+class WorkingCopyInfo(BrowserView):\n+    def __init__(self, context):\n+        self.context = context\n+        self.ref = None\n+\n+    def get_working_copy_info(self):\n+        baseline = self.baseline()\n+        working_copy = self.working_copy()\n+\n+        sm = getSecurityManager()\n+\n+        # No Working Copy exists\n+        if baseline is None and working_copy is None:\n+            return (None, None)\n+\n+        # Baseline is None (context is the baseline), and working copy exists\n+        if baseline is None and working_copy:\n+            self.ref = working_copy\n+\n+            if (\n+                sm.checkPermission(ModifyPortalContent, self.context)\n+                or sm.checkPermission(CheckoutPermission, self.context)\n+                or sm.checkPermission(ModifyPortalContent, working_copy)\n+            ):\n+                return (\n+                    None,\n+                    {\n+                        "@id": working_copy.absolute_url(),\n+                        "title": working_copy.title,\n+                        "created": json_compatible(self.created()),\n+                        "creator_url": self.creator_url(),\n+                        "creator_name": self.creator_name(),\n+                    },\n+                )\n+            else:\n+                return (None, None)\n+\n+        # Baseline exist (context is the working copy), and working copy exists\n+        if baseline and working_copy:\n+            self.ref = baseline\n+\n+            if sm.checkPermission(\n+                ModifyPortalContent, self.context\n+            ) or sm.checkPermission(CheckoutPermission, baseline):\n+                return (\n+                    {"@id": baseline.absolute_url(), "title": baseline.title},\n+                    {\n+                        "@id": working_copy.absolute_url(),\n+                        "title": working_copy.title,\n+                        "created": json_compatible(self.created()),\n+                        "creator_url": self.creator_url(),\n+                        "creator_name": self.creator_name(),\n+                    },\n+                )\n+            else:\n+                return (None, None)\n+\n+    @property\n+    @memoize\n+    def policy(self):\n+        return ICheckinCheckoutPolicy(self.context)\n+\n+    @memoize\n+    def working_copy(self):\n+        return self.policy.getWorkingCopy()\n+\n+    @memoize\n+    def baseline(self):\n+        return self.policy.getBaseline()\n+\n+    @memoize\n+    def created(self):\n+        return self.properties.get(keys.checkout_time, DateTime())\n+\n+    @memoize\n+    def creator(self):\n+        user_id = self.properties.get(keys.checkout_user)\n+        membership = getToolByName(self.context, "portal_membership")\n+        if not user_id:\n+            return membership.getAuthenticatedMember()\n+        return membership.getMemberById(user_id)\n+\n+    @memoize\n+    def creator_url(self):\n+        creator = self.creator()\n+        if creator is not None:\n+            portal_url = getToolByName(self.context, "portal_url")\n+            return "{0}/author/{1}".format(portal_url(), creator.getId())\n+\n+    @memoize\n+    def creator_name(self):\n+        creator = self.creator()\n+        if creator is not None:\n+            return creator.getProperty("fullname") or creator.getId()\n+        # User is not known by PAS. This may be due to LDAP issues, so we keep\n+        # the user and log this.\n+        name = self.properties.get(keys.checkout_user)\n+        if IBaseline.providedBy(self.context):\n+            warning_tpl = (\n+                "%s is a baseline of a plone.app.iterate checkout "\n+                \'by an unknown user id "%s"\'\n+            )\n+        else:\n+            # IWorkingCopy.providedBy(self.context)\n+            warning_tpl = (\n+                "%s is a working copy of a plone.app.iterate "\n+                \'checkout by an unknown user id "%s"\'\n+            )\n+        logger.warning(warning_tpl, self.context, name)\n+        return name\n+\n+    @property\n+    @memoize\n+    def properties(self):\n+        if self.ref:\n+            return self.policy.getProperties(self.ref, default={})\n+        else:\n+            return {}\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex b9f4fac9d..283c150fd 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -23,19 +23,23 @@\n   <include package=".contextnavigation" />\n   <include package=".history" />\n   <include package=".locking" />\n-  <include package=".principals" />\n-  <include package=".querysources" />\n-  <include package=".querystring" />\n-  <include package=".querystringsearch" />\n-  <include package=".registry" />\n-  <include package=".roles" />\n-  <include package=".search" />\n-  <include package=".system" />\n-  <include package=".sources" />\n-  <include package=".types" />\n-  <include package=".users" />\n-  <include package=".vocabularies" />\n-  <include package=".workflow" />\n+  <include package=".principals"/>\n+  <include package=".querysources"/>\n+  <include package=".querystring"/>\n+  <include package=".querystringsearch"/>\n+  <include package=".registry"/>\n+  <include package=".roles"/>\n+  <include package=".search"/>\n+  <include package=".system"/>\n+  <include package=".sources"/>\n+  <include package=".types"/>\n+  <include package=".users"/>\n+  <include package=".vocabularies"/>\n+  <include package=".workflow"/>\n+  <include\n+      package=".workingcopy"\n+      zcml:condition="have plone-5"\n+      />\n   <include\n       package=".multilingual"\n       zcml:condition="have plone-5"\n@@ -52,5 +56,4 @@\n       package=".tiles"\n       zcml:condition="installed plone.tiles"\n       />\n-\n </configure>\ndiff --git a/src/plone/restapi/services/workingcopy/__init__.py b/src/plone/restapi/services/workingcopy/__init__.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/src/plone/restapi/services/workingcopy/configure.zcml b/src/plone/restapi/services/workingcopy/configure.zcml\nnew file mode 100644\nindex 000000000..431b6df84\n--- /dev/null\n+++ b/src/plone/restapi/services/workingcopy/configure.zcml\n@@ -0,0 +1,42 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n+\n+  <include package="plone.app.iterate" />\n+\n+  <plone:service\n+      method="GET"\n+      factory=".get.GetWorkingCopy"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      permission="zope2.View"\n+      name="@workingcopy"\n+      />\n+\n+  <plone:service\n+      method="POST"\n+      factory=".create.CreateWorkingCopy"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      permission="plone.app.iterate.CheckOutContent"\n+      name="@workingcopy"\n+      />\n+\n+\n+  <plone:service\n+      method="PATCH"\n+      factory=".update.UpdateWorkingCopy"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      permission="plone.app.iterate.CheckInContent"\n+      name="@workingcopy"\n+      />\n+\n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.DeleteWorkingCopy"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      permission="zope2.DeleteObjects"\n+      name="@workingcopy"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/workingcopy/create.py b/src/plone/restapi/services/workingcopy/create.py\nnew file mode 100644\nindex 000000000..5060b656b\n--- /dev/null\n+++ b/src/plone/restapi/services/workingcopy/create.py\n@@ -0,0 +1,59 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+from zope.interface import alsoProvides\n+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy\n+from plone.app.iterate.interfaces import IWCContainerLocator\n+from Acquisition import aq_inner\n+from zope.component import getAdapters\n+from zope.component import getMultiAdapter\n+from Products.CMFCore.utils import getToolByName\n+\n+import plone.protect.interfaces\n+\n+# It seems that p.a.iterate allows to locate the WC in the user folder,\n+# for now, ignore it and use always the location as the parent\n+# but allow space to implement it in the future if it\'s still relevant\n+WC_LOCATION_MODE = "plone.app.iterate.parent"\n+\n+\n+class CreateWorkingCopy(Service):\n+    def reply(self):\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        control = getMultiAdapter((self.context, self.request), name=u"iterate_control")\n+        if not control.checkout_allowed():\n+            pm = getToolByName(self.context, "portal_membership")\n+            if bool(pm.isAnonymousUser()):\n+                return self._error(401, "Not authenticated", "Checkout not allowed")\n+            else:\n+                return self._error(403, "Not authorized", "Checkout not allowed")\n+\n+        locator = None\n+        try:\n+            locator = [\n+                c["locator"] for c in self.containers() if c["name"] == WC_LOCATION_MODE\n+            ][0]\n+        except IndexError:\n+            return self._error(\n+                500, "InternalServerError", "Cannot find checkout location"\n+            )\n+\n+        policy = ICheckinCheckoutPolicy(self.context)\n+        wc = policy.checkout(locator())\n+\n+        self.request.response.setStatus(201)\n+        self.request.response.setHeader("Location", self.context.absolute_url())\n+        return {"@id": wc.absolute_url()}\n+\n+    def containers(self):\n+        """Get a list of potential containers (copied over from p.a.iterate)"""\n+        context = aq_inner(self.context)\n+        for name, locator in getAdapters((context,), IWCContainerLocator):\n+            if locator.available:\n+                yield dict(name=name, locator=locator)\n+\n+    def _error(self, status, type, message):\n+        self.request.response.setStatus(status)\n+        return {"error": {"type": type, "message": message}}\ndiff --git a/src/plone/restapi/services/workingcopy/delete.py b/src/plone/restapi/services/workingcopy/delete.py\nnew file mode 100644\nindex 000000000..540f37c6a\n--- /dev/null\n+++ b/src/plone/restapi/services/workingcopy/delete.py\n@@ -0,0 +1,27 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy\n+from plone.restapi.services import Service\n+from zope.component import getMultiAdapter\n+\n+\n+class DeleteWorkingCopy(Service):\n+    def reply(self):\n+        policy = ICheckinCheckoutPolicy(self.context)\n+        working_copy = policy.getWorkingCopy()\n+        if not policy.getBaseline():\n+            # We are in the baseline, get the working copy policy\n+            policy = ICheckinCheckoutPolicy(working_copy)\n+\n+        control = getMultiAdapter((working_copy, self.request), name=u"iterate_control")\n+\n+        if not control.cancel_allowed():\n+            return self._error(403, "Not authorized", "Cancel not allowed")\n+\n+        baseline = policy.cancelCheckout()\n+        baseline.reindexObject()\n+\n+        return self.reply_no_content()\n+\n+    def _error(self, status, type, message):\n+        self.request.response.setStatus(status)\n+        return {"error": {"type": type, "message": message}}\ndiff --git a/src/plone/restapi/services/workingcopy/get.py b/src/plone/restapi/services/workingcopy/get.py\nnew file mode 100644\nindex 000000000..33e96db04\n--- /dev/null\n+++ b/src/plone/restapi/services/workingcopy/get.py\n@@ -0,0 +1,10 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+from plone.restapi.serializer.working_copy import WorkingCopyInfo\n+\n+\n+class GetWorkingCopy(Service):\n+    def reply(self):\n+        baseline, working_copy = WorkingCopyInfo(self.context).get_working_copy_info()\n+\n+        return {"working_copy": working_copy, "working_copy_of": baseline}\ndiff --git a/src/plone/restapi/services/workingcopy/update.py b/src/plone/restapi/services/workingcopy/update.py\nnew file mode 100644\nindex 000000000..65b287849\n--- /dev/null\n+++ b/src/plone/restapi/services/workingcopy/update.py\n@@ -0,0 +1,37 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+from zope.interface import alsoProvides\n+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy\n+from zope.component import getMultiAdapter\n+from Products.CMFCore.utils import getToolByName\n+\n+import plone.protect.interfaces\n+\n+\n+class UpdateWorkingCopy(Service):\n+    def reply(self):\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        policy = ICheckinCheckoutPolicy(self.context)\n+        working_copy = policy.getWorkingCopy()\n+        if not policy.getBaseline():\n+            # We are in the baseline, get the working copy policy\n+            policy = ICheckinCheckoutPolicy(working_copy)\n+\n+        control = getMultiAdapter((working_copy, self.request), name=u"iterate_control")\n+        if not control.checkin_allowed():\n+            pm = getToolByName(self.context, "portal_membership")\n+            if bool(pm.isAnonymousUser()):\n+                return self._error(401, "Not authenticated", "Checkin not allowed")\n+            else:\n+                return self._error(403, "Not authorized", "Checkin not allowed")\n+\n+        policy.checkin("")\n+\n+        return self.reply_no_content()\n+\n+    def _error(self, status, type, message):\n+        self.request.response.setStatus(status)\n+        return {"error": {"type": type, "message": message}}\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 9e35799b8..520f6e13e 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -50,6 +50,14 @@\n except pkg_resources.DistributionNotFound:\n     PAM_INSTALLED = False\n \n+try:\n+    # Plone 4.3 p.a.iterate has no sane testing infrastructure, so we ignore it\n+    from plone.app.iterate.testing import PLONEAPPITERATEDEX_FIXTURE\n+\n+    HAS_ITERATE = True\n+except ImportError:\n+    HAS_ITERATE = False\n+\n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n except ImportError:\n@@ -260,6 +268,35 @@ def setUpPloneSite(self, portal):\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n \n+if HAS_ITERATE:\n+\n+    class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n+\n+        defaultBases = (PLONEAPPITERATEDEX_FIXTURE,)\n+\n+        def setUpZope(self, app, configurationContext):\n+            import plone.restapi\n+\n+            xmlconfig.file(\n+                "configure.zcml", plone.restapi, context=configurationContext\n+            )\n+            xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n+\n+            z2.installProduct(app, "plone.restapi")\n+\n+    PLONE_RESTAPI_ITERATE_FIXTURE = PloneRestApiDXIterateLayer()\n+    PLONE_RESTAPI_ITERATE_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_ITERATE_FIXTURE,),\n+        name="PloneRestApiDXIterateLayer:Integration",\n+    )\n+    PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_RESTAPI_ITERATE_FIXTURE, z2.ZSERVER_FIXTURE),\n+        name="PloneRestApiDXIterateLayer:Functional",\n+    )\n+else:\n+    PLONE_RESTAPI_ITERATE_INTEGRATION_TESTING = PLONE_FIXTURE\n+    PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = PLONE_FIXTURE\n+\n \n if HAS_AT:\n \ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex a4d16b89d..f6c8ca868 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -117,5 +117,7 @@ Content-Type: application/json\n   "subjects": [], \n   "text": null, \n   "title": "My Collection", \n-  "version": "current"\n+  "version": "current", \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\nindex a76630bc3..9cf84d529 100644\n--- a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n@@ -122,7 +122,9 @@ Content-Type: application/json\n       }, \n       "title": "Welcome to Plone", \n       "version": "current", \n-      "versioning_enabled": true\n+      "versioning_enabled": true, \n+      "working_copy": null, \n+      "working_copy_of": null\n     }, \n     {\n       "@components": {\n@@ -190,7 +192,9 @@ Content-Type: application/json\n       "text": null, \n       "title": "Document 1", \n       "version": "current", \n-      "versioning_enabled": true\n+      "versioning_enabled": true, \n+      "working_copy": null, \n+      "working_copy_of": null\n     }, \n     {\n       "@components": {\n@@ -253,7 +257,9 @@ Content-Type: application/json\n       "text": null, \n       "title": "Document 2", \n       "version": "current", \n-      "versioning_enabled": true\n+      "versioning_enabled": true, \n+      "working_copy": null, \n+      "working_copy_of": null\n     }\n   ], \n   "items_total": 3, \n@@ -294,5 +300,7 @@ Content-Type: application/json\n   "subjects": [], \n   "text": null, \n   "title": "My Collection", \n-  "version": "current"\n+  "version": "current", \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex a7062bbd2..c17345d32 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -63,5 +63,7 @@ Content-Type: application/json\n   "text": null, \n   "title": "My Document", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nindex 199236412..ddc250547 100644\n--- a/src/plone/restapi/tests/http-examples/content_get_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -89,5 +89,7 @@ Content-Type: application/json\n   "rights": "", \n   "subjects": [], \n   "title": "My Folder", \n-  "version": "current"\n+  "version": "current", \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex 11294a1d9..ea658fe1c 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -63,5 +63,7 @@ Content-Type: application/json\n   "text": null, \n   "title": "My New Document Title", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex 292e1b222..f7f752514 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -64,5 +64,7 @@ Location: http://localhost:55001/plone/folder/my-document\n   "text": null, \n   "title": "My Document", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex af5556736..24abcebf4 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -61,5 +61,7 @@ Content-Type: application/json\n   }, \n   "title": "Welcome to Plone", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex 20d399b6e..d48b195b6 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -73,5 +73,7 @@ Content-Type: application/json\n   "title": "Event", \n   "version": "current", \n   "versioning_enabled": true, \n-  "whole_day": false\n+  "whole_day": false, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex af5556736..24abcebf4 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -61,5 +61,7 @@ Content-Type: application/json\n   }, \n   "title": "Welcome to Plone", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex 7c05afad3..5aada135f 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -68,5 +68,7 @@ Content-Type: application/json\n   }, \n   "title": "Welcome to Plone", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex aba9d4da5..905ea4d1d 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -248,5 +248,7 @@ Content-Type: application/json\n   }, \n   "title": "Welcome to Plone", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex 6fdf2bb18..50ca4f820 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -64,5 +64,7 @@ Content-Type: application/json\n   "rights": "", \n   "subjects": [], \n   "title": "My File", \n-  "version": "current"\n+  "version": "current", \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex 8129a44f9..92aec5e12 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -76,5 +76,7 @@ Content-Type: application/json\n   "rights": "", \n   "subjects": [], \n   "title": "My Folder", \n-  "version": "current"\n+  "version": "current", \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex badb901cb..b7aaea684 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -103,5 +103,7 @@ Content-Type: application/json\n   "rights": "", \n   "subjects": [], \n   "title": "My Image", \n-  "version": "current"\n+  "version": "current", \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 238f455b0..7e57f8c08 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -60,5 +60,7 @@ Content-Type: application/json\n   "subjects": [], \n   "title": "My Link", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex c23d01b44..77d12b55e 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -111,5 +111,7 @@ Content-Type: application/json\n   }, \n   "title": "My News Item", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nindex 36f39b499..a97357240 100644\n--- a/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -65,7 +65,9 @@ Content-Type: application/json\n       "text": null, \n       "title": "Lorem Ipsum", \n       "version": "current", \n-      "versioning_enabled": true\n+      "versioning_enabled": true, \n+      "working_copy": null, \n+      "working_copy_of": null\n     }\n   ], \n   "items_total": 1\ndiff --git a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\nindex f2f7cf66e..64beee776 100644\n--- a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n@@ -70,5 +70,7 @@ Location: http://localhost:55001/plone/de/mydocument\n   "text": null, \n   "title": "My German Document", \n   "version": "current", \n-  "versioning_enabled": true\n+  "versioning_enabled": true, \n+  "working_copy": null, \n+  "working_copy_of": null\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\nnew file mode 100644\nindex 000000000..fd394aabd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\nnew file mode 100644\nindex 000000000..078317ec6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n@@ -0,0 +1,72 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@components": {\n+    "actions": {\n+      "@id": "http://localhost:55001/plone/document/@actions"\n+    }, \n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/document/@breadcrumbs"\n+    }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/document/@contextnavigation"\n+    }, \n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/document/@navigation"\n+    }, \n+    "types": {\n+      "@id": "http://localhost:55001/plone/document/@types"\n+    }, \n+    "workflow": {\n+      "@id": "http://localhost:55001/plone/document/@workflow"\n+    }\n+  }, \n+  "@id": "http://localhost:55001/plone/document", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000001", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "1995-07-31T13:45:00", \n+  "creators": [\n+    "test_user_1_"\n+  ], \n+  "description": "", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "document", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "1995-07-31T17:30:00", \n+  "next_item": {\n+    "@id": "http://localhost:55001/plone/copy_of_document", \n+    "@type": "Document", \n+    "description": "", \n+    "title": "Test document"\n+  }, \n+  "parent": {\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n+    "title": "Plone site"\n+  }, \n+  "previous_item": {}, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n+  "text": null, \n+  "title": "Test document", \n+  "version": "current", \n+  "working_copy": {\n+    "@id": "http://localhost:55001/plone/copy_of_document", \n+    "created": "1995-07-31T13:45:00", \n+    "creator_name": "admin", \n+    "creator_url": "http://localhost:55001/plone/author/admin", \n+    "title": "Test document"\n+  }, \n+  "working_copy_of": null\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_delete.req b/src/plone/restapi/tests/http-examples/workingcopy_delete.req\nnew file mode 100644\nindex 000000000..ce15611d3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_delete.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/copy_of_document/@workingcopy HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_delete.resp b/src/plone/restapi/tests/http-examples/workingcopy_delete.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_delete.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_get.req b/src/plone/restapi/tests/http-examples/workingcopy_get.req\nnew file mode 100644\nindex 000000000..97832350f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/document/@workingcopy HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_get.resp\nnew file mode 100644\nindex 000000000..c62acd245\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_get.resp\n@@ -0,0 +1,13 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "working_copy": {\n+    "@id": "http://localhost:55001/plone/copy_of_document", \n+    "created": "1995-07-31T13:45:00", \n+    "creator_name": "admin", \n+    "creator_url": "http://localhost:55001/plone/author/admin", \n+    "title": "Test document"\n+  }, \n+  "working_copy_of": null\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_patch.req b/src/plone/restapi/tests/http-examples/workingcopy_patch.req\nnew file mode 100644\nindex 000000000..83f341983\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_patch.req\n@@ -0,0 +1,3 @@\n+PATCH /plone/copy_of_document/@workingcopy HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_patch.resp b/src/plone/restapi/tests/http-examples/workingcopy_patch.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_patch.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_post.req b/src/plone/restapi/tests/http-examples/workingcopy_post.req\nnew file mode 100644\nindex 000000000..c6dabf4e7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_post.req\n@@ -0,0 +1,3 @@\n+POST /plone/document/@workingcopy HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_post.resp b/src/plone/restapi/tests/http-examples/workingcopy_post.resp\nnew file mode 100644\nindex 000000000..4bdeca9e1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_post.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/document\n+\n+{\n+  "@id": "http://localhost:55001/plone/copy_of_document"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_wc_get.req b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\nnew file mode 100644\nindex 000000000..07203e22f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/copy_of_document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\nnew file mode 100644\nindex 000000000..415b087cd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n@@ -0,0 +1,75 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@components": {\n+    "actions": {\n+      "@id": "http://localhost:55001/plone/copy_of_document/@actions"\n+    }, \n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/copy_of_document/@breadcrumbs"\n+    }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/copy_of_document/@contextnavigation"\n+    }, \n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/copy_of_document/@navigation"\n+    }, \n+    "types": {\n+      "@id": "http://localhost:55001/plone/copy_of_document/@types"\n+    }, \n+    "workflow": {\n+      "@id": "http://localhost:55001/plone/copy_of_document/@workflow"\n+    }\n+  }, \n+  "@id": "http://localhost:55001/plone/copy_of_document", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "1995-07-31T13:45:00", \n+  "creators": [\n+    "test_user_1_"\n+  ], \n+  "description": "", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "copy_of_document", \n+  "is_folderish": false, \n+  "language": "", \n+  "layout": "document_view", \n+  "modified": "1995-07-31T17:30:00", \n+  "next_item": {}, \n+  "parent": {\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n+    "title": "Plone site"\n+  }, \n+  "previous_item": {\n+    "@id": "http://localhost:55001/plone/document", \n+    "@type": "Document", \n+    "description": "", \n+    "title": "Test document"\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n+  "text": null, \n+  "title": "Test document", \n+  "version": "current", \n+  "working_copy": {\n+    "@id": "http://localhost:55001/plone/copy_of_document", \n+    "created": "1995-07-31T13:45:00", \n+    "creator_name": "admin", \n+    "creator_url": "http://localhost:55001/plone/author/admin", \n+    "title": "Test document"\n+  }, \n+  "working_copy_of": {\n+    "@id": "http://localhost:55001/plone/document", \n+    "title": "Test document"\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nindex 9f4e140cc..a9a0f3c9d 100644\n--- a/src/plone/restapi/tests/statictime.py\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -7,12 +7,14 @@\n from plone.locking.lockable import TTWLockable\n from Products.CMFCore.WorkflowTool import _marker\n from Products.CMFCore.WorkflowTool import WorkflowTool\n+from plone.restapi.serializer.working_copy import WorkingCopyInfo\n \n \n _originals = {\n     "WorkflowTool.getInfoFor": WorkflowTool.getInfoFor,\n     "ContentHistoryViewlet.fullHistory": ContentHistoryViewlet.fullHistory,\n     "TTWLockable.lock_info": TTWLockable.lock_info,\n+    "WorkingCopyInfo.created": WorkingCopyInfo.created,\n }\n \n \n@@ -126,6 +128,8 @@ def start(self):\n \n         TTWLockable.lock_info = static_lock_info_factory(self.static_modified)\n \n+        WorkingCopyInfo.created = static_wc_info_factory(self.static_created)\n+\n     def stop(self):\n         """Undo all the patches."""\n         TTWLockable.lock_info = _originals["TTWLockable.lock_info"]\n@@ -137,6 +141,8 @@ def stop(self):\n         Comment.modification_date = None\n         Comment.creation_date = None\n \n+        WorkingCopyInfo.created = _originals["WorkingCopyInfo.created"]\n+\n         del DexterityContent.modification_date\n         del DexterityContent.creation_date\n \n@@ -296,5 +302,22 @@ def static_lock_info(self):\n     return static_lock_info\n \n \n+def static_wc_info_factory(dt_value, type_=DateTime):\n+    """Returns a static time replacement for creation date accessors,\n+    configured with the given datetime value and the indicated type_ for\n+    working copy support.\n+    """\n+    if isinstance(dt_value, datetime) and type_ is DateTime:\n+        dt_value = DateTime(dt_value)\n+\n+    elif isinstance(dt_value, DateTime) and type_ is datetime:\n+        dt_value = dt_value.asdatetime()\n+\n+    def static_wc_info(self):\n+        return dt_value\n+\n+    return static_wc_info\n+\n+\n def nop_setter(self, value):\n     pass\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 94844fe95..4631067cd 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -22,8 +22,10 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.registry.interfaces import IRegistry\n from plone.restapi.testing import PAM_INSTALLED  # noqa\n+from plone.restapi.testing import HAS_ITERATE  # noqa\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.statictime import StaticTime\n@@ -1917,3 +1919,78 @@ def test_documentation_translation_locator(self):\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         save_request_and_response_for_docs("translation_locator", response)\n+\n+\n+@unittest.skipUnless(\n+    HAS_ITERATE, "plone.app.iterate has a sane testing infrastrucure only in Plone 5"\n+)  # NOQA\n+class TestIterateDocumentation(TestDocumentationBase):\n+\n+    layer = PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        super(TestIterateDocumentation, self).setUp()\n+\n+        self.doc = self.portal.invokeFactory(\n+            "Document", id="document", title="Test document"\n+        )\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        super(TestIterateDocumentation, self).tearDown()\n+\n+    def test_documentation_workingcopy_post(self):\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+\n+        save_request_and_response_for_docs("workingcopy_post", response)\n+\n+    def test_documentation_workingcopy_get(self):\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+\n+        response = self.api_session.get(\n+            "/document/@workingcopy",\n+        )\n+\n+        save_request_and_response_for_docs("workingcopy_get", response)\n+\n+        response = self.api_session.get(\n+            "/document",\n+        )\n+\n+        save_request_and_response_for_docs("workingcopy_baseline_get", response)\n+\n+        response = self.api_session.get(\n+            "/copy_of_document",\n+        )\n+\n+        save_request_and_response_for_docs("workingcopy_wc_get", response)\n+\n+    def test_documentation_workingcopy_patch(self):\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+\n+        response = self.api_session.patch(\n+            "/copy_of_document", json={"title": "I just changed the title"}\n+        )\n+\n+        response = self.api_session.patch(\n+            "/copy_of_document/@workingcopy",\n+        )\n+\n+        save_request_and_response_for_docs("workingcopy_patch", response)\n+\n+    def test_documentation_workingcopy_delete(self):\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+\n+        response = self.api_session.delete(\n+            "/copy_of_document/@workingcopy",\n+        )\n+\n+        save_request_and_response_for_docs("workingcopy_delete", response)\ndiff --git a/src/plone/restapi/tests/test_services_workingcopy.py b/src/plone/restapi/tests/test_services_workingcopy.py\nnew file mode 100644\nindex 000000000..f7c9f3f3d\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_workingcopy.py\n@@ -0,0 +1,238 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.testing import HAS_ITERATE\n+from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+\n+import transaction\n+import unittest\n+\n+\n+@unittest.skipUnless(\n+    HAS_ITERATE, "plone.app.iterate has a sane testing infrastrucure only in Plone 5"\n+)  # NOQA\n+class TestWorkingCopyEndpoint(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal.invokeFactory("Document", "document", title="Test Document")\n+        self.doc = self.portal.document\n+\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_workingcopy_checkout(self):\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+\n+        self.assertEqual(response.status_code, 201)\n+        self.assertIn("@id", response.json())\n+\n+        self.assertEquals(\n+            response.json()["@id"],\n+            "{}/copy_of_document".format(self.portal_url),\n+        )\n+\n+    def test_workingcopy_get(self):\n+        # We create the working copy\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+\n+        self.assertEqual(response.status_code, 201)\n+\n+        # endpoint GET in the baseline object\n+        response = self.api_session.get(\n+            "/document/@workingcopy",\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEquals(\n+            response.json()["working_copy"]["@id"],\n+            "{}/copy_of_document".format(self.portal_url),\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_name"],\n+            "admin",\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_url"],\n+            "{}/author/admin".format(self.portal_url),\n+        )\n+\n+        # endpoint GET in the working_copy\n+        response = self.api_session.get(\n+            "/copy_of_document/@workingcopy",\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEquals(\n+            response.json()["working_copy_of"]["@id"],\n+            "{}/document".format(self.portal_url),\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["@id"],\n+            "{}/copy_of_document".format(self.portal_url),\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_name"],\n+            "admin",\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_url"],\n+            "{}/author/admin".format(self.portal_url),\n+        )\n+\n+        # Serialization on the baseline object\n+        response = self.api_session.get(\n+            "/document",\n+        )\n+\n+        self.assertEquals(\n+            response.json()["working_copy"]["@id"],\n+            "{}/copy_of_document".format(self.portal_url),\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_name"],\n+            "admin",\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_url"],\n+            "{}/author/admin".format(self.portal_url),\n+        )\n+        self.assertEquals(response.json()["working_copy_of"], None)\n+\n+        # Serialization on the working copy object\n+        response = self.api_session.get(\n+            "/copy_of_document",\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy_of"]["@id"],\n+            "{}/document".format(self.portal_url),\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["@id"],\n+            "{}/copy_of_document".format(self.portal_url),\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_name"],\n+            "admin",\n+        )\n+        self.assertEquals(\n+            response.json()["working_copy"]["creator_url"],\n+            "{}/author/admin".format(self.portal_url),\n+        )\n+\n+    def test_workingcopy_notworkingcopy_get(self):\n+        # endpoint GET in the working_copy\n+        response = self.api_session.get(\n+            "/document/",\n+        )\n+        self.assertEqual(response.status_code, 200)\n+\n+        self.assertEquals(\n+            response.json()["working_copy_of"],\n+            None,\n+        )\n+\n+    def test_workingcopy_delete_on_the_baseline(self):\n+        # We create the working copy\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+        self.assertEqual(response.status_code, 201)\n+\n+        # Deleting in the baseline deletes the working copy\n+        response = self.api_session.delete(\n+            "/document/@workingcopy",\n+        )\n+\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get(\n+            "/copy_of_document",\n+        )\n+        self.assertEqual(response.status_code, 404)\n+\n+    def test_workingcopy_delete_on_the_working_copy(self):\n+        # We create the working copy\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+        self.assertEqual(response.status_code, 201)\n+\n+        # Deleting in the working copy deletes it too\n+        response = self.api_session.delete(\n+            "/copy_of_document/@workingcopy",\n+        )\n+\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get(\n+            "/copy_of_document",\n+        )\n+        self.assertEqual(response.status_code, 404)\n+\n+    def test_workingcopy_patch_on_the_baseline(self):\n+        # We create the working copy\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+        self.assertEqual(response.status_code, 201)\n+\n+        # Modify the working copy\n+        response = self.api_session.patch(\n+            "/copy_of_document", json={"title": "I just changed the title"}\n+        )\n+\n+        # Checking in\n+        response = self.api_session.patch(\n+            "/document/@workingcopy",\n+        )\n+\n+        # Check if the change is there\n+        response = self.api_session.get(\n+            "/document",\n+        )\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEquals(response.json()["title"], "I just changed the title")\n+\n+    def test_workingcopy_patch_on_the_working_copy(self):\n+        # We create the working copy\n+        response = self.api_session.post(\n+            "/document/@workingcopy",\n+        )\n+        self.assertEqual(response.status_code, 201)\n+\n+        # Modify the working copy\n+        response = self.api_session.patch(\n+            "/copy_of_document", json={"title": "I just changed the title"}\n+        )\n+\n+        # Checking in\n+        response = self.api_session.patch(\n+            "/copy_of_document/@workingcopy",\n+        )\n+\n+        # Check if the change is there\n+        response = self.api_session.get(\n+            "/document",\n+        )\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEquals(response.json()["title"], "I just changed the title")\ndiff --git a/src/plone/restapi/tests/test_statictime.py b/src/plone/restapi/tests/test_statictime.py\nindex 163701aab..c4399f17b 100644\n--- a/src/plone/restapi/tests/test_statictime.py\n+++ b/src/plone/restapi/tests/test_statictime.py\n@@ -18,6 +18,11 @@\n from zope.component import createObject\n from zope.component import getUtility\n from zope.interface import alsoProvides\n+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy\n+from plone.restapi.serializer.working_copy import WorkingCopyInfo\n+from plone.restapi.testing import HAS_ITERATE\n+from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n+from plone.restapi.serializer.converters import json_compatible\n \n import transaction\n import unittest\n@@ -256,3 +261,46 @@ def test_statictime_lockinfo(self):\n         real_datetimes = [lock_infos[0]["time"]]\n \n         self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+\n+@unittest.skipUnless(\n+    HAS_ITERATE, "plone.app.iterate has a sane testing infrastrucure only in Plone 5"\n+)  # NOQA\n+class TestStaticTimeWorkingCopy(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IDiscussionSettings, check=False)\n+        settings.globally_enabled = True\n+\n+        transaction.commit()\n+\n+    def create_document(self, id_):\n+        self.portal.invokeFactory("Document", id=id_)\n+        document = self.portal[id_]\n+        document.title = u"My title"\n+        return document\n+\n+    def test_statictime_wc_created(self):\n+        frozen_time = datetime(1950, 7, 31, 13, 45)\n+        statictime = StaticTime(created=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document("doc1")\n+\n+        policy = ICheckinCheckoutPolicy(doc1)\n+        policy.checkout(self.portal)\n+        baseline, working_copy = WorkingCopyInfo(doc1).get_working_copy_info()\n+\n+        self.assertEqual(json_compatible(frozen_time), working_copy["created"])\n+\n+        statictime.stop()\n'

