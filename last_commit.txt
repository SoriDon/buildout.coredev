Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-10T20:39:32+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.base/commit/b6c0c16098318cc8a6e4e0423a0f7eed2a5fb546

Move plone.app.layout.navigation.root to here

Files changed:
A news/navigationroot.feature
A src/plone/base/navigationroot.py
M README.rst
M setup.cfg

b'diff --git a/README.rst b/README.rst\nindex c926b40..12d5a07 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -31,6 +31,10 @@ In details this package contains:\n     A subset of commonly used and low-dependency utilities.\n     In Plone 5 and below those been at ``Products.CMFPlone.utils`` (but not all were moved).\n \n+``navigationroot`` (module)\n+    Plone specific handling of navigation roots.\n+    Before those been at ``plone.app.layout.navigation.root``.\n+\n ``__init__``\n     ``PloneMessageFactory`` with ``plone`` i18n-domain and ``PloneLocalesMessageFactory`` with ``plonelocales`` domain.\n     In Plone 5 and below this was at ``Products.CMFPlone.__init__``.\ndiff --git a/news/navigationroot.feature b/news/navigationroot.feature\nnew file mode 100644\nindex 0000000..40b7224\n--- /dev/null\n+++ b/news/navigationroot.feature\n@@ -0,0 +1,4 @@\n+Move `plone.app.layout.navigation.root.getNavigationRoot` to `.navigationroot.get_navigation_root`.\n+Move `plone.app.layout.navigation.root.getNavigationRootObject` to `.navigationroot.get_navigation_root_object`.\n+Both are essential basic functions in Plone and not layout related at all.\n+[jensens]\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 6bf840a..729d58c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,5 +1,5 @@\n [metadata]\n-version = 1.0.4.dev0\n+version = 1.1.0.dev0\n name = plone.base\n description = Plone Interface contracts, plus basic features and utilities\n long_description = file: README.rst, CHANGES.rst\ndiff --git a/src/plone/base/navigationroot.py b/src/plone/base/navigationroot.py\nnew file mode 100644\nindex 0000000..47d3cb5\n--- /dev/null\n+++ b/src/plone/base/navigationroot.py\n@@ -0,0 +1,64 @@\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from plone.base.interfaces import INavigationRoot\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+\n+\n+def get_navigation_root(context, relativeRoot=None):\n+    """Get the path to the root of the navigation tree.\n+\n+    If a relativeRoot argument is provided, navigation root is computed from\n+    portal path and this relativeRoot.\n+\n+    If no relativeRoot argument is provided, and there is a root value set in\n+    portal_properties, navigation root path is computed from\n+    portal path and this root value.\n+\n+    IMPORTANT !!!\n+    Previous paragraphs imply relativeRoot is relative to the Plone portal.\n+\n+    Else, a root must be computed: loop from the context to the portal,\n+    through parents, looking for an object implementing INavigationRoot.\n+    Return the path of that root.\n+    """\n+    try:\n+        # URLTool is a portal tool from CMFCore\n+        portal_url = getToolByName(context, "portal_url")\n+    except AttributeError:\n+        return "/".join(getSite().getPhysicalPath())\n+\n+    if relativeRoot is None:\n+        # fetch from portal_properties\n+        registry = getUtility(IRegistry)\n+        relativeRoot = registry.get("plone.root", None)\n+\n+    # if relativeRoot has a meaningful value,\n+    if relativeRoot and relativeRoot != "/":\n+        # use it\n+\n+        # while taking care of case where\n+        # relativeRoot is not starting with a \'/\'\n+        if relativeRoot[0] != "/":\n+            relativeRoot = "/" + relativeRoot\n+\n+        portalPath = portal_url.getPortalPath()\n+        return portalPath + relativeRoot\n+\n+    # compute the root\n+    portal = portal_url.getPortalObject()\n+    root = get_navigation_root_object(context, portal)\n+    return "/".join(root.getPhysicalPath())\n+\n+\n+def get_navigation_root_object(context, portal):\n+    obj = context\n+    while not INavigationRoot.providedBy(obj) and aq_base(obj) is not aq_base(portal):\n+        parent = aq_parent(aq_inner(obj))\n+        if parent is None:\n+            return obj\n+        obj = parent\n+    return obj\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-11T10:23:31+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.base/commit/c7ef3df4b35bbdbeff7bb14721b1678654f657c4

Merge pull request #30 from plone/navroot

Move plone.app.layout.navigation.root to here

Files changed:
A news/navigationroot.feature
A src/plone/base/navigationroot.py
M README.rst
M setup.cfg

b'diff --git a/README.rst b/README.rst\nindex c926b40..12d5a07 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -31,6 +31,10 @@ In details this package contains:\n     A subset of commonly used and low-dependency utilities.\n     In Plone 5 and below those been at ``Products.CMFPlone.utils`` (but not all were moved).\n \n+``navigationroot`` (module)\n+    Plone specific handling of navigation roots.\n+    Before those been at ``plone.app.layout.navigation.root``.\n+\n ``__init__``\n     ``PloneMessageFactory`` with ``plone`` i18n-domain and ``PloneLocalesMessageFactory`` with ``plonelocales`` domain.\n     In Plone 5 and below this was at ``Products.CMFPlone.__init__``.\ndiff --git a/news/navigationroot.feature b/news/navigationroot.feature\nnew file mode 100644\nindex 0000000..40b7224\n--- /dev/null\n+++ b/news/navigationroot.feature\n@@ -0,0 +1,4 @@\n+Move `plone.app.layout.navigation.root.getNavigationRoot` to `.navigationroot.get_navigation_root`.\n+Move `plone.app.layout.navigation.root.getNavigationRootObject` to `.navigationroot.get_navigation_root_object`.\n+Both are essential basic functions in Plone and not layout related at all.\n+[jensens]\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 6bf840a..729d58c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,5 +1,5 @@\n [metadata]\n-version = 1.0.4.dev0\n+version = 1.1.0.dev0\n name = plone.base\n description = Plone Interface contracts, plus basic features and utilities\n long_description = file: README.rst, CHANGES.rst\ndiff --git a/src/plone/base/navigationroot.py b/src/plone/base/navigationroot.py\nnew file mode 100644\nindex 0000000..47d3cb5\n--- /dev/null\n+++ b/src/plone/base/navigationroot.py\n@@ -0,0 +1,64 @@\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from plone.base.interfaces import INavigationRoot\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+\n+\n+def get_navigation_root(context, relativeRoot=None):\n+    """Get the path to the root of the navigation tree.\n+\n+    If a relativeRoot argument is provided, navigation root is computed from\n+    portal path and this relativeRoot.\n+\n+    If no relativeRoot argument is provided, and there is a root value set in\n+    portal_properties, navigation root path is computed from\n+    portal path and this root value.\n+\n+    IMPORTANT !!!\n+    Previous paragraphs imply relativeRoot is relative to the Plone portal.\n+\n+    Else, a root must be computed: loop from the context to the portal,\n+    through parents, looking for an object implementing INavigationRoot.\n+    Return the path of that root.\n+    """\n+    try:\n+        # URLTool is a portal tool from CMFCore\n+        portal_url = getToolByName(context, "portal_url")\n+    except AttributeError:\n+        return "/".join(getSite().getPhysicalPath())\n+\n+    if relativeRoot is None:\n+        # fetch from portal_properties\n+        registry = getUtility(IRegistry)\n+        relativeRoot = registry.get("plone.root", None)\n+\n+    # if relativeRoot has a meaningful value,\n+    if relativeRoot and relativeRoot != "/":\n+        # use it\n+\n+        # while taking care of case where\n+        # relativeRoot is not starting with a \'/\'\n+        if relativeRoot[0] != "/":\n+            relativeRoot = "/" + relativeRoot\n+\n+        portalPath = portal_url.getPortalPath()\n+        return portalPath + relativeRoot\n+\n+    # compute the root\n+    portal = portal_url.getPortalObject()\n+    root = get_navigation_root_object(context, portal)\n+    return "/".join(root.getPhysicalPath())\n+\n+\n+def get_navigation_root_object(context, portal):\n+    obj = context\n+    while not INavigationRoot.providedBy(obj) and aq_base(obj) is not aq_base(portal):\n+        parent = aq_parent(aq_inner(obj))\n+        if parent is None:\n+            return obj\n+        obj = parent\n+    return obj\n'

