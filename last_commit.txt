Repository: plone.namedfile


Branch: refs/heads/master
Date: 2016-06-03T11:03:10+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/66f2249653b2e619f0c61c15a7a60fd4c80407c1

Fix tests to work with latest plone.scale changes, where gif images are no longer converted to jpeg.

Files changed:
A plone/namedfile/tests/image.png
M CHANGES.rst
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 108eeaf..57fc44c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -24,6 +24,9 @@ New:
 
 Fixes:
 
+- Fix tests to work with latest plone.scale changes, where gif images are no longer converted to jpeg.
+  [thet]
+
 - Fixed test setup to use layers properly.
   [jensens]
 
diff --git a/plone/namedfile/tests/image.png b/plone/namedfile/tests/image.png
new file mode 100644
index 0000000..a8d796a
Binary files /dev/null and b/plone/namedfile/tests/image.png differ
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index a7a83bc..7811134 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -69,9 +69,9 @@ class ImageScalingTests(unittest.TestCase):
     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING
 
     def setUp(self):
-        data = getFile('image.gif').read()
+        data = getFile('image.png').read()
         item = DummyContent()
-        item.image = NamedImage(data, 'image/gif', u'image.gif')
+        item.image = NamedImage(data, 'image/png', u'image.png')
         self.layer['app']._setOb('item', item)
         self.item = self.layer['app'].item
         self.scaling = ImageScaling(self.item, None)
@@ -79,10 +79,10 @@ def setUp(self):
     def testCreateScale(self):
         foo = self.scaling.scale('image', width=100, height=80)
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 80)
         self.assertEqual(foo.height, 80)
-        assertImage(self, foo.data.data, 'JPEG', (80, 80))
+        assertImage(self, foo.data.data, 'PNG', (80, 80))
 
     def testCreateScaleWithoutData(self):
         item = DummyContent()
@@ -94,12 +94,12 @@ def testGetScaleByName(self):
         self.scaling.available_sizes = {'foo': (60, 60)}
         foo = self.scaling.scale('image', scale='foo')
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
-        assertImage(self, foo.data.data, 'JPEG', (60, 60))
+        assertImage(self, foo.data.data, 'PNG', (60, 60))
         expected_url = re.compile(
-            r'http://nohost/item/@@images/[-a-z0-9]{36}\.jpeg')
+            r'http://nohost/item/@@images/[-a-z0-9]{36}\.png')
         self.assertTrue(expected_url.match(foo.absolute_url()))
         self.assertEqual(foo.url, foo.absolute_url())
 
@@ -192,9 +192,17 @@ def testScaleOnItemWithUnicodeTitle(self):
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />' % base
         self.assertTrue(re.match(expected, tag).groups())
 
-    def testScaledImageQuality(self):
+    def testScaledJpegImageQuality(self):
+        """Test image quality setting for jpeg images.
+        Image quality not available for PNG images.
+        """
+        data = getFile('image.jpg').read()
+        item = DummyContent()
+        item.image = NamedImage(data, 'image/jpeg', u'image.jpg')
+        scaling = ImageScaling(item, None)
+
         # scale an image, record its size
-        foo = self.scaling.scale('image', width=100, height=80)
+        foo = scaling.scale('image', width=100, height=80)
         size_foo = foo.data.getSize()
         # let's pretend p.a.imaging set the scaling quality to "really sloppy"
         gsm = getGlobalSiteManager()
@@ -202,7 +210,7 @@ def testScaledImageQuality(self):
         gsm.registerUtility(qualitySupplier.getQuality, IScaledImageQuality)
         wait_to_ensure_modified()
         # now scale again
-        bar = self.scaling.scale('image', width=100, height=80)
+        bar = scaling.scale('image', width=100, height=80)
         size_bar = bar.data.getSize()
         # first one should be bigger
         self.assertTrue(size_foo > size_bar)
@@ -214,9 +222,9 @@ class ImageTraverseTests(unittest.TestCase):
 
     def setUp(self):
         self.app = self.layer['app']
-        data = getFile('image.gif').read()
+        data = getFile('image.png').read()
         item = DummyContent()
-        item.image = NamedImage(data, 'image/gif', u'image.gif')
+        item.image = NamedImage(data, 'image/png', u'image.png')
         self.app._setOb('item', item)
         self.item = self.app.item
         self._orig_sizes = ImageScaling._sizes
@@ -243,7 +251,7 @@ def testImageThumb(self):
         ImageScaling._sizes = {'thumb': (128, 128)}
         uid, ext, width, height = self.traverse('image/thumb')
         self.assertEqual((width, height), ImageScaling._sizes['thumb'])
-        self.assertEqual(ext, 'jpeg')
+        self.assertEqual(ext, 'png')
 
     def testCustomSizes(self):
         # set custom image sizes
diff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py
index fdbde69..9f290c8 100644
--- a/plone/namedfile/tests/test_scaling_functional.py
+++ b/plone/namedfile/tests/test_scaling_functional.py
@@ -58,9 +58,9 @@ class ImagePublisherTests(unittest.TestCase):
     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING
 
     def setUp(self):
-        data = getFile('image.gif').read()
+        data = getFile('image.png').read()
         item = DummyContent()
-        item.image = NamedImage(data, 'image/gif', u'image.gif')
+        item.image = NamedImage(data, 'image/png', u'image.png')
         self.layer['app']._setOb('item', item)
         self.item = self.layer['app'].item
         self.view = self.item.unrestrictedTraverse('@@images')
@@ -78,16 +78,16 @@ def testPublishScaleViaUID(self):
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (64, 64))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (64, 64))
 
     def testPublishWebDavScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url + '/manage_DAVget')
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (64, 64))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (64, 64))
 
     def testPublishFTPScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -96,8 +96,8 @@ def testPublishFTPScaleViaUID(self):
         self.browser.open(scale.url + '/manage_FTPget')
         self.assertIn('200', self.browser.headers['status'])
         # Same remark as in testPublishWebDavScaleViaUID is valid here.
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (64, 64))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (64, 64))
 
     def testHeadRequestMethod(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -118,7 +118,7 @@ def get_method(self):
         head_request = HeadRequest(scale.url)
         mbrowser = self.browser.mech_browser
         mbrowser.open(head_request)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
+        self.assertEqual('image/png', self.browser.headers['content-type'])
         self.assertEqual(
             self.browser.headers['Content-Length'],
             str(GET_length)
@@ -131,8 +131,8 @@ def testPublishThumbViaUID(self):
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (128, 128))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (128, 128))
 
     def testPublishCustomSizeViaUID(self):
         # set custom image sizes
@@ -141,8 +141,8 @@ def testPublishCustomSizeViaUID(self):
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (23, 23))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (23, 23))
 
     def testPublishThumbViaName(self):
         ImageScaling._sizes = {'thumb': (128, 128)}
@@ -153,15 +153,15 @@ def testPublishThumbViaName(self):
         self.browser.open(
             self.layer['app'].absolute_url() + '/item/@@images/image'
         )
-        self.assertEqual('image/gif', self.browser.headers['content-type'])
-        self.assertEqual(self.browser.contents, getFile('image.gif').read())
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        self.assertEqual(self.browser.contents, getFile('image.png').read())
 
         # and last a scaled version
         self.browser.open(
             self.layer['app'].absolute_url() + '/item/@@images/image/thumb'
         )
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (128, 128))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (128, 128))
 
     def testPublishCustomSizeViaName(self):
         # set custom image sizes
@@ -171,7 +171,7 @@ def testPublishCustomSizeViaName(self):
         self.browser.open(
             self.layer['app'].absolute_url() + '/item/@@images/image/foo'
         )
-        assertImage(self, self.browser.contents, 'JPEG', (23, 23))
+        assertImage(self, self.browser.contents, 'PNG', (23, 23))
 
     def testPublishScaleWithInvalidUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -179,7 +179,7 @@ def testPublishScaleWithInvalidUID(self):
         # change the url so it's invalid...
         from zExceptions import NotFound
         with self.assertRaises(NotFound):
-            self.browser.open(scale.url.replace('.jpeg', 'x.jpeg'))
+            self.browser.open(scale.url.replace('.png', 'x.png'))
 
     def testPublishScaleWithInvalidScale(self):
         scale = self.view.scale('image', 'no-such-scale')


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2016-06-03T12:13:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/f6c368ed58c19555d25f52b27682c2fb52717164

Merge pull request #27 from plone/thet-fixtests

Fix tests to work with latest plone.scale changes, where gif images a…

Files changed:
A plone/namedfile/tests/image.png
M CHANGES.rst
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 108eeaf..57fc44c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -24,6 +24,9 @@ New:
 
 Fixes:
 
+- Fix tests to work with latest plone.scale changes, where gif images are no longer converted to jpeg.
+  [thet]
+
 - Fixed test setup to use layers properly.
   [jensens]
 
diff --git a/plone/namedfile/tests/image.png b/plone/namedfile/tests/image.png
new file mode 100644
index 0000000..a8d796a
Binary files /dev/null and b/plone/namedfile/tests/image.png differ
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index a7a83bc..7811134 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -69,9 +69,9 @@ class ImageScalingTests(unittest.TestCase):
     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING
 
     def setUp(self):
-        data = getFile('image.gif').read()
+        data = getFile('image.png').read()
         item = DummyContent()
-        item.image = NamedImage(data, 'image/gif', u'image.gif')
+        item.image = NamedImage(data, 'image/png', u'image.png')
         self.layer['app']._setOb('item', item)
         self.item = self.layer['app'].item
         self.scaling = ImageScaling(self.item, None)
@@ -79,10 +79,10 @@ def setUp(self):
     def testCreateScale(self):
         foo = self.scaling.scale('image', width=100, height=80)
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 80)
         self.assertEqual(foo.height, 80)
-        assertImage(self, foo.data.data, 'JPEG', (80, 80))
+        assertImage(self, foo.data.data, 'PNG', (80, 80))
 
     def testCreateScaleWithoutData(self):
         item = DummyContent()
@@ -94,12 +94,12 @@ def testGetScaleByName(self):
         self.scaling.available_sizes = {'foo': (60, 60)}
         foo = self.scaling.scale('image', scale='foo')
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
-        assertImage(self, foo.data.data, 'JPEG', (60, 60))
+        assertImage(self, foo.data.data, 'PNG', (60, 60))
         expected_url = re.compile(
-            r'http://nohost/item/@@images/[-a-z0-9]{36}\.jpeg')
+            r'http://nohost/item/@@images/[-a-z0-9]{36}\.png')
         self.assertTrue(expected_url.match(foo.absolute_url()))
         self.assertEqual(foo.url, foo.absolute_url())
 
@@ -192,9 +192,17 @@ def testScaleOnItemWithUnicodeTitle(self):
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />' % base
         self.assertTrue(re.match(expected, tag).groups())
 
-    def testScaledImageQuality(self):
+    def testScaledJpegImageQuality(self):
+        """Test image quality setting for jpeg images.
+        Image quality not available for PNG images.
+        """
+        data = getFile('image.jpg').read()
+        item = DummyContent()
+        item.image = NamedImage(data, 'image/jpeg', u'image.jpg')
+        scaling = ImageScaling(item, None)
+
         # scale an image, record its size
-        foo = self.scaling.scale('image', width=100, height=80)
+        foo = scaling.scale('image', width=100, height=80)
         size_foo = foo.data.getSize()
         # let's pretend p.a.imaging set the scaling quality to "really sloppy"
         gsm = getGlobalSiteManager()
@@ -202,7 +210,7 @@ def testScaledImageQuality(self):
         gsm.registerUtility(qualitySupplier.getQuality, IScaledImageQuality)
         wait_to_ensure_modified()
         # now scale again
-        bar = self.scaling.scale('image', width=100, height=80)
+        bar = scaling.scale('image', width=100, height=80)
         size_bar = bar.data.getSize()
         # first one should be bigger
         self.assertTrue(size_foo > size_bar)
@@ -214,9 +222,9 @@ class ImageTraverseTests(unittest.TestCase):
 
     def setUp(self):
         self.app = self.layer['app']
-        data = getFile('image.gif').read()
+        data = getFile('image.png').read()
         item = DummyContent()
-        item.image = NamedImage(data, 'image/gif', u'image.gif')
+        item.image = NamedImage(data, 'image/png', u'image.png')
         self.app._setOb('item', item)
         self.item = self.app.item
         self._orig_sizes = ImageScaling._sizes
@@ -243,7 +251,7 @@ def testImageThumb(self):
         ImageScaling._sizes = {'thumb': (128, 128)}
         uid, ext, width, height = self.traverse('image/thumb')
         self.assertEqual((width, height), ImageScaling._sizes['thumb'])
-        self.assertEqual(ext, 'jpeg')
+        self.assertEqual(ext, 'png')
 
     def testCustomSizes(self):
         # set custom image sizes
diff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py
index fdbde69..9f290c8 100644
--- a/plone/namedfile/tests/test_scaling_functional.py
+++ b/plone/namedfile/tests/test_scaling_functional.py
@@ -58,9 +58,9 @@ class ImagePublisherTests(unittest.TestCase):
     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING
 
     def setUp(self):
-        data = getFile('image.gif').read()
+        data = getFile('image.png').read()
         item = DummyContent()
-        item.image = NamedImage(data, 'image/gif', u'image.gif')
+        item.image = NamedImage(data, 'image/png', u'image.png')
         self.layer['app']._setOb('item', item)
         self.item = self.layer['app'].item
         self.view = self.item.unrestrictedTraverse('@@images')
@@ -78,16 +78,16 @@ def testPublishScaleViaUID(self):
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (64, 64))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (64, 64))
 
     def testPublishWebDavScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url + '/manage_DAVget')
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (64, 64))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (64, 64))
 
     def testPublishFTPScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -96,8 +96,8 @@ def testPublishFTPScaleViaUID(self):
         self.browser.open(scale.url + '/manage_FTPget')
         self.assertIn('200', self.browser.headers['status'])
         # Same remark as in testPublishWebDavScaleViaUID is valid here.
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (64, 64))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (64, 64))
 
     def testHeadRequestMethod(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -118,7 +118,7 @@ def get_method(self):
         head_request = HeadRequest(scale.url)
         mbrowser = self.browser.mech_browser
         mbrowser.open(head_request)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
+        self.assertEqual('image/png', self.browser.headers['content-type'])
         self.assertEqual(
             self.browser.headers['Content-Length'],
             str(GET_length)
@@ -131,8 +131,8 @@ def testPublishThumbViaUID(self):
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (128, 128))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (128, 128))
 
     def testPublishCustomSizeViaUID(self):
         # set custom image sizes
@@ -141,8 +141,8 @@ def testPublishCustomSizeViaUID(self):
         transaction.commit()
         # make sure the referenced image scale is available
         self.browser.open(scale.url)
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (23, 23))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (23, 23))
 
     def testPublishThumbViaName(self):
         ImageScaling._sizes = {'thumb': (128, 128)}
@@ -153,15 +153,15 @@ def testPublishThumbViaName(self):
         self.browser.open(
             self.layer['app'].absolute_url() + '/item/@@images/image'
         )
-        self.assertEqual('image/gif', self.browser.headers['content-type'])
-        self.assertEqual(self.browser.contents, getFile('image.gif').read())
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        self.assertEqual(self.browser.contents, getFile('image.png').read())
 
         # and last a scaled version
         self.browser.open(
             self.layer['app'].absolute_url() + '/item/@@images/image/thumb'
         )
-        self.assertEqual('image/jpeg', self.browser.headers['content-type'])
-        assertImage(self, self.browser.contents, 'JPEG', (128, 128))
+        self.assertEqual('image/png', self.browser.headers['content-type'])
+        assertImage(self, self.browser.contents, 'PNG', (128, 128))
 
     def testPublishCustomSizeViaName(self):
         # set custom image sizes
@@ -171,7 +171,7 @@ def testPublishCustomSizeViaName(self):
         self.browser.open(
             self.layer['app'].absolute_url() + '/item/@@images/image/foo'
         )
-        assertImage(self, self.browser.contents, 'JPEG', (23, 23))
+        assertImage(self, self.browser.contents, 'PNG', (23, 23))
 
     def testPublishScaleWithInvalidUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -179,7 +179,7 @@ def testPublishScaleWithInvalidUID(self):
         # change the url so it's invalid...
         from zExceptions import NotFound
         with self.assertRaises(NotFound):
-            self.browser.open(scale.url.replace('.jpeg', 'x.jpeg'))
+            self.browser.open(scale.url.replace('.png', 'x.png'))
 
     def testPublishScaleWithInvalidScale(self):
         scale = self.view.scale('image', 'no-such-scale')


