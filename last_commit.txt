Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/43839ecec5ebd817dd43698e43550c6d2cdc8c03

Related Items widget optimizations
  - Show a "One level up" button in the result set in browse mode.
  - Show folder icons in in the result set front of items instead a arrow behind the items.

Files changed:
M CHANGES.rst
M mockup/less/docs.less
M mockup/patterns/relateditems/pattern.js
M mockup/patterns/relateditems/pattern.relateditems.less
M mockup/patterns/relateditems/templates/result.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index 458a2b2..6ad69ed 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Related Items widget:
+    - Show a "One level up" button in the result set in browse mode.
+    - Show folder icons in in the result set front of items instead a arrow behind the items.
 
 Bug fixes:
 
diff --git a/mockup/less/docs.less b/mockup/less/docs.less
index 7fce7d5..981872d 100644
--- a/mockup/less/docs.less
+++ b/mockup/less/docs.less
@@ -5,27 +5,23 @@
 @import "@{bowerPath}/bootstrap/less/bootstrap.less";
 @icon-font-path: "@{bowerPath}/bootstrap/dist/fonts/";
 
-
 @import "@{mockupPath}/autotoc/pattern.autotoc.less";
+@import "@{mockupPath}/filemanager/pattern.filemanager.less";
+@import "@{mockupPath}/livesearch/pattern.livesearch.less";
 @import "@{mockupPath}/markspeciallinks/pattern.markspeciallinks.less";
 @import "@{mockupPath}/modal/pattern.modal.less";
 @import "@{mockupPath}/pickadate/pattern.pickadate.less";
 @import "@{mockupPath}/querystring/pattern.querystring.less";
+@import "@{mockupPath}/recurrence/pattern.recurrence.less";
 @import "@{mockupPath}/relateditems/pattern.relateditems.less";
+@import "@{mockupPath}/resourceregistry/pattern.resourceregistry.less";
 @import "@{mockupPath}/select2/pattern.select2.less";
 @import "@{mockupPath}/structure/less/pattern.structure.less";
+@import "@{mockupPath}/thememapper/pattern.thememapper.less";
 @import "@{mockupPath}/tinymce/less/pattern.tinymce.less";
 @import "@{mockupPath}/tooltip/pattern.tooltip.less";
 @import "@{mockupPath}/tree/pattern.tree.less";
 @import "@{mockupPath}/upload/less/pattern.upload.less";
-@import "@{mockupPath}/filemanager/pattern.filemanager.less";
-@import "@{mockupPath}/thememapper/pattern.thememapper.less";
-@import "@{mockupPath}/resourceregistry/pattern.resourceregistry.less";
-@import "@{mockupPath}/livesearch/pattern.livesearch.less";
-@import "@{mockupPath}/recurrence/pattern.recurrence.less";
-
-@import "@{bowerPath}/bootstrap/less/variables.less";
-@import "@{bowerPath}/bootstrap/less/bootstrap.less";
 
 @mockupColor1: #0083BE;
 @mockupColor2: #026B99;
@@ -247,7 +243,7 @@ body {
     }
   }
 }
-  
+
 @media (min-width: @screen-sm-min) {
 
   .mockup-header {
@@ -307,7 +303,6 @@ body {
 }
 
 @media (min-width: @screen-md-min) {
-
   .mockup-content .mockup-autotoc {
     ul ul {
       display: block;
@@ -317,9 +312,3 @@ body {
     }
   }
 }
-
-@media (min-width: @screen-lg-min) {
-
-  .mockup-content .mockup-autotoc {
-  }
-}
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 7190a62..c5b3f7e 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -209,6 +209,31 @@ define([
       var ajax = {};
       if (this.query.valid) {
         ajax = this.query.selectAjax();
+        ajax.results = function (data, page) {
+          var more = (page * 10) < data.total;
+          // Extend ``data`` with a ``oneLevelUp`` item if mode == "browse"
+          var path = this.currentPath.split('/');
+          if (page === 1 &&                                // Show level up only on top.
+            this.options.mode === 'browse'  &&             // only level up in "browse" mode
+            path.length > 1 &&                             // do not try to level up one level under root.
+            this.options.rootPath !== this.currentPath &&  // do not try to level up beyond root
+            this.currentPath !== '/'
+          ) {
+            var res = [{
+              'oneLevelUp': true,
+              'Title': _('One level up'),
+              'path': path.slice(0, path.length - 1).join('/') || '/',
+              'portal_type': 'Folder',
+              'is_folderish': true,
+              'selectable': false
+            }].concat(data.results);
+            data.results = res;
+          }
+          return {
+            results: data.results,
+            more: more
+          };
+        }.bind(this);
       }
       this.options.ajax = ajax;
       this.$el.select2(this.options);
@@ -235,7 +260,7 @@ define([
       // favorites
       var favoritesHtml = '';
       _.each(self.options.favorites, function (item) {
-        var item_copy = _.clone(item)
+        var item_copy = _.clone(item);
         item_copy.path = item_copy.path.substr(self.options.rootPath.length) || '/';
         favoritesHtml = favoritesHtml + self.applyTemplate('favorite', item_copy);
       });
@@ -391,7 +416,9 @@ define([
 
     isSelectable: function(item) {
       var self = this;
-      if (self.options.selectableTypes === null) {
+      if (item.selectable === false) {
+        return false;
+      } if (self.options.selectableTypes === null) {
         return true;
       } else {
         return _.indexOf(self.options.selectableTypes, item.portal_type) > -1;
@@ -433,7 +460,6 @@ define([
             return;
           }
         }
-
         var result = $(self.applyTemplate('result', item));
 
         $('.pattern-relateditems-result-select', result).on('click', function(event) {
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index 443b9ae..dc80252 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -106,33 +106,10 @@
     margin-top: 2px;
 }
 
-.pattern-relateditems-buttons {
-    font-size: 18px;
-    position: absolute;
-    top: 50%;
-    right: 0;
-    display: inline-block;
-    margin-top: -16px;
-    margin-right: 8px;
-    text-align: right;
-
-    a {
-        .glyphicon();
-        .glyphicon-chevron-right();
-        line-height: 36px;
-        display: block;
-        height: 36px;
-
-        &:hover:before {
-            color:purple;
-        }
-    }
 
-}
 
 .pattern-relateditems-result {
-    position: relative;
-    padding-right: 30px;
+    padding: 0.2em;
 
     a {
         &:hover {
@@ -140,22 +117,40 @@
         }
     }
 
-    .pattern-relateditems-result-select {
-        line-height: 15px;
-        display: block;
-        padding-top: 5px;
+    .pattern-relateditems-buttons {
+        display: inline-block;
+        width: 1.5em;
+        font-size: 1.5em;
+        vertical-align: top;
+        a {
+            .glyphicon;
+            .glyphicon-folder-close;
+            &:hover {
+                .glyphicon-folder-open;
+            }
+            &:hover:before {
+                color:purple;
+            }
+        }
     }
 
-    .pattern-relateditems-result-path {
-        font-size: 11px;
-        display: block;
-        color: #444;
+    .pattern-relateditems-result-select {
+        display: inline-block;
+        &:not(.selectable):not(.one-level-up) {
+            opacity: 0.6;
+        }
+        .pattern-relateditems-result-path {
+            font-size: 0.8em;
+            display: block;
+            color: #444;
+        }
     }
+
 }
 
 .pattern-relateditems-item {
     .pattern-relateditems-item-path {
-        font-size: 11px;
+        font-size: 0.8em;
         display: block;
         color: #444;
     }
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
index 0a18ee9..35c80ec 100644
--- a/mockup/patterns/relateditems/templates/result.xml
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -1,13 +1,15 @@
 <div class="pattern-relateditems-result">
-  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
+  <% if (mode !== "search") { %>
+    <span class="pattern-relateditems-buttons">
+    <% if (is_folderish) { %>
+      <a class="pattern-relateditems-result-browse" data-path="<%- path %>" title="Open folder"></a>
+    <% } %>
+    </span>
+  <% } %>
+  <a class="pattern-relateditems-result-select<% if (selectable) { %> selectable<% } else if (mode !== "search" && is_folderish) { %> pattern-relateditems-result-browse<% } %><% if (typeof oneLevelUp !== 'undefined' && oneLevelUp) { %> one-level-up<% } %>" data-path="<%- path %>">
     <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon "><br><% } %>
     <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
     <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
     <span class="pattern-relateditems-result-path"><%- path %></span>
   </a>
-  <span class="pattern-relateditems-buttons">
-  <% if (mode !== "search" && is_folderish) { %>
-     <a class="pattern-relateditems-result-browse" href="#" data-path="<%- path %>"></a>
-   <% } %>
- </span>
 </div>


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/fe960a265fb164483b8d2a58b91dfc13c3da2582

Filter out non-selectable and non-folderish items in the result set when in browse mode.

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 6ad69ed..28092a8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -13,6 +13,7 @@ New features:
 - Related Items widget:
     - Show a "One level up" button in the result set in browse mode.
     - Show folder icons in in the result set front of items instead a arrow behind the items.
+    - Filter out non-selectable and non-folderish items in the result set when in browse mode.
 
 Bug fixes:
 
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index c5b3f7e..b1e3c61 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -211,6 +211,20 @@ define([
         ajax = this.query.selectAjax();
         ajax.results = function (data, page) {
           var more = (page * 10) < data.total;
+
+          // Filter out non-selectable and non-folderish in "browse" mode.
+          // For "search" mode, this isn't necessary, because we have already
+          // filtered for selectable types
+          if (this.options.mode === 'browse') {
+            var res = data.results.filter(
+              function (item) {
+                if (!item.is_folderish && !this.isSelectable(item)) {
+                  return false;
+                }
+                return true;
+            }
+          );
+
           // Extend ``data`` with a ``oneLevelUp`` item if mode == "browse"
           var path = this.currentPath.split('/');
           if (page === 1 &&                                // Show level up only on top.


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/23319597600e6f9f97a3e87bec49ed8ff915d5db

Add option to scan the selected list of items for other patterns.

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 28092a8..7eb60bc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,7 @@ New features:
     - Show a "One level up" button in the result set in browse mode.
     - Show folder icons in in the result set front of items instead a arrow behind the items.
     - Filter out non-selectable and non-folderish items in the result set when in browse mode.
+    - Add option to scan the selected list of items for other patterns.
 
 Bug fixes:
 
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index b1e3c61..c61ccc9 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -14,6 +14,7 @@
  *    rootPath(string): Only display breadcrumb path elements deeper than this path. Default: "/"
  *    rootUrl(string): Visible URL up to the rootPath. This is prepended to the currentPath to generate submission URLs.
  *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
+ *    scanSelection(boolean): Scan the list of selected elements for other patterns.
  *    separator(string): Select2 option. String which separates multiple items. (',')
  *    tokenSeparators(array): Select2 option, refer to select2 documentation. ([",", " "])
  *    width(string): Specify a width for the widget. ('100%')
@@ -94,6 +95,7 @@ define([
   'mockup-patterns-select2',
   'mockup-ui-url/views/button',
   'mockup-utils',
+  'pat-registry',
   'translate',
   'text!mockup-patterns-relateditems-url/templates/breadcrumb.xml',
   'text!mockup-patterns-relateditems-url/templates/favorite.xml',
@@ -101,7 +103,7 @@ define([
   'text!mockup-patterns-relateditems-url/templates/selection.xml',
   'text!mockup-patterns-relateditems-url/templates/toolbar.xml',
   'bootstrap-dropdown'
-], function($, _, Base, Select2, ButtonView, utils, _t,
+], function($, _, Base, Select2, ButtonView, utils, registry, _t,
             BreadcrumbTemplate,
             FavoriteTemplate,
             ResultTemplate,
@@ -136,6 +138,7 @@ define([
       rootUrl: '',  // default to be relative.
       pathOperator: 'plone.app.querystring.operation.string.path',
       selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
+      scanSelection: false,  // False, to no unnecessarily use CPU time on this.
       separator: ',',
       tokenSeparators: [',', ' '],
       width: '100%',
@@ -459,7 +462,12 @@ define([
       Select2.prototype.initializeTags.call(self);
 
       self.options.formatSelection = function(item, $container) {
-        return self.applyTemplate('selection', item);
+        // activate petterns on the result set.
+        var $selection = $(self.applyTemplate('selection', item))
+        if (scanSelection) {
+          registry.scan($selection);
+        }
+        return $selection;
       };
 
       Select2.prototype.initializeOrdering.call(self);


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/85021c9679288a68cdd592da0d41462963b082ed

bugfixes

Files changed:
M mockup/patterns/relateditems/pattern.js

diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index c61ccc9..e3b5332 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -214,19 +214,20 @@ define([
         ajax = this.query.selectAjax();
         ajax.results = function (data, page) {
           var more = (page * 10) < data.total;
-
+          var results = data.results;
           // Filter out non-selectable and non-folderish in "browse" mode.
           // For "search" mode, this isn't necessary, because we have already
           // filtered for selectable types
           if (this.options.mode === 'browse') {
-            var res = data.results.filter(
+            results = results.filter(
               function (item) {
                 if (!item.is_folderish && !this.isSelectable(item)) {
                   return false;
                 }
                 return true;
-            }
-          );
+              }.bind(this)
+            );
+          }
 
           // Extend ``data`` with a ``oneLevelUp`` item if mode == "browse"
           var path = this.currentPath.split('/');
@@ -236,18 +237,17 @@ define([
             this.options.rootPath !== this.currentPath &&  // do not try to level up beyond root
             this.currentPath !== '/'
           ) {
-            var res = [{
+            results = [{
               'oneLevelUp': true,
               'Title': _('One level up'),
               'path': path.slice(0, path.length - 1).join('/') || '/',
               'portal_type': 'Folder',
               'is_folderish': true,
               'selectable': false
-            }].concat(data.results);
-            data.results = res;
+            }].concat(results);
           }
           return {
-            results: data.results,
+            results: results,
             more: more
           };
         }.bind(this);
@@ -461,10 +461,10 @@ define([
       Select2.prototype.initializeValues.call(self);
       Select2.prototype.initializeTags.call(self);
 
-      self.options.formatSelection = function(item, $container) {
+      self.options.formatSelection = function(item) {
         // activate petterns on the result set.
-        var $selection = $(self.applyTemplate('selection', item))
-        if (scanSelection) {
+        var $selection = $(self.applyTemplate('selection', item));
+        if (self.options.scanSelection) {
           registry.scan($selection);
         }
         return $selection;


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/340162e1a725fd4c69bcbbd1298edbe138147210

sort options

Files changed:
M mockup/patterns/relateditems/pattern.js

diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index e3b5332..556253d 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -7,16 +7,18 @@
  *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (true)
  *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
  *    favorites(array): Array of objects. These are favorites, which can be used to quickly jump to different locations. Objects have the attributes "title" and "path". Default: []
- *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    maximumSelectionSize(integer): The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited. (-1)
  *    minimumInputLength: Select2 option. Number of characters necessary to start a search. Default: 0.
+ *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
  *    rootPath(string): Only display breadcrumb path elements deeper than this path. Default: "/"
  *    rootUrl(string): Visible URL up to the rootPath. This is prepended to the currentPath to generate submission URLs.
- *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
  *    scanSelection(boolean): Scan the list of selected elements for other patterns.
+ *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
  *    separator(string): Select2 option. String which separates multiple items. (',')
  *    tokenSeparators(array): Select2 option, refer to select2 documentation. ([",", " "])
+ *    upload(boolen): Allow file and image uploads from within the related items widget.
+ *    uploadAllowView(string): View, which returns a JSON response in the form of {allowUpload: true}, if upload is allowed in the current context.
  *    width(string): Specify a width for the widget. ('100%')
  *    breadcrumbTemplate(string): Template to use for a single item in the breadcrumbs.
  *    breadcrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadcrumbTemplate. (null)
@@ -26,8 +28,6 @@
  *    resultTemplateSelector(string): Select an element from the DOM from which to grab the resultTemplate. (null)
  *    selectionTemplate(string): Template for element that will be used to construct a selected item. (Refer to source)
  *    selectionTemplateSelector(string): Select an element from the DOM from which to grab the selectionTemplate. (null)
- *    upload(boolen): Allow file and image uploads from within the related items widget.
- *    uploadAllowView(string): View, which returns a JSON response in the form of {allowUpload: true}, if upload is allowed in the current context.
  *
  * Documentation:
  *    The Related Items pattern is based on Select2 so many of the same options will work here as well.
@@ -123,24 +123,25 @@ define([
       vocabularyUrl: null,  // must be set to work
 
       // more options
-      upload: false,
       attributes: ['UID', 'Title', 'portal_type', 'path', 'getURL', 'getIcon', 'is_folderish', 'review_state'],  // used by utils.QueryHelper
       basePath: '',
+      browsing: undefined,
       closeOnSelect: true,
       dropdownCssClass: 'pattern-relateditems-dropdown',
       favorites: [],
       maximumSelectionSize: -1,
       minimumInputLength: 0,
       mode: 'search', // possible values are search and browse
-      browsing: undefined,
       orderable: true,  // mockup-patterns-select2
+      pathOperator: 'plone.app.querystring.operation.string.path',
       rootPath: '/',
       rootUrl: '',  // default to be relative.
-      pathOperator: 'plone.app.querystring.operation.string.path',
-      selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
       scanSelection: false,  // False, to no unnecessarily use CPU time on this.
+      selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
       separator: ',',
       tokenSeparators: [',', ' '],
+      upload: false,
+      uploadAllowView: undefined,
       width: '100%',
 
       // templates


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/0eac5112843ee5d5b40cea12cca6c33277c93f1f

Add option for contextPath - objects with this path will not be selectable. This prevents the object where the relation is set on to from being selected and self-referenced.

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 7eb60bc..fb62320 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,7 @@ New features:
     - Show folder icons in in the result set front of items instead a arrow behind the items.
     - Filter out non-selectable and non-folderish items in the result set when in browse mode.
     - Add option to scan the selected list of items for other patterns.
+    - Add option for contextPath - objects with this path will not be selectable. This prevents the object where the relation is set on to from being selected and self-referenced.
 
 Bug fixes:
 
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 556253d..d2eb764 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -4,6 +4,7 @@
  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)
  *    attributes(array): This list is passed to the server during an AJAX request to specify the attributes which should be included on each item. (['UID', 'Title', 'portal_type', 'path'])
  *    basePath(string): Start browse/search in this path. Default: set to rootPath.
+ *    contextPath(string): Path of the object, which is currently edited. If this path is given, this object will not be selectable.
  *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (true)
  *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
  *    favorites(array): Array of objects. These are favorites, which can be used to quickly jump to different locations. Objects have the attributes "title" and "path". Default: []
@@ -127,6 +128,7 @@ define([
       basePath: '',
       browsing: undefined,
       closeOnSelect: true,
+      contextPath: undefined,
       dropdownCssClass: 'pattern-relateditems-dropdown',
       favorites: [],
       maximumSelectionSize: -1,
@@ -235,8 +237,7 @@ define([
           if (page === 1 &&                                // Show level up only on top.
             this.options.mode === 'browse'  &&             // only level up in "browse" mode
             path.length > 1 &&                             // do not try to level up one level under root.
-            this.options.rootPath !== this.currentPath &&  // do not try to level up beyond root
-            this.currentPath !== '/'
+            this.currentPath !== '/'  // do not try to level up beyond root
           ) {
             results = [{
               'oneLevelUp': true,
@@ -436,7 +437,11 @@ define([
       var self = this;
       if (item.selectable === false) {
         return false;
-      } if (self.options.selectableTypes === null) {
+      }
+      if (self.options.contextPath === this.options.rootPath + item.path) {
+        return false;
+      }
+      if (self.options.selectableTypes === null) {
         return true;
       } else {
         return _.indexOf(self.options.selectableTypes, item.portal_type) > -1;


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:06+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/a78806392b5179e97c2571182af3517844e3fd99

Auto search/browse mode
Add new mode "auto", which automatically sets ``search`` mode when a searchterm is present, otherwise ``browse`` mode.
Use searchterm as substring, which matches also within words by wrapping searchterm with the "*" wildcard.

Files changed:
M CHANGES.rst
M mockup/patterns/relateditems/pattern.js
M mockup/patterns/relateditems/templates/result.xml
M mockup/patterns/relateditems/templates/toolbar.xml

diff --git a/CHANGES.rst b/CHANGES.rst
index fb62320..9f008fb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,8 @@
 Changelog
 =========
 
-2.4.1 (Unreleased)
-------------------
+2.5 (Unreleased)
+----------------
 
 Breaking changes:
 
@@ -11,6 +11,8 @@ Breaking changes:
 New features:
 
 - Related Items widget:
+    - Add new mode "auto", which automatically sets ``search`` mode when a searchterm is present, otherwise ``browse`` mode.
+    - Use searchterm as substring, which matches also within words by wrapping searchterm with the "*" wildcard.
     - Show a "One level up" button in the result set in browse mode.
     - Show folder icons in in the result set front of items instead a arrow behind the items.
     - Filter out non-selectable and non-folderish items in the result set when in browse mode.
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index d2eb764..eca7453 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -88,7 +88,6 @@
  *
  */
 
-
 define([
   'jquery',
   'underscore',
@@ -133,7 +132,7 @@ define([
       favorites: [],
       maximumSelectionSize: -1,
       minimumInputLength: 0,
-      mode: 'search', // possible values are search and browse
+      mode: 'auto', // possible values are search and browse
       orderable: true,  // mockup-patterns-select2
       pathOperator: 'plone.app.querystring.operation.string.path',
       rootPath: '/',
@@ -175,53 +174,68 @@ define([
         template = self.options[tpl + 'Template'];
       }
       // let's give all the options possible to the template generation
-      var options = $.extend(true, {}, self.options, item);
+      var options = $.extend(true, {}, self.options, item, {'browsing': self.browsing});
       options._item = item;
       return _.template(template)(options);
     },
 
-    setQuery: function () {
+    setAjax: function () {
+
+      var ajax = {
+
+        url: this.options.vocabularyUrl,
+        dataType: 'JSON',
+        quietMillis: 100,
 
-      var baseCriteria = [];
+        data: function (term, page) {
+
+          var criterias = [];
+          if (term) {
+            term = '*' + term + '*';
+            criterias.push({
+              i: 'SearchableText',
+              o: 'plone.app.querystring.operation.string.contains',
+              v: term
+            });
+          }
 
-      if (this.options.mode == 'search') {
-        // MODE SEARCH
+          // We don't restrict for selectable types while browsing...
+          if (!this.browsing && this.options.selectableTypes) {
+            criterias.push({
+              i: 'portal_type',
+              o: 'plone.app.querystring.operation.selection.any',
+              v: this.options.selectableTypes
+            });
+          }
 
-        // restrict to given types
-        if (this.options.selectableTypes) {
-          baseCriteria.push({
-            i: 'portal_type',
-            o: 'plone.app.querystring.operation.selection.any',
-            v: this.options.selectableTypes
+          criterias.push({
+            i: 'path',
+            o: this.options.pathOperator,
+            v: this.options.rootPath + this.currentPath + (this.browsing ? '::1' : '')
           });
-        }
 
-        baseCriteria.push({
-          i: 'path',
-          o: this.options.pathOperator,
-          v: this.options.rootPath + this.currentPath
-        });
+          var data = {
+            query: JSON.stringify({
+              criteria: criterias,
+              sort_on: 'path',
+              sort_order: 'ascending'
+            }),
+            attributes: JSON.stringify(this.options.attributes),
+            batch: {
+              page: page ? page : 1,
+              size: 10
+            }
+          };
+          return data;
+        }.bind(this),
 
-      }
+        results: function (data, page) {
 
-      // set query object
-      this.query = new utils.QueryHelper(
-        $.extend(true, {}, this.options, {
-          pattern: this,
-          baseCriteria: baseCriteria
-        })
-      );
-
-      var ajax = {};
-      if (this.query.valid) {
-        ajax = this.query.selectAjax();
-        ajax.results = function (data, page) {
           var more = (page * 10) < data.total;
           var results = data.results;
-          // Filter out non-selectable and non-folderish in "browse" mode.
-          // For "search" mode, this isn't necessary, because we have already
-          // filtered for selectable types
-          if (this.options.mode === 'browse') {
+
+          // Filter out non-selectable and non-folderish while browsing.
+          if (this.browsing) {
             results = results.filter(
               function (item) {
                 if (!item.is_folderish && !this.isSelectable(item)) {
@@ -232,11 +246,11 @@ define([
             );
           }
 
-          // Extend ``data`` with a ``oneLevelUp`` item if mode == "browse"
+          // Extend ``data`` with a ``oneLevelUp`` item when browsing
           var path = this.currentPath.split('/');
-          if (page === 1 &&                                // Show level up only on top.
-            this.options.mode === 'browse'  &&             // only level up in "browse" mode
-            path.length > 1 &&                             // do not try to level up one level under root.
+          if (page === 1 &&           // Show level up only on top.
+            this.browsing  &&         // only level up when browsing
+            path.length > 1 &&        // do not try to level up one level under root.
             this.currentPath !== '/'  // do not try to level up beyond root
           ) {
             results = [{
@@ -252,10 +266,13 @@ define([
             results: results,
             more: more
           };
-        }.bind(this);
-      }
+        }.bind(this)
+
+      };
+
       this.options.ajax = ajax;
       this.$el.select2(this.options);
+
     },
 
     setBreadCrumbs: function () {
@@ -302,13 +319,11 @@ define([
         if (self.browsing) {
           $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
           $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
-          self.options.mode = 'search';
           self.browsing = false;
           if (self.$el.select2('data').length > 0) {
             // Have to call after initialization
             self.openAfterInit = true;
           }
-          self.setQuery();
           if (!self.openAfterInit) {
             self.$el.select2('close');
             self.$el.select2('open');
@@ -325,13 +340,11 @@ define([
         if (!self.browsing) {
           $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
           $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
-          self.options.mode = 'browse';
           self.browsing = true;
           if (self.$el.select2('data').length > 0) {
             // Have to call after initialization
             self.openAfterInit = true;
           }
-          self.setQuery();
           if (!self.openAfterInit) {
             self.$el.select2('close');
             self.$el.select2('open');
@@ -406,7 +419,6 @@ define([
       self.currentPath = path;
       self.$el.select2('close');
       self.setBreadCrumbs();
-      self.setQuery();
       self.$el.select2('open');
       self.emit('after-browse');
     },
@@ -451,14 +463,14 @@ define([
     init: function() {
       var self = this;
 
-      self.browsing = self.options.mode === 'browse';
+      self.browsing = self.options.mode !== 'search';
 
       // Remove trailing slash
       self.options.rootPath = self.options.rootPath.replace(/\/$/, '');
       // Substract rootPath from basePath with is the relative currentPath. Has a leading slash. Or use '/'
       self.currentPath = self.options.basePath.substr(self.options.rootPath.length) || '/';
 
-      self.setQuery();
+      self.setAjax();
 
       self.$el.wrap('<div class="pattern-relateditems-container" />');
       self.$container = self.$el.parents('.pattern-relateditems-container');
@@ -524,7 +536,6 @@ define([
       };
 
       self.options.initSelection = function(element, callback) {
-        var data = [];
         var value = $(element).val();
         if (value !== '') {
           var ids = value.split(self.options.separator);
@@ -563,6 +574,16 @@ define([
 
       };
 
+      self.options.tokenizer = function (input) {
+        if (this.options.mode === 'auto') {
+          if (input) {
+            this.browsing = false;
+          } else {
+            this.browsing = true;
+          }
+        }
+      }.bind(this);
+
       self.options.id = function(item) {
         return item.UID;
       };
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
index 35c80ec..3902e76 100644
--- a/mockup/patterns/relateditems/templates/result.xml
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -1,12 +1,10 @@
 <div class="pattern-relateditems-result">
-  <% if (mode !== "search") { %>
-    <span class="pattern-relateditems-buttons">
-    <% if (is_folderish) { %>
-      <a class="pattern-relateditems-result-browse" data-path="<%- path %>" title="Open folder"></a>
-    <% } %>
-    </span>
+  <span class="pattern-relateditems-buttons">
+  <% if (is_folderish) { %>
+    <a class="pattern-relateditems-result-browse" data-path="<%- path %>" title="Open folder"></a>
   <% } %>
-  <a class="pattern-relateditems-result-select<% if (selectable) { %> selectable<% } else if (mode !== "search" && is_folderish) { %> pattern-relateditems-result-browse<% } %><% if (typeof oneLevelUp !== 'undefined' && oneLevelUp) { %> one-level-up<% } %>" data-path="<%- path %>">
+  </span>
+  <a class="pattern-relateditems-result-select<% if (selectable) { %> selectable<% } else if (browsing && is_folderish) { %> pattern-relateditems-result-browse<% } %><% if (typeof oneLevelUp !== 'undefined' && oneLevelUp) { %> one-level-up<% } %>" data-path="<%- path %>">
     <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon "><br><% } %>
     <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
     <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
diff --git a/mockup/patterns/relateditems/templates/toolbar.xml b/mockup/patterns/relateditems/templates/toolbar.xml
index 4b55322..9538bca 100644
--- a/mockup/patterns/relateditems/templates/toolbar.xml
+++ b/mockup/patterns/relateditems/templates/toolbar.xml
@@ -1,7 +1,9 @@
+<% if (mode!=='auto') { %>
 <div class="btn-group mode-selector" role="group">
   <button type="button" class="mode search btn <% if (mode=="search") { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
   <button type="button" class="mode browse btn <% if (mode=="browse") { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
 </div>
+<% } %>
 <div class="path-wrapper">
   <span class="pattern-relateditems-path-label"><%- searchText %></span>
   <a class="crumb" href="/"><span class="glyphicon glyphicon-home"/></a>


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-06T15:14:07+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/2f0d37773532eafb2e0afce6acfce104dbf58863

cleanup + template fixes

Files changed:
M mockup/patterns/relateditems/pattern.js
M mockup/patterns/relateditems/pattern.relateditems.less
M mockup/patterns/relateditems/templates/result.xml
M mockup/patterns/relateditems/templates/selection.xml
M mockup/patterns/relateditems/templates/toolbar.xml

diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index eca7453..5f1a7be 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -286,9 +286,8 @@ define([
       _.each(paths, function(node) {
         if (node !== '') {
           var item = {};
-          itemPath = itemPath + '/' + node;
+          item.path = itemPath = itemPath + '/' + node;
           item.text = node;
-          item.path = itemPath;
           itemsHtml = itemsHtml + self.applyTemplate('breadcrumb', item);
         }
       });
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index dc80252..60346dc 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -72,8 +72,7 @@
 
         .path-wrapper {
             display: inline-block;
-            margin-top: 2px;
-            margin-bottom: 2px;
+            margin: 0.5em;
             vertical-align: middle;
         }
 
@@ -139,19 +138,13 @@
         &:not(.selectable):not(.one-level-up) {
             opacity: 0.6;
         }
-        .pattern-relateditems-result-path {
-            font-size: 0.8em;
-            display: block;
-            color: #444;
-        }
     }
 
 }
 
-.pattern-relateditems-item {
-    .pattern-relateditems-item-path {
-        font-size: 0.8em;
-        display: block;
-        color: #444;
-    }
+.pattern-relateditems-item-path,
+.pattern-relateditems-result-path {
+    font-size: 0.8em;
+    display: block;
+    color: #444;
 }
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
index 3902e76..86b472f 100644
--- a/mockup/patterns/relateditems/templates/result.xml
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -6,8 +6,7 @@
   </span>
   <a class="pattern-relateditems-result-select<% if (selectable) { %> selectable<% } else if (browsing && is_folderish) { %> pattern-relateditems-result-browse<% } %><% if (typeof oneLevelUp !== 'undefined' && oneLevelUp) { %> one-level-up<% } %>" data-path="<%- path %>">
     <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon "><br><% } %>
-    <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
-    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
+  	<span class="pattern-relateditems-result-title contenttype-<%- portal_type.toLowerCase() %><% if (typeof review_state !== 'undefined') { %> state-<%- review_state %><% } %>"><%- Title %></span>
     <span class="pattern-relateditems-result-path"><%- path %></span>
   </a>
 </div>
diff --git a/mockup/patterns/relateditems/templates/selection.xml b/mockup/patterns/relateditems/templates/selection.xml
index fa82295..954672c 100644
--- a/mockup/patterns/relateditems/templates/selection.xml
+++ b/mockup/patterns/relateditems/templates/selection.xml
@@ -1,5 +1,5 @@
 <span class="pattern-relateditems-item">
   <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon"><br><% } %>
-  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>
+  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %><% if (typeof review_state !== 'undefined') { %> state-<%- review_state %><% } %>"><%- Title %></span>
   <span class="pattern-relateditems-item-path"><%- path %></span>
 </span>
diff --git a/mockup/patterns/relateditems/templates/toolbar.xml b/mockup/patterns/relateditems/templates/toolbar.xml
index 9538bca..472fc82 100644
--- a/mockup/patterns/relateditems/templates/toolbar.xml
+++ b/mockup/patterns/relateditems/templates/toolbar.xml
@@ -1,7 +1,7 @@
 <% if (mode!=='auto') { %>
 <div class="btn-group mode-selector" role="group">
-  <button type="button" class="mode search btn <% if (mode=="search") { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
-  <button type="button" class="mode browse btn <% if (mode=="browse") { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
+  <button type="button" class="mode search btn <% if (mode=='search') { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
+  <button type="button" class="mode browse btn <% if (mode=='browse') { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
 </div>
 <% } %>
 <div class="path-wrapper">


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-11T15:34:30+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/4978089cc02451778ec684d33c7256c477095675

test fixes, including semantic fixes

Files changed:
M mockup/patterns/relateditems/pattern.js
M mockup/tests/pattern-relateditems-test.js

diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 5f1a7be..9b6af2b 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -12,6 +12,7 @@
  *    minimumInputLength: Select2 option. Number of characters necessary to start a search. Default: 0.
  *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
+ *    pageSize(int): Batch size to break down big result sets into multiple pages. (10).
  *    rootPath(string): Only display breadcrumb path elements deeper than this path. Default: "/"
  *    rootUrl(string): Visible URL up to the rootPath. This is prepended to the currentPath to generate submission URLs.
  *    scanSelection(boolean): Scan the list of selected elements for other patterns.
@@ -125,6 +126,7 @@ define([
       // more options
       attributes: ['UID', 'Title', 'portal_type', 'path', 'getURL', 'getIcon', 'is_folderish', 'review_state'],  // used by utils.QueryHelper
       basePath: '',
+      pageSize: 10,
       browsing: undefined,
       closeOnSelect: true,
       contextPath: undefined,
@@ -221,17 +223,17 @@ define([
               sort_order: 'ascending'
             }),
             attributes: JSON.stringify(this.options.attributes),
-            batch: {
+            batch: JSON.stringify({
               page: page ? page : 1,
-              size: 10
-            }
+              size: this.options.pageSize
+            })
           };
           return data;
         }.bind(this),
 
         results: function (data, page) {
 
-          var more = (page * 10) < data.total;
+          var more = (page * this.options.pageSize) < data.total;
           var results = data.results;
 
           // Filter out non-selectable and non-folderish while browsing.
diff --git a/mockup/tests/pattern-relateditems-test.js b/mockup/tests/pattern-relateditems-test.js
index 59c81b9..d07e7c6 100644
--- a/mockup/tests/pattern-relateditems-test.js
+++ b/mockup/tests/pattern-relateditems-test.js
@@ -24,8 +24,8 @@ define([
       {UID:  'UID3',   Title:  'Document  3',  path:  '/document3',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID4',   Title:  'Document  4',  path:  '/document4',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID5',   Title:  'Document  5',  path:  '/document5',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
-      {UID:  'UID6',   Title:  'Folder    1',  path:  '/folder1',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
-      {UID:  'UID7',   Title:  'Folder    2',  path:  '/folder2',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID6',   Title:  'Folder    1',  path:  '/folder1',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  true,   review_state:  'published',  getURL: ''},
+      {UID:  'UID7',   Title:  'Folder    2',  path:  '/folder2',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  true,   review_state:  'published',  getURL: ''},
       {UID:  'UID8',   Title:  'Image     1',  path:  '/image1',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID9',   Title:  'Image     2',  path:  '/image2',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID10',  Title:  'Image     3',  path:  '/image3',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
@@ -39,15 +39,65 @@ define([
       {UID:  'UID14',   Title:  'Document  14',  path:  '/folder2/document14',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID15',   Title:  'Document  15',  path:  '/folder2/document15',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID16',   Title:  'Document  16',  path:  '/folder2/document16',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID17',   Title:  'Image     17',  path:  '/folder2/image17',     portal_type:  'Image',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID18',   Title:  'Image     18',  path:  '/folder2/image18',     portal_type:  'Image',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
     ];
-    var searchables;
     var $container;
 
+    var search = function (catalog, query) {
+      var results_ = [];
+      catalog.forEach(function (item) {
+        var add = true;
+        query.forEach(function (criteria) {
+          var val = criteria.v;
+          if (criteria.i === 'SearchableText') {
+            val = val.split('*')[1];  // searchText is wildcarded with "*text*"
+            if (
+              item.Title.indexOf(val) === -1 &&
+              item.path.indexOf(val) === -1
+            ) {
+              add = false;
+            }
+          }
+          if (
+            criteria.i === 'portal_type' &&
+            val.indexOf(item.portal_type) === -1
+          ) {
+            add = false;
+          }
+          if (criteria.i === 'path') {
+            var parts = val.split('::1');
+            var searchpath = parts[0];
+            var browsing = parts.length === 2;
+            if (item.path.indexOf(searchpath) === -1) {
+              // search path not part of item path
+              add = false;
+            }
+            if (browsing) {
+              // flat search
+              searchpath = searchpath.slice(-1) !== '/' ? searchpath + '/' : searchpath;
+              if (item.path.split('/').length !== searchpath.split('/').length) {
+                // not same number of path parts, so not same hirarchy
+                add = false;
+              }
+            }
+          }
+        });
+        if (add) {
+          results_.push(item);
+        }
+
+      });
+
+      return results_;
+    };
+
     beforeEach(function() {
       this.server = sinon.fakeServer.create();
       this.server.autoRespond = true;
 
       function getQueryVariable(url, variable) {
+        url = decodeURIComponent(url);
         var query = url.split('?')[1];
         if (query === undefined) {
           return null;
@@ -55,13 +105,18 @@ define([
         var vars = query.split('&');
         for (var i = 0; i < vars.length; i += 1) {
           var pair = vars[i].split('=');
-          if (decodeURIComponent(pair[0]) === variable) {
-            return decodeURIComponent(pair[1]);
+          if (pair[0] === variable) {
+            try {
+              return JSON.parse(pair[1]);
+            } catch (e) {
+              return pair[1];
+            }
           }
         }
-        return null;
+        return undefined;
       }
-      this.server.respondWith(/relateditems-test.json/, function(xhr, id) {
+
+      this.server.respondWith(/relateditems-test.json/, function(xhr) {
 
         var addUrls = function(list) {
           /* add getURL value */
@@ -75,92 +130,22 @@ define([
         addUrls(folder1);
         addUrls(folder2);
 
-        searchables = root.concat(folder1).concat(folder2);
-
         // grab the page number and number of items per page -- note, page is 1-based from Select2
         var batch = getQueryVariable(xhr.url, 'batch');
         var page = 1;
-        var pageSize = 10;
+        var pageSize = 100;
         if (batch) {
-          batch = $.parseJSON(batch);
           page = batch.page;
           pageSize = batch.size;
         }
         page = page - 1;
 
         var query = getQueryVariable(xhr.url, 'query');
-        var path = null;
-        var term = '';
-        if (query) {
-          query = $.parseJSON(query);
-          for (var i = 0; i < query.criteria.length; i = i + 1) {
-            var criteria = query.criteria[i];
-            if (criteria.i === 'path') {
-              path = criteria.v.split('::')[0];
-            } else if (criteria.i === 'is_folderish') {
-              term = criteria;
-            } else {
-              term = criteria.v;
-            }
-          }
-        }
-
-        var results = [];
-
-        function search(items, term) {
-          results = [];
-          if (term === undefined) {
-            return searchables;
-          }
-          _.each(items, function(item) {
-            var q;
-            var keys = (item.UID + ' ' + item.Title + ' ' + item.path + ' ' + item.portal_type).toLowerCase();
-            if (typeof(term) === 'object') {
-              if (term.i === 'is_folderish') {
-                if (item.is_folderish) {
-                  results.push(item);
-                }
-              } else {
-                for (var i = 0; i < term.length; i = i + 1) {
-                  q = term[i].toLowerCase();
-                  if (keys.indexOf(q) > -1) {
-                    results.push(item);
-                    break;
-                  }
-                }
-              }
-            } else {
-              q = term.toLowerCase().slice(0, -1);  // "*" removed
-              if (keys.indexOf(q) > -1) {
-                results.push(item);
-              }
-            }
-          });
-        }
 
-        function browse(items, q, p) {
-          results = [];
-          var path = p;
-          // var path = p.substring(0, p.length - 1);
-          // var splitPath = path.split('/');
-          var fromPath = [];
-          _.each(items, function(item) {
-            var itemSplit = item.path.split('/');
-            // if (item.path.indexOf(path) === 0 && itemSplit.length - 1 === splitPath.length) {  // search recursively
-            if (item.path.indexOf(path) === 0) {
-              fromPath.push(item);
-            }
-          });
-          if (q === undefined) {
-            return fromPath;
-          }
-          search(fromPath, q);
-        }
-        if (path) {
-          browse(searchables, term, path);
-        } else {
-          search(searchables, term);
-        }
+        var results = search(
+            root.concat(folder1).concat(folder2),
+            query.criteria
+        );
 
         xhr.respond(200, { 'Content-Type': 'application/json' },
           JSON.stringify({
@@ -177,21 +162,6 @@ define([
       $('.select2-sizer, .select2-drop').remove();
     });
 
-    // test cases
-    // - [x] initialize pattern
-    // - [x] click on browse opens result list
-    // - [x] click on search opens result list
-    // - [x] click on browse with already selected result items opens result list
-    // - [x] click on search with already selected result items opens result list
-    // - [ ] browse to item and select it
-    // - [x] selected item is removed from result list
-    // - [ ] don't allow to select items which are not selectable
-    // - [ ] don't show non-selectable and non folderish items
-    // - [x] only search in current path
-    // - [x] search item and select it
-    // - [x] deselect an item from result list
-    // - [x] selection from favorites opens path
-
     var initializePattern = function (options) {
       options = options || {};
       options.vocabularyUrl = '/relateditems-test.json';
@@ -206,6 +176,7 @@ define([
 
     };
 
+
     it('test initialize', function() {
 
       initializePattern();
@@ -215,35 +186,86 @@ define([
       expect($('.pattern-relateditems-container .toolbar .path-wrapper'), $container).to.have.length(1);
     });
 
+
+    it('auto roundtrip', function () {
+      initializePattern({'selectableTypes': ['Image', 'Folder'], 'pageSize': 100});
+      var clock = sinon.useFakeTimers();
+      var $input;
+
+      // open up result list by clicking into search field
+      $('.select2-search-field input.select2-input').click();
+      clock.tick(1000);
+
+      // Only Images and Folders should be shown.
+      expect($('.pattern-relateditems-result-select')).to.have.length(5);
+
+      // Browse into second folder which contains images
+      $('.pattern-relateditems-result-browse')[1].click();
+      clock.tick(1000);
+
+      // 1 "One level up" and 2 images
+      expect($('.pattern-relateditems-result-select')).to.have.length(3);
+      expect($('.pattern-relateditems-result-select')[0].text).to.contain('One level up');
+
+      // Select first image
+      $('a.pattern-relateditems-result-select')[1].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID17');
+
+      // Browse one level up
+      $('.select2-search-field input.select2-input').click();
+      clock.tick(1000);
+      $('a.pattern-relateditems-result-select')[0].click();
+      clock.tick(1000);
+
+      // Again, 5 items on root.
+      expect($('.pattern-relateditems-result-select')).to.have.length(5);
+
+      // Input a search term and enter search mode
+      $input = $('.select2-search-field input.select2-input');
+      $input.click().val('folder2');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
+      clock.tick(1000);
+
+      // Searching for folder 2 brings up 2 items: folder2 itself and the not-yet-selected image.
+      expect($('.pattern-relateditems-result-select')).to.have.length(2);
+
+      // We can even browse into folders in search mode
+      $('.pattern-relateditems-result-browse')[0].click();
+      clock.tick(1000);
+
+      // Being in folder 2, we see again two items...
+      expect($('.pattern-relateditems-result-select')).to.have.length(2);
+      expect($('.pattern-relateditems-result-select')[0].text).to.contain('One level up');
+
+      // Selecting the image will add it to the selected items.
+      $('a.pattern-relateditems-result-select')[1].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID17,UID18');
+
+    });
+
+
     it('browse roundtrip', function () {
-      var pattern = initializePattern();
+      initializePattern({'mode': 'browse', 'selectableTypes': ['Image'], 'pageSize': 100});
       var clock = sinon.useFakeTimers();
       var $input;
 
+
       // open up result list by clicking on "browse"
       $('.mode.browse', $container).click();
       clock.tick(1000);
 
       // result list must have expected length
-      expect($('.pattern-relateditems-result-select')).to.have.length(16);
+      // Only Images and Folders.
+      expect($('.pattern-relateditems-result-select')).to.have.length(5);
 
-      // compare result list with test data
-      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
-        return $(el).text().trim();
-      });
-      stringtext = _.sortBy(stringtext);
-
-      // ... compare the whole list, sorted
-      expect(stringtext.length).to.be.equal(searchables.length);
-      _.sortBy(searchables, 'Title').map(function (el, index) {
-        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
-      });
 
       // PT 2
 
       // select one element
-      $('a.pattern-relateditems-result-select')[0].click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID1');
+      $('a.pattern-relateditems-result-select')[2].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID8');
+
 
       // PT 3
 
@@ -252,15 +274,15 @@ define([
       clock.tick(1000);
 
       // result list must have expected length
-      expect($('.pattern-relateditems-result-select')).to.have.length(15);
+      expect($('.pattern-relateditems-result-select')).to.have.length(4);
 
       // add another one
-      $('a.pattern-relateditems-result-select')[0].click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
+      $('a.pattern-relateditems-result-select')[2].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID8,UID9');
 
       // remove first one
       $($('a.select2-search-choice-close')[0]).click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID2');
+      expect($('input.pat-relateditems').val()).to.be.equal('UID9');
 
       // search for...
       $input = $('.select2-search-field input.select2-input');
@@ -268,16 +290,17 @@ define([
       var keyup = $.Event('keyup-change');
       $input.trigger(keyup);
       clock.tick(1000);
-      expect($('.pattern-relateditems-result-select')).to.have.length(3);
+      expect($('.pattern-relateditems-result-select')).to.have.length(2);
 
       // add first from result
-      $('a.pattern-relateditems-result-select')[0].click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID8');
+      $('a.pattern-relateditems-result-select')[1].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID9,UID10');
 
     });
 
+
     it('search roundtrip', function () {
-      var pattern = initializePattern({'selectableTypes': ['Page']});
+      initializePattern({'mode': 'search', 'selectableTypes': ['Page'], 'pageSize': 100});
       var clock = sinon.useFakeTimers();
       var $input;
 
@@ -288,45 +311,32 @@ define([
       // result list must have expected length
       expect($('.pattern-relateditems-result-select')).to.have.length(11);
 
-      // compare result list with test data
-      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
-        return $(el).text().trim();
-      });
-      stringtext = _.sortBy(stringtext);
-
-      // ... compare the whole list, sorted
-      var mySearchables = searchables.filter(function (item) {
-        return item.portal_type === 'Page';
-      });
-      expect(stringtext.length).to.be.equal(mySearchables.length);
-      _.sortBy(mySearchables, 'Title').map(function (el, index) {
-        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
-      });
 
-      // PT 2
+      //  // PT 2
 
-      // select one element
+      //  // select one element
       $('a.pattern-relateditems-result-select')[0].click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID1');
 
-      // PT 3
 
-      // click again on browse, should open up result list again, this time without 'UID1'
+      //  // PT 3
+
+      //  // click again on browse, should open up result list again, this time without 'UID1'
       $('.mode.search', $container).click();
       clock.tick(1000);
 
-      // result list must have expected length
+      //  // result list must have expected length
       expect($('.pattern-relateditems-result-select')).to.have.length(10);
 
-      // add another one
+      //  // add another one
       $('a.pattern-relateditems-result-select')[0].click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
 
-      // remove first one
+      //  // remove first one
       $($('a.select2-search-choice-close')[0]).click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID2');
 
-      // search for...
+      //  // search for...
       $input = $('.select2-search-field input.select2-input');
       $input.click().val('document15');
       var keyup = $.Event('keyup-change');
@@ -334,7 +344,7 @@ define([
       clock.tick(1000);
       expect($('.pattern-relateditems-result-select')).to.have.length(1);
 
-      // add first from result
+      //  // add first from result
       $('a.pattern-relateditems-result-select')[0].click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID15');
 


Repository: mockup


Branch: refs/heads/master
Date: 2017-04-12T13:10:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/mockup/commit/8014cdf5a0d622973e3a22ad4fc887a4b52ff7ec

Merge pull request #752 from plone/thet-relateditemsopts

more related items widget optimizations and refactorings

Files changed:
M CHANGES.rst
M mockup/less/docs.less
M mockup/patterns/relateditems/pattern.js
M mockup/patterns/relateditems/pattern.relateditems.less
M mockup/patterns/relateditems/templates/result.xml
M mockup/patterns/relateditems/templates/selection.xml
M mockup/patterns/relateditems/templates/toolbar.xml
M mockup/tests/pattern-relateditems-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 458a2b2..9f008fb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,8 @@
 Changelog
 =========
 
-2.4.1 (Unreleased)
-------------------
+2.5 (Unreleased)
+----------------
 
 Breaking changes:
 
@@ -10,7 +10,14 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Related Items widget:
+    - Add new mode "auto", which automatically sets ``search`` mode when a searchterm is present, otherwise ``browse`` mode.
+    - Use searchterm as substring, which matches also within words by wrapping searchterm with the "*" wildcard.
+    - Show a "One level up" button in the result set in browse mode.
+    - Show folder icons in in the result set front of items instead a arrow behind the items.
+    - Filter out non-selectable and non-folderish items in the result set when in browse mode.
+    - Add option to scan the selected list of items for other patterns.
+    - Add option for contextPath - objects with this path will not be selectable. This prevents the object where the relation is set on to from being selected and self-referenced.
 
 Bug fixes:
 
diff --git a/mockup/less/docs.less b/mockup/less/docs.less
index 7fce7d5..981872d 100644
--- a/mockup/less/docs.less
+++ b/mockup/less/docs.less
@@ -5,27 +5,23 @@
 @import "@{bowerPath}/bootstrap/less/bootstrap.less";
 @icon-font-path: "@{bowerPath}/bootstrap/dist/fonts/";
 
-
 @import "@{mockupPath}/autotoc/pattern.autotoc.less";
+@import "@{mockupPath}/filemanager/pattern.filemanager.less";
+@import "@{mockupPath}/livesearch/pattern.livesearch.less";
 @import "@{mockupPath}/markspeciallinks/pattern.markspeciallinks.less";
 @import "@{mockupPath}/modal/pattern.modal.less";
 @import "@{mockupPath}/pickadate/pattern.pickadate.less";
 @import "@{mockupPath}/querystring/pattern.querystring.less";
+@import "@{mockupPath}/recurrence/pattern.recurrence.less";
 @import "@{mockupPath}/relateditems/pattern.relateditems.less";
+@import "@{mockupPath}/resourceregistry/pattern.resourceregistry.less";
 @import "@{mockupPath}/select2/pattern.select2.less";
 @import "@{mockupPath}/structure/less/pattern.structure.less";
+@import "@{mockupPath}/thememapper/pattern.thememapper.less";
 @import "@{mockupPath}/tinymce/less/pattern.tinymce.less";
 @import "@{mockupPath}/tooltip/pattern.tooltip.less";
 @import "@{mockupPath}/tree/pattern.tree.less";
 @import "@{mockupPath}/upload/less/pattern.upload.less";
-@import "@{mockupPath}/filemanager/pattern.filemanager.less";
-@import "@{mockupPath}/thememapper/pattern.thememapper.less";
-@import "@{mockupPath}/resourceregistry/pattern.resourceregistry.less";
-@import "@{mockupPath}/livesearch/pattern.livesearch.less";
-@import "@{mockupPath}/recurrence/pattern.recurrence.less";
-
-@import "@{bowerPath}/bootstrap/less/variables.less";
-@import "@{bowerPath}/bootstrap/less/bootstrap.less";
 
 @mockupColor1: #0083BE;
 @mockupColor2: #026B99;
@@ -247,7 +243,7 @@ body {
     }
   }
 }
-  
+
 @media (min-width: @screen-sm-min) {
 
   .mockup-header {
@@ -307,7 +303,6 @@ body {
 }
 
 @media (min-width: @screen-md-min) {
-
   .mockup-content .mockup-autotoc {
     ul ul {
       display: block;
@@ -317,9 +312,3 @@ body {
     }
   }
 }
-
-@media (min-width: @screen-lg-min) {
-
-  .mockup-content .mockup-autotoc {
-  }
-}
diff --git a/mockup/patterns/relateditems/pattern.js b/mockup/patterns/relateditems/pattern.js
index 7190a62..9b6af2b 100644
--- a/mockup/patterns/relateditems/pattern.js
+++ b/mockup/patterns/relateditems/pattern.js
@@ -4,18 +4,23 @@
  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)
  *    attributes(array): This list is passed to the server during an AJAX request to specify the attributes which should be included on each item. (['UID', 'Title', 'portal_type', 'path'])
  *    basePath(string): Start browse/search in this path. Default: set to rootPath.
+ *    contextPath(string): Path of the object, which is currently edited. If this path is given, this object will not be selectable.
  *    closeOnSelect(boolean): Select2 option. Whether or not the drop down should be closed when an item is selected. (true)
  *    dropdownCssClass(string): Select2 option. CSS class to add to the drop down element. ('pattern-relateditems-dropdown')
  *    favorites(array): Array of objects. These are favorites, which can be used to quickly jump to different locations. Objects have the attributes "title" and "path". Default: []
- *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    maximumSelectionSize(integer): The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited. (-1)
  *    minimumInputLength: Select2 option. Number of characters necessary to start a search. Default: 0.
+ *    mode(string): Initial widget mode. Possible values: 'search', 'browse'. If set to 'search', the catalog is searched for a searchterm. If set to 'browse', browsing starts at basePath. Default: 'search'.
  *    orderable(boolean): Whether or not items should be drag-and-drop sortable. (true)
+ *    pageSize(int): Batch size to break down big result sets into multiple pages. (10).
  *    rootPath(string): Only display breadcrumb path elements deeper than this path. Default: "/"
  *    rootUrl(string): Visible URL up to the rootPath. This is prepended to the currentPath to generate submission URLs.
+ *    scanSelection(boolean): Scan the list of selected elements for other patterns.
  *    selectableTypes(array): If the value is null all types are selectable. Otherwise, provide a list of strings to match item types that are selectable. (null)
  *    separator(string): Select2 option. String which separates multiple items. (',')
  *    tokenSeparators(array): Select2 option, refer to select2 documentation. ([",", " "])
+ *    upload(boolen): Allow file and image uploads from within the related items widget.
+ *    uploadAllowView(string): View, which returns a JSON response in the form of {allowUpload: true}, if upload is allowed in the current context.
  *    width(string): Specify a width for the widget. ('100%')
  *    breadcrumbTemplate(string): Template to use for a single item in the breadcrumbs.
  *    breadcrumbTemplateSelector(string): Select an element from the DOM from which to grab the breadcrumbTemplate. (null)
@@ -25,8 +30,6 @@
  *    resultTemplateSelector(string): Select an element from the DOM from which to grab the resultTemplate. (null)
  *    selectionTemplate(string): Template for element that will be used to construct a selected item. (Refer to source)
  *    selectionTemplateSelector(string): Select an element from the DOM from which to grab the selectionTemplate. (null)
- *    upload(boolen): Allow file and image uploads from within the related items widget.
- *    uploadAllowView(string): View, which returns a JSON response in the form of {allowUpload: true}, if upload is allowed in the current context.
  *
  * Documentation:
  *    The Related Items pattern is based on Select2 so many of the same options will work here as well.
@@ -86,7 +89,6 @@
  *
  */
 
-
 define([
   'jquery',
   'underscore',
@@ -94,6 +96,7 @@ define([
   'mockup-patterns-select2',
   'mockup-ui-url/views/button',
   'mockup-utils',
+  'pat-registry',
   'translate',
   'text!mockup-patterns-relateditems-url/templates/breadcrumb.xml',
   'text!mockup-patterns-relateditems-url/templates/favorite.xml',
@@ -101,7 +104,7 @@ define([
   'text!mockup-patterns-relateditems-url/templates/selection.xml',
   'text!mockup-patterns-relateditems-url/templates/toolbar.xml',
   'bootstrap-dropdown'
-], function($, _, Base, Select2, ButtonView, utils, _t,
+], function($, _, Base, Select2, ButtonView, utils, registry, _t,
             BreadcrumbTemplate,
             FavoriteTemplate,
             ResultTemplate,
@@ -121,23 +124,27 @@ define([
       vocabularyUrl: null,  // must be set to work
 
       // more options
-      upload: false,
       attributes: ['UID', 'Title', 'portal_type', 'path', 'getURL', 'getIcon', 'is_folderish', 'review_state'],  // used by utils.QueryHelper
       basePath: '',
+      pageSize: 10,
+      browsing: undefined,
       closeOnSelect: true,
+      contextPath: undefined,
       dropdownCssClass: 'pattern-relateditems-dropdown',
       favorites: [],
       maximumSelectionSize: -1,
       minimumInputLength: 0,
-      mode: 'search', // possible values are search and browse
-      browsing: undefined,
+      mode: 'auto', // possible values are search and browse
       orderable: true,  // mockup-patterns-select2
+      pathOperator: 'plone.app.querystring.operation.string.path',
       rootPath: '/',
       rootUrl: '',  // default to be relative.
-      pathOperator: 'plone.app.querystring.operation.string.path',
+      scanSelection: false,  // False, to no unnecessarily use CPU time on this.
       selectableTypes: null, // null means everything is selectable, otherwise a list of strings to match types that are selectable
       separator: ',',
       tokenSeparators: [',', ' '],
+      upload: false,
+      uploadAllowView: undefined,
       width: '100%',
 
       // templates
@@ -169,49 +176,105 @@ define([
         template = self.options[tpl + 'Template'];
       }
       // let's give all the options possible to the template generation
-      var options = $.extend(true, {}, self.options, item);
+      var options = $.extend(true, {}, self.options, item, {'browsing': self.browsing});
       options._item = item;
       return _.template(template)(options);
     },
 
-    setQuery: function () {
+    setAjax: function () {
+
+      var ajax = {
+
+        url: this.options.vocabularyUrl,
+        dataType: 'JSON',
+        quietMillis: 100,
+
+        data: function (term, page) {
 
-      var baseCriteria = [];
+          var criterias = [];
+          if (term) {
+            term = '*' + term + '*';
+            criterias.push({
+              i: 'SearchableText',
+              o: 'plone.app.querystring.operation.string.contains',
+              v: term
+            });
+          }
 
-      if (this.options.mode == 'search') {
-        // MODE SEARCH
+          // We don't restrict for selectable types while browsing...
+          if (!this.browsing && this.options.selectableTypes) {
+            criterias.push({
+              i: 'portal_type',
+              o: 'plone.app.querystring.operation.selection.any',
+              v: this.options.selectableTypes
+            });
+          }
 
-        // restrict to given types
-        if (this.options.selectableTypes) {
-          baseCriteria.push({
-            i: 'portal_type',
-            o: 'plone.app.querystring.operation.selection.any',
-            v: this.options.selectableTypes
+          criterias.push({
+            i: 'path',
+            o: this.options.pathOperator,
+            v: this.options.rootPath + this.currentPath + (this.browsing ? '::1' : '')
           });
-        }
 
-        baseCriteria.push({
-          i: 'path',
-          o: this.options.pathOperator,
-          v: this.options.rootPath + this.currentPath
-        });
+          var data = {
+            query: JSON.stringify({
+              criteria: criterias,
+              sort_on: 'path',
+              sort_order: 'ascending'
+            }),
+            attributes: JSON.stringify(this.options.attributes),
+            batch: JSON.stringify({
+              page: page ? page : 1,
+              size: this.options.pageSize
+            })
+          };
+          return data;
+        }.bind(this),
 
-      }
+        results: function (data, page) {
+
+          var more = (page * this.options.pageSize) < data.total;
+          var results = data.results;
+
+          // Filter out non-selectable and non-folderish while browsing.
+          if (this.browsing) {
+            results = results.filter(
+              function (item) {
+                if (!item.is_folderish && !this.isSelectable(item)) {
+                  return false;
+                }
+                return true;
+              }.bind(this)
+            );
+          }
+
+          // Extend ``data`` with a ``oneLevelUp`` item when browsing
+          var path = this.currentPath.split('/');
+          if (page === 1 &&           // Show level up only on top.
+            this.browsing  &&         // only level up when browsing
+            path.length > 1 &&        // do not try to level up one level under root.
+            this.currentPath !== '/'  // do not try to level up beyond root
+          ) {
+            results = [{
+              'oneLevelUp': true,
+              'Title': _('One level up'),
+              'path': path.slice(0, path.length - 1).join('/') || '/',
+              'portal_type': 'Folder',
+              'is_folderish': true,
+              'selectable': false
+            }].concat(results);
+          }
+          return {
+            results: results,
+            more: more
+          };
+        }.bind(this)
+
+      };
 
-      // set query object
-      this.query = new utils.QueryHelper(
-        $.extend(true, {}, this.options, {
-          pattern: this,
-          baseCriteria: baseCriteria
-        })
-      );
-
-      var ajax = {};
-      if (this.query.valid) {
-        ajax = this.query.selectAjax();
-      }
       this.options.ajax = ajax;
       this.$el.select2(this.options);
+
     },
 
     setBreadCrumbs: function () {
@@ -225,9 +288,8 @@ define([
       _.each(paths, function(node) {
         if (node !== '') {
           var item = {};
-          itemPath = itemPath + '/' + node;
+          item.path = itemPath = itemPath + '/' + node;
           item.text = node;
-          item.path = itemPath;
           itemsHtml = itemsHtml + self.applyTemplate('breadcrumb', item);
         }
       });
@@ -235,7 +297,7 @@ define([
       // favorites
       var favoritesHtml = '';
       _.each(self.options.favorites, function (item) {
-        var item_copy = _.clone(item)
+        var item_copy = _.clone(item);
         item_copy.path = item_copy.path.substr(self.options.rootPath.length) || '/';
         favoritesHtml = favoritesHtml + self.applyTemplate('favorite', item_copy);
       });
@@ -258,13 +320,11 @@ define([
         if (self.browsing) {
           $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
           $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
-          self.options.mode = 'search';
           self.browsing = false;
           if (self.$el.select2('data').length > 0) {
             // Have to call after initialization
             self.openAfterInit = true;
           }
-          self.setQuery();
           if (!self.openAfterInit) {
             self.$el.select2('close');
             self.$el.select2('open');
@@ -281,13 +341,11 @@ define([
         if (!self.browsing) {
           $('button.mode.search', self.$toolbar).toggleClass('btn-primary btn-default');
           $('button.mode.browse', self.$toolbar).toggleClass('btn-primary btn-default');
-          self.options.mode = 'browse';
           self.browsing = true;
           if (self.$el.select2('data').length > 0) {
             // Have to call after initialization
             self.openAfterInit = true;
           }
-          self.setQuery();
           if (!self.openAfterInit) {
             self.$el.select2('close');
             self.$el.select2('open');
@@ -362,7 +420,6 @@ define([
       self.currentPath = path;
       self.$el.select2('close');
       self.setBreadCrumbs();
-      self.setQuery();
       self.$el.select2('open');
       self.emit('after-browse');
     },
@@ -391,6 +448,12 @@ define([
 
     isSelectable: function(item) {
       var self = this;
+      if (item.selectable === false) {
+        return false;
+      }
+      if (self.options.contextPath === this.options.rootPath + item.path) {
+        return false;
+      }
       if (self.options.selectableTypes === null) {
         return true;
       } else {
@@ -401,14 +464,14 @@ define([
     init: function() {
       var self = this;
 
-      self.browsing = self.options.mode === 'browse';
+      self.browsing = self.options.mode !== 'search';
 
       // Remove trailing slash
       self.options.rootPath = self.options.rootPath.replace(/\/$/, '');
       // Substract rootPath from basePath with is the relative currentPath. Has a leading slash. Or use '/'
       self.currentPath = self.options.basePath.substr(self.options.rootPath.length) || '/';
 
-      self.setQuery();
+      self.setAjax();
 
       self.$el.wrap('<div class="pattern-relateditems-container" />');
       self.$container = self.$el.parents('.pattern-relateditems-container');
@@ -417,8 +480,13 @@ define([
       Select2.prototype.initializeValues.call(self);
       Select2.prototype.initializeTags.call(self);
 
-      self.options.formatSelection = function(item, $container) {
-        return self.applyTemplate('selection', item);
+      self.options.formatSelection = function(item) {
+        // activate petterns on the result set.
+        var $selection = $(self.applyTemplate('selection', item));
+        if (self.options.scanSelection) {
+          registry.scan($selection);
+        }
+        return $selection;
       };
 
       Select2.prototype.initializeOrdering.call(self);
@@ -433,7 +501,6 @@ define([
             return;
           }
         }
-
         var result = $(self.applyTemplate('result', item));
 
         $('.pattern-relateditems-result-select', result).on('click', function(event) {
@@ -470,7 +537,6 @@ define([
       };
 
       self.options.initSelection = function(element, callback) {
-        var data = [];
         var value = $(element).val();
         if (value !== '') {
           var ids = value.split(self.options.separator);
@@ -509,6 +575,16 @@ define([
 
       };
 
+      self.options.tokenizer = function (input) {
+        if (this.options.mode === 'auto') {
+          if (input) {
+            this.browsing = false;
+          } else {
+            this.browsing = true;
+          }
+        }
+      }.bind(this);
+
       self.options.id = function(item) {
         return item.UID;
       };
diff --git a/mockup/patterns/relateditems/pattern.relateditems.less b/mockup/patterns/relateditems/pattern.relateditems.less
index 443b9ae..60346dc 100644
--- a/mockup/patterns/relateditems/pattern.relateditems.less
+++ b/mockup/patterns/relateditems/pattern.relateditems.less
@@ -72,8 +72,7 @@
 
         .path-wrapper {
             display: inline-block;
-            margin-top: 2px;
-            margin-bottom: 2px;
+            margin: 0.5em;
             vertical-align: middle;
         }
 
@@ -106,33 +105,10 @@
     margin-top: 2px;
 }
 
-.pattern-relateditems-buttons {
-    font-size: 18px;
-    position: absolute;
-    top: 50%;
-    right: 0;
-    display: inline-block;
-    margin-top: -16px;
-    margin-right: 8px;
-    text-align: right;
-
-    a {
-        .glyphicon();
-        .glyphicon-chevron-right();
-        line-height: 36px;
-        display: block;
-        height: 36px;
-
-        &:hover:before {
-            color:purple;
-        }
-    }
 
-}
 
 .pattern-relateditems-result {
-    position: relative;
-    padding-right: 30px;
+    padding: 0.2em;
 
     a {
         &:hover {
@@ -140,23 +116,35 @@
         }
     }
 
-    .pattern-relateditems-result-select {
-        line-height: 15px;
-        display: block;
-        padding-top: 5px;
+    .pattern-relateditems-buttons {
+        display: inline-block;
+        width: 1.5em;
+        font-size: 1.5em;
+        vertical-align: top;
+        a {
+            .glyphicon;
+            .glyphicon-folder-close;
+            &:hover {
+                .glyphicon-folder-open;
+            }
+            &:hover:before {
+                color:purple;
+            }
+        }
     }
 
-    .pattern-relateditems-result-path {
-        font-size: 11px;
-        display: block;
-        color: #444;
+    .pattern-relateditems-result-select {
+        display: inline-block;
+        &:not(.selectable):not(.one-level-up) {
+            opacity: 0.6;
+        }
     }
+
 }
 
-.pattern-relateditems-item {
-    .pattern-relateditems-item-path {
-        font-size: 11px;
-        display: block;
-        color: #444;
-    }
+.pattern-relateditems-item-path,
+.pattern-relateditems-result-path {
+    font-size: 0.8em;
+    display: block;
+    color: #444;
 }
diff --git a/mockup/patterns/relateditems/templates/result.xml b/mockup/patterns/relateditems/templates/result.xml
index 0a18ee9..86b472f 100644
--- a/mockup/patterns/relateditems/templates/result.xml
+++ b/mockup/patterns/relateditems/templates/result.xml
@@ -1,13 +1,12 @@
 <div class="pattern-relateditems-result">
-  <a href="#" class=" pattern-relateditems-result-select <% if (selectable) { %>selectable<% } %>">
+  <span class="pattern-relateditems-buttons">
+  <% if (is_folderish) { %>
+    <a class="pattern-relateditems-result-browse" data-path="<%- path %>" title="Open folder"></a>
+  <% } %>
+  </span>
+  <a class="pattern-relateditems-result-select<% if (selectable) { %> selectable<% } else if (browsing && is_folderish) { %> pattern-relateditems-result-browse<% } %><% if (typeof oneLevelUp !== 'undefined' && oneLevelUp) { %> one-level-up<% } %>" data-path="<%- path %>">
     <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon "><br><% } %>
-    <span class="pattern-relateditems-result-title <% if (typeof review_state !== "undefined") { %> state-<%- review_state %> <% } %>  " /span>
-    <span class="pattern-relateditems contenttype-<%- portal_type.toLowerCase() %>"><%- Title %></span>
+  	<span class="pattern-relateditems-result-title contenttype-<%- portal_type.toLowerCase() %><% if (typeof review_state !== 'undefined') { %> state-<%- review_state %><% } %>"><%- Title %></span>
     <span class="pattern-relateditems-result-path"><%- path %></span>
   </a>
-  <span class="pattern-relateditems-buttons">
-  <% if (mode !== "search" && is_folderish) { %>
-     <a class="pattern-relateditems-result-browse" href="#" data-path="<%- path %>"></a>
-   <% } %>
- </span>
 </div>
diff --git a/mockup/patterns/relateditems/templates/selection.xml b/mockup/patterns/relateditems/templates/selection.xml
index fa82295..954672c 100644
--- a/mockup/patterns/relateditems/templates/selection.xml
+++ b/mockup/patterns/relateditems/templates/selection.xml
@@ -1,5 +1,5 @@
 <span class="pattern-relateditems-item">
   <% if (typeof getURL !== 'undefined' && ((typeof getIcon !== 'undefined' && getIcon === true) || portal_type === "Image")) { %><img src="<%- getURL %>/@@images/image/icon"><br><% } %>
-  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %> <% if (typeof review_state !== "undefined") { %> state-<%- review_state  %> <% } %>" ><%- Title %></span>
+  <span class="pattern-relateditems-item-title contenttype-<%- portal_type.toLowerCase() %><% if (typeof review_state !== 'undefined') { %> state-<%- review_state %><% } %>"><%- Title %></span>
   <span class="pattern-relateditems-item-path"><%- path %></span>
 </span>
diff --git a/mockup/patterns/relateditems/templates/toolbar.xml b/mockup/patterns/relateditems/templates/toolbar.xml
index 4b55322..472fc82 100644
--- a/mockup/patterns/relateditems/templates/toolbar.xml
+++ b/mockup/patterns/relateditems/templates/toolbar.xml
@@ -1,7 +1,9 @@
+<% if (mode!=='auto') { %>
 <div class="btn-group mode-selector" role="group">
-  <button type="button" class="mode search btn <% if (mode=="search") { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
-  <button type="button" class="mode browse btn <% if (mode=="browse") { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
+  <button type="button" class="mode search btn <% if (mode=='search') { %>btn-primary<% } else {%>btn-default<% } %>"><%- searchModeText %></button>
+  <button type="button" class="mode browse btn <% if (mode=='browse') { %>btn-primary<% } else {%>btn-default<% } %>"><%- browseModeText %></button>
 </div>
+<% } %>
 <div class="path-wrapper">
   <span class="pattern-relateditems-path-label"><%- searchText %></span>
   <a class="crumb" href="/"><span class="glyphicon glyphicon-home"/></a>
diff --git a/mockup/tests/pattern-relateditems-test.js b/mockup/tests/pattern-relateditems-test.js
index 59c81b9..d07e7c6 100644
--- a/mockup/tests/pattern-relateditems-test.js
+++ b/mockup/tests/pattern-relateditems-test.js
@@ -24,8 +24,8 @@ define([
       {UID:  'UID3',   Title:  'Document  3',  path:  '/document3',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID4',   Title:  'Document  4',  path:  '/document4',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID5',   Title:  'Document  5',  path:  '/document5',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
-      {UID:  'UID6',   Title:  'Folder    1',  path:  '/folder1',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
-      {UID:  'UID7',   Title:  'Folder    2',  path:  '/folder2',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID6',   Title:  'Folder    1',  path:  '/folder1',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  true,   review_state:  'published',  getURL: ''},
+      {UID:  'UID7',   Title:  'Folder    2',  path:  '/folder2',    portal_type:  'Folder',  getIcon:  "folder.png",    is_folderish:  true,   review_state:  'published',  getURL: ''},
       {UID:  'UID8',   Title:  'Image     1',  path:  '/image1',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID9',   Title:  'Image     2',  path:  '/image2',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID10',  Title:  'Image     3',  path:  '/image3',     portal_type:  'Image',   getIcon:  "image.png",     is_folderish:  false,  review_state:  'published',  getURL: ''},
@@ -39,15 +39,65 @@ define([
       {UID:  'UID14',   Title:  'Document  14',  path:  '/folder2/document14',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID15',   Title:  'Document  15',  path:  '/folder2/document15',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
       {UID:  'UID16',   Title:  'Document  16',  path:  '/folder2/document16',  portal_type:  'Page',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID17',   Title:  'Image     17',  path:  '/folder2/image17',     portal_type:  'Image',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
+      {UID:  'UID18',   Title:  'Image     18',  path:  '/folder2/image18',     portal_type:  'Image',    getIcon:  "document.png",  is_folderish:  false,  review_state:  'published',  getURL: ''},
     ];
-    var searchables;
     var $container;
 
+    var search = function (catalog, query) {
+      var results_ = [];
+      catalog.forEach(function (item) {
+        var add = true;
+        query.forEach(function (criteria) {
+          var val = criteria.v;
+          if (criteria.i === 'SearchableText') {
+            val = val.split('*')[1];  // searchText is wildcarded with "*text*"
+            if (
+              item.Title.indexOf(val) === -1 &&
+              item.path.indexOf(val) === -1
+            ) {
+              add = false;
+            }
+          }
+          if (
+            criteria.i === 'portal_type' &&
+            val.indexOf(item.portal_type) === -1
+          ) {
+            add = false;
+          }
+          if (criteria.i === 'path') {
+            var parts = val.split('::1');
+            var searchpath = parts[0];
+            var browsing = parts.length === 2;
+            if (item.path.indexOf(searchpath) === -1) {
+              // search path not part of item path
+              add = false;
+            }
+            if (browsing) {
+              // flat search
+              searchpath = searchpath.slice(-1) !== '/' ? searchpath + '/' : searchpath;
+              if (item.path.split('/').length !== searchpath.split('/').length) {
+                // not same number of path parts, so not same hirarchy
+                add = false;
+              }
+            }
+          }
+        });
+        if (add) {
+          results_.push(item);
+        }
+
+      });
+
+      return results_;
+    };
+
     beforeEach(function() {
       this.server = sinon.fakeServer.create();
       this.server.autoRespond = true;
 
       function getQueryVariable(url, variable) {
+        url = decodeURIComponent(url);
         var query = url.split('?')[1];
         if (query === undefined) {
           return null;
@@ -55,13 +105,18 @@ define([
         var vars = query.split('&');
         for (var i = 0; i < vars.length; i += 1) {
           var pair = vars[i].split('=');
-          if (decodeURIComponent(pair[0]) === variable) {
-            return decodeURIComponent(pair[1]);
+          if (pair[0] === variable) {
+            try {
+              return JSON.parse(pair[1]);
+            } catch (e) {
+              return pair[1];
+            }
           }
         }
-        return null;
+        return undefined;
       }
-      this.server.respondWith(/relateditems-test.json/, function(xhr, id) {
+
+      this.server.respondWith(/relateditems-test.json/, function(xhr) {
 
         var addUrls = function(list) {
           /* add getURL value */
@@ -75,92 +130,22 @@ define([
         addUrls(folder1);
         addUrls(folder2);
 
-        searchables = root.concat(folder1).concat(folder2);
-
         // grab the page number and number of items per page -- note, page is 1-based from Select2
         var batch = getQueryVariable(xhr.url, 'batch');
         var page = 1;
-        var pageSize = 10;
+        var pageSize = 100;
         if (batch) {
-          batch = $.parseJSON(batch);
           page = batch.page;
           pageSize = batch.size;
         }
         page = page - 1;
 
         var query = getQueryVariable(xhr.url, 'query');
-        var path = null;
-        var term = '';
-        if (query) {
-          query = $.parseJSON(query);
-          for (var i = 0; i < query.criteria.length; i = i + 1) {
-            var criteria = query.criteria[i];
-            if (criteria.i === 'path') {
-              path = criteria.v.split('::')[0];
-            } else if (criteria.i === 'is_folderish') {
-              term = criteria;
-            } else {
-              term = criteria.v;
-            }
-          }
-        }
-
-        var results = [];
-
-        function search(items, term) {
-          results = [];
-          if (term === undefined) {
-            return searchables;
-          }
-          _.each(items, function(item) {
-            var q;
-            var keys = (item.UID + ' ' + item.Title + ' ' + item.path + ' ' + item.portal_type).toLowerCase();
-            if (typeof(term) === 'object') {
-              if (term.i === 'is_folderish') {
-                if (item.is_folderish) {
-                  results.push(item);
-                }
-              } else {
-                for (var i = 0; i < term.length; i = i + 1) {
-                  q = term[i].toLowerCase();
-                  if (keys.indexOf(q) > -1) {
-                    results.push(item);
-                    break;
-                  }
-                }
-              }
-            } else {
-              q = term.toLowerCase().slice(0, -1);  // "*" removed
-              if (keys.indexOf(q) > -1) {
-                results.push(item);
-              }
-            }
-          });
-        }
 
-        function browse(items, q, p) {
-          results = [];
-          var path = p;
-          // var path = p.substring(0, p.length - 1);
-          // var splitPath = path.split('/');
-          var fromPath = [];
-          _.each(items, function(item) {
-            var itemSplit = item.path.split('/');
-            // if (item.path.indexOf(path) === 0 && itemSplit.length - 1 === splitPath.length) {  // search recursively
-            if (item.path.indexOf(path) === 0) {
-              fromPath.push(item);
-            }
-          });
-          if (q === undefined) {
-            return fromPath;
-          }
-          search(fromPath, q);
-        }
-        if (path) {
-          browse(searchables, term, path);
-        } else {
-          search(searchables, term);
-        }
+        var results = search(
+            root.concat(folder1).concat(folder2),
+            query.criteria
+        );
 
         xhr.respond(200, { 'Content-Type': 'application/json' },
           JSON.stringify({
@@ -177,21 +162,6 @@ define([
       $('.select2-sizer, .select2-drop').remove();
     });
 
-    // test cases
-    // - [x] initialize pattern
-    // - [x] click on browse opens result list
-    // - [x] click on search opens result list
-    // - [x] click on browse with already selected result items opens result list
-    // - [x] click on search with already selected result items opens result list
-    // - [ ] browse to item and select it
-    // - [x] selected item is removed from result list
-    // - [ ] don't allow to select items which are not selectable
-    // - [ ] don't show non-selectable and non folderish items
-    // - [x] only search in current path
-    // - [x] search item and select it
-    // - [x] deselect an item from result list
-    // - [x] selection from favorites opens path
-
     var initializePattern = function (options) {
       options = options || {};
       options.vocabularyUrl = '/relateditems-test.json';
@@ -206,6 +176,7 @@ define([
 
     };
 
+
     it('test initialize', function() {
 
       initializePattern();
@@ -215,35 +186,86 @@ define([
       expect($('.pattern-relateditems-container .toolbar .path-wrapper'), $container).to.have.length(1);
     });
 
+
+    it('auto roundtrip', function () {
+      initializePattern({'selectableTypes': ['Image', 'Folder'], 'pageSize': 100});
+      var clock = sinon.useFakeTimers();
+      var $input;
+
+      // open up result list by clicking into search field
+      $('.select2-search-field input.select2-input').click();
+      clock.tick(1000);
+
+      // Only Images and Folders should be shown.
+      expect($('.pattern-relateditems-result-select')).to.have.length(5);
+
+      // Browse into second folder which contains images
+      $('.pattern-relateditems-result-browse')[1].click();
+      clock.tick(1000);
+
+      // 1 "One level up" and 2 images
+      expect($('.pattern-relateditems-result-select')).to.have.length(3);
+      expect($('.pattern-relateditems-result-select')[0].text).to.contain('One level up');
+
+      // Select first image
+      $('a.pattern-relateditems-result-select')[1].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID17');
+
+      // Browse one level up
+      $('.select2-search-field input.select2-input').click();
+      clock.tick(1000);
+      $('a.pattern-relateditems-result-select')[0].click();
+      clock.tick(1000);
+
+      // Again, 5 items on root.
+      expect($('.pattern-relateditems-result-select')).to.have.length(5);
+
+      // Input a search term and enter search mode
+      $input = $('.select2-search-field input.select2-input');
+      $input.click().val('folder2');
+      var keyup = $.Event('keyup-change');
+      $input.trigger(keyup);
+      clock.tick(1000);
+
+      // Searching for folder 2 brings up 2 items: folder2 itself and the not-yet-selected image.
+      expect($('.pattern-relateditems-result-select')).to.have.length(2);
+
+      // We can even browse into folders in search mode
+      $('.pattern-relateditems-result-browse')[0].click();
+      clock.tick(1000);
+
+      // Being in folder 2, we see again two items...
+      expect($('.pattern-relateditems-result-select')).to.have.length(2);
+      expect($('.pattern-relateditems-result-select')[0].text).to.contain('One level up');
+
+      // Selecting the image will add it to the selected items.
+      $('a.pattern-relateditems-result-select')[1].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID17,UID18');
+
+    });
+
+
     it('browse roundtrip', function () {
-      var pattern = initializePattern();
+      initializePattern({'mode': 'browse', 'selectableTypes': ['Image'], 'pageSize': 100});
       var clock = sinon.useFakeTimers();
       var $input;
 
+
       // open up result list by clicking on "browse"
       $('.mode.browse', $container).click();
       clock.tick(1000);
 
       // result list must have expected length
-      expect($('.pattern-relateditems-result-select')).to.have.length(16);
+      // Only Images and Folders.
+      expect($('.pattern-relateditems-result-select')).to.have.length(5);
 
-      // compare result list with test data
-      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
-        return $(el).text().trim();
-      });
-      stringtext = _.sortBy(stringtext);
-
-      // ... compare the whole list, sorted
-      expect(stringtext.length).to.be.equal(searchables.length);
-      _.sortBy(searchables, 'Title').map(function (el, index) {
-        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
-      });
 
       // PT 2
 
       // select one element
-      $('a.pattern-relateditems-result-select')[0].click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID1');
+      $('a.pattern-relateditems-result-select')[2].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID8');
+
 
       // PT 3
 
@@ -252,15 +274,15 @@ define([
       clock.tick(1000);
 
       // result list must have expected length
-      expect($('.pattern-relateditems-result-select')).to.have.length(15);
+      expect($('.pattern-relateditems-result-select')).to.have.length(4);
 
       // add another one
-      $('a.pattern-relateditems-result-select')[0].click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
+      $('a.pattern-relateditems-result-select')[2].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID8,UID9');
 
       // remove first one
       $($('a.select2-search-choice-close')[0]).click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID2');
+      expect($('input.pat-relateditems').val()).to.be.equal('UID9');
 
       // search for...
       $input = $('.select2-search-field input.select2-input');
@@ -268,16 +290,17 @@ define([
       var keyup = $.Event('keyup-change');
       $input.trigger(keyup);
       clock.tick(1000);
-      expect($('.pattern-relateditems-result-select')).to.have.length(3);
+      expect($('.pattern-relateditems-result-select')).to.have.length(2);
 
       // add first from result
-      $('a.pattern-relateditems-result-select')[0].click();
-      expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID8');
+      $('a.pattern-relateditems-result-select')[1].click();
+      expect($('input.pat-relateditems').val()).to.be.equal('UID9,UID10');
 
     });
 
+
     it('search roundtrip', function () {
-      var pattern = initializePattern({'selectableTypes': ['Page']});
+      initializePattern({'mode': 'search', 'selectableTypes': ['Page'], 'pageSize': 100});
       var clock = sinon.useFakeTimers();
       var $input;
 
@@ -288,45 +311,32 @@ define([
       // result list must have expected length
       expect($('.pattern-relateditems-result-select')).to.have.length(11);
 
-      // compare result list with test data
-      var stringtext = $('a.pattern-relateditems-result-select').map(function (index, el) {
-        return $(el).text().trim();
-      });
-      stringtext = _.sortBy(stringtext);
-
-      // ... compare the whole list, sorted
-      var mySearchables = searchables.filter(function (item) {
-        return item.portal_type === 'Page';
-      });
-      expect(stringtext.length).to.be.equal(mySearchables.length);
-      _.sortBy(mySearchables, 'Title').map(function (el, index) {
-        expect(stringtext[index].indexOf(el.Title)).not.equal(-1);
-      });
 
-      // PT 2
+      //  // PT 2
 
-      // select one element
+      //  // select one element
       $('a.pattern-relateditems-result-select')[0].click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID1');
 
-      // PT 3
 
-      // click again on browse, should open up result list again, this time without 'UID1'
+      //  // PT 3
+
+      //  // click again on browse, should open up result list again, this time without 'UID1'
       $('.mode.search', $container).click();
       clock.tick(1000);
 
-      // result list must have expected length
+      //  // result list must have expected length
       expect($('.pattern-relateditems-result-select')).to.have.length(10);
 
-      // add another one
+      //  // add another one
       $('a.pattern-relateditems-result-select')[0].click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID1,UID2');
 
-      // remove first one
+      //  // remove first one
       $($('a.select2-search-choice-close')[0]).click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID2');
 
-      // search for...
+      //  // search for...
       $input = $('.select2-search-field input.select2-input');
       $input.click().val('document15');
       var keyup = $.Event('keyup-change');
@@ -334,7 +344,7 @@ define([
       clock.tick(1000);
       expect($('.pattern-relateditems-result-select')).to.have.length(1);
 
-      // add first from result
+      //  // add first from result
       $('a.pattern-relateditems-result-select')[0].click();
       expect($('input.pat-relateditems').val()).to.be.equal('UID2,UID15');
 


