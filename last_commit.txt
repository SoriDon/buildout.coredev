Repository: plone.rest


Branch: refs/heads/master
Date: 2019-07-24T18:54:31+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.rest/commit/64962c14712569a96e3d3f17dad4a97f9871ffe6

Black

Files changed:
M src/plone/__init__.py
M src/plone/rest/cors.py
M src/plone/rest/demo.py
M src/plone/rest/errors.py
M src/plone/rest/events.py
M src/plone/rest/interfaces.py
M src/plone/rest/negotiation.py
M src/plone/rest/patches.py
M src/plone/rest/service.py
M src/plone/rest/testing.py
M src/plone/rest/tests/test_cors.py
M src/plone/rest/tests/test_dexterity.py
M src/plone/rest/tests/test_dispatching.py
M src/plone/rest/tests/test_error_handling.py
M src/plone/rest/tests/test_named_services.py
M src/plone/rest/tests/test_negotiation.py
M src/plone/rest/tests/test_permissions.py
M src/plone/rest/tests/test_redirects.py
M src/plone/rest/tests/test_siteroot.py
M src/plone/rest/tests/test_traversal.py
M src/plone/rest/traverse.py
M src/plone/rest/zcml.py

b'diff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/src/plone/rest/cors.py b/src/plone/rest/cors.py\nindex 7694cb9..7fd230c 100644\n--- a/src/plone/rest/cors.py\n+++ b/src/plone/rest/cors.py\n@@ -20,7 +20,6 @@ def lookup_preflight_service_id(method):\n \n @implementer(ICORSPolicy)\n class CORSPolicy(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -37,8 +36,9 @@ def process_simple_request(self):\n         self._process_origin_and_credentials(origin)\n \n         if self.expose_headers:\n-            self.request.response.setHeader(\'Access-Control-Expose-Headers\',\n-                                            \', \'.join(self.expose_headers))\n+            self.request.response.setHeader(\n+                "Access-Control-Expose-Headers", ", ".join(self.expose_headers)\n+            )\n         return True\n \n     def process_preflight_request(self):\n@@ -50,14 +50,13 @@ def process_preflight_request(self):\n         if not origin:\n             return False\n \n-        method = self.request.getHeader(\'Access-Control-Request-Method\', None)\n+        method = self.request.getHeader("Access-Control-Request-Method", None)\n         if self.allow_methods and method not in self.allow_methods:\n             return False\n \n-        headers = self.request.getHeader(\'Access-Control-Request-Headers\',\n-                                         None)\n+        headers = self.request.getHeader("Access-Control-Request-Headers", None)\n         if headers:\n-            headers = headers.split(\',\')\n+            headers = headers.split(",")\n             allowed_headers = [h.lower() for h in self.allow_headers]\n             for header in headers:\n                 if header.strip().lower() not in allowed_headers:\n@@ -66,39 +65,36 @@ def process_preflight_request(self):\n         self._process_origin_and_credentials(origin)\n \n         if self.max_age:\n-            self.request.response.setHeader(\'Access-Control-Max-Age\',\n-                                            self.max_age)\n+            self.request.response.setHeader("Access-Control-Max-Age", self.max_age)\n \n-        self.request.response.setHeader(\'Access-Control-Allow-Methods\', method)\n+        self.request.response.setHeader("Access-Control-Allow-Methods", method)\n \n         if self.allow_headers:\n-            self.request.response.setHeader(\'Access-Control-Allow-Headers\',\n-                                            \', \'.join(self.allow_headers))\n+            self.request.response.setHeader(\n+                "Access-Control-Allow-Headers", ", ".join(self.allow_headers)\n+            )\n \n-        self.request.response.setHeader(\'Content-Length\', \'0\')\n+        self.request.response.setHeader("Content-Length", "0")\n         self.request.response.setStatus(200)\n         return True\n \n     def _allowed_origin(self):\n-        origin = self.request.getHeader(\'Origin\', None)\n+        origin = self.request.getHeader("Origin", None)\n         if not origin:\n             return False\n-        if origin not in self.allow_origin and self.allow_origin != [\'*\']:\n+        if origin not in self.allow_origin and self.allow_origin != ["*"]:\n             return False\n         return origin\n \n     def _process_origin_and_credentials(self, origin):\n         if self.allow_credentials:\n-            self.request.response.setHeader(\'Access-Control-Allow-Origin\',\n-                                            origin)\n-            self.request.response.setHeader(\'Access-Control-Allow-Credentials\',\n-                                            \'true\')\n-            if len(self.allow_origin) > 1 or self.allow_origin == [\'*\']:\n-                self.request.response.setHeader(\'Vary\', \'Origin\')\n-        elif self.allow_origin == [\'*\']:\n-            self.request.response.setHeader(\'Access-Control-Allow-Origin\', \'*\')\n+            self.request.response.setHeader("Access-Control-Allow-Origin", origin)\n+            self.request.response.setHeader("Access-Control-Allow-Credentials", "true")\n+            if len(self.allow_origin) > 1 or self.allow_origin == ["*"]:\n+                self.request.response.setHeader("Vary", "Origin")\n+        elif self.allow_origin == ["*"]:\n+            self.request.response.setHeader("Access-Control-Allow-Origin", "*")\n         else:\n-            self.request.response.setHeader(\'Access-Control-Allow-Origin\',\n-                                            origin)\n+            self.request.response.setHeader("Access-Control-Allow-Origin", origin)\n             if len(self.allow_origin) > 1:\n-                self.request.response.setHeader(\'Vary\', \'Origin\')\n+                self.request.response.setHeader("Vary", "Origin")\ndiff --git a/src/plone/rest/demo.py b/src/plone/rest/demo.py\nindex 184cb95..4622f97 100644\n--- a/src/plone/rest/demo.py\n+++ b/src/plone/rest/demo.py\n@@ -5,97 +5,66 @@\n \n \n class BaseService(Service):\n-\n     def render(self):\n         self.request.response.setHeader("Content-Type", "application/json")\n         return json.dumps(self.data(), indent=2, sort_keys=True)\n \n \n class Get(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'GET\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "GET", "id": self.context.id}\n \n \n class Post(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'POST\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "POST", "id": self.context.id}\n \n \n class Put(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'PUT\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "PUT", "id": self.context.id}\n \n \n class Delete(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'DELETE\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "DELETE", "id": self.context.id}\n \n \n class Patch(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'PATCH\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "PATCH", "id": self.context.id}\n \n \n class Options(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'OPTIONS\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "OPTIONS", "id": self.context.id}\n \n \n class NamedGet(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named get\'}\n+        return {"service": "named get"}\n \n \n class NamedPost(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named post\'}\n+        return {"service": "named post"}\n \n \n class NamedPut(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named put\'}\n+        return {"service": "named put"}\n \n \n class NamedDelete(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named delete\'}\n+        return {"service": "named delete"}\n \n \n class NamedPatch(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named patch\'}\n+        return {"service": "named patch"}\n \n \n class NamedOptions(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named options\'}\n+        return {"service": "named options"}\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex ab4f516..8c428f6 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -8,8 +8,10 @@\n from six.moves.urllib.parse import quote\n from six.moves.urllib.parse import unquote\n from zExceptions import NotFound\n+\n try:\n     from ZPublisher.HTTPRequest import WSGIRequest\n+\n     HAS_WSGI = True\n except ImportError:\n     HAS_WSGI = False\n@@ -37,7 +39,7 @@ def __call__(self):\n         # Write and lock the response in order to avoid later changes\n         # especially for Unauthorized exceptions.\n         response = self.request.response\n-        response.setHeader(\'Content-Type\', \'application/json\')\n+        response.setHeader("Content-Type", "application/json")\n         response.setStatus(type(exception), lock=1)\n         response.setBody(result, lock=1)\n \n@@ -51,33 +53,35 @@ def render_exception(self, exception):\n         name = type(exception).__name__\n         message = str(exception)\n         if six.PY2:\n-            name = name.decode(\'utf-8\')\n-            message = message.decode(\'utf-8\')\n-        result = {u\'type\': name, u\'message\': message}\n+            name = name.decode("utf-8")\n+            message = message.decode("utf-8")\n+        result = {u"type": name, u"message": message}\n \n         if isinstance(exception, NotFound):\n             # First check if a redirect from p.a.redirector exists\n             redirect_performed = self.attempt_redirect()\n             if redirect_performed:\n-                self.request.response.setBody(\'\', lock=1)\n+                self.request.response.setBody("", lock=1)\n                 return\n \n             # NotFound exceptions need special handling because their\n             # exception message gets turned into HTML by ZPublisher\n             url = self.request.getURL()\n-            result[u\'message\'] = u\'Resource not found: %s\' % url\n+            result[u"message"] = u"Resource not found: %s" % url\n \n         if getSecurityManager().checkPermission(ManagePortal, getSite()):\n-            result[u\'traceback\'] = self.render_traceback(exception)\n+            result[u"traceback"] = self.render_traceback(exception)\n \n         return result\n \n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            if HAS_WSGI and \\\n-               isinstance(self.request, WSGIRequest) and \\\n-               str(exception) == str(exc_obj):\n+            if (\n+                HAS_WSGI\n+                and isinstance(self.request, WSGIRequest)\n+                and str(exception) == str(exc_obj)\n+            ):\n                 # WSGIRequest may "upgrade" the exception,\n                 # resulting in a new exception which has\n                 # the same string representation as the\n@@ -86,11 +90,13 @@ def render_traceback(self, exception):\n                 # https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5#comments\n                 pass\n             else:\n-                return (u\'ERROR: Another exception happened before we could \'\n-                        u\'render the traceback.\')\n+                return (\n+                    u"ERROR: Another exception happened before we could "\n+                    u"render the traceback."\n+                )\n \n-        raw = \'\\n\'.join(traceback.format_tb(exc_traceback))\n-        return raw.strip().split(\'\\n\')\n+        raw = "\\n".join(traceback.format_tb(exc_traceback))\n+        return raw.strip().split("\\n")\n \n     def find_redirect_if_view_or_service(self, old_path_elements, storage):\n         """Find redirect for URLs like:\n@@ -124,7 +130,7 @@ def find_redirect_if_view_or_service(self, old_path_elements, storage):\n         splitpoint = len(old_path_elements)\n \n         while splitpoint > 1:\n-            possible_obj_path = \'/\'.join(old_path_elements[:splitpoint])\n+            possible_obj_path = "/".join(old_path_elements[:splitpoint])\n             remainder = old_path_elements[splitpoint:]\n             new_path = storage.get(possible_obj_path)\n \n@@ -133,7 +139,7 @@ def find_redirect_if_view_or_service(self, old_path_elements, storage):\n                     # New URL would match originally requested URL.\n                     # Lets not cause a redirect loop.\n                     return None\n-                return new_path + \'/\' + \'/\'.join(remainder)\n+                return new_path + "/" + "/".join(remainder)\n \n             splitpoint -= 1\n \n@@ -156,13 +162,13 @@ def attempt_redirect(self):\n         try:\n             old_path_elements = self.request.physicalPathFromURL(url)\n         except ValueError:  # pragma: no cover\n-            return False    # pragma: no cover\n+            return False  # pragma: no cover\n \n         storage = queryUtility(IRedirectionStorage)\n         if storage is None:\n             return False\n \n-        old_path = \'/\'.join(old_path_elements)\n+        old_path = "/".join(old_path_elements)\n \n         # First lets try with query string in cases or content migration\n \n@@ -174,7 +180,7 @@ def attempt_redirect(self):\n             # if we matched on the query_string we don\'t want to include it\n             # in redirect\n             if new_path:\n-                query_string = \'\'\n+                query_string = ""\n \n         if not new_path:\n             new_path = storage.get(old_path)\n@@ -182,8 +188,7 @@ def attempt_redirect(self):\n         # Attempt our own strategy at finding redirects for named REST\n         # services, views or templates.\n         if not new_path:\n-            new_path = self.find_redirect_if_view_or_service(\n-                old_path_elements, storage)\n+            new_path = self.find_redirect_if_view_or_service(old_path_elements, storage)\n \n         if not new_path:\n             return False\n@@ -194,8 +199,7 @@ def attempt_redirect(self):\n             # avoid double quoting\n             url_path = unquote(url.path)\n             url_path = quote(url_path)\n-            url = urllib.parse.SplitResult(\n-                *(url[:2] + (url_path, ) + url[3:])).geturl()\n+            url = urllib.parse.SplitResult(*(url[:2] + (url_path,) + url[3:])).geturl()\n         else:\n             url = self.request.physicalPathToURL(new_path)\n \n@@ -207,7 +211,7 @@ def attempt_redirect(self):\n         # with 308 Permanent Redirect, which instructs the client to NOT\n         # switch the method (if the original request was a POST, it should\n         # re-POST to the new URL from the Location header).\n-        if self.request.method.upper() == \'GET\':\n+        if self.request.method.upper() == "GET":\n             status = 301\n         else:\n             status = 308\n@@ -219,7 +223,9 @@ def attempt_redirect(self):\n     def _url(self):\n         """Get the current, canonical URL\n         """\n-        return self.request.get(\'ACTUAL_URL\',\n-            self.request.get(\'VIRTUAL_URL\',  # noqa\n-                   self.request.get(\'URL\',   # noqa\n-                     None)))                 # noqa\n+        return self.request.get(\n+            "ACTUAL_URL",\n+            self.request.get(\n+                "VIRTUAL_URL", self.request.get("URL", None)  # noqa  # noqa\n+            ),\n+        )  # noqa\ndiff --git a/src/plone/rest/events.py b/src/plone/rest/events.py\nindex 527a671..f22f543 100644\n--- a/src/plone/rest/events.py\n+++ b/src/plone/rest/events.py\n@@ -10,14 +10,13 @@ def mark_as_api_request(event):\n        actual request method and Accept header.\n     """\n     request = event.request\n-    method = request.get(\'REQUEST_METHOD\', \'GET\')\n-    if method == \'OPTIONS\' and request.getHeader(\'Origin\', False):\n-        preflighted_method = request.getHeader(\n-            \'Access-Control-Request-Method\', None)\n+    method = request.get("REQUEST_METHOD", "GET")\n+    if method == "OPTIONS" and request.getHeader("Origin", False):\n+        preflighted_method = request.getHeader("Access-Control-Request-Method", None)\n         service_id = lookup_preflight_service_id(preflighted_method)\n         request._rest_cors_preflight = True\n     else:\n-        accept = request.getHeader(\'Accept\', \'text/html\')\n+        accept = request.getHeader("Accept", "text/html")\n         service_id = lookup_service_id(method, accept)\n         request._rest_cors_preflight = False\n \ndiff --git a/src/plone/rest/interfaces.py b/src/plone/rest/interfaces.py\nindex d5a2829..963969b 100644\n--- a/src/plone/rest/interfaces.py\n+++ b/src/plone/rest/interfaces.py\n@@ -16,6 +16,7 @@ class ICORSPolicy(Interface):\n     """Provides methods for processing simple and preflight CORS requests by\n        adding access control headers.\n     """\n+\n     def process_simple_request():\n         """Process a simple request"""\n \ndiff --git a/src/plone/rest/negotiation.py b/src/plone/rest/negotiation.py\nindex ffc6231..15423b4 100644\n--- a/src/plone/rest/negotiation.py\n+++ b/src/plone/rest/negotiation.py\n@@ -10,10 +10,10 @@ def parse_accept_header(accept):\n        of media type tuples.\n     """\n     media_types = []\n-    for media_range in accept.split(\',\'):\n-        media_type = media_range.split(\';\')[0].strip()\n-        if \'/\' in media_type:\n-            type_, subtype = media_type.split(\'/\')\n+    for media_range in accept.split(","):\n+        media_type = media_range.split(";")[0].strip()\n+        if "/" in media_type:\n+            type_, subtype = media_type.split("/")\n             media_types.append((type_, subtype))\n     return media_types\n \n@@ -31,10 +31,10 @@ def lookup_service_id(method, accept):\n     subtypes = types.get(type_, {})\n     if subtype in subtypes:\n         return subtypes[subtype]\n-    elif \'*\' in subtypes:\n-        return subtypes[\'*\']\n-    if \'*\' in types:\n-        return types[\'*\'][\'*\']\n+    elif "*" in subtypes:\n+        return subtypes["*"]\n+    if "*" in types:\n+        return types["*"]["*"]\n     return None\n \n \n@@ -42,7 +42,7 @@ def register_service(method, media_type):\n     """Register a service for the given request method and media type and\n        return it\'s service id.\n     """\n-    service_id = u\'{}_{}_{}_\'.format(method, media_type[0], media_type[1])\n+    service_id = u"{}_{}_{}_".format(method, media_type[0], media_type[1])\n     types = _services.setdefault(method, {})\n     subtypes = types.setdefault(media_type[0], {})\n     subtypes[media_type[1]] = service_id\ndiff --git a/src/plone/rest/patches.py b/src/plone/rest/patches.py\nindex f4cb2e9..c28dfac 100644\n--- a/src/plone/rest/patches.py\n+++ b/src/plone/rest/patches.py\n@@ -15,7 +15,7 @@ def __before_publishing_traverse__(self, arg1, arg2=None):\n     return self._old___before_publishing_traverse__(arg1, arg2)\n \n \n-PERMANENT_REDIRECT = {308: \'Permanent Redirect\'}\n+PERMANENT_REDIRECT = {308: "Permanent Redirect"}\n \n \n def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n@@ -24,7 +24,7 @@ def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n \n     This is needed for up to and including Plone 5.1.\n     """\n-    status_reasons = getattr(scope, \'status_reasons\', {})\n+    status_reasons = getattr(scope, "status_reasons", {})\n     if 308 in status_reasons:\n         # Already present in zExceptions >= 3.2 / Zope >= 4.0a1 / Plone 5.2\n         return\n@@ -33,10 +33,10 @@ def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n     status_reasons.update(PERMANENT_REDIRECT)\n \n     # Update the reverse mapping\n-    status_codes = getattr(scope, \'status_codes\', {})\n+    status_codes = getattr(scope, "status_codes", {})\n     key, val = PERMANENT_REDIRECT.items()[0]\n \n-    status_codes[\'\'.join(val.split(\' \')).lower()] = key\n+    status_codes["".join(val.split(" ")).lower()] = key\n     status_codes[val.lower()] = key\n     status_codes[key] = key\n     status_codes[str(key)] = key\ndiff --git a/src/plone/rest/service.py b/src/plone/rest/service.py\nindex 2b8f939..351b111 100644\n--- a/src/plone/rest/service.py\n+++ b/src/plone/rest/service.py\n@@ -7,7 +7,6 @@\n \n @implementer(IService)\n class Service(object):\n-\n     def __call__(self):\n         policy = queryMultiAdapter((self.context, self.request), ICORSPolicy)\n         if policy is not None:\n@@ -28,6 +27,6 @@ def render(self):\n     def __getattribute__(self, name):\n         # Preflight requests need to be publicly accessible since they don\'t\n         # include credentials\n-        if name == \'__roles__\' and self.request._rest_cors_preflight:\n-            return [\'Anonymous\']\n+        if name == "__roles__" and self.request._rest_cors_preflight:\n+            return ["Anonymous"]\n         return super(Service, self).__getattribute__(name)\ndiff --git a/src/plone/rest/testing.py b/src/plone/rest/testing.py\nindex 0fb5292..05268d9 100644\n--- a/src/plone/rest/testing.py\n+++ b/src/plone/rest/testing.py\n@@ -15,37 +15,28 @@ class PloneRestLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.rest\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.rest,\n-            context=configurationContext\n-        )\n-        xmlconfig.file(\n-            \'testing.zcml\',\n-            plone.rest,\n-            context=configurationContext\n-        )\n+\n+        xmlconfig.file("configure.zcml", plone.rest, context=configurationContext)\n+        xmlconfig.file("testing.zcml", plone.rest, context=configurationContext)\n \n \n PLONE_REST_FIXTURE = PloneRestLayer()\n PLONE_REST_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_REST_FIXTURE,),\n-    name="PloneRestLayer:Integration"\n+    bases=(PLONE_REST_FIXTURE,), name="PloneRestLayer:Integration"\n )\n PLONE_REST_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_REST_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestLayer:Functional"\n+    bases=(PLONE_REST_FIXTURE, z2.ZSERVER_FIXTURE), name="PloneRestLayer:Functional"\n )\n \n \n class InternalServerErrorService(Service):\n-\n     def __call__(self):\n         from six.moves.urllib.error import HTTPError\n+\n         raise HTTPError(\n-            \'http://nohost/plone/500-internal-server-error\',\n+            "http://nohost/plone/500-internal-server-error",\n             500,\n-            \'InternalServerError\',\n+            "InternalServerError",\n             {},\n-            None\n+            None,\n         )\ndiff --git a/src/plone/rest/tests/test_cors.py b/src/plone/rest/tests/test_cors.py\nindex 28d4723..964ea1d 100644\n--- a/src/plone/rest/tests/test_cors.py\n+++ b/src/plone/rest/tests/test_cors.py\n@@ -19,22 +19,21 @@ class TestCORSPolicy(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = self.layer[\'request\']\n+        self.request = self.layer["request"]\n         self.response = self.request.response\n \n     def get_policy(self, origin=None, method=None, headers=None):\n         request = self.request\n         if origin:\n-            request.environ[\'HTTP_ORIGIN\'] = origin\n+            request.environ["HTTP_ORIGIN"] = origin\n         if method:\n-            request.environ[\'HTTP_ACCESS_CONTROL_REQUEST_METHOD\'] = method\n+            request.environ["HTTP_ACCESS_CONTROL_REQUEST_METHOD"] = method\n         if headers:\n-            request.environ[\'HTTP_ACCESS_CONTROL_REQUEST_HEADERS\'] = headers\n+            request.environ["HTTP_ACCESS_CONTROL_REQUEST_HEADERS"] = headers\n         policy = CORSPolicy(None, request)\n-        policy.allow_origin = [\'*\']\n+        policy.allow_origin = ["*"]\n         policy.allow_credentials = False\n-        policy.allow_methods = [\n-            \'DELETE\', \'GET\', \'OPTIONS\', \'PATCH\', \'POST\', \'PUT\']\n+        policy.allow_methods = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]\n         policy.allow_headers = []\n         policy.expose_headers = []\n         policy.max_age = None\n@@ -43,171 +42,154 @@ def get_policy(self, origin=None, method=None, headers=None):\n     def test_simple_cors_without_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy()\n         self.assertFalse(policy.process_simple_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_simple_cors_with_wrong_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy(origin="http://wrong.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         self.assertFalse(policy.process_simple_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_simple_cors_adds_wildcard_allow_origin(self):\n         policy = self.get_policy(origin="http://example.net")\n         self.assertTrue(policy.process_simple_request())\n-        self.assertEqual(\n-            \'*\', self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual("*", self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_simple_cors_adds_matching_allow_origin(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n \n     def test_simple_cors_adds_allow_credentials(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_simple_cors_adds_origin_when_supporting_credentials(self):\n         policy = self.get_policy(origin="http://example.net")\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_simple_cors_adds_vary_when_allowing_multiple_origins(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.allow_origin = [\'http://some.host\', \'http://example.net\']\n+        policy.allow_origin = ["http://some.host", "http://example.net"]\n         self.assertTrue(policy.process_simple_request())\n-        self.assertEqual(\'Origin\', self.response.getHeader(\'Vary\'))\n+        self.assertEqual("Origin", self.response.getHeader("Vary"))\n \n     def test_simple_cors_adds_exposed_headers(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.expose_headers = [\'Content-Length\', \'X-My-Header\']\n+        policy.expose_headers = ["Content-Length", "X-My-Header"]\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'Content-Length, X-My-Header\',\n-            self.response.getHeader(\'Access-Control-Expose-Headers\'))\n+            "Content-Length, X-My-Header",\n+            self.response.getHeader("Access-Control-Expose-Headers"),\n+        )\n \n     def test_preflight_cors_without_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy()\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_with_wrong_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy(origin="http://wrong.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_with_wrong_method_doesnt_add_ac_headers(self):\n         policy = self.get_policy(origin="http://example.net", method="LOCK")\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_with_wrong_header_doesnt_add_ac_headers(self):\n-        policy = self.get_policy(\n-            origin="http://example.net", headers=\'X-Secret\')\n+        policy = self.get_policy(origin="http://example.net", headers="X-Secret")\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_adds_wildcard_allow_origin(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'*\', self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual("*", self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_adds_matching_allow_origin(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_origin = [\'http://example.net\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_origin = ["http://example.net"]\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n \n     def test_preflight_cors_adds_allow_credentials(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_origin = [\'http://example.net\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_origin = ["http://example.net"]\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_preflight_cors_adds_origin_when_supporting_credentials(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_preflight_cors_adds_vary_when_allowing_multiple_origins(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_origin = [\'http://some.host\', \'http://example.net\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_origin = ["http://some.host", "http://example.net"]\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\'Origin\', self.response.getHeader(\'Vary\'))\n+        self.assertEqual("Origin", self.response.getHeader("Vary"))\n \n     def test_preflight_cors_adds_max_age(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.max_age = \'3600\'\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.max_age = "3600"\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'3600\', self.response.getHeader(\'Access-Control-Max-Age\'))\n+        self.assertEqual("3600", self.response.getHeader("Access-Control-Max-Age"))\n \n     def test_preflight_cors_adds_allow_methods(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'GET\', self.response.getHeader(\'Access-Control-Allow-Methods\'))\n+        self.assertEqual("GET", self.response.getHeader("Access-Control-Allow-Methods"))\n \n     def test_preflight_cors_adds_allow_methods_if_unrestriced(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         policy.allow_methods = None\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'GET\', self.response.getHeader(\'Access-Control-Allow-Methods\'))\n+        self.assertEqual("GET", self.response.getHeader("Access-Control-Allow-Methods"))\n \n     def test_preflight_cors_adds_allow_headers(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_headers = [\'X-Allowed\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_headers = ["X-Allowed"]\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'X-Allowed\',\n-            self.response.getHeader(\'Access-Control-Allow-Headers\'))\n+            "X-Allowed", self.response.getHeader("Access-Control-Allow-Headers")\n+        )\n \n     def test_preflight_cors_sets_content_length_zero(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\'0\', self.response.getHeader(\'Content-Length\'))\n+        self.assertEqual("0", self.response.getHeader("Content-Length"))\n \n     def test_preflight_cors_sets_status_code_200(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(200, self.response.getStatus())\n \n@@ -217,50 +199,47 @@ class TestCORS(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone\', method=\'GET\', headers={}):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        request.environ[\'HTTP_ORIGIN\'] = \'http://example.net\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(self, path="/plone", method="GET", headers={}):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["REQUEST_METHOD"] = method\n+        request.environ["HTTP_ORIGIN"] = "http://example.net"\n         request.environ.update(headers)\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_preflight_cors_is_accessible_anonymously(self):\n         headers = {}\n-        headers[\'HTTP_ACCESS_CONTROL_REQUEST_METHOD\'] = \'POST\'\n+        headers["HTTP_ACCESS_CONTROL_REQUEST_METHOD"] = "POST"\n         try:\n-            self.traverse(method=\'OPTIONS\', headers=headers)\n+            self.traverse(method="OPTIONS", headers=headers)\n         except Unauthorized:\n-            self.fail(\'Service not accessible for preflight.\')\n+            self.fail("Service not accessible for preflight.")\n \n     def test_simple_cors_gets_processed(self):\n         headers = {}\n-        headers[\'HTTP_ACCEPT\'] = \'application/json\'\n-        obj = self.traverse(method=\'GET\', headers=headers)\n+        headers["HTTP_ACCEPT"] = "application/json"\n+        obj = self.traverse(method="GET", headers=headers)\n         obj()\n         self.assertEqual(\n-            \'*\',\n-            self.request.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "*", self.request.response.getHeader("Access-Control-Allow-Origin")\n+        )\n \n     def test_preflight_request_without_cors_policy_doesnt_render_service(self):\n         # "Unregister" the current CORS policy\n         class NoCORSPolicy(object):\n             def __new__(cls, context, request):\n                 return None\n+\n         pushGlobalRegistry(self.portal)\n-        provideAdapter(\n-            NoCORSPolicy, (Interface, IDefaultBrowserLayer), ICORSPolicy)\n-\n-        headers = {\n-            \'HTTP_ACCESS_CONTROL_REQUEST_METHOD\': \'GET\',\n-            \'HTTP_ACCEPT\': \'*/*\',\n-        }\n-        service = self.traverse(method=\'OPTIONS\', headers=headers)\n-        self.assertTrue(service() is None, \'Should return None\')\n+        provideAdapter(NoCORSPolicy, (Interface, IDefaultBrowserLayer), ICORSPolicy)\n+\n+        headers = {"HTTP_ACCESS_CONTROL_REQUEST_METHOD": "GET", "HTTP_ACCEPT": "*/*"}\n+        service = self.traverse(method="OPTIONS", headers=headers)\n+        self.assertTrue(service() is None, "Should return None")\n \n         popGlobalRegistry(self.portal)\ndiff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex a31a730..288ae48 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -23,232 +23,225 @@ class TestDexterityServiceEndpoints(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.document = self.portal["doc1"]\n         transaction.commit()\n \n     def test_dexterity_document_get(self):\n         response = requests.get(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_document_post(self):\n         response = requests.post(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'POST\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"POST", response.json().get("method"))\n \n     def test_dexterity_document_put(self):\n         response = requests.put(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PUT\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"PUT", response.json().get("method"))\n \n     def test_dexterity_document_patch(self):\n         response = requests.patch(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PATCH\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"PATCH", response.json().get("method"))\n \n     def test_dexterity_document_delete(self):\n         response = requests.delete(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'DELETE\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"DELETE", response.json().get("method"))\n \n     def test_dexterity_document_options(self):\n         response = requests.options(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'OPTIONS\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"OPTIONS", response.json().get("method"))\n \n     def test_dexterity_folder_get(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n \n         response = requests.get(\n             self.portal.folder.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'folder\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"folder", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_news_item_get(self):\n-        self.portal.invokeFactory(\'News Item\', id=\'newsitem\')\n-        self.portal.newsitem.title = \'My News Item\'\n-        self.portal.newsitem.description = u\'This is a news item\'\n+        self.portal.invokeFactory("News Item", id="newsitem")\n+        self.portal.newsitem.title = "My News Item"\n+        self.portal.newsitem.description = u"This is a news item"\n         self.portal.newsitem.text = RichTextValue(\n-            u"Lorem ipsum",\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem ipsum", "text/plain", "text/html"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        fd = open(image_file, \'rb\')\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        fd = open(image_file, "rb")\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=fd.read(),\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=fd.read(), contentType="image/png", filename=u"image.png"\n         )\n         fd.close()\n-        self.portal.newsitem.image_caption = u\'This is an image caption.\'\n+        self.portal.newsitem.image_caption = u"This is an image caption."\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.newsitem.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'newsitem\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"newsitem", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_event_get(self):\n-        self.portal.invokeFactory(\'Event\', id=\'event\')\n-        self.portal.event.title = \'Event\'\n-        self.portal.event.description = u\'This is an event\'\n+        self.portal.invokeFactory("Event", id="event")\n+        self.portal.event.title = "Event"\n+        self.portal.event.description = u"This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.event.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'event\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"event", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_link_get(self):\n-        self.portal.invokeFactory(\'Link\', id=\'link\')\n-        self.portal.link.title = \'My Link\'\n-        self.portal.link.description = u\'This is a link\'\n-        self.portal.remoteUrl = \'http://plone.org\'\n+        self.portal.invokeFactory("Link", id="link")\n+        self.portal.link.title = "My Link"\n+        self.portal.link.description = u"This is a link"\n+        self.portal.remoteUrl = "http://plone.org"\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.link.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'link\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"link", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_file_get(self):\n-        self.portal.invokeFactory(\'File\', id=\'file\')\n-        self.portal.file.title = \'My File\'\n-        self.portal.file.description = u\'This is a file\'\n-        pdf_file = os.path.join(\n-            os.path.dirname(__file__), u\'file.pdf\'\n-        )\n-        fd = open(pdf_file, \'rb\')\n+        self.portal.invokeFactory("File", id="file")\n+        self.portal.file.title = "My File"\n+        self.portal.file.description = u"This is a file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        fd = open(pdf_file, "rb")\n         self.portal.file.file = NamedBlobFile(\n-            data=fd.read(),\n-            contentType=\'application/pdf\',\n-            filename=u\'file.pdf\'\n+            data=fd.read(), contentType="application/pdf", filename=u"file.pdf"\n         )\n         fd.close()\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file)\n         self.portal.file.file = RelationValue(file_id)\n         import transaction\n+\n         transaction.commit()\n \n         response = requests.get(\n             self.portal.file.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'file\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"file", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_image_get(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image\')\n-        self.portal.image.title = \'My Image\'\n-        self.portal.image.description = u\'This is an image\'\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        fd = open(image_file, \'rb\')\n+        self.portal.invokeFactory("Image", id="image")\n+        self.portal.image.title = "My Image"\n+        self.portal.image.description = u"This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        fd = open(image_file, "rb")\n         self.portal.image.image = NamedBlobImage(\n-            data=fd.read(),\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=fd.read(), contentType="image/png", filename=u"image.png"\n         )\n         fd.close()\n         import transaction\n+\n         transaction.commit()\n \n         response = requests.get(\n             self.portal.image.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'image\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"image", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_collection_get(self):\n-        self.portal.invokeFactory(\'Collection\', id=\'collection\')\n-        self.portal.collection.title = \'My Collection\'\n-        self.portal.collection.description = \\\n-            u\'This is a collection with two documents\'\n-        self.portal.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Document 2\'\n-        )\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.collection.title = "My Collection"\n+        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.collection.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'collection\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"collection", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\ndiff --git a/src/plone/rest/tests/test_dispatching.py b/src/plone/rest/tests/test_dispatching.py\nindex 171ed72..674e2f6 100644\n--- a/src/plone/rest/tests/test_dispatching.py\n+++ b/src/plone/rest/tests/test_dispatching.py\n@@ -12,7 +12,7 @@\n \n \n CREDS = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-INVALID_CREDS = (\'invalid\', \'password\')\n+INVALID_CREDS = ("invalid", "password")\n NO_CREDS = ()\n \n \n@@ -21,11 +21,11 @@ class DispatchingTestCase(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def validate(self, expectations, follow_redirects=False):\n         failures = []\n@@ -34,110 +34,113 @@ def validate(self, expectations, follow_redirects=False):\n             url = self.portal_url + path\n \n             response = requests.request(\n-                method, url,\n-                headers={\'Accept\': \'application/json\'},\n+                method,\n+                url,\n+                headers={"Accept": "application/json"},\n                 auth=creds,\n                 allow_redirects=follow_redirects,\n             )\n \n             if response.status_code != expected_status:\n-                request_args = (path, method, creds,\n-                                \'(follow_redirects=%s)\' % follow_redirects)\n+                request_args = (\n+                    path,\n+                    method,\n+                    creds,\n+                    "(follow_redirects=%s)" % follow_redirects,\n+                )\n                 actual_status = response.status_code\n                 failure = (request_args, expected_status, actual_status)\n                 failures.append(failure)\n \n         if failures:\n-            msg = \'\'\n+            msg = ""\n             for (request_args, expected_status, actual_status) in failures:\n-                msg += (\'\\n\'\n-                        \'Request:  %s\\n\'\n-                        \'Expected: %s\\n\'\n-                        \'Got:      %s\\n\' % (\n-                            request_args, expected_status, actual_status))\n+                msg += (\n+                    "\\n"\n+                    "Request:  %s\\n"\n+                    "Expected: %s\\n"\n+                    "Got:      %s\\n" % (request_args, expected_status, actual_status)\n+                )\n \n-            self.fail(\'The following assertions failed:\\n%s\' % msg)\n+            self.fail("The following assertions failed:\\n%s" % msg)\n \n \n class TestDispatchingSiteRoot(DispatchingTestCase):\n-\n     def test_site_root_with_creds(self):\n         expectations = [\n-            (\'/\', \'GET\', CREDS, 200),\n-            (\'/\', \'POST\', CREDS, 200),\n-            (\'/\', \'PUT\', CREDS, 200),\n-            (\'/\', \'PATCH\', CREDS, 200),\n-            (\'/\', \'DELETE\', CREDS, 200),\n-            (\'/\', \'OPTIONS\', CREDS, 200),\n+            ("/", "GET", CREDS, 200),\n+            ("/", "POST", CREDS, 200),\n+            ("/", "PUT", CREDS, 200),\n+            ("/", "PATCH", CREDS, 200),\n+            ("/", "DELETE", CREDS, 200),\n+            ("/", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_site_root_without_creds(self):\n         expectations = [\n-            (\'/\', \'GET\', NO_CREDS, 200),\n-            (\'/\', \'POST\', NO_CREDS, 401),\n-            (\'/\', \'PUT\', NO_CREDS, 401),\n-            (\'/\', \'PATCH\', NO_CREDS, 401),\n-            (\'/\', \'DELETE\', NO_CREDS, 401),\n-            (\'/\', \'OPTIONS\', NO_CREDS, 200),\n+            ("/", "GET", NO_CREDS, 200),\n+            ("/", "POST", NO_CREDS, 401),\n+            ("/", "PUT", NO_CREDS, 401),\n+            ("/", "PATCH", NO_CREDS, 401),\n+            ("/", "DELETE", NO_CREDS, 401),\n+            ("/", "OPTIONS", NO_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_site_root_invalid_creds(self):\n         expectations = [\n-            (\'/\', \'GET\', INVALID_CREDS, 200),\n-            (\'/\', \'POST\', INVALID_CREDS, 401),\n-            (\'/\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/\', \'OPTIONS\', INVALID_CREDS, 200),\n+            ("/", "GET", INVALID_CREDS, 200),\n+            ("/", "POST", INVALID_CREDS, 401),\n+            ("/", "PUT", INVALID_CREDS, 401),\n+            ("/", "PATCH", INVALID_CREDS, 401),\n+            ("/", "DELETE", INVALID_CREDS, 401),\n+            ("/", "OPTIONS", INVALID_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n \n class TestDispatchingNonExistentResource(DispatchingTestCase):\n-\n     def test_not_found_with_creds(self):\n         expectations = [\n-            (\'/not-found\', \'GET\', CREDS, 404),\n-            (\'/not-found\', \'POST\', CREDS, 404),\n-            (\'/not-found\', \'PUT\', CREDS, 404),\n-            (\'/not-found\', \'PATCH\', CREDS, 404),\n-            (\'/not-found\', \'DELETE\', CREDS, 404),\n-            (\'/not-found\', \'OPTIONS\', CREDS, 404),\n+            ("/not-found", "GET", CREDS, 404),\n+            ("/not-found", "POST", CREDS, 404),\n+            ("/not-found", "PUT", CREDS, 404),\n+            ("/not-found", "PATCH", CREDS, 404),\n+            ("/not-found", "DELETE", CREDS, 404),\n+            ("/not-found", "OPTIONS", CREDS, 404),\n         ]\n         self.validate(expectations)\n \n     def test_not_found_without_creds(self):\n         expectations = [\n-            (\'/not-found\', \'GET\', NO_CREDS, 404),\n-            (\'/not-found\', \'POST\', NO_CREDS, 404),\n-            (\'/not-found\', \'PUT\', NO_CREDS, 404),\n-            (\'/not-found\', \'PATCH\', NO_CREDS, 404),\n-            (\'/not-found\', \'DELETE\', NO_CREDS, 404),\n-            (\'/not-found\', \'OPTIONS\', NO_CREDS, 404),\n+            ("/not-found", "GET", NO_CREDS, 404),\n+            ("/not-found", "POST", NO_CREDS, 404),\n+            ("/not-found", "PUT", NO_CREDS, 404),\n+            ("/not-found", "PATCH", NO_CREDS, 404),\n+            ("/not-found", "DELETE", NO_CREDS, 404),\n+            ("/not-found", "OPTIONS", NO_CREDS, 404),\n         ]\n         self.validate(expectations)\n \n     def test_not_found_invalid_creds(self):\n         expectations = [\n-            (\'/not-found\', \'GET\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'POST\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'PUT\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'PATCH\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'DELETE\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'OPTIONS\', INVALID_CREDS, 404),\n+            ("/not-found", "GET", INVALID_CREDS, 404),\n+            ("/not-found", "POST", INVALID_CREDS, 404),\n+            ("/not-found", "PUT", INVALID_CREDS, 404),\n+            ("/not-found", "PATCH", INVALID_CREDS, 404),\n+            ("/not-found", "DELETE", INVALID_CREDS, 404),\n+            ("/not-found", "OPTIONS", INVALID_CREDS, 404),\n         ]\n         self.validate(expectations)\n \n \n class TestDispatchingDexterity(DispatchingTestCase):\n-\n     def setUp(self):\n         super(TestDispatchingDexterity, self).setUp()\n-        self.portal.invokeFactory(\'Folder\', id=\'private\')\n+        self.portal.invokeFactory("Folder", id="private")\n \n-        self.portal.invokeFactory(\'Folder\', id=\'public\')\n+        self.portal.invokeFactory("Folder", id="public")\n         public_folder = self.portal.public\n         wftool = getToolByName(self.portal, "portal_workflow")\n         wftool.doActionFor(public_folder, "publish")\n@@ -146,215 +149,214 @@ def setUp(self):\n \n     def test_private_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/private\', \'GET\', CREDS, 200),\n-            (\'/private\', \'POST\', CREDS, 200),\n-            (\'/private\', \'PUT\', CREDS, 200),\n-            (\'/private\', \'PATCH\', CREDS, 200),\n-            (\'/private\', \'DELETE\', CREDS, 200),\n-            (\'/private\', \'OPTIONS\', CREDS, 200),\n+            ("/private", "GET", CREDS, 200),\n+            ("/private", "POST", CREDS, 200),\n+            ("/private", "PUT", CREDS, 200),\n+            ("/private", "PATCH", CREDS, 200),\n+            ("/private", "DELETE", CREDS, 200),\n+            ("/private", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_private_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/private\', \'GET\', NO_CREDS, 401),\n-            (\'/private\', \'POST\', NO_CREDS, 401),\n-            (\'/private\', \'PUT\', NO_CREDS, 401),\n-            (\'/private\', \'PATCH\', NO_CREDS, 401),\n-            (\'/private\', \'DELETE\', NO_CREDS, 401),\n-            (\'/private\', \'OPTIONS\', NO_CREDS, 401),\n+            ("/private", "GET", NO_CREDS, 401),\n+            ("/private", "POST", NO_CREDS, 401),\n+            ("/private", "PUT", NO_CREDS, 401),\n+            ("/private", "PATCH", NO_CREDS, 401),\n+            ("/private", "DELETE", NO_CREDS, 401),\n+            ("/private", "OPTIONS", NO_CREDS, 401),\n         ]\n         self.validate(expectations)\n \n     def test_private_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/private\', \'GET\', INVALID_CREDS, 401),\n-            (\'/private\', \'POST\', INVALID_CREDS, 401),\n-            (\'/private\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/private\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/private\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/private\', \'OPTIONS\', INVALID_CREDS, 401),\n+            ("/private", "GET", INVALID_CREDS, 401),\n+            ("/private", "POST", INVALID_CREDS, 401),\n+            ("/private", "PUT", INVALID_CREDS, 401),\n+            ("/private", "PATCH", INVALID_CREDS, 401),\n+            ("/private", "DELETE", INVALID_CREDS, 401),\n+            ("/private", "OPTIONS", INVALID_CREDS, 401),\n         ]\n         self.validate(expectations)\n \n     def test_public_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/public\', \'GET\', CREDS, 200),\n-            (\'/public\', \'POST\', CREDS, 200),\n-            (\'/public\', \'PUT\', CREDS, 200),\n-            (\'/public\', \'PATCH\', CREDS, 200),\n-            (\'/public\', \'DELETE\', CREDS, 200),\n-            (\'/public\', \'OPTIONS\', CREDS, 200),\n+            ("/public", "GET", CREDS, 200),\n+            ("/public", "POST", CREDS, 200),\n+            ("/public", "PUT", CREDS, 200),\n+            ("/public", "PATCH", CREDS, 200),\n+            ("/public", "DELETE", CREDS, 200),\n+            ("/public", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_public_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/public\', \'GET\', NO_CREDS, 200),\n-            (\'/public\', \'POST\', NO_CREDS, 401),\n-            (\'/public\', \'PUT\', NO_CREDS, 401),\n-            (\'/public\', \'PATCH\', NO_CREDS, 401),\n-            (\'/public\', \'DELETE\', NO_CREDS, 401),\n-            (\'/public\', \'OPTIONS\', NO_CREDS, 200),\n+            ("/public", "GET", NO_CREDS, 200),\n+            ("/public", "POST", NO_CREDS, 401),\n+            ("/public", "PUT", NO_CREDS, 401),\n+            ("/public", "PATCH", NO_CREDS, 401),\n+            ("/public", "DELETE", NO_CREDS, 401),\n+            ("/public", "OPTIONS", NO_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_public_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/public\', \'GET\', INVALID_CREDS, 200),\n-            (\'/public\', \'POST\', INVALID_CREDS, 401),\n-            (\'/public\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/public\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/public\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/public\', \'OPTIONS\', INVALID_CREDS, 200),\n+            ("/public", "GET", INVALID_CREDS, 200),\n+            ("/public", "POST", INVALID_CREDS, 401),\n+            ("/public", "PUT", INVALID_CREDS, 401),\n+            ("/public", "PATCH", INVALID_CREDS, 401),\n+            ("/public", "DELETE", INVALID_CREDS, 401),\n+            ("/public", "OPTIONS", INVALID_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n \n class TestDispatchingRedirects(DispatchingTestCase):\n-\n     def setUp(self):\n         super(TestDispatchingRedirects, self).setUp()\n \n-        self.portal.invokeFactory(\'Folder\', id=\'private-old\')\n-        self.portal.manage_renameObject(\'private-old\', \'private-new\')\n+        self.portal.invokeFactory("Folder", id="private-old")\n+        self.portal.manage_renameObject("private-old", "private-new")\n \n-        self.portal.invokeFactory(\'Folder\', id=\'public-old\')\n-        public_folder = self.portal[\'public-old\']\n+        self.portal.invokeFactory("Folder", id="public-old")\n+        public_folder = self.portal["public-old"]\n         wftool = getToolByName(self.portal, "portal_workflow")\n         wftool.doActionFor(public_folder, "publish")\n-        self.portal.manage_renameObject(\'public-old\', \'public-new\')\n+        self.portal.manage_renameObject("public-old", "public-new")\n \n         transaction.commit()\n \n     def test_moved_private_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/private-old\', \'GET\', CREDS, 301),\n-            (\'/private-old\', \'POST\', CREDS, 308),\n-            (\'/private-old\', \'PUT\', CREDS, 308),\n-            (\'/private-old\', \'PATCH\', CREDS, 308),\n-            (\'/private-old\', \'DELETE\', CREDS, 308),\n-            (\'/private-old\', \'OPTIONS\', CREDS, 308),\n+            ("/private-old", "GET", CREDS, 301),\n+            ("/private-old", "POST", CREDS, 308),\n+            ("/private-old", "PUT", CREDS, 308),\n+            ("/private-old", "PATCH", CREDS, 308),\n+            ("/private-old", "DELETE", CREDS, 308),\n+            ("/private-old", "OPTIONS", CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/private-old\', \'GET\', CREDS, 200),\n-            (\'/private-old\', \'POST\', CREDS, 200),\n-            (\'/private-old\', \'PUT\', CREDS, 200),\n-            (\'/private-old\', \'PATCH\', CREDS, 200),\n-            (\'/private-old\', \'DELETE\', CREDS, 200),\n-            (\'/private-old\', \'OPTIONS\', CREDS, 200),\n+            ("/private-old", "GET", CREDS, 200),\n+            ("/private-old", "POST", CREDS, 200),\n+            ("/private-old", "PUT", CREDS, 200),\n+            ("/private-old", "PATCH", CREDS, 200),\n+            ("/private-old", "DELETE", CREDS, 200),\n+            ("/private-old", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_private_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/private-old\', \'GET\', NO_CREDS, 301),\n-            (\'/private-old\', \'POST\', NO_CREDS, 308),\n-            (\'/private-old\', \'PUT\', NO_CREDS, 308),\n-            (\'/private-old\', \'PATCH\', NO_CREDS, 308),\n-            (\'/private-old\', \'DELETE\', NO_CREDS, 308),\n-            (\'/private-old\', \'OPTIONS\', NO_CREDS, 308),\n+            ("/private-old", "GET", NO_CREDS, 301),\n+            ("/private-old", "POST", NO_CREDS, 308),\n+            ("/private-old", "PUT", NO_CREDS, 308),\n+            ("/private-old", "PATCH", NO_CREDS, 308),\n+            ("/private-old", "DELETE", NO_CREDS, 308),\n+            ("/private-old", "OPTIONS", NO_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/private-old\', \'GET\', NO_CREDS, 401),\n-            (\'/private-old\', \'POST\', NO_CREDS, 401),\n-            (\'/private-old\', \'PUT\', NO_CREDS, 401),\n-            (\'/private-old\', \'PATCH\', NO_CREDS, 401),\n-            (\'/private-old\', \'DELETE\', NO_CREDS, 401),\n-            (\'/private-old\', \'OPTIONS\', NO_CREDS, 401),\n+            ("/private-old", "GET", NO_CREDS, 401),\n+            ("/private-old", "POST", NO_CREDS, 401),\n+            ("/private-old", "PUT", NO_CREDS, 401),\n+            ("/private-old", "PATCH", NO_CREDS, 401),\n+            ("/private-old", "DELETE", NO_CREDS, 401),\n+            ("/private-old", "OPTIONS", NO_CREDS, 401),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_private_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/private-old\', \'GET\', INVALID_CREDS, 301),\n-            (\'/private-old\', \'POST\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'PUT\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'PATCH\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'DELETE\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'OPTIONS\', INVALID_CREDS, 308),\n+            ("/private-old", "GET", INVALID_CREDS, 301),\n+            ("/private-old", "POST", INVALID_CREDS, 308),\n+            ("/private-old", "PUT", INVALID_CREDS, 308),\n+            ("/private-old", "PATCH", INVALID_CREDS, 308),\n+            ("/private-old", "DELETE", INVALID_CREDS, 308),\n+            ("/private-old", "OPTIONS", INVALID_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/private-old\', \'GET\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'POST\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'OPTIONS\', INVALID_CREDS, 401),\n+            ("/private-old", "GET", INVALID_CREDS, 401),\n+            ("/private-old", "POST", INVALID_CREDS, 401),\n+            ("/private-old", "PUT", INVALID_CREDS, 401),\n+            ("/private-old", "PATCH", INVALID_CREDS, 401),\n+            ("/private-old", "DELETE", INVALID_CREDS, 401),\n+            ("/private-old", "OPTIONS", INVALID_CREDS, 401),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_public_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/public-old\', \'GET\', CREDS, 301),\n-            (\'/public-old\', \'POST\', CREDS, 308),\n-            (\'/public-old\', \'PUT\', CREDS, 308),\n-            (\'/public-old\', \'PATCH\', CREDS, 308),\n-            (\'/public-old\', \'DELETE\', CREDS, 308),\n-            (\'/public-old\', \'OPTIONS\', CREDS, 308),\n+            ("/public-old", "GET", CREDS, 301),\n+            ("/public-old", "POST", CREDS, 308),\n+            ("/public-old", "PUT", CREDS, 308),\n+            ("/public-old", "PATCH", CREDS, 308),\n+            ("/public-old", "DELETE", CREDS, 308),\n+            ("/public-old", "OPTIONS", CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/public-old\', \'GET\', CREDS, 200),\n-            (\'/public-old\', \'POST\', CREDS, 200),\n-            (\'/public-old\', \'PUT\', CREDS, 200),\n-            (\'/public-old\', \'PATCH\', CREDS, 200),\n-            (\'/public-old\', \'DELETE\', CREDS, 200),\n-            (\'/public-old\', \'OPTIONS\', CREDS, 200),\n+            ("/public-old", "GET", CREDS, 200),\n+            ("/public-old", "POST", CREDS, 200),\n+            ("/public-old", "PUT", CREDS, 200),\n+            ("/public-old", "PATCH", CREDS, 200),\n+            ("/public-old", "DELETE", CREDS, 200),\n+            ("/public-old", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_public_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/public-old\', \'GET\', NO_CREDS, 301),\n-            (\'/public-old\', \'POST\', NO_CREDS, 308),\n-            (\'/public-old\', \'PUT\', NO_CREDS, 308),\n-            (\'/public-old\', \'PATCH\', NO_CREDS, 308),\n-            (\'/public-old\', \'DELETE\', NO_CREDS, 308),\n-            (\'/public-old\', \'OPTIONS\', NO_CREDS, 308),\n+            ("/public-old", "GET", NO_CREDS, 301),\n+            ("/public-old", "POST", NO_CREDS, 308),\n+            ("/public-old", "PUT", NO_CREDS, 308),\n+            ("/public-old", "PATCH", NO_CREDS, 308),\n+            ("/public-old", "DELETE", NO_CREDS, 308),\n+            ("/public-old", "OPTIONS", NO_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/public-old\', \'GET\', NO_CREDS, 200),\n-            (\'/public-old\', \'POST\', NO_CREDS, 401),\n-            (\'/public-old\', \'PUT\', NO_CREDS, 401),\n-            (\'/public-old\', \'PATCH\', NO_CREDS, 401),\n-            (\'/public-old\', \'DELETE\', NO_CREDS, 401),\n-            (\'/public-old\', \'OPTIONS\', NO_CREDS, 200),\n+            ("/public-old", "GET", NO_CREDS, 200),\n+            ("/public-old", "POST", NO_CREDS, 401),\n+            ("/public-old", "PUT", NO_CREDS, 401),\n+            ("/public-old", "PATCH", NO_CREDS, 401),\n+            ("/public-old", "DELETE", NO_CREDS, 401),\n+            ("/public-old", "OPTIONS", NO_CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_public_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/public-old\', \'GET\', INVALID_CREDS, 301),\n-            (\'/public-old\', \'POST\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'PUT\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'PATCH\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'DELETE\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'OPTIONS\', INVALID_CREDS, 308),\n+            ("/public-old", "GET", INVALID_CREDS, 301),\n+            ("/public-old", "POST", INVALID_CREDS, 308),\n+            ("/public-old", "PUT", INVALID_CREDS, 308),\n+            ("/public-old", "PATCH", INVALID_CREDS, 308),\n+            ("/public-old", "DELETE", INVALID_CREDS, 308),\n+            ("/public-old", "OPTIONS", INVALID_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/public-old\', \'GET\', INVALID_CREDS, 200),\n-            (\'/public-old\', \'POST\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'OPTIONS\', INVALID_CREDS, 200),\n+            ("/public-old", "GET", INVALID_CREDS, 200),\n+            ("/public-old", "POST", INVALID_CREDS, 401),\n+            ("/public-old", "PUT", INVALID_CREDS, 401),\n+            ("/public-old", "PATCH", INVALID_CREDS, 401),\n+            ("/public-old", "DELETE", INVALID_CREDS, 401),\n+            ("/public-old", "OPTIONS", INVALID_CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\ndiff --git a/src/plone/rest/tests/test_error_handling.py b/src/plone/rest/tests/test_error_handling.py\nindex ed3dc8d..b2cf511 100644\n--- a/src/plone/rest/tests/test_error_handling.py\n+++ b/src/plone/rest/tests/test_error_handling.py\n@@ -17,105 +17,95 @@ class TestErrorHandling(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'document1\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="document1")\n         self.document = self.portal.document1\n         self.document_url = self.document.absolute_url()\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\')\n+        self.portal.invokeFactory("Folder", id="folder1")\n         self.folder = self.portal.folder1\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n \n     def test_404_not_found(self):\n         response = requests.get(\n-            self.portal_url + \'/non-existing-resource\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.portal_url + "/non-existing-resource",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 404)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n+        self.assertEqual("NotFound", response.json()["type"])\n         self.assertEqual(\n-            \'NotFound\',\n-            response.json()[\'type\']\n-        )\n-        self.assertEqual(\n-            \'Resource not found: %s\' % response.url,\n-            response.json()[\'message\']\n+            "Resource not found: %s" % response.url, response.json()["message"]\n         )\n \n     def test_401_unauthorized(self):\n         response = requests.get(\n-            self.document_url,\n-            headers={\'Accept\': \'application/json\'}\n+            self.document_url, headers={"Accept": "application/json"}\n         )\n         self.assertEqual(response.status_code, 401)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n-        self.assertNotIn(\'Location\', response.headers,\n-                         \'A 401 unauthorized should not redirect.\')\n-        self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'Unauthorized\',\n-            response.json()[\'type\']\n+        self.assertNotIn(\n+            "Location", response.headers, "A 401 unauthorized should not redirect."\n         )\n+        self.assertTrue(json.loads(response.content))\n+        self.assertEqual("Unauthorized", response.json()["type"])\n \n     def test_500_internal_server_error(self):\n         response = requests.get(\n-            self.portal_url + \'/500-internal-server-error\',\n-            headers={\'Accept\': \'application/json\'}\n+            self.portal_url + "/500-internal-server-error",\n+            headers={"Accept": "application/json"},\n         )\n \n         self.assertEqual(response.status_code, 500)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'HTTPError\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("HTTPError", response.json()["type"])\n \n         self.assertEqual(\n-            {u\'type\': u\'HTTPError\',\n-             u\'message\': u\'HTTP Error 500: InternalServerError\'},\n-            response.json())\n+            {u"type": u"HTTPError", u"message": u"HTTP Error 500: InternalServerError"},\n+            response.json(),\n+        )\n \n     def test_500_traceback_only_for_manager_users(self):\n         # Normal user\n         response = requests.get(\n-            self.portal_url + \'/500-internal-server-error\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(TEST_USER_ID, TEST_USER_PASSWORD)\n+            self.portal_url + "/500-internal-server-error",\n+            headers={"Accept": "application/json"},\n+            auth=(TEST_USER_ID, TEST_USER_PASSWORD),\n         )\n-        self.assertNotIn(u\'traceback\', response.json())\n+        self.assertNotIn(u"traceback", response.json())\n \n         # Manager user\n         response = requests.get(\n-            self.portal_url + \'/500-internal-server-error\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.portal_url + "/500-internal-server-error",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertIn(u\'traceback\', response.json())\n+        self.assertIn(u"traceback", response.json())\n \n-        traceback = response.json()[u\'traceback\']\n+        traceback = response.json()[u"traceback"]\n         self.assertIsInstance(traceback, list)\n         self.assertRegexpMatches(\n-            traceback[0],\n-            r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\')\n+            traceback[0], r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\'\n+        )\ndiff --git a/src/plone/rest/tests/test_named_services.py b/src/plone/rest/tests/test_named_services.py\nindex 3bdeedb..fe1977b 100644\n--- a/src/plone/rest/tests/test_named_services.py\n+++ b/src/plone/rest/tests/test_named_services.py\n@@ -15,83 +15,65 @@ class TestNamedServiceEndpoints(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.document = self.portal["doc1"]\n         transaction.commit()\n \n     def test_dexterity_named_get(self):\n         response = requests.get(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named get\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named get"}, response.json())\n \n     def test_dexterity_named_post(self):\n         response = requests.post(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named post\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named post"}, response.json())\n \n     def test_dexterity_named_put(self):\n         response = requests.put(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named put\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named put"}, response.json())\n \n     def test_dexterity_named_patch(self):\n         response = requests.patch(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named patch\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named patch"}, response.json())\n \n     def test_dexterity_named_delete(self):\n         response = requests.delete(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named delete\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named delete"}, response.json())\n \n     def test_dexterity_named_options(self):\n         response = requests.options(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named options\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named options"}, response.json())\ndiff --git a/src/plone/rest/tests/test_negotiation.py b/src/plone/rest/tests/test_negotiation.py\nindex 81c36ff..70edd5a 100644\n--- a/src/plone/rest/tests/test_negotiation.py\n+++ b/src/plone/rest/tests/test_negotiation.py\n@@ -7,82 +7,90 @@\n \n \n class TestAcceptHeaderParser(unittest.TestCase):\n-\n     def test_parse_application_json_accept_header(self):\n-        accept = \'application/json\'\n-        expected = [(\'application\', \'json\')]\n+        accept = "application/json"\n+        expected = [("application", "json")]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_jquery_json_accept_header(self):\n-        accept = (\'text/javascript, application/javascript, \'\n-                  \'application/ecmascript, application/x-ecmascript, \'\n-                  \'*/*; q=0.01\')\n-        expected = [(\'text\', \'javascript\'),\n-                    (\'application\', \'javascript\'),\n-                    (\'application\', \'ecmascript\'),\n-                    (\'application\', \'x-ecmascript\'),\n-                    (\'*\', \'*\')]\n+        accept = (\n+            "text/javascript, application/javascript, "\n+            "application/ecmascript, application/x-ecmascript, "\n+            "*/*; q=0.01"\n+        )\n+        expected = [\n+            ("text", "javascript"),\n+            ("application", "javascript"),\n+            ("application", "ecmascript"),\n+            ("application", "x-ecmascript"),\n+            ("*", "*"),\n+        ]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_firefox_accept_header(self):\n-        accept = (\'text/html,application/xhtml+xml,application/xml;q=0.9,\'\n-                  \'*/*;q=0.8\')\n-        expected = [(\'text\', \'html\'),\n-                    (\'application\', \'xhtml+xml\'),\n-                    (\'application\', \'xml\'),\n-                    (\'*\', \'*\')]\n+        accept = "text/html,application/xhtml+xml,application/xml;q=0.9," "*/*;q=0.8"\n+        expected = [\n+            ("text", "html"),\n+            ("application", "xhtml+xml"),\n+            ("application", "xml"),\n+            ("*", "*"),\n+        ]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_chrome_accept_header(self):\n-        accept = (\'text/html,application/xhtml+xml,application/xml;q=0.9,\'\n-                  \'image/webp,*/*;q=0.8\')\n-        expected = [(\'text\', \'html\'),\n-                    (\'application\', \'xhtml+xml\'),\n-                    (\'application\', \'xml\'),\n-                    (\'image\', \'webp\'),\n-                    (\'*\', \'*\')]\n+        accept = (\n+            "text/html,application/xhtml+xml,application/xml;q=0.9,"\n+            "image/webp,*/*;q=0.8"\n+        )\n+        expected = [\n+            ("text", "html"),\n+            ("application", "xhtml+xml"),\n+            ("application", "xml"),\n+            ("image", "webp"),\n+            ("*", "*"),\n+        ]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_all_media_types_accept_header(self):\n-        self.assertEqual([(\'*\', \'*\')], parse_accept_header(\'*/*\'))\n+        self.assertEqual([("*", "*")], parse_accept_header("*/*"))\n \n     def test_parse_invalid_accept_header(self):\n-        self.assertEqual([], parse_accept_header(\'invalid\'))\n+        self.assertEqual([], parse_accept_header("invalid"))\n \n \n class TestServiceRegistry(unittest.TestCase):\n-\n     def test_register_media_type(self):\n-        self.assertEqual(u\'GET_application_json_\',\n-                         register_service(\'GET\', (\'application\', \'json\')))\n-        self.assertEqual(u\'GET_application_json_\',\n-                         lookup_service_id(\'GET\', \'application/json\'))\n+        self.assertEqual(\n+            u"GET_application_json_", register_service("GET", ("application", "json"))\n+        )\n+        self.assertEqual(\n+            u"GET_application_json_", lookup_service_id("GET", "application/json")\n+        )\n \n     def test_register_wildcard_subtype(self):\n-        self.assertEqual(u\'PATCH_text_*_\',\n-                         register_service(\'PATCH\', (\'text\', \'*\')))\n-        self.assertEqual(u\'PATCH_text_*_\',\n-                         lookup_service_id(\'PATCH\', \'text/xml\'))\n+        self.assertEqual(u"PATCH_text_*_", register_service("PATCH", ("text", "*")))\n+        self.assertEqual(u"PATCH_text_*_", lookup_service_id("PATCH", "text/xml"))\n \n     def test_register_wilcard_type(self):\n-        self.assertEqual(u\'PATCH_*_*_\', register_service(\'PATCH\', (\'*\', \'*\')))\n-        self.assertEqual(u\'PATCH_*_*_\', lookup_service_id(\'PATCH\', \'foo/bar\'))\n+        self.assertEqual(u"PATCH_*_*_", register_service("PATCH", ("*", "*")))\n+        self.assertEqual(u"PATCH_*_*_", lookup_service_id("PATCH", "foo/bar"))\n \n     def test_service_id_for_multiple_media_types_is_none(self):\n-        register_service(\'GET\', \'application/json\')\n-        self.assertEqual(None, lookup_service_id(\n-            \'GET\', \'application/json,application/javascipt\'))\n+        register_service("GET", "application/json")\n+        self.assertEqual(\n+            None, lookup_service_id("GET", "application/json,application/javascipt")\n+        )\n \n     def test_service_id_for_invalid_media_type_is_none(self):\n-        self.assertEqual(None, lookup_service_id(\'GET\', \'application-json\'))\n+        self.assertEqual(None, lookup_service_id("GET", "application-json"))\n \n     def test_service_id_for_not_registered_media_type_is_none(self):\n-        self.assertEqual(None, lookup_service_id(\'PUT\', \'text/html\'))\n+        self.assertEqual(None, lookup_service_id("PUT", "text/html"))\n \n     def test_service_id_for_wildcard_type_is_none(self):\n-        register_service(\'GET\', \'application/json\')\n-        self.assertEqual(None, lookup_service_id(\'GET\', \'*/*\'))\n+        register_service("GET", "application/json")\n+        self.assertEqual(None, lookup_service_id("GET", "*/*"))\n \n     def test_service_id_for_wildcard_subtype_is_none(self):\n-        register_service(\'GET\', \'text/xml\')\n-        self.assertEqual(None, lookup_service_id(\'GET\', \'text/*\'))\n+        register_service("GET", "text/xml")\n+        self.assertEqual(None, lookup_service_id("GET", "text/*"))\ndiff --git a/src/plone/rest/tests/test_permissions.py b/src/plone/rest/tests/test_permissions.py\nindex 673d592..2ab0df6 100644\n--- a/src/plone/rest/tests/test_permissions.py\n+++ b/src/plone/rest/tests/test_permissions.py\n@@ -21,38 +21,33 @@ class TestPermissions(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.portal.acl_users.userFolderAddUser(\n-            \'admin\',\n-            \'secret\',\n-            [\'Manager\'],\n-            []\n-        )\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.portal.acl_users.userFolderAddUser("admin", "secret", ["Manager"], [])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, \'publish\')\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n-        b64auth = b64encode(auth.encode(\'utf8\'))\n-        request._auth = \'Basic %s\' % b64auth.decode(\'utf8\')\n+        self.portal.invokeFactory("Document", id="doc1")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, "publish")\n+\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        b64auth = b64encode(auth.encode("utf8"))\n+        request._auth = "Basic %s" % b64auth.decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_traverse_with_insufficient_permission_raises_unauthorized(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         with self.assertRaises(Unauthorized):\n-            self.traverse(\'/plone/doc1\', method=\'PUT\')\n+            self.traverse("/plone/doc1", method="PUT")\n \n     def test_traverse_with_sufficient_permission_returns_service(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Editor\'])\n-        obj = self.traverse(\'/plone/doc1\', method=\'PUT\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        setRoles(self.portal, TEST_USER_ID, ["Editor"])\n+        obj = self.traverse("/plone/doc1", method="PUT")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex 3d42d03..37c61dc 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -19,43 +19,41 @@ class TestRedirects(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Folder\', id=\'folder-old\')\n-        self.portal.manage_renameObject(\'folder-old\', \'folder-new\')\n+        self.portal.invokeFactory("Folder", id="folder-old")\n+        self.portal.manage_renameObject("folder-old", "folder-new")\n         transaction.commit()\n \n     def test_get_to_moved_item_causes_301_redirect(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_post_to_moved_item_causes_308_redirect(self):\n         response = requests.post(\n-            self.portal_url + \'/folder-old\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(308, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_unauthorized_request_to_item_still_redirects_first(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old",\n+            headers={"Accept": "application/json"},\n             # No auth\n             allow_redirects=False,\n         )\n@@ -63,14 +61,13 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n         # A request to the old URL of an item where the user doesn\'t have\n         # necessary permissions will still result in a redirect\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n         # Following the redirect then leads to an item that will produce a 401\n         response = requests.get(\n-            response.headers[\'Location\'],\n-            headers={\'Accept\': \'application/json\'},\n+            response.headers["Location"],\n+            headers={"Accept": "application/json"},\n             # No auth\n             allow_redirects=False,\n         )\n@@ -78,73 +75,80 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n \n     def test_query_string_gets_preserved(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old?key=value\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old?key=value",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new?key=value\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new?key=value", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_named_service_on_moved_item_causes_301_redirect(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/namedservice",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/namedservice\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/namedservice", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_named_service_plus_path_parameter_works(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/namedservice/param\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/namedservice/param",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/namedservice/param\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/namedservice/param",\n+            response.headers["Location"],\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_redirects_for_regular_views_still_work(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/@@some-view\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/@@some-view",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/@@some-view\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/@@some-view", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/@@some-view/param?k=v\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/@@some-view/param?k=v",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/@@some-view/param?k=v\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/@@some-view/param?k=v",\n+            response.headers["Location"],\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n         storage = queryUtility(IRedirectionStorage)\n-        storage._paths[\'/plone/same\'] = \'/plone/same\'\n-        storage._rpaths[\'/plone/same\'] = OOSet([\'/plone/same\'])\n+        storage._paths["/plone/same"] = "/plone/same"\n+        storage._rpaths["/plone/same"] = OOSet(["/plone/same"])\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal_url + \'/same/@@view\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/same/@@view",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n@@ -152,26 +156,24 @@ def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n \n     def test_handles_redirects_that_include_querystring_in_old_path(self):\n         storage = queryUtility(IRedirectionStorage)\n-        storage.add(\'/plone/some-item?key=value\', \'/plone/new-item\')\n+        storage.add("/plone/some-item?key=value", "/plone/new-item")\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal_url + \'/some-item?key=value\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/some-item?key=value",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/new-item\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/new-item", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_aborts_redirect_checks_early_for_app_root(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n-        self.assertIsNone(\n-            error_view.find_redirect_if_view_or_service([\'\'], None))\n+        self.assertIsNone(error_view.find_redirect_if_view_or_service([""], None))\n \n     def test_gracefully_deals_with_missing_request_url(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n-        self.portal.REQUEST[\'ACTUAL_URL\'] = None\n+        self.portal.REQUEST["ACTUAL_URL"] = None\n         self.assertEquals(False, error_view.attempt_redirect())\ndiff --git a/src/plone/rest/tests/test_siteroot.py b/src/plone/rest/tests/test_siteroot.py\nindex 985b370..6cf71d5 100644\n--- a/src/plone/rest/tests/test_siteroot.py\n+++ b/src/plone/rest/tests/test_siteroot.py\n@@ -14,82 +14,82 @@ class TestSiteRootServiceEndpoints(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_siteroot_get(self):\n         response = requests.get(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(\n             response.status_code,\n             200,\n-            \'GET /Plone should return status code 200, not {}\'.format(\n+            "GET /Plone should return status code 200, not {}".format(\n                 response.status_code\n-            )\n+            ),\n         )\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_siteroot_post(self):\n         response = requests.post(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(\n             response.status_code,\n             200,\n-            \'POST /Plone should return status code 201, not {}\'.format(\n+            "POST /Plone should return status code 201, not {}".format(\n                 response.status_code\n-            )\n+            ),\n         )\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'POST\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"POST", response.json().get("method"))\n \n     def test_siteroot_delete(self):\n         response = requests.delete(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'DELETE\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"DELETE", response.json().get("method"))\n \n     def test_siteroot_put(self):\n         response = requests.put(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PUT\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"PUT", response.json().get("method"))\n \n     def test_siteroot_patch(self):\n         response = requests.patch(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PATCH\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"PATCH", response.json().get("method"))\n \n     def test_siteroot_options(self):\n         response = requests.options(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'OPTIONS\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"OPTIONS", response.json().get("method"))\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 80a97db..dc67591 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -22,111 +22,113 @@ class TestTraversal(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        b64auth = b64encode(auth.encode(\'utf8\'))\n-        request._auth = \'Basic %s\' % b64auth.decode(\'utf8\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        b64auth = b64encode(auth.encode("utf8"))\n+        request._auth = "Basic %s" % b64auth.decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_json_request_on_portal_root_returns_service(self):\n         obj = self.traverse()\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_json_request_on_portal_root_with_layout_returns_service(self):\n-        self.portal.setLayout(\'summary_view\')\n+        self.portal.setLayout("summary_view")\n         obj = self.traverse()\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n-    def test_json_request_on_portal_root_with_default_page_returns_service(\n-            self):\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.setDefaultPage(\'doc1\')\n+    def test_json_request_on_portal_root_with_default_page_returns_service(self):\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.portal.setDefaultPage("doc1")\n         obj = self.traverse()\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_json_request_on_content_object_returns_service(self):\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        obj = self.traverse(path=\'/plone/doc1\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.portal.invokeFactory("Document", id="doc1")\n+        obj = self.traverse(path="/plone/doc1")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_html_request_on_portal_root_returns_default_view(self):\n-        obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'listing_view\', obj.__name__)\n+        obj = self.traverse(accept="text/html")\n+        self.assertEquals("listing_view", obj.__name__)\n \n     def test_html_request_on_portal_root_returns_dynamic_view(self):\n-        self.portal.setLayout(\'summary_view\')\n-        obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'summary_view\', obj.__name__)\n+        self.portal.setLayout("summary_view")\n+        obj = self.traverse(accept="text/html")\n+        self.assertEquals("summary_view", obj.__name__)\n \n     def test_html_request_on_portal_root_returns_default_page(self):\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.setDefaultPage(\'doc1\')\n-        obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'document_view\', obj.__name__)\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.portal.setDefaultPage("doc1")\n+        obj = self.traverse(accept="text/html")\n+        self.assertEquals("document_view", obj.__name__)\n \n     def test_json_request_on_object_with_multihook(self):\n-        doc1 = self.portal[self.portal.invokeFactory(\'Document\', id=\'doc1\')]\n+        doc1 = self.portal[self.portal.invokeFactory("Document", id="doc1")]\n \n         # Register a function to be called before traversal\n         def btr_test(container, request):\n             request._btr_test_called = 1\n+\n         doc1.btr_test = btr_test\n-        nc = BeforeTraverse.NameCaller(\'btr_test\')\n-        BeforeTraverse.registerBeforeTraverse(doc1, nc, \'Document/btr_test\')\n+        nc = BeforeTraverse.NameCaller("btr_test")\n+        BeforeTraverse.registerBeforeTraverse(doc1, nc, "Document/btr_test")\n \n-        obj = self.traverse(path=\'/plone/doc1\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        obj = self.traverse(path="/plone/doc1")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n         self.assertEquals(1, self.request._btr_test_called)\n \n     def test_json_request_on_existing_view_returns_named_service(self):\n-        obj = self.traverse(\'/plone/search\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        obj = self.traverse("/plone/search")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n         alsoProvides(folder, INavigationRoot)\n-        obj = self.traverse(\'/plone/folder1/search\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        obj = self.traverse("/plone/folder1/search")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_html_request_on_existing_view_returns_view(self):\n-        obj = self.traverse(path=\'/plone/search\', accept=\'text/html\')\n-        self.assertFalse(isinstance(obj, Service), \'Got a service\')\n+        obj = self.traverse(path="/plone/search", accept="text/html")\n+        self.assertFalse(isinstance(obj, Service), "Got a service")\n \n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n         alsoProvides(folder, INavigationRoot)\n-        obj = self.traverse(path=\'/plone/folder1/search\', accept=\'text/html\')\n-        self.assertFalse(isinstance(obj, Service), \'Got a service\')\n+        obj = self.traverse(path="/plone/folder1/search", accept="text/html")\n+        self.assertFalse(isinstance(obj, Service), "Got a service")\n \n     def test_virtual_hosting(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         vhm = VirtualHostMonster()\n-        vhm.id = \'virtual_hosting\'\n+        vhm.id = "virtual_hosting"\n         vhm.addToContainer(app)\n-        obj = self.traverse(path=\'/VirtualHostBase/http/localhost:8080/plone/VirtualHostRoot/\')  # noqa\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n-        del app[\'virtual_hosting\']\n+        obj = self.traverse(\n+            path="/VirtualHostBase/http/localhost:8080/plone/VirtualHostRoot/"\n+        )  # noqa\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n+        del app["virtual_hosting"]\n \n     def test_json_request_to_regular_view_returns_view(self):\n-        obj = self.traverse(\'/plone/folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        obj = self.traverse("/plone/folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\n \n-        self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n-        obj = self.traverse(\'/plone/folder1/folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n+        obj = self.traverse("/plone/folder1/folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\n \n     def test_json_request_to_view_namespace_returns_view(self):\n-        obj = self.traverse(\'/plone/@@folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        obj = self.traverse("/plone/@@folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\n \n-        self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n-        obj = self.traverse(\'/plone/folder1/@@folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n+        obj = self.traverse("/plone/folder1/@@folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex 6a705a8..259d83a 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -13,20 +13,19 @@\n \n @adapter(ISiteRoot, IAPIRequest)\n class RESTTraverse(DefaultPublishTraverse):\n-\n     def publishTraverse(self, request, name):\n         try:\n             obj = super(RESTTraverse, self).publishTraverse(request, name)\n-            if (not IContentish.providedBy(obj)\n-                    and not IService.providedBy(obj)):\n+            if not IContentish.providedBy(obj) and not IService.providedBy(obj):\n                 if isinstance(obj, VirtualHostMonster):\n                     return obj\n                 else:\n                     raise KeyError\n         except KeyError:\n             # No object, maybe a named rest service\n-            service = queryMultiAdapter((self.context, request),\n-                                        name=request._rest_service_id + name)\n+            service = queryMultiAdapter(\n+                (self.context, request), name=request._rest_service_id + name\n+            )\n             if service is None:\n                 # No service, fallback to regular view\n                 view = queryMultiAdapter((self.context, request), name=name)\n@@ -39,7 +38,7 @@ def publishTraverse(self, request, name):\n             return obj\n \n         # Do not handle view namespace\n-        if \'@@\' in request[\'PATH_INFO\'] or \'++view++\' in request[\'PATH_INFO\']:\n+        if "@@" in request["PATH_INFO"] or "++view++" in request["PATH_INFO"]:\n             return obj\n \n         # Wrap object to ensure we handle further traversal\n@@ -72,7 +71,7 @@ def __getitem__(self, name):\n \n     # MultiHook requries this to be a class attribute\n     def __before_publishing_traverse__(self, arg1, arg2=None):\n-        bpth = getattr(self.context, \'__before_publishing_traverse__\', False)\n+        bpth = getattr(self.context, "__before_publishing_traverse__", False)\n         if bpth:\n             if not self._bpth_called:\n                 self._bpth_called = True\n@@ -83,16 +82,16 @@ def publishTraverse(self, request, name):\n         adapter = DefaultPublishTraverse(self.context, request)\n         try:\n             obj = adapter.publishTraverse(request, name)\n-            if (not IContentish.providedBy(obj)\n-                    and not IService.providedBy(obj)):\n+            if not IContentish.providedBy(obj) and not IService.providedBy(obj):\n                 raise KeyError\n \n         # If there\'s no object with the given name, we get a KeyError.\n         # In a non-folderish context a key lookup results in an AttributeError.\n         except (KeyError, AttributeError):\n             # No object, maybe a named rest service\n-            service = queryMultiAdapter((self.context, request),\n-                                        name=request._rest_service_id + name)\n+            service = queryMultiAdapter(\n+                (self.context, request), name=request._rest_service_id + name\n+            )\n             if service is None:\n                 # No service, fallback to regular view\n                 view = queryMultiAdapter((self.context, request), name=name)\ndiff --git a/src/plone/rest/zcml.py b/src/plone/rest/zcml.py\nindex f0bc365..287398a 100644\n--- a/src/plone/rest/zcml.py\n+++ b/src/plone/rest/zcml.py\n@@ -24,12 +24,12 @@ class IService(Interface):\n     """\n \n     method = TextLine(\n-        title=u"The name of the view that should be the default. " +\n-              u"[get|post|put|delete]",\n+        title=u"The name of the view that should be the default. "\n+        + u"[get|post|put|delete]",\n         description=u"""\n         This name refers to view that should be the view used by\n         default (if no view name is supplied explicitly).""",\n-        )\n+    )\n \n     accept = TextLine(\n         title=u"Acceptable media types",\n@@ -37,7 +37,8 @@ class IService(Interface):\n         The service is limited to the given media type and only called if the\n         request contains an "Accept" header with the given media type. Multiple\n         media types can be given by separating them with a comma.""",\n-        default=u"application/json")\n+        default=u"application/json",\n+    )\n \n     for_ = GlobalObject(\n         title=u"The interface this view is the default for.",\n@@ -45,11 +46,12 @@ class IService(Interface):\n         registered. All objects implementing this interface can make use of\n         this view. If this attribute is not specified, the view is available\n         for all objects.""",\n-        )\n+    )\n \n     factory = GlobalObject(\n         title=u"The factory for this service",\n-        description=u"The factory is usually subclass of the Service class.")\n+        description=u"The factory is usually subclass of the Service class.",\n+    )\n \n     name = TextLine(\n         title=u"The name of the service.",\n@@ -58,7 +60,8 @@ class IService(Interface):\n         available at the object\'s absolute URL appended with a slash and the\n         service name.""",\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     layer = GlobalInterface(\n         title=u"The browser layer for which this service is registered.",\n@@ -67,25 +70,25 @@ class IService(Interface):\n                         installed.""",\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     permission = Permission(\n         title=u"Permission",\n         description=u"The permission needed to access the service.",\n         required=True,\n-        )\n+    )\n \n \n def serviceDirective(\n-        _context,\n-        method,\n-        accept,\n-        factory,\n-        for_,\n-        permission,\n-        layer=IDefaultBrowserLayer,\n-        name=u\'\',\n-        ):\n+    _context,\n+    method,\n+    accept,\n+    factory,\n+    for_,\n+    permission,\n+    layer=IDefaultBrowserLayer,\n+    name=u"",\n+):\n \n     _handle_for(_context, for_)\n \n@@ -102,28 +105,33 @@ def serviceDirective(\n         # Create a new class. We\'ll execute some security declarations on it\n         # and don\'t want to modify the original class.\n         cdict = getSecurityInfo(factory)\n-        cdict[\'__name__\'] = view_name\n-        cdict[\'method\'] = method.upper()\n+        cdict["__name__"] = view_name\n+        cdict["method"] = method.upper()\n         new_class = type(factory.__name__, (factory, BrowserView), cdict)\n \n         _context.action(\n-            discriminator=(\'plone.rest:service\', method, media_type, for_,\n-                           name, layer),\n+            discriminator=("plone.rest:service", method, media_type, for_, name, layer),\n             callable=handler,\n-            args=(\'registerAdapter\', new_class, (for_, layer), Interface,\n-                  view_name, _context.info),\n+            args=(\n+                "registerAdapter",\n+                new_class,\n+                (for_, layer),\n+                Interface,\n+                view_name,\n+                _context.info,\n+            ),\n         )\n \n         _context.action(\n-            discriminator=(\'plone.rest:protectClass\', new_class),\n+            discriminator=("plone.rest:protectClass", new_class),\n             callable=protectClass,\n-            args=(new_class, permission)\n+            args=(new_class, permission),\n         )\n         _context.action(\n-            discriminator=(\'plone.rest:InitializeClass\', new_class),\n+            discriminator=("plone.rest:InitializeClass", new_class),\n             callable=InitializeClass,\n-            args=(new_class,)\n-            )\n+            args=(new_class,),\n+        )\n \n \n class ICORSPolicyDirective(Interface):\n@@ -135,7 +143,7 @@ class ICORSPolicyDirective(Interface):\n         registered. If this attribute is not specified, the CORS policy applies\n         to all objects.""",\n         required=False,\n-        )\n+    )\n \n     layer = GlobalInterface(\n         title=u"The browser layer for which this CORS policy is registered.",\n@@ -144,14 +152,14 @@ class ICORSPolicyDirective(Interface):\n                         installed.""",\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     allow_origin = TextLine(\n         title=u"Origins",\n         description=u"""Origins that are allowed access to the resource. Either\n         a comma separated list of origins, e.g. "http://example.net,\n         http://mydomain.com" or "*".""",\n-        )\n+    )\n \n     allow_methods = TextLine(\n         title=u"Methods",\n@@ -159,74 +167,80 @@ class ICORSPolicyDirective(Interface):\n         allowed by this CORS policy, e.g. "DELETE,GET,OPTIONS,PATCH,POST,PUT".\n         """,\n         required=False,\n-        )\n+    )\n \n     allow_headers = TextLine(\n         title=u"Headers",\n         description=u"""A comma separated list of request headers allowed to be\n         sent by the client, e.g. "X-My-Header".""",\n         required=False,\n-        )\n+    )\n \n     expose_headers = TextLine(\n         title=u"Exposed Headers",\n         description=u"""A comma separated list of response headers clients can\n         access, e.g. "Content-Length,X-My-Header".""",\n         required=False,\n-        )\n+    )\n \n     allow_credentials = Bool(\n         title=u"Support Credentials",\n         description=u"""Indicates whether the resource supports user\n         credentials in the request.""",\n         default=False,\n-        )\n+    )\n \n     max_age = TextLine(\n         title=u"Max Age",\n         description=u"""Indicates how long the results of a preflight request\n         can be cached.""",\n         required=False,\n-        )\n+    )\n \n \n def cors_policy_directive(\n-        _context,\n-        allow_origin,\n-        allow_credentials,\n-        allow_methods=None,\n-        expose_headers=None,\n-        allow_headers=None,\n-        max_age=None,\n-        for_=Interface,\n-        layer=IDefaultBrowserLayer,):\n+    _context,\n+    allow_origin,\n+    allow_credentials,\n+    allow_methods=None,\n+    expose_headers=None,\n+    allow_headers=None,\n+    max_age=None,\n+    for_=Interface,\n+    layer=IDefaultBrowserLayer,\n+):\n \n     _handle_for(_context, for_)\n \n     # Create a new policy class and store the CORS policy configuration in\n     # class attributes.\n     cdict = {}\n-    cdict[\'allow_origin\'] = [o.strip() for o in allow_origin.split(\',\')]\n+    cdict["allow_origin"] = [o.strip() for o in allow_origin.split(",")]\n     if allow_methods is not None:\n-        cdict[\'allow_methods\'] = [m.strip() for m in allow_methods.split(\',\')]\n+        cdict["allow_methods"] = [m.strip() for m in allow_methods.split(",")]\n     else:\n-        cdict[\'allow_methods\'] = None\n-    cdict[\'allow_credentials\'] = allow_credentials\n+        cdict["allow_methods"] = None\n+    cdict["allow_credentials"] = allow_credentials\n     if expose_headers:\n-        cdict[\'expose_headers\'] = [\n-            h.strip() for h in expose_headers.split(\',\')]\n+        cdict["expose_headers"] = [h.strip() for h in expose_headers.split(",")]\n     else:\n-        cdict[\'expose_headers\'] = []\n+        cdict["expose_headers"] = []\n     if allow_headers:\n-        cdict[\'allow_headers\'] = [h.strip() for h in allow_headers.split(\',\')]\n+        cdict["allow_headers"] = [h.strip() for h in allow_headers.split(",")]\n     else:\n-        cdict[\'allow_headers\'] = []\n-    cdict[\'max_age\'] = max_age\n+        cdict["allow_headers"] = []\n+    cdict["max_age"] = max_age\n     new_class = type(CORSPolicy.__name__, (CORSPolicy,), cdict)\n \n     _context.action(\n-        discriminator=(\'plone.rest:CORSPolicy\', for_, layer),\n+        discriminator=("plone.rest:CORSPolicy", for_, layer),\n         callable=handler,\n-        args=(\'registerAdapter\', new_class, (for_, layer),\n-              ICORSPolicy, u\'\', _context.info),\n-        )\n+        args=(\n+            "registerAdapter",\n+            new_class,\n+            (for_, layer),\n+            ICORSPolicy,\n+            u"",\n+            _context.info,\n+        ),\n+    )\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2019-07-24T18:56:12+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.rest/commit/5cc7dd007d5141ddcf8c12152ada7a01cabaf770

Set flake8 max line length to 200.

Files changed:
M base.cfg

b'diff --git a/base.cfg b/base.cfg\nindex 4a7eb9d..d989088 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -47,6 +47,7 @@ mode = 755\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\n flake8-max-complexity = 15\n+flake8-max-line-length = 200\n check-manifest = True\n \n [releaser]\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2019-10-14T14:29:37+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.rest/commit/3886a5409ed93f195350f3935a2af5e5ba69f5bb

Merge pull request #91 from plone/black

Black

Files changed:
M base.cfg
M src/plone/__init__.py
M src/plone/rest/cors.py
M src/plone/rest/demo.py
M src/plone/rest/errors.py
M src/plone/rest/events.py
M src/plone/rest/interfaces.py
M src/plone/rest/negotiation.py
M src/plone/rest/patches.py
M src/plone/rest/service.py
M src/plone/rest/testing.py
M src/plone/rest/tests/test_cors.py
M src/plone/rest/tests/test_dexterity.py
M src/plone/rest/tests/test_dispatching.py
M src/plone/rest/tests/test_error_handling.py
M src/plone/rest/tests/test_named_services.py
M src/plone/rest/tests/test_negotiation.py
M src/plone/rest/tests/test_permissions.py
M src/plone/rest/tests/test_redirects.py
M src/plone/rest/tests/test_siteroot.py
M src/plone/rest/tests/test_traversal.py
M src/plone/rest/traverse.py
M src/plone/rest/zcml.py

b'diff --git a/base.cfg b/base.cfg\nindex 4a7eb9d..d989088 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -47,6 +47,7 @@ mode = 755\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\n flake8-max-complexity = 15\n+flake8-max-line-length = 200\n check-manifest = True\n \n [releaser]\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/src/plone/rest/cors.py b/src/plone/rest/cors.py\nindex 7694cb9..7fd230c 100644\n--- a/src/plone/rest/cors.py\n+++ b/src/plone/rest/cors.py\n@@ -20,7 +20,6 @@ def lookup_preflight_service_id(method):\n \n @implementer(ICORSPolicy)\n class CORSPolicy(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -37,8 +36,9 @@ def process_simple_request(self):\n         self._process_origin_and_credentials(origin)\n \n         if self.expose_headers:\n-            self.request.response.setHeader(\'Access-Control-Expose-Headers\',\n-                                            \', \'.join(self.expose_headers))\n+            self.request.response.setHeader(\n+                "Access-Control-Expose-Headers", ", ".join(self.expose_headers)\n+            )\n         return True\n \n     def process_preflight_request(self):\n@@ -50,14 +50,13 @@ def process_preflight_request(self):\n         if not origin:\n             return False\n \n-        method = self.request.getHeader(\'Access-Control-Request-Method\', None)\n+        method = self.request.getHeader("Access-Control-Request-Method", None)\n         if self.allow_methods and method not in self.allow_methods:\n             return False\n \n-        headers = self.request.getHeader(\'Access-Control-Request-Headers\',\n-                                         None)\n+        headers = self.request.getHeader("Access-Control-Request-Headers", None)\n         if headers:\n-            headers = headers.split(\',\')\n+            headers = headers.split(",")\n             allowed_headers = [h.lower() for h in self.allow_headers]\n             for header in headers:\n                 if header.strip().lower() not in allowed_headers:\n@@ -66,39 +65,36 @@ def process_preflight_request(self):\n         self._process_origin_and_credentials(origin)\n \n         if self.max_age:\n-            self.request.response.setHeader(\'Access-Control-Max-Age\',\n-                                            self.max_age)\n+            self.request.response.setHeader("Access-Control-Max-Age", self.max_age)\n \n-        self.request.response.setHeader(\'Access-Control-Allow-Methods\', method)\n+        self.request.response.setHeader("Access-Control-Allow-Methods", method)\n \n         if self.allow_headers:\n-            self.request.response.setHeader(\'Access-Control-Allow-Headers\',\n-                                            \', \'.join(self.allow_headers))\n+            self.request.response.setHeader(\n+                "Access-Control-Allow-Headers", ", ".join(self.allow_headers)\n+            )\n \n-        self.request.response.setHeader(\'Content-Length\', \'0\')\n+        self.request.response.setHeader("Content-Length", "0")\n         self.request.response.setStatus(200)\n         return True\n \n     def _allowed_origin(self):\n-        origin = self.request.getHeader(\'Origin\', None)\n+        origin = self.request.getHeader("Origin", None)\n         if not origin:\n             return False\n-        if origin not in self.allow_origin and self.allow_origin != [\'*\']:\n+        if origin not in self.allow_origin and self.allow_origin != ["*"]:\n             return False\n         return origin\n \n     def _process_origin_and_credentials(self, origin):\n         if self.allow_credentials:\n-            self.request.response.setHeader(\'Access-Control-Allow-Origin\',\n-                                            origin)\n-            self.request.response.setHeader(\'Access-Control-Allow-Credentials\',\n-                                            \'true\')\n-            if len(self.allow_origin) > 1 or self.allow_origin == [\'*\']:\n-                self.request.response.setHeader(\'Vary\', \'Origin\')\n-        elif self.allow_origin == [\'*\']:\n-            self.request.response.setHeader(\'Access-Control-Allow-Origin\', \'*\')\n+            self.request.response.setHeader("Access-Control-Allow-Origin", origin)\n+            self.request.response.setHeader("Access-Control-Allow-Credentials", "true")\n+            if len(self.allow_origin) > 1 or self.allow_origin == ["*"]:\n+                self.request.response.setHeader("Vary", "Origin")\n+        elif self.allow_origin == ["*"]:\n+            self.request.response.setHeader("Access-Control-Allow-Origin", "*")\n         else:\n-            self.request.response.setHeader(\'Access-Control-Allow-Origin\',\n-                                            origin)\n+            self.request.response.setHeader("Access-Control-Allow-Origin", origin)\n             if len(self.allow_origin) > 1:\n-                self.request.response.setHeader(\'Vary\', \'Origin\')\n+                self.request.response.setHeader("Vary", "Origin")\ndiff --git a/src/plone/rest/demo.py b/src/plone/rest/demo.py\nindex 184cb95..4622f97 100644\n--- a/src/plone/rest/demo.py\n+++ b/src/plone/rest/demo.py\n@@ -5,97 +5,66 @@\n \n \n class BaseService(Service):\n-\n     def render(self):\n         self.request.response.setHeader("Content-Type", "application/json")\n         return json.dumps(self.data(), indent=2, sort_keys=True)\n \n \n class Get(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'GET\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "GET", "id": self.context.id}\n \n \n class Post(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'POST\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "POST", "id": self.context.id}\n \n \n class Put(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'PUT\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "PUT", "id": self.context.id}\n \n \n class Delete(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'DELETE\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "DELETE", "id": self.context.id}\n \n \n class Patch(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'PATCH\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "PATCH", "id": self.context.id}\n \n \n class Options(BaseService):\n-\n     def data(self):\n-        return {\n-            \'method\': \'OPTIONS\',\n-            \'id\': self.context.id\n-        }\n+        return {"method": "OPTIONS", "id": self.context.id}\n \n \n class NamedGet(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named get\'}\n+        return {"service": "named get"}\n \n \n class NamedPost(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named post\'}\n+        return {"service": "named post"}\n \n \n class NamedPut(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named put\'}\n+        return {"service": "named put"}\n \n \n class NamedDelete(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named delete\'}\n+        return {"service": "named delete"}\n \n \n class NamedPatch(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named patch\'}\n+        return {"service": "named patch"}\n \n \n class NamedOptions(BaseService):\n-\n     def data(self):\n-        return {\'service\': \'named options\'}\n+        return {"service": "named options"}\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 6f1345f..e86c912 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -11,8 +11,10 @@\n from six.moves.urllib.parse import quote\n from six.moves.urllib.parse import unquote\n from zExceptions import NotFound\n+\n try:\n     from ZPublisher.HTTPRequest import WSGIRequest\n+\n     HAS_WSGI = True\n except ImportError:\n     HAS_WSGI = False\n@@ -40,7 +42,7 @@ def __call__(self):\n         # Write and lock the response in order to avoid later changes\n         # especially for Unauthorized exceptions.\n         response = self.request.response\n-        response.setHeader(\'Content-Type\', \'application/json\')\n+        response.setHeader("Content-Type", "application/json")\n         response.setStatus(type(exception), lock=1)\n         response.setBody(result, lock=1)\n \n@@ -54,33 +56,35 @@ def render_exception(self, exception):\n         name = type(exception).__name__\n         message = str(exception)\n         if six.PY2:\n-            name = name.decode(\'utf-8\')\n-            message = message.decode(\'utf-8\')\n-        result = {u\'type\': name, u\'message\': message}\n+            name = name.decode("utf-8")\n+            message = message.decode("utf-8")\n+        result = {u"type": name, u"message": message}\n \n         if isinstance(exception, NotFound):\n             # First check if a redirect from p.a.redirector exists\n             redirect_performed = self.attempt_redirect()\n             if redirect_performed:\n-                self.request.response.setBody(\'\', lock=1)\n+                self.request.response.setBody("", lock=1)\n                 return\n \n             # NotFound exceptions need special handling because their\n             # exception message gets turned into HTML by ZPublisher\n             url = self.request.getURL()\n-            result[u\'message\'] = u\'Resource not found: %s\' % url\n+            result[u"message"] = u"Resource not found: %s" % url\n \n         if getSecurityManager().checkPermission(ManagePortal, getSite()):\n-            result[u\'traceback\'] = self.render_traceback(exception)\n+            result[u"traceback"] = self.render_traceback(exception)\n \n         return result\n \n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            if HAS_WSGI and \\\n-               isinstance(self.request, WSGIRequest) and \\\n-               str(exception) == str(exc_obj):\n+            if (\n+                HAS_WSGI\n+                and isinstance(self.request, WSGIRequest)\n+                and str(exception) == str(exc_obj)\n+            ):\n                 # WSGIRequest may "upgrade" the exception,\n                 # resulting in a new exception which has\n                 # the same string representation as the\n@@ -89,11 +93,13 @@ def render_traceback(self, exception):\n                 # https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5#comments\n                 pass\n             else:\n-                return (u\'ERROR: Another exception happened before we could \'\n-                        u\'render the traceback.\')\n+                return (\n+                    u"ERROR: Another exception happened before we could "\n+                    u"render the traceback."\n+                )\n \n-        raw = \'\\n\'.join(traceback.format_tb(exc_traceback))\n-        return raw.strip().split(\'\\n\')\n+        raw = "\\n".join(traceback.format_tb(exc_traceback))\n+        return raw.strip().split("\\n")\n \n     def find_redirect_if_view_or_service(self, old_path_elements, storage):\n         """Find redirect for URLs like:\n@@ -127,7 +133,7 @@ def find_redirect_if_view_or_service(self, old_path_elements, storage):\n         splitpoint = len(old_path_elements)\n \n         while splitpoint > 1:\n-            possible_obj_path = \'/\'.join(old_path_elements[:splitpoint])\n+            possible_obj_path = "/".join(old_path_elements[:splitpoint])\n             remainder = old_path_elements[splitpoint:]\n             new_path = storage.get(possible_obj_path)\n \n@@ -136,7 +142,7 @@ def find_redirect_if_view_or_service(self, old_path_elements, storage):\n                     # New URL would match originally requested URL.\n                     # Lets not cause a redirect loop.\n                     return None\n-                return new_path + \'/\' + \'/\'.join(remainder)\n+                return new_path + "/" + "/".join(remainder)\n \n             splitpoint -= 1\n \n@@ -159,13 +165,13 @@ def attempt_redirect(self):\n         try:\n             old_path_elements = self.request.physicalPathFromURL(url)\n         except ValueError:  # pragma: no cover\n-            return False    # pragma: no cover\n+            return False  # pragma: no cover\n \n         storage = queryUtility(IRedirectionStorage)\n         if storage is None:\n             return False\n \n-        old_path = \'/\'.join(old_path_elements)\n+        old_path = "/".join(old_path_elements)\n \n         # First lets try with query string in cases or content migration\n \n@@ -177,7 +183,7 @@ def attempt_redirect(self):\n             # if we matched on the query_string we don\'t want to include it\n             # in redirect\n             if new_path:\n-                query_string = \'\'\n+                query_string = ""\n \n         if not new_path:\n             new_path = storage.get(old_path)\n@@ -185,8 +191,7 @@ def attempt_redirect(self):\n         # Attempt our own strategy at finding redirects for named REST\n         # services, views or templates.\n         if not new_path:\n-            new_path = self.find_redirect_if_view_or_service(\n-                old_path_elements, storage)\n+            new_path = self.find_redirect_if_view_or_service(old_path_elements, storage)\n \n         if not new_path:\n             return False\n@@ -197,8 +202,7 @@ def attempt_redirect(self):\n             # avoid double quoting\n             url_path = unquote(url.path)\n             url_path = quote(url_path)\n-            url = urllib.parse.SplitResult(\n-                *(url[:2] + (url_path, ) + url[3:])).geturl()\n+            url = urllib.parse.SplitResult(*(url[:2] + (url_path,) + url[3:])).geturl()\n         else:\n             url = self.request.physicalPathToURL(new_path)\n \n@@ -210,7 +214,7 @@ def attempt_redirect(self):\n         # with 308 Permanent Redirect, which instructs the client to NOT\n         # switch the method (if the original request was a POST, it should\n         # re-POST to the new URL from the Location header).\n-        if self.request.method.upper() == \'GET\':\n+        if self.request.method.upper() == "GET":\n             status = 301\n         else:\n             status = 308\n@@ -222,7 +226,9 @@ def attempt_redirect(self):\n     def _url(self):\n         """Get the current, canonical URL\n         """\n-        return self.request.get(\'ACTUAL_URL\',\n-            self.request.get(\'VIRTUAL_URL\',  # noqa\n-                   self.request.get(\'URL\',   # noqa\n-                     None)))                 # noqa\n+        return self.request.get(\n+            "ACTUAL_URL",\n+            self.request.get(\n+                "VIRTUAL_URL", self.request.get("URL", None)  # noqa  # noqa\n+            ),\n+        )  # noqa\ndiff --git a/src/plone/rest/events.py b/src/plone/rest/events.py\nindex 527a671..f22f543 100644\n--- a/src/plone/rest/events.py\n+++ b/src/plone/rest/events.py\n@@ -10,14 +10,13 @@ def mark_as_api_request(event):\n        actual request method and Accept header.\n     """\n     request = event.request\n-    method = request.get(\'REQUEST_METHOD\', \'GET\')\n-    if method == \'OPTIONS\' and request.getHeader(\'Origin\', False):\n-        preflighted_method = request.getHeader(\n-            \'Access-Control-Request-Method\', None)\n+    method = request.get("REQUEST_METHOD", "GET")\n+    if method == "OPTIONS" and request.getHeader("Origin", False):\n+        preflighted_method = request.getHeader("Access-Control-Request-Method", None)\n         service_id = lookup_preflight_service_id(preflighted_method)\n         request._rest_cors_preflight = True\n     else:\n-        accept = request.getHeader(\'Accept\', \'text/html\')\n+        accept = request.getHeader("Accept", "text/html")\n         service_id = lookup_service_id(method, accept)\n         request._rest_cors_preflight = False\n \ndiff --git a/src/plone/rest/interfaces.py b/src/plone/rest/interfaces.py\nindex d5a2829..963969b 100644\n--- a/src/plone/rest/interfaces.py\n+++ b/src/plone/rest/interfaces.py\n@@ -16,6 +16,7 @@ class ICORSPolicy(Interface):\n     """Provides methods for processing simple and preflight CORS requests by\n        adding access control headers.\n     """\n+\n     def process_simple_request():\n         """Process a simple request"""\n \ndiff --git a/src/plone/rest/negotiation.py b/src/plone/rest/negotiation.py\nindex ffc6231..15423b4 100644\n--- a/src/plone/rest/negotiation.py\n+++ b/src/plone/rest/negotiation.py\n@@ -10,10 +10,10 @@ def parse_accept_header(accept):\n        of media type tuples.\n     """\n     media_types = []\n-    for media_range in accept.split(\',\'):\n-        media_type = media_range.split(\';\')[0].strip()\n-        if \'/\' in media_type:\n-            type_, subtype = media_type.split(\'/\')\n+    for media_range in accept.split(","):\n+        media_type = media_range.split(";")[0].strip()\n+        if "/" in media_type:\n+            type_, subtype = media_type.split("/")\n             media_types.append((type_, subtype))\n     return media_types\n \n@@ -31,10 +31,10 @@ def lookup_service_id(method, accept):\n     subtypes = types.get(type_, {})\n     if subtype in subtypes:\n         return subtypes[subtype]\n-    elif \'*\' in subtypes:\n-        return subtypes[\'*\']\n-    if \'*\' in types:\n-        return types[\'*\'][\'*\']\n+    elif "*" in subtypes:\n+        return subtypes["*"]\n+    if "*" in types:\n+        return types["*"]["*"]\n     return None\n \n \n@@ -42,7 +42,7 @@ def register_service(method, media_type):\n     """Register a service for the given request method and media type and\n        return it\'s service id.\n     """\n-    service_id = u\'{}_{}_{}_\'.format(method, media_type[0], media_type[1])\n+    service_id = u"{}_{}_{}_".format(method, media_type[0], media_type[1])\n     types = _services.setdefault(method, {})\n     subtypes = types.setdefault(media_type[0], {})\n     subtypes[media_type[1]] = service_id\ndiff --git a/src/plone/rest/patches.py b/src/plone/rest/patches.py\nindex f4cb2e9..c28dfac 100644\n--- a/src/plone/rest/patches.py\n+++ b/src/plone/rest/patches.py\n@@ -15,7 +15,7 @@ def __before_publishing_traverse__(self, arg1, arg2=None):\n     return self._old___before_publishing_traverse__(arg1, arg2)\n \n \n-PERMANENT_REDIRECT = {308: \'Permanent Redirect\'}\n+PERMANENT_REDIRECT = {308: "Permanent Redirect"}\n \n \n def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n@@ -24,7 +24,7 @@ def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n \n     This is needed for up to and including Plone 5.1.\n     """\n-    status_reasons = getattr(scope, \'status_reasons\', {})\n+    status_reasons = getattr(scope, "status_reasons", {})\n     if 308 in status_reasons:\n         # Already present in zExceptions >= 3.2 / Zope >= 4.0a1 / Plone 5.2\n         return\n@@ -33,10 +33,10 @@ def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n     status_reasons.update(PERMANENT_REDIRECT)\n \n     # Update the reverse mapping\n-    status_codes = getattr(scope, \'status_codes\', {})\n+    status_codes = getattr(scope, "status_codes", {})\n     key, val = PERMANENT_REDIRECT.items()[0]\n \n-    status_codes[\'\'.join(val.split(\' \')).lower()] = key\n+    status_codes["".join(val.split(" ")).lower()] = key\n     status_codes[val.lower()] = key\n     status_codes[key] = key\n     status_codes[str(key)] = key\ndiff --git a/src/plone/rest/service.py b/src/plone/rest/service.py\nindex 2b8f939..351b111 100644\n--- a/src/plone/rest/service.py\n+++ b/src/plone/rest/service.py\n@@ -7,7 +7,6 @@\n \n @implementer(IService)\n class Service(object):\n-\n     def __call__(self):\n         policy = queryMultiAdapter((self.context, self.request), ICORSPolicy)\n         if policy is not None:\n@@ -28,6 +27,6 @@ def render(self):\n     def __getattribute__(self, name):\n         # Preflight requests need to be publicly accessible since they don\'t\n         # include credentials\n-        if name == \'__roles__\' and self.request._rest_cors_preflight:\n-            return [\'Anonymous\']\n+        if name == "__roles__" and self.request._rest_cors_preflight:\n+            return ["Anonymous"]\n         return super(Service, self).__getattribute__(name)\ndiff --git a/src/plone/rest/testing.py b/src/plone/rest/testing.py\nindex 0fb5292..05268d9 100644\n--- a/src/plone/rest/testing.py\n+++ b/src/plone/rest/testing.py\n@@ -15,37 +15,28 @@ class PloneRestLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.rest\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.rest,\n-            context=configurationContext\n-        )\n-        xmlconfig.file(\n-            \'testing.zcml\',\n-            plone.rest,\n-            context=configurationContext\n-        )\n+\n+        xmlconfig.file("configure.zcml", plone.rest, context=configurationContext)\n+        xmlconfig.file("testing.zcml", plone.rest, context=configurationContext)\n \n \n PLONE_REST_FIXTURE = PloneRestLayer()\n PLONE_REST_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_REST_FIXTURE,),\n-    name="PloneRestLayer:Integration"\n+    bases=(PLONE_REST_FIXTURE,), name="PloneRestLayer:Integration"\n )\n PLONE_REST_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_REST_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestLayer:Functional"\n+    bases=(PLONE_REST_FIXTURE, z2.ZSERVER_FIXTURE), name="PloneRestLayer:Functional"\n )\n \n \n class InternalServerErrorService(Service):\n-\n     def __call__(self):\n         from six.moves.urllib.error import HTTPError\n+\n         raise HTTPError(\n-            \'http://nohost/plone/500-internal-server-error\',\n+            "http://nohost/plone/500-internal-server-error",\n             500,\n-            \'InternalServerError\',\n+            "InternalServerError",\n             {},\n-            None\n+            None,\n         )\ndiff --git a/src/plone/rest/tests/test_cors.py b/src/plone/rest/tests/test_cors.py\nindex 28d4723..964ea1d 100644\n--- a/src/plone/rest/tests/test_cors.py\n+++ b/src/plone/rest/tests/test_cors.py\n@@ -19,22 +19,21 @@ class TestCORSPolicy(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = self.layer[\'request\']\n+        self.request = self.layer["request"]\n         self.response = self.request.response\n \n     def get_policy(self, origin=None, method=None, headers=None):\n         request = self.request\n         if origin:\n-            request.environ[\'HTTP_ORIGIN\'] = origin\n+            request.environ["HTTP_ORIGIN"] = origin\n         if method:\n-            request.environ[\'HTTP_ACCESS_CONTROL_REQUEST_METHOD\'] = method\n+            request.environ["HTTP_ACCESS_CONTROL_REQUEST_METHOD"] = method\n         if headers:\n-            request.environ[\'HTTP_ACCESS_CONTROL_REQUEST_HEADERS\'] = headers\n+            request.environ["HTTP_ACCESS_CONTROL_REQUEST_HEADERS"] = headers\n         policy = CORSPolicy(None, request)\n-        policy.allow_origin = [\'*\']\n+        policy.allow_origin = ["*"]\n         policy.allow_credentials = False\n-        policy.allow_methods = [\n-            \'DELETE\', \'GET\', \'OPTIONS\', \'PATCH\', \'POST\', \'PUT\']\n+        policy.allow_methods = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]\n         policy.allow_headers = []\n         policy.expose_headers = []\n         policy.max_age = None\n@@ -43,171 +42,154 @@ def get_policy(self, origin=None, method=None, headers=None):\n     def test_simple_cors_without_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy()\n         self.assertFalse(policy.process_simple_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_simple_cors_with_wrong_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy(origin="http://wrong.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         self.assertFalse(policy.process_simple_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_simple_cors_adds_wildcard_allow_origin(self):\n         policy = self.get_policy(origin="http://example.net")\n         self.assertTrue(policy.process_simple_request())\n-        self.assertEqual(\n-            \'*\', self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual("*", self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_simple_cors_adds_matching_allow_origin(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n \n     def test_simple_cors_adds_allow_credentials(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_simple_cors_adds_origin_when_supporting_credentials(self):\n         policy = self.get_policy(origin="http://example.net")\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_simple_cors_adds_vary_when_allowing_multiple_origins(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.allow_origin = [\'http://some.host\', \'http://example.net\']\n+        policy.allow_origin = ["http://some.host", "http://example.net"]\n         self.assertTrue(policy.process_simple_request())\n-        self.assertEqual(\'Origin\', self.response.getHeader(\'Vary\'))\n+        self.assertEqual("Origin", self.response.getHeader("Vary"))\n \n     def test_simple_cors_adds_exposed_headers(self):\n         policy = self.get_policy(origin="http://example.net")\n-        policy.expose_headers = [\'Content-Length\', \'X-My-Header\']\n+        policy.expose_headers = ["Content-Length", "X-My-Header"]\n         self.assertTrue(policy.process_simple_request())\n         self.assertEqual(\n-            \'Content-Length, X-My-Header\',\n-            self.response.getHeader(\'Access-Control-Expose-Headers\'))\n+            "Content-Length, X-My-Header",\n+            self.response.getHeader("Access-Control-Expose-Headers"),\n+        )\n \n     def test_preflight_cors_without_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy()\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_with_wrong_origin_doesnt_add_ac_headers(self):\n         policy = self.get_policy(origin="http://wrong.net")\n-        policy.allow_origin = [\'http://example.net\']\n+        policy.allow_origin = ["http://example.net"]\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_with_wrong_method_doesnt_add_ac_headers(self):\n         policy = self.get_policy(origin="http://example.net", method="LOCK")\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_with_wrong_header_doesnt_add_ac_headers(self):\n-        policy = self.get_policy(\n-            origin="http://example.net", headers=\'X-Secret\')\n+        policy = self.get_policy(origin="http://example.net", headers="X-Secret")\n         self.assertFalse(policy.process_preflight_request())\n-        self.assertEqual(\n-            None,\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual(None, self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_adds_wildcard_allow_origin(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'*\', self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+        self.assertEqual("*", self.response.getHeader("Access-Control-Allow-Origin"))\n \n     def test_preflight_cors_adds_matching_allow_origin(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_origin = [\'http://example.net\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_origin = ["http://example.net"]\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n \n     def test_preflight_cors_adds_allow_credentials(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_origin = [\'http://example.net\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_origin = ["http://example.net"]\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_preflight_cors_adds_origin_when_supporting_credentials(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         policy.allow_credentials = True\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'http://example.net\',\n-            self.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "http://example.net", self.response.getHeader("Access-Control-Allow-Origin")\n+        )\n         self.assertEqual(\n-            \'true\',\n-            self.response.getHeader(\'Access-Control-Allow-Credentials\'))\n+            "true", self.response.getHeader("Access-Control-Allow-Credentials")\n+        )\n \n     def test_preflight_cors_adds_vary_when_allowing_multiple_origins(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_origin = [\'http://some.host\', \'http://example.net\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_origin = ["http://some.host", "http://example.net"]\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\'Origin\', self.response.getHeader(\'Vary\'))\n+        self.assertEqual("Origin", self.response.getHeader("Vary"))\n \n     def test_preflight_cors_adds_max_age(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.max_age = \'3600\'\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.max_age = "3600"\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'3600\', self.response.getHeader(\'Access-Control-Max-Age\'))\n+        self.assertEqual("3600", self.response.getHeader("Access-Control-Max-Age"))\n \n     def test_preflight_cors_adds_allow_methods(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'GET\', self.response.getHeader(\'Access-Control-Allow-Methods\'))\n+        self.assertEqual("GET", self.response.getHeader("Access-Control-Allow-Methods"))\n \n     def test_preflight_cors_adds_allow_methods_if_unrestriced(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         policy.allow_methods = None\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\n-            \'GET\', self.response.getHeader(\'Access-Control-Allow-Methods\'))\n+        self.assertEqual("GET", self.response.getHeader("Access-Control-Allow-Methods"))\n \n     def test_preflight_cors_adds_allow_headers(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n-        policy.allow_headers = [\'X-Allowed\']\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n+        policy.allow_headers = ["X-Allowed"]\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(\n-            \'X-Allowed\',\n-            self.response.getHeader(\'Access-Control-Allow-Headers\'))\n+            "X-Allowed", self.response.getHeader("Access-Control-Allow-Headers")\n+        )\n \n     def test_preflight_cors_sets_content_length_zero(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n-        self.assertEqual(\'0\', self.response.getHeader(\'Content-Length\'))\n+        self.assertEqual("0", self.response.getHeader("Content-Length"))\n \n     def test_preflight_cors_sets_status_code_200(self):\n-        policy = self.get_policy(origin="http://example.net", method=\'GET\')\n+        policy = self.get_policy(origin="http://example.net", method="GET")\n         self.assertTrue(policy.process_preflight_request())\n         self.assertEqual(200, self.response.getStatus())\n \n@@ -217,50 +199,47 @@ class TestCORS(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone\', method=\'GET\', headers={}):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        request.environ[\'HTTP_ORIGIN\'] = \'http://example.net\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(self, path="/plone", method="GET", headers={}):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["REQUEST_METHOD"] = method\n+        request.environ["HTTP_ORIGIN"] = "http://example.net"\n         request.environ.update(headers)\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_preflight_cors_is_accessible_anonymously(self):\n         headers = {}\n-        headers[\'HTTP_ACCESS_CONTROL_REQUEST_METHOD\'] = \'POST\'\n+        headers["HTTP_ACCESS_CONTROL_REQUEST_METHOD"] = "POST"\n         try:\n-            self.traverse(method=\'OPTIONS\', headers=headers)\n+            self.traverse(method="OPTIONS", headers=headers)\n         except Unauthorized:\n-            self.fail(\'Service not accessible for preflight.\')\n+            self.fail("Service not accessible for preflight.")\n \n     def test_simple_cors_gets_processed(self):\n         headers = {}\n-        headers[\'HTTP_ACCEPT\'] = \'application/json\'\n-        obj = self.traverse(method=\'GET\', headers=headers)\n+        headers["HTTP_ACCEPT"] = "application/json"\n+        obj = self.traverse(method="GET", headers=headers)\n         obj()\n         self.assertEqual(\n-            \'*\',\n-            self.request.response.getHeader(\'Access-Control-Allow-Origin\'))\n+            "*", self.request.response.getHeader("Access-Control-Allow-Origin")\n+        )\n \n     def test_preflight_request_without_cors_policy_doesnt_render_service(self):\n         # "Unregister" the current CORS policy\n         class NoCORSPolicy(object):\n             def __new__(cls, context, request):\n                 return None\n+\n         pushGlobalRegistry(self.portal)\n-        provideAdapter(\n-            NoCORSPolicy, (Interface, IDefaultBrowserLayer), ICORSPolicy)\n-\n-        headers = {\n-            \'HTTP_ACCESS_CONTROL_REQUEST_METHOD\': \'GET\',\n-            \'HTTP_ACCEPT\': \'*/*\',\n-        }\n-        service = self.traverse(method=\'OPTIONS\', headers=headers)\n-        self.assertTrue(service() is None, \'Should return None\')\n+        provideAdapter(NoCORSPolicy, (Interface, IDefaultBrowserLayer), ICORSPolicy)\n+\n+        headers = {"HTTP_ACCESS_CONTROL_REQUEST_METHOD": "GET", "HTTP_ACCEPT": "*/*"}\n+        service = self.traverse(method="OPTIONS", headers=headers)\n+        self.assertTrue(service() is None, "Should return None")\n \n         popGlobalRegistry(self.portal)\ndiff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex a31a730..288ae48 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -23,232 +23,225 @@ class TestDexterityServiceEndpoints(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.document = self.portal["doc1"]\n         transaction.commit()\n \n     def test_dexterity_document_get(self):\n         response = requests.get(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_document_post(self):\n         response = requests.post(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'POST\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"POST", response.json().get("method"))\n \n     def test_dexterity_document_put(self):\n         response = requests.put(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PUT\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"PUT", response.json().get("method"))\n \n     def test_dexterity_document_patch(self):\n         response = requests.patch(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PATCH\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"PATCH", response.json().get("method"))\n \n     def test_dexterity_document_delete(self):\n         response = requests.delete(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'DELETE\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"DELETE", response.json().get("method"))\n \n     def test_dexterity_document_options(self):\n         response = requests.options(\n             self.document.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'doc1\', response.json().get(\'id\'))\n-        self.assertEqual(u\'OPTIONS\', response.json().get(\'method\'))\n+        self.assertEqual(u"doc1", response.json().get("id"))\n+        self.assertEqual(u"OPTIONS", response.json().get("method"))\n \n     def test_dexterity_folder_get(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n \n         response = requests.get(\n             self.portal.folder.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'folder\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"folder", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_news_item_get(self):\n-        self.portal.invokeFactory(\'News Item\', id=\'newsitem\')\n-        self.portal.newsitem.title = \'My News Item\'\n-        self.portal.newsitem.description = u\'This is a news item\'\n+        self.portal.invokeFactory("News Item", id="newsitem")\n+        self.portal.newsitem.title = "My News Item"\n+        self.portal.newsitem.description = u"This is a news item"\n         self.portal.newsitem.text = RichTextValue(\n-            u"Lorem ipsum",\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem ipsum", "text/plain", "text/html"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        fd = open(image_file, \'rb\')\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        fd = open(image_file, "rb")\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=fd.read(),\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=fd.read(), contentType="image/png", filename=u"image.png"\n         )\n         fd.close()\n-        self.portal.newsitem.image_caption = u\'This is an image caption.\'\n+        self.portal.newsitem.image_caption = u"This is an image caption."\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.newsitem.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'newsitem\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"newsitem", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_event_get(self):\n-        self.portal.invokeFactory(\'Event\', id=\'event\')\n-        self.portal.event.title = \'Event\'\n-        self.portal.event.description = u\'This is an event\'\n+        self.portal.invokeFactory("Event", id="event")\n+        self.portal.event.title = "Event"\n+        self.portal.event.description = u"This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.event.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'event\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"event", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_link_get(self):\n-        self.portal.invokeFactory(\'Link\', id=\'link\')\n-        self.portal.link.title = \'My Link\'\n-        self.portal.link.description = u\'This is a link\'\n-        self.portal.remoteUrl = \'http://plone.org\'\n+        self.portal.invokeFactory("Link", id="link")\n+        self.portal.link.title = "My Link"\n+        self.portal.link.description = u"This is a link"\n+        self.portal.remoteUrl = "http://plone.org"\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.link.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'link\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"link", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_file_get(self):\n-        self.portal.invokeFactory(\'File\', id=\'file\')\n-        self.portal.file.title = \'My File\'\n-        self.portal.file.description = u\'This is a file\'\n-        pdf_file = os.path.join(\n-            os.path.dirname(__file__), u\'file.pdf\'\n-        )\n-        fd = open(pdf_file, \'rb\')\n+        self.portal.invokeFactory("File", id="file")\n+        self.portal.file.title = "My File"\n+        self.portal.file.description = u"This is a file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        fd = open(pdf_file, "rb")\n         self.portal.file.file = NamedBlobFile(\n-            data=fd.read(),\n-            contentType=\'application/pdf\',\n-            filename=u\'file.pdf\'\n+            data=fd.read(), contentType="application/pdf", filename=u"file.pdf"\n         )\n         fd.close()\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file)\n         self.portal.file.file = RelationValue(file_id)\n         import transaction\n+\n         transaction.commit()\n \n         response = requests.get(\n             self.portal.file.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'file\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"file", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_image_get(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image\')\n-        self.portal.image.title = \'My Image\'\n-        self.portal.image.description = u\'This is an image\'\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        fd = open(image_file, \'rb\')\n+        self.portal.invokeFactory("Image", id="image")\n+        self.portal.image.title = "My Image"\n+        self.portal.image.description = u"This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        fd = open(image_file, "rb")\n         self.portal.image.image = NamedBlobImage(\n-            data=fd.read(),\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=fd.read(), contentType="image/png", filename=u"image.png"\n         )\n         fd.close()\n         import transaction\n+\n         transaction.commit()\n \n         response = requests.get(\n             self.portal.image.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'image\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"image", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_dexterity_collection_get(self):\n-        self.portal.invokeFactory(\'Collection\', id=\'collection\')\n-        self.portal.collection.title = \'My Collection\'\n-        self.portal.collection.description = \\\n-            u\'This is a collection with two documents\'\n-        self.portal.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Document 2\'\n-        )\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.collection.title = "My Collection"\n+        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n         import transaction\n+\n         transaction.commit()\n         response = requests.get(\n             self.portal.collection.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(u\'collection\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"collection", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\ndiff --git a/src/plone/rest/tests/test_dispatching.py b/src/plone/rest/tests/test_dispatching.py\nindex 171ed72..674e2f6 100644\n--- a/src/plone/rest/tests/test_dispatching.py\n+++ b/src/plone/rest/tests/test_dispatching.py\n@@ -12,7 +12,7 @@\n \n \n CREDS = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-INVALID_CREDS = (\'invalid\', \'password\')\n+INVALID_CREDS = ("invalid", "password")\n NO_CREDS = ()\n \n \n@@ -21,11 +21,11 @@ class DispatchingTestCase(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def validate(self, expectations, follow_redirects=False):\n         failures = []\n@@ -34,110 +34,113 @@ def validate(self, expectations, follow_redirects=False):\n             url = self.portal_url + path\n \n             response = requests.request(\n-                method, url,\n-                headers={\'Accept\': \'application/json\'},\n+                method,\n+                url,\n+                headers={"Accept": "application/json"},\n                 auth=creds,\n                 allow_redirects=follow_redirects,\n             )\n \n             if response.status_code != expected_status:\n-                request_args = (path, method, creds,\n-                                \'(follow_redirects=%s)\' % follow_redirects)\n+                request_args = (\n+                    path,\n+                    method,\n+                    creds,\n+                    "(follow_redirects=%s)" % follow_redirects,\n+                )\n                 actual_status = response.status_code\n                 failure = (request_args, expected_status, actual_status)\n                 failures.append(failure)\n \n         if failures:\n-            msg = \'\'\n+            msg = ""\n             for (request_args, expected_status, actual_status) in failures:\n-                msg += (\'\\n\'\n-                        \'Request:  %s\\n\'\n-                        \'Expected: %s\\n\'\n-                        \'Got:      %s\\n\' % (\n-                            request_args, expected_status, actual_status))\n+                msg += (\n+                    "\\n"\n+                    "Request:  %s\\n"\n+                    "Expected: %s\\n"\n+                    "Got:      %s\\n" % (request_args, expected_status, actual_status)\n+                )\n \n-            self.fail(\'The following assertions failed:\\n%s\' % msg)\n+            self.fail("The following assertions failed:\\n%s" % msg)\n \n \n class TestDispatchingSiteRoot(DispatchingTestCase):\n-\n     def test_site_root_with_creds(self):\n         expectations = [\n-            (\'/\', \'GET\', CREDS, 200),\n-            (\'/\', \'POST\', CREDS, 200),\n-            (\'/\', \'PUT\', CREDS, 200),\n-            (\'/\', \'PATCH\', CREDS, 200),\n-            (\'/\', \'DELETE\', CREDS, 200),\n-            (\'/\', \'OPTIONS\', CREDS, 200),\n+            ("/", "GET", CREDS, 200),\n+            ("/", "POST", CREDS, 200),\n+            ("/", "PUT", CREDS, 200),\n+            ("/", "PATCH", CREDS, 200),\n+            ("/", "DELETE", CREDS, 200),\n+            ("/", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_site_root_without_creds(self):\n         expectations = [\n-            (\'/\', \'GET\', NO_CREDS, 200),\n-            (\'/\', \'POST\', NO_CREDS, 401),\n-            (\'/\', \'PUT\', NO_CREDS, 401),\n-            (\'/\', \'PATCH\', NO_CREDS, 401),\n-            (\'/\', \'DELETE\', NO_CREDS, 401),\n-            (\'/\', \'OPTIONS\', NO_CREDS, 200),\n+            ("/", "GET", NO_CREDS, 200),\n+            ("/", "POST", NO_CREDS, 401),\n+            ("/", "PUT", NO_CREDS, 401),\n+            ("/", "PATCH", NO_CREDS, 401),\n+            ("/", "DELETE", NO_CREDS, 401),\n+            ("/", "OPTIONS", NO_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_site_root_invalid_creds(self):\n         expectations = [\n-            (\'/\', \'GET\', INVALID_CREDS, 200),\n-            (\'/\', \'POST\', INVALID_CREDS, 401),\n-            (\'/\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/\', \'OPTIONS\', INVALID_CREDS, 200),\n+            ("/", "GET", INVALID_CREDS, 200),\n+            ("/", "POST", INVALID_CREDS, 401),\n+            ("/", "PUT", INVALID_CREDS, 401),\n+            ("/", "PATCH", INVALID_CREDS, 401),\n+            ("/", "DELETE", INVALID_CREDS, 401),\n+            ("/", "OPTIONS", INVALID_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n \n class TestDispatchingNonExistentResource(DispatchingTestCase):\n-\n     def test_not_found_with_creds(self):\n         expectations = [\n-            (\'/not-found\', \'GET\', CREDS, 404),\n-            (\'/not-found\', \'POST\', CREDS, 404),\n-            (\'/not-found\', \'PUT\', CREDS, 404),\n-            (\'/not-found\', \'PATCH\', CREDS, 404),\n-            (\'/not-found\', \'DELETE\', CREDS, 404),\n-            (\'/not-found\', \'OPTIONS\', CREDS, 404),\n+            ("/not-found", "GET", CREDS, 404),\n+            ("/not-found", "POST", CREDS, 404),\n+            ("/not-found", "PUT", CREDS, 404),\n+            ("/not-found", "PATCH", CREDS, 404),\n+            ("/not-found", "DELETE", CREDS, 404),\n+            ("/not-found", "OPTIONS", CREDS, 404),\n         ]\n         self.validate(expectations)\n \n     def test_not_found_without_creds(self):\n         expectations = [\n-            (\'/not-found\', \'GET\', NO_CREDS, 404),\n-            (\'/not-found\', \'POST\', NO_CREDS, 404),\n-            (\'/not-found\', \'PUT\', NO_CREDS, 404),\n-            (\'/not-found\', \'PATCH\', NO_CREDS, 404),\n-            (\'/not-found\', \'DELETE\', NO_CREDS, 404),\n-            (\'/not-found\', \'OPTIONS\', NO_CREDS, 404),\n+            ("/not-found", "GET", NO_CREDS, 404),\n+            ("/not-found", "POST", NO_CREDS, 404),\n+            ("/not-found", "PUT", NO_CREDS, 404),\n+            ("/not-found", "PATCH", NO_CREDS, 404),\n+            ("/not-found", "DELETE", NO_CREDS, 404),\n+            ("/not-found", "OPTIONS", NO_CREDS, 404),\n         ]\n         self.validate(expectations)\n \n     def test_not_found_invalid_creds(self):\n         expectations = [\n-            (\'/not-found\', \'GET\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'POST\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'PUT\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'PATCH\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'DELETE\', INVALID_CREDS, 404),\n-            (\'/not-found\', \'OPTIONS\', INVALID_CREDS, 404),\n+            ("/not-found", "GET", INVALID_CREDS, 404),\n+            ("/not-found", "POST", INVALID_CREDS, 404),\n+            ("/not-found", "PUT", INVALID_CREDS, 404),\n+            ("/not-found", "PATCH", INVALID_CREDS, 404),\n+            ("/not-found", "DELETE", INVALID_CREDS, 404),\n+            ("/not-found", "OPTIONS", INVALID_CREDS, 404),\n         ]\n         self.validate(expectations)\n \n \n class TestDispatchingDexterity(DispatchingTestCase):\n-\n     def setUp(self):\n         super(TestDispatchingDexterity, self).setUp()\n-        self.portal.invokeFactory(\'Folder\', id=\'private\')\n+        self.portal.invokeFactory("Folder", id="private")\n \n-        self.portal.invokeFactory(\'Folder\', id=\'public\')\n+        self.portal.invokeFactory("Folder", id="public")\n         public_folder = self.portal.public\n         wftool = getToolByName(self.portal, "portal_workflow")\n         wftool.doActionFor(public_folder, "publish")\n@@ -146,215 +149,214 @@ def setUp(self):\n \n     def test_private_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/private\', \'GET\', CREDS, 200),\n-            (\'/private\', \'POST\', CREDS, 200),\n-            (\'/private\', \'PUT\', CREDS, 200),\n-            (\'/private\', \'PATCH\', CREDS, 200),\n-            (\'/private\', \'DELETE\', CREDS, 200),\n-            (\'/private\', \'OPTIONS\', CREDS, 200),\n+            ("/private", "GET", CREDS, 200),\n+            ("/private", "POST", CREDS, 200),\n+            ("/private", "PUT", CREDS, 200),\n+            ("/private", "PATCH", CREDS, 200),\n+            ("/private", "DELETE", CREDS, 200),\n+            ("/private", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_private_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/private\', \'GET\', NO_CREDS, 401),\n-            (\'/private\', \'POST\', NO_CREDS, 401),\n-            (\'/private\', \'PUT\', NO_CREDS, 401),\n-            (\'/private\', \'PATCH\', NO_CREDS, 401),\n-            (\'/private\', \'DELETE\', NO_CREDS, 401),\n-            (\'/private\', \'OPTIONS\', NO_CREDS, 401),\n+            ("/private", "GET", NO_CREDS, 401),\n+            ("/private", "POST", NO_CREDS, 401),\n+            ("/private", "PUT", NO_CREDS, 401),\n+            ("/private", "PATCH", NO_CREDS, 401),\n+            ("/private", "DELETE", NO_CREDS, 401),\n+            ("/private", "OPTIONS", NO_CREDS, 401),\n         ]\n         self.validate(expectations)\n \n     def test_private_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/private\', \'GET\', INVALID_CREDS, 401),\n-            (\'/private\', \'POST\', INVALID_CREDS, 401),\n-            (\'/private\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/private\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/private\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/private\', \'OPTIONS\', INVALID_CREDS, 401),\n+            ("/private", "GET", INVALID_CREDS, 401),\n+            ("/private", "POST", INVALID_CREDS, 401),\n+            ("/private", "PUT", INVALID_CREDS, 401),\n+            ("/private", "PATCH", INVALID_CREDS, 401),\n+            ("/private", "DELETE", INVALID_CREDS, 401),\n+            ("/private", "OPTIONS", INVALID_CREDS, 401),\n         ]\n         self.validate(expectations)\n \n     def test_public_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/public\', \'GET\', CREDS, 200),\n-            (\'/public\', \'POST\', CREDS, 200),\n-            (\'/public\', \'PUT\', CREDS, 200),\n-            (\'/public\', \'PATCH\', CREDS, 200),\n-            (\'/public\', \'DELETE\', CREDS, 200),\n-            (\'/public\', \'OPTIONS\', CREDS, 200),\n+            ("/public", "GET", CREDS, 200),\n+            ("/public", "POST", CREDS, 200),\n+            ("/public", "PUT", CREDS, 200),\n+            ("/public", "PATCH", CREDS, 200),\n+            ("/public", "DELETE", CREDS, 200),\n+            ("/public", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_public_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/public\', \'GET\', NO_CREDS, 200),\n-            (\'/public\', \'POST\', NO_CREDS, 401),\n-            (\'/public\', \'PUT\', NO_CREDS, 401),\n-            (\'/public\', \'PATCH\', NO_CREDS, 401),\n-            (\'/public\', \'DELETE\', NO_CREDS, 401),\n-            (\'/public\', \'OPTIONS\', NO_CREDS, 200),\n+            ("/public", "GET", NO_CREDS, 200),\n+            ("/public", "POST", NO_CREDS, 401),\n+            ("/public", "PUT", NO_CREDS, 401),\n+            ("/public", "PATCH", NO_CREDS, 401),\n+            ("/public", "DELETE", NO_CREDS, 401),\n+            ("/public", "OPTIONS", NO_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n     def test_public_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/public\', \'GET\', INVALID_CREDS, 200),\n-            (\'/public\', \'POST\', INVALID_CREDS, 401),\n-            (\'/public\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/public\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/public\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/public\', \'OPTIONS\', INVALID_CREDS, 200),\n+            ("/public", "GET", INVALID_CREDS, 200),\n+            ("/public", "POST", INVALID_CREDS, 401),\n+            ("/public", "PUT", INVALID_CREDS, 401),\n+            ("/public", "PATCH", INVALID_CREDS, 401),\n+            ("/public", "DELETE", INVALID_CREDS, 401),\n+            ("/public", "OPTIONS", INVALID_CREDS, 200),\n         ]\n         self.validate(expectations)\n \n \n class TestDispatchingRedirects(DispatchingTestCase):\n-\n     def setUp(self):\n         super(TestDispatchingRedirects, self).setUp()\n \n-        self.portal.invokeFactory(\'Folder\', id=\'private-old\')\n-        self.portal.manage_renameObject(\'private-old\', \'private-new\')\n+        self.portal.invokeFactory("Folder", id="private-old")\n+        self.portal.manage_renameObject("private-old", "private-new")\n \n-        self.portal.invokeFactory(\'Folder\', id=\'public-old\')\n-        public_folder = self.portal[\'public-old\']\n+        self.portal.invokeFactory("Folder", id="public-old")\n+        public_folder = self.portal["public-old"]\n         wftool = getToolByName(self.portal, "portal_workflow")\n         wftool.doActionFor(public_folder, "publish")\n-        self.portal.manage_renameObject(\'public-old\', \'public-new\')\n+        self.portal.manage_renameObject("public-old", "public-new")\n \n         transaction.commit()\n \n     def test_moved_private_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/private-old\', \'GET\', CREDS, 301),\n-            (\'/private-old\', \'POST\', CREDS, 308),\n-            (\'/private-old\', \'PUT\', CREDS, 308),\n-            (\'/private-old\', \'PATCH\', CREDS, 308),\n-            (\'/private-old\', \'DELETE\', CREDS, 308),\n-            (\'/private-old\', \'OPTIONS\', CREDS, 308),\n+            ("/private-old", "GET", CREDS, 301),\n+            ("/private-old", "POST", CREDS, 308),\n+            ("/private-old", "PUT", CREDS, 308),\n+            ("/private-old", "PATCH", CREDS, 308),\n+            ("/private-old", "DELETE", CREDS, 308),\n+            ("/private-old", "OPTIONS", CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/private-old\', \'GET\', CREDS, 200),\n-            (\'/private-old\', \'POST\', CREDS, 200),\n-            (\'/private-old\', \'PUT\', CREDS, 200),\n-            (\'/private-old\', \'PATCH\', CREDS, 200),\n-            (\'/private-old\', \'DELETE\', CREDS, 200),\n-            (\'/private-old\', \'OPTIONS\', CREDS, 200),\n+            ("/private-old", "GET", CREDS, 200),\n+            ("/private-old", "POST", CREDS, 200),\n+            ("/private-old", "PUT", CREDS, 200),\n+            ("/private-old", "PATCH", CREDS, 200),\n+            ("/private-old", "DELETE", CREDS, 200),\n+            ("/private-old", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_private_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/private-old\', \'GET\', NO_CREDS, 301),\n-            (\'/private-old\', \'POST\', NO_CREDS, 308),\n-            (\'/private-old\', \'PUT\', NO_CREDS, 308),\n-            (\'/private-old\', \'PATCH\', NO_CREDS, 308),\n-            (\'/private-old\', \'DELETE\', NO_CREDS, 308),\n-            (\'/private-old\', \'OPTIONS\', NO_CREDS, 308),\n+            ("/private-old", "GET", NO_CREDS, 301),\n+            ("/private-old", "POST", NO_CREDS, 308),\n+            ("/private-old", "PUT", NO_CREDS, 308),\n+            ("/private-old", "PATCH", NO_CREDS, 308),\n+            ("/private-old", "DELETE", NO_CREDS, 308),\n+            ("/private-old", "OPTIONS", NO_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/private-old\', \'GET\', NO_CREDS, 401),\n-            (\'/private-old\', \'POST\', NO_CREDS, 401),\n-            (\'/private-old\', \'PUT\', NO_CREDS, 401),\n-            (\'/private-old\', \'PATCH\', NO_CREDS, 401),\n-            (\'/private-old\', \'DELETE\', NO_CREDS, 401),\n-            (\'/private-old\', \'OPTIONS\', NO_CREDS, 401),\n+            ("/private-old", "GET", NO_CREDS, 401),\n+            ("/private-old", "POST", NO_CREDS, 401),\n+            ("/private-old", "PUT", NO_CREDS, 401),\n+            ("/private-old", "PATCH", NO_CREDS, 401),\n+            ("/private-old", "DELETE", NO_CREDS, 401),\n+            ("/private-old", "OPTIONS", NO_CREDS, 401),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_private_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/private-old\', \'GET\', INVALID_CREDS, 301),\n-            (\'/private-old\', \'POST\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'PUT\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'PATCH\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'DELETE\', INVALID_CREDS, 308),\n-            (\'/private-old\', \'OPTIONS\', INVALID_CREDS, 308),\n+            ("/private-old", "GET", INVALID_CREDS, 301),\n+            ("/private-old", "POST", INVALID_CREDS, 308),\n+            ("/private-old", "PUT", INVALID_CREDS, 308),\n+            ("/private-old", "PATCH", INVALID_CREDS, 308),\n+            ("/private-old", "DELETE", INVALID_CREDS, 308),\n+            ("/private-old", "OPTIONS", INVALID_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/private-old\', \'GET\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'POST\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/private-old\', \'OPTIONS\', INVALID_CREDS, 401),\n+            ("/private-old", "GET", INVALID_CREDS, 401),\n+            ("/private-old", "POST", INVALID_CREDS, 401),\n+            ("/private-old", "PUT", INVALID_CREDS, 401),\n+            ("/private-old", "PATCH", INVALID_CREDS, 401),\n+            ("/private-old", "DELETE", INVALID_CREDS, 401),\n+            ("/private-old", "OPTIONS", INVALID_CREDS, 401),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_public_dx_folder_with_creds(self):\n         expectations = [\n-            (\'/public-old\', \'GET\', CREDS, 301),\n-            (\'/public-old\', \'POST\', CREDS, 308),\n-            (\'/public-old\', \'PUT\', CREDS, 308),\n-            (\'/public-old\', \'PATCH\', CREDS, 308),\n-            (\'/public-old\', \'DELETE\', CREDS, 308),\n-            (\'/public-old\', \'OPTIONS\', CREDS, 308),\n+            ("/public-old", "GET", CREDS, 301),\n+            ("/public-old", "POST", CREDS, 308),\n+            ("/public-old", "PUT", CREDS, 308),\n+            ("/public-old", "PATCH", CREDS, 308),\n+            ("/public-old", "DELETE", CREDS, 308),\n+            ("/public-old", "OPTIONS", CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/public-old\', \'GET\', CREDS, 200),\n-            (\'/public-old\', \'POST\', CREDS, 200),\n-            (\'/public-old\', \'PUT\', CREDS, 200),\n-            (\'/public-old\', \'PATCH\', CREDS, 200),\n-            (\'/public-old\', \'DELETE\', CREDS, 200),\n-            (\'/public-old\', \'OPTIONS\', CREDS, 200),\n+            ("/public-old", "GET", CREDS, 200),\n+            ("/public-old", "POST", CREDS, 200),\n+            ("/public-old", "PUT", CREDS, 200),\n+            ("/public-old", "PATCH", CREDS, 200),\n+            ("/public-old", "DELETE", CREDS, 200),\n+            ("/public-old", "OPTIONS", CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_public_dx_folder_without_creds(self):\n         expectations = [\n-            (\'/public-old\', \'GET\', NO_CREDS, 301),\n-            (\'/public-old\', \'POST\', NO_CREDS, 308),\n-            (\'/public-old\', \'PUT\', NO_CREDS, 308),\n-            (\'/public-old\', \'PATCH\', NO_CREDS, 308),\n-            (\'/public-old\', \'DELETE\', NO_CREDS, 308),\n-            (\'/public-old\', \'OPTIONS\', NO_CREDS, 308),\n+            ("/public-old", "GET", NO_CREDS, 301),\n+            ("/public-old", "POST", NO_CREDS, 308),\n+            ("/public-old", "PUT", NO_CREDS, 308),\n+            ("/public-old", "PATCH", NO_CREDS, 308),\n+            ("/public-old", "DELETE", NO_CREDS, 308),\n+            ("/public-old", "OPTIONS", NO_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/public-old\', \'GET\', NO_CREDS, 200),\n-            (\'/public-old\', \'POST\', NO_CREDS, 401),\n-            (\'/public-old\', \'PUT\', NO_CREDS, 401),\n-            (\'/public-old\', \'PATCH\', NO_CREDS, 401),\n-            (\'/public-old\', \'DELETE\', NO_CREDS, 401),\n-            (\'/public-old\', \'OPTIONS\', NO_CREDS, 200),\n+            ("/public-old", "GET", NO_CREDS, 200),\n+            ("/public-old", "POST", NO_CREDS, 401),\n+            ("/public-old", "PUT", NO_CREDS, 401),\n+            ("/public-old", "PATCH", NO_CREDS, 401),\n+            ("/public-old", "DELETE", NO_CREDS, 401),\n+            ("/public-old", "OPTIONS", NO_CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\n \n     def test_moved_public_dx_folder_invalid_creds(self):\n         expectations = [\n-            (\'/public-old\', \'GET\', INVALID_CREDS, 301),\n-            (\'/public-old\', \'POST\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'PUT\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'PATCH\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'DELETE\', INVALID_CREDS, 308),\n-            (\'/public-old\', \'OPTIONS\', INVALID_CREDS, 308),\n+            ("/public-old", "GET", INVALID_CREDS, 301),\n+            ("/public-old", "POST", INVALID_CREDS, 308),\n+            ("/public-old", "PUT", INVALID_CREDS, 308),\n+            ("/public-old", "PATCH", INVALID_CREDS, 308),\n+            ("/public-old", "DELETE", INVALID_CREDS, 308),\n+            ("/public-old", "OPTIONS", INVALID_CREDS, 308),\n         ]\n         self.validate(expectations)\n \n         # Same, but with following redirects, asserting on the final status\n         expectations = [\n-            (\'/public-old\', \'GET\', INVALID_CREDS, 200),\n-            (\'/public-old\', \'POST\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'PUT\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'PATCH\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'DELETE\', INVALID_CREDS, 401),\n-            (\'/public-old\', \'OPTIONS\', INVALID_CREDS, 200),\n+            ("/public-old", "GET", INVALID_CREDS, 200),\n+            ("/public-old", "POST", INVALID_CREDS, 401),\n+            ("/public-old", "PUT", INVALID_CREDS, 401),\n+            ("/public-old", "PATCH", INVALID_CREDS, 401),\n+            ("/public-old", "DELETE", INVALID_CREDS, 401),\n+            ("/public-old", "OPTIONS", INVALID_CREDS, 200),\n         ]\n         self.validate(expectations, follow_redirects=True)\ndiff --git a/src/plone/rest/tests/test_error_handling.py b/src/plone/rest/tests/test_error_handling.py\nindex ed3dc8d..b2cf511 100644\n--- a/src/plone/rest/tests/test_error_handling.py\n+++ b/src/plone/rest/tests/test_error_handling.py\n@@ -17,105 +17,95 @@ class TestErrorHandling(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'document1\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="document1")\n         self.document = self.portal.document1\n         self.document_url = self.document.absolute_url()\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\')\n+        self.portal.invokeFactory("Folder", id="folder1")\n         self.folder = self.portal.folder1\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n \n     def test_404_not_found(self):\n         response = requests.get(\n-            self.portal_url + \'/non-existing-resource\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.portal_url + "/non-existing-resource",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 404)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n+        self.assertEqual("NotFound", response.json()["type"])\n         self.assertEqual(\n-            \'NotFound\',\n-            response.json()[\'type\']\n-        )\n-        self.assertEqual(\n-            \'Resource not found: %s\' % response.url,\n-            response.json()[\'message\']\n+            "Resource not found: %s" % response.url, response.json()["message"]\n         )\n \n     def test_401_unauthorized(self):\n         response = requests.get(\n-            self.document_url,\n-            headers={\'Accept\': \'application/json\'}\n+            self.document_url, headers={"Accept": "application/json"}\n         )\n         self.assertEqual(response.status_code, 401)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n-        self.assertNotIn(\'Location\', response.headers,\n-                         \'A 401 unauthorized should not redirect.\')\n-        self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'Unauthorized\',\n-            response.json()[\'type\']\n+        self.assertNotIn(\n+            "Location", response.headers, "A 401 unauthorized should not redirect."\n         )\n+        self.assertTrue(json.loads(response.content))\n+        self.assertEqual("Unauthorized", response.json()["type"])\n \n     def test_500_internal_server_error(self):\n         response = requests.get(\n-            self.portal_url + \'/500-internal-server-error\',\n-            headers={\'Accept\': \'application/json\'}\n+            self.portal_url + "/500-internal-server-error",\n+            headers={"Accept": "application/json"},\n         )\n \n         self.assertEqual(response.status_code, 500)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'HTTPError\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("HTTPError", response.json()["type"])\n \n         self.assertEqual(\n-            {u\'type\': u\'HTTPError\',\n-             u\'message\': u\'HTTP Error 500: InternalServerError\'},\n-            response.json())\n+            {u"type": u"HTTPError", u"message": u"HTTP Error 500: InternalServerError"},\n+            response.json(),\n+        )\n \n     def test_500_traceback_only_for_manager_users(self):\n         # Normal user\n         response = requests.get(\n-            self.portal_url + \'/500-internal-server-error\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(TEST_USER_ID, TEST_USER_PASSWORD)\n+            self.portal_url + "/500-internal-server-error",\n+            headers={"Accept": "application/json"},\n+            auth=(TEST_USER_ID, TEST_USER_PASSWORD),\n         )\n-        self.assertNotIn(u\'traceback\', response.json())\n+        self.assertNotIn(u"traceback", response.json())\n \n         # Manager user\n         response = requests.get(\n-            self.portal_url + \'/500-internal-server-error\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.portal_url + "/500-internal-server-error",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertIn(u\'traceback\', response.json())\n+        self.assertIn(u"traceback", response.json())\n \n-        traceback = response.json()[u\'traceback\']\n+        traceback = response.json()[u"traceback"]\n         self.assertIsInstance(traceback, list)\n         self.assertRegexpMatches(\n-            traceback[0],\n-            r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\')\n+            traceback[0], r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\'\n+        )\ndiff --git a/src/plone/rest/tests/test_named_services.py b/src/plone/rest/tests/test_named_services.py\nindex 3bdeedb..fe1977b 100644\n--- a/src/plone/rest/tests/test_named_services.py\n+++ b/src/plone/rest/tests/test_named_services.py\n@@ -15,83 +15,65 @@ class TestNamedServiceEndpoints(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.document = self.portal["doc1"]\n         transaction.commit()\n \n     def test_dexterity_named_get(self):\n         response = requests.get(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named get\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named get"}, response.json())\n \n     def test_dexterity_named_post(self):\n         response = requests.post(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named post\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named post"}, response.json())\n \n     def test_dexterity_named_put(self):\n         response = requests.put(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named put\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named put"}, response.json())\n \n     def test_dexterity_named_patch(self):\n         response = requests.patch(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named patch\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named patch"}, response.json())\n \n     def test_dexterity_named_delete(self):\n         response = requests.delete(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named delete\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named delete"}, response.json())\n \n     def test_dexterity_named_options(self):\n         response = requests.options(\n-            self.document.absolute_url() + \'/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            self.document.absolute_url() + "/namedservice",\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            {u\'service\': u\'named options\'},\n-            response.json()\n-        )\n+        self.assertEqual({u"service": u"named options"}, response.json())\ndiff --git a/src/plone/rest/tests/test_negotiation.py b/src/plone/rest/tests/test_negotiation.py\nindex 81c36ff..70edd5a 100644\n--- a/src/plone/rest/tests/test_negotiation.py\n+++ b/src/plone/rest/tests/test_negotiation.py\n@@ -7,82 +7,90 @@\n \n \n class TestAcceptHeaderParser(unittest.TestCase):\n-\n     def test_parse_application_json_accept_header(self):\n-        accept = \'application/json\'\n-        expected = [(\'application\', \'json\')]\n+        accept = "application/json"\n+        expected = [("application", "json")]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_jquery_json_accept_header(self):\n-        accept = (\'text/javascript, application/javascript, \'\n-                  \'application/ecmascript, application/x-ecmascript, \'\n-                  \'*/*; q=0.01\')\n-        expected = [(\'text\', \'javascript\'),\n-                    (\'application\', \'javascript\'),\n-                    (\'application\', \'ecmascript\'),\n-                    (\'application\', \'x-ecmascript\'),\n-                    (\'*\', \'*\')]\n+        accept = (\n+            "text/javascript, application/javascript, "\n+            "application/ecmascript, application/x-ecmascript, "\n+            "*/*; q=0.01"\n+        )\n+        expected = [\n+            ("text", "javascript"),\n+            ("application", "javascript"),\n+            ("application", "ecmascript"),\n+            ("application", "x-ecmascript"),\n+            ("*", "*"),\n+        ]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_firefox_accept_header(self):\n-        accept = (\'text/html,application/xhtml+xml,application/xml;q=0.9,\'\n-                  \'*/*;q=0.8\')\n-        expected = [(\'text\', \'html\'),\n-                    (\'application\', \'xhtml+xml\'),\n-                    (\'application\', \'xml\'),\n-                    (\'*\', \'*\')]\n+        accept = "text/html,application/xhtml+xml,application/xml;q=0.9," "*/*;q=0.8"\n+        expected = [\n+            ("text", "html"),\n+            ("application", "xhtml+xml"),\n+            ("application", "xml"),\n+            ("*", "*"),\n+        ]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_chrome_accept_header(self):\n-        accept = (\'text/html,application/xhtml+xml,application/xml;q=0.9,\'\n-                  \'image/webp,*/*;q=0.8\')\n-        expected = [(\'text\', \'html\'),\n-                    (\'application\', \'xhtml+xml\'),\n-                    (\'application\', \'xml\'),\n-                    (\'image\', \'webp\'),\n-                    (\'*\', \'*\')]\n+        accept = (\n+            "text/html,application/xhtml+xml,application/xml;q=0.9,"\n+            "image/webp,*/*;q=0.8"\n+        )\n+        expected = [\n+            ("text", "html"),\n+            ("application", "xhtml+xml"),\n+            ("application", "xml"),\n+            ("image", "webp"),\n+            ("*", "*"),\n+        ]\n         self.assertEqual(expected, parse_accept_header(accept))\n \n     def test_parse_all_media_types_accept_header(self):\n-        self.assertEqual([(\'*\', \'*\')], parse_accept_header(\'*/*\'))\n+        self.assertEqual([("*", "*")], parse_accept_header("*/*"))\n \n     def test_parse_invalid_accept_header(self):\n-        self.assertEqual([], parse_accept_header(\'invalid\'))\n+        self.assertEqual([], parse_accept_header("invalid"))\n \n \n class TestServiceRegistry(unittest.TestCase):\n-\n     def test_register_media_type(self):\n-        self.assertEqual(u\'GET_application_json_\',\n-                         register_service(\'GET\', (\'application\', \'json\')))\n-        self.assertEqual(u\'GET_application_json_\',\n-                         lookup_service_id(\'GET\', \'application/json\'))\n+        self.assertEqual(\n+            u"GET_application_json_", register_service("GET", ("application", "json"))\n+        )\n+        self.assertEqual(\n+            u"GET_application_json_", lookup_service_id("GET", "application/json")\n+        )\n \n     def test_register_wildcard_subtype(self):\n-        self.assertEqual(u\'PATCH_text_*_\',\n-                         register_service(\'PATCH\', (\'text\', \'*\')))\n-        self.assertEqual(u\'PATCH_text_*_\',\n-                         lookup_service_id(\'PATCH\', \'text/xml\'))\n+        self.assertEqual(u"PATCH_text_*_", register_service("PATCH", ("text", "*")))\n+        self.assertEqual(u"PATCH_text_*_", lookup_service_id("PATCH", "text/xml"))\n \n     def test_register_wilcard_type(self):\n-        self.assertEqual(u\'PATCH_*_*_\', register_service(\'PATCH\', (\'*\', \'*\')))\n-        self.assertEqual(u\'PATCH_*_*_\', lookup_service_id(\'PATCH\', \'foo/bar\'))\n+        self.assertEqual(u"PATCH_*_*_", register_service("PATCH", ("*", "*")))\n+        self.assertEqual(u"PATCH_*_*_", lookup_service_id("PATCH", "foo/bar"))\n \n     def test_service_id_for_multiple_media_types_is_none(self):\n-        register_service(\'GET\', \'application/json\')\n-        self.assertEqual(None, lookup_service_id(\n-            \'GET\', \'application/json,application/javascipt\'))\n+        register_service("GET", "application/json")\n+        self.assertEqual(\n+            None, lookup_service_id("GET", "application/json,application/javascipt")\n+        )\n \n     def test_service_id_for_invalid_media_type_is_none(self):\n-        self.assertEqual(None, lookup_service_id(\'GET\', \'application-json\'))\n+        self.assertEqual(None, lookup_service_id("GET", "application-json"))\n \n     def test_service_id_for_not_registered_media_type_is_none(self):\n-        self.assertEqual(None, lookup_service_id(\'PUT\', \'text/html\'))\n+        self.assertEqual(None, lookup_service_id("PUT", "text/html"))\n \n     def test_service_id_for_wildcard_type_is_none(self):\n-        register_service(\'GET\', \'application/json\')\n-        self.assertEqual(None, lookup_service_id(\'GET\', \'*/*\'))\n+        register_service("GET", "application/json")\n+        self.assertEqual(None, lookup_service_id("GET", "*/*"))\n \n     def test_service_id_for_wildcard_subtype_is_none(self):\n-        register_service(\'GET\', \'text/xml\')\n-        self.assertEqual(None, lookup_service_id(\'GET\', \'text/*\'))\n+        register_service("GET", "text/xml")\n+        self.assertEqual(None, lookup_service_id("GET", "text/*"))\ndiff --git a/src/plone/rest/tests/test_permissions.py b/src/plone/rest/tests/test_permissions.py\nindex 673d592..2ab0df6 100644\n--- a/src/plone/rest/tests/test_permissions.py\n+++ b/src/plone/rest/tests/test_permissions.py\n@@ -21,38 +21,33 @@ class TestPermissions(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.portal.acl_users.userFolderAddUser(\n-            \'admin\',\n-            \'secret\',\n-            [\'Manager\'],\n-            []\n-        )\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.portal.acl_users.userFolderAddUser("admin", "secret", ["Manager"], [])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, \'publish\')\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n-        b64auth = b64encode(auth.encode(\'utf8\'))\n-        request._auth = \'Basic %s\' % b64auth.decode(\'utf8\')\n+        self.portal.invokeFactory("Document", id="doc1")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, "publish")\n+\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        b64auth = b64encode(auth.encode("utf8"))\n+        request._auth = "Basic %s" % b64auth.decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_traverse_with_insufficient_permission_raises_unauthorized(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         with self.assertRaises(Unauthorized):\n-            self.traverse(\'/plone/doc1\', method=\'PUT\')\n+            self.traverse("/plone/doc1", method="PUT")\n \n     def test_traverse_with_sufficient_permission_returns_service(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Editor\'])\n-        obj = self.traverse(\'/plone/doc1\', method=\'PUT\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        setRoles(self.portal, TEST_USER_ID, ["Editor"])\n+        obj = self.traverse("/plone/doc1", method="PUT")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex 3d42d03..37c61dc 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -19,43 +19,41 @@ class TestRedirects(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.portal.invokeFactory(\'Folder\', id=\'folder-old\')\n-        self.portal.manage_renameObject(\'folder-old\', \'folder-new\')\n+        self.portal.invokeFactory("Folder", id="folder-old")\n+        self.portal.manage_renameObject("folder-old", "folder-new")\n         transaction.commit()\n \n     def test_get_to_moved_item_causes_301_redirect(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_post_to_moved_item_causes_308_redirect(self):\n         response = requests.post(\n-            self.portal_url + \'/folder-old\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(308, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_unauthorized_request_to_item_still_redirects_first(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old",\n+            headers={"Accept": "application/json"},\n             # No auth\n             allow_redirects=False,\n         )\n@@ -63,14 +61,13 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n         # A request to the old URL of an item where the user doesn\'t have\n         # necessary permissions will still result in a redirect\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/folder-new", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n         # Following the redirect then leads to an item that will produce a 401\n         response = requests.get(\n-            response.headers[\'Location\'],\n-            headers={\'Accept\': \'application/json\'},\n+            response.headers["Location"],\n+            headers={"Accept": "application/json"},\n             # No auth\n             allow_redirects=False,\n         )\n@@ -78,73 +75,80 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n \n     def test_query_string_gets_preserved(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old?key=value\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old?key=value",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new?key=value\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new?key=value", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_named_service_on_moved_item_causes_301_redirect(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/namedservice\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/namedservice",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/namedservice\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/namedservice", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_named_service_plus_path_parameter_works(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/namedservice/param\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/namedservice/param",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/namedservice/param\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/namedservice/param",\n+            response.headers["Location"],\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_redirects_for_regular_views_still_work(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/@@some-view\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/@@some-view",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/@@some-view\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/@@some-view", response.headers["Location"]\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         response = requests.get(\n-            self.portal_url + \'/folder-old/@@some-view/param?k=v\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/folder-old/@@some-view/param?k=v",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/folder-new/@@some-view/param?k=v\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(\n+            self.portal_url + "/folder-new/@@some-view/param?k=v",\n+            response.headers["Location"],\n+        )\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n         storage = queryUtility(IRedirectionStorage)\n-        storage._paths[\'/plone/same\'] = \'/plone/same\'\n-        storage._rpaths[\'/plone/same\'] = OOSet([\'/plone/same\'])\n+        storage._paths["/plone/same"] = "/plone/same"\n+        storage._rpaths["/plone/same"] = OOSet(["/plone/same"])\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal_url + \'/same/@@view\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/same/@@view",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n@@ -152,26 +156,24 @@ def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n \n     def test_handles_redirects_that_include_querystring_in_old_path(self):\n         storage = queryUtility(IRedirectionStorage)\n-        storage.add(\'/plone/some-item?key=value\', \'/plone/new-item\')\n+        storage.add("/plone/some-item?key=value", "/plone/new-item")\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal_url + \'/some-item?key=value\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/some-item?key=value",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             allow_redirects=False,\n         )\n         self.assertEqual(301, response.status_code)\n-        self.assertEqual(self.portal_url + \'/new-item\',\n-                         response.headers[\'Location\'])\n-        self.assertEqual(b\'\', response.raw.read())\n+        self.assertEqual(self.portal_url + "/new-item", response.headers["Location"])\n+        self.assertEqual(b"", response.raw.read())\n \n     def test_aborts_redirect_checks_early_for_app_root(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n-        self.assertIsNone(\n-            error_view.find_redirect_if_view_or_service([\'\'], None))\n+        self.assertIsNone(error_view.find_redirect_if_view_or_service([""], None))\n \n     def test_gracefully_deals_with_missing_request_url(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n-        self.portal.REQUEST[\'ACTUAL_URL\'] = None\n+        self.portal.REQUEST["ACTUAL_URL"] = None\n         self.assertEquals(False, error_view.attempt_redirect())\ndiff --git a/src/plone/rest/tests/test_siteroot.py b/src/plone/rest/tests/test_siteroot.py\nindex 985b370..6cf71d5 100644\n--- a/src/plone/rest/tests/test_siteroot.py\n+++ b/src/plone/rest/tests/test_siteroot.py\n@@ -14,82 +14,82 @@ class TestSiteRootServiceEndpoints(unittest.TestCase):\n     layer = PLONE_REST_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_siteroot_get(self):\n         response = requests.get(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(\n             response.status_code,\n             200,\n-            \'GET /Plone should return status code 200, not {}\'.format(\n+            "GET /Plone should return status code 200, not {}".format(\n                 response.status_code\n-            )\n+            ),\n         )\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'GET\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"GET", response.json().get("method"))\n \n     def test_siteroot_post(self):\n         response = requests.post(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(\n             response.status_code,\n             200,\n-            \'POST /Plone should return status code 201, not {}\'.format(\n+            "POST /Plone should return status code 201, not {}".format(\n                 response.status_code\n-            )\n+            ),\n         )\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'POST\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"POST", response.json().get("method"))\n \n     def test_siteroot_delete(self):\n         response = requests.delete(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'DELETE\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"DELETE", response.json().get("method"))\n \n     def test_siteroot_put(self):\n         response = requests.put(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PUT\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"PUT", response.json().get("method"))\n \n     def test_siteroot_patch(self):\n         response = requests.patch(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'PATCH\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"PATCH", response.json().get("method"))\n \n     def test_siteroot_options(self):\n         response = requests.options(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n-            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(u\'plone\', response.json().get(\'id\'))\n-        self.assertEqual(u\'OPTIONS\', response.json().get(\'method\'))\n+        self.assertEqual(u"plone", response.json().get("id"))\n+        self.assertEqual(u"OPTIONS", response.json().get("method"))\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 80a97db..dc67591 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -22,111 +22,113 @@ class TestTraversal(unittest.TestCase):\n     layer = PLONE_REST_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        b64auth = b64encode(auth.encode(\'utf8\'))\n-        request._auth = \'Basic %s\' % b64auth.decode(\'utf8\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        b64auth = b64encode(auth.encode("utf8"))\n+        request._auth = "Basic %s" % b64auth.decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_json_request_on_portal_root_returns_service(self):\n         obj = self.traverse()\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_json_request_on_portal_root_with_layout_returns_service(self):\n-        self.portal.setLayout(\'summary_view\')\n+        self.portal.setLayout("summary_view")\n         obj = self.traverse()\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n-    def test_json_request_on_portal_root_with_default_page_returns_service(\n-            self):\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.setDefaultPage(\'doc1\')\n+    def test_json_request_on_portal_root_with_default_page_returns_service(self):\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.portal.setDefaultPage("doc1")\n         obj = self.traverse()\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_json_request_on_content_object_returns_service(self):\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        obj = self.traverse(path=\'/plone/doc1\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        self.portal.invokeFactory("Document", id="doc1")\n+        obj = self.traverse(path="/plone/doc1")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_html_request_on_portal_root_returns_default_view(self):\n-        obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'listing_view\', obj.__name__)\n+        obj = self.traverse(accept="text/html")\n+        self.assertEquals("listing_view", obj.__name__)\n \n     def test_html_request_on_portal_root_returns_dynamic_view(self):\n-        self.portal.setLayout(\'summary_view\')\n-        obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'summary_view\', obj.__name__)\n+        self.portal.setLayout("summary_view")\n+        obj = self.traverse(accept="text/html")\n+        self.assertEquals("summary_view", obj.__name__)\n \n     def test_html_request_on_portal_root_returns_default_page(self):\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.setDefaultPage(\'doc1\')\n-        obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'document_view\', obj.__name__)\n+        self.portal.invokeFactory("Document", id="doc1")\n+        self.portal.setDefaultPage("doc1")\n+        obj = self.traverse(accept="text/html")\n+        self.assertEquals("document_view", obj.__name__)\n \n     def test_json_request_on_object_with_multihook(self):\n-        doc1 = self.portal[self.portal.invokeFactory(\'Document\', id=\'doc1\')]\n+        doc1 = self.portal[self.portal.invokeFactory("Document", id="doc1")]\n \n         # Register a function to be called before traversal\n         def btr_test(container, request):\n             request._btr_test_called = 1\n+\n         doc1.btr_test = btr_test\n-        nc = BeforeTraverse.NameCaller(\'btr_test\')\n-        BeforeTraverse.registerBeforeTraverse(doc1, nc, \'Document/btr_test\')\n+        nc = BeforeTraverse.NameCaller("btr_test")\n+        BeforeTraverse.registerBeforeTraverse(doc1, nc, "Document/btr_test")\n \n-        obj = self.traverse(path=\'/plone/doc1\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        obj = self.traverse(path="/plone/doc1")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n         self.assertEquals(1, self.request._btr_test_called)\n \n     def test_json_request_on_existing_view_returns_named_service(self):\n-        obj = self.traverse(\'/plone/search\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        obj = self.traverse("/plone/search")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n         alsoProvides(folder, INavigationRoot)\n-        obj = self.traverse(\'/plone/folder1/search\')\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n+        obj = self.traverse("/plone/folder1/search")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n \n     def test_html_request_on_existing_view_returns_view(self):\n-        obj = self.traverse(path=\'/plone/search\', accept=\'text/html\')\n-        self.assertFalse(isinstance(obj, Service), \'Got a service\')\n+        obj = self.traverse(path="/plone/search", accept="text/html")\n+        self.assertFalse(isinstance(obj, Service), "Got a service")\n \n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n         alsoProvides(folder, INavigationRoot)\n-        obj = self.traverse(path=\'/plone/folder1/search\', accept=\'text/html\')\n-        self.assertFalse(isinstance(obj, Service), \'Got a service\')\n+        obj = self.traverse(path="/plone/folder1/search", accept="text/html")\n+        self.assertFalse(isinstance(obj, Service), "Got a service")\n \n     def test_virtual_hosting(self):\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         vhm = VirtualHostMonster()\n-        vhm.id = \'virtual_hosting\'\n+        vhm.id = "virtual_hosting"\n         vhm.addToContainer(app)\n-        obj = self.traverse(path=\'/VirtualHostBase/http/localhost:8080/plone/VirtualHostRoot/\')  # noqa\n-        self.assertTrue(isinstance(obj, Service), \'Not a service\')\n-        del app[\'virtual_hosting\']\n+        obj = self.traverse(\n+            path="/VirtualHostBase/http/localhost:8080/plone/VirtualHostRoot/"\n+        )  # noqa\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n+        del app["virtual_hosting"]\n \n     def test_json_request_to_regular_view_returns_view(self):\n-        obj = self.traverse(\'/plone/folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        obj = self.traverse("/plone/folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\n \n-        self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n-        obj = self.traverse(\'/plone/folder1/folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n+        obj = self.traverse("/plone/folder1/folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\n \n     def test_json_request_to_view_namespace_returns_view(self):\n-        obj = self.traverse(\'/plone/@@folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        obj = self.traverse("/plone/@@folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\n \n-        self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder1\')]\n-        obj = self.traverse(\'/plone/folder1/@@folder_contents\')\n-        self.assertTrue(IBrowserView.providedBy(obj), \'IBrowserView expected\')\n+        self.portal[self.portal.invokeFactory("Folder", id="folder1")]\n+        obj = self.traverse("/plone/folder1/@@folder_contents")\n+        self.assertTrue(IBrowserView.providedBy(obj), "IBrowserView expected")\ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex 6a705a8..259d83a 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -13,20 +13,19 @@\n \n @adapter(ISiteRoot, IAPIRequest)\n class RESTTraverse(DefaultPublishTraverse):\n-\n     def publishTraverse(self, request, name):\n         try:\n             obj = super(RESTTraverse, self).publishTraverse(request, name)\n-            if (not IContentish.providedBy(obj)\n-                    and not IService.providedBy(obj)):\n+            if not IContentish.providedBy(obj) and not IService.providedBy(obj):\n                 if isinstance(obj, VirtualHostMonster):\n                     return obj\n                 else:\n                     raise KeyError\n         except KeyError:\n             # No object, maybe a named rest service\n-            service = queryMultiAdapter((self.context, request),\n-                                        name=request._rest_service_id + name)\n+            service = queryMultiAdapter(\n+                (self.context, request), name=request._rest_service_id + name\n+            )\n             if service is None:\n                 # No service, fallback to regular view\n                 view = queryMultiAdapter((self.context, request), name=name)\n@@ -39,7 +38,7 @@ def publishTraverse(self, request, name):\n             return obj\n \n         # Do not handle view namespace\n-        if \'@@\' in request[\'PATH_INFO\'] or \'++view++\' in request[\'PATH_INFO\']:\n+        if "@@" in request["PATH_INFO"] or "++view++" in request["PATH_INFO"]:\n             return obj\n \n         # Wrap object to ensure we handle further traversal\n@@ -72,7 +71,7 @@ def __getitem__(self, name):\n \n     # MultiHook requries this to be a class attribute\n     def __before_publishing_traverse__(self, arg1, arg2=None):\n-        bpth = getattr(self.context, \'__before_publishing_traverse__\', False)\n+        bpth = getattr(self.context, "__before_publishing_traverse__", False)\n         if bpth:\n             if not self._bpth_called:\n                 self._bpth_called = True\n@@ -83,16 +82,16 @@ def publishTraverse(self, request, name):\n         adapter = DefaultPublishTraverse(self.context, request)\n         try:\n             obj = adapter.publishTraverse(request, name)\n-            if (not IContentish.providedBy(obj)\n-                    and not IService.providedBy(obj)):\n+            if not IContentish.providedBy(obj) and not IService.providedBy(obj):\n                 raise KeyError\n \n         # If there\'s no object with the given name, we get a KeyError.\n         # In a non-folderish context a key lookup results in an AttributeError.\n         except (KeyError, AttributeError):\n             # No object, maybe a named rest service\n-            service = queryMultiAdapter((self.context, request),\n-                                        name=request._rest_service_id + name)\n+            service = queryMultiAdapter(\n+                (self.context, request), name=request._rest_service_id + name\n+            )\n             if service is None:\n                 # No service, fallback to regular view\n                 view = queryMultiAdapter((self.context, request), name=name)\ndiff --git a/src/plone/rest/zcml.py b/src/plone/rest/zcml.py\nindex f0bc365..287398a 100644\n--- a/src/plone/rest/zcml.py\n+++ b/src/plone/rest/zcml.py\n@@ -24,12 +24,12 @@ class IService(Interface):\n     """\n \n     method = TextLine(\n-        title=u"The name of the view that should be the default. " +\n-              u"[get|post|put|delete]",\n+        title=u"The name of the view that should be the default. "\n+        + u"[get|post|put|delete]",\n         description=u"""\n         This name refers to view that should be the view used by\n         default (if no view name is supplied explicitly).""",\n-        )\n+    )\n \n     accept = TextLine(\n         title=u"Acceptable media types",\n@@ -37,7 +37,8 @@ class IService(Interface):\n         The service is limited to the given media type and only called if the\n         request contains an "Accept" header with the given media type. Multiple\n         media types can be given by separating them with a comma.""",\n-        default=u"application/json")\n+        default=u"application/json",\n+    )\n \n     for_ = GlobalObject(\n         title=u"The interface this view is the default for.",\n@@ -45,11 +46,12 @@ class IService(Interface):\n         registered. All objects implementing this interface can make use of\n         this view. If this attribute is not specified, the view is available\n         for all objects.""",\n-        )\n+    )\n \n     factory = GlobalObject(\n         title=u"The factory for this service",\n-        description=u"The factory is usually subclass of the Service class.")\n+        description=u"The factory is usually subclass of the Service class.",\n+    )\n \n     name = TextLine(\n         title=u"The name of the service.",\n@@ -58,7 +60,8 @@ class IService(Interface):\n         available at the object\'s absolute URL appended with a slash and the\n         service name.""",\n         required=False,\n-        default=u\'\')\n+        default=u"",\n+    )\n \n     layer = GlobalInterface(\n         title=u"The browser layer for which this service is registered.",\n@@ -67,25 +70,25 @@ class IService(Interface):\n                         installed.""",\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     permission = Permission(\n         title=u"Permission",\n         description=u"The permission needed to access the service.",\n         required=True,\n-        )\n+    )\n \n \n def serviceDirective(\n-        _context,\n-        method,\n-        accept,\n-        factory,\n-        for_,\n-        permission,\n-        layer=IDefaultBrowserLayer,\n-        name=u\'\',\n-        ):\n+    _context,\n+    method,\n+    accept,\n+    factory,\n+    for_,\n+    permission,\n+    layer=IDefaultBrowserLayer,\n+    name=u"",\n+):\n \n     _handle_for(_context, for_)\n \n@@ -102,28 +105,33 @@ def serviceDirective(\n         # Create a new class. We\'ll execute some security declarations on it\n         # and don\'t want to modify the original class.\n         cdict = getSecurityInfo(factory)\n-        cdict[\'__name__\'] = view_name\n-        cdict[\'method\'] = method.upper()\n+        cdict["__name__"] = view_name\n+        cdict["method"] = method.upper()\n         new_class = type(factory.__name__, (factory, BrowserView), cdict)\n \n         _context.action(\n-            discriminator=(\'plone.rest:service\', method, media_type, for_,\n-                           name, layer),\n+            discriminator=("plone.rest:service", method, media_type, for_, name, layer),\n             callable=handler,\n-            args=(\'registerAdapter\', new_class, (for_, layer), Interface,\n-                  view_name, _context.info),\n+            args=(\n+                "registerAdapter",\n+                new_class,\n+                (for_, layer),\n+                Interface,\n+                view_name,\n+                _context.info,\n+            ),\n         )\n \n         _context.action(\n-            discriminator=(\'plone.rest:protectClass\', new_class),\n+            discriminator=("plone.rest:protectClass", new_class),\n             callable=protectClass,\n-            args=(new_class, permission)\n+            args=(new_class, permission),\n         )\n         _context.action(\n-            discriminator=(\'plone.rest:InitializeClass\', new_class),\n+            discriminator=("plone.rest:InitializeClass", new_class),\n             callable=InitializeClass,\n-            args=(new_class,)\n-            )\n+            args=(new_class,),\n+        )\n \n \n class ICORSPolicyDirective(Interface):\n@@ -135,7 +143,7 @@ class ICORSPolicyDirective(Interface):\n         registered. If this attribute is not specified, the CORS policy applies\n         to all objects.""",\n         required=False,\n-        )\n+    )\n \n     layer = GlobalInterface(\n         title=u"The browser layer for which this CORS policy is registered.",\n@@ -144,14 +152,14 @@ class ICORSPolicyDirective(Interface):\n                         installed.""",\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     allow_origin = TextLine(\n         title=u"Origins",\n         description=u"""Origins that are allowed access to the resource. Either\n         a comma separated list of origins, e.g. "http://example.net,\n         http://mydomain.com" or "*".""",\n-        )\n+    )\n \n     allow_methods = TextLine(\n         title=u"Methods",\n@@ -159,74 +167,80 @@ class ICORSPolicyDirective(Interface):\n         allowed by this CORS policy, e.g. "DELETE,GET,OPTIONS,PATCH,POST,PUT".\n         """,\n         required=False,\n-        )\n+    )\n \n     allow_headers = TextLine(\n         title=u"Headers",\n         description=u"""A comma separated list of request headers allowed to be\n         sent by the client, e.g. "X-My-Header".""",\n         required=False,\n-        )\n+    )\n \n     expose_headers = TextLine(\n         title=u"Exposed Headers",\n         description=u"""A comma separated list of response headers clients can\n         access, e.g. "Content-Length,X-My-Header".""",\n         required=False,\n-        )\n+    )\n \n     allow_credentials = Bool(\n         title=u"Support Credentials",\n         description=u"""Indicates whether the resource supports user\n         credentials in the request.""",\n         default=False,\n-        )\n+    )\n \n     max_age = TextLine(\n         title=u"Max Age",\n         description=u"""Indicates how long the results of a preflight request\n         can be cached.""",\n         required=False,\n-        )\n+    )\n \n \n def cors_policy_directive(\n-        _context,\n-        allow_origin,\n-        allow_credentials,\n-        allow_methods=None,\n-        expose_headers=None,\n-        allow_headers=None,\n-        max_age=None,\n-        for_=Interface,\n-        layer=IDefaultBrowserLayer,):\n+    _context,\n+    allow_origin,\n+    allow_credentials,\n+    allow_methods=None,\n+    expose_headers=None,\n+    allow_headers=None,\n+    max_age=None,\n+    for_=Interface,\n+    layer=IDefaultBrowserLayer,\n+):\n \n     _handle_for(_context, for_)\n \n     # Create a new policy class and store the CORS policy configuration in\n     # class attributes.\n     cdict = {}\n-    cdict[\'allow_origin\'] = [o.strip() for o in allow_origin.split(\',\')]\n+    cdict["allow_origin"] = [o.strip() for o in allow_origin.split(",")]\n     if allow_methods is not None:\n-        cdict[\'allow_methods\'] = [m.strip() for m in allow_methods.split(\',\')]\n+        cdict["allow_methods"] = [m.strip() for m in allow_methods.split(",")]\n     else:\n-        cdict[\'allow_methods\'] = None\n-    cdict[\'allow_credentials\'] = allow_credentials\n+        cdict["allow_methods"] = None\n+    cdict["allow_credentials"] = allow_credentials\n     if expose_headers:\n-        cdict[\'expose_headers\'] = [\n-            h.strip() for h in expose_headers.split(\',\')]\n+        cdict["expose_headers"] = [h.strip() for h in expose_headers.split(",")]\n     else:\n-        cdict[\'expose_headers\'] = []\n+        cdict["expose_headers"] = []\n     if allow_headers:\n-        cdict[\'allow_headers\'] = [h.strip() for h in allow_headers.split(\',\')]\n+        cdict["allow_headers"] = [h.strip() for h in allow_headers.split(",")]\n     else:\n-        cdict[\'allow_headers\'] = []\n-    cdict[\'max_age\'] = max_age\n+        cdict["allow_headers"] = []\n+    cdict["max_age"] = max_age\n     new_class = type(CORSPolicy.__name__, (CORSPolicy,), cdict)\n \n     _context.action(\n-        discriminator=(\'plone.rest:CORSPolicy\', for_, layer),\n+        discriminator=("plone.rest:CORSPolicy", for_, layer),\n         callable=handler,\n-        args=(\'registerAdapter\', new_class, (for_, layer),\n-              ICORSPolicy, u\'\', _context.info),\n-        )\n+        args=(\n+            "registerAdapter",\n+            new_class,\n+            (for_, layer),\n+            ICORSPolicy,\n+            u"",\n+            _context.info,\n+        ),\n+    )\n'

