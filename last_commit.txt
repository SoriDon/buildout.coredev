Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-10-10T21:27:56-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/23eddad307dc706c0da757a65c352efa5a81a844

Set remote library on PloneSite class instead of in zodb

Files changed:
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/testing.py

b'diff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 08bf1db..50b87eb 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -5,6 +5,7 @@\n     ploneSite\n )\n from plone.testing import Layer\n+from Products.CMFPlone.Portal import PloneSite\n \n \n class RemoteLibrary(SimpleItem):\n@@ -68,13 +69,10 @@ def __init__(self, *args, **kwargs):\n     def setUp(self):\n         id_ = self.__name__.split(\':\')[-1]\n         assert id_ not in globals(), "Conflicting remote library id: %s" % id_\n-        globals()[id_] = type(id_, self.libraryBases, {})\n-        with ploneSite() as portal:\n-            portal._setObject(id_, globals()[id_]())\n+        globals()[id_] = Remote = type(id_, self.libraryBases, {})\n+        setattr(PloneSite, id_, Remote())\n \n     def tearDown(self):\n         id_ = self.__name__.split(\':\')[-1]\n-        with ploneSite() as portal:\n-            if id_ in portal.objectIds():\n-                portal._delObject(id_)\n+        delattr(PloneSite, id_)\n         del globals()[id_]\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 180842f..74705e4 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -190,7 +190,6 @@ class PloneRobotFixture(PloneSandboxLayer):\n     defaultBases = (\n         SIMPLE_PUBLICATION_FIXTURE,\n         MOCK_MAILHOST_FIXTURE,\n-        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n     )\n \n     def _get_robot_variable(self, name):\n@@ -273,11 +272,18 @@ class Value:\n PLONE_ROBOT_FIXTURE = PloneRobotFixture()\n \n PLONE_ROBOT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_ROBOT_FIXTURE,), name="PloneRobot:Integration"\n+    bases=(\n+        PLONE_ROBOT_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+    ), name="PloneRobot:Integration"\n )\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE), name="Plone:Robot"\n+    bases=(\n+        PLONE_ROBOT_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ), name="Plone:Robot"\n )\n \n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-10-10T22:09:54-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/b59a08f9c53ae7f3b7495d064fca473f3fe7f4dd

fix one more layer

Files changed:
M src/plone/app/robotframework/tests/test_robotfixture.py

b'diff --git a/src/plone/app/robotframework/tests/test_robotfixture.py b/src/plone/app/robotframework/tests/test_robotfixture.py\nindex 20087d0..fa746b6 100644\n--- a/src/plone/app/robotframework/tests/test_robotfixture.py\n+++ b/src/plone/app/robotframework/tests/test_robotfixture.py\n@@ -8,6 +8,7 @@\n from plone.testing import layered\n \n from plone.app.robotframework.testing import PloneRobotFixture\n+from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n \n \n class CustomPloneRobotFixture(PloneRobotFixture):\n@@ -24,10 +25,15 @@ def tearDown(self):\n         if \'APPLY_PROFILES\' in os.environ:\n             del os.environ[\'APPLY_PROFILES\']\n \n+\n PLONE_ROBOT_FIXTURE = CustomPloneRobotFixture()\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(\n+        PLONE_ROBOT_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n     name="Plone:Robot"\n )\n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-10-12T21:48:20-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/2eeead6b7e571c4e6f1cd9065013f516f6844f27

changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0e3d07e..bda81c7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,11 @@ Bug fixes:\n - Read files as binary in Python 3.\n   [davisagli]\n \n+- Avoid test layer isolation problems by setting the remote library\n+  as an attribute of the PloneSite class instead of a particular\n+  portal instance.\n+  [davisagli]\n+\n \n 1.3.0 (2018-10-01)\n ------------------\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-10-13T00:08:43-04:00
Author: David Glick (davisagli) <dglick@salesforce.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/f84d1a90851d69c09b362885ba7c18ed417c84ee

Merge pull request #94 from plone/layer-workaround

Layer workaround

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/remote.py
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_robotfixture.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0e3d07e..bda81c7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,11 @@ Bug fixes:\n - Read files as binary in Python 3.\n   [davisagli]\n \n+- Avoid test layer isolation problems by setting the remote library\n+  as an attribute of the PloneSite class instead of a particular\n+  portal instance.\n+  [davisagli]\n+\n \n 1.3.0 (2018-10-01)\n ------------------\ndiff --git a/src/plone/app/robotframework/remote.py b/src/plone/app/robotframework/remote.py\nindex 08bf1db..50b87eb 100644\n--- a/src/plone/app/robotframework/remote.py\n+++ b/src/plone/app/robotframework/remote.py\n@@ -5,6 +5,7 @@\n     ploneSite\n )\n from plone.testing import Layer\n+from Products.CMFPlone.Portal import PloneSite\n \n \n class RemoteLibrary(SimpleItem):\n@@ -68,13 +69,10 @@ def __init__(self, *args, **kwargs):\n     def setUp(self):\n         id_ = self.__name__.split(\':\')[-1]\n         assert id_ not in globals(), "Conflicting remote library id: %s" % id_\n-        globals()[id_] = type(id_, self.libraryBases, {})\n-        with ploneSite() as portal:\n-            portal._setObject(id_, globals()[id_]())\n+        globals()[id_] = Remote = type(id_, self.libraryBases, {})\n+        setattr(PloneSite, id_, Remote())\n \n     def tearDown(self):\n         id_ = self.__name__.split(\':\')[-1]\n-        with ploneSite() as portal:\n-            if id_ in portal.objectIds():\n-                portal._delObject(id_)\n+        delattr(PloneSite, id_)\n         del globals()[id_]\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 180842f..74705e4 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -190,7 +190,6 @@ class PloneRobotFixture(PloneSandboxLayer):\n     defaultBases = (\n         SIMPLE_PUBLICATION_FIXTURE,\n         MOCK_MAILHOST_FIXTURE,\n-        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n     )\n \n     def _get_robot_variable(self, name):\n@@ -273,11 +272,18 @@ class Value:\n PLONE_ROBOT_FIXTURE = PloneRobotFixture()\n \n PLONE_ROBOT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_ROBOT_FIXTURE,), name="PloneRobot:Integration"\n+    bases=(\n+        PLONE_ROBOT_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+    ), name="PloneRobot:Integration"\n )\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE), name="Plone:Robot"\n+    bases=(\n+        PLONE_ROBOT_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ), name="Plone:Robot"\n )\n \n \ndiff --git a/src/plone/app/robotframework/tests/test_robotfixture.py b/src/plone/app/robotframework/tests/test_robotfixture.py\nindex 20087d0..fa746b6 100644\n--- a/src/plone/app/robotframework/tests/test_robotfixture.py\n+++ b/src/plone/app/robotframework/tests/test_robotfixture.py\n@@ -8,6 +8,7 @@\n from plone.testing import layered\n \n from plone.app.robotframework.testing import PloneRobotFixture\n+from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n \n \n class CustomPloneRobotFixture(PloneRobotFixture):\n@@ -24,10 +25,15 @@ def tearDown(self):\n         if \'APPLY_PROFILES\' in os.environ:\n             del os.environ[\'APPLY_PROFILES\']\n \n+\n PLONE_ROBOT_FIXTURE = CustomPloneRobotFixture()\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(\n+        PLONE_ROBOT_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n     name="Plone:Robot"\n )\n \n'

