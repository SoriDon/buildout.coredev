Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-05-09T12:12:11+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d87dc079a1c84dae3e1d69c92f43626e88d7bd5e

fix for quoted search terms

Files changed:
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 393fcd0005..9be8b4aaff 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -16,6 +16,7 @@\n from ZTUtils import make_query\n \n import json\n+import re\n \n _ = MessageFactory(\'plone\')\n \n@@ -52,9 +53,15 @@ class Search(BrowserView):\n     def munge_search_term(self, q):\n         for char in BAD_CHARS:\n             q = q.replace(char, \' \')\n-        r = map(quote, q.split())\n+\n+        # extract possibly quoted phrases first\n+        r = re.findall(r\'"[^"]*"\', q)\n+        for qp in r:\n+            q = q.replace(qp, "")\n+\n+        r += map(quote, q.strip().split())\n         r = " AND ".join(r)\n-        r = quote_chars(r) + \'*\'\n+        r = quote_chars(r) + (\'*\' if not r.endswith(\'"\') else \'\')\n         return r\n \n     def results(self, query=None, batch=True, b_size=10, b_start=0,\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex e132ab5130..6e897f6a23 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -257,6 +257,45 @@ def test_filter_with_plone3_query(self):\n         res = view.results(batch=False)\n         self.assertEqual([], [r for r in res])\n \n+    def test_quoted_phrase(self):\n+        portal = self.layer[\'portal\']\n+        # searching for ""\n+        view = portal.restrictedTraverse(\'@@search\')\n+        # unqoted\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'spam ham\')).sequence_length, 12)\n+        # quoted -> same result\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"spam ham"\')).sequence_length, 12)\n+        # unquoted reverse order -> all results\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'ham spam\')).sequence_length, 12)\n+        # quoted reverse order -> no results!\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"ham spam"\')).sequence_length,0)\n+\n+        # arbitrary words within index\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'spam eggs\')).sequence_length, 12)\n+        # arbitrary words within index quoted -> no results\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"spam eggs"\')).sequence_length, 0)\n+\n+        # unquoted subtring search\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'egg\')).sequence_length, 12)\n+        # quoted substring search -> exact match\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"egg"\')).sequence_length, 0)\n+\n+        # weird input\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"eggs" ham spam\')).sequence_length, 12)\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"eggs ham spam\')).sequence_length, 12)\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'eggs ham spam"\')).sequence_length, 12)\n+\n \n def test_suite():\n     """This sets up a test suite that actually runs the tests in the class\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-05-09T12:12:11+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/8470747db1f36e180db040f9545c0e85f9becdcd

changelog

Files changed:
A news/3517.bugfix

b'diff --git a/news/3517.bugfix b/news/3517.bugfix\nnew file mode 100644\nindex 0000000000..8eb484956b\n--- /dev/null\n+++ b/news/3517.bugfix\n@@ -0,0 +1,2 @@\n+Fix for quoted search terms\n+[petschki]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-05-09T12:12:11+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/ed372709c07775412816453e373abd489a7a0b52

make munge_search_term a standalone method and test it

Files changed:
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 9be8b4aaff..31f633c232 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -46,23 +46,24 @@ def quote(term):\n     return term\n \n \n-class Search(BrowserView):\n+def munge_search_term(query):\n+    for char in BAD_CHARS:\n+        query = query.replace(char, \' \')\n \n-    valid_keys = (\'sort_on\', \'sort_order\', \'sort_limit\', \'fq\', \'fl\', \'facet\')\n+    # extract quoted phrases first\n+    r = re.findall(r\'"[^"]*"\', query)\n+    for qp in r:\n+        query = query.replace(qp, "")\n \n-    def munge_search_term(self, q):\n-        for char in BAD_CHARS:\n-            q = q.replace(char, \' \')\n+    r += map(quote, query.strip().split())\n+    r = " AND ".join(r)\n+    r = quote_chars(r) + (\'*\' if r and not r.endswith(\'"\') else \'\')\n+    return r\n \n-        # extract possibly quoted phrases first\n-        r = re.findall(r\'"[^"]*"\', q)\n-        for qp in r:\n-            q = q.replace(qp, "")\n \n-        r += map(quote, q.strip().split())\n-        r = " AND ".join(r)\n-        r = quote_chars(r) + (\'*\' if not r.endswith(\'"\') else \'\')\n-        return r\n+class Search(BrowserView):\n+\n+    valid_keys = (\'sort_on\', \'sort_order\', \'sort_limit\', \'fq\', \'fl\', \'facet\')\n \n     def results(self, query=None, batch=True, b_size=10, b_start=0,\n                 use_content_listing=True):\n@@ -113,7 +114,7 @@ def _filter_query(self, query):\n             if v and ((k in valid_keys) or k.startswith(\'facet.\')):\n                 query[k] = v\n         if text:\n-            query[\'SearchableText\'] = self.munge_search_term(text)\n+            query[\'SearchableText\'] = munge_search_term(text)\n \n         # don\'t filter on created at all if we want all results\n         created = query.get(\'created\')\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 6e897f6a23..7ff5eb0863 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -27,7 +27,6 @@\n from plone.app.testing import applyProfile\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import IntegrationTesting\n-from plone.testing import z2\n \n \n def test_request():\n@@ -272,7 +271,7 @@ def test_quoted_phrase(self):\n             query=dict(SearchableText=\'ham spam\')).sequence_length, 12)\n         # quoted reverse order -> no results!\n         self.assertEqual(view.results(\n-            query=dict(SearchableText=\'"ham spam"\')).sequence_length,0)\n+            query=dict(SearchableText=\'"ham spam"\')).sequence_length, 0)\n \n         # arbitrary words within index\n         self.assertEqual(view.results(\n@@ -288,6 +287,11 @@ def test_quoted_phrase(self):\n         self.assertEqual(view.results(\n             query=dict(SearchableText=\'"egg"\')).sequence_length, 0)\n \n+        # unquoted multi substring search\n+        # XXX: this is munged to "egg AND spa*" and doesn\'t find any results\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'egg spa\')).sequence_length, 0)\n+\n         # weird input\n         self.assertEqual(view.results(\n             query=dict(SearchableText=\'"eggs" ham spam\')).sequence_length, 12)\n@@ -296,6 +300,46 @@ def test_quoted_phrase(self):\n         self.assertEqual(view.results(\n             query=dict(SearchableText=\'eggs ham spam"\')).sequence_length, 12)\n \n+    def test_munge_search_term(self):\n+        from Products.CMFPlone.browser.search import BAD_CHARS\n+        from Products.CMFPlone.browser.search import munge_search_term\n+\n+        search_term_tests = [\n+            (\n+                # search term\n+                \'spam ham\',\n+                \'spam AND ham*\',\n+            ),\n+            (\n+                # quoted term\n+                \'"spam ham"\',\n+                \'"spam ham"\',\n+            ),\n+            (\n+                # mixed cases\n+                \'Spam hAm\',\n+                \'Spam AND hAm*\',\n+            ),\n+            (\n+                # parentheses\n+                \'spam (ham)\',\n+                \'spam AND "("ham")"*\',\n+            ),\n+            (\n+                # special keywords\n+                \'spam or not ham and eggs\',\n+                \'spam AND "or" AND "not" AND ham AND "and" AND eggs*\',\n+            ),\n+            (\n+                # bad characters\n+                " ".join(BAD_CHARS),\n+                "",\n+            ),\n+        ]\n+\n+        for _in, _out in search_term_tests:\n+            self.assertEqual(munge_search_term(_in), _out)\n+\n \n def test_suite():\n     """This sets up a test suite that actually runs the tests in the class\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-05-09T12:12:11+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/acadd7902032ac2c168899ebea4dbedb2c6e6837

strip leading/trailing whitespaces from quoted terms and test more cases

Files changed:
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 31f633c232..0b98159dc9 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -51,9 +51,17 @@ def munge_search_term(query):\n         query = query.replace(char, \' \')\n \n     # extract quoted phrases first\n-    r = re.findall(r\'"[^"]*"\', query)\n-    for qp in r:\n-        query = query.replace(qp, "")\n+    quoted_phrases = re.findall(r\'"([^"]*)"\', query)\n+    r = []\n+    for qp in quoted_phrases:\n+        # remove from original query\n+        query = query.replace(f\'"{qp}"\', "")\n+        # replace with cleaned leading/trailing whitespaces\n+        # and skip empty phrases\n+        clean_qp = qp.strip()\n+        if not clean_qp:\n+            continue\n+        r.append(f\'"{clean_qp}"\')\n \n     r += map(quote, query.strip().split())\n     r = " AND ".join(r)\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 7ff5eb0863..0e6f786e55 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -315,11 +315,26 @@ def test_munge_search_term(self):\n                 \'"spam ham"\',\n                 \'"spam ham"\',\n             ),\n+            (\n+                # cleanup quoted terms\n+                \'" spam ham   "\',\n+                \'"spam ham"\',\n+            ),\n             (\n                 # mixed cases\n                 \'Spam hAm\',\n                 \'Spam AND hAm*\',\n             ),\n+            (\n+                # mix quoting and unquoted\n+                \'let\\\'s eat some "ham and eggs " without spam \',\n+                \'"ham and eggs" AND let\\\'s AND eat AND some \'\n+                \'AND without AND spam*\',\n+            ),\n+            (\n+                \'test "Welcome" to "Plone" retest\',\n+                \'"Welcome" AND "Plone" AND test AND to AND retest*\',\n+            ),\n             (\n                 # parentheses\n                 \'spam (ham)\',\n@@ -335,6 +350,11 @@ def test_munge_search_term(self):\n                 " ".join(BAD_CHARS),\n                 "",\n             ),\n+            (\n+                # weird input\n+                \'test ""Welcome" to "Plone"" retest\',\n+                \'"to" AND test AND WelcomePlone AND retest*\',\n+            )\n         ]\n \n         for _in, _out in search_term_tests:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-05-09T13:37:47+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2f02e0543d430ecfdbbb3889b440601938cf65f8

Merge pull request #3518 from plone/issue-3517

Fix for quoted search terms

Files changed:
A news/3517.bugfix
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 393fcd0005..0b98159dc9 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -16,6 +16,7 @@\n from ZTUtils import make_query\n \n import json\n+import re\n \n _ = MessageFactory(\'plone\')\n \n@@ -45,18 +46,33 @@ def quote(term):\n     return term\n \n \n+def munge_search_term(query):\n+    for char in BAD_CHARS:\n+        query = query.replace(char, \' \')\n+\n+    # extract quoted phrases first\n+    quoted_phrases = re.findall(r\'"([^"]*)"\', query)\n+    r = []\n+    for qp in quoted_phrases:\n+        # remove from original query\n+        query = query.replace(f\'"{qp}"\', "")\n+        # replace with cleaned leading/trailing whitespaces\n+        # and skip empty phrases\n+        clean_qp = qp.strip()\n+        if not clean_qp:\n+            continue\n+        r.append(f\'"{clean_qp}"\')\n+\n+    r += map(quote, query.strip().split())\n+    r = " AND ".join(r)\n+    r = quote_chars(r) + (\'*\' if r and not r.endswith(\'"\') else \'\')\n+    return r\n+\n+\n class Search(BrowserView):\n \n     valid_keys = (\'sort_on\', \'sort_order\', \'sort_limit\', \'fq\', \'fl\', \'facet\')\n \n-    def munge_search_term(self, q):\n-        for char in BAD_CHARS:\n-            q = q.replace(char, \' \')\n-        r = map(quote, q.split())\n-        r = " AND ".join(r)\n-        r = quote_chars(r) + \'*\'\n-        return r\n-\n     def results(self, query=None, batch=True, b_size=10, b_start=0,\n                 use_content_listing=True):\n         """ Get properly wrapped search results from the catalog.\n@@ -106,7 +122,7 @@ def _filter_query(self, query):\n             if v and ((k in valid_keys) or k.startswith(\'facet.\')):\n                 query[k] = v\n         if text:\n-            query[\'SearchableText\'] = self.munge_search_term(text)\n+            query[\'SearchableText\'] = munge_search_term(text)\n \n         # don\'t filter on created at all if we want all results\n         created = query.get(\'created\')\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex e132ab5130..0e6f786e55 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -27,7 +27,6 @@\n from plone.app.testing import applyProfile\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import IntegrationTesting\n-from plone.testing import z2\n \n \n def test_request():\n@@ -257,6 +256,110 @@ def test_filter_with_plone3_query(self):\n         res = view.results(batch=False)\n         self.assertEqual([], [r for r in res])\n \n+    def test_quoted_phrase(self):\n+        portal = self.layer[\'portal\']\n+        # searching for ""\n+        view = portal.restrictedTraverse(\'@@search\')\n+        # unqoted\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'spam ham\')).sequence_length, 12)\n+        # quoted -> same result\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"spam ham"\')).sequence_length, 12)\n+        # unquoted reverse order -> all results\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'ham spam\')).sequence_length, 12)\n+        # quoted reverse order -> no results!\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"ham spam"\')).sequence_length, 0)\n+\n+        # arbitrary words within index\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'spam eggs\')).sequence_length, 12)\n+        # arbitrary words within index quoted -> no results\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"spam eggs"\')).sequence_length, 0)\n+\n+        # unquoted subtring search\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'egg\')).sequence_length, 12)\n+        # quoted substring search -> exact match\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"egg"\')).sequence_length, 0)\n+\n+        # unquoted multi substring search\n+        # XXX: this is munged to "egg AND spa*" and doesn\'t find any results\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'egg spa\')).sequence_length, 0)\n+\n+        # weird input\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"eggs" ham spam\')).sequence_length, 12)\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'"eggs ham spam\')).sequence_length, 12)\n+        self.assertEqual(view.results(\n+            query=dict(SearchableText=\'eggs ham spam"\')).sequence_length, 12)\n+\n+    def test_munge_search_term(self):\n+        from Products.CMFPlone.browser.search import BAD_CHARS\n+        from Products.CMFPlone.browser.search import munge_search_term\n+\n+        search_term_tests = [\n+            (\n+                # search term\n+                \'spam ham\',\n+                \'spam AND ham*\',\n+            ),\n+            (\n+                # quoted term\n+                \'"spam ham"\',\n+                \'"spam ham"\',\n+            ),\n+            (\n+                # cleanup quoted terms\n+                \'" spam ham   "\',\n+                \'"spam ham"\',\n+            ),\n+            (\n+                # mixed cases\n+                \'Spam hAm\',\n+                \'Spam AND hAm*\',\n+            ),\n+            (\n+                # mix quoting and unquoted\n+                \'let\\\'s eat some "ham and eggs " without spam \',\n+                \'"ham and eggs" AND let\\\'s AND eat AND some \'\n+                \'AND without AND spam*\',\n+            ),\n+            (\n+                \'test "Welcome" to "Plone" retest\',\n+                \'"Welcome" AND "Plone" AND test AND to AND retest*\',\n+            ),\n+            (\n+                # parentheses\n+                \'spam (ham)\',\n+                \'spam AND "("ham")"*\',\n+            ),\n+            (\n+                # special keywords\n+                \'spam or not ham and eggs\',\n+                \'spam AND "or" AND "not" AND ham AND "and" AND eggs*\',\n+            ),\n+            (\n+                # bad characters\n+                " ".join(BAD_CHARS),\n+                "",\n+            ),\n+            (\n+                # weird input\n+                \'test ""Welcome" to "Plone"" retest\',\n+                \'"to" AND test AND WelcomePlone AND retest*\',\n+            )\n+        ]\n+\n+        for _in, _out in search_term_tests:\n+            self.assertEqual(munge_search_term(_in), _out)\n+\n \n def test_suite():\n     """This sets up a test suite that actually runs the tests in the class\ndiff --git a/news/3517.bugfix b/news/3517.bugfix\nnew file mode 100644\nindex 0000000000..8eb484956b\n--- /dev/null\n+++ b/news/3517.bugfix\n@@ -0,0 +1,2 @@\n+Fix for quoted search terms\n+[petschki]\n'

