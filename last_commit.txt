Repository: documentation


Branch: refs/heads/backend-6
Date: 2022-01-15T16:36:20+01:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/documentation/commit/fdf26f36a1fe03b62c9ce17b81042134dad53b62

Merged in branch "6-dev"

Files changed:
M README.md
D README-doc-writers.txt
D upgrading/version_specific_migration/v60.md

b'diff --git a/README-doc-writers.txt b/README-doc-writers.txt\ndeleted file mode 100644\nindex 45675927..00000000\n--- a/README-doc-writers.txt\n+++ /dev/null\n@@ -1,56 +0,0 @@\n- Training vs Reference\n----------------------\n-\n-The Mastering Plone training contains a lot of explanation and is\n-a \'story telling\' version of the reference documentation we have here.\n-It has been well maintained and also has been updated to have chapters\n-on the new React Frontend. Because of the purpose (training) It might\n-however not have the right order for the happy path and much more \n-verbose than the level we want to achieve here.  But please take a look\n-at the explanation there if you work on documentation a task here.\n-\n-\n-\n-Scaffolding\n------------\n-\n-There has been some discussing about bootstrapping during the 2021\n-PloneConf at the fanzone. The reference documentation should contain\n-the first steps to generate a working Zope/Plone app server\n-configuration that requires scaffolding.  The current scaffolding tool\n-that has been well supported updated and used in the community is\n-plonecli. This tool internally depends on bobtemplates, but we \n-shouldn\'t mention that (implementation detail).\n-\n-To avoid having a too strict dependency on plonecli but also not\n-having to write out/document every single file I propose we use/\n-describe plonecli, but after running discuss/document the files \n-created and why they are there. \n-\n-\n-Possible setup for first chapters\n----------------------------------\n-\n-This is only a suggestion/inspiration based on discussions with\n-Volto frontender on what they first have to create (task oriented)\n-or modify on the backend when they work on Volto sites. These\n-could map to chapters\n-\n-----\n-\n-* scaffold  plone server setup/buildout with add-on directory\n-\n-* scaffold a content type\n-\n-(use plonecli in below example for scaffolding, then explain directory structure/files? ) \n-\n-* contenttype: create xml schema or jkcreate the interface  zope.schema for the fields\n-\n-* Create the  Item/Container python class\n-\n-* register the content type in the types xml\n-\n-* generic setup upgrade step\n-\n-* upgrade step definition in ZCML to register the generic upgrade step\n-\ndiff --git a/README.md b/README.md\nindex 1daeba99..aab98abd 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,25 +1 @@\n-# Plone 6 Backend Docs\n-\n-- All documentation should be written in [CommonMark](https://commonmark.org/) Markdown.\n-- If possible, please structure into dirs, this will make it easier to build a structure later.\n-\n-See the following example\n-\n-```markdown\n-/docs\n-\xe2\x9e\x9c tree\n-.\n-\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 deploy.md\n-\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.md\n-\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 install.md\n-```\n-Use a file called `index.md` for creating a index (if needed)\n-\n-```shell\n-\xe2\x9e\x9c cat index.md\n-install.md\n-deploy.md\n-```\n-\n-Thank you!!\n-\n+Merged in branch "6-dev"\n\\ No newline at end of file\ndiff --git a/upgrading/version_specific_migration/v60.md b/upgrading/version_specific_migration/v60.md\ndeleted file mode 100644\nindex 9613af1a..00000000\n--- a/upgrading/version_specific_migration/v60.md\n+++ /dev/null\n@@ -1,190 +0,0 @@\n-# Upgrade to Plone 6.0\n-\n-Plone 6.0 has seen the following major changes.\n-Some may require changes in your setup.\n-\n-## Removed portal_quickinstaller\n-Plone no longer ships with the `portal_quickinstaller` tool (`CMFQuickInstallerTool`).\n-In existing sites, the standard upgrade will remove the tool.\n-This is the final step in a deprecation path that started in Plone 5.1.\n-Documentation on how to switch to GenericSetup and the new installer, can be seen in the old [Plone 5.1 upgrade guide](\n-https://docs.plone.org/develop/addons/upgrade_to_51.html#installation-code).\n-\n-See [PLIP 1775](https://github.com/plone/Products.CMFPlone/issues/1775).\n-\n-\n-## Dexterity site root\n-For content types, in Plone 4 and 5 you had the option to use the old Archetypes or the new Dexterity framework.\n-The Plone Site root object was neither: it was in its own class.\n-In Plone 6, the site root itself is a Dexterity object.\n-\n-When you upgrade a site from Plone 5.2 to 6.0, at first you will see an empty site root.\n-Do not panic.\n-Your contents are only temporarily invisible.\n-Simply perform the standard migration via the `@@plone-upgrade` view and your content will be visible again.\n-\n-See [PLIP 2454](https://github.com/plone/Products.CMFPlone/issues/2454).\n-\n-\n-## Volto\n-Plone 6 ships with a new NodeJS frontend: Volto.\n-When you use the `Plone` package in your project, you will get the `plone.volto` integration package.\n-This package prepares your Plone Site as a REST API.\n-\n-Note: the classic integrated frontend is still available if you are not ready for the new separate frontend.\n-Do not use the `plone.volto` package then.\n-\n-See [PLIP 2703](https://github.com/plone/Products.CMFPlone/issues/2703).\n-\n-\n-## Archetypes\n-The deprecated Archetypes contenttypes framework is no longer supported.\n-Add-ons that define a contenttype, must use Dexterity instead.\n-\n-See [PLIP 2775](https://github.com/plone/Products.CMFPlone/issues/2775).\n-\n-\n-## No more temp_folder / tempstorage\n-\n-The `temp_folder` object in the Zope root is no longer created by default.\n-If the object is there, but it is broken, the standard Plone upgrade procedure will remove it.\n-\n-For now, you must explicitly disable the temp_folder if you use buildout:\n-\n-```\n-[instance]\n-recipe = plone.recipe.zope2instance\n-zodb-temporary-storage = off\n-```\n-\n-See [issue 2957](https://github.com/plone/Products.CMFPlone/issues/2957).\n-\n-\n-## Changed Templates to Bootstrap 5 Markup\n-\n-All templates in core Plone have been updated to Bootstrap 5 markup.\n-Add-on authors are encouraged to do the same.\n-If you have customized a core template, you should check if your change is still needed, and update it to fit the new markup.\n-Any CSS and JavaScript that relies on a specific structure, or certain ids or classes, should be checked as well.\n-\n-See [PLIP 2967](https://github.com/plone/Products.CMFPlone/issues/2967).\n-\n-\n-## Zope 5\n-\n-Plone 6.0 means we move from Zope 4 to 5.\n-This drops support for Python 2.7, drops ZServer, and removes deprecated code.\n-See [Zope 5.0a1](https://zope.readthedocs.io/en/latest/changes.html#a1-2020-02-28).\n-\n-Some imports may need to change.\n-Add-on authors should check on Plone 5.2 if their code runs without any deprecation warnings from Zope 4.\n-If no warnings are shown, the add-on should run fine on Zope 5.\n-\n-See [PLIP 3058](https://github.com/plone/Products.CMFPlone/issues/3058).\n-\n-\n-## Modernize Plone default theme (Barceloneta LTS)\n-\n-The standard theme in Classic UI was updated to Bootstrap 5, CSS variables, and an icon library.\n-If you have a theme that builds on Barceloneta, you most likely need various changes.\n-\n-It may be best to start with a fresh theme, and try to keep the changes minimal.\n-The training documentation lists [three possible theming strategies](https://training.plone.org/5/theming/index.html):\n-\n-- Create a theme based on Barceloneta\n-- Create a theme from scratch\n-- Create a theme based on Diazo\n-\n-See [PLIP 3061](https://github.com/plone/Products.CMFPlone/issues/3061).\n-\n-\n-## Python\n-\n-You may need to use a newer Python version.\n-Supported Python versions are: 3.7, 3.8 and 3.9.\n-We recommend the most recent version.\n-See https://www.python.org/downloads/ for which Python version is still supported by the Python community.\n-\n-See [PLIP 3229](https://github.com/plone/Products.CMFPlone/issues/3229).\n-\n-\n-## `plone.api.relation`\n-\n-The `plone.api` package now has a `relation` module. Add-on authors may want to use this to get, create or delete relations.\n-\n-See [PLIP 3137](https://github.com/plone/Products.CMFPlone/issues/3137).\n-\n-\n-## Mockup and resource registry redone\n-\n-Mockup contains the source of most Classic Plone JavaScript.\n-The compiled version is in `plone.staticresources`.\n-\n-Mockup is now based on Patternslib 4.\n-It uses ES6 module imports instead of RequireJS.\n-Add-ons for Classic Plone that use JavaScript should be updated to use ES6 modules as well.\n-\n-The resource registries and their control panel have been simplified.\n-Add-ons for Classic Plone only need to register bundles, not individual resources.\n-\n-See [PLIP 3211](https://github.com/plone/Products.CMFPlone/issues/3211).\n-\n-\n-## Relations control panel\n-\n-Plone 6 has a new control panel for relations: `@@inspect-relations`.\n-As Manager you may want to use this control panel to look for and fix possible problems.\n-\n-See [PLIP 3232](https://github.com/plone/Products.CMFPlone/issues/3232).\n-\n-\n-## Deprecated unicode property types\n-\n-Zope 5 has deprecated the unicode property types: ustring, ulines, utext, utokens.\n-If you use these in your add-on, you should switch to their standard variants: string, lines, text, tokens.\n-These behave exactly the same on Python 3.\n-Plone has an upgrade step that goes through all objects in the site, replacing the deprecated properties with the default ones, so you should not see them anymore.\n-But in your own code you should avoid adding them again.\n-\n-See [issue 3305](https://github.com/plone/Products.CMFPlone/issues/3305).\n-\n-\n-## autoinclude\n-\n-We have replaced `z3c.autoinclude` with `plone.autoinclude`.\n-Both are used by add-ons (Python packages) to signal with an entry point that Plone must load the zcml of the add-on.\n-In most cases, the existing entry point can stay the same, for example in `setup.py`:\n-\n-```\n-entry_points="""\n-[z3c.autoinclude.plugin]\n-target = plone\n-"""\n-```\n-\n-When your package name differs from your module name, so what you import in Python, you need a different entry point.\n-When your module is called `example.alternative`, create this entry point:\n-\n-```\n-entry_points="""\n-[plone.autoinclude.plugin]\n-target = plone\n-module = example.alternative\n-"""\n-```\n-\n-A second change that may influence add-ons, is that the `includeDependencies` directive is no longer supported.\n-It was already recommended not to use this directive, as it is too implicit.\n-In the zcml files of your add-on, search for `includeDependencies`.\n-If you find it, you must replace it by explicitly loading any zcml from other packages that the add-on needs.\n-Sample change from [`dexterity.membrane`](https://github.com/collective/dexterity.membrane/pull/60):\n-\n-```\n--  <includeDependencies package="." />\n-+  <include package="Products.membrane" />\n-```\n-\n-The same change is needed for the no longer supported `includeDependenciesOverrides` directive, which may be used in `overrides.zcml`.\n-\n-See [PLIP 3339](https://github.com/plone/Products.CMFPlone/issues/3339).\n-Also see the [`plone.autoinclude`](https://github.com/plone/plone.autoinclude) documentation.\n'

