Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2023-03-29T00:47:33+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.i18n/commit/898c813c250917e7ab8fd5e9d5a9abc21052451b

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/de0ac4e7.internal
A tox.ini
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..8e148bb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "de0ac4e7"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex f9cd227..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,202 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-from optparse import OptionParser\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = """\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-"""\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option(\n-    "-t",\n-    "--accept-buildout-test-releases",\n-    dest="accept_buildout_test_releases",\n-    action="store_true",\n-    default=False,\n-    help=(\n-        "Normally, if you do not specify a --version, the "\n-        "bootstrap script and buildout gets the newest "\n-        "*final* versions of zc.buildout and its recipes and "\n-        "extensions for you.  If you use this flag, "\n-        "bootstrap and buildout will get the newest releases "\n-        "even if they are alphas or betas."\n-    ),\n-)\n-parser.add_option(\n-    "-c",\n-    "--config-file",\n-    help=("Specify the path to the buildout configuration " "file to be used."),\n-)\n-parser.add_option(\n-    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n-)\n-parser.add_option(\n-    "--allow-site-packages",\n-    action="store_true",\n-    default=False,\n-    help=("Let bootstrap.py use existing site packages"),\n-)\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, "getsitepackages"):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez["use_setuptools"](**setup_args)\n-import pkg_resources\n-import setuptools\n-\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [\n-    sys.executable,\n-    "-c",\n-    "from setuptools.command.easy_install import main; main()",\n-    "-mZqNxd",\n-    tmpeggs,\n-]\n-\n-find_links = os.environ.get(\n-    "bootstrap-testing-find-links",\n-    options.find_links\n-    or (\n-        "http://downloads.buildout.org/"\n-        if options.accept_buildout_test_releases\n-        else None\n-    ),\n-)\n-if find_links:\n-    cmd.extend(["-f", find_links])\n-\n-setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n-\n-requirement = "zc.buildout"\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-\n-    _final_parts = "*final-", "*final"\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == "*") and (part not in _final_parts):\n-                return False\n-        return True\n-\n-    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = "==".join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-\n-\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-\n-if not [a for a in args if "=" not in a]:\n-    args.append("bootstrap")\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = ["-c", options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/de0ac4e7.internal b/news/de0ac4e7.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/de0ac4e7.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 3e076fd..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..e1b5962\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.i18n {posargs}\n+extras =\n+    test\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2023-03-29T00:50:44+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.i18n/commit/961d0238614b15c9d62f4f38026582a2f42b160d

chore: zpretty

Files changed:
M plone/app/i18n/configure.zcml
M plone/app/i18n/locales/browser/configure.zcml
M plone/app/i18n/locales/browser/languageselector.pt
M plone/app/i18n/locales/configure.zcml

b'diff --git a/plone/app/i18n/configure.zcml b/plone/app/i18n/configure.zcml\nindex 1c7c669..02e3727 100644\n--- a/plone/app/i18n/configure.zcml\n+++ b/plone/app/i18n/configure.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five">\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n \n-    <include package=".locales" />\n-    <include package="plone.i18n" />\n+  <include package=".locales" />\n+  <include package="plone.i18n" />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/app/i18n/locales/browser/configure.zcml b/plone/app/i18n/locales/browser/configure.zcml\nindex f2a37b7..0ffb666 100644\n--- a/plone/app/i18n/locales/browser/configure.zcml\n+++ b/plone/app/i18n/locales/browser/configure.zcml\n@@ -1,13 +1,14 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n   <browser:viewlet\n       name="plone.app.i18n.locales.languageselector"\n       manager="plone.app.layout.viewlets.interfaces.IPortalHeader"\n       class=".selector.LanguageSelector"\n-      permission="zope2.View"\n       template="languageselector.pt"\n+      permission="zope2.View"\n       />\n \n </configure>\ndiff --git a/plone/app/i18n/locales/browser/languageselector.pt b/plone/app/i18n/locales/browser/languageselector.pt\nindex ab4fbe9..6a058fb 100644\n--- a/plone/app/i18n/locales/browser/languageselector.pt\n+++ b/plone/app/i18n/locales/browser/languageselector.pt\n@@ -1,31 +1,41 @@\n <tal:language tal:condition="view/available">\n-  <ul\n-      id="portal-languageselector"\n-      tal:define="showFlags view/showFlags;\n-                languages view/languages;\n-                here_url context/@@plone_context_state/view_url;\n-                portal_url view/portal_url;\n-                icons python:context.restrictedTraverse(\'@@iconresolver\');">\n+  <ul id="portal-languageselector"\n+      tal:define="\n+        showFlags view/showFlags;\n+        languages view/languages;\n+        here_url context/@@plone_context_state/view_url;\n+        portal_url view/portal_url;\n+        icons python:context.restrictedTraverse(\'@@iconresolver\');\n+      "\n+  >\n     <tal:language repeat="lang languages">\n-      <li\n-          tal:define="code lang/code;\n-                    selected lang/selected;\n-                    codeclass string:language-${code};\n-                    current python: selected and \'currentLanguage \' or \'\';"\n-          tal:attributes="class string:${current}${codeclass}">\n-        <a\n-            href=""\n-            tal:define="flag lang/flag|nothing;\n-                       name lang/native|lang/name;\n-                       showflag python:showFlags and flag;"\n-            tal:attributes="href string:${here_url}?set_language=${code};\n-                           title name">\n+      <li tal:define="\n+            code lang/code;\n+            selected lang/selected;\n+            codeclass string:language-${code};\n+            current python: selected and \'currentLanguage \' or \'\';\n+          "\n+          tal:attributes="\n+            class string:${current}${codeclass};\n+          "\n+      >\n+        <a href=""\n+           tal:define="\n+             flag lang/flag|nothing;\n+             name lang/native|lang/name;\n+             showflag python:showFlags and flag;\n+           "\n+           tal:attributes="\n+             href string:${here_url}?set_language=${code};\n+             title name;\n+           "\n+        >\n           <tal:flag condition="showflag">\n             <img tal:replace="structure python:icons.tag(flag, tag_class=\'plone-icon-flag\')" />\n           </tal:flag>\n-          <tal:nonflag\n-              condition="not: showflag"\n-              replace="name">language name</tal:nonflag>\n+          <tal:nonflag condition="not: showflag"\n+                       replace="name"\n+          >language name</tal:nonflag>\n         </a>\n       </li>\n     </tal:language>\ndiff --git a/plone/app/i18n/locales/configure.zcml b/plone/app/i18n/locales/configure.zcml\nindex 4bac049..ac8a4c5 100644\n--- a/plone/app/i18n/locales/configure.zcml\n+++ b/plone/app/i18n/locales/configure.zcml\n@@ -1,6 +1,5 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope">\n+<configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package=".browser" />\n+  <include package=".browser" />\n \n </configure>\n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2023-03-29T00:51:43+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.i18n/commit/5c79e7ca01b2f1201ef88fdac616fe8de5dc3b47

feat: flake8

Files changed:
M plone/app/i18n/locales/browser/tests.py
M plone/app/i18n/locales/tests/test_doctests.py

b'diff --git a/plone/app/i18n/locales/browser/tests.py b/plone/app/i18n/locales/browser/tests.py\nindex be6ed77..4fac106 100644\n--- a/plone/app/i18n/locales/browser/tests.py\n+++ b/plone/app/i18n/locales/browser/tests.py\n@@ -2,7 +2,6 @@\n from zope.component.testing import tearDown\n \n import doctest\n-import re\n import unittest\n \n \ndiff --git a/plone/app/i18n/locales/tests/test_doctests.py b/plone/app/i18n/locales/tests/test_doctests.py\nindex 5e5d3e7..dbffce5 100644\n--- a/plone/app/i18n/locales/tests/test_doctests.py\n+++ b/plone/app/i18n/locales/tests/test_doctests.py\n@@ -2,7 +2,6 @@\n from plone.testing import layered\n \n import doctest\n-import re\n import unittest\n \n \n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2023-03-29T00:52:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.i18n/commit/22439a2442e81a243449e7f02a9e99cd5a15999d

feat: codespell

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 828464c..1315a5f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -58,7 +58,7 @@ Bug fixes:\n - Remove zopetestcase.\n   [ivanteoh, maurits]\n \n-- Add coding header to pyton files.\n+- Add coding header to python files.\n   [gforcada]\n \n \n'

Repository: plone.app.i18n


Branch: refs/heads/master
Date: 2023-04-01T12:20:33+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.i18n/commit/1b6401fd94ed7eb9271e34e2d60cd19c0852276c

Merge pull request #9 from plone/config-with-default-template-185a4aee

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/de0ac4e7.internal
A tox.ini
M CHANGES.rst
M plone/app/i18n/configure.zcml
M plone/app/i18n/locales/browser/configure.zcml
M plone/app/i18n/locales/browser/languageselector.pt
M plone/app/i18n/locales/browser/tests.py
M plone/app/i18n/locales/configure.zcml
M plone/app/i18n/locales/tests/test_doctests.py
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..8e148bb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "de0ac4e7"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 828464c..1315a5f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -58,7 +58,7 @@ Bug fixes:\n - Remove zopetestcase.\n   [ivanteoh, maurits]\n \n-- Add coding header to pyton files.\n+- Add coding header to python files.\n   [gforcada]\n \n \ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex f9cd227..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,202 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-from optparse import OptionParser\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = """\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-"""\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option(\n-    "-t",\n-    "--accept-buildout-test-releases",\n-    dest="accept_buildout_test_releases",\n-    action="store_true",\n-    default=False,\n-    help=(\n-        "Normally, if you do not specify a --version, the "\n-        "bootstrap script and buildout gets the newest "\n-        "*final* versions of zc.buildout and its recipes and "\n-        "extensions for you.  If you use this flag, "\n-        "bootstrap and buildout will get the newest releases "\n-        "even if they are alphas or betas."\n-    ),\n-)\n-parser.add_option(\n-    "-c",\n-    "--config-file",\n-    help=("Specify the path to the buildout configuration " "file to be used."),\n-)\n-parser.add_option(\n-    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n-)\n-parser.add_option(\n-    "--allow-site-packages",\n-    action="store_true",\n-    default=False,\n-    help=("Let bootstrap.py use existing site packages"),\n-)\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, "getsitepackages"):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez["use_setuptools"](**setup_args)\n-import pkg_resources\n-import setuptools\n-\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [\n-    sys.executable,\n-    "-c",\n-    "from setuptools.command.easy_install import main; main()",\n-    "-mZqNxd",\n-    tmpeggs,\n-]\n-\n-find_links = os.environ.get(\n-    "bootstrap-testing-find-links",\n-    options.find_links\n-    or (\n-        "http://downloads.buildout.org/"\n-        if options.accept_buildout_test_releases\n-        else None\n-    ),\n-)\n-if find_links:\n-    cmd.extend(["-f", find_links])\n-\n-setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n-\n-requirement = "zc.buildout"\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-\n-    _final_parts = "*final-", "*final"\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == "*") and (part not in _final_parts):\n-                return False\n-        return True\n-\n-    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = "==".join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-\n-\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-\n-if not [a for a in args if "=" not in a]:\n-    args.append("bootstrap")\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = ["-c", options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/de0ac4e7.internal b/news/de0ac4e7.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/de0ac4e7.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/app/i18n/configure.zcml b/plone/app/i18n/configure.zcml\nindex 1c7c669..02e3727 100644\n--- a/plone/app/i18n/configure.zcml\n+++ b/plone/app/i18n/configure.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five">\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n \n-    <include package=".locales" />\n-    <include package="plone.i18n" />\n+  <include package=".locales" />\n+  <include package="plone.i18n" />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/app/i18n/locales/browser/configure.zcml b/plone/app/i18n/locales/browser/configure.zcml\nindex f2a37b7..0ffb666 100644\n--- a/plone/app/i18n/locales/browser/configure.zcml\n+++ b/plone/app/i18n/locales/browser/configure.zcml\n@@ -1,13 +1,14 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n   <browser:viewlet\n       name="plone.app.i18n.locales.languageselector"\n       manager="plone.app.layout.viewlets.interfaces.IPortalHeader"\n       class=".selector.LanguageSelector"\n-      permission="zope2.View"\n       template="languageselector.pt"\n+      permission="zope2.View"\n       />\n \n </configure>\ndiff --git a/plone/app/i18n/locales/browser/languageselector.pt b/plone/app/i18n/locales/browser/languageselector.pt\nindex ab4fbe9..6a058fb 100644\n--- a/plone/app/i18n/locales/browser/languageselector.pt\n+++ b/plone/app/i18n/locales/browser/languageselector.pt\n@@ -1,31 +1,41 @@\n <tal:language tal:condition="view/available">\n-  <ul\n-      id="portal-languageselector"\n-      tal:define="showFlags view/showFlags;\n-                languages view/languages;\n-                here_url context/@@plone_context_state/view_url;\n-                portal_url view/portal_url;\n-                icons python:context.restrictedTraverse(\'@@iconresolver\');">\n+  <ul id="portal-languageselector"\n+      tal:define="\n+        showFlags view/showFlags;\n+        languages view/languages;\n+        here_url context/@@plone_context_state/view_url;\n+        portal_url view/portal_url;\n+        icons python:context.restrictedTraverse(\'@@iconresolver\');\n+      "\n+  >\n     <tal:language repeat="lang languages">\n-      <li\n-          tal:define="code lang/code;\n-                    selected lang/selected;\n-                    codeclass string:language-${code};\n-                    current python: selected and \'currentLanguage \' or \'\';"\n-          tal:attributes="class string:${current}${codeclass}">\n-        <a\n-            href=""\n-            tal:define="flag lang/flag|nothing;\n-                       name lang/native|lang/name;\n-                       showflag python:showFlags and flag;"\n-            tal:attributes="href string:${here_url}?set_language=${code};\n-                           title name">\n+      <li tal:define="\n+            code lang/code;\n+            selected lang/selected;\n+            codeclass string:language-${code};\n+            current python: selected and \'currentLanguage \' or \'\';\n+          "\n+          tal:attributes="\n+            class string:${current}${codeclass};\n+          "\n+      >\n+        <a href=""\n+           tal:define="\n+             flag lang/flag|nothing;\n+             name lang/native|lang/name;\n+             showflag python:showFlags and flag;\n+           "\n+           tal:attributes="\n+             href string:${here_url}?set_language=${code};\n+             title name;\n+           "\n+        >\n           <tal:flag condition="showflag">\n             <img tal:replace="structure python:icons.tag(flag, tag_class=\'plone-icon-flag\')" />\n           </tal:flag>\n-          <tal:nonflag\n-              condition="not: showflag"\n-              replace="name">language name</tal:nonflag>\n+          <tal:nonflag condition="not: showflag"\n+                       replace="name"\n+          >language name</tal:nonflag>\n         </a>\n       </li>\n     </tal:language>\ndiff --git a/plone/app/i18n/locales/browser/tests.py b/plone/app/i18n/locales/browser/tests.py\nindex be6ed77..4fac106 100644\n--- a/plone/app/i18n/locales/browser/tests.py\n+++ b/plone/app/i18n/locales/browser/tests.py\n@@ -2,7 +2,6 @@\n from zope.component.testing import tearDown\n \n import doctest\n-import re\n import unittest\n \n \ndiff --git a/plone/app/i18n/locales/configure.zcml b/plone/app/i18n/locales/configure.zcml\nindex 4bac049..ac8a4c5 100644\n--- a/plone/app/i18n/locales/configure.zcml\n+++ b/plone/app/i18n/locales/configure.zcml\n@@ -1,6 +1,5 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope">\n+<configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package=".browser" />\n+  <include package=".browser" />\n \n </configure>\ndiff --git a/plone/app/i18n/locales/tests/test_doctests.py b/plone/app/i18n/locales/tests/test_doctests.py\nindex 5e5d3e7..dbffce5 100644\n--- a/plone/app/i18n/locales/tests/test_doctests.py\n+++ b/plone/app/i18n/locales/tests/test_doctests.py\n@@ -2,7 +2,6 @@\n from plone.testing import layered\n \n import doctest\n-import re\n import unittest\n \n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 3e076fd..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..e1b5962\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.i18n {posargs}\n+extras =\n+    test\n'

