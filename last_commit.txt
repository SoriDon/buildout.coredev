Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-09-23T15:14:45+02:00
Author: Philippe Gross (phgross) <gross.philippe@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/bce127009d0733af03fa65a02f971fc7ffcd025f

Fire ModifiedEvent when field is set to null in a PATCH request. (#804)

* Fire ModifiedEvent when field is set to null in a PATCH request.

* Split up the call method of the DX content deserializer

to decrease complexity.

Files changed:
A news/802.bugfix
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py

b'diff --git a/news/802.bugfix b/news/802.bugfix\nnew file mode 100644\nindex 00000000..6de0c08b\n--- /dev/null\n+++ b/news/802.bugfix\n@@ -0,0 +1,2 @@\n+Fire ModifiedEvent when field is set to null in a PATCH request.\n+[phgross]\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 536ebb50..79dfc4e4 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -33,14 +33,46 @@ def __init__(self, context, request):\n \n         self.sm = getSecurityManager()\n         self.permission_cache = {}\n+        self.modified = {}\n \n     def __call__(\n         self, validate_all=False, data=None, create=False\n     ):  # noqa: ignore=C901\n+\n         if data is None:\n             data = json_body(self.request)\n \n-        modified = {}\n+        schema_data, errors = self.get_schema_data(data, validate_all)\n+\n+        # Validate schemata\n+        for schema, field_data in schema_data.items():\n+            validator = queryMultiAdapter(\n+                (self.context, self.request, None, schema, None), IManagerValidator\n+            )\n+            for error in validator.validate(field_data):\n+                errors.append({"error": error, "message": str(error)})\n+\n+        if errors:\n+            raise BadRequest(errors)\n+\n+        # We\'ll set the layout after the validation and even if there\n+        # are no other changes.\n+        if "layout" in data:\n+            layout = data["layout"]\n+            self.context.setLayout(layout)\n+\n+        # OrderingMixin\n+        self.handle_ordering(data)\n+\n+        if self.modified and not create:\n+            descriptions = []\n+            for interface, names in self.modified.items():\n+                descriptions.append(Attributes(interface, *names))\n+            notify(ObjectModifiedEvent(self.context, *descriptions))\n+\n+        return self.context\n+\n+    def get_schema_data(self, data, validate_all):\n         schema_data = {}\n         errors = []\n \n@@ -65,6 +97,8 @@ def __call__(\n                     # set the field to missing_value if we receive null\n                     if data[name] is None:\n                         if not field.required:\n+                            if dm.get():\n+                                self.mark_field_as_changed(schema, name)\n                             dm.set(field.missing_value)\n                         else:\n                             errors.append(\n@@ -97,10 +131,7 @@ def __call__(\n                         field_data[name] = value\n                         if value != dm.get():\n                             dm.set(value)\n-                            # Collect the names of the modified fields\n-                            # Use prefixed name because z3c.form does so\n-                            prefixed_name = schema.__name__ + "." + name\n-                            modified.setdefault(schema, []).append(prefixed_name)\n+                            self.mark_field_as_changed(schema, name)\n \n                 elif validate_all:\n                     # Never validate the changeNote of p.a.versioningbehavior\n@@ -116,33 +147,15 @@ def __call__(\n                     except ValidationError as e:\n                         errors.append({"message": e.doc(), "field": name, "error": e})\n \n-        # Validate schemata\n-        for schema, field_data in schema_data.items():\n-            validator = queryMultiAdapter(\n-                (self.context, self.request, None, schema, None), IManagerValidator\n-            )\n-            for error in validator.validate(field_data):\n-                errors.append({"error": error, "message": str(error)})\n-\n-        if errors:\n-            raise BadRequest(errors)\n-\n-        # We\'ll set the layout after the validation and and even if there\n-        # are no other changes.\n-        if "layout" in data:\n-            layout = data["layout"]\n-            self.context.setLayout(layout)\n-\n-        # OrderingMixin\n-        self.handle_ordering(data)\n+        return schema_data, errors\n \n-        if modified and not create:\n-            descriptions = []\n-            for interface, names in modified.items():\n-                descriptions.append(Attributes(interface, *names))\n-            notify(ObjectModifiedEvent(self.context, *descriptions))\n+    def mark_field_as_changed(self, schema, fieldname):\n+        """Collect the names of the modified fields. Use prefixed name because\n+        z3c.form does so.\n+        """\n \n-        return self.context\n+        prefixed_name = schema.__name__ + \'.\' + fieldname\n+        self.modified.setdefault(schema, []).append(prefixed_name)\n \n     def check_permission(self, permission_name):\n         if permission_name is None:\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex d80c5f71..986c2b5d 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -91,6 +91,18 @@ def handler(obj, event):\n             self.event.descriptions[0].attributes,\n         )\n \n+    def test_deserializer_notifies_when_field_is_set_to_null(self):\n+        def handler(obj, event):\n+            obj._handler_called = True\n+            self.event = event\n+        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n+        self.deserialize(body=\'{"test_textline_field": null}\')\n+        self.assertTrue(getattr(self.portal.doc1, \'_handler_called\', False),\n+                        \'IObjectModifiedEvent not notified\')\n+        self.assertEqual(\n+            (\'IDXTestDocumentSchema.test_textline_field\',),\n+            self.event.descriptions[0].attributes)\n+\n     def test_deserializer_does_not_update_field_without_write_permission(self):\n         self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor", "Editor"])\n'

