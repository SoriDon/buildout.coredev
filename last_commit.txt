Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-01T23:37:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/0d610195d8626ece0932f9459fc1ecab7c7dd814

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5623f8b3.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4f67994\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/5623f8b3.internal b/news/5623f8b3.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5623f8b3.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8274373\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,54 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.customerize {posargs}\n+extras =\n+    test\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-01T23:38:23+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/b80618c2cad08b8ed735cbf6b1371e46248065ca

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/customerize/__init__.py
M plone/app/customerize/browser.py
M plone/app/customerize/registration.py
M plone/app/customerize/testing.py
M plone/app/customerize/tests/__init__.py
M plone/app/customerize/tests/interfaces.py
M plone/app/customerize/tests/testDocTests.py
M plone/app/customerize/tests/viewlets.py
M plone/app/customerize/tool.py
M setup.py

b"diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__('pkg_resources').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__('pkg_resources').declare_namespace(__name__)\ndiff --git a/plone/app/customerize/__init__.py b/plone/app/customerize/__init__.py\nindex 53740d7..7b735a0 100644\n--- a/plone/app/customerize/__init__.py\n+++ b/plone/app/customerize/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.customerize.tool import ViewTemplateContainer\n from Products.CMFCore.utils import ToolInit\n \ndiff --git a/plone/app/customerize/browser.py b/plone/app/customerize/browser.py\nindex 4241b18..cd38553 100644\n--- a/plone/app/customerize/browser.py\n+++ b/plone/app/customerize/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from five.customerize.interfaces import ITTWViewTemplate\n from plone.app.customerize import registration\ndiff --git a/plone/app/customerize/registration.py b/plone/app/customerize/registration.py\nindex 838d9fc..93a2f22 100644\n--- a/plone/app/customerize/registration.py\n+++ b/plone/app/customerize/registration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.customerize.browser import mangleAbsoluteFilename\n from five.customerize.interfaces import ITTWViewTemplate\n from five.customerize.interfaces import IViewTemplateContainer\n@@ -130,7 +129,7 @@ def findTemplateViewRegistration(required, viewname):\n \n \n def generateIdFromRegistration(reg):\n-    return '{0}-{1}'.format(\n+    return '{}-{}'.format(\n         interfaceName(reg.required[0]).lower(),\n         reg.name or reg.ptname\n     )\ndiff --git a/plone/app/customerize/testing.py b/plone/app/customerize/testing.py\nindex 3497b67..974d2ab 100644\n--- a/plone/app/customerize/testing.py\n+++ b/plone/app/customerize/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PloneFixture\n from zope.configuration import xmlconfig\n@@ -7,7 +6,7 @@\n class PloneAppCustomerize(PloneFixture):\n \n     def setUpZCML(self):\n-        super(PloneAppCustomerize, self).setUpZCML()\n+        super().setUpZCML()\n \n         import plone.app.customerize\n         xmlconfig.file('configure.zcml',\ndiff --git a/plone/app/customerize/tests/__init__.py b/plone/app/customerize/tests/__init__.py\nindex 51cbb95..027150d 100644\n--- a/plone/app/customerize/tests/__init__.py\n+++ b/plone/app/customerize/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n # make this directory a package\ndiff --git a/plone/app/customerize/tests/interfaces.py b/plone/app/customerize/tests/interfaces.py\nindex 10a1165..df1da68 100644\n--- a/plone/app/customerize/tests/interfaces.py\n+++ b/plone/app/customerize/tests/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py\nindex dd92675..bc6a292 100644\n--- a/plone/app/customerize/tests/testDocTests.py\n+++ b/plone/app/customerize/tests/testDocTests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.customerize.testing import (\n     PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING  # noqa\n )\ndiff --git a/plone/app/customerize/tests/viewlets.py b/plone/app/customerize/tests/viewlets.py\nindex 96e14c1..089335b 100644\n--- a/plone/app/customerize/tests/viewlets.py\n+++ b/plone/app/customerize/tests/viewlets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \ndiff --git a/plone/app/customerize/tool.py b/plone/app/customerize/tool.py\nindex dbeb642..482c845 100644\n--- a/plone/app/customerize/tool.py\n+++ b/plone/app/customerize/tool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from five.customerize.interfaces import IViewTemplateContainer\ndiff --git a/setup.py b/setup.py\nindex 15a5001..3d38e6a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n"

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-01T23:38:39+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/190b43f425347b50b779a27dcd5ee8a560090252

chore: isort

Files changed:
M plone/app/customerize/tests/testDocTests.py

b'diff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py\nindex bc6a292..4fab66e 100644\n--- a/plone/app/customerize/tests/testDocTests.py\n+++ b/plone/app/customerize/tests/testDocTests.py\n@@ -1,5 +1,5 @@\n-from plone.app.customerize.testing import (\n-    PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING  # noqa\n+from plone.app.customerize.testing import (  # noqa\n+    PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING,\n )\n from plone.testing import layered\n from unittest import TestSuite\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-01T23:40:22+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/09be6da66b436d2f3020e596397d7dec15897727

chore: black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/customerize/__init__.py
M plone/app/customerize/browser.py
M plone/app/customerize/registration.py
M plone/app/customerize/testing.py
M plone/app/customerize/tests/interfaces.py
M plone/app/customerize/tests/testDocTests.py
M plone/app/customerize/tests/viewlets.py
M plone/app/customerize/tool.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/customerize/__init__.py b/plone/app/customerize/__init__.py\nindex 7b735a0..3280d0b 100644\n--- a/plone/app/customerize/__init__.py\n+++ b/plone/app/customerize/__init__.py\n@@ -3,9 +3,10 @@\n \n \n def initialize(context):\n-    """ initialize function called when used as a zope2 product """\n+    """initialize function called when used as a zope2 product"""\n \n-    ToolInit(\'plone.app.customerize\',\n-             tools=(ViewTemplateContainer,),\n-             icon=\'tool.gif\',\n-             ).initialize(context)\n+    ToolInit(\n+        "plone.app.customerize",\n+        tools=(ViewTemplateContainer,),\n+        icon="tool.gif",\n+    ).initialize(context)\ndiff --git a/plone/app/customerize/browser.py b/plone/app/customerize/browser.py\nindex cd38553..1209174 100644\n--- a/plone/app/customerize/browser.py\n+++ b/plone/app/customerize/browser.py\n@@ -9,17 +9,15 @@\n \n \n class RegistrationsView(BrowserView):\n-\n     def getTemplateViewRegistrations(self, mangle=True):\n-        """ get all global view registrations and cycle through the local\n-            ones to see which views have already been customized ttw """\n+        """get all global view registrations and cycle through the local\n+        ones to see which views have already been customized ttw"""\n         regs = []\n         local = {}\n         for reg in self.getLocalRegistrations():\n             local[(reg.required, str(reg.name), str(reg.factory.name))] = reg\n         for reg in registration.templateViewRegistrations():\n-            lreg = local.get(\n-                (reg.required, str(reg.name), str(reg.ptname)), None)\n+            lreg = local.get((reg.required, str(reg.name), str(reg.ptname)), None)\n             if lreg is not None:\n                 regs.append(lreg)\n             else:\n@@ -36,28 +34,34 @@ def getTemplateViewRegistrationInfo(self):\n \n     def getRegistrationFromRequest(self):\n         form = self.request.form\n-        return registration.findTemplateViewRegistration(form[\'required\'],\n-                                                         form[\'view_name\'])\n+        return registration.findTemplateViewRegistration(\n+            form["required"], form["view_name"]\n+        )\n \n     def registerTTWView(self, viewzpt, reg):\n         sm = getSiteManager(self.context)\n-        sm.registerAdapter(viewzpt, required=reg.required,\n-                           provided=reg.provided, name=reg.name)\n+        sm.registerAdapter(\n+            viewzpt, required=reg.required, provided=reg.provided, name=reg.name\n+        )\n \n     def customizeTemplate(self):\n         reg = self.getRegistrationFromRequest()\n         viewzpt = registration.customizeTemplate(reg)\n         self.registerTTWView(viewzpt, reg)\n         path = aq_inner(viewzpt).getPhysicalPath()\n-        url = self.request.physicalPathToURL(path) + \'/manage_workspace\'\n+        url = self.request.physicalPathToURL(path) + "/manage_workspace"\n         self.request.response.redirect(url)\n \n     def getLocalRegistrations(self):\n         layers = getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)\n         components = getSiteManager(self.context)\n         for reg in components.registeredAdapters():\n-            if (len(reg.required) in (2, 4, 5) and\n-                   (reg.required[1].isOrExtends(IBrowserRequest) or\n-                    reg.required[1] in layers) and\n-                    ITTWViewTemplate.providedBy(reg.factory)):\n+            if (\n+                len(reg.required) in (2, 4, 5)\n+                and (\n+                    reg.required[1].isOrExtends(IBrowserRequest)\n+                    or reg.required[1] in layers\n+                )\n+                and ITTWViewTemplate.providedBy(reg.factory)\n+            ):\n                 yield reg\ndiff --git a/plone/app/customerize/registration.py b/plone/app/customerize/registration.py\nindex 93a2f22..f5ae084 100644\n--- a/plone/app/customerize/registration.py\n+++ b/plone/app/customerize/registration.py\n@@ -16,8 +16,8 @@\n \n \n def getViews(type):\n-    """ get all view registrations (stolen from zope.app.apidoc.presentation),\n-        both global and those registered for a specific layer """\n+    """get all view registrations (stolen from zope.app.apidoc.presentation),\n+    both global and those registered for a specific layer"""\n \n     # A zope 3 view is any multi-adapter whose second requirement\n     # is a browser request, or derivation thereof.\n@@ -28,33 +28,36 @@ def getViews(type):\n     layers = getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)\n     gsm = getGlobalSiteManager()\n     for reg in gsm.registeredAdapters():\n-        if (len(reg.required) > 1 and\n-                reg.required[1] is not None and\n-               (reg.required[1].isOrExtends(type) or\n-                reg.required[1] in layers)):\n+        if (\n+            len(reg.required) > 1\n+            and reg.required[1] is not None\n+            and (reg.required[1].isOrExtends(type) or reg.required[1] in layers)\n+        ):\n             yield reg\n \n \n def interfaceName(iface):\n-    """ return a sensible name for the given interface """\n-    name = getattr(iface, \'__name__\', repr(iface))\n-    return getattr(iface, \'__identifier__\', name)\n+    """return a sensible name for the given interface"""\n+    name = getattr(iface, "__name__", repr(iface))\n+    return getattr(iface, "__identifier__", name)\n \n \n def templateViewRegistrations():\n     regs = []\n     for reg in getViews(IBrowserRequest):\n         factory = reg.factory\n-        while hasattr(factory, \'factory\'):\n+        while hasattr(factory, "factory"):\n             factory = factory.factory\n         # TODO: this should really be dealt with using\n         # a marker interface on the view factory\n-        name = getattr(factory, \'__name__\', \'\')\n-        if name.startswith(\'SimpleViewClass\') or \\\n-                name.startswith(\'SimpleViewletClass\') or \\\n-                name.endswith(\'Viewlet\') or \\\n-                IViewlet.implementedBy(factory) or \\\n-                IPortletRenderer.implementedBy(factory):\n+        name = getattr(factory, "__name__", "")\n+        if (\n+            name.startswith("SimpleViewClass")\n+            or name.startswith("SimpleViewletClass")\n+            or name.endswith("Viewlet")\n+            or IViewlet.implementedBy(factory)\n+            or IPortletRenderer.implementedBy(factory)\n+        ):\n             attr, pt = findViewletTemplate(factory)\n             if pt:\n                 reg.ptname = basename(pt.filename)\n@@ -74,10 +77,10 @@ def templateViewRegistrationInfos(regs, mangle=True):\n             customized = reg.factory.getId()\n         else:\n             attr, pt = findViewletTemplate(reg.factory)\n-            if attr is None:        # skip, if the factory has no template...\n+            if attr is None:  # skip, if the factory has no template...\n                 continue\n             zptfile = pt.filename\n-            zcmlfile = getattr(reg.info, \'file\', None)\n+            zcmlfile = getattr(reg.info, "file", None)\n \n             if mangle:\n                 zptfile = mangleAbsoluteFilename(zptfile)\n@@ -86,52 +89,49 @@ def templateViewRegistrationInfos(regs, mangle=True):\n             name = reg.name or basename(zptfile)\n             customized = None\n         required = [interfaceName(r) for r in reg.required]\n-        required_str = \',\'.join(required)\n-        url = \'@@customizezpt.html?required={0}&view_name={1}\'\n+        required_str = ",".join(required)\n+        url = "@@customizezpt.html?required={0}&view_name={1}"\n         customize_url = url.format(\n             required_str,\n             name,\n         )\n         yield {\n-            \'viewname\': name,\n-            \'required\': required_str,\n-            \'for\': required[0],\n-            \'type\': required[1],\n-            \'zptfile\': zptfile,\n-            \'zcmlfile\': zcmlfile or \'n.a.\',\n-            \'customized\': customized,\n-            \'customize_url\': customize_url,\n+            "viewname": name,\n+            "required": required_str,\n+            "for": required[0],\n+            "type": required[1],\n+            "zptfile": zptfile,\n+            "zcmlfile": zcmlfile or "n.a.",\n+            "customized": customized,\n+            "customize_url": customize_url,\n         }\n \n \n def templateViewRegistrationGroups(regs, mangle=True):\n     ifaces = {}\n     registrations = sorted(\n-        templateViewRegistrationInfos(regs, mangle=mangle),\n-        key=itemgetter(\'viewname\')\n+        templateViewRegistrationInfos(regs, mangle=mangle), key=itemgetter("viewname")\n     )\n     for reg in registrations:\n-        key = reg[\'for\']\n+        key = reg["for"]\n         if key in ifaces:\n-            ifaces[key][\'views\'].append(reg)\n+            ifaces[key]["views"].append(reg)\n         else:\n-            ifaces[key] = {\'name\': key, \'views\': [reg]}\n-    return sorted(ifaces.values(), key=itemgetter(\'name\'))\n+            ifaces[key] = {"name": key, "views": [reg]}\n+    return sorted(ifaces.values(), key=itemgetter("name"))\n \n \n def findTemplateViewRegistration(required, viewname):\n-    required = required.split(\',\')\n+    required = required.split(",")\n     for reg in templateViewRegistrations():\n         if required == [interfaceName(r) for r in reg.required]:\n-            if reg.name == viewname or \\\n-                    reg.provided.isOrExtends(IPortletRenderer):\n+            if reg.name == viewname or reg.provided.isOrExtends(IPortletRenderer):\n                 return reg\n \n \n def generateIdFromRegistration(reg):\n-    return \'{}-{}\'.format(\n-        interfaceName(reg.required[0]).lower(),\n-        reg.name or reg.ptname\n+    return "{}-{}".format(\n+        interfaceName(reg.required[0]).lower(), reg.name or reg.ptname\n     )\n \n \n@@ -153,15 +153,15 @@ def getTemplateCodeFromRegistration(reg):\n     attr, template = findViewletTemplate(reg.factory)\n     # TODO: we can\'t do template.read() here because of a bug in\n     # Zope 3\'s ZPT implementation.\n-    with open(template.filename, \'rb\') as template_file:\n+    with open(template.filename, "rb") as template_file:\n         content = template_file.read()\n     return content\n \n \n def getViewPermissionFromRegistration(reg):\n-    permissions = getattr(reg.factory, \'__ac_permissions__\', [])\n+    permissions = getattr(reg.factory, "__ac_permissions__", [])\n     for permission, methods in permissions:\n-        if methods[0] in (\'\', \'__call__\'):\n+        if methods[0] in ("", "__call__"):\n             return permission\n \n \n@@ -176,9 +176,10 @@ def createTTWViewTemplate(reg):\n         text=getTemplateCodeFromRegistration(reg),\n         view=getViewClassFromRegistration(reg),\n         permission=getViewPermissionFromRegistration(reg),\n-        name=ptname)\n+        name=ptname,\n+    )\n     # conserve view name (at least for KSS kssattr-viewname to work\n-    viewzpt.manage_addProperty(\'view_name\', reg.name, \'string\')\n+    viewzpt.manage_addProperty("view_name", reg.name, "string")\n     return viewzpt\n \n \ndiff --git a/plone/app/customerize/testing.py b/plone/app/customerize/testing.py\nindex 974d2ab..e1ecd29 100644\n--- a/plone/app/customerize/testing.py\n+++ b/plone/app/customerize/testing.py\n@@ -4,24 +4,30 @@\n \n \n class PloneAppCustomerize(PloneFixture):\n-\n     def setUpZCML(self):\n         super().setUpZCML()\n \n         import plone.app.customerize\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.customerize,\n-                       context=self[\'configurationContext\'])\n-        xmlconfig.file(\'testing.zcml\',\n-                       plone.app.customerize.tests,\n-                       context=self[\'configurationContext\'])\n-        xmlconfig.file(\'duplicate_viewlet.zcml\',\n-                       plone.app.customerize.tests,\n-                       context=self[\'configurationContext\'])\n+\n+        xmlconfig.file(\n+            "configure.zcml",\n+            plone.app.customerize,\n+            context=self["configurationContext"],\n+        )\n+        xmlconfig.file(\n+            "testing.zcml",\n+            plone.app.customerize.tests,\n+            context=self["configurationContext"],\n+        )\n+        xmlconfig.file(\n+            "duplicate_viewlet.zcml",\n+            plone.app.customerize.tests,\n+            context=self["configurationContext"],\n+        )\n \n \n PLONE_APP_CUSTOMERIZE_FIXTURE = PloneAppCustomerize()\n PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_CUSTOMERIZE_FIXTURE,),\n-    name=\'PloneAppCustomerize:Functional\',\n+    name="PloneAppCustomerize:Functional",\n )\ndiff --git a/plone/app/customerize/tests/interfaces.py b/plone/app/customerize/tests/interfaces.py\nindex df1da68..e959780 100644\n--- a/plone/app/customerize/tests/interfaces.py\n+++ b/plone/app/customerize/tests/interfaces.py\n@@ -2,8 +2,8 @@\n \n \n class IMyLayer(Interface):\n-    """ marker interface for a layer for testing purposes """\n+    """marker interface for a layer for testing purposes"""\n \n \n class IOtherLayer(Interface):\n-    """ marker interface for a second layer for testing purposes """\n+    """marker interface for a second layer for testing purposes"""\ndiff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py\nindex 4fab66e..f3385be 100644\n--- a/plone/app/customerize/tests/testDocTests.py\n+++ b/plone/app/customerize/tests/testDocTests.py\n@@ -12,7 +12,7 @@\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\'NotFound\', \'zExceptions.NotFound\', got)\n+            got = re.sub("NotFound", "zExceptions.NotFound", got)\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n@@ -20,13 +20,13 @@ def check_output(self, want, got, optionflags):\n def test_suite():\n     suite = TestSuite()\n     OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n-    for testfile in (\'testBrowserLayers.txt\', \'testCustomizeView.txt\'):\n+    for testfile in ("testBrowserLayers.txt", "testCustomizeView.txt"):\n         suite.addTest(\n             layered(\n                 doctest.DocFileSuite(\n                     testfile,\n                     optionflags=OPTIONFLAGS,\n-                    package=\'plone.app.customerize.tests\',\n+                    package="plone.app.customerize.tests",\n                     checker=Py23DocChecker(),\n                 ),\n                 layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING,\ndiff --git a/plone/app/customerize/tests/viewlets.py b/plone/app/customerize/tests/viewlets.py\nindex 089335b..3013bd9 100644\n--- a/plone/app/customerize/tests/viewlets.py\n+++ b/plone/app/customerize/tests/viewlets.py\n@@ -3,12 +3,12 @@\n \n \n class StandardViewlet(ViewletBase):\n-    """ a viewlet class for testing purposes """\n+    """a viewlet class for testing purposes"""\n \n-    render = ViewPageTemplateFile(\'standard.pt\')\n+    render = ViewPageTemplateFile("standard.pt")\n \n \n class LayerViewlet(ViewletBase):\n-    """ a viewlet class for testing purposes """\n+    """a viewlet class for testing purposes"""\n \n-    render = ViewPageTemplateFile(\'local.pt\')\n+    render = ViewPageTemplateFile("local.pt")\ndiff --git a/plone/app/customerize/tool.py b/plone/app/customerize/tool.py\nindex 482c845..261c541 100644\n--- a/plone/app/customerize/tool.py\n+++ b/plone/app/customerize/tool.py\n@@ -8,24 +8,24 @@\n \n @implementer(IViewTemplateContainer)\n class ViewTemplateContainer(Folder):\n-    """ a local utility storing all ttw view templates provided\n-        by five.customerize in a folder """\n+    """a local utility storing all ttw view templates provided\n+    by five.customerize in a folder"""\n \n-    id = \'portal_view_customizations\'\n-    title = \'Manages view customizations\'\n-    meta_type = \'Plone View Customizations\'\n+    id = "portal_view_customizations"\n+    title = "Manages view customizations"\n+    meta_type = "Plone View Customizations"\n \n     security = ClassSecurityInfo()\n \n     manage_options = (\n-        (dict(label=\'Registrations\', action=\'registrations.html\'),) +\n-        Folder.manage_options[0:1] +\n-        Folder.manage_options[2:]\n+        (dict(label="Registrations", action="registrations.html"),)\n+        + Folder.manage_options[0:1]\n+        + Folder.manage_options[2:]\n     )\n \n     @security.protected(ManagePortal)\n     def addTemplate(self, id, template):\n-        """ add the given ttw view template to the container """\n+        """add the given ttw view template to the container"""\n         self._setObject(id, template)\n         return getattr(self, id)\n \ndiff --git a/setup.py b/setup.py\nindex 3d38e6a..1abfb3a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,67 +2,66 @@\n from setuptools import setup\n \n \n-version = \'1.3.13.dev0\'\n+version = "1.3.13.dev0"\n \n setup(\n-    name=\'plone.app.customerize\',\n+    name="plone.app.customerize",\n     version=version,\n-    description=\'Integrate five.customerize into Plone.\',\n-    long_description=open(\'README.rst\').read() + \'\\n\' +\n-    open(\'CHANGES.rst\').read(),\n+    description="Integrate five.customerize into Plone.",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n-        \'Framework :: Zope :: 4\',\n-        \'Framework :: Zope :: 5\',\n-        \'Intended Audience :: Other Audience\',\n-        \'Intended Audience :: System Administrators\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n-        \'Topic :: Internet :: WWW/HTTP :: Site Management\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.0",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n+        "Intended Audience :: Other Audience",\n+        "Intended Audience :: System Administrators",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Topic :: Internet :: WWW/HTTP :: Site Management",\n     ],\n-    keywords=\'customerize plone views page templates zmi\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.customerize/\',\n-    license=\'GPL version 2\',\n+    keywords="customerize plone views page templates zmi",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.customerize/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     extras_require=dict(\n         test=[\n-            \'plone.app.layout\',\n-            \'plone.app.testing\',\n-            \'six\',\n-            \'zope.testing\',\n+            "plone.app.layout",\n+            "plone.app.testing",\n+            "six",\n+            "zope.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'five.customerize\',\n-        \'plone.browserlayer\',\n-        \'plone.portlets\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.viewlet\',\n-        \'Products.CMFCore\',\n-        \'Acquisition\',\n-        \'Zope2\',\n+        "setuptools",\n+        "five.customerize",\n+        "plone.browserlayer",\n+        "plone.portlets",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.viewlet",\n+        "Products.CMFCore",\n+        "Acquisition",\n+        "Zope2",\n     ],\n-    platforms=\'Any\',\n+    platforms="Any",\n     zip_safe=False,\n )\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-01T23:41:11+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/4d531cc6bad0f6bada8776d85a44e6176f96acbd

chore: zpretty ZCML/XML

Files changed:
M plone/app/customerize/configure.zcml
M plone/app/customerize/dependencies.zcml
M plone/app/customerize/tests/duplicate_viewlet.zcml
M plone/app/customerize/tests/profiles/testing/viewlets.xml
M plone/app/customerize/tests/testing.zcml

b'diff --git a/plone/app/customerize/configure.zcml b/plone/app/customerize/configure.zcml\nindex 106b6b8..fc8da29 100644\n--- a/plone/app/customerize/configure.zcml\n+++ b/plone/app/customerize/configure.zcml\n@@ -2,25 +2,33 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-  <five:registerPackage package="." initialize=".initialize" />\n+  <five:registerPackage\n+      package="."\n+      initialize=".initialize"\n+      />\n \n-  <include file="dependencies.zcml"/>\n+  <include file="dependencies.zcml" />\n \n   <browser:pages\n       for="five.customerize.interfaces.IViewTemplateContainer"\n       class=".browser.RegistrationsView"\n-      permission="five.ManageSite">\n+      permission="five.ManageSite"\n+      >\n     <browser:page\n         name="registrations.html"\n-        template="registrations.pt" />\n+        template="registrations.pt"\n+        />\n     <browser:page\n         name="customizezpt.html"\n-        template="customize.pt" />\n+        template="customize.pt"\n+        />\n     <browser:page\n         name="customizezpt"\n-        attribute="customizeTemplate" />\n+        attribute="customizeTemplate"\n+        />\n   </browser:pages>\n \n </configure>\ndiff --git a/plone/app/customerize/dependencies.zcml b/plone/app/customerize/dependencies.zcml\nindex cbe3144..9058029 100644\n--- a/plone/app/customerize/dependencies.zcml\n+++ b/plone/app/customerize/dependencies.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five">\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n \n   <include package="five.customerize" />\n \ndiff --git a/plone/app/customerize/tests/duplicate_viewlet.zcml b/plone/app/customerize/tests/duplicate_viewlet.zcml\nindex cab404e..6f59f5a 100644\n--- a/plone/app/customerize/tests/duplicate_viewlet.zcml\n+++ b/plone/app/customerize/tests/duplicate_viewlet.zcml\n@@ -2,13 +2,15 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.customerize">\n+    i18n_domain="plone.app.customerize"\n+    >\n \n   <browser:viewlet\n-    name="layer-test-viewlet"\n-    for="*"\n-    class=".viewlets.LayerViewlet"\n-    layer=".interfaces.IOtherLayer"\n-    permission="zope.Public" />\n+      name="layer-test-viewlet"\n+      for="*"\n+      class=".viewlets.LayerViewlet"\n+      permission="zope.Public"\n+      layer=".interfaces.IOtherLayer"\n+      />\n \n </configure>\ndiff --git a/plone/app/customerize/tests/profiles/testing/viewlets.xml b/plone/app/customerize/tests/profiles/testing/viewlets.xml\nindex 48de30f..6368b35 100644\n--- a/plone/app/customerize/tests/profiles/testing/viewlets.xml\n+++ b/plone/app/customerize/tests/profiles/testing/viewlets.xml\n@@ -1,8 +1,13 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <object>\n-  <order manager="plone.portalheader" skinname="Plone Default">\n-    <viewlet name="standard-test-viewlet" insert-after="plone.logo" />\n-    <viewlet name="layer-test-viewlet" insert-after="plone.logo" />\n+  <order manager="plone.portalheader"\n+         skinname="Plone Default"\n+  >\n+    <viewlet insert-after="plone.logo"\n+             name="standard-test-viewlet"\n+    />\n+    <viewlet insert-after="plone.logo"\n+             name="layer-test-viewlet"\n+    />\n   </order>\n </object>\n-\ndiff --git a/plone/app/customerize/tests/testing.zcml b/plone/app/customerize/tests/testing.zcml\nindex 21526bd..a584d0d 100644\n--- a/plone/app/customerize/tests/testing.zcml\n+++ b/plone/app/customerize/tests/testing.zcml\n@@ -3,48 +3,54 @@\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone.app.customerize">\n+    i18n_domain="plone.app.customerize"\n+    >\n \n   <genericsetup:registerProfile\n-    name="testing"\n-    title="Tests for local browser layer support"\n-    directory="profiles/testing"\n-    description=""\n-    provides="Products.GenericSetup.interfaces.EXTENSION" />\n+      name="testing"\n+      title="Tests for local browser layer support"\n+      description=""\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/testing"\n+      />\n \n   <!-- register a portlet to demonstrate issue #8275 -->\n   <plone:portlet\n-    name="portlets.Login"\n-    interface="plone.app.portlets.portlets.login.ILoginPortlet"\n-    assignment="plone.app.portlets.portlets.login.Assignment"\n-    renderer="plone.app.portlets.portlets.login.Renderer"\n-    addview="plone.app.portlets.portlets.login.AddForm"\n-    />\n+      name="portlets.Login"\n+      interface="plone.app.portlets.portlets.login.ILoginPortlet"\n+      assignment="plone.app.portlets.portlets.login.Assignment"\n+      renderer="plone.app.portlets.portlets.login.Renderer"\n+      addview="plone.app.portlets.portlets.login.AddForm"\n+      />\n \n   <browser:page\n-    name="standard-test-view"\n-    for="*"\n-    template="standard.pt"\n-    permission="zope.Public" />\n+      name="standard-test-view"\n+      for="*"\n+      template="standard.pt"\n+      permission="zope.Public"\n+      />\n \n   <browser:page\n-    name="layer-test-view"\n-    for="*"\n-    layer=".interfaces.IMyLayer"\n-    template="local.pt"\n-    permission="zope.Public" />\n+      name="layer-test-view"\n+      for="*"\n+      template="local.pt"\n+      permission="zope.Public"\n+      layer=".interfaces.IMyLayer"\n+      />\n \n   <browser:viewlet\n-    name="standard-test-viewlet"\n-    for="*"\n-    class=".viewlets.StandardViewlet"\n-    permission="zope.Public" />\n+      name="standard-test-viewlet"\n+      for="*"\n+      class=".viewlets.StandardViewlet"\n+      permission="zope.Public"\n+      />\n \n   <browser:viewlet\n-    name="layer-test-viewlet"\n-    for="*"\n-    class=".viewlets.LayerViewlet"\n-    layer=".interfaces.IMyLayer"\n-    permission="zope.Public" />\n+      name="layer-test-viewlet"\n+      for="*"\n+      class=".viewlets.LayerViewlet"\n+      permission="zope.Public"\n+      layer=".interfaces.IMyLayer"\n+      />\n \n </configure>\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-02T23:43:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/308c6e883904290e84b2c89b039854471f80ec95

chore: zptlint PT

Files changed:
M plone/app/customerize/customize.pt
M plone/app/customerize/registrations.pt
M plone/app/customerize/tests/local.pt
M plone/app/customerize/tests/standard.pt

b'diff --git a/plone/app/customerize/customize.pt b/plone/app/customerize/customize.pt\nindex 0db0e4d..f22b463 100644\n--- a/plone/app/customerize/customize.pt\n+++ b/plone/app/customerize/customize.pt\n@@ -1,12 +1,14 @@\n-<h1 tal:replace="structure context/manage_page_header" />\n-<h1 tal:replace="structure context/manage_tabs" />\n+<h1 tal:replace="structure context/manage_page_header"></h1>\n+<h1 tal:replace="structure context/manage_tabs"></h1>\n \n <div>\n \n-<form action="@@customizezpt" method="post"\n-      enctype="multipart/form-data">\n+  <form action="@@customizezpt"\n+        enctype="multipart/form-data"\n+        method="post"\n+  >\n \n-  <style type="text/css">\n+    <style type="text/css">\n     dl {\n       font-family: Verdana, Helvetica, sans-serif;\n       font-size: 10pt;\n@@ -24,36 +26,61 @@\n     dl, pre, form {\n       margin-left: 1em;\n     }\n-  </style>\n-\n-  <p i18n:translate="">The following is the source of\n-  "<code tal:content="request/form/view_name">viewname</code>",\n-  registered as:</p>\n-\n-  <dl tal:define="info view/getTemplateViewRegistrationInfo">\n-    <dt> view name </dt>\n-      <dd tal:content="info/viewname" />\n-    <dt> registered for interface </dt>\n-      <dd tal:content="info/for" />\n-    <dt> registered for request type </dt>\n-      <dd tal:content="info/type" />\n-    <dt> template file </dt>\n-      <dd tal:content="info/zptfile" />\n-    <dt> zcml file </dt>\n-      <dd tal:content="info/zcmlfile" />\n-  </dl>\n-\n-  <pre tal:content="view/getTemplateCodeFromRegistration">\n+    </style>\n+\n+    <p i18n:translate="">The following is the source of\n+      "<code tal:content="request/form/view_name">viewname</code>",\n+      registered as:</p>\n+\n+    <dl tal:define="\n+          info view/getTemplateViewRegistrationInfo;\n+        ">\n+      <dt>\n+        view name\n+      </dt>\n+      <dd tal:content="info/viewname"></dd>\n+      <dt>\n+        registered for interface\n+      </dt>\n+      <dd tal:content="info/for"></dd>\n+      <dt>\n+        registered for request type\n+      </dt>\n+      <dd tal:content="info/type"></dd>\n+      <dt>\n+        template file\n+      </dt>\n+      <dd tal:content="info/zptfile"></dd>\n+      <dt>\n+        zcml file\n+      </dt>\n+      <dd tal:content="info/zcmlfile"></dd>\n+    </dl>\n+\n+    <pre tal:content="view/getTemplateCodeFromRegistration">\n     template source\n   </pre>\n \n-    <input type="hidden" name="required" value=""\n-           tal:attributes="value request/form/required" />\n-    <input type="hidden" name="view_name" value="theviewname"\n-           tal:attributes="value request/form/view_name" />\n-    <input type="submit" name="" value="Customize" />\n+    <input name="required"\n+           type="hidden"\n+           value=""\n+           tal:attributes="\n+             value request/form/required;\n+           "\n+    />\n+    <input name="view_name"\n+           type="hidden"\n+           value="theviewname"\n+           tal:attributes="\n+             value request/form/view_name;\n+           "\n+    />\n+    <input name=""\n+           type="submit"\n+           value="Customize"\n+    />\n   </form>\n \n </div>\n \n-<h1 tal:replace="structure context/manage_page_footer" />\n\\ No newline at end of file\n+<h1 tal:replace="structure context/manage_page_footer"></h1>\ndiff --git a/plone/app/customerize/registrations.pt b/plone/app/customerize/registrations.pt\nindex 5ffdf77..0dc4dad 100644\n--- a/plone/app/customerize/registrations.pt\n+++ b/plone/app/customerize/registrations.pt\n@@ -1,5 +1,5 @@\n-<h1 tal:replace="structure context/manage_page_header" />\n-<h1 tal:replace="structure context/manage_tabs" />\n+<h1 tal:replace="structure context/manage_page_header"></h1>\n+<h1 tal:replace="structure context/manage_tabs"></h1>\n \n <main class="container-fluid">\n \n@@ -12,44 +12,61 @@\n     }\n   </style>\n \n-<div class="alert alert-danger" role="alert">\n+  <div class="alert alert-danger"\n+       role="alert"\n+  >\n   ATTENTION: beware using this tool.\n-  Errors (e.g. <code>TypeError</code>, <code>Unauthorized</code> etc) may popup if some kinds of\n-  <code>python:</code> expressions are used in the template.\n+  Errors (e.g.\n+    <code>TypeError</code>,\n+    <code>Unauthorized</code>\n+     etc) may popup if some kinds of\n+    <code>python:</code>\n+     expressions are used in the template.\n   This makes it impossible to customize those here (try z3c.jbot or regular zcml overrides instead).\n   The reason is that browser view templates are Chameleon Pagetemplates while items in portal_view_customization are Zope 2 templates.\n   The different security models underlying the two implementations may break rendering of thesite.\n   If that happens just delete the custom copy using the Contents tab above.\n-</div>\n+  </div>\n \n   <p class="form-help">\n     The following list shows all registered (template-based) views\n     sorted by interface. Click one of the links to see the contents\n     of the view template and possibly customize it. Views that already\n-    have been customized are <span class="customized">highlighted like\n-    this</span>.\n+    have been customized are\n+    <span class="customized">highlighted like\n+      this</span>.\n   </p>\n \n   <article tal:repeat="iface python:view.getTemplateViewRegistrations(mangle=False)">\n-    <header tal:content="iface/name" />\n+    <header tal:content="iface/name"></header>\n     <ul>\n       <li tal:repeat="info iface/views">\n-        <a href="" class="customized"\n+        <a class="customized"\n+           href=""\n            tal:condition="info/customized"\n-           tal:attributes="href string:${info/customized}/manage_main;"\n-           tal:content="info/viewname">\n+           tal:content="info/viewname"\n+           tal:attributes="\n+             href string:${info/customized}/manage_main;\n+           "\n+        >\n         </a>\n         <a href=""\n            tal:condition="not: info/customized"\n-           tal:attributes="href info/customize_url;\n-                           title info/zptfile;"\n-           tal:content="info/viewname">\n+           tal:content="info/viewname"\n+           tal:attributes="\n+             href info/customize_url;\n+             title info/zptfile;\n+           "\n+        >\n         </a>\n-        <code tal:content="string:(${info/type})" class="type" /> <br />\n+        <code class="type"\n+              tal:content="string:(${info/type})"\n+        ></code>\n+        <br />\n       </li>\n     </ul>\n   </article>\n \n </main>\n \n-<h1 tal:replace="structure context/manage_page_footer" />\n\\ No newline at end of file\n+<h1 tal:replace="structure context/manage_page_footer"></h1>\ndiff --git a/plone/app/customerize/tests/local.pt b/plone/app/customerize/tests/local.pt\nindex 4f50b0c..4fe3a12 100644\n--- a/plone/app/customerize/tests/local.pt\n+++ b/plone/app/customerize/tests/local.pt\n@@ -1,2 +1,4 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />\n-a local view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />\n+a local view\ndiff --git a/plone/app/customerize/tests/standard.pt b/plone/app/customerize/tests/standard.pt\nindex 4fa0ab0..a5443e9 100644\n--- a/plone/app/customerize/tests/standard.pt\n+++ b/plone/app/customerize/tests/standard.pt\n@@ -1,2 +1,4 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />\n-a standard view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />\n+a standard view\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-02T23:43:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/1ac3a52409faf1085678f21204c14c6a58020317

feat: codespell

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 90903fc..69b0798 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -113,7 +113,7 @@ Fixes:\n - Move tests to plone.app.testing.\n   [bogdan.girman]\n \n-- Supress a ZopeTestCase warning.\n+- Suppress a ZopeTestCase warning.\n   This fixes https://github.com/plone/Products.CMFPlone/issues/502\n   [gforcada]\n \n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-02T23:43:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/3354b41374b00242deb20c9cfa2964715a39a34b

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 1abfb3a..e92c057 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -41,6 +41,7 @@\n     packages=find_packages(),\n     namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n             "plone.app.layout",\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-02T23:43:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/a3ad19872ddd6347f6d052f41a7ef7fe60e95a21

fix: adjust tests to zptlint

Files changed:
M plone/app/customerize/tests/testBrowserLayers.txt

b'diff --git a/plone/app/customerize/tests/testBrowserLayers.txt b/plone/app/customerize/tests/testBrowserLayers.txt\nindex 095e8c4..8277a56 100644\n--- a/plone/app/customerize/tests/testBrowserLayers.txt\n+++ b/plone/app/customerize/tests/testBrowserLayers.txt\n@@ -125,7 +125,7 @@ home page and as being customizable:\n    ...<a href="@@customizezpt.html?...view_name=layer-test-viewlet"...\n    ...>layer-test-viewlet</a>...\n    ...<a href="@@customizezpt.html?...view_name=standard-test-viewlet"...\n-   ...>standard-test-viewlet</a>...\'\n+   ...>standard-test-viewlet...</a>...\'\n \n We still need to make sure the local view and viewlet can actually be\n customerized.  First we look at the info page for the view:\n@@ -140,7 +140,7 @@ customerized.  First we look at the info page for the view:\n    ...template file...plone.app.customerize.tests/local.pt...\n    ...zcml file...plone.app.customerize.tests/testing.zcml...\n    ...</dl>...\n-   ...<pre>...a local view</pre>...\'\n+   ...<pre>...a local view...</pre>...\'\n \n We click the "customize" button, enter some new content, and save the changes:\n \n@@ -174,7 +174,7 @@ And now let\'s do the same with a viewlet:\n    ...template file...plone.app.customerize.tests/local.pt...\n    ...zcml file...plone.app.customerize.tests/testing.zcml...\n    ...</dl>...\n-   ...<pre>...a local view</pre>...\'\n+   ...<pre>...a local view...</pre>...\'\n    >>> browser.getControl(\'Customize\').click()\n    >>> browser.url\n    \'http://nohost/plone/portal_view_customizations/zope.interface.interface-layer-test-viewlet/pt_editForm\'\n@@ -206,7 +206,7 @@ of portlet templates).\n    ...template file...plone.app.customerize.tests/standard.pt...\n    ...zcml file...plone.app.customerize.tests/testing.zcml...\n    ...</dl>...\n-   ...<pre>...a standard view</pre>...\'\n+   ...<pre>...a standard view...</pre>...\'\n \n And clean up after ourselves for the sake of later tests:\n \n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-02T23:43:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/d1a89c2a78e5b91cb3448968918038ace7f7ced8

feat: drop six dependency

Files changed:
M plone/app/customerize/tests/testDocTests.py
M setup.py

b'diff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py\nindex f3385be..1ee936c 100644\n--- a/plone/app/customerize/tests/testDocTests.py\n+++ b/plone/app/customerize/tests/testDocTests.py\n@@ -5,16 +5,6 @@\n from unittest import TestSuite\n \n import doctest\n-import re\n-import six\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("NotFound", "zExceptions.NotFound", got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n@@ -27,7 +17,6 @@ def test_suite():\n                     testfile,\n                     optionflags=OPTIONFLAGS,\n                     package="plone.app.customerize.tests",\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING,\n             )\ndiff --git a/setup.py b/setup.py\nindex e92c057..cf43dc9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -46,7 +46,6 @@\n         test=[\n             "plone.app.layout",\n             "plone.app.testing",\n-            "six",\n             "zope.testing",\n         ]\n     ),\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-02T23:43:11+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/fd880cef5f7e551f642ef1cb072b3b80290d2747

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex cf43dc9..9eca15e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,9 +44,10 @@\n     python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n+            "Products.GenericSetup",\n             "plone.app.layout",\n             "plone.app.testing",\n-            "zope.testing",\n+            "plone.testing",\n         ]\n     ),\n     install_requires=[\n@@ -60,7 +61,6 @@\n         "zope.viewlet",\n         "Products.CMFCore",\n         "Acquisition",\n-        "Zope2",\n     ],\n     platforms="Any",\n     zip_safe=False,\n'

Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2023-04-10T03:04:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.customerize/commit/d63bfab8668446e30ad5b7ebc5ac8aeab8d52e4d

Merge pull request #21 from plone/config-with-default-template-bed04682

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5623f8b3.internal
A tox.ini
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/customerize/__init__.py
M plone/app/customerize/browser.py
M plone/app/customerize/configure.zcml
M plone/app/customerize/customize.pt
M plone/app/customerize/dependencies.zcml
M plone/app/customerize/registration.py
M plone/app/customerize/registrations.pt
M plone/app/customerize/testing.py
M plone/app/customerize/tests/__init__.py
M plone/app/customerize/tests/duplicate_viewlet.zcml
M plone/app/customerize/tests/interfaces.py
M plone/app/customerize/tests/local.pt
M plone/app/customerize/tests/profiles/testing/viewlets.xml
M plone/app/customerize/tests/standard.pt
M plone/app/customerize/tests/testBrowserLayers.txt
M plone/app/customerize/tests/testDocTests.py
M plone/app/customerize/tests/testing.zcml
M plone/app/customerize/tests/viewlets.py
M plone/app/customerize/tool.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4f67994\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 90903fc..69b0798 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -113,7 +113,7 @@ Fixes:\n - Move tests to plone.app.testing.\n   [bogdan.girman]\n \n-- Supress a ZopeTestCase warning.\n+- Suppress a ZopeTestCase warning.\n   This fixes https://github.com/plone/Products.CMFPlone/issues/502\n   [gforcada]\n \ndiff --git a/news/5623f8b3.internal b/news/5623f8b3.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5623f8b3.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/customerize/__init__.py b/plone/app/customerize/__init__.py\nindex 53740d7..3280d0b 100644\n--- a/plone/app/customerize/__init__.py\n+++ b/plone/app/customerize/__init__.py\n@@ -1,12 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.customerize.tool import ViewTemplateContainer\n from Products.CMFCore.utils import ToolInit\n \n \n def initialize(context):\n-    """ initialize function called when used as a zope2 product """\n+    """initialize function called when used as a zope2 product"""\n \n-    ToolInit(\'plone.app.customerize\',\n-             tools=(ViewTemplateContainer,),\n-             icon=\'tool.gif\',\n-             ).initialize(context)\n+    ToolInit(\n+        "plone.app.customerize",\n+        tools=(ViewTemplateContainer,),\n+        icon="tool.gif",\n+    ).initialize(context)\ndiff --git a/plone/app/customerize/browser.py b/plone/app/customerize/browser.py\nindex 4241b18..1209174 100644\n--- a/plone/app/customerize/browser.py\n+++ b/plone/app/customerize/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from five.customerize.interfaces import ITTWViewTemplate\n from plone.app.customerize import registration\n@@ -10,17 +9,15 @@\n \n \n class RegistrationsView(BrowserView):\n-\n     def getTemplateViewRegistrations(self, mangle=True):\n-        """ get all global view registrations and cycle through the local\n-            ones to see which views have already been customized ttw """\n+        """get all global view registrations and cycle through the local\n+        ones to see which views have already been customized ttw"""\n         regs = []\n         local = {}\n         for reg in self.getLocalRegistrations():\n             local[(reg.required, str(reg.name), str(reg.factory.name))] = reg\n         for reg in registration.templateViewRegistrations():\n-            lreg = local.get(\n-                (reg.required, str(reg.name), str(reg.ptname)), None)\n+            lreg = local.get((reg.required, str(reg.name), str(reg.ptname)), None)\n             if lreg is not None:\n                 regs.append(lreg)\n             else:\n@@ -37,28 +34,34 @@ def getTemplateViewRegistrationInfo(self):\n \n     def getRegistrationFromRequest(self):\n         form = self.request.form\n-        return registration.findTemplateViewRegistration(form[\'required\'],\n-                                                         form[\'view_name\'])\n+        return registration.findTemplateViewRegistration(\n+            form["required"], form["view_name"]\n+        )\n \n     def registerTTWView(self, viewzpt, reg):\n         sm = getSiteManager(self.context)\n-        sm.registerAdapter(viewzpt, required=reg.required,\n-                           provided=reg.provided, name=reg.name)\n+        sm.registerAdapter(\n+            viewzpt, required=reg.required, provided=reg.provided, name=reg.name\n+        )\n \n     def customizeTemplate(self):\n         reg = self.getRegistrationFromRequest()\n         viewzpt = registration.customizeTemplate(reg)\n         self.registerTTWView(viewzpt, reg)\n         path = aq_inner(viewzpt).getPhysicalPath()\n-        url = self.request.physicalPathToURL(path) + \'/manage_workspace\'\n+        url = self.request.physicalPathToURL(path) + "/manage_workspace"\n         self.request.response.redirect(url)\n \n     def getLocalRegistrations(self):\n         layers = getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)\n         components = getSiteManager(self.context)\n         for reg in components.registeredAdapters():\n-            if (len(reg.required) in (2, 4, 5) and\n-                   (reg.required[1].isOrExtends(IBrowserRequest) or\n-                    reg.required[1] in layers) and\n-                    ITTWViewTemplate.providedBy(reg.factory)):\n+            if (\n+                len(reg.required) in (2, 4, 5)\n+                and (\n+                    reg.required[1].isOrExtends(IBrowserRequest)\n+                    or reg.required[1] in layers\n+                )\n+                and ITTWViewTemplate.providedBy(reg.factory)\n+            ):\n                 yield reg\ndiff --git a/plone/app/customerize/configure.zcml b/plone/app/customerize/configure.zcml\nindex 106b6b8..fc8da29 100644\n--- a/plone/app/customerize/configure.zcml\n+++ b/plone/app/customerize/configure.zcml\n@@ -2,25 +2,33 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-  <five:registerPackage package="." initialize=".initialize" />\n+  <five:registerPackage\n+      package="."\n+      initialize=".initialize"\n+      />\n \n-  <include file="dependencies.zcml"/>\n+  <include file="dependencies.zcml" />\n \n   <browser:pages\n       for="five.customerize.interfaces.IViewTemplateContainer"\n       class=".browser.RegistrationsView"\n-      permission="five.ManageSite">\n+      permission="five.ManageSite"\n+      >\n     <browser:page\n         name="registrations.html"\n-        template="registrations.pt" />\n+        template="registrations.pt"\n+        />\n     <browser:page\n         name="customizezpt.html"\n-        template="customize.pt" />\n+        template="customize.pt"\n+        />\n     <browser:page\n         name="customizezpt"\n-        attribute="customizeTemplate" />\n+        attribute="customizeTemplate"\n+        />\n   </browser:pages>\n \n </configure>\ndiff --git a/plone/app/customerize/customize.pt b/plone/app/customerize/customize.pt\nindex 0db0e4d..f22b463 100644\n--- a/plone/app/customerize/customize.pt\n+++ b/plone/app/customerize/customize.pt\n@@ -1,12 +1,14 @@\n-<h1 tal:replace="structure context/manage_page_header" />\n-<h1 tal:replace="structure context/manage_tabs" />\n+<h1 tal:replace="structure context/manage_page_header"></h1>\n+<h1 tal:replace="structure context/manage_tabs"></h1>\n \n <div>\n \n-<form action="@@customizezpt" method="post"\n-      enctype="multipart/form-data">\n+  <form action="@@customizezpt"\n+        enctype="multipart/form-data"\n+        method="post"\n+  >\n \n-  <style type="text/css">\n+    <style type="text/css">\n     dl {\n       font-family: Verdana, Helvetica, sans-serif;\n       font-size: 10pt;\n@@ -24,36 +26,61 @@\n     dl, pre, form {\n       margin-left: 1em;\n     }\n-  </style>\n-\n-  <p i18n:translate="">The following is the source of\n-  "<code tal:content="request/form/view_name">viewname</code>",\n-  registered as:</p>\n-\n-  <dl tal:define="info view/getTemplateViewRegistrationInfo">\n-    <dt> view name </dt>\n-      <dd tal:content="info/viewname" />\n-    <dt> registered for interface </dt>\n-      <dd tal:content="info/for" />\n-    <dt> registered for request type </dt>\n-      <dd tal:content="info/type" />\n-    <dt> template file </dt>\n-      <dd tal:content="info/zptfile" />\n-    <dt> zcml file </dt>\n-      <dd tal:content="info/zcmlfile" />\n-  </dl>\n-\n-  <pre tal:content="view/getTemplateCodeFromRegistration">\n+    </style>\n+\n+    <p i18n:translate="">The following is the source of\n+      "<code tal:content="request/form/view_name">viewname</code>",\n+      registered as:</p>\n+\n+    <dl tal:define="\n+          info view/getTemplateViewRegistrationInfo;\n+        ">\n+      <dt>\n+        view name\n+      </dt>\n+      <dd tal:content="info/viewname"></dd>\n+      <dt>\n+        registered for interface\n+      </dt>\n+      <dd tal:content="info/for"></dd>\n+      <dt>\n+        registered for request type\n+      </dt>\n+      <dd tal:content="info/type"></dd>\n+      <dt>\n+        template file\n+      </dt>\n+      <dd tal:content="info/zptfile"></dd>\n+      <dt>\n+        zcml file\n+      </dt>\n+      <dd tal:content="info/zcmlfile"></dd>\n+    </dl>\n+\n+    <pre tal:content="view/getTemplateCodeFromRegistration">\n     template source\n   </pre>\n \n-    <input type="hidden" name="required" value=""\n-           tal:attributes="value request/form/required" />\n-    <input type="hidden" name="view_name" value="theviewname"\n-           tal:attributes="value request/form/view_name" />\n-    <input type="submit" name="" value="Customize" />\n+    <input name="required"\n+           type="hidden"\n+           value=""\n+           tal:attributes="\n+             value request/form/required;\n+           "\n+    />\n+    <input name="view_name"\n+           type="hidden"\n+           value="theviewname"\n+           tal:attributes="\n+             value request/form/view_name;\n+           "\n+    />\n+    <input name=""\n+           type="submit"\n+           value="Customize"\n+    />\n   </form>\n \n </div>\n \n-<h1 tal:replace="structure context/manage_page_footer" />\n\\ No newline at end of file\n+<h1 tal:replace="structure context/manage_page_footer"></h1>\ndiff --git a/plone/app/customerize/dependencies.zcml b/plone/app/customerize/dependencies.zcml\nindex cbe3144..9058029 100644\n--- a/plone/app/customerize/dependencies.zcml\n+++ b/plone/app/customerize/dependencies.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five">\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n \n   <include package="five.customerize" />\n \ndiff --git a/plone/app/customerize/registration.py b/plone/app/customerize/registration.py\nindex 838d9fc..f5ae084 100644\n--- a/plone/app/customerize/registration.py\n+++ b/plone/app/customerize/registration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.customerize.browser import mangleAbsoluteFilename\n from five.customerize.interfaces import ITTWViewTemplate\n from five.customerize.interfaces import IViewTemplateContainer\n@@ -17,8 +16,8 @@\n \n \n def getViews(type):\n-    """ get all view registrations (stolen from zope.app.apidoc.presentation),\n-        both global and those registered for a specific layer """\n+    """get all view registrations (stolen from zope.app.apidoc.presentation),\n+    both global and those registered for a specific layer"""\n \n     # A zope 3 view is any multi-adapter whose second requirement\n     # is a browser request, or derivation thereof.\n@@ -29,33 +28,36 @@ def getViews(type):\n     layers = getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)\n     gsm = getGlobalSiteManager()\n     for reg in gsm.registeredAdapters():\n-        if (len(reg.required) > 1 and\n-                reg.required[1] is not None and\n-               (reg.required[1].isOrExtends(type) or\n-                reg.required[1] in layers)):\n+        if (\n+            len(reg.required) > 1\n+            and reg.required[1] is not None\n+            and (reg.required[1].isOrExtends(type) or reg.required[1] in layers)\n+        ):\n             yield reg\n \n \n def interfaceName(iface):\n-    """ return a sensible name for the given interface """\n-    name = getattr(iface, \'__name__\', repr(iface))\n-    return getattr(iface, \'__identifier__\', name)\n+    """return a sensible name for the given interface"""\n+    name = getattr(iface, "__name__", repr(iface))\n+    return getattr(iface, "__identifier__", name)\n \n \n def templateViewRegistrations():\n     regs = []\n     for reg in getViews(IBrowserRequest):\n         factory = reg.factory\n-        while hasattr(factory, \'factory\'):\n+        while hasattr(factory, "factory"):\n             factory = factory.factory\n         # TODO: this should really be dealt with using\n         # a marker interface on the view factory\n-        name = getattr(factory, \'__name__\', \'\')\n-        if name.startswith(\'SimpleViewClass\') or \\\n-                name.startswith(\'SimpleViewletClass\') or \\\n-                name.endswith(\'Viewlet\') or \\\n-                IViewlet.implementedBy(factory) or \\\n-                IPortletRenderer.implementedBy(factory):\n+        name = getattr(factory, "__name__", "")\n+        if (\n+            name.startswith("SimpleViewClass")\n+            or name.startswith("SimpleViewletClass")\n+            or name.endswith("Viewlet")\n+            or IViewlet.implementedBy(factory)\n+            or IPortletRenderer.implementedBy(factory)\n+        ):\n             attr, pt = findViewletTemplate(factory)\n             if pt:\n                 reg.ptname = basename(pt.filename)\n@@ -75,10 +77,10 @@ def templateViewRegistrationInfos(regs, mangle=True):\n             customized = reg.factory.getId()\n         else:\n             attr, pt = findViewletTemplate(reg.factory)\n-            if attr is None:        # skip, if the factory has no template...\n+            if attr is None:  # skip, if the factory has no template...\n                 continue\n             zptfile = pt.filename\n-            zcmlfile = getattr(reg.info, \'file\', None)\n+            zcmlfile = getattr(reg.info, "file", None)\n \n             if mangle:\n                 zptfile = mangleAbsoluteFilename(zptfile)\n@@ -87,52 +89,49 @@ def templateViewRegistrationInfos(regs, mangle=True):\n             name = reg.name or basename(zptfile)\n             customized = None\n         required = [interfaceName(r) for r in reg.required]\n-        required_str = \',\'.join(required)\n-        url = \'@@customizezpt.html?required={0}&view_name={1}\'\n+        required_str = ",".join(required)\n+        url = "@@customizezpt.html?required={0}&view_name={1}"\n         customize_url = url.format(\n             required_str,\n             name,\n         )\n         yield {\n-            \'viewname\': name,\n-            \'required\': required_str,\n-            \'for\': required[0],\n-            \'type\': required[1],\n-            \'zptfile\': zptfile,\n-            \'zcmlfile\': zcmlfile or \'n.a.\',\n-            \'customized\': customized,\n-            \'customize_url\': customize_url,\n+            "viewname": name,\n+            "required": required_str,\n+            "for": required[0],\n+            "type": required[1],\n+            "zptfile": zptfile,\n+            "zcmlfile": zcmlfile or "n.a.",\n+            "customized": customized,\n+            "customize_url": customize_url,\n         }\n \n \n def templateViewRegistrationGroups(regs, mangle=True):\n     ifaces = {}\n     registrations = sorted(\n-        templateViewRegistrationInfos(regs, mangle=mangle),\n-        key=itemgetter(\'viewname\')\n+        templateViewRegistrationInfos(regs, mangle=mangle), key=itemgetter("viewname")\n     )\n     for reg in registrations:\n-        key = reg[\'for\']\n+        key = reg["for"]\n         if key in ifaces:\n-            ifaces[key][\'views\'].append(reg)\n+            ifaces[key]["views"].append(reg)\n         else:\n-            ifaces[key] = {\'name\': key, \'views\': [reg]}\n-    return sorted(ifaces.values(), key=itemgetter(\'name\'))\n+            ifaces[key] = {"name": key, "views": [reg]}\n+    return sorted(ifaces.values(), key=itemgetter("name"))\n \n \n def findTemplateViewRegistration(required, viewname):\n-    required = required.split(\',\')\n+    required = required.split(",")\n     for reg in templateViewRegistrations():\n         if required == [interfaceName(r) for r in reg.required]:\n-            if reg.name == viewname or \\\n-                    reg.provided.isOrExtends(IPortletRenderer):\n+            if reg.name == viewname or reg.provided.isOrExtends(IPortletRenderer):\n                 return reg\n \n \n def generateIdFromRegistration(reg):\n-    return \'{0}-{1}\'.format(\n-        interfaceName(reg.required[0]).lower(),\n-        reg.name or reg.ptname\n+    return "{}-{}".format(\n+        interfaceName(reg.required[0]).lower(), reg.name or reg.ptname\n     )\n \n \n@@ -154,15 +153,15 @@ def getTemplateCodeFromRegistration(reg):\n     attr, template = findViewletTemplate(reg.factory)\n     # TODO: we can\'t do template.read() here because of a bug in\n     # Zope 3\'s ZPT implementation.\n-    with open(template.filename, \'rb\') as template_file:\n+    with open(template.filename, "rb") as template_file:\n         content = template_file.read()\n     return content\n \n \n def getViewPermissionFromRegistration(reg):\n-    permissions = getattr(reg.factory, \'__ac_permissions__\', [])\n+    permissions = getattr(reg.factory, "__ac_permissions__", [])\n     for permission, methods in permissions:\n-        if methods[0] in (\'\', \'__call__\'):\n+        if methods[0] in ("", "__call__"):\n             return permission\n \n \n@@ -177,9 +176,10 @@ def createTTWViewTemplate(reg):\n         text=getTemplateCodeFromRegistration(reg),\n         view=getViewClassFromRegistration(reg),\n         permission=getViewPermissionFromRegistration(reg),\n-        name=ptname)\n+        name=ptname,\n+    )\n     # conserve view name (at least for KSS kssattr-viewname to work\n-    viewzpt.manage_addProperty(\'view_name\', reg.name, \'string\')\n+    viewzpt.manage_addProperty("view_name", reg.name, "string")\n     return viewzpt\n \n \ndiff --git a/plone/app/customerize/registrations.pt b/plone/app/customerize/registrations.pt\nindex 5ffdf77..0dc4dad 100644\n--- a/plone/app/customerize/registrations.pt\n+++ b/plone/app/customerize/registrations.pt\n@@ -1,5 +1,5 @@\n-<h1 tal:replace="structure context/manage_page_header" />\n-<h1 tal:replace="structure context/manage_tabs" />\n+<h1 tal:replace="structure context/manage_page_header"></h1>\n+<h1 tal:replace="structure context/manage_tabs"></h1>\n \n <main class="container-fluid">\n \n@@ -12,44 +12,61 @@\n     }\n   </style>\n \n-<div class="alert alert-danger" role="alert">\n+  <div class="alert alert-danger"\n+       role="alert"\n+  >\n   ATTENTION: beware using this tool.\n-  Errors (e.g. <code>TypeError</code>, <code>Unauthorized</code> etc) may popup if some kinds of\n-  <code>python:</code> expressions are used in the template.\n+  Errors (e.g.\n+    <code>TypeError</code>,\n+    <code>Unauthorized</code>\n+     etc) may popup if some kinds of\n+    <code>python:</code>\n+     expressions are used in the template.\n   This makes it impossible to customize those here (try z3c.jbot or regular zcml overrides instead).\n   The reason is that browser view templates are Chameleon Pagetemplates while items in portal_view_customization are Zope 2 templates.\n   The different security models underlying the two implementations may break rendering of thesite.\n   If that happens just delete the custom copy using the Contents tab above.\n-</div>\n+  </div>\n \n   <p class="form-help">\n     The following list shows all registered (template-based) views\n     sorted by interface. Click one of the links to see the contents\n     of the view template and possibly customize it. Views that already\n-    have been customized are <span class="customized">highlighted like\n-    this</span>.\n+    have been customized are\n+    <span class="customized">highlighted like\n+      this</span>.\n   </p>\n \n   <article tal:repeat="iface python:view.getTemplateViewRegistrations(mangle=False)">\n-    <header tal:content="iface/name" />\n+    <header tal:content="iface/name"></header>\n     <ul>\n       <li tal:repeat="info iface/views">\n-        <a href="" class="customized"\n+        <a class="customized"\n+           href=""\n            tal:condition="info/customized"\n-           tal:attributes="href string:${info/customized}/manage_main;"\n-           tal:content="info/viewname">\n+           tal:content="info/viewname"\n+           tal:attributes="\n+             href string:${info/customized}/manage_main;\n+           "\n+        >\n         </a>\n         <a href=""\n            tal:condition="not: info/customized"\n-           tal:attributes="href info/customize_url;\n-                           title info/zptfile;"\n-           tal:content="info/viewname">\n+           tal:content="info/viewname"\n+           tal:attributes="\n+             href info/customize_url;\n+             title info/zptfile;\n+           "\n+        >\n         </a>\n-        <code tal:content="string:(${info/type})" class="type" /> <br />\n+        <code class="type"\n+              tal:content="string:(${info/type})"\n+        ></code>\n+        <br />\n       </li>\n     </ul>\n   </article>\n \n </main>\n \n-<h1 tal:replace="structure context/manage_page_footer" />\n\\ No newline at end of file\n+<h1 tal:replace="structure context/manage_page_footer"></h1>\ndiff --git a/plone/app/customerize/testing.py b/plone/app/customerize/testing.py\nindex 3497b67..e1ecd29 100644\n--- a/plone/app/customerize/testing.py\n+++ b/plone/app/customerize/testing.py\n@@ -1,28 +1,33 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PloneFixture\n from zope.configuration import xmlconfig\n \n \n class PloneAppCustomerize(PloneFixture):\n-\n     def setUpZCML(self):\n-        super(PloneAppCustomerize, self).setUpZCML()\n+        super().setUpZCML()\n \n         import plone.app.customerize\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.customerize,\n-                       context=self[\'configurationContext\'])\n-        xmlconfig.file(\'testing.zcml\',\n-                       plone.app.customerize.tests,\n-                       context=self[\'configurationContext\'])\n-        xmlconfig.file(\'duplicate_viewlet.zcml\',\n-                       plone.app.customerize.tests,\n-                       context=self[\'configurationContext\'])\n+\n+        xmlconfig.file(\n+            "configure.zcml",\n+            plone.app.customerize,\n+            context=self["configurationContext"],\n+        )\n+        xmlconfig.file(\n+            "testing.zcml",\n+            plone.app.customerize.tests,\n+            context=self["configurationContext"],\n+        )\n+        xmlconfig.file(\n+            "duplicate_viewlet.zcml",\n+            plone.app.customerize.tests,\n+            context=self["configurationContext"],\n+        )\n \n \n PLONE_APP_CUSTOMERIZE_FIXTURE = PloneAppCustomerize()\n PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_CUSTOMERIZE_FIXTURE,),\n-    name=\'PloneAppCustomerize:Functional\',\n+    name="PloneAppCustomerize:Functional",\n )\ndiff --git a/plone/app/customerize/tests/__init__.py b/plone/app/customerize/tests/__init__.py\nindex 51cbb95..027150d 100644\n--- a/plone/app/customerize/tests/__init__.py\n+++ b/plone/app/customerize/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n # make this directory a package\ndiff --git a/plone/app/customerize/tests/duplicate_viewlet.zcml b/plone/app/customerize/tests/duplicate_viewlet.zcml\nindex cab404e..6f59f5a 100644\n--- a/plone/app/customerize/tests/duplicate_viewlet.zcml\n+++ b/plone/app/customerize/tests/duplicate_viewlet.zcml\n@@ -2,13 +2,15 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.customerize">\n+    i18n_domain="plone.app.customerize"\n+    >\n \n   <browser:viewlet\n-    name="layer-test-viewlet"\n-    for="*"\n-    class=".viewlets.LayerViewlet"\n-    layer=".interfaces.IOtherLayer"\n-    permission="zope.Public" />\n+      name="layer-test-viewlet"\n+      for="*"\n+      class=".viewlets.LayerViewlet"\n+      permission="zope.Public"\n+      layer=".interfaces.IOtherLayer"\n+      />\n \n </configure>\ndiff --git a/plone/app/customerize/tests/interfaces.py b/plone/app/customerize/tests/interfaces.py\nindex 10a1165..e959780 100644\n--- a/plone/app/customerize/tests/interfaces.py\n+++ b/plone/app/customerize/tests/interfaces.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IMyLayer(Interface):\n-    """ marker interface for a layer for testing purposes """\n+    """marker interface for a layer for testing purposes"""\n \n \n class IOtherLayer(Interface):\n-    """ marker interface for a second layer for testing purposes """\n+    """marker interface for a second layer for testing purposes"""\ndiff --git a/plone/app/customerize/tests/local.pt b/plone/app/customerize/tests/local.pt\nindex 4f50b0c..4fe3a12 100644\n--- a/plone/app/customerize/tests/local.pt\n+++ b/plone/app/customerize/tests/local.pt\n@@ -1,2 +1,4 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />\n-a local view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />\n+a local view\ndiff --git a/plone/app/customerize/tests/profiles/testing/viewlets.xml b/plone/app/customerize/tests/profiles/testing/viewlets.xml\nindex 48de30f..6368b35 100644\n--- a/plone/app/customerize/tests/profiles/testing/viewlets.xml\n+++ b/plone/app/customerize/tests/profiles/testing/viewlets.xml\n@@ -1,8 +1,13 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <object>\n-  <order manager="plone.portalheader" skinname="Plone Default">\n-    <viewlet name="standard-test-viewlet" insert-after="plone.logo" />\n-    <viewlet name="layer-test-viewlet" insert-after="plone.logo" />\n+  <order manager="plone.portalheader"\n+         skinname="Plone Default"\n+  >\n+    <viewlet insert-after="plone.logo"\n+             name="standard-test-viewlet"\n+    />\n+    <viewlet insert-after="plone.logo"\n+             name="layer-test-viewlet"\n+    />\n   </order>\n </object>\n-\ndiff --git a/plone/app/customerize/tests/standard.pt b/plone/app/customerize/tests/standard.pt\nindex 4fa0ab0..a5443e9 100644\n--- a/plone/app/customerize/tests/standard.pt\n+++ b/plone/app/customerize/tests/standard.pt\n@@ -1,2 +1,4 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />\n-a standard view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />\n+a standard view\ndiff --git a/plone/app/customerize/tests/testBrowserLayers.txt b/plone/app/customerize/tests/testBrowserLayers.txt\nindex 095e8c4..8277a56 100644\n--- a/plone/app/customerize/tests/testBrowserLayers.txt\n+++ b/plone/app/customerize/tests/testBrowserLayers.txt\n@@ -125,7 +125,7 @@ home page and as being customizable:\n    ...<a href="@@customizezpt.html?...view_name=layer-test-viewlet"...\n    ...>layer-test-viewlet</a>...\n    ...<a href="@@customizezpt.html?...view_name=standard-test-viewlet"...\n-   ...>standard-test-viewlet</a>...\'\n+   ...>standard-test-viewlet...</a>...\'\n \n We still need to make sure the local view and viewlet can actually be\n customerized.  First we look at the info page for the view:\n@@ -140,7 +140,7 @@ customerized.  First we look at the info page for the view:\n    ...template file...plone.app.customerize.tests/local.pt...\n    ...zcml file...plone.app.customerize.tests/testing.zcml...\n    ...</dl>...\n-   ...<pre>...a local view</pre>...\'\n+   ...<pre>...a local view...</pre>...\'\n \n We click the "customize" button, enter some new content, and save the changes:\n \n@@ -174,7 +174,7 @@ And now let\'s do the same with a viewlet:\n    ...template file...plone.app.customerize.tests/local.pt...\n    ...zcml file...plone.app.customerize.tests/testing.zcml...\n    ...</dl>...\n-   ...<pre>...a local view</pre>...\'\n+   ...<pre>...a local view...</pre>...\'\n    >>> browser.getControl(\'Customize\').click()\n    >>> browser.url\n    \'http://nohost/plone/portal_view_customizations/zope.interface.interface-layer-test-viewlet/pt_editForm\'\n@@ -206,7 +206,7 @@ of portlet templates).\n    ...template file...plone.app.customerize.tests/standard.pt...\n    ...zcml file...plone.app.customerize.tests/testing.zcml...\n    ...</dl>...\n-   ...<pre>...a standard view</pre>...\'\n+   ...<pre>...a standard view...</pre>...\'\n \n And clean up after ourselves for the sake of later tests:\n \ndiff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py\nindex dd92675..1ee936c 100644\n--- a/plone/app/customerize/tests/testDocTests.py\n+++ b/plone/app/customerize/tests/testDocTests.py\n@@ -1,34 +1,22 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.customerize.testing import (\n-    PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING  # noqa\n+from plone.app.customerize.testing import (  # noqa\n+    PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING,\n )\n from plone.testing import layered\n from unittest import TestSuite\n \n import doctest\n-import re\n-import six\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub(\'NotFound\', \'zExceptions.NotFound\', got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n     suite = TestSuite()\n     OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n-    for testfile in (\'testBrowserLayers.txt\', \'testCustomizeView.txt\'):\n+    for testfile in ("testBrowserLayers.txt", "testCustomizeView.txt"):\n         suite.addTest(\n             layered(\n                 doctest.DocFileSuite(\n                     testfile,\n                     optionflags=OPTIONFLAGS,\n-                    package=\'plone.app.customerize.tests\',\n-                    checker=Py23DocChecker(),\n+                    package="plone.app.customerize.tests",\n                 ),\n                 layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING,\n             )\ndiff --git a/plone/app/customerize/tests/testing.zcml b/plone/app/customerize/tests/testing.zcml\nindex 21526bd..a584d0d 100644\n--- a/plone/app/customerize/tests/testing.zcml\n+++ b/plone/app/customerize/tests/testing.zcml\n@@ -3,48 +3,54 @@\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone.app.customerize">\n+    i18n_domain="plone.app.customerize"\n+    >\n \n   <genericsetup:registerProfile\n-    name="testing"\n-    title="Tests for local browser layer support"\n-    directory="profiles/testing"\n-    description=""\n-    provides="Products.GenericSetup.interfaces.EXTENSION" />\n+      name="testing"\n+      title="Tests for local browser layer support"\n+      description=""\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/testing"\n+      />\n \n   <!-- register a portlet to demonstrate issue #8275 -->\n   <plone:portlet\n-    name="portlets.Login"\n-    interface="plone.app.portlets.portlets.login.ILoginPortlet"\n-    assignment="plone.app.portlets.portlets.login.Assignment"\n-    renderer="plone.app.portlets.portlets.login.Renderer"\n-    addview="plone.app.portlets.portlets.login.AddForm"\n-    />\n+      name="portlets.Login"\n+      interface="plone.app.portlets.portlets.login.ILoginPortlet"\n+      assignment="plone.app.portlets.portlets.login.Assignment"\n+      renderer="plone.app.portlets.portlets.login.Renderer"\n+      addview="plone.app.portlets.portlets.login.AddForm"\n+      />\n \n   <browser:page\n-    name="standard-test-view"\n-    for="*"\n-    template="standard.pt"\n-    permission="zope.Public" />\n+      name="standard-test-view"\n+      for="*"\n+      template="standard.pt"\n+      permission="zope.Public"\n+      />\n \n   <browser:page\n-    name="layer-test-view"\n-    for="*"\n-    layer=".interfaces.IMyLayer"\n-    template="local.pt"\n-    permission="zope.Public" />\n+      name="layer-test-view"\n+      for="*"\n+      template="local.pt"\n+      permission="zope.Public"\n+      layer=".interfaces.IMyLayer"\n+      />\n \n   <browser:viewlet\n-    name="standard-test-viewlet"\n-    for="*"\n-    class=".viewlets.StandardViewlet"\n-    permission="zope.Public" />\n+      name="standard-test-viewlet"\n+      for="*"\n+      class=".viewlets.StandardViewlet"\n+      permission="zope.Public"\n+      />\n \n   <browser:viewlet\n-    name="layer-test-viewlet"\n-    for="*"\n-    class=".viewlets.LayerViewlet"\n-    layer=".interfaces.IMyLayer"\n-    permission="zope.Public" />\n+      name="layer-test-viewlet"\n+      for="*"\n+      class=".viewlets.LayerViewlet"\n+      permission="zope.Public"\n+      layer=".interfaces.IMyLayer"\n+      />\n \n </configure>\ndiff --git a/plone/app/customerize/tests/viewlets.py b/plone/app/customerize/tests/viewlets.py\nindex 96e14c1..3013bd9 100644\n--- a/plone/app/customerize/tests/viewlets.py\n+++ b/plone/app/customerize/tests/viewlets.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \n \n class StandardViewlet(ViewletBase):\n-    """ a viewlet class for testing purposes """\n+    """a viewlet class for testing purposes"""\n \n-    render = ViewPageTemplateFile(\'standard.pt\')\n+    render = ViewPageTemplateFile("standard.pt")\n \n \n class LayerViewlet(ViewletBase):\n-    """ a viewlet class for testing purposes """\n+    """a viewlet class for testing purposes"""\n \n-    render = ViewPageTemplateFile(\'local.pt\')\n+    render = ViewPageTemplateFile("local.pt")\ndiff --git a/plone/app/customerize/tool.py b/plone/app/customerize/tool.py\nindex dbeb642..261c541 100644\n--- a/plone/app/customerize/tool.py\n+++ b/plone/app/customerize/tool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from five.customerize.interfaces import IViewTemplateContainer\n@@ -9,24 +8,24 @@\n \n @implementer(IViewTemplateContainer)\n class ViewTemplateContainer(Folder):\n-    """ a local utility storing all ttw view templates provided\n-        by five.customerize in a folder """\n+    """a local utility storing all ttw view templates provided\n+    by five.customerize in a folder"""\n \n-    id = \'portal_view_customizations\'\n-    title = \'Manages view customizations\'\n-    meta_type = \'Plone View Customizations\'\n+    id = "portal_view_customizations"\n+    title = "Manages view customizations"\n+    meta_type = "Plone View Customizations"\n \n     security = ClassSecurityInfo()\n \n     manage_options = (\n-        (dict(label=\'Registrations\', action=\'registrations.html\'),) +\n-        Folder.manage_options[0:1] +\n-        Folder.manage_options[2:]\n+        (dict(label="Registrations", action="registrations.html"),)\n+        + Folder.manage_options[0:1]\n+        + Folder.manage_options[2:]\n     )\n \n     @security.protected(ManagePortal)\n     def addTemplate(self, id, template):\n-        """ add the given ttw view template to the container """\n+        """add the given ttw view template to the container"""\n         self._setObject(id, template)\n         return getattr(self, id)\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 15a5001..9eca15e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,69 +1,67 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'1.3.13.dev0\'\n+version = "1.3.13.dev0"\n \n setup(\n-    name=\'plone.app.customerize\',\n+    name="plone.app.customerize",\n     version=version,\n-    description=\'Integrate five.customerize into Plone.\',\n-    long_description=open(\'README.rst\').read() + \'\\n\' +\n-    open(\'CHANGES.rst\').read(),\n+    description="Integrate five.customerize into Plone.",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n-        \'Framework :: Zope :: 4\',\n-        \'Framework :: Zope :: 5\',\n-        \'Intended Audience :: Other Audience\',\n-        \'Intended Audience :: System Administrators\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n-        \'Topic :: Internet :: WWW/HTTP :: Site Management\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.0",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n+        "Intended Audience :: Other Audience",\n+        "Intended Audience :: System Administrators",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Topic :: Internet :: WWW/HTTP :: Site Management",\n     ],\n-    keywords=\'customerize plone views page templates zmi\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.customerize/\',\n-    license=\'GPL version 2\',\n+    keywords="customerize plone views page templates zmi",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.customerize/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n-            \'plone.app.layout\',\n-            \'plone.app.testing\',\n-            \'six\',\n-            \'zope.testing\',\n+            "Products.GenericSetup",\n+            "plone.app.layout",\n+            "plone.app.testing",\n+            "plone.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'five.customerize\',\n-        \'plone.browserlayer\',\n-        \'plone.portlets\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.viewlet\',\n-        \'Products.CMFCore\',\n-        \'Acquisition\',\n-        \'Zope2\',\n+        "setuptools",\n+        "five.customerize",\n+        "plone.browserlayer",\n+        "plone.portlets",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.viewlet",\n+        "Products.CMFCore",\n+        "Acquisition",\n     ],\n-    platforms=\'Any\',\n+    platforms="Any",\n     zip_safe=False,\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8274373\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,54 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.customerize {posargs}\n+extras =\n+    test\n'

