Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/ba49e2af378f343d3a37607840a9e3522310b7bc

put image scales into metadata

Files changed:
A Products/CMFPlone/image_scales/__init__.py
A Products/CMFPlone/image_scales/adapters.py
A Products/CMFPlone/image_scales/configure.zcml
A Products/CMFPlone/image_scales/indexer.py
A Products/CMFPlone/image_scales/interfaces.py
M Products/CMFPlone/configure.zcml
M Products/CMFPlone/profiles/default/catalog.xml

b'diff --git a/Products/CMFPlone/configure.zcml b/Products/CMFPlone/configure.zcml\nindex 96a76b4c51..80804657d8 100644\n--- a/Products/CMFPlone/configure.zcml\n+++ b/Products/CMFPlone/configure.zcml\n@@ -80,6 +80,9 @@\n   <include file="profiles.zcml"/>\n   <include file="catalog.zcml" />\n \n+  <!-- images scales poc -->\n+  <include package=".image_scales" />\n+\n   <cmf:registerDirectory\n       name="skins"\n       directory="skins"\ndiff --git a/Products/CMFPlone/image_scales/__init__.py b/Products/CMFPlone/image_scales/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nnew file mode 100644\nindex 0000000000..ff6ebdc4b1\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -0,0 +1,155 @@\n+from zope.globalrequest import getRequest\n+from plone.namedfile.interfaces import INamedImageField\n+from Acquisition import aq_inner\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.utils import iterSchemata\n+from plone.restapi.serializer.converters import json_compatible\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import queryMultiAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.schema import getFields\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.security.interfaces import IPermission\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n+from Products.CMFPlone.interfaces import IImagingSchema\n+\n+\n+@implementer(IImageScalesAdapter)\n+@adapter(IDexterityContent, Interface)\n+class ImageScales:\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self):\n+        obj = aq_inner(self.context)\n+        res = {}\n+\n+        for schema in iterSchemata(self.context):\n+            for name, field in getFields(schema).items():\n+                # serialize the field\n+                serializer = queryMultiAdapter(\n+                    (field, obj, self.request), IImageScalesFieldAdapter\n+                )\n+                if serializer:\n+                    scales = serializer()\n+                    if scales:\n+                        res[json_compatible(name)] = scales\n+        return res\n+\n+\n+@implementer(IImageScalesFieldAdapter)\n+@adapter(INamedImageField, IDexterityContent, Interface)\n+class ImageFieldScales:\n+    def __init__(self, field, context, request):\n+        self.context = context\n+        self.request = request\n+        self.field = field\n+\n+    def __call__(self):\n+        image = self.field.get(self.context)\n+        if not image:\n+            return\n+\n+        width, height = image.getImageSize()\n+\n+        url = self.get_original_image_url(self.field.__name__, width, height)\n+\n+        scales = self.get_scales(self.field, width, height)\n+        result = {\n+            "filename": image.filename,\n+            "content-type": image.contentType,\n+            "size": image.getSize(),\n+            "download": url,\n+            "width": width,\n+            "height": height,\n+            "scales": scales,\n+        }\n+        return json_compatible(result)\n+\n+    def get_scales(self, field, width, height):\n+        """Get a dictionary of available scales for a particular image field,\n+        with the actual dimensions (aspect ratio of the original image).\n+        """\n+        scales = {}\n+        request = getRequest()\n+        images_view = getMultiAdapter((self.context, request), name="images")\n+\n+        for name, actual_width, actual_height in self.get_scale_infos():\n+            # Try first with scale name\n+            scale = images_view.scale(field.__name__, scale=name)\n+            if scale is None:\n+                # Sometimes it fails, but we can create it\n+                # using scale sizes\n+                scale = images_view.scale(\n+                    field.__name__, width=actual_width, height=actual_height\n+                )\n+\n+            if scale is None:\n+                # If we still can\'t get a scale, it\'s probably a corrupt image\n+                continue\n+\n+            url = scale.url\n+            actual_width = scale.width\n+            actual_height = scale.height\n+\n+            scales[name] = {\n+                "download": url,\n+                "width": actual_width,\n+                "height": actual_height,\n+            }\n+\n+        return scales\n+\n+    def get_original_image_url(self, fieldname, width, height):\n+        request = getRequest()\n+        images_view = getMultiAdapter((self.context, request), name="images")\n+        scale = images_view.scale(\n+            fieldname, width=width, height=height, direction="thumbnail"\n+        )\n+        if scale:\n+            return scale.url\n+        # Corrupt images may not have a scale.\n+\n+    def get_actual_scale(self, dimensions, bbox):\n+        """Given dimensions of an original image, and a bounding box of a scale,\n+        calculates what actual dimensions that scaled image would have,\n+        maintaining aspect ratio.\n+\n+        This is supposed to emulate / predict the behavior of Plone\'s\n+        ImageScaling implementations.\n+        """\n+        width, height = dimensions\n+        max_width, max_height = bbox\n+        resize_ratio = min(max_width / width, max_height / height)\n+\n+        # Plone doesn\'t upscale images for the default named scales - limit\n+        # to actual image dimensions\n+        resize_ratio = min(resize_ratio, 1.0)\n+\n+        scaled_dimensions = int(width * resize_ratio), int(height * resize_ratio)\n+\n+        # Don\'t produce zero pixel lengths\n+        scaled_dimensions = tuple(max(1, dim) for dim in scaled_dimensions)\n+        return scaled_dimensions\n+\n+    def get_scale_infos(self):\n+        """Returns a list of (name, width, height) 3-tuples of the\n+        available image scales.\n+        """\n+\n+        registry = getUtility(IRegistry)\n+\n+        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n+        allowed_sizes = imaging_settings.allowed_sizes\n+\n+        def split_scale_info(allowed_size):\n+            name, dims = allowed_size.split(" ")\n+            width, height = list(map(int, dims.split(":")))\n+            return name, width, height\n+\n+        return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/Products/CMFPlone/image_scales/configure.zcml b/Products/CMFPlone/image_scales/configure.zcml\nnew file mode 100644\nindex 0000000000..2b0f1f50a5\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/configure.zcml\n@@ -0,0 +1,15 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n+\n+  <!-- indexer -->\n+  <adapter\n+      factory=".indexer.image_scales"\n+      name="image_scales"\n+      />\n+  \n+  <!-- adapters -->\n+  <adapter factory=".adapters.ImageScales" />\n+  <adapter factory=".adapters.ImageFieldScales" />\n+\n+</configure>\ndiff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nnew file mode 100644\nindex 0000000000..06d47ef809\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -0,0 +1,33 @@\n+from Acquisition import aq_base\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.indexer.decorator import indexer\n+from plone.volto.behaviors.preview import IPreview\n+from persistent.dict import PersistentDict\n+from zope.globalrequest import getRequest\n+from plone.namedfile.interfaces import INamedImageField\n+from Acquisition import aq_inner\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.utils import iterSchemata\n+from plone.restapi.serializer.converters import json_compatible\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import queryMultiAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.schema import getFields\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n+\n+\n+@indexer(IDexterityContent)\n+def image_scales(obj):\n+    """\n+    Indexer used to store in metadata the image scales of the object.\n+    """\n+    base_obj = aq_base(obj)\n+    request = getRequest()\n+    data = PersistentDict()\n+    adapter = queryMultiAdapter((obj, request), IImageScalesAdapter)\n+    scales = adapter()\n+    return PersistentDict(scales)\ndiff --git a/Products/CMFPlone/image_scales/interfaces.py b/Products/CMFPlone/image_scales/interfaces.py\nnew file mode 100644\nindex 0000000000..02d6b1bb92\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/interfaces.py\n@@ -0,0 +1,24 @@\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n+\n+class IImageScalesAdapter(Interface):\n+    """\n+    Return a list of image scales for the given context\n+    """\n+\n+    def __init__(context, request):\n+        """Adapts context and the request."""\n+\n+    def __call__():\n+        """ """\n+\n+\n+class IImageScalesFieldAdapter(Interface):\n+    """ """\n+\n+    def __init__(field, context, request):\n+        """Adapts field, context and request."""\n+\n+    def __call__():\n+        """Returns JSON compatible python data."""\ndiff --git a/Products/CMFPlone/profiles/default/catalog.xml b/Products/CMFPlone/profiles/default/catalog.xml\nindex ebab330d9f..51ab0fbaa6 100644\n--- a/Products/CMFPlone/profiles/default/catalog.xml\n+++ b/Products/CMFPlone/profiles/default/catalog.xml\n@@ -127,6 +127,7 @@\n  <column value="getObjSize"/>\n  <column value="getRemoteUrl"/>\n  <column value="id"/>\n+ <column value="image_scales"/>\n  <column value="is_folderish"/>\n  <column value="listCreators"/>\n  <column value="location"/>\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2d73df202a64ae9e7ca017ae6ad38b403605c7c0

fix adapters and add tests

Files changed:
A Products/CMFPlone/image_scales/tests/__init__.py
A Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/tests/testContentTypeScripts.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex ff6ebdc4b1..c4b5e1c758 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -3,7 +3,6 @@\n from Acquisition import aq_inner\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n-from plone.restapi.serializer.converters import json_compatible\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n@@ -38,7 +37,7 @@ def __call__(self):\n                 if serializer:\n                     scales = serializer()\n                     if scales:\n-                        res[json_compatible(name)] = scales\n+                        res[name] = scales\n         return res\n \n \n@@ -60,7 +59,7 @@ def __call__(self):\n         url = self.get_original_image_url(self.field.__name__, width, height)\n \n         scales = self.get_scales(self.field, width, height)\n-        result = {\n+        return {\n             "filename": image.filename,\n             "content-type": image.contentType,\n             "size": image.getSize(),\n@@ -69,7 +68,6 @@ def __call__(self):\n             "height": height,\n             "scales": scales,\n         }\n-        return json_compatible(result)\n \n     def get_scales(self, field, width, height):\n         """Get a dictionary of available scales for a particular image field,\ndiff --git a/Products/CMFPlone/image_scales/tests/__init__.py b/Products/CMFPlone/image_scales/tests/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nnew file mode 100644\nindex 0000000000..e3b57cee2e\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -0,0 +1,87 @@\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from Products.CMFPlone.tests import dummy\n+from zope.component import queryMultiAdapter\n+from plone.namedfile.file import NamedImage\n+from plone.dexterity.utils import iterSchemata\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n+from zope.interface.interfaces import ComponentLookupError\n+\n+import unittest\n+\n+\n+class ImageScalesAdaptersRegisteredTest(unittest.TestCase):\n+    """Test portal actions control panel."""\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        news_id = self.portal.invokeFactory(\n+            "News Item",\n+            id="news",\n+            title="News",\n+        )\n+\n+        image_id = self.portal.invokeFactory(\n+            "Image",\n+            id="image",\n+            title="image",\n+            image=NamedImage(dummy.Image()),\n+        )\n+\n+        self.image = self.portal[image_id]\n+        self.news = self.portal[news_id]\n+\n+    def serialize(self, context, fieldname):\n+        for schema in iterSchemata(context):\n+            if fieldname in schema:\n+                field = schema.get(fieldname)\n+                break\n+        serializer = queryMultiAdapter(\n+            (field, context, self.request), IImageScalesFieldAdapter\n+        )\n+        if serializer:\n+            return serializer()\n+        return None\n+\n+    def test_field_adapter_do_not_return_scales_for_fields_without_adapter(self):\n+        data = self.serialize(self.image, "title")\n+        self.assertEqual(data, None)\n+\n+    def test_field_adapter_return_scales_for_fields_with_adapter(self):\n+        data = self.serialize(self.image, "image")\n+        self.assertNotEqual(data, None)\n+        self.assertEqual(data["content-type"], "image/gif")\n+        self.assertIn("scales", data)\n+\n+    def test_field_adapter_do_not_return_scales_for_empty_fields_with_adapter(self):\n+        data = self.serialize(self.news, "image")\n+        self.assertEqual(data, None)\n+\n+    def test_content_adapter_return_proper_scales(self):\n+        data = queryMultiAdapter((self.image, self.request), IImageScalesAdapter)()\n+        self.assertNotEqual(data, None)\n+        self.assertEqual(list(data.keys()), ["image"])\n+        self.assertEqual(data["image"]["content-type"], "image/gif")\n+        self.assertIn("scales", data["image"])\n+\n+    def test_content_adapter_do_not_return_scales_if_empty_fields(self):\n+        data = queryMultiAdapter((self.news, self.request), IImageScalesAdapter)()\n+        self.assertEqual(data, {})\n+\n+    def test_metadata_populated_with_scales(self):\n+        catalog = self.portal.portal_catalog\n+        news_brain = catalog(UID=self.news.UID())[0]\n+        image_brain = catalog(UID=self.image.UID())[0]\n+\n+        self.assertEqual(news_brain.image_scales, {})\n+\n+        self.assertEqual(list(image_brain.image_scales.keys()), ["image"])\n+        self.assertEqual(image_brain.image_scales["image"]["content-type"], "image/gif")\n+        self.assertIn("scales", image_brain.image_scales["image"])\ndiff --git a/Products/CMFPlone/tests/testContentTypeScripts.py b/Products/CMFPlone/tests/testContentTypeScripts.py\nindex 325238d92a..0a0b5207c6 100644\n--- a/Products/CMFPlone/tests/testContentTypeScripts.py\n+++ b/Products/CMFPlone/tests/testContentTypeScripts.py\n@@ -5,72 +5,74 @@\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests import dummy\n \n-AddPortalTopics = \'Add portal topics\'\n+AddPortalTopics = "Add portal topics"\n \n \n class TestContentTypeScripts(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n-        perms = self.getPermissionsOfRole(\'Member\')\n-        self.setPermissions(perms + [AddPortalTopics], \'Member\')\n+        perms = self.getPermissionsOfRole("Member")\n+        self.setPermissions(perms + [AddPortalTopics], "Member")\n         self.request = self.app.REQUEST\n \n     def getPermissionsOfRole(self, role):\n         perms = self.portal.permissionsOfRole(role)\n-        return [p[\'name\'] for p in perms if p[\'selected\']]\n+        return [p["name"] for p in perms if p["selected"]]\n \n     def testDocumentCreate(self):\n-        self.folder.invokeFactory(\n-            \'Document\', id=\'doc\', text=RichTextValue(\'data\'))\n-        self.assertEqual(self.folder.doc.text.raw, \'data\')\n-        self.assertEqual(self.folder.doc.Format(), \'text/html\')\n+        self.folder.invokeFactory("Document", id="doc", text=RichTextValue("data"))\n+        self.assertEqual(self.folder.doc.text.raw, "data")\n+        self.assertEqual(self.folder.doc.Format(), "text/html")\n \n     def testEventCreate(self):\n-        self.folder.invokeFactory(\'Event\', id=\'event\',\n-                                  title=\'Foo\',\n-                                  start=datetime(year=2003, month=9, day=18),\n-                                  end=datetime(year=2003, month=9, day=19))\n-        self.assertEqual(self.folder.event.Title(), \'Foo\')\n-        self.assertTrue(self.folder.event.start.isoformat()\n-                            .startswith(\'2003-09-18T00:00:00\'))\n-        self.assertTrue(self.folder.event.end.isoformat()\n-                            .startswith(\'2003-09-19T00:00:00\'))\n+        self.folder.invokeFactory(\n+            "Event",\n+            id="event",\n+            title="Foo",\n+            start=datetime(year=2003, month=9, day=18),\n+            end=datetime(year=2003, month=9, day=19),\n+        )\n+        self.assertEqual(self.folder.event.Title(), "Foo")\n+        self.assertTrue(\n+            self.folder.event.start.isoformat().startswith("2003-09-18T00:00:00")\n+        )\n+        self.assertTrue(\n+            self.folder.event.end.isoformat().startswith("2003-09-19T00:00:00")\n+        )\n \n     def testFileCreate(self):\n-        self.folder.invokeFactory(\n-            \'File\', id=\'file\', file=NamedFile(dummy.File()))\n+        self.folder.invokeFactory("File", id="file", file=NamedFile(dummy.File()))\n         self.assertEqual(self.folder.file.file.data, dummy.TEXT)\n \n     def testImageCreate(self):\n-        self.folder.invokeFactory(\n-            \'Image\', id=\'image\', image=NamedImage(dummy.Image()))\n+        self.folder.invokeFactory("Image", id="image", image=NamedImage(dummy.Image()))\n         self.assertEqual(self.folder.image.image.data, dummy.GIF)\n \n     def testFolderCreate(self):\n-        self.folder.invokeFactory(\'Folder\', id=\'folder\', title=\'Foo\',\n-                                  description=\'Bar\')\n-        self.assertEqual(self.folder.folder.Title(), \'Foo\')\n-        self.assertEqual(self.folder.folder.Description(), \'Bar\')\n+        self.folder.invokeFactory("Folder", id="folder", title="Foo", description="Bar")\n+        self.assertEqual(self.folder.folder.Title(), "Foo")\n+        self.assertEqual(self.folder.folder.Description(), "Bar")\n \n     def testLinkCreate(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remoteUrl=\'http://foo.com\', title=\'Foo\')\n-        self.assertEqual(self.folder.link.Title(), \'Foo\')\n-        self.assertEqual(self.folder.link.remoteUrl, \'http://foo.com\')\n+        self.folder.invokeFactory(\n+            "Link", id="link", remoteUrl="http://foo.com", title="Foo"\n+        )\n+        self.assertEqual(self.folder.link.Title(), "Foo")\n+        self.assertEqual(self.folder.link.remoteUrl, "http://foo.com")\n \n     def testNewsItemCreate(self):\n-        self.folder.invokeFactory(\'News Item\', id=\'newsitem\',\n-                                  text=RichTextValue(\'data\'), title=\'Foo\')\n-        self.assertEqual(self.folder.newsitem.text.raw, \'data\')\n-        self.assertEqual(self.folder.newsitem.Title(), \'Foo\')\n+        self.folder.invokeFactory(\n+            "News Item", id="newsitem", text=RichTextValue("data"), title="Foo"\n+        )\n+        self.assertEqual(self.folder.newsitem.text.raw, "data")\n+        self.assertEqual(self.folder.newsitem.Title(), "Foo")\n \n     # Bug tests\n \n     def test_listMetaTypes(self):\n-        self.folder.invokeFactory(\'Document\', id=\'doc\')\n+        self.folder.invokeFactory("Document", id="doc")\n         tool = self.portal.plone_utils\n         doc = self.folder.doc\n-        doc.setTitle(\'title\')\n+        doc.setTitle("title")\n         tool.listMetaTags(doc)\n         # TODO: atm it checks only of the script can be called w/o an error\n \n@@ -81,15 +83,12 @@ class TestFileURL(PloneTestCase.PloneTestCase):\n     # NOTABUG: This is how urlparse.urlparse() works.\n \n     def testFileURLWithHost(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remoteUrl=\'file://foo.com/baz.txt\')\n-        self.assertEqual(self.folder.link.remoteUrl,\n-                         \'file://foo.com/baz.txt\')\n+        self.folder.invokeFactory("Link", id="link", remoteUrl="file://foo.com/baz.txt")\n+        self.assertEqual(self.folder.link.remoteUrl, "file://foo.com/baz.txt")\n \n     def testFileURLNoHost(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remoteUrl=\'file:///foo.txt\')\n-        self.assertEqual(self.folder.link.remoteUrl, \'file:///foo.txt\')\n+        self.folder.invokeFactory("Link", id="link", remoteUrl="file:///foo.txt")\n+        self.assertEqual(self.folder.link.remoteUrl, "file:///foo.txt")\n \n     # DX does not pass url trough urlparse/urlunparse like setRemoteUrl does.\n     # def testFileURLFourSlash(self):\n@@ -115,17 +114,13 @@ def testFileURLNoHost(self):\n \n \n class TestImageProps(PloneTestCase.PloneTestCase):\n-\n     def testImageComputedProps(self):\n         from OFS.Image import Image\n+\n         tag = Image.tag\n-        kw = {\'_title\': \'some title\',\n-              \'_alt\': \'alt tag\',\n-              \'height\': 100,\n-              \'width\': 100}\n+        kw = {"_title": "some title", "_alt": "alt tag", "height": 100, "width": 100}\n         # Wrap object so that ComputedAttribute gets executed.\n         self.ob = dummy.ImageComputedProps(**kw).__of__(self.folder)\n \n-        endswith = (\'alt="alt tag" title="some title" \'\n-                    \'height="100" width="100" />\')\n-        self.assertEqual(tag(self.ob)[-len(endswith):], endswith)\n+        endswith = \'alt="alt tag" title="some title" \' \'height="100" width="100" />\'\n+        self.assertEqual(tag(self.ob)[-len(endswith) :], endswith)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/d9e1cb097fa4fe6657780f985d33c1cfadb05a9d

fix imports and how to get scale url

Files changed:
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/indexer.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex c4b5e1c758..07ad94a4b0 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -91,7 +91,7 @@ def get_scales(self, field, width, height):\n                 # If we still can\'t get a scale, it\'s probably a corrupt image\n                 continue\n \n-            url = scale.url\n+            url = self.get_scale_url(scale=scale)\n             actual_width = scale.width\n             actual_height = scale.height\n \n@@ -110,7 +110,7 @@ def get_original_image_url(self, fieldname, width, height):\n             fieldname, width=width, height=height, direction="thumbnail"\n         )\n         if scale:\n-            return scale.url\n+            return self.get_scale_url(scale=scale)\n         # Corrupt images may not have a scale.\n \n     def get_actual_scale(self, dimensions, bbox):\n@@ -151,3 +151,8 @@ def split_scale_info(allowed_size):\n             return name, width, height\n \n         return [split_scale_info(size) for size in allowed_sizes]\n+\n+    def get_scale_url(self, scale):\n+        return "{portal_url}{scale_url}".format(\n+            portal_url=self.context.portal_url(), scale_url=scale.url\n+        )\ndiff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nindex 06d47ef809..1a57380722 100644\n--- a/Products/CMFPlone/image_scales/indexer.py\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -1,23 +1,10 @@\n from Acquisition import aq_base\n-from plone.dexterity.interfaces import IDexterityContent\n-from plone.indexer.decorator import indexer\n-from plone.volto.behaviors.preview import IPreview\n from persistent.dict import PersistentDict\n-from zope.globalrequest import getRequest\n-from plone.namedfile.interfaces import INamedImageField\n-from Acquisition import aq_inner\n from plone.dexterity.interfaces import IDexterityContent\n-from plone.dexterity.utils import iterSchemata\n-from plone.restapi.serializer.converters import json_compatible\n-from zope.component import adapter\n-from zope.component import getMultiAdapter\n-from zope.component import queryMultiAdapter\n-from zope.interface import implementer\n-from zope.interface import Interface\n-from zope.schema import getFields\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n+from plone.indexer.decorator import indexer\n from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n+from zope.component import queryMultiAdapter\n+from zope.globalrequest import getRequest\n \n \n @indexer(IDexterityContent)\n@@ -25,9 +12,8 @@ def image_scales(obj):\n     """\n     Indexer used to store in metadata the image scales of the object.\n     """\n-    base_obj = aq_base(obj)\n-    request = getRequest()\n-    data = PersistentDict()\n-    adapter = queryMultiAdapter((obj, request), IImageScalesAdapter)\n+    adapter = queryMultiAdapter((aq_base(obj), getRequest()), IImageScalesAdapter)\n+    if not adapter:\n+        return PersistentDict()\n     scales = adapter()\n     return PersistentDict(scales)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/0b9c760b3f0fb5432ff6640256bbe4c88635f574

cleanup code

Files changed:
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/indexer.py
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 07ad94a4b0..5037b3c2ba 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -11,7 +11,6 @@\n from zope.schema import getFields\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n-from zope.security.interfaces import IPermission\n from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n from Products.CMFPlone.interfaces import IImagingSchema\n@@ -59,15 +58,17 @@ def __call__(self):\n         url = self.get_original_image_url(self.field.__name__, width, height)\n \n         scales = self.get_scales(self.field, width, height)\n-        return {\n-            "filename": image.filename,\n-            "content-type": image.contentType,\n-            "size": image.getSize(),\n-            "download": url,\n-            "width": width,\n-            "height": height,\n-            "scales": scales,\n-        }\n+        return [\n+            {\n+                "filename": image.filename,\n+                "content-type": image.contentType,\n+                "size": image.getSize(),\n+                "download": url,\n+                "width": width,\n+                "height": height,\n+                "scales": scales,\n+            }\n+        ]\n \n     def get_scales(self, field, width, height):\n         """Get a dictionary of available scales for a particular image field,\n@@ -153,6 +154,4 @@ def split_scale_info(allowed_size):\n         return [split_scale_info(size) for size in allowed_sizes]\n \n     def get_scale_url(self, scale):\n-        return "{portal_url}{scale_url}".format(\n-            portal_url=self.context.portal_url(), scale_url=scale.url\n-        )\n+        return scale.url\ndiff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nindex 1a57380722..e0ca4b7bca 100644\n--- a/Products/CMFPlone/image_scales/indexer.py\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -12,7 +12,7 @@ def image_scales(obj):\n     """\n     Indexer used to store in metadata the image scales of the object.\n     """\n-    adapter = queryMultiAdapter((aq_base(obj), getRequest()), IImageScalesAdapter)\n+    adapter = queryMultiAdapter((obj, getRequest()), IImageScalesAdapter)\n     if not adapter:\n         return PersistentDict()\n     scales = adapter()\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex e3b57cee2e..e48a5dc320 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -51,29 +51,33 @@ def serialize(self, context, fieldname):\n         return None\n \n     def test_field_adapter_do_not_return_scales_for_fields_without_adapter(self):\n-        data = self.serialize(self.image, "title")\n-        self.assertEqual(data, None)\n+        res = self.serialize(self.image, "title")\n+        self.assertEqual(res, None)\n \n     def test_field_adapter_return_scales_for_fields_with_adapter(self):\n-        data = self.serialize(self.image, "image")\n-        self.assertNotEqual(data, None)\n-        self.assertEqual(data["content-type"], "image/gif")\n-        self.assertIn("scales", data)\n+        res = self.serialize(self.image, "image")\n+        self.assertNotEqual(res, None)\n+        self.assertEqual(len(res), 1)\n+        scales = res[0]\n+        self.assertEqual(scales["content-type"], "image/gif")\n+        self.assertIn("scales", scales)\n \n     def test_field_adapter_do_not_return_scales_for_empty_fields_with_adapter(self):\n-        data = self.serialize(self.news, "image")\n-        self.assertEqual(data, None)\n+        res = self.serialize(self.news, "image")\n+        self.assertEqual(res, None)\n \n     def test_content_adapter_return_proper_scales(self):\n-        data = queryMultiAdapter((self.image, self.request), IImageScalesAdapter)()\n-        self.assertNotEqual(data, None)\n-        self.assertEqual(list(data.keys()), ["image"])\n-        self.assertEqual(data["image"]["content-type"], "image/gif")\n-        self.assertIn("scales", data["image"])\n+        res = queryMultiAdapter((self.image, self.request), IImageScalesAdapter)()\n+        self.assertNotEqual(res, None)\n+        self.assertEqual(list(res.keys()), ["image"])\n+        self.assertEqual(len(res["image"]), 1)\n+        scales = res["image"][0]\n+        self.assertEqual(scales["content-type"], "image/gif")\n+        self.assertIn("scales", scales)\n \n     def test_content_adapter_do_not_return_scales_if_empty_fields(self):\n-        data = queryMultiAdapter((self.news, self.request), IImageScalesAdapter)()\n-        self.assertEqual(data, {})\n+        res = queryMultiAdapter((self.news, self.request), IImageScalesAdapter)()\n+        self.assertEqual(res, {})\n \n     def test_metadata_populated_with_scales(self):\n         catalog = self.portal.portal_catalog\n@@ -81,7 +85,9 @@ def test_metadata_populated_with_scales(self):\n         image_brain = catalog(UID=self.image.UID())[0]\n \n         self.assertEqual(news_brain.image_scales, {})\n-\n         self.assertEqual(list(image_brain.image_scales.keys()), ["image"])\n-        self.assertEqual(image_brain.image_scales["image"]["content-type"], "image/gif")\n-        self.assertIn("scales", image_brain.image_scales["image"])\n+        self.assertEqual(len(image_brain.image_scales["image"]), 1)\n+        self.assertEqual(\n+            image_brain.image_scales["image"][0]["content-type"], "image/gif"\n+        )\n+        self.assertIn("scales", image_brain.image_scales["image"][0])\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/9b60ef698d9472b8e23b6e265893afae74957871

fix import

Files changed:
M Products/CMFPlone/image_scales/indexer.py

b'diff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nindex e0ca4b7bca..665b803e7c 100644\n--- a/Products/CMFPlone/image_scales/indexer.py\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -1,4 +1,3 @@\n-from Acquisition import aq_base\n from persistent.dict import PersistentDict\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/6250d676b546df11c94dad3d6cbfa8673f2af601

image_scales: use width and height directly instead of trying scale name first.

If we pass the scale name, then plone.namedfile would look in the registry for this scale
and get the width and height from there.  We have already done this, so it would be double work.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 5037b3c2ba..bef4a1aa13 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -79,17 +79,11 @@ def get_scales(self, field, width, height):\n         images_view = getMultiAdapter((self.context, request), name="images")\n \n         for name, actual_width, actual_height in self.get_scale_infos():\n-            # Try first with scale name\n-            scale = images_view.scale(field.__name__, scale=name)\n+            scale = images_view.scale(\n+                field.__name__, width=actual_width, height=actual_height\n+            )\n             if scale is None:\n-                # Sometimes it fails, but we can create it\n-                # using scale sizes\n-                scale = images_view.scale(\n-                    field.__name__, width=actual_width, height=actual_height\n-                )\n-\n-            if scale is None:\n-                # If we still can\'t get a scale, it\'s probably a corrupt image\n+                # If we cannot get a scale, it is probably a corrupt image.\n                 continue\n \n             url = self.get_scale_url(scale=scale)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/deb228659951ddcfc675a4ad59f92c938cec30cf

image_scales: use new pre=True parameter for scaling without scaling.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex bef4a1aa13..fcf7006e8d 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -79,8 +79,14 @@ def get_scales(self, field, width, height):\n         images_view = getMultiAdapter((self.context, request), name="images")\n \n         for name, actual_width, actual_height in self.get_scale_infos():\n+            # Get the scale info without actually generating the scale,\n+            # nor any old-style HiDPI scales.\n             scale = images_view.scale(\n-                field.__name__, width=actual_width, height=actual_height\n+                field.__name__,\n+                width=actual_width,\n+                height=actual_height,\n+                pre=True,\n+                include_srcset=False,\n             )\n             if scale is None:\n                 # If we cannot get a scale, it is probably a corrupt image.\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/87e4c209e25d6b6f578273a342d9345a004df5c1

image_scales: do not use getRequest: we already have the request.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex fcf7006e8d..c88048d2a3 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -1,4 +1,3 @@\n-from zope.globalrequest import getRequest\n from plone.namedfile.interfaces import INamedImageField\n from Acquisition import aq_inner\n from plone.dexterity.interfaces import IDexterityContent\n@@ -75,8 +74,7 @@ def get_scales(self, field, width, height):\n         with the actual dimensions (aspect ratio of the original image).\n         """\n         scales = {}\n-        request = getRequest()\n-        images_view = getMultiAdapter((self.context, request), name="images")\n+        images_view = getMultiAdapter((self.context, self.request), name="images")\n \n         for name, actual_width, actual_height in self.get_scale_infos():\n             # Get the scale info without actually generating the scale,\n@@ -105,8 +103,7 @@ def get_scales(self, field, width, height):\n         return scales\n \n     def get_original_image_url(self, fieldname, width, height):\n-        request = getRequest()\n-        images_view = getMultiAdapter((self.context, request), name="images")\n+        images_view = getMultiAdapter((self.context, self.request), name="images")\n         scale = images_view.scale(\n             fieldname, width=width, height=height, direction="thumbnail"\n         )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/82ab34cf350a64eb3b6ab057f224ab982702f5a9

image_scales: move _split_scale_info out of its parent function.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex c88048d2a3..10264170a0 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -39,6 +39,12 @@ def __call__(self):\n         return res\n \n \n+def _split_scale_info(allowed_size):\n+    name, dims = allowed_size.split(" ")\n+    width, height = list(map(int, dims.split(":")))\n+    return name, width, height\n+\n+\n @implementer(IImageScalesFieldAdapter)\n @adapter(INamedImageField, IDexterityContent, Interface)\n class ImageFieldScales:\n@@ -143,12 +149,7 @@ def get_scale_infos(self):\n         imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n         allowed_sizes = imaging_settings.allowed_sizes\n \n-        def split_scale_info(allowed_size):\n-            name, dims = allowed_size.split(" ")\n-            width, height = list(map(int, dims.split(":")))\n-            return name, width, height\n-\n-        return [split_scale_info(size) for size in allowed_sizes]\n+        return [_split_scale_info(size) for size in allowed_sizes]\n \n     def get_scale_url(self, scale):\n         return scale.url\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/25be495a2aa13c45eae92f80c8776547fb2d440f

image_scales indexer: do not return a PersistentDict when it is empty.

Files changed:
M Products/CMFPlone/image_scales/indexer.py

b'diff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nindex 665b803e7c..76be5773c6 100644\n--- a/Products/CMFPlone/image_scales/indexer.py\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -13,6 +13,8 @@ def image_scales(obj):\n     """\n     adapter = queryMultiAdapter((obj, getRequest()), IImageScalesAdapter)\n     if not adapter:\n-        return PersistentDict()\n+        return\n     scales = adapter()\n+    if not scales:\n+        return\n     return PersistentDict(scales)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c3d696644fa05eae7946df13f548669325c1e290

image_scales: do not request scales larger than the original.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 10264170a0..6b14013104 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -58,6 +58,9 @@ def __call__(self):\n         if not image:\n             return\n \n+        # Get the @@images view once and store it, so all methods can use it.\n+        self.images_view = getMultiAdapter((self.context, self.request), name="images")\n+\n         width, height = image.getImageSize()\n \n         url = self.get_original_image_url(self.field.__name__, width, height)\n@@ -80,12 +83,17 @@ def get_scales(self, field, width, height):\n         with the actual dimensions (aspect ratio of the original image).\n         """\n         scales = {}\n-        images_view = getMultiAdapter((self.context, self.request), name="images")\n \n         for name, actual_width, actual_height in self.get_scale_infos():\n+            if actual_width > width:\n+                # The width of the scale is larger than the original width.\n+                # Scaling would simply return the original (or perhaps a copy\n+                # with the same size).  We do not need this scale.\n+                continue\n+\n             # Get the scale info without actually generating the scale,\n             # nor any old-style HiDPI scales.\n-            scale = images_view.scale(\n+            scale = self.images_view.scale(\n                 field.__name__,\n                 width=actual_width,\n                 height=actual_height,\n@@ -109,8 +117,7 @@ def get_scales(self, field, width, height):\n         return scales\n \n     def get_original_image_url(self, fieldname, width, height):\n-        images_view = getMultiAdapter((self.context, self.request), name="images")\n-        scale = images_view.scale(\n+        scale = self.images_view.scale(\n             fieldname, width=width, height=height, direction="thumbnail"\n         )\n         if scale:\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/56d00d106ca38ce3041745a116199f6c5bc9133d

image_scales: removed unused get_actual_scale method.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 6b14013104..d2703082d4 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -124,27 +124,6 @@ def get_original_image_url(self, fieldname, width, height):\n             return self.get_scale_url(scale=scale)\n         # Corrupt images may not have a scale.\n \n-    def get_actual_scale(self, dimensions, bbox):\n-        """Given dimensions of an original image, and a bounding box of a scale,\n-        calculates what actual dimensions that scaled image would have,\n-        maintaining aspect ratio.\n-\n-        This is supposed to emulate / predict the behavior of Plone\'s\n-        ImageScaling implementations.\n-        """\n-        width, height = dimensions\n-        max_width, max_height = bbox\n-        resize_ratio = min(max_width / width, max_height / height)\n-\n-        # Plone doesn\'t upscale images for the default named scales - limit\n-        # to actual image dimensions\n-        resize_ratio = min(resize_ratio, 1.0)\n-\n-        scaled_dimensions = int(width * resize_ratio), int(height * resize_ratio)\n-\n-        # Don\'t produce zero pixel lengths\n-        scaled_dimensions = tuple(max(1, dim) for dim in scaled_dimensions)\n-        return scaled_dimensions\n \n     def get_scale_infos(self):\n         """Returns a list of (name, width, height) 3-tuples of the\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T17:45:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/f2762293b8f0f472c056203706924ab656fc92de

image_scales: let indexer raise an AttributeError.

Apparently that is the best way when nothing should be saved.

Files changed:
M Products/CMFPlone/image_scales/indexer.py

b'diff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nindex 76be5773c6..eb4f5a865f 100644\n--- a/Products/CMFPlone/image_scales/indexer.py\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -13,8 +13,10 @@ def image_scales(obj):\n     """\n     adapter = queryMultiAdapter((obj, getRequest()), IImageScalesAdapter)\n     if not adapter:\n-        return\n+        # Raising an AttributeError does the right thing,\n+        # making sure nothing is saved in the catalog.\n+        raise AttributeError\n     scales = adapter()\n     if not scales:\n-        return\n+        raise AttributeError\n     return PersistentDict(scales)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T18:07:06+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/f82c0d8861280c66d9f4ef91ce460d6c2db7c963

Fixed image scales test: we get Missing.Value now.

Files changed:
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py

b'diff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex e48a5dc320..049e6c0264 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -10,6 +10,7 @@\n from zope.interface.interfaces import ComponentLookupError\n \n import unittest\n+import Missing\n \n \n class ImageScalesAdaptersRegisteredTest(unittest.TestCase):\n@@ -84,7 +85,7 @@ def test_metadata_populated_with_scales(self):\n         news_brain = catalog(UID=self.news.UID())[0]\n         image_brain = catalog(UID=self.image.UID())[0]\n \n-        self.assertEqual(news_brain.image_scales, {})\n+        self.assertEqual(news_brain.image_scales, Missing.Value)\n         self.assertEqual(list(image_brain.image_scales.keys()), ["image"])\n         self.assertEqual(len(image_brain.image_scales["image"]), 1)\n         self.assertEqual(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T18:08:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/36e00a682d66621b3960b7da9dbe365c6ce996c5

image scales metadata: isort, black, flake8

Files changed:
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/interfaces.py
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex d2703082d4..b8658e2205 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -1,18 +1,18 @@\n-from plone.namedfile.interfaces import INamedImageField\n from Acquisition import aq_inner\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n+from plone.namedfile.interfaces import INamedImageField\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n+from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n+from Products.CMFPlone.interfaces import IImagingSchema\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema import getFields\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n-from Products.CMFPlone.interfaces import IImagingSchema\n \n \n @implementer(IImageScalesAdapter)\n@@ -124,7 +124,6 @@ def get_original_image_url(self, fieldname, width, height):\n             return self.get_scale_url(scale=scale)\n         # Corrupt images may not have a scale.\n \n-\n     def get_scale_infos(self):\n         """Returns a list of (name, width, height) 3-tuples of the\n         available image scales.\ndiff --git a/Products/CMFPlone/image_scales/interfaces.py b/Products/CMFPlone/image_scales/interfaces.py\nindex 02d6b1bb92..8b6a2a0756 100644\n--- a/Products/CMFPlone/image_scales/interfaces.py\n+++ b/Products/CMFPlone/image_scales/interfaces.py\n@@ -1,4 +1,3 @@\n-from zope.interface import Attribute\n from zope.interface import Interface\n \n \ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex 049e6c0264..f5519f35dc 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -1,16 +1,15 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n-from Products.CMFPlone.tests import dummy\n-from zope.component import queryMultiAdapter\n-from plone.namedfile.file import NamedImage\n from plone.dexterity.utils import iterSchemata\n+from plone.namedfile.file import NamedImage\n from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n-from zope.interface.interfaces import ComponentLookupError\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from Products.CMFPlone.tests import dummy\n+from zope.component import queryMultiAdapter\n \n-import unittest\n import Missing\n+import unittest\n \n \n class ImageScalesAdaptersRegisteredTest(unittest.TestCase):\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T18:23:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/321a9d6f85c6541756a8aa227426ec2814e5e681

image scales metadata: made _get_scale_infos a separate function.

We should put this in plone.base really: plone.formwidget.namedfile and plone.restapi have their own copy.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex b8658e2205..49c878036a 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -45,6 +45,14 @@ def _split_scale_info(allowed_size):\n     return name, width, height\n \n \n+def _get_scale_infos():\n+    """Returns list of (name, width, height) of the available image scales."""\n+    registry = getUtility(IRegistry)\n+    imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n+    allowed_sizes = imaging_settings.allowed_sizes\n+    return [_split_scale_info(size) for size in allowed_sizes]\n+\n+\n @implementer(IImageScalesFieldAdapter)\n @adapter(INamedImageField, IDexterityContent, Interface)\n class ImageFieldScales:\n@@ -84,7 +92,7 @@ def get_scales(self, field, width, height):\n         """\n         scales = {}\n \n-        for name, actual_width, actual_height in self.get_scale_infos():\n+        for name, actual_width, actual_height in _get_scale_infos():\n             if actual_width > width:\n                 # The width of the scale is larger than the original width.\n                 # Scaling would simply return the original (or perhaps a copy\n@@ -124,17 +132,5 @@ def get_original_image_url(self, fieldname, width, height):\n             return self.get_scale_url(scale=scale)\n         # Corrupt images may not have a scale.\n \n-    def get_scale_infos(self):\n-        """Returns a list of (name, width, height) 3-tuples of the\n-        available image scales.\n-        """\n-\n-        registry = getUtility(IRegistry)\n-\n-        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n-        allowed_sizes = imaging_settings.allowed_sizes\n-\n-        return [_split_scale_info(size) for size in allowed_sizes]\n-\n     def get_scale_url(self, scale):\n         return scale.url\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T18:23:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/3021734f38df1add20ce69158c8198a3e8d5733d

image scales metadata: we do not need a get_scale_url method.

At least I do not see a use case for overriding this.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 49c878036a..cd8379dbda 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -112,7 +112,7 @@ def get_scales(self, field, width, height):\n                 # If we cannot get a scale, it is probably a corrupt image.\n                 continue\n \n-            url = self.get_scale_url(scale=scale)\n+            url = scale.url\n             actual_width = scale.width\n             actual_height = scale.height\n \n@@ -128,9 +128,5 @@ def get_original_image_url(self, fieldname, width, height):\n         scale = self.images_view.scale(\n             fieldname, width=width, height=height, direction="thumbnail"\n         )\n-        if scale:\n-            return self.get_scale_url(scale=scale)\n         # Corrupt images may not have a scale.\n-\n-    def get_scale_url(self, scale):\n-        return scale.url\n+        return scale.url if scale else None\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T18:23:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/fcaef30066d247c6b6e271c2137e3fd63eb8df43

image scales metadata: pass pre and include_srcset for original

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex cd8379dbda..b169411764 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -126,7 +126,12 @@ def get_scales(self, field, width, height):\n \n     def get_original_image_url(self, fieldname, width, height):\n         scale = self.images_view.scale(\n-            fieldname, width=width, height=height, direction="thumbnail"\n+            fieldname,\n+            width=width,\n+            height=height,\n+            direction="thumbnail",\n+            pre=True,\n+            include_srcset=False,\n         )\n         # Corrupt images may not have a scale.\n         return scale.url if scale else None\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-10T19:13:35+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/aaa207c3706f0d30ebd07cfdd412400bb9d3b294

image scales metadata: try to add a test with an FTI with multiple images.

But I cannot get Plone to find my fields when iterating over the schemata.
Maybe do this via a GenericSetup profile instead?
But something along the lines of what I try here should work.

Files changed:
A Products/CMFPlone/image_scales/tests/images.xml
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex b169411764..3cf2c931fc 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -25,7 +25,8 @@ def __init__(self, context, request):\n     def __call__(self):\n         obj = aq_inner(self.context)\n         res = {}\n-\n+        # if obj.getId() == "multi":\n+        #     breakpoint()\n         for schema in iterSchemata(self.context):\n             for name, field in getFields(schema).items():\n                 # serialize the field\ndiff --git a/Products/CMFPlone/image_scales/tests/images.xml b/Products/CMFPlone/image_scales/tests/images.xml\nnew file mode 100644\nindex 0000000000..abbc74ece0\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/tests/images.xml\n@@ -0,0 +1,12 @@\n+<model xmlns="http://namespaces.plone.org/supermodel/schema"\n+       xmlns:marshal="http://namespaces.plone.org/supermodel/marshal">\n+  <schema>\n+    <field name="image1" type="plone.namedfile.field.NamedBlobImage"\n+        marshal:primary="true">\n+      <title>Image 1</title>\n+    </field>\n+    <field name="image1" type="plone.namedfile.field.NamedBlobImage">\n+      <title>Image 2</title>\n+    </field>\n+  </schema>\n+</model>\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex f5519f35dc..8f1e79f774 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -1,17 +1,38 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.autoform.interfaces import IFormFieldProvider\n+from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.utils import iterSchemata\n+from plone.namedfile.field import NamedBlobImage\n from plone.namedfile.file import NamedImage\n+from plone.supermodel import model\n from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from Products.CMFPlone.tests import dummy\n from zope.component import queryMultiAdapter\n+from zope.interface import Interface\n+from zope.interface import provider\n \n import Missing\n import unittest\n \n \n+# XXX Neither model.Schema not Interface seem to work for me.\n+@provider(IFormFieldProvider)\n+class ITwoImages(model.Schema):\n+    # class ITwoImages(Interface):\n+    image1 = NamedBlobImage(\n+        title="First image",\n+        required=False,\n+    )\n+\n+    image2 = NamedBlobImage(\n+        title="Second image",\n+        required=False,\n+    )\n+\n+\n class ImageScalesAdaptersRegisteredTest(unittest.TestCase):\n     """Test portal actions control panel."""\n \n@@ -91,3 +112,24 @@ def test_metadata_populated_with_scales(self):\n             image_brain.image_scales["image"][0]["content-type"], "image/gif"\n         )\n         self.assertIn("scales", image_brain.image_scales["image"][0])\n+\n+    def test_multiple_image_fields(self):\n+        fti = DexterityFTI(\n+            "multi",\n+            # XXX Neither of these two work: no fields are found in the\n+            # image scales adapter.\n+            # schema="Products.CMFPlone.image_scales.tests.ITwoImages",\n+            model_file="Products.CMFPlone.image_scales.tests:images.xml",\n+        )\n+        self.portal.portal_types._setObject("multi", fti)\n+        content_id = self.portal.invokeFactory(\n+            "multi",\n+            id="multi",\n+            title="Multi",\n+            image1=NamedImage(dummy.Image()),\n+            image2=NamedImage(dummy.Image()),\n+        )\n+        multi = self.portal[content_id]\n+        catalog = self.portal.portal_catalog\n+        brain = catalog(UID=multi.UID())[0]\n+        self.assertEqual(sorted(list(brain.image_scales.keys())), ["image1", "image2"])\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-11T19:56:20+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/3efa4b8439036c3178532e758a1b776cb188837e

image scales metadata: fixed field name in tests

Files changed:
M Products/CMFPlone/image_scales/tests/images.xml

b'diff --git a/Products/CMFPlone/image_scales/tests/images.xml b/Products/CMFPlone/image_scales/tests/images.xml\nindex abbc74ece0..c12dcb4a1e 100644\n--- a/Products/CMFPlone/image_scales/tests/images.xml\n+++ b/Products/CMFPlone/image_scales/tests/images.xml\n@@ -5,7 +5,7 @@\n         marshal:primary="true">\n       <title>Image 1</title>\n     </field>\n-    <field name="image1" type="plone.namedfile.field.NamedBlobImage">\n+    <field name="image2" type="plone.namedfile.field.NamedBlobImage">\n       <title>Image 2</title>\n     </field>\n   </schema>\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-13T10:25:12+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c1e973e6ea492ba5faffea0ff6e0180a44008dd6

image scales metadata: fixed setting model_file on FTI.

We to make model_source None then.  Thanks @1letter!
See https://github.com/plone/Products.CMFPlone/commit/aaa207c3706f0d30ebd07cfdd412400bb9d3b294#commitcomment-75923707

Files changed:
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 3cf2c931fc..bf656b3e6e 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -25,8 +25,6 @@ def __init__(self, context, request):\n     def __call__(self):\n         obj = aq_inner(self.context)\n         res = {}\n-        # if obj.getId() == "multi":\n-        #     breakpoint()\n         for schema in iterSchemata(self.context):\n             for name, field in getFields(schema).items():\n                 # serialize the field\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex 8f1e79f774..47a4d841e2 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -1,38 +1,18 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.utils import iterSchemata\n-from plone.namedfile.field import NamedBlobImage\n from plone.namedfile.file import NamedImage\n-from plone.supermodel import model\n from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from Products.CMFPlone.tests import dummy\n from zope.component import queryMultiAdapter\n-from zope.interface import Interface\n-from zope.interface import provider\n \n import Missing\n import unittest\n \n \n-# XXX Neither model.Schema not Interface seem to work for me.\n-@provider(IFormFieldProvider)\n-class ITwoImages(model.Schema):\n-    # class ITwoImages(Interface):\n-    image1 = NamedBlobImage(\n-        title="First image",\n-        required=False,\n-    )\n-\n-    image2 = NamedBlobImage(\n-        title="Second image",\n-        required=False,\n-    )\n-\n-\n class ImageScalesAdaptersRegisteredTest(unittest.TestCase):\n     """Test portal actions control panel."""\n \n@@ -114,12 +94,13 @@ def test_metadata_populated_with_scales(self):\n         self.assertIn("scales", image_brain.image_scales["image"][0])\n \n     def test_multiple_image_fields(self):\n+        # Note: since there are basically three ways to set fields on an FTI, we use\n+        # one, and make the others explicitly None, otherwise no fields may be found.\n         fti = DexterityFTI(\n             "multi",\n-            # XXX Neither of these two work: no fields are found in the\n-            # image scales adapter.\n-            # schema="Products.CMFPlone.image_scales.tests.ITwoImages",\n             model_file="Products.CMFPlone.image_scales.tests:images.xml",\n+            model_source=None,\n+            schema=None,\n         )\n         self.portal.portal_types._setObject("multi", fti)\n         content_id = self.portal.invokeFactory(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-13T11:06:24+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/a7f3e958d1c502f02c1c3765af5ccb952a8412d5

image scales metadata: test that only smaller scales are created.

Asking for the huge scale on a 900x900 image would just return the same 900x900 image.

Files changed:
A Products/CMFPlone/tests/900.jpg
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py
M Products/CMFPlone/tests/dummy.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex bf656b3e6e..28fb4f5ad9 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -96,6 +96,8 @@ def get_scales(self, field, width, height):\n                 # The width of the scale is larger than the original width.\n                 # Scaling would simply return the original (or perhaps a copy\n                 # with the same size).  We do not need this scale.\n+                # If we *do* want this, we should call the scale method with\n+                # mode="cover", so it scales up.\n                 continue\n \n             # Get the scale info without actually generating the scale,\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex 47a4d841e2..0050f5da08 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -33,7 +33,7 @@ def setUp(self):\n             "Image",\n             id="image",\n             title="image",\n-            image=NamedImage(dummy.Image()),\n+            image=NamedImage(dummy.Image(), filename="dummy.gif"),\n         )\n \n         self.image = self.portal[image_id]\n@@ -61,12 +61,51 @@ def test_field_adapter_return_scales_for_fields_with_adapter(self):\n         self.assertEqual(len(res), 1)\n         scales = res[0]\n         self.assertEqual(scales["content-type"], "image/gif")\n+        self.assertEqual(scales["filename"], "dummy.gif")\n         self.assertIn("scales", scales)\n+        scales = scales["scales"]\n+        self.assertIn("listing", scales)\n+        listing_scale = scales["listing"]\n+        self.assertIn("download", listing_scale)\n \n     def test_field_adapter_do_not_return_scales_for_empty_fields_with_adapter(self):\n         res = self.serialize(self.news, "image")\n         self.assertEqual(res, None)\n \n+    def test_field_adapter_does_not_return_larger_scales(self):\n+        # Add an image of 900 by 900 pixels.\n+        image_id = self.portal.invokeFactory(\n+            "Image",\n+            id="jpeg",\n+            title="jpeg image",\n+            image=NamedImage(dummy.JpegImage(), filename="900.jpeg"),\n+        )\n+        image = self.portal[image_id]\n+        res = self.serialize(image, "image")\n+        self.assertNotEqual(res, None)\n+        self.assertEqual(len(res), 1)\n+        scales = res[0]\n+        self.assertEqual(scales["content-type"], "image/jpeg")\n+        self.assertIn("scales", scales)\n+        self.assertEqual(scales["filename"], "900.jpeg")\n+        self.assertEqual(scales["width"], 900)\n+        self.assertEqual(scales["height"], 900)\n+        download = scales["download"]\n+        images_url = image.absolute_url() + "/@@images"\n+        self.assertTrue(download.startswith(f"{images_url}/image-900-"))\n+        self.assertTrue(download.endswith(".jpeg"))\n+        scales = scales["scales"]\n+        # larger and huge should not be in here: these scales would return the same\n+        # content as the original.\n+        self.assertEqual(\n+            ["icon", "large", "listing", "mini", "preview", "teaser", "thumb", "tile"],\n+            sorted(scales.keys()),\n+        )\n+        preview = scales["preview"]\n+        self.assertEqual(preview["width"], 400)\n+        self.assertEqual(preview["height"], 400)\n+        self.assertTrue(preview["download"].startswith(f"{images_url}/image-400-"))\n+\n     def test_content_adapter_return_proper_scales(self):\n         res = queryMultiAdapter((self.image, self.request), IImageScalesAdapter)()\n         self.assertNotEqual(res, None)\ndiff --git a/Products/CMFPlone/tests/900.jpg b/Products/CMFPlone/tests/900.jpg\nnew file mode 100644\nindex 0000000000..e9ef7dbb1a\nBinary files /dev/null and b/Products/CMFPlone/tests/900.jpg differ\ndiff --git a/Products/CMFPlone/tests/dummy.py b/Products/CMFPlone/tests/dummy.py\nindex 0ea980fb65..e80bf009b4 100644\n--- a/Products/CMFPlone/tests/dummy.py\n+++ b/Products/CMFPlone/tests/dummy.py\n@@ -20,6 +20,11 @@\n     os.path.dirname(__file__), os.pardir, \'tool.gif\')\n with open(GIF_FILE, \'rb\') as f:\n     GIF = f.read()\n+# jpeg file of 900x900 pixels\n+JPEG_FILE = os.path.join(\n+    os.path.dirname(__file__), \'900.jpg\')\n+with open(JPEG_FILE, \'rb\') as f:\n+    JPEG = f.read()\n \n \n class Dummy:\n@@ -105,6 +110,15 @@ class Image(File):\n     data = GIF\n \n \n+class JpegImage(File):\n+    """Dummy jpeg image upload object\n+\n+    900 by 900 pixels.\n+    """\n+    filename = "900.jpeg"\n+    data = JPEG\n+\n+\n class Folder(SimpleFolder):\n     \'\'\'Dummy Folder\n        First-class Zope object. Can be _setObject\'ed.\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-15T17:23:18+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/52e6972b027c95baa9c8086408db4cb954a95c8c

Document why the adapter returns a list of one dictionary.

Files changed:
M Products/CMFPlone/image_scales/adapters.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex 28fb4f5ad9..aeb2778b27 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -67,12 +67,16 @@ def __call__(self):\n \n         # Get the @@images view once and store it, so all methods can use it.\n         self.images_view = getMultiAdapter((self.context, self.request), name="images")\n-\n         width, height = image.getImageSize()\n-\n         url = self.get_original_image_url(self.field.__name__, width, height)\n-\n         scales = self.get_scales(self.field, width, height)\n+\n+        # Return a list with one dictionary.  Why a list?\n+        # Some people feel a need in custom code to support a different adapter for\n+        # RelationList fields.  Such a field may point to three images.\n+        # In that case the adapter could return information for all three images,\n+        # so a list of three dictionaries.  The default case should use the same\n+        # structure.\n         return [\n             {\n                 "filename": image.filename,\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-15T17:25:44+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7ee8d93c4ee9d5fe4e4eedf347c337e55ba49c3c

Add news snippet.

Files changed:
A news/3521.feature

b'diff --git a/news/3521.feature b/news/3521.feature\nnew file mode 100644\nindex 0000000000..9f409c60cd\n--- /dev/null\n+++ b/news/3521.feature\n@@ -0,0 +1,2 @@\n+Add ``image_scales`` to catalog metadata.\n+[cekk, maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-22T00:56:50+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/82eacfa9aee51dc00f106284c371621c4dc236e7

Image scales: moved interfaces to plone.base and IImageScalesFieldAdapter to plone.namedfile.

Files changed:
M Products/CMFPlone/image_scales/adapters.py
M Products/CMFPlone/image_scales/configure.zcml
M Products/CMFPlone/image_scales/indexer.py
M Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py
D Products/CMFPlone/image_scales/interfaces.py

b'diff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nindex aeb2778b27..6fc7230b48 100644\n--- a/Products/CMFPlone/image_scales/adapters.py\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -1,14 +1,9 @@\n from Acquisition import aq_inner\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n-from plone.namedfile.interfaces import INamedImageField\n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n-from Products.CMFPlone.interfaces import IImagingSchema\n+from plone.base.interfaces import IImageScalesAdapter\n+from plone.base.interfaces import IImageScalesFieldAdapter\n from zope.component import adapter\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -36,107 +31,3 @@ def __call__(self):\n                     if scales:\n                         res[name] = scales\n         return res\n-\n-\n-def _split_scale_info(allowed_size):\n-    name, dims = allowed_size.split(" ")\n-    width, height = list(map(int, dims.split(":")))\n-    return name, width, height\n-\n-\n-def _get_scale_infos():\n-    """Returns list of (name, width, height) of the available image scales."""\n-    registry = getUtility(IRegistry)\n-    imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n-    allowed_sizes = imaging_settings.allowed_sizes\n-    return [_split_scale_info(size) for size in allowed_sizes]\n-\n-\n-@implementer(IImageScalesFieldAdapter)\n-@adapter(INamedImageField, IDexterityContent, Interface)\n-class ImageFieldScales:\n-    def __init__(self, field, context, request):\n-        self.context = context\n-        self.request = request\n-        self.field = field\n-\n-    def __call__(self):\n-        image = self.field.get(self.context)\n-        if not image:\n-            return\n-\n-        # Get the @@images view once and store it, so all methods can use it.\n-        self.images_view = getMultiAdapter((self.context, self.request), name="images")\n-        width, height = image.getImageSize()\n-        url = self.get_original_image_url(self.field.__name__, width, height)\n-        scales = self.get_scales(self.field, width, height)\n-\n-        # Return a list with one dictionary.  Why a list?\n-        # Some people feel a need in custom code to support a different adapter for\n-        # RelationList fields.  Such a field may point to three images.\n-        # In that case the adapter could return information for all three images,\n-        # so a list of three dictionaries.  The default case should use the same\n-        # structure.\n-        return [\n-            {\n-                "filename": image.filename,\n-                "content-type": image.contentType,\n-                "size": image.getSize(),\n-                "download": url,\n-                "width": width,\n-                "height": height,\n-                "scales": scales,\n-            }\n-        ]\n-\n-    def get_scales(self, field, width, height):\n-        """Get a dictionary of available scales for a particular image field,\n-        with the actual dimensions (aspect ratio of the original image).\n-        """\n-        scales = {}\n-\n-        for name, actual_width, actual_height in _get_scale_infos():\n-            if actual_width > width:\n-                # The width of the scale is larger than the original width.\n-                # Scaling would simply return the original (or perhaps a copy\n-                # with the same size).  We do not need this scale.\n-                # If we *do* want this, we should call the scale method with\n-                # mode="cover", so it scales up.\n-                continue\n-\n-            # Get the scale info without actually generating the scale,\n-            # nor any old-style HiDPI scales.\n-            scale = self.images_view.scale(\n-                field.__name__,\n-                width=actual_width,\n-                height=actual_height,\n-                pre=True,\n-                include_srcset=False,\n-            )\n-            if scale is None:\n-                # If we cannot get a scale, it is probably a corrupt image.\n-                continue\n-\n-            url = scale.url\n-            actual_width = scale.width\n-            actual_height = scale.height\n-\n-            scales[name] = {\n-                "download": url,\n-                "width": actual_width,\n-                "height": actual_height,\n-            }\n-\n-        return scales\n-\n-    def get_original_image_url(self, fieldname, width, height):\n-        scale = self.images_view.scale(\n-            fieldname,\n-            width=width,\n-            height=height,\n-            direction="thumbnail",\n-            pre=True,\n-            include_srcset=False,\n-        )\n-        # Corrupt images may not have a scale.\n-        return scale.url if scale else None\ndiff --git a/Products/CMFPlone/image_scales/configure.zcml b/Products/CMFPlone/image_scales/configure.zcml\nindex 2b0f1f50a5..623a9fb12d 100644\n--- a/Products/CMFPlone/image_scales/configure.zcml\n+++ b/Products/CMFPlone/image_scales/configure.zcml\n@@ -7,9 +7,8 @@\n       factory=".indexer.image_scales"\n       name="image_scales"\n       />\n-  \n+\n   <!-- adapters -->\n   <adapter factory=".adapters.ImageScales" />\n-  <adapter factory=".adapters.ImageFieldScales" />\n \n </configure>\ndiff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nindex eb4f5a865f..2c4c9c20be 100644\n--- a/Products/CMFPlone/image_scales/indexer.py\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -1,7 +1,7 @@\n from persistent.dict import PersistentDict\n+from plone.base.interfaces import IImageScalesAdapter\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n \ndiff --git a/Products/CMFPlone/image_scales/interfaces.py b/Products/CMFPlone/image_scales/interfaces.py\ndeleted file mode 100644\nindex 8b6a2a0756..0000000000\n--- a/Products/CMFPlone/image_scales/interfaces.py\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-from zope.interface import Interface\n-\n-\n-class IImageScalesAdapter(Interface):\n-    """\n-    Return a list of image scales for the given context\n-    """\n-\n-    def __init__(context, request):\n-        """Adapts context and the request."""\n-\n-    def __call__():\n-        """ """\n-\n-\n-class IImageScalesFieldAdapter(Interface):\n-    """ """\n-\n-    def __init__(field, context, request):\n-        """Adapts field, context and request."""\n-\n-    def __call__():\n-        """Returns JSON compatible python data."""\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nindex 0050f5da08..be656d06ba 100644\n--- a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -3,8 +3,8 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.utils import iterSchemata\n from plone.namedfile.file import NamedImage\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesAdapter\n-from Products.CMFPlone.image_scales.interfaces import IImageScalesFieldAdapter\n+from plone.base.interfaces import IImageScalesAdapter\n+from plone.base.interfaces import IImageScalesFieldAdapter\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from Products.CMFPlone.tests import dummy\n from zope.component import queryMultiAdapter\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-22T01:48:51+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/b5eb1bee0567283eb7af95f2904e9dc493ebdeba

Merge remote-tracking branch 'origin/master' into image_scales_metadata

Files changed:
A news/3477.feature
M Products/CMFPlone/PasswordResetTool.py
M Products/CMFPlone/browser/static/plone-logo.svg
M Products/CMFPlone/patterns/settings.py
M Products/CMFPlone/tests/browser_collection_views.txt

b'diff --git a/Products/CMFPlone/PasswordResetTool.py b/Products/CMFPlone/PasswordResetTool.py\nindex d15ecc7b20..2f5f74e4e2 100644\n--- a/Products/CMFPlone/PasswordResetTool.py\n+++ b/Products/CMFPlone/PasswordResetTool.py\n@@ -176,7 +176,7 @@ def clearExpired(self, days=0):\n         Parameter controls how many days past expired it must be to disappear.\n         """\n         now = datetime.datetime.utcnow()\n-        for key, record in self._requests.items():\n+        for key, record in list(self._requests.items()):\n             stored_user, expiry = record\n             if self.expired(expiry, now - datetime.timedelta(days=days)):\n                 del self._requests[key]\ndiff --git a/Products/CMFPlone/browser/static/plone-logo.svg b/Products/CMFPlone/browser/static/plone-logo.svg\nindex 32b3772726..e49aaa3a25 100644\n--- a/Products/CMFPlone/browser/static/plone-logo.svg\n+++ b/Products/CMFPlone/browser/static/plone-logo.svg\n@@ -3,22 +3,22 @@\n <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n <svg version="1.1" id="plone-logo" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="215px" height="56px" viewBox="0 0 158.253 40.686" enable-background="new 0 0 158.253 40.686" xml:space="preserve">\n <g>\n-\t<path fill="#0095D3" d="M65.327,23.208h-6.589v11.388h-4.393V5.638h10.981c5.653,0,9.271,3.742,9.271,8.785   S70.979,23.208,65.327,23.208z M65.082,9.583h-6.345v9.639h6.345c3.05,0,5.124-1.749,5.124-4.799   C70.206,11.372,68.132,9.583,65.082,9.583z"/>\n-\t<path fill="#0095D3" d="M83.969,34.596c-3.904,0-5.652-2.644-5.652-5.693V5.638h4.148v23.021c0,1.587,0.567,2.399,2.235,2.399h1.83   v3.538H83.969z"/>\n-\t<path fill="#0095D3" d="M104.762,32.399c-1.344,1.384-3.377,2.44-6.184,2.44c-2.805,0-4.799-1.058-6.141-2.44   c-1.951-2.032-2.439-4.637-2.439-8.134c0-3.457,0.488-6.061,2.439-8.094c1.342-1.383,3.336-2.44,6.141-2.44   c2.807,0,4.84,1.059,6.184,2.44c1.951,2.033,2.439,4.637,2.439,8.094C107.203,27.763,106.713,30.366,104.762,32.399z    M101.629,18.613c-0.773-0.773-1.83-1.181-3.051-1.181c-1.219,0-2.236,0.406-3.01,1.181c-1.26,1.261-1.422,3.416-1.422,5.652   s0.162,4.393,1.422,5.653c0.773,0.771,1.791,1.22,3.01,1.22c1.221,0,2.277-0.447,3.051-1.22c1.262-1.262,1.424-3.417,1.424-5.653   S102.891,19.873,101.629,18.613z"/>\n-\t<path fill="#0095D3" d="M123.643,34.596V22.029c0-3.214-1.83-4.597-4.147-4.597s-4.271,1.423-4.271,4.597v12.566h-4.147v-20.62   h4.065v2.074c1.425-1.546,3.416-2.318,5.49-2.318c2.115,0,3.865,0.691,5.084,1.871c1.586,1.545,2.074,3.497,2.074,5.815v13.178   L123.643,34.596L123.643,34.596z"/>\n-\t<path fill="#0095D3" d="M135.772,25.486c0,3.537,1.871,5.774,5.246,5.774c2.317,0,3.539-0.649,5.004-2.115l2.643,2.481   c-2.115,2.114-4.107,3.213-7.727,3.213c-5.166,0-9.273-2.725-9.273-10.574c0-6.671,3.457-10.534,8.744-10.534   c5.531,0,8.744,4.067,8.744,9.925v1.83H135.772z M144.475,19.791c-0.65-1.545-2.113-2.604-4.066-2.604   c-1.951,0-3.457,1.059-4.107,2.604c-0.406,0.936-0.488,1.546-0.529,2.807h9.273C145.003,21.337,144.883,20.726,144.475,19.791z"/>\n-\t<circle fill="#0095D3" cx="17.815" cy="11.516" r="4.402"/>\n-\t<path fill="#0095D3" d="M31.167,20.311c0,2.433-1.969,4.401-4.403,4.401c-2.427,0-4.401-1.97-4.401-4.401   c0-2.433,1.975-4.401,4.401-4.401C29.2,15.909,31.167,17.879,31.167,20.311z"/>\n-\t<circle fill="#0095D3" cx="17.801" cy="29.131" r="4.402"/>\n+\t<path fill="#0083BE" d="M65.327,23.208h-6.589v11.388h-4.393V5.638h10.981c5.653,0,9.271,3.742,9.271,8.785   S70.979,23.208,65.327,23.208z M65.082,9.583h-6.345v9.639h6.345c3.05,0,5.124-1.749,5.124-4.799   C70.206,11.372,68.132,9.583,65.082,9.583z"/>\n+\t<path fill="#0083BE" d="M83.969,34.596c-3.904,0-5.652-2.644-5.652-5.693V5.638h4.148v23.021c0,1.587,0.567,2.399,2.235,2.399h1.83   v3.538H83.969z"/>\n+\t<path fill="#0083BE" d="M104.762,32.399c-1.344,1.384-3.377,2.44-6.184,2.44c-2.805,0-4.799-1.058-6.141-2.44   c-1.951-2.032-2.439-4.637-2.439-8.134c0-3.457,0.488-6.061,2.439-8.094c1.342-1.383,3.336-2.44,6.141-2.44   c2.807,0,4.84,1.059,6.184,2.44c1.951,2.033,2.439,4.637,2.439,8.094C107.203,27.763,106.713,30.366,104.762,32.399z    M101.629,18.613c-0.773-0.773-1.83-1.181-3.051-1.181c-1.219,0-2.236,0.406-3.01,1.181c-1.26,1.261-1.422,3.416-1.422,5.652   s0.162,4.393,1.422,5.653c0.773,0.771,1.791,1.22,3.01,1.22c1.221,0,2.277-0.447,3.051-1.22c1.262-1.262,1.424-3.417,1.424-5.653   S102.891,19.873,101.629,18.613z"/>\n+\t<path fill="#0083BE" d="M123.643,34.596V22.029c0-3.214-1.83-4.597-4.147-4.597s-4.271,1.423-4.271,4.597v12.566h-4.147v-20.62   h4.065v2.074c1.425-1.546,3.416-2.318,5.49-2.318c2.115,0,3.865,0.691,5.084,1.871c1.586,1.545,2.074,3.497,2.074,5.815v13.178   L123.643,34.596L123.643,34.596z"/>\n+\t<path fill="#0083BE" d="M135.772,25.486c0,3.537,1.871,5.774,5.246,5.774c2.317,0,3.539-0.649,5.004-2.115l2.643,2.481   c-2.115,2.114-4.107,3.213-7.727,3.213c-5.166,0-9.273-2.725-9.273-10.574c0-6.671,3.457-10.534,8.744-10.534   c5.531,0,8.744,4.067,8.744,9.925v1.83H135.772z M144.475,19.791c-0.65-1.545-2.113-2.604-4.066-2.604   c-1.951,0-3.457,1.059-4.107,2.604c-0.406,0.936-0.488,1.546-0.529,2.807h9.273C145.003,21.337,144.883,20.726,144.475,19.791z"/>\n+\t<circle fill="#0083BE" cx="17.815" cy="11.516" r="4.402"/>\n+\t<path fill="#0083BE" d="M31.167,20.311c0,2.433-1.969,4.401-4.403,4.401c-2.427,0-4.401-1.97-4.401-4.401   c0-2.433,1.975-4.401,4.401-4.401C29.2,15.909,31.167,17.879,31.167,20.311z"/>\n+\t<circle fill="#0083BE" cx="17.801" cy="29.131" r="4.402"/>\n \t<g>\n-\t\t<path fill="#0095D3" d="M20.441-0.045C9.207-0.044,0.1,9.063,0.099,20.298C0.1,31.532,9.207,40.639,20.441,40.641    c11.235-0.002,20.341-9.107,20.343-20.343C40.783,9.063,31.677-0.044,20.441-0.045z M31.891,31.747    c-2.937,2.934-6.972,4.742-11.45,4.743c-4.478-0.001-8.513-1.811-11.45-4.743C6.058,28.81,4.25,24.775,4.249,20.298    c0.001-4.478,1.809-8.513,4.743-11.45c2.937-2.934,6.972-4.742,11.45-4.743c4.478,0.001,8.513,1.81,11.45,4.743    c2.934,2.938,4.742,6.973,4.743,11.45C36.633,24.775,34.825,28.81,31.891,31.747z"/>\n+\t\t<path fill="#0083BE" d="M20.441-0.045C9.207-0.044,0.1,9.063,0.099,20.298C0.1,31.532,9.207,40.639,20.441,40.641    c11.235-0.002,20.341-9.107,20.343-20.343C40.783,9.063,31.677-0.044,20.441-0.045z M31.891,31.747    c-2.937,2.934-6.972,4.742-11.45,4.743c-4.478-0.001-8.513-1.811-11.45-4.743C6.058,28.81,4.25,24.775,4.249,20.298    c0.001-4.478,1.809-8.513,4.743-11.45c2.937-2.934,6.972-4.742,11.45-4.743c4.478,0.001,8.513,1.81,11.45,4.743    c2.934,2.938,4.742,6.973,4.743,11.45C36.633,24.775,34.825,28.81,31.891,31.747z"/>\n \t</g>\n \t<g>\n-\t\t<path fill="#0095D3" d="M153.985,9.95c-1.195,0-2.164,0.971-2.164,2.168c0.002,1.197,0.969,2.168,2.164,2.168    c1.199,0,2.172-0.971,2.172-2.168S155.184,9.95,153.985,9.95z M153.985,13.968c-1.021-0.002-1.846-0.827-1.846-1.85    c0.002-1.021,0.825-1.849,1.846-1.851c1.023,0.002,1.852,0.828,1.854,1.851C155.836,13.141,155.008,13.966,153.985,13.968z"/>\n+\t\t<path fill="#0083BE" d="M153.985,9.95c-1.195,0-2.164,0.971-2.164,2.168c0.002,1.197,0.969,2.168,2.164,2.168    c1.199,0,2.172-0.971,2.172-2.168S155.184,9.95,153.985,9.95z M153.985,13.968c-1.021-0.002-1.846-0.827-1.846-1.85    c0.002-1.021,0.825-1.849,1.846-1.851c1.023,0.002,1.852,0.828,1.854,1.851C155.836,13.141,155.008,13.966,153.985,13.968z"/>\n \t</g>\n \t<g>\n-\t\t<path fill="#0095D3" d="M154.507,13.409l-0.54-1.08h-0.486v1.08h-0.389v-2.564h0.994c0.484,0,0.796,0.313,0.796,0.75    c0,0.367-0.224,0.602-0.513,0.68l0.592,1.136L154.507,13.409L154.507,13.409z M154.056,11.195h-0.575v0.803h0.575    c0.261,0,0.437-0.147,0.437-0.399S154.317,11.195,154.056,11.195z"/>\n+\t\t<path fill="#0083BE" d="M154.507,13.409l-0.54-1.08h-0.486v1.08h-0.389v-2.564h0.994c0.484,0,0.796,0.313,0.796,0.75    c0,0.367-0.224,0.602-0.513,0.68l0.592,1.136L154.507,13.409L154.507,13.409z M154.056,11.195h-0.575v0.803h0.575    c0.261,0,0.437-0.147,0.437-0.399S154.317,11.195,154.056,11.195z"/>\n \t</g>\n </g>\n </svg>\ndiff --git a/Products/CMFPlone/patterns/settings.py b/Products/CMFPlone/patterns/settings.py\nindex 2d63b3ef69..a8fe05d5a2 100644\n--- a/Products/CMFPlone/patterns/settings.py\n+++ b/Products/CMFPlone/patterns/settings.py\n@@ -7,6 +7,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.interfaces._content import IFolderish\n+from plone.base.interfaces import IImagingSchema\n from plone.base.interfaces import ILinkSchema\n from plone.base.interfaces import IPatternsSettings\n from plone.base.interfaces import IPloneSiteRoot\n@@ -72,12 +73,32 @@ def mark_special_links(self):\n \n     @property\n     def image_scales(self):\n+        # Keep image_scales at least until https://github.com/plone/mockup/pull/1156\n+        # is merged and plone.staticresources is updated.\n         factory = getUtility(IVocabularyFactory, "plone.app.vocabularies.ImagesScales")\n         vocabulary = factory(self.context)\n         ret = [{"title": translate(it.title), "value": it.value} for it in vocabulary]\n         ret = sorted(ret, key=lambda it: it["title"])\n         return json.dumps(ret)\n \n+    @property\n+    def picture_variants(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        editor_picture_variants = {}\n+        for k, picture_variant in settings.picture_variants.items():\n+            hide_in_editor = picture_variant.get("hideInEditor")\n+            if hide_in_editor:\n+                continue\n+            editor_picture_variants[k] = picture_variant\n+        return editor_picture_variants\n+\n+    @property\n+    def image_captioning(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.image_captioning\n+\n     def tinymce(self):\n         """\n         data-pat-tinymce : JSON.stringify({\n@@ -129,7 +150,11 @@ def tinymce(self):\n         configuration = {\n             "base_url": self.context.absolute_url(),\n             "imageTypes": image_types,\n+            # Keep imageScales at least until https://github.com/plone/mockup/pull/1156\n+            # is merged and plone.staticresources is updated.\n             "imageScales": self.image_scales,\n+            "pictureVariants": self.picture_variants,\n+            "imageCaptioningEnabled": self.image_captioning,\n             "linkAttribute": "UID",\n             # This is for loading the languages on tinymce\n             "loadingBaseUrl": "{}/++plone++static/components/tinymce-builded/"\ndiff --git a/Products/CMFPlone/tests/browser_collection_views.txt b/Products/CMFPlone/tests/browser_collection_views.txt\nindex 1410ef8387..c2458703d0 100644\n--- a/Products/CMFPlone/tests/browser_collection_views.txt\n+++ b/Products/CMFPlone/tests/browser_collection_views.txt\n@@ -48,6 +48,12 @@ Now let\'s login and visit the collection in the test browser:\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone/folder/collection\')\n \n+When checking if the collection text is in the output, we are not interested in differences in whitespace.\n+So we use a normalize function:\n+\n+    >>> def normalize(value):\n+    ...     return value.translate(str.maketrans({" ": None, "\\n": None, "\\t": None, "\\r": None}))\n+\n Lets check the listing_view (Standard view):\n \n     >>> browser.getLink(\'Standard view\').click()\n@@ -55,7 +61,7 @@ Lets check the listing_view (Standard view):\n     True\n     >>> collection_description in browser.contents\n     True\n-    >>> collection_text in browser.contents\n+    >>> normalize(collection_text) in normalize(browser.contents)\n     True\n \n Lets check the summary_view (Summary view):\n@@ -65,7 +71,7 @@ Lets check the summary_view (Summary view):\n     True\n     >>> collection_description in browser.contents\n     True\n-    >>> collection_text in browser.contents\n+    >>> normalize(collection_text) in normalize(browser.contents)\n     True\n \n Lets check the full_view (All content):\n@@ -75,7 +81,7 @@ Lets check the full_view (All content):\n     True\n     >>> collection_description in browser.contents\n     True\n-    >>> collection_text in browser.contents\n+    >>> normalize(collection_text) in normalize(browser.contents)\n     True\n \n Lets check the tabular_view (Tabular view):\n@@ -86,7 +92,7 @@ Lets check the tabular_view (Tabular view):\n     True\n     >>> collection_description in browser.contents\n     True\n-    >>> collection_text in browser.contents\n+    >>> normalize(collection_text) in normalize(browser.contents)\n     True\n \n Lets ensure that the text field is not requested on a folder. We\n@@ -110,5 +116,5 @@ Lets ensure text is shown when Collection is default view of a folder\n     True\n     >>> collection_description in browser.contents\n     True\n-    >>> collection_text in browser.contents\n+    >>> normalize(collection_text) in normalize(browser.contents)\n     True\ndiff --git a/news/3477.feature b/news/3477.feature\nnew file mode 100644\nindex 0000000000..78e99ea9a1\n--- /dev/null\n+++ b/news/3477.feature\n@@ -0,0 +1 @@\n+Add image srcset\'s configuration to TinyMCE pattern settings [MrTango]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-06-22T22:15:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1ade707622156640bda630e59eab66ba6ddd8b8a

Merge pull request #3521 from plone/image_scales_metadata

Image scales catalog metadata

Files changed:
A Products/CMFPlone/image_scales/__init__.py
A Products/CMFPlone/image_scales/adapters.py
A Products/CMFPlone/image_scales/configure.zcml
A Products/CMFPlone/image_scales/indexer.py
A Products/CMFPlone/image_scales/tests/__init__.py
A Products/CMFPlone/image_scales/tests/images.xml
A Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py
A Products/CMFPlone/tests/900.jpg
A news/3521.feature
M Products/CMFPlone/configure.zcml
M Products/CMFPlone/profiles/default/catalog.xml
M Products/CMFPlone/tests/dummy.py
M Products/CMFPlone/tests/testContentTypeScripts.py

b'diff --git a/Products/CMFPlone/configure.zcml b/Products/CMFPlone/configure.zcml\nindex 96a76b4c51..80804657d8 100644\n--- a/Products/CMFPlone/configure.zcml\n+++ b/Products/CMFPlone/configure.zcml\n@@ -80,6 +80,9 @@\n   <include file="profiles.zcml"/>\n   <include file="catalog.zcml" />\n \n+  <!-- images scales poc -->\n+  <include package=".image_scales" />\n+\n   <cmf:registerDirectory\n       name="skins"\n       directory="skins"\ndiff --git a/Products/CMFPlone/image_scales/__init__.py b/Products/CMFPlone/image_scales/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/Products/CMFPlone/image_scales/adapters.py b/Products/CMFPlone/image_scales/adapters.py\nnew file mode 100644\nindex 0000000000..6fc7230b48\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/adapters.py\n@@ -0,0 +1,33 @@\n+from Acquisition import aq_inner\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.utils import iterSchemata\n+from plone.base.interfaces import IImageScalesAdapter\n+from plone.base.interfaces import IImageScalesFieldAdapter\n+from zope.component import adapter\n+from zope.component import queryMultiAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.schema import getFields\n+\n+\n+@implementer(IImageScalesAdapter)\n+@adapter(IDexterityContent, Interface)\n+class ImageScales:\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self):\n+        obj = aq_inner(self.context)\n+        res = {}\n+        for schema in iterSchemata(self.context):\n+            for name, field in getFields(schema).items():\n+                # serialize the field\n+                serializer = queryMultiAdapter(\n+                    (field, obj, self.request), IImageScalesFieldAdapter\n+                )\n+                if serializer:\n+                    scales = serializer()\n+                    if scales:\n+                        res[name] = scales\n+        return res\ndiff --git a/Products/CMFPlone/image_scales/configure.zcml b/Products/CMFPlone/image_scales/configure.zcml\nnew file mode 100644\nindex 0000000000..623a9fb12d\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/configure.zcml\n@@ -0,0 +1,14 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n+\n+  <!-- indexer -->\n+  <adapter\n+      factory=".indexer.image_scales"\n+      name="image_scales"\n+      />\n+\n+  <!-- adapters -->\n+  <adapter factory=".adapters.ImageScales" />\n+\n+</configure>\ndiff --git a/Products/CMFPlone/image_scales/indexer.py b/Products/CMFPlone/image_scales/indexer.py\nnew file mode 100644\nindex 0000000000..2c4c9c20be\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/indexer.py\n@@ -0,0 +1,22 @@\n+from persistent.dict import PersistentDict\n+from plone.base.interfaces import IImageScalesAdapter\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.indexer.decorator import indexer\n+from zope.component import queryMultiAdapter\n+from zope.globalrequest import getRequest\n+\n+\n+@indexer(IDexterityContent)\n+def image_scales(obj):\n+    """\n+    Indexer used to store in metadata the image scales of the object.\n+    """\n+    adapter = queryMultiAdapter((obj, getRequest()), IImageScalesAdapter)\n+    if not adapter:\n+        # Raising an AttributeError does the right thing,\n+        # making sure nothing is saved in the catalog.\n+        raise AttributeError\n+    scales = adapter()\n+    if not scales:\n+        raise AttributeError\n+    return PersistentDict(scales)\ndiff --git a/Products/CMFPlone/image_scales/tests/__init__.py b/Products/CMFPlone/image_scales/tests/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/Products/CMFPlone/image_scales/tests/images.xml b/Products/CMFPlone/image_scales/tests/images.xml\nnew file mode 100644\nindex 0000000000..c12dcb4a1e\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/tests/images.xml\n@@ -0,0 +1,12 @@\n+<model xmlns="http://namespaces.plone.org/supermodel/schema"\n+       xmlns:marshal="http://namespaces.plone.org/supermodel/marshal">\n+  <schema>\n+    <field name="image1" type="plone.namedfile.field.NamedBlobImage"\n+        marshal:primary="true">\n+      <title>Image 1</title>\n+    </field>\n+    <field name="image2" type="plone.namedfile.field.NamedBlobImage">\n+      <title>Image 2</title>\n+    </field>\n+  </schema>\n+</model>\ndiff --git a/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\nnew file mode 100644\nindex 0000000000..be656d06ba\n--- /dev/null\n+++ b/Products/CMFPlone/image_scales/tests/test_image_scales_metadata.py\n@@ -0,0 +1,155 @@\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.utils import iterSchemata\n+from plone.namedfile.file import NamedImage\n+from plone.base.interfaces import IImageScalesAdapter\n+from plone.base.interfaces import IImageScalesFieldAdapter\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from Products.CMFPlone.tests import dummy\n+from zope.component import queryMultiAdapter\n+\n+import Missing\n+import unittest\n+\n+\n+class ImageScalesAdaptersRegisteredTest(unittest.TestCase):\n+    """Test portal actions control panel."""\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        news_id = self.portal.invokeFactory(\n+            "News Item",\n+            id="news",\n+            title="News",\n+        )\n+\n+        image_id = self.portal.invokeFactory(\n+            "Image",\n+            id="image",\n+            title="image",\n+            image=NamedImage(dummy.Image(), filename="dummy.gif"),\n+        )\n+\n+        self.image = self.portal[image_id]\n+        self.news = self.portal[news_id]\n+\n+    def serialize(self, context, fieldname):\n+        for schema in iterSchemata(context):\n+            if fieldname in schema:\n+                field = schema.get(fieldname)\n+                break\n+        serializer = queryMultiAdapter(\n+            (field, context, self.request), IImageScalesFieldAdapter\n+        )\n+        if serializer:\n+            return serializer()\n+        return None\n+\n+    def test_field_adapter_do_not_return_scales_for_fields_without_adapter(self):\n+        res = self.serialize(self.image, "title")\n+        self.assertEqual(res, None)\n+\n+    def test_field_adapter_return_scales_for_fields_with_adapter(self):\n+        res = self.serialize(self.image, "image")\n+        self.assertNotEqual(res, None)\n+        self.assertEqual(len(res), 1)\n+        scales = res[0]\n+        self.assertEqual(scales["content-type"], "image/gif")\n+        self.assertEqual(scales["filename"], "dummy.gif")\n+        self.assertIn("scales", scales)\n+        scales = scales["scales"]\n+        self.assertIn("listing", scales)\n+        listing_scale = scales["listing"]\n+        self.assertIn("download", listing_scale)\n+\n+    def test_field_adapter_do_not_return_scales_for_empty_fields_with_adapter(self):\n+        res = self.serialize(self.news, "image")\n+        self.assertEqual(res, None)\n+\n+    def test_field_adapter_does_not_return_larger_scales(self):\n+        # Add an image of 900 by 900 pixels.\n+        image_id = self.portal.invokeFactory(\n+            "Image",\n+            id="jpeg",\n+            title="jpeg image",\n+            image=NamedImage(dummy.JpegImage(), filename="900.jpeg"),\n+        )\n+        image = self.portal[image_id]\n+        res = self.serialize(image, "image")\n+        self.assertNotEqual(res, None)\n+        self.assertEqual(len(res), 1)\n+        scales = res[0]\n+        self.assertEqual(scales["content-type"], "image/jpeg")\n+        self.assertIn("scales", scales)\n+        self.assertEqual(scales["filename"], "900.jpeg")\n+        self.assertEqual(scales["width"], 900)\n+        self.assertEqual(scales["height"], 900)\n+        download = scales["download"]\n+        images_url = image.absolute_url() + "/@@images"\n+        self.assertTrue(download.startswith(f"{images_url}/image-900-"))\n+        self.assertTrue(download.endswith(".jpeg"))\n+        scales = scales["scales"]\n+        # larger and huge should not be in here: these scales would return the same\n+        # content as the original.\n+        self.assertEqual(\n+            ["icon", "large", "listing", "mini", "preview", "teaser", "thumb", "tile"],\n+            sorted(scales.keys()),\n+        )\n+        preview = scales["preview"]\n+        self.assertEqual(preview["width"], 400)\n+        self.assertEqual(preview["height"], 400)\n+        self.assertTrue(preview["download"].startswith(f"{images_url}/image-400-"))\n+\n+    def test_content_adapter_return_proper_scales(self):\n+        res = queryMultiAdapter((self.image, self.request), IImageScalesAdapter)()\n+        self.assertNotEqual(res, None)\n+        self.assertEqual(list(res.keys()), ["image"])\n+        self.assertEqual(len(res["image"]), 1)\n+        scales = res["image"][0]\n+        self.assertEqual(scales["content-type"], "image/gif")\n+        self.assertIn("scales", scales)\n+\n+    def test_content_adapter_do_not_return_scales_if_empty_fields(self):\n+        res = queryMultiAdapter((self.news, self.request), IImageScalesAdapter)()\n+        self.assertEqual(res, {})\n+\n+    def test_metadata_populated_with_scales(self):\n+        catalog = self.portal.portal_catalog\n+        news_brain = catalog(UID=self.news.UID())[0]\n+        image_brain = catalog(UID=self.image.UID())[0]\n+\n+        self.assertEqual(news_brain.image_scales, Missing.Value)\n+        self.assertEqual(list(image_brain.image_scales.keys()), ["image"])\n+        self.assertEqual(len(image_brain.image_scales["image"]), 1)\n+        self.assertEqual(\n+            image_brain.image_scales["image"][0]["content-type"], "image/gif"\n+        )\n+        self.assertIn("scales", image_brain.image_scales["image"][0])\n+\n+    def test_multiple_image_fields(self):\n+        # Note: since there are basically three ways to set fields on an FTI, we use\n+        # one, and make the others explicitly None, otherwise no fields may be found.\n+        fti = DexterityFTI(\n+            "multi",\n+            model_file="Products.CMFPlone.image_scales.tests:images.xml",\n+            model_source=None,\n+            schema=None,\n+        )\n+        self.portal.portal_types._setObject("multi", fti)\n+        content_id = self.portal.invokeFactory(\n+            "multi",\n+            id="multi",\n+            title="Multi",\n+            image1=NamedImage(dummy.Image()),\n+            image2=NamedImage(dummy.Image()),\n+        )\n+        multi = self.portal[content_id]\n+        catalog = self.portal.portal_catalog\n+        brain = catalog(UID=multi.UID())[0]\n+        self.assertEqual(sorted(list(brain.image_scales.keys())), ["image1", "image2"])\ndiff --git a/Products/CMFPlone/profiles/default/catalog.xml b/Products/CMFPlone/profiles/default/catalog.xml\nindex ebab330d9f..51ab0fbaa6 100644\n--- a/Products/CMFPlone/profiles/default/catalog.xml\n+++ b/Products/CMFPlone/profiles/default/catalog.xml\n@@ -127,6 +127,7 @@\n  <column value="getObjSize"/>\n  <column value="getRemoteUrl"/>\n  <column value="id"/>\n+ <column value="image_scales"/>\n  <column value="is_folderish"/>\n  <column value="listCreators"/>\n  <column value="location"/>\ndiff --git a/Products/CMFPlone/tests/900.jpg b/Products/CMFPlone/tests/900.jpg\nnew file mode 100644\nindex 0000000000..e9ef7dbb1a\nBinary files /dev/null and b/Products/CMFPlone/tests/900.jpg differ\ndiff --git a/Products/CMFPlone/tests/dummy.py b/Products/CMFPlone/tests/dummy.py\nindex 0ea980fb65..e80bf009b4 100644\n--- a/Products/CMFPlone/tests/dummy.py\n+++ b/Products/CMFPlone/tests/dummy.py\n@@ -20,6 +20,11 @@\n     os.path.dirname(__file__), os.pardir, \'tool.gif\')\n with open(GIF_FILE, \'rb\') as f:\n     GIF = f.read()\n+# jpeg file of 900x900 pixels\n+JPEG_FILE = os.path.join(\n+    os.path.dirname(__file__), \'900.jpg\')\n+with open(JPEG_FILE, \'rb\') as f:\n+    JPEG = f.read()\n \n \n class Dummy:\n@@ -105,6 +110,15 @@ class Image(File):\n     data = GIF\n \n \n+class JpegImage(File):\n+    """Dummy jpeg image upload object\n+\n+    900 by 900 pixels.\n+    """\n+    filename = "900.jpeg"\n+    data = JPEG\n+\n+\n class Folder(SimpleFolder):\n     \'\'\'Dummy Folder\n        First-class Zope object. Can be _setObject\'ed.\ndiff --git a/Products/CMFPlone/tests/testContentTypeScripts.py b/Products/CMFPlone/tests/testContentTypeScripts.py\nindex 325238d92a..0a0b5207c6 100644\n--- a/Products/CMFPlone/tests/testContentTypeScripts.py\n+++ b/Products/CMFPlone/tests/testContentTypeScripts.py\n@@ -5,72 +5,74 @@\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests import dummy\n \n-AddPortalTopics = \'Add portal topics\'\n+AddPortalTopics = "Add portal topics"\n \n \n class TestContentTypeScripts(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n-        perms = self.getPermissionsOfRole(\'Member\')\n-        self.setPermissions(perms + [AddPortalTopics], \'Member\')\n+        perms = self.getPermissionsOfRole("Member")\n+        self.setPermissions(perms + [AddPortalTopics], "Member")\n         self.request = self.app.REQUEST\n \n     def getPermissionsOfRole(self, role):\n         perms = self.portal.permissionsOfRole(role)\n-        return [p[\'name\'] for p in perms if p[\'selected\']]\n+        return [p["name"] for p in perms if p["selected"]]\n \n     def testDocumentCreate(self):\n-        self.folder.invokeFactory(\n-            \'Document\', id=\'doc\', text=RichTextValue(\'data\'))\n-        self.assertEqual(self.folder.doc.text.raw, \'data\')\n-        self.assertEqual(self.folder.doc.Format(), \'text/html\')\n+        self.folder.invokeFactory("Document", id="doc", text=RichTextValue("data"))\n+        self.assertEqual(self.folder.doc.text.raw, "data")\n+        self.assertEqual(self.folder.doc.Format(), "text/html")\n \n     def testEventCreate(self):\n-        self.folder.invokeFactory(\'Event\', id=\'event\',\n-                                  title=\'Foo\',\n-                                  start=datetime(year=2003, month=9, day=18),\n-                                  end=datetime(year=2003, month=9, day=19))\n-        self.assertEqual(self.folder.event.Title(), \'Foo\')\n-        self.assertTrue(self.folder.event.start.isoformat()\n-                            .startswith(\'2003-09-18T00:00:00\'))\n-        self.assertTrue(self.folder.event.end.isoformat()\n-                            .startswith(\'2003-09-19T00:00:00\'))\n+        self.folder.invokeFactory(\n+            "Event",\n+            id="event",\n+            title="Foo",\n+            start=datetime(year=2003, month=9, day=18),\n+            end=datetime(year=2003, month=9, day=19),\n+        )\n+        self.assertEqual(self.folder.event.Title(), "Foo")\n+        self.assertTrue(\n+            self.folder.event.start.isoformat().startswith("2003-09-18T00:00:00")\n+        )\n+        self.assertTrue(\n+            self.folder.event.end.isoformat().startswith("2003-09-19T00:00:00")\n+        )\n \n     def testFileCreate(self):\n-        self.folder.invokeFactory(\n-            \'File\', id=\'file\', file=NamedFile(dummy.File()))\n+        self.folder.invokeFactory("File", id="file", file=NamedFile(dummy.File()))\n         self.assertEqual(self.folder.file.file.data, dummy.TEXT)\n \n     def testImageCreate(self):\n-        self.folder.invokeFactory(\n-            \'Image\', id=\'image\', image=NamedImage(dummy.Image()))\n+        self.folder.invokeFactory("Image", id="image", image=NamedImage(dummy.Image()))\n         self.assertEqual(self.folder.image.image.data, dummy.GIF)\n \n     def testFolderCreate(self):\n-        self.folder.invokeFactory(\'Folder\', id=\'folder\', title=\'Foo\',\n-                                  description=\'Bar\')\n-        self.assertEqual(self.folder.folder.Title(), \'Foo\')\n-        self.assertEqual(self.folder.folder.Description(), \'Bar\')\n+        self.folder.invokeFactory("Folder", id="folder", title="Foo", description="Bar")\n+        self.assertEqual(self.folder.folder.Title(), "Foo")\n+        self.assertEqual(self.folder.folder.Description(), "Bar")\n \n     def testLinkCreate(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remoteUrl=\'http://foo.com\', title=\'Foo\')\n-        self.assertEqual(self.folder.link.Title(), \'Foo\')\n-        self.assertEqual(self.folder.link.remoteUrl, \'http://foo.com\')\n+        self.folder.invokeFactory(\n+            "Link", id="link", remoteUrl="http://foo.com", title="Foo"\n+        )\n+        self.assertEqual(self.folder.link.Title(), "Foo")\n+        self.assertEqual(self.folder.link.remoteUrl, "http://foo.com")\n \n     def testNewsItemCreate(self):\n-        self.folder.invokeFactory(\'News Item\', id=\'newsitem\',\n-                                  text=RichTextValue(\'data\'), title=\'Foo\')\n-        self.assertEqual(self.folder.newsitem.text.raw, \'data\')\n-        self.assertEqual(self.folder.newsitem.Title(), \'Foo\')\n+        self.folder.invokeFactory(\n+            "News Item", id="newsitem", text=RichTextValue("data"), title="Foo"\n+        )\n+        self.assertEqual(self.folder.newsitem.text.raw, "data")\n+        self.assertEqual(self.folder.newsitem.Title(), "Foo")\n \n     # Bug tests\n \n     def test_listMetaTypes(self):\n-        self.folder.invokeFactory(\'Document\', id=\'doc\')\n+        self.folder.invokeFactory("Document", id="doc")\n         tool = self.portal.plone_utils\n         doc = self.folder.doc\n-        doc.setTitle(\'title\')\n+        doc.setTitle("title")\n         tool.listMetaTags(doc)\n         # TODO: atm it checks only of the script can be called w/o an error\n \n@@ -81,15 +83,12 @@ class TestFileURL(PloneTestCase.PloneTestCase):\n     # NOTABUG: This is how urlparse.urlparse() works.\n \n     def testFileURLWithHost(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remoteUrl=\'file://foo.com/baz.txt\')\n-        self.assertEqual(self.folder.link.remoteUrl,\n-                         \'file://foo.com/baz.txt\')\n+        self.folder.invokeFactory("Link", id="link", remoteUrl="file://foo.com/baz.txt")\n+        self.assertEqual(self.folder.link.remoteUrl, "file://foo.com/baz.txt")\n \n     def testFileURLNoHost(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remoteUrl=\'file:///foo.txt\')\n-        self.assertEqual(self.folder.link.remoteUrl, \'file:///foo.txt\')\n+        self.folder.invokeFactory("Link", id="link", remoteUrl="file:///foo.txt")\n+        self.assertEqual(self.folder.link.remoteUrl, "file:///foo.txt")\n \n     # DX does not pass url trough urlparse/urlunparse like setRemoteUrl does.\n     # def testFileURLFourSlash(self):\n@@ -115,17 +114,13 @@ def testFileURLNoHost(self):\n \n \n class TestImageProps(PloneTestCase.PloneTestCase):\n-\n     def testImageComputedProps(self):\n         from OFS.Image import Image\n+\n         tag = Image.tag\n-        kw = {\'_title\': \'some title\',\n-              \'_alt\': \'alt tag\',\n-              \'height\': 100,\n-              \'width\': 100}\n+        kw = {"_title": "some title", "_alt": "alt tag", "height": 100, "width": 100}\n         # Wrap object so that ComputedAttribute gets executed.\n         self.ob = dummy.ImageComputedProps(**kw).__of__(self.folder)\n \n-        endswith = (\'alt="alt tag" title="some title" \'\n-                    \'height="100" width="100" />\')\n-        self.assertEqual(tag(self.ob)[-len(endswith):], endswith)\n+        endswith = \'alt="alt tag" title="some title" \' \'height="100" width="100" />\'\n+        self.assertEqual(tag(self.ob)[-len(endswith) :], endswith)\ndiff --git a/news/3521.feature b/news/3521.feature\nnew file mode 100644\nindex 0000000000..9f409c60cd\n--- /dev/null\n+++ b/news/3521.feature\n@@ -0,0 +1,2 @@\n+Add ``image_scales`` to catalog metadata.\n+[cekk, maurits]\n'

