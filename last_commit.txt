Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-06T10:36:46+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/5ef9374726292462f83b3ff4b1940d1825082bcd

Remove Archetypes and Python &lt;3.8 support

Files changed:
A TODO.txt
M MANIFEST.in
M README.rst
M plone/formwidget/recurrence/configure.zcml
M plone/formwidget/recurrence/z3cform/widget.py
M setup.py
D plone/formwidget/recurrence/at/__init__.py
D plone/formwidget/recurrence/at/browser.py
D plone/formwidget/recurrence/at/configure.zcml
D plone/formwidget/recurrence/at/widget.pt
D plone/formwidget/recurrence/at/widget.py
D plone/formwidget/recurrence/tests/at_example/__init__.py
D plone/formwidget/recurrence/tests/at_example/configure.zcml
D plone/formwidget/recurrence/tests/at_example/content.py
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml
D plone/formwidget/recurrence/tests/test_atwidget.py

b'diff --git a/MANIFEST.in b/MANIFEST.in\nindex d8ec65b..42183f5 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -5,4 +5,4 @@ global-include *.mo\n global-exclude *pyc *~\n include pyproject.toml\n recursive-exclude news *\n-exclude news\n+exclude news TODO.txt\ndiff --git a/README.rst b/README.rst\nindex ea18383..a2789fb 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,14 +1,12 @@\n Introduction\n ============\n \n-The plone.formwidget.recurrence package provides an Archetype and a z3cform\n-widget for recurrence.\n+The plone.formwidget.recurrence package provides a z3cform widget for recurrence.\n \n-The main GUI work is done with the jquery.recurrenceinput.js widget from\n-http://github.com/collective/jquery.recurrenceinput.js .\n+The main GUI work is done with the ``pat-recurrence`` pattern from mockup.\n \n-This widget also provides a simple textarea where a RFC 5545\n-compliant recurrence rule can be entered, if javascript is not available.\n+This widget provides a simple textarea where a RFC 5545 compliant\n+recurrence rule can be entered, if javascript is not available.\n \n The resulting value of the widget is a RFC5445 compliant recurrence rule\n string, ready to be used with python-dateutil\'s rrulestr.\n@@ -18,13 +16,7 @@ Installation\n ------------\n \n You need to add plone.formwidget.recurrence to either your buildout, or\n-your product requirements. In this addition you should specify if you\n-want the Archetypes or the z3c.form widget, or both. For example::\n-\n-  [buildout]\n-  eggs += plone.formwidget.recurrence[archetypes]\n-\n-or::\n+your product requirements. For example::\n \n   [buildout]\n   eggs += plone.formwidget.recurrence[z3cform]\n@@ -32,14 +24,5 @@ or::\n or::\n \n   install_requires=[\n-     \'plone.formwidget.recurrence[z3cform,archetypes]\',\n+     \'plone.formwidget.recurrence[z3cform]\',\n   ]\n-\n-\n-TODO\n-----\n-\n-- Better test coverage.\n-\n-? - Usage docs for AT and DX. Show z3c.form widget parameters via\n-  plone.autoform > 1.4\ndiff --git a/TODO.txt b/TODO.txt\nnew file mode 100644\nindex 0000000..6819714\n--- /dev/null\n+++ b/TODO.txt\n@@ -0,0 +1,5 @@\n+TODO\n+----\n+\n+- Better test coverage.\n+- Show z3c.form widget parameters via plone.autoform > 1.4\ndiff --git a/plone/formwidget/recurrence/at/__init__.py b/plone/formwidget/recurrence/at/__init__.py\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/plone/formwidget/recurrence/at/browser.py b/plone/formwidget/recurrence/at/browser.py\ndeleted file mode 100644\nindex 4f63671..0000000\n--- a/plone/formwidget/recurrence/at/browser.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-from Products.Five import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from pkg_resources import resource_string\n-from plone.formwidget.recurrence.browser.i18n import translations\n-\n-\n-class RecurrenceWidget(BrowserView):\n-    """ """\n-    template = ViewPageTemplateFile(\'widget.pt\')\n-\n-    @property\n-    def macros(self):\n-        return self.template.macros\n-\n-    def translation(self):\n-        return translations(request=self.request)\n-\n-\n-class Templates(BrowserView):\n-\n-    def __call__(self):\n-        return resource_string(\n-            \'plone.formwidget.recurrence.browser\',\n-            \'lib/templates.html\'\n-        )\ndiff --git a/plone/formwidget/recurrence/at/configure.zcml b/plone/formwidget/recurrence/at/configure.zcml\ndeleted file mode 100644\nindex 6f848a3..0000000\n--- a/plone/formwidget/recurrence/at/configure.zcml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:z3c="http://namespaces.zope.org/z3c"\n-    i18n_domain="plone">\n-\n-  <!-- Archetypes widget view -->\n-  <browser:page\n-      for="*"\n-      name="recurrence_widget"\n-      class=".browser.RecurrenceWidget"\n-      permission="zope2.View"\n-      />\n-\n-</configure>\ndiff --git a/plone/formwidget/recurrence/at/widget.pt b/plone/formwidget/recurrence/at/widget.pt\ndeleted file mode 100644\nindex 35ec6f2..0000000\n--- a/plone/formwidget/recurrence/at/widget.pt\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      i18n:domain="plone">\n-  <head><title></title></head>\n-  <body>\n-\n-    <!-- Lines Widgets -->\n-    <metal:view_macro define-macro="view"\n-      tal:define="visState python:widget.isVisible(here, mode);\n-        getMethod python:accessor if widget.populate else None;\n-        value python:getMethod and getMethod();\n-        widget_view widget/@@recurrence_widget;\n-        portal_url context/@@plone_portal_state/portal_url;">\n-        <span tal:content="python:widget.get_formatted_value(value)">Value</span>\n-    </metal:view_macro>\n-\n-    <metal:edit_macro define-macro="edit">\n-      <metal:use use-macro="field_macro | context/widgets/field/macros/edit">\n-        <div metal:fill-slot="widget_body">\n-          <textarea class="pat-recurrence"\n-            tal:attributes="name string:$fieldName;\n-                            id fieldName;\n-                            cols widget/cols;\n-                            rows widget/rows;\n-                            data-pat-recurrence python: widget.get_pattern_options()"\n-            tal:content="python:value or \'\'"></textarea>\n-        </div>\n-      </metal:use>\n-    </metal:edit_macro>\n-\n-  </body>\n-</html>\ndiff --git a/plone/formwidget/recurrence/at/widget.py b/plone/formwidget/recurrence/at/widget.py\ndeleted file mode 100644\nindex cbd902c..0000000\n--- a/plone/formwidget/recurrence/at/widget.py\n+++ /dev/null\n@@ -1,80 +0,0 @@\n-from App.class_init import InitializeClass\n-from Products.Archetypes.Registry import registerWidget\n-from Products.Archetypes.atapi import LinesWidget\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_callable\n-from Products.validation import validation\n-from Products.validation.interfaces.IValidator import IValidator\n-from dateutil import rrule\n-from zope.component.hooks import getSite\n-from zope.interface import implementer\n-from plone.formwidget.recurrence.browser.i18n import translations\n-\n-import json\n-\n-\n-class RecurrenceWidget(LinesWidget):\n-    _properties = LinesWidget._properties.copy()\n-    _properties.update({\n-        \'macro_edit\': "recurrence_widget",\n-        \'helper_js\': (),\n-        \'helper_css\': (),\n-        \'startField\': \'\',\n-        \'startFieldYear\': \'\',\n-        \'startFieldMonth\': \'\',\n-        \'startFieldDay\': \'\',\n-        \'first_day\': \'\',\n-        \'show_repeat_forever\': True,\n-    })\n-\n-    def get_pattern_options(self):\n-        portal = getToolByName(getSite(), \'portal_url\').getPortalObject()\n-        ajax_url = portal.absolute_url() + \'/@@json_recurrence\'\n-        request = portal.REQUEST\n-\n-        first_day = self.first_day\n-        first_day = first_day() if safe_callable(first_day) else first_day\n-\n-        params = dict(\n-            ajaxContentType=\'application/x-www-form-urlencoded; charset=UTF-8\',\n-            ajaxURL=ajax_url,\n-            firstDay=first_day,\n-            hasRepeatForeverButton=self.show_repeat_forever,\n-            lang=request.LANGUAGE,\n-            ributtonExtraClass=\'allowMultiSubmit\',\n-            startField=self.startField,\n-            startFieldDay=self.startFieldDay,\n-            startFieldMonth=self.startFieldMonth,\n-            startFieldYear=self.startFieldYear,\n-        )\n-        return json.dumps({\n-            "locationization": translations(request),\n-            "language": request.LANGUAGE,\n-            "configuration": params\n-        })\n-\n-\n-InitializeClass(RecurrenceWidget)\n-registerWidget(RecurrenceWidget,\n-               title=\'Recurring Date\',\n-               description=(\'Renders a recurrence widget to enter all the \'\n-                            \'info for recurring dates.\'),\n-               used_for=(\'plone.app.event.recurrence.RecurrenceField\',))\n-\n-\n-@implementer(IValidator)\n-class RecurrenceValidator(object):\n-\n-    def __init__(self, name):\n-        self.name = name\n-\n-    def __call__(self, value, *args, **kwargs):\n-        try:\n-            rrule.rrulestr(value)   # TODO: rm dep. on rrule. check with regex\n-            assert(\'FREQ\' in value) # TODO: check if freq before other\n-                                    # recurrence parms\n-        except (ValueError, TypeError, AssertionError):\n-            return "Validation failed: Please enter valid recurrence data."\n-\n-        return True\n-validation.register(RecurrenceValidator(\'isRecurrence\'))\ndiff --git a/plone/formwidget/recurrence/configure.zcml b/plone/formwidget/recurrence/configure.zcml\nindex dc73a01..a699a49 100644\n--- a/plone/formwidget/recurrence/configure.zcml\n+++ b/plone/formwidget/recurrence/configure.zcml\n@@ -6,7 +6,6 @@\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     i18n_domain="plone">\n \n-  <include zcml:condition="installed Products.Archetypes" package=".at" />\n   <include zcml:condition="installed z3c.form" package=".z3cform" />\n   <include package=".browser" />\n \ndiff --git a/plone/formwidget/recurrence/tests/at_example/__init__.py b/plone/formwidget/recurrence/tests/at_example/__init__.py\ndeleted file mode 100644\nindex e798aea..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/__init__.py\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-from Products.Archetypes import atapi\n-\n-packageName = __name__\n-\n-\n-def initialize(context):\n-    """Register content types through Archetypes with Zope and the CMF.\n-    """\n-    from Products.CMFCore.utils import ContentInit\n-    from Products.CMFCore.permissions import AddPortalContent\n-    from plone.formwidget.recurrence.tests.at_example import content  # noqa\n-\n-    content_types, constructors, ftis = atapi.process_types(\n-        atapi.listTypes(packageName), packageName)\n-\n-    for atype, constructor, fti in zip(content_types, constructors, ftis):\n-        ContentInit(\n-            "%s: %s" % (packageName, atype.portal_type),\n-            content_types=(atype,),\n-            permission = AddPortalContent,\n-            extra_constructors = (constructor,),\n-            fti = (fti,),\n-        ).initialize(context)\ndiff --git a/plone/formwidget/recurrence/tests/at_example/configure.zcml b/plone/formwidget/recurrence/tests/at_example/configure.zcml\ndeleted file mode 100644\nindex 006c3e7..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/configure.zcml\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone">\n-\n-  <five:registerPackage package="." initialize=".initialize" />\n-  <genericsetup:registerProfile\n-      name="sample_types"\n-      title="Example content type for Recurrence Widget"\n-      directory="profiles/sample_types"\n-      description=\'Extension profile for the plone.formwidget.recurrence package.\'\n-      provides="Products.GenericSetup.interfaces.EXTENSION"\n-      />\n-\n-</configure>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/content.py b/plone/formwidget/recurrence/tests/at_example/content.py\ndeleted file mode 100644\nindex 9f12a1a..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/content.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-from Products.Archetypes.atapi import BaseSchema\n-from Products.Archetypes.atapi import LinesField\n-from Products.Archetypes.atapi import Schema\n-from Products.Archetypes.atapi import registerType\n-from Products.Archetypes.examples.SimpleType import SimpleType\n-from plone.formwidget.recurrence.at.widget import RecurrenceWidget\n-\n-\n-schema = BaseSchema.copy() + Schema((\n-    LinesField(\n-        \'rec\',\n-        widget=RecurrenceWidget(\n-            label=\'Recurrence\',\n-            startField=\'test_start_field\',\n-            startYear=\'test_start_year\',\n-            startMonth=\'test_start_month\',\n-            startDay=\'test_start_day\',\n-            first_day=4,\n-        ),\n-    ),\n-))\n-\n-\n-class RecurrenceType(SimpleType):\n-    """A simple archetype"""\n-    schema = schema\n-    archetype_name = meta_type = "RecurrenceType"\n-    portal_type = \'RecurrenceType\'\n-\n-\n-registerType(RecurrenceType, \'plone.formwidget.recurrence.tests.at_example\')\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml\ndeleted file mode 100644\nindex 623d1ee..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-<?xml version="1.0"?>\n-<archetypetool>\n- <catalogmap>\n-  <type portal_type="RecurrenceType">\n-   <catalog value="portal_catalog"/>\n-  </type>\n- </catalogmap>\n-</archetypetool>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml\ndeleted file mode 100644\nindex cf4492a..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<?xml version="1.0"?>\n-<metadata>\n-  <version>1</version>\n-</metadata>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml\ndeleted file mode 100644\nindex 7845b26..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n- <object name="RecurrenceType" meta_type="Factory-based Type Information"/>\n-</object>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml\ndeleted file mode 100644\nindex db35b69..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml\n+++ /dev/null\n@@ -1,36 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="RecurrenceType" meta_type="Factory-based Type Information"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">Recurrence Type</property>\n- <property name="description">A simple archetype with a recurrence field</property>\n- <property name="content_icon">document_icon.gif</property>\n- <property name="content_meta_type">RecurrenceType</property>\n- <property name="product">plone.formwidget.recurrence.tests.at_example</property>\n- <property name="factory">addRecurrenceType</property>\n- <property name="immediate_view">base_edit</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="allowed_content_types"/>\n- <property name="allow_discussion">False</property>\n- <alias from="(Default)" to="base_view"/>\n- <alias from="edit" to="base_edit"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    url_expr="string:${object_url}/base_view" visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    url_expr="string:${object_url}/base_edit" visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n- <action title="Properties" action_id="metadata" category="object"\n-    condition_expr="" url_expr="string:${object_url}/base_metadata"\n-    visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n- <action title="References" action_id="references" category="object"\n-    condition_expr="object/archetype_tool/has_graphviz"\n-    url_expr="string:${object_url}/reference_graph" visible="True">\n-  <permission value="Modify portal content"/>\n-  <permission value="Review portal content"/>\n- </action>\n-</object>\ndiff --git a/plone/formwidget/recurrence/tests/test_atwidget.py b/plone/formwidget/recurrence/tests/test_atwidget.py\ndeleted file mode 100644\nindex f7a0c31..0000000\n--- a/plone/formwidget/recurrence/tests/test_atwidget.py\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-from Products.Archetypes.tests.utils import makeContent\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.formwidget.recurrence.tests.base import FunctionalTestCase\n-from plone.testing.z2 import Browser\n-\n-import transaction\n-\n-\n-TESTVALUE = "FREQ=MONTHLY;BYDAY=+3TU;COUNT=5"\n-\n-\n-class ATWidgetTestCase(FunctionalTestCase):\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.folder = self.portal[\'test-folder\']\n-\n-        self.obj = makeContent(\n-            self.folder, portal_type=\'RecurrenceType\', id=\'testobj\'\n-        )\n-        self.field = self.obj.getField(\'rec\')\n-        self.widget = self.field.widget\n-\n-        login(self.portal, TEST_USER_NAME)\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.browser.handleErrors = False\n-        transaction.commit()\n-\n-    def tearDown(self):\n-        super(ATWidgetTestCase, self).tearDown()\n-        self.portal.manage_delObjects([\'test-folder\'])\n-        transaction.commit()\n-\n-    def test_widget_properties(self):\n-        widget = self.widget\n-        self.assertEqual(widget.macro_edit, \'recurrence_widget\')\n-        self.assertTrue(widget.startField == \'test_start_field\')\n-        self.assertTrue(widget.startYear == \'test_start_year\')\n-        self.assertTrue(widget.startMonth == \'test_start_month\')\n-        self.assertTrue(widget.startDay == \'test_start_day\')\n-        self.assertTrue(widget.first_day == 4)\n-\n-    def test_widget_process(self):\n-        self.assertFalse(self.widget.process_form(self.obj, self.field, {}))\n-        self.assertEqual(\n-            self.widget.process_form(self.obj, self.field, {\'rec\': TESTVALUE}),\n-            (TESTVALUE, {})\n-        )\n-\n-    def test_widget_rendering(self):\n-        self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' %\n-            (TEST_USER_NAME, TEST_USER_PASSWORD,)\n-        )\n-        self.browser.open(self.obj.absolute_url())\n-        self.browser.getLink(\'Edit\').click()\n-        self.assertIn(\'Recurrence\', self.browser.contents)\ndiff --git a/plone/formwidget/recurrence/z3cform/widget.py b/plone/formwidget/recurrence/z3cform/widget.py\nindex 13957a1..0c48580 100644\n--- a/plone/formwidget/recurrence/z3cform/widget.py\n+++ b/plone/formwidget/recurrence/z3cform/widget.py\n@@ -35,7 +35,6 @@ def get_start_field(self):\n         if hasattr(self.form.widgets[self.start_field], \'js_field\'):\n             return self.form.widgets[self.start_field].js_field\n         if hasattr(self.form.widgets[self.start_field], \'name\'):\n-            # plone.app.widgets passes name instead of id to input\n             return self.form.widgets[self.start_field].name\n         return self.form.widgets[self.start_field].id\n \ndiff --git a/setup.py b/setup.py\nindex f6a1c2c..fc6cca8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -12,19 +12,15 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone Event Recurrence Date Time Widget Archetypes z3c.form\',\n+    keywords=\'Plone Event Recurrence Date Time Widget z3c.form\',\n     author=\'Plone Foundation\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n     url=\'https://github.com/plone/plone.formwidget.recurrence\',\n@@ -32,6 +28,7 @@\n     packages=find_packages(),\n     namespace_packages=[\'plone\', \'plone.formwidget\'],\n     include_package_data=True,\n+    python_requires=">=3.8",\n     zip_safe=False,\n     install_requires=[\n         \'setuptools\',\n@@ -49,16 +46,10 @@\n             \'zope.schema\',\n             \'zope.traversing\',\n         ],\n-        archetypes=[\n-            \'Products.Archetypes\',\n-            \'Products.validation\',\n-        ],\n         test=[\n-            \'Products.ATContentTypes\',\n-            \'Products.GenericSetup\',\n             \'plone.app.testing\',\n+            \'plone.testing\',\n             \'plone.app.z3cform\',\n-            \'plone.formwidget.recurrence[archetypes, z3cform]\',\n         ]\n     ),\n     entry_points="""\n'

Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-12T08:11:19+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/f608649c38f68646486d5fed1c469acbc9c1c629

cleanup tests and bump version

Files changed:
M plone/formwidget/recurrence/profiles/default/metadata.xml
M plone/formwidget/recurrence/tests/base.py
M plone/formwidget/recurrence/tests/test_z3cwidget.py
M plone/formwidget/recurrence/z3cform/recurrence_input.pt
M plone/formwidget/recurrence/z3cform/widget.py
M setup.py

b'diff --git a/plone/formwidget/recurrence/profiles/default/metadata.xml b/plone/formwidget/recurrence/profiles/default/metadata.xml\nindex a44cc34..b6bd42a 100644\n--- a/plone/formwidget/recurrence/profiles/default/metadata.xml\n+++ b/plone/formwidget/recurrence/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>3</version>\n+  <version>3000</version>\n </metadata>\ndiff --git a/plone/formwidget/recurrence/tests/base.py b/plone/formwidget/recurrence/tests/base.py\nindex 7185684..a9f4ce4 100644\n--- a/plone/formwidget/recurrence/tests/base.py\n+++ b/plone/formwidget/recurrence/tests/base.py\n@@ -1,14 +1,10 @@\n """Base module for unittesting"""\n-from Products.CMFPlone.utils import getFSVersionTuple\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n-from plone.testing import z2\n-import unittest\n-\n \n-PLONE5 = getFSVersionTuple()[0] >= 5\n+import unittest\n \n \n class PloneFormwidgetRecurrenceLayer(PloneSandboxLayer):\n@@ -17,34 +13,17 @@ class PloneFormwidgetRecurrenceLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         """Set up Zope."""\n-        # Load ZCML\n-        import plone.formwidget.recurrence\n-        self.loadZCML(package=plone.formwidget.recurrence)\n \n-        import plone.formwidget.recurrence.tests.at_example  # install AT example types  # noqa\n-        self.loadZCML(package=plone.formwidget.recurrence.tests.at_example)\n-        z2.installProduct(app, \'plone.formwidget.recurrence.tests.at_example\')\n+        import plone.app.z3cform\n+        self.loadZCML(package=plone.app.z3cform)\n \n-        z2.installProduct(app, \'Products.ATContentTypes\')\n+        import plone.formwidget.recurrence\n+        self.loadZCML(package=plone.formwidget.recurrence)\n \n     def setUpPloneSite(self, portal):\n         """Set up Plone."""\n-        if PLONE5:\n-            # Install Products.ATContentTypes profile only for versions, where\n-            # it\'s available\n-            self.applyProfile(portal, \'Products.ATContentTypes:default\')\n-        # install at example types\n-        self.applyProfile(\n-            portal,\n-            \'plone.formwidget.recurrence.tests.at_example:sample_types\'\n-        )\n-\n         self.applyProfile(portal, \'plone.formwidget.recurrence:default\')\n \n-    def tearDownZope(self, app):\n-        """Tear down Zope."""\n-        z2.uninstallProduct(app, \'plone.formwidget.recurrence.tests.at_example\')  # noqa\n-\n \n FIXTURE = PloneFormwidgetRecurrenceLayer()\n INTEGRATION_TESTING = IntegrationTesting(\ndiff --git a/plone/formwidget/recurrence/tests/test_z3cwidget.py b/plone/formwidget/recurrence/tests/test_z3cwidget.py\nindex 36d7b7c..f35c217 100644\n--- a/plone/formwidget/recurrence/tests/test_z3cwidget.py\n+++ b/plone/formwidget/recurrence/tests/test_z3cwidget.py\n@@ -6,10 +6,10 @@\n from z3c.form.testing import TestRequest\n from zope.schema.fieldproperty import FieldProperty\n \n+import json\n import zope.interface\n import zope.schema\n \n-\n class ITestForm(zope.interface.Interface):\n     recurrence = zope.schema.Text(title=u\'Recurrence\', required=True)\n     day = zope.schema.Date(title=u\'Day\', required=True)\n@@ -36,18 +36,33 @@ class Z3CWidgetTestCase(IntegrationTestCase):\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n-\n-    def test_widget_rendering(self):\n         request = TestRequest()\n         request.LANGUAGE = \'en\'\n         form = TestAddForm(self.portal, request)\n         form.update()\n \n-        widget = RecurrenceFieldWidget(form.fields[\'recurrence\'].field,\n-                                       request)\n-        widget.form = form\n-        widget.start_field = \'day\'\n-        widget.update()\n+        self.widget = RecurrenceFieldWidget(\n+            form.fields[\'recurrence\'].field, request)\n \n-        html = widget.render()\n-        self.assertIn(\'recurrence\', html)\n+        self.widget.form = form\n+        self.widget.start_field = \'day\'\n+        self.widget.update()\n+\n+    def test_widget_options(self):\n+        pat_options = json.loads(self.widget.get_pattern_options())\n+        self.assertEqual({\n+                \'ajaxContentType\': \'application/x-www-form-urlencoded; charset=UTF-8\',\n+                \'ajaxURL\': \'http://nohost/plone/@@json_recurrence\',\n+                \'firstDay\': 7,\n+                \'hasRepeatForeverButton\': True,\n+                \'lang\': \'en\',\n+                \'readOnly\': False,\n+                \'ributtonExtraClass\': \'allowMultiSubmit\',\n+                \'startField\': \'form.widgets.day\',\n+            },\n+            pat_options["configuration"],\n+        )\n+\n+    def test_widget_rendering(self):\n+        html = self.widget.render()\n+        self.assertIn(\'pat-recurrence\', html)\ndiff --git a/plone/formwidget/recurrence/z3cform/recurrence_input.pt b/plone/formwidget/recurrence/z3cform/recurrence_input.pt\nindex 28e37c4..8100936 100644\n--- a/plone/formwidget/recurrence/z3cform/recurrence_input.pt\n+++ b/plone/formwidget/recurrence/z3cform/recurrence_input.pt\n@@ -1,16 +1,14 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       tal:omit-tag="">\n-<textarea test=""\n-   class="pat-recurrence"\n-   tal:attributes="id view/id;\n-                   name view/name;\n-                   style view/style;\n-                   title view/title;\n-                   data-pat-recurrence python: view.get_pattern_options()"\n-   tal:content="view/value"\n-   condition="python:view.read_only() != \'true\'"/>\n-<tal:block condition="python:view.read_only() == \'true\'">\n-  <span style="display:none;" tal:attributes="id string:${view/id}-start;name string:${view/name}-start" tal:content="view/get_start_date"/>\n-</tal:block>\n+  <textarea\n+    class="pat-recurrence"\n+    tal:attributes="id view/id;\n+                    name view/name;\n+                    style view/style;\n+                    title view/title;\n+                    data-pat-recurrence python: view.get_pattern_options()"\n+    tal:content="view/value"\n+    tal:condition="python:view.read_only != \'true\'"/>\n+  <span tal:condition="python:view.read_only == \'true\'" style="display:none;" tal:attributes="id string:${view/id}-start;name string:${view/name}-start" tal:content="view/get_start_date"/>\n </html>\ndiff --git a/plone/formwidget/recurrence/z3cform/widget.py b/plone/formwidget/recurrence/z3cform/widget.py\nindex 0c48580..167c3b1 100644\n--- a/plone/formwidget/recurrence/z3cform/widget.py\n+++ b/plone/formwidget/recurrence/z3cform/widget.py\n@@ -26,6 +26,7 @@ class RecurrenceWidget(TextAreaWidget):\n     def site_url(self):\n         return absoluteURL(getSite(), self.request)\n \n+    @property\n     def read_only(self):\n         return self.mode == \'display\'\n \n@@ -60,7 +61,7 @@ def get_pattern_options(self):\n             firstDay=self.first_day(),\n             hasRepeatForeverButton=self.show_repeat_forever,\n             lang=self.request.LANGUAGE,\n-            readOnly=self.read_only(),\n+            readOnly=self.read_only,\n             ributtonExtraClass=\'allowMultiSubmit\',\n             startField=self.get_start_field(),\n         )\ndiff --git a/setup.py b/setup.py\nindex fc6cca8..cfe3ed7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n from setuptools import setup, find_packages\n \n \n-version = \'2.1.6.dev0\'\n+version = \'3.0.0.dev0\'\n \n setup(\n     name=\'plone.formwidget.recurrence\',\n'

Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-12T08:11:35+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/70e1d82ef54248435762f64bcea12f1838fd50e0

setup mxdev and GHA

Files changed:
A Makefile
A constraints.txt
A instance.yaml
A requirements.txt
A sources.ini
M .gitignore
D bootstrap.py
D buildout.cfg

b'diff --git a/.gitignore b/.gitignore\nindex 738f440..41dc9a3 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -6,3 +6,11 @@\n dist/\n !.gitattributes\n !.gitignore\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..3810634\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,337 @@\n+# Makefile to configure and run Plone instance\n+\n+##############################################################################\n+# SETUP MAKE\n+\n+## Defensive settings for make: https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+# for Makefile debugging purposes add -x to the .SHELLFLAGS\n+.SHELLFLAGS:=-eu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# Colors\n+# OK=Green, warn=yellow, error=red\n+ifeq ($(TERM),)\n+# no colors if not in terminal\n+\tMARK_COLOR=\n+\tOK_COLOR=\n+\tWARN_COLOR=\n+\tERROR_COLOR=\n+\tNO_COLOR=\n+else\n+\tMARK_COLOR=`tput setaf 6`\n+\tOK_COLOR=`tput setaf 2`\n+\tWARN_COLOR=`tput setaf 3`\n+\tERROR_COLOR=`tput setaf 1`\n+\tNO_COLOR=`tput sgr0`\n+endif\n+\n+##############################################################################\n+# SETTINGS AND VARIABLE\n+# adjust to your project needs\n+PROJECT_NAME=plone.formwidget.recurrence\n+IMAGE_NAME=${PROJECT_NAME}\n+CONSTRAINTS_IN=constraints.txt\n+CONSTRAINTS_IN=constraints.txt\n+CONSTRAINTS_MXDEV=constraints-mxdev.txt\n+PIP_REQUIREMENTS_IN_FILE=requirements.txt\n+ADDONBASE=./\n+ADDONFOLDER=${ADDONBASE}\n+INSTANCE_YAML=instance.yaml\n+INSTANCE_FOLDER=instance\n+\n+PIP_PARAMS= --pre\n+\n+##############################################################################\n+# targets and prerequisites\n+# target has to be one file, otherwise step gets executes for each file separate\n+PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS_IN} sources.ini ${ADDONBASE}setup.cfg\n+PREPARE_TARGET=requirements-mxdev.txt\n+INSTALL_PREREQUSISTES=${PREPARE_TARGET}\n+INSTALL_TARGET=.installed.txt\n+INSTANCE_PREREQUISITES=${INSTALL_TARGET} ${INSTANCE_YAML}\n+INSTANCE_TARGET=${INSTANCE_FOLDER}/etc/zope.ini ${INSTANCE_FOLDER}/etc/zope.conf ${INSTANCE_FOLDER}/etc/site.zcml\n+TEST_PREREQUISITES=${INSTALL_TARGET}\n+RUN_PREREQUISITES=${INSTANCE_TARGET}\n+\n+##############################################################################\n+# CONVINIENCE\n+\n+# install and run\n+.PHONY: all # full install, test and run\n+all:style test run\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@echo "${OK_COLOR}This is the Makefile for ${WARN_COLOR}${PROJECT_NAME}${NO_COLOR}"\n+\t@echo\n+\t@echo "${WARN_COLOR}Additional parameters:${NO_COLOR}"\n+\t@echo "${MARK_COLOR}PYTHON${NO_COLOR}:       python interpreter to be used (default: python3)"\n+\t@echo "${MARK_COLOR}VENV${NO_COLOR}:        [on|off] wether to create a Python virtual environment or not (default: on)"\n+\t@echo "${MARK_COLOR}VENV_FOLDER${NO_COLOR}: location of the virtual environment (default: ./venv)"\n+\t@echo\n+\t@echo "${WARN_COLOR}Targets:${NO_COLOR}"\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+##############################################################################\n+# targets and prerequisites\n+# target has to be one file, otherwise step gets executes for each file separate\n+PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS_IN} sources.ini ${ADDONBASE}setup.cfg\n+PREPARE_TARGET=requirements-mxdev.txt\n+INSTALL_PREREQUSISTES=${PREPARE_TARGET}\n+INSTALL_TARGET=.installed.txt\n+INSTANCE_PREREQUISITES=${INSTALL_TARGET} ${INSTANCE_YAML}\n+INSTANCE_TARGET=${INSTANCE_FOLDER}/etc/zope.ini ${INSTANCE_FOLDER}/etc/zope.conf ${INSTANCE_FOLDER}/etc/site.zcml\n+TEST_PREREQUISITES=${INSTALL_TARGET}\n+RUN_PREREQUISITES=${INSTANCE_TARGET}\n+\n+##############################################################################\n+# BASE\n+\n+SENTINELFOLDER=.make-sentinels/\n+SENTINEL=${SENTINELFOLDER}ABOUT.txt\n+${SENTINEL}:\n+\t@mkdir -p ${SENTINELFOLDER}\n+\t@echo "Sentinels for the Makefile process." > ${SENTINEL}\n+\n+# PYTHON, VENV, PIP\n+# venv and pybin\n+PYTHON?=python3\n+VENV?=on\n+ifeq ("${VENV}", "on")\n+\tVENV_FOLDER?=./venv\n+\tPYBIN=${VENV_FOLDER}/bin/\n+else\n+\tVENV_FOLDER?=\n+\tifneq ("${VENV_FOLDER}", "")\n+\t\tPYBIN=${VENV_FOLDER}/bin/\n+\t\tPYTHON=${PYBIN}python\n+\telse\n+\t\tPYBIN=\n+\tendif\n+endif\n+\n+# installed?\n+ifeq (, $(shell which $(PYTHON) ))\n+  $(error "PYTHON=$(PYTHON) not found in $(PATH)")\n+endif\n+\n+# version ok?\n+PYTHON_VERSION_MIN=3.7\n+PYTHON_VERSION_OK=$(shell $(PYTHON) -c \'import sys; print(int(sys.version_info[0:2] >= tuple(map(int, "$(PYTHON_VERSION_MIN)".split(".")))))\' )\n+\n+ifeq ($(PYTHON_VERSION_OK),0)\n+  $(error "Need python $(PYTHON_VERSION) >= $(PYTHON_VERSION_MIN)")\n+endif\n+\n+VENV_SENTINEL=${SENTINELFOLDER}venv.sentinel\n+${VENV_SENTINEL}: ${SENTINEL}\n+ifeq ("${VENV}", "on")\n+\t@echo "$(OK_COLOR)Setup Python Virtual Environment under \'${VENV_FOLDER}\' $(NO_COLOR)"\n+\t@${PYTHON} -m venv ${VENV_FOLDER}\n+else\n+\t@echo "$(OK_COLOR)Use current local or global Python: `which ${PYTHON}` $(NO_COLOR)"\n+endif\n+\t@touch ${VENV_SENTINEL}\n+\n+PIP_SENTINEL=${SENTINELFOLDER}pip.sentinel\n+${PIP_SENTINEL}: ${VENV_SENTINEL} ${CONSTRAINTS_IN} ${SENTINEL}\n+\t@echo "$(OK_COLOR)Install pip $(NO_COLOR)"\n+\t@${PYBIN}pip install "pip>=22" wheel\n+\t@touch ${PIP_SENTINEL}\n+\n+##############################################################################\n+# MXDEV\n+\n+MXDEV_SENTINEL=${SENTINELFOLDER}pip-mxdev.sentinel\n+${MXDEV_SENTINEL}: ${PIP_SENTINEL}\n+\t@echo "$(OK_COLOR)Install mxdev$(NO_COLOR)"\n+\t@${PYBIN}pip install mxdev libvcs==0.11.1\n+\t@touch ${MXDEV_SENTINEL}\n+\n+.PHONY: prepare\n+prepare: ${PREPARE_TARGET} ## prepare soures and dependencies\n+\n+${PREPARE_PREREQUISITES}:\n+\t@touch $@\n+\n+${PREPARE_TARGET}: ${MXDEV_SENTINEL} ${PREPARE_PREREQUISITES}\n+\t@echo "$(OK_COLOR)Prepare sources and dependencies$(NO_COLOR)"\n+\t@${PYBIN}mxdev -c sources.ini\n+\n+.PHONY: install\n+install: ${INSTALL_TARGET} ## pip install all dependencies and scripts\n+\n+${INSTALL_TARGET}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install dependencies and scripts$(NO_COLOR)"\n+\t@${PYBIN}pip install -r ${PREPARE_TARGET} ${PIP_PARAMS}\n+\t@${PYBIN}pip freeze >${INSTALL_TARGET}\n+\n+##############################################################################\n+# INSTANCE\n+\n+COOKIECUTTER_SENTINEL=${SENTINELFOLDER}pip-cookiecutter.sentinel\n+${COOKIECUTTER_SENTINEL}:\n+\t@echo "$(OK_COLOR)Install cookiecutter$(NO_COLOR)"\n+\t@${PYBIN}pip install git+https://github.com/cookiecutter/cookiecutter.git#egg=cookiecutter\n+\t@touch ${COOKIECUTTER_SENTINEL}\n+\n+${INSTANCE_YAML}:\n+\t@touch ${INSTANCE_YAML}\n+\n+.PHONY: instance\n+instance: ${INSTANCE_TARGET} ## create configuration for an zope (plone) instance\n+\n+${INSTANCE_TARGET}: ${INSTANCE_PREREQUISITES} ${COOKIECUTTER_SENTINEL}\n+\t@echo "$(OK_COLOR)Create Plone/Zope configuration$(NO_COLOR)"\n+\t@${PYBIN}cookiecutter -f --no-input --config-file ${INSTANCE_YAML} https://github.com/bluedynamics/cookiecutter-zope-instance\n+##############################################################################\n+# TESTING\n+\n+TESTRUNNER_SENTINEL=${SENTINELFOLDER}pip-testrunner.sentinel\n+${TESTRUNNER_SENTINEL}: ${PIP_SENTINEL}\n+\t@echo "$(OK_COLOR)Install zope.testrunner$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} zope.testrunner\n+\t@touch ${TESTRUNNER_SENTINEL}\n+\n+.PHONY: test\n+test: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL} ## run tests\n+\t@echo "$(OK_COLOR)Run addon tests$(NO_COLOR)"\n+\t@${PYBIN}zope-testrunner --auto-color --auto-progress --test-path=${ADDONFOLDER}\n+\n+.PHONY: test-ignore-warnings\n+test-ignore-warnings: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL}  ## run tests (hide warnins)\n+\t@echo "$(OK_COLOR)Run addon tests$(NO_COLOR)"\n+\t@PYTHONWARNINGS=ignore ${PYBIN}zope-testrunner --auto-color --auto-progress --test-path=${ADDONFOLDER}\n+\n+##############################################################################\n+# CODE FORMATTING\n+\n+BLACK_SENTINEL=${SENTINELFOLDER}pip-black.sentinel\n+${BLACK_SENTINEL}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install black$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} black\n+\t@touch ${BLACK_SENTINEL}\n+\n+ISORT_SENTINEL=${SENTINELFOLDER}pip-isort.sentinel\n+${ISORT_SENTINEL}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install isort$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} isort\n+\t@touch ${ISORT_SENTINEL}\n+\n+ZPRETTY_SENTINEL=${SENTINELFOLDER}pip-zpretty.sentinel\n+${ZPRETTY_SENTINEL}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install zpretty$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} "zpretty>=2.2.0"\n+\t@touch ${ZPRETTY_SENTINEL}\n+\n+.PHONY: apply-style-black\n+apply-style-black: ${BLACK_SENTINEL}  ## apply/format code style black (to Python files)\n+\t@echo "$(OK_COLOR)Apply style black rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}black ${ADDONFOLDER}\n+\n+.PHONY: apply-style-isort\n+apply-style-isort: ${ISORT_SENTINEL} ## apply/format code style isort (sorted imports in Python files)\n+\t@echo "$(OK_COLOR)Apply style isort rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}isort ${ADDONFOLDER}\n+\n+.PHONY: apply-style-zpretty\n+apply-style-zpretty: ${ZPRETTY_SENTINEL}   ## apply/format code style zpretty (to XML/ZCML files)\n+\t@echo "$(OK_COLOR)Apply style zpretty rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@find ${ADDONFOLDER} -name \'*.zcml\' -exec ${PYBIN}zpretty -iz {} +\n+\t@find ${ADDONFOLDER} -name "*.xml"|grep -v locales|xargs ${PYBIN}zpretty -ix\n+\n+.PHONY: style ## apply code styles black, isort and zpretty\n+style: apply-style-black apply-style-isort ## apply-style-zpretty\n+\n+.PHONY: format ## alias for "style"\n+FORMATTING: style\n+\n+.PHONY: lint-black\n+lint-black: ${BLACK_SENTINEL}  ## lint code-style black (to Python files)\n+\t@echo "$(OK_COLOR)Lint black rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}black --check ${ADDONFOLDER}\n+\n+.PHONY: lint-isort\n+lint-isort: ${ISORT_SENTINEL} ## lint code-style isort (sorted imports in Python files)\n+\t@echo "$(OK_COLOR)Apply style isort rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}isort --check-only ${ADDONFOLDER}\n+\n+.PHONY: lint-zpretty\n+lint-zpretty: ${ZPRETTY_SENTINEL}   ## lint code-style zpretty (to XML/ZCML files)\n+\t@echo "$(OK_COLOR)Apply style zpretty rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@find ${ADDONFOLDER} -name \'*.zcml\' -exec ${PYBIN}zpretty --check -z {} +\n+\t@find ${ADDONFOLDER} -name \'*.xml\'|grep -v locales|xargs ${PYBIN}zpretty --check -x\n+\n+.PHONY: lint ## lint all: check if complies with code-styles black, isort and zpretty\n+lint: lint-black lint-isort ## lint-zpretty\n+\n+##############################################################################\n+# RUN\n+\n+.PHONY: run\n+run: ${RUN_PREREQUISITES} ## run/start Plone\n+\t@echo "$(OK_COLOR)Run Plone$(NO_COLOR)"\n+\t@${PYBIN}runwsgi -v instance/etc/zope.ini\n+\n+##############################################################################\n+# NODE\n+\n+.PHONY: node\n+node: # yarn install\n+\t@echo "$(OK_COLOR)Yarn install$(NO_COLOR)"\n+\tyarn install\n+\n+##############################################################################\n+# CLEAN\n+.PHONY: clean-venv\n+clean-venv: ## remove Python virtual environment\n+ifeq ("${VENV}", "on")\n+\t@echo "$(OK_COLOR)Remove Virtualenv.$(NO_COLOR)"\n+\trm -rf ${VENV_FOLDER} ${SENTINELFOLDER}/pip*.sentinel ${VENV_SENTINEL}\n+else:\n+\t@echo "$(OK_WARN)No self-created Python virtualenv at \'${VENV_FOLDER}\'! Nothing to do.$(NO_COLOR)"\n+endif\n+\n+.PHONY: clean-pyc\n+clean-pyc: ## remove Python file artifacts\n+\t@echo "$(OK_COLOR)Remove Python file artifacts (like byte-code) of code in current directory.$(NO_COLOR)"\n+\tfind . -name \'*.py[c|o]\' -delete\n+\tfind . -name \'*.mo\' -delete\n+\tfind . -name \'*~\' -exec rm -f {} +\n+\tfind . -name \'__pycache__\' -exec rm -fr {} +\n+\n+.PHONY: clean-make\n+clean-make:  ## remove make artifact\t@echo "$(OK_COLOR)Remove Plone/Zope configuration (keeps data) and sentinel files.$(NO_COLOR)"\n+\trm -rf ${INSTALL_PREREQUSISTES} ${INSTANCE_TARGET} ${SENTINELFOLDER}\n+\n+.PHONY: clean-instance\n+clean-instance:  ## remove instance configuration (keeps data)\n+\t@echo "$(OK_COLOR)Remove Plone/Zope configuration (keeps data) and sentinel files.$(NO_COLOR)"\n+\trm -f ${INSTANCE_TARGET}\n+\n+.PHONY: clean-node\n+clean-node:  ## remove instance configuration (keeps data)\n+\t@echo "$(OK_COLOR)Remove npm/yarn installation.$(NO_COLOR)"\n+\trm -rf ${ADDONBASE}/node_modules\n+\n+.PHONY: clean\n+clean:  clean-venv clean-pyc clean-make clean-instance clean-node  ## clean all (except local database and pip installed packages)\n+\n+##############################################################################\n+# DOCKER/CONTAINER\n+\n+# this needs a Dockerfile, which is not provided by plone-kickstarter\n+.PHONY: build-image\n+build-image:  ## Build Docker Image\n+ifneq ("$(wildcard Dockerfile)", "")\n+\t@docker build . -t $(IMAGE_NAME) -f Dockerfile\n+else\n+\t@echo "$(ERROR_COLOR)A \'Dockerfile\' is required to build an image.$(NO_COLOR)"\n+endif\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex ddaf64a..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-[buildout]\n-extends =\n-    http://dist.plone.org/release/4.3-latest/versions.cfg\n-parts =\n-    zopepy\n-    i18ndude\n-    test\n-\n-develop = .\n-\n-[zopepy]\n-recipe = zc.recipe.egg\n-eggs = ${test:eggs}\n-interpreter = zopepy\n-scripts = zopepy\n-\n-[i18ndude]\n-unzip = true\n-recipe = zc.recipe.egg\n-eggs = i18ndude\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-defaults = [\'-s\', \'plone.formwidget.recurrence\', \'--auto-color\', \'--auto-progress\']\n-eggs =\n-    Plone\n-    Pillow\n-    plone.formwidget.recurrence [test]\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 0000000..42908cf\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1 @@\n+-r https://dist.plone.org/release/6.0-dev/requirements.txt\ndiff --git a/instance.yaml b/instance.yaml\nnew file mode 100644\nindex 0000000..852c62b\n--- /dev/null\n+++ b/instance.yaml\n@@ -0,0 +1,17 @@\n+---\n+# This is a cookiecutter configuration context file for\n+#\n+#   cookiecutter-zope-instance\n+#\n+# available options are documented at\n+# https://github.com/bluedynamics/cookiecutter-zope-instance/\n+#\n+# read also README_MAKE.md in this folder\n+#\n+default_context:\n+    wsgi_http_listen: localhost:8080\n+    initial_user_name: admin\n+    initial_user_password: admin\n+    load_zcml:\n+        package_includes: []\n+    db_storage: direct\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..54fc492\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,5 @@\n+-c constraints.txt\n+-e .[test] --install-option="--pre"\n+\n+# WSGI: A system for configuration of WSGI web components in declarative .ini format.\n+Paste\ndiff --git a/sources.ini b/sources.ini\nnew file mode 100644\nindex 0000000..e7b74cf\n--- /dev/null\n+++ b/sources.ini\n@@ -0,0 +1,25 @@\n+[settings]\n+# This is a mxdev configuration file\n+#\n+# available options are documented at\n+# https://pypi.org/project/mxdev/\n+#\n+# read also README_MAKE.md in this folder\n+#\n+requirements-in = requirements.txt\n+requirements-out = requirements-mxdev.txt\n+\n+# ignore own dev-package from existing constraints\n+# because it is pinned in the plone-release\n+ignores =\n+    plone.formwidget.recurrence\n+\n+version-overrides =\n+\n+# variables\n+# github = git+ssh://git@github.com/\n+github = git+https://github.com/\n+\n+# [collective.themefragments]\n+# url = ${settings:github}/collective/collective.themefragments.git\n+# mode = skip\n'

Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-12T08:14:55+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/854ff696f7720a5bacc8d64447e6ec43f8b33392

add GHA config

Files changed:
A .github/workflows/plone-package-test.yml
M .gitignore

b'diff --git a/.github/workflows/plone-package-test.yml b/.github/workflows/plone-package-test.yml\nnew file mode 100644\nindex 0000000..d4529dc\n--- /dev/null\n+++ b/.github/workflows/plone-package-test.yml\n@@ -0,0 +1,42 @@\n+name: Test the plone.formwidget.recurrence code\n+\n+on:\n+  push:\n+    branches-ignore:\n+      - "master"\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python:\n+          - "3.8"\n+          - "3.9"\n+          - "3.10"\n+          - "3.11"\n+        plone:\n+          - "6.0-dev"\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+\n+      - name: Setup Plone ${{ matrix.plone }} with Python ${{ matrix.python }}\n+        id: setup\n+        uses: plone/setup-plone@v1.0.0\n+        with:\n+          python-version: ${{ matrix.python }}\n+          plone-version: ${{ matrix.plone }}\n+\n+      - name: Install package\n+        run: |\n+          make VENV=off install\n+\n+      - name: Run Lint\n+        run: |\n+          make VENV=off lint\n+\n+      - name: Run tests\n+        run: |\n+          make VENV=off test-ignore-warnings\ndiff --git a/.gitignore b/.gitignore\nindex 41dc9a3..77c26ae 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,11 +1,11 @@\n *.egg-info\n *.mo\n *.py?\n-.*\n *~\n dist/\n !.gitattributes\n !.gitignore\n+news/.*\n \n # mxdev\n /instance/\n@@ -14,3 +14,4 @@ dist/\n /reports/\n /sources/\n /venv/\n+.installed.txt\n'

Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-12T08:17:47+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/0ea90be4e734f25a6113ce10cc11001e5ce7da2f

black, isort

Files changed:
M plone/__init__.py
M plone/formwidget/__init__.py
M plone/formwidget/recurrence/__init__.py
M plone/formwidget/recurrence/browser/i18n.py
M plone/formwidget/recurrence/browser/json_recurrence.py
M plone/formwidget/recurrence/tests/base.py
M plone/formwidget/recurrence/tests/test_z3cwidget.py
M plone/formwidget/recurrence/z3cform/field.py
M plone/formwidget/recurrence/z3cform/interfaces.py
M plone/formwidget/recurrence/z3cform/widget.py
M setup.cfg
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/formwidget/__init__.py b/plone/formwidget/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/formwidget/__init__.py\n+++ b/plone/formwidget/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/formwidget/recurrence/__init__.py b/plone/formwidget/recurrence/__init__.py\nindex c767d6b..d2bc5b1 100644\n--- a/plone/formwidget/recurrence/__init__.py\n+++ b/plone/formwidget/recurrence/__init__.py\n@@ -1,4 +1,5 @@\n from zope.i18nmessageid import MessageFactory\n \n-_ = MessageFactory(\'plone\')\n-pl_message = MessageFactory(\'plonelocales\')\n+\n+_ = MessageFactory("plone")\n+pl_message = MessageFactory("plonelocales")\ndiff --git a/plone/formwidget/recurrence/browser/i18n.py b/plone/formwidget/recurrence/browser/i18n.py\nindex 84c9fa8..702fafd 100644\n--- a/plone/formwidget/recurrence/browser/i18n.py\n+++ b/plone/formwidget/recurrence/browser/i18n.py\n@@ -5,137 +5,165 @@\n \n def translations(request):\n     translation_table = dict(\n-        displayUnactivate=translate(_(u\'display_unactivate\'), context=request),\n-        displayActivate=translate(_(u\'display_activate\'), context=request),\n-        add_rules=translate(_(u\'add_rules\'), context=request),\n-        edit_rules=translate(_(u\'edit_rules\'), context=request),\n-        delete_rules=translate(_(u\'delete_rules\'), context=request),\n-        add=translate(_(u\'add\'), context=request),\n-        refresh=translate(_(u\'refresh\'), context=request),\n-        title=translate(_(u\'title\'), context=request),\n-        preview=translate(_(u\'preview\'), context=request),\n-        addDate=translate(_(u\'add_date\'), context=request),\n-        recurrenceType=translate(_(u\'recurrence_type\'), context=request),\n-        dailyInterval1=translate(_(u\'daily_interval_1\'), context=request),\n-        dailyInterval2=translate(_(u\'daily_interval_2\'), context=request),\n-        weeklyInterval1=translate(_(u\'weekly_interval_1\'), context=request),\n-        weeklyInterval2=translate(_(u\'weekly_interval_2\'), context=request),\n-        weeklyWeekdays=translate(_(u\'weekly_weekdays\'), context=request),\n-        weeklyWeekdaysHuman=translate(_(u\'weekly_weekdays_human\'), context=request),\n-        monthlyInterval1=translate(_(u\'monthly_interval_1\'), context=request),\n-        monthlyInterval2=translate(_(u\'monthly_interval_2\'), context=request),\n-        monthlyDayOfMonth1=translate(_(u\'monthly_day_of_month_1\'), context=request),\n-        monthlyDayOfMonth1Human=translate(_(u\'monthly_day_of_month_1_human\'), context=request),\n-        monthlyDayOfMonth2=translate(_(u\'monthly_day_of_month_2\'), context=request),\n-        monthlyDayOfMonth3=translate(_(u\'monthly_day_of_month_3\'), context=request),\n-        monthlyDayOfMonth4=translate(_(u\'monthly_day_of_month_4\'), context=request),\n-        monthlyWeekdayOfMonth1=translate(_(u\'monthly_weekday_of_month_1\'), context=request),\n-        monthlyWeekdayOfMonth1Human=translate(_(u\'monthly_weekday_of_month_1_human\'), context=request),\n-        monthlyWeekdayOfMonth2=translate(_(u\'monthly_weekday_of_month_2\'), context=request),\n-        monthlyWeekdayOfMonth3=translate(_(u\'monthly_weekday_of_month_3\'), context=request),\n-        monthlyRepeatOn=translate(_(u\'monthly_repeat_on\'), context=request),\n-        yearlyInterval1=translate(_(u\'yearly_interval_1\'), context=request),\n-        yearlyInterval2=translate(_(u\'yearly_interval_2\'), context=request),\n-        yearlyDayOfMonth1=translate(_(u\'yearly_day_of_month_1\'), context=request),\n-        yearlyDayOfMonth1Human=translate(_(u\'yearly_day_of_month_1_human\'), context=request),\n-        yearlyDayOfMonth2=translate(_(u\'yearly_day_of_month_2\'), context=request),\n-        yearlyDayOfMonth3=translate(_(u\'yearly_day_of_month_3\'), context=request),\n-        yearlyWeekdayOfMonth1=translate(_(u\'yearly_weekday_of_month_1\'), context=request),\n-        yearlyWeekdayOfMonth1Human=translate(_(u\'yearly_weekday_of_month_1_human\'), context=request),\n-        yearlyWeekdayOfMonth2=translate(_(u\'yearly_weekday_of_month_2\'), context=request),\n-        yearlyWeekdayOfMonth3=translate(_(u\'yearly_weekday_of_month_3\'), context=request),\n-        yearlyWeekdayOfMonth4=translate(_(u\'yearly_weekday_of_month_4\'), context=request),\n-        yearlyRepeatOn=translate(_(u\'yearly_repeat_on\'), context=request),\n-        range=translate(_(u\'range\'), context=request),\n-        rangeNoEnd=translate(_(u\'range_no_end\'), context=request),\n-        rangeByOccurrences1=translate(_(u\'range_by_occurrences_1\'), context=request),\n-        rangeByOccurrences1Human=translate(_(u\'range_by_occurrences_1_human\'), context=request),\n-        rangeByOccurrences2=translate(_(u\'range_by_occurrences_2\'), context=request),\n-        rangeByEndDate=translate(_(u\'range_by_end_date\'), context=request),\n-        rangeByEndDateHuman=translate(_(u\'range_by_end_date_human\'), context=request),\n-        including=translate(_(u\'including\'), context=request),\n-        cancel=translate(_(u\'cancel\'), context=request),\n-        save=translate(_(u\'save\'), context=request),\n-        recurrenceStart=translate(_(u\'recurrence_start\'), context=request),\n-        additionalDate=translate(_(u\'additional_date\'), context=request),\n-        include=translate(_(u\'include\'), context=request),\n-        exclude=translate(_(u\'exclude\'), context=request),\n-        remove=translate(_(u\'remove\'), context=request),\n+        displayUnactivate=translate(_("display_unactivate"), context=request),\n+        displayActivate=translate(_("display_activate"), context=request),\n+        add_rules=translate(_("add_rules"), context=request),\n+        edit_rules=translate(_("edit_rules"), context=request),\n+        delete_rules=translate(_("delete_rules"), context=request),\n+        add=translate(_("add"), context=request),\n+        refresh=translate(_("refresh"), context=request),\n+        title=translate(_("title"), context=request),\n+        preview=translate(_("preview"), context=request),\n+        addDate=translate(_("add_date"), context=request),\n+        recurrenceType=translate(_("recurrence_type"), context=request),\n+        dailyInterval1=translate(_("daily_interval_1"), context=request),\n+        dailyInterval2=translate(_("daily_interval_2"), context=request),\n+        weeklyInterval1=translate(_("weekly_interval_1"), context=request),\n+        weeklyInterval2=translate(_("weekly_interval_2"), context=request),\n+        weeklyWeekdays=translate(_("weekly_weekdays"), context=request),\n+        weeklyWeekdaysHuman=translate(_("weekly_weekdays_human"), context=request),\n+        monthlyInterval1=translate(_("monthly_interval_1"), context=request),\n+        monthlyInterval2=translate(_("monthly_interval_2"), context=request),\n+        monthlyDayOfMonth1=translate(_("monthly_day_of_month_1"), context=request),\n+        monthlyDayOfMonth1Human=translate(\n+            _("monthly_day_of_month_1_human"), context=request\n+        ),\n+        monthlyDayOfMonth2=translate(_("monthly_day_of_month_2"), context=request),\n+        monthlyDayOfMonth3=translate(_("monthly_day_of_month_3"), context=request),\n+        monthlyDayOfMonth4=translate(_("monthly_day_of_month_4"), context=request),\n+        monthlyWeekdayOfMonth1=translate(\n+            _("monthly_weekday_of_month_1"), context=request\n+        ),\n+        monthlyWeekdayOfMonth1Human=translate(\n+            _("monthly_weekday_of_month_1_human"), context=request\n+        ),\n+        monthlyWeekdayOfMonth2=translate(\n+            _("monthly_weekday_of_month_2"), context=request\n+        ),\n+        monthlyWeekdayOfMonth3=translate(\n+            _("monthly_weekday_of_month_3"), context=request\n+        ),\n+        monthlyRepeatOn=translate(_("monthly_repeat_on"), context=request),\n+        yearlyInterval1=translate(_("yearly_interval_1"), context=request),\n+        yearlyInterval2=translate(_("yearly_interval_2"), context=request),\n+        yearlyDayOfMonth1=translate(_("yearly_day_of_month_1"), context=request),\n+        yearlyDayOfMonth1Human=translate(\n+            _("yearly_day_of_month_1_human"), context=request\n+        ),\n+        yearlyDayOfMonth2=translate(_("yearly_day_of_month_2"), context=request),\n+        yearlyDayOfMonth3=translate(_("yearly_day_of_month_3"), context=request),\n+        yearlyWeekdayOfMonth1=translate(\n+            _("yearly_weekday_of_month_1"), context=request\n+        ),\n+        yearlyWeekdayOfMonth1Human=translate(\n+            _("yearly_weekday_of_month_1_human"), context=request\n+        ),\n+        yearlyWeekdayOfMonth2=translate(\n+            _("yearly_weekday_of_month_2"), context=request\n+        ),\n+        yearlyWeekdayOfMonth3=translate(\n+            _("yearly_weekday_of_month_3"), context=request\n+        ),\n+        yearlyWeekdayOfMonth4=translate(\n+            _("yearly_weekday_of_month_4"), context=request\n+        ),\n+        yearlyRepeatOn=translate(_("yearly_repeat_on"), context=request),\n+        range=translate(_("range"), context=request),\n+        rangeNoEnd=translate(_("range_no_end"), context=request),\n+        rangeByOccurrences1=translate(_("range_by_occurrences_1"), context=request),\n+        rangeByOccurrences1Human=translate(\n+            _("range_by_occurrences_1_human"), context=request\n+        ),\n+        rangeByOccurrences2=translate(_("range_by_occurrences_2"), context=request),\n+        rangeByEndDate=translate(_("range_by_end_date"), context=request),\n+        rangeByEndDateHuman=translate(_("range_by_end_date_human"), context=request),\n+        including=translate(_("including"), context=request),\n+        cancel=translate(_("cancel"), context=request),\n+        save=translate(_("save"), context=request),\n+        recurrenceStart=translate(_("recurrence_start"), context=request),\n+        additionalDate=translate(_("additional_date"), context=request),\n+        include=translate(_("include"), context=request),\n+        exclude=translate(_("exclude"), context=request),\n+        remove=translate(_("remove"), context=request),\n         orderIndexes=[\n-            translate(_(u\'order_indexes_first\'), context=request),\n-            translate(_(u\'order_indexes_second\'), context=request),\n-            translate(_(u\'order_indexes_third\'), context=request),\n-            translate(_(u\'order_indexes_fourth\'), context=request),\n-            translate(_(u\'order_indexes_last\'), context=request)\n+            translate(_("order_indexes_first"), context=request),\n+            translate(_("order_indexes_second"), context=request),\n+            translate(_("order_indexes_third"), context=request),\n+            translate(_("order_indexes_fourth"), context=request),\n+            translate(_("order_indexes_last"), context=request),\n         ],\n         months=[\n-            translate(pl_message(u\'month_jan\'), context=request),\n-            translate(pl_message(u\'month_feb\'), context=request),\n-            translate(pl_message(u\'month_mar\'), context=request),\n-            translate(pl_message(u\'month_apr\'), context=request),\n-            translate(pl_message(u\'month_may\'), context=request),\n-            translate(pl_message(u\'month_jun\'), context=request),\n-            translate(pl_message(u\'month_jul\'), context=request),\n-            translate(pl_message(u\'month_aug\'), context=request),\n-            translate(pl_message(u\'month_sep\'), context=request),\n-            translate(pl_message(u\'month_oct\'), context=request),\n-            translate(pl_message(u\'month_nov\'), context=request),\n-            translate(pl_message(u\'month_dec\'), context=request)\n+            translate(pl_message("month_jan"), context=request),\n+            translate(pl_message("month_feb"), context=request),\n+            translate(pl_message("month_mar"), context=request),\n+            translate(pl_message("month_apr"), context=request),\n+            translate(pl_message("month_may"), context=request),\n+            translate(pl_message("month_jun"), context=request),\n+            translate(pl_message("month_jul"), context=request),\n+            translate(pl_message("month_aug"), context=request),\n+            translate(pl_message("month_sep"), context=request),\n+            translate(pl_message("month_oct"), context=request),\n+            translate(pl_message("month_nov"), context=request),\n+            translate(pl_message("month_dec"), context=request),\n         ],\n         shortMonths=[\n-            translate(pl_message(u\'month_jan_abbr\'), context=request),\n-            translate(pl_message(u\'month_feb_abbr\'), context=request),\n-            translate(pl_message(u\'month_mar_abbr\'), context=request),\n-            translate(pl_message(u\'month_apr_abbr\'), context=request),\n-            translate(pl_message(u\'month_may_abbr\'), context=request),\n-            translate(pl_message(u\'month_jun_abbr\'), context=request),\n-            translate(pl_message(u\'month_jul_abbr\'), context=request),\n-            translate(pl_message(u\'month_aug_abbr\'), context=request),\n-            translate(pl_message(u\'month_sep_abbr\'), context=request),\n-            translate(pl_message(u\'month_oct_abbr\'), context=request),\n-            translate(pl_message(u\'month_nov_abbr\'), context=request),\n-            translate(pl_message(u\'month_dec_abbr\'), context=request)\n+            translate(pl_message("month_jan_abbr"), context=request),\n+            translate(pl_message("month_feb_abbr"), context=request),\n+            translate(pl_message("month_mar_abbr"), context=request),\n+            translate(pl_message("month_apr_abbr"), context=request),\n+            translate(pl_message("month_may_abbr"), context=request),\n+            translate(pl_message("month_jun_abbr"), context=request),\n+            translate(pl_message("month_jul_abbr"), context=request),\n+            translate(pl_message("month_aug_abbr"), context=request),\n+            translate(pl_message("month_sep_abbr"), context=request),\n+            translate(pl_message("month_oct_abbr"), context=request),\n+            translate(pl_message("month_nov_abbr"), context=request),\n+            translate(pl_message("month_dec_abbr"), context=request),\n         ],\n         weekdays=[\n-            translate(pl_message(u\'weekday_sun\'), context=request),\n-            translate(pl_message(u\'weekday_mon\'), context=request),\n-            translate(pl_message(u\'weekday_tue\'), context=request),\n-            translate(pl_message(u\'weekday_wed\'), context=request),\n-            translate(pl_message(u\'weekday_thu\'), context=request),\n-            translate(pl_message(u\'weekday_fri\'), context=request),\n-            translate(pl_message(u\'weekday_sat\'), context=request)\n+            translate(pl_message("weekday_sun"), context=request),\n+            translate(pl_message("weekday_mon"), context=request),\n+            translate(pl_message("weekday_tue"), context=request),\n+            translate(pl_message("weekday_wed"), context=request),\n+            translate(pl_message("weekday_thu"), context=request),\n+            translate(pl_message("weekday_fri"), context=request),\n+            translate(pl_message("weekday_sat"), context=request),\n         ],\n         shortWeekdays=[\n-            translate(pl_message(u\'weekday_sun_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_mon_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_tue_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_wed_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_thu_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_fri_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_sat_abbr\'), context=request)\n+            translate(pl_message("weekday_sun_abbr"), context=request),\n+            translate(pl_message("weekday_mon_abbr"), context=request),\n+            translate(pl_message("weekday_tue_abbr"), context=request),\n+            translate(pl_message("weekday_wed_abbr"), context=request),\n+            translate(pl_message("weekday_thu_abbr"), context=request),\n+            translate(pl_message("weekday_fri_abbr"), context=request),\n+            translate(pl_message("weekday_sat_abbr"), context=request),\n         ],\n-        longDateFormat=translate(_(u\'long_date_format\'), context=request),\n-        shortDateFormat=translate(pl_message(u\'date_format_short_datepicker\'), context=request),\n-        unsupportedFeatures=translate(_(u\'unsupported_features\'), context=request),\n-        noTemplateMatch=translate(_(u\'no_template_match\'), context=request),\n-        multipleDayOfMonth=translate(_(u\'multiple_day_of_month\'), context=request),\n-        bysetpos=translate(_(u\'bysetpos\'), context=request),\n-        noRule=translate(_(u\'no_rule\'), context=request),\n-        noRepeatEvery=translate(_(u\'no_repeat_every\'), context=request),\n-        noEndDate=translate(_(u\'no_end_date\'), context=request),\n-        noRepeatOn=translate(_(u\'no_repeat_on\'), context=request),\n-        pastEndDate=translate(_(u\'past_end_date\'), context=request),\n-        noEndAfterNOccurrences=translate(_(u\'no_end_after_n_occurrences\'), context=request),\n-        alreadyAdded=translate(_(u\'already_added\'), context=request),\n+        longDateFormat=translate(_("long_date_format"), context=request),\n+        shortDateFormat=translate(\n+            pl_message("date_format_short_datepicker"), context=request\n+        ),\n+        unsupportedFeatures=translate(_("unsupported_features"), context=request),\n+        noTemplateMatch=translate(_("no_template_match"), context=request),\n+        multipleDayOfMonth=translate(_("multiple_day_of_month"), context=request),\n+        bysetpos=translate(_("bysetpos"), context=request),\n+        noRule=translate(_("no_rule"), context=request),\n+        noRepeatEvery=translate(_("no_repeat_every"), context=request),\n+        noEndDate=translate(_("no_end_date"), context=request),\n+        noRepeatOn=translate(_("no_repeat_on"), context=request),\n+        pastEndDate=translate(_("past_end_date"), context=request),\n+        noEndAfterNOccurrences=translate(\n+            _("no_end_after_n_occurrences"), context=request\n+        ),\n+        alreadyAdded=translate(_("already_added"), context=request),\n         rtemplate=dict(\n-            daily=translate(_(u\'template_daily\'), context=request),\n-            mondayfriday=translate(_(u\'template_mondayfriday\'), context=request),\n-            weekdays=translate(_(u\'template_weekdays\'), context=request),\n-            weekly=translate(_(u\'template_weekly\'), context=request),\n-            monthly=translate(_(u\'template_monthly\'), context=request),\n-            yearly=translate(_(u\'template_yearly\'), context=request),\n+            daily=translate(_("template_daily"), context=request),\n+            mondayfriday=translate(_("template_mondayfriday"), context=request),\n+            weekdays=translate(_("template_weekdays"), context=request),\n+            weekly=translate(_("template_weekly"), context=request),\n+            monthly=translate(_("template_monthly"), context=request),\n+            yearly=translate(_("template_yearly"), context=request),\n         ),\n         # a bit wonky here, except is a reserved word\n-        **{"except": translate(_(u\'except\'), context=request)}\n+        **{"except": translate(_("except"), context=request)}\n     )\n     return translation_table\ndiff --git a/plone/formwidget/recurrence/browser/json_recurrence.py b/plone/formwidget/recurrence/browser/json_recurrence.py\nindex bd2ce30..76f1db4 100644\n--- a/plone/formwidget/recurrence/browser/json_recurrence.py\n+++ b/plone/formwidget/recurrence/browser/json_recurrence.py\n@@ -1,3 +1,4 @@\n+from dateutil import rrule\n from Products.CMFPlone.i18nl10n import _interp_regex\n from Products.CMFPlone.i18nl10n import datetime_formatvariables\n from Products.CMFPlone.i18nl10n import monthname_msgid\n@@ -6,30 +7,32 @@\n from Products.CMFPlone.i18nl10n import weekdayname_msgid\n from Products.CMFPlone.i18nl10n import weekdayname_msgid_abbr\n from Products.Five import BrowserView\n-from dateutil import rrule\n-from zope.i18n import translate, interpolate\n+from zope.i18n import interpolate\n+from zope.i18n import translate\n \n import datetime\n import json\n import re\n \n+\n BATCH_DELTA = 3  # How many batches to show before + after current batch\n BATCH_SIZE = 10  # How many items per batch\n \n # Translations from dateinput formatting to Plone translation strings\n # See http://flowplayer.org/tools/dateinput/index.html\n DATEFORMAT_XLATE = [\n-    (re.compile(pattern), replacement) for (pattern, replacement) in (\n-        (\'dddd\', \'${A}\'),\n-        (\'ddd\', \'${a}\'),\n-        (\'dd\', \'${d}\'),\n-        (\'!%d\', \'${e}\'),  # Will include a leading space for 1-9\n-        (\'mmmm\', \'${B}\'),\n-        (\'mmm\', \'${b}\'),\n-        (\'mm\', \'${m}\'),\n-        (\'!%m\', \'${m}\'),  # Will include leading zero\n-        (\'yyyy\', \'${Y}\'),\n-        (\'yy\', \'${y}\'),\n+    (re.compile(pattern), replacement)\n+    for (pattern, replacement) in (\n+        ("dddd", "${A}"),\n+        ("ddd", "${a}"),\n+        ("dd", "${d}"),\n+        ("!%d", "${e}"),  # Will include a leading space for 1-9\n+        ("mmmm", "${B}"),\n+        ("mmm", "${b}"),\n+        ("mm", "${m}"),\n+        ("!%m", "${m}"),  # Will include leading zero\n+        ("yyyy", "${Y}"),\n+        ("yy", "${y}"),\n     )\n ]\n \n@@ -41,7 +44,6 @@ def dateformat_xlate(dateformat):\n \n \n class RecurrenceView(BrowserView):\n-\n     def __call__(self):\n         req = self.request\n         req.response.setHeader("Content-type", "application/json")\n@@ -53,33 +55,33 @@ def json_string(self):\n         occurrences = []\n         data = self.request.form\n         # Check for required parameters:\n-        for x in (\'year\', \'month\', \'day\', \'rrule\', \'format\'):\n+        for x in ("year", "month", "day", "rrule", "format"):\n             if x not in data:\n                 self.request.response.setStatus(400)  # bad request\n                 return {}\n \n         # Translate from the js dateformat style to the i18n style\n-        date_format = dateformat_xlate(data[\'format\'])\n-        start_date = datetime.datetime(int(data[\'year\']),\n-                                       int(data[\'month\']),\n-                                       int(data[\'day\']))\n-        rule = rrule.rrulestr(data[\'rrule\'], dtstart=start_date)\n+        date_format = dateformat_xlate(data["format"])\n+        start_date = datetime.datetime(\n+            int(data["year"]), int(data["month"]), int(data["day"])\n+        )\n+        rule = rrule.rrulestr(data["rrule"], dtstart=start_date)\n         iterator = iter(rule)\n \n-        if \'batch_size\' in data:\n-            batch_size = int(data[\'batch_size\'])\n+        if "batch_size" in data:\n+            batch_size = int(data["batch_size"])\n         else:\n             batch_size = BATCH_SIZE\n \n-        if \'start\' in data:\n-            start = int(data[\'start\'])\n+        if "start" in data:\n+            start = int(data["start"])\n         else:\n             start = 0\n \n         cur_batch = start // batch_size\n         start = cur_batch * batch_size  # Avoid stupid start-values\n \n-        if hasattr(rule, \'_exdate\'):\n+        if hasattr(rule, "_exdate"):\n             exdates = sorted(rule._exdate)\n         else:\n             exdates = []\n@@ -103,11 +105,13 @@ def json_string(self):\n                 else:\n                     # include them\n                     exdate = exdates.pop(0)\n-                    occurrences.append({\n-                        \'date\': exdate.strftime(\'%Y%m%dT%H%M%S\'),\n-                        \'formattedDate\': self.date_format(exdate, date_format),\n-                        \'type\': \'exdate\'\n-                    })\n+                    occurrences.append(\n+                        {\n+                            "date": exdate.strftime("%Y%m%dT%H%M%S"),\n+                            "formattedDate": self.date_format(exdate, date_format),\n+                            "type": "exdate",\n+                        }\n+                    )\n                     i += 1\n \n             if i >= batch_size + start:\n@@ -119,28 +123,32 @@ def json_string(self):\n                 continue\n \n             # Add it to the results\n-            if date in getattr(rule, \'_rdate\', []):\n-                occurrence_type = \'rdate\'\n+            if date in getattr(rule, "_rdate", []):\n+                occurrence_type = "rdate"\n             elif date == start_date:\n-                occurrence_type = \'start\'\n+                occurrence_type = "start"\n             else:\n-                occurrence_type = \'rrule\'\n-            occurrences.append({\n-                \'date\': date.strftime(\'%Y%m%dT%H%M%S\'),\n-                \'formattedDate\': self.date_format(date, date_format),\n-                \'type\': occurrence_type\n-            })\n+                occurrence_type = "rrule"\n+            occurrences.append(\n+                {\n+                    "date": date.strftime("%Y%m%dT%H%M%S"),\n+                    "formattedDate": self.date_format(date, date_format),\n+                    "type": occurrence_type,\n+                }\n+            )\n \n         while exdates:\n             # There are exdates that are after the end of the recurrence.\n             # Excluding the last dates make no sense, as you can change the\n             # range instead, but we need to support it anyway.\n             exdate = exdates.pop(0)\n-            occurrences.append({\n-                \'date\': exdate.strftime(\'%Y%m%dT%H%M%S\'),\n-                \'formattedDate\': exdate.strftime(date_format),\n-                \'type\': \'exdate\'\n-            })\n+            occurrences.append(\n+                {\n+                    "date": exdate.strftime("%Y%m%dT%H%M%S"),\n+                    "formattedDate": exdate.strftime(date_format),\n+                    "type": "exdate",\n+                }\n+            )\n \n         # Calculate no of occurrences, but only to a max of three times\n         # the batch size. This will support infinite recurrence in a\n@@ -180,14 +188,15 @@ def json_string(self):\n         if cur_batch_end > num_occurrences:\n             batches[cur_batch] = (cur_batch_start, num_occurrences)\n \n-        batch_data = {\'start\': start,\n-                      \'end\': num_occurrences,\n-                      \'batch_size\': batch_size,\n-                      \'batches\': batches,\n-                      \'currentBatch\': cur_batch,\n-                      }\n+        batch_data = {\n+            "start": start,\n+            "end": num_occurrences,\n+            "batch_size": batch_size,\n+            "batches": batches,\n+            "currentBatch": cur_batch,\n+        }\n \n-        result = {\'occurrences\': occurrences, \'batch\': batch_data}\n+        result = {"occurrences": occurrences, "batch": batch_data}\n         return result\n \n     def date_format(self, time, formatstring):\n@@ -223,36 +232,32 @@ def date_format(self, time, formatstring):\n         week_included = True\n         month_included = True\n \n-        name_elements = [\n-            e for e in formatelements if e in name_formatvariables\n-        ]\n-        if not (\'a\' in name_elements or \'A\' in name_elements):\n+        name_elements = [e for e in formatelements if e in name_formatvariables]\n+        if not ("a" in name_elements or "A" in name_elements):\n             week_included = False\n-        if not (\'b\' in name_elements or \'B\' in name_elements):\n+        if not ("b" in name_elements or "B" in name_elements):\n             month_included = False\n \n         for key in elements:\n-            mapping[key] = time.strftime(\'%\' + key)\n+            mapping[key] = time.strftime("%" + key)\n \n         if week_included:\n-            weekday = int(time.strftime(\'%w\'))  # weekday, sunday = 0\n-            if \'a\' in name_elements:\n-                mapping[\'a\'] = weekdayname_msgid_abbr(weekday)\n-            if \'A\' in name_elements:\n-                mapping[\'A\'] = weekdayname_msgid(weekday)\n+            weekday = int(time.strftime("%w"))  # weekday, sunday = 0\n+            if "a" in name_elements:\n+                mapping["a"] = weekdayname_msgid_abbr(weekday)\n+            if "A" in name_elements:\n+                mapping["A"] = weekdayname_msgid(weekday)\n         if month_included:\n-            monthday = int(time.strftime(\'%m\'))  # month, january = 1\n-            if \'b\' in name_elements:\n-                mapping[\'b\'] = monthname_msgid_abbr(monthday)\n-            if \'B\' in name_elements:\n-                mapping[\'B\'] = monthname_msgid(monthday)\n+            monthday = int(time.strftime("%m"))  # month, january = 1\n+            if "b" in name_elements:\n+                mapping["b"] = monthname_msgid_abbr(monthday)\n+            if "B" in name_elements:\n+                mapping["B"] = monthname_msgid(monthday)\n \n         # translate translateable elements\n         for key in name_elements:\n             mapping[key] = translate(\n-                mapping[key],\n-                \'plonelocales\',\n-                context=self.request, default=mapping[key]\n+                mapping[key], "plonelocales", context=self.request, default=mapping[key]\n             )\n \n         # Apply the data to the format string:\ndiff --git a/plone/formwidget/recurrence/tests/base.py b/plone/formwidget/recurrence/tests/base.py\nindex a9f4ce4..ec2bfd1 100644\n--- a/plone/formwidget/recurrence/tests/base.py\n+++ b/plone/formwidget/recurrence/tests/base.py\n@@ -15,28 +15,34 @@ def setUpZope(self, app, configurationContext):\n         """Set up Zope."""\n \n         import plone.app.z3cform\n+\n         self.loadZCML(package=plone.app.z3cform)\n \n         import plone.formwidget.recurrence\n+\n         self.loadZCML(package=plone.formwidget.recurrence)\n \n     def setUpPloneSite(self, portal):\n         """Set up Plone."""\n-        self.applyProfile(portal, \'plone.formwidget.recurrence:default\')\n+        self.applyProfile(portal, "plone.formwidget.recurrence:default")\n \n \n FIXTURE = PloneFormwidgetRecurrenceLayer()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Integration")\n+    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Integration"\n+)\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Functional")\n+    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Functional"\n+)\n \n \n class IntegrationTestCase(unittest.TestCase):\n     """Base class for integration tests."""\n+\n     layer = INTEGRATION_TESTING\n \n \n class FunctionalTestCase(unittest.TestCase):\n     """Base class for functional tests."""\n+\n     layer = FUNCTIONAL_TESTING\ndiff --git a/plone/formwidget/recurrence/tests/test_z3cwidget.py b/plone/formwidget/recurrence/tests/test_z3cwidget.py\nindex f35c217..74d63c0 100644\n--- a/plone/formwidget/recurrence/tests/test_z3cwidget.py\n+++ b/plone/formwidget/recurrence/tests/test_z3cwidget.py\n@@ -2,7 +2,8 @@\n from plone.app.z3cform.widget import DateFieldWidget\n from plone.formwidget.recurrence.tests.base import IntegrationTestCase\n from plone.formwidget.recurrence.z3cform.widget import RecurrenceFieldWidget\n-from z3c.form import form, field\n+from z3c.form import field\n+from z3c.form import form\n from z3c.form.testing import TestRequest\n from zope.schema.fieldproperty import FieldProperty\n \n@@ -10,15 +11,16 @@\n import zope.interface\n import zope.schema\n \n+\n class ITestForm(zope.interface.Interface):\n-    recurrence = zope.schema.Text(title=u\'Recurrence\', required=True)\n-    day = zope.schema.Date(title=u\'Day\', required=True)\n+    recurrence = zope.schema.Text(title="Recurrence", required=True)\n+    day = zope.schema.Date(title="Day", required=True)\n \n \n @zope.interface.implementer(ITestForm)\n class TestForm(SimpleItem):\n-    recurrence = FieldProperty(ITestForm[\'recurrence\'])\n-    day = FieldProperty(ITestForm[\'day\'])\n+    recurrence = FieldProperty(ITestForm["recurrence"])\n+    day = FieldProperty(ITestForm["day"])\n \n     def __init__(self, recurrence, day):\n         super(TestForm, self).__init__(id)\n@@ -28,41 +30,40 @@ def __init__(self, recurrence, day):\n \n class TestAddForm(form.AddForm):\n     fields = field.Fields(ITestForm)\n-    fields[\'recurrence\'].widgetFactory = RecurrenceFieldWidget\n-    fields[\'day\'].widgetFactory = DateFieldWidget\n+    fields["recurrence"].widgetFactory = RecurrenceFieldWidget\n+    fields["day"].widgetFactory = DateFieldWidget\n \n \n class Z3CWidgetTestCase(IntegrationTestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         request = TestRequest()\n-        request.LANGUAGE = \'en\'\n+        request.LANGUAGE = "en"\n         form = TestAddForm(self.portal, request)\n         form.update()\n \n-        self.widget = RecurrenceFieldWidget(\n-            form.fields[\'recurrence\'].field, request)\n+        self.widget = RecurrenceFieldWidget(form.fields["recurrence"].field, request)\n \n         self.widget.form = form\n-        self.widget.start_field = \'day\'\n+        self.widget.start_field = "day"\n         self.widget.update()\n \n     def test_widget_options(self):\n         pat_options = json.loads(self.widget.get_pattern_options())\n-        self.assertEqual({\n-                \'ajaxContentType\': \'application/x-www-form-urlencoded; charset=UTF-8\',\n-                \'ajaxURL\': \'http://nohost/plone/@@json_recurrence\',\n-                \'firstDay\': 7,\n-                \'hasRepeatForeverButton\': True,\n-                \'lang\': \'en\',\n-                \'readOnly\': False,\n-                \'ributtonExtraClass\': \'allowMultiSubmit\',\n-                \'startField\': \'form.widgets.day\',\n+        self.assertEqual(\n+            {\n+                "ajaxContentType": "application/x-www-form-urlencoded; charset=UTF-8",\n+                "ajaxURL": "http://nohost/plone/@@json_recurrence",\n+                "firstDay": 7,\n+                "hasRepeatForeverButton": True,\n+                "lang": "en",\n+                "readOnly": False,\n+                "ributtonExtraClass": "allowMultiSubmit",\n+                "startField": "form.widgets.day",\n             },\n             pat_options["configuration"],\n         )\n \n     def test_widget_rendering(self):\n         html = self.widget.render()\n-        self.assertIn(\'pat-recurrence\', html)\n+        self.assertIn("pat-recurrence", html)\ndiff --git a/plone/formwidget/recurrence/z3cform/field.py b/plone/formwidget/recurrence/z3cform/field.py\nindex 93529b0..fd61a4d 100644\n--- a/plone/formwidget/recurrence/z3cform/field.py\n+++ b/plone/formwidget/recurrence/z3cform/field.py\n@@ -1,6 +1,6 @@\n+from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceField\n from zope import schema\n from zope.interface import implementer\n-from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceField\n \n \n @implementer(IRecurrenceField)\ndiff --git a/plone/formwidget/recurrence/z3cform/interfaces.py b/plone/formwidget/recurrence/z3cform/interfaces.py\nindex 35e214f..cbd2047 100644\n--- a/plone/formwidget/recurrence/z3cform/interfaces.py\n+++ b/plone/formwidget/recurrence/z3cform/interfaces.py\n@@ -1,21 +1,19 @@\n+from plone.formwidget.recurrence import _\n from z3c.form.interfaces import IWidget\n from zope.schema import ValidationError\n from zope.schema.interfaces import IText\n-from plone.formwidget.recurrence import _\n \n \n # Fields\n class IRecurrenceField(IText):\n-    """Special marker for datetime fields that use our widget.\n-    """\n+    """Special marker for datetime fields that use our widget."""\n \n \n # Widgets\n class IRecurrenceWidget(IWidget):\n-    """Date widget marker for z3c.form.\n-    """\n+    """Date widget marker for z3c.form."""\n \n \n # Errors\n class RecurrenceValidationError(ValidationError):\n-    __doc__ = _(u"The recurrence rule couldn\'t be parsed.")\n+    __doc__ = _("The recurrence rule couldn\'t be parsed.")\ndiff --git a/plone/formwidget/recurrence/z3cform/widget.py b/plone/formwidget/recurrence/z3cform/widget.py\nindex 167c3b1..95fb736 100644\n--- a/plone/formwidget/recurrence/z3cform/widget.py\n+++ b/plone/formwidget/recurrence/z3cform/widget.py\n@@ -1,14 +1,15 @@\n-from Products.CMFCore.utils import getToolByName\n from plone.formwidget.recurrence.browser.i18n import translations\n from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceField\n from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceWidget\n+from Products.CMFCore.utils import getToolByName\n from z3c.form.browser.textarea import TextAreaWidget\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IFormLayer\n from z3c.form.widget import FieldWidget\n from zope.component import adapter\n from zope.component.hooks import getSite\n-from zope.interface import implementer_only, implementer\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n from zope.traversing.browser import absoluteURL\n \n import json\n@@ -18,8 +19,8 @@\n class RecurrenceWidget(TextAreaWidget):\n     """Recurrence widget implementation."""\n \n-    klass = u\'recurrence-widget\'\n-    value = u\'\'\n+    klass = "recurrence-widget"\n+    value = ""\n     start_field = None\n     show_repeat_forever = True\n \n@@ -28,48 +29,50 @@ def site_url(self):\n \n     @property\n     def read_only(self):\n-        return self.mode == \'display\'\n+        return self.mode == "display"\n \n     def get_start_field(self):\n-        if self.mode == \'display\':\n-            return self.id + \'-start\'\n-        if hasattr(self.form.widgets[self.start_field], \'js_field\'):\n+        if self.mode == "display":\n+            return self.id + "-start"\n+        if hasattr(self.form.widgets[self.start_field], "js_field"):\n             return self.form.widgets[self.start_field].js_field\n-        if hasattr(self.form.widgets[self.start_field], \'name\'):\n+        if hasattr(self.form.widgets[self.start_field], "name"):\n             return self.form.widgets[self.start_field].name\n         return self.form.widgets[self.start_field].id\n \n     def get_start_date(self):\n         start = self.form.fields[self.start_field].field.get(self.context)\n-        return start.strftime(\'%Y-%m-%d %H:%M\')\n+        return start.strftime("%Y-%m-%d %H:%M")\n \n     def first_day(self):\n-        """ First day of the Week. 0..Sunday, 6..Saturday.\n+        """First day of the Week. 0..Sunday, 6..Saturday.\n \n         .. Note::\n             This value is likely to be overwritten by the widget configuration.\n         """\n-        calendar = self.request.locale.dates.calendars[u\'gregorian\']\n-        return calendar.week.get(\'firstDay\', 0)\n+        calendar = self.request.locale.dates.calendars["gregorian"]\n+        return calendar.week.get("firstDay", 0)\n \n     def get_pattern_options(self):\n-        portal = getToolByName(getSite(), \'portal_url\').getPortalObject()\n-        ajax_url = portal.absolute_url() + \'/@@json_recurrence\'\n+        portal = getToolByName(getSite(), "portal_url").getPortalObject()\n+        ajax_url = portal.absolute_url() + "/@@json_recurrence"\n         conf = dict(\n-            ajaxContentType=\'application/x-www-form-urlencoded; charset=UTF-8\',\n+            ajaxContentType="application/x-www-form-urlencoded; charset=UTF-8",\n             ajaxURL=ajax_url,\n             firstDay=self.first_day(),\n             hasRepeatForeverButton=self.show_repeat_forever,\n             lang=self.request.LANGUAGE,\n             readOnly=self.read_only,\n-            ributtonExtraClass=\'allowMultiSubmit\',\n+            ributtonExtraClass="allowMultiSubmit",\n             startField=self.get_start_field(),\n         )\n-        return json.dumps({\n-            "localization": translations(self.request),\n-            "language": self.request.LANGUAGE,\n-            "configuration": conf\n-        })\n+        return json.dumps(\n+            {\n+                "localization": translations(self.request),\n+                "language": self.request.LANGUAGE,\n+                "configuration": conf,\n+            }\n+        )\n \n \n @implementer(IFieldWidget)\ndiff --git a/setup.cfg b/setup.cfg\nindex aecfa92..529a6a4 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,3 +7,11 @@ ignore =\n \n [bdist_wheel]\n universal = 1\n+\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex cfe3ed7..a9dddba 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,14 +1,14 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n \n-version = \'3.0.0.dev0\'\n+version = "3.0.0.dev0"\n \n setup(\n-    name=\'plone.formwidget.recurrence\',\n+    name="plone.formwidget.recurrence",\n     version=version,\n     description="Recurrence widget for Plone",\n-    long_description="%s\\n%s" % (open("README.rst").read(),\n-                                 open("CHANGES.rst").read()),\n+    long_description="%s\\n%s" % (open("README.rst").read(), open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n@@ -20,37 +20,37 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone Event Recurrence Date Time Widget z3c.form\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.formwidget.recurrence\',\n-    license=\'GPL\',\n+    keywords="Plone Event Recurrence Date Time Widget z3c.form",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.formwidget.recurrence",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.formwidget\'],\n+    namespace_packages=["plone", "plone.formwidget"],\n     include_package_data=True,\n     python_requires=">=3.8",\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'python-dateutil\',\n-        \'zope.component\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n+        "setuptools",\n+        "Products.CMFCore",\n+        "Products.CMFPlone",\n+        "python-dateutil",\n+        "zope.component",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n     ],\n     extras_require=dict(\n         z3cform=[\n-            \'z3c.form\',\n-            \'zope.schema\',\n-            \'zope.traversing\',\n+            "z3c.form",\n+            "zope.schema",\n+            "zope.traversing",\n         ],\n         test=[\n-            \'plone.app.testing\',\n-            \'plone.testing\',\n-            \'plone.app.z3cform\',\n-        ]\n+            "plone.app.testing",\n+            "plone.testing",\n+            "plone.app.z3cform",\n+        ],\n     ),\n     entry_points="""\n     # -*- Entry points: -*-\n'

Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-13T10:58:55+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/52c2d1197678aba81b49bbb31764e3d809809bd4

changenote

Files changed:
A news/28.breaking

b'diff --git a/news/28.breaking b/news/28.breaking\nnew file mode 100644\nindex 0000000..b177ce5\n--- /dev/null\n+++ b/news/28.breaking\n@@ -0,0 +1,2 @@\n+Remove Archetypes and python 2.7 support. Plone 6 only.\n+[petschki]\n'

Repository: plone.formwidget.recurrence


Branch: refs/heads/master
Date: 2022-12-13T14:47:27+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.formwidget.recurrence/commit/aea08355a68daf625aa7359deed5bc5e334e35b1

Merge pull request #28 from plone/plone6

Cleanup code and remove Archetypes support (Plone 6 only)

Files changed:
A .github/workflows/plone-package-test.yml
A Makefile
A TODO.txt
A constraints.txt
A instance.yaml
A news/28.breaking
A requirements.txt
A sources.ini
M .gitignore
M MANIFEST.in
M README.rst
M plone/__init__.py
M plone/formwidget/__init__.py
M plone/formwidget/recurrence/__init__.py
M plone/formwidget/recurrence/browser/i18n.py
M plone/formwidget/recurrence/browser/json_recurrence.py
M plone/formwidget/recurrence/configure.zcml
M plone/formwidget/recurrence/profiles/default/metadata.xml
M plone/formwidget/recurrence/tests/base.py
M plone/formwidget/recurrence/tests/test_z3cwidget.py
M plone/formwidget/recurrence/z3cform/field.py
M plone/formwidget/recurrence/z3cform/interfaces.py
M plone/formwidget/recurrence/z3cform/recurrence_input.pt
M plone/formwidget/recurrence/z3cform/widget.py
M setup.cfg
M setup.py
D bootstrap.py
D buildout.cfg
D plone/formwidget/recurrence/at/__init__.py
D plone/formwidget/recurrence/at/browser.py
D plone/formwidget/recurrence/at/configure.zcml
D plone/formwidget/recurrence/at/widget.pt
D plone/formwidget/recurrence/at/widget.py
D plone/formwidget/recurrence/tests/at_example/__init__.py
D plone/formwidget/recurrence/tests/at_example/configure.zcml
D plone/formwidget/recurrence/tests/at_example/content.py
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml
D plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml
D plone/formwidget/recurrence/tests/test_atwidget.py

b'diff --git a/.github/workflows/plone-package-test.yml b/.github/workflows/plone-package-test.yml\nnew file mode 100644\nindex 0000000..d4529dc\n--- /dev/null\n+++ b/.github/workflows/plone-package-test.yml\n@@ -0,0 +1,42 @@\n+name: Test the plone.formwidget.recurrence code\n+\n+on:\n+  push:\n+    branches-ignore:\n+      - "master"\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python:\n+          - "3.8"\n+          - "3.9"\n+          - "3.10"\n+          - "3.11"\n+        plone:\n+          - "6.0-dev"\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+\n+      - name: Setup Plone ${{ matrix.plone }} with Python ${{ matrix.python }}\n+        id: setup\n+        uses: plone/setup-plone@v1.0.0\n+        with:\n+          python-version: ${{ matrix.python }}\n+          plone-version: ${{ matrix.plone }}\n+\n+      - name: Install package\n+        run: |\n+          make VENV=off install\n+\n+      - name: Run Lint\n+        run: |\n+          make VENV=off lint\n+\n+      - name: Run tests\n+        run: |\n+          make VENV=off test-ignore-warnings\ndiff --git a/.gitignore b/.gitignore\nindex 738f440..77c26ae 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,8 +1,17 @@\n *.egg-info\n *.mo\n *.py?\n-.*\n *~\n dist/\n !.gitattributes\n !.gitignore\n+news/.*\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex d8ec65b..42183f5 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -5,4 +5,4 @@ global-include *.mo\n global-exclude *pyc *~\n include pyproject.toml\n recursive-exclude news *\n-exclude news\n+exclude news TODO.txt\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..3810634\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,337 @@\n+# Makefile to configure and run Plone instance\n+\n+##############################################################################\n+# SETUP MAKE\n+\n+## Defensive settings for make: https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+# for Makefile debugging purposes add -x to the .SHELLFLAGS\n+.SHELLFLAGS:=-eu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# Colors\n+# OK=Green, warn=yellow, error=red\n+ifeq ($(TERM),)\n+# no colors if not in terminal\n+\tMARK_COLOR=\n+\tOK_COLOR=\n+\tWARN_COLOR=\n+\tERROR_COLOR=\n+\tNO_COLOR=\n+else\n+\tMARK_COLOR=`tput setaf 6`\n+\tOK_COLOR=`tput setaf 2`\n+\tWARN_COLOR=`tput setaf 3`\n+\tERROR_COLOR=`tput setaf 1`\n+\tNO_COLOR=`tput sgr0`\n+endif\n+\n+##############################################################################\n+# SETTINGS AND VARIABLE\n+# adjust to your project needs\n+PROJECT_NAME=plone.formwidget.recurrence\n+IMAGE_NAME=${PROJECT_NAME}\n+CONSTRAINTS_IN=constraints.txt\n+CONSTRAINTS_IN=constraints.txt\n+CONSTRAINTS_MXDEV=constraints-mxdev.txt\n+PIP_REQUIREMENTS_IN_FILE=requirements.txt\n+ADDONBASE=./\n+ADDONFOLDER=${ADDONBASE}\n+INSTANCE_YAML=instance.yaml\n+INSTANCE_FOLDER=instance\n+\n+PIP_PARAMS= --pre\n+\n+##############################################################################\n+# targets and prerequisites\n+# target has to be one file, otherwise step gets executes for each file separate\n+PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS_IN} sources.ini ${ADDONBASE}setup.cfg\n+PREPARE_TARGET=requirements-mxdev.txt\n+INSTALL_PREREQUSISTES=${PREPARE_TARGET}\n+INSTALL_TARGET=.installed.txt\n+INSTANCE_PREREQUISITES=${INSTALL_TARGET} ${INSTANCE_YAML}\n+INSTANCE_TARGET=${INSTANCE_FOLDER}/etc/zope.ini ${INSTANCE_FOLDER}/etc/zope.conf ${INSTANCE_FOLDER}/etc/site.zcml\n+TEST_PREREQUISITES=${INSTALL_TARGET}\n+RUN_PREREQUISITES=${INSTANCE_TARGET}\n+\n+##############################################################################\n+# CONVINIENCE\n+\n+# install and run\n+.PHONY: all # full install, test and run\n+all:style test run\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@echo "${OK_COLOR}This is the Makefile for ${WARN_COLOR}${PROJECT_NAME}${NO_COLOR}"\n+\t@echo\n+\t@echo "${WARN_COLOR}Additional parameters:${NO_COLOR}"\n+\t@echo "${MARK_COLOR}PYTHON${NO_COLOR}:       python interpreter to be used (default: python3)"\n+\t@echo "${MARK_COLOR}VENV${NO_COLOR}:        [on|off] wether to create a Python virtual environment or not (default: on)"\n+\t@echo "${MARK_COLOR}VENV_FOLDER${NO_COLOR}: location of the virtual environment (default: ./venv)"\n+\t@echo\n+\t@echo "${WARN_COLOR}Targets:${NO_COLOR}"\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+##############################################################################\n+# targets and prerequisites\n+# target has to be one file, otherwise step gets executes for each file separate\n+PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS_IN} sources.ini ${ADDONBASE}setup.cfg\n+PREPARE_TARGET=requirements-mxdev.txt\n+INSTALL_PREREQUSISTES=${PREPARE_TARGET}\n+INSTALL_TARGET=.installed.txt\n+INSTANCE_PREREQUISITES=${INSTALL_TARGET} ${INSTANCE_YAML}\n+INSTANCE_TARGET=${INSTANCE_FOLDER}/etc/zope.ini ${INSTANCE_FOLDER}/etc/zope.conf ${INSTANCE_FOLDER}/etc/site.zcml\n+TEST_PREREQUISITES=${INSTALL_TARGET}\n+RUN_PREREQUISITES=${INSTANCE_TARGET}\n+\n+##############################################################################\n+# BASE\n+\n+SENTINELFOLDER=.make-sentinels/\n+SENTINEL=${SENTINELFOLDER}ABOUT.txt\n+${SENTINEL}:\n+\t@mkdir -p ${SENTINELFOLDER}\n+\t@echo "Sentinels for the Makefile process." > ${SENTINEL}\n+\n+# PYTHON, VENV, PIP\n+# venv and pybin\n+PYTHON?=python3\n+VENV?=on\n+ifeq ("${VENV}", "on")\n+\tVENV_FOLDER?=./venv\n+\tPYBIN=${VENV_FOLDER}/bin/\n+else\n+\tVENV_FOLDER?=\n+\tifneq ("${VENV_FOLDER}", "")\n+\t\tPYBIN=${VENV_FOLDER}/bin/\n+\t\tPYTHON=${PYBIN}python\n+\telse\n+\t\tPYBIN=\n+\tendif\n+endif\n+\n+# installed?\n+ifeq (, $(shell which $(PYTHON) ))\n+  $(error "PYTHON=$(PYTHON) not found in $(PATH)")\n+endif\n+\n+# version ok?\n+PYTHON_VERSION_MIN=3.7\n+PYTHON_VERSION_OK=$(shell $(PYTHON) -c \'import sys; print(int(sys.version_info[0:2] >= tuple(map(int, "$(PYTHON_VERSION_MIN)".split(".")))))\' )\n+\n+ifeq ($(PYTHON_VERSION_OK),0)\n+  $(error "Need python $(PYTHON_VERSION) >= $(PYTHON_VERSION_MIN)")\n+endif\n+\n+VENV_SENTINEL=${SENTINELFOLDER}venv.sentinel\n+${VENV_SENTINEL}: ${SENTINEL}\n+ifeq ("${VENV}", "on")\n+\t@echo "$(OK_COLOR)Setup Python Virtual Environment under \'${VENV_FOLDER}\' $(NO_COLOR)"\n+\t@${PYTHON} -m venv ${VENV_FOLDER}\n+else\n+\t@echo "$(OK_COLOR)Use current local or global Python: `which ${PYTHON}` $(NO_COLOR)"\n+endif\n+\t@touch ${VENV_SENTINEL}\n+\n+PIP_SENTINEL=${SENTINELFOLDER}pip.sentinel\n+${PIP_SENTINEL}: ${VENV_SENTINEL} ${CONSTRAINTS_IN} ${SENTINEL}\n+\t@echo "$(OK_COLOR)Install pip $(NO_COLOR)"\n+\t@${PYBIN}pip install "pip>=22" wheel\n+\t@touch ${PIP_SENTINEL}\n+\n+##############################################################################\n+# MXDEV\n+\n+MXDEV_SENTINEL=${SENTINELFOLDER}pip-mxdev.sentinel\n+${MXDEV_SENTINEL}: ${PIP_SENTINEL}\n+\t@echo "$(OK_COLOR)Install mxdev$(NO_COLOR)"\n+\t@${PYBIN}pip install mxdev libvcs==0.11.1\n+\t@touch ${MXDEV_SENTINEL}\n+\n+.PHONY: prepare\n+prepare: ${PREPARE_TARGET} ## prepare soures and dependencies\n+\n+${PREPARE_PREREQUISITES}:\n+\t@touch $@\n+\n+${PREPARE_TARGET}: ${MXDEV_SENTINEL} ${PREPARE_PREREQUISITES}\n+\t@echo "$(OK_COLOR)Prepare sources and dependencies$(NO_COLOR)"\n+\t@${PYBIN}mxdev -c sources.ini\n+\n+.PHONY: install\n+install: ${INSTALL_TARGET} ## pip install all dependencies and scripts\n+\n+${INSTALL_TARGET}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install dependencies and scripts$(NO_COLOR)"\n+\t@${PYBIN}pip install -r ${PREPARE_TARGET} ${PIP_PARAMS}\n+\t@${PYBIN}pip freeze >${INSTALL_TARGET}\n+\n+##############################################################################\n+# INSTANCE\n+\n+COOKIECUTTER_SENTINEL=${SENTINELFOLDER}pip-cookiecutter.sentinel\n+${COOKIECUTTER_SENTINEL}:\n+\t@echo "$(OK_COLOR)Install cookiecutter$(NO_COLOR)"\n+\t@${PYBIN}pip install git+https://github.com/cookiecutter/cookiecutter.git#egg=cookiecutter\n+\t@touch ${COOKIECUTTER_SENTINEL}\n+\n+${INSTANCE_YAML}:\n+\t@touch ${INSTANCE_YAML}\n+\n+.PHONY: instance\n+instance: ${INSTANCE_TARGET} ## create configuration for an zope (plone) instance\n+\n+${INSTANCE_TARGET}: ${INSTANCE_PREREQUISITES} ${COOKIECUTTER_SENTINEL}\n+\t@echo "$(OK_COLOR)Create Plone/Zope configuration$(NO_COLOR)"\n+\t@${PYBIN}cookiecutter -f --no-input --config-file ${INSTANCE_YAML} https://github.com/bluedynamics/cookiecutter-zope-instance\n+##############################################################################\n+# TESTING\n+\n+TESTRUNNER_SENTINEL=${SENTINELFOLDER}pip-testrunner.sentinel\n+${TESTRUNNER_SENTINEL}: ${PIP_SENTINEL}\n+\t@echo "$(OK_COLOR)Install zope.testrunner$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} zope.testrunner\n+\t@touch ${TESTRUNNER_SENTINEL}\n+\n+.PHONY: test\n+test: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL} ## run tests\n+\t@echo "$(OK_COLOR)Run addon tests$(NO_COLOR)"\n+\t@${PYBIN}zope-testrunner --auto-color --auto-progress --test-path=${ADDONFOLDER}\n+\n+.PHONY: test-ignore-warnings\n+test-ignore-warnings: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL}  ## run tests (hide warnins)\n+\t@echo "$(OK_COLOR)Run addon tests$(NO_COLOR)"\n+\t@PYTHONWARNINGS=ignore ${PYBIN}zope-testrunner --auto-color --auto-progress --test-path=${ADDONFOLDER}\n+\n+##############################################################################\n+# CODE FORMATTING\n+\n+BLACK_SENTINEL=${SENTINELFOLDER}pip-black.sentinel\n+${BLACK_SENTINEL}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install black$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} black\n+\t@touch ${BLACK_SENTINEL}\n+\n+ISORT_SENTINEL=${SENTINELFOLDER}pip-isort.sentinel\n+${ISORT_SENTINEL}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install isort$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} isort\n+\t@touch ${ISORT_SENTINEL}\n+\n+ZPRETTY_SENTINEL=${SENTINELFOLDER}pip-zpretty.sentinel\n+${ZPRETTY_SENTINEL}: ${PREPARE_TARGET}\n+\t@echo "$(OK_COLOR)Install zpretty$(NO_COLOR)"\n+\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} "zpretty>=2.2.0"\n+\t@touch ${ZPRETTY_SENTINEL}\n+\n+.PHONY: apply-style-black\n+apply-style-black: ${BLACK_SENTINEL}  ## apply/format code style black (to Python files)\n+\t@echo "$(OK_COLOR)Apply style black rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}black ${ADDONFOLDER}\n+\n+.PHONY: apply-style-isort\n+apply-style-isort: ${ISORT_SENTINEL} ## apply/format code style isort (sorted imports in Python files)\n+\t@echo "$(OK_COLOR)Apply style isort rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}isort ${ADDONFOLDER}\n+\n+.PHONY: apply-style-zpretty\n+apply-style-zpretty: ${ZPRETTY_SENTINEL}   ## apply/format code style zpretty (to XML/ZCML files)\n+\t@echo "$(OK_COLOR)Apply style zpretty rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@find ${ADDONFOLDER} -name \'*.zcml\' -exec ${PYBIN}zpretty -iz {} +\n+\t@find ${ADDONFOLDER} -name "*.xml"|grep -v locales|xargs ${PYBIN}zpretty -ix\n+\n+.PHONY: style ## apply code styles black, isort and zpretty\n+style: apply-style-black apply-style-isort ## apply-style-zpretty\n+\n+.PHONY: format ## alias for "style"\n+FORMATTING: style\n+\n+.PHONY: lint-black\n+lint-black: ${BLACK_SENTINEL}  ## lint code-style black (to Python files)\n+\t@echo "$(OK_COLOR)Lint black rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}black --check ${ADDONFOLDER}\n+\n+.PHONY: lint-isort\n+lint-isort: ${ISORT_SENTINEL} ## lint code-style isort (sorted imports in Python files)\n+\t@echo "$(OK_COLOR)Apply style isort rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@${PYBIN}isort --check-only ${ADDONFOLDER}\n+\n+.PHONY: lint-zpretty\n+lint-zpretty: ${ZPRETTY_SENTINEL}   ## lint code-style zpretty (to XML/ZCML files)\n+\t@echo "$(OK_COLOR)Apply style zpretty rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@find ${ADDONFOLDER} -name \'*.zcml\' -exec ${PYBIN}zpretty --check -z {} +\n+\t@find ${ADDONFOLDER} -name \'*.xml\'|grep -v locales|xargs ${PYBIN}zpretty --check -x\n+\n+.PHONY: lint ## lint all: check if complies with code-styles black, isort and zpretty\n+lint: lint-black lint-isort ## lint-zpretty\n+\n+##############################################################################\n+# RUN\n+\n+.PHONY: run\n+run: ${RUN_PREREQUISITES} ## run/start Plone\n+\t@echo "$(OK_COLOR)Run Plone$(NO_COLOR)"\n+\t@${PYBIN}runwsgi -v instance/etc/zope.ini\n+\n+##############################################################################\n+# NODE\n+\n+.PHONY: node\n+node: # yarn install\n+\t@echo "$(OK_COLOR)Yarn install$(NO_COLOR)"\n+\tyarn install\n+\n+##############################################################################\n+# CLEAN\n+.PHONY: clean-venv\n+clean-venv: ## remove Python virtual environment\n+ifeq ("${VENV}", "on")\n+\t@echo "$(OK_COLOR)Remove Virtualenv.$(NO_COLOR)"\n+\trm -rf ${VENV_FOLDER} ${SENTINELFOLDER}/pip*.sentinel ${VENV_SENTINEL}\n+else:\n+\t@echo "$(OK_WARN)No self-created Python virtualenv at \'${VENV_FOLDER}\'! Nothing to do.$(NO_COLOR)"\n+endif\n+\n+.PHONY: clean-pyc\n+clean-pyc: ## remove Python file artifacts\n+\t@echo "$(OK_COLOR)Remove Python file artifacts (like byte-code) of code in current directory.$(NO_COLOR)"\n+\tfind . -name \'*.py[c|o]\' -delete\n+\tfind . -name \'*.mo\' -delete\n+\tfind . -name \'*~\' -exec rm -f {} +\n+\tfind . -name \'__pycache__\' -exec rm -fr {} +\n+\n+.PHONY: clean-make\n+clean-make:  ## remove make artifact\t@echo "$(OK_COLOR)Remove Plone/Zope configuration (keeps data) and sentinel files.$(NO_COLOR)"\n+\trm -rf ${INSTALL_PREREQUSISTES} ${INSTANCE_TARGET} ${SENTINELFOLDER}\n+\n+.PHONY: clean-instance\n+clean-instance:  ## remove instance configuration (keeps data)\n+\t@echo "$(OK_COLOR)Remove Plone/Zope configuration (keeps data) and sentinel files.$(NO_COLOR)"\n+\trm -f ${INSTANCE_TARGET}\n+\n+.PHONY: clean-node\n+clean-node:  ## remove instance configuration (keeps data)\n+\t@echo "$(OK_COLOR)Remove npm/yarn installation.$(NO_COLOR)"\n+\trm -rf ${ADDONBASE}/node_modules\n+\n+.PHONY: clean\n+clean:  clean-venv clean-pyc clean-make clean-instance clean-node  ## clean all (except local database and pip installed packages)\n+\n+##############################################################################\n+# DOCKER/CONTAINER\n+\n+# this needs a Dockerfile, which is not provided by plone-kickstarter\n+.PHONY: build-image\n+build-image:  ## Build Docker Image\n+ifneq ("$(wildcard Dockerfile)", "")\n+\t@docker build . -t $(IMAGE_NAME) -f Dockerfile\n+else\n+\t@echo "$(ERROR_COLOR)A \'Dockerfile\' is required to build an image.$(NO_COLOR)"\n+endif\ndiff --git a/README.rst b/README.rst\nindex ea18383..a2789fb 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,14 +1,12 @@\n Introduction\n ============\n \n-The plone.formwidget.recurrence package provides an Archetype and a z3cform\n-widget for recurrence.\n+The plone.formwidget.recurrence package provides a z3cform widget for recurrence.\n \n-The main GUI work is done with the jquery.recurrenceinput.js widget from\n-http://github.com/collective/jquery.recurrenceinput.js .\n+The main GUI work is done with the ``pat-recurrence`` pattern from mockup.\n \n-This widget also provides a simple textarea where a RFC 5545\n-compliant recurrence rule can be entered, if javascript is not available.\n+This widget provides a simple textarea where a RFC 5545 compliant\n+recurrence rule can be entered, if javascript is not available.\n \n The resulting value of the widget is a RFC5445 compliant recurrence rule\n string, ready to be used with python-dateutil\'s rrulestr.\n@@ -18,13 +16,7 @@ Installation\n ------------\n \n You need to add plone.formwidget.recurrence to either your buildout, or\n-your product requirements. In this addition you should specify if you\n-want the Archetypes or the z3c.form widget, or both. For example::\n-\n-  [buildout]\n-  eggs += plone.formwidget.recurrence[archetypes]\n-\n-or::\n+your product requirements. For example::\n \n   [buildout]\n   eggs += plone.formwidget.recurrence[z3cform]\n@@ -32,14 +24,5 @@ or::\n or::\n \n   install_requires=[\n-     \'plone.formwidget.recurrence[z3cform,archetypes]\',\n+     \'plone.formwidget.recurrence[z3cform]\',\n   ]\n-\n-\n-TODO\n-----\n-\n-- Better test coverage.\n-\n-? - Usage docs for AT and DX. Show z3c.form widget parameters via\n-  plone.autoform > 1.4\ndiff --git a/TODO.txt b/TODO.txt\nnew file mode 100644\nindex 0000000..6819714\n--- /dev/null\n+++ b/TODO.txt\n@@ -0,0 +1,5 @@\n+TODO\n+----\n+\n+- Better test coverage.\n+- Show z3c.form widget parameters via plone.autoform > 1.4\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex ddaf64a..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-[buildout]\n-extends =\n-    http://dist.plone.org/release/4.3-latest/versions.cfg\n-parts =\n-    zopepy\n-    i18ndude\n-    test\n-\n-develop = .\n-\n-[zopepy]\n-recipe = zc.recipe.egg\n-eggs = ${test:eggs}\n-interpreter = zopepy\n-scripts = zopepy\n-\n-[i18ndude]\n-unzip = true\n-recipe = zc.recipe.egg\n-eggs = i18ndude\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-defaults = [\'-s\', \'plone.formwidget.recurrence\', \'--auto-color\', \'--auto-progress\']\n-eggs =\n-    Plone\n-    Pillow\n-    plone.formwidget.recurrence [test]\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 0000000..42908cf\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1 @@\n+-r https://dist.plone.org/release/6.0-dev/requirements.txt\ndiff --git a/instance.yaml b/instance.yaml\nnew file mode 100644\nindex 0000000..852c62b\n--- /dev/null\n+++ b/instance.yaml\n@@ -0,0 +1,17 @@\n+---\n+# This is a cookiecutter configuration context file for\n+#\n+#   cookiecutter-zope-instance\n+#\n+# available options are documented at\n+# https://github.com/bluedynamics/cookiecutter-zope-instance/\n+#\n+# read also README_MAKE.md in this folder\n+#\n+default_context:\n+    wsgi_http_listen: localhost:8080\n+    initial_user_name: admin\n+    initial_user_password: admin\n+    load_zcml:\n+        package_includes: []\n+    db_storage: direct\ndiff --git a/news/28.breaking b/news/28.breaking\nnew file mode 100644\nindex 0000000..b177ce5\n--- /dev/null\n+++ b/news/28.breaking\n@@ -0,0 +1,2 @@\n+Remove Archetypes and python 2.7 support. Plone 6 only.\n+[petschki]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/formwidget/__init__.py b/plone/formwidget/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/formwidget/__init__.py\n+++ b/plone/formwidget/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/formwidget/recurrence/__init__.py b/plone/formwidget/recurrence/__init__.py\nindex c767d6b..d2bc5b1 100644\n--- a/plone/formwidget/recurrence/__init__.py\n+++ b/plone/formwidget/recurrence/__init__.py\n@@ -1,4 +1,5 @@\n from zope.i18nmessageid import MessageFactory\n \n-_ = MessageFactory(\'plone\')\n-pl_message = MessageFactory(\'plonelocales\')\n+\n+_ = MessageFactory("plone")\n+pl_message = MessageFactory("plonelocales")\ndiff --git a/plone/formwidget/recurrence/at/__init__.py b/plone/formwidget/recurrence/at/__init__.py\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/plone/formwidget/recurrence/at/browser.py b/plone/formwidget/recurrence/at/browser.py\ndeleted file mode 100644\nindex 4f63671..0000000\n--- a/plone/formwidget/recurrence/at/browser.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-from Products.Five import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from pkg_resources import resource_string\n-from plone.formwidget.recurrence.browser.i18n import translations\n-\n-\n-class RecurrenceWidget(BrowserView):\n-    """ """\n-    template = ViewPageTemplateFile(\'widget.pt\')\n-\n-    @property\n-    def macros(self):\n-        return self.template.macros\n-\n-    def translation(self):\n-        return translations(request=self.request)\n-\n-\n-class Templates(BrowserView):\n-\n-    def __call__(self):\n-        return resource_string(\n-            \'plone.formwidget.recurrence.browser\',\n-            \'lib/templates.html\'\n-        )\ndiff --git a/plone/formwidget/recurrence/at/configure.zcml b/plone/formwidget/recurrence/at/configure.zcml\ndeleted file mode 100644\nindex 6f848a3..0000000\n--- a/plone/formwidget/recurrence/at/configure.zcml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:z3c="http://namespaces.zope.org/z3c"\n-    i18n_domain="plone">\n-\n-  <!-- Archetypes widget view -->\n-  <browser:page\n-      for="*"\n-      name="recurrence_widget"\n-      class=".browser.RecurrenceWidget"\n-      permission="zope2.View"\n-      />\n-\n-</configure>\ndiff --git a/plone/formwidget/recurrence/at/widget.pt b/plone/formwidget/recurrence/at/widget.pt\ndeleted file mode 100644\nindex 35ec6f2..0000000\n--- a/plone/formwidget/recurrence/at/widget.pt\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      i18n:domain="plone">\n-  <head><title></title></head>\n-  <body>\n-\n-    <!-- Lines Widgets -->\n-    <metal:view_macro define-macro="view"\n-      tal:define="visState python:widget.isVisible(here, mode);\n-        getMethod python:accessor if widget.populate else None;\n-        value python:getMethod and getMethod();\n-        widget_view widget/@@recurrence_widget;\n-        portal_url context/@@plone_portal_state/portal_url;">\n-        <span tal:content="python:widget.get_formatted_value(value)">Value</span>\n-    </metal:view_macro>\n-\n-    <metal:edit_macro define-macro="edit">\n-      <metal:use use-macro="field_macro | context/widgets/field/macros/edit">\n-        <div metal:fill-slot="widget_body">\n-          <textarea class="pat-recurrence"\n-            tal:attributes="name string:$fieldName;\n-                            id fieldName;\n-                            cols widget/cols;\n-                            rows widget/rows;\n-                            data-pat-recurrence python: widget.get_pattern_options()"\n-            tal:content="python:value or \'\'"></textarea>\n-        </div>\n-      </metal:use>\n-    </metal:edit_macro>\n-\n-  </body>\n-</html>\ndiff --git a/plone/formwidget/recurrence/at/widget.py b/plone/formwidget/recurrence/at/widget.py\ndeleted file mode 100644\nindex cbd902c..0000000\n--- a/plone/formwidget/recurrence/at/widget.py\n+++ /dev/null\n@@ -1,80 +0,0 @@\n-from App.class_init import InitializeClass\n-from Products.Archetypes.Registry import registerWidget\n-from Products.Archetypes.atapi import LinesWidget\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_callable\n-from Products.validation import validation\n-from Products.validation.interfaces.IValidator import IValidator\n-from dateutil import rrule\n-from zope.component.hooks import getSite\n-from zope.interface import implementer\n-from plone.formwidget.recurrence.browser.i18n import translations\n-\n-import json\n-\n-\n-class RecurrenceWidget(LinesWidget):\n-    _properties = LinesWidget._properties.copy()\n-    _properties.update({\n-        \'macro_edit\': "recurrence_widget",\n-        \'helper_js\': (),\n-        \'helper_css\': (),\n-        \'startField\': \'\',\n-        \'startFieldYear\': \'\',\n-        \'startFieldMonth\': \'\',\n-        \'startFieldDay\': \'\',\n-        \'first_day\': \'\',\n-        \'show_repeat_forever\': True,\n-    })\n-\n-    def get_pattern_options(self):\n-        portal = getToolByName(getSite(), \'portal_url\').getPortalObject()\n-        ajax_url = portal.absolute_url() + \'/@@json_recurrence\'\n-        request = portal.REQUEST\n-\n-        first_day = self.first_day\n-        first_day = first_day() if safe_callable(first_day) else first_day\n-\n-        params = dict(\n-            ajaxContentType=\'application/x-www-form-urlencoded; charset=UTF-8\',\n-            ajaxURL=ajax_url,\n-            firstDay=first_day,\n-            hasRepeatForeverButton=self.show_repeat_forever,\n-            lang=request.LANGUAGE,\n-            ributtonExtraClass=\'allowMultiSubmit\',\n-            startField=self.startField,\n-            startFieldDay=self.startFieldDay,\n-            startFieldMonth=self.startFieldMonth,\n-            startFieldYear=self.startFieldYear,\n-        )\n-        return json.dumps({\n-            "locationization": translations(request),\n-            "language": request.LANGUAGE,\n-            "configuration": params\n-        })\n-\n-\n-InitializeClass(RecurrenceWidget)\n-registerWidget(RecurrenceWidget,\n-               title=\'Recurring Date\',\n-               description=(\'Renders a recurrence widget to enter all the \'\n-                            \'info for recurring dates.\'),\n-               used_for=(\'plone.app.event.recurrence.RecurrenceField\',))\n-\n-\n-@implementer(IValidator)\n-class RecurrenceValidator(object):\n-\n-    def __init__(self, name):\n-        self.name = name\n-\n-    def __call__(self, value, *args, **kwargs):\n-        try:\n-            rrule.rrulestr(value)   # TODO: rm dep. on rrule. check with regex\n-            assert(\'FREQ\' in value) # TODO: check if freq before other\n-                                    # recurrence parms\n-        except (ValueError, TypeError, AssertionError):\n-            return "Validation failed: Please enter valid recurrence data."\n-\n-        return True\n-validation.register(RecurrenceValidator(\'isRecurrence\'))\ndiff --git a/plone/formwidget/recurrence/browser/i18n.py b/plone/formwidget/recurrence/browser/i18n.py\nindex 84c9fa8..702fafd 100644\n--- a/plone/formwidget/recurrence/browser/i18n.py\n+++ b/plone/formwidget/recurrence/browser/i18n.py\n@@ -5,137 +5,165 @@\n \n def translations(request):\n     translation_table = dict(\n-        displayUnactivate=translate(_(u\'display_unactivate\'), context=request),\n-        displayActivate=translate(_(u\'display_activate\'), context=request),\n-        add_rules=translate(_(u\'add_rules\'), context=request),\n-        edit_rules=translate(_(u\'edit_rules\'), context=request),\n-        delete_rules=translate(_(u\'delete_rules\'), context=request),\n-        add=translate(_(u\'add\'), context=request),\n-        refresh=translate(_(u\'refresh\'), context=request),\n-        title=translate(_(u\'title\'), context=request),\n-        preview=translate(_(u\'preview\'), context=request),\n-        addDate=translate(_(u\'add_date\'), context=request),\n-        recurrenceType=translate(_(u\'recurrence_type\'), context=request),\n-        dailyInterval1=translate(_(u\'daily_interval_1\'), context=request),\n-        dailyInterval2=translate(_(u\'daily_interval_2\'), context=request),\n-        weeklyInterval1=translate(_(u\'weekly_interval_1\'), context=request),\n-        weeklyInterval2=translate(_(u\'weekly_interval_2\'), context=request),\n-        weeklyWeekdays=translate(_(u\'weekly_weekdays\'), context=request),\n-        weeklyWeekdaysHuman=translate(_(u\'weekly_weekdays_human\'), context=request),\n-        monthlyInterval1=translate(_(u\'monthly_interval_1\'), context=request),\n-        monthlyInterval2=translate(_(u\'monthly_interval_2\'), context=request),\n-        monthlyDayOfMonth1=translate(_(u\'monthly_day_of_month_1\'), context=request),\n-        monthlyDayOfMonth1Human=translate(_(u\'monthly_day_of_month_1_human\'), context=request),\n-        monthlyDayOfMonth2=translate(_(u\'monthly_day_of_month_2\'), context=request),\n-        monthlyDayOfMonth3=translate(_(u\'monthly_day_of_month_3\'), context=request),\n-        monthlyDayOfMonth4=translate(_(u\'monthly_day_of_month_4\'), context=request),\n-        monthlyWeekdayOfMonth1=translate(_(u\'monthly_weekday_of_month_1\'), context=request),\n-        monthlyWeekdayOfMonth1Human=translate(_(u\'monthly_weekday_of_month_1_human\'), context=request),\n-        monthlyWeekdayOfMonth2=translate(_(u\'monthly_weekday_of_month_2\'), context=request),\n-        monthlyWeekdayOfMonth3=translate(_(u\'monthly_weekday_of_month_3\'), context=request),\n-        monthlyRepeatOn=translate(_(u\'monthly_repeat_on\'), context=request),\n-        yearlyInterval1=translate(_(u\'yearly_interval_1\'), context=request),\n-        yearlyInterval2=translate(_(u\'yearly_interval_2\'), context=request),\n-        yearlyDayOfMonth1=translate(_(u\'yearly_day_of_month_1\'), context=request),\n-        yearlyDayOfMonth1Human=translate(_(u\'yearly_day_of_month_1_human\'), context=request),\n-        yearlyDayOfMonth2=translate(_(u\'yearly_day_of_month_2\'), context=request),\n-        yearlyDayOfMonth3=translate(_(u\'yearly_day_of_month_3\'), context=request),\n-        yearlyWeekdayOfMonth1=translate(_(u\'yearly_weekday_of_month_1\'), context=request),\n-        yearlyWeekdayOfMonth1Human=translate(_(u\'yearly_weekday_of_month_1_human\'), context=request),\n-        yearlyWeekdayOfMonth2=translate(_(u\'yearly_weekday_of_month_2\'), context=request),\n-        yearlyWeekdayOfMonth3=translate(_(u\'yearly_weekday_of_month_3\'), context=request),\n-        yearlyWeekdayOfMonth4=translate(_(u\'yearly_weekday_of_month_4\'), context=request),\n-        yearlyRepeatOn=translate(_(u\'yearly_repeat_on\'), context=request),\n-        range=translate(_(u\'range\'), context=request),\n-        rangeNoEnd=translate(_(u\'range_no_end\'), context=request),\n-        rangeByOccurrences1=translate(_(u\'range_by_occurrences_1\'), context=request),\n-        rangeByOccurrences1Human=translate(_(u\'range_by_occurrences_1_human\'), context=request),\n-        rangeByOccurrences2=translate(_(u\'range_by_occurrences_2\'), context=request),\n-        rangeByEndDate=translate(_(u\'range_by_end_date\'), context=request),\n-        rangeByEndDateHuman=translate(_(u\'range_by_end_date_human\'), context=request),\n-        including=translate(_(u\'including\'), context=request),\n-        cancel=translate(_(u\'cancel\'), context=request),\n-        save=translate(_(u\'save\'), context=request),\n-        recurrenceStart=translate(_(u\'recurrence_start\'), context=request),\n-        additionalDate=translate(_(u\'additional_date\'), context=request),\n-        include=translate(_(u\'include\'), context=request),\n-        exclude=translate(_(u\'exclude\'), context=request),\n-        remove=translate(_(u\'remove\'), context=request),\n+        displayUnactivate=translate(_("display_unactivate"), context=request),\n+        displayActivate=translate(_("display_activate"), context=request),\n+        add_rules=translate(_("add_rules"), context=request),\n+        edit_rules=translate(_("edit_rules"), context=request),\n+        delete_rules=translate(_("delete_rules"), context=request),\n+        add=translate(_("add"), context=request),\n+        refresh=translate(_("refresh"), context=request),\n+        title=translate(_("title"), context=request),\n+        preview=translate(_("preview"), context=request),\n+        addDate=translate(_("add_date"), context=request),\n+        recurrenceType=translate(_("recurrence_type"), context=request),\n+        dailyInterval1=translate(_("daily_interval_1"), context=request),\n+        dailyInterval2=translate(_("daily_interval_2"), context=request),\n+        weeklyInterval1=translate(_("weekly_interval_1"), context=request),\n+        weeklyInterval2=translate(_("weekly_interval_2"), context=request),\n+        weeklyWeekdays=translate(_("weekly_weekdays"), context=request),\n+        weeklyWeekdaysHuman=translate(_("weekly_weekdays_human"), context=request),\n+        monthlyInterval1=translate(_("monthly_interval_1"), context=request),\n+        monthlyInterval2=translate(_("monthly_interval_2"), context=request),\n+        monthlyDayOfMonth1=translate(_("monthly_day_of_month_1"), context=request),\n+        monthlyDayOfMonth1Human=translate(\n+            _("monthly_day_of_month_1_human"), context=request\n+        ),\n+        monthlyDayOfMonth2=translate(_("monthly_day_of_month_2"), context=request),\n+        monthlyDayOfMonth3=translate(_("monthly_day_of_month_3"), context=request),\n+        monthlyDayOfMonth4=translate(_("monthly_day_of_month_4"), context=request),\n+        monthlyWeekdayOfMonth1=translate(\n+            _("monthly_weekday_of_month_1"), context=request\n+        ),\n+        monthlyWeekdayOfMonth1Human=translate(\n+            _("monthly_weekday_of_month_1_human"), context=request\n+        ),\n+        monthlyWeekdayOfMonth2=translate(\n+            _("monthly_weekday_of_month_2"), context=request\n+        ),\n+        monthlyWeekdayOfMonth3=translate(\n+            _("monthly_weekday_of_month_3"), context=request\n+        ),\n+        monthlyRepeatOn=translate(_("monthly_repeat_on"), context=request),\n+        yearlyInterval1=translate(_("yearly_interval_1"), context=request),\n+        yearlyInterval2=translate(_("yearly_interval_2"), context=request),\n+        yearlyDayOfMonth1=translate(_("yearly_day_of_month_1"), context=request),\n+        yearlyDayOfMonth1Human=translate(\n+            _("yearly_day_of_month_1_human"), context=request\n+        ),\n+        yearlyDayOfMonth2=translate(_("yearly_day_of_month_2"), context=request),\n+        yearlyDayOfMonth3=translate(_("yearly_day_of_month_3"), context=request),\n+        yearlyWeekdayOfMonth1=translate(\n+            _("yearly_weekday_of_month_1"), context=request\n+        ),\n+        yearlyWeekdayOfMonth1Human=translate(\n+            _("yearly_weekday_of_month_1_human"), context=request\n+        ),\n+        yearlyWeekdayOfMonth2=translate(\n+            _("yearly_weekday_of_month_2"), context=request\n+        ),\n+        yearlyWeekdayOfMonth3=translate(\n+            _("yearly_weekday_of_month_3"), context=request\n+        ),\n+        yearlyWeekdayOfMonth4=translate(\n+            _("yearly_weekday_of_month_4"), context=request\n+        ),\n+        yearlyRepeatOn=translate(_("yearly_repeat_on"), context=request),\n+        range=translate(_("range"), context=request),\n+        rangeNoEnd=translate(_("range_no_end"), context=request),\n+        rangeByOccurrences1=translate(_("range_by_occurrences_1"), context=request),\n+        rangeByOccurrences1Human=translate(\n+            _("range_by_occurrences_1_human"), context=request\n+        ),\n+        rangeByOccurrences2=translate(_("range_by_occurrences_2"), context=request),\n+        rangeByEndDate=translate(_("range_by_end_date"), context=request),\n+        rangeByEndDateHuman=translate(_("range_by_end_date_human"), context=request),\n+        including=translate(_("including"), context=request),\n+        cancel=translate(_("cancel"), context=request),\n+        save=translate(_("save"), context=request),\n+        recurrenceStart=translate(_("recurrence_start"), context=request),\n+        additionalDate=translate(_("additional_date"), context=request),\n+        include=translate(_("include"), context=request),\n+        exclude=translate(_("exclude"), context=request),\n+        remove=translate(_("remove"), context=request),\n         orderIndexes=[\n-            translate(_(u\'order_indexes_first\'), context=request),\n-            translate(_(u\'order_indexes_second\'), context=request),\n-            translate(_(u\'order_indexes_third\'), context=request),\n-            translate(_(u\'order_indexes_fourth\'), context=request),\n-            translate(_(u\'order_indexes_last\'), context=request)\n+            translate(_("order_indexes_first"), context=request),\n+            translate(_("order_indexes_second"), context=request),\n+            translate(_("order_indexes_third"), context=request),\n+            translate(_("order_indexes_fourth"), context=request),\n+            translate(_("order_indexes_last"), context=request),\n         ],\n         months=[\n-            translate(pl_message(u\'month_jan\'), context=request),\n-            translate(pl_message(u\'month_feb\'), context=request),\n-            translate(pl_message(u\'month_mar\'), context=request),\n-            translate(pl_message(u\'month_apr\'), context=request),\n-            translate(pl_message(u\'month_may\'), context=request),\n-            translate(pl_message(u\'month_jun\'), context=request),\n-            translate(pl_message(u\'month_jul\'), context=request),\n-            translate(pl_message(u\'month_aug\'), context=request),\n-            translate(pl_message(u\'month_sep\'), context=request),\n-            translate(pl_message(u\'month_oct\'), context=request),\n-            translate(pl_message(u\'month_nov\'), context=request),\n-            translate(pl_message(u\'month_dec\'), context=request)\n+            translate(pl_message("month_jan"), context=request),\n+            translate(pl_message("month_feb"), context=request),\n+            translate(pl_message("month_mar"), context=request),\n+            translate(pl_message("month_apr"), context=request),\n+            translate(pl_message("month_may"), context=request),\n+            translate(pl_message("month_jun"), context=request),\n+            translate(pl_message("month_jul"), context=request),\n+            translate(pl_message("month_aug"), context=request),\n+            translate(pl_message("month_sep"), context=request),\n+            translate(pl_message("month_oct"), context=request),\n+            translate(pl_message("month_nov"), context=request),\n+            translate(pl_message("month_dec"), context=request),\n         ],\n         shortMonths=[\n-            translate(pl_message(u\'month_jan_abbr\'), context=request),\n-            translate(pl_message(u\'month_feb_abbr\'), context=request),\n-            translate(pl_message(u\'month_mar_abbr\'), context=request),\n-            translate(pl_message(u\'month_apr_abbr\'), context=request),\n-            translate(pl_message(u\'month_may_abbr\'), context=request),\n-            translate(pl_message(u\'month_jun_abbr\'), context=request),\n-            translate(pl_message(u\'month_jul_abbr\'), context=request),\n-            translate(pl_message(u\'month_aug_abbr\'), context=request),\n-            translate(pl_message(u\'month_sep_abbr\'), context=request),\n-            translate(pl_message(u\'month_oct_abbr\'), context=request),\n-            translate(pl_message(u\'month_nov_abbr\'), context=request),\n-            translate(pl_message(u\'month_dec_abbr\'), context=request)\n+            translate(pl_message("month_jan_abbr"), context=request),\n+            translate(pl_message("month_feb_abbr"), context=request),\n+            translate(pl_message("month_mar_abbr"), context=request),\n+            translate(pl_message("month_apr_abbr"), context=request),\n+            translate(pl_message("month_may_abbr"), context=request),\n+            translate(pl_message("month_jun_abbr"), context=request),\n+            translate(pl_message("month_jul_abbr"), context=request),\n+            translate(pl_message("month_aug_abbr"), context=request),\n+            translate(pl_message("month_sep_abbr"), context=request),\n+            translate(pl_message("month_oct_abbr"), context=request),\n+            translate(pl_message("month_nov_abbr"), context=request),\n+            translate(pl_message("month_dec_abbr"), context=request),\n         ],\n         weekdays=[\n-            translate(pl_message(u\'weekday_sun\'), context=request),\n-            translate(pl_message(u\'weekday_mon\'), context=request),\n-            translate(pl_message(u\'weekday_tue\'), context=request),\n-            translate(pl_message(u\'weekday_wed\'), context=request),\n-            translate(pl_message(u\'weekday_thu\'), context=request),\n-            translate(pl_message(u\'weekday_fri\'), context=request),\n-            translate(pl_message(u\'weekday_sat\'), context=request)\n+            translate(pl_message("weekday_sun"), context=request),\n+            translate(pl_message("weekday_mon"), context=request),\n+            translate(pl_message("weekday_tue"), context=request),\n+            translate(pl_message("weekday_wed"), context=request),\n+            translate(pl_message("weekday_thu"), context=request),\n+            translate(pl_message("weekday_fri"), context=request),\n+            translate(pl_message("weekday_sat"), context=request),\n         ],\n         shortWeekdays=[\n-            translate(pl_message(u\'weekday_sun_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_mon_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_tue_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_wed_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_thu_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_fri_abbr\'), context=request),\n-            translate(pl_message(u\'weekday_sat_abbr\'), context=request)\n+            translate(pl_message("weekday_sun_abbr"), context=request),\n+            translate(pl_message("weekday_mon_abbr"), context=request),\n+            translate(pl_message("weekday_tue_abbr"), context=request),\n+            translate(pl_message("weekday_wed_abbr"), context=request),\n+            translate(pl_message("weekday_thu_abbr"), context=request),\n+            translate(pl_message("weekday_fri_abbr"), context=request),\n+            translate(pl_message("weekday_sat_abbr"), context=request),\n         ],\n-        longDateFormat=translate(_(u\'long_date_format\'), context=request),\n-        shortDateFormat=translate(pl_message(u\'date_format_short_datepicker\'), context=request),\n-        unsupportedFeatures=translate(_(u\'unsupported_features\'), context=request),\n-        noTemplateMatch=translate(_(u\'no_template_match\'), context=request),\n-        multipleDayOfMonth=translate(_(u\'multiple_day_of_month\'), context=request),\n-        bysetpos=translate(_(u\'bysetpos\'), context=request),\n-        noRule=translate(_(u\'no_rule\'), context=request),\n-        noRepeatEvery=translate(_(u\'no_repeat_every\'), context=request),\n-        noEndDate=translate(_(u\'no_end_date\'), context=request),\n-        noRepeatOn=translate(_(u\'no_repeat_on\'), context=request),\n-        pastEndDate=translate(_(u\'past_end_date\'), context=request),\n-        noEndAfterNOccurrences=translate(_(u\'no_end_after_n_occurrences\'), context=request),\n-        alreadyAdded=translate(_(u\'already_added\'), context=request),\n+        longDateFormat=translate(_("long_date_format"), context=request),\n+        shortDateFormat=translate(\n+            pl_message("date_format_short_datepicker"), context=request\n+        ),\n+        unsupportedFeatures=translate(_("unsupported_features"), context=request),\n+        noTemplateMatch=translate(_("no_template_match"), context=request),\n+        multipleDayOfMonth=translate(_("multiple_day_of_month"), context=request),\n+        bysetpos=translate(_("bysetpos"), context=request),\n+        noRule=translate(_("no_rule"), context=request),\n+        noRepeatEvery=translate(_("no_repeat_every"), context=request),\n+        noEndDate=translate(_("no_end_date"), context=request),\n+        noRepeatOn=translate(_("no_repeat_on"), context=request),\n+        pastEndDate=translate(_("past_end_date"), context=request),\n+        noEndAfterNOccurrences=translate(\n+            _("no_end_after_n_occurrences"), context=request\n+        ),\n+        alreadyAdded=translate(_("already_added"), context=request),\n         rtemplate=dict(\n-            daily=translate(_(u\'template_daily\'), context=request),\n-            mondayfriday=translate(_(u\'template_mondayfriday\'), context=request),\n-            weekdays=translate(_(u\'template_weekdays\'), context=request),\n-            weekly=translate(_(u\'template_weekly\'), context=request),\n-            monthly=translate(_(u\'template_monthly\'), context=request),\n-            yearly=translate(_(u\'template_yearly\'), context=request),\n+            daily=translate(_("template_daily"), context=request),\n+            mondayfriday=translate(_("template_mondayfriday"), context=request),\n+            weekdays=translate(_("template_weekdays"), context=request),\n+            weekly=translate(_("template_weekly"), context=request),\n+            monthly=translate(_("template_monthly"), context=request),\n+            yearly=translate(_("template_yearly"), context=request),\n         ),\n         # a bit wonky here, except is a reserved word\n-        **{"except": translate(_(u\'except\'), context=request)}\n+        **{"except": translate(_("except"), context=request)}\n     )\n     return translation_table\ndiff --git a/plone/formwidget/recurrence/browser/json_recurrence.py b/plone/formwidget/recurrence/browser/json_recurrence.py\nindex bd2ce30..76f1db4 100644\n--- a/plone/formwidget/recurrence/browser/json_recurrence.py\n+++ b/plone/formwidget/recurrence/browser/json_recurrence.py\n@@ -1,3 +1,4 @@\n+from dateutil import rrule\n from Products.CMFPlone.i18nl10n import _interp_regex\n from Products.CMFPlone.i18nl10n import datetime_formatvariables\n from Products.CMFPlone.i18nl10n import monthname_msgid\n@@ -6,30 +7,32 @@\n from Products.CMFPlone.i18nl10n import weekdayname_msgid\n from Products.CMFPlone.i18nl10n import weekdayname_msgid_abbr\n from Products.Five import BrowserView\n-from dateutil import rrule\n-from zope.i18n import translate, interpolate\n+from zope.i18n import interpolate\n+from zope.i18n import translate\n \n import datetime\n import json\n import re\n \n+\n BATCH_DELTA = 3  # How many batches to show before + after current batch\n BATCH_SIZE = 10  # How many items per batch\n \n # Translations from dateinput formatting to Plone translation strings\n # See http://flowplayer.org/tools/dateinput/index.html\n DATEFORMAT_XLATE = [\n-    (re.compile(pattern), replacement) for (pattern, replacement) in (\n-        (\'dddd\', \'${A}\'),\n-        (\'ddd\', \'${a}\'),\n-        (\'dd\', \'${d}\'),\n-        (\'!%d\', \'${e}\'),  # Will include a leading space for 1-9\n-        (\'mmmm\', \'${B}\'),\n-        (\'mmm\', \'${b}\'),\n-        (\'mm\', \'${m}\'),\n-        (\'!%m\', \'${m}\'),  # Will include leading zero\n-        (\'yyyy\', \'${Y}\'),\n-        (\'yy\', \'${y}\'),\n+    (re.compile(pattern), replacement)\n+    for (pattern, replacement) in (\n+        ("dddd", "${A}"),\n+        ("ddd", "${a}"),\n+        ("dd", "${d}"),\n+        ("!%d", "${e}"),  # Will include a leading space for 1-9\n+        ("mmmm", "${B}"),\n+        ("mmm", "${b}"),\n+        ("mm", "${m}"),\n+        ("!%m", "${m}"),  # Will include leading zero\n+        ("yyyy", "${Y}"),\n+        ("yy", "${y}"),\n     )\n ]\n \n@@ -41,7 +44,6 @@ def dateformat_xlate(dateformat):\n \n \n class RecurrenceView(BrowserView):\n-\n     def __call__(self):\n         req = self.request\n         req.response.setHeader("Content-type", "application/json")\n@@ -53,33 +55,33 @@ def json_string(self):\n         occurrences = []\n         data = self.request.form\n         # Check for required parameters:\n-        for x in (\'year\', \'month\', \'day\', \'rrule\', \'format\'):\n+        for x in ("year", "month", "day", "rrule", "format"):\n             if x not in data:\n                 self.request.response.setStatus(400)  # bad request\n                 return {}\n \n         # Translate from the js dateformat style to the i18n style\n-        date_format = dateformat_xlate(data[\'format\'])\n-        start_date = datetime.datetime(int(data[\'year\']),\n-                                       int(data[\'month\']),\n-                                       int(data[\'day\']))\n-        rule = rrule.rrulestr(data[\'rrule\'], dtstart=start_date)\n+        date_format = dateformat_xlate(data["format"])\n+        start_date = datetime.datetime(\n+            int(data["year"]), int(data["month"]), int(data["day"])\n+        )\n+        rule = rrule.rrulestr(data["rrule"], dtstart=start_date)\n         iterator = iter(rule)\n \n-        if \'batch_size\' in data:\n-            batch_size = int(data[\'batch_size\'])\n+        if "batch_size" in data:\n+            batch_size = int(data["batch_size"])\n         else:\n             batch_size = BATCH_SIZE\n \n-        if \'start\' in data:\n-            start = int(data[\'start\'])\n+        if "start" in data:\n+            start = int(data["start"])\n         else:\n             start = 0\n \n         cur_batch = start // batch_size\n         start = cur_batch * batch_size  # Avoid stupid start-values\n \n-        if hasattr(rule, \'_exdate\'):\n+        if hasattr(rule, "_exdate"):\n             exdates = sorted(rule._exdate)\n         else:\n             exdates = []\n@@ -103,11 +105,13 @@ def json_string(self):\n                 else:\n                     # include them\n                     exdate = exdates.pop(0)\n-                    occurrences.append({\n-                        \'date\': exdate.strftime(\'%Y%m%dT%H%M%S\'),\n-                        \'formattedDate\': self.date_format(exdate, date_format),\n-                        \'type\': \'exdate\'\n-                    })\n+                    occurrences.append(\n+                        {\n+                            "date": exdate.strftime("%Y%m%dT%H%M%S"),\n+                            "formattedDate": self.date_format(exdate, date_format),\n+                            "type": "exdate",\n+                        }\n+                    )\n                     i += 1\n \n             if i >= batch_size + start:\n@@ -119,28 +123,32 @@ def json_string(self):\n                 continue\n \n             # Add it to the results\n-            if date in getattr(rule, \'_rdate\', []):\n-                occurrence_type = \'rdate\'\n+            if date in getattr(rule, "_rdate", []):\n+                occurrence_type = "rdate"\n             elif date == start_date:\n-                occurrence_type = \'start\'\n+                occurrence_type = "start"\n             else:\n-                occurrence_type = \'rrule\'\n-            occurrences.append({\n-                \'date\': date.strftime(\'%Y%m%dT%H%M%S\'),\n-                \'formattedDate\': self.date_format(date, date_format),\n-                \'type\': occurrence_type\n-            })\n+                occurrence_type = "rrule"\n+            occurrences.append(\n+                {\n+                    "date": date.strftime("%Y%m%dT%H%M%S"),\n+                    "formattedDate": self.date_format(date, date_format),\n+                    "type": occurrence_type,\n+                }\n+            )\n \n         while exdates:\n             # There are exdates that are after the end of the recurrence.\n             # Excluding the last dates make no sense, as you can change the\n             # range instead, but we need to support it anyway.\n             exdate = exdates.pop(0)\n-            occurrences.append({\n-                \'date\': exdate.strftime(\'%Y%m%dT%H%M%S\'),\n-                \'formattedDate\': exdate.strftime(date_format),\n-                \'type\': \'exdate\'\n-            })\n+            occurrences.append(\n+                {\n+                    "date": exdate.strftime("%Y%m%dT%H%M%S"),\n+                    "formattedDate": exdate.strftime(date_format),\n+                    "type": "exdate",\n+                }\n+            )\n \n         # Calculate no of occurrences, but only to a max of three times\n         # the batch size. This will support infinite recurrence in a\n@@ -180,14 +188,15 @@ def json_string(self):\n         if cur_batch_end > num_occurrences:\n             batches[cur_batch] = (cur_batch_start, num_occurrences)\n \n-        batch_data = {\'start\': start,\n-                      \'end\': num_occurrences,\n-                      \'batch_size\': batch_size,\n-                      \'batches\': batches,\n-                      \'currentBatch\': cur_batch,\n-                      }\n+        batch_data = {\n+            "start": start,\n+            "end": num_occurrences,\n+            "batch_size": batch_size,\n+            "batches": batches,\n+            "currentBatch": cur_batch,\n+        }\n \n-        result = {\'occurrences\': occurrences, \'batch\': batch_data}\n+        result = {"occurrences": occurrences, "batch": batch_data}\n         return result\n \n     def date_format(self, time, formatstring):\n@@ -223,36 +232,32 @@ def date_format(self, time, formatstring):\n         week_included = True\n         month_included = True\n \n-        name_elements = [\n-            e for e in formatelements if e in name_formatvariables\n-        ]\n-        if not (\'a\' in name_elements or \'A\' in name_elements):\n+        name_elements = [e for e in formatelements if e in name_formatvariables]\n+        if not ("a" in name_elements or "A" in name_elements):\n             week_included = False\n-        if not (\'b\' in name_elements or \'B\' in name_elements):\n+        if not ("b" in name_elements or "B" in name_elements):\n             month_included = False\n \n         for key in elements:\n-            mapping[key] = time.strftime(\'%\' + key)\n+            mapping[key] = time.strftime("%" + key)\n \n         if week_included:\n-            weekday = int(time.strftime(\'%w\'))  # weekday, sunday = 0\n-            if \'a\' in name_elements:\n-                mapping[\'a\'] = weekdayname_msgid_abbr(weekday)\n-            if \'A\' in name_elements:\n-                mapping[\'A\'] = weekdayname_msgid(weekday)\n+            weekday = int(time.strftime("%w"))  # weekday, sunday = 0\n+            if "a" in name_elements:\n+                mapping["a"] = weekdayname_msgid_abbr(weekday)\n+            if "A" in name_elements:\n+                mapping["A"] = weekdayname_msgid(weekday)\n         if month_included:\n-            monthday = int(time.strftime(\'%m\'))  # month, january = 1\n-            if \'b\' in name_elements:\n-                mapping[\'b\'] = monthname_msgid_abbr(monthday)\n-            if \'B\' in name_elements:\n-                mapping[\'B\'] = monthname_msgid(monthday)\n+            monthday = int(time.strftime("%m"))  # month, january = 1\n+            if "b" in name_elements:\n+                mapping["b"] = monthname_msgid_abbr(monthday)\n+            if "B" in name_elements:\n+                mapping["B"] = monthname_msgid(monthday)\n \n         # translate translateable elements\n         for key in name_elements:\n             mapping[key] = translate(\n-                mapping[key],\n-                \'plonelocales\',\n-                context=self.request, default=mapping[key]\n+                mapping[key], "plonelocales", context=self.request, default=mapping[key]\n             )\n \n         # Apply the data to the format string:\ndiff --git a/plone/formwidget/recurrence/configure.zcml b/plone/formwidget/recurrence/configure.zcml\nindex dc73a01..a699a49 100644\n--- a/plone/formwidget/recurrence/configure.zcml\n+++ b/plone/formwidget/recurrence/configure.zcml\n@@ -6,7 +6,6 @@\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     i18n_domain="plone">\n \n-  <include zcml:condition="installed Products.Archetypes" package=".at" />\n   <include zcml:condition="installed z3c.form" package=".z3cform" />\n   <include package=".browser" />\n \ndiff --git a/plone/formwidget/recurrence/profiles/default/metadata.xml b/plone/formwidget/recurrence/profiles/default/metadata.xml\nindex a44cc34..b6bd42a 100644\n--- a/plone/formwidget/recurrence/profiles/default/metadata.xml\n+++ b/plone/formwidget/recurrence/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>3</version>\n+  <version>3000</version>\n </metadata>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/__init__.py b/plone/formwidget/recurrence/tests/at_example/__init__.py\ndeleted file mode 100644\nindex e798aea..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/__init__.py\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-from Products.Archetypes import atapi\n-\n-packageName = __name__\n-\n-\n-def initialize(context):\n-    """Register content types through Archetypes with Zope and the CMF.\n-    """\n-    from Products.CMFCore.utils import ContentInit\n-    from Products.CMFCore.permissions import AddPortalContent\n-    from plone.formwidget.recurrence.tests.at_example import content  # noqa\n-\n-    content_types, constructors, ftis = atapi.process_types(\n-        atapi.listTypes(packageName), packageName)\n-\n-    for atype, constructor, fti in zip(content_types, constructors, ftis):\n-        ContentInit(\n-            "%s: %s" % (packageName, atype.portal_type),\n-            content_types=(atype,),\n-            permission = AddPortalContent,\n-            extra_constructors = (constructor,),\n-            fti = (fti,),\n-        ).initialize(context)\ndiff --git a/plone/formwidget/recurrence/tests/at_example/configure.zcml b/plone/formwidget/recurrence/tests/at_example/configure.zcml\ndeleted file mode 100644\nindex 006c3e7..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/configure.zcml\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone">\n-\n-  <five:registerPackage package="." initialize=".initialize" />\n-  <genericsetup:registerProfile\n-      name="sample_types"\n-      title="Example content type for Recurrence Widget"\n-      directory="profiles/sample_types"\n-      description=\'Extension profile for the plone.formwidget.recurrence package.\'\n-      provides="Products.GenericSetup.interfaces.EXTENSION"\n-      />\n-\n-</configure>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/content.py b/plone/formwidget/recurrence/tests/at_example/content.py\ndeleted file mode 100644\nindex 9f12a1a..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/content.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-from Products.Archetypes.atapi import BaseSchema\n-from Products.Archetypes.atapi import LinesField\n-from Products.Archetypes.atapi import Schema\n-from Products.Archetypes.atapi import registerType\n-from Products.Archetypes.examples.SimpleType import SimpleType\n-from plone.formwidget.recurrence.at.widget import RecurrenceWidget\n-\n-\n-schema = BaseSchema.copy() + Schema((\n-    LinesField(\n-        \'rec\',\n-        widget=RecurrenceWidget(\n-            label=\'Recurrence\',\n-            startField=\'test_start_field\',\n-            startYear=\'test_start_year\',\n-            startMonth=\'test_start_month\',\n-            startDay=\'test_start_day\',\n-            first_day=4,\n-        ),\n-    ),\n-))\n-\n-\n-class RecurrenceType(SimpleType):\n-    """A simple archetype"""\n-    schema = schema\n-    archetype_name = meta_type = "RecurrenceType"\n-    portal_type = \'RecurrenceType\'\n-\n-\n-registerType(RecurrenceType, \'plone.formwidget.recurrence.tests.at_example\')\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml\ndeleted file mode 100644\nindex 623d1ee..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/archetype_tool.xml\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-<?xml version="1.0"?>\n-<archetypetool>\n- <catalogmap>\n-  <type portal_type="RecurrenceType">\n-   <catalog value="portal_catalog"/>\n-  </type>\n- </catalogmap>\n-</archetypetool>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml\ndeleted file mode 100644\nindex cf4492a..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/metadata.xml\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<?xml version="1.0"?>\n-<metadata>\n-  <version>1</version>\n-</metadata>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml\ndeleted file mode 100644\nindex 7845b26..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types.xml\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n- <object name="RecurrenceType" meta_type="Factory-based Type Information"/>\n-</object>\ndiff --git a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml b/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml\ndeleted file mode 100644\nindex db35b69..0000000\n--- a/plone/formwidget/recurrence/tests/at_example/profiles/sample_types/types/RecurrenceType.xml\n+++ /dev/null\n@@ -1,36 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="RecurrenceType" meta_type="Factory-based Type Information"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">Recurrence Type</property>\n- <property name="description">A simple archetype with a recurrence field</property>\n- <property name="content_icon">document_icon.gif</property>\n- <property name="content_meta_type">RecurrenceType</property>\n- <property name="product">plone.formwidget.recurrence.tests.at_example</property>\n- <property name="factory">addRecurrenceType</property>\n- <property name="immediate_view">base_edit</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="allowed_content_types"/>\n- <property name="allow_discussion">False</property>\n- <alias from="(Default)" to="base_view"/>\n- <alias from="edit" to="base_edit"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    url_expr="string:${object_url}/base_view" visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    url_expr="string:${object_url}/base_edit" visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n- <action title="Properties" action_id="metadata" category="object"\n-    condition_expr="" url_expr="string:${object_url}/base_metadata"\n-    visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n- <action title="References" action_id="references" category="object"\n-    condition_expr="object/archetype_tool/has_graphviz"\n-    url_expr="string:${object_url}/reference_graph" visible="True">\n-  <permission value="Modify portal content"/>\n-  <permission value="Review portal content"/>\n- </action>\n-</object>\ndiff --git a/plone/formwidget/recurrence/tests/base.py b/plone/formwidget/recurrence/tests/base.py\nindex 7185684..ec2bfd1 100644\n--- a/plone/formwidget/recurrence/tests/base.py\n+++ b/plone/formwidget/recurrence/tests/base.py\n@@ -1,14 +1,10 @@\n """Base module for unittesting"""\n-from Products.CMFPlone.utils import getFSVersionTuple\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n-from plone.testing import z2\n-import unittest\n-\n \n-PLONE5 = getFSVersionTuple()[0] >= 5\n+import unittest\n \n \n class PloneFormwidgetRecurrenceLayer(PloneSandboxLayer):\n@@ -17,47 +13,36 @@ class PloneFormwidgetRecurrenceLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         """Set up Zope."""\n-        # Load ZCML\n-        import plone.formwidget.recurrence\n-        self.loadZCML(package=plone.formwidget.recurrence)\n \n-        import plone.formwidget.recurrence.tests.at_example  # install AT example types  # noqa\n-        self.loadZCML(package=plone.formwidget.recurrence.tests.at_example)\n-        z2.installProduct(app, \'plone.formwidget.recurrence.tests.at_example\')\n+        import plone.app.z3cform\n \n-        z2.installProduct(app, \'Products.ATContentTypes\')\n+        self.loadZCML(package=plone.app.z3cform)\n \n-    def setUpPloneSite(self, portal):\n-        """Set up Plone."""\n-        if PLONE5:\n-            # Install Products.ATContentTypes profile only for versions, where\n-            # it\'s available\n-            self.applyProfile(portal, \'Products.ATContentTypes:default\')\n-        # install at example types\n-        self.applyProfile(\n-            portal,\n-            \'plone.formwidget.recurrence.tests.at_example:sample_types\'\n-        )\n+        import plone.formwidget.recurrence\n \n-        self.applyProfile(portal, \'plone.formwidget.recurrence:default\')\n+        self.loadZCML(package=plone.formwidget.recurrence)\n \n-    def tearDownZope(self, app):\n-        """Tear down Zope."""\n-        z2.uninstallProduct(app, \'plone.formwidget.recurrence.tests.at_example\')  # noqa\n+    def setUpPloneSite(self, portal):\n+        """Set up Plone."""\n+        self.applyProfile(portal, "plone.formwidget.recurrence:default")\n \n \n FIXTURE = PloneFormwidgetRecurrenceLayer()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Integration")\n+    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Integration"\n+)\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Functional")\n+    bases=(FIXTURE,), name="PloneFormwidgetRecurrenceLayer:Functional"\n+)\n \n \n class IntegrationTestCase(unittest.TestCase):\n     """Base class for integration tests."""\n+\n     layer = INTEGRATION_TESTING\n \n \n class FunctionalTestCase(unittest.TestCase):\n     """Base class for functional tests."""\n+\n     layer = FUNCTIONAL_TESTING\ndiff --git a/plone/formwidget/recurrence/tests/test_atwidget.py b/plone/formwidget/recurrence/tests/test_atwidget.py\ndeleted file mode 100644\nindex f7a0c31..0000000\n--- a/plone/formwidget/recurrence/tests/test_atwidget.py\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-from Products.Archetypes.tests.utils import makeContent\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.formwidget.recurrence.tests.base import FunctionalTestCase\n-from plone.testing.z2 import Browser\n-\n-import transaction\n-\n-\n-TESTVALUE = "FREQ=MONTHLY;BYDAY=+3TU;COUNT=5"\n-\n-\n-class ATWidgetTestCase(FunctionalTestCase):\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.folder = self.portal[\'test-folder\']\n-\n-        self.obj = makeContent(\n-            self.folder, portal_type=\'RecurrenceType\', id=\'testobj\'\n-        )\n-        self.field = self.obj.getField(\'rec\')\n-        self.widget = self.field.widget\n-\n-        login(self.portal, TEST_USER_NAME)\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.browser.handleErrors = False\n-        transaction.commit()\n-\n-    def tearDown(self):\n-        super(ATWidgetTestCase, self).tearDown()\n-        self.portal.manage_delObjects([\'test-folder\'])\n-        transaction.commit()\n-\n-    def test_widget_properties(self):\n-        widget = self.widget\n-        self.assertEqual(widget.macro_edit, \'recurrence_widget\')\n-        self.assertTrue(widget.startField == \'test_start_field\')\n-        self.assertTrue(widget.startYear == \'test_start_year\')\n-        self.assertTrue(widget.startMonth == \'test_start_month\')\n-        self.assertTrue(widget.startDay == \'test_start_day\')\n-        self.assertTrue(widget.first_day == 4)\n-\n-    def test_widget_process(self):\n-        self.assertFalse(self.widget.process_form(self.obj, self.field, {}))\n-        self.assertEqual(\n-            self.widget.process_form(self.obj, self.field, {\'rec\': TESTVALUE}),\n-            (TESTVALUE, {})\n-        )\n-\n-    def test_widget_rendering(self):\n-        self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' %\n-            (TEST_USER_NAME, TEST_USER_PASSWORD,)\n-        )\n-        self.browser.open(self.obj.absolute_url())\n-        self.browser.getLink(\'Edit\').click()\n-        self.assertIn(\'Recurrence\', self.browser.contents)\ndiff --git a/plone/formwidget/recurrence/tests/test_z3cwidget.py b/plone/formwidget/recurrence/tests/test_z3cwidget.py\nindex 36d7b7c..74d63c0 100644\n--- a/plone/formwidget/recurrence/tests/test_z3cwidget.py\n+++ b/plone/formwidget/recurrence/tests/test_z3cwidget.py\n@@ -2,23 +2,25 @@\n from plone.app.z3cform.widget import DateFieldWidget\n from plone.formwidget.recurrence.tests.base import IntegrationTestCase\n from plone.formwidget.recurrence.z3cform.widget import RecurrenceFieldWidget\n-from z3c.form import form, field\n+from z3c.form import field\n+from z3c.form import form\n from z3c.form.testing import TestRequest\n from zope.schema.fieldproperty import FieldProperty\n \n+import json\n import zope.interface\n import zope.schema\n \n \n class ITestForm(zope.interface.Interface):\n-    recurrence = zope.schema.Text(title=u\'Recurrence\', required=True)\n-    day = zope.schema.Date(title=u\'Day\', required=True)\n+    recurrence = zope.schema.Text(title="Recurrence", required=True)\n+    day = zope.schema.Date(title="Day", required=True)\n \n \n @zope.interface.implementer(ITestForm)\n class TestForm(SimpleItem):\n-    recurrence = FieldProperty(ITestForm[\'recurrence\'])\n-    day = FieldProperty(ITestForm[\'day\'])\n+    recurrence = FieldProperty(ITestForm["recurrence"])\n+    day = FieldProperty(ITestForm["day"])\n \n     def __init__(self, recurrence, day):\n         super(TestForm, self).__init__(id)\n@@ -28,26 +30,40 @@ def __init__(self, recurrence, day):\n \n class TestAddForm(form.AddForm):\n     fields = field.Fields(ITestForm)\n-    fields[\'recurrence\'].widgetFactory = RecurrenceFieldWidget\n-    fields[\'day\'].widgetFactory = DateFieldWidget\n+    fields["recurrence"].widgetFactory = RecurrenceFieldWidget\n+    fields["day"].widgetFactory = DateFieldWidget\n \n \n class Z3CWidgetTestCase(IntegrationTestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-\n-    def test_widget_rendering(self):\n+        self.portal = self.layer["portal"]\n         request = TestRequest()\n-        request.LANGUAGE = \'en\'\n+        request.LANGUAGE = "en"\n         form = TestAddForm(self.portal, request)\n         form.update()\n \n-        widget = RecurrenceFieldWidget(form.fields[\'recurrence\'].field,\n-                                       request)\n-        widget.form = form\n-        widget.start_field = \'day\'\n-        widget.update()\n+        self.widget = RecurrenceFieldWidget(form.fields["recurrence"].field, request)\n \n-        html = widget.render()\n-        self.assertIn(\'recurrence\', html)\n+        self.widget.form = form\n+        self.widget.start_field = "day"\n+        self.widget.update()\n+\n+    def test_widget_options(self):\n+        pat_options = json.loads(self.widget.get_pattern_options())\n+        self.assertEqual(\n+            {\n+                "ajaxContentType": "application/x-www-form-urlencoded; charset=UTF-8",\n+                "ajaxURL": "http://nohost/plone/@@json_recurrence",\n+                "firstDay": 7,\n+                "hasRepeatForeverButton": True,\n+                "lang": "en",\n+                "readOnly": False,\n+                "ributtonExtraClass": "allowMultiSubmit",\n+                "startField": "form.widgets.day",\n+            },\n+            pat_options["configuration"],\n+        )\n+\n+    def test_widget_rendering(self):\n+        html = self.widget.render()\n+        self.assertIn("pat-recurrence", html)\ndiff --git a/plone/formwidget/recurrence/z3cform/field.py b/plone/formwidget/recurrence/z3cform/field.py\nindex 93529b0..fd61a4d 100644\n--- a/plone/formwidget/recurrence/z3cform/field.py\n+++ b/plone/formwidget/recurrence/z3cform/field.py\n@@ -1,6 +1,6 @@\n+from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceField\n from zope import schema\n from zope.interface import implementer\n-from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceField\n \n \n @implementer(IRecurrenceField)\ndiff --git a/plone/formwidget/recurrence/z3cform/interfaces.py b/plone/formwidget/recurrence/z3cform/interfaces.py\nindex 35e214f..cbd2047 100644\n--- a/plone/formwidget/recurrence/z3cform/interfaces.py\n+++ b/plone/formwidget/recurrence/z3cform/interfaces.py\n@@ -1,21 +1,19 @@\n+from plone.formwidget.recurrence import _\n from z3c.form.interfaces import IWidget\n from zope.schema import ValidationError\n from zope.schema.interfaces import IText\n-from plone.formwidget.recurrence import _\n \n \n # Fields\n class IRecurrenceField(IText):\n-    """Special marker for datetime fields that use our widget.\n-    """\n+    """Special marker for datetime fields that use our widget."""\n \n \n # Widgets\n class IRecurrenceWidget(IWidget):\n-    """Date widget marker for z3c.form.\n-    """\n+    """Date widget marker for z3c.form."""\n \n \n # Errors\n class RecurrenceValidationError(ValidationError):\n-    __doc__ = _(u"The recurrence rule couldn\'t be parsed.")\n+    __doc__ = _("The recurrence rule couldn\'t be parsed.")\ndiff --git a/plone/formwidget/recurrence/z3cform/recurrence_input.pt b/plone/formwidget/recurrence/z3cform/recurrence_input.pt\nindex 28e37c4..8100936 100644\n--- a/plone/formwidget/recurrence/z3cform/recurrence_input.pt\n+++ b/plone/formwidget/recurrence/z3cform/recurrence_input.pt\n@@ -1,16 +1,14 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       tal:omit-tag="">\n-<textarea test=""\n-   class="pat-recurrence"\n-   tal:attributes="id view/id;\n-                   name view/name;\n-                   style view/style;\n-                   title view/title;\n-                   data-pat-recurrence python: view.get_pattern_options()"\n-   tal:content="view/value"\n-   condition="python:view.read_only() != \'true\'"/>\n-<tal:block condition="python:view.read_only() == \'true\'">\n-  <span style="display:none;" tal:attributes="id string:${view/id}-start;name string:${view/name}-start" tal:content="view/get_start_date"/>\n-</tal:block>\n+  <textarea\n+    class="pat-recurrence"\n+    tal:attributes="id view/id;\n+                    name view/name;\n+                    style view/style;\n+                    title view/title;\n+                    data-pat-recurrence python: view.get_pattern_options()"\n+    tal:content="view/value"\n+    tal:condition="python:view.read_only != \'true\'"/>\n+  <span tal:condition="python:view.read_only == \'true\'" style="display:none;" tal:attributes="id string:${view/id}-start;name string:${view/name}-start" tal:content="view/get_start_date"/>\n </html>\ndiff --git a/plone/formwidget/recurrence/z3cform/widget.py b/plone/formwidget/recurrence/z3cform/widget.py\nindex 13957a1..95fb736 100644\n--- a/plone/formwidget/recurrence/z3cform/widget.py\n+++ b/plone/formwidget/recurrence/z3cform/widget.py\n@@ -1,14 +1,15 @@\n-from Products.CMFCore.utils import getToolByName\n from plone.formwidget.recurrence.browser.i18n import translations\n from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceField\n from plone.formwidget.recurrence.z3cform.interfaces import IRecurrenceWidget\n+from Products.CMFCore.utils import getToolByName\n from z3c.form.browser.textarea import TextAreaWidget\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IFormLayer\n from z3c.form.widget import FieldWidget\n from zope.component import adapter\n from zope.component.hooks import getSite\n-from zope.interface import implementer_only, implementer\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n from zope.traversing.browser import absoluteURL\n \n import json\n@@ -18,58 +19,60 @@\n class RecurrenceWidget(TextAreaWidget):\n     """Recurrence widget implementation."""\n \n-    klass = u\'recurrence-widget\'\n-    value = u\'\'\n+    klass = "recurrence-widget"\n+    value = ""\n     start_field = None\n     show_repeat_forever = True\n \n     def site_url(self):\n         return absoluteURL(getSite(), self.request)\n \n+    @property\n     def read_only(self):\n-        return self.mode == \'display\'\n+        return self.mode == "display"\n \n     def get_start_field(self):\n-        if self.mode == \'display\':\n-            return self.id + \'-start\'\n-        if hasattr(self.form.widgets[self.start_field], \'js_field\'):\n+        if self.mode == "display":\n+            return self.id + "-start"\n+        if hasattr(self.form.widgets[self.start_field], "js_field"):\n             return self.form.widgets[self.start_field].js_field\n-        if hasattr(self.form.widgets[self.start_field], \'name\'):\n-            # plone.app.widgets passes name instead of id to input\n+        if hasattr(self.form.widgets[self.start_field], "name"):\n             return self.form.widgets[self.start_field].name\n         return self.form.widgets[self.start_field].id\n \n     def get_start_date(self):\n         start = self.form.fields[self.start_field].field.get(self.context)\n-        return start.strftime(\'%Y-%m-%d %H:%M\')\n+        return start.strftime("%Y-%m-%d %H:%M")\n \n     def first_day(self):\n-        """ First day of the Week. 0..Sunday, 6..Saturday.\n+        """First day of the Week. 0..Sunday, 6..Saturday.\n \n         .. Note::\n             This value is likely to be overwritten by the widget configuration.\n         """\n-        calendar = self.request.locale.dates.calendars[u\'gregorian\']\n-        return calendar.week.get(\'firstDay\', 0)\n+        calendar = self.request.locale.dates.calendars["gregorian"]\n+        return calendar.week.get("firstDay", 0)\n \n     def get_pattern_options(self):\n-        portal = getToolByName(getSite(), \'portal_url\').getPortalObject()\n-        ajax_url = portal.absolute_url() + \'/@@json_recurrence\'\n+        portal = getToolByName(getSite(), "portal_url").getPortalObject()\n+        ajax_url = portal.absolute_url() + "/@@json_recurrence"\n         conf = dict(\n-            ajaxContentType=\'application/x-www-form-urlencoded; charset=UTF-8\',\n+            ajaxContentType="application/x-www-form-urlencoded; charset=UTF-8",\n             ajaxURL=ajax_url,\n             firstDay=self.first_day(),\n             hasRepeatForeverButton=self.show_repeat_forever,\n             lang=self.request.LANGUAGE,\n-            readOnly=self.read_only(),\n-            ributtonExtraClass=\'allowMultiSubmit\',\n+            readOnly=self.read_only,\n+            ributtonExtraClass="allowMultiSubmit",\n             startField=self.get_start_field(),\n         )\n-        return json.dumps({\n-            "localization": translations(self.request),\n-            "language": self.request.LANGUAGE,\n-            "configuration": conf\n-        })\n+        return json.dumps(\n+            {\n+                "localization": translations(self.request),\n+                "language": self.request.LANGUAGE,\n+                "configuration": conf,\n+            }\n+        )\n \n \n @implementer(IFieldWidget)\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..54fc492\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,5 @@\n+-c constraints.txt\n+-e .[test] --install-option="--pre"\n+\n+# WSGI: A system for configuration of WSGI web components in declarative .ini format.\n+Paste\ndiff --git a/setup.cfg b/setup.cfg\nindex aecfa92..529a6a4 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,3 +7,11 @@ ignore =\n \n [bdist_wheel]\n universal = 1\n+\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex f6a1c2c..a9dddba 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,65 +1,56 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n \n-version = \'2.1.6.dev0\'\n+version = "3.0.0.dev0"\n \n setup(\n-    name=\'plone.formwidget.recurrence\',\n+    name="plone.formwidget.recurrence",\n     version=version,\n     description="Recurrence widget for Plone",\n-    long_description="%s\\n%s" % (open("README.rst").read(),\n-                                 open("CHANGES.rst").read()),\n+    long_description="%s\\n%s" % (open("README.rst").read(), open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone Event Recurrence Date Time Widget Archetypes z3c.form\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.formwidget.recurrence\',\n-    license=\'GPL\',\n+    keywords="Plone Event Recurrence Date Time Widget z3c.form",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.formwidget.recurrence",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.formwidget\'],\n+    namespace_packages=["plone", "plone.formwidget"],\n     include_package_data=True,\n+    python_requires=">=3.8",\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'python-dateutil\',\n-        \'zope.component\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n+        "setuptools",\n+        "Products.CMFCore",\n+        "Products.CMFPlone",\n+        "python-dateutil",\n+        "zope.component",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n     ],\n     extras_require=dict(\n         z3cform=[\n-            \'z3c.form\',\n-            \'zope.schema\',\n-            \'zope.traversing\',\n-        ],\n-        archetypes=[\n-            \'Products.Archetypes\',\n-            \'Products.validation\',\n+            "z3c.form",\n+            "zope.schema",\n+            "zope.traversing",\n         ],\n         test=[\n-            \'Products.ATContentTypes\',\n-            \'Products.GenericSetup\',\n-            \'plone.app.testing\',\n-            \'plone.app.z3cform\',\n-            \'plone.formwidget.recurrence[archetypes, z3cform]\',\n-        ]\n+            "plone.app.testing",\n+            "plone.testing",\n+            "plone.app.z3cform",\n+        ],\n     ),\n     entry_points="""\n     # -*- Entry points: -*-\ndiff --git a/sources.ini b/sources.ini\nnew file mode 100644\nindex 0000000..e7b74cf\n--- /dev/null\n+++ b/sources.ini\n@@ -0,0 +1,25 @@\n+[settings]\n+# This is a mxdev configuration file\n+#\n+# available options are documented at\n+# https://pypi.org/project/mxdev/\n+#\n+# read also README_MAKE.md in this folder\n+#\n+requirements-in = requirements.txt\n+requirements-out = requirements-mxdev.txt\n+\n+# ignore own dev-package from existing constraints\n+# because it is pinned in the plone-release\n+ignores =\n+    plone.formwidget.recurrence\n+\n+version-overrides =\n+\n+# variables\n+# github = git+ssh://git@github.com/\n+github = git+https://github.com/\n+\n+# [collective.themefragments]\n+# url = ${settings:github}/collective/collective.themefragments.git\n+# mode = skip\n'

