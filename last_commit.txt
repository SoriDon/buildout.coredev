Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2019-03-14T16:40:01+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.outputfilters/commit/e5be14b37fe77a9358de481e5b2b52378fcd285a

fix UnicodeDecodeError when linked image has non-ascii characters in title or description

this is only in python2

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d8c1771..bd9a979 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- fix UnicodeDecodeError in Python 2 when uid-linked image has\n+  non-ascii characters in title or description\n+  [petschki]\n \n \n 3.1.1 (2019-01-07)\n@@ -23,7 +25,7 @@ Bug fixes:\n Bug fixes:\n \n - bugfix for KeyError caused by <a> elements without href attribute\n-  [ajung] \n+  [ajung]\n \n \n 3.1.0 (2018-11-02)\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 13d5655..8904a92 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -152,7 +152,7 @@ def __call__(self, data):\n \n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n-                title = aq_acquire(fullimage, \'Title\')()\n+                title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n                 if not attributes.get(\'alt\'):\n                     # XXX alt attribute contains *alternate* text\n                     attributes[\'alt\'] = description or title\n@@ -282,7 +282,7 @@ def traverse_path(base, path):\n         except AttributeError:\n             return None, None, src, description\n         src = url + appendix\n-        description = aq_acquire(fullimage, \'Description\')()\n+        description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n         return image, fullimage, src, description\n \n     def handle_captioned_image(self, attributes, image, fullimage,\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex ecf4f2a..bf55244 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -54,7 +54,8 @@ def UID(self):\n             allowedRolesAndUsers = (\'Anonymous\',)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = title = \'foo2\'\n+            id = __name__ = \'foo2\'\n+            title = u\'Sch\xc3\xb6nes Bild\'\n \n             def UID(self):\n                 return \'foo2\'\n@@ -349,7 +350,7 @@ def test_image_captioning_resolveuid_new_scale(self):\n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = """<img alt="foo2" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="foo2"/>"""\n+        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n@@ -363,7 +364,7 @@ def test_image_captioning_resolveuid_no_scale(self):\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = """<img alt="foo2" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="foo2"/>"""\n+        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2019-03-15T15:13:00+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.outputfilters/commit/d7b87ad800702eb6598fbc6a2a4c550b1fa32575

Merge pull request #34 from plone/issue_33

fix UnicodeDecodeError when linked image has non-ascii characters in title or description

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d8c1771..bd9a979 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- fix UnicodeDecodeError in Python 2 when uid-linked image has\n+  non-ascii characters in title or description\n+  [petschki]\n \n \n 3.1.1 (2019-01-07)\n@@ -23,7 +25,7 @@ Bug fixes:\n Bug fixes:\n \n - bugfix for KeyError caused by <a> elements without href attribute\n-  [ajung] \n+  [ajung]\n \n \n 3.1.0 (2018-11-02)\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 13d5655..8904a92 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -152,7 +152,7 @@ def __call__(self, data):\n \n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n-                title = aq_acquire(fullimage, \'Title\')()\n+                title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n                 if not attributes.get(\'alt\'):\n                     # XXX alt attribute contains *alternate* text\n                     attributes[\'alt\'] = description or title\n@@ -282,7 +282,7 @@ def traverse_path(base, path):\n         except AttributeError:\n             return None, None, src, description\n         src = url + appendix\n-        description = aq_acquire(fullimage, \'Description\')()\n+        description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n         return image, fullimage, src, description\n \n     def handle_captioned_image(self, attributes, image, fullimage,\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex ecf4f2a..bf55244 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -54,7 +54,8 @@ def UID(self):\n             allowedRolesAndUsers = (\'Anonymous\',)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = title = \'foo2\'\n+            id = __name__ = \'foo2\'\n+            title = u\'Sch\xc3\xb6nes Bild\'\n \n             def UID(self):\n                 return \'foo2\'\n@@ -349,7 +350,7 @@ def test_image_captioning_resolveuid_new_scale(self):\n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = """<img alt="foo2" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="foo2"/>"""\n+        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n@@ -363,7 +364,7 @@ def test_image_captioning_resolveuid_no_scale(self):\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = """<img alt="foo2" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="foo2"/>"""\n+        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n'

