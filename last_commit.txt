Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-02-01T08:40:18+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/a633eb69f865e680d04bf3968bf43ea800c35f2a

Add missing "pattern_options" multiadapter

Files changed:
M plone/app/z3cform/widgets/base.py

b'diff --git a/plone/app/z3cform/widgets/base.py b/plone/app/z3cform/widgets/base.py\nindex 916986e3..672eab6d 100644\n--- a/plone/app/z3cform/widgets/base.py\n+++ b/plone/app/z3cform/widgets/base.py\n@@ -3,6 +3,8 @@\n from plone.app.z3cform.utils import dict_merge\n from z3c.form.browser import widget\n from z3c.form.widget import Widget\n+from z3c.form.interfaces import IValue\n+from zope.component import queryMultiAdapter\n from zope.schema.interfaces import ICollection\n \n import json\n@@ -96,6 +98,17 @@ def attributes(self):\n                 self.get_pattern_options().copy(),\n                 self.pattern_options,\n             )\n+            # lookup named multiadapter "pattern_options"\n+            # explicitely and merge it\n+            pat_options_adapter = queryMultiAdapter(\n+                (self.context, self.request, self.form, self.field, self),\n+                IValue, name="pattern_options",\n+            )\n+            if pat_options_adapter:\n+                pat_options = dict_merge(\n+                    pat_options,\n+                    pat_options_adapter.get(),\n+                )\n             # if callables are injected resolve them\n             pat_options = call_callables(\n                 pat_options,\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-02-01T08:41:48+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/14f455e4df9a4b05e1011bc366445119937d7018

changenote

Files changed:
A news/190.bugfix

b'diff --git a/news/190.bugfix b/news/190.bugfix\nnew file mode 100644\nindex 00000000..c84ad0d5\n--- /dev/null\n+++ b/news/190.bugfix\n@@ -0,0 +1,2 @@\n+Add missing ``pattern_options`` multiadapter to new PatternFormElement base class.\n+[petschki]\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-02-01T08:44:47+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/1e1465d8bc4eabda6fdfaff65a8ab9661e05f98f

code styling

Files changed:
M plone/app/z3cform/widgets/base.py

b'diff --git a/plone/app/z3cform/widgets/base.py b/plone/app/z3cform/widgets/base.py\nindex 672eab6..7a44332 100644\n--- a/plone/app/z3cform/widgets/base.py\n+++ b/plone/app/z3cform/widgets/base.py\n@@ -2,8 +2,8 @@\n from plone.app.z3cform.utils import call_callables\n from plone.app.z3cform.utils import dict_merge\n from z3c.form.browser import widget\n-from z3c.form.widget import Widget\n from z3c.form.interfaces import IValue\n+from z3c.form.widget import Widget\n from zope.component import queryMultiAdapter\n from zope.schema.interfaces import ICollection\n \n@@ -99,10 +99,11 @@ def attributes(self):\n                 self.pattern_options,\n             )\n             # lookup named multiadapter "pattern_options"\n-            # explicitely and merge it\n+            # explicitly and merge it\n             pat_options_adapter = queryMultiAdapter(\n                 (self.context, self.request, self.form, self.field, self),\n-                IValue, name="pattern_options",\n+                IValue,\n+                name="pattern_options",\n             )\n             if pat_options_adapter:\n                 pat_options = dict_merge(\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-02-01T09:36:21+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/d0a3f3404763e79d900e40b4f1d3e1c5cb01e9cf

add test for pattern_options adapter

Files changed:
M plone/app/z3cform/tests/test_widgets.py

b'diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 9fc70835..2629e941 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n+from plone.app.z3cform.widgets.base import PatternFormElement\n from plone.app.z3cform.widgets.datetime import DateWidget\n from plone.app.z3cform.widgets.relateditems import RelatedItemsWidget\n from plone.app.z3cform.widgets.text import TextFieldWidget\n@@ -21,7 +22,10 @@\n from unittest.mock import Mock\n from z3c.form.form import EditForm\n from z3c.form.form import Form\n+from z3c.form.interfaces import IValue\n+from z3c.form.interfaces import IWidget\n from z3c.form.widget import FieldWidget\n+from z3c.form.widget import Widget\n from z3c.relationfield.relation import RelationValue\n from z3c.relationfield.schema import RelationChoice\n from z3c.relationfield.schema import RelationList\n@@ -33,6 +37,7 @@\n from zope.interface import alsoProvides\n from zope.interface import Interface\n from zope.interface import provider\n+from zope.interface.declarations import implementer_only\n from zope.intid.interfaces import IIntIds\n from zope.pagetemplate.interfaces import IPageTemplate\n from zope.publisher.browser import TestRequest\n@@ -73,6 +78,15 @@ def example_vocabulary_factory(context, query=None):\n     return tmp\n \n \n+class ITestBaseWidget(IWidget):\n+    """marker"""\n+\n+\n+@implementer_only(ITestBaseWidget)\n+class TestBaseWidget(PatternFormElement, Widget):\n+    pass\n+\n+\n class PatternFormElementTest(unittest.TestCase):\n     layer = PAZ3CForm_INTEGRATION_TESTING\n \n@@ -81,22 +95,49 @@ def setUp(self):\n         self.field = TextLine(__name__="textlinefield")\n         self.maxDiff = 999999\n \n+        self.widget = TestBaseWidget(self.request)\n+        self.widget.field = self.field\n+        self.widget.pattern = "example"\n+\n     def test_base_widget(self):\n-        from plone.app.z3cform.widgets.base import PatternFormElement\n-        from z3c.form.widget import Widget\n+        self.assertIsNone(self.widget.pattern)\n+\n+        self.assertEqual(\n+            ("example", {"required": "required", "data-pat-example": ""}),\n+            (self.widget.pattern, self.widget.attributes),\n+        )\n \n-        class TestBaseWidget(PatternFormElement, Widget):\n-            pass\n+    def test_pattern_options_adapter(self):\n+        custom_options = {\n+            "customOption": "you should see me",\n+        }\n \n-        widget = TestBaseWidget(self.request)\n-        widget.field = self.field\n+        class CustomPatternOptionsAdapter:\n+            def __init__(self, context, request, form, field, widget):\n+                self.context = context\n+                self.request = request\n+                self.form = form\n+                self.field = field\n+                self.widget = widget\n \n-        self.assertIsNone(widget.pattern)\n+            def get(self):\n+                # return custom "pattern_options"\n+                return custom_options\n \n-        widget.pattern = "example"\n+        # not customized before adapting\n+        self.assertEqual(self.widget.attributes.get("data-pat-example"), "")\n+\n+        base.registerAdapter(\n+            CustomPatternOptionsAdapter,\n+            (Interface, Interface, Interface, Interface, ITestBaseWidget),\n+            IValue,\n+            name="pattern_options",\n+        )\n+\n+        # customized after adapting\n         self.assertEqual(\n-            ("example", {"required": "required", "data-pat-example": ""}),\n-            (widget.pattern, widget.attributes),\n+            self.widget.attributes.get("data-pat-example"),\n+            json.dumps(custom_options),\n         )\n \n \n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-02-01T09:38:42+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/3ffd7372b00faf9982f566287a0e8b4513bd7308

fix refactored base_widget test

Files changed:
M plone/app/z3cform/tests/test_widgets.py

b'diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 2629e94..c063a3d 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -100,8 +100,6 @@ def setUp(self):\n         self.widget.pattern = "example"\n \n     def test_base_widget(self):\n-        self.assertIsNone(self.widget.pattern)\n-\n         self.assertEqual(\n             ("example", {"required": "required", "data-pat-example": ""}),\n             (self.widget.pattern, self.widget.attributes),\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-02-04T13:42:46+01:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/1ebf2bbde831cfee48b03786862802ff8eeecca8

Merge pull request #191 from plone/patter-options-adapter

Files changed:
A news/190.bugfix
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widgets/base.py

b'diff --git a/news/190.bugfix b/news/190.bugfix\nnew file mode 100644\nindex 00000000..c84ad0d5\n--- /dev/null\n+++ b/news/190.bugfix\n@@ -0,0 +1,2 @@\n+Add missing ``pattern_options`` multiadapter to new PatternFormElement base class.\n+[petschki]\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 9fc70835..c063a3d2 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n+from plone.app.z3cform.widgets.base import PatternFormElement\n from plone.app.z3cform.widgets.datetime import DateWidget\n from plone.app.z3cform.widgets.relateditems import RelatedItemsWidget\n from plone.app.z3cform.widgets.text import TextFieldWidget\n@@ -21,7 +22,10 @@\n from unittest.mock import Mock\n from z3c.form.form import EditForm\n from z3c.form.form import Form\n+from z3c.form.interfaces import IValue\n+from z3c.form.interfaces import IWidget\n from z3c.form.widget import FieldWidget\n+from z3c.form.widget import Widget\n from z3c.relationfield.relation import RelationValue\n from z3c.relationfield.schema import RelationChoice\n from z3c.relationfield.schema import RelationList\n@@ -33,6 +37,7 @@\n from zope.interface import alsoProvides\n from zope.interface import Interface\n from zope.interface import provider\n+from zope.interface.declarations import implementer_only\n from zope.intid.interfaces import IIntIds\n from zope.pagetemplate.interfaces import IPageTemplate\n from zope.publisher.browser import TestRequest\n@@ -73,6 +78,15 @@ def example_vocabulary_factory(context, query=None):\n     return tmp\n \n \n+class ITestBaseWidget(IWidget):\n+    """marker"""\n+\n+\n+@implementer_only(ITestBaseWidget)\n+class TestBaseWidget(PatternFormElement, Widget):\n+    pass\n+\n+\n class PatternFormElementTest(unittest.TestCase):\n     layer = PAZ3CForm_INTEGRATION_TESTING\n \n@@ -81,22 +95,47 @@ def setUp(self):\n         self.field = TextLine(__name__="textlinefield")\n         self.maxDiff = 999999\n \n+        self.widget = TestBaseWidget(self.request)\n+        self.widget.field = self.field\n+        self.widget.pattern = "example"\n+\n     def test_base_widget(self):\n-        from plone.app.z3cform.widgets.base import PatternFormElement\n-        from z3c.form.widget import Widget\n+        self.assertEqual(\n+            ("example", {"required": "required", "data-pat-example": ""}),\n+            (self.widget.pattern, self.widget.attributes),\n+        )\n+\n+    def test_pattern_options_adapter(self):\n+        custom_options = {\n+            "customOption": "you should see me",\n+        }\n \n-        class TestBaseWidget(PatternFormElement, Widget):\n-            pass\n+        class CustomPatternOptionsAdapter:\n+            def __init__(self, context, request, form, field, widget):\n+                self.context = context\n+                self.request = request\n+                self.form = form\n+                self.field = field\n+                self.widget = widget\n \n-        widget = TestBaseWidget(self.request)\n-        widget.field = self.field\n+            def get(self):\n+                # return custom "pattern_options"\n+                return custom_options\n \n-        self.assertIsNone(widget.pattern)\n+        # not customized before adapting\n+        self.assertEqual(self.widget.attributes.get("data-pat-example"), "")\n \n-        widget.pattern = "example"\n+        base.registerAdapter(\n+            CustomPatternOptionsAdapter,\n+            (Interface, Interface, Interface, Interface, ITestBaseWidget),\n+            IValue,\n+            name="pattern_options",\n+        )\n+\n+        # customized after adapting\n         self.assertEqual(\n-            ("example", {"required": "required", "data-pat-example": ""}),\n-            (widget.pattern, widget.attributes),\n+            self.widget.attributes.get("data-pat-example"),\n+            json.dumps(custom_options),\n         )\n \n \ndiff --git a/plone/app/z3cform/widgets/base.py b/plone/app/z3cform/widgets/base.py\nindex 916986e3..7a443323 100644\n--- a/plone/app/z3cform/widgets/base.py\n+++ b/plone/app/z3cform/widgets/base.py\n@@ -2,7 +2,9 @@\n from plone.app.z3cform.utils import call_callables\n from plone.app.z3cform.utils import dict_merge\n from z3c.form.browser import widget\n+from z3c.form.interfaces import IValue\n from z3c.form.widget import Widget\n+from zope.component import queryMultiAdapter\n from zope.schema.interfaces import ICollection\n \n import json\n@@ -96,6 +98,18 @@ def attributes(self):\n                 self.get_pattern_options().copy(),\n                 self.pattern_options,\n             )\n+            # lookup named multiadapter "pattern_options"\n+            # explicitly and merge it\n+            pat_options_adapter = queryMultiAdapter(\n+                (self.context, self.request, self.form, self.field, self),\n+                IValue,\n+                name="pattern_options",\n+            )\n+            if pat_options_adapter:\n+                pat_options = dict_merge(\n+                    pat_options,\n+                    pat_options_adapter.get(),\n+                )\n             # if callables are injected resolve them\n             pat_options = call_callables(\n                 pat_options,\n'

