Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-10-27T22:44:03-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/e4b67fcc6dc3785f5d35b3cc20dd19ed3680feef

Experiments

Files changed:
A src/plone/recipe/zope2instance/wsgischema.xml
A src/plone/recipe/zope2instance/zopectl.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex de0af72..65f0989 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -28,7 +28,7 @@\n """\n \n from pkg_resources import iter_entry_points\n-from ZServer.Zope2.Startup import zopectl\n+from . import zopectl\n \n import csv\n import os\n@@ -50,6 +50,12 @@\n         \'ERROR: You are not member of the "Administrators" group, \'\n         \'or you have not run the shell as Administrator.\')\n \n+try:\n+    import ZServer\n+    HAS_ZSERVER = True\n+except ImportError:\n+    HAS_ZSERVER = False\n+\n \n class AdjustedZopeCmd(zopectl.ZopeCmd):\n \n@@ -422,14 +428,24 @@ def get_startup_cmd(self, python, more, pyflags=""):\n         # will act as escapes.  Use r\'\' instead.\n         # Also, don\'t forget that \'python\'\n         # may have spaces and needs to be quoted.\n+        if HAS_ZSERVER:\n+            cmd = (\n+                "from Zope2 import configure; "\n+                "configure(r\'%s\'); "\n+                "import Zope2; app=Zope2.app(); "\n+            )\n+        else:\n+            cmd = (\n+                "from Zope2.Startup.run import configure_wsgi; "\n+                "configure_wsgi(r\'%s\'); "\n+                "import Zope2; app=Zope2.app(); "\n+            )\n         cmdline = (\n-            \'"%s" %s "%s" %s -c "from Zope2 import configure; \'\n-            \'configure(r\\\'%s\\\'); \'\n-            \'import Zope2; app=Zope2.app(); \' % (\n+            \'"%s" %s "%s" %s -c "%s\' % (\n                 python, pyflags,\n                 self.options.interpreter,\n                 pyflags,\n-                self.options.configfile\n+                cmd % self.options.configfile,\n             )\n         )\n \n@@ -574,7 +590,7 @@ def do_foreground(self, arg, debug=True):\n         local_additions = []\n \n         if debug:\n-            if not program.count(\'-X\'):\n+            if HAS_ZSERVER and not program.count(\'-X\'):\n                 local_additions += [\'-X\']\n             if not program.count(\'debug-mode=on\'):\n                 local_additions += [\'debug-mode=on\']\n@@ -621,15 +637,25 @@ def main(args=None):\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n-    # Change the program to avoid warning messages\n-    startup = os.path.dirname(zopectl.__file__)\n-\n+    # Run the right command depending on whether we have ZServer\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    script = os.path.join(startup, \'run.py\')\n-    options.program = [\n-        options.python, options.interpreter, script, \'-C\', options.configfile]\n+    if HAS_ZSERVER:\n+        from ZServer.Zope2.Startup import run\n+        script = run.__file__\n+        options.program = [\n+            options.python, options.interpreter, script, \'-C\',\n+            options.configfile\n+        ]\n+    else:\n+        from Zope2.Startup import serve\n+        script = serve.__file__\n+        # @@@ generate this?\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'waitress.ini\')\n+        options.program = [\n+            options.python, options.interpreter, script, wsgi_ini\n+        ]\n \n     # We use our own ZopeCmd set, that is derived from the original one.\n     c = AdjustedZopeCmd(options)\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 95c9f11..a3fbc48 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -610,10 +610,7 @@ def install_scripts(self):\n         extra_paths = options.get(\'extra-paths\', \'\').split()\n         requirements, ws = self.egg.working_set([\'plone.recipe.zope2instance\'])\n         reqs = [self.options.get(\'control-script\', self.name)]\n-        if self.wsgi:\n-            reqs.extend([\'Zope2.Startup.serve\', \'main\'])\n-        else:\n-            reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n+        reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n         reqs = [tuple(reqs)]\n \n         if options.get(\'relative-paths\'):\n@@ -637,8 +634,7 @@ def __repr__(self):\n                 )\n \n         options[\'zope-conf\'] = zope_conf_path\n-        arguments = ["-C", zope_conf_path, \'-p\', program_path] \\\n-            if not self.wsgi else [\'ignored\']\n+        arguments = ["-C", zope_conf_path, \'-p\', program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n         script_arguments = (\'\\n        \' + repr(arguments) +\n@@ -647,10 +643,9 @@ def __repr__(self):\n         generated = self._install_scripts(\n             options[\'bin-directory\'], ws, reqs=reqs, extra_paths=extra_paths,\n             script_arguments=script_arguments)\n-        if not self.wsgi:\n-            generated.extend(self._install_scripts(\n-                os.path.join(options[\'location\'], \'bin\'), ws,\n-                interpreter=program_name, extra_paths=extra_paths))\n+        generated.extend(self._install_scripts(\n+            os.path.join(options[\'location\'], \'bin\'), ws,\n+            interpreter=program_name, extra_paths=extra_paths))\n         return generated\n \n     def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n@@ -673,10 +668,7 @@ def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n                 script_arguments=script_arguments,\n                 )\n         else:\n-            if self.wsgi:\n-                initialization = wsgi_initialization % options\n-            else:\n-                initialization = options[\'initialization\'] % options\n+            initialization = options[\'initialization\'] % options\n             return zc.buildout.easy_install.scripts(\n                 dest=dest,\n                 reqs=reqs,\n@@ -1121,9 +1113,3 @@ def render_file_storage(self, file_storage, blob_storage,\n     %s\n </configure>\n """\n-\n-wsgi_initialization = """\\\n-from Zope2.Startup.run import make_wsgi_app\n-wsgiapp = make_wsgi_app({}, \'%(zope-conf)s\')\n-def application(*args, **kwargs):return wsgiapp(*args, **kwargs)\n-"""\ndiff --git a/src/plone/recipe/zope2instance/wsgischema.xml b/src/plone/recipe/zope2instance/wsgischema.xml\nnew file mode 100644\nindex 0000000..b2aa221\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/wsgischema.xml\n@@ -0,0 +1,522 @@\n+<schema prefix="Zope2.Startup.datatypes"\n+        datatype=".root_wsgi_config"\n+        handler="root_wsgi_handler">\n+\n+  <!-- type definitions -->\n+\n+  <import package="ZConfig.components.logger" file="handlers.xml"/>\n+  <import package="ZConfig.components.logger" file="eventlog.xml"/>\n+  <import package="ZODB"/>\n+  <import package="tempstorage" condition="tempstorage"/>\n+\n+  <sectiontype name="logger" datatype="plone.recipe.zope2instance.zopectl.LoggerFactory">\n+    <description>\n+      This "logger" type only applies to access and request ("trace")\n+      logging; event logging is handled by the "logging" package in\n+      the Python standard library.  The loghandler type used here is\n+      provided by the "ZConfig.components.logger" package.\n+    </description>\n+    <key name="level"\n+         datatype="ZConfig.components.logger.datatypes.logging_level"\n+         default="info"/>\n+    <multisection name="*"\n+                  type="ZConfig.logger.handler"\n+                  attribute="handlers"\n+                  required="yes"/>\n+  </sectiontype>\n+\n+  <sectiontype name="environment"\n+               datatype=".environment"\n+               keytype="identifier">\n+    <description>\n+     A section which allows you to define simple key-value pairs which\n+     will be used as environment variable settings during startup.\n+    </description>\n+    <key name="+" attribute="environ">\n+      <description>\n+        Use any key/value pair, e.g. \'MY_PRODUCT_ENVVAR foo_bar\'\n+      </description>\n+    </key>\n+  </sectiontype>\n+\n+  <sectiontype name="zodb_db" datatype=".ZopeDatabase"\n+               implements="ZODB.database" extends="zodb">\n+\n+    <description>\n+      We need to specialize the database configuration section for Zope\n+      only by including a (required) mount-point argument, which\n+      is a string.  A Zope ZODB database can have multiple mount points,\n+      so this is a multikey.\n+    </description>\n+    <multikey name="mount-point" required="yes" attribute="mount_points"\n+              datatype=".mount_point">\n+      <description>\n+       The mount point is a slash-separated path to a \n+       \'Products.ZODBMountPoint.Mount.MountPoint\' instance in Zope. If \n+       such an instance exists, it can mount an object (the mounted \n+       object) into Zope.\n+       By default, the object will be mounted at the same path in Zope (i.e.\n+       \'/foo/bar\' in the database will be mounted at \'/foo/bar\' in Zope).\n+\n+       The object can be mounted at a different point using the\n+       \'virtual_path:real_path\' syntax (e.g.  \'mount-point /foo/bar:/bar\' \n+       will mount the object at \'/bar\' in the database to \'/foo/bar\' in \n+       Zope). The name of the mount point (\'bar\') must be the same as \n+       the mounted object.\n+\n+       It is also possible to specify the root that should be used in the\n+       mounted database by using the syntax\n+       \'virtual_path:~real_root:real_path\'. The root defaults to \'Application\'\n+       and should not normally be changed.\n+      </description>\n+    </multikey>\n+\n+    <key name="connection-class" datatype=".importable_name">\n+      <description>\n+       Change the connection class a database uses on a per-database basis to\n+       support different connection policies.  Use a Python dotted-path\n+       name to specify the connection class.\n+      </description>\n+    </key>\n+\n+   <key name="class-factory" datatype=".importable_name"\n+        default="Zope2.Startup.datatypes.simpleClassFactory">\n+      <description>\n+       Change the class factory function a database uses on a\n+       per-database basis to support different class factory policy.\n+       Use a Python dotted-path name to specify the class factory function.\n+      </description>\n+    </key>\n+\n+    <key name="container-class" datatype="string">\n+      <description>\n+       Change the container class a (mounted) database uses on a\n+       per-database basis to support a different container than a plain\n+       Folder. Use a Python dotted-path name to specify the container class.\n+      </description>\n+    </key>\n+\n+  </sectiontype>\n+\n+  <sectiontype name="zoperunner">\n+    <description>\n+      This section describes the options for zopectl.  These options\n+      have no default value specified in the schema; in some cases,\n+      zopectl calculates a dynamic default, in others, the feature\n+      associated with the option is disabled.\n+\n+      For those options that also have corresponding command-line\n+      options, the command line option (short and long form) are given\n+      here too.\n+    </description>\n+\n+    <multikey name="program" required="no">\n+      <description>\n+       The program(s) that will be run by the runner\n+      </description>\n+    </multikey>\n+\n+    <key name="daemon" datatype="boolean"\n+         required="no" default="true">\n+      <description>\n+        Command-line option: -d or --daemon.\n+\n+        If this option is true, zdrun.py runs in the background as a\n+        true daemon.  It forks an child process which becomes the\n+        subprocess manager, while the parent exits (making the shell\n+        that started it believe it is done).  The child process also\n+        does the following:\n+\n+        - if the directory option is set, change into that directory\n+\n+        - redirect stdin, stdout and stderr to /dev/null\n+\n+        - call setsid() so it becomes a session leader\n+\n+        - call umask(022)\n+      </description>\n+    </key>\n+\n+    <key name="backoff-limit" datatype="integer"\n+         required="no" default="10">\n+      <description>\n+        Command-line option: -b or --backoff-limit.\n+\n+        When the subprocess crashes, zdrun.py inserts a one-second\n+        delay before it restarts it.  When the subprocess crashes\n+        again right away, the delay is incremented by one second, and\n+        so on.  What happens when the delay has reached the value of\n+        backoff-limit (in seconds), depends on the value of the\n+        forever option.  If forever is false, zdrun.py gives up at\n+        this point, and exits.  An always-crashing subprocess will\n+        have been restarted exactly backoff-limit times in this case.\n+        If forever is true, zdrun.py continues to attempt to restart\n+        the process, keeping the delay at backoff-limit seconds.\n+\n+        If the subprocess stays up for more than backoff-limit\n+        seconds, the delay is reset to 1 second.\n+      </description>\n+    </key>\n+\n+    <key name="forever" datatype="boolean"\n+         required="no" default="false">\n+      <description>\n+        Command-line option: -f or --forever.\n+\n+        If this option is true, zdrun.py will keep restarting a\n+        crashing subprocess forever.  If it is false, it will give up\n+        after backoff-limit crashes in a row.  See the description of\n+        backoff-limit for details.\n+      </description>\n+    </key>\n+\n+    <key name="user" datatype="string"\n+         required="no">\n+      <description>\n+        Command-line option: -u or --user.\n+\n+        When zdrun.py is started by root, this option specifies the\n+        user as who the the zdrun.py process (and hence the daemon\n+        subprocess) will run.  This can be a user name or a numeric\n+        user id.  Both the user and the group are set from the\n+        corresponding password entry, using setuid() and setgid().\n+        This is done before zdrun.py does anything else besides\n+        parsing its command line arguments.\n+\n+        NOTE: when zdrun.py is not started by root, specifying this\n+        option is an error.  (XXX This may be a mistake.)\n+\n+        XXX The zdrun.py event log file may be opened *before*\n+        setuid() is called.  Is this good or bad?\n+      </description>\n+    </key>\n+\n+    <key name="hang-around" datatype="boolean"\n+         required="no" default="false">\n+      <description>\n+        If this option is true, the zdrun.py process will remain even\n+        when the daemon subprocess is stopped.  In this case, zopectl\n+        will restart zdrun.py as necessary.  If this option is false,\n+        zdrun.py will exit when the daemon subprocess is stopped\n+        (unless zdrun.py intends to restart it).\n+      </description>\n+    </key>\n+\n+    <key name="umask" datatype="zdaemon.zdoptions.octal_type"\n+         required="no"\n+         default="022">\n+      <description>\n+        Command-line option: -m or --umask.\n+\n+        When daemon mode is used, this option specifies the octal umask\n+        of the subprocess.\n+      </description>\n+    </key>\n+\n+    <key name="default-to-interactive" datatype="boolean"\n+         required="no" default="true">\n+      <description>\n+        If this option is true, zopectl enters interactive mode\n+        when it is invoked without a positional command argument.  If\n+        it is false, you must use the -i or --interactive command line\n+        option to zopectl to enter interactive mode.\n+      </description>\n+    </key>\n+\n+    <key name="prompt" datatype="string"\n+         required="no" default="zopectl>">\n+       <description>\n+         The prompt shown by zopectl program.\n+       </description>\n+    </key>\n+\n+    <key name="socket-name" datatype="existing-dirpath" required="no">\n+      <description>\n+        Command-line option: -s or --socket-name.\n+\n+        The pathname of the Unix domain socket used for communication\n+        between zopectl.py and zdrun.py.  The default is relative to the\n+        current directory in which zdctl.py and zdrun.py are started.\n+        You want to specify an absolute pathname here.\n+      </description>\n+    </key>\n+\n+  </sectiontype>\n+\n+  <!-- end of type definitions -->\n+\n+  <!-- schema begins  -->\n+\n+  <section type="environment" attribute="environment" name="*">\n+    <description>\n+     A section which allows a user to define arbitrary key-value pairs for\n+     use as environment variables during Zope\'s run cycle.  It\n+     is not recommended to set system-related environment variables such as\n+     PYTHONPATH within this section.\n+    </description>\n+  </section>\n+\n+  <key name="instancehome" datatype="existing-directory"\n+       required="yes">\n+    <description>\n+      The top-level directory which contains the "instance" data for the\n+      application server. It may also contain "etc", "bin", "log",\n+      and "var" directories depending on how you\'ve configured your Zope\n+      instance.\n+    </description>\n+  </key>\n+\n+  <key name="clienthome" datatype="existing-directory">\n+    <description>\n+      The directory used to store the default filestorage file used to\n+      back the ZODB database, as well as other files used by the\n+      Zope applications server during runtime.\n+    </description>\n+    <metadefault>$instancehome/var</metadefault>\n+  </key>\n+\n+  <key name="debug-mode" datatype="boolean" default="off">\n+    <description>\n+    A switch which controls several aspects of Zope operation useful for\n+    developing under Zope.  When debug mode is on:\n+\n+     - Errors in product initialization will cause startup to fail\n+       (instead of writing error messages to the event log file).\n+\n+     - Filesystem-based scripts such as skins, PageTemplateFiles, and\n+       DTMLFiles can be edited while the server is running and the server\n+       will detect these changes in real time.  When this switch is\n+       off, you must restart the server to see the changes.\n+\n+     Setting this to \'off\' when Zope is in a production environment is\n+     encouraged, as it speeds execution (sometimes dramatically).\n+    </description>\n+    <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="locale" datatype="locale" handler="locale">\n+    <description>\n+     Locale name to be used. See your operating system documentation for locale\n+     information specific to your system. If the requested locale is not\n+     supported by your system, an error will be raised and Zope will not start.\n+    </description>\n+    <metadefault>unset</metadefault>\n+  </key>\n+\n+  <key name="datetime-format" datatype=".datetime_format"\n+       handler="datetime_format" default="us">\n+    <description>\n+     Set this variable either to "us" or "international" to force the\n+     DateTime module to parse date strings either with\n+     month-before-days-before-year ("us") or\n+     days-before-month-before-year ("international").  The default\n+     behaviour of DateTime (when this setting is left unset) is to\n+     parse dates as US dates.\n+    </description>\n+    <metadefault>us</metadefault>\n+  </key>\n+\n+  <key name="python-check-interval" datatype="integer" default="1000">\n+    <description>\n+      Value passed to Python\'s sys.setcheckinterval() function.  The\n+      higher this is, the less frequently the Python interpreter\n+      checks for keyboard interrupts.  Setting this to higher values\n+      also reduces the frequency of potential thread switches, which\n+      can improve the performance of a busy server.\n+    </description>\n+  </key>\n+\n+  <key name="http-realm" default="Zope">\n+    <description>\n+     The HTTP "Realm" header value sent by this Zope instance. This value\n+     often shows up in basic authentication dialogs.\n+    </description>\n+    <metadefault>Zope</metadefault>\n+  </key>\n+\n+  <key name="automatically-quote-dtml-request-data" datatype="boolean"\n+       default="on" handler="automatically_quote_dtml_request_data">\n+     <description>\n+     Set this directive to \'off\' in order to disable the autoquoting of\n+     implicitly retrieved REQUEST data by DTML code which contains a \'&lt;\'\n+     when used in &lt;dtml-var&gt; construction. When this directive is \'on\',\n+     all data implicitly retrieved from the REQUEST in DTML (as opposed to\n+     addressing REQUEST.somevarname directly) that contains a \'&lt;\' will be\n+     HTML-quoted when interpolated via a &lt;dtml-var&gt; or &amp;dtml-\n+     construct. This mitigates the possibility that DTML programmers will\n+     leave their sites open to a "client-side trojan" attack.\n+     </description>\n+     <metadefault>on</metadefault>\n+  </key>\n+\n+  <multikey name="trusted-proxy" datatype="ipaddr-or-hostname"\n+       attribute="trusted_proxies">\n+     <description>\n+     Define one or more \'trusted-proxies\' keys, each of which is a\n+     hostname or an IP address.  The set of definitions comprises a list\n+     of front-end proxies that are trusted to supply an accurate\n+     X_FORWARDED_FOR header to Zope (security-related).\n+     </description>\n+     <metadefault>unset</metadefault>\n+  </multikey>\n+\n+  <key name="max-conflict-retries" datatype="integer" default="3"\n+       attribute="max_conflict_retries">\n+    <description>\n+      The maximum number of retries on a conflict error\n+    </description>\n+  </key>\n+\n+  <key name="security-policy-implementation"\n+       datatype=".security_policy_implementation"\n+       default="C">\n+     <description>\n+     The default Zope "security policy" implementation is written in C.\n+     Set this key to "PYTHON" to use the Python implementation\n+     (useful for debugging purposes); set it to "C" to use the C\n+     implementation.\n+     </description>\n+     <metadefault>C</metadefault>\n+  </key>\n+\n+  <key name="skip-authentication-checking" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to cause Zope to prevent Zope from\n+     attempting to authenticate users during normal operation.\n+     Potentially dangerous from a security perspective.  Only works if\n+     security-policy-implementation is set to \'C\'.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="skip-ownership-checking" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to cause Zope to ignore ownership checking\n+     when attempting to execute "through the web" code. By default, this\n+     directive is off in order to prevent \'trojan horse\' security problems\n+     whereby a user with less privilege can cause a user with more\n+     privilege to execute code which the less privileged user has written.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="verbose-security" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to enable verbose security exceptions.\n+     This can help you track down the reason for Unauthorized exceptions,\n+     but it is not suitable for public sites because it may reveal\n+     unnecessary information about the structure of your site.  Only\n+     works if security-policy-implementation is set to \'PYTHON\'.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <section type="eventlog" name="*" attribute="eventlog">\n+    <description>\n+      Describes what level of log output is desired and where it\n+      should be written.\n+    </description>\n+  </section>\n+\n+  <section type="logger" name="access">\n+     <description>\n+      Describes the logging performed to capture the \'access\' log,\n+      which typically captures per-request data in common or combined\n+      log format.\n+    </description>\n+  </section>\n+\n+  <section type="logger" name="trace">\n+     <description>\n+      Describes the logging performed to capture the \'trace\' log,\n+      which typically captures detailed per-request data useful for\n+      Zope debugging.\n+    </description>\n+  </section>\n+\n+  <key name="conflict-error-log-level"\n+       datatype="ZConfig.components.logger.datatypes.logging_level"\n+       default="info">\n+     <description>\n+       Specifies at which level conflict errors are logged. Conflict\n+       errors, when occurring in small numbers, are a normal part of the\n+       Zope optimistic transaction conflict resolution algorithms. They\n+       are retried automatically a few times, and are therefore usually\n+       not visible by the user. You can specify \'notset\' if you don\'t\n+       want them logged, or use any other logger level.\n+     </description>\n+     <metadefault>info</metadefault>\n+  </key>\n+\n+  <multisection type="ZODB.Database" name="+" attribute="databases">\n+    <description>\n+       Zope ZODB databases must have a name, and they are required to be\n+       referenced via the "zodb_db" database type because it is\n+       the only kind of database definition that implements\n+       the required mount-point argument.  There is another\n+       database sectiontype named "zodb", but it cannot be used\n+       in the context of a proper Zope configuration (due to\n+       lack of a mount-point).\n+    </description>\n+  </multisection>\n+\n+  <key name="default-zpublisher-encoding"\n+       datatype=".default_zpublisher_encoding"\n+       default="utf-8">\n+     <description>\n+       This key controls what character set is used to encode unicode\n+       data that reaches ZPublisher without any other specified encoding.\n+     </description>\n+  </key>\n+\n+  <abstracttype name="zope.product.base">\n+    <description>\n+      Base type for product-specific configuration sections.\n+\n+      Specific products should implement configuration sections by\n+      defining section types that implement this abstract type and\n+      using their own schema component to define meaningful settings.\n+\n+    </description>\n+  </abstracttype>\n+\n+  <sectiontype name="product-config" implements="zope.product.base">\n+    <description>\n+    Product-specific configuration, expressed as arbitrary name-value pairs.\n+    </description>\n+\n+    <key name="+"\n+         attribute="mapping"\n+         required="no"\n+         />\n+  </sectiontype>\n+\n+  <multisection type="zope.product.base" name="+"\n+                attribute="product_config">\n+   <description>\n+    Product-specific configuration stanzas.\n+\n+    Products may use the &lt;product-config&gt; section type, or may supply\n+    a component.xml which defines section types with their own schemas.\n+\n+    All sections for this multisection will be collected into the\n+    \'product_config\' attribute of the configuration object.\n+   </description>\n+  </multisection>\n+\n+  <section type="zoperunner" name="*" attribute="runner"/>\n+\n+  <key name="python" datatype="existing-path"\n+       required="no">\n+    <description>\n+      Path to the Python interpreter for use by zdaemon.\n+      Defaults to sys.executable.\n+      Needed for buildout-based instances to supply a python\n+      that has all the correct eggs on the path.\n+    </description>\n+  </key>\n+\n+</schema>\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\nnew file mode 100644\nindex 0000000..5610d0b\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/zopectl.py\n@@ -0,0 +1,430 @@\n+##############################################################################\n+#\n+# Copyright (c) 2001, 2002 Zope Foundation and Contributors.\n+# All Rights Reserved.\n+#\n+# This software is subject to the provisions of the Zope Public License,\n+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n+# FOR A PARTICULAR PURPOSE.\n+#\n+##############################################################################\n+"""zopectl -- control Zope using zdaemon.\n+\n+Usage: zopectl [options] [action [arguments]]\n+\n+Options:\n+-h/--help -- print usage message and exit\n+-b/--backoff-limit SECONDS -- set backoff limit to SECONDS (default 10)\n+-d/--daemon -- run as a proper daemon; fork a subprocess, close files etc.\n+-f/--forever -- run forever (by default, exit when backoff limit is exceeded)\n+-h/--help -- print this usage message and exit\n+-i/--interactive -- start an interactive shell after executing commands\n+-l/--logfile -- log file to be read by logtail command\n+-u/--user -- run the daemon manager program as this user (or numeric id)\n+-m/--umask -- provide octal umask for files created by the managed process\n+-s/--socket-name -- socket between zopectl and zdrun\n+-t/--transcript FILE -- log file where to redirect stdout and stderr\n+action [arguments] -- see below\n+\n+Actions are commands like "start", "stop" and "status".  If -i is\n+specified or no action is specified on the command line, a "shell"\n+interpreting actions typed interactively is started. Use the\n+action "help" to find out about available actions.\n+"""\n+from __future__ import absolute_import\n+\n+import csv\n+import os\n+import sys\n+import signal\n+import xml.sax\n+\n+import pkg_resources\n+\n+import zdaemon\n+from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n+from zdaemon.zdoptions import ZDOptions\n+from ZConfig.components.logger.handlers import FileHandlerFactory\n+from ZConfig.components.logger import logger\n+from ZConfig.loader import SchemaLoader\n+from Zope2.Startup.options import ConditionalSchemaParser\n+\n+try:\n+    from ZServer.Zope2.Startup.options import ZopeOptions\n+except ImportError:\n+    class ZopeOptions(ZDOptions):\n+        schemadir = os.path.dirname(os.path.abspath(__file__))\n+        schemafile = \'wsgischema.xml\'\n+\n+\n+if sys.version_info > (3, ):\n+    basestring = str\n+\n+WIN = False\n+if sys.platform[:3].lower() == "win":\n+    WIN = True\n+\n+\n+def string_list(arg):\n+    return arg.split()\n+\n+\n+def quote_command(command):\n+    print(" ".join(command))\n+    # Quote the program name, so it works even if it contains spaces\n+    command = " ".join([\'"%s"\' % x for x in command])\n+    if WIN:\n+        # odd, but true: the windows cmd processor can\'t handle more than\n+        # one quoted item per string unless you add quotes around the\n+        # whole line.\n+        command = \'"%s"\' % command\n+    return command\n+\n+\n+class LoggerFactory(logger.LoggerFactory):\n+    """\n+    A factory used to create loggers while delaying actual logger\n+    instance construction.  We need to do this because we may want to\n+    reference a logger before actually instantiating it (for example,\n+    to allow the app time to set an effective user).  An instance of\n+    this wrapper is a callable which, when called, returns a logger\n+    object.\n+    """\n+    def __init__(self, section):\n+        section.name = section.getSectionName()\n+        section.propagate = False\n+        logger.LoggerFactory.__init__(self, section)\n+\n+\n+class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n+    # Zope controller options.\n+    #\n+    # After initialization, this should look very much like a\n+    # zdaemon.zdctl.ZDCtlOptions instance.  Many of the attributes are\n+    # initialized from different sources, however.\n+\n+    # Provide help message, without indentation.\n+    __doc__ = __doc__\n+\n+    positional_args_allowed = True\n+\n+    # this indicates that no explicit program has been provided.\n+    # the command line option can set this.\n+    program = None\n+\n+    # this indicates that no explicit socket name has been provided.\n+    # the command line option can set this.\n+    sockname = None\n+\n+    # XXX Suppress using Zope\'s <eventlog> section to avoid using the\n+    # same logging for zdctl as for the Zope appserver.  There still\n+    # needs to be a way to set a logfile for zdctl.\n+    logsectionname = None\n+\n+    def __init__(self):\n+        ZopeOptions.__init__(self)\n+        ZDCtlOptions.__init__(self)\n+        self.add("interactive", None, "i", "interactive", flag=1)\n+        self.add("default_to_interactive", "runner.default_to_interactive",\n+                 default=1)\n+\n+    def realize(self, *args, **kw):\n+        ZopeOptions.realize(self, *args, **kw)\n+        # Additional checking of user option; set uid and gid\n+        if self.user is not None:\n+            import pwd\n+            try:\n+                uid = int(self.user)\n+            except ValueError:\n+                try:\n+                    pwrec = pwd.getpwnam(self.user)\n+                except KeyError:\n+                    self.usage("username %r not found" % self.user)\n+                uid = pwrec[2]\n+            else:\n+                try:\n+                    pwrec = pwd.getpwuid(uid)\n+                except KeyError:\n+                    self.usage("uid %r not found" % self.user)\n+            gid = pwrec[3]\n+            self.uid = uid\n+            self.gid = gid\n+\n+        config = self.configroot\n+        self.directory = config.instancehome\n+        self.clienthome = config.clienthome\n+        if self.program:\n+            if isinstance(self.program, basestring):\n+                self.program = [self.program]\n+        elif config.runner and config.runner.program:\n+            self.program = config.runner.program\n+        else:\n+            self.program = [os.path.join(self.directory, "bin", "runzope")]\n+        if self.sockname:\n+            # set by command line option\n+            pass\n+        elif config.runner and config.runner.socket_name:\n+            self.sockname = config.runner.socket_name\n+        else:\n+            self.sockname = os.path.join(self.clienthome, "zopectlsock")\n+        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n+        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n+                                  "zdrun.py")\n+\n+        self.exitcodes = [0, 2]\n+        if self.logfile is None and config.eventlog is not None:\n+            for handler in config.eventlog.handler_factories:\n+                if isinstance(handler, FileHandlerFactory):\n+                    self.logfile = handler.section.path\n+                    if self.logfile not in ("STDERR", "STDOUT"):\n+                        break\n+\n+    def load_schema(self):\n+        if self.schema is None:\n+            # Load schema\n+            if self.schemadir is None:\n+                self.schemadir = os.path.dirname(__file__)\n+            self.schemafile = os.path.join(self.schemadir, self.schemafile)\n+            self._conditional_load()\n+\n+    def _conditional_load(self):\n+        loader = SchemaLoader()\n+        # loadURL\n+        url = loader.normalizeURL(self.schemafile)\n+        resource = loader.openResource(url)\n+        try:\n+            # load / parseResource without caching\n+            parser = ConditionalSchemaParser(loader, resource.url)\n+            xml.sax.parse(resource.file, parser)\n+            self.schema = parser._schema\n+        finally:\n+            resource.close()\n+\n+\n+class ZopeCmd(ZDCmd):\n+\n+    _exitstatus = 0\n+\n+    def _get_override(self, opt, name, svalue=None, flag=0):\n+        # Suppress the config file, and pass all configuration via the\n+        # command line.  This avoids needing to specialize the zdrun\n+        # script.\n+        if name == "configfile":\n+            return []\n+        value = getattr(self.options, name)\n+        if value is None:\n+            return []\n+        if flag:\n+            if value:\n+                args = [opt]\n+            else:\n+                args = []\n+        else:\n+            if svalue is None:\n+                svalue = str(value)\n+            args = [opt, svalue]\n+        return args\n+\n+    def get_startup_cmd(self, python, more):\n+        cmdline = (\'%s -c "from Zope2 import configure;\'\n+                   \'configure(%r);\' %\n+                   (python, self.options.configfile)\n+                   )\n+        return cmdline + more + \'\\"\'\n+\n+    def do_debug(self, arg):\n+        cmdline = self.get_startup_cmd(self.options.python + \' -i\',\n+                                       \'import Zope2; app=Zope2.app()\')\n+        print(\'Starting debugger (the name "app" is bound to the top-level \'\n+              \'Zope object)\')\n+        os.system(cmdline)\n+\n+    def do_foreground(self, arg):\n+        program = self.options.program\n+        local_additions = []\n+        if not program.count(\'-C\'):\n+            local_additions += [\'-C\', self.options.configfile]\n+        if not program.count(\'-X\'):\n+            local_additions += [\'-X\']\n+        if not program.count(\'debug-mode=on\'):\n+            local_additions += [\'debug-mode=on\']\n+        program[1:1] = local_additions\n+        command = quote_command(program)\n+        try:\n+            return os.system(command)\n+        except KeyboardInterrupt:\n+            pass\n+        finally:\n+            for addition in local_additions:\n+                program.remove(addition)\n+\n+    def help_debug(self):\n+        print("debug -- run the Zope debugger to inspect your database")\n+        print("         manually using a Python interactive shell")\n+\n+    def __getattr__(self, name):\n+        """\n+        Getter to check if an unknown command is implement by an entry point.\n+        """\n+        if not name.startswith("do_"):\n+            raise AttributeError(name)\n+        data = list(pkg_resources.iter_entry_points(\n+            "zopectl.command", name=name[3:]))\n+        if not data:\n+            raise AttributeError(name)\n+        if len(data) > 1:\n+            sys.stderr.write(\n+                "Warning: multiple entry points found for command")\n+            return\n+        func = data[0].load()\n+        if not callable(func):\n+            sys.stderr.write("Error: %s is not a callable method" % name)\n+            return\n+\n+        return self.run_entrypoint(data[0])\n+\n+    def run_entrypoint(self, entry_point):\n+        def go(arg):\n+            # If the command line was something like\n+            # """bin/instance run "one two" three"""\n+            # cmd.parseline will have converted it so\n+            # that arg == \'one two three\'. This is going to\n+            # foul up any quoted command with embedded spaces.\n+            # So we have to return to self.options.args,\n+            # which is a tuple of command line args,\n+            # throwing away the "run" command at the beginning.\n+            #\n+            # Further complications: if self.options.args has come\n+            # via subprocess, it may look like\n+            # [\'run "arg 1" "arg2"\'] rather than [\'run\',\'arg 1\',\'arg2\'].\n+            # If that\'s the case, we\'ll use csv to do the parsing\n+            # so that we can split on spaces while respecting quotes.\n+            tup = self.options.args\n+            if len(tup) == 1:\n+                tup = csv.reader(tup, delimiter=\' \').next()\n+\n+            # Remove -c and add command name as sys.argv[0]\n+            cmd = [\'import sys\',\n+                   \'sys.argv.pop()\',\n+                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n+                   ]\n+            if len(tup) > 1:\n+                argv = tup[1:]\n+                for a in argv:\n+                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n+            cmd.extend([\n+                \'import pkg_resources\',\n+                \'import Zope2\',\n+                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n+                % entry_point,\n+                \'app=Zope2.app()\',\n+                \'func(app, sys.argv[1:])\',\n+            ])\n+            cmdline = self.get_startup_cmd(\n+                self.options.python, \' ; \'.join(cmd))\n+            self._exitstatus = os.system(cmdline)\n+        return go\n+\n+    def do_run(self, args):\n+        if not args:\n+            print("usage: run <script> [args]")\n+            return\n+        # replace sys.argv\n+        script = args.split(\' \')[0]\n+        cmd = (\n+            "import sys; sys.argv[:]=%r.split(\' \');"\n+            "import Zope2; app=Zope2.app(); execfile(%r)"\n+        ) % (args, script)\n+        cmdline = self.get_startup_cmd(self.options.python, cmd)\n+        self._exitstatus = os.system(cmdline)\n+\n+    def help_run(self):\n+        print("run <script> [args] -- run a Python script with the Zope ")\n+        print("                       environment set up. The script can use ")\n+        print("                       the name \'app\' access the top-level ")\n+        print("                       Zope object")\n+\n+    def do_adduser(self, arg):\n+        try:\n+            name, password = arg.split()\n+        except Exception:\n+            print("usage: adduser <name> <password>")\n+            return\n+        cmdline = self.get_startup_cmd(\n+            self.options.python,\n+            \'import Zope2; \'\n+            \'app = Zope2.app(); \'\n+            \'result = app.acl_users._doAddUser(\'\n+            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n+            \'import transaction; \'\n+            \'transaction.commit(); \'\n+            \'print \\\'Created user:\\\', result\'\n+        ) % (name, password)\n+        os.system(cmdline)\n+\n+    def help_adduser(self):\n+        print("adduser <name> <password> -- add a Zope management user")\n+\n+\n+def main(args=None):\n+    # This is exactly like zdctl.main(), but uses ZopeCtlOptions and\n+    # ZopeCmd instead of ZDCtlOptions and ZDCmd, so the default values\n+    # are handled properly for Zope.\n+    options = ZopeCtlOptions()\n+    options.realize(args)\n+    c = ZopeCmd(options)\n+    if options.args:\n+        c.onecmd(" ".join(options.args))\n+    else:\n+        options.interactive = 1\n+    if options.interactive:\n+        try:\n+            import readline  # NOQA\n+        except ImportError:\n+            pass\n+        print("program:" + " ".join(options.program))\n+        c.do_status()\n+        c.cmdloop()\n+    else:\n+        return min(c._exitstatus, 1)\n+\n+\n+def _ignoreSIGCHLD(*unused):\n+    while 1:\n+        try:\n+            os.waitpid(-1, os.WNOHANG)\n+        except OSError:\n+            break\n+\n+\n+def run():\n+    # we don\'t care to be notified of our childrens\' exit statuses.\n+    # this prevents zombie processes from cluttering up the process\n+    # table when zopectl start/stop is used interactively.\n+    # DM 2004-11-26: from the Linux "execve(2)" manual page:\n+    #     Any signals set to be caught by the calling process are reset\n+    #     to their default behaviour.\n+    #     The SIGCHLD signal (when set to SIG_IGN) may or may not be reset\n+    #     to SIG_DFL.\n+    #   If it is not reset, \'os.wait[pid]\' can non-deterministically fail.\n+    #   Thus, use a way such that "SIGCHLD" is definitely reset in children.\n+    # signal.signal(signal.SIGCHLD, signal.SIG_IGN)\n+    if not WIN and os.uname()[0] != \'Darwin\':\n+        # On Windows the os.uname method does not exist.\n+        # On Mac OS X, setting up a signal handler causes waitpid to\n+        # raise EINTR, which is not preventable via the Python signal\n+        # handler API and can\'t be dealt with properly as we can\'t pass\n+        # the SA_RESTART to the signal API. Since Mac OS X doesn\'t\n+        # appear to clutter up the process table with zombies if\n+        # SIGCHILD is unset, just don\'t bother registering a SIGCHILD\n+        # signal handler at all.\n+        signal.signal(signal.SIGCHLD, _ignoreSIGCHLD)\n+    exitstatus = main()\n+    sys.exit(exitstatus)\n+\n+\n+if __name__ == \'__main__\':\n+    run()\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-10-28T11:48:49-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/56032ac90b5bd089dd7ec1dc04077d34c7a7c8fb

Fix adduser and run

Files changed:
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/zopectl.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 65f0989..dd34b0e 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -527,17 +527,15 @@ def do_run(self, arg):\n             print("usage: run <script> [args]")\n             return\n \n-        # If we pass the script filename as a win32 backslashed path\n-        # using a \'\'-style string, the backslashes will act as\n-        # escapes.  Use r\'\' instead.\n-        #\n         # Remove -c and add script as sys.argv[0]\n         script = tup[0]\n-        cmd = \'import sys; sys.argv.pop(); sys.argv.append(r\\\'%s\\\'); \' % script\n+        cmd = \'import sys; sys.argv.pop(); sys.argv.append(%r); \' % script\n         if len(tup) > 1:\n             argv = tup[1:]\n             cmd += \'[sys.argv.append(x) for x in %s]; \' % argv\n-        cmd += \'execfile(r\\\'%s\\\')\' % script\n+        cmd += (\n+            "f = open(%r); src = f.read(); f.close(); exec(src)"\n+        ) % script\n         cmdline = self.get_startup_cmd(self.options.python, cmd)\n \n         self._exitstatus = os.system(cmdline)\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\nindex 5610d0b..b531c5f 100644\n--- a/src/plone/recipe/zope2instance/zopectl.py\n+++ b/src/plone/recipe/zope2instance/zopectl.py\n@@ -336,7 +336,9 @@ def do_run(self, args):\n         script = args.split(\' \')[0]\n         cmd = (\n             "import sys; sys.argv[:]=%r.split(\' \');"\n-            "import Zope2; app=Zope2.app(); execfile(%r)"\n+            "import Zope2; app=Zope2.app(); "\n+            "f = open(%r, \'r\'); src = f.read(); f.close(); "\n+            "exec(src)"\n         ) % (args, script)\n         cmdline = self.get_startup_cmd(self.options.python, cmd)\n         self._exitstatus = os.system(cmdline)\n@@ -361,7 +363,7 @@ def do_adduser(self, arg):\n             \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n             \'import transaction; \'\n             \'transaction.commit(); \'\n-            \'print \\\'Created user:\\\', result\'\n+            \'print(\\\'Created user:\\\', result)\'\n         ) % (name, password)\n         os.system(cmdline)\n \n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-10-28T12:46:58-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/bfbd34b50874aa50eff594e4ffb3365389528778

Take logger schema back out; logging gets configured via the wsgi server

Files changed:
M src/plone/recipe/zope2instance/wsgischema.xml
M src/plone/recipe/zope2instance/zopectl.py

b'diff --git a/src/plone/recipe/zope2instance/wsgischema.xml b/src/plone/recipe/zope2instance/wsgischema.xml\nindex b2aa221..996394b 100644\n--- a/src/plone/recipe/zope2instance/wsgischema.xml\n+++ b/src/plone/recipe/zope2instance/wsgischema.xml\n@@ -4,27 +4,9 @@\n \n   <!-- type definitions -->\n \n-  <import package="ZConfig.components.logger" file="handlers.xml"/>\n-  <import package="ZConfig.components.logger" file="eventlog.xml"/>\n   <import package="ZODB"/>\n   <import package="tempstorage" condition="tempstorage"/>\n \n-  <sectiontype name="logger" datatype="plone.recipe.zope2instance.zopectl.LoggerFactory">\n-    <description>\n-      This "logger" type only applies to access and request ("trace")\n-      logging; event logging is handled by the "logging" package in\n-      the Python standard library.  The loghandler type used here is\n-      provided by the "ZConfig.components.logger" package.\n-    </description>\n-    <key name="level"\n-         datatype="ZConfig.components.logger.datatypes.logging_level"\n-         default="info"/>\n-    <multisection name="*"\n-                  type="ZConfig.logger.handler"\n-                  attribute="handlers"\n-                  required="yes"/>\n-  </sectiontype>\n-\n   <sectiontype name="environment"\n                datatype=".environment"\n                keytype="identifier">\n@@ -414,43 +396,6 @@\n      <metadefault>off</metadefault>\n   </key>\n \n-  <section type="eventlog" name="*" attribute="eventlog">\n-    <description>\n-      Describes what level of log output is desired and where it\n-      should be written.\n-    </description>\n-  </section>\n-\n-  <section type="logger" name="access">\n-     <description>\n-      Describes the logging performed to capture the \'access\' log,\n-      which typically captures per-request data in common or combined\n-      log format.\n-    </description>\n-  </section>\n-\n-  <section type="logger" name="trace">\n-     <description>\n-      Describes the logging performed to capture the \'trace\' log,\n-      which typically captures detailed per-request data useful for\n-      Zope debugging.\n-    </description>\n-  </section>\n-\n-  <key name="conflict-error-log-level"\n-       datatype="ZConfig.components.logger.datatypes.logging_level"\n-       default="info">\n-     <description>\n-       Specifies at which level conflict errors are logged. Conflict\n-       errors, when occurring in small numbers, are a normal part of the\n-       Zope optimistic transaction conflict resolution algorithms. They\n-       are retried automatically a few times, and are therefore usually\n-       not visible by the user. You can specify \'notset\' if you don\'t\n-       want them logged, or use any other logger level.\n-     </description>\n-     <metadefault>info</metadefault>\n-  </key>\n-\n   <multisection type="ZODB.Database" name="+" attribute="databases">\n     <description>\n        Zope ZODB databases must have a name, and they are required to be\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\nindex b531c5f..8632a23 100644\n--- a/src/plone/recipe/zope2instance/zopectl.py\n+++ b/src/plone/recipe/zope2instance/zopectl.py\n@@ -175,12 +175,6 @@ def realize(self, *args, **kw):\n                                   "zdrun.py")\n \n         self.exitcodes = [0, 2]\n-        if self.logfile is None and config.eventlog is not None:\n-            for handler in config.eventlog.handler_factories:\n-                if isinstance(handler, FileHandlerFactory):\n-                    self.logfile = handler.section.path\n-                    if self.logfile not in ("STDERR", "STDOUT"):\n-                        break\n \n     def load_schema(self):\n         if self.schema is None:\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-10-28T13:35:39-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/e4610382ccbf0d7d1b25ae86041bf17dec3d3113

generate wsgi.ini

Files changed:
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex dd34b0e..004af0d 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -649,8 +649,7 @@ def main(args=None):\n     else:\n         from Zope2.Startup import serve\n         script = serve.__file__\n-        # @@@ generate this?\n-        wsgi_ini = os.path.join(options.directory, \'etc\', \'waitress.ini\')\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n         options.program = [\n             options.python, options.interpreter, script, wsgi_ini\n         ]\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex a3fbc48..1e088ef 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -96,8 +96,10 @@ def install(self, update=False):\n             make.make_instance(options.get(\'user\', None), location, version)\n \n         try:\n-            # Make a new zope.conf based on options in buildout.cfg\n+            # Make a new zope.conf and wsgi.ini based on options in buildout.cfg\n             self.build_zope_conf()\n+            if self.wsgi:\n+                self.build_wsgi_ini()\n \n             # Install extra scripts\n             installed.extend(self.install_scripts())\n@@ -589,11 +591,19 @@ def is_rs_option(name):\n \n         zope_conf = \'\\n\'.join([l for l in zope_conf.splitlines() if l.rstrip()])\n         zope_conf_path = os.path.join(location, \'etc\', \'zope.conf\')\n-        try:\n-            fd = open(zope_conf_path, \'w\')\n-            fd.write(zope_conf)\n-        finally:\n-            fd.close()\n+        with open(zope_conf_path, \'w\') as f:\n+            f.write(zope_conf)\n+\n+    def build_wsgi_ini(self):\n+        options = self.options\n+        wsgi_ini_path = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n+        options = {\n+            \'location\': options[\'location\'],\n+            \'http_address\': options.get(\'http-address\', \'8080\'),\n+        }\n+        wsgi_ini = wsgi_ini_template % options\n+        with open(wsgi_ini_path, \'w\') as f:\n+            f.write(wsgi_ini)\n \n     def install_scripts(self):\n         options = self.options\n@@ -1113,3 +1123,45 @@ def render_file_storage(self, file_storage, blob_storage,\n     %s\n </configure>\n """\n+\n+wsgi_ini_template = """\\\n+[server:main]\n+use = egg:waitress#main\n+listen = 0.0.0.0:%(http_address)s\n+\n+[app:zope]\n+use = egg:Zope#main\n+zope_conf = %(location)s/etc/zope.conf\n+\n+[pipeline:main]\n+pipeline =\n+    egg:Zope#httpexceptions\n+    zope\n+\n+[loggers]\n+keys = root, plone\n+\n+[handlers]\n+keys = console\n+\n+[formatters]\n+keys = generic\n+\n+[logger_root]\n+level = INFO\n+handlers = console\n+\n+[logger_plone]\n+level = DEBUG\n+handlers =\n+qualname = plone\n+\n+[handler_console]\n+class = StreamHandler\n+args = (sys.stderr,)\n+level = NOTSET\n+formatter = generic\n+\n+[formatter_generic]\n+format = %%(asctime)s %%(levelname)-5.5s [%%(name)s:%%(lineno)s][%%(threadName)s] %%(message)s\n+"""\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-10-28T21:27:31-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/410f0bb52fe1a8f3b36afd959671912b7cf5aa2f

docs, determine wsgi option based on presense of ZServer

Files changed:
M CHANGES.rst
M README.rst
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex d9a83c3..dac2cea 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,12 +1,20 @@\n Changelog\n =========\n \n-5.0.1 (unreleased)\n+6.0.0 (unreleased)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+- Determine whether to set up a WSGI-based instanced\n+  automatically based on whether ZServer is included in the eggs,\n+  instead of explicitly using the ``wsgi`` option.\n+  [davisagli]\n+\n+- For WSGI-based instances, generate a zdaemon-based instance script\n+  that works similarly to ZServer-based instances, instead of a\n+  script that only handles running the WSGI server.\n+  [davisagli]\n \n New features:\n \n@@ -49,6 +57,7 @@ Bug fixes:\n \n - Python 3 compatibility with sixer\n   [ale-rt]\n+\n - Fix import. zopectl moved to ZServer\n   [pbauer]\n \ndiff --git a/README.rst b/README.rst\nindex 0e75a72..313adcc 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -50,7 +50,7 @@ ip-address\n   implementations will listen for requests. If this is unset, Zope will listen\n   on all IP addresses supported by the machine. This directive can be\n   overridden on a per-server basis in the servers section. Defaults to not\n-  setting an ip-address.\n+  setting an ip-address. Used for ZServer only, not WSGI.\n \n zodb-cache-size\n   Set the ZODB cache size, i.e. the number of objects which the ZODB cache\n@@ -58,7 +58,7 @@ zodb-cache-size\n \n zserver-threads\n   Specify the number of threads that Zope's ZServer web server will use to\n-  service requests. The recipes default is 2.\n+  service requests. The recipes default is 2. Used for ZServer only, not WSGI.\n \n environment-vars\n   Define arbitrary key-value pairs for use as environment variables during\n@@ -221,25 +221,28 @@ log levels or configure `mailinglogger`.\n event-log\n   The filename of the event log. Defaults to ${buildout:directory}/var/log/${partname}.log\n   Setting this value to 'disable' will make the <eventlog> section to be omitted,\n-  disabling logging events by default to a .log file.\n+  disabling logging events by default to a .log file. Used for ZServer only, not WSGI.\n \n event-log-level\n   Set the level of the console output for the event log. Level may be any of\n   CRITICAL, ERROR, WARN, INFO, DEBUG, or ALL. Defaults to INFO.\n+  Used for ZServer only, not WSGI.\n \n event-log-max-size\n   Maximum size of event log file. Enables log rotation.\n+  Used for ZServer only, not WSGI.\n \n event-log-old-files\n   Number of previous log files to retain when log rotation is enabled.\n-  Defaults to 1.\n+  Defaults to 1. Used for ZServer only, not WSGI.\n \n event-log-custom\n   A custom section for the eventlog, to be able to use another\n-  event logger than `logfile`\n+  event logger than `logfile`. Used for ZServer only, not WSGI.\n \n mailinglogger\n-  A mailinglogger section added into the event log. Example snippet::\n+  A mailinglogger section added into the event log.\n+  Used for ZServer only, not WSGI. Example snippet::\n \n     <mailing-logger>\n       level error\n@@ -255,22 +258,23 @@ mailinglogger\n z2-log\n   The filename for the Z2 access log. Defaults to var/log/${partname}-Z2.log.\n   Setting this value to 'disable' will make the <logger access> section to be omitted,\n-  disabling logging access events to a .log file\n+  disabling logging access events to a .log file. Used for ZServer only, not WSGI.\n \n z2-log-level\n   Set the log level for the access log. Level may be any of CRITICAL, ERROR,\n-  WARN, INFO, DEBUG, or ALL. Defaults to WARN.\n+  WARN, INFO, DEBUG, or ALL. Defaults to WARN. Used for ZServer only, not WSGI.\n \n access-log-max-size\n   Maximum size of access log file. Enables log rotation.\n+  Used for ZServer only, not WSGI.\n \n access-log-old-files\n   Number of previous log files to retain when log rotation is enabled.\n-  Defaults to 1.\n+  Defaults to 1. Used for ZServer only, not WSGI.\n \n access-log-custom\n   Like `event-log-custom`, a custom section for the access logger, to be able\n-  to use another event logger than `logfile`.\n+  to use another event logger than `logfile`. Used for ZServer only, not WSGI.\n \n Load non-setuptools compatible Python libraries\n -----------------------------------------------\n@@ -386,6 +390,7 @@ enable-product-installation\n \n ftp-address\n   Give a port for the FTP server. This enables the FTP server.\n+  Used for ZServer only, not WSGI.\n \n http-force-connection-close\n   Set to `on` to enforce Zope to set ``Connection: close header``.\n@@ -398,6 +403,7 @@ http-fast-listen\n \n icp-address\n   Give a port for the ICP server. This enables the ICP server.\n+  Used for ZServer only, not WSGI.\n \n import-directory\n   Used to configure the import directory for instance.\n@@ -439,10 +445,12 @@ var\n   Defaults to ${buildout:directory}/var.\n \n webdav-address\n-  Give a port for the WebDAV server.  This enables the WebDAV server\n+  Give a port for the WebDAV server.  This enables the WebDAV server.\n+  Used for ZServer only, not WSGI.\n \n webdav-force-connection-close\n-  Valid options are off and on. Defaults to off\n+  Valid options are off and on. Defaults to off.\n+  Used for ZServer only, not WSGI.\n \n zlib-storage\n   Adds support for file compression on a file storage database. The\n@@ -496,7 +504,7 @@ zopectl-umask\n http-header-max-length\n   Manually set the maximum size of received HTTP header being processed by Zope.\n   The request is discarded and considered as a DoS attack if the header size exceeds\n-  this limit. Default: 8192\n+  this limit. Default: 8192. Used for ZServer only, not WSGI.\n \n   Example::\n \ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 004af0d..02499f8 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -641,14 +641,14 @@ def main(args=None):\n         options.interpreter += '-script.py'\n     if HAS_ZSERVER:\n         from ZServer.Zope2.Startup import run\n-        script = run.__file__\n+        script = os.path.join(os.path.dirname(run.__file__), 'run.py')\n         options.program = [\n             options.python, options.interpreter, script, '-C',\n             options.configfile\n         ]\n     else:\n         from Zope2.Startup import serve\n-        script = serve.__file__\n+        script = os.path.join(os.path.dirname(serve.__file__), 'serve.py')\n         wsgi_ini = os.path.join(options.directory, 'etc', 'wsgi.ini')\n         options.program = [\n             options.python, options.interpreter, script, wsgi_ini\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 1e088ef..ef57cc8 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -77,7 +77,6 @@ def __init__(self, buildout, name, options):\n             buildout['buildout'].get('include-site-packages', 'false')\n             ) not in ('off', 'disable', 'false')\n \n-        self.wsgi = options.get('wsgi') in ('waitress', 'on')\n         # Get Scripts' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n@@ -96,13 +95,18 @@ def install(self, update=False):\n             make.make_instance(options.get('user', None), location, version)\n \n         try:\n-            # Make a new zope.conf and wsgi.ini based on options in buildout.cfg\n+            requirements, ws = self.egg.working_set(\n+                ['plone.recipe.zope2instance'])\n+            self.wsgi = 'zserver' not in ws.by_key\n+\n+            # Make a new zope.conf and wsgi.ini\n+            # based on options in buildout.cfg\n             self.build_zope_conf()\n             if self.wsgi:\n                 self.build_wsgi_ini()\n \n             # Install extra scripts\n-            installed.extend(self.install_scripts())\n+            installed.extend(self.install_scripts(ws))\n \n             # Add zcml files to package-includes\n             self.build_package_includes()\n@@ -605,7 +609,7 @@ def build_wsgi_ini(self):\n         with open(wsgi_ini_path, 'w') as f:\n             f.write(wsgi_ini)\n \n-    def install_scripts(self):\n+    def install_scripts(self, ws):\n         options = self.options\n         location = options['location']\n \n@@ -618,7 +622,6 @@ def install_scripts(self):\n         zopectl_umask = options.get('zopectl-umask', '')\n \n         extra_paths = options.get('extra-paths', '').split()\n-        requirements, ws = self.egg.working_set(['plone.recipe.zope2instance'])\n         reqs = [self.options.get('control-script', self.name)]\n         reqs.extend(['plone.recipe.zope2instance.ctl', 'main'])\n         reqs = [tuple(reqs)]\n"

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-10-28T21:42:26-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/63b1a7485c47d0e4f6d7d5e533bff4fe6914092d

Back to explicit option

Files changed:
M CHANGES.rst
M src/plone/recipe/zope2instance/recipe.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex dac2cea..6ab342c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,11 +6,6 @@ Changelog\n \n Breaking changes:\n \n-- Determine whether to set up a WSGI-based instanced\n-  automatically based on whether ZServer is included in the eggs,\n-  instead of explicitly using the ``wsgi`` option.\n-  [davisagli]\n-\n - For WSGI-based instances, generate a zdaemon-based instance script\n   that works similarly to ZServer-based instances, instead of a\n   script that only handles running the WSGI server.\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex ef57cc8..5fa080e 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -77,6 +77,7 @@ def __init__(self, buildout, name, options):\n             buildout['buildout'].get('include-site-packages', 'false')\n             ) not in ('off', 'disable', 'false')\n \n+        self.wsgi = options.get('wsgi') in ('on', 'waitress')\n         # Get Scripts' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n@@ -95,10 +96,6 @@ def install(self, update=False):\n             make.make_instance(options.get('user', None), location, version)\n \n         try:\n-            requirements, ws = self.egg.working_set(\n-                ['plone.recipe.zope2instance'])\n-            self.wsgi = 'zserver' not in ws.by_key\n-\n             # Make a new zope.conf and wsgi.ini\n             # based on options in buildout.cfg\n             self.build_zope_conf()\n@@ -106,7 +103,7 @@ def install(self, update=False):\n                 self.build_wsgi_ini()\n \n             # Install extra scripts\n-            installed.extend(self.install_scripts(ws))\n+            installed.extend(self.install_scripts())\n \n             # Add zcml files to package-includes\n             self.build_package_includes()\n@@ -609,7 +606,7 @@ def build_wsgi_ini(self):\n         with open(wsgi_ini_path, 'w') as f:\n             f.write(wsgi_ini)\n \n-    def install_scripts(self, ws):\n+    def install_scripts(self):\n         options = self.options\n         location = options['location']\n \n@@ -622,6 +619,7 @@ def install_scripts(self, ws):\n         zopectl_umask = options.get('zopectl-umask', '')\n \n         extra_paths = options.get('extra-paths', '').split()\n+        requirements, ws = self.egg.working_set(['plone.recipe.zope2instance'])\n         reqs = [self.options.get('control-script', self.name)]\n         reqs.extend(['plone.recipe.zope2instance.ctl', 'main'])\n         reqs = [tuple(reqs)]\n"

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-07T12:54:02+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/8bbcef4fa2910d930f776a489c393efb4ec89912

Experiments

Files changed:
A src/plone/recipe/zope2instance/wsgischema.xml
A src/plone/recipe/zope2instance/zopectl.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex de0af72..65f0989 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -28,7 +28,7 @@\n """\n \n from pkg_resources import iter_entry_points\n-from ZServer.Zope2.Startup import zopectl\n+from . import zopectl\n \n import csv\n import os\n@@ -50,6 +50,12 @@\n         \'ERROR: You are not member of the "Administrators" group, \'\n         \'or you have not run the shell as Administrator.\')\n \n+try:\n+    import ZServer\n+    HAS_ZSERVER = True\n+except ImportError:\n+    HAS_ZSERVER = False\n+\n \n class AdjustedZopeCmd(zopectl.ZopeCmd):\n \n@@ -422,14 +428,24 @@ def get_startup_cmd(self, python, more, pyflags=""):\n         # will act as escapes.  Use r\'\' instead.\n         # Also, don\'t forget that \'python\'\n         # may have spaces and needs to be quoted.\n+        if HAS_ZSERVER:\n+            cmd = (\n+                "from Zope2 import configure; "\n+                "configure(r\'%s\'); "\n+                "import Zope2; app=Zope2.app(); "\n+            )\n+        else:\n+            cmd = (\n+                "from Zope2.Startup.run import configure_wsgi; "\n+                "configure_wsgi(r\'%s\'); "\n+                "import Zope2; app=Zope2.app(); "\n+            )\n         cmdline = (\n-            \'"%s" %s "%s" %s -c "from Zope2 import configure; \'\n-            \'configure(r\\\'%s\\\'); \'\n-            \'import Zope2; app=Zope2.app(); \' % (\n+            \'"%s" %s "%s" %s -c "%s\' % (\n                 python, pyflags,\n                 self.options.interpreter,\n                 pyflags,\n-                self.options.configfile\n+                cmd % self.options.configfile,\n             )\n         )\n \n@@ -574,7 +590,7 @@ def do_foreground(self, arg, debug=True):\n         local_additions = []\n \n         if debug:\n-            if not program.count(\'-X\'):\n+            if HAS_ZSERVER and not program.count(\'-X\'):\n                 local_additions += [\'-X\']\n             if not program.count(\'debug-mode=on\'):\n                 local_additions += [\'debug-mode=on\']\n@@ -621,15 +637,25 @@ def main(args=None):\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n-    # Change the program to avoid warning messages\n-    startup = os.path.dirname(zopectl.__file__)\n-\n+    # Run the right command depending on whether we have ZServer\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    script = os.path.join(startup, \'run.py\')\n-    options.program = [\n-        options.python, options.interpreter, script, \'-C\', options.configfile]\n+    if HAS_ZSERVER:\n+        from ZServer.Zope2.Startup import run\n+        script = run.__file__\n+        options.program = [\n+            options.python, options.interpreter, script, \'-C\',\n+            options.configfile\n+        ]\n+    else:\n+        from Zope2.Startup import serve\n+        script = serve.__file__\n+        # @@@ generate this?\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'waitress.ini\')\n+        options.program = [\n+            options.python, options.interpreter, script, wsgi_ini\n+        ]\n \n     # We use our own ZopeCmd set, that is derived from the original one.\n     c = AdjustedZopeCmd(options)\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 95c9f11..a3fbc48 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -610,10 +610,7 @@ def install_scripts(self):\n         extra_paths = options.get(\'extra-paths\', \'\').split()\n         requirements, ws = self.egg.working_set([\'plone.recipe.zope2instance\'])\n         reqs = [self.options.get(\'control-script\', self.name)]\n-        if self.wsgi:\n-            reqs.extend([\'Zope2.Startup.serve\', \'main\'])\n-        else:\n-            reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n+        reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n         reqs = [tuple(reqs)]\n \n         if options.get(\'relative-paths\'):\n@@ -637,8 +634,7 @@ def __repr__(self):\n                 )\n \n         options[\'zope-conf\'] = zope_conf_path\n-        arguments = ["-C", zope_conf_path, \'-p\', program_path] \\\n-            if not self.wsgi else [\'ignored\']\n+        arguments = ["-C", zope_conf_path, \'-p\', program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n         script_arguments = (\'\\n        \' + repr(arguments) +\n@@ -647,10 +643,9 @@ def __repr__(self):\n         generated = self._install_scripts(\n             options[\'bin-directory\'], ws, reqs=reqs, extra_paths=extra_paths,\n             script_arguments=script_arguments)\n-        if not self.wsgi:\n-            generated.extend(self._install_scripts(\n-                os.path.join(options[\'location\'], \'bin\'), ws,\n-                interpreter=program_name, extra_paths=extra_paths))\n+        generated.extend(self._install_scripts(\n+            os.path.join(options[\'location\'], \'bin\'), ws,\n+            interpreter=program_name, extra_paths=extra_paths))\n         return generated\n \n     def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n@@ -673,10 +668,7 @@ def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n                 script_arguments=script_arguments,\n                 )\n         else:\n-            if self.wsgi:\n-                initialization = wsgi_initialization % options\n-            else:\n-                initialization = options[\'initialization\'] % options\n+            initialization = options[\'initialization\'] % options\n             return zc.buildout.easy_install.scripts(\n                 dest=dest,\n                 reqs=reqs,\n@@ -1121,9 +1113,3 @@ def render_file_storage(self, file_storage, blob_storage,\n     %s\n </configure>\n """\n-\n-wsgi_initialization = """\\\n-from Zope2.Startup.run import make_wsgi_app\n-wsgiapp = make_wsgi_app({}, \'%(zope-conf)s\')\n-def application(*args, **kwargs):return wsgiapp(*args, **kwargs)\n-"""\ndiff --git a/src/plone/recipe/zope2instance/wsgischema.xml b/src/plone/recipe/zope2instance/wsgischema.xml\nnew file mode 100644\nindex 0000000..b2aa221\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/wsgischema.xml\n@@ -0,0 +1,522 @@\n+<schema prefix="Zope2.Startup.datatypes"\n+        datatype=".root_wsgi_config"\n+        handler="root_wsgi_handler">\n+\n+  <!-- type definitions -->\n+\n+  <import package="ZConfig.components.logger" file="handlers.xml"/>\n+  <import package="ZConfig.components.logger" file="eventlog.xml"/>\n+  <import package="ZODB"/>\n+  <import package="tempstorage" condition="tempstorage"/>\n+\n+  <sectiontype name="logger" datatype="plone.recipe.zope2instance.zopectl.LoggerFactory">\n+    <description>\n+      This "logger" type only applies to access and request ("trace")\n+      logging; event logging is handled by the "logging" package in\n+      the Python standard library.  The loghandler type used here is\n+      provided by the "ZConfig.components.logger" package.\n+    </description>\n+    <key name="level"\n+         datatype="ZConfig.components.logger.datatypes.logging_level"\n+         default="info"/>\n+    <multisection name="*"\n+                  type="ZConfig.logger.handler"\n+                  attribute="handlers"\n+                  required="yes"/>\n+  </sectiontype>\n+\n+  <sectiontype name="environment"\n+               datatype=".environment"\n+               keytype="identifier">\n+    <description>\n+     A section which allows you to define simple key-value pairs which\n+     will be used as environment variable settings during startup.\n+    </description>\n+    <key name="+" attribute="environ">\n+      <description>\n+        Use any key/value pair, e.g. \'MY_PRODUCT_ENVVAR foo_bar\'\n+      </description>\n+    </key>\n+  </sectiontype>\n+\n+  <sectiontype name="zodb_db" datatype=".ZopeDatabase"\n+               implements="ZODB.database" extends="zodb">\n+\n+    <description>\n+      We need to specialize the database configuration section for Zope\n+      only by including a (required) mount-point argument, which\n+      is a string.  A Zope ZODB database can have multiple mount points,\n+      so this is a multikey.\n+    </description>\n+    <multikey name="mount-point" required="yes" attribute="mount_points"\n+              datatype=".mount_point">\n+      <description>\n+       The mount point is a slash-separated path to a \n+       \'Products.ZODBMountPoint.Mount.MountPoint\' instance in Zope. If \n+       such an instance exists, it can mount an object (the mounted \n+       object) into Zope.\n+       By default, the object will be mounted at the same path in Zope (i.e.\n+       \'/foo/bar\' in the database will be mounted at \'/foo/bar\' in Zope).\n+\n+       The object can be mounted at a different point using the\n+       \'virtual_path:real_path\' syntax (e.g.  \'mount-point /foo/bar:/bar\' \n+       will mount the object at \'/bar\' in the database to \'/foo/bar\' in \n+       Zope). The name of the mount point (\'bar\') must be the same as \n+       the mounted object.\n+\n+       It is also possible to specify the root that should be used in the\n+       mounted database by using the syntax\n+       \'virtual_path:~real_root:real_path\'. The root defaults to \'Application\'\n+       and should not normally be changed.\n+      </description>\n+    </multikey>\n+\n+    <key name="connection-class" datatype=".importable_name">\n+      <description>\n+       Change the connection class a database uses on a per-database basis to\n+       support different connection policies.  Use a Python dotted-path\n+       name to specify the connection class.\n+      </description>\n+    </key>\n+\n+   <key name="class-factory" datatype=".importable_name"\n+        default="Zope2.Startup.datatypes.simpleClassFactory">\n+      <description>\n+       Change the class factory function a database uses on a\n+       per-database basis to support different class factory policy.\n+       Use a Python dotted-path name to specify the class factory function.\n+      </description>\n+    </key>\n+\n+    <key name="container-class" datatype="string">\n+      <description>\n+       Change the container class a (mounted) database uses on a\n+       per-database basis to support a different container than a plain\n+       Folder. Use a Python dotted-path name to specify the container class.\n+      </description>\n+    </key>\n+\n+  </sectiontype>\n+\n+  <sectiontype name="zoperunner">\n+    <description>\n+      This section describes the options for zopectl.  These options\n+      have no default value specified in the schema; in some cases,\n+      zopectl calculates a dynamic default, in others, the feature\n+      associated with the option is disabled.\n+\n+      For those options that also have corresponding command-line\n+      options, the command line option (short and long form) are given\n+      here too.\n+    </description>\n+\n+    <multikey name="program" required="no">\n+      <description>\n+       The program(s) that will be run by the runner\n+      </description>\n+    </multikey>\n+\n+    <key name="daemon" datatype="boolean"\n+         required="no" default="true">\n+      <description>\n+        Command-line option: -d or --daemon.\n+\n+        If this option is true, zdrun.py runs in the background as a\n+        true daemon.  It forks an child process which becomes the\n+        subprocess manager, while the parent exits (making the shell\n+        that started it believe it is done).  The child process also\n+        does the following:\n+\n+        - if the directory option is set, change into that directory\n+\n+        - redirect stdin, stdout and stderr to /dev/null\n+\n+        - call setsid() so it becomes a session leader\n+\n+        - call umask(022)\n+      </description>\n+    </key>\n+\n+    <key name="backoff-limit" datatype="integer"\n+         required="no" default="10">\n+      <description>\n+        Command-line option: -b or --backoff-limit.\n+\n+        When the subprocess crashes, zdrun.py inserts a one-second\n+        delay before it restarts it.  When the subprocess crashes\n+        again right away, the delay is incremented by one second, and\n+        so on.  What happens when the delay has reached the value of\n+        backoff-limit (in seconds), depends on the value of the\n+        forever option.  If forever is false, zdrun.py gives up at\n+        this point, and exits.  An always-crashing subprocess will\n+        have been restarted exactly backoff-limit times in this case.\n+        If forever is true, zdrun.py continues to attempt to restart\n+        the process, keeping the delay at backoff-limit seconds.\n+\n+        If the subprocess stays up for more than backoff-limit\n+        seconds, the delay is reset to 1 second.\n+      </description>\n+    </key>\n+\n+    <key name="forever" datatype="boolean"\n+         required="no" default="false">\n+      <description>\n+        Command-line option: -f or --forever.\n+\n+        If this option is true, zdrun.py will keep restarting a\n+        crashing subprocess forever.  If it is false, it will give up\n+        after backoff-limit crashes in a row.  See the description of\n+        backoff-limit for details.\n+      </description>\n+    </key>\n+\n+    <key name="user" datatype="string"\n+         required="no">\n+      <description>\n+        Command-line option: -u or --user.\n+\n+        When zdrun.py is started by root, this option specifies the\n+        user as who the the zdrun.py process (and hence the daemon\n+        subprocess) will run.  This can be a user name or a numeric\n+        user id.  Both the user and the group are set from the\n+        corresponding password entry, using setuid() and setgid().\n+        This is done before zdrun.py does anything else besides\n+        parsing its command line arguments.\n+\n+        NOTE: when zdrun.py is not started by root, specifying this\n+        option is an error.  (XXX This may be a mistake.)\n+\n+        XXX The zdrun.py event log file may be opened *before*\n+        setuid() is called.  Is this good or bad?\n+      </description>\n+    </key>\n+\n+    <key name="hang-around" datatype="boolean"\n+         required="no" default="false">\n+      <description>\n+        If this option is true, the zdrun.py process will remain even\n+        when the daemon subprocess is stopped.  In this case, zopectl\n+        will restart zdrun.py as necessary.  If this option is false,\n+        zdrun.py will exit when the daemon subprocess is stopped\n+        (unless zdrun.py intends to restart it).\n+      </description>\n+    </key>\n+\n+    <key name="umask" datatype="zdaemon.zdoptions.octal_type"\n+         required="no"\n+         default="022">\n+      <description>\n+        Command-line option: -m or --umask.\n+\n+        When daemon mode is used, this option specifies the octal umask\n+        of the subprocess.\n+      </description>\n+    </key>\n+\n+    <key name="default-to-interactive" datatype="boolean"\n+         required="no" default="true">\n+      <description>\n+        If this option is true, zopectl enters interactive mode\n+        when it is invoked without a positional command argument.  If\n+        it is false, you must use the -i or --interactive command line\n+        option to zopectl to enter interactive mode.\n+      </description>\n+    </key>\n+\n+    <key name="prompt" datatype="string"\n+         required="no" default="zopectl>">\n+       <description>\n+         The prompt shown by zopectl program.\n+       </description>\n+    </key>\n+\n+    <key name="socket-name" datatype="existing-dirpath" required="no">\n+      <description>\n+        Command-line option: -s or --socket-name.\n+\n+        The pathname of the Unix domain socket used for communication\n+        between zopectl.py and zdrun.py.  The default is relative to the\n+        current directory in which zdctl.py and zdrun.py are started.\n+        You want to specify an absolute pathname here.\n+      </description>\n+    </key>\n+\n+  </sectiontype>\n+\n+  <!-- end of type definitions -->\n+\n+  <!-- schema begins  -->\n+\n+  <section type="environment" attribute="environment" name="*">\n+    <description>\n+     A section which allows a user to define arbitrary key-value pairs for\n+     use as environment variables during Zope\'s run cycle.  It\n+     is not recommended to set system-related environment variables such as\n+     PYTHONPATH within this section.\n+    </description>\n+  </section>\n+\n+  <key name="instancehome" datatype="existing-directory"\n+       required="yes">\n+    <description>\n+      The top-level directory which contains the "instance" data for the\n+      application server. It may also contain "etc", "bin", "log",\n+      and "var" directories depending on how you\'ve configured your Zope\n+      instance.\n+    </description>\n+  </key>\n+\n+  <key name="clienthome" datatype="existing-directory">\n+    <description>\n+      The directory used to store the default filestorage file used to\n+      back the ZODB database, as well as other files used by the\n+      Zope applications server during runtime.\n+    </description>\n+    <metadefault>$instancehome/var</metadefault>\n+  </key>\n+\n+  <key name="debug-mode" datatype="boolean" default="off">\n+    <description>\n+    A switch which controls several aspects of Zope operation useful for\n+    developing under Zope.  When debug mode is on:\n+\n+     - Errors in product initialization will cause startup to fail\n+       (instead of writing error messages to the event log file).\n+\n+     - Filesystem-based scripts such as skins, PageTemplateFiles, and\n+       DTMLFiles can be edited while the server is running and the server\n+       will detect these changes in real time.  When this switch is\n+       off, you must restart the server to see the changes.\n+\n+     Setting this to \'off\' when Zope is in a production environment is\n+     encouraged, as it speeds execution (sometimes dramatically).\n+    </description>\n+    <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="locale" datatype="locale" handler="locale">\n+    <description>\n+     Locale name to be used. See your operating system documentation for locale\n+     information specific to your system. If the requested locale is not\n+     supported by your system, an error will be raised and Zope will not start.\n+    </description>\n+    <metadefault>unset</metadefault>\n+  </key>\n+\n+  <key name="datetime-format" datatype=".datetime_format"\n+       handler="datetime_format" default="us">\n+    <description>\n+     Set this variable either to "us" or "international" to force the\n+     DateTime module to parse date strings either with\n+     month-before-days-before-year ("us") or\n+     days-before-month-before-year ("international").  The default\n+     behaviour of DateTime (when this setting is left unset) is to\n+     parse dates as US dates.\n+    </description>\n+    <metadefault>us</metadefault>\n+  </key>\n+\n+  <key name="python-check-interval" datatype="integer" default="1000">\n+    <description>\n+      Value passed to Python\'s sys.setcheckinterval() function.  The\n+      higher this is, the less frequently the Python interpreter\n+      checks for keyboard interrupts.  Setting this to higher values\n+      also reduces the frequency of potential thread switches, which\n+      can improve the performance of a busy server.\n+    </description>\n+  </key>\n+\n+  <key name="http-realm" default="Zope">\n+    <description>\n+     The HTTP "Realm" header value sent by this Zope instance. This value\n+     often shows up in basic authentication dialogs.\n+    </description>\n+    <metadefault>Zope</metadefault>\n+  </key>\n+\n+  <key name="automatically-quote-dtml-request-data" datatype="boolean"\n+       default="on" handler="automatically_quote_dtml_request_data">\n+     <description>\n+     Set this directive to \'off\' in order to disable the autoquoting of\n+     implicitly retrieved REQUEST data by DTML code which contains a \'&lt;\'\n+     when used in &lt;dtml-var&gt; construction. When this directive is \'on\',\n+     all data implicitly retrieved from the REQUEST in DTML (as opposed to\n+     addressing REQUEST.somevarname directly) that contains a \'&lt;\' will be\n+     HTML-quoted when interpolated via a &lt;dtml-var&gt; or &amp;dtml-\n+     construct. This mitigates the possibility that DTML programmers will\n+     leave their sites open to a "client-side trojan" attack.\n+     </description>\n+     <metadefault>on</metadefault>\n+  </key>\n+\n+  <multikey name="trusted-proxy" datatype="ipaddr-or-hostname"\n+       attribute="trusted_proxies">\n+     <description>\n+     Define one or more \'trusted-proxies\' keys, each of which is a\n+     hostname or an IP address.  The set of definitions comprises a list\n+     of front-end proxies that are trusted to supply an accurate\n+     X_FORWARDED_FOR header to Zope (security-related).\n+     </description>\n+     <metadefault>unset</metadefault>\n+  </multikey>\n+\n+  <key name="max-conflict-retries" datatype="integer" default="3"\n+       attribute="max_conflict_retries">\n+    <description>\n+      The maximum number of retries on a conflict error\n+    </description>\n+  </key>\n+\n+  <key name="security-policy-implementation"\n+       datatype=".security_policy_implementation"\n+       default="C">\n+     <description>\n+     The default Zope "security policy" implementation is written in C.\n+     Set this key to "PYTHON" to use the Python implementation\n+     (useful for debugging purposes); set it to "C" to use the C\n+     implementation.\n+     </description>\n+     <metadefault>C</metadefault>\n+  </key>\n+\n+  <key name="skip-authentication-checking" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to cause Zope to prevent Zope from\n+     attempting to authenticate users during normal operation.\n+     Potentially dangerous from a security perspective.  Only works if\n+     security-policy-implementation is set to \'C\'.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="skip-ownership-checking" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to cause Zope to ignore ownership checking\n+     when attempting to execute "through the web" code. By default, this\n+     directive is off in order to prevent \'trojan horse\' security problems\n+     whereby a user with less privilege can cause a user with more\n+     privilege to execute code which the less privileged user has written.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="verbose-security" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to enable verbose security exceptions.\n+     This can help you track down the reason for Unauthorized exceptions,\n+     but it is not suitable for public sites because it may reveal\n+     unnecessary information about the structure of your site.  Only\n+     works if security-policy-implementation is set to \'PYTHON\'.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <section type="eventlog" name="*" attribute="eventlog">\n+    <description>\n+      Describes what level of log output is desired and where it\n+      should be written.\n+    </description>\n+  </section>\n+\n+  <section type="logger" name="access">\n+     <description>\n+      Describes the logging performed to capture the \'access\' log,\n+      which typically captures per-request data in common or combined\n+      log format.\n+    </description>\n+  </section>\n+\n+  <section type="logger" name="trace">\n+     <description>\n+      Describes the logging performed to capture the \'trace\' log,\n+      which typically captures detailed per-request data useful for\n+      Zope debugging.\n+    </description>\n+  </section>\n+\n+  <key name="conflict-error-log-level"\n+       datatype="ZConfig.components.logger.datatypes.logging_level"\n+       default="info">\n+     <description>\n+       Specifies at which level conflict errors are logged. Conflict\n+       errors, when occurring in small numbers, are a normal part of the\n+       Zope optimistic transaction conflict resolution algorithms. They\n+       are retried automatically a few times, and are therefore usually\n+       not visible by the user. You can specify \'notset\' if you don\'t\n+       want them logged, or use any other logger level.\n+     </description>\n+     <metadefault>info</metadefault>\n+  </key>\n+\n+  <multisection type="ZODB.Database" name="+" attribute="databases">\n+    <description>\n+       Zope ZODB databases must have a name, and they are required to be\n+       referenced via the "zodb_db" database type because it is\n+       the only kind of database definition that implements\n+       the required mount-point argument.  There is another\n+       database sectiontype named "zodb", but it cannot be used\n+       in the context of a proper Zope configuration (due to\n+       lack of a mount-point).\n+    </description>\n+  </multisection>\n+\n+  <key name="default-zpublisher-encoding"\n+       datatype=".default_zpublisher_encoding"\n+       default="utf-8">\n+     <description>\n+       This key controls what character set is used to encode unicode\n+       data that reaches ZPublisher without any other specified encoding.\n+     </description>\n+  </key>\n+\n+  <abstracttype name="zope.product.base">\n+    <description>\n+      Base type for product-specific configuration sections.\n+\n+      Specific products should implement configuration sections by\n+      defining section types that implement this abstract type and\n+      using their own schema component to define meaningful settings.\n+\n+    </description>\n+  </abstracttype>\n+\n+  <sectiontype name="product-config" implements="zope.product.base">\n+    <description>\n+    Product-specific configuration, expressed as arbitrary name-value pairs.\n+    </description>\n+\n+    <key name="+"\n+         attribute="mapping"\n+         required="no"\n+         />\n+  </sectiontype>\n+\n+  <multisection type="zope.product.base" name="+"\n+                attribute="product_config">\n+   <description>\n+    Product-specific configuration stanzas.\n+\n+    Products may use the &lt;product-config&gt; section type, or may supply\n+    a component.xml which defines section types with their own schemas.\n+\n+    All sections for this multisection will be collected into the\n+    \'product_config\' attribute of the configuration object.\n+   </description>\n+  </multisection>\n+\n+  <section type="zoperunner" name="*" attribute="runner"/>\n+\n+  <key name="python" datatype="existing-path"\n+       required="no">\n+    <description>\n+      Path to the Python interpreter for use by zdaemon.\n+      Defaults to sys.executable.\n+      Needed for buildout-based instances to supply a python\n+      that has all the correct eggs on the path.\n+    </description>\n+  </key>\n+\n+</schema>\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\nnew file mode 100644\nindex 0000000..5610d0b\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/zopectl.py\n@@ -0,0 +1,430 @@\n+##############################################################################\n+#\n+# Copyright (c) 2001, 2002 Zope Foundation and Contributors.\n+# All Rights Reserved.\n+#\n+# This software is subject to the provisions of the Zope Public License,\n+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n+# FOR A PARTICULAR PURPOSE.\n+#\n+##############################################################################\n+"""zopectl -- control Zope using zdaemon.\n+\n+Usage: zopectl [options] [action [arguments]]\n+\n+Options:\n+-h/--help -- print usage message and exit\n+-b/--backoff-limit SECONDS -- set backoff limit to SECONDS (default 10)\n+-d/--daemon -- run as a proper daemon; fork a subprocess, close files etc.\n+-f/--forever -- run forever (by default, exit when backoff limit is exceeded)\n+-h/--help -- print this usage message and exit\n+-i/--interactive -- start an interactive shell after executing commands\n+-l/--logfile -- log file to be read by logtail command\n+-u/--user -- run the daemon manager program as this user (or numeric id)\n+-m/--umask -- provide octal umask for files created by the managed process\n+-s/--socket-name -- socket between zopectl and zdrun\n+-t/--transcript FILE -- log file where to redirect stdout and stderr\n+action [arguments] -- see below\n+\n+Actions are commands like "start", "stop" and "status".  If -i is\n+specified or no action is specified on the command line, a "shell"\n+interpreting actions typed interactively is started. Use the\n+action "help" to find out about available actions.\n+"""\n+from __future__ import absolute_import\n+\n+import csv\n+import os\n+import sys\n+import signal\n+import xml.sax\n+\n+import pkg_resources\n+\n+import zdaemon\n+from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n+from zdaemon.zdoptions import ZDOptions\n+from ZConfig.components.logger.handlers import FileHandlerFactory\n+from ZConfig.components.logger import logger\n+from ZConfig.loader import SchemaLoader\n+from Zope2.Startup.options import ConditionalSchemaParser\n+\n+try:\n+    from ZServer.Zope2.Startup.options import ZopeOptions\n+except ImportError:\n+    class ZopeOptions(ZDOptions):\n+        schemadir = os.path.dirname(os.path.abspath(__file__))\n+        schemafile = \'wsgischema.xml\'\n+\n+\n+if sys.version_info > (3, ):\n+    basestring = str\n+\n+WIN = False\n+if sys.platform[:3].lower() == "win":\n+    WIN = True\n+\n+\n+def string_list(arg):\n+    return arg.split()\n+\n+\n+def quote_command(command):\n+    print(" ".join(command))\n+    # Quote the program name, so it works even if it contains spaces\n+    command = " ".join([\'"%s"\' % x for x in command])\n+    if WIN:\n+        # odd, but true: the windows cmd processor can\'t handle more than\n+        # one quoted item per string unless you add quotes around the\n+        # whole line.\n+        command = \'"%s"\' % command\n+    return command\n+\n+\n+class LoggerFactory(logger.LoggerFactory):\n+    """\n+    A factory used to create loggers while delaying actual logger\n+    instance construction.  We need to do this because we may want to\n+    reference a logger before actually instantiating it (for example,\n+    to allow the app time to set an effective user).  An instance of\n+    this wrapper is a callable which, when called, returns a logger\n+    object.\n+    """\n+    def __init__(self, section):\n+        section.name = section.getSectionName()\n+        section.propagate = False\n+        logger.LoggerFactory.__init__(self, section)\n+\n+\n+class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n+    # Zope controller options.\n+    #\n+    # After initialization, this should look very much like a\n+    # zdaemon.zdctl.ZDCtlOptions instance.  Many of the attributes are\n+    # initialized from different sources, however.\n+\n+    # Provide help message, without indentation.\n+    __doc__ = __doc__\n+\n+    positional_args_allowed = True\n+\n+    # this indicates that no explicit program has been provided.\n+    # the command line option can set this.\n+    program = None\n+\n+    # this indicates that no explicit socket name has been provided.\n+    # the command line option can set this.\n+    sockname = None\n+\n+    # XXX Suppress using Zope\'s <eventlog> section to avoid using the\n+    # same logging for zdctl as for the Zope appserver.  There still\n+    # needs to be a way to set a logfile for zdctl.\n+    logsectionname = None\n+\n+    def __init__(self):\n+        ZopeOptions.__init__(self)\n+        ZDCtlOptions.__init__(self)\n+        self.add("interactive", None, "i", "interactive", flag=1)\n+        self.add("default_to_interactive", "runner.default_to_interactive",\n+                 default=1)\n+\n+    def realize(self, *args, **kw):\n+        ZopeOptions.realize(self, *args, **kw)\n+        # Additional checking of user option; set uid and gid\n+        if self.user is not None:\n+            import pwd\n+            try:\n+                uid = int(self.user)\n+            except ValueError:\n+                try:\n+                    pwrec = pwd.getpwnam(self.user)\n+                except KeyError:\n+                    self.usage("username %r not found" % self.user)\n+                uid = pwrec[2]\n+            else:\n+                try:\n+                    pwrec = pwd.getpwuid(uid)\n+                except KeyError:\n+                    self.usage("uid %r not found" % self.user)\n+            gid = pwrec[3]\n+            self.uid = uid\n+            self.gid = gid\n+\n+        config = self.configroot\n+        self.directory = config.instancehome\n+        self.clienthome = config.clienthome\n+        if self.program:\n+            if isinstance(self.program, basestring):\n+                self.program = [self.program]\n+        elif config.runner and config.runner.program:\n+            self.program = config.runner.program\n+        else:\n+            self.program = [os.path.join(self.directory, "bin", "runzope")]\n+        if self.sockname:\n+            # set by command line option\n+            pass\n+        elif config.runner and config.runner.socket_name:\n+            self.sockname = config.runner.socket_name\n+        else:\n+            self.sockname = os.path.join(self.clienthome, "zopectlsock")\n+        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n+        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n+                                  "zdrun.py")\n+\n+        self.exitcodes = [0, 2]\n+        if self.logfile is None and config.eventlog is not None:\n+            for handler in config.eventlog.handler_factories:\n+                if isinstance(handler, FileHandlerFactory):\n+                    self.logfile = handler.section.path\n+                    if self.logfile not in ("STDERR", "STDOUT"):\n+                        break\n+\n+    def load_schema(self):\n+        if self.schema is None:\n+            # Load schema\n+            if self.schemadir is None:\n+                self.schemadir = os.path.dirname(__file__)\n+            self.schemafile = os.path.join(self.schemadir, self.schemafile)\n+            self._conditional_load()\n+\n+    def _conditional_load(self):\n+        loader = SchemaLoader()\n+        # loadURL\n+        url = loader.normalizeURL(self.schemafile)\n+        resource = loader.openResource(url)\n+        try:\n+            # load / parseResource without caching\n+            parser = ConditionalSchemaParser(loader, resource.url)\n+            xml.sax.parse(resource.file, parser)\n+            self.schema = parser._schema\n+        finally:\n+            resource.close()\n+\n+\n+class ZopeCmd(ZDCmd):\n+\n+    _exitstatus = 0\n+\n+    def _get_override(self, opt, name, svalue=None, flag=0):\n+        # Suppress the config file, and pass all configuration via the\n+        # command line.  This avoids needing to specialize the zdrun\n+        # script.\n+        if name == "configfile":\n+            return []\n+        value = getattr(self.options, name)\n+        if value is None:\n+            return []\n+        if flag:\n+            if value:\n+                args = [opt]\n+            else:\n+                args = []\n+        else:\n+            if svalue is None:\n+                svalue = str(value)\n+            args = [opt, svalue]\n+        return args\n+\n+    def get_startup_cmd(self, python, more):\n+        cmdline = (\'%s -c "from Zope2 import configure;\'\n+                   \'configure(%r);\' %\n+                   (python, self.options.configfile)\n+                   )\n+        return cmdline + more + \'\\"\'\n+\n+    def do_debug(self, arg):\n+        cmdline = self.get_startup_cmd(self.options.python + \' -i\',\n+                                       \'import Zope2; app=Zope2.app()\')\n+        print(\'Starting debugger (the name "app" is bound to the top-level \'\n+              \'Zope object)\')\n+        os.system(cmdline)\n+\n+    def do_foreground(self, arg):\n+        program = self.options.program\n+        local_additions = []\n+        if not program.count(\'-C\'):\n+            local_additions += [\'-C\', self.options.configfile]\n+        if not program.count(\'-X\'):\n+            local_additions += [\'-X\']\n+        if not program.count(\'debug-mode=on\'):\n+            local_additions += [\'debug-mode=on\']\n+        program[1:1] = local_additions\n+        command = quote_command(program)\n+        try:\n+            return os.system(command)\n+        except KeyboardInterrupt:\n+            pass\n+        finally:\n+            for addition in local_additions:\n+                program.remove(addition)\n+\n+    def help_debug(self):\n+        print("debug -- run the Zope debugger to inspect your database")\n+        print("         manually using a Python interactive shell")\n+\n+    def __getattr__(self, name):\n+        """\n+        Getter to check if an unknown command is implement by an entry point.\n+        """\n+        if not name.startswith("do_"):\n+            raise AttributeError(name)\n+        data = list(pkg_resources.iter_entry_points(\n+            "zopectl.command", name=name[3:]))\n+        if not data:\n+            raise AttributeError(name)\n+        if len(data) > 1:\n+            sys.stderr.write(\n+                "Warning: multiple entry points found for command")\n+            return\n+        func = data[0].load()\n+        if not callable(func):\n+            sys.stderr.write("Error: %s is not a callable method" % name)\n+            return\n+\n+        return self.run_entrypoint(data[0])\n+\n+    def run_entrypoint(self, entry_point):\n+        def go(arg):\n+            # If the command line was something like\n+            # """bin/instance run "one two" three"""\n+            # cmd.parseline will have converted it so\n+            # that arg == \'one two three\'. This is going to\n+            # foul up any quoted command with embedded spaces.\n+            # So we have to return to self.options.args,\n+            # which is a tuple of command line args,\n+            # throwing away the "run" command at the beginning.\n+            #\n+            # Further complications: if self.options.args has come\n+            # via subprocess, it may look like\n+            # [\'run "arg 1" "arg2"\'] rather than [\'run\',\'arg 1\',\'arg2\'].\n+            # If that\'s the case, we\'ll use csv to do the parsing\n+            # so that we can split on spaces while respecting quotes.\n+            tup = self.options.args\n+            if len(tup) == 1:\n+                tup = csv.reader(tup, delimiter=\' \').next()\n+\n+            # Remove -c and add command name as sys.argv[0]\n+            cmd = [\'import sys\',\n+                   \'sys.argv.pop()\',\n+                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n+                   ]\n+            if len(tup) > 1:\n+                argv = tup[1:]\n+                for a in argv:\n+                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n+            cmd.extend([\n+                \'import pkg_resources\',\n+                \'import Zope2\',\n+                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n+                % entry_point,\n+                \'app=Zope2.app()\',\n+                \'func(app, sys.argv[1:])\',\n+            ])\n+            cmdline = self.get_startup_cmd(\n+                self.options.python, \' ; \'.join(cmd))\n+            self._exitstatus = os.system(cmdline)\n+        return go\n+\n+    def do_run(self, args):\n+        if not args:\n+            print("usage: run <script> [args]")\n+            return\n+        # replace sys.argv\n+        script = args.split(\' \')[0]\n+        cmd = (\n+            "import sys; sys.argv[:]=%r.split(\' \');"\n+            "import Zope2; app=Zope2.app(); execfile(%r)"\n+        ) % (args, script)\n+        cmdline = self.get_startup_cmd(self.options.python, cmd)\n+        self._exitstatus = os.system(cmdline)\n+\n+    def help_run(self):\n+        print("run <script> [args] -- run a Python script with the Zope ")\n+        print("                       environment set up. The script can use ")\n+        print("                       the name \'app\' access the top-level ")\n+        print("                       Zope object")\n+\n+    def do_adduser(self, arg):\n+        try:\n+            name, password = arg.split()\n+        except Exception:\n+            print("usage: adduser <name> <password>")\n+            return\n+        cmdline = self.get_startup_cmd(\n+            self.options.python,\n+            \'import Zope2; \'\n+            \'app = Zope2.app(); \'\n+            \'result = app.acl_users._doAddUser(\'\n+            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n+            \'import transaction; \'\n+            \'transaction.commit(); \'\n+            \'print \\\'Created user:\\\', result\'\n+        ) % (name, password)\n+        os.system(cmdline)\n+\n+    def help_adduser(self):\n+        print("adduser <name> <password> -- add a Zope management user")\n+\n+\n+def main(args=None):\n+    # This is exactly like zdctl.main(), but uses ZopeCtlOptions and\n+    # ZopeCmd instead of ZDCtlOptions and ZDCmd, so the default values\n+    # are handled properly for Zope.\n+    options = ZopeCtlOptions()\n+    options.realize(args)\n+    c = ZopeCmd(options)\n+    if options.args:\n+        c.onecmd(" ".join(options.args))\n+    else:\n+        options.interactive = 1\n+    if options.interactive:\n+        try:\n+            import readline  # NOQA\n+        except ImportError:\n+            pass\n+        print("program:" + " ".join(options.program))\n+        c.do_status()\n+        c.cmdloop()\n+    else:\n+        return min(c._exitstatus, 1)\n+\n+\n+def _ignoreSIGCHLD(*unused):\n+    while 1:\n+        try:\n+            os.waitpid(-1, os.WNOHANG)\n+        except OSError:\n+            break\n+\n+\n+def run():\n+    # we don\'t care to be notified of our childrens\' exit statuses.\n+    # this prevents zombie processes from cluttering up the process\n+    # table when zopectl start/stop is used interactively.\n+    # DM 2004-11-26: from the Linux "execve(2)" manual page:\n+    #     Any signals set to be caught by the calling process are reset\n+    #     to their default behaviour.\n+    #     The SIGCHLD signal (when set to SIG_IGN) may or may not be reset\n+    #     to SIG_DFL.\n+    #   If it is not reset, \'os.wait[pid]\' can non-deterministically fail.\n+    #   Thus, use a way such that "SIGCHLD" is definitely reset in children.\n+    # signal.signal(signal.SIGCHLD, signal.SIG_IGN)\n+    if not WIN and os.uname()[0] != \'Darwin\':\n+        # On Windows the os.uname method does not exist.\n+        # On Mac OS X, setting up a signal handler causes waitpid to\n+        # raise EINTR, which is not preventable via the Python signal\n+        # handler API and can\'t be dealt with properly as we can\'t pass\n+        # the SA_RESTART to the signal API. Since Mac OS X doesn\'t\n+        # appear to clutter up the process table with zombies if\n+        # SIGCHILD is unset, just don\'t bother registering a SIGCHILD\n+        # signal handler at all.\n+        signal.signal(signal.SIGCHLD, _ignoreSIGCHLD)\n+    exitstatus = main()\n+    sys.exit(exitstatus)\n+\n+\n+if __name__ == \'__main__\':\n+    run()\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-07T12:54:02+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/2f4ed5a28e1f9e619d769d6fe2e5c13a5d55f076

Fix adduser and run

Files changed:
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/zopectl.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 65f0989..dd34b0e 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -527,17 +527,15 @@ def do_run(self, arg):\n             print("usage: run <script> [args]")\n             return\n \n-        # If we pass the script filename as a win32 backslashed path\n-        # using a \'\'-style string, the backslashes will act as\n-        # escapes.  Use r\'\' instead.\n-        #\n         # Remove -c and add script as sys.argv[0]\n         script = tup[0]\n-        cmd = \'import sys; sys.argv.pop(); sys.argv.append(r\\\'%s\\\'); \' % script\n+        cmd = \'import sys; sys.argv.pop(); sys.argv.append(%r); \' % script\n         if len(tup) > 1:\n             argv = tup[1:]\n             cmd += \'[sys.argv.append(x) for x in %s]; \' % argv\n-        cmd += \'execfile(r\\\'%s\\\')\' % script\n+        cmd += (\n+            "f = open(%r); src = f.read(); f.close(); exec(src)"\n+        ) % script\n         cmdline = self.get_startup_cmd(self.options.python, cmd)\n \n         self._exitstatus = os.system(cmdline)\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\nindex 5610d0b..b531c5f 100644\n--- a/src/plone/recipe/zope2instance/zopectl.py\n+++ b/src/plone/recipe/zope2instance/zopectl.py\n@@ -336,7 +336,9 @@ def do_run(self, args):\n         script = args.split(\' \')[0]\n         cmd = (\n             "import sys; sys.argv[:]=%r.split(\' \');"\n-            "import Zope2; app=Zope2.app(); execfile(%r)"\n+            "import Zope2; app=Zope2.app(); "\n+            "f = open(%r, \'r\'); src = f.read(); f.close(); "\n+            "exec(src)"\n         ) % (args, script)\n         cmdline = self.get_startup_cmd(self.options.python, cmd)\n         self._exitstatus = os.system(cmdline)\n@@ -361,7 +363,7 @@ def do_adduser(self, arg):\n             \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n             \'import transaction; \'\n             \'transaction.commit(); \'\n-            \'print \\\'Created user:\\\', result\'\n+            \'print(\\\'Created user:\\\', result)\'\n         ) % (name, password)\n         os.system(cmdline)\n \n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-07T12:54:02+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/d8e6e60b50fc7a630ee274dd5841758789434699

Take logger schema back out; logging gets configured via the wsgi server

Files changed:
M src/plone/recipe/zope2instance/wsgischema.xml
M src/plone/recipe/zope2instance/zopectl.py

b'diff --git a/src/plone/recipe/zope2instance/wsgischema.xml b/src/plone/recipe/zope2instance/wsgischema.xml\nindex b2aa221..996394b 100644\n--- a/src/plone/recipe/zope2instance/wsgischema.xml\n+++ b/src/plone/recipe/zope2instance/wsgischema.xml\n@@ -4,27 +4,9 @@\n \n   <!-- type definitions -->\n \n-  <import package="ZConfig.components.logger" file="handlers.xml"/>\n-  <import package="ZConfig.components.logger" file="eventlog.xml"/>\n   <import package="ZODB"/>\n   <import package="tempstorage" condition="tempstorage"/>\n \n-  <sectiontype name="logger" datatype="plone.recipe.zope2instance.zopectl.LoggerFactory">\n-    <description>\n-      This "logger" type only applies to access and request ("trace")\n-      logging; event logging is handled by the "logging" package in\n-      the Python standard library.  The loghandler type used here is\n-      provided by the "ZConfig.components.logger" package.\n-    </description>\n-    <key name="level"\n-         datatype="ZConfig.components.logger.datatypes.logging_level"\n-         default="info"/>\n-    <multisection name="*"\n-                  type="ZConfig.logger.handler"\n-                  attribute="handlers"\n-                  required="yes"/>\n-  </sectiontype>\n-\n   <sectiontype name="environment"\n                datatype=".environment"\n                keytype="identifier">\n@@ -414,43 +396,6 @@\n      <metadefault>off</metadefault>\n   </key>\n \n-  <section type="eventlog" name="*" attribute="eventlog">\n-    <description>\n-      Describes what level of log output is desired and where it\n-      should be written.\n-    </description>\n-  </section>\n-\n-  <section type="logger" name="access">\n-     <description>\n-      Describes the logging performed to capture the \'access\' log,\n-      which typically captures per-request data in common or combined\n-      log format.\n-    </description>\n-  </section>\n-\n-  <section type="logger" name="trace">\n-     <description>\n-      Describes the logging performed to capture the \'trace\' log,\n-      which typically captures detailed per-request data useful for\n-      Zope debugging.\n-    </description>\n-  </section>\n-\n-  <key name="conflict-error-log-level"\n-       datatype="ZConfig.components.logger.datatypes.logging_level"\n-       default="info">\n-     <description>\n-       Specifies at which level conflict errors are logged. Conflict\n-       errors, when occurring in small numbers, are a normal part of the\n-       Zope optimistic transaction conflict resolution algorithms. They\n-       are retried automatically a few times, and are therefore usually\n-       not visible by the user. You can specify \'notset\' if you don\'t\n-       want them logged, or use any other logger level.\n-     </description>\n-     <metadefault>info</metadefault>\n-  </key>\n-\n   <multisection type="ZODB.Database" name="+" attribute="databases">\n     <description>\n        Zope ZODB databases must have a name, and they are required to be\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\nindex b531c5f..8632a23 100644\n--- a/src/plone/recipe/zope2instance/zopectl.py\n+++ b/src/plone/recipe/zope2instance/zopectl.py\n@@ -175,12 +175,6 @@ def realize(self, *args, **kw):\n                                   "zdrun.py")\n \n         self.exitcodes = [0, 2]\n-        if self.logfile is None and config.eventlog is not None:\n-            for handler in config.eventlog.handler_factories:\n-                if isinstance(handler, FileHandlerFactory):\n-                    self.logfile = handler.section.path\n-                    if self.logfile not in ("STDERR", "STDOUT"):\n-                        break\n \n     def load_schema(self):\n         if self.schema is None:\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-07T12:54:02+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/8e801beadfe0c33f669570a32d40f13b605ddd6f

generate wsgi.ini

Files changed:
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex dd34b0e..004af0d 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -649,8 +649,7 @@ def main(args=None):\n     else:\n         from Zope2.Startup import serve\n         script = serve.__file__\n-        # @@@ generate this?\n-        wsgi_ini = os.path.join(options.directory, \'etc\', \'waitress.ini\')\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n         options.program = [\n             options.python, options.interpreter, script, wsgi_ini\n         ]\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex a3fbc48..1e088ef 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -96,8 +96,10 @@ def install(self, update=False):\n             make.make_instance(options.get(\'user\', None), location, version)\n \n         try:\n-            # Make a new zope.conf based on options in buildout.cfg\n+            # Make a new zope.conf and wsgi.ini based on options in buildout.cfg\n             self.build_zope_conf()\n+            if self.wsgi:\n+                self.build_wsgi_ini()\n \n             # Install extra scripts\n             installed.extend(self.install_scripts())\n@@ -589,11 +591,19 @@ def is_rs_option(name):\n \n         zope_conf = \'\\n\'.join([l for l in zope_conf.splitlines() if l.rstrip()])\n         zope_conf_path = os.path.join(location, \'etc\', \'zope.conf\')\n-        try:\n-            fd = open(zope_conf_path, \'w\')\n-            fd.write(zope_conf)\n-        finally:\n-            fd.close()\n+        with open(zope_conf_path, \'w\') as f:\n+            f.write(zope_conf)\n+\n+    def build_wsgi_ini(self):\n+        options = self.options\n+        wsgi_ini_path = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n+        options = {\n+            \'location\': options[\'location\'],\n+            \'http_address\': options.get(\'http-address\', \'8080\'),\n+        }\n+        wsgi_ini = wsgi_ini_template % options\n+        with open(wsgi_ini_path, \'w\') as f:\n+            f.write(wsgi_ini)\n \n     def install_scripts(self):\n         options = self.options\n@@ -1113,3 +1123,45 @@ def render_file_storage(self, file_storage, blob_storage,\n     %s\n </configure>\n """\n+\n+wsgi_ini_template = """\\\n+[server:main]\n+use = egg:waitress#main\n+listen = 0.0.0.0:%(http_address)s\n+\n+[app:zope]\n+use = egg:Zope#main\n+zope_conf = %(location)s/etc/zope.conf\n+\n+[pipeline:main]\n+pipeline =\n+    egg:Zope#httpexceptions\n+    zope\n+\n+[loggers]\n+keys = root, plone\n+\n+[handlers]\n+keys = console\n+\n+[formatters]\n+keys = generic\n+\n+[logger_root]\n+level = INFO\n+handlers = console\n+\n+[logger_plone]\n+level = DEBUG\n+handlers =\n+qualname = plone\n+\n+[handler_console]\n+class = StreamHandler\n+args = (sys.stderr,)\n+level = NOTSET\n+formatter = generic\n+\n+[formatter_generic]\n+format = %%(asctime)s %%(levelname)-5.5s [%%(name)s:%%(lineno)s][%%(threadName)s] %%(message)s\n+"""\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-07T12:54:38+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/d2e51d8d2fe80cdcd03afc799b47318f65edc6ed

docs, determine wsgi option based on presense of ZServer

Files changed:
M CHANGES.rst
M README.rst
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4cfe818..6a7e164 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,12 +1,20 @@\n Changelog\n =========\n \n-5.0.2 (unreleased)\n+6.0.0 (unreleased)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+- Determine whether to set up a WSGI-based instanced\n+  automatically based on whether ZServer is included in the eggs,\n+  instead of explicitly using the ``wsgi`` option.\n+  [davisagli]\n+\n+- For WSGI-based instances, generate a zdaemon-based instance script\n+  that works similarly to ZServer-based instances, instead of a\n+  script that only handles running the WSGI server.\n+  [davisagli]\n \n New features:\n \n@@ -57,6 +65,7 @@ Bug fixes:\n \n - Python 3 compatibility with sixer\n   [ale-rt]\n+\n - Fix import. zopectl moved to ZServer\n   [pbauer]\n \ndiff --git a/README.rst b/README.rst\nindex 0e75a72..313adcc 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -50,7 +50,7 @@ ip-address\n   implementations will listen for requests. If this is unset, Zope will listen\n   on all IP addresses supported by the machine. This directive can be\n   overridden on a per-server basis in the servers section. Defaults to not\n-  setting an ip-address.\n+  setting an ip-address. Used for ZServer only, not WSGI.\n \n zodb-cache-size\n   Set the ZODB cache size, i.e. the number of objects which the ZODB cache\n@@ -58,7 +58,7 @@ zodb-cache-size\n \n zserver-threads\n   Specify the number of threads that Zope's ZServer web server will use to\n-  service requests. The recipes default is 2.\n+  service requests. The recipes default is 2. Used for ZServer only, not WSGI.\n \n environment-vars\n   Define arbitrary key-value pairs for use as environment variables during\n@@ -221,25 +221,28 @@ log levels or configure `mailinglogger`.\n event-log\n   The filename of the event log. Defaults to ${buildout:directory}/var/log/${partname}.log\n   Setting this value to 'disable' will make the <eventlog> section to be omitted,\n-  disabling logging events by default to a .log file.\n+  disabling logging events by default to a .log file. Used for ZServer only, not WSGI.\n \n event-log-level\n   Set the level of the console output for the event log. Level may be any of\n   CRITICAL, ERROR, WARN, INFO, DEBUG, or ALL. Defaults to INFO.\n+  Used for ZServer only, not WSGI.\n \n event-log-max-size\n   Maximum size of event log file. Enables log rotation.\n+  Used for ZServer only, not WSGI.\n \n event-log-old-files\n   Number of previous log files to retain when log rotation is enabled.\n-  Defaults to 1.\n+  Defaults to 1. Used for ZServer only, not WSGI.\n \n event-log-custom\n   A custom section for the eventlog, to be able to use another\n-  event logger than `logfile`\n+  event logger than `logfile`. Used for ZServer only, not WSGI.\n \n mailinglogger\n-  A mailinglogger section added into the event log. Example snippet::\n+  A mailinglogger section added into the event log.\n+  Used for ZServer only, not WSGI. Example snippet::\n \n     <mailing-logger>\n       level error\n@@ -255,22 +258,23 @@ mailinglogger\n z2-log\n   The filename for the Z2 access log. Defaults to var/log/${partname}-Z2.log.\n   Setting this value to 'disable' will make the <logger access> section to be omitted,\n-  disabling logging access events to a .log file\n+  disabling logging access events to a .log file. Used for ZServer only, not WSGI.\n \n z2-log-level\n   Set the log level for the access log. Level may be any of CRITICAL, ERROR,\n-  WARN, INFO, DEBUG, or ALL. Defaults to WARN.\n+  WARN, INFO, DEBUG, or ALL. Defaults to WARN. Used for ZServer only, not WSGI.\n \n access-log-max-size\n   Maximum size of access log file. Enables log rotation.\n+  Used for ZServer only, not WSGI.\n \n access-log-old-files\n   Number of previous log files to retain when log rotation is enabled.\n-  Defaults to 1.\n+  Defaults to 1. Used for ZServer only, not WSGI.\n \n access-log-custom\n   Like `event-log-custom`, a custom section for the access logger, to be able\n-  to use another event logger than `logfile`.\n+  to use another event logger than `logfile`. Used for ZServer only, not WSGI.\n \n Load non-setuptools compatible Python libraries\n -----------------------------------------------\n@@ -386,6 +390,7 @@ enable-product-installation\n \n ftp-address\n   Give a port for the FTP server. This enables the FTP server.\n+  Used for ZServer only, not WSGI.\n \n http-force-connection-close\n   Set to `on` to enforce Zope to set ``Connection: close header``.\n@@ -398,6 +403,7 @@ http-fast-listen\n \n icp-address\n   Give a port for the ICP server. This enables the ICP server.\n+  Used for ZServer only, not WSGI.\n \n import-directory\n   Used to configure the import directory for instance.\n@@ -439,10 +445,12 @@ var\n   Defaults to ${buildout:directory}/var.\n \n webdav-address\n-  Give a port for the WebDAV server.  This enables the WebDAV server\n+  Give a port for the WebDAV server.  This enables the WebDAV server.\n+  Used for ZServer only, not WSGI.\n \n webdav-force-connection-close\n-  Valid options are off and on. Defaults to off\n+  Valid options are off and on. Defaults to off.\n+  Used for ZServer only, not WSGI.\n \n zlib-storage\n   Adds support for file compression on a file storage database. The\n@@ -496,7 +504,7 @@ zopectl-umask\n http-header-max-length\n   Manually set the maximum size of received HTTP header being processed by Zope.\n   The request is discarded and considered as a DoS attack if the header size exceeds\n-  this limit. Default: 8192\n+  this limit. Default: 8192. Used for ZServer only, not WSGI.\n \n   Example::\n \ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 004af0d..02499f8 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -641,14 +641,14 @@ def main(args=None):\n         options.interpreter += '-script.py'\n     if HAS_ZSERVER:\n         from ZServer.Zope2.Startup import run\n-        script = run.__file__\n+        script = os.path.join(os.path.dirname(run.__file__), 'run.py')\n         options.program = [\n             options.python, options.interpreter, script, '-C',\n             options.configfile\n         ]\n     else:\n         from Zope2.Startup import serve\n-        script = serve.__file__\n+        script = os.path.join(os.path.dirname(serve.__file__), 'serve.py')\n         wsgi_ini = os.path.join(options.directory, 'etc', 'wsgi.ini')\n         options.program = [\n             options.python, options.interpreter, script, wsgi_ini\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 1e088ef..ef57cc8 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -77,7 +77,6 @@ def __init__(self, buildout, name, options):\n             buildout['buildout'].get('include-site-packages', 'false')\n             ) not in ('off', 'disable', 'false')\n \n-        self.wsgi = options.get('wsgi') in ('waitress', 'on')\n         # Get Scripts' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n@@ -96,13 +95,18 @@ def install(self, update=False):\n             make.make_instance(options.get('user', None), location, version)\n \n         try:\n-            # Make a new zope.conf and wsgi.ini based on options in buildout.cfg\n+            requirements, ws = self.egg.working_set(\n+                ['plone.recipe.zope2instance'])\n+            self.wsgi = 'zserver' not in ws.by_key\n+\n+            # Make a new zope.conf and wsgi.ini\n+            # based on options in buildout.cfg\n             self.build_zope_conf()\n             if self.wsgi:\n                 self.build_wsgi_ini()\n \n             # Install extra scripts\n-            installed.extend(self.install_scripts())\n+            installed.extend(self.install_scripts(ws))\n \n             # Add zcml files to package-includes\n             self.build_package_includes()\n@@ -605,7 +609,7 @@ def build_wsgi_ini(self):\n         with open(wsgi_ini_path, 'w') as f:\n             f.write(wsgi_ini)\n \n-    def install_scripts(self):\n+    def install_scripts(self, ws):\n         options = self.options\n         location = options['location']\n \n@@ -618,7 +622,6 @@ def install_scripts(self):\n         zopectl_umask = options.get('zopectl-umask', '')\n \n         extra_paths = options.get('extra-paths', '').split()\n-        requirements, ws = self.egg.working_set(['plone.recipe.zope2instance'])\n         reqs = [self.options.get('control-script', self.name)]\n         reqs.extend(['plone.recipe.zope2instance.ctl', 'main'])\n         reqs = [tuple(reqs)]\n"

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-07T12:54:38+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/f612e50c6e2215769e61fb0249eb9557e892e465

Back to explicit option

Files changed:
M CHANGES.rst
M src/plone/recipe/zope2instance/recipe.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6a7e164..6c5e38c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,11 +6,6 @@ Changelog\n \n Breaking changes:\n \n-- Determine whether to set up a WSGI-based instanced\n-  automatically based on whether ZServer is included in the eggs,\n-  instead of explicitly using the ``wsgi`` option.\n-  [davisagli]\n-\n - For WSGI-based instances, generate a zdaemon-based instance script\n   that works similarly to ZServer-based instances, instead of a\n   script that only handles running the WSGI server.\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex ef57cc8..5fa080e 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -77,6 +77,7 @@ def __init__(self, buildout, name, options):\n             buildout['buildout'].get('include-site-packages', 'false')\n             ) not in ('off', 'disable', 'false')\n \n+        self.wsgi = options.get('wsgi') in ('on', 'waitress')\n         # Get Scripts' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n@@ -95,10 +96,6 @@ def install(self, update=False):\n             make.make_instance(options.get('user', None), location, version)\n \n         try:\n-            requirements, ws = self.egg.working_set(\n-                ['plone.recipe.zope2instance'])\n-            self.wsgi = 'zserver' not in ws.by_key\n-\n             # Make a new zope.conf and wsgi.ini\n             # based on options in buildout.cfg\n             self.build_zope_conf()\n@@ -106,7 +103,7 @@ def install(self, update=False):\n                 self.build_wsgi_ini()\n \n             # Install extra scripts\n-            installed.extend(self.install_scripts(ws))\n+            installed.extend(self.install_scripts())\n \n             # Add zcml files to package-includes\n             self.build_package_includes()\n@@ -609,7 +606,7 @@ def build_wsgi_ini(self):\n         with open(wsgi_ini_path, 'w') as f:\n             f.write(wsgi_ini)\n \n-    def install_scripts(self, ws):\n+    def install_scripts(self):\n         options = self.options\n         location = options['location']\n \n@@ -622,6 +619,7 @@ def install_scripts(self, ws):\n         zopectl_umask = options.get('zopectl-umask', '')\n \n         extra_paths = options.get('extra-paths', '').split()\n+        requirements, ws = self.egg.working_set(['plone.recipe.zope2instance'])\n         reqs = [self.options.get('control-script', self.name)]\n         reqs.extend(['plone.recipe.zope2instance.ctl', 'main'])\n         reqs = [tuple(reqs)]\n"

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-08T07:24:54+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/efcd9f8fc26d04e230618dfd5cfd0988f866fe3c

Merge remote-tracking branch 'remotes/origin/wsgi-instance-script' into wsgi-instance-script

Files changed:


b''

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-08T07:31:10+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/492883ee6b69962bc4e7ddabc2015b4406621611

Consolidate ctl and zopectl

Files changed:
M src/plone/recipe/zope2instance/ctl.py
D src/plone/recipe/zope2instance/zopectl.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 02499f8..5ad92ec 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -28,15 +28,26 @@\n """\n \n from pkg_resources import iter_entry_points\n-from . import zopectl\n-\n+from ZConfig.loader import SchemaLoader\n+from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n+from zdaemon.zdoptions import ZDOptions\n+from Zope2.Startup.options import ConditionalSchemaParser\n import csv\n import os\n import os.path\n+import pkg_resources\n import sys\n+import xml.sax\n+import zdaemon\n+\n+if sys.version_info > (3, ):\n+    basestring = str\n \n+WINDOWS = False\n+if sys.platform[:3].lower() == "win":\n+    WINDOWS = True\n \n-if zopectl.WIN:\n+if WINDOWS:\n     import traceback\n     from pkg_resources import resource_filename\n     import pywintypes\n@@ -51,15 +62,123 @@\n         \'or you have not run the shell as Administrator.\')\n \n try:\n-    import ZServer\n+    import ZServer  # noqa\n     HAS_ZSERVER = True\n except ImportError:\n     HAS_ZSERVER = False\n \n+if HAS_ZSERVER:\n+    from ZServer.Zope2.Startup.options import ZopeOptions\n+else:\n+    class ZopeOptions(ZDOptions):\n+        schemadir = os.path.dirname(os.path.abspath(__file__))\n+        schemafile = \'wsgischema.xml\'\n \n-class AdjustedZopeCmd(zopectl.ZopeCmd):\n \n-    if zopectl.WIN:\n+class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n+    # Zope controller options.\n+    #\n+    # After initialization, this should look very much like a\n+    # zdaemon.zdctl.ZDCtlOptions instance.  Many of the attributes are\n+    # initialized from different sources, however.\n+\n+    # Provide help message, without indentation.\n+    __doc__ = __doc__\n+\n+    positional_args_allowed = True\n+\n+    # this indicates that no explicit program has been provided.\n+    # the command line option can set this.\n+    program = None\n+\n+    # this indicates that no explicit socket name has been provided.\n+    # the command line option can set this.\n+    sockname = None\n+\n+    # XXX Suppress using Zope\'s <eventlog> section to avoid using the\n+    # same logging for zdctl as for the Zope appserver.  There still\n+    # needs to be a way to set a logfile for zdctl.\n+    logsectionname = None\n+\n+    def __init__(self):\n+        ZopeOptions.__init__(self)\n+        ZDCtlOptions.__init__(self)\n+        self.add("interactive", None, "i", "interactive", flag=1)\n+        self.add("default_to_interactive", "runner.default_to_interactive",\n+                 default=1)\n+\n+    def realize(self, *args, **kw):\n+        ZopeOptions.realize(self, *args, **kw)\n+        # Additional checking of user option; set uid and gid\n+        if self.user is not None:\n+            import pwd\n+            try:\n+                uid = int(self.user)\n+            except ValueError:\n+                try:\n+                    pwrec = pwd.getpwnam(self.user)\n+                except KeyError:\n+                    self.usage("username %r not found" % self.user)\n+                uid = pwrec[2]\n+            else:\n+                try:\n+                    pwrec = pwd.getpwuid(uid)\n+                except KeyError:\n+                    self.usage("uid %r not found" % self.user)\n+            gid = pwrec[3]\n+            self.uid = uid\n+            self.gid = gid\n+\n+        config = self.configroot\n+        self.directory = config.instancehome\n+        self.clienthome = config.clienthome\n+        if self.program:\n+            if isinstance(self.program, basestring):\n+                self.program = [self.program]\n+        elif config.runner and config.runner.program:\n+            self.program = config.runner.program\n+        else:\n+            self.program = [os.path.join(self.directory, "bin", "runzope")]\n+        if self.sockname:\n+            # set by command line option\n+            pass\n+        elif config.runner and config.runner.socket_name:\n+            self.sockname = config.runner.socket_name\n+        else:\n+            self.sockname = os.path.join(self.clienthome, "zopectlsock")\n+        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n+        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n+                                  "zdrun.py")\n+\n+        self.exitcodes = [0, 2]\n+\n+    def load_schema(self):\n+        if self.schema is None:\n+            # Load schema\n+            if self.schemadir is None:\n+                self.schemadir = os.path.dirname(__file__)\n+            self.schemafile = os.path.join(self.schemadir, self.schemafile)\n+            self._conditional_load()\n+\n+    def _conditional_load(self):\n+        loader = SchemaLoader()\n+        # loadURL\n+        url = loader.normalizeURL(self.schemafile)\n+        resource = loader.openResource(url)\n+        try:\n+            # load / parseResource without caching\n+            parser = ConditionalSchemaParser(loader, resource.url)\n+            xml.sax.parse(resource.file, parser)\n+            self.schema = parser._schema\n+        finally:\n+            resource.close()\n+\n+\n+class ZopeCmd(ZDCmd):\n+\n+    _exitstatus = 0\n+\n+    if WINDOWS:\n \n         # printable representations of the Windows service states\n         service_state_map = {\n@@ -293,7 +412,7 @@ def do_remove(self, arg):\n                 print(\'ERROR: Zope is not installed as a Windows service.\')\n                 return\n             elif status is not win32service.SERVICE_STOPPED:\n-                print (\n+                print(\n                     \'ERROR: Please stop the Windows service before \'\n                     \'removing it.\'\n                 )\n@@ -322,8 +441,8 @@ def get_status(self):\n             - Set "self.zd_up" to 1 or 0 (unclear what this is used for)\n \n             """\n-            zopectl.ZopeCmd.get_status(self)\n-            # override value set by zopectl.ZopeCmd.get_status()\n+            ZDCmd.get_status(self)\n+            # override value set by ZDCmd.get_status()\n             # (always -1 or 0)\n             self.zd_pid = self._get_pid_from_pidfile()\n \n@@ -360,9 +479,29 @@ def help_status(self):\n         def help_EOF(self):\n             print(\'To quit, type CTRL+Z or use the quit command.\')\n \n-    # end of "if zopectl.WIN"\n+    # end of "if WINDOWS"\n     else:\n \n+        def _get_override(self, opt, name, svalue=None, flag=0):\n+            # Suppress the config file, and pass all configuration via the\n+            # command line.  This avoids needing to specialize the zdrun\n+            # script.\n+            if name == "configfile":\n+                return []\n+            value = getattr(self.options, name)\n+            if value is None:\n+                return []\n+            if flag:\n+                if value:\n+                    args = [opt]\n+                else:\n+                    args = []\n+            else:\n+                if svalue is None:\n+                    svalue = str(value)\n+                args = [opt, svalue]\n+            return args\n+\n         def do_start(self, arg):\n             self.get_status()\n             if not self.zd_up:\n@@ -411,6 +550,69 @@ def cond(n=0):\n                 \'daemon process started, pid=%(zd_pid)d\'\n             )\n \n+    def __getattr__(self, name):\n+        """\n+        Getter to check if an unknown command is implement by an entry point.\n+        """\n+        if not name.startswith("do_"):\n+            raise AttributeError(name)\n+        data = list(pkg_resources.iter_entry_points(\n+            "zopectl.command", name=name[3:]))\n+        if not data:\n+            raise AttributeError(name)\n+        if len(data) > 1:\n+            sys.stderr.write(\n+                "Warning: multiple entry points found for command")\n+            return\n+        func = data[0].load()\n+        if not callable(func):\n+            sys.stderr.write("Error: %s is not a callable method" % name)\n+            return\n+\n+        return self.run_entrypoint(data[0])\n+\n+    def run_entrypoint(self, entry_point):\n+        def go(arg):\n+            # If the command line was something like\n+            # """bin/instance run "one two" three"""\n+            # cmd.parseline will have converted it so\n+            # that arg == \'one two three\'. This is going to\n+            # foul up any quoted command with embedded spaces.\n+            # So we have to return to self.options.args,\n+            # which is a tuple of command line args,\n+            # throwing away the "run" command at the beginning.\n+            #\n+            # Further complications: if self.options.args has come\n+            # via subprocess, it may look like\n+            # [\'run "arg 1" "arg2"\'] rather than [\'run\',\'arg 1\',\'arg2\'].\n+            # If that\'s the case, we\'ll use csv to do the parsing\n+            # so that we can split on spaces while respecting quotes.\n+            tup = self.options.args\n+            if len(tup) == 1:\n+                tup = csv.reader(tup, delimiter=\' \').next()\n+\n+            # Remove -c and add command name as sys.argv[0]\n+            cmd = [\'import sys\',\n+                   \'sys.argv.pop()\',\n+                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n+                   ]\n+            if len(tup) > 1:\n+                argv = tup[1:]\n+                for a in argv:\n+                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n+            cmd.extend([\n+                \'import pkg_resources\',\n+                \'import Zope2\',\n+                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n+                % entry_point,\n+                \'app=Zope2.app()\',\n+                \'func(app, sys.argv[1:])\',\n+            ])\n+            cmdline = self.get_startup_cmd(\n+                self.options.python, \' ; \'.join(cmd))\n+            self._exitstatus = os.system(cmdline)\n+        return go\n+\n     def environment(self):\n         configroot = self.options.configroot\n         env = dict(os.environ)\n@@ -484,7 +686,7 @@ def get_startup_cmd(self, python, more, pyflags=""):\n             cmdline += login_cmdline\n \n         cmdline = cmdline + more + \'\\"\'\n-        if zopectl.WIN:\n+        if WINDOWS:\n             # entire command line must be quoted\n             # as well as the components\n             return \'"%s"\' % cmdline\n@@ -541,7 +743,10 @@ def do_run(self, arg):\n         self._exitstatus = os.system(cmdline)\n \n     def help_run(self):\n-        zopectl.ZopeCmd.help_run(self)\n+        print("run <script> [args] -- run a Python script with the Zope ")\n+        print("                       environment set up. The script can use ")\n+        print("                       the name \'app\' access the top-level ")\n+        print("                       Zope object")\n         self.help_startup_command()\n \n     def do_console(self, arg):\n@@ -564,12 +769,13 @@ def do_debug(self, arg):\n             interactive_startup,\n             pyflags=\'-i\',\n         )\n-        print (\'Starting debugger (the name "app" is bound to the top-level \'\n-               \'Zope object)\')\n+        print(\'Starting debugger (the name "app" is bound to the top-level \'\n+              \'Zope object)\')\n         os.system(cmdline)\n \n     def help_debug(self):\n-        zopectl.ZopeCmd.help_debug(self)\n+        print("debug -- run the Zope debugger to inspect your database")\n+        print("         manually using a Python interactive shell")\n         self.help_startup_command()\n \n     def do_foreground(self, arg, debug=True):\n@@ -594,7 +800,7 @@ def do_foreground(self, arg, debug=True):\n                 local_additions += [\'debug-mode=on\']\n             program.extend(local_additions)\n \n-        if zopectl.WIN:\n+        if WINDOWS:\n             # The outer quotes were causing\n             # "WindowsError: [Error 87] The parameter is incorrect"\n             # command = zopectl.quote_command(program)\n@@ -602,7 +808,7 @@ def do_foreground(self, arg, debug=True):\n         else:\n             command = program\n \n-        if debug or zopectl.WIN:\n+        if debug or WINDOWS:\n             try:\n                 self._exitstatus = subprocess.call(command, env=env)\n             except KeyboardInterrupt:\n@@ -623,12 +829,33 @@ def do_test(self, arg):\n               "bin/test -s <my.package>")\n         return\n \n+    def do_adduser(self, arg):\n+        try:\n+            name, password = arg.split()\n+        except Exception:\n+            print("usage: adduser <name> <password>")\n+            return\n+        cmdline = self.get_startup_cmd(\n+            self.options.python,\n+            \'import Zope2; \'\n+            \'app = Zope2.app(); \'\n+            \'result = app.acl_users._doAddUser(\'\n+            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n+            \'import transaction; \'\n+            \'transaction.commit(); \'\n+            \'print(\\\'Created user:\\\', result)\'\n+        ) % (name, password)\n+        os.system(cmdline)\n+\n+    def help_adduser(self):\n+        print("adduser <name> <password> -- add a Zope management user")\n+\n \n def main(args=None):\n     """Customized entry point for launching Zope without forking other processes\n     """\n \n-    options = zopectl.ZopeCtlOptions()\n+    options = ZopeCtlOptions()\n     options.add(name="no_request", short="R", long="no-request", flag=1)\n     options.add(name="no_login", short="L", long="no-login", flag=1)\n     options.add(name="object_path", short="O:", long="object-path=")\n@@ -654,8 +881,7 @@ def main(args=None):\n             options.python, options.interpreter, script, wsgi_ini\n         ]\n \n-    # We use our own ZopeCmd set, that is derived from the original one.\n-    c = AdjustedZopeCmd(options)\n+    c = ZopeCmd(options)\n \n     # Mix in any additional commands supplied by other packages:\n     for ep in iter_entry_points(\'plone.recipe.zope2instance.ctl\'):\n@@ -685,7 +911,7 @@ def main(args=None):\n     # If no command was specified: enter interactive mode.\n \n     try:\n-        import readline\n+        import readline  # noqa\n     except ImportError:\n         pass\n     print(\'Program: {}\'.format(\' \'.join(options.program)))\ndiff --git a/src/plone/recipe/zope2instance/zopectl.py b/src/plone/recipe/zope2instance/zopectl.py\ndeleted file mode 100644\nindex 8632a23..0000000\n--- a/src/plone/recipe/zope2instance/zopectl.py\n+++ /dev/null\n@@ -1,426 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2001, 2002 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""zopectl -- control Zope using zdaemon.\n-\n-Usage: zopectl [options] [action [arguments]]\n-\n-Options:\n--h/--help -- print usage message and exit\n--b/--backoff-limit SECONDS -- set backoff limit to SECONDS (default 10)\n--d/--daemon -- run as a proper daemon; fork a subprocess, close files etc.\n--f/--forever -- run forever (by default, exit when backoff limit is exceeded)\n--h/--help -- print this usage message and exit\n--i/--interactive -- start an interactive shell after executing commands\n--l/--logfile -- log file to be read by logtail command\n--u/--user -- run the daemon manager program as this user (or numeric id)\n--m/--umask -- provide octal umask for files created by the managed process\n--s/--socket-name -- socket between zopectl and zdrun\n--t/--transcript FILE -- log file where to redirect stdout and stderr\n-action [arguments] -- see below\n-\n-Actions are commands like "start", "stop" and "status".  If -i is\n-specified or no action is specified on the command line, a "shell"\n-interpreting actions typed interactively is started. Use the\n-action "help" to find out about available actions.\n-"""\n-from __future__ import absolute_import\n-\n-import csv\n-import os\n-import sys\n-import signal\n-import xml.sax\n-\n-import pkg_resources\n-\n-import zdaemon\n-from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n-from zdaemon.zdoptions import ZDOptions\n-from ZConfig.components.logger.handlers import FileHandlerFactory\n-from ZConfig.components.logger import logger\n-from ZConfig.loader import SchemaLoader\n-from Zope2.Startup.options import ConditionalSchemaParser\n-\n-try:\n-    from ZServer.Zope2.Startup.options import ZopeOptions\n-except ImportError:\n-    class ZopeOptions(ZDOptions):\n-        schemadir = os.path.dirname(os.path.abspath(__file__))\n-        schemafile = \'wsgischema.xml\'\n-\n-\n-if sys.version_info > (3, ):\n-    basestring = str\n-\n-WIN = False\n-if sys.platform[:3].lower() == "win":\n-    WIN = True\n-\n-\n-def string_list(arg):\n-    return arg.split()\n-\n-\n-def quote_command(command):\n-    print(" ".join(command))\n-    # Quote the program name, so it works even if it contains spaces\n-    command = " ".join([\'"%s"\' % x for x in command])\n-    if WIN:\n-        # odd, but true: the windows cmd processor can\'t handle more than\n-        # one quoted item per string unless you add quotes around the\n-        # whole line.\n-        command = \'"%s"\' % command\n-    return command\n-\n-\n-class LoggerFactory(logger.LoggerFactory):\n-    """\n-    A factory used to create loggers while delaying actual logger\n-    instance construction.  We need to do this because we may want to\n-    reference a logger before actually instantiating it (for example,\n-    to allow the app time to set an effective user).  An instance of\n-    this wrapper is a callable which, when called, returns a logger\n-    object.\n-    """\n-    def __init__(self, section):\n-        section.name = section.getSectionName()\n-        section.propagate = False\n-        logger.LoggerFactory.__init__(self, section)\n-\n-\n-class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n-    # Zope controller options.\n-    #\n-    # After initialization, this should look very much like a\n-    # zdaemon.zdctl.ZDCtlOptions instance.  Many of the attributes are\n-    # initialized from different sources, however.\n-\n-    # Provide help message, without indentation.\n-    __doc__ = __doc__\n-\n-    positional_args_allowed = True\n-\n-    # this indicates that no explicit program has been provided.\n-    # the command line option can set this.\n-    program = None\n-\n-    # this indicates that no explicit socket name has been provided.\n-    # the command line option can set this.\n-    sockname = None\n-\n-    # XXX Suppress using Zope\'s <eventlog> section to avoid using the\n-    # same logging for zdctl as for the Zope appserver.  There still\n-    # needs to be a way to set a logfile for zdctl.\n-    logsectionname = None\n-\n-    def __init__(self):\n-        ZopeOptions.__init__(self)\n-        ZDCtlOptions.__init__(self)\n-        self.add("interactive", None, "i", "interactive", flag=1)\n-        self.add("default_to_interactive", "runner.default_to_interactive",\n-                 default=1)\n-\n-    def realize(self, *args, **kw):\n-        ZopeOptions.realize(self, *args, **kw)\n-        # Additional checking of user option; set uid and gid\n-        if self.user is not None:\n-            import pwd\n-            try:\n-                uid = int(self.user)\n-            except ValueError:\n-                try:\n-                    pwrec = pwd.getpwnam(self.user)\n-                except KeyError:\n-                    self.usage("username %r not found" % self.user)\n-                uid = pwrec[2]\n-            else:\n-                try:\n-                    pwrec = pwd.getpwuid(uid)\n-                except KeyError:\n-                    self.usage("uid %r not found" % self.user)\n-            gid = pwrec[3]\n-            self.uid = uid\n-            self.gid = gid\n-\n-        config = self.configroot\n-        self.directory = config.instancehome\n-        self.clienthome = config.clienthome\n-        if self.program:\n-            if isinstance(self.program, basestring):\n-                self.program = [self.program]\n-        elif config.runner and config.runner.program:\n-            self.program = config.runner.program\n-        else:\n-            self.program = [os.path.join(self.directory, "bin", "runzope")]\n-        if self.sockname:\n-            # set by command line option\n-            pass\n-        elif config.runner and config.runner.socket_name:\n-            self.sockname = config.runner.socket_name\n-        else:\n-            self.sockname = os.path.join(self.clienthome, "zopectlsock")\n-        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n-        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n-                                  "zdrun.py")\n-\n-        self.exitcodes = [0, 2]\n-\n-    def load_schema(self):\n-        if self.schema is None:\n-            # Load schema\n-            if self.schemadir is None:\n-                self.schemadir = os.path.dirname(__file__)\n-            self.schemafile = os.path.join(self.schemadir, self.schemafile)\n-            self._conditional_load()\n-\n-    def _conditional_load(self):\n-        loader = SchemaLoader()\n-        # loadURL\n-        url = loader.normalizeURL(self.schemafile)\n-        resource = loader.openResource(url)\n-        try:\n-            # load / parseResource without caching\n-            parser = ConditionalSchemaParser(loader, resource.url)\n-            xml.sax.parse(resource.file, parser)\n-            self.schema = parser._schema\n-        finally:\n-            resource.close()\n-\n-\n-class ZopeCmd(ZDCmd):\n-\n-    _exitstatus = 0\n-\n-    def _get_override(self, opt, name, svalue=None, flag=0):\n-        # Suppress the config file, and pass all configuration via the\n-        # command line.  This avoids needing to specialize the zdrun\n-        # script.\n-        if name == "configfile":\n-            return []\n-        value = getattr(self.options, name)\n-        if value is None:\n-            return []\n-        if flag:\n-            if value:\n-                args = [opt]\n-            else:\n-                args = []\n-        else:\n-            if svalue is None:\n-                svalue = str(value)\n-            args = [opt, svalue]\n-        return args\n-\n-    def get_startup_cmd(self, python, more):\n-        cmdline = (\'%s -c "from Zope2 import configure;\'\n-                   \'configure(%r);\' %\n-                   (python, self.options.configfile)\n-                   )\n-        return cmdline + more + \'\\"\'\n-\n-    def do_debug(self, arg):\n-        cmdline = self.get_startup_cmd(self.options.python + \' -i\',\n-                                       \'import Zope2; app=Zope2.app()\')\n-        print(\'Starting debugger (the name "app" is bound to the top-level \'\n-              \'Zope object)\')\n-        os.system(cmdline)\n-\n-    def do_foreground(self, arg):\n-        program = self.options.program\n-        local_additions = []\n-        if not program.count(\'-C\'):\n-            local_additions += [\'-C\', self.options.configfile]\n-        if not program.count(\'-X\'):\n-            local_additions += [\'-X\']\n-        if not program.count(\'debug-mode=on\'):\n-            local_additions += [\'debug-mode=on\']\n-        program[1:1] = local_additions\n-        command = quote_command(program)\n-        try:\n-            return os.system(command)\n-        except KeyboardInterrupt:\n-            pass\n-        finally:\n-            for addition in local_additions:\n-                program.remove(addition)\n-\n-    def help_debug(self):\n-        print("debug -- run the Zope debugger to inspect your database")\n-        print("         manually using a Python interactive shell")\n-\n-    def __getattr__(self, name):\n-        """\n-        Getter to check if an unknown command is implement by an entry point.\n-        """\n-        if not name.startswith("do_"):\n-            raise AttributeError(name)\n-        data = list(pkg_resources.iter_entry_points(\n-            "zopectl.command", name=name[3:]))\n-        if not data:\n-            raise AttributeError(name)\n-        if len(data) > 1:\n-            sys.stderr.write(\n-                "Warning: multiple entry points found for command")\n-            return\n-        func = data[0].load()\n-        if not callable(func):\n-            sys.stderr.write("Error: %s is not a callable method" % name)\n-            return\n-\n-        return self.run_entrypoint(data[0])\n-\n-    def run_entrypoint(self, entry_point):\n-        def go(arg):\n-            # If the command line was something like\n-            # """bin/instance run "one two" three"""\n-            # cmd.parseline will have converted it so\n-            # that arg == \'one two three\'. This is going to\n-            # foul up any quoted command with embedded spaces.\n-            # So we have to return to self.options.args,\n-            # which is a tuple of command line args,\n-            # throwing away the "run" command at the beginning.\n-            #\n-            # Further complications: if self.options.args has come\n-            # via subprocess, it may look like\n-            # [\'run "arg 1" "arg2"\'] rather than [\'run\',\'arg 1\',\'arg2\'].\n-            # If that\'s the case, we\'ll use csv to do the parsing\n-            # so that we can split on spaces while respecting quotes.\n-            tup = self.options.args\n-            if len(tup) == 1:\n-                tup = csv.reader(tup, delimiter=\' \').next()\n-\n-            # Remove -c and add command name as sys.argv[0]\n-            cmd = [\'import sys\',\n-                   \'sys.argv.pop()\',\n-                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n-                   ]\n-            if len(tup) > 1:\n-                argv = tup[1:]\n-                for a in argv:\n-                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n-            cmd.extend([\n-                \'import pkg_resources\',\n-                \'import Zope2\',\n-                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n-                % entry_point,\n-                \'app=Zope2.app()\',\n-                \'func(app, sys.argv[1:])\',\n-            ])\n-            cmdline = self.get_startup_cmd(\n-                self.options.python, \' ; \'.join(cmd))\n-            self._exitstatus = os.system(cmdline)\n-        return go\n-\n-    def do_run(self, args):\n-        if not args:\n-            print("usage: run <script> [args]")\n-            return\n-        # replace sys.argv\n-        script = args.split(\' \')[0]\n-        cmd = (\n-            "import sys; sys.argv[:]=%r.split(\' \');"\n-            "import Zope2; app=Zope2.app(); "\n-            "f = open(%r, \'r\'); src = f.read(); f.close(); "\n-            "exec(src)"\n-        ) % (args, script)\n-        cmdline = self.get_startup_cmd(self.options.python, cmd)\n-        self._exitstatus = os.system(cmdline)\n-\n-    def help_run(self):\n-        print("run <script> [args] -- run a Python script with the Zope ")\n-        print("                       environment set up. The script can use ")\n-        print("                       the name \'app\' access the top-level ")\n-        print("                       Zope object")\n-\n-    def do_adduser(self, arg):\n-        try:\n-            name, password = arg.split()\n-        except Exception:\n-            print("usage: adduser <name> <password>")\n-            return\n-        cmdline = self.get_startup_cmd(\n-            self.options.python,\n-            \'import Zope2; \'\n-            \'app = Zope2.app(); \'\n-            \'result = app.acl_users._doAddUser(\'\n-            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n-            \'import transaction; \'\n-            \'transaction.commit(); \'\n-            \'print(\\\'Created user:\\\', result)\'\n-        ) % (name, password)\n-        os.system(cmdline)\n-\n-    def help_adduser(self):\n-        print("adduser <name> <password> -- add a Zope management user")\n-\n-\n-def main(args=None):\n-    # This is exactly like zdctl.main(), but uses ZopeCtlOptions and\n-    # ZopeCmd instead of ZDCtlOptions and ZDCmd, so the default values\n-    # are handled properly for Zope.\n-    options = ZopeCtlOptions()\n-    options.realize(args)\n-    c = ZopeCmd(options)\n-    if options.args:\n-        c.onecmd(" ".join(options.args))\n-    else:\n-        options.interactive = 1\n-    if options.interactive:\n-        try:\n-            import readline  # NOQA\n-        except ImportError:\n-            pass\n-        print("program:" + " ".join(options.program))\n-        c.do_status()\n-        c.cmdloop()\n-    else:\n-        return min(c._exitstatus, 1)\n-\n-\n-def _ignoreSIGCHLD(*unused):\n-    while 1:\n-        try:\n-            os.waitpid(-1, os.WNOHANG)\n-        except OSError:\n-            break\n-\n-\n-def run():\n-    # we don\'t care to be notified of our childrens\' exit statuses.\n-    # this prevents zombie processes from cluttering up the process\n-    # table when zopectl start/stop is used interactively.\n-    # DM 2004-11-26: from the Linux "execve(2)" manual page:\n-    #     Any signals set to be caught by the calling process are reset\n-    #     to their default behaviour.\n-    #     The SIGCHLD signal (when set to SIG_IGN) may or may not be reset\n-    #     to SIG_DFL.\n-    #   If it is not reset, \'os.wait[pid]\' can non-deterministically fail.\n-    #   Thus, use a way such that "SIGCHLD" is definitely reset in children.\n-    # signal.signal(signal.SIGCHLD, signal.SIG_IGN)\n-    if not WIN and os.uname()[0] != \'Darwin\':\n-        # On Windows the os.uname method does not exist.\n-        # On Mac OS X, setting up a signal handler causes waitpid to\n-        # raise EINTR, which is not preventable via the Python signal\n-        # handler API and can\'t be dealt with properly as we can\'t pass\n-        # the SA_RESTART to the signal API. Since Mac OS X doesn\'t\n-        # appear to clutter up the process table with zombies if\n-        # SIGCHILD is unset, just don\'t bother registering a SIGCHILD\n-        # signal handler at all.\n-        signal.signal(signal.SIGCHLD, _ignoreSIGCHLD)\n-    exitstatus = main()\n-    sys.exit(exitstatus)\n-\n-\n-if __name__ == \'__main__\':\n-    run()\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-08T07:52:31+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/e0f49ea0f213e93e06d3b60ce56652a70d39c10f

Copy zope.conf schema tests from ZServer

Files changed:
A src/plone/recipe/zope2instance/tests/test_wsgischema.py

b'diff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nnew file mode 100644\nindex 0000000..1b9fe72\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -0,0 +1,121 @@\n+##############################################################################\n+#\n+# Copyright (c) 2003 Zope Foundation and Contributors.\n+# All Rights Reserved.\n+#\n+# This software is subject to the provisions of the Zope Public License,\n+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n+# FOR A PARTICULAR PURPOSE.\n+#\n+##############################################################################\n+\n+import os\n+import cStringIO\n+import tempfile\n+import unittest\n+\n+import ZConfig\n+\n+from plone.recipe.zope2instance.ctl import ZopeCtlOptions\n+\n+_SCHEMA = {}\n+TEMPNAME = tempfile.mktemp()\n+TEMPVAR = os.path.join(TEMPNAME, "var")\n+\n+\n+def getSchema(schemafile):\n+    global _SCHEMA\n+    if schemafile not in _SCHEMA:\n+        opts = ZopeCtlOptions()\n+        opts.load_schema()\n+        _SCHEMA[schemafile] = opts.schema\n+    return _SCHEMA[schemafile]\n+\n+\n+class StartupTestCase(unittest.TestCase):\n+\n+    @property\n+    def schema(self):\n+        return getSchema()\n+\n+    def load_config_text(self, text):\n+        # We have to create a directory of our own since the existence\n+        # of the directory is checked.  This handles this in a\n+        # platform-independent way.\n+        schema = self.schema\n+        sio = cStringIO.StringIO(\n+            text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n+        os.mkdir(TEMPNAME)\n+        os.mkdir(TEMPVAR)\n+        try:\n+            conf, handler = ZConfig.loadConfigFile(schema, sio)\n+        finally:\n+            os.rmdir(TEMPVAR)\n+            os.rmdir(TEMPNAME)\n+        self.assertEqual(conf.instancehome, TEMPNAME)\n+        return conf, handler\n+\n+    def test_load_config_template(self):\n+        import Zope2.utilities\n+        base = os.path.dirname(Zope2.utilities.__file__)\n+        fn = os.path.join(base, "skel", "etc", "wsgi.conf.in")\n+        f = open(fn)\n+        text = f.read()\n+        f.close()\n+        self.load_config_text(text)\n+\n+    def test_environment(self):\n+        conf, handler = self.load_config_text("""\\\n+            # instancehome is here since it\'s required\n+            instancehome <<INSTANCE_HOME>>\n+            <environment>\n+              FEARFACTORY rocks\n+              NSYNC doesnt\n+            </environment>\n+            """)\n+        items = conf.environment.items()\n+        items.sort()\n+        self.assertEqual(\n+            items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n+\n+    def test_zodb_db(self):\n+        conf, handler = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            <zodb_db main>\n+              <filestorage>\n+               path <<INSTANCE_HOME>>/var/Data.fs\n+               </filestorage>\n+                mount-point /\n+                cache-size 5000\n+                pool-size 7\n+            </zodb_db>\n+            """)\n+        self.assertEqual(conf.databases[0].config.cache_size, 5000)\n+\n+    def test_max_conflict_retries_default(self):\n+        conf, handler = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            """)\n+        self.assertEqual(conf.max_conflict_retries, 3)\n+\n+    def test_max_conflict_retries_explicit(self):\n+        conf, handler = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            max-conflict-retries 15\n+            """)\n+        self.assertEqual(conf.max_conflict_retries, 15)\n+\n+    def test_default_zpublisher_encoding(self):\n+        conf, dummy = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            """)\n+        self.assertEqual(conf.default_zpublisher_encoding, \'utf-8\')\n+\n+        conf, dummy = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            default-zpublisher-encoding iso-8859-15\n+            """)\n+        self.assertEqual(conf.default_zpublisher_encoding, \'iso-8859-15\')\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-08T09:03:11+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/5b5744188c224624498806954cc0c11c249d81a2

Fix test

Files changed:
M src/plone/recipe/zope2instance/tests/test_wsgischema.py

b'diff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nindex 1b9fe72..cef8fdf 100644\n--- a/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -12,27 +12,30 @@\n #\n ##############################################################################\n \n+from plone.recipe.zope2instance.ctl import ZopeCtlOptions\n import os\n-import cStringIO\n import tempfile\n import unittest\n-\n import ZConfig\n \n-from plone.recipe.zope2instance.ctl import ZopeCtlOptions\n \n-_SCHEMA = {}\n+try:\n+    from StringIO import StringIO\n+except ImportError:\n+    from io import StringIO\n+\n+_SCHEMA = None\n TEMPNAME = tempfile.mktemp()\n TEMPVAR = os.path.join(TEMPNAME, "var")\n \n \n-def getSchema(schemafile):\n+def getSchema():\n     global _SCHEMA\n-    if schemafile not in _SCHEMA:\n+    if not _SCHEMA:\n         opts = ZopeCtlOptions()\n         opts.load_schema()\n-        _SCHEMA[schemafile] = opts.schema\n-    return _SCHEMA[schemafile]\n+        _SCHEMA = opts.schema\n+    return _SCHEMA\n \n \n class StartupTestCase(unittest.TestCase):\n@@ -46,7 +49,7 @@ def load_config_text(self, text):\n         # of the directory is checked.  This handles this in a\n         # platform-independent way.\n         schema = self.schema\n-        sio = cStringIO.StringIO(\n+        sio = StringIO(\n             text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n         os.mkdir(TEMPNAME)\n         os.mkdir(TEMPVAR)\n@@ -76,7 +79,7 @@ def test_environment(self):\n               NSYNC doesnt\n             </environment>\n             """)\n-        items = conf.environment.items()\n+        items = list(conf.environment.items())\n         items.sort()\n         self.assertEqual(\n             items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-08T11:31:56+09:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/cff33b5c9b69b043b2c57dbb5efbdd3ece4cba0d

Merge pull request #52 from plone/wsgi-instance-script

Build a bin/instance script that works with Zope 4 + WSGI

Files changed:
A src/plone/recipe/zope2instance/tests/test_wsgischema.py
A src/plone/recipe/zope2instance/wsgischema.xml
M CHANGES.rst
M README.rst
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4cfe818..6c5e38c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,12 +1,15 @@\n Changelog\n =========\n \n-5.0.2 (unreleased)\n+6.0.0 (unreleased)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+- For WSGI-based instances, generate a zdaemon-based instance script\n+  that works similarly to ZServer-based instances, instead of a\n+  script that only handles running the WSGI server.\n+  [davisagli]\n \n New features:\n \n@@ -57,6 +60,7 @@ Bug fixes:\n \n - Python 3 compatibility with sixer\n   [ale-rt]\n+\n - Fix import. zopectl moved to ZServer\n   [pbauer]\n \ndiff --git a/README.rst b/README.rst\nindex 0e75a72..313adcc 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -50,7 +50,7 @@ ip-address\n   implementations will listen for requests. If this is unset, Zope will listen\n   on all IP addresses supported by the machine. This directive can be\n   overridden on a per-server basis in the servers section. Defaults to not\n-  setting an ip-address.\n+  setting an ip-address. Used for ZServer only, not WSGI.\n \n zodb-cache-size\n   Set the ZODB cache size, i.e. the number of objects which the ZODB cache\n@@ -58,7 +58,7 @@ zodb-cache-size\n \n zserver-threads\n   Specify the number of threads that Zope\'s ZServer web server will use to\n-  service requests. The recipes default is 2.\n+  service requests. The recipes default is 2. Used for ZServer only, not WSGI.\n \n environment-vars\n   Define arbitrary key-value pairs for use as environment variables during\n@@ -221,25 +221,28 @@ log levels or configure `mailinglogger`.\n event-log\n   The filename of the event log. Defaults to ${buildout:directory}/var/log/${partname}.log\n   Setting this value to \'disable\' will make the <eventlog> section to be omitted,\n-  disabling logging events by default to a .log file.\n+  disabling logging events by default to a .log file. Used for ZServer only, not WSGI.\n \n event-log-level\n   Set the level of the console output for the event log. Level may be any of\n   CRITICAL, ERROR, WARN, INFO, DEBUG, or ALL. Defaults to INFO.\n+  Used for ZServer only, not WSGI.\n \n event-log-max-size\n   Maximum size of event log file. Enables log rotation.\n+  Used for ZServer only, not WSGI.\n \n event-log-old-files\n   Number of previous log files to retain when log rotation is enabled.\n-  Defaults to 1.\n+  Defaults to 1. Used for ZServer only, not WSGI.\n \n event-log-custom\n   A custom section for the eventlog, to be able to use another\n-  event logger than `logfile`\n+  event logger than `logfile`. Used for ZServer only, not WSGI.\n \n mailinglogger\n-  A mailinglogger section added into the event log. Example snippet::\n+  A mailinglogger section added into the event log.\n+  Used for ZServer only, not WSGI. Example snippet::\n \n     <mailing-logger>\n       level error\n@@ -255,22 +258,23 @@ mailinglogger\n z2-log\n   The filename for the Z2 access log. Defaults to var/log/${partname}-Z2.log.\n   Setting this value to \'disable\' will make the <logger access> section to be omitted,\n-  disabling logging access events to a .log file\n+  disabling logging access events to a .log file. Used for ZServer only, not WSGI.\n \n z2-log-level\n   Set the log level for the access log. Level may be any of CRITICAL, ERROR,\n-  WARN, INFO, DEBUG, or ALL. Defaults to WARN.\n+  WARN, INFO, DEBUG, or ALL. Defaults to WARN. Used for ZServer only, not WSGI.\n \n access-log-max-size\n   Maximum size of access log file. Enables log rotation.\n+  Used for ZServer only, not WSGI.\n \n access-log-old-files\n   Number of previous log files to retain when log rotation is enabled.\n-  Defaults to 1.\n+  Defaults to 1. Used for ZServer only, not WSGI.\n \n access-log-custom\n   Like `event-log-custom`, a custom section for the access logger, to be able\n-  to use another event logger than `logfile`.\n+  to use another event logger than `logfile`. Used for ZServer only, not WSGI.\n \n Load non-setuptools compatible Python libraries\n -----------------------------------------------\n@@ -386,6 +390,7 @@ enable-product-installation\n \n ftp-address\n   Give a port for the FTP server. This enables the FTP server.\n+  Used for ZServer only, not WSGI.\n \n http-force-connection-close\n   Set to `on` to enforce Zope to set ``Connection: close header``.\n@@ -398,6 +403,7 @@ http-fast-listen\n \n icp-address\n   Give a port for the ICP server. This enables the ICP server.\n+  Used for ZServer only, not WSGI.\n \n import-directory\n   Used to configure the import directory for instance.\n@@ -439,10 +445,12 @@ var\n   Defaults to ${buildout:directory}/var.\n \n webdav-address\n-  Give a port for the WebDAV server.  This enables the WebDAV server\n+  Give a port for the WebDAV server.  This enables the WebDAV server.\n+  Used for ZServer only, not WSGI.\n \n webdav-force-connection-close\n-  Valid options are off and on. Defaults to off\n+  Valid options are off and on. Defaults to off.\n+  Used for ZServer only, not WSGI.\n \n zlib-storage\n   Adds support for file compression on a file storage database. The\n@@ -496,7 +504,7 @@ zopectl-umask\n http-header-max-length\n   Manually set the maximum size of received HTTP header being processed by Zope.\n   The request is discarded and considered as a DoS attack if the header size exceeds\n-  this limit. Default: 8192\n+  this limit. Default: 8192. Used for ZServer only, not WSGI.\n \n   Example::\n \ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex de0af72..5ad92ec 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -28,15 +28,26 @@\n """\n \n from pkg_resources import iter_entry_points\n-from ZServer.Zope2.Startup import zopectl\n-\n+from ZConfig.loader import SchemaLoader\n+from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n+from zdaemon.zdoptions import ZDOptions\n+from Zope2.Startup.options import ConditionalSchemaParser\n import csv\n import os\n import os.path\n+import pkg_resources\n import sys\n+import xml.sax\n+import zdaemon\n+\n+if sys.version_info > (3, ):\n+    basestring = str\n \n+WINDOWS = False\n+if sys.platform[:3].lower() == "win":\n+    WINDOWS = True\n \n-if zopectl.WIN:\n+if WINDOWS:\n     import traceback\n     from pkg_resources import resource_filename\n     import pywintypes\n@@ -50,10 +61,124 @@\n         \'ERROR: You are not member of the "Administrators" group, \'\n         \'or you have not run the shell as Administrator.\')\n \n+try:\n+    import ZServer  # noqa\n+    HAS_ZSERVER = True\n+except ImportError:\n+    HAS_ZSERVER = False\n+\n+if HAS_ZSERVER:\n+    from ZServer.Zope2.Startup.options import ZopeOptions\n+else:\n+    class ZopeOptions(ZDOptions):\n+        schemadir = os.path.dirname(os.path.abspath(__file__))\n+        schemafile = \'wsgischema.xml\'\n \n-class AdjustedZopeCmd(zopectl.ZopeCmd):\n \n-    if zopectl.WIN:\n+class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n+    # Zope controller options.\n+    #\n+    # After initialization, this should look very much like a\n+    # zdaemon.zdctl.ZDCtlOptions instance.  Many of the attributes are\n+    # initialized from different sources, however.\n+\n+    # Provide help message, without indentation.\n+    __doc__ = __doc__\n+\n+    positional_args_allowed = True\n+\n+    # this indicates that no explicit program has been provided.\n+    # the command line option can set this.\n+    program = None\n+\n+    # this indicates that no explicit socket name has been provided.\n+    # the command line option can set this.\n+    sockname = None\n+\n+    # XXX Suppress using Zope\'s <eventlog> section to avoid using the\n+    # same logging for zdctl as for the Zope appserver.  There still\n+    # needs to be a way to set a logfile for zdctl.\n+    logsectionname = None\n+\n+    def __init__(self):\n+        ZopeOptions.__init__(self)\n+        ZDCtlOptions.__init__(self)\n+        self.add("interactive", None, "i", "interactive", flag=1)\n+        self.add("default_to_interactive", "runner.default_to_interactive",\n+                 default=1)\n+\n+    def realize(self, *args, **kw):\n+        ZopeOptions.realize(self, *args, **kw)\n+        # Additional checking of user option; set uid and gid\n+        if self.user is not None:\n+            import pwd\n+            try:\n+                uid = int(self.user)\n+            except ValueError:\n+                try:\n+                    pwrec = pwd.getpwnam(self.user)\n+                except KeyError:\n+                    self.usage("username %r not found" % self.user)\n+                uid = pwrec[2]\n+            else:\n+                try:\n+                    pwrec = pwd.getpwuid(uid)\n+                except KeyError:\n+                    self.usage("uid %r not found" % self.user)\n+            gid = pwrec[3]\n+            self.uid = uid\n+            self.gid = gid\n+\n+        config = self.configroot\n+        self.directory = config.instancehome\n+        self.clienthome = config.clienthome\n+        if self.program:\n+            if isinstance(self.program, basestring):\n+                self.program = [self.program]\n+        elif config.runner and config.runner.program:\n+            self.program = config.runner.program\n+        else:\n+            self.program = [os.path.join(self.directory, "bin", "runzope")]\n+        if self.sockname:\n+            # set by command line option\n+            pass\n+        elif config.runner and config.runner.socket_name:\n+            self.sockname = config.runner.socket_name\n+        else:\n+            self.sockname = os.path.join(self.clienthome, "zopectlsock")\n+        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n+        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n+                                  "zdrun.py")\n+\n+        self.exitcodes = [0, 2]\n+\n+    def load_schema(self):\n+        if self.schema is None:\n+            # Load schema\n+            if self.schemadir is None:\n+                self.schemadir = os.path.dirname(__file__)\n+            self.schemafile = os.path.join(self.schemadir, self.schemafile)\n+            self._conditional_load()\n+\n+    def _conditional_load(self):\n+        loader = SchemaLoader()\n+        # loadURL\n+        url = loader.normalizeURL(self.schemafile)\n+        resource = loader.openResource(url)\n+        try:\n+            # load / parseResource without caching\n+            parser = ConditionalSchemaParser(loader, resource.url)\n+            xml.sax.parse(resource.file, parser)\n+            self.schema = parser._schema\n+        finally:\n+            resource.close()\n+\n+\n+class ZopeCmd(ZDCmd):\n+\n+    _exitstatus = 0\n+\n+    if WINDOWS:\n \n         # printable representations of the Windows service states\n         service_state_map = {\n@@ -287,7 +412,7 @@ def do_remove(self, arg):\n                 print(\'ERROR: Zope is not installed as a Windows service.\')\n                 return\n             elif status is not win32service.SERVICE_STOPPED:\n-                print (\n+                print(\n                     \'ERROR: Please stop the Windows service before \'\n                     \'removing it.\'\n                 )\n@@ -316,8 +441,8 @@ def get_status(self):\n             - Set "self.zd_up" to 1 or 0 (unclear what this is used for)\n \n             """\n-            zopectl.ZopeCmd.get_status(self)\n-            # override value set by zopectl.ZopeCmd.get_status()\n+            ZDCmd.get_status(self)\n+            # override value set by ZDCmd.get_status()\n             # (always -1 or 0)\n             self.zd_pid = self._get_pid_from_pidfile()\n \n@@ -354,9 +479,29 @@ def help_status(self):\n         def help_EOF(self):\n             print(\'To quit, type CTRL+Z or use the quit command.\')\n \n-    # end of "if zopectl.WIN"\n+    # end of "if WINDOWS"\n     else:\n \n+        def _get_override(self, opt, name, svalue=None, flag=0):\n+            # Suppress the config file, and pass all configuration via the\n+            # command line.  This avoids needing to specialize the zdrun\n+            # script.\n+            if name == "configfile":\n+                return []\n+            value = getattr(self.options, name)\n+            if value is None:\n+                return []\n+            if flag:\n+                if value:\n+                    args = [opt]\n+                else:\n+                    args = []\n+            else:\n+                if svalue is None:\n+                    svalue = str(value)\n+                args = [opt, svalue]\n+            return args\n+\n         def do_start(self, arg):\n             self.get_status()\n             if not self.zd_up:\n@@ -405,6 +550,69 @@ def cond(n=0):\n                 \'daemon process started, pid=%(zd_pid)d\'\n             )\n \n+    def __getattr__(self, name):\n+        """\n+        Getter to check if an unknown command is implement by an entry point.\n+        """\n+        if not name.startswith("do_"):\n+            raise AttributeError(name)\n+        data = list(pkg_resources.iter_entry_points(\n+            "zopectl.command", name=name[3:]))\n+        if not data:\n+            raise AttributeError(name)\n+        if len(data) > 1:\n+            sys.stderr.write(\n+                "Warning: multiple entry points found for command")\n+            return\n+        func = data[0].load()\n+        if not callable(func):\n+            sys.stderr.write("Error: %s is not a callable method" % name)\n+            return\n+\n+        return self.run_entrypoint(data[0])\n+\n+    def run_entrypoint(self, entry_point):\n+        def go(arg):\n+            # If the command line was something like\n+            # """bin/instance run "one two" three"""\n+            # cmd.parseline will have converted it so\n+            # that arg == \'one two three\'. This is going to\n+            # foul up any quoted command with embedded spaces.\n+            # So we have to return to self.options.args,\n+            # which is a tuple of command line args,\n+            # throwing away the "run" command at the beginning.\n+            #\n+            # Further complications: if self.options.args has come\n+            # via subprocess, it may look like\n+            # [\'run "arg 1" "arg2"\'] rather than [\'run\',\'arg 1\',\'arg2\'].\n+            # If that\'s the case, we\'ll use csv to do the parsing\n+            # so that we can split on spaces while respecting quotes.\n+            tup = self.options.args\n+            if len(tup) == 1:\n+                tup = csv.reader(tup, delimiter=\' \').next()\n+\n+            # Remove -c and add command name as sys.argv[0]\n+            cmd = [\'import sys\',\n+                   \'sys.argv.pop()\',\n+                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n+                   ]\n+            if len(tup) > 1:\n+                argv = tup[1:]\n+                for a in argv:\n+                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n+            cmd.extend([\n+                \'import pkg_resources\',\n+                \'import Zope2\',\n+                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n+                % entry_point,\n+                \'app=Zope2.app()\',\n+                \'func(app, sys.argv[1:])\',\n+            ])\n+            cmdline = self.get_startup_cmd(\n+                self.options.python, \' ; \'.join(cmd))\n+            self._exitstatus = os.system(cmdline)\n+        return go\n+\n     def environment(self):\n         configroot = self.options.configroot\n         env = dict(os.environ)\n@@ -422,14 +630,24 @@ def get_startup_cmd(self, python, more, pyflags=""):\n         # will act as escapes.  Use r\'\' instead.\n         # Also, don\'t forget that \'python\'\n         # may have spaces and needs to be quoted.\n+        if HAS_ZSERVER:\n+            cmd = (\n+                "from Zope2 import configure; "\n+                "configure(r\'%s\'); "\n+                "import Zope2; app=Zope2.app(); "\n+            )\n+        else:\n+            cmd = (\n+                "from Zope2.Startup.run import configure_wsgi; "\n+                "configure_wsgi(r\'%s\'); "\n+                "import Zope2; app=Zope2.app(); "\n+            )\n         cmdline = (\n-            \'"%s" %s "%s" %s -c "from Zope2 import configure; \'\n-            \'configure(r\\\'%s\\\'); \'\n-            \'import Zope2; app=Zope2.app(); \' % (\n+            \'"%s" %s "%s" %s -c "%s\' % (\n                 python, pyflags,\n                 self.options.interpreter,\n                 pyflags,\n-                self.options.configfile\n+                cmd % self.options.configfile,\n             )\n         )\n \n@@ -468,7 +686,7 @@ def get_startup_cmd(self, python, more, pyflags=""):\n             cmdline += login_cmdline\n \n         cmdline = cmdline + more + \'\\"\'\n-        if zopectl.WIN:\n+        if WINDOWS:\n             # entire command line must be quoted\n             # as well as the components\n             return \'"%s"\' % cmdline\n@@ -511,23 +729,24 @@ def do_run(self, arg):\n             print("usage: run <script> [args]")\n             return\n \n-        # If we pass the script filename as a win32 backslashed path\n-        # using a \'\'-style string, the backslashes will act as\n-        # escapes.  Use r\'\' instead.\n-        #\n         # Remove -c and add script as sys.argv[0]\n         script = tup[0]\n-        cmd = \'import sys; sys.argv.pop(); sys.argv.append(r\\\'%s\\\'); \' % script\n+        cmd = \'import sys; sys.argv.pop(); sys.argv.append(%r); \' % script\n         if len(tup) > 1:\n             argv = tup[1:]\n             cmd += \'[sys.argv.append(x) for x in %s]; \' % argv\n-        cmd += \'execfile(r\\\'%s\\\')\' % script\n+        cmd += (\n+            "f = open(%r); src = f.read(); f.close(); exec(src)"\n+        ) % script\n         cmdline = self.get_startup_cmd(self.options.python, cmd)\n \n         self._exitstatus = os.system(cmdline)\n \n     def help_run(self):\n-        zopectl.ZopeCmd.help_run(self)\n+        print("run <script> [args] -- run a Python script with the Zope ")\n+        print("                       environment set up. The script can use ")\n+        print("                       the name \'app\' access the top-level ")\n+        print("                       Zope object")\n         self.help_startup_command()\n \n     def do_console(self, arg):\n@@ -550,12 +769,13 @@ def do_debug(self, arg):\n             interactive_startup,\n             pyflags=\'-i\',\n         )\n-        print (\'Starting debugger (the name "app" is bound to the top-level \'\n-               \'Zope object)\')\n+        print(\'Starting debugger (the name "app" is bound to the top-level \'\n+              \'Zope object)\')\n         os.system(cmdline)\n \n     def help_debug(self):\n-        zopectl.ZopeCmd.help_debug(self)\n+        print("debug -- run the Zope debugger to inspect your database")\n+        print("         manually using a Python interactive shell")\n         self.help_startup_command()\n \n     def do_foreground(self, arg, debug=True):\n@@ -574,13 +794,13 @@ def do_foreground(self, arg, debug=True):\n         local_additions = []\n \n         if debug:\n-            if not program.count(\'-X\'):\n+            if HAS_ZSERVER and not program.count(\'-X\'):\n                 local_additions += [\'-X\']\n             if not program.count(\'debug-mode=on\'):\n                 local_additions += [\'debug-mode=on\']\n             program.extend(local_additions)\n \n-        if zopectl.WIN:\n+        if WINDOWS:\n             # The outer quotes were causing\n             # "WindowsError: [Error 87] The parameter is incorrect"\n             # command = zopectl.quote_command(program)\n@@ -588,7 +808,7 @@ def do_foreground(self, arg, debug=True):\n         else:\n             command = program\n \n-        if debug or zopectl.WIN:\n+        if debug or WINDOWS:\n             try:\n                 self._exitstatus = subprocess.call(command, env=env)\n             except KeyboardInterrupt:\n@@ -609,30 +829,59 @@ def do_test(self, arg):\n               "bin/test -s <my.package>")\n         return\n \n+    def do_adduser(self, arg):\n+        try:\n+            name, password = arg.split()\n+        except Exception:\n+            print("usage: adduser <name> <password>")\n+            return\n+        cmdline = self.get_startup_cmd(\n+            self.options.python,\n+            \'import Zope2; \'\n+            \'app = Zope2.app(); \'\n+            \'result = app.acl_users._doAddUser(\'\n+            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n+            \'import transaction; \'\n+            \'transaction.commit(); \'\n+            \'print(\\\'Created user:\\\', result)\'\n+        ) % (name, password)\n+        os.system(cmdline)\n+\n+    def help_adduser(self):\n+        print("adduser <name> <password> -- add a Zope management user")\n+\n \n def main(args=None):\n     """Customized entry point for launching Zope without forking other processes\n     """\n \n-    options = zopectl.ZopeCtlOptions()\n+    options = ZopeCtlOptions()\n     options.add(name="no_request", short="R", long="no-request", flag=1)\n     options.add(name="no_login", short="L", long="no-login", flag=1)\n     options.add(name="object_path", short="O:", long="object-path=")\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n-    # Change the program to avoid warning messages\n-    startup = os.path.dirname(zopectl.__file__)\n-\n+    # Run the right command depending on whether we have ZServer\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    script = os.path.join(startup, \'run.py\')\n-    options.program = [\n-        options.python, options.interpreter, script, \'-C\', options.configfile]\n+    if HAS_ZSERVER:\n+        from ZServer.Zope2.Startup import run\n+        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n+        options.program = [\n+            options.python, options.interpreter, script, \'-C\',\n+            options.configfile\n+        ]\n+    else:\n+        from Zope2.Startup import serve\n+        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n+        options.program = [\n+            options.python, options.interpreter, script, wsgi_ini\n+        ]\n \n-    # We use our own ZopeCmd set, that is derived from the original one.\n-    c = AdjustedZopeCmd(options)\n+    c = ZopeCmd(options)\n \n     # Mix in any additional commands supplied by other packages:\n     for ep in iter_entry_points(\'plone.recipe.zope2instance.ctl\'):\n@@ -662,7 +911,7 @@ def main(args=None):\n     # If no command was specified: enter interactive mode.\n \n     try:\n-        import readline\n+        import readline  # noqa\n     except ImportError:\n         pass\n     print(\'Program: {}\'.format(\' \'.join(options.program)))\ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 95c9f11..5fa080e 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -77,7 +77,7 @@ def __init__(self, buildout, name, options):\n             buildout[\'buildout\'].get(\'include-site-packages\', \'false\')\n             ) not in (\'off\', \'disable\', \'false\')\n \n-        self.wsgi = options.get(\'wsgi\') in (\'waitress\', \'on\')\n+        self.wsgi = options.get(\'wsgi\') in (\'on\', \'waitress\')\n         # Get Scripts\' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n@@ -96,8 +96,11 @@ def install(self, update=False):\n             make.make_instance(options.get(\'user\', None), location, version)\n \n         try:\n-            # Make a new zope.conf based on options in buildout.cfg\n+            # Make a new zope.conf and wsgi.ini\n+            # based on options in buildout.cfg\n             self.build_zope_conf()\n+            if self.wsgi:\n+                self.build_wsgi_ini()\n \n             # Install extra scripts\n             installed.extend(self.install_scripts())\n@@ -589,11 +592,19 @@ def is_rs_option(name):\n \n         zope_conf = \'\\n\'.join([l for l in zope_conf.splitlines() if l.rstrip()])\n         zope_conf_path = os.path.join(location, \'etc\', \'zope.conf\')\n-        try:\n-            fd = open(zope_conf_path, \'w\')\n-            fd.write(zope_conf)\n-        finally:\n-            fd.close()\n+        with open(zope_conf_path, \'w\') as f:\n+            f.write(zope_conf)\n+\n+    def build_wsgi_ini(self):\n+        options = self.options\n+        wsgi_ini_path = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n+        options = {\n+            \'location\': options[\'location\'],\n+            \'http_address\': options.get(\'http-address\', \'8080\'),\n+        }\n+        wsgi_ini = wsgi_ini_template % options\n+        with open(wsgi_ini_path, \'w\') as f:\n+            f.write(wsgi_ini)\n \n     def install_scripts(self):\n         options = self.options\n@@ -610,10 +621,7 @@ def install_scripts(self):\n         extra_paths = options.get(\'extra-paths\', \'\').split()\n         requirements, ws = self.egg.working_set([\'plone.recipe.zope2instance\'])\n         reqs = [self.options.get(\'control-script\', self.name)]\n-        if self.wsgi:\n-            reqs.extend([\'Zope2.Startup.serve\', \'main\'])\n-        else:\n-            reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n+        reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n         reqs = [tuple(reqs)]\n \n         if options.get(\'relative-paths\'):\n@@ -637,8 +645,7 @@ def __repr__(self):\n                 )\n \n         options[\'zope-conf\'] = zope_conf_path\n-        arguments = ["-C", zope_conf_path, \'-p\', program_path] \\\n-            if not self.wsgi else [\'ignored\']\n+        arguments = ["-C", zope_conf_path, \'-p\', program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n         script_arguments = (\'\\n        \' + repr(arguments) +\n@@ -647,10 +654,9 @@ def __repr__(self):\n         generated = self._install_scripts(\n             options[\'bin-directory\'], ws, reqs=reqs, extra_paths=extra_paths,\n             script_arguments=script_arguments)\n-        if not self.wsgi:\n-            generated.extend(self._install_scripts(\n-                os.path.join(options[\'location\'], \'bin\'), ws,\n-                interpreter=program_name, extra_paths=extra_paths))\n+        generated.extend(self._install_scripts(\n+            os.path.join(options[\'location\'], \'bin\'), ws,\n+            interpreter=program_name, extra_paths=extra_paths))\n         return generated\n \n     def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n@@ -673,10 +679,7 @@ def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n                 script_arguments=script_arguments,\n                 )\n         else:\n-            if self.wsgi:\n-                initialization = wsgi_initialization % options\n-            else:\n-                initialization = options[\'initialization\'] % options\n+            initialization = options[\'initialization\'] % options\n             return zc.buildout.easy_install.scripts(\n                 dest=dest,\n                 reqs=reqs,\n@@ -1122,8 +1125,44 @@ def render_file_storage(self, file_storage, blob_storage,\n </configure>\n """\n \n-wsgi_initialization = """\\\n-from Zope2.Startup.run import make_wsgi_app\n-wsgiapp = make_wsgi_app({}, \'%(zope-conf)s\')\n-def application(*args, **kwargs):return wsgiapp(*args, **kwargs)\n+wsgi_ini_template = """\\\n+[server:main]\n+use = egg:waitress#main\n+listen = 0.0.0.0:%(http_address)s\n+\n+[app:zope]\n+use = egg:Zope#main\n+zope_conf = %(location)s/etc/zope.conf\n+\n+[pipeline:main]\n+pipeline =\n+    egg:Zope#httpexceptions\n+    zope\n+\n+[loggers]\n+keys = root, plone\n+\n+[handlers]\n+keys = console\n+\n+[formatters]\n+keys = generic\n+\n+[logger_root]\n+level = INFO\n+handlers = console\n+\n+[logger_plone]\n+level = DEBUG\n+handlers =\n+qualname = plone\n+\n+[handler_console]\n+class = StreamHandler\n+args = (sys.stderr,)\n+level = NOTSET\n+formatter = generic\n+\n+[formatter_generic]\n+format = %%(asctime)s %%(levelname)-5.5s [%%(name)s:%%(lineno)s][%%(threadName)s] %%(message)s\n """\ndiff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nnew file mode 100644\nindex 0000000..cef8fdf\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -0,0 +1,124 @@\n+##############################################################################\n+#\n+# Copyright (c) 2003 Zope Foundation and Contributors.\n+# All Rights Reserved.\n+#\n+# This software is subject to the provisions of the Zope Public License,\n+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n+# FOR A PARTICULAR PURPOSE.\n+#\n+##############################################################################\n+\n+from plone.recipe.zope2instance.ctl import ZopeCtlOptions\n+import os\n+import tempfile\n+import unittest\n+import ZConfig\n+\n+\n+try:\n+    from StringIO import StringIO\n+except ImportError:\n+    from io import StringIO\n+\n+_SCHEMA = None\n+TEMPNAME = tempfile.mktemp()\n+TEMPVAR = os.path.join(TEMPNAME, "var")\n+\n+\n+def getSchema():\n+    global _SCHEMA\n+    if not _SCHEMA:\n+        opts = ZopeCtlOptions()\n+        opts.load_schema()\n+        _SCHEMA = opts.schema\n+    return _SCHEMA\n+\n+\n+class StartupTestCase(unittest.TestCase):\n+\n+    @property\n+    def schema(self):\n+        return getSchema()\n+\n+    def load_config_text(self, text):\n+        # We have to create a directory of our own since the existence\n+        # of the directory is checked.  This handles this in a\n+        # platform-independent way.\n+        schema = self.schema\n+        sio = StringIO(\n+            text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n+        os.mkdir(TEMPNAME)\n+        os.mkdir(TEMPVAR)\n+        try:\n+            conf, handler = ZConfig.loadConfigFile(schema, sio)\n+        finally:\n+            os.rmdir(TEMPVAR)\n+            os.rmdir(TEMPNAME)\n+        self.assertEqual(conf.instancehome, TEMPNAME)\n+        return conf, handler\n+\n+    def test_load_config_template(self):\n+        import Zope2.utilities\n+        base = os.path.dirname(Zope2.utilities.__file__)\n+        fn = os.path.join(base, "skel", "etc", "wsgi.conf.in")\n+        f = open(fn)\n+        text = f.read()\n+        f.close()\n+        self.load_config_text(text)\n+\n+    def test_environment(self):\n+        conf, handler = self.load_config_text("""\\\n+            # instancehome is here since it\'s required\n+            instancehome <<INSTANCE_HOME>>\n+            <environment>\n+              FEARFACTORY rocks\n+              NSYNC doesnt\n+            </environment>\n+            """)\n+        items = list(conf.environment.items())\n+        items.sort()\n+        self.assertEqual(\n+            items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n+\n+    def test_zodb_db(self):\n+        conf, handler = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            <zodb_db main>\n+              <filestorage>\n+               path <<INSTANCE_HOME>>/var/Data.fs\n+               </filestorage>\n+                mount-point /\n+                cache-size 5000\n+                pool-size 7\n+            </zodb_db>\n+            """)\n+        self.assertEqual(conf.databases[0].config.cache_size, 5000)\n+\n+    def test_max_conflict_retries_default(self):\n+        conf, handler = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            """)\n+        self.assertEqual(conf.max_conflict_retries, 3)\n+\n+    def test_max_conflict_retries_explicit(self):\n+        conf, handler = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            max-conflict-retries 15\n+            """)\n+        self.assertEqual(conf.max_conflict_retries, 15)\n+\n+    def test_default_zpublisher_encoding(self):\n+        conf, dummy = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            """)\n+        self.assertEqual(conf.default_zpublisher_encoding, \'utf-8\')\n+\n+        conf, dummy = self.load_config_text("""\\\n+            instancehome <<INSTANCE_HOME>>\n+            default-zpublisher-encoding iso-8859-15\n+            """)\n+        self.assertEqual(conf.default_zpublisher_encoding, \'iso-8859-15\')\ndiff --git a/src/plone/recipe/zope2instance/wsgischema.xml b/src/plone/recipe/zope2instance/wsgischema.xml\nnew file mode 100644\nindex 0000000..996394b\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/wsgischema.xml\n@@ -0,0 +1,467 @@\n+<schema prefix="Zope2.Startup.datatypes"\n+        datatype=".root_wsgi_config"\n+        handler="root_wsgi_handler">\n+\n+  <!-- type definitions -->\n+\n+  <import package="ZODB"/>\n+  <import package="tempstorage" condition="tempstorage"/>\n+\n+  <sectiontype name="environment"\n+               datatype=".environment"\n+               keytype="identifier">\n+    <description>\n+     A section which allows you to define simple key-value pairs which\n+     will be used as environment variable settings during startup.\n+    </description>\n+    <key name="+" attribute="environ">\n+      <description>\n+        Use any key/value pair, e.g. \'MY_PRODUCT_ENVVAR foo_bar\'\n+      </description>\n+    </key>\n+  </sectiontype>\n+\n+  <sectiontype name="zodb_db" datatype=".ZopeDatabase"\n+               implements="ZODB.database" extends="zodb">\n+\n+    <description>\n+      We need to specialize the database configuration section for Zope\n+      only by including a (required) mount-point argument, which\n+      is a string.  A Zope ZODB database can have multiple mount points,\n+      so this is a multikey.\n+    </description>\n+    <multikey name="mount-point" required="yes" attribute="mount_points"\n+              datatype=".mount_point">\n+      <description>\n+       The mount point is a slash-separated path to a \n+       \'Products.ZODBMountPoint.Mount.MountPoint\' instance in Zope. If \n+       such an instance exists, it can mount an object (the mounted \n+       object) into Zope.\n+       By default, the object will be mounted at the same path in Zope (i.e.\n+       \'/foo/bar\' in the database will be mounted at \'/foo/bar\' in Zope).\n+\n+       The object can be mounted at a different point using the\n+       \'virtual_path:real_path\' syntax (e.g.  \'mount-point /foo/bar:/bar\' \n+       will mount the object at \'/bar\' in the database to \'/foo/bar\' in \n+       Zope). The name of the mount point (\'bar\') must be the same as \n+       the mounted object.\n+\n+       It is also possible to specify the root that should be used in the\n+       mounted database by using the syntax\n+       \'virtual_path:~real_root:real_path\'. The root defaults to \'Application\'\n+       and should not normally be changed.\n+      </description>\n+    </multikey>\n+\n+    <key name="connection-class" datatype=".importable_name">\n+      <description>\n+       Change the connection class a database uses on a per-database basis to\n+       support different connection policies.  Use a Python dotted-path\n+       name to specify the connection class.\n+      </description>\n+    </key>\n+\n+   <key name="class-factory" datatype=".importable_name"\n+        default="Zope2.Startup.datatypes.simpleClassFactory">\n+      <description>\n+       Change the class factory function a database uses on a\n+       per-database basis to support different class factory policy.\n+       Use a Python dotted-path name to specify the class factory function.\n+      </description>\n+    </key>\n+\n+    <key name="container-class" datatype="string">\n+      <description>\n+       Change the container class a (mounted) database uses on a\n+       per-database basis to support a different container than a plain\n+       Folder. Use a Python dotted-path name to specify the container class.\n+      </description>\n+    </key>\n+\n+  </sectiontype>\n+\n+  <sectiontype name="zoperunner">\n+    <description>\n+      This section describes the options for zopectl.  These options\n+      have no default value specified in the schema; in some cases,\n+      zopectl calculates a dynamic default, in others, the feature\n+      associated with the option is disabled.\n+\n+      For those options that also have corresponding command-line\n+      options, the command line option (short and long form) are given\n+      here too.\n+    </description>\n+\n+    <multikey name="program" required="no">\n+      <description>\n+       The program(s) that will be run by the runner\n+      </description>\n+    </multikey>\n+\n+    <key name="daemon" datatype="boolean"\n+         required="no" default="true">\n+      <description>\n+        Command-line option: -d or --daemon.\n+\n+        If this option is true, zdrun.py runs in the background as a\n+        true daemon.  It forks an child process which becomes the\n+        subprocess manager, while the parent exits (making the shell\n+        that started it believe it is done).  The child process also\n+        does the following:\n+\n+        - if the directory option is set, change into that directory\n+\n+        - redirect stdin, stdout and stderr to /dev/null\n+\n+        - call setsid() so it becomes a session leader\n+\n+        - call umask(022)\n+      </description>\n+    </key>\n+\n+    <key name="backoff-limit" datatype="integer"\n+         required="no" default="10">\n+      <description>\n+        Command-line option: -b or --backoff-limit.\n+\n+        When the subprocess crashes, zdrun.py inserts a one-second\n+        delay before it restarts it.  When the subprocess crashes\n+        again right away, the delay is incremented by one second, and\n+        so on.  What happens when the delay has reached the value of\n+        backoff-limit (in seconds), depends on the value of the\n+        forever option.  If forever is false, zdrun.py gives up at\n+        this point, and exits.  An always-crashing subprocess will\n+        have been restarted exactly backoff-limit times in this case.\n+        If forever is true, zdrun.py continues to attempt to restart\n+        the process, keeping the delay at backoff-limit seconds.\n+\n+        If the subprocess stays up for more than backoff-limit\n+        seconds, the delay is reset to 1 second.\n+      </description>\n+    </key>\n+\n+    <key name="forever" datatype="boolean"\n+         required="no" default="false">\n+      <description>\n+        Command-line option: -f or --forever.\n+\n+        If this option is true, zdrun.py will keep restarting a\n+        crashing subprocess forever.  If it is false, it will give up\n+        after backoff-limit crashes in a row.  See the description of\n+        backoff-limit for details.\n+      </description>\n+    </key>\n+\n+    <key name="user" datatype="string"\n+         required="no">\n+      <description>\n+        Command-line option: -u or --user.\n+\n+        When zdrun.py is started by root, this option specifies the\n+        user as who the the zdrun.py process (and hence the daemon\n+        subprocess) will run.  This can be a user name or a numeric\n+        user id.  Both the user and the group are set from the\n+        corresponding password entry, using setuid() and setgid().\n+        This is done before zdrun.py does anything else besides\n+        parsing its command line arguments.\n+\n+        NOTE: when zdrun.py is not started by root, specifying this\n+        option is an error.  (XXX This may be a mistake.)\n+\n+        XXX The zdrun.py event log file may be opened *before*\n+        setuid() is called.  Is this good or bad?\n+      </description>\n+    </key>\n+\n+    <key name="hang-around" datatype="boolean"\n+         required="no" default="false">\n+      <description>\n+        If this option is true, the zdrun.py process will remain even\n+        when the daemon subprocess is stopped.  In this case, zopectl\n+        will restart zdrun.py as necessary.  If this option is false,\n+        zdrun.py will exit when the daemon subprocess is stopped\n+        (unless zdrun.py intends to restart it).\n+      </description>\n+    </key>\n+\n+    <key name="umask" datatype="zdaemon.zdoptions.octal_type"\n+         required="no"\n+         default="022">\n+      <description>\n+        Command-line option: -m or --umask.\n+\n+        When daemon mode is used, this option specifies the octal umask\n+        of the subprocess.\n+      </description>\n+    </key>\n+\n+    <key name="default-to-interactive" datatype="boolean"\n+         required="no" default="true">\n+      <description>\n+        If this option is true, zopectl enters interactive mode\n+        when it is invoked without a positional command argument.  If\n+        it is false, you must use the -i or --interactive command line\n+        option to zopectl to enter interactive mode.\n+      </description>\n+    </key>\n+\n+    <key name="prompt" datatype="string"\n+         required="no" default="zopectl>">\n+       <description>\n+         The prompt shown by zopectl program.\n+       </description>\n+    </key>\n+\n+    <key name="socket-name" datatype="existing-dirpath" required="no">\n+      <description>\n+        Command-line option: -s or --socket-name.\n+\n+        The pathname of the Unix domain socket used for communication\n+        between zopectl.py and zdrun.py.  The default is relative to the\n+        current directory in which zdctl.py and zdrun.py are started.\n+        You want to specify an absolute pathname here.\n+      </description>\n+    </key>\n+\n+  </sectiontype>\n+\n+  <!-- end of type definitions -->\n+\n+  <!-- schema begins  -->\n+\n+  <section type="environment" attribute="environment" name="*">\n+    <description>\n+     A section which allows a user to define arbitrary key-value pairs for\n+     use as environment variables during Zope\'s run cycle.  It\n+     is not recommended to set system-related environment variables such as\n+     PYTHONPATH within this section.\n+    </description>\n+  </section>\n+\n+  <key name="instancehome" datatype="existing-directory"\n+       required="yes">\n+    <description>\n+      The top-level directory which contains the "instance" data for the\n+      application server. It may also contain "etc", "bin", "log",\n+      and "var" directories depending on how you\'ve configured your Zope\n+      instance.\n+    </description>\n+  </key>\n+\n+  <key name="clienthome" datatype="existing-directory">\n+    <description>\n+      The directory used to store the default filestorage file used to\n+      back the ZODB database, as well as other files used by the\n+      Zope applications server during runtime.\n+    </description>\n+    <metadefault>$instancehome/var</metadefault>\n+  </key>\n+\n+  <key name="debug-mode" datatype="boolean" default="off">\n+    <description>\n+    A switch which controls several aspects of Zope operation useful for\n+    developing under Zope.  When debug mode is on:\n+\n+     - Errors in product initialization will cause startup to fail\n+       (instead of writing error messages to the event log file).\n+\n+     - Filesystem-based scripts such as skins, PageTemplateFiles, and\n+       DTMLFiles can be edited while the server is running and the server\n+       will detect these changes in real time.  When this switch is\n+       off, you must restart the server to see the changes.\n+\n+     Setting this to \'off\' when Zope is in a production environment is\n+     encouraged, as it speeds execution (sometimes dramatically).\n+    </description>\n+    <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="locale" datatype="locale" handler="locale">\n+    <description>\n+     Locale name to be used. See your operating system documentation for locale\n+     information specific to your system. If the requested locale is not\n+     supported by your system, an error will be raised and Zope will not start.\n+    </description>\n+    <metadefault>unset</metadefault>\n+  </key>\n+\n+  <key name="datetime-format" datatype=".datetime_format"\n+       handler="datetime_format" default="us">\n+    <description>\n+     Set this variable either to "us" or "international" to force the\n+     DateTime module to parse date strings either with\n+     month-before-days-before-year ("us") or\n+     days-before-month-before-year ("international").  The default\n+     behaviour of DateTime (when this setting is left unset) is to\n+     parse dates as US dates.\n+    </description>\n+    <metadefault>us</metadefault>\n+  </key>\n+\n+  <key name="python-check-interval" datatype="integer" default="1000">\n+    <description>\n+      Value passed to Python\'s sys.setcheckinterval() function.  The\n+      higher this is, the less frequently the Python interpreter\n+      checks for keyboard interrupts.  Setting this to higher values\n+      also reduces the frequency of potential thread switches, which\n+      can improve the performance of a busy server.\n+    </description>\n+  </key>\n+\n+  <key name="http-realm" default="Zope">\n+    <description>\n+     The HTTP "Realm" header value sent by this Zope instance. This value\n+     often shows up in basic authentication dialogs.\n+    </description>\n+    <metadefault>Zope</metadefault>\n+  </key>\n+\n+  <key name="automatically-quote-dtml-request-data" datatype="boolean"\n+       default="on" handler="automatically_quote_dtml_request_data">\n+     <description>\n+     Set this directive to \'off\' in order to disable the autoquoting of\n+     implicitly retrieved REQUEST data by DTML code which contains a \'&lt;\'\n+     when used in &lt;dtml-var&gt; construction. When this directive is \'on\',\n+     all data implicitly retrieved from the REQUEST in DTML (as opposed to\n+     addressing REQUEST.somevarname directly) that contains a \'&lt;\' will be\n+     HTML-quoted when interpolated via a &lt;dtml-var&gt; or &amp;dtml-\n+     construct. This mitigates the possibility that DTML programmers will\n+     leave their sites open to a "client-side trojan" attack.\n+     </description>\n+     <metadefault>on</metadefault>\n+  </key>\n+\n+  <multikey name="trusted-proxy" datatype="ipaddr-or-hostname"\n+       attribute="trusted_proxies">\n+     <description>\n+     Define one or more \'trusted-proxies\' keys, each of which is a\n+     hostname or an IP address.  The set of definitions comprises a list\n+     of front-end proxies that are trusted to supply an accurate\n+     X_FORWARDED_FOR header to Zope (security-related).\n+     </description>\n+     <metadefault>unset</metadefault>\n+  </multikey>\n+\n+  <key name="max-conflict-retries" datatype="integer" default="3"\n+       attribute="max_conflict_retries">\n+    <description>\n+      The maximum number of retries on a conflict error\n+    </description>\n+  </key>\n+\n+  <key name="security-policy-implementation"\n+       datatype=".security_policy_implementation"\n+       default="C">\n+     <description>\n+     The default Zope "security policy" implementation is written in C.\n+     Set this key to "PYTHON" to use the Python implementation\n+     (useful for debugging purposes); set it to "C" to use the C\n+     implementation.\n+     </description>\n+     <metadefault>C</metadefault>\n+  </key>\n+\n+  <key name="skip-authentication-checking" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to cause Zope to prevent Zope from\n+     attempting to authenticate users during normal operation.\n+     Potentially dangerous from a security perspective.  Only works if\n+     security-policy-implementation is set to \'C\'.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="skip-ownership-checking" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to cause Zope to ignore ownership checking\n+     when attempting to execute "through the web" code. By default, this\n+     directive is off in order to prevent \'trojan horse\' security problems\n+     whereby a user with less privilege can cause a user with more\n+     privilege to execute code which the less privileged user has written.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <key name="verbose-security" datatype="boolean"\n+       default="off">\n+     <description>\n+     Set this directive to \'on\' to enable verbose security exceptions.\n+     This can help you track down the reason for Unauthorized exceptions,\n+     but it is not suitable for public sites because it may reveal\n+     unnecessary information about the structure of your site.  Only\n+     works if security-policy-implementation is set to \'PYTHON\'.\n+     </description>\n+     <metadefault>off</metadefault>\n+  </key>\n+\n+  <multisection type="ZODB.Database" name="+" attribute="databases">\n+    <description>\n+       Zope ZODB databases must have a name, and they are required to be\n+       referenced via the "zodb_db" database type because it is\n+       the only kind of database definition that implements\n+       the required mount-point argument.  There is another\n+       database sectiontype named "zodb", but it cannot be used\n+       in the context of a proper Zope configuration (due to\n+       lack of a mount-point).\n+    </description>\n+  </multisection>\n+\n+  <key name="default-zpublisher-encoding"\n+       datatype=".default_zpublisher_encoding"\n+       default="utf-8">\n+     <description>\n+       This key controls what character set is used to encode unicode\n+       data that reaches ZPublisher without any other specified encoding.\n+     </description>\n+  </key>\n+\n+  <abstracttype name="zope.product.base">\n+    <description>\n+      Base type for product-specific configuration sections.\n+\n+      Specific products should implement configuration sections by\n+      defining section types that implement this abstract type and\n+      using their own schema component to define meaningful settings.\n+\n+    </description>\n+  </abstracttype>\n+\n+  <sectiontype name="product-config" implements="zope.product.base">\n+    <description>\n+    Product-specific configuration, expressed as arbitrary name-value pairs.\n+    </description>\n+\n+    <key name="+"\n+         attribute="mapping"\n+         required="no"\n+         />\n+  </sectiontype>\n+\n+  <multisection type="zope.product.base" name="+"\n+                attribute="product_config">\n+   <description>\n+    Product-specific configuration stanzas.\n+\n+    Products may use the &lt;product-config&gt; section type, or may supply\n+    a component.xml which defines section types with their own schemas.\n+\n+    All sections for this multisection will be collected into the\n+    \'product_config\' attribute of the configuration object.\n+   </description>\n+  </multisection>\n+\n+  <section type="zoperunner" name="*" attribute="runner"/>\n+\n+  <key name="python" datatype="existing-path"\n+       required="no">\n+    <description>\n+      Path to the Python interpreter for use by zdaemon.\n+      Defaults to sys.executable.\n+      Needed for buildout-based instances to supply a python\n+      that has all the correct eggs on the path.\n+    </description>\n+  </key>\n+\n+</schema>\n'

