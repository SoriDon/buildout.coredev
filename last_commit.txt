Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-04-19T15:44:30+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/a20d53510cf7bfc97b467ec222e0d1711d2ac27e

Allow easier customizations

Files changed:
M CHANGES.rst
M plone/namedfile/scaling.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5437dc4..967adbd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- Target Zope 4 (test chnages only).\n+- It is now possible to customize in an easier way the ``@@images`` view\n+  [ale-rt]\n+- Target Zope 4 (test changes only).\n \n Bug fixes:\n \ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 534b2a6..ff2bff3 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -31,6 +31,7 @@\n import logging\n import six\n \n+\n logger = logging.getLogger(__name__)\n _marker = object()\n \n@@ -282,6 +283,7 @@ class ImageScaling(BrowserView):\n     # Ignore some stacks to help with accessing via webdav, otherwise you get a\n     # 404 NotFound error.\n     _ignored_stacks = (\'manage_DAVget\', \'manage_FTPget\')\n+    _scale_view_class = ImageScale\n \n     def publishTraverse(self, request, name):\n         """ used for traversal via publisher, i.e. when using as a url """\n@@ -301,7 +303,11 @@ def publishTraverse(self, request, name):\n             info = storage.get(name)\n             if info is None:\n                 raise NotFound(self, name, self.request)\n-            scale_view = ImageScale(self.context, self.request, **info)\n+            scale_view = self._scale_view_class(\n+                self.context,\n+                self.request,\n+                **info\n+            )\n             alsoProvides(scale_view, IStableImageScale)\n             return scale_view\n         else:\n@@ -309,7 +315,7 @@ def publishTraverse(self, request, name):\n             if \'.\' in name:\n                 name, ext = name.rsplit(\'.\', 1)\n             value = getattr(self.context, name)\n-            scale_view = ImageScale(\n+            scale_view = self._scale_view_class(\n                 self.context,\n                 self.request,\n                 data=value,\n@@ -323,7 +329,7 @@ def traverse(self, name, furtherPath):\n         # validate access\n         value = self.guarded_orig_image(name)\n         if not furtherPath:\n-            image = ImageScale(\n+            image = self._scale_view_class(\n                 self.context,\n                 self.request,\n                 data=value,\n@@ -445,7 +451,7 @@ def scale(\n             **parameters\n         )\n         info[\'fieldname\'] = fieldname\n-        scale_view = ImageScale(self.context, self.request, **info)\n+        scale_view = self._scale_view_class(self.context, self.request, **info)\n         return scale_view\n \n     def calculate_srcset(\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-06-22T11:52:07+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/4c906562cb91211a267c3bd91013cb7a8a98a151

Merge remote-tracking branch 'origin/master' into allow-easier-customization

Files changed:
A news/.gitkeep
A pyproject.toml
M CHANGES.rst
M MANIFEST.in
M README.rst
M plone/namedfile/file.py
M plone/namedfile/handler.rst
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/testing.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/usage.rst
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M plone/namedfile/utils/png_utils.py
M plone/namedfile/utils/tiff_utils.py
M plone/namedfile/z3c-blobfile.zcml
M setup.cfg
M setup.py
D .gitattributes

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff67..0000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 967adbd..52da045 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,23 +1,57 @@\n Changelog\n =========\n \n-4.3 (unreleased)\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+\n+.. towncrier release notes start\n+\n+5.0.3 (2019-04-29)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Increase static MAX_INFO_BYTES to fix an issue where the filesize was not extracted properly from an image with lots of metadata. [elioschmutz] (#74)\n+\n+\n+5.0.2 (2018-11-13)\n ------------------\n \n-Breaking changes:\n+Bug fixes:\n+\n+\n+- Do not fail image upload when Exif data is bad. [maurits] (#68)\n \n-- *add item here*\n+\n+5.0.1 (2018-11-08)\n+------------------\n+\n+Bug fixes:\n+\n+- Fix a forgotten change to BytesIO.\n+  [pbauer]\n+\n+\n+5.0 (2018-11-02)\n+----------------\n \n New features:\n \n - It is now possible to customize in an easier way the ``@@images`` view\n   [ale-rt]\n - Target Zope 4 (test changes only).\n+- Target Zope 4 (test changes only).\n+\n+- Python 3 compatibility\n+  [pbauer, matthewwilkes, fgrcon, jensens]\n \n Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\n-  [ale-rt, pbauer]\n+  [ale-rt, pbauer, MatthewWilkes, jensens]\n \n - remove mention of "retina" (https://github.com/plone/Products.CMFPlone/issues/2123)\n   [tkimnguyen]\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 7a9d37c..ac514a2 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -3,3 +3,6 @@ graft docs\n graft plone\n \n global-exclude *.py[co]\n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/README.rst b/README.rst\nindex f52f79d..8314989 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -21,6 +21,6 @@ Source Code\n  Note: This packages is licensed under a *BSD license*. \n  Please do not add dependencies on GPL code!\n \n-Contributors please read the document `Process for Plone core\'s development <http://docs.plone.org/develop/plone-coredev/index.html>`_\n+Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n \n Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.namedfile>`_.\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..8b13789\n--- /dev/null\n+++ b/news/.gitkeep\n@@ -0,0 +1 @@\n+\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 8b17cae..d726fd3 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -22,12 +22,13 @@\n import six\n import transaction\n \n+\n log = getLogger(__name__)\n \n \n MAXCHUNKSIZE = 1 << 16\n IMAGE_INFO_BYTES = 1024\n-MAX_INFO_BYTES = 1 << 16\n+MAX_INFO_BYTES = 1 << 18\n \n \n class FileChunk(Persistent):\n@@ -42,10 +43,10 @@ def __getslice__(self, i, j):\n         return self._data[i:j]\n \n     def __len__(self):\n-        data = str(self)\n+        data = bytes(self)\n         return len(data)\n \n-    def __str__(self):\n+    def _get_contents(self):\n         next = self.next\n         if next is None:\n             return self._data\n@@ -56,7 +57,12 @@ def __str__(self):\n             result.append(self._data)\n             next = self.next\n \n-        return \'\'.join(result)\n+        return b\'\'.join(result)\n+\n+    if six.PY2:\n+        __str__ = _get_contents\n+    else:\n+        __bytes__ = _get_contents\n \n \n FILECHUNK_CLASSES = [FileChunk]\n@@ -160,7 +166,7 @@ class NamedFile(Persistent):\n \n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         if (\n             filename is not None and\n             contentType in (\'\', \'application/octet-stream\')\n@@ -172,7 +178,7 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n \n     def _getData(self):\n         if isinstance(self._data, tuple(FILECHUNK_CLASSES)):\n-            return str(self._data)\n+            return bytes(self._data)\n         else:\n             return self._data\n \n@@ -182,7 +188,7 @@ def _setData(self, data):\n         if isinstance(data, six.text_type):\n             data = data.encode(\'UTF-8\')\n \n-        if isinstance(data, str):\n+        if isinstance(data, six.binary_type):\n             self._data, self._size = FileChunk(data), len(data)\n             return\n \n@@ -271,7 +277,7 @@ class NamedImage(NamedFile):\n     """\n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         self.contentType, self._width, self._height = getImageInfo(data)\n         self.filename = filename\n         self._setData(data)\n@@ -311,7 +317,7 @@ class NamedBlobFile(Persistent):\n \n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         if (\n             filename is not None and\n             contentType in (\'\', \'application/octet-stream\')\n@@ -320,7 +326,7 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n         self.contentType = contentType\n         self._blob = Blob()\n         f = self._blob.open(\'w\')\n-        f.write(\'\')\n+        f.write(b\'\')\n         f.close()\n         self._setData(data)\n         self.filename = filename\n@@ -372,7 +378,7 @@ class NamedBlobImage(NamedBlobFile):\n     """An image stored in a ZODB BLOB with a filename\n     """\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         super(NamedBlobImage, self).__init__(data,\n                                              contentType=contentType,\n                                              filename=filename)\n@@ -387,8 +393,15 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n                       \'Exif Data: %s\', exif_data)\n             orientation = exif_data[\'0th\'].get(piexif.ImageIFD.Orientation, 1)\n             if 1 < orientation <= 8:\n-                self.data, self._width, self._height, self.exif = rotate_image(\n-                    self.data)\n+                try:\n+                    self.data, self._width, self._height, self.exif = \\\n+                        rotate_image(self.data)\n+                except KeyboardInterrupt:\n+                    raise\n+                except Exception:\n+                    log.warning(\n+                        \'Error rotating image %s based on exif data.\',\n+                        filename, exc_info=1)\n             else:\n                 self.exif = exif_data\n \ndiff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex 5087b52..b1e6143 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -19,7 +19,7 @@ First, we wire up the handlers::\n     ... </configure>\n     ... """\n \n-    >>> from StringIO import StringIO\n+    >>> from six import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \n@@ -46,7 +46,7 @@ Named file\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedFile">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -69,10 +69,10 @@ Named file\n     <class \'plone.namedfile.field.NamedFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -89,7 +89,7 @@ Named image\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedImage">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -112,10 +112,10 @@ Named image\n     <class \'plone.namedfile.field.NamedImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -132,7 +132,7 @@ Named blob file\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -155,10 +155,10 @@ Named blob file\n     <class \'plone.namedfile.field.NamedBlobFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -175,7 +175,7 @@ Named blob image\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -198,10 +198,10 @@ Named blob image\n     <class \'plone.namedfile.field.NamedBlobImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 2003cc0..455904e 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -9,10 +9,10 @@\n \n class IFile(Interface):\n \n-    contentType = schema.BytesLine(\n+    contentType = schema.NativeStringLine(\n         title=u\'Content Type\',\n         description=u\'The content type identifies the type of data.\',\n-        default=b\'\',\n+        default=\'\',\n         required=False,\n         missing_value=\'\'\n     )\ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 392700b..6e5c64e 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from email.encoders import encode_base64\n from plone.namedfile import NamedBlobFile\n from plone.namedfile import NamedBlobImage\n from plone.namedfile import NamedFile\n@@ -12,6 +11,8 @@\n from zope.component import adapter\n from zope.interface import Interface\n \n+import six\n+\n \n class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     """Base marshaler for plone.namedfile values. Actual adapters are\n@@ -26,18 +27,20 @@ def encode(self, value, charset=\'utf-8\', primary=False):\n         # never in a header\n         if not primary:\n             raise ValueError(\n-                \'File fields can only be marshaled as primary fields\')\n+                \'File fields can only be marshaled as primary fields\',\n+            )\n         if value is None:\n             return None\n         return value.data\n \n     def decode(\n-            self,\n-            value,\n-            message=None,\n-            charset=\'utf-8\',\n-            contentType=None,\n-            primary=False):\n+        self,\n+        value,\n+        message=None,\n+        charset=\'utf-8\',\n+        contentType=None,\n+        primary=False,\n+    ):\n         filename = None\n         if primary and message is not None:\n             filename = message.get_filename(None)\n@@ -47,11 +50,10 @@ def getContentType(self):\n         value = self._query()\n         if value is None:\n             return None\n+        if not isinstance(value.contentType, six.text_type):\n+            return value.contentType.decode(\'utf8\')\n         return value.contentType\n \n-    def getCharset(self, default=\'utf-8\'):\n-        return None\n-\n     def postProcessMessage(self, message):\n         """Encode message as base64 and set content disposition\n         """\n@@ -62,13 +64,11 @@ def postProcessMessage(self, message):\n                 message.add_header(\'Content-Disposition\', \'attachment\')\n                 message.set_param(\n                     \'filename\',\n-                    filename.encode(\'utf-8\'),\n+                    filename.encode(\'utf-8\') if six.PY2 else filename,\n                     header=\'Content-Disposition\',\n-                    charset=\'utf-8\'\n+                    charset=\'utf-8\',\n                 )\n \n-        encode_base64(message)\n-\n \n @adapter(Interface, INamedFileField)\n class NamedFileFieldMarshaler(BaseNamedFileFieldMarshaler):\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex ca64bdf..26825ed 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -21,9 +21,9 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> from StringIO import StringIO\n+    >>> import six\n     >>> from zope.configuration import xmlconfig\n-    >>> xmlconfig.xmlconfig(StringIO(configuration))\n+    >>> xmlconfig.xmlconfig(six.StringIO(configuration))\n \n Next, we will create a schema with which to test the marshaler::\n \n@@ -39,23 +39,23 @@ We\'ll create an instance with some data, too::\n     >>> from plone.namedfile import NamedFile, NamedImage\n     >>> fileValue = NamedFile(\'dummy test data\', \'text/plain\', filename=u"test.txt")\n     >>> zptlogo = (\n-    ...     \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    ...     \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    ...     \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    ...     \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    ...     \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    ...     \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    ...     \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    ...     \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    ...     \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    ...     \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    ...     \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    ...     \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    ...     \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    ...     \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    ...     \'\\x00A\\x00;\'\n+    ...     b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    ...     b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    ...     b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    ...     b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    ...     b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    ...     b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    ...     b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    ...     b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    ...     b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    ...     b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    ...     b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    ...     b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    ...     b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    ...     b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    ...     b\'\\x00A\\x00;\'\n     ...     )\n     >>> imageValue = NamedImage(zptlogo, \'image/gif\', filename=u\'zptl\\xf8go.gif\')\n \n@@ -86,6 +86,7 @@ binary data into a UTF-8 string in a header::\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n+\n     >>> marshaler.ascii\n     False\n \n@@ -97,14 +98,15 @@ binary data into a UTF-8 string in a header::\n \n     >>> marshaler.getContentType()\n     \'image/gif\'\n+\n     >>> marshaler.ascii\n     False\n \n Let\'s try it with primary fields::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_file\']), IFieldMarshaler)\n-    >>> marshaler.marshal(primary=True)\n-    \'dummy test data\'\n+    >>> bytearray(marshaler.marshal(primary=True))\n+    bytearray(\'dummy test data\')\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n@@ -124,32 +126,28 @@ Let\'s try it with primary fields::\n     >>> marshaler.ascii\n     False\n \n-This marshaler will also post-process a message to encode the filename in\n-the Content-Disposition header, and base64-encode the payload.\n-\n-To illustrate that, as well as parsing of the message, let\'s construct\n-a full message and look at the output.\n+This marshaler will also post-process a message to encode the filename in the Content-Disposition header.\n+To illustrate that, as well as parsing of the message,\n+let\'s construct a full message and look at the output.\n \n-First, we need to mark one of the fields as primary. In this case, we will\n-use the file field. The image will will now be ignored, since our marshaler\n-refuses to encode non-primary fields::\n+First, we need to mark one of the fields as primary.\n+In this case, we will use the file field.\n+The image will will now be ignored, since our marshaler refuses to encode non-primary fields::\n \n     >>> from plone.rfc822.interfaces import IPrimaryField\n-    >>> from plone.rfc822 import constructMessageFromSchema\n-    >>> from plone.rfc822 import renderMessage\n-\n     >>> from zope.interface import alsoProvides\n     >>> alsoProvides(ITestContent[\'_file\'], IPrimaryField)\n \n+    >>> from plone.rfc822 import constructMessageFromSchema\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> messageBody = renderMessage(message)\n-    >>> print messageBody\n+    >>> messageBody = message.as_string()\n+    >>> print(messageBody) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n     MIME-Version: 1.0\n     Content-Type: text/plain\n-    Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=utf-8\'\'test.txt\n     <BLANKLINE>\n-    ZHVtbXkgdGVzdCBkYXRh\n+    ZHVtbXkgdGVzdCBkYXRh...\n \n You can see here that we have a transfer encoding and a content disposition.\n \n@@ -162,12 +160,12 @@ Let\'s now use this message to construct a new object::\n \n     >>> from plone.rfc822 import initializeObjectFromSchema\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n-    >>> newContent._file.data\n-    \'dummy test data\'\n+    >>> bytearray(newContent._file.data)\n+    bytearray(\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n-    u\'test.txt\'\n+    \'test.txt\'\n \n     >>> newContent._image is None\n     True\n@@ -175,33 +173,34 @@ Let\'s now use this message to construct a new object::\n If we have two primary fields, they will be encoded as a multipart message::\n \n     >>> alsoProvides(ITestContent[\'_image\'], IPrimaryField)\n-\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> messageBody = renderMessage(message)\n-    >>> print messageBody # doctest: +ELLIPSIS\n+    >>> messageBody = message.as_string()\n+    >>> print(messageBody) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n     MIME-Version: 1.0\n     Content-Type: multipart/mixed; boundary="===============...=="\n     <BLANKLINE>\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: text/plain\n-    Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=...utf-8\'\'test.txt...\n     <BLANKLINE>\n-    ZHVtbXkgdGVzdCBkYXRh\n+    ZHVtbXkgdGVzdCBkYXRh...\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: image/gif\n-    Content-Disposition: attachment; filename*="utf-8\'\'zptl%C3%B8go.gif"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=...utf-8\'\'zptl%C3%B8go.gif...\n     <BLANKLINE>\n     R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi\n     5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM\n     1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2\n     wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm\n     BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D\n-    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=\n-    --===============...==--...\n+    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=...\n+    --===============...==--\n+    <BLANKLINE>\n+\n \n Of course, we will also be able to load this data from a message::\n \n@@ -209,16 +208,16 @@ Of course, we will also be able to load this data from a message::\n     >>> newContent = TestContent()\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n \n-    >>> newContent._file.data\n-    \'dummy test data\'\n+    >>> bytearray(newContent._file.data)\n+    bytearray(\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n-    u\'test.txt\'\n+    \'test.txt\'\n \n     >>> newContent._image.data == zptlogo\n     True\n     >>> newContent._image.contentType\n     \'image/gif\'\n     >>> newContent._image.filename\n-    u\'zptl\\xf8go.gif\'\n+    \'zptl\\xf8go.gif\'\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex ff2bff3..b12b6f7 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -114,7 +114,7 @@ def tag(self, height=_marker, width=_marker, alt=_marker,\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n-            elif isinstance(v, str):\n+            elif isinstance(v, six.binary_type):\n                 v = six.text_type(v, \'utf8\')\n             parts.append(u\'{0}={1}\'.format(k, quoteattr(v)))\n         parts.append(\'/>\')\n@@ -347,7 +347,7 @@ def traverse(self, name, furtherPath):\n     @deprecate(\'use property available_sizes instead\')\n     def getAvailableSizes(self, fieldname=None):\n         if fieldname:\n-            logger.warn(\n+            logger.warning(\n                 \'fieldname was passed to deprecated getAvailableSizes, but \'\n                 \'will be ignored.\',\n             )\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 9a9403b..b4a08c7 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -8,31 +8,43 @@\n from zope.interface import implementer\n from zope.publisher.browser import FileUpload\n \n+import io\n import six\n \n+\n MAXCHUNKSIZE = 1 << 16\n \n \n @implementer(IStorage)\n-class StringStorable(object):\n+class BytesStorable(object):\n \n     def store(self, data, blob):\n-        if not isinstance(data, str):\n-            raise NotStorable(\'Could not store data (not of "str" type).\')\n+        if not isinstance(data, six.binary_type):\n+            raise NotStorable(\'Could not store data (not of bytes type).\')\n \n         with blob.open(\'w\') as fp:\n             fp.write(data)\n \n \n @implementer(IStorage)\n-class UnicodeStorable(StringStorable):\n+class TextStorable(BytesStorable):\n \n     def store(self, data, blob):\n         if not isinstance(data, six.text_type):\n             raise NotStorable(\'Could not store data (not of "unicode" type).\')\n \n         data = data.encode(\'UTF-8\')\n-        StringStorable.store(self, data, blob)\n+        BytesStorable.store(self, data, blob)\n+\n+\n+@implementer(IStorage)\n+class UnicodeStorable(TextStorable):\n+    pass\n+\n+\n+@implementer(IStorage)\n+class StringStorable(BytesStorable):\n+    pass\n \n \n @implementer(IStorage)\n@@ -62,6 +74,19 @@ def store(self, data, blob):\n             return\n \n \n+class BufferedReaderStorable(object):\n+\n+    def store(self, data, blob):\n+        raw = data.raw\n+        if not isinstance(raw, io.FileIO):\n+            raise NotStorable(\'Could not store data (not of type "io.FileIO")\')\n+\n+        filename = getattr(data.raw, \'name\', None)\n+        if filename is not None:\n+            blob.consumeFile(filename)\n+            return\n+\n+\n @implementer(IStorage)\n class FileUploadStorable(object):\n \n@@ -84,5 +109,5 @@ def store(self, pdata, blob):\n         if not isinstance(pdata, Pdata):\n             raise NotStorable(\'Could not store data (not of "Pdata").\')\n         fp = blob.open(\'w\')\n-        fp.write(str(pdata))\n+        fp.write(bytes(pdata))\n         fp.close()\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 1581cd3..a1c3885 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,15 +1,15 @@\n # -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import publisher\n-from plone.testing import z2\n from plone.testing import zca\n-from plone.testing import zodb\n+\n+from plone.testing import zope\n from zope.configuration import xmlconfig\n \n \n class NamedFileTestLayer(Layer):\n \n-    defaultBases = (z2.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n+    defaultBases = (zope.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n \n     def setUp(self):\n         zca.pushGlobalRegistry()\n@@ -17,28 +17,19 @@ def setUp(self):\n         import plone.namedfile\n         xmlconfig.file(\'testing.zcml\', plone.namedfile)\n \n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'NamedFileFixture\'\n-        )\n-\n     def tearDown(self):\n-        # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n-\n         # Zap the stacked zca context\n         zca.popGlobalRegistry()\n \n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n-PLONE_NAMEDFILE_INTEGRATION_TESTING = z2.IntegrationTesting(\n+PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n     name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n )\n \n-PLONE_NAMEDFILE_FUNCTIONAL_TESTING = z2.FunctionalTesting(\n+PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n     name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n )\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex 3e18472..f8dadbb 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -5,4 +5,5 @@\n def getFile(filename):\n     """ return contents of the file with the given name """\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    return open(filename, \'rb\')\n+    with open(filename, \'rb\') as data_file:\n+        return data_file.read()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex ec14bfd..1949038 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -69,12 +69,12 @@ def _makeImage(self, *args, **kw):\n     def testEmpty(self):\n         file = self._makeImage()\n         self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, \'\')\n+        self.assertEqual(file.data, b\'\')\n \n     def testConstructor(self):\n-        file = self._makeImage(\'Data\')\n+        file = self._makeImage(b\'Data\')\n         self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, \'Data\')\n+        self.assertEqual(file.data, b\'Data\')\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -97,9 +97,9 @@ def testInterface(self):\n     def testDataMutatorWithLargeHeader(self):\n         from plone.namedfile.file import IMAGE_INFO_BYTES\n         bogus_header_length = struct.pack(\'>H\', IMAGE_INFO_BYTES * 2)\n-        data = (\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n-                \'\\x00\' * IMAGE_INFO_BYTES * 2 +\n-                \'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n+        data = (b\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n+                b\'\\x00\' * IMAGE_INFO_BYTES * 2 +\n+                b\'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n         image = self._makeImage()\n         image._setData(data)\n         self.assertEqual(image.getImageSize(), (1024, 680))\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex ae5b267..eb85b9c 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -3,6 +3,8 @@\n from plone.testing import layered\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -14,6 +16,22 @@\n ]\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n+            got = got.replace(\'bytearray(b\', \'bytearray(\')\n+            got = re.sub(\n+                "WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n+            got = got.replace(\n+                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt")\n+\n+        if six.PY3:\n+            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     return unittest.TestSuite(\n         [\n@@ -21,8 +39,10 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     testfile,\n                     package=\'plone.namedfile\',\n+                    checker=Py23DocChecker(),\n+                    optionflags=doctest.ELLIPSIS,\n                 ),\n-                PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n+                PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n             ) for testfile in TEST_FILES\n         ]\n \ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex eb458e1..11598ee 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -11,23 +11,23 @@\n \n \n zptlogo = (\n-    \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    \'\\x00A\\x00;\'\n+    b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    b\'\\x00A\\x00;\'\n )\n \n \n@@ -39,12 +39,12 @@ def _makeImage(self, *args, **kw):\n     def testEmpty(self):\n         file_img = self._makeImage()\n         self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(file_img.data, \'\')\n+        self.assertEqual(bytes(file_img.data), b\'\')\n \n     def testConstructor(self):\n-        file_img = self._makeImage(\'Data\')\n+        file_img = self._makeImage(b\'Data\')\n         self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(file_img.data, \'Data\')\n+        self.assertEqual(bytes(file_img.data), b\'Data\')\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -65,17 +65,17 @@ def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n-                    getFile(\'image.gif\').read(),\n+                    getFile(\'image.gif\'),\n                     contentType=\'image/gif\')),\n             \'image/gif\')\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n-                    getFile(\'image.gif\').read(),\n+                    getFile(\'image.gif\'),\n                     filename=u\'image.gif\')),\n             \'image/gif\')\n         self.assertEqual(get_contenttype(\n-            NamedImage(getFile(\'notimage.doc\').read(),\n+            NamedImage(getFile(\'notimage.doc\'),\n                        filename=u\'notimage.doc\')),\n             \'application/msword\')\n \n@@ -101,7 +101,7 @@ class FakeField(object):\n         image._setData(zptlogo)\n         validate_image_field(FakeField(), image)\n \n-        notimage = NamedImage(getFile(\'notimage.doc\').read(),\n+        notimage = NamedImage(getFile(\'notimage.doc\'),\n                               filename=u\'notimage.doc\')\n         self.assertRaises(\n             InvalidImageFile,\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex a9ae071..8e68794 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -10,7 +10,7 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.scale.interfaces import IScaledImageQuality\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import getGlobalSiteManager\n@@ -34,7 +34,7 @@ class IHasImage(IImageScaleTraversable):\n \n \n def assertImage(testcase, data, format_, size):\n-    image = PIL.Image.open(StringIO(data))\n+    image = PIL.Image.open(BytesIO(data))\n     testcase.assertEqual(image.format, format_)\n     testcase.assertEqual(image.size, size)\n \n@@ -63,7 +63,7 @@ class ImageScalingTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n@@ -228,7 +228,7 @@ def testScaleInvalidation(self):\n         foo1 = self.scaling.scale(\'image\', scale=\'foo\')\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the scale has changed\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n         foo2 = self.scaling.scale(\'image\', scale=\'foo\')\n         self.assertFalse(foo1.data == foo2.data, \'scale not updated?\')\n@@ -288,7 +288,7 @@ def testGetOriginalScaleTag(self):\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithNonASCIITitle(self):\n-        self.item.title = \'\\xc3\\xbc\'\n+        self.item.title = u\'\xc3\xbc\'\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n@@ -299,7 +299,7 @@ def testScaleOnItemWithNonASCIITitle(self):\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithUnicodeTitle(self):\n-        self.item.Title = lambda: \'\\xc3\\xbc\'.decode(\'utf8\')\n+        self.item.Title = lambda: u\'\xc3\xbc\'\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n@@ -313,7 +313,7 @@ def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n         Image quality not available for PNG images.\n         """\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.jpg\')\n         scaling = ImageScaling(item, None)\n@@ -349,7 +349,7 @@ class ImageTraverseTests(unittest.TestCase):\n \n     def setUp(self):\n         self.app = self.layer[\'app\']\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.app._setOb(\'item\', item)\n@@ -397,7 +397,7 @@ def testScaleInvalidation(self):\n         uid1, ext, width1, height1 = self.traverse(\'image/thumb\')\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the thumbnail has changed\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n         uid2, ext, width2, height2 = self.traverse(\'image/thumb\')\n         self.assertNotEqual(uid1, uid2, \'thumb not updated?\')\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 889d3bc..ac4282d 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -9,29 +9,23 @@\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n-from plone.testing.z2 import Browser\n-from six import StringIO\n+from plone.testing.zope import Browser\n+from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n from zope.interface import implementer\n \n import PIL\n-import time\n+import six\n import transaction\n import unittest\n \n \n-def wait_to_ensure_modified():\n-    # modified is measured in milliseconds\n-    # wait 5ms to ensure modified will have changed\n-    time.sleep(0.005)\n-\n-\n class IHasImage(IImageScaleTraversable):\n     image = NamedImageField()\n \n \n def assertImage(testcase, data, format_, size):\n-    image = PIL.Image.open(StringIO(data))\n+    image = PIL.Image.open(BytesIO(data))\n     testcase.assertEqual(image.format, format_)\n     testcase.assertEqual(image.size, size)\n \n@@ -52,7 +46,9 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\').read()\n+        if six.PY2:\n+            raise unittest.SkipTest(\'Disabled in py2 for now.\')\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n@@ -115,7 +111,7 @@ def make_head_request(args):\n             self.browser.headers[\'Content-Length\'],\n             str(GET_length)\n         )\n-        self.assertEqual(self.browser.contents, \'\')\n+        self.assertEqual(self.browser.contents, b\'\')\n \n     def testPublishThumbViaUID(self):\n         ImageScaling._sizes = {\'thumb\': (128, 128)}\n@@ -146,7 +142,7 @@ def testPublishThumbViaName(self):\n             self.layer[\'app\'].absolute_url() + \'/item/@@images/image\'\n         )\n         self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(self.browser.contents, getFile(\'image.png\').read())\n+        self.assertEqual(self.browser.contents, getFile(\'image.png\'))\n \n         # and last a scaled version\n         self.browser.open(\ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex fe94a28..504b206 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -22,6 +22,8 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n \n+import os\n+import tempfile\n import unittest\n \n \n@@ -29,19 +31,30 @@ class TestStorable(unittest.TestCase):\n \n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n-    def setUp(self):\n-        pass\n-\n     def test_pdata_storable(self):\n-        pdata = Pdata(getFile(\'image.gif\').read())\n+        pdata = Pdata(getFile(\'image.gif\'))\n         fi = NamedBlobImage(pdata, filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_str_storable(self):\n-        fi = NamedBlobImage(getFile(\'image.gif\').read(), filename=u\'image.gif\')\n+        fi = NamedBlobImage(getFile(\'image.gif\'), filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_filechunk_storable(self):\n-        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\').read()),\n+        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n                             filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n+\n+    def test_opened_file_storable(self):\n+        data = getFile(\'image.gif\')\n+        f = tempfile.NamedTemporaryFile(delete=False)\n+        try:\n+            path = f.name\n+            f.write(data)\n+            f.close()\n+            with open(path, \'rb\') as f:\n+                fi = NamedBlobImage(f, filename=u\'image.gif\')\n+        finally:\n+            if os.path.exists(path):\n+                os.remove(path)\n+        self.assertEqual(303, fi.getSize())\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 580847c..f55ab21 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -43,28 +43,28 @@ The FileContainer class creates empty objects to start with::\n \n     >>> container = FileContainer()\n \n-    >>> container.simple.data\n-    \'\'\n+    >>> bytearray(container.simple.data)\n+    bytearray(\'\')\n     >>> container.simple.contentType\n     \'\'\n     >>> container.simple.filename is None\n     True\n \n-    >>> container.image.data\n-    \'\'\n+    >>> len(container.image.data)\n+    0\n     >>> container.image.contentType\n     \'\'\n     >>> container.image.filename is None\n     True\n \n-    >>> container.blob.data\n-    \'\'\n+    >>> len(container.blob.data)\n+    0\n     >>> container.blob.contentType\n     \'\'\n     >>> container.blob.filename is None\n     True\n-    >>> container.blobimage.data\n-    \'\'\n+    >>> len(container.blobimage.data)\n+    0\n     >>> container.blobimage.contentType\n     \'\'\n     >>> container.blobimage.filename is None\n@@ -74,41 +74,41 @@ Let\'s now set some actual data in these files. Notice how the constructor\n will attempt to guess the filename from the file extension::\n \n     >>> container.simple = namedfile.NamedFile(\'dummy test data\', filename=u"test.txt")\n-    >>> container.simple.data\n-    \'dummy test data\'\n+    >>> bytearray(container.simple.data)\n+    bytearray(\'dummy test data\')\n     >>> container.simple.contentType\n     \'text/plain\'\n-    >>> container.simple.filename\n-    u\'test.txt\'\n+    >>> print(container.simple.filename)\n+    test.txt\n \n     >>> container.blob = namedfile.NamedBlobFile(\'dummy test data\', filename=u"test.txt")\n-    >>> container.blob.data\n-    \'dummy test data\'\n+    >>> bytearray(container.blob.data)\n+    bytearray(\'dummy test data\')\n     >>> container.blob.contentType\n     \'text/plain\'\n-    >>> container.blob.filename\n-    u\'test.txt\'\n+    >>> print(container.blob.filename)\n+    test.txt\n \n Let\'s also try to read a GIF, courtesy of the zope.app.file tests::\n \n     >>> zptlogo = (\n-    ...     \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    ...     \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    ...     \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    ...     \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    ...     \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    ...     \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    ...     \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    ...     \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    ...     \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    ...     \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    ...     \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    ...     \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    ...     \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    ...     \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    ...     \'\\x00A\\x00;\'\n+    ...     b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    ...     b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    ...     b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    ...     b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    ...     b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    ...     b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    ...     b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    ...     b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    ...     b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    ...     b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    ...     b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    ...     b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    ...     b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    ...     b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    ...     b\'\\x00A\\x00;\'\n     ...     )\n \n     >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")\n@@ -116,16 +116,16 @@ Let\'s also try to read a GIF, courtesy of the zope.app.file tests::\n     True\n     >>> container.image.contentType\n     \'image/gif\'\n-    >>> container.image.filename\n-    u\'zpt.gif\'\n+    >>> print(container.image.filename)\n+    zpt.gif\n \n     >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")\n     >>> container.blobimage.data == zptlogo\n     True\n     >>> container.blobimage.contentType\n     \'image/gif\'\n-    >>> container.blobimage.filename\n-    u\'zpt.gif\'\n+    >>> print(container.blobimage.filename)\n+    zpt.gif\n \n Note that is possible for force the mimetype::\n \n@@ -134,23 +134,23 @@ Note that is possible for force the mimetype::\n     True\n     >>> container.image.contentType\n     \'image/foo\'\n-    >>> container.image.filename\n-    u\'zpt.gif\'\n+    >>> print(container.image.filename)\n+    zpt.gif\n \n     >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType=\'image/foo\', filename=u"zpt.gif")\n     >>> container.blobimage.data == zptlogo\n     True\n     >>> container.blobimage.contentType\n     \'image/foo\'\n-    >>> container.blobimage.filename\n-    u\'zpt.gif\'\n+    >>> print(container.blobimage.filename)\n+    zpt.gif\n \n The filename must be set to a unicode string, not a bytestring::\n \n-    >>> container.image.filename = \'foo\'\n+    >>> container.image.filename = b\'foo\'\n     Traceback (most recent call last):\n     ...\n-    WrongType: (\'foo\', <type \'unicode\'>, \'filename\')\n+    zope.schema._bootstrapinterfaces.WrongType: ...\n \n \n Download view\n@@ -169,8 +169,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'simple\')\n-    >>> download()\n-    \'dummy test data\'\n+    >>> bytearray(download())\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -181,8 +181,8 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'blob\')\n     >>> data = download()\n-    >>> hasattr(data, \'read\') and data.read() or data\n-    \'dummy test data\'\n+    >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -230,8 +230,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'simple\')\n-    >>> display_file()\n-    \'dummy test data\'\n+    >>> bytearray(display_file())\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -241,8 +241,8 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'blob\')\n     >>> data = display_file()\n-    >>> hasattr(data, \'read\') and data.read() or data\n-    \'dummy test data\'\n+    >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -298,8 +298,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> download = Download(container, request)\n-    >>> download()\n-    \'dummy test data\'\n+    >>> bytearray(download())\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex ec62738..45fcb3f 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -5,7 +5,7 @@\n from plone.namedfile.utils.png_utils import process_png\n from plone.namedfile.utils.tiff_utils import process_tiff\n from plone.registry.interfaces import IRegistry\n-from six import StringIO\n+from six import BytesIO\n from six.moves import urllib\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n@@ -17,6 +17,7 @@\n import six\n import struct\n \n+\n log = getLogger(__name__)\n \n try:\n@@ -104,7 +105,7 @@ def _ensure_data(image):\n         image.seek(0)\n     else:\n         data = image\n-    return str(data)\n+    return bytes(data)\n \n \n def getImageInfo(data):\n@@ -114,43 +115,43 @@ def getImageInfo(data):\n     width = -1\n     content_type = \'\'\n \n-    if (size >= 10) and data[:6] in (\'GIF87a\', \'GIF89a\'):\n+    if (size >= 10) and data[:6] in (b\'GIF87a\', b\'GIF89a\'):\n         # handle GIFs\n         content_type = \'image/gif\'\n         w, h = struct.unpack(\'<HH\', data[6:10])\n         width = int(w)\n         height = int(h)\n \n-    elif data[:8] == \'\\211PNG\\r\\n\\032\\n\':\n+    elif data[:8] == b\'\\211PNG\\r\\n\\032\\n\':\n         # handle PNG\n         content_type, width, height = process_png(data)\n \n-    elif data[:2] == \'\\377\\330\':\n+    elif data[:2] == b\'\\377\\330\':\n         # handle JPEGs\n         content_type, width, height = process_jpeg(data)\n \n-    elif (size >= 30) and data.startswith(\'BM\'):\n+    elif (size >= 30) and data.startswith(b\'BM\'):\n         # handle BMPs\n         kind = struct.unpack(\'<H\', data[14:16])[0]\n         if kind == 40:  # Windows 3.x bitmap\n             content_type = \'image/x-ms-bmp\'\n             width, height = struct.unpack(\'<LL\', data[18:26])\n \n-    elif (size >= 4) and data[:4] in [\'MM\\x00*\', \'II*\\x00\']:\n+    elif (size >= 4) and data[:4] in [b\'MM\\x00*\', b\'II*\\x00\']:\n         # handle TIFFs\n         content_type, width, height = process_tiff(data)\n \n     else:\n         # Use PIL / Pillow to determ Image Information\n         try:\n-            img = PIL.Image.open(StringIO(data))\n+            img = PIL.Image.open(BytesIO(data))\n             width, height = img.size\n             content_type = img.format\n         except Exception:\n             # TODO: determ wich error really happens\n             # Should happen if data is to short --> first_bytes\n             # happens also if data is an svg or another special format.\n-            log.warn(\n+            log.warning(\n                 \'PIL can not recognize the image. \'\n                 \'Image is probably broken or of a non-supported format.\'\n             )\n@@ -193,7 +194,7 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     """\n     orientation = 1  # if not set assume correct orrinetation --> 1\n     data = _ensure_data(image_data)\n-    img = PIL.Image.open(StringIO(data))\n+    img = PIL.Image.open(BytesIO(data))\n \n     exif_data = None\n     if \'exif\' in img.info:\n@@ -267,15 +268,18 @@ def rotate_image(image_data, method=None, REQUEST=None):\n         del(exif_data[\'Exif\'][piexif.ExifIFD.SceneType])\n         # This Element piexif.ExifIFD.SceneType cause error on dump\n         exif_bytes = piexif.dump(exif_data)\n-    output_image_data = StringIO()\n+\n+    output_image_data = BytesIO()\n     img.save(output_image_data, format=fmt, exif=exif_bytes)\n     width, height = img.size\n     return output_image_data.getvalue(), width, height, exif_data\n \n+\n @deprecate(\'use getHighPixelDensityScales instead\')\n def getRetinaScales():\n     return getHighPixelDensityScales()\n \n+\n def getHighPixelDensityScales():\n     registry = queryUtility(IRegistry)\n     if IImagingSchema and registry:\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex 6f49de0..31037c3 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from logging import getLogger\n-from six import StringIO\n+from six import BytesIO\n \n import struct\n \n@@ -15,9 +15,9 @@ def process_jpeg(data):\n     h = -1\n     size = len(data)\n \n-    if (size >= 2) and data.startswith(\'\\377\\330\'):  # handle JPEGs\n+    if (size >= 2) and data.startswith(b\'\\377\\330\'):  # handle JPEGs\n         content_type = \'image/jpeg\'\n-        jpeg = StringIO(data)\n+        jpeg = BytesIO(data)\n         jpeg.read(2)\n         b = jpeg.read(1)\n         try:\ndiff --git a/plone/namedfile/utils/png_utils.py b/plone/namedfile/utils/png_utils.py\nindex 1d42984..172402c 100644\n--- a/plone/namedfile/utils/png_utils.py\n+++ b/plone/namedfile/utils/png_utils.py\n@@ -17,17 +17,17 @@ def process_png(data):\n     # Bytes 0-7 are below, 4-byte chunk length, then \'IHDR\'\n     # and finally the 4-byte width, height\n     if (\n-        (size >= 24) and data.startswith(\'\\211PNG\\r\\n\\032\\n\') and\n-        (data[12:16] == \'IHDR\')\n+        (size >= 24) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\') and\n+        (data[12:16] == b\'IHDR\')\n     ):\n         content_type = \'image/png\'\n         w, h = struct.unpack(\'>LL\', data[16:24])\n \n     # Maybe this is for an older PNG version.\n-    elif (size >= 16) and data.startswith(\'\\211PNG\\r\\n\\032\\n\'):\n+    elif (size >= 16) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\'):\n         # Check to see if we have the right content type\n         content_type = \'image/png\'\n-        w, h = struct.unpack(\'>LL\', data[8:16])\n+        w, h = struct.unpack(b\'>LL\', data[8:16])\n \n     width = int(w)\n     height = int(h)\ndiff --git a/plone/namedfile/utils/tiff_utils.py b/plone/namedfile/utils/tiff_utils.py\nindex 416831f..bfdd01c 100644\n--- a/plone/namedfile/utils/tiff_utils.py\n+++ b/plone/namedfile/utils/tiff_utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from logging import getLogger\n-from six import StringIO\n+from six import BytesIO\n \n import struct\n \n@@ -42,7 +42,7 @@ def process_tiff(data):\n             log.info(\'Endian or 42 Check failed\')\n \n         if endian:\n-            tiff = StringIO(data)\n+            tiff = BytesIO(data)\n             tiff.read(4)  # Magic Header, could be skipped, already processed\n             offset = struct.unpack_from(endian + \'I\', tiff)  # first IFD offset\n             b = tiff.read(offset)\ndiff --git a/plone/namedfile/z3c-blobfile.zcml b/plone/namedfile/z3c-blobfile.zcml\nindex 282dbad..3b2ceb3 100644\n--- a/plone/namedfile/z3c-blobfile.zcml\n+++ b/plone/namedfile/z3c-blobfile.zcml\n@@ -1,5 +1,19 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n+  <!-- text for py3 -->\n+  <utility\n+      name="builtins.str"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.TextStorable"\n+      />\n+\n+  <!-- bytes for py3 -->\n+  <utility\n+      name="builtins.bytes"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.BytesStorable"\n+      />\n+\n   <utility\n       name="__builtin__.str"\n       provides=".interfaces.IStorage"\n@@ -24,11 +38,18 @@\n       factory=".storages.FileDescriptorStorable"\n       />\n \n+  <utility\n+      name="_io.BufferedReader"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.BufferedReaderStorable"\n+      />\n+\n   <utility\n       name="zope.publisher.browser.FileUpload"\n       provides=".interfaces.IStorage"\n       factory=".storages.FileUploadStorable"\n       />\n+\n   <utility\n       name="OFS.Image.Pdata"\n       provides=".interfaces.IStorage"\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/setup.cfg b/setup.cfg\nindex d80c466..06aa277 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -2,5 +2,5 @@\n create-wheel = yes\n \n # When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n+[bdist_wheel]\n+universal = 1\ndiff --git a/setup.py b/setup.py\nindex 0ecb963..5916673 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = \'4.3.dev0\'\n+version = \'5.0.4.dev0\'\n description = \'File types and fields for images, files and blob files with \' \\\n               \'filenames\'\n long_description = (\'\\n\\n\'.join([\n@@ -22,23 +22,26 @@\n     long_description=long_description,\n     classifiers=[\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n     keywords=\'plone named file image blob\',\n     author=\'Laurence Rowe, Martin Aspeli\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.python.org/pypi/plone.namedfile\',\n+    url=\'https://pypi.org/project/plone.namedfile\',\n     license=\'BSD\',\n-    packages=find_packages(exclude=[\'ez_setup\']),\n+    packages=find_packages(),\n     namespace_packages=[\'plone\'],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'plone.rfc822>=1.0b2\',\n+        \'piexif\',\n+        \'plone.rfc822>=2.0a1\',\n         \'plone.scale[storage] >=1.4.999\',\n         \'plone.schemaeditor\',\n         \'plone.supermodel\',\n@@ -49,7 +52,6 @@\n         \'zope.copy\',\n         \'zope.security\',\n         \'zope.traversing\',\n-        \'piexif\',\n     ],\n     extras_require={\n         \'test\': [\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-06-22T11:54:17+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/0a8111673de5cf3d6cacf0352626cbbd8158241f

Move changelog entry to towncrier

Files changed:
A news/65.bugfix
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 52da045..c09e00d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -40,9 +40,6 @@ Bug fixes:\n \n New features:\n \n-- It is now possible to customize in an easier way the ``@@images`` view\n-  [ale-rt]\n-- Target Zope 4 (test changes only).\n - Target Zope 4 (test changes only).\n \n - Python 3 compatibility\ndiff --git a/news/65.bugfix b/news/65.bugfix\nnew file mode 100644\nindex 0000000..8aa9c72\n--- /dev/null\n+++ b/news/65.bugfix\n@@ -0,0 +1 @@\n+It is now possible to customize in an easier way the ``@@images`` view [ale-rt]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-06-24T09:53:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/55a9f0a7e32dcc7554852afa38bb79d5a0fe0528

Merge pull request #65 from plone/allow-easier-customization

Allow easier customizations

Files changed:
A news/65.bugfix
M plone/namedfile/scaling.py

b'diff --git a/news/65.bugfix b/news/65.bugfix\nnew file mode 100644\nindex 0000000..8aa9c72\n--- /dev/null\n+++ b/news/65.bugfix\n@@ -0,0 +1 @@\n+It is now possible to customize in an easier way the ``@@images`` view [ale-rt]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 62b4a8c..b12b6f7 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -283,6 +283,7 @@ class ImageScaling(BrowserView):\n     # Ignore some stacks to help with accessing via webdav, otherwise you get a\n     # 404 NotFound error.\n     _ignored_stacks = (\'manage_DAVget\', \'manage_FTPget\')\n+    _scale_view_class = ImageScale\n \n     def publishTraverse(self, request, name):\n         """ used for traversal via publisher, i.e. when using as a url """\n@@ -302,7 +303,11 @@ def publishTraverse(self, request, name):\n             info = storage.get(name)\n             if info is None:\n                 raise NotFound(self, name, self.request)\n-            scale_view = ImageScale(self.context, self.request, **info)\n+            scale_view = self._scale_view_class(\n+                self.context,\n+                self.request,\n+                **info\n+            )\n             alsoProvides(scale_view, IStableImageScale)\n             return scale_view\n         else:\n@@ -310,7 +315,7 @@ def publishTraverse(self, request, name):\n             if \'.\' in name:\n                 name, ext = name.rsplit(\'.\', 1)\n             value = getattr(self.context, name)\n-            scale_view = ImageScale(\n+            scale_view = self._scale_view_class(\n                 self.context,\n                 self.request,\n                 data=value,\n@@ -324,7 +329,7 @@ def traverse(self, name, furtherPath):\n         # validate access\n         value = self.guarded_orig_image(name)\n         if not furtherPath:\n-            image = ImageScale(\n+            image = self._scale_view_class(\n                 self.context,\n                 self.request,\n                 data=value,\n@@ -446,7 +451,7 @@ def scale(\n             **parameters\n         )\n         info[\'fieldname\'] = fieldname\n-        scale_view = ImageScale(self.context, self.request, **info)\n+        scale_view = self._scale_view_class(self.context, self.request, **info)\n         return scale_view\n \n     def calculate_srcset(\n'

