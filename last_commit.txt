Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-04-27T09:07:12+02:00
Author: Thomas Schorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.restapi/commit/deb67708c4656c4a1466633eece0967918fa2c7b

update_password should check password validity (#1630)

* test password validity

* update changelog

* change status code to match the one used by PlonePAS.MembershipTool.setPassword

* add a test

Files changed:
A news/1630.bugfix
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/news/1630.bugfix b/news/1630.bugfix\nnew file mode 100644\nindex 000000000..69511f8c0\n--- /dev/null\n+++ b/news/1630.bugfix\n@@ -0,0 +1,2 @@\n+Respect Password Policy\n+[tschorr]\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex e2b117778..a032be99e 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -266,6 +266,7 @@ def update_password(self, data):\n         pas = getToolByName(self.context, "acl_users")\n         mt = getToolByName(self.context, "portal_membership")\n         pwt = getToolByName(self.context, "portal_password_reset")\n+        registration_tool = getToolByName(self.context, "portal_registration")\n \n         if target_user is None:\n             self.request.response.setStatus(404)\n@@ -273,7 +274,6 @@ def update_password(self, data):\n \n         # Send password reset mail\n         if list(data) == []:\n-            registration_tool = getToolByName(self.context, "portal_registration")\n             registration_tool.mailPassword(username, self.request)\n             return\n \n@@ -299,6 +299,13 @@ def update_password(self, data):\n         # Reset the password with a reset token\n         if reset_token:\n             try:\n+                err = registration_tool.testPasswordValidity(new_password)\n+                if err is not None:\n+                    return self._error(\n+                        400,\n+                        "Invalid password",\n+                        _(err),\n+                    )\n                 pwt.resetPassword(username, reset_token, new_password)\n             except InvalidRequestError:\n                 return self._error(\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 888d94b6b..6d355f2d4 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -724,6 +724,20 @@ def test_reset_with_token(self):\n         authed = self.portal.acl_users.authenticate("noam", "new_password", {})\n         self.assertTrue(authed)\n \n+    def test_reset_with_token_validates_password(self):\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n+        reset_info = reset_tool.requestReset("noam")\n+        token = reset_info["randomstring"]\n+        transaction.commit()\n+\n+        payload = {"reset_token": token, "new_password": "foo"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n+        transaction.commit()\n+\n+        self.assertEqual(response.status_code, 400)\n+        authed = self.portal.acl_users.authenticate("noam", "foo", {})\n+        self.assertFalse(authed)\n+\n     def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n         # enable use_email_as_login\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n'

