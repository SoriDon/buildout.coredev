Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-11-08T23:14:54+01:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/f038f1f3798e53473356e17bbea3216443242980

Add locust perf tests for querystring search

Files changed:
A performance/convert.py
A performance/querystring-search.py
M Jenkinsfile
M Makefile

b'diff --git a/Jenkinsfile b/Jenkinsfile\nindex 200d46117..6f65b49e9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -42,7 +42,9 @@ pipeline {\n         sh \'/opt/jmeter/bin/FilterResults.sh --input-file performance-volto-unfiltered.csv --output-file performance-volto.csv --exclude-label-regex true --exclude-labels ".*Testfolder.*"\'\n         sh "rm performance-volto-unfiltered.csv"\n \n-        // sh "bin/pip install locust"\n+        sh "bin/pip install locust"\n+        sh "make test-performance-locust-querystring-search-ci"\n+        sh "bin/python performance/convert.py -p example_stats.csv"\n         // sh "bin/locust -f performance/images.py --no-web -c 100 -r 10 --run-time 1m --host http://localhost:12345/Plone"\n \n         sh "bin/instance stop"\ndiff --git a/Makefile b/Makefile\nindex 431d5d8bb..580ec28c8 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -72,6 +72,14 @@ test:  ## Test\n test-performance:\n \tjmeter -n -t performance.jmx -l jmeter.jtl\n \n+.PHONY: Test Performance Locust Querystring Search\n+test-performance-locust-querystring-search:\n+\tbin/locust -f performance/querystring-search.py --host http://localhost:12345/Plone --users 100 --spawn-rate 5 --run-time 5m --autostart\n+\n+.PHONY: Test Performance Locust Querystring Search CI\n+test-performance-locust-querystring-search-ci:\n+\tbin/locust -f performance/querystring-search.py --host http://localhost:12345/Plone --users 100 --spawn-rate 5 --run-time 5m --headless --csv=example\n+\n .PHONY: Code Analysis\n code-analysis:  ## Code Analysis\n \tbin/code-analysis\ndiff --git a/performance/convert.py b/performance/convert.py\nnew file mode 100644\nindex 000000000..651a6cdd7\n--- /dev/null\n+++ b/performance/convert.py\n@@ -0,0 +1,83 @@\n+#!/usr/bin/python\n+# https://github.com/joncloud/locust-csv-to-junit-xml/blob/publish/main.py\n+\n+import csv\n+import datetime\n+import getopt\n+import sys\n+import xml.etree.ElementTree as ET\n+\n+\n+def main(argv):\n+    prefix = \'\'\n+\n+    try:\n+        opts, _ = getopt.getopt(sys.argv[1:], \'hp:\', [\'prefix=\'])\n+    except getopt.GetoptError:\n+        print(\'main.py -p <prefix>\')\n+        sys.exit(2)\n+    for opt, arg in opts:\n+        if opt == \'-h\':\n+            print(\'main.py -p <prefix>\')\n+            sys.exit()\n+        elif opt in ("-p", "--prefix"):\n+            prefix = arg\n+\n+    if prefix == \'\':\n+        raise Exception(\'Prefix was not assigned\')\n+\n+    testsuites, testsuite = create_testsuites()\n+    append_testcases(prefix, testsuite)\n+\n+    xml_tree = ET.ElementTree(testsuites)\n+    xml_tree.write("test_results.xml")\n+\n+\n+def create_testsuites():\n+    testsuites = ET.Element(\'testsuites\')\n+\n+    testsuite = ET.SubElement(testsuites, \'testsuite\')\n+    testsuite.set(\'name\', \'Locust Tests\')\n+\n+    timestamp = str(datetime.datetime.now()).replace(\n+        \' \',\n+        \'T\'\n+    )\n+    testsuite.set(\'timestamp\', timestamp)\n+\n+    return (testsuites, testsuite)\n+\n+\n+def append_testcases(prefix, testsuite):\n+    test_count = 0\n+    failure_count = 0\n+\n+    with open(prefix + \'_requests.csv\', mode=\'r\') as csv_file:\n+        csv_reader = csv.DictReader(csv_file)\n+\n+        line_count = 0\n+        for row in csv_reader:\n+\n+            if line_count > 0:\n+                row_method = row[\'Method\']\n+                row_name = row[\'Name\']\n+\n+                if row_method != \'None\' and row_name != \'Total\':\n+                    testcase = ET.SubElement(testsuite, \'testcase\')\n+\n+                    name = f\'{row_method}\\t{row_name} Average response time\'\n+                    testcase.set(\'name\', name)\n+\n+                    test_count += int(row[\'# requests\'])\n+                    failure_count += int(row[\'# failures\'])\n+                    avg_response_s = float(row[\'Average response time\']) / 1000\n+                    testcase.set(\'time\', str(avg_response_s))\n+\n+            line_count += 1\n+\n+        testsuite.set(\'tests\', str(test_count))\n+        testsuite.set(\'failures\', str(failure_count))\n+\n+\n+if __name__ == \'__main__\':\n+    main(sys.argv[1:])\n\\ No newline at end of file\ndiff --git a/performance/querystring-search.py b/performance/querystring-search.py\nnew file mode 100644\nindex 000000000..83e68c2bf\n--- /dev/null\n+++ b/performance/querystring-search.py\n@@ -0,0 +1,96 @@\n+from locust import HttpUser, task\n+\n+class HelloWorldUser(HttpUser):\n+\n+    @task\n+    def querystring_search_root(self):\n+        headers = {\n+            "Accept": "application/json",\n+            "Authorization": "Basic YWRtaW46YWRtaW4=",\n+            "Content-Type": "application/json",\n+        }\n+        self.client.post(\n+            "/@querystring-search",\n+            headers=headers,\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type", \n+                        "o": "plone.app.querystring.operation.selection.any", \n+                        "v": ["Document"]\n+                    }\n+                ]\n+            },\n+            name="Querystring Search (Root)",\n+        )\n+\n+\n+    @task\n+    def querystring_search_root_fullobjects_true(self):\n+        headers = {\n+            "Accept": "application/json",\n+            "Authorization": "Basic YWRtaW46YWRtaW4=",\n+            "Content-Type": "application/json",\n+        }\n+        self.client.post(\n+            "/@querystring-search",\n+            headers=headers,\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type", \n+                        "o": "plone.app.querystring.operation.selection.any", \n+                        "v": ["Document"]\n+                    }\n+                ],\n+                "fullobjects": 1\n+            },\n+            name="Querystring Search (Root, Fullobjects=1)",\n+        )\n+\n+\n+    @task\n+    def querystring_search_content(self):\n+        headers = {\n+            "Accept": "application/json",\n+            "Authorization": "Basic YWRtaW46YWRtaW4=",\n+            "Content-Type": "application/json",\n+        }\n+        self.client.post(\n+            "/testfolder-read/document/@querystring-search",\n+            headers=headers,\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type", \n+                        "o": "plone.app.querystring.operation.selection.any", \n+                        "v": ["Document"]\n+                    }\n+                ]\n+            },\n+            name="Querystring Search (Content)",\n+        )\n+\n+\n+    @task\n+    def querystring_search_content_fullobjects_true(self):\n+        headers = {\n+            "Accept": "application/json",\n+            "Authorization": "Basic YWRtaW46YWRtaW4=",\n+            "Content-Type": "application/json",\n+        }\n+        self.client.post(\n+            "/testfolder-read/document/@querystring-search",\n+            headers=headers,\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type", \n+                        "o": "plone.app.querystring.operation.selection.any", \n+                        "v": ["Document"]\n+                    }\n+                ],\n+                "fullobjects": 1\n+            },\n+            name="Querystring Search (Content, Fullobjects=1)",\n+        )\n'

