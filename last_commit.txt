Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-06-08T14:53:06+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/a32acaf3428969b2326c840b8a1aa8db383cb7df

Add new and enhanced link widget.

Files changed:
A plone/app/z3cform/templates/link_input.pt
M CHANGES.rst
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/utils.py
M plone/app/z3cform/widget.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8b5ecc0..a1e0223 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Add new and enhanced link widget.
+  [tomgross, thet]
+
 - Fix broken ``get_tinymce_options`` when called with non-contentish contexts like form or field contexts.
   [thet]
 
diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml
index 1849e0b..eed91e2 100644
--- a/plone/app/z3cform/configure.zcml
+++ b/plone/app/z3cform/configure.zcml
@@ -118,6 +118,13 @@
       template="templates/object_input.pt"
       />
 
+  <z3c:widgetTemplate
+      mode="input"
+      widget=".interfaces.ILinkWidget"
+      layer=".interfaces.IPloneFormLayer"
+      template="templates/link_input.pt"
+      />
+
   <browser:page
       name="z3cform_validate_field"
       for="*"
@@ -136,6 +143,7 @@
   <adapter factory=".converters.QueryStringDataConverter" />
   <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />
   <adapter factory=".converters.RelatedItemsDataConverter" />
+  <adapter factory=".converters.LinkWidgetDataConverter" />
 
   <!-- widget registration stuff -->
   <class class=".widget.DateWidget">
@@ -184,4 +192,8 @@
            for="plone.app.textfield.interfaces.IRichText
                 plone.app.z3cform.interfaces.IPloneFormLayer"/>
 
+  <adapter factory=".widget.LinkFieldWidget"
+           for="z3c.form.interfaces.ITextWidget
+                plone.app.z3cform.interfaces.IPloneFormLayer"/>
+
 </configure>
diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py
index d2dbebd..8693fe2 100644
--- a/plone/app/z3cform/converters.py
+++ b/plone/app/z3cform/converters.py
@@ -4,9 +4,11 @@
 from plone.app.z3cform.interfaces import IAjaxSelectWidget
 from plone.app.z3cform.interfaces import IDatetimeWidget
 from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import ILinkWidget
 from plone.app.z3cform.interfaces import IQueryStringWidget
 from plone.app.z3cform.interfaces import IRelatedItemsWidget
 from plone.app.z3cform.interfaces import ISelectWidget
+from plone.app.z3cform.utils import replace_link_variables_by_paths
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_callable
@@ -303,3 +305,39 @@ def toFieldValue(self, value):
         if not value:
             return self.field.missing_value
         return value
+
+
+@adapter(IField, ILinkWidget)
+class LinkWidgetDataConverter(BaseDataConverter):
+    """Data converter for the enhanced link widget."""
+
+    def toWidgetValue(self, value):
+        value = super(LinkWidgetDataConverter, self).toWidgetValue(value)
+        result = {'internal': u'',
+                  'external': u'',
+                  'email': u'',
+                  'email_subject': u''}
+        uuid = None
+        if value.startswith('mailto:'):
+            value = value[7:]   # strip mailto from beginning
+            if '?subject=' in value:
+                email, email_subject = value.split('?subject=')
+                result['email'] = email
+                result['email_subject'] = email_subject
+            else:
+                result['email'] = value
+        else:
+            if '/resolveuid/' in value:
+                result['internal'] = value.rsplit('/', 1)[-1]
+            else:
+                portal = getSite()
+                path = replace_link_variables_by_paths(portal, value)
+                path = path[len(portal.absolute_url())+1:].encode('ascii', 'ignore')  # noqa
+                obj = portal.unrestrictedTraverse(path=path, default=None)
+                if obj is not None:
+                    uuid = IUUID(obj, None)
+            if uuid is not None:
+                result['internal'] = uuid
+            else:
+                result['external'] = value
+        return result
diff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py
index eadf50e..0243ca7 100644
--- a/plone/app/z3cform/interfaces.py
+++ b/plone/app/z3cform/interfaces.py
@@ -46,3 +46,7 @@ class IRelatedItemsWidget(ITextWidget):
 
 class IRichTextWidget(patextfield_IRichTextWidget):
     """Marker interface for the TinyMCEWidget."""
+
+
+class ILinkWidget(ITextWidget):
+    """Marker interface for the enhanced link widget."""
diff --git a/plone/app/z3cform/templates/link_input.pt b/plone/app/z3cform/templates/link_input.pt
new file mode 100644
index 0000000..3f19413
--- /dev/null
+++ b/plone/app/z3cform/templates/link_input.pt
@@ -0,0 +1,51 @@
+<div>
+  <div class="linkModal">
+
+    <div class="linkTypes pat-autotoc autotabs"
+         data-pat-autotoc="section:span.linkType;levels:span.linkLabel;">
+
+      <span class="linkType internal" data-linkType="internal">
+        <span class="linkLabel" i18n:translate="label_internal_url">Internal</span>
+        <div>
+          <div class="form-group main">
+            <!-- this gives the name to the "linkType" -->
+            <input type="text" name="internal" class="pat-relateditems"
+                    tal:attributes="data-pat-relateditems view/pattern_data;
+                                    value view/value/internal | nothing;
+                                    name string:${view/name}.internal" />
+          </div>
+        </div>
+      </span>
+
+      <span class="linkType external" data-linkType="external">
+        <span class="linkLabel" i18n:translate="label_external_url">External</span>
+        <div class="form-group main">
+          <label for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>
+          <input type="text" name="external"
+                 tal:attributes="name string:${view/name}.external;
+                                 value view/value/external | nothing" />
+        </div>
+      </span>
+
+      <span class="linkType email" data-linkType="email">
+        <span class="linkLabel" i18n:translate="label_email_url">Email</span>
+        <div class="form-inline">
+          <div class="form-group main">
+            <label i18n:translate="help_email_url">Email Address</label>
+            <input type="text" name="email"
+                   tal:attributes="name string:${view/name}.email;
+                                   value view/value/email | nothing" />
+          </div>
+          <div class="form-group">
+            <label i18n:translate="help_email_url_subject">Email Subject (optional)</label>
+            <input type="text" name="subject"
+                   tal:attributes="name string:${view/name}.subject;
+                                   value view/value/email_subject | nothing" />
+          </div>
+        </div>
+      </span>
+
+    </div><!-- / tabs -->
+
+  </div>
+</div>
diff --git a/plone/app/z3cform/utils.py b/plone/app/z3cform/utils.py
index 154d38e..f7ee27a 100644
--- a/plone/app/z3cform/utils.py
+++ b/plone/app/z3cform/utils.py
@@ -73,3 +73,35 @@ def call_callables(value, *args, **kwargs):
             for k, v in value.items()
         }
     return ret
+
+
+def replace_link_variables_by_paths(context, url):
+    """Take an `url` and replace the variables "${navigation_root_url}" and
+    "${portal_url}" by the corresponding paths. `context` is the acquisition
+    context.
+    """
+
+    def _replace_variable_by_path(url, variable, obj):
+        path = '/'.join(obj.getPhysicalPath())
+        return url.replace(variable, path)
+
+    if not url:
+        return url
+
+    portal_state = context.restrictedTraverse('@@plone_portal_state')
+
+    if '${navigation_root_url}' in url:
+        url = _replace_variable_by_path(
+            url,
+            '${navigation_root_url}',
+            portal_state.navigation_root()
+        )
+
+    if '${portal_url}' in url:
+        url = _replace_variable_by_path(
+            url,
+            '${portal_url}',
+            portal_state.portal()
+        )
+
+    return url
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index 39d4047..762f4df 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -21,6 +21,7 @@
 from plone.app.z3cform.interfaces import IAjaxSelectWidget
 from plone.app.z3cform.interfaces import IDatetimeWidget
 from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import ILinkWidget
 from plone.app.z3cform.interfaces import IQueryStringWidget
 from plone.app.z3cform.interfaces import IRelatedItemsWidget
 from plone.app.z3cform.interfaces import IRichTextWidget
@@ -30,6 +31,7 @@
 from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IEditingSchema
+from Products.CMFPlone.utils import safe_unicode
 from UserDict import UserDict
 from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget
 from z3c.form.browser.text import TextWidget as z3cform_TextWidget
@@ -42,6 +44,7 @@
 from z3c.form.widget import Widget
 from zope.component import ComponentLookupError
 from zope.component import getUtility
+from zope.component.hooks import getSite
 from zope.i18n import translate
 from zope.interface import implementer
 from zope.interface import implementer_only
@@ -686,6 +689,44 @@ def render(self):
         return super(RichTextWidget, self).render()
 
 
+@implementer_only(ILinkWidget)
+class LinkWidget(z3cform_TextWidget):
+    """Implementation of enhanced link widget.
+
+    .. note::
+        Unlike the others here, this is not a plone.app.widgets based widget
+        and it uses it's own template.
+    """
+
+    def pattern_data(self):
+        pattern_data = {
+            'vocabularyUrl': '{0}/@@getVocabulary?name=plone.app.vocabularies.Catalog'.format(  # noqa
+                getSite().absolute_url(0)
+            ),
+            'maximumSelectionSize': 1
+        }
+        return json.dumps(pattern_data)
+
+    def extract(self, default=NO_VALUE):
+        form = self.request.form
+        internal = form.get(self.name + '.internal')
+        external = form.get(self.name + '.external')
+        email = form.get(self.name + '.email')
+        if internal:
+            url = '${portal_url}/resolveuid/' + internal
+        elif email:
+            subject = form.get(self.name + '.subject')
+            if not subject:
+                url = 'mailto:' + email
+            else:
+                url = 'mailto:{}?subject={}'.format(email, subject)
+        else:
+            url = external   # the default is `http://` so we land here
+        if url:
+            self.request[self.name] = safe_unicode(url)
+        return super(LinkWidget, self).extract(default=default)
+
+
 @implementer(IFieldWidget)
 def DateFieldWidget(field, request):
     widget = FieldWidget(field, DateWidget(request))
@@ -731,3 +772,8 @@ def QueryStringFieldWidget(field, request, extra=None):
     if extra is not None:
         request = extra
     return FieldWidget(field, QueryStringWidget(request))
+
+
+@implementer(IFieldWidget)
+def LinkFieldWidget(field, request):
+    return FieldWidget(field, LinkWidget(request))


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-06-08T15:21:28+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/fc7065a50869a1bc3fa5af989562fe463308da37

accept mailto: already present in value. plus: tests.

Files changed:
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index f8c89d4..977a7bc 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -33,6 +33,7 @@
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
+import json
 import mock
 import pytz
 import unittest
@@ -1427,3 +1428,77 @@ def test_dx_tinymcewidget_multiple_mimetypes_edit(self):
             self.assertTrue(
                 '<option value="text/plain" selected="selected">' in rendered)
             self.assertTrue('pat-tinymce' not in rendered)
+
+
+class LinkWidgetIntegrationTests(unittest.TestCase):
+
+    layer = PAZ3CForm_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
+        setRequest(self.request)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+    def test_link_widget__pattern_options(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+
+        pattern_data = json.loads(widget.pattern_data())
+        self.assertEqual(
+            pattern_data['vocabularyUrl'],
+            'http://nohost/plone/@@getVocabulary?name=plone.app.vocabularies.Catalog'  # noqa
+        )
+        self.assertEqual(pattern_data['maximumSelectionSize'], 1)
+
+    def test_link_widget__extract_internal(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.internal'] = 'abc'
+        self.assertEqual(
+            widget.extract(),
+            u'${portal_url}/resolveuid/abc'
+        )
+
+    def test_link_widget__extract_external(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.external'] = 'https://plone.org'
+        self.assertEqual(
+            widget.extract(),
+            u'https://plone.org'
+        )
+
+    def test_link_widget__extract_email(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.email'] = 'dev@plone.org'
+        self.assertEqual(
+            widget.extract(),
+            u'mailto:dev@plone.org'
+        )
+
+    def test_link_widget__extract_email_including_mailto(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.email'] = 'mailto:dev@plone.org'
+        self.assertEqual(
+            widget.extract(),
+            u'mailto:dev@plone.org'
+        )
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index 762f4df..966f7a7 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -716,14 +716,16 @@ def extract(self, default=NO_VALUE):
             url = '${portal_url}/resolveuid/' + internal
         elif email:
             subject = form.get(self.name + '.subject')
+            if email[:7] != 'mailto:':
+                email = 'mailto:' + email
             if not subject:
-                url = 'mailto:' + email
+                url = email
             else:
-                url = 'mailto:{}?subject={}'.format(email, subject)
+                url = '{}?subject={}'.format(email, subject)
         else:
             url = external   # the default is `http://` so we land here
         if url:
-            self.request[self.name] = safe_unicode(url)
+            self.request.form[self.name] = safe_unicode(url)
         return super(LinkWidget, self).extract(default=default)
 
 


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-06-08T17:20:10+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/0b97cb4842a90d14550c0225b23934772252cb7e

Merge pull request #69 from plone/thet-betterlinkwidget

A better link widget

Files changed:
A plone/app/z3cform/templates/link_input.pt
M CHANGES.rst
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/utils.py
M plone/app/z3cform/widget.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8b5ecc0..a1e0223 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Add new and enhanced link widget.
+  [tomgross, thet]
+
 - Fix broken ``get_tinymce_options`` when called with non-contentish contexts like form or field contexts.
   [thet]
 
diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml
index 1849e0b..eed91e2 100644
--- a/plone/app/z3cform/configure.zcml
+++ b/plone/app/z3cform/configure.zcml
@@ -118,6 +118,13 @@
       template="templates/object_input.pt"
       />
 
+  <z3c:widgetTemplate
+      mode="input"
+      widget=".interfaces.ILinkWidget"
+      layer=".interfaces.IPloneFormLayer"
+      template="templates/link_input.pt"
+      />
+
   <browser:page
       name="z3cform_validate_field"
       for="*"
@@ -136,6 +143,7 @@
   <adapter factory=".converters.QueryStringDataConverter" />
   <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />
   <adapter factory=".converters.RelatedItemsDataConverter" />
+  <adapter factory=".converters.LinkWidgetDataConverter" />
 
   <!-- widget registration stuff -->
   <class class=".widget.DateWidget">
@@ -184,4 +192,8 @@
            for="plone.app.textfield.interfaces.IRichText
                 plone.app.z3cform.interfaces.IPloneFormLayer"/>
 
+  <adapter factory=".widget.LinkFieldWidget"
+           for="z3c.form.interfaces.ITextWidget
+                plone.app.z3cform.interfaces.IPloneFormLayer"/>
+
 </configure>
diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py
index d2dbebd..8693fe2 100644
--- a/plone/app/z3cform/converters.py
+++ b/plone/app/z3cform/converters.py
@@ -4,9 +4,11 @@
 from plone.app.z3cform.interfaces import IAjaxSelectWidget
 from plone.app.z3cform.interfaces import IDatetimeWidget
 from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import ILinkWidget
 from plone.app.z3cform.interfaces import IQueryStringWidget
 from plone.app.z3cform.interfaces import IRelatedItemsWidget
 from plone.app.z3cform.interfaces import ISelectWidget
+from plone.app.z3cform.utils import replace_link_variables_by_paths
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_callable
@@ -303,3 +305,39 @@ def toFieldValue(self, value):
         if not value:
             return self.field.missing_value
         return value
+
+
+@adapter(IField, ILinkWidget)
+class LinkWidgetDataConverter(BaseDataConverter):
+    """Data converter for the enhanced link widget."""
+
+    def toWidgetValue(self, value):
+        value = super(LinkWidgetDataConverter, self).toWidgetValue(value)
+        result = {'internal': u'',
+                  'external': u'',
+                  'email': u'',
+                  'email_subject': u''}
+        uuid = None
+        if value.startswith('mailto:'):
+            value = value[7:]   # strip mailto from beginning
+            if '?subject=' in value:
+                email, email_subject = value.split('?subject=')
+                result['email'] = email
+                result['email_subject'] = email_subject
+            else:
+                result['email'] = value
+        else:
+            if '/resolveuid/' in value:
+                result['internal'] = value.rsplit('/', 1)[-1]
+            else:
+                portal = getSite()
+                path = replace_link_variables_by_paths(portal, value)
+                path = path[len(portal.absolute_url())+1:].encode('ascii', 'ignore')  # noqa
+                obj = portal.unrestrictedTraverse(path=path, default=None)
+                if obj is not None:
+                    uuid = IUUID(obj, None)
+            if uuid is not None:
+                result['internal'] = uuid
+            else:
+                result['external'] = value
+        return result
diff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py
index eadf50e..0243ca7 100644
--- a/plone/app/z3cform/interfaces.py
+++ b/plone/app/z3cform/interfaces.py
@@ -46,3 +46,7 @@ class IRelatedItemsWidget(ITextWidget):
 
 class IRichTextWidget(patextfield_IRichTextWidget):
     """Marker interface for the TinyMCEWidget."""
+
+
+class ILinkWidget(ITextWidget):
+    """Marker interface for the enhanced link widget."""
diff --git a/plone/app/z3cform/templates/link_input.pt b/plone/app/z3cform/templates/link_input.pt
new file mode 100644
index 0000000..3f19413
--- /dev/null
+++ b/plone/app/z3cform/templates/link_input.pt
@@ -0,0 +1,51 @@
+<div>
+  <div class="linkModal">
+
+    <div class="linkTypes pat-autotoc autotabs"
+         data-pat-autotoc="section:span.linkType;levels:span.linkLabel;">
+
+      <span class="linkType internal" data-linkType="internal">
+        <span class="linkLabel" i18n:translate="label_internal_url">Internal</span>
+        <div>
+          <div class="form-group main">
+            <!-- this gives the name to the "linkType" -->
+            <input type="text" name="internal" class="pat-relateditems"
+                    tal:attributes="data-pat-relateditems view/pattern_data;
+                                    value view/value/internal | nothing;
+                                    name string:${view/name}.internal" />
+          </div>
+        </div>
+      </span>
+
+      <span class="linkType external" data-linkType="external">
+        <span class="linkLabel" i18n:translate="label_external_url">External</span>
+        <div class="form-group main">
+          <label for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>
+          <input type="text" name="external"
+                 tal:attributes="name string:${view/name}.external;
+                                 value view/value/external | nothing" />
+        </div>
+      </span>
+
+      <span class="linkType email" data-linkType="email">
+        <span class="linkLabel" i18n:translate="label_email_url">Email</span>
+        <div class="form-inline">
+          <div class="form-group main">
+            <label i18n:translate="help_email_url">Email Address</label>
+            <input type="text" name="email"
+                   tal:attributes="name string:${view/name}.email;
+                                   value view/value/email | nothing" />
+          </div>
+          <div class="form-group">
+            <label i18n:translate="help_email_url_subject">Email Subject (optional)</label>
+            <input type="text" name="subject"
+                   tal:attributes="name string:${view/name}.subject;
+                                   value view/value/email_subject | nothing" />
+          </div>
+        </div>
+      </span>
+
+    </div><!-- / tabs -->
+
+  </div>
+</div>
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index f8c89d4..977a7bc 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -33,6 +33,7 @@
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
+import json
 import mock
 import pytz
 import unittest
@@ -1427,3 +1428,77 @@ def test_dx_tinymcewidget_multiple_mimetypes_edit(self):
             self.assertTrue(
                 '<option value="text/plain" selected="selected">' in rendered)
             self.assertTrue('pat-tinymce' not in rendered)
+
+
+class LinkWidgetIntegrationTests(unittest.TestCase):
+
+    layer = PAZ3CForm_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
+        setRequest(self.request)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+    def test_link_widget__pattern_options(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+
+        pattern_data = json.loads(widget.pattern_data())
+        self.assertEqual(
+            pattern_data['vocabularyUrl'],
+            'http://nohost/plone/@@getVocabulary?name=plone.app.vocabularies.Catalog'  # noqa
+        )
+        self.assertEqual(pattern_data['maximumSelectionSize'], 1)
+
+    def test_link_widget__extract_internal(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.internal'] = 'abc'
+        self.assertEqual(
+            widget.extract(),
+            u'${portal_url}/resolveuid/abc'
+        )
+
+    def test_link_widget__extract_external(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.external'] = 'https://plone.org'
+        self.assertEqual(
+            widget.extract(),
+            u'https://plone.org'
+        )
+
+    def test_link_widget__extract_email(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.email'] = 'dev@plone.org'
+        self.assertEqual(
+            widget.extract(),
+            u'mailto:dev@plone.org'
+        )
+
+    def test_link_widget__extract_email_including_mailto(self):
+        from plone.app.z3cform.widget import LinkWidget
+        widget = LinkWidget(self.request)
+        widget.context = self.portal
+        widget.name = 'testlinkwidget'
+        widget.update()
+
+        self.request.form['testlinkwidget.email'] = 'mailto:dev@plone.org'
+        self.assertEqual(
+            widget.extract(),
+            u'mailto:dev@plone.org'
+        )
diff --git a/plone/app/z3cform/utils.py b/plone/app/z3cform/utils.py
index 154d38e..f7ee27a 100644
--- a/plone/app/z3cform/utils.py
+++ b/plone/app/z3cform/utils.py
@@ -73,3 +73,35 @@ def call_callables(value, *args, **kwargs):
             for k, v in value.items()
         }
     return ret
+
+
+def replace_link_variables_by_paths(context, url):
+    """Take an `url` and replace the variables "${navigation_root_url}" and
+    "${portal_url}" by the corresponding paths. `context` is the acquisition
+    context.
+    """
+
+    def _replace_variable_by_path(url, variable, obj):
+        path = '/'.join(obj.getPhysicalPath())
+        return url.replace(variable, path)
+
+    if not url:
+        return url
+
+    portal_state = context.restrictedTraverse('@@plone_portal_state')
+
+    if '${navigation_root_url}' in url:
+        url = _replace_variable_by_path(
+            url,
+            '${navigation_root_url}',
+            portal_state.navigation_root()
+        )
+
+    if '${portal_url}' in url:
+        url = _replace_variable_by_path(
+            url,
+            '${portal_url}',
+            portal_state.portal()
+        )
+
+    return url
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index 39d4047..966f7a7 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -21,6 +21,7 @@
 from plone.app.z3cform.interfaces import IAjaxSelectWidget
 from plone.app.z3cform.interfaces import IDatetimeWidget
 from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import ILinkWidget
 from plone.app.z3cform.interfaces import IQueryStringWidget
 from plone.app.z3cform.interfaces import IRelatedItemsWidget
 from plone.app.z3cform.interfaces import IRichTextWidget
@@ -30,6 +31,7 @@
 from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IEditingSchema
+from Products.CMFPlone.utils import safe_unicode
 from UserDict import UserDict
 from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget
 from z3c.form.browser.text import TextWidget as z3cform_TextWidget
@@ -42,6 +44,7 @@
 from z3c.form.widget import Widget
 from zope.component import ComponentLookupError
 from zope.component import getUtility
+from zope.component.hooks import getSite
 from zope.i18n import translate
 from zope.interface import implementer
 from zope.interface import implementer_only
@@ -686,6 +689,46 @@ def render(self):
         return super(RichTextWidget, self).render()
 
 
+@implementer_only(ILinkWidget)
+class LinkWidget(z3cform_TextWidget):
+    """Implementation of enhanced link widget.
+
+    .. note::
+        Unlike the others here, this is not a plone.app.widgets based widget
+        and it uses it's own template.
+    """
+
+    def pattern_data(self):
+        pattern_data = {
+            'vocabularyUrl': '{0}/@@getVocabulary?name=plone.app.vocabularies.Catalog'.format(  # noqa
+                getSite().absolute_url(0)
+            ),
+            'maximumSelectionSize': 1
+        }
+        return json.dumps(pattern_data)
+
+    def extract(self, default=NO_VALUE):
+        form = self.request.form
+        internal = form.get(self.name + '.internal')
+        external = form.get(self.name + '.external')
+        email = form.get(self.name + '.email')
+        if internal:
+            url = '${portal_url}/resolveuid/' + internal
+        elif email:
+            subject = form.get(self.name + '.subject')
+            if email[:7] != 'mailto:':
+                email = 'mailto:' + email
+            if not subject:
+                url = email
+            else:
+                url = '{}?subject={}'.format(email, subject)
+        else:
+            url = external   # the default is `http://` so we land here
+        if url:
+            self.request.form[self.name] = safe_unicode(url)
+        return super(LinkWidget, self).extract(default=default)
+
+
 @implementer(IFieldWidget)
 def DateFieldWidget(field, request):
     widget = FieldWidget(field, DateWidget(request))
@@ -731,3 +774,8 @@ def QueryStringFieldWidget(field, request, extra=None):
     if extra is not None:
         request = extra
     return FieldWidget(field, QueryStringWidget(request))
+
+
+@implementer(IFieldWidget)
+def LinkFieldWidget(field, request):
+    return FieldWidget(field, LinkWidget(request))


