Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-01T23:19:43+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/813a653d022a3eb3e5f87f0ddb8824eb32778bc5

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5623f8b3.internal
A tox.ini
M pyproject.toml
M setup.cfg
D .travis.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4f67994\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex b7d0bd6..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-language: python\n-python:\n-- 2.7\n-- 3.5\n-- 3.6\n-- 3.7\n-- 3.8\n-cache:\n-  directories:\n-  - eggs\n-install:\n-- pip install zc.buildout\n-- buildout -N -t 3\n-script: bin/test\ndiff --git a/news/5623f8b3.internal b/news/5623f8b3.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5623f8b3.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 3da53f4..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n-[tool.dependencychecker]\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -20,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 5f0dbd3..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    default.nix\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..3de7063\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,54 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.alterego {posargs}\n+extras =\n+    test\n'

Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-01T23:21:28+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/2b851aa56d1346a57df52f279bcbe2fc7832cbf2

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
M setup.py

b"diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__('pkg_resources').declare_namespace(__name__)\ndiff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py\nindex 94c8c09..398f838 100644\n--- a/plone/alterego/dynamic.py\n+++ b/plone/alterego/dynamic.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.alterego.interfaces import IDynamicModule\n from plone.alterego.interfaces import IDynamicObjectFactory\n from types import ModuleType\n@@ -21,7 +20,7 @@ def __getattr__(self, name):\n         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)\n         if factory is None:\n             raise AttributeError(\n-                'Cannot find dynamic object factory for module {0}'.format(\n+                'Cannot find dynamic object factory for module {}'.format(\n                     self.__name__,\n                 )\n             )\n@@ -30,7 +29,7 @@ def __getattr__(self, name):\n         if obj is None:\n             raise AttributeError(\n                 'Dynamic module factory did not want to create '\n-                '{0} in {1}'.format(name, self.__name__)\n+                '{} in {}'.format(name, self.__name__)\n             )\n \n         return obj\ndiff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py\nindex 485778f..c7afe37 100644\n--- a/plone/alterego/interfaces.py\n+++ b/plone/alterego/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/alterego/tests.py b/plone/alterego/tests.py\nindex d26a4ef..f8a556f 100644\n--- a/plone/alterego/tests.py\n+++ b/plone/alterego/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import doctest\n import sys\n import unittest\ndiff --git a/setup.py b/setup.py\nindex c2b34b5..a1eff36 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n"

Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-01T23:22:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/faad3ce600e182e1957b991c37c47fa9168ecd6f

chore: black

Files changed:
M plone/__init__.py
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py\nindex 398f838..9512bbd 100644\n--- a/plone/alterego/dynamic.py\n+++ b/plone/alterego/dynamic.py\n@@ -9,18 +9,16 @@\n \n @implementer(IDynamicModule)\n class DynamicModule(ModuleType):\n-    """A module that can create objects on the fly.\n-    """\n+    """A module that can create objects on the fly."""\n \n     def __getattr__(self, name):\n-\n-        if name == \'__path__\':\n-            raise AttributeError(\'Dynamic modules do not have __path__\')\n+        if name == "__path__":\n+            raise AttributeError("Dynamic modules do not have __path__")\n \n         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)\n         if factory is None:\n             raise AttributeError(\n-                \'Cannot find dynamic object factory for module {}\'.format(\n+                "Cannot find dynamic object factory for module {}".format(\n                     self.__name__,\n                 )\n             )\n@@ -28,8 +26,8 @@ def __getattr__(self, name):\n         obj = factory(name, self)\n         if obj is None:\n             raise AttributeError(\n-                \'Dynamic module factory did not want to create \'\n-                \'{} in {}\'.format(name, self.__name__)\n+                "Dynamic module factory did not want to create "\n+                "{} in {}".format(name, self.__name__)\n             )\n \n         return obj\n@@ -41,4 +39,4 @@ def create(dotted_name):\n     return dynamic\n \n \n-__all__ = (\'create\',)\n+__all__ = ("create",)\ndiff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py\nindex c7afe37..7ca6fdf 100644\n--- a/plone/alterego/interfaces.py\n+++ b/plone/alterego/interfaces.py\n@@ -2,8 +2,7 @@\n \n \n class IDynamicModule(Interface):\n-    """Marker interface for dynamic modules\n-    """\n+    """Marker interface for dynamic modules"""\n \n \n class IDynamicObjectFactory(Interface):\ndiff --git a/plone/alterego/tests.py b/plone/alterego/tests.py\nindex f8a556f..35d20a3 100644\n--- a/plone/alterego/tests.py\n+++ b/plone/alterego/tests.py\n@@ -4,8 +4,8 @@\n import zope.component.testing\n \n \n-SKIP_PYTHON_2 = doctest.register_optionflag(\'SKIP_PYTHON_2\')\n-SKIP_PYTHON_3 = doctest.register_optionflag(\'SKIP_PYTHON_3\')\n+SKIP_PYTHON_2 = doctest.register_optionflag("SKIP_PYTHON_2")\n+SKIP_PYTHON_3 = doctest.register_optionflag("SKIP_PYTHON_3")\n \n \n class PolyglotOutputChecker(doctest.OutputChecker):\n@@ -15,15 +15,16 @@ def check_output(self, want, got, optionflags):\n         elif optionflags & SKIP_PYTHON_2:\n             return True\n \n-        return doctest.OutputChecker.check_output(\n-            self, want, got, optionflags)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocFileSuite(\n-            \'alterego.txt\',\n-            tearDown=zope.component.testing.tearDown,\n-            checker=PolyglotOutputChecker(),\n-        ),\n-    ))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                "alterego.txt",\n+                tearDown=zope.component.testing.tearDown,\n+                checker=PolyglotOutputChecker(),\n+            ),\n+        )\n+    )\ndiff --git a/setup.py b/setup.py\nindex a1eff36..fe85b2b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,50 +2,47 @@\n from setuptools import setup\n \n \n-version = \'1.1.6.dev0\'\n+version = "1.1.6.dev0"\n \n setup(\n-    name=\'plone.alterego\',\n+    name="plone.alterego",\n     version=version,\n-    description=\'Low level support for dynamic modules\',\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(\'CHANGES.rst\').read()),\n+    description="Low level support for dynamic modules",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 4.3\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 4.3",\n+        "Framework :: Plone :: 5.0",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n+        "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.5",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'Plone schema interface\',\n-    author=\'Laurence Rowe\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.alterego\',\n-    license=\'LGPL\',\n+    keywords="Plone schema interface",\n+    author="Laurence Rowe",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.alterego",\n+    license="LGPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.interface\',\n+        "setuptools",\n+        "zope.component",\n+        "zope.interface",\n     ],\n-    extras_require={\n-        \'test\': []\n-    },\n+    extras_require={"test": []},\n     entry_points="""\n     # -*- Entry points: -*-\n     """,\n'

Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-01T23:27:29+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/60c3a62d3accd9cd46e660a0e4e79e9b5860fab2

feat: drop python 2 code paths

Files changed:
M plone/alterego/alterego.txt
M plone/alterego/tests.py

b'diff --git a/plone/alterego/alterego.txt b/plone/alterego/alterego.txt\nindex 345c484..2fd1e79 100644\n--- a/plone/alterego/alterego.txt\n+++ b/plone/alterego/alterego.txt\n@@ -108,12 +108,7 @@ We could then create an on-demand interface easily:\n     >>> interface.alsoProvides(c1, dynamic.ITwo)\n     Creating ITwo in plone.alterego.tests.dynamic\n \n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3\n-    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n-     <InterfaceClass __builtin__.IContent>,\n-     <InterfaceClass zope.interface.Interface>]\n-\n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2\n+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE\n     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n      <InterfaceClass builtins.IContent>,\n      <InterfaceClass zope.interface.Interface>]\n@@ -124,12 +119,7 @@ objects will be returned each time the module is accessed.\n     >>> del dynamic\n     >>> del dynamic_module\n \n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3\n-    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n-     <InterfaceClass __builtin__.IContent>,\n-     <InterfaceClass zope.interface.Interface>]\n-\n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2\n+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE\n     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n      <InterfaceClass builtins.IContent>,\n      <InterfaceClass zope.interface.Interface>]\ndiff --git a/plone/alterego/tests.py b/plone/alterego/tests.py\nindex 35d20a3..e1d51da 100644\n--- a/plone/alterego/tests.py\n+++ b/plone/alterego/tests.py\n@@ -1,30 +1,14 @@\n import doctest\n-import sys\n import unittest\n import zope.component.testing\n \n \n-SKIP_PYTHON_2 = doctest.register_optionflag("SKIP_PYTHON_2")\n-SKIP_PYTHON_3 = doctest.register_optionflag("SKIP_PYTHON_3")\n-\n-\n-class PolyglotOutputChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if optionflags & SKIP_PYTHON_3 and sys.version_info >= (3,):\n-            return True\n-        elif optionflags & SKIP_PYTHON_2:\n-            return True\n-\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         (\n             doctest.DocFileSuite(\n                 "alterego.txt",\n                 tearDown=zope.component.testing.tearDown,\n-                checker=PolyglotOutputChecker(),\n             ),\n         )\n     )\n'

Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-01T23:29:55+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/fb2b4f8660e697d3cadf3e44c0bc6320f1fb4b4e

chore: drop old files

Files changed:
D buildout.cfg
D default.nix

b'diff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex b317a96..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-[buildout]\n-parts = test\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = plone.alterego [test]\ndiff --git a/default.nix b/default.nix\ndeleted file mode 100644\nindex 3c8459a..0000000\n--- a/default.nix\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-{ pkgs ? import (builtins.fetchTarball  # revision for reproducible builds\n-  "https://github.com/nixos/nixpkgs-channels/archive/nixos-16.03.tar.gz") {}\n-, pythonPackages ? pkgs.python35Packages\n-}:\n-\n-let self = {\n-  buildout = pythonPackages.zc_buildout_nix.overrideDerivation(args: {\n-    postInstall = "";\n-    propagatedNativeBuildInputs = [\n-        pythonPackages.lxml\n-    ];\n-  });\n-};\n-\n-in pkgs.stdenv.mkDerivation rec {\n-  name = "env";\n-  # Mandatory boilerplate for buildable env\n-  env = pkgs.buildEnv { name = name; paths = buildInputs; };\n-  builder = builtins.toFile "builder.sh" \'\'\n-    source $stdenv/setup; ln -s $env $out\n-  \'\';\n-  # Customizable development requirements\n-  buildInputs = with self; [\n-    buildout\n-    pkgs.python35\n-  ];\n-  # Customizable development shell setup\n-  shellHook = \'\'\n-    export SSL_CERT_FILE=${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\n-  \'\';\n-}\n-\n-# ~/.zshrc:\n-# function nix_prompt { test $IN_NIX_SHELL && echo \'[nix-shell] \' }\n-# ZSH_THEME_GIT_PROMPT_PREFIX="$(nix_prompt)$ZSH_THEME_GIT_PROMPT_PREFIX"\n'

Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-01T23:31:26+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/595b3a64fc2b337d2d819895905f3b4981f0c715

feat: pyroma

Files changed:
M README.rst
M setup.py

b'diff --git a/README.rst b/README.rst\nindex 4469fd8..4abd7f0 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -45,7 +45,7 @@ arguments:\n \n .. code-block:: python\n \n->>> from plone.alterego.dynamic import create\n+    >>> from plone.alterego.dynamic import create\n     >>> dynamic = create(\'plone.alterego.tests.dynamic\')\n \n We can now import this module:\ndiff --git a/setup.py b/setup.py\nindex fe85b2b..5e3e733 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,6 +37,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "zope.component",\n'

Repository: plone.alterego


Branch: refs/heads/master
Date: 2023-04-10T02:56:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.alterego/commit/15c66aca5a54ffff4ea8703190ee4dbaabbdda5b

Merge pull request #7 from plone/config-with-default-template-c2581875

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5623f8b3.internal
A tox.ini
M README.rst
M plone/__init__.py
M plone/alterego/alterego.txt
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
M pyproject.toml
M setup.cfg
M setup.py
D .travis.yml
D buildout.cfg
D default.nix

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4f67994\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex b7d0bd6..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-language: python\n-python:\n-- 2.7\n-- 3.5\n-- 3.6\n-- 3.7\n-- 3.8\n-cache:\n-  directories:\n-  - eggs\n-install:\n-- pip install zc.buildout\n-- buildout -N -t 3\n-script: bin/test\ndiff --git a/README.rst b/README.rst\nindex 4469fd8..4abd7f0 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -45,7 +45,7 @@ arguments:\n \n .. code-block:: python\n \n->>> from plone.alterego.dynamic import create\n+    >>> from plone.alterego.dynamic import create\n     >>> dynamic = create(\'plone.alterego.tests.dynamic\')\n \n We can now import this module:\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex b317a96..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-[buildout]\n-parts = test\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = plone.alterego [test]\ndiff --git a/default.nix b/default.nix\ndeleted file mode 100644\nindex 3c8459a..0000000\n--- a/default.nix\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-{ pkgs ? import (builtins.fetchTarball  # revision for reproducible builds\n-  "https://github.com/nixos/nixpkgs-channels/archive/nixos-16.03.tar.gz") {}\n-, pythonPackages ? pkgs.python35Packages\n-}:\n-\n-let self = {\n-  buildout = pythonPackages.zc_buildout_nix.overrideDerivation(args: {\n-    postInstall = "";\n-    propagatedNativeBuildInputs = [\n-        pythonPackages.lxml\n-    ];\n-  });\n-};\n-\n-in pkgs.stdenv.mkDerivation rec {\n-  name = "env";\n-  # Mandatory boilerplate for buildable env\n-  env = pkgs.buildEnv { name = name; paths = buildInputs; };\n-  builder = builtins.toFile "builder.sh" \'\'\n-    source $stdenv/setup; ln -s $env $out\n-  \'\';\n-  # Customizable development requirements\n-  buildInputs = with self; [\n-    buildout\n-    pkgs.python35\n-  ];\n-  # Customizable development shell setup\n-  shellHook = \'\'\n-    export SSL_CERT_FILE=${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\n-  \'\';\n-}\n-\n-# ~/.zshrc:\n-# function nix_prompt { test $IN_NIX_SHELL && echo \'[nix-shell] \' }\n-# ZSH_THEME_GIT_PROMPT_PREFIX="$(nix_prompt)$ZSH_THEME_GIT_PROMPT_PREFIX"\ndiff --git a/news/5623f8b3.internal b/news/5623f8b3.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5623f8b3.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/alterego/alterego.txt b/plone/alterego/alterego.txt\nindex 345c484..2fd1e79 100644\n--- a/plone/alterego/alterego.txt\n+++ b/plone/alterego/alterego.txt\n@@ -108,12 +108,7 @@ We could then create an on-demand interface easily:\n     >>> interface.alsoProvides(c1, dynamic.ITwo)\n     Creating ITwo in plone.alterego.tests.dynamic\n \n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3\n-    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n-     <InterfaceClass __builtin__.IContent>,\n-     <InterfaceClass zope.interface.Interface>]\n-\n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2\n+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE\n     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n      <InterfaceClass builtins.IContent>,\n      <InterfaceClass zope.interface.Interface>]\n@@ -124,12 +119,7 @@ objects will be returned each time the module is accessed.\n     >>> del dynamic\n     >>> del dynamic_module\n \n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3\n-    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n-     <InterfaceClass __builtin__.IContent>,\n-     <InterfaceClass zope.interface.Interface>]\n-\n-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2\n+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE\n     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,\n      <InterfaceClass builtins.IContent>,\n      <InterfaceClass zope.interface.Interface>]\ndiff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py\nindex 94c8c09..9512bbd 100644\n--- a/plone/alterego/dynamic.py\n+++ b/plone/alterego/dynamic.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.alterego.interfaces import IDynamicModule\n from plone.alterego.interfaces import IDynamicObjectFactory\n from types import ModuleType\n@@ -10,18 +9,16 @@\n \n @implementer(IDynamicModule)\n class DynamicModule(ModuleType):\n-    """A module that can create objects on the fly.\n-    """\n+    """A module that can create objects on the fly."""\n \n     def __getattr__(self, name):\n-\n-        if name == \'__path__\':\n-            raise AttributeError(\'Dynamic modules do not have __path__\')\n+        if name == "__path__":\n+            raise AttributeError("Dynamic modules do not have __path__")\n \n         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)\n         if factory is None:\n             raise AttributeError(\n-                \'Cannot find dynamic object factory for module {0}\'.format(\n+                "Cannot find dynamic object factory for module {}".format(\n                     self.__name__,\n                 )\n             )\n@@ -29,8 +26,8 @@ def __getattr__(self, name):\n         obj = factory(name, self)\n         if obj is None:\n             raise AttributeError(\n-                \'Dynamic module factory did not want to create \'\n-                \'{0} in {1}\'.format(name, self.__name__)\n+                "Dynamic module factory did not want to create "\n+                "{} in {}".format(name, self.__name__)\n             )\n \n         return obj\n@@ -42,4 +39,4 @@ def create(dotted_name):\n     return dynamic\n \n \n-__all__ = (\'create\',)\n+__all__ = ("create",)\ndiff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py\nindex 485778f..7ca6fdf 100644\n--- a/plone/alterego/interfaces.py\n+++ b/plone/alterego/interfaces.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IDynamicModule(Interface):\n-    """Marker interface for dynamic modules\n-    """\n+    """Marker interface for dynamic modules"""\n \n \n class IDynamicObjectFactory(Interface):\ndiff --git a/plone/alterego/tests.py b/plone/alterego/tests.py\nindex d26a4ef..e1d51da 100644\n--- a/plone/alterego/tests.py\n+++ b/plone/alterego/tests.py\n@@ -1,30 +1,14 @@\n-# -*- coding: utf-8 -*-\n import doctest\n-import sys\n import unittest\n import zope.component.testing\n \n \n-SKIP_PYTHON_2 = doctest.register_optionflag(\'SKIP_PYTHON_2\')\n-SKIP_PYTHON_3 = doctest.register_optionflag(\'SKIP_PYTHON_3\')\n-\n-\n-class PolyglotOutputChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if optionflags & SKIP_PYTHON_3 and sys.version_info >= (3,):\n-            return True\n-        elif optionflags & SKIP_PYTHON_2:\n-            return True\n-\n-        return doctest.OutputChecker.check_output(\n-            self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocFileSuite(\n-            \'alterego.txt\',\n-            tearDown=zope.component.testing.tearDown,\n-            checker=PolyglotOutputChecker(),\n-        ),\n-    ))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                "alterego.txt",\n+                tearDown=zope.component.testing.tearDown,\n+            ),\n+        )\n+    )\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 3da53f4..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n-[tool.dependencychecker]\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -20,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 5f0dbd3..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    default.nix\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex c2b34b5..5e3e733 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,52 +1,49 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'1.1.6.dev0\'\n+version = "1.1.6.dev0"\n \n setup(\n-    name=\'plone.alterego\',\n+    name="plone.alterego",\n     version=version,\n-    description=\'Low level support for dynamic modules\',\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(\'CHANGES.rst\').read()),\n+    description="Low level support for dynamic modules",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 4.3\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 4.3",\n+        "Framework :: Plone :: 5.0",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n+        "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.5",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'Plone schema interface\',\n-    author=\'Laurence Rowe\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.alterego\',\n-    license=\'LGPL\',\n+    keywords="Plone schema interface",\n+    author="Laurence Rowe",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.alterego",\n+    license="LGPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.interface\',\n+        "setuptools",\n+        "zope.component",\n+        "zope.interface",\n     ],\n-    extras_require={\n-        \'test\': []\n-    },\n+    extras_require={"test": []},\n     entry_points="""\n     # -*- Entry points: -*-\n     """,\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..3de7063\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,54 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.alterego {posargs}\n+extras =\n+    test\n'

