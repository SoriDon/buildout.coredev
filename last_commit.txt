Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-02-03T11:25:36+01:00
Author: Malthe Borch (malthe) <mborch@gmail.com>
Commit: https://github.com/plone/Products.Archetypes/commit/0ac06654314630cf2ab4e66f8dfc636e0b442a2d

Look up view using lower-level API to check for existence

Files changed:
M CHANGES.rst
M Products/Archetypes/BaseObject.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d5bd3d78..5a570153 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -31,6 +31,9 @@ Bug fixes:
 - fix randomly failing test in ``test_referenceable``.
   [jensens]
 
+- Don't instantiate browser view to check for existence.
+  [malthe]
+
 1.12 (2016-12-06)
 -----------------
 
diff --git a/Products/Archetypes/BaseObject.py b/Products/Archetypes/BaseObject.py
index 083d64b9..0359330d 100644
--- a/Products/Archetypes/BaseObject.py
+++ b/Products/Archetypes/BaseObject.py
@@ -54,9 +54,9 @@
 from webdav.NullResource import NullResource
 
 from zope import event
-from zope.interface import implementer, Interface
+from zope.interface import implementer, Interface, providedBy
+from zope.component import getSiteManager
 from zope.component import subscribers
-from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 
 # Import conditionally, so we don't introduce a hard depdendency
@@ -1142,8 +1142,11 @@ def __bobo_traverse__(self, REQUEST, name):
             if shasattr(self, name):  # attributes of self come first
                 target = getattr(self, name)
             else:  # then views
-                target = queryMultiAdapter((self, REQUEST), Interface, name)
-                if target is not None:
+                gsm = getSiteManager()
+                factory = gsm.adapters.lookup(
+                    (providedBy(self), providedBy(REQUEST)), Interface, name
+                )
+                if factory is not None:
                     # We don't return the view, we raise an
                     # AttributeError instead (below)
                     target = None


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-05-30T11:45:47+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.Archetypes/commit/ce0295be074d2c47780820eddb925403a05d6690

Merge branch 'master' into no-browser-view-create-on-exist-check

Files changed:
A .travis.yml
A bootstrap.py
A buildout.cfg
A setup.cfg
A travis.cfg
M .gitignore
M CHANGES.rst
M Products/Archetypes/CatalogMultiplex.py
M Products/Archetypes/skins/archetypes/widgets/field.pt
M Products/Archetypes/tests/test_doctests.py
M Products/Archetypes/tests/test_pawidgets.py
M setup.py
D Products/Archetypes/tests/reindex_sanity.txt

diff --git a/.gitignore b/.gitignore
index a9a51bc3..f2440563 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,9 @@
 *.mo
 *.tar.gz
 *.egg-info
-dist
\ No newline at end of file
+dist
+bin/
+include/
+lib/
+.installed.cfg
+develop-eggs/
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 00000000..39f5d774
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,15 @@
+language: python
+python: 2.7
+sudo: false
+cache:
+  pip: true
+  directories:
+    - $HOME/buildout-cache
+before_install:
+  - mkdir -p $HOME/buildout-cache/{eggs,downloads}
+  - virtualenv .
+  - bin/python bootstrap.py
+install:
+  - bin/buildout -Nvt 5 -c travis.cfg
+script:
+  - bin/test
diff --git a/CHANGES.rst b/CHANGES.rst
index 5a570153..a0750a67 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,32 @@
 Changelog
 =========
 
-1.13.0 (unreleased)
+1.14.1 (unreleased)
+-------------------
+
+Bug fixes:
+
+- Fix related items widget tests to reflect latest plone.app.widgets changes.
+  Refs: https://github.com/plone/plone.app.widgets/pull/159
+  [thet]
+
+- Fix bugs with Widget's postback attribute, that prevented fields from
+  being populated with the submitted empty value in the case of an error.
+  [pgrunewald]
+
+
+1.14.0 (2017-04-01)
 -------------------
 
 Breaking changes:
 
-- *add item here*
+- Update code to the new indexing operations queueing.
+  Part of PLIP 1343: https://github.com/plone/Products.CMFPlone/issues/1343
+  [gforcada]
+
+
+1.13.0 (2017-02-12)
+-------------------
 
 New features:
 
diff --git a/Products/Archetypes/CatalogMultiplex.py b/Products/Archetypes/CatalogMultiplex.py
index 51e267e2..bb0b5863 100644
--- a/Products/Archetypes/CatalogMultiplex.py
+++ b/Products/Archetypes/CatalogMultiplex.py
@@ -37,6 +37,10 @@ def indexObject(self):
         catalogs = self.getCatalogs()
         url = self.__url()
         for c in catalogs:
+            if c.id == 'portal_catalog':
+                # use catalog tool queuing system
+                c.indexObject(self)
+                continue
             c.catalog_object(self, url)
 
     security.declareProtected(ModifyPortalContent, 'unindexObject')
@@ -47,6 +51,10 @@ def unindexObject(self):
         catalogs = self.getCatalogs()
         url = self.__url()
         for c in catalogs:
+            if c.id == 'portal_catalog':
+                # use catalog tool queuing system
+                c.unindexObject(self)
+                continue
             if c._catalog.uids.get(url, None) is not None:
                 c.uncatalog_object(url)
 
@@ -113,6 +121,10 @@ def reindexObject(self, idxs=None):
 
         for c in catalogs:
             if c is not None:
+                if c.id == 'portal_catalog':
+                    # use catalog tool queuing system
+                    c.reindexObject(self, idxs=idxs)
+                    continue
                 # We want the intersection of the catalogs idxs
                 # and the incoming list.
                 lst = idxs
diff --git a/Products/Archetypes/skins/archetypes/widgets/field.pt b/Products/Archetypes/skins/archetypes/widgets/field.pt
index 94f00d57..939554f1 100644
--- a/Products/Archetypes/skins/archetypes/widgets/field.pt
+++ b/Products/Archetypes/skins/archetypes/widgets/field.pt
@@ -67,8 +67,7 @@
                     edit_accessor python:field.getEditAccessor(here);
                     getMethod python:(widget.populate and (edit_accessor or accessor)) or None;
                     value python:getMethod and getMethod();
-                    value python:widget.postback and request.get(fieldName, value);
-                    value python:value == '' and (getMethod and getMethod()) or value;
+                    value python:request.get(fieldName, value) if widget.postback else value;
                     portal python:context.portal_url.getPortalObject();
                     visCondition python:field.widget.testCondition(context.aq_inner.getParentNode(), portal, context);
                     error_id python:errors.get(fieldName)">
diff --git a/Products/Archetypes/tests/reindex_sanity.txt b/Products/Archetypes/tests/reindex_sanity.txt
deleted file mode 100644
index fa33918a..00000000
--- a/Products/Archetypes/tests/reindex_sanity.txt
+++ /dev/null
@@ -1,418 +0,0 @@
-Reindex Sanity
-==============
-
-Those tests make sure that the catalog is only called as necessary.
-
-  >>> import sys
-  >>> from os.path import sep
-  >>> from Products.ZCatalog.ZCatalog import ZCatalog
-  >>> from Products.CMFCore.utils import getToolByName
-  >>> from Products.Archetypes.utils import wrap_method
-  >>> from Products.Archetypes.utils import unwrap_method
-  >>> from Products.Archetypes.utils import call_original as call
-  >>> import transaction
-
-  >>> portal = layer['portal']
-  >>> portal_name = portal.getId()
-  >>> from plone.app.testing import setRoles
-  >>> from plone.app.testing import TEST_USER_ID
-  >>> setRoles(portal, TEST_USER_ID, ['Manager'])
-  >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
-  >>> _ = folder.invokeFactory(type_name='Folder', id='sub')
-
-  >>> def callers(n=1):
-  ...     stack = []
-  ...     import inspect
-  ...     frames = inspect.getouterframes(inspect.currentframe())
-  ...     fp = filter(None, sys.path)
-  ...     for i in range(n+1, 1, -1):
-  ...         try:
-  ...             frame = frames[i]
-  ...         except IndexError:
-  ...             continue
-  ...         fname, ln, func = frame[1:4]
-  ...         for p in fp:
-  ...             fname = fname.split(p)[-1]
-  ...         fname = fname.split('Products')[-1]
-  ...         fname = fname.split('.py')[0]
-  ...         fname = '.'.join(fname.strip(sep).split(sep))
-  ...         stack.append(':'.join((fname, str(ln), func)))
-  ...     return stack
-
-Wrap ZCatalog methods to let us know about why and when they were called:
-
-  >>> pattern = '__at_reindex_sanity_%s__'
-
-  >>> def catalog_object(self, *args, **kw):
-  ...     rv = call(self, 'catalog_object', pattern, *args, **kw)
-  ...     print 'Catalog: ', self.getId()
-  ...     uid = kw.get('uid', None)
-  ...     if not uid:
-  ...         if len(args) > 1:
-  ...             uid = args[1]
-  ...         else:
-  ...             uid = '/'.join(args[0].getPhysicalPath())
-  ...     idxs = kw.get('idxs', [])
-  ...     if not idxs:
-  ...         if len(args) > 2:
-  ...             idxs = args[2]
-  ...     print 'Indexing:', uid, idxs
-  ...     # The next line is usefull for debugging.
-  ...     # print 'Callers: ', '\n          '.join(callers(15))
-  ...     print '-' * 60
-  ...     return rv
-
-  >>> def uncatalog_object(self, *args, **kw):
-  ...     rv = call(self, 'uncatalog_object', pattern, *args, **kw)
-  ...     print 'Catalog:   ', self.getId()
-  ...     print 'UnIndexing:', kw.get('uid', None) or args[0]
-  ...     # The next line is usefuld for debugging.
-  ...     # print 'Callers:   ', '\n            '.join(callers(15))
-  ...     print '-' * 60
-  ...     return rv
-
-  >>> wrap_method(ZCatalog, 'catalog_object',
-  ...             catalog_object, pattern=pattern)
-
-  >>> wrap_method(ZCatalog, 'uncatalog_object',
-  ...             uncatalog_object, pattern=pattern)
-
-Disable Portal Factory:
-
-  >>> pf = getToolByName(portal, 'portal_factory', None)
-  >>> if pf is not None:
-  ...    pf.manage_setPortalFactoryTypes(listOfTypeIds=[])
-
-Tests for DDocument
--------------------
-
-Simple invokeFactory call, without renaming or fancy extra field
-setting:
-
-  >>> _ = folder.invokeFactory(type_name='DDocument',
-  ...                               id='new_doc1')
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_doc1 []
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_doc1 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_doc1 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_doc1 []
-  ------------------------------------------------------------
-
-  >>> folder['new_doc1'].Title()
-  ''
-
-  >>> folder['new_doc1'].Description()
-  ''
-
-More complex invokeFactory call, setting title and description:
-
-  >>> _ = folder.invokeFactory(type_name='DDocument',
-  ...                               id='new_doc2',
-  ...                               title='Title',
-  ...                               description='Description')
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_doc2 []
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_doc2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_doc2 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_doc2 []
-  ------------------------------------------------------------
-
-  >>> folder['new_doc2'].Title()
-  'Title'
-
-  >>> folder['new_doc2'].Description()
-  'Description'
-
-Now hold your breath. We are going to rename,
-copy-and-paste and cut-and-paste.
-
-  >>> transaction.savepoint(optimistic=True) and None
-
-Rename:
-
-  >>> folder.manage_renameObjects(ids=['new_doc1'],
-  ...                                  new_ids=['new_doc11'])
-  Catalog:    uid_catalog
-  UnIndexing: Members/test_user_1_/new_doc1
-  ------------------------------------------------------------
-  Catalog:    portal_catalog
-  UnIndexing: /plone/Members/test_user_1_/new_doc1
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_doc11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_doc11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_doc11 ['getObjPositionInParent']
-  ------------------------------------------------------------
-
-Copy and paste:
-
-  >>> cp = folder.manage_copyObjects(ids=['new_doc2'])
-  >>> _ = folder.sub.manage_pasteObjects(cp)
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/sub/new_doc2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_doc2 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_doc2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_doc2 ['created']
-  ------------------------------------------------------------
-
-Cut and paste:
-
-  >>> cp = folder.manage_cutObjects(ids=['new_doc11'])
-  >>> _ = folder.sub.manage_pasteObjects(cp)
-  Catalog:    uid_catalog
-  UnIndexing: Members/test_user_1_/new_doc11
-  ------------------------------------------------------------
-  Catalog:    portal_catalog
-  UnIndexing: /plone/Members/test_user_1_/new_doc11
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/sub/new_doc11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_doc11 []
-  ------------------------------------------------------------
-
-Tests for SimpleFolder
-----------------------
-
-Simple invokeFactory call, without renaming or fancy extra field
-setting:
-
-  >>> _ = folder.invokeFactory(type_name='SimpleFolder',
-  ...                               id='new_folder1')
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_folder1 []
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_folder1 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_folder1 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_folder1 []
-  ------------------------------------------------------------
-
-  >>> folder['new_folder1'].Title()
-  ''
-
-  >>> folder['new_folder1'].Description()
-  ''
-
-More complex invokeFactory call, setting title and description:
-
-  >>> _ = folder.invokeFactory(type_name='SimpleFolder',
-  ...                               id='new_folder2',
-  ...                               title='Title',
-  ...                               description='Description')
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_folder2 []
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_folder2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_folder2 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_folder2 []
-  ------------------------------------------------------------
-
-
-  >>> folder['new_folder2'].Title()
-  'Title'
-
-  >>> folder['new_folder2'].Description()
-  'Description'
-
-Now hold your breath. We are going to rename,
-copy-and-paste and cut-and-paste.
-
-  >>> transaction.savepoint(optimistic=True) and None
-
-Rename:
-
-  >>> folder.manage_renameObjects(ids=['new_folder1'],
-  ...                                  new_ids=['new_folder11'])
-  Catalog:    uid_catalog
-  UnIndexing: Members/test_user_1_/new_folder1
-  ------------------------------------------------------------
-  Catalog:    portal_catalog
-  UnIndexing: /plone/Members/test_user_1_/new_folder1
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_folder11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_folder11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_folder11 ['getObjPositionInParent']
-  ------------------------------------------------------------
-
-Copy and paste:
-
-  >>> cp = folder.manage_copyObjects(ids=['new_folder2'])
-  >>> _ = folder.sub.manage_pasteObjects(cp)
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/sub/new_folder2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_folder2 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_folder2 []
-  ------------------------------------------------------------
-
-Cut and paste:
-
-  >>> cp = folder.manage_cutObjects(ids=['new_folder11'])
-  >>> _ = folder.sub.manage_pasteObjects(cp)
-  Catalog:    uid_catalog
-  UnIndexing: Members/test_user_1_/new_folder11
-  ------------------------------------------------------------
-  Catalog:    portal_catalog
-  UnIndexing: /plone/Members/test_user_1_/new_folder11
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/sub/new_folder11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_folder11 []
-  ------------------------------------------------------------
-
-Tests for SimpleBTreeFolder
----------------------------
-
-Simple invokeFactory call, without renaming or fancy extra field
-setting:
-
-  >>> _ = folder.invokeFactory(type_name='SimpleBTreeFolder',
-  ...                               id='new_btree_folder1')
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_btree_folder1 []
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_btree_folder1 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_btree_folder1 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_btree_folder1 []
-  ------------------------------------------------------------
-
-  >>> folder['new_btree_folder1'].Title()
-  ''
-
-  >>> folder['new_btree_folder1'].Description()
-  ''
-
-More complex invokeFactory call, setting title and description:
-
-  >>> _ = folder.invokeFactory(type_name='SimpleBTreeFolder',
-  ...                               id='new_btree_folder2',
-  ...                               title='Title',
-  ...                               description='Description')
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_btree_folder2 []
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_btree_folder2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_btree_folder2 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_btree_folder2 []
-  ------------------------------------------------------------
-
-  >>> folder['new_btree_folder2'].Title()
-  'Title'
-
-  >>> folder['new_btree_folder2'].Description()
-  'Description'
-
-Now hold your breath. We are going to rename,
-copy-and-paste and cut-and-paste.
-
-  >>> transaction.savepoint(optimistic=True) and None
-
-Rename:
-
-  >>> folder.manage_renameObjects(ids=['new_btree_folder1'],
-  ...                                  new_ids=['new_btree_folder11'])
-  Catalog:    uid_catalog
-  UnIndexing: Members/test_user_1_/new_btree_folder1
-  ------------------------------------------------------------
-  Catalog:    portal_catalog
-  UnIndexing: /plone/Members/test_user_1_/new_btree_folder1
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/new_btree_folder11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_btree_folder11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/new_btree_folder11 ['getObjPositionInParent']
-  ------------------------------------------------------------
-
-
-Copy and paste:
-
-  >>> cp = folder.manage_copyObjects(ids=['new_btree_folder2'])
-  >>> _ = folder.sub.manage_pasteObjects(cp)
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/sub/new_btree_folder2 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_btree_folder2 ['review_state']
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_btree_folder2 []
-  ------------------------------------------------------------
-
-Cut and paste:
-
-  >>> cp = folder.manage_cutObjects(ids=['new_btree_folder11'])
-  >>> _ = folder.sub.manage_pasteObjects(cp)
-  Catalog:    uid_catalog
-  UnIndexing: Members/test_user_1_/new_btree_folder11
-  ------------------------------------------------------------
-  Catalog:    portal_catalog
-  UnIndexing: /plone/Members/test_user_1_/new_btree_folder11
-  ------------------------------------------------------------
-  Catalog:  uid_catalog
-  Indexing: Members/test_user_1_/sub/new_btree_folder11 []
-  ------------------------------------------------------------
-  Catalog:  portal_catalog
-  Indexing: /plone/Members/test_user_1_/sub/new_btree_folder11 []
-  ------------------------------------------------------------
-
-Restore ZCatalog methods:
-
-  >>> unwrap_method(ZCatalog, 'catalog_object')
-  >>> unwrap_method(ZCatalog, 'uncatalog_object')
diff --git a/Products/Archetypes/tests/test_doctests.py b/Products/Archetypes/tests/test_doctests.py
index 9c22aaff..20b26c13 100644
--- a/Products/Archetypes/tests/test_doctests.py
+++ b/Products/Archetypes/tests/test_doctests.py
@@ -23,7 +23,7 @@
     'folder_marshall.txt',
     'webdav_operations.txt',
     'traversal.txt',
-    'reindex_sanity.txt')
+)
 
 OPTIONFLAGS = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |
diff --git a/Products/Archetypes/tests/test_pawidgets.py b/Products/Archetypes/tests/test_pawidgets.py
index cb5e32fc..f6476266 100644
--- a/Products/Archetypes/tests/test_pawidgets.py
+++ b/Products/Archetypes/tests/test_pawidgets.py
@@ -90,7 +90,6 @@ def test_widget(self):
                         'firstDay': 0,
                         'min': [current_year - 100, 1, 1],
                         'max': [current_year + 20, 1, 1],
-                        'clear': u'Clear',
                         'format': 'mmmm d, yyyy',
                         'monthsFull': [u'January', u'February', u'March',
                                        u'April', u'May', u'June', u'July',
@@ -101,14 +100,16 @@ def test_widget(self):
                         'weekdaysFull': [u'Sunday', u'Monday', u'Tuesday',
                                          u'Wednesday', u'Thursday', u'Friday',
                                          u'Saturday'],
-                        'today': u'Today',
                         'selectYears': 200,
                         'placeholder': u'Enter date...',
                         'monthsShort': [u'Jan', u'Feb', u'Mar', u'Apr', u'May',
                                         u'Jun', u'Jul', u'Aug', u'Sep', u'Oct',
                                         u'Nov', u'Dec']
                     },
-                    'time': False
+                    'time': False,
+                    'today': u'Today',
+                    'clear': u'Clear',
+
                 }
             },
             self.widget._base_args(self.context, self.field, self.request),
@@ -160,7 +161,6 @@ def test_widget(self):
                         'firstDay': 0,
                         'min': [current_year - 100, 1, 1],
                         'max': [current_year + 20, 1, 1],
-                        'clear': u'Clear',
                         'format': 'mmmm d, yyyy',
                         'monthsFull': [u'January', u'February', u'March',
                                        u'April', u'May', u'June', u'July',
@@ -171,7 +171,6 @@ def test_widget(self):
                         'weekdaysFull': [u'Sunday', u'Monday', u'Tuesday',
                                          u'Wednesday', u'Thursday', u'Friday',
                                          u'Saturday'],
-                        'today': u'Today',
                         'selectYears': 200,
                         'placeholder': u'Enter date...',
                         'monthsShort': [u'Jan', u'Feb', u'Mar', u'Apr', u'May',
@@ -180,9 +179,10 @@ def test_widget(self):
                     },
                     'time': {
                         'placeholder': u'Enter time...',
-                        'today': u'Today',
                         'format': 'h:i a'
-                    }
+                    },
+                    'today': u'Today',
+                    'clear': u'Clear',
                 }
             },
             self.widget._base_args(self.context, self.field, self.request),
@@ -360,10 +360,6 @@ class ExampleContent(object):
                 'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
                 'pattern': 'relateditems',
                 'pattern_options': {
-                    'folderTypes': ['Folder'],
-                    'homeText': u'Home',
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
                     'separator': ';',
                     'orderable': True,
                     'maximumSelectionSize': -1,
@@ -371,10 +367,9 @@ class ExampleContent(object):
                                      'plone.app.vocabularies.Catalog'
                                      '&field=fieldname',
                     'basePath': '/Plone/doc',
+                    'contextPath': '/Plone/doc',
                     'rootPath': '/',
-                    'rootUrl': '',
-                    'sort_on': 'sortable_title',
-                    'sort_order': 'ascending',
+                    'rootUrl': ''
                 },
             },
             widget._base_args(self.context, self.field, self.request),
@@ -407,19 +402,14 @@ class ExampleContent(object):
                 'value': '{}'.format(IUUID(obj1)),
                 'pattern': 'relateditems',
                 'pattern_options': {
-                    'folderTypes': ['Folder'],
-                    'homeText': u'Home',
                     'separator': ';',
                     'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
                     'maximumSelectionSize': 1,
                     'vocabularyUrl': '/@@getVocabulary?name=plone.app.vocabularies.Catalog&field=fieldname',  # noqa
                     'basePath': '/Plone/doc',
+                    'contextPath': '/Plone/doc',
                     'rootPath': '/',
-                    'rootUrl': '',
-                    'sort_on': 'sortable_title',
-                    'sort_order': 'ascending',
+                    'rootUrl': ''
                 },
             },
             widget._base_args(self.context, self.field, self.request),
@@ -440,21 +430,16 @@ def test_single_valued_empty(self):
                 'value': '',
                 'pattern': 'relateditems',
                 'pattern_options': {
-                    'folderTypes': ['Folder'],
-                    'homeText': u'Home',
                     'separator': ';',
                     'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
                     'maximumSelectionSize': 1,
                     'vocabularyUrl': '/@@getVocabulary?name='
                                      'plone.app.vocabularies.Catalog'
                                      '&field=fieldname',
                     'basePath': '/Plone/doc',
+                    'contextPath': '/Plone/doc',
                     'rootPath': '/',
                     'rootUrl': '',
-                    'sort_on': 'sortable_title',
-                    'sort_order': 'ascending',
                 },
             },
             widget._base_args(self.context, self.field, self.request),
@@ -493,21 +478,16 @@ class ExampleContent(object):
                 'value': '{}'.format(IUUID(obj1)),
                 'pattern': 'relateditems',
                 'pattern_options': {
-                    'folderTypes': ['Folder'],
-                    'homeText': u'Home',
                     'separator': ';',
                     'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
                     'maximumSelectionSize': 1,
                     'vocabularyUrl': '/@@getVocabulary?name='
                                      'plone.app.vocabularies.Catalog'
                                      '&field=fieldname1',
                     'basePath': '/Plone/doc',
+                    'contextPath': '/Plone/doc',
                     'rootPath': '/',
                     'rootUrl': '',
-                    'sort_on': 'sortable_title',
-                    'sort_order': 'ascending',
                 },
             },
             field1.widget._base_args(self.context, field1, self.request),
@@ -528,21 +508,16 @@ class ExampleContent(object):
                 'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
                 'pattern': 'relateditems',
                 'pattern_options': {
-                    'folderTypes': ['Folder'],
-                    'homeText': u'Home',
                     'separator': ';',
                     'orderable': True,
-                    'searchAllText': u'Entire site',
-                    'searchText': u'Search',
                     'maximumSelectionSize': -1,
                     'vocabularyUrl': '/@@getVocabulary?name='
                                      'plone.app.vocabularies.Catalog'
                                      '&field=fieldname2',
                     'basePath': '/Plone/doc',
+                    'contextPath': '/Plone/doc',
                     'rootPath': '/',
                     'rootUrl': '',
-                    'sort_on': 'sortable_title',
-                    'sort_order': 'ascending',
                 },
             },
             field2.widget._base_args(self.context, field2, self.request),
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 00000000..1f59b213
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --buildout-version, "
+                        "the bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 00000000..6be561d0
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,11 @@
+[buildout]
+develop = .
+parts = test
+extends = http://dist.plone.org/release/5.1-latest/versions.cfg
+
+[versions]
+Products.Archetypes = 
+
+[test]
+recipe = zc.recipe.testrunner
+eggs = Products.Archetypes [test]
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 00000000..190e1a22
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,10 @@
+[check-manifest]
+ignore =
+    *.cfg
+    bootstrap.py
+
+[bdist_wheel]
+universal = 1
+
+[zest.releaser]
+create-wheel = yes
diff --git a/setup.py b/setup.py
index 5d2dbb67..2de85851 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '1.13.0.dev0'
+version = '1.14.1.dev0'
 
 setup(name='Products.Archetypes',
       version=version,
@@ -31,6 +31,9 @@
             'zope.publisher',
             'zope.testing',
             'plone.app.testing',
+            'Plone',
+            'mock',
+            'plone.app.robotframework',
         ]
       ),
       install_requires=[
diff --git a/travis.cfg b/travis.cfg
new file mode 100644
index 00000000..1603b236
--- /dev/null
+++ b/travis.cfg
@@ -0,0 +1,7 @@
+[buildout]
+extends = buildout.cfg
+
+# caches, see also .travis.yaml
+# one should not depend on '/home/travis' but it seems stable in containers.
+eggs-directory = /home/travis/buildout-cache/eggs
+download-cache = /home/travis/buildout-cache/downloads


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-05-30T11:49:07+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.Archetypes/commit/9f535d35b278684bfb8ff8ca725a752b349f4fd7

Merge branch 'test-travis' into no-browser-view-create-on-exist-check

Files changed:
M .travis.yml
M README.rst

diff --git a/.travis.yml b/.travis.yml
index 39f5d774..622db7b2 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -8,7 +8,7 @@ cache:
 before_install:
   - mkdir -p $HOME/buildout-cache/{eggs,downloads}
   - virtualenv .
-  - bin/python bootstrap.py
+  - bin/python bootstrap.py --setuptools-version=34.3.0 --buildout-version=2.8.0  #from http://dist.plone.org/release/5.1-latest/versions.cfg 2017-05-30 11:22
 install:
   - bin/buildout -Nvt 5 -c travis.cfg
 script:
diff --git a/README.rst b/README.rst
index 5ac876e9..2074f8bd 100644
--- a/README.rst
+++ b/README.rst
@@ -30,7 +30,7 @@ Unit testing
 ------------
 
 * Go into the root of your buildout and run::
- 
+
     bin/test Products.Archetypes
 
 Documentation


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-05-30T12:05:15+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.Archetypes/commit/10def601720266abdfe371eb795ef13a2ba47c2f

Merge branch 'test-travis' into no-browser-view-create-on-exist-check

Files changed:
M .travis.yml

diff --git a/.travis.yml b/.travis.yml
index 622db7b2..dc42630b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -8,7 +8,7 @@ cache:
 before_install:
   - mkdir -p $HOME/buildout-cache/{eggs,downloads}
   - virtualenv .
-  - bin/python bootstrap.py --setuptools-version=34.3.0 --buildout-version=2.8.0  #from http://dist.plone.org/release/5.1-latest/versions.cfg 2017-05-30 11:22
+  - bin/python bootstrap.py --setuptools-version=33.1.1 --buildout-version=2.8.0  #from https://github.com/plone/buildout.coredev/blob/5.1/requirements.txt 2017-05-30 11:57
 install:
   - bin/buildout -Nvt 5 -c travis.cfg
 script:


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-05-30T14:52:36+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.Archetypes/commit/90fce70ece5289033f74df03ceabd5f90f4a7e90

Merge branch 'master' into no-browser-view-create-on-exist-check

Files changed:
M .gitignore
M buildout.cfg

diff --git a/.gitignore b/.gitignore
index f2440563..e7cdfc36 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,5 @@ include/
 lib/
 .installed.cfg
 develop-eggs/
+src/
+.mr.developer.cfg
diff --git a/buildout.cfg b/buildout.cfg
index 6be561d0..79fbe418 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -2,6 +2,12 @@
 develop = .
 parts = test
 extends = http://dist.plone.org/release/5.1-latest/versions.cfg
+          https://raw.githubusercontent.com/plone/buildout.coredev/5.1/sources.cfg
+
+# 2017-05-30 plone.app.widgets 2.1.1 does not suffice
+# TODO get rid of auto-checkout when new release has happened 
+extensions = mr.developer
+auto-checkout = plone.app.widgets
 
 [versions]
 Products.Archetypes = 


Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2017-05-30T17:21:55+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/Products.Archetypes/commit/95c41f7c222fdef9e6010fb21ee71416843e3b4a

Merge pull request #77 from plone/no-browser-view-create-on-exist-check

Look up view using lower-level API to check for existence

Files changed:
M CHANGES.rst
M Products/Archetypes/BaseObject.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f5c2ba5b..a0750a67 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -51,6 +51,9 @@ Bug fixes:
 - fix randomly failing test in ``test_referenceable``.
   [jensens]
 
+- Don't instantiate browser view to check for existence.
+  [malthe]
+
 1.12 (2016-12-06)
 -----------------
 
diff --git a/Products/Archetypes/BaseObject.py b/Products/Archetypes/BaseObject.py
index 083d64b9..0359330d 100644
--- a/Products/Archetypes/BaseObject.py
+++ b/Products/Archetypes/BaseObject.py
@@ -54,9 +54,9 @@
 from webdav.NullResource import NullResource
 
 from zope import event
-from zope.interface import implementer, Interface
+from zope.interface import implementer, Interface, providedBy
+from zope.component import getSiteManager
 from zope.component import subscribers
-from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 
 # Import conditionally, so we don't introduce a hard depdendency
@@ -1142,8 +1142,11 @@ def __bobo_traverse__(self, REQUEST, name):
             if shasattr(self, name):  # attributes of self come first
                 target = getattr(self, name)
             else:  # then views
-                target = queryMultiAdapter((self, REQUEST), Interface, name)
-                if target is not None:
+                gsm = getSiteManager()
+                factory = gsm.adapters.lookup(
+                    (providedBy(self), providedBy(REQUEST)), Interface, name
+                )
+                if factory is not None:
                     # We don't return the view, we raise an
                     # AttributeError instead (below)
                     target = None


