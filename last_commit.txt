Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-05-15T12:01:45+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/d7fdfe9cb415d78c3cf7d0d72cb0e9e34c1dbab7

Fix a circular dependency to plone.app.vocabularies

Files changed:
A news/fix-circular-dep-pavocabularies.bugfix
A plone/app/querystring/tests/testVocabularies.py
A plone/app/querystring/vocabularies.py
M plone/app/querystring/configure.zcml
M plone/app/querystring/queryparser.py
M setup.py

b'diff --git a/news/fix-circular-dep-pavocabularies.bugfix b/news/fix-circular-dep-pavocabularies.bugfix\nnew file mode 100644\nindex 0000000..c55954a\n--- /dev/null\n+++ b/news/fix-circular-dep-pavocabularies.bugfix\n@@ -0,0 +1,5 @@\n+Fix a circular transitive dependency to `plone.app.querystring`.\n+New direct dependency explicit on `plone.app.vocabularies`.\n+Move `plone.app.querystring.catalog.CatalogVocabularyFactory` to `.vocabularies`, move the ZCML to register the factory, move the the test.\n+Move `plone.app.querystring.utils.parse_query` with new name `parseAndModifyFormquery` to `.queryparser`.\n+[@jensens]\ndiff --git a/plone/app/querystring/configure.zcml b/plone/app/querystring/configure.zcml\nindex 92ee3ee..b1e7bbc 100644\n--- a/plone/app/querystring/configure.zcml\n+++ b/plone/app/querystring/configure.zcml\n@@ -64,4 +64,8 @@\n       name="1000"\n       component=".querymodifiers.modify_query_to_enforce_navigation_root"\n       />\n+  <utility\n+      factory=".vocabularies.CatalogVocabularyFactory"\n+      name="plone.app.vocabularies.Catalog"\n+      />\n </configure>\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 7c6b0cd..d32e1ea 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -1,3 +1,4 @@\n+from .interfaces import IParsedQueryIndexModifier\n from Acquisition import aq_parent\n from collections import namedtuple\n from DateTime import DateTime\n@@ -8,6 +9,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n+from zope.component import getUtilitiesFor\n from zope.component import getUtility\n from zope.dottedname.resolve import resolve\n \n@@ -67,6 +69,23 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n     return query\n \n \n+def parseAndModifyFormquery(context, query, sort_on=None, sort_order=None):\n+    parsedquery = parseFormquery(context, query, sort_on, sort_order)\n+\n+    index_modifiers = getUtilitiesFor(IParsedQueryIndexModifier)\n+    for name, modifier in index_modifiers:\n+        if name in parsedquery:\n+            new_name, query = modifier(parsedquery[name])\n+            parsedquery[name] = query\n+            # if a new index name has been returned, we need to replace\n+            # the native ones\n+            if name != new_name:\n+                del parsedquery[name]\n+                parsedquery[new_name] = query\n+\n+    return parsedquery\n+\n+\n # Query operators\n \n \ndiff --git a/plone/app/querystring/tests/testVocabularies.py b/plone/app/querystring/tests/testVocabularies.py\nnew file mode 100644\nindex 0000000..1447984\n--- /dev/null\n+++ b/plone/app/querystring/tests/testVocabularies.py\n@@ -0,0 +1,19 @@\n+from plone.app.vocabularies.tests.test_vocabularies import vocabSetUp\n+from plone.app.vocabularies.tests.test_vocabularies import vocabTearDown\n+\n+import doctest\n+import unittest\n+\n+\n+def test_suite():\n+    optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocTestSuite(\n+                "plone.app.vocabularies.catalog",\n+                setUp=vocabSetUp,\n+                tearDown=vocabTearDown,\n+                optionflags=optionflags,\n+            ),\n+        )\n+    )\ndiff --git a/plone/app/querystring/vocabularies.py b/plone/app/querystring/vocabularies.py\nnew file mode 100644\nindex 0000000..283dd19\n--- /dev/null\n+++ b/plone/app/querystring/vocabularies.py\n@@ -0,0 +1,63 @@\n+from .queryparser import parseAndModifyFormquery\n+from plone.app.vocabularies.catalog import CatalogVocabulary\n+from plone.base.navigationroot import get_navigation_root_object\n+from zope.component.hooks import getSite\n+from zope.interface import implementer\n+from zope.schema.interfaces import IVocabularyFactory\n+\n+\n+# this vocabulary is in this package by intend.\n+# since plone.app.querystring depends on plone.app.vocabularies\n+# we can not put it over there without creating a circular dependency.\n+\n+\n+@implementer(IVocabularyFactory)\n+class CatalogVocabularyFactory:\n+    """\n+    Test application of Navigation Root:\n+\n+      >>> from plone.app.vocabularies.tests.base import create_context\n+      >>> from plone.app.vocabularies.tests.base import DummyUrlTool\n+      >>> from plone.app.vocabularies.tests.base import DummyCatalog\n+      >>> class DummyPathCatalog(DummyCatalog):\n+      ...     def __call__(self, **query):\n+      ...         if \'path\' in query and \'query\' in query[\'path\']:\n+      ...             return [v for v in self.values() if\n+      ...                     v.getPath().startswith(query[\'path\'][\'query\'])]\n+      ...         return self.values()\n+      >>> catalog = DummyPathCatalog([\'/abcd\', \'/defg\', \'/dummy/sub-site\',\n+      ...                             \'/dummy/sub-site/ghij\'])\n+      >>> context = create_context()\n+      >>> context.portal_catalog = catalog\n+      >>> context.portal_url = DummyUrlTool(context)\n+      >>> factory = CatalogVocabularyFactory()\n+\n+      >>> sorted(t.token for t in factory(context))\n+      [\'/abcd\', \'/defg\', \'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n+\n+      >>> from plone.app.vocabularies.tests.base import DummyNavRoot\n+      >>> nav_root = DummyNavRoot(\'sub-site\', parent=context)\n+      >>> [t.token for t in factory(nav_root)]\n+      [\'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n+\n+    """\n+\n+    def __call__(self, context, query=None):\n+        parsed = {}\n+        if query:\n+            parsed = parseAndModifyFormquery(context, query["criteria"])\n+            if "sort_on" in query:\n+                parsed["sort_on"] = query["sort_on"]\n+            if "sort_order" in query:\n+                parsed["sort_order"] = str(query["sort_order"])\n+\n+        if "path" not in parsed:\n+            site = getSite()\n+            nav_root = get_navigation_root_object(context, site)\n+            site_path = site.getPhysicalPath()\n+            if nav_root and nav_root.getPhysicalPath() != site_path:\n+                parsed["path"] = {\n+                    "query": "/".join(nav_root.getPhysicalPath()),\n+                    "depth": -1,\n+                }\n+        return CatalogVocabulary.fromItems(parsed, context)\ndiff --git a/setup.py b/setup.py\nindex 326d53e..a410f0e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,6 +42,7 @@\n         "setuptools",\n         "plone.app.contentlisting",\n         "plone.app.registry>=1.1",\n+        "plone.app.vocabularies",\n         "plone.base",\n         "plone.batching",\n         "plone.i18n",\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-05-17T11:43:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/45e36c40636dfb43d5bf403461e6435c022f09e8

Merge pull request #124 from plone/fix-circular-dep-pavocabularies

Fix a circular dependency to plone.app.vocabularies

Files changed:
A news/fix-circular-dep-pavocabularies.bugfix
A plone/app/querystring/tests/testVocabularies.py
A plone/app/querystring/vocabularies.py
M plone/app/querystring/configure.zcml
M plone/app/querystring/queryparser.py
M setup.py

b'diff --git a/news/fix-circular-dep-pavocabularies.bugfix b/news/fix-circular-dep-pavocabularies.bugfix\nnew file mode 100644\nindex 0000000..c55954a\n--- /dev/null\n+++ b/news/fix-circular-dep-pavocabularies.bugfix\n@@ -0,0 +1,5 @@\n+Fix a circular transitive dependency to `plone.app.querystring`.\n+New direct dependency explicit on `plone.app.vocabularies`.\n+Move `plone.app.querystring.catalog.CatalogVocabularyFactory` to `.vocabularies`, move the ZCML to register the factory, move the the test.\n+Move `plone.app.querystring.utils.parse_query` with new name `parseAndModifyFormquery` to `.queryparser`.\n+[@jensens]\ndiff --git a/plone/app/querystring/configure.zcml b/plone/app/querystring/configure.zcml\nindex 92ee3ee..b1e7bbc 100644\n--- a/plone/app/querystring/configure.zcml\n+++ b/plone/app/querystring/configure.zcml\n@@ -64,4 +64,8 @@\n       name="1000"\n       component=".querymodifiers.modify_query_to_enforce_navigation_root"\n       />\n+  <utility\n+      factory=".vocabularies.CatalogVocabularyFactory"\n+      name="plone.app.vocabularies.Catalog"\n+      />\n </configure>\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 7c6b0cd..d32e1ea 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -1,3 +1,4 @@\n+from .interfaces import IParsedQueryIndexModifier\n from Acquisition import aq_parent\n from collections import namedtuple\n from DateTime import DateTime\n@@ -8,6 +9,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n+from zope.component import getUtilitiesFor\n from zope.component import getUtility\n from zope.dottedname.resolve import resolve\n \n@@ -67,6 +69,23 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n     return query\n \n \n+def parseAndModifyFormquery(context, query, sort_on=None, sort_order=None):\n+    parsedquery = parseFormquery(context, query, sort_on, sort_order)\n+\n+    index_modifiers = getUtilitiesFor(IParsedQueryIndexModifier)\n+    for name, modifier in index_modifiers:\n+        if name in parsedquery:\n+            new_name, query = modifier(parsedquery[name])\n+            parsedquery[name] = query\n+            # if a new index name has been returned, we need to replace\n+            # the native ones\n+            if name != new_name:\n+                del parsedquery[name]\n+                parsedquery[new_name] = query\n+\n+    return parsedquery\n+\n+\n # Query operators\n \n \ndiff --git a/plone/app/querystring/tests/testVocabularies.py b/plone/app/querystring/tests/testVocabularies.py\nnew file mode 100644\nindex 0000000..1447984\n--- /dev/null\n+++ b/plone/app/querystring/tests/testVocabularies.py\n@@ -0,0 +1,19 @@\n+from plone.app.vocabularies.tests.test_vocabularies import vocabSetUp\n+from plone.app.vocabularies.tests.test_vocabularies import vocabTearDown\n+\n+import doctest\n+import unittest\n+\n+\n+def test_suite():\n+    optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocTestSuite(\n+                "plone.app.vocabularies.catalog",\n+                setUp=vocabSetUp,\n+                tearDown=vocabTearDown,\n+                optionflags=optionflags,\n+            ),\n+        )\n+    )\ndiff --git a/plone/app/querystring/vocabularies.py b/plone/app/querystring/vocabularies.py\nnew file mode 100644\nindex 0000000..283dd19\n--- /dev/null\n+++ b/plone/app/querystring/vocabularies.py\n@@ -0,0 +1,63 @@\n+from .queryparser import parseAndModifyFormquery\n+from plone.app.vocabularies.catalog import CatalogVocabulary\n+from plone.base.navigationroot import get_navigation_root_object\n+from zope.component.hooks import getSite\n+from zope.interface import implementer\n+from zope.schema.interfaces import IVocabularyFactory\n+\n+\n+# this vocabulary is in this package by intend.\n+# since plone.app.querystring depends on plone.app.vocabularies\n+# we can not put it over there without creating a circular dependency.\n+\n+\n+@implementer(IVocabularyFactory)\n+class CatalogVocabularyFactory:\n+    """\n+    Test application of Navigation Root:\n+\n+      >>> from plone.app.vocabularies.tests.base import create_context\n+      >>> from plone.app.vocabularies.tests.base import DummyUrlTool\n+      >>> from plone.app.vocabularies.tests.base import DummyCatalog\n+      >>> class DummyPathCatalog(DummyCatalog):\n+      ...     def __call__(self, **query):\n+      ...         if \'path\' in query and \'query\' in query[\'path\']:\n+      ...             return [v for v in self.values() if\n+      ...                     v.getPath().startswith(query[\'path\'][\'query\'])]\n+      ...         return self.values()\n+      >>> catalog = DummyPathCatalog([\'/abcd\', \'/defg\', \'/dummy/sub-site\',\n+      ...                             \'/dummy/sub-site/ghij\'])\n+      >>> context = create_context()\n+      >>> context.portal_catalog = catalog\n+      >>> context.portal_url = DummyUrlTool(context)\n+      >>> factory = CatalogVocabularyFactory()\n+\n+      >>> sorted(t.token for t in factory(context))\n+      [\'/abcd\', \'/defg\', \'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n+\n+      >>> from plone.app.vocabularies.tests.base import DummyNavRoot\n+      >>> nav_root = DummyNavRoot(\'sub-site\', parent=context)\n+      >>> [t.token for t in factory(nav_root)]\n+      [\'/dummy/sub-site\', \'/dummy/sub-site/ghij\']\n+\n+    """\n+\n+    def __call__(self, context, query=None):\n+        parsed = {}\n+        if query:\n+            parsed = parseAndModifyFormquery(context, query["criteria"])\n+            if "sort_on" in query:\n+                parsed["sort_on"] = query["sort_on"]\n+            if "sort_order" in query:\n+                parsed["sort_order"] = str(query["sort_order"])\n+\n+        if "path" not in parsed:\n+            site = getSite()\n+            nav_root = get_navigation_root_object(context, site)\n+            site_path = site.getPhysicalPath()\n+            if nav_root and nav_root.getPhysicalPath() != site_path:\n+                parsed["path"] = {\n+                    "query": "/".join(nav_root.getPhysicalPath()),\n+                    "depth": -1,\n+                }\n+        return CatalogVocabulary.fromItems(parsed, context)\ndiff --git a/setup.py b/setup.py\nindex 326d53e..a410f0e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,6 +42,7 @@\n         "setuptools",\n         "plone.app.contentlisting",\n         "plone.app.registry>=1.1",\n+        "plone.app.vocabularies",\n         "plone.base",\n         "plone.batching",\n         "plone.i18n",\n'

