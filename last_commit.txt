Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T17:15:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/e0b50dde97d3c608eac1dd60ec1317388ea6af00

isort

Files changed:
M plone/scale/storage.py
M setup.cfg

b'diff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex c56d6d0..cf375d5 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -13,6 +13,7 @@\n import logging\n import pprint\n \n+\n try:\n     from plone.protect.utils import safeWrite\n except ImportError:\ndiff --git a/setup.cfg b/setup.cfg\nindex a62eb88..5dc2092 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -5,7 +5,11 @@ ignore =\n   tox.ini\n \n [isort]\n-profile = plone\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n [bdist_wheel]\n universal = 0\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T17:15:35+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/7bdf5b484119d2fec8153984313addca3c150de4

black

Files changed:
M plone/scale/scale.py
M plone/scale/storage.py

b'diff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 95380e4..3fe7be6 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -146,9 +146,7 @@ def _scale_thumbnail(image, width=None, height=None):\n         return image\n \n     image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n-    image = image.resize(\n-        (dimensions.target_width, dimensions.target_height), LANCZOS\n-    )\n+    image = image.resize((dimensions.target_width, dimensions.target_height), LANCZOS)\n     return image\n \n \n@@ -171,7 +169,6 @@ def get_scale_mode(mode, direction=None):\n \n \n class ScaledDimensions:\n-\n     def __init__(self, original_width=0, original_height=0):\n         self.final_width = self.target_width = original_width\n         self.final_height = self.target_height = original_height\n@@ -418,13 +415,9 @@ def scalePILImage(image, width=None, height=None, mode="contain", direction=None\n         # The original already has the right aspect ratio, so we only need\n         # to scale.\n         if mode == "contain":\n-            image.thumbnail(\n-                (dimensions.final_width, dimensions.final_height), LANCZOS\n-            )\n+            image.thumbnail((dimensions.final_width, dimensions.final_height), LANCZOS)\n             return image\n-        return image.resize(\n-            (dimensions.final_width, dimensions.final_height), LANCZOS\n-        )\n+        return image.resize((dimensions.final_width, dimensions.final_height), LANCZOS)\n \n     if dimensions.pre_scale_crop:\n         # crop image before scaling to avoid excessive memory use\n@@ -437,9 +430,7 @@ def scalePILImage(image, width=None, height=None, mode="contain", direction=None\n         return image\n \n     image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n-    image = image.resize(\n-        (dimensions.target_width, dimensions.target_height), LANCZOS\n-    )\n+    image = image.resize((dimensions.target_width, dimensions.target_height), LANCZOS)\n \n     if dimensions.post_scale_crop:\n         # crop off remains due to rounding before scaling\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex cf375d5..60bf8a3 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -245,9 +245,7 @@ def pre_scale(self, **parameters):\n             if field:\n                 orig_width, orig_height = field.getImageSize()\n                 mode = get_scale_mode(\n-                    parameters.get("direction")\n-                    or parameters.get("mode")\n-                    or "contain"\n+                    parameters.get("direction") or parameters.get("mode") or "contain"\n                 )\n                 width, height = calculate_scaled_dimensions(\n                     orig_width, orig_height, width, height, mode\n@@ -309,7 +307,11 @@ def scale(self, **parameters):\n             # Might be on old-style uuid4 scale\n             key = self.hash(**parameters)\n             info = self.get_info_by_hash(key)\n-        if info is not None and info.get("data") is not None and not self._modified_since(info["modified"]):\n+        if (\n+            info is not None\n+            and info.get("data") is not None\n+            and not self._modified_since(info["modified"])\n+        ):\n             logger.debug(f"scale found existing info {info}")\n             return info\n         return self.generate_scale(**parameters)\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T17:17:59+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/1d671994e6a301a706e5d7b80409b7c6d564f220

Removed reference to plone.app.imaging.

That was Archetypes only.

Files changed:
M plone/scale/interfaces.py

b'diff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex d743d35..87103e0 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -4,12 +4,8 @@\n class IScaledImageQuality(Interface):\n     """Marker interface for utility query.\n \n-    This can be used by plone.app.imaging to define a property "scaled image\n-    quality" in the site\'s image handling settings.\n-\n-    The property can then be used in plone.namedfile as well as in\n-    Products.Archetypes and Products.ATContentTypes (the latter two currently\n-    by a patch in plone.app.imaging.monkey).\n+    This can be used to define a property "scaled image quality" in the site\'s image\n+    handling settings.\n     """\n \n \n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T17:21:06+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/0dc89456831eafb9010ae8a3cfeb98805beb618d

Added news snippet.

Files changed:
A news/59.bugfix

b'diff --git a/news/59.bugfix b/news/59.bugfix\nnew file mode 100644\nindex 0000000..af94f80\n--- /dev/null\n+++ b/news/59.bugfix\n@@ -0,0 +1 @@\n+Minor cleanup: isort, black.  [maurits]\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-06-13T17:29:35+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/2e14651b247a55ce0e69438957076b1211990456

Merge pull request #59 from plone/maurits-black-etc

Minor cleanup: isort, black

Files changed:
A news/59.bugfix
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M setup.cfg

b'diff --git a/news/59.bugfix b/news/59.bugfix\nnew file mode 100644\nindex 0000000..af94f80\n--- /dev/null\n+++ b/news/59.bugfix\n@@ -0,0 +1 @@\n+Minor cleanup: isort, black.  [maurits]\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex d743d35..87103e0 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -4,12 +4,8 @@\n class IScaledImageQuality(Interface):\n     """Marker interface for utility query.\n \n-    This can be used by plone.app.imaging to define a property "scaled image\n-    quality" in the site\'s image handling settings.\n-\n-    The property can then be used in plone.namedfile as well as in\n-    Products.Archetypes and Products.ATContentTypes (the latter two currently\n-    by a patch in plone.app.imaging.monkey).\n+    This can be used to define a property "scaled image quality" in the site\'s image\n+    handling settings.\n     """\n \n \ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 95380e4..3fe7be6 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -146,9 +146,7 @@ def _scale_thumbnail(image, width=None, height=None):\n         return image\n \n     image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n-    image = image.resize(\n-        (dimensions.target_width, dimensions.target_height), LANCZOS\n-    )\n+    image = image.resize((dimensions.target_width, dimensions.target_height), LANCZOS)\n     return image\n \n \n@@ -171,7 +169,6 @@ def get_scale_mode(mode, direction=None):\n \n \n class ScaledDimensions:\n-\n     def __init__(self, original_width=0, original_height=0):\n         self.final_width = self.target_width = original_width\n         self.final_height = self.target_height = original_height\n@@ -418,13 +415,9 @@ def scalePILImage(image, width=None, height=None, mode="contain", direction=None\n         # The original already has the right aspect ratio, so we only need\n         # to scale.\n         if mode == "contain":\n-            image.thumbnail(\n-                (dimensions.final_width, dimensions.final_height), LANCZOS\n-            )\n+            image.thumbnail((dimensions.final_width, dimensions.final_height), LANCZOS)\n             return image\n-        return image.resize(\n-            (dimensions.final_width, dimensions.final_height), LANCZOS\n-        )\n+        return image.resize((dimensions.final_width, dimensions.final_height), LANCZOS)\n \n     if dimensions.pre_scale_crop:\n         # crop image before scaling to avoid excessive memory use\n@@ -437,9 +430,7 @@ def scalePILImage(image, width=None, height=None, mode="contain", direction=None\n         return image\n \n     image.draft(image.mode, (dimensions.target_width, dimensions.target_height))\n-    image = image.resize(\n-        (dimensions.target_width, dimensions.target_height), LANCZOS\n-    )\n+    image = image.resize((dimensions.target_width, dimensions.target_height), LANCZOS)\n \n     if dimensions.post_scale_crop:\n         # crop off remains due to rounding before scaling\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex c56d6d0..60bf8a3 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -13,6 +13,7 @@\n import logging\n import pprint\n \n+\n try:\n     from plone.protect.utils import safeWrite\n except ImportError:\n@@ -244,9 +245,7 @@ def pre_scale(self, **parameters):\n             if field:\n                 orig_width, orig_height = field.getImageSize()\n                 mode = get_scale_mode(\n-                    parameters.get("direction")\n-                    or parameters.get("mode")\n-                    or "contain"\n+                    parameters.get("direction") or parameters.get("mode") or "contain"\n                 )\n                 width, height = calculate_scaled_dimensions(\n                     orig_width, orig_height, width, height, mode\n@@ -308,7 +307,11 @@ def scale(self, **parameters):\n             # Might be on old-style uuid4 scale\n             key = self.hash(**parameters)\n             info = self.get_info_by_hash(key)\n-        if info is not None and info.get("data") is not None and not self._modified_since(info["modified"]):\n+        if (\n+            info is not None\n+            and info.get("data") is not None\n+            and not self._modified_since(info["modified"])\n+        ):\n             logger.debug(f"scale found existing info {info}")\n             return info\n         return self.generate_scale(**parameters)\ndiff --git a/setup.cfg b/setup.cfg\nindex a62eb88..5dc2092 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -5,7 +5,11 @@ ignore =\n   tox.ini\n \n [isort]\n-profile = plone\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n [bdist_wheel]\n universal = 0\n'

