Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-29T16:34:53+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/c37704580212be17738bb38300361db19c5248db

Use json_compatible when serializing users (#1494)

* use json_compatible for user schema field values

* tests

* changelog

Files changed:
A news/1493.bugfix
M src/plone/restapi/serializer/user.py
M src/plone/restapi/tests/test_serializer_user.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/news/1493.bugfix b/news/1493.bugfix\nnew file mode 100644\nindex 000000000..4def9665a\n--- /dev/null\n+++ b/news/1493.bugfix\n@@ -0,0 +1,2 @@\n+Use json_compatible when serializing users in @users endpoint\n+[erral]\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex bb37113f9..b02fdfe32 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -1,6 +1,8 @@\n+from plone.app.users.browser.userdatapanel import getUserDataSchema\n+from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.batching import HypermediaBatch\n+from plone.restapi.serializer.converters import json_compatible\n from Products.CMFCore.interfaces._tools import IMemberData\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_unicode\n@@ -9,7 +11,6 @@\n from zope.interface import implementer\n from zope.publisher.interfaces import IRequest\n from zope.schema import getFieldNames\n-from plone.app.users.browser.userdatapanel import getUserDataSchema\n \n \n class BaseSerializer:\n@@ -53,7 +54,7 @@ def __call__(self):\n                     value = None\n                 if value:\n                     value = safe_unicode(value)\n-            data[name] = value\n+            data[name] = json_compatible(value)\n \n         return data\n \ndiff --git a/src/plone/restapi/tests/test_serializer_user.py b/src/plone/restapi/tests/test_serializer_user.py\nindex cf5ffefc5..4983fdf04 100644\n--- a/src/plone/restapi/tests/test_serializer_user.py\n+++ b/src/plone/restapi/tests/test_serializer_user.py\n@@ -1,7 +1,9 @@\n+from DateTime import DateTime\n from plone import api\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n+from plone.app.users.browser.schemaeditor import applySchema\n \n import unittest\n \n@@ -76,3 +78,61 @@ def test_serialize_custom_member_schema(self):\n         res = self.serialize(user)\n         self.assertIn("twitter", res)\n         self.assertEqual(res["twitter"], "TheRealDuck")\n+\n+\n+class TestSerializeUserCustomSchemaToJsonAdapter(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        member_schema = """\n+            <model xmlns="http://namespaces.plone.org/supermodel/schema"\n+                xmlns:form="http://namespaces.plone.org/supermodel/form"\n+                xmlns:users="http://namespaces.plone.org/supermodel/users"\n+                xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+                i18n:domain="plone">\n+              <schema name="member-fields">\n+                <field name="birthdate" type="zope.schema.Date"\n+                         users:forms="In User Profile">\n+                  <description i18n:translate="help_birthdate">\n+                    Birthdate\n+                  </description>\n+                  <required>False</required>\n+                  <title i18n:translate="label_birthdate">Birthdate</title>\n+                </field>\n+                <field name="registration_datetime" type="zope.schema.Datetime"\n+                         users:forms="In User Profile">\n+                  <description i18n:translate="help_registration_datetime">\n+                    Registration datetime\n+                  </description>\n+                  <required>False</required>\n+                  <title i18n:translate="label_registration_datetime">Registration datetime</title>\n+                </field>\n+              </schema>\n+            </model>\n+        """\n+        applySchema(member_schema)\n+        self.user = api.user.create(\n+            email="donald.duck@example.com",\n+            username="donald",\n+            properties={\n+                "birthdate": DateTime("2022-01-10"),\n+                "registration_datetime": DateTime("2022-01-10 14:00:00"),\n+            },\n+        )\n+\n+    def serialize(self, user):\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJson)\n+        return serializer()\n+\n+    def test_serialize_with_datetime(self):\n+        """test that when we have a datetime field in user schema, the response is serialized correctly"""\n+\n+        res = self.serialize(self.user)\n+\n+        self.assertIn("birthdate", res)\n+        self.assertEqual(res["birthdate"], "2022-01-10T00:00:00")\n+        self.assertEqual(res["registration_datetime"], "2022-01-10T14:00:00")\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex ccc8161dd..23fbd8fc6 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -1,3 +1,4 @@\n+from DateTime import DateTime\n from plone import api\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -69,9 +70,10 @@ def tearDown(self):\n         self.anon_api_session.close()\n \n     def makeRealImage(self):\n-        import Products.PlonePAS as ppas\n         from Products.PlonePAS.tests import dummy\n \n+        import Products.PlonePAS as ppas\n+\n         pas_path = os.path.dirname(ppas.__file__)\n         path = os.path.join(pas_path, "tool.gif")\n         image = open(path, "rb")\n@@ -1008,3 +1010,51 @@ def test_get_user_portrait_anonymous(self):\n \n         self.assertEqual(200, response.status_code)\n         self.assertEqual(response.headers["Content-Type"], "image/gif")\n+\n+    def test_user_with_datetime(self):\n+        """test that when using a datetime field in the user schema\n+        the endpoints works correctly\n+        """\n+        from plone.app.users.browser.schemaeditor import applySchema\n+\n+        member_schema = """\n+            <model xmlns="http://namespaces.plone.org/supermodel/schema"\n+                xmlns:form="http://namespaces.plone.org/supermodel/form"\n+                xmlns:users="http://namespaces.plone.org/supermodel/users"\n+                xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+                i18n:domain="plone">\n+              <schema name="member-fields">\n+                <field name="birthdate" type="zope.schema.Date"\n+                         users:forms="In User Profile">\n+                  <description i18n:translate="help_birthdate">\n+                    Birthdate\n+                  </description>\n+                  <required>False</required>\n+                  <title i18n:translate="label_birthdate">Birthdate</title>\n+                </field>\n+                <field name="registration_datetime" type="zope.schema.Datetime"\n+                         users:forms="In User Profile">\n+                  <description i18n:translate="help_registration_datetime">\n+                    Registration datetime\n+                  </description>\n+                  <required>False</required>\n+                  <title i18n:translate="label_registration_datetime">Registration datetime</title>\n+                </field>\n+              </schema>\n+            </model>\n+        """\n+        applySchema(member_schema)\n+        api.user.create(\n+            email="donald.duck@example.com",\n+            username="donald",\n+            properties={\n+                "birthdate": DateTime("2022-01-10"),\n+                "registration_datetime": DateTime("2022-01-10 14:00:00"),\n+            },\n+        )\n+        transaction.commit()\n+\n+        response = self.api_session.get("/@users/donald")\n+        self.assertEqual(200, response.status_code)\n+        self.assertIn("birthdate", response.json())\n+        self.assertIn("registration_datetime", response.json())\n'

