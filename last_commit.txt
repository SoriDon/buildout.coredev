Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-01-25T20:20:28-05:00
Author: nathan.vangheem () <nathan.vangheem@wildcardcorp.com>
Commit: https://github.com/plone/plone.app.content/commit/a3ff0844a2ec658e61c4747bbe85867b2f6c8d4f

do not throw exceptions for cutting locked objects in folder contents

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/copy.py
M plone/app/content/browser/contents/cut.py
M plone/app/content/tests/test_folder.py

diff --git a/CHANGES.rst b/CHANGES.rst
index be50f73..2661eef 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix errors when cutting and copying objects in folder contents
+  [vangheem]
 
 
 3.0.16 (2016-01-08)
diff --git a/plone/app/content/browser/contents/copy.py b/plone/app/content/browser/contents/copy.py
index 4586974..99f981e 100644
--- a/plone/app/content/browser/contents/copy.py
+++ b/plone/app/content/browser/contents/copy.py
@@ -1,9 +1,6 @@
 # -*- coding: utf-8 -*-
-from cgi import escape
 from OFS.CopySupport import _cb_encode
 from OFS.CopySupport import cookie_path
-from OFS.CopySupport import CopyError
-from OFS.CopySupport import eNotSupported
 from OFS.Moniker import Moniker
 from plone.app.content.browser.contents import ContentsBaseAction
 from plone.app.content.interfaces import IStructureAction
@@ -41,7 +38,9 @@ def finish(self):
         oblist = []
         for ob in self.oblist:
             if not ob.cb_isCopyable():
-                raise CopyError(eNotSupported % escape(id))
+                self.errors.append(_(u'${title} cannot be copied.',
+                                     mapping={u'title': self.objectTitle(ob)}))
+                continue
             m = Moniker(ob)
             oblist.append(m.dump())
         cp = (0, oblist)
diff --git a/plone/app/content/browser/contents/cut.py b/plone/app/content/browser/contents/cut.py
index 30057c7..43d70ad 100644
--- a/plone/app/content/browser/contents/cut.py
+++ b/plone/app/content/browser/contents/cut.py
@@ -1,14 +1,10 @@
 # -*- coding: utf-8 -*-
-from cgi import escape
 from OFS.CopySupport import _cb_encode
 from OFS.CopySupport import cookie_path
-from OFS.CopySupport import CopyError
-from OFS.CopySupport import eNotSupported
 from OFS.Moniker import Moniker
 from plone.app.content.browser.contents import ContentsBaseAction
 from plone.app.content.interfaces import IStructureAction
 from Products.CMFPlone import PloneMessageFactory as _
-from webdav.Lockable import ResourceLockedError
 from zope.i18n import translate
 from zope.interface import implementer
 
@@ -42,11 +38,13 @@ def finish(self):
         oblist = []
         for ob in self.oblist:
             if ob.wl_isLocked():
-                raise ResourceLockedError('Object "%s" is locked via WebDAV'
-                                          % ob.getId())
-
+                self.errors.append(_(u'${title} is being edited and cannot be cut.',
+                                     mapping={u'title': self.objectTitle(ob)}))
+                continue
             if not ob.cb_isMoveable():
-                raise CopyError(eNotSupported % escape(id))
+                self.errors.append(_(u'${title} is being edited and can not be cut.',
+                                     mapping={u'title': self.objectTitle(ob)}))
+                continue
             m = Moniker(ob)
             oblist.append(m.dump())
         cp = (1, oblist)
diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py
index 44eb3fa..6993201 100644
--- a/plone/app/content/tests/test_folder.py
+++ b/plone/app/content/tests/test_folder.py
@@ -16,6 +16,7 @@
 from zope.publisher.browser import TestRequest
 import json
 import unittest
+from plone.locking.interfaces import IRefreshableLockable
 
 
 class BaseTest(unittest.TestCase):
@@ -220,6 +221,38 @@ def testStateChange(self):
         self.assertTrue(len(result['breadcrumbs']) > 0)
 
 
+class CutCopyLockedTest(BaseTest):
+    """in folder contents """
+
+    layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+        self.portal.invokeFactory('Document', id="page", title="page")
+        self.portal.page.reindexObject()
+
+        self.env = {'HTTP_ACCEPT_LANGUAGE': 'en', 'REQUEST_METHOD': 'POST'}
+        self.request = makerequest(self.layer['app']).REQUEST
+        self.request.environ.update(self.env)
+        self.request.form = {
+            'selection': '["' + IUUID(self.portal.page) + '"]',
+            '_authenticator': createToken(),
+            'folder': '/'
+        }
+        self.request.REQUEST_METHOD = 'POST'
+
+    def test_cut_object_when_locked(self):
+        from plone.app.content.browser.contents.cut import CutActionView
+        lockable = IRefreshableLockable(self.portal.page)
+        lockable.lock()
+        view = CutActionView(self.portal, self.request)
+        view()
+        self.assertEquals(len(view.errors), 1)
+
+
 class DeleteDXTest(BaseTest):
     """Verify delete behavior from the folder contents view"""
 
@@ -257,6 +290,14 @@ def test_delete_object(self):
         view()
         self.assertTrue(page_id not in self.portal)
 
+    def test_delete_object_when_locked(self):
+        from plone.app.content.browser.contents.delete import DeleteActionView
+        lockable = IRefreshableLockable(self.portal.page)
+        lockable.lock()
+        view = DeleteActionView(self.portal, self.request)
+        view()
+        self.assertEquals(len(view.errors), 1)
+
     def test_delete_wrong_object_by_acquisition(self):
         page_id = self.portal.page.id
         f1 = self.portal.invokeFactory('Folder', id="f1", title="folder one")


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-01-25T22:01:19-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/5ac6fead7e77a74c11e1bd45595f27569b3bd86b

Merge pull request #70 from plone/fix-cut-copy-locked-errors-fc

do not throw exceptions for cutting locked objects in folder contents

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/copy.py
M plone/app/content/browser/contents/cut.py
M plone/app/content/tests/test_folder.py

diff --git a/CHANGES.rst b/CHANGES.rst
index be50f73..2661eef 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix errors when cutting and copying objects in folder contents
+  [vangheem]
 
 
 3.0.16 (2016-01-08)
diff --git a/plone/app/content/browser/contents/copy.py b/plone/app/content/browser/contents/copy.py
index 4586974..99f981e 100644
--- a/plone/app/content/browser/contents/copy.py
+++ b/plone/app/content/browser/contents/copy.py
@@ -1,9 +1,6 @@
 # -*- coding: utf-8 -*-
-from cgi import escape
 from OFS.CopySupport import _cb_encode
 from OFS.CopySupport import cookie_path
-from OFS.CopySupport import CopyError
-from OFS.CopySupport import eNotSupported
 from OFS.Moniker import Moniker
 from plone.app.content.browser.contents import ContentsBaseAction
 from plone.app.content.interfaces import IStructureAction
@@ -41,7 +38,9 @@ def finish(self):
         oblist = []
         for ob in self.oblist:
             if not ob.cb_isCopyable():
-                raise CopyError(eNotSupported % escape(id))
+                self.errors.append(_(u'${title} cannot be copied.',
+                                     mapping={u'title': self.objectTitle(ob)}))
+                continue
             m = Moniker(ob)
             oblist.append(m.dump())
         cp = (0, oblist)
diff --git a/plone/app/content/browser/contents/cut.py b/plone/app/content/browser/contents/cut.py
index 30057c7..43d70ad 100644
--- a/plone/app/content/browser/contents/cut.py
+++ b/plone/app/content/browser/contents/cut.py
@@ -1,14 +1,10 @@
 # -*- coding: utf-8 -*-
-from cgi import escape
 from OFS.CopySupport import _cb_encode
 from OFS.CopySupport import cookie_path
-from OFS.CopySupport import CopyError
-from OFS.CopySupport import eNotSupported
 from OFS.Moniker import Moniker
 from plone.app.content.browser.contents import ContentsBaseAction
 from plone.app.content.interfaces import IStructureAction
 from Products.CMFPlone import PloneMessageFactory as _
-from webdav.Lockable import ResourceLockedError
 from zope.i18n import translate
 from zope.interface import implementer
 
@@ -42,11 +38,13 @@ def finish(self):
         oblist = []
         for ob in self.oblist:
             if ob.wl_isLocked():
-                raise ResourceLockedError('Object "%s" is locked via WebDAV'
-                                          % ob.getId())
-
+                self.errors.append(_(u'${title} is being edited and cannot be cut.',
+                                     mapping={u'title': self.objectTitle(ob)}))
+                continue
             if not ob.cb_isMoveable():
-                raise CopyError(eNotSupported % escape(id))
+                self.errors.append(_(u'${title} is being edited and can not be cut.',
+                                     mapping={u'title': self.objectTitle(ob)}))
+                continue
             m = Moniker(ob)
             oblist.append(m.dump())
         cp = (1, oblist)
diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py
index 44eb3fa..6993201 100644
--- a/plone/app/content/tests/test_folder.py
+++ b/plone/app/content/tests/test_folder.py
@@ -16,6 +16,7 @@
 from zope.publisher.browser import TestRequest
 import json
 import unittest
+from plone.locking.interfaces import IRefreshableLockable
 
 
 class BaseTest(unittest.TestCase):
@@ -220,6 +221,38 @@ def testStateChange(self):
         self.assertTrue(len(result['breadcrumbs']) > 0)
 
 
+class CutCopyLockedTest(BaseTest):
+    """in folder contents """
+
+    layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+        self.portal.invokeFactory('Document', id="page", title="page")
+        self.portal.page.reindexObject()
+
+        self.env = {'HTTP_ACCEPT_LANGUAGE': 'en', 'REQUEST_METHOD': 'POST'}
+        self.request = makerequest(self.layer['app']).REQUEST
+        self.request.environ.update(self.env)
+        self.request.form = {
+            'selection': '["' + IUUID(self.portal.page) + '"]',
+            '_authenticator': createToken(),
+            'folder': '/'
+        }
+        self.request.REQUEST_METHOD = 'POST'
+
+    def test_cut_object_when_locked(self):
+        from plone.app.content.browser.contents.cut import CutActionView
+        lockable = IRefreshableLockable(self.portal.page)
+        lockable.lock()
+        view = CutActionView(self.portal, self.request)
+        view()
+        self.assertEquals(len(view.errors), 1)
+
+
 class DeleteDXTest(BaseTest):
     """Verify delete behavior from the folder contents view"""
 
@@ -257,6 +290,14 @@ def test_delete_object(self):
         view()
         self.assertTrue(page_id not in self.portal)
 
+    def test_delete_object_when_locked(self):
+        from plone.app.content.browser.contents.delete import DeleteActionView
+        lockable = IRefreshableLockable(self.portal.page)
+        lockable.lock()
+        view = DeleteActionView(self.portal, self.request)
+        view()
+        self.assertEquals(len(view.errors), 1)
+
     def test_delete_wrong_object_by_acquisition(self):
         page_id = self.portal.page.id
         f1 = self.portal.invokeFactory('Folder', id="f1", title="folder one")


