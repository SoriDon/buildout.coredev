Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2018-02-01T00:48:11+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.workflow/commit/e5b9d5a935d1e5b2da6296662f4b46dfada49bbc

Update tests to plone.app.testing best practices

Do not use the bbb package anymore,
use a testing.py to set up the layers, etc etc

Files changed:
A plone/app/workflow/testing.py
M plone/app/workflow/tests/onestateworkflow.rst
M plone/app/workflow/tests/sharingpage.rst
M plone/app/workflow/tests/test_exportimport.py
M plone/app/workflow/tests/test_folder_workflow.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_remap.py
M plone/app/workflow/tests/test_sharing_view.py
M plone/app/workflow/tests/test_simple_publication_workflow.py
D plone/app/workflow/tests/base.py

diff --git a/plone/app/workflow/testing.py b/plone/app/workflow/testing.py
new file mode 100644
index 0000000..99bae91
--- /dev/null
+++ b/plone/app/workflow/testing.py
@@ -0,0 +1,51 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import applyProfile
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+from Products.CMFCore.utils import getToolByName
+
+import doctest
+
+
+class PloneAppWorkflowLayer(PloneSandboxLayer):
+
+    def setUpZope(self, app, configurationContext):
+        import plone.app.workflow
+        self.loadZCML(package=plone.app.workflow)
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'plone.app.contenttypes:default')
+
+        acl_users = getToolByName(portal, 'acl_users')
+
+        acl_users.userFolderAddUser('manager', 'secret', ['Manager', ], [])
+        acl_users.userFolderAddUser('member', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('owner', 'secret', ['Owner', ], [])
+        acl_users.userFolderAddUser('reviewer', 'secret', ['Reviewer', ], [])
+        acl_users.userFolderAddUser('editor', 'secret', ['Editor', ], [])
+        acl_users.userFolderAddUser('reader', 'secret', ['Reader', ], [])
+
+        acl_users.userFolderAddUser('delegate_reader', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('delegate_editor', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('delegate_contributor', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('delegate_reviewer', 'secret', ['Member', ], [])
+
+
+PLONE_APP_WORKFLOW_FIXTURE = PloneAppWorkflowLayer()
+
+PLONE_APP_WORKFLOW_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),
+    name='PloneAppWorkflowLayer:Integration',
+)
+
+PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),
+    name='PloneAppWorkflowLayer:Functional',
+)
+
+optionflags = (
+    doctest.REPORT_ONLY_FIRST_FAILURE
+    | doctest.ELLIPSIS
+    | doctest.NORMALIZE_WHITESPACE
+)
diff --git a/plone/app/workflow/tests/base.py b/plone/app/workflow/tests/base.py
deleted file mode 100644
index cd2f5bb..0000000
--- a/plone/app/workflow/tests/base.py
+++ /dev/null
@@ -1,44 +0,0 @@
-from plone.app.testing.bbb import PloneTestCase
-
-
-class WorkflowTestCase(PloneTestCase):
-    """Base class for functional integration tests for plone.app.workflow.
-    This may provide specific set-up and tear-down operations, or provide
-    convenience methods.
-    """
-
-    def afterSetUp(self):
-
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager', ], [])
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('owner', 'secret', ['Owner', ], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer', ], [])
-        self.portal.acl_users._doAddUser('editor', 'secret', ['Editor', ], [])
-        self.portal.acl_users._doAddUser('reader', 'secret', ['Reader', ], [])
-
-        self.portal.acl_users._doAddUser('delegate_reader', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('delegate_editor', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('delegate_contributor', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('delegate_reviewer', 'secret', ['Member', ], [])
-        #self.portal.acl_users._doAddUser('delegate_manager', 'secret', ['Member', ], [])
-
-        self.setRoles(('Manager', ))
-        self.folder.invokeFactory('News Item', 'newsitem1')
-        self.newsitem = self.folder.newsitem1
-        self.folder.invokeFactory('Document', 'document1')
-        self.document = self.folder.document1
-        self.setRoles(('Member', ))
-
-    def setUpDefaultWorkflow(self, defaultWorkflow=None, hasFolderSpecificWorkflow=False):
-        # XXX - TODO: we'll be able to replace this all with the new remap template
-        self.workflow = self.portal.portal_workflow
-        ctypes = self.portal.allowedContentTypes()
-        # XXX figure out the real way to get the types
-        ctypes = ('Document', 'Folder', 'News Item', 'Event', )
-
-        for ctype in ctypes:
-            if ctype in ('Folder', 'Smart Folder') and hasFolderSpecificWorkflow:
-                # XXX factor in *_folder_* workflow declarations
-                self.workflow.setChainForPortalTypes(('%s' % ctype, ), ('%s' % defaultWorkflow, ))
-            else:
-                self.workflow.setChainForPortalTypes(('%s' % ctype, ), ('%s' % defaultWorkflow, ))
diff --git a/plone/app/workflow/tests/onestateworkflow.rst b/plone/app/workflow/tests/onestateworkflow.rst
index 91e33ee..8ee8fe4 100644
--- a/plone/app/workflow/tests/onestateworkflow.rst
+++ b/plone/app/workflow/tests/onestateworkflow.rst
@@ -4,33 +4,36 @@ Functional Testing of the One State Workflow Definition
 
 First, some set-up of our site for testing:
 
-    >>> self.setUpDefaultWorkflow(defaultWorkflow='one_state_workflow')
-
     >>> from plone.testing.z2 import Browser
-    >>> browser = Browser(app)
 
-Let us log all exceptions, which is useful for debugging.
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> request = layer['request']
 
-    >>> self.portal.error_log._ignored_exceptions = ()
-    >>> import transaction; transaction.commit()
+    >>> portal_workflow = portal.portal_workflow
+    >>> portal_url = portal.absolute_url()
+    >>> folder_url = '%s/folder1' % portal_url
+    >>> document_url = '%s/folder1/document1' % portal_url
+
+    >>> browser = Browser(app)
 
 Verify that our items are actually all in the one_state_workflow and in our
 default 'published' state
 
-    >>> self.workflow.getChainForPortalType('Document')
+    >>> portal_workflow.getChainForPortalType('Document')
     ('one_state_workflow',)
-    >>> self.workflow.getChainForPortalType('Folder')
+    >>> portal_workflow.getChainForPortalType('Folder')
     ('one_state_workflow',)
-    >>> self.workflow.getChainForPortalType('News Item')
+    >>> portal_workflow.getChainForPortalType('News Item')
     ('one_state_workflow',)
-    >>> self.workflow.getChainForPortalType('Event')
+    >>> portal_workflow.getChainForPortalType('Event')
     ('one_state_workflow',)
 
-    >>> self.workflow.getInfoFor(self.folder, 'review_state')
+    >>> portal_workflow.getInfoFor(portal.folder1, 'review_state')
     'published'
-    >>> self.workflow.getInfoFor(self.folder.document1, 'review_state')
+    >>> portal_workflow.getInfoFor(portal.folder1.document1, 'review_state')
     'published'
-    >>> self.workflow.getInfoFor(self.folder.newsitem1, 'review_state')
+    >>> portal_workflow.getInfoFor(portal.folder1.newsitem1, 'review_state')
     'published'
 
 
@@ -42,11 +45,11 @@ here
 
 Now we logout, so that we can inspect our item as an anonymous user
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
 
 Head over to our temporary folder containing our one_state_workflow items
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
 
 We're not forced to log in and we can view the item. Thus, we have view permission
 
@@ -64,7 +67,7 @@ We shouldn't see the edit tab
     Traceback (most recent call last):
     ...
     LookupError: label 'Edit'...
-    >>> browser.open('%s' % self.folder.document1.absolute_url())
+    >>> browser.open(document_url)
     >>> browser.getControl('Edit')
     Traceback (most recent call last):
     ...
@@ -72,11 +75,11 @@ We shouldn't see the edit tab
 
 Or have the "Modify portal content" permission in any scenario
 
-    >>> browser.open('%s/edit' % self.folder.absolute_url())
+    >>> browser.open('%s/edit' % folder_url)
     >>> 'Login Name' in browser.contents
     True
 
-    >>> browser.open('%s/edit' % self.folder.document1.absolute_url())
+    >>> browser.open('%s/edit' % document_url)
     >>> 'Login Name' in browser.contents
     True
 
@@ -85,15 +88,15 @@ Test with the member role
 -------------------------
 Logout, so that we can inspect our item as another user of the system
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'member'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
 Head over to our temporary folder containing our one_state_workflow items
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
 
 We're not forced to log in and we can view the item. Thus, we have view permission
 
@@ -111,7 +114,7 @@ We shouldn't see the edit tab
     Traceback (most recent call last):
     ...
     LookupError: label 'Edit'...
-    >>> browser.open('%s' % self.folder.document1.absolute_url())
+    >>> browser.open(document_url)
     >>> browser.getControl('Edit')
     Traceback (most recent call last):
     ...
diff --git a/plone/app/workflow/tests/sharingpage.rst b/plone/app/workflow/tests/sharingpage.rst
index 57b01a4..d210b40 100644
--- a/plone/app/workflow/tests/sharingpage.rst
+++ b/plone/app/workflow/tests/sharingpage.rst
@@ -5,24 +5,26 @@ Functional Testing of the Sharing Page
 The test setup has already ensured that we have a number of users available.
 Let's also create some
 
-    >>> self.setUpDefaultWorkflow(defaultWorkflow='one_state_workflow')
-
     >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> request = layer['request']
+
+    >>> portal_url = portal.absolute_url()
+    >>> folder_url = '%s/folder1' % portal_url
+
     >>> browser = Browser(app)
     >>> browser.handleErrors = False
 
-Let us log all exceptions, which is useful for debugging.
-
-    >>> self.portal.error_log._ignored_exceptions = ()
-    >>> import transaction; transaction.commit()
 
 Anonymous users
 ---------------
 
 When we log out, we cannot see the "Sharing" tab at all.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open(folder_url)
 
 We're not forced to log in and we can view the item. Thus, we have view
 permission.
@@ -44,13 +46,13 @@ A Manager should be able to delegate all the accessible roles. Let's also
 take this opportunity to delegate some roles so that we can check what the
 other roles can do.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'manager'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -73,7 +75,6 @@ other roles can do.
     >>> 'Changes saved' not in browser.contents
     True
     >>> browser.getControl(name='entries.role_Contributor:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -82,7 +83,6 @@ other roles can do.
     >>> browser.getControl(name='search_term').value = "delegate_editor"
     >>> browser.getControl(name='form.button.Search').click()
     >>> browser.getControl(name='entries.role_Editor:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -99,7 +99,6 @@ other roles can do.
     >>> browser.getControl(name='search_term').value = "delegate_reader"
     >>> browser.getControl(name='form.button.Search').click()
     >>> browser.getControl(name='entries.role_Reader:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -108,7 +107,6 @@ other roles can do.
     >>> browser.getControl(name='search_term').value = "delegate_reviewer"
     >>> browser.getControl(name='form.button.Search').click()
     >>> browser.getControl(name='entries.role_Reviewer:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -119,14 +117,13 @@ Owner
 
 The owner should be able to delegate Reader, Editor and Contributor.
 
-    >>> from plone.app.testing import TEST_USER_NAME
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
-    >>> browser.getControl(name='__ac_name').value = TEST_USER_NAME
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
+    >>> browser.getControl(name='__ac_name').value = 'member'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -150,13 +147,13 @@ Delegated Reader
 A delegated reader should only be able to view the page, not even get to the
 Sharing tab.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_reader'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing')
     Traceback (most recent call last):
     ...
@@ -167,13 +164,13 @@ Delegated Editor
 
 A delegated Editor can give other people "view" and "edit" rights.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_editor'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -191,13 +188,13 @@ Delegated Contributor
 
 A delegated Contributor cannot assign any further rights.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_contributor'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
     Traceback (most recent call last):
     ...
@@ -208,13 +205,13 @@ Delegated Reviewer
 
 A delegated Reviewer can assign "view" and "review" rights.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_reviewer'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -237,13 +234,13 @@ A delegated Reviewer can assign "view" and "review" rights.
 #
 #A delegated Manager can assign all rights.
 #
-#    >>> browser.open('%s/logout' % self.portal.absolute_url())
-#    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+#    >>> browser.open('%s/logout' % portal_url)
+#    >>> browser.open('%s/login_form' % portal_url)
 #    >>> browser.getControl(name='__ac_name').value = 'delegate_manager'
 #    >>> browser.getControl(name='__ac_password').value = 'secret'
 #    >>> browser.getControl('Log in').click()
 #
-#    >>> browser.open('%s' % self.folder.absolute_url())
+#    >>> browser.open(folder_url)
 #    >>> browser.getLink('Sharing').click()
 #
 #    >>> "Can add" in browser.contents
diff --git a/plone/app/workflow/tests/test_exportimport.py b/plone/app/workflow/tests/test_exportimport.py
index f715cfc..ef91f2e 100644
--- a/plone/app/workflow/tests/test_exportimport.py
+++ b/plone/app/workflow/tests/test_exportimport.py
@@ -1,21 +1,24 @@
-import unittest
-from plone.testing.zca import UNIT_TESTING
-from zope.interface import Interface
-from zope.component import provideAdapter, provideUtility, getUtilitiesFor, getSiteManager
-
+# -*- coding: utf-8 -*-
 from five.localsitemanager import make_objectmanager_site
-from zope.site.hooks import setHooks, setSite, clearSite
-
-from plone.app.workflow.exportimport import import_sharing, export_sharing
+from OFS.Folder import Folder
+from plone.app.workflow.exportimport import export_sharing
+from plone.app.workflow.exportimport import import_sharing
 from plone.app.workflow.exportimport import SharingXMLAdapter
 from plone.app.workflow.exportimport import PersistentSharingPageRole
-
 from plone.app.workflow.interfaces import ISharingPageRole
-
+from plone.testing.zca import UNIT_TESTING
 from Products.GenericSetup.tests.common import DummyImportContext
 from Products.GenericSetup.tests.common import DummyExportContext
+from zope.component import getSiteManager
+from zope.component import getUtilitiesFor
+from zope.component import provideAdapter
+from zope.component import provideUtility
+from zope.interface import Interface
+from zope.site.hooks import clearSite
+from zope.site.hooks import setHooks
+from zope.site.hooks import setSite
 
-from OFS.Folder import Folder
+import unittest
 
 
 class ExportImportTest(unittest.TestCase):
@@ -363,7 +366,3 @@ def test_export_multiple(self):
         self.assertEqual('sharing.xml', export_context._wrote[0][0])
 
         self.assertEqual(export_xml, export_context._wrote[0][1])
-
-
-def test_suite():
-    return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/app/workflow/tests/test_folder_workflow.py b/plone/app/workflow/tests/test_folder_workflow.py
index 6a66baf..a9e5874 100644
--- a/plone/app/workflow/tests/test_folder_workflow.py
+++ b/plone/app/workflow/tests/test_folder_workflow.py
@@ -1,179 +1,248 @@
-from base import WorkflowTestCase
-
-from Products.CMFCore.WorkflowCore import WorkflowException
-
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ListFolderContents
 from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.WorkflowCore import WorkflowException
+
+import unittest
 
 
-class TestFolderWorkflow(WorkflowTestCase):
+class TestFolderWorkflow(unittest.TestCase):
 
-    def afterSetUp(self):
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
 
+        login(self.portal, 'manager')
         self.workflow.setChainForPortalTypes(['Folder'], 'folder_workflow')
 
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
+        self.portal.invokeFactory('Folder', id='dir')
+        self.dir = self.portal.dir
+
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
 
-        self.folder.invokeFactory('Folder', id='dir')
-        self.dir = self.folder.dir
+    def _state(self, obj):
+        return self.workflow.getInfoFor(obj, 'review_state')
 
     # Check allowed transitions
 
     def testOwnerHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.assertTrue(self.catalog(id='dir', review_state='private'))
 
     def testOwnerShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.workflow.doActionFor(self.dir, 'show')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.assertTrue(self.catalog(id='dir', review_state='visible'))
 
     def testOwnerPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testOwnerPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testOwnerHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.assertTrue(self.catalog(id='dir', review_state='private'))
 
     def testOwnerRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.workflow.doActionFor(self.dir, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.assertTrue(self.catalog(id='dir', review_state='visible'))
 
     def testManagerPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testManagerPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testManagerRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.assertTrue(self.catalog(id='dir', review_state='visible'))
 
     # Check forbidden transitions
 
     def testMemberHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testMemberShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'show')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'show',
+        )
 
     def testMemberPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testMemberPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testMemberHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testMemberRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'retract')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'retract',
+        )
 
     def testReviewerHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testReviewerShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'show')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'show',
+        )
 
     def testReviewerPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testReviewerPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testReviewerHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testReviewerRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'retract')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'retract',
+        )
 
     def testManagerHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'hide')
 
     def testManagerShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'show')
 
     def testManagerHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'hide')
 
     # Check view permissions
@@ -182,13 +251,13 @@ def testViewVisibleFolder(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.dir))
 
     def testViewIsNotAcquiredInVisibleState(self):
@@ -199,13 +268,13 @@ def testViewPrivateFolder(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(View, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(View, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(View, self.dir))
 
     def testViewIsNotAcquiredInPrivateState(self):
@@ -217,13 +286,13 @@ def testViewPublishedFolder(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.dir))
 
     def testViewIsNotAcquiredInPublishedState(self):
@@ -236,53 +305,62 @@ def testAccessVisibleFolderContents(self):
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
 
     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPrivateFolderContents(self):
         self.workflow.doActionFor(self.dir, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))
 
     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPublishedFolderContents(self):
         self.workflow.doActionFor(self.dir, 'publish')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
 
     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     # Check modify contents permission
 
@@ -290,53 +368,62 @@ def testModifyVisibleFolderContents(self):
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
 
     def testModifyPortalContentIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPrivateFolderContents(self):
         self.workflow.doActionFor(self.dir, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
 
     def testModifyPortalContentIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPublishedFolderContents(self):
         self.workflow.doActionFor(self.dir, 'publish')
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     # Check list contents permission
 
@@ -344,53 +431,62 @@ def testListVisibleFolderContents(self):
         # Owner is allowed
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
 
     def testListFolderContentsIsAcquiredInVisibleState(self):
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ListFolderContents), 'CHECKED')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ListFolderContents),
+            'CHECKED',
+        )
 
     def testListPrivateFolderContents(self):
         self.workflow.doActionFor(self.dir, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
 
     def testListFolderContentsIsAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ListFolderContents), 'CHECKED')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ListFolderContents),
+            'CHECKED',
+        )
 
     def testListPublishedFolderContents(self):
         self.workflow.doActionFor(self.dir, 'publish')
         # Owner is allowed
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
 
     def testListFolderContentsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ListFolderContents), 'CHECKED')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ListFolderContents),
+            'CHECKED',
+        )
 
     # Check catalog search
 
@@ -398,13 +494,13 @@ def testFindVisibleFolder(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='dir'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='dir'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='dir'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='dir'))
 
     def testFindPrivateFolder(self):
@@ -412,13 +508,13 @@ def testFindPrivateFolder(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='dir'))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(self.catalog(id='dir'))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(self.catalog(id='dir'))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(self.catalog(id='dir'))
 
     def testFindPublishedFolder(self):
@@ -426,18 +522,11 @@ def testFindPublishedFolder(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='dir'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='dir'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='dir'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='dir'))
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestFolderWorkflow))
-    return suite
diff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py
index 2400fea..25719e8 100644
--- a/plone/app/workflow/tests/test_functional.py
+++ b/plone/app/workflow/tests/test_functional.py
@@ -1,15 +1,56 @@
-from unittest import TestSuite
-from utils import optionflags
-from Testing.ZopeTestCase import ZopeDocFileSuite
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import setRoles
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING
+from plone.app.workflow.testing import optionflags
+from plone.testing import layered
+from Products.CMFCore.utils import getToolByName
+
+import doctest
+import transaction
+import unittest
+
+
+doctests = (
+    'onestateworkflow.rst',
+    'sharingpage.rst',
+)
+
+
+def setup(doctest):
+
+    portal = doctest.globs['layer']['portal']
+    login(portal, 'member')
+    setRoles(portal, 'member', ['Manager', ])
+    workflow = getToolByName(portal, 'portal_workflow')
+    workflow.setChainForPortalTypes(
+        ('Folder', 'Document', 'News Item', 'Event', ),
+        ('one_state_workflow', ),
+    )
+    portal.invokeFactory('Folder', 'folder1')
+    folder = portal.folder1
+    folder.invokeFactory('Document', 'document1')
+    folder.invokeFactory('News Item', 'newsitem1')
+    setRoles(portal, 'member', ['Member', ])
+    logout()
+    transaction.commit()
 
 
 def test_suite():
-    tests = ['onestateworkflow.rst', 'sharingpage.rst']
-    suite = TestSuite()
-    for test in tests:
-        suite.addTest(ZopeDocFileSuite(test,
-            optionflags=optionflags,
-            package="plone.app.workflow.tests",
-            test_class=WorkflowTestCase))
+    suite = unittest.TestSuite()
+    tests = [
+        layered(
+            doctest.DocFileSuite(
+                'tests/{0}'.format(test_file),
+                package='plone.app.workflow',
+                optionflags=optionflags,
+                setUp=setup,
+            ),
+            layer=PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING,
+        )
+        for test_file in doctests
+    ]
+    suite.addTests(tests)
     return suite
+
diff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py
index 1625f1d..39b5892 100644
--- a/plone/app/workflow/tests/test_one_state_workflow.py
+++ b/plone/app/workflow/tests/test_one_state_workflow.py
@@ -1,58 +1,67 @@
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_NAME
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
 
+import unittest
 
-class TestOneStateWorkflow(WorkflowTestCase):
 
-    def afterSetUp(self):
+class TestOneStateWorkflow(unittest.TestCase):
+
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
+
+        login(self.portal, 'manager')
+
         self.workflow.setChainForPortalTypes(['Document', 'News Item'], 'one_state_workflow')
 
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
-        self.portal.acl_users._doAddUser('editor', ' secret', ['Editor'], [])
-        self.portal.acl_users._doAddUser('reader', 'secret', ['Reader'], [])
+        self.portal.invokeFactory('Document', id='doc')
+        self.doc = self.portal.doc
+        self.portal.invokeFactory('News Item', id='ni')
+        self.ni = self.portal.ni
 
-        self.folder.invokeFactory('Document', id='doc')
-        self.doc = self.folder.doc
-        self.folder.invokeFactory('News Item', id='ni')
-        self.ni = self.folder.ni
+    def _state(self, obj):
+        return self.workflow.getInfoFor(obj, 'review_state')
 
     # Check allowed transitions: none for one state workflow
 
     def testInitialState(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.assertEqual(self.workflow.getInfoFor(self.ni, 'review_state'), 'published')
+        self.assertEqual(self._state(self.doc), 'published')
+        self.assertEqual(self._state(self.ni), 'published')
 
     # Check view permission
 
     def testViewIsNotAcquiredInPublishedState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')   # not checked
+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')  # not checked
 
     def testViewPublishedDocument(self):
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(View, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(View, self.doc))
 
     # Check access contents info permission
@@ -62,56 +71,55 @@ def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
 
     def testAccessPublishedDocument(self):
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPublishedDocument(self):
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Reader is denied
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     # Check change events permission
 
     def testChangeEventsIsNotAcquiredInPublishedState(self):
         # since r104169 event content doesn't use `ChangeEvents` anymore...
-        self.assertEqual(self.ni.acquiredRolesAreUsedBy(ModifyPortalContent), '')
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestOneStateWorkflow))
-    return suite
+        self.assertEqual(
+            self.ni.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
diff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py
index 14dda85..ec41a8d 100644
--- a/plone/app/workflow/tests/test_plone_workflow.py
+++ b/plone/app/workflow/tests/test_plone_workflow.py
@@ -1,113 +1,169 @@
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_NAME
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.WorkflowCore import WorkflowException
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
 
-class TestDefaultWorkflow(WorkflowTestCase):
+import unittest
 
-    def afterSetUp(self):
+
+class TestDefaultWorkflow(unittest.TestCase):
+
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
 
-        self.workflow.setChainForPortalTypes(['Document', 'News Item'], 'plone_workflow')
+        login(self.portal, 'manager')
+
+        self.workflow.setChainForPortalTypes(
+            ['Document', 'News Item'],
+            'plone_workflow',
+        )
 
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
+        self.portal.invokeFactory('Document', id='doc')
+        self.doc = self.portal.doc
 
-        self.folder.invokeFactory('Document', id='doc')
-        self.doc = self.folder.doc
+        self.portal.invokeFactory('News Item', id='ni')
+        self.ni = self.portal.ni
 
-        self.folder.invokeFactory('News Item', id='ni')
-        self.ni = self.folder.ni
+    def _state(self, obj):
+        return self.workflow.getInfoFor(obj, 'review_state')
 
     # Check allowed transitions
 
     def testOwnerHidesVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.doc), 'visible')
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.assertTrue(self.catalog(id='doc', review_state='private'))
+        self.assertEqual(self._state(self.doc), 'private')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='private')),
+            1
+        )
 
     def testOwnerShowsPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self.assertEqual(self._state(self.doc), 'private')
         self.workflow.doActionFor(self.doc, 'show')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1
+        )
 
     def testOwnerSubmitsVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.doc), 'visible')
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
-        self.assertTrue(self.catalog(id='doc', review_state='pending'))
+        self.assertEqual(self._state(self.doc), 'pending')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='pending')),
+            1,
+        )
 
     def testOwnerRetractsPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
+        self.assertEqual(self._state(self.doc), 'pending')
         self.workflow.doActionFor(self.doc, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     def testOwnerRetractsPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.login(TEST_USER_NAME)
+        self.assertEqual(self._state(self.doc), 'published')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.doc, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertTrue(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     def testReviewerPublishesPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
-        self.login('reviewer')
+        self.assertEqual(self._state(self.doc), 'pending')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.assertTrue(self.catalog(id='doc', review_state='published'))
+        self.assertEqual(self._state(self.doc), 'published')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='published')),
+            1,
+        )
 
     def testReviewerRejectsPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
-        self.login('reviewer')
+        self.assertEqual(self._state(self.doc), 'pending')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'reject')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     def testReviewerPublishesVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.login('reviewer')
+        self.assertEqual(self._state(self.doc), 'visible')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.assertTrue(self.catalog(id='doc', review_state='published'))
+        self.assertEqual(self._state(self.doc), 'published')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='published')),
+            1,
+        )
 
     def testReviewerRejectsPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
+        self.assertEqual(self._state(self.doc), 'published')
         self.workflow.doActionFor(self.doc, 'reject')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     # Check some forbidden transitions
 
     def testOwnerPublishesVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'publish')
+        self.assertEqual(self._state(self.doc), 'visible')
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'publish',
+        )
 
     def testOwnerSubmitsPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'submit')
+        self.assertEqual(self._state(self.doc), 'private')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'submit',
+        )
 
     def testManagerPublishesPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.login('manager')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'publish')
+        self.assertEqual(self._state(self.doc), 'private')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'publish',
+        )
 
     # No way am I going to write tests for all impossible transitions ;-)
 
@@ -117,13 +173,13 @@ def testViewVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInVisibleState(self):
@@ -134,13 +190,13 @@ def testViewPrivateDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(View, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(View, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPrivateState(self):
@@ -152,13 +208,13 @@ def testViewPendingDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed (TODO:?)
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed (TODO:?)
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPendingState(self):
@@ -166,23 +222,23 @@ def testViewIsNotAcquiredInPendingState(self):
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')
 
     def testViewPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPublishedState(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')
 
@@ -192,74 +248,86 @@ def testAccessVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed (TODO:?)
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed (TODO:?)
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPendingState(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     # Check modify content permissions
 
@@ -267,88 +335,101 @@ def testModifyVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
         # Owner is denied
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPendingState(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is denied
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
-        
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
+
     # Check catalog search
 
     def testFindVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='doc'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='doc'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='doc'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='doc'))
 
     def testFindPrivateDocument(self):
@@ -356,13 +437,13 @@ def testFindPrivateDocument(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='doc'))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(self.catalog(id='doc'))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(self.catalog(id='doc'))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(self.catalog(id='doc'))
 
     def testFindPendingDocument(self):
@@ -370,29 +451,29 @@ def testFindPendingDocument(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='doc'))
         # Member is allowed (TODO:?)
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='doc'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='doc'))
         # Anonymous is allowed (TODO:?)
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='doc'))
 
     def testFindPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(self.catalog(id='doc'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='doc'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='doc'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='doc'))
 
     def testMyWorklist(self):
@@ -400,11 +481,11 @@ def testMyWorklist(self):
         # docs should show up in his worklist.
         self.workflow.doActionFor(self.doc, 'submit')
         self.doc.manage_addLocalRoles('member', ['Reviewer'])
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         worklist = self.portal.my_worklist()
         self.assertTrue(len(worklist) == 1)
         self.assertTrue(worklist[0] == self.doc)
-        self.login('member')
+        login(self.portal, 'member')
         worklist = self.portal.my_worklist()
         self.assertTrue(len(worklist) == 1)
         self.assertTrue(worklist[0] == self.doc)
@@ -421,10 +502,3 @@ def testStateTitles(self):
             state = getattr(wf.states, state_id, None)
             if state is not None:
                 self.assertEqual(state.title, title)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestDefaultWorkflow))
-    return suite
diff --git a/plone/app/workflow/tests/test_remap.py b/plone/app/workflow/tests/test_remap.py
index 5bdae16..3909f34 100644
--- a/plone/app/workflow/tests/test_remap.py
+++ b/plone/app/workflow/tests/test_remap.py
@@ -1,27 +1,36 @@
-#
-# Tests the remap-workflow functionality
-#
-
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
 from plone.app.workflow.remap import remap_workflow
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+import unittest
+
+
+class TestRemapWorkflow(unittest.TestCase):
 
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 
-class TestRemapWorkflow(WorkflowTestCase):
+    def setUp(self):
+        self.portal = self.layer['portal']
 
-    def afterSetUp(self):
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
 
-        self.setRoles(('Manager', ))
+        login(self.portal, 'manager')
 
-        self.workflow.setChainForPortalTypes(('Document', ), ('simple_publication_workflow', ))
-        self.workflow.setChainForPortalTypes(('News Item', ), ('one_state_workflow', ))
+        self.workflow.setChainForPortalTypes(
+            ('Document', ),
+            ('simple_publication_workflow', ),
+        )
+        self.workflow.setChainForPortalTypes(
+            ('News Item', ),
+            ('one_state_workflow', ),
+        )
         self.workflow.setChainForPortalTypes(('Folder', ), ())
         self.workflow.setChainForPortalTypes(('Image', ), None)
 
         self.portal.invokeFactory('Document', 'd1')
         self.portal.invokeFactory('Document', 'd2')
-        self.folder.invokeFactory('Document', 'e2')
         self.portal.invokeFactory('News Item', 'n1')
         self.portal.invokeFactory('Image', 'i1')
 
@@ -34,9 +43,11 @@ def _chain(self, obj):
         return self.workflow.getChainFor(obj)
 
     def test_remap_multiple_no_state_map(self):
-        remap_workflow(self.portal,
-                       type_ids=('Document', 'News Item', ),
-                       chain=('plone_workflow', ))
+        remap_workflow(
+            self.portal,
+            type_ids=('Document', 'News Item', ),
+            chain=('plone_workflow', ),
+        )
 
         self.assertEqual(self._chain(self.portal.d1), ('plone_workflow', ))
         self.assertEqual(self._chain(self.portal.d2), ('plone_workflow', ))
@@ -47,10 +58,12 @@ def test_remap_multiple_no_state_map(self):
         self.assertEqual(self._state(self.portal.n1), 'visible')
 
     def test_remap_with_partial_state_map(self):
-        remap_workflow(self.portal,
-                       type_ids=('Document', 'News Item', ),
-                       chain=('plone_workflow', ),
-                       state_map={'published': 'published'})
+        remap_workflow(
+            self.portal,
+            type_ids=('Document', 'News Item', ),
+            chain=('plone_workflow', ),
+            state_map={'published': 'published'},
+        )
 
         self.assertEqual(self._chain(self.portal.d1), ('plone_workflow', ))
         self.assertEqual(self._chain(self.portal.d2), ('plone_workflow', ))
@@ -61,40 +74,47 @@ def test_remap_with_partial_state_map(self):
         self.assertEqual(self._state(self.portal.n1), 'published')
 
     def test_remap_to_no_workflow(self):
-
-        view_at_d1 = [r['name'] for r in self.portal.d1.rolesOfPermission('View') if r['selected']]
-        self.assertTrue('Anonymous' in view_at_d1)
-
-        remap_workflow(self.portal,
-                       type_ids=('Document', 'News Item', ),
-                       chain=())
+        view_at_d1 = [
+            r['name']
+            for r in self.portal.d1.rolesOfPermission('View')
+            if r['selected']
+        ]
+        self.assertIn('Anonymous', view_at_d1)
+
+        remap_workflow(
+            self.portal,
+            type_ids=('Document', 'News Item', ),
+            chain=(),
+        )
 
         self.assertEqual(self._chain(self.portal.d1), ())
         self.assertEqual(self._chain(self.portal.d2), ())
         self.assertEqual(self._chain(self.portal.n1), ())
 
-        view_at_d1 = [r['name'] for r in self.portal.d1.rolesOfPermission('View') if r['selected']]
+        view_at_d1 = [
+            r['name']
+            for r in self.portal.d1.rolesOfPermission('View')
+            if r['selected']
+        ]
         self.assertFalse('Anonymous' in view_at_d1)
         self.assertTrue(self.portal.d1.acquiredRolesAreUsedBy('View'))
 
     def test_remap_from_no_workflow(self):
-        remap_workflow(self.portal,
-                       type_ids=('Image', ),
-                       chain=('plone_workflow', ))
+        remap_workflow(
+            self.portal,
+            type_ids=('Image', ),
+            chain=('plone_workflow', ),
+        )
 
         self.assertEqual(self._chain(self.portal.i1), ('plone_workflow', ))
         self.assertEqual(self._state(self.portal.i1), 'visible')
 
     def test_remap_to_default(self):
-        remap_workflow(self.portal,
-                       type_ids=('Folder', ),
-                       chain='(Default)')
+        self.workflow.setDefaultChain('plone_workflow')
+        remap_workflow(
+            self.portal,
+            type_ids=('Image', ),
+            chain='(Default)',
+        )
 
         self.assertEqual(self._chain(self.portal.i1), ('plone_workflow', ))
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestRemapWorkflow))
-    return suite
diff --git a/plone/app/workflow/tests/test_sharing_view.py b/plone/app/workflow/tests/test_sharing_view.py
index aa40e31..26c245e 100644
--- a/plone/app/workflow/tests/test_sharing_view.py
+++ b/plone/app/workflow/tests/test_sharing_view.py
@@ -1,15 +1,29 @@
-#
-# Test the sharing browser view.
-#
-
-from base import WorkflowTestCase
-from plone.testing import z2
+# -*- coding: utf-8 -*-
+from borg.localrole.interfaces import ILocalRoleProvider
+from plone.app.testing import login
+from plone.app.workflow.events import LocalrolesModifiedEvent
+from plone.app.workflow.interfaces import ILocalrolesModifiedEvent
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+from Products.CMFCore.interfaces import ISiteRoot
+from zope.component import adapter
+from zope.component import getGlobalSiteManager
 from zope.component import getMultiAdapter
+from zope.component import provideAdapter
+from zope.event import notify
+from zope.interface import implementer
+from zope.interface import Interface
+
+import unittest
+
 
+class TestSharingView(unittest.TestCase):
 
-class TestSharingView(WorkflowTestCase):
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
 
-    def afterSetUp(self):
         self.portal.acl_users._doAddUser('testuser', 'secret', ['Member'], [])
         self.portal.acl_users._doAddUser('testreviewer', 'secret', ['Reviewer'], [])
         self.portal.acl_users._doAddUser('nonasciiuser', 'secret', ['Member'], [])
@@ -18,99 +32,126 @@ def afterSetUp(self):
         testuser.setMemberProperties(dict(email='testuser@plone.org'))
         nonasciiuser = self.portal.portal_membership.getMemberById('nonasciiuser')
         nonasciiuser.setMemberProperties(dict(fullname=u'\xc4\xdc\xdf'.encode('utf-8')))
-        self.loginAsPortalOwner()
+        login(self.portal, 'manager')
 
     def test_search_by_login_name(self):
         """Make sure we can search by login name on the Sharing tab.
 
         Prevents regressions of #6853.
         """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testuser'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'testuser'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.user_search_results()
-        self.assertTrue(len(results) and results[0].get('id') == 'testuser',
-            msg="Didn't find testuser when I searched by login name.")
-        self.assertTrue(results[0].get('login') == 'testuser',
-            msg="Didn't display login when I searched by login name.")
-
-    def search_by_email(self, term):
-        request = self.app.REQUEST
-        request.form['search_term'] = term
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('id'),
+            'testuser',
+            msg="Didn't find testuser when I searched by login name.",
+        )
+        self.assertEqual(
+            results[0].get('login'),
+            'testuser',
+            msg="Didn't display login when I searched by login name.",
+        )
+
+    def _search_by_email(self, term):
+        self.request.form['search_term'] = term
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.user_search_results()
-        self.assertTrue(len(results) and results[0].get('id') == 'testuser',
-            msg="Didn't find testuser when I searched for %s as email." % term)
-        self.assertTrue(results[0].get('login') == 'testuser',
-            msg="Didn't display login when I searched for %s as email." % term)
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('id'),
+            'testuser',
+            msg="Didn't find testuser when I searched for %s as email." % term,
+        )
+        self.assertEqual(
+            results[0].get('login'),
+            'testuser',
+            msg="Didn't display login when I searched for %s as email." % term,
+        )
 
     def test_search_by_email(self):
         """Make sure we can search by email on the Sharing tab.
 
         Prevents regressions of #11631.
         """
-        self.search_by_email('testuser@plone.org')
-        self.search_by_email('plone.org')
-        self.search_by_email('plone')
+        self._search_by_email('testuser@plone.org')
+        self._search_by_email('plone.org')
+        self._search_by_email('plone')
 
     def test_search_with_nonascii_users(self):
         """Make sure we can search with users that have non-ascii-chars in their fullname.
 
         Prevents regressions of #7576.
         """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'nonasciiuser'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'nonasciiuser'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.role_settings()
-        self.assertTrue(len(results) and results[-1].get('title') == '\xc3\x84\xc3\x9c\xc3\x9f', msg="Umlaute")
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[-1].get('title'),
+            '\xc3\x84\xc3\x9c\xc3\x9f',
+            msg="Umlaute",
+        )
 
     def test_search_for_group_by_id(self):
         """ Make sure we can search for groups by id """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.group_search_results()
-        self.assertTrue(len(results) and results[0].get('id') == 'testgroup',
-            msg="Didn't find testgroup when I searched by group id.")
-        self.assertTrue(results[0].get('login') is None)
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('id'),
+            'testgroup',
+            msg="Didn't find testgroup when I searched by group id.",
+        )
+        self.assertIsNone(results[0].get('login'))
 
     def test_search_for_group_by_title(self):
         """ Make sure we can search for groups by title """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'meaningful'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'meaningful'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.group_search_results()
-        self.assertTrue(len(results) and results[0].get('title') == 'Some meaningful title',
-            msg="Didn't find testuser when I searched by group title.")
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('title'),
+            'Some meaningful title',
+            msg="Didn't find testuser when I searched by group title.",
+        )
 
     def test_group_name_links_to_prefs_for_admin(self):
         """ Make sure that for admins  group name links to group prefs """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
-        self.assertIn('<a href="http://nohost/plone/'
-                      '@@usergroup-groupmembership?groupname=testgroup">',
-                      view(), msg="Group name was not linked to group prefs.")
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
+        self.assertIn(
+            '<a href="http://nohost/plone/@@usergroup-groupmembership?'
+            'groupname=testgroup">',
+            view(),
+            msg="Group name was not linked to group prefs.",
+        )
 
     def test_group_name_links_not_include_authusers(self):
         """ Make sure that for admins  group name links to group prefs """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
-        self.assertNotIn('<a href="http://nohost/plone/'
-                          '@@usergroup-groupmembership?groupname=AuthenticatedUsers">',  # noqa
-                      view(), msg="AuthenticatedUsers was linked to group prefs.")  # noqa
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
+        self.assertNotIn(
+            '<a href="http://nohost/plone/@@usergroup-groupmembership?'
+            'groupname=AuthenticatedUsers">',
+            view(),
+            msg="AuthenticatedUsers was linked to group prefs.",
+        )
 
     def test_group_name_doesnt_link_to_prefs_for_reviewer(self):
         """ Make sure that for admins  group name links to group prefs """
-        z2.login(self.portal['acl_users'], 'testreviewer')
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
-        self.assertNotIn('<a href="http://nohost/plone/'
-                         '@@usergroup-groupmembership?groupname=testgroup">',
-                         view(), msg="Group name link was unexpectedly shown "
-                                      "to reviewer.")
+        login(self.portal, 'testreviewer')
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
+        self.assertNotIn(
+            '<a href="http://nohost/plone/@@usergroup-groupmembership?'
+            'groupname=testgroup">',
+            view(),
+            msg="Group name link was unexpectedly shown to reviewer.",
+        )
 
     def test_local_manager_removes_inheritance(self):
         """When a user that inherits the right to remove inheritance do it,
@@ -123,19 +164,14 @@ def test_local_manager_removes_inheritance(self):
         subfolder = folder[folder.invokeFactory('Folder', 'subfolder')]
         folder.manage_setLocalRoles('localmanager', ('Manager',))
 
-        self.login('localmanager')
+        login(self.portal, 'localmanager')
         sharing = subfolder.restrictedTraverse('@@sharing')
         sharing.update_inherit(status=False, reindex=True)
 
         user = self.portal.portal_membership.getAuthenticatedMember()
-        self.assertTrue('Manager' in user.getRolesInContext(subfolder),)
+        self.assertIn('Manager', user.getRolesInContext(subfolder), )
 
     def test_borg_localroles(self):
-        from Products.CMFCore.interfaces import ISiteRoot
-        from borg.localrole.interfaces import ILocalRoleProvider
-        from zope.component import adapter, provideAdapter
-        from zope.interface import implementer
-
         @adapter(ISiteRoot)
         @implementer(ILocalRoleProvider)
         class LocalRoleProvider(object):
@@ -152,14 +188,14 @@ def getRoles(self, user_id):
         provideAdapter(LocalRoleProvider)
 
         self.portal.acl_users._doAddUser('borguser', 'secret', ['Member'], [])
-        self.loginAsPortalOwner()
+        login(self.portal, 'manager')
         sharing = self.portal.restrictedTraverse('@@sharing')
         info = sharing.existing_role_settings()
         self.assertEqual(2, len(info))
         self.assertEqual('borguser', info[1]['id'])
         self.assertEqual('acquired', info[1]['roles'][u'Contributor'])
 
-        #check borg local roles works with non-heriting roles policy
+        # check borg local roles works with non-heriting roles policy
         sharing = self.portal.restrictedTraverse('@@sharing')
         setattr(sharing.context, '__ac_local_roles_block__', True)
         info = sharing.existing_role_settings()
@@ -168,41 +204,30 @@ def getRoles(self, user_id):
         self.assertEqual('acquired', info[1]['roles'][u'Contributor'])
 
     def test_localroles_modified_event(self):
-        from zope.interface import Interface
-        from zope.interface import implementer
-        from zope.event import notify
-        from zope.component import getGlobalSiteManager
-        from plone.app.workflow.interfaces import ILocalrolesModifiedEvent
-        from plone.app.workflow.events import LocalrolesModifiedEvent
         # define local roles modified sensitive interface and class
         class ILRMEContext(Interface):
             pass
+
         @implementer(ILRMEContext)
         class LRMEContext(object):
             def __init__(self):
                 # gets set by handler
                 self.context = None
                 self.event = None
+
         # define handler
         def lrme_handler(context, event):
             context.context = context
             context.event = event
+
         # register handler
         gsm = getGlobalSiteManager()
         gsm.registerHandler(
             lrme_handler, (ILRMEContext, ILocalrolesModifiedEvent))
         # create object and notify subscriber
         context = LRMEContext()
-        request = self.app.REQUEST
-        event = LocalrolesModifiedEvent(context, request)
+        event = LocalrolesModifiedEvent(context, self.request)
         notify(event)
         # check subscriber called
         self.assertEqual(context.context, context)
         self.assertEqual(context.event, event)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestSharingView))
-    return suite
diff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py
index 14e9f02..f42febf 100644
--- a/plone/app/workflow/tests/test_simple_publication_workflow.py
+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py
@@ -1,44 +1,72 @@
-from base import WorkflowTestCase
-from plone.app.testing import TEST_USER_NAME
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.WorkflowCore import WorkflowException
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
 
+import unittest
 
-class TestSimplePublicationWorkflow(WorkflowTestCase):
 
-    def afterSetUp(self):
+SIMPLE = 'simple_publication_workflow'
+
+
+class TestSimplePublicationWorkflow(unittest.TestCase):
+
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
-        self.workflow.setChainForPortalTypes(['Document', 'News Item'], 'simple_publication_workflow')
-
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
-        self.portal.acl_users._doAddUser('editor', ' secret', ['Editor'], [])
-        self.portal.acl_users._doAddUser('reader', 'secret', ['Reader'], [])
 
-        self.folder.invokeFactory('Document', id='doc')
-        self.doc = self.folder.doc
-        self.folder.invokeFactory('News Item', id='ni')
-        self.ni = self.folder.ni
+        login(self.portal, 'manager')
+
+        self._set_workflow_for_portal_type(SIMPLE, 'Document')
+        self.portal.invokeFactory('Document', 'document1')
+        self.doc = self.portal.document1
+
+    def _set_workflow_for_portal_type(self, workflow_name, portal_type):
+        self.workflow.setChainForPortalTypes(
+            (portal_type, ),
+            (workflow_name, ),
+        )
+
+    def _check_state(self, obj, expected_review_state):
+        current_state = self.workflow.getInfoFor(obj, 'review_state')
+        self.assertEqual(
+            current_state,
+            expected_review_state,
+            'Object {0} should have review state {1} but has {2}'.format(
+                obj,
+                expected_review_state,
+                current_state,
+            )
+        )
 
     # Check allowed transitions: two for simple publication workflow
 
     def testOwnerSubmitAPrivateDocumentAndRetract(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self._check_state(self.doc, 'private')
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
+        self._check_state(self.doc, 'pending')
         self.workflow.doActionFor(self.doc, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self._check_state(self.doc, 'private')
 
     # Check some forbidden transitions
 
     def testOwnerCannotPublishDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'publish')
+        login(self.portal, 'member')
+        self._check_state(self.doc, 'private')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'publish',
+        )
 
     # Check view permission
 
@@ -46,53 +74,52 @@ def testViewIsNotAcquiredInPrivateState(self):
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')     # not checked
 
     def testViewPrivateDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self._check_state(self.doc, 'private')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, 'manager')
         self.assertTrue(checkPerm(View, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(View, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(View, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(View, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(View, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPublishedState(self):
         # transition requires Review portal content
-        self.login('manager')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')   # not checked
 
     def testViewPublishedDocument(self):
         # transition requires Review portal content
-        self.login('manager')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is denied  but he acquires through Anonymous Role
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(View, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(View, self.doc))
 
     # Check access contents info permission
@@ -103,51 +130,51 @@ def testAccessContentsInformationIsNotAcquiredInPrivateState(self):
     def testAccessContentsInformationPrivateDocument(self):
         self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '') # not checked
+        # not checked
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessContentsInformationPublishedDocument(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is denied but he acquires through Anonymous Role
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     # Check modify content permissions
@@ -158,58 +185,47 @@ def testModifyPrivateDocumentIsNotAcquiredInPrivateState(self):
     def testModifyPrivateDocument(self):
         self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Reader is denied
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
 
     def testModifyPublishedDocument(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
         # Manager is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Reader is denied
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
-
-        
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestSimplePublicationWorkflow))
-    return suite


Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2018-02-01T00:50:02+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.workflow/commit/77e0987356c79e5dc54b7b6f69710b7fd05a6efb

Update CHANGES

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index ba54d77..417d6da 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,7 +18,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Update tests to use testing best practices (and stop using the bbb module from p.a.testing).
+  [gforcada]
 
 
 3.0 (2017-05-29)


Repository: plone.app.workflow


Branch: refs/heads/master
Date: 2018-02-01T12:34:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.workflow/commit/6c548ac4a26706503df17279f1ea8d9b0b7ba099

Merge pull request #16 from plone/gforcada-rework-tests

Update tests to plone.app.testing best practices

Files changed:
A plone/app/workflow/testing.py
M CHANGES.rst
M plone/app/workflow/tests/onestateworkflow.rst
M plone/app/workflow/tests/sharingpage.rst
M plone/app/workflow/tests/test_exportimport.py
M plone/app/workflow/tests/test_folder_workflow.py
M plone/app/workflow/tests/test_functional.py
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_remap.py
M plone/app/workflow/tests/test_sharing_view.py
M plone/app/workflow/tests/test_simple_publication_workflow.py
D plone/app/workflow/tests/base.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ba54d77..417d6da 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,7 +18,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Update tests to use testing best practices (and stop using the bbb module from p.a.testing).
+  [gforcada]
 
 
 3.0 (2017-05-29)
diff --git a/plone/app/workflow/testing.py b/plone/app/workflow/testing.py
new file mode 100644
index 0000000..99bae91
--- /dev/null
+++ b/plone/app/workflow/testing.py
@@ -0,0 +1,51 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import applyProfile
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+from Products.CMFCore.utils import getToolByName
+
+import doctest
+
+
+class PloneAppWorkflowLayer(PloneSandboxLayer):
+
+    def setUpZope(self, app, configurationContext):
+        import plone.app.workflow
+        self.loadZCML(package=plone.app.workflow)
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'plone.app.contenttypes:default')
+
+        acl_users = getToolByName(portal, 'acl_users')
+
+        acl_users.userFolderAddUser('manager', 'secret', ['Manager', ], [])
+        acl_users.userFolderAddUser('member', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('owner', 'secret', ['Owner', ], [])
+        acl_users.userFolderAddUser('reviewer', 'secret', ['Reviewer', ], [])
+        acl_users.userFolderAddUser('editor', 'secret', ['Editor', ], [])
+        acl_users.userFolderAddUser('reader', 'secret', ['Reader', ], [])
+
+        acl_users.userFolderAddUser('delegate_reader', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('delegate_editor', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('delegate_contributor', 'secret', ['Member', ], [])
+        acl_users.userFolderAddUser('delegate_reviewer', 'secret', ['Member', ], [])
+
+
+PLONE_APP_WORKFLOW_FIXTURE = PloneAppWorkflowLayer()
+
+PLONE_APP_WORKFLOW_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),
+    name='PloneAppWorkflowLayer:Integration',
+)
+
+PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_APP_WORKFLOW_FIXTURE, ),
+    name='PloneAppWorkflowLayer:Functional',
+)
+
+optionflags = (
+    doctest.REPORT_ONLY_FIRST_FAILURE
+    | doctest.ELLIPSIS
+    | doctest.NORMALIZE_WHITESPACE
+)
diff --git a/plone/app/workflow/tests/base.py b/plone/app/workflow/tests/base.py
deleted file mode 100644
index cd2f5bb..0000000
--- a/plone/app/workflow/tests/base.py
+++ /dev/null
@@ -1,44 +0,0 @@
-from plone.app.testing.bbb import PloneTestCase
-
-
-class WorkflowTestCase(PloneTestCase):
-    """Base class for functional integration tests for plone.app.workflow.
-    This may provide specific set-up and tear-down operations, or provide
-    convenience methods.
-    """
-
-    def afterSetUp(self):
-
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager', ], [])
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('owner', 'secret', ['Owner', ], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer', ], [])
-        self.portal.acl_users._doAddUser('editor', 'secret', ['Editor', ], [])
-        self.portal.acl_users._doAddUser('reader', 'secret', ['Reader', ], [])
-
-        self.portal.acl_users._doAddUser('delegate_reader', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('delegate_editor', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('delegate_contributor', 'secret', ['Member', ], [])
-        self.portal.acl_users._doAddUser('delegate_reviewer', 'secret', ['Member', ], [])
-        #self.portal.acl_users._doAddUser('delegate_manager', 'secret', ['Member', ], [])
-
-        self.setRoles(('Manager', ))
-        self.folder.invokeFactory('News Item', 'newsitem1')
-        self.newsitem = self.folder.newsitem1
-        self.folder.invokeFactory('Document', 'document1')
-        self.document = self.folder.document1
-        self.setRoles(('Member', ))
-
-    def setUpDefaultWorkflow(self, defaultWorkflow=None, hasFolderSpecificWorkflow=False):
-        # XXX - TODO: we'll be able to replace this all with the new remap template
-        self.workflow = self.portal.portal_workflow
-        ctypes = self.portal.allowedContentTypes()
-        # XXX figure out the real way to get the types
-        ctypes = ('Document', 'Folder', 'News Item', 'Event', )
-
-        for ctype in ctypes:
-            if ctype in ('Folder', 'Smart Folder') and hasFolderSpecificWorkflow:
-                # XXX factor in *_folder_* workflow declarations
-                self.workflow.setChainForPortalTypes(('%s' % ctype, ), ('%s' % defaultWorkflow, ))
-            else:
-                self.workflow.setChainForPortalTypes(('%s' % ctype, ), ('%s' % defaultWorkflow, ))
diff --git a/plone/app/workflow/tests/onestateworkflow.rst b/plone/app/workflow/tests/onestateworkflow.rst
index 91e33ee..8ee8fe4 100644
--- a/plone/app/workflow/tests/onestateworkflow.rst
+++ b/plone/app/workflow/tests/onestateworkflow.rst
@@ -4,33 +4,36 @@ Functional Testing of the One State Workflow Definition
 
 First, some set-up of our site for testing:
 
-    >>> self.setUpDefaultWorkflow(defaultWorkflow='one_state_workflow')
-
     >>> from plone.testing.z2 import Browser
-    >>> browser = Browser(app)
 
-Let us log all exceptions, which is useful for debugging.
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> request = layer['request']
 
-    >>> self.portal.error_log._ignored_exceptions = ()
-    >>> import transaction; transaction.commit()
+    >>> portal_workflow = portal.portal_workflow
+    >>> portal_url = portal.absolute_url()
+    >>> folder_url = '%s/folder1' % portal_url
+    >>> document_url = '%s/folder1/document1' % portal_url
+
+    >>> browser = Browser(app)
 
 Verify that our items are actually all in the one_state_workflow and in our
 default 'published' state
 
-    >>> self.workflow.getChainForPortalType('Document')
+    >>> portal_workflow.getChainForPortalType('Document')
     ('one_state_workflow',)
-    >>> self.workflow.getChainForPortalType('Folder')
+    >>> portal_workflow.getChainForPortalType('Folder')
     ('one_state_workflow',)
-    >>> self.workflow.getChainForPortalType('News Item')
+    >>> portal_workflow.getChainForPortalType('News Item')
     ('one_state_workflow',)
-    >>> self.workflow.getChainForPortalType('Event')
+    >>> portal_workflow.getChainForPortalType('Event')
     ('one_state_workflow',)
 
-    >>> self.workflow.getInfoFor(self.folder, 'review_state')
+    >>> portal_workflow.getInfoFor(portal.folder1, 'review_state')
     'published'
-    >>> self.workflow.getInfoFor(self.folder.document1, 'review_state')
+    >>> portal_workflow.getInfoFor(portal.folder1.document1, 'review_state')
     'published'
-    >>> self.workflow.getInfoFor(self.folder.newsitem1, 'review_state')
+    >>> portal_workflow.getInfoFor(portal.folder1.newsitem1, 'review_state')
     'published'
 
 
@@ -42,11 +45,11 @@ here
 
 Now we logout, so that we can inspect our item as an anonymous user
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
 
 Head over to our temporary folder containing our one_state_workflow items
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
 
 We're not forced to log in and we can view the item. Thus, we have view permission
 
@@ -64,7 +67,7 @@ We shouldn't see the edit tab
     Traceback (most recent call last):
     ...
     LookupError: label 'Edit'...
-    >>> browser.open('%s' % self.folder.document1.absolute_url())
+    >>> browser.open(document_url)
     >>> browser.getControl('Edit')
     Traceback (most recent call last):
     ...
@@ -72,11 +75,11 @@ We shouldn't see the edit tab
 
 Or have the "Modify portal content" permission in any scenario
 
-    >>> browser.open('%s/edit' % self.folder.absolute_url())
+    >>> browser.open('%s/edit' % folder_url)
     >>> 'Login Name' in browser.contents
     True
 
-    >>> browser.open('%s/edit' % self.folder.document1.absolute_url())
+    >>> browser.open('%s/edit' % document_url)
     >>> 'Login Name' in browser.contents
     True
 
@@ -85,15 +88,15 @@ Test with the member role
 -------------------------
 Logout, so that we can inspect our item as another user of the system
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'member'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
 Head over to our temporary folder containing our one_state_workflow items
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
 
 We're not forced to log in and we can view the item. Thus, we have view permission
 
@@ -111,7 +114,7 @@ We shouldn't see the edit tab
     Traceback (most recent call last):
     ...
     LookupError: label 'Edit'...
-    >>> browser.open('%s' % self.folder.document1.absolute_url())
+    >>> browser.open(document_url)
     >>> browser.getControl('Edit')
     Traceback (most recent call last):
     ...
diff --git a/plone/app/workflow/tests/sharingpage.rst b/plone/app/workflow/tests/sharingpage.rst
index 57b01a4..d210b40 100644
--- a/plone/app/workflow/tests/sharingpage.rst
+++ b/plone/app/workflow/tests/sharingpage.rst
@@ -5,24 +5,26 @@ Functional Testing of the Sharing Page
 The test setup has already ensured that we have a number of users available.
 Let's also create some
 
-    >>> self.setUpDefaultWorkflow(defaultWorkflow='one_state_workflow')
-
     >>> from plone.testing.z2 import Browser
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> request = layer['request']
+
+    >>> portal_url = portal.absolute_url()
+    >>> folder_url = '%s/folder1' % portal_url
+
     >>> browser = Browser(app)
     >>> browser.handleErrors = False
 
-Let us log all exceptions, which is useful for debugging.
-
-    >>> self.portal.error_log._ignored_exceptions = ()
-    >>> import transaction; transaction.commit()
 
 Anonymous users
 ---------------
 
 When we log out, we cannot see the "Sharing" tab at all.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open(folder_url)
 
 We're not forced to log in and we can view the item. Thus, we have view
 permission.
@@ -44,13 +46,13 @@ A Manager should be able to delegate all the accessible roles. Let's also
 take this opportunity to delegate some roles so that we can check what the
 other roles can do.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'manager'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -73,7 +75,6 @@ other roles can do.
     >>> 'Changes saved' not in browser.contents
     True
     >>> browser.getControl(name='entries.role_Contributor:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -82,7 +83,6 @@ other roles can do.
     >>> browser.getControl(name='search_term').value = "delegate_editor"
     >>> browser.getControl(name='form.button.Search').click()
     >>> browser.getControl(name='entries.role_Editor:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -99,7 +99,6 @@ other roles can do.
     >>> browser.getControl(name='search_term').value = "delegate_reader"
     >>> browser.getControl(name='form.button.Search').click()
     >>> browser.getControl(name='entries.role_Reader:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -108,7 +107,6 @@ other roles can do.
     >>> browser.getControl(name='search_term').value = "delegate_reviewer"
     >>> browser.getControl(name='form.button.Search').click()
     >>> browser.getControl(name='entries.role_Reviewer:records').getControl(value='True',index=-1).click()
-    >>> request = self.portal.REQUEST
     >>> request.form['form.button.Save'] = 1
     >>> browser.getControl("Save").click()
     >>> 'Changes saved' in browser.contents
@@ -119,14 +117,13 @@ Owner
 
 The owner should be able to delegate Reader, Editor and Contributor.
 
-    >>> from plone.app.testing import TEST_USER_NAME
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
-    >>> browser.getControl(name='__ac_name').value = TEST_USER_NAME
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
+    >>> browser.getControl(name='__ac_name').value = 'member'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -150,13 +147,13 @@ Delegated Reader
 A delegated reader should only be able to view the page, not even get to the
 Sharing tab.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_reader'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing')
     Traceback (most recent call last):
     ...
@@ -167,13 +164,13 @@ Delegated Editor
 
 A delegated Editor can give other people "view" and "edit" rights.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_editor'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -191,13 +188,13 @@ Delegated Contributor
 
 A delegated Contributor cannot assign any further rights.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_contributor'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
     Traceback (most recent call last):
     ...
@@ -208,13 +205,13 @@ Delegated Reviewer
 
 A delegated Reviewer can assign "view" and "review" rights.
 
-    >>> browser.open('%s/logout' % self.portal.absolute_url())
-    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+    >>> browser.open('%s/logout' % portal_url)
+    >>> browser.open('%s/login_form' % portal_url)
     >>> browser.getControl(name='__ac_name').value = 'delegate_reviewer'
     >>> browser.getControl(name='__ac_password').value = 'secret'
     >>> browser.getControl('Log in').click()
 
-    >>> browser.open('%s' % self.folder.absolute_url())
+    >>> browser.open(folder_url)
     >>> browser.getLink('Sharing').click()
 
     >>> "Can add" in browser.contents
@@ -237,13 +234,13 @@ A delegated Reviewer can assign "view" and "review" rights.
 #
 #A delegated Manager can assign all rights.
 #
-#    >>> browser.open('%s/logout' % self.portal.absolute_url())
-#    >>> browser.open('%s/login_form' % self.portal.absolute_url())
+#    >>> browser.open('%s/logout' % portal_url)
+#    >>> browser.open('%s/login_form' % portal_url)
 #    >>> browser.getControl(name='__ac_name').value = 'delegate_manager'
 #    >>> browser.getControl(name='__ac_password').value = 'secret'
 #    >>> browser.getControl('Log in').click()
 #
-#    >>> browser.open('%s' % self.folder.absolute_url())
+#    >>> browser.open(folder_url)
 #    >>> browser.getLink('Sharing').click()
 #
 #    >>> "Can add" in browser.contents
diff --git a/plone/app/workflow/tests/test_exportimport.py b/plone/app/workflow/tests/test_exportimport.py
index f715cfc..ef91f2e 100644
--- a/plone/app/workflow/tests/test_exportimport.py
+++ b/plone/app/workflow/tests/test_exportimport.py
@@ -1,21 +1,24 @@
-import unittest
-from plone.testing.zca import UNIT_TESTING
-from zope.interface import Interface
-from zope.component import provideAdapter, provideUtility, getUtilitiesFor, getSiteManager
-
+# -*- coding: utf-8 -*-
 from five.localsitemanager import make_objectmanager_site
-from zope.site.hooks import setHooks, setSite, clearSite
-
-from plone.app.workflow.exportimport import import_sharing, export_sharing
+from OFS.Folder import Folder
+from plone.app.workflow.exportimport import export_sharing
+from plone.app.workflow.exportimport import import_sharing
 from plone.app.workflow.exportimport import SharingXMLAdapter
 from plone.app.workflow.exportimport import PersistentSharingPageRole
-
 from plone.app.workflow.interfaces import ISharingPageRole
-
+from plone.testing.zca import UNIT_TESTING
 from Products.GenericSetup.tests.common import DummyImportContext
 from Products.GenericSetup.tests.common import DummyExportContext
+from zope.component import getSiteManager
+from zope.component import getUtilitiesFor
+from zope.component import provideAdapter
+from zope.component import provideUtility
+from zope.interface import Interface
+from zope.site.hooks import clearSite
+from zope.site.hooks import setHooks
+from zope.site.hooks import setSite
 
-from OFS.Folder import Folder
+import unittest
 
 
 class ExportImportTest(unittest.TestCase):
@@ -363,7 +366,3 @@ def test_export_multiple(self):
         self.assertEqual('sharing.xml', export_context._wrote[0][0])
 
         self.assertEqual(export_xml, export_context._wrote[0][1])
-
-
-def test_suite():
-    return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/app/workflow/tests/test_folder_workflow.py b/plone/app/workflow/tests/test_folder_workflow.py
index 6a66baf..a9e5874 100644
--- a/plone/app/workflow/tests/test_folder_workflow.py
+++ b/plone/app/workflow/tests/test_folder_workflow.py
@@ -1,179 +1,248 @@
-from base import WorkflowTestCase
-
-from Products.CMFCore.WorkflowCore import WorkflowException
-
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ListFolderContents
 from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFCore.WorkflowCore import WorkflowException
+
+import unittest
 
 
-class TestFolderWorkflow(WorkflowTestCase):
+class TestFolderWorkflow(unittest.TestCase):
 
-    def afterSetUp(self):
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
 
+        login(self.portal, 'manager')
         self.workflow.setChainForPortalTypes(['Folder'], 'folder_workflow')
 
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
+        self.portal.invokeFactory('Folder', id='dir')
+        self.dir = self.portal.dir
+
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
 
-        self.folder.invokeFactory('Folder', id='dir')
-        self.dir = self.folder.dir
+    def _state(self, obj):
+        return self.workflow.getInfoFor(obj, 'review_state')
 
     # Check allowed transitions
 
     def testOwnerHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.assertTrue(self.catalog(id='dir', review_state='private'))
 
     def testOwnerShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.workflow.doActionFor(self.dir, 'show')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.assertTrue(self.catalog(id='dir', review_state='visible'))
 
     def testOwnerPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testOwnerPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testOwnerHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
+        self.assertEqual(self._state(self.dir), 'private')
         self.assertTrue(self.catalog(id='dir', review_state='private'))
 
     def testOwnerRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.workflow.doActionFor(self.dir, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.assertTrue(self.catalog(id='dir', review_state='visible'))
 
     def testManagerPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testManagerPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
+        self.assertEqual(self._state(self.dir), 'published')
         self.assertTrue(self.catalog(id='dir', review_state='published'))
 
     def testManagerRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.dir), 'visible')
         self.assertTrue(self.catalog(id='dir', review_state='visible'))
 
     # Check forbidden transitions
 
     def testMemberHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testMemberShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'show')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'show',
+        )
 
     def testMemberPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testMemberPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testMemberHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testMemberRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('member')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'retract')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'member')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'retract',
+        )
 
     def testReviewerHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testReviewerShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'show')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'show',
+        )
 
     def testReviewerPublishesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testReviewerPublishesPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'publish')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'publish',
+        )
 
     def testReviewerHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'hide')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'hide',
+        )
 
     def testReviewerRetractsPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('reviewer')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.dir, 'retract')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'reviewer')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.dir,
+            'retract',
+        )
 
     def testManagerHidesVisibleFolder(self):
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'visible')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'visible')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'hide')
 
     def testManagerShowsPrivateFolder(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'private')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'private')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'show')
 
     def testManagerHidesPublishedFolder(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.dir, 'review_state'), 'published')
-        self.login('manager')
+        self.assertEqual(self._state(self.dir), 'published')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.dir, 'hide')
 
     # Check view permissions
@@ -182,13 +251,13 @@ def testViewVisibleFolder(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.dir))
 
     def testViewIsNotAcquiredInVisibleState(self):
@@ -199,13 +268,13 @@ def testViewPrivateFolder(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(View, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(View, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(View, self.dir))
 
     def testViewIsNotAcquiredInPrivateState(self):
@@ -217,13 +286,13 @@ def testViewPublishedFolder(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.dir))
 
     def testViewIsNotAcquiredInPublishedState(self):
@@ -236,53 +305,62 @@ def testAccessVisibleFolderContents(self):
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
 
     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPrivateFolderContents(self):
         self.workflow.doActionFor(self.dir, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(AccessContentsInformation, self.dir))
 
     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPublishedFolderContents(self):
         self.workflow.doActionFor(self.dir, 'publish')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.dir))
 
     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     # Check modify contents permission
 
@@ -290,53 +368,62 @@ def testModifyVisibleFolderContents(self):
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
 
     def testModifyPortalContentIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPrivateFolderContents(self):
         self.workflow.doActionFor(self.dir, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
 
     def testModifyPortalContentIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPublishedFolderContents(self):
         self.workflow.doActionFor(self.dir, 'publish')
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.dir))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     # Check list contents permission
 
@@ -344,53 +431,62 @@ def testListVisibleFolderContents(self):
         # Owner is allowed
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
 
     def testListFolderContentsIsAcquiredInVisibleState(self):
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ListFolderContents), 'CHECKED')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ListFolderContents),
+            'CHECKED',
+        )
 
     def testListPrivateFolderContents(self):
         self.workflow.doActionFor(self.dir, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
 
     def testListFolderContentsIsAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.dir, 'hide')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ListFolderContents), 'CHECKED')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ListFolderContents),
+            'CHECKED',
+        )
 
     def testListPublishedFolderContents(self):
         self.workflow.doActionFor(self.dir, 'publish')
         # Owner is allowed
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ListFolderContents, self.dir))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ListFolderContents, self.dir))
 
     def testListFolderContentsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.dir, 'publish')
-        self.assertEqual(self.dir.acquiredRolesAreUsedBy(ListFolderContents), 'CHECKED')
+        self.assertEqual(
+            self.dir.acquiredRolesAreUsedBy(ListFolderContents),
+            'CHECKED',
+        )
 
     # Check catalog search
 
@@ -398,13 +494,13 @@ def testFindVisibleFolder(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='dir'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='dir'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='dir'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='dir'))
 
     def testFindPrivateFolder(self):
@@ -412,13 +508,13 @@ def testFindPrivateFolder(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='dir'))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(self.catalog(id='dir'))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(self.catalog(id='dir'))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(self.catalog(id='dir'))
 
     def testFindPublishedFolder(self):
@@ -426,18 +522,11 @@ def testFindPublishedFolder(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='dir'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='dir'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='dir'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='dir'))
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestFolderWorkflow))
-    return suite
diff --git a/plone/app/workflow/tests/test_functional.py b/plone/app/workflow/tests/test_functional.py
index 2400fea..25719e8 100644
--- a/plone/app/workflow/tests/test_functional.py
+++ b/plone/app/workflow/tests/test_functional.py
@@ -1,15 +1,56 @@
-from unittest import TestSuite
-from utils import optionflags
-from Testing.ZopeTestCase import ZopeDocFileSuite
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import setRoles
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING
+from plone.app.workflow.testing import optionflags
+from plone.testing import layered
+from Products.CMFCore.utils import getToolByName
+
+import doctest
+import transaction
+import unittest
+
+
+doctests = (
+    'onestateworkflow.rst',
+    'sharingpage.rst',
+)
+
+
+def setup(doctest):
+
+    portal = doctest.globs['layer']['portal']
+    login(portal, 'member')
+    setRoles(portal, 'member', ['Manager', ])
+    workflow = getToolByName(portal, 'portal_workflow')
+    workflow.setChainForPortalTypes(
+        ('Folder', 'Document', 'News Item', 'Event', ),
+        ('one_state_workflow', ),
+    )
+    portal.invokeFactory('Folder', 'folder1')
+    folder = portal.folder1
+    folder.invokeFactory('Document', 'document1')
+    folder.invokeFactory('News Item', 'newsitem1')
+    setRoles(portal, 'member', ['Member', ])
+    logout()
+    transaction.commit()
 
 
 def test_suite():
-    tests = ['onestateworkflow.rst', 'sharingpage.rst']
-    suite = TestSuite()
-    for test in tests:
-        suite.addTest(ZopeDocFileSuite(test,
-            optionflags=optionflags,
-            package="plone.app.workflow.tests",
-            test_class=WorkflowTestCase))
+    suite = unittest.TestSuite()
+    tests = [
+        layered(
+            doctest.DocFileSuite(
+                'tests/{0}'.format(test_file),
+                package='plone.app.workflow',
+                optionflags=optionflags,
+                setUp=setup,
+            ),
+            layer=PLONE_APP_WORKFLOW_FUNCTIONAL_TESTING,
+        )
+        for test_file in doctests
+    ]
+    suite.addTests(tests)
     return suite
+
diff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py
index 1625f1d..39b5892 100644
--- a/plone/app/workflow/tests/test_one_state_workflow.py
+++ b/plone/app/workflow/tests/test_one_state_workflow.py
@@ -1,58 +1,67 @@
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_NAME
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
 
+import unittest
 
-class TestOneStateWorkflow(WorkflowTestCase):
 
-    def afterSetUp(self):
+class TestOneStateWorkflow(unittest.TestCase):
+
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
+
+        login(self.portal, 'manager')
+
         self.workflow.setChainForPortalTypes(['Document', 'News Item'], 'one_state_workflow')
 
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
-        self.portal.acl_users._doAddUser('editor', ' secret', ['Editor'], [])
-        self.portal.acl_users._doAddUser('reader', 'secret', ['Reader'], [])
+        self.portal.invokeFactory('Document', id='doc')
+        self.doc = self.portal.doc
+        self.portal.invokeFactory('News Item', id='ni')
+        self.ni = self.portal.ni
 
-        self.folder.invokeFactory('Document', id='doc')
-        self.doc = self.folder.doc
-        self.folder.invokeFactory('News Item', id='ni')
-        self.ni = self.folder.ni
+    def _state(self, obj):
+        return self.workflow.getInfoFor(obj, 'review_state')
 
     # Check allowed transitions: none for one state workflow
 
     def testInitialState(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.assertEqual(self.workflow.getInfoFor(self.ni, 'review_state'), 'published')
+        self.assertEqual(self._state(self.doc), 'published')
+        self.assertEqual(self._state(self.ni), 'published')
 
     # Check view permission
 
     def testViewIsNotAcquiredInPublishedState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')   # not checked
+        self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')  # not checked
 
     def testViewPublishedDocument(self):
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(View, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(View, self.doc))
 
     # Check access contents info permission
@@ -62,56 +71,55 @@ def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
 
     def testAccessPublishedDocument(self):
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPublishedDocument(self):
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Reader is denied
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     # Check change events permission
 
     def testChangeEventsIsNotAcquiredInPublishedState(self):
         # since r104169 event content doesn't use `ChangeEvents` anymore...
-        self.assertEqual(self.ni.acquiredRolesAreUsedBy(ModifyPortalContent), '')
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestOneStateWorkflow))
-    return suite
+        self.assertEqual(
+            self.ni.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
diff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py
index 14dda85..ec41a8d 100644
--- a/plone/app/workflow/tests/test_plone_workflow.py
+++ b/plone/app/workflow/tests/test_plone_workflow.py
@@ -1,113 +1,169 @@
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_NAME
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.WorkflowCore import WorkflowException
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
 
-class TestDefaultWorkflow(WorkflowTestCase):
+import unittest
 
-    def afterSetUp(self):
+
+class TestDefaultWorkflow(unittest.TestCase):
+
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
 
-        self.workflow.setChainForPortalTypes(['Document', 'News Item'], 'plone_workflow')
+        login(self.portal, 'manager')
+
+        self.workflow.setChainForPortalTypes(
+            ['Document', 'News Item'],
+            'plone_workflow',
+        )
 
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
+        self.portal.invokeFactory('Document', id='doc')
+        self.doc = self.portal.doc
 
-        self.folder.invokeFactory('Document', id='doc')
-        self.doc = self.folder.doc
+        self.portal.invokeFactory('News Item', id='ni')
+        self.ni = self.portal.ni
 
-        self.folder.invokeFactory('News Item', id='ni')
-        self.ni = self.folder.ni
+    def _state(self, obj):
+        return self.workflow.getInfoFor(obj, 'review_state')
 
     # Check allowed transitions
 
     def testOwnerHidesVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.doc), 'visible')
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.assertTrue(self.catalog(id='doc', review_state='private'))
+        self.assertEqual(self._state(self.doc), 'private')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='private')),
+            1
+        )
 
     def testOwnerShowsPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self.assertEqual(self._state(self.doc), 'private')
         self.workflow.doActionFor(self.doc, 'show')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1
+        )
 
     def testOwnerSubmitsVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
+        self.assertEqual(self._state(self.doc), 'visible')
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
-        self.assertTrue(self.catalog(id='doc', review_state='pending'))
+        self.assertEqual(self._state(self.doc), 'pending')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='pending')),
+            1,
+        )
 
     def testOwnerRetractsPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
+        self.assertEqual(self._state(self.doc), 'pending')
         self.workflow.doActionFor(self.doc, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     def testOwnerRetractsPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.login(TEST_USER_NAME)
+        self.assertEqual(self._state(self.doc), 'published')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.doc, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertTrue(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     def testReviewerPublishesPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
-        self.login('reviewer')
+        self.assertEqual(self._state(self.doc), 'pending')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.assertTrue(self.catalog(id='doc', review_state='published'))
+        self.assertEqual(self._state(self.doc), 'published')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='published')),
+            1,
+        )
 
     def testReviewerRejectsPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
-        self.login('reviewer')
+        self.assertEqual(self._state(self.doc), 'pending')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'reject')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     def testReviewerPublishesVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.login('reviewer')
+        self.assertEqual(self._state(self.doc), 'visible')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
-        self.assertTrue(self.catalog(id='doc', review_state='published'))
+        self.assertEqual(self._state(self.doc), 'published')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='published')),
+            1,
+        )
 
     def testReviewerRejectsPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'published')
+        self.assertEqual(self._state(self.doc), 'published')
         self.workflow.doActionFor(self.doc, 'reject')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertTrue(self.catalog(id='doc', review_state='visible'))
+        self.assertEqual(self._state(self.doc), 'visible')
+        self.assertEqual(
+            len(self.catalog(id='doc', review_state='visible')),
+            1,
+        )
 
     # Check some forbidden transitions
 
     def testOwnerPublishesVisibleDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'visible')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'publish')
+        self.assertEqual(self._state(self.doc), 'visible')
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'publish',
+        )
 
     def testOwnerSubmitsPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'submit')
+        self.assertEqual(self._state(self.doc), 'private')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'submit',
+        )
 
     def testManagerPublishesPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.login('manager')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'publish')
+        self.assertEqual(self._state(self.doc), 'private')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'publish',
+        )
 
     # No way am I going to write tests for all impossible transitions ;-)
 
@@ -117,13 +173,13 @@ def testViewVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInVisibleState(self):
@@ -134,13 +190,13 @@ def testViewPrivateDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(View, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(View, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPrivateState(self):
@@ -152,13 +208,13 @@ def testViewPendingDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed (TODO:?)
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed (TODO:?)
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPendingState(self):
@@ -166,23 +222,23 @@ def testViewIsNotAcquiredInPendingState(self):
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')
 
     def testViewPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPublishedState(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')
 
@@ -192,74 +248,86 @@ def testAccessVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
         # Owner is allowed
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed (TODO:?)
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed (TODO:?)
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPendingState(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     # Check modify content permissions
 
@@ -267,88 +335,101 @@ def testModifyVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInVisibleState(self):
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPrivateDocument(self):
         self.workflow.doActionFor(self.doc, 'hide')
         # Owner is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPrivateState(self):
         self.workflow.doActionFor(self.doc, 'hide')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPendingDocument(self):
         self.workflow.doActionFor(self.doc, 'submit')
         # Owner is denied
+        setRoles(self.portal, 'manager', ['Owner', 'Member', ])
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPendingState(self):
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
 
     def testModifyPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is denied
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
-        
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(ModifyPortalContent),
+            '',
+        )
+
     # Check catalog search
 
     def testFindVisibleDocument(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='doc'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='doc'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='doc'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='doc'))
 
     def testFindPrivateDocument(self):
@@ -356,13 +437,13 @@ def testFindPrivateDocument(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='doc'))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(self.catalog(id='doc'))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(self.catalog(id='doc'))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(self.catalog(id='doc'))
 
     def testFindPendingDocument(self):
@@ -370,29 +451,29 @@ def testFindPendingDocument(self):
         # Owner is allowed
         self.assertTrue(self.catalog(id='doc'))
         # Member is allowed (TODO:?)
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='doc'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='doc'))
         # Anonymous is allowed (TODO:?)
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='doc'))
 
     def testFindPublishedDocument(self):
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, TEST_USER_NAME)
         self.assertTrue(self.catalog(id='doc'))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(self.catalog(id='doc'))
         # Reviewer is allowed
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(self.catalog(id='doc'))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(self.catalog(id='doc'))
 
     def testMyWorklist(self):
@@ -400,11 +481,11 @@ def testMyWorklist(self):
         # docs should show up in his worklist.
         self.workflow.doActionFor(self.doc, 'submit')
         self.doc.manage_addLocalRoles('member', ['Reviewer'])
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         worklist = self.portal.my_worklist()
         self.assertTrue(len(worklist) == 1)
         self.assertTrue(worklist[0] == self.doc)
-        self.login('member')
+        login(self.portal, 'member')
         worklist = self.portal.my_worklist()
         self.assertTrue(len(worklist) == 1)
         self.assertTrue(worklist[0] == self.doc)
@@ -421,10 +502,3 @@ def testStateTitles(self):
             state = getattr(wf.states, state_id, None)
             if state is not None:
                 self.assertEqual(state.title, title)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestDefaultWorkflow))
-    return suite
diff --git a/plone/app/workflow/tests/test_remap.py b/plone/app/workflow/tests/test_remap.py
index 5bdae16..3909f34 100644
--- a/plone/app/workflow/tests/test_remap.py
+++ b/plone/app/workflow/tests/test_remap.py
@@ -1,27 +1,36 @@
-#
-# Tests the remap-workflow functionality
-#
-
-from base import WorkflowTestCase
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
 from plone.app.workflow.remap import remap_workflow
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+import unittest
+
+
+class TestRemapWorkflow(unittest.TestCase):
 
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 
-class TestRemapWorkflow(WorkflowTestCase):
+    def setUp(self):
+        self.portal = self.layer['portal']
 
-    def afterSetUp(self):
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
 
-        self.setRoles(('Manager', ))
+        login(self.portal, 'manager')
 
-        self.workflow.setChainForPortalTypes(('Document', ), ('simple_publication_workflow', ))
-        self.workflow.setChainForPortalTypes(('News Item', ), ('one_state_workflow', ))
+        self.workflow.setChainForPortalTypes(
+            ('Document', ),
+            ('simple_publication_workflow', ),
+        )
+        self.workflow.setChainForPortalTypes(
+            ('News Item', ),
+            ('one_state_workflow', ),
+        )
         self.workflow.setChainForPortalTypes(('Folder', ), ())
         self.workflow.setChainForPortalTypes(('Image', ), None)
 
         self.portal.invokeFactory('Document', 'd1')
         self.portal.invokeFactory('Document', 'd2')
-        self.folder.invokeFactory('Document', 'e2')
         self.portal.invokeFactory('News Item', 'n1')
         self.portal.invokeFactory('Image', 'i1')
 
@@ -34,9 +43,11 @@ def _chain(self, obj):
         return self.workflow.getChainFor(obj)
 
     def test_remap_multiple_no_state_map(self):
-        remap_workflow(self.portal,
-                       type_ids=('Document', 'News Item', ),
-                       chain=('plone_workflow', ))
+        remap_workflow(
+            self.portal,
+            type_ids=('Document', 'News Item', ),
+            chain=('plone_workflow', ),
+        )
 
         self.assertEqual(self._chain(self.portal.d1), ('plone_workflow', ))
         self.assertEqual(self._chain(self.portal.d2), ('plone_workflow', ))
@@ -47,10 +58,12 @@ def test_remap_multiple_no_state_map(self):
         self.assertEqual(self._state(self.portal.n1), 'visible')
 
     def test_remap_with_partial_state_map(self):
-        remap_workflow(self.portal,
-                       type_ids=('Document', 'News Item', ),
-                       chain=('plone_workflow', ),
-                       state_map={'published': 'published'})
+        remap_workflow(
+            self.portal,
+            type_ids=('Document', 'News Item', ),
+            chain=('plone_workflow', ),
+            state_map={'published': 'published'},
+        )
 
         self.assertEqual(self._chain(self.portal.d1), ('plone_workflow', ))
         self.assertEqual(self._chain(self.portal.d2), ('plone_workflow', ))
@@ -61,40 +74,47 @@ def test_remap_with_partial_state_map(self):
         self.assertEqual(self._state(self.portal.n1), 'published')
 
     def test_remap_to_no_workflow(self):
-
-        view_at_d1 = [r['name'] for r in self.portal.d1.rolesOfPermission('View') if r['selected']]
-        self.assertTrue('Anonymous' in view_at_d1)
-
-        remap_workflow(self.portal,
-                       type_ids=('Document', 'News Item', ),
-                       chain=())
+        view_at_d1 = [
+            r['name']
+            for r in self.portal.d1.rolesOfPermission('View')
+            if r['selected']
+        ]
+        self.assertIn('Anonymous', view_at_d1)
+
+        remap_workflow(
+            self.portal,
+            type_ids=('Document', 'News Item', ),
+            chain=(),
+        )
 
         self.assertEqual(self._chain(self.portal.d1), ())
         self.assertEqual(self._chain(self.portal.d2), ())
         self.assertEqual(self._chain(self.portal.n1), ())
 
-        view_at_d1 = [r['name'] for r in self.portal.d1.rolesOfPermission('View') if r['selected']]
+        view_at_d1 = [
+            r['name']
+            for r in self.portal.d1.rolesOfPermission('View')
+            if r['selected']
+        ]
         self.assertFalse('Anonymous' in view_at_d1)
         self.assertTrue(self.portal.d1.acquiredRolesAreUsedBy('View'))
 
     def test_remap_from_no_workflow(self):
-        remap_workflow(self.portal,
-                       type_ids=('Image', ),
-                       chain=('plone_workflow', ))
+        remap_workflow(
+            self.portal,
+            type_ids=('Image', ),
+            chain=('plone_workflow', ),
+        )
 
         self.assertEqual(self._chain(self.portal.i1), ('plone_workflow', ))
         self.assertEqual(self._state(self.portal.i1), 'visible')
 
     def test_remap_to_default(self):
-        remap_workflow(self.portal,
-                       type_ids=('Folder', ),
-                       chain='(Default)')
+        self.workflow.setDefaultChain('plone_workflow')
+        remap_workflow(
+            self.portal,
+            type_ids=('Image', ),
+            chain='(Default)',
+        )
 
         self.assertEqual(self._chain(self.portal.i1), ('plone_workflow', ))
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestRemapWorkflow))
-    return suite
diff --git a/plone/app/workflow/tests/test_sharing_view.py b/plone/app/workflow/tests/test_sharing_view.py
index aa40e31..26c245e 100644
--- a/plone/app/workflow/tests/test_sharing_view.py
+++ b/plone/app/workflow/tests/test_sharing_view.py
@@ -1,15 +1,29 @@
-#
-# Test the sharing browser view.
-#
-
-from base import WorkflowTestCase
-from plone.testing import z2
+# -*- coding: utf-8 -*-
+from borg.localrole.interfaces import ILocalRoleProvider
+from plone.app.testing import login
+from plone.app.workflow.events import LocalrolesModifiedEvent
+from plone.app.workflow.interfaces import ILocalrolesModifiedEvent
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+from Products.CMFCore.interfaces import ISiteRoot
+from zope.component import adapter
+from zope.component import getGlobalSiteManager
 from zope.component import getMultiAdapter
+from zope.component import provideAdapter
+from zope.event import notify
+from zope.interface import implementer
+from zope.interface import Interface
+
+import unittest
+
 
+class TestSharingView(unittest.TestCase):
 
-class TestSharingView(WorkflowTestCase):
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
 
-    def afterSetUp(self):
         self.portal.acl_users._doAddUser('testuser', 'secret', ['Member'], [])
         self.portal.acl_users._doAddUser('testreviewer', 'secret', ['Reviewer'], [])
         self.portal.acl_users._doAddUser('nonasciiuser', 'secret', ['Member'], [])
@@ -18,99 +32,126 @@ def afterSetUp(self):
         testuser.setMemberProperties(dict(email='testuser@plone.org'))
         nonasciiuser = self.portal.portal_membership.getMemberById('nonasciiuser')
         nonasciiuser.setMemberProperties(dict(fullname=u'\xc4\xdc\xdf'.encode('utf-8')))
-        self.loginAsPortalOwner()
+        login(self.portal, 'manager')
 
     def test_search_by_login_name(self):
         """Make sure we can search by login name on the Sharing tab.
 
         Prevents regressions of #6853.
         """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testuser'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'testuser'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.user_search_results()
-        self.assertTrue(len(results) and results[0].get('id') == 'testuser',
-            msg="Didn't find testuser when I searched by login name.")
-        self.assertTrue(results[0].get('login') == 'testuser',
-            msg="Didn't display login when I searched by login name.")
-
-    def search_by_email(self, term):
-        request = self.app.REQUEST
-        request.form['search_term'] = term
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('id'),
+            'testuser',
+            msg="Didn't find testuser when I searched by login name.",
+        )
+        self.assertEqual(
+            results[0].get('login'),
+            'testuser',
+            msg="Didn't display login when I searched by login name.",
+        )
+
+    def _search_by_email(self, term):
+        self.request.form['search_term'] = term
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.user_search_results()
-        self.assertTrue(len(results) and results[0].get('id') == 'testuser',
-            msg="Didn't find testuser when I searched for %s as email." % term)
-        self.assertTrue(results[0].get('login') == 'testuser',
-            msg="Didn't display login when I searched for %s as email." % term)
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('id'),
+            'testuser',
+            msg="Didn't find testuser when I searched for %s as email." % term,
+        )
+        self.assertEqual(
+            results[0].get('login'),
+            'testuser',
+            msg="Didn't display login when I searched for %s as email." % term,
+        )
 
     def test_search_by_email(self):
         """Make sure we can search by email on the Sharing tab.
 
         Prevents regressions of #11631.
         """
-        self.search_by_email('testuser@plone.org')
-        self.search_by_email('plone.org')
-        self.search_by_email('plone')
+        self._search_by_email('testuser@plone.org')
+        self._search_by_email('plone.org')
+        self._search_by_email('plone')
 
     def test_search_with_nonascii_users(self):
         """Make sure we can search with users that have non-ascii-chars in their fullname.
 
         Prevents regressions of #7576.
         """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'nonasciiuser'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'nonasciiuser'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.role_settings()
-        self.assertTrue(len(results) and results[-1].get('title') == '\xc3\x84\xc3\x9c\xc3\x9f', msg="Umlaute")
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[-1].get('title'),
+            '\xc3\x84\xc3\x9c\xc3\x9f',
+            msg="Umlaute",
+        )
 
     def test_search_for_group_by_id(self):
         """ Make sure we can search for groups by id """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.group_search_results()
-        self.assertTrue(len(results) and results[0].get('id') == 'testgroup',
-            msg="Didn't find testgroup when I searched by group id.")
-        self.assertTrue(results[0].get('login') is None)
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('id'),
+            'testgroup',
+            msg="Didn't find testgroup when I searched by group id.",
+        )
+        self.assertIsNone(results[0].get('login'))
 
     def test_search_for_group_by_title(self):
         """ Make sure we can search for groups by title """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'meaningful'
-        view = getMultiAdapter((self.portal, request), name='sharing')
+        self.request.form['search_term'] = 'meaningful'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
         results = view.group_search_results()
-        self.assertTrue(len(results) and results[0].get('title') == 'Some meaningful title',
-            msg="Didn't find testuser when I searched by group title.")
+        self.assertTrue(len(results))
+        self.assertEqual(
+            results[0].get('title'),
+            'Some meaningful title',
+            msg="Didn't find testuser when I searched by group title.",
+        )
 
     def test_group_name_links_to_prefs_for_admin(self):
         """ Make sure that for admins  group name links to group prefs """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
-        self.assertIn('<a href="http://nohost/plone/'
-                      '@@usergroup-groupmembership?groupname=testgroup">',
-                      view(), msg="Group name was not linked to group prefs.")
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
+        self.assertIn(
+            '<a href="http://nohost/plone/@@usergroup-groupmembership?'
+            'groupname=testgroup">',
+            view(),
+            msg="Group name was not linked to group prefs.",
+        )
 
     def test_group_name_links_not_include_authusers(self):
         """ Make sure that for admins  group name links to group prefs """
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
-        self.assertNotIn('<a href="http://nohost/plone/'
-                          '@@usergroup-groupmembership?groupname=AuthenticatedUsers">',  # noqa
-                      view(), msg="AuthenticatedUsers was linked to group prefs.")  # noqa
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
+        self.assertNotIn(
+            '<a href="http://nohost/plone/@@usergroup-groupmembership?'
+            'groupname=AuthenticatedUsers">',
+            view(),
+            msg="AuthenticatedUsers was linked to group prefs.",
+        )
 
     def test_group_name_doesnt_link_to_prefs_for_reviewer(self):
         """ Make sure that for admins  group name links to group prefs """
-        z2.login(self.portal['acl_users'], 'testreviewer')
-        request = self.app.REQUEST
-        request.form['search_term'] = 'testgroup'
-        view = getMultiAdapter((self.portal, request), name='sharing')
-        self.assertNotIn('<a href="http://nohost/plone/'
-                         '@@usergroup-groupmembership?groupname=testgroup">',
-                         view(), msg="Group name link was unexpectedly shown "
-                                      "to reviewer.")
+        login(self.portal, 'testreviewer')
+        self.request.form['search_term'] = 'testgroup'
+        view = getMultiAdapter((self.portal, self.request), name='sharing')
+        self.assertNotIn(
+            '<a href="http://nohost/plone/@@usergroup-groupmembership?'
+            'groupname=testgroup">',
+            view(),
+            msg="Group name link was unexpectedly shown to reviewer.",
+        )
 
     def test_local_manager_removes_inheritance(self):
         """When a user that inherits the right to remove inheritance do it,
@@ -123,19 +164,14 @@ def test_local_manager_removes_inheritance(self):
         subfolder = folder[folder.invokeFactory('Folder', 'subfolder')]
         folder.manage_setLocalRoles('localmanager', ('Manager',))
 
-        self.login('localmanager')
+        login(self.portal, 'localmanager')
         sharing = subfolder.restrictedTraverse('@@sharing')
         sharing.update_inherit(status=False, reindex=True)
 
         user = self.portal.portal_membership.getAuthenticatedMember()
-        self.assertTrue('Manager' in user.getRolesInContext(subfolder),)
+        self.assertIn('Manager', user.getRolesInContext(subfolder), )
 
     def test_borg_localroles(self):
-        from Products.CMFCore.interfaces import ISiteRoot
-        from borg.localrole.interfaces import ILocalRoleProvider
-        from zope.component import adapter, provideAdapter
-        from zope.interface import implementer
-
         @adapter(ISiteRoot)
         @implementer(ILocalRoleProvider)
         class LocalRoleProvider(object):
@@ -152,14 +188,14 @@ def getRoles(self, user_id):
         provideAdapter(LocalRoleProvider)
 
         self.portal.acl_users._doAddUser('borguser', 'secret', ['Member'], [])
-        self.loginAsPortalOwner()
+        login(self.portal, 'manager')
         sharing = self.portal.restrictedTraverse('@@sharing')
         info = sharing.existing_role_settings()
         self.assertEqual(2, len(info))
         self.assertEqual('borguser', info[1]['id'])
         self.assertEqual('acquired', info[1]['roles'][u'Contributor'])
 
-        #check borg local roles works with non-heriting roles policy
+        # check borg local roles works with non-heriting roles policy
         sharing = self.portal.restrictedTraverse('@@sharing')
         setattr(sharing.context, '__ac_local_roles_block__', True)
         info = sharing.existing_role_settings()
@@ -168,41 +204,30 @@ def getRoles(self, user_id):
         self.assertEqual('acquired', info[1]['roles'][u'Contributor'])
 
     def test_localroles_modified_event(self):
-        from zope.interface import Interface
-        from zope.interface import implementer
-        from zope.event import notify
-        from zope.component import getGlobalSiteManager
-        from plone.app.workflow.interfaces import ILocalrolesModifiedEvent
-        from plone.app.workflow.events import LocalrolesModifiedEvent
         # define local roles modified sensitive interface and class
         class ILRMEContext(Interface):
             pass
+
         @implementer(ILRMEContext)
         class LRMEContext(object):
             def __init__(self):
                 # gets set by handler
                 self.context = None
                 self.event = None
+
         # define handler
         def lrme_handler(context, event):
             context.context = context
             context.event = event
+
         # register handler
         gsm = getGlobalSiteManager()
         gsm.registerHandler(
             lrme_handler, (ILRMEContext, ILocalrolesModifiedEvent))
         # create object and notify subscriber
         context = LRMEContext()
-        request = self.app.REQUEST
-        event = LocalrolesModifiedEvent(context, request)
+        event = LocalrolesModifiedEvent(context, self.request)
         notify(event)
         # check subscriber called
         self.assertEqual(context.context, context)
         self.assertEqual(context.event, event)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestSharingView))
-    return suite
diff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py
index 14e9f02..f42febf 100644
--- a/plone/app/workflow/tests/test_simple_publication_workflow.py
+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py
@@ -1,44 +1,72 @@
-from base import WorkflowTestCase
-from plone.app.testing import TEST_USER_NAME
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.workflow.testing import PLONE_APP_WORKFLOW_INTEGRATION_TESTING
 from Products.CMFCore.WorkflowCore import WorkflowException
 from Products.CMFCore.utils import _checkPermission as checkPerm
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
 
+import unittest
 
-class TestSimplePublicationWorkflow(WorkflowTestCase):
 
-    def afterSetUp(self):
+SIMPLE = 'simple_publication_workflow'
+
+
+class TestSimplePublicationWorkflow(unittest.TestCase):
+
+    layer = PLONE_APP_WORKFLOW_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
         self.catalog = self.portal.portal_catalog
         self.workflow = self.portal.portal_workflow
-        self.workflow.setChainForPortalTypes(['Document', 'News Item'], 'simple_publication_workflow')
-
-        self.portal.acl_users._doAddUser('member', 'secret', ['Member'], [])
-        self.portal.acl_users._doAddUser('reviewer', 'secret', ['Reviewer'], [])
-        self.portal.acl_users._doAddUser('manager', 'secret', ['Manager'], [])
-        self.portal.acl_users._doAddUser('editor', ' secret', ['Editor'], [])
-        self.portal.acl_users._doAddUser('reader', 'secret', ['Reader'], [])
 
-        self.folder.invokeFactory('Document', id='doc')
-        self.doc = self.folder.doc
-        self.folder.invokeFactory('News Item', id='ni')
-        self.ni = self.folder.ni
+        login(self.portal, 'manager')
+
+        self._set_workflow_for_portal_type(SIMPLE, 'Document')
+        self.portal.invokeFactory('Document', 'document1')
+        self.doc = self.portal.document1
+
+    def _set_workflow_for_portal_type(self, workflow_name, portal_type):
+        self.workflow.setChainForPortalTypes(
+            (portal_type, ),
+            (workflow_name, ),
+        )
+
+    def _check_state(self, obj, expected_review_state):
+        current_state = self.workflow.getInfoFor(obj, 'review_state')
+        self.assertEqual(
+            current_state,
+            expected_review_state,
+            'Object {0} should have review state {1} but has {2}'.format(
+                obj,
+                expected_review_state,
+                current_state,
+            )
+        )
 
     # Check allowed transitions: two for simple publication workflow
 
     def testOwnerSubmitAPrivateDocumentAndRetract(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self._check_state(self.doc, 'private')
         self.workflow.doActionFor(self.doc, 'submit')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'pending')
+        self._check_state(self.doc, 'pending')
         self.workflow.doActionFor(self.doc, 'retract')
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self._check_state(self.doc, 'private')
 
     # Check some forbidden transitions
 
     def testOwnerCannotPublishDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
-        self.assertRaises(WorkflowException, self.workflow.doActionFor, self.doc, 'publish')
+        login(self.portal, 'member')
+        self._check_state(self.doc, 'private')
+        self.assertRaises(
+            WorkflowException,
+            self.workflow.doActionFor,
+            self.doc,
+            'publish',
+        )
 
     # Check view permission
 
@@ -46,53 +74,52 @@ def testViewIsNotAcquiredInPrivateState(self):
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')     # not checked
 
     def testViewPrivateDocument(self):
-        self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
+        self._check_state(self.doc, 'private')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
+        login(self.portal, 'manager')
         self.assertTrue(checkPerm(View, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(View, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(View, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(View, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(View, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(View, self.doc))
 
     def testViewIsNotAcquiredInPublishedState(self):
         # transition requires Review portal content
-        self.login('manager')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(View), '')   # not checked
 
     def testViewPublishedDocument(self):
         # transition requires Review portal content
-        self.login('manager')
+        login(self.portal, 'manager')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(View, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(View, self.doc))
         # Reviewer is denied  but he acquires through Anonymous Role
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(View, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(View, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(View, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(View, self.doc))
 
     # Check access contents info permission
@@ -103,51 +130,51 @@ def testAccessContentsInformationIsNotAcquiredInPrivateState(self):
     def testAccessContentsInformationPrivateDocument(self):
         self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(AccessContentsInformation, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     def testAccessContentsInformationIsNotAcquiredInPublishedState(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
-        self.assertEqual(self.doc.acquiredRolesAreUsedBy(AccessContentsInformation), '') # not checked
+        # not checked
+        self.assertEqual(
+            self.doc.acquiredRolesAreUsedBy(AccessContentsInformation),
+            '',
+        )
 
     def testAccessContentsInformationPublishedDocument(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Member is allowed
-        self.login('member')
+        login(self.portal, 'member')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reviewer is denied but he acquires through Anonymous Role
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Anonymous is allowed
-        self.logout()
+        logout()
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
         # Reader is allowed
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertTrue(checkPerm(AccessContentsInformation, self.doc))
 
     # Check modify content permissions
@@ -158,58 +185,47 @@ def testModifyPrivateDocumentIsNotAcquiredInPrivateState(self):
     def testModifyPrivateDocument(self):
         self.assertEqual(self.workflow.getInfoFor(self.doc, 'review_state'), 'private')
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Reader is denied
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
     def testModifyPortalContentIsNotAcquiredInPublishedState(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
 
     def testModifyPublishedDocument(self):
         # transition requires Review portal content
-        self.login('manager')
         self.workflow.doActionFor(self.doc, 'publish')
         # Manager is allowed
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Owner is allowed
-        self.login(TEST_USER_NAME)
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Member is denied
-        self.login('member')
+        login(self.portal, 'member')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Reviewer is denied
-        self.login('reviewer')
+        login(self.portal, 'reviewer')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Anonymous is denied
-        self.logout()
+        logout()
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
         # Editor is allowed
-        self.login('editor')
+        login(self.portal, 'editor')
         self.assertTrue(checkPerm(ModifyPortalContent, self.doc))
         # Reader is denied
-        self.login('reader')
+        login(self.portal, 'reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
-
-        
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    suite.addTest(makeSuite(TestSimplePublicationWorkflow))
-    return suite


