Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-12-06T18:00:24+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/e17eeb185cd482ae6d62fffb2ab1d69cd580703d

Fix XMLSyntaxError when saving model source in the modeleditor.

Fixes https://github.com/plone/Products.CMFPlone/issues/3695

Files changed:
A news/3695.bugfix
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/tests/editing.rst

b'diff --git a/news/3695.bugfix b/news/3695.bugfix\nnew file mode 100644\nindex 00000000..67b4a363\n--- /dev/null\n+++ b/news/3695.bugfix\n@@ -0,0 +1,2 @@\n+Fix ``XMLSyntaxError`` when saving model source in the modeleditor.\n+[maurits]\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex c6a9fcb6..bfbe430e 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -27,7 +27,7 @@ def escaped_model_source(self):\n     @property\n     def model_source(self):\n         # Return modified source from textarea or the original FTI source.\n-        source = self.request.form.get("source") or self.context.fti.model_source\n+        source = self._unescaped_source_from_request() or self.context.fti.model_source\n         if source:\n             return source\n \n@@ -35,6 +35,35 @@ def model_source(self):\n         model = self.context.fti.lookupModel()\n         return serializeModel(model)\n \n+    def _unescaped_source_from_request(self):\n+        """Unescape the source from the request.\n+\n+        We expect that the source we get from the request is escaped html.\n+        If we pass this directly to the lxml parser, we get:\n+        Error: XMLSyntaxError: Start tag expected\n+        See https://github.com/plone/Products.CMFPlone/issues/3695\n+        So we need to unescape it.\n+\n+        There is a danger that we unescape too much.  If we somehow get already\n+        unescaped xml, this may contain escaped html.  If we then call html.unescape,\n+        this html gets unescaped, which is not what we want.\n+        The source likely starts with one of these strings:\n+\n+          &lt;?xml\n+          &lt;model\n+\n+        We check if it starts with \'&lt;\' and we only unescape then.\n+        """\n+        source = self.request.form.get("source")\n+        if not source:\n+            return\n+        # If you let the source start with spaces, it actually becomes invisible\n+        # in the code editor.  So strip it to be safe.\n+        source = source.strip()\n+        if source.startswith("&lt;"):\n+            source = html.unescape(source)\n+        return source\n+\n     def authorized(self, context, request):\n         authenticator = queryMultiAdapter((context, request), name="authenticator")\n         return authenticator and authenticator.verify()\n@@ -43,7 +72,7 @@ def __call__(self):\n         """View and eventually save the form."""\n \n         save = "form.button.save" in self.request.form\n-        source = self.request.form.get("source")\n+        source = self._unescaped_source_from_request()\n         if save and source:\n \n             # First, check for authenticator\ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 56c3512b..91f5466d 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -178,6 +178,8 @@ Go there and find the XML model source in a textarea, ready to be edited\n \n   >>> model_source = portal.portal_types.plonista.model_source\n   >>> escaped_model_source = escape(model_source, quote=False)\n+  >>> escaped_model_source in browser.contents\n+  False\n   >>> again_escaped_model_source = escape(escaped_model_source, quote=False)\n   >>> again_escaped_model_source in browser.contents\n   True\n@@ -221,15 +223,68 @@ Likewise, only `schema` tags are allowed inside the model::\n   >>> u"Error: all model elements must be \'schema\'" in browser.contents\n   True\n \n-Should work with real XML\n+Should work with real, escaped XML::\n \n-::\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(escaped_model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n+\n+portal.portal_types.plonista.model_source will not be exactly the same as the original model_source.\n+It may start with an xml declaration (<?xml version=\'1.0\' encoding=\'utf8\'?>)\n+and end with an extra newline.  But it will contain the original::\n+\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+\n+We used to test with unescaped XML which may have been what was really happening in a previous code editor.\n+So let\'s test this for good measure as well::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n   >>> u"statusmessage-info" in browser.contents\n   True\n   >>> u"Changes saved." in browser.contents\n   True\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+\n+Let\'s add a default to the rich text field: this needs to be escaped in the original source.\n+\n+::\n+\n+  >>> title_marker = \'<title>plone.app.textfield.RichText</title>\'\n+  >>> paragraph = escape(\'<p>Hello</p>\')\n+  >>> default_property = f\'<default>{paragraph}</default>\'\n+  >>> title_marker in model_source\n+  True\n+  >>> model_source = model_source.replace(title_marker, title_marker + \'\\n\' + default_property)\n+  >>> escaped_model_source = escape(model_source, quote=False)\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(escaped_model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+  >>> default_property in portal.portal_types.plonista.model_source\n+  True\n+\n+Let\'s check that all still works when we include the xml declaration in the source.\n+\n+  >>> model_source = portal.portal_types.plonista.model_source\n+  >>> \'<?xml\' in model_source\n+  True\n+  >>> escaped_model_source = escape(model_source, quote=False)\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(escaped_model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+  >>> model_source == portal.portal_types.plonista.model_source\n+  True\n \n We should be providing a link back to the fields editor::\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2022-12-06T23:39:53+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/753e926a8a1b3080c2586cd0a480a9594b934f27

Merge pull request #356 from plone/maurits-modeleditor-unescape-source

Fix XMLSyntaxError when saving model source in the modeleditor.

Files changed:
A news/3695.bugfix
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/tests/editing.rst

b'diff --git a/news/3695.bugfix b/news/3695.bugfix\nnew file mode 100644\nindex 00000000..67b4a363\n--- /dev/null\n+++ b/news/3695.bugfix\n@@ -0,0 +1,2 @@\n+Fix ``XMLSyntaxError`` when saving model source in the modeleditor.\n+[maurits]\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex c6a9fcb6..bfbe430e 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -27,7 +27,7 @@ def escaped_model_source(self):\n     @property\n     def model_source(self):\n         # Return modified source from textarea or the original FTI source.\n-        source = self.request.form.get("source") or self.context.fti.model_source\n+        source = self._unescaped_source_from_request() or self.context.fti.model_source\n         if source:\n             return source\n \n@@ -35,6 +35,35 @@ def model_source(self):\n         model = self.context.fti.lookupModel()\n         return serializeModel(model)\n \n+    def _unescaped_source_from_request(self):\n+        """Unescape the source from the request.\n+\n+        We expect that the source we get from the request is escaped html.\n+        If we pass this directly to the lxml parser, we get:\n+        Error: XMLSyntaxError: Start tag expected\n+        See https://github.com/plone/Products.CMFPlone/issues/3695\n+        So we need to unescape it.\n+\n+        There is a danger that we unescape too much.  If we somehow get already\n+        unescaped xml, this may contain escaped html.  If we then call html.unescape,\n+        this html gets unescaped, which is not what we want.\n+        The source likely starts with one of these strings:\n+\n+          &lt;?xml\n+          &lt;model\n+\n+        We check if it starts with \'&lt;\' and we only unescape then.\n+        """\n+        source = self.request.form.get("source")\n+        if not source:\n+            return\n+        # If you let the source start with spaces, it actually becomes invisible\n+        # in the code editor.  So strip it to be safe.\n+        source = source.strip()\n+        if source.startswith("&lt;"):\n+            source = html.unescape(source)\n+        return source\n+\n     def authorized(self, context, request):\n         authenticator = queryMultiAdapter((context, request), name="authenticator")\n         return authenticator and authenticator.verify()\n@@ -43,7 +72,7 @@ def __call__(self):\n         """View and eventually save the form."""\n \n         save = "form.button.save" in self.request.form\n-        source = self.request.form.get("source")\n+        source = self._unescaped_source_from_request()\n         if save and source:\n \n             # First, check for authenticator\ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 56c3512b..91f5466d 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -178,6 +178,8 @@ Go there and find the XML model source in a textarea, ready to be edited\n \n   >>> model_source = portal.portal_types.plonista.model_source\n   >>> escaped_model_source = escape(model_source, quote=False)\n+  >>> escaped_model_source in browser.contents\n+  False\n   >>> again_escaped_model_source = escape(escaped_model_source, quote=False)\n   >>> again_escaped_model_source in browser.contents\n   True\n@@ -221,15 +223,68 @@ Likewise, only `schema` tags are allowed inside the model::\n   >>> u"Error: all model elements must be \'schema\'" in browser.contents\n   True\n \n-Should work with real XML\n+Should work with real, escaped XML::\n \n-::\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(escaped_model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n+\n+portal.portal_types.plonista.model_source will not be exactly the same as the original model_source.\n+It may start with an xml declaration (<?xml version=\'1.0\' encoding=\'utf8\'?>)\n+and end with an extra newline.  But it will contain the original::\n+\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+\n+We used to test with unescaped XML which may have been what was really happening in a previous code editor.\n+So let\'s test this for good measure as well::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n   >>> u"statusmessage-info" in browser.contents\n   True\n   >>> u"Changes saved." in browser.contents\n   True\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+\n+Let\'s add a default to the rich text field: this needs to be escaped in the original source.\n+\n+::\n+\n+  >>> title_marker = \'<title>plone.app.textfield.RichText</title>\'\n+  >>> paragraph = escape(\'<p>Hello</p>\')\n+  >>> default_property = f\'<default>{paragraph}</default>\'\n+  >>> title_marker in model_source\n+  True\n+  >>> model_source = model_source.replace(title_marker, title_marker + \'\\n\' + default_property)\n+  >>> escaped_model_source = escape(model_source, quote=False)\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(escaped_model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+  >>> default_property in portal.portal_types.plonista.model_source\n+  True\n+\n+Let\'s check that all still works when we include the xml declaration in the source.\n+\n+  >>> model_source = portal.portal_types.plonista.model_source\n+  >>> \'<?xml\' in model_source\n+  True\n+  >>> escaped_model_source = escape(model_source, quote=False)\n+  >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@modeleditor?form.button.save=&source=%s&_authenticator=%s\' % (quote_plus(escaped_model_source), authenticator))\n+  >>> u"statusmessage-info" in browser.contents\n+  True\n+  >>> u"Changes saved." in browser.contents\n+  True\n+  >>> model_source in portal.portal_types.plonista.model_source\n+  True\n+  >>> model_source == portal.portal_types.plonista.model_source\n+  True\n \n We should be providing a link back to the fields editor::\n \n'

